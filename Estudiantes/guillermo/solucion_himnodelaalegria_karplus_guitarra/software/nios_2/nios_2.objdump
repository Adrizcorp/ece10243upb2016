
nios_2.elf:     file format elf32-littlenios2
nios_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0004022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000067e0 memsz 0x000067e0 flags r-x
    LOAD off    0x00007800 vaddr 0x00046800 paddr 0x00048330 align 2**12
         filesz 0x00001b30 memsz 0x00001b30 flags rw-
    LOAD off    0x00009e60 vaddr 0x00049e60 paddr 0x00049e60 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006580  0004022c  0004022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000054  000467ac  000467ac  000077ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b30  00046800  00048330  00007800  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00049e60  00049e60  00009e60  2**2
                  ALLOC, SMALL_DATA
  6 .RAM_jesus    00000000  00049fb4  00049fb4  00009330  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009330  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ab8  00000000  00000000  00009358  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000180b7  00000000  00000000  00009e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006974  00000000  00000000  00021ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000072d6  00000000  00000000  0002883b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000196c  00000000  00000000  0002fb14  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002beb  00000000  00000000  00031480  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000487e  00000000  00000000  0003406b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000388ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000360  00000000  00000000  00038930  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003b5ee  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003b5f1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003b5f4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003b5f5  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003b5f6  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003b5ff  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003b608  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  0003b611  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000007d  00000000  00000000  0003b61e  2**0
                  CONTENTS, READONLY
 26 .jdi          00003b78  00000000  00000000  0003b69b  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007db43  00000000  00000000  0003f213  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
0004022c l    d  .text	00000000 .text
000467ac l    d  .rodata	00000000 .rodata
00046800 l    d  .rwdata	00000000 .rwdata
00049e60 l    d  .bss	00000000 .bss
00049fb4 l    d  .RAM_jesus	00000000 .RAM_jesus
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_2_bsp//obj/HAL/src/crt0.o
00040264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 karplus.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000406b0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00046800 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00042328 l     F .text	00000008 __fp_lock
00042330 l     F .text	00000008 __fp_unlock
00042344 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000434ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000435d4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00043600 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00043708 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043804 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000438e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043acc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00048320 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00043d80 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043ed0 l     F .text	00000038 alt_dev_reg
000471d4 l     O .rwdata	00001060 jtag_uart
00048234 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000441e0 l     F .text	00000204 altera_avalon_jtag_uart_irq
000443e4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00044a04 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00044cb8 l     F .text	00000098 altera_avalon_uart_irq
00044d50 l     F .text	000000e0 altera_avalon_uart_rxirq
00044e30 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00044fc8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
000451f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000456a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00045b3c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00045c94 l     F .text	00000050 alt_get_errno
00045ce4 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00049e88 g     O .bss	00000004 alt_instruction_exception_handler
00043294 g     F .text	00000054 _isatty_r
00043a14 g     F .text	00000078 alt_main
00040804 g     F .text	000000b8 _puts_r
00049eb4 g     O .bss	00000100 alt_irq
000432e8 g     F .text	0000005c _lseek_r
00048330 g       *ABS*	00000000 __flash_rwdata_start
00049fb4 g       *ABS*	00000000 __alt_heap_start
00043014 g     F .text	0000005c __sseek
0004268c g     F .text	00000010 __sinit
000424e4 g     F .text	00000078 __sfmoreglue
00043aac g     F .text	00000020 __malloc_unlock
00041850 g     F .text	0000015c memmove
00042674 g     F .text	00000018 _cleanup
000460d4 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004323c g     F .text	00000058 _fstat_r
00049e6c g     O .bss	00000004 errno
00042f90 g     F .text	00000008 __seofread
00049e74 g     O .bss	00000004 alt_argv
000502f8 g       *ABS*	00000000 _gp
00043d50 g     F .text	00000030 usleep
00047054 g     O .rwdata	00000180 alt_fd_list
000460f4 g     F .text	00000090 alt_find_dev
00041718 g     F .text	00000138 memcpy
00042338 g     F .text	0000000c _cleanup_r
00045c1c g     F .text	00000078 alt_io_redirect
000467ac g       *ABS*	00000000 __DTOR_END__
000408bc g     F .text	00000014 puts
0004636c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000445e0 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000407cc g     F .text	00000008 .hidden __udivsi3
00043758 g     F .text	000000ac isatty
00049e68 g     O .bss	00000004 __malloc_top_pad
000409e4 g     F .text	000004a4 __sfvwrite_r
00041f4c g     F .text	00000054 _sbrk_r
00043344 g     F .text	0000005c _read_r
00048318 g     O .rwdata	00000004 alt_max_fd
00043128 g     F .text	00000100 _fclose_r
000422f8 g     F .text	00000030 fflush
00049e64 g     O .bss	00000004 __malloc_max_sbrked_mem
00043938 g     F .text	000000dc lseek
000482f8 g     O .rwdata	00000004 _global_impure_ptr
000419ac g     F .text	000005a0 _realloc_r
00049fb4 g       *ABS*	00000000 __bss_end
00045a4c g     F .text	000000f0 alt_iic_isr_register
00045fd0 g     F .text	00000104 alt_tick
00044c10 g     F .text	000000a8 altera_avalon_uart_init
000426ac g     F .text	00000018 __fp_lock_all
00045a00 g     F .text	0000004c alt_ic_irq_enabled
00045f38 g     F .text	00000098 alt_alarm_stop
00049e7c g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d0 alt_irq_handler
0004702c g     O .rwdata	00000028 alt_dev_null
00045688 g     F .text	0000001c alt_dcache_flush_all
00048330 g       *ABS*	00000000 __ram_rwdata_end
00048310 g     O .rwdata	00000008 alt_dev_list
00043dd0 g     F .text	00000100 write
00046800 g       *ABS*	00000000 __ram_rodata_end
00043650 g     F .text	000000b8 fstat
000407d4 g     F .text	00000008 .hidden __umodsi3
00049fb4 g       *ABS*	00000000 end
00045244 g     F .text	000001ac altera_avalon_uart_write
0004411c g     F .text	000000c4 altera_avalon_jtag_uart_init
000401cc g     F .exceptions	00000060 alt_instruction_exception_entry
00040588 g     F .text	00000064 play_tone
000467ac g       *ABS*	00000000 __CTOR_LIST__
00075b60 g       *ABS*	00000000 __alt_stack_pointer
00044a78 g     F .text	00000088 alt_avalon_timer_sc_init
00044b60 g     F .text	00000060 altera_avalon_uart_write_fd
00044bc0 g     F .text	00000050 altera_avalon_uart_close_fd
000447ec g     F .text	00000218 altera_avalon_jtag_uart_write
0004269c g     F .text	00000004 __sfp_lock_acquire
00041630 g     F .text	000000e8 memchr
00042800 g     F .text	000002f0 _free_r
000404bc g     F .text	000000cc inject_noise
000465e4 g     F .text	00000194 __call_exitprocs
00048300 g     O .rwdata	00000004 __malloc_sbrk_base
0004022c g     F .text	0000003c _start
00049e80 g     O .bss	00000004 _alt_tick_rate
000408e8 g     F .text	00000064 rand
00049e84 g     O .bss	00000004 _alt_nticks
00043b1c g     F .text	00000104 read
00043f3c g     F .text	0000007c alt_sys_init
000464d0 g     F .text	00000114 __register_exitproc
0004448c g     F .text	00000068 altera_avalon_jtag_uart_close
000407dc g     F .text	00000028 .hidden __mulsi3
00046800 g       *ABS*	00000000 __ram_rwdata_start
000467ac g       *ABS*	00000000 __ram_rodata_start
00049e8c g     O .bss	00000028 __malloc_current_mallinfo
00043fb8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00046298 g     F .text	000000d4 alt_get_fd
00045530 g     F .text	00000158 alt_busy_sleep
000430d4 g     F .text	00000054 _close_r
00046454 g     F .text	0000007c memcmp
00044078 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00049fb4 g       *ABS*	00000000 __alt_stack_base
000440c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00041fa0 g     F .text	00000130 __swsetup_r
0004255c g     F .text	00000118 __sfp
00046c24 g     O .rwdata	00000408 __malloc_av_
000426a8 g     F .text	00000004 __sinit_lock_release
00042f3c g     F .text	00000054 __sread
00046184 g     F .text	00000114 alt_find_file
000456f4 g     F .text	000000a4 alt_dev_llist_insert
00043a8c g     F .text	00000020 __malloc_lock
00043ca0 g     F .text	000000b0 sbrk
000420d0 g     F .text	00000228 _fflush_r
00049e60 g       *ABS*	00000000 __bss_start
00042e18 g     F .text	00000124 memset
00040268 g     F .text	00000254 main
00049e78 g     O .bss	00000004 alt_envp
00049e60 g     O .bss	00000004 __malloc_max_total_mem
00044018 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000408d0 g     F .text	00000018 srand
00040000 g       *ABS*	00000000 __alt_mem_RAM_jesus
00043070 g     F .text	00000008 __sclose
00075b60 g       *ABS*	00000000 __alt_heap_limit
00043228 g     F .text	00000014 fclose
00040e88 g     F .text	000007a8 _malloc_r
0004831c g     O .rwdata	00000004 alt_errno
00042af0 g     F .text	000000b8 _fwalk
0004071c g     F .text	00000054 .hidden __divsi3
000426dc g     F .text	00000124 _malloc_trim_r
000467ac g       *ABS*	00000000 __CTOR_END__
000467ac g       *ABS*	00000000 __flash_rodata_start
000467ac g       *ABS*	00000000 __DTOR_LIST__
00043f08 g     F .text	00000034 alt_irq_init
00043c20 g     F .text	00000080 alt_release_fd
00046408 g     F .text	00000014 atexit
00043078 g     F .text	0000005c _write_r
000482fc g     O .rwdata	00000004 _impure_ptr
00049e70 g     O .bss	00000004 alt_argc
000457f4 g     F .text	0000005c _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
000426c4 g     F .text	00000018 __fp_unlock_all
00048308 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004586c g     F .text	00000050 alt_ic_isr_register
00048330 g       *ABS*	00000000 _edata
00044b00 g     F .text	00000060 altera_avalon_uart_read_fd
00049fb4 g       *ABS*	00000000 _end
0004022c g       *ABS*	00000000 __ram_exceptions_end
000444f4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0004595c g     F .text	000000a4 alt_ic_irq_disable
00042f98 g     F .text	0000007c __swrite
00048304 g     O .rwdata	00000004 __malloc_trim_threshold
00040644 g     F .text	0000006c init_karplus
0004641c g     F .text	00000038 exit
00042ba8 g     F .text	000000b8 _fwalk_reent
00040770 g     F .text	0000005c .hidden __modsi3
00075b60 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000426a0 g     F .text	00000004 __sfp_lock_release
00044f74 g     F .text	00000054 altera_avalon_uart_close
00046778 g     F .text	00000034 _exit
000453f0 g     F .text	00000140 alt_alarm_start
000405ec g     F .text	00000058 set_karplus_frequency
000433a0 g     F .text	0000010c .hidden __muldi3
00042c60 g     F .text	000001b8 __smakebuf_r
0004094c g     F .text	00000098 strlen
00045dd8 g     F .text	00000160 open
00045850 g     F .text	0000001c alt_icache_flush_all
00048324 g     O .rwdata	00000004 alt_priority_mask
000458bc g     F .text	000000a0 alt_ic_irq_enable
00045018 g     F .text	000001dc altera_avalon_uart_read
00048328 g     O .rwdata	00000008 alt_alarm_list
00045798 g     F .text	0000005c _do_ctors
000434fc g     F .text	000000d8 close
00043868 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
000426a4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408b14 	ori	at,at,556
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401cc0 	call	401cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10a7ad04 	addi	r2,r2,-24908
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10a7ad04 	addi	r2,r2,-24908
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffca5cc>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffca5c0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	e037883a 	mov	sp,fp
   401bc:	dfc00117 	ldw	ra,4(sp)
   401c0:	df000017 	ldw	fp,0(sp)
   401c4:	dec00204 	addi	sp,sp,8
   401c8:	f800283a 	ret

000401cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401cc:	defffb04 	addi	sp,sp,-20
   401d0:	dfc00415 	stw	ra,16(sp)
   401d4:	df000315 	stw	fp,12(sp)
   401d8:	df000304 	addi	fp,sp,12
   401dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e0:	00bfffc4 	movi	r2,-1
   401e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401ec:	d0a6e417 	ldw	r2,-25712(gp)
   401f0:	10000726 	beq	r2,zero,40210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f4:	d0a6e417 	ldw	r2,-25712(gp)
   401f8:	e0fffd17 	ldw	r3,-12(fp)
   401fc:	1809883a 	mov	r4,r3
   40200:	e17fff17 	ldw	r5,-4(fp)
   40204:	e1bffe17 	ldw	r6,-8(fp)
   40208:	103ee83a 	callr	r2
   4020c:	00000206 	br	40218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40214:	0005883a 	mov	r2,zero
}
   40218:	e037883a 	mov	sp,fp
   4021c:	dfc00117 	ldw	ra,4(sp)
   40220:	df000017 	ldw	fp,0(sp)
   40224:	dec00204 	addi	sp,sp,8
   40228:	f800283a 	ret

Disassembly of section .text:

0004022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   4022c:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40230:	ded6d814 	ori	sp,sp,23392
    movhi gp, %hi(_gp)
   40234:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40238:	d680be14 	ori	gp,gp,760
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   4023c:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40240:	10a79814 	ori	r2,r2,40544

    movhi r3, %hi(__bss_end)
   40244:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40248:	18e7ed14 	ori	r3,r3,40884

    beq r2, r3, 1f
   4024c:	10c00326 	beq	r2,r3,4025c <_start+0x30>

0:
    stw zero, (r2)
   40250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40258:	10fffd36 	bltu	r2,r3,40250 <__alt_data_end+0xfffca6f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   4025c:	00438680 	call	43868 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40260:	0043a140 	call	43a14 <alt_main>

00040264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40264:	003fff06 	br	40264 <__alt_data_end+0xfffca704>

00040268 <main>:
 */

#include "./karplus/karplus.h"

int main()
{
   40268:	defffe04 	addi	sp,sp,-8
   4026c:	dfc00115 	stw	ra,4(sp)
   40270:	df000015 	stw	fp,0(sp)
   40274:	d839883a 	mov	fp,sp

	printf("Hello from Nios II!\n");
   40278:	01000134 	movhi	r4,4
   4027c:	2119eb04 	addi	r4,r4,26540
   40280:	00408bc0 	call	408bc <puts>
	init_karplus();
   40284:	00406440 	call	40644 <init_karplus>
	set_karplus_frequency(44100);
   40288:	012b1114 	movui	r4,44100
   4028c:	00405ec0 	call	405ec <set_karplus_frequency>
	  play_tone(silence,1);
	  play_tone(G_0,400);
	  play_tone(silence,400);*/

	//O Christmas Tree Tannenbaum
		play_tone(B_3,400);
   40290:	010020c4 	movi	r4,131
   40294:	01406404 	movi	r5,400
   40298:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_3,200);
   4029c:	01001e04 	movi	r4,120
   402a0:	01403204 	movi	r5,200
   402a4:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_3,200);
   402a8:	01001e04 	movi	r4,120
   402ac:	01403204 	movi	r5,200
   402b0:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_3,600);
   402b4:	01001e04 	movi	r4,120
   402b8:	01409604 	movi	r5,600
   402bc:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_5,400);
   402c0:	01001ac4 	movi	r4,107
   402c4:	01406404 	movi	r5,400
   402c8:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_7,200);
   402cc:	010017c4 	movi	r4,95
   402d0:	01403204 	movi	r5,200
   402d4:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_7,200);
   402d8:	010017c4 	movi	r4,95
   402dc:	01403204 	movi	r5,200
   402e0:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_7,600);
   402e4:	010017c4 	movi	r4,95
   402e8:	01409604 	movi	r5,600
   402ec:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_7,200);
   402f0:	010017c4 	movi	r4,95
   402f4:	01403204 	movi	r5,200
   402f8:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_5,200);
   402fc:	01001ac4 	movi	r4,107
   40300:	01403204 	movi	r5,200
   40304:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_7,200);
   40308:	010017c4 	movi	r4,95
   4030c:	01403204 	movi	r5,200
   40310:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_8,600);
   40314:	01001684 	movi	r4,90
   40318:	01409604 	movi	r5,600
   4031c:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_2,400);
   40320:	01001fc4 	movi	r4,127
   40324:	01406404 	movi	r5,400
   40328:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_5,400);
   4032c:	01001ac4 	movi	r4,107
   40330:	01406404 	movi	r5,400
   40334:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_3,1000);
   40338:	01001e04 	movi	r4,120
   4033c:	0140fa04 	movi	r5,1000
   40340:	00405880 	call	40588 <play_tone>
		play_tone(B_3,400);
   40344:	010020c4 	movi	r4,131
   40348:	01406404 	movi	r5,400
   4034c:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_3,200);
   40350:	01001e04 	movi	r4,120
   40354:	01403204 	movi	r5,200
   40358:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_3,200);
   4035c:	01001e04 	movi	r4,120
   40360:	01403204 	movi	r5,200
   40364:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_3,600);
   40368:	01001e04 	movi	r4,120
   4036c:	01409604 	movi	r5,600
   40370:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_5,400);
   40374:	01001ac4 	movi	r4,107
   40378:	01406404 	movi	r5,400
   4037c:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_7,200);
   40380:	010017c4 	movi	r4,95
   40384:	01403204 	movi	r5,200
   40388:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_7,200);
   4038c:	010017c4 	movi	r4,95
   40390:	01403204 	movi	r5,200
   40394:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_7,600);
   40398:	010017c4 	movi	r4,95
   4039c:	01409604 	movi	r5,600
   403a0:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_7,200);
   403a4:	010017c4 	movi	r4,95
   403a8:	01403204 	movi	r5,200
   403ac:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_5,200);
   403b0:	01001ac4 	movi	r4,107
   403b4:	01403204 	movi	r5,200
   403b8:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_7,200);
   403bc:	010017c4 	movi	r4,95
   403c0:	01403204 	movi	r5,200
   403c4:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_8,600);
   403c8:	01001684 	movi	r4,90
   403cc:	01409604 	movi	r5,600
   403d0:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_2,400);
   403d4:	01001fc4 	movi	r4,127
   403d8:	01406404 	movi	r5,400
   403dc:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_5,400);
   403e0:	01001ac4 	movi	r4,107
   403e4:	01406404 	movi	r5,400
   403e8:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_3,1000);
   403ec:	01001e04 	movi	r4,120
   403f0:	0140fa04 	movi	r5,1000
   403f4:	00405880 	call	40588 <play_tone>
		//
		play_tone(HIGH_E_10,200);
   403f8:	01001404 	movi	r4,80
   403fc:	01403204 	movi	r5,200
   40400:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_10,200);
   40404:	01001404 	movi	r4,80
   40408:	01403204 	movi	r5,200
   4040c:	00405880 	call	40588 <play_tone>
		play_tone(B_12,200);
   40410:	01001384 	movi	r4,78
   40414:	01403204 	movi	r5,200
   40418:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_12,400);
   4041c:	010011c4 	movi	r4,71
   40420:	01406404 	movi	r5,400
   40424:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_10,200);
   40428:	01001404 	movi	r4,80
   4042c:	01403204 	movi	r5,200
   40430:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_10,200);
   40434:	01001404 	movi	r4,80
   40438:	01403204 	movi	r5,200
   4043c:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_8,200);
   40440:	01001684 	movi	r4,90
   40444:	01403204 	movi	r5,200
   40448:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_8,400);
   4044c:	01001684 	movi	r4,90
   40450:	01406404 	movi	r5,400
   40454:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_8,200);
   40458:	01001684 	movi	r4,90
   4045c:	01403204 	movi	r5,200
   40460:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_8,200);
   40464:	01001684 	movi	r4,90
   40468:	01403204 	movi	r5,200
   4046c:	00405880 	call	40588 <play_tone>
		play_tone(B_10,200);
   40470:	01001604 	movi	r4,88
   40474:	01403204 	movi	r5,200
   40478:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_10,400);
   4047c:	01001404 	movi	r4,80
   40480:	01406404 	movi	r5,400
   40484:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_8,200);
   40488:	01001684 	movi	r4,90
   4048c:	01403204 	movi	r5,200
   40490:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_8,200);
   40494:	01001684 	movi	r4,90
   40498:	01403204 	movi	r5,200
   4049c:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_7,200);
   404a0:	010017c4 	movi	r4,95
   404a4:	01403204 	movi	r5,200
   404a8:	00405880 	call	40588 <play_tone>
		play_tone(HIGH_E_7,400);
   404ac:	010017c4 	movi	r4,95
   404b0:	01406404 	movi	r5,400
   404b4:	00405880 	call	40588 <play_tone>

	}
   404b8:	003f7506 	br	40290 <__alt_data_end+0xfffca730>

000404bc <inject_noise>:
 *      Author: Usuario
 */

#include "karplus.h"

void inject_noise(){
   404bc:	defffc04 	addi	sp,sp,-16
   404c0:	dfc00315 	stw	ra,12(sp)
   404c4:	df000215 	stw	fp,8(sp)
   404c8:	df000204 	addi	fp,sp,8
	int i;
	int noise;
	IOWR(NOISE_EN_BASE,0,1);
   404cc:	00c00044 	movi	r3,1
   404d0:	00800234 	movhi	r2,8
   404d4:	10841804 	addi	r2,r2,4192
   404d8:	10c00035 	stwio	r3,0(r2)
	for(i=0;i<500;i++)
   404dc:	e03ffe15 	stw	zero,-8(fp)
   404e0:	00001906 	br	40548 <inject_noise+0x8c>
				{

					noise=rand()*255;
   404e4:	00408e80 	call	408e8 <rand>
   404e8:	1009883a 	mov	r4,r2
   404ec:	01403fc4 	movi	r5,255
   404f0:	00407dc0 	call	407dc <__mulsi3>
   404f4:	e0bfff15 	stw	r2,-4(fp)
					IOWR(NOISE_BASE,0,noise & 0x7fff);
   404f8:	e0bfff17 	ldw	r2,-4(fp)
   404fc:	10dfffcc 	andi	r3,r2,32767
   40500:	00800234 	movhi	r2,8
   40504:	10841c04 	addi	r2,r2,4208
   40508:	10c00035 	stwio	r3,0(r2)
					IOWR(NOISE_PULSE_BASE,0,0);
   4050c:	0007883a 	mov	r3,zero
   40510:	00800234 	movhi	r2,8
   40514:	10841004 	addi	r2,r2,4160
   40518:	10c00035 	stwio	r3,0(r2)
					usleep(1);
   4051c:	01000044 	movi	r4,1
   40520:	0043d500 	call	43d50 <usleep>
					IOWR(NOISE_PULSE_BASE,0,1);
   40524:	00c00044 	movi	r3,1
   40528:	00800234 	movhi	r2,8
   4052c:	10841004 	addi	r2,r2,4160
   40530:	10c00035 	stwio	r3,0(r2)
					usleep(1);
   40534:	01000044 	movi	r4,1
   40538:	0043d500 	call	43d50 <usleep>

void inject_noise(){
	int i;
	int noise;
	IOWR(NOISE_EN_BASE,0,1);
	for(i=0;i<500;i++)
   4053c:	e0bffe17 	ldw	r2,-8(fp)
   40540:	10800044 	addi	r2,r2,1
   40544:	e0bffe15 	stw	r2,-8(fp)
   40548:	e0bffe17 	ldw	r2,-8(fp)
   4054c:	10807d10 	cmplti	r2,r2,500
   40550:	103fe41e 	bne	r2,zero,404e4 <__alt_data_end+0xfffca984>
					IOWR(NOISE_PULSE_BASE,0,0);
					usleep(1);
					IOWR(NOISE_PULSE_BASE,0,1);
					usleep(1);
				}
	IOWR(NOISE_PULSE_BASE,0,0);
   40554:	0007883a 	mov	r3,zero
   40558:	00800234 	movhi	r2,8
   4055c:	10841004 	addi	r2,r2,4160
   40560:	10c00035 	stwio	r3,0(r2)
	IOWR(NOISE_EN_BASE,0,0);
   40564:	0007883a 	mov	r3,zero
   40568:	00800234 	movhi	r2,8
   4056c:	10841804 	addi	r2,r2,4192
   40570:	10c00035 	stwio	r3,0(r2)
}
   40574:	e037883a 	mov	sp,fp
   40578:	dfc00117 	ldw	ra,4(sp)
   4057c:	df000017 	ldw	fp,0(sp)
   40580:	dec00204 	addi	sp,sp,8
   40584:	f800283a 	ret

00040588 <play_tone>:

void play_tone(int nota, int time_ms){
   40588:	defffc04 	addi	sp,sp,-16
   4058c:	dfc00315 	stw	ra,12(sp)
   40590:	df000215 	stw	fp,8(sp)
   40594:	df000204 	addi	fp,sp,8
   40598:	e13ffe15 	stw	r4,-8(fp)
   4059c:	e17fff15 	stw	r5,-4(fp)
	IOWR(NOISE_EN_BASE,0,1);
   405a0:	00c00044 	movi	r3,1
   405a4:	00800234 	movhi	r2,8
   405a8:	10841804 	addi	r2,r2,4192
   405ac:	10c00035 	stwio	r3,0(r2)
	IOWR(SEL_NOTA_BASE,0,nota);
   405b0:	00800234 	movhi	r2,8
   405b4:	10841404 	addi	r2,r2,4176
   405b8:	e0fffe17 	ldw	r3,-8(fp)
   405bc:	10c00035 	stwio	r3,0(r2)
	inject_noise();
   405c0:	00404bc0 	call	404bc <inject_noise>
	usleep(time_ms*1000);
   405c4:	e13fff17 	ldw	r4,-4(fp)
   405c8:	0140fa04 	movi	r5,1000
   405cc:	00407dc0 	call	407dc <__mulsi3>
   405d0:	1009883a 	mov	r4,r2
   405d4:	0043d500 	call	43d50 <usleep>
}
   405d8:	e037883a 	mov	sp,fp
   405dc:	dfc00117 	ldw	ra,4(sp)
   405e0:	df000017 	ldw	fp,0(sp)
   405e4:	dec00204 	addi	sp,sp,8
   405e8:	f800283a 	ret

000405ec <set_karplus_frequency>:

void set_karplus_frequency(int frecuencia){
   405ec:	defffc04 	addi	sp,sp,-16
   405f0:	dfc00315 	stw	ra,12(sp)
   405f4:	df000215 	stw	fp,8(sp)
   405f8:	df000204 	addi	fp,sp,8
   405fc:	e13fff15 	stw	r4,-4(fp)
	int in_freq=(50000000/(2*frecuencia))-1;
   40600:	e0bfff17 	ldw	r2,-4(fp)
   40604:	1085883a 	add	r2,r2,r2
   40608:	0100bef4 	movhi	r4,763
   4060c:	213c2004 	addi	r4,r4,-3968
   40610:	100b883a 	mov	r5,r2
   40614:	004071c0 	call	4071c <__divsi3>
   40618:	10bfffc4 	addi	r2,r2,-1
   4061c:	e0bffe15 	stw	r2,-8(fp)
	IOWR(DIV_FREQ_BASE,0,in_freq);
   40620:	00800234 	movhi	r2,8
   40624:	10842004 	addi	r2,r2,4224
   40628:	e0fffe17 	ldw	r3,-8(fp)
   4062c:	10c00035 	stwio	r3,0(r2)
}
   40630:	e037883a 	mov	sp,fp
   40634:	dfc00117 	ldw	ra,4(sp)
   40638:	df000017 	ldw	fp,0(sp)
   4063c:	dec00204 	addi	sp,sp,8
   40640:	f800283a 	ret

00040644 <init_karplus>:

void init_karplus(){
   40644:	defffe04 	addi	sp,sp,-8
   40648:	dfc00115 	stw	ra,4(sp)
   4064c:	df000015 	stw	fp,0(sp)
   40650:	d839883a 	mov	fp,sp
	IOWR(NOISE_BASE,0,0);
   40654:	0007883a 	mov	r3,zero
   40658:	00800234 	movhi	r2,8
   4065c:	10841c04 	addi	r2,r2,4208
   40660:	10c00035 	stwio	r3,0(r2)
	IOWR(NOISE_EN_BASE,0,0);
   40664:	0007883a 	mov	r3,zero
   40668:	00800234 	movhi	r2,8
   4066c:	10841804 	addi	r2,r2,4192
   40670:	10c00035 	stwio	r3,0(r2)
	IOWR(SEL_NOTA_BASE,0,0);
   40674:	0007883a 	mov	r3,zero
   40678:	00800234 	movhi	r2,8
   4067c:	10841404 	addi	r2,r2,4176
   40680:	10c00035 	stwio	r3,0(r2)
	IOWR(NOISE_PULSE_BASE,0,0);
   40684:	0007883a 	mov	r3,zero
   40688:	00800234 	movhi	r2,8
   4068c:	10841004 	addi	r2,r2,4160
   40690:	10c00035 	stwio	r3,0(r2)

	set_karplus_frequency(44100);
   40694:	012b1114 	movui	r4,44100
   40698:	00405ec0 	call	405ec <set_karplus_frequency>
}
   4069c:	e037883a 	mov	sp,fp
   406a0:	dfc00117 	ldw	ra,4(sp)
   406a4:	df000017 	ldw	fp,0(sp)
   406a8:	dec00204 	addi	sp,sp,8
   406ac:	f800283a 	ret

000406b0 <udivmodsi4>:
   406b0:	2900182e 	bgeu	r5,r4,40714 <udivmodsi4+0x64>
   406b4:	28001716 	blt	r5,zero,40714 <udivmodsi4+0x64>
   406b8:	00800804 	movi	r2,32
   406bc:	00c00044 	movi	r3,1
   406c0:	00000206 	br	406cc <udivmodsi4+0x1c>
   406c4:	10001126 	beq	r2,zero,4070c <udivmodsi4+0x5c>
   406c8:	28000516 	blt	r5,zero,406e0 <udivmodsi4+0x30>
   406cc:	294b883a 	add	r5,r5,r5
   406d0:	10bfffc4 	addi	r2,r2,-1
   406d4:	18c7883a 	add	r3,r3,r3
   406d8:	293ffa36 	bltu	r5,r4,406c4 <__alt_data_end+0xfffcab64>
   406dc:	18000b26 	beq	r3,zero,4070c <udivmodsi4+0x5c>
   406e0:	0005883a 	mov	r2,zero
   406e4:	21400236 	bltu	r4,r5,406f0 <udivmodsi4+0x40>
   406e8:	2149c83a 	sub	r4,r4,r5
   406ec:	10c4b03a 	or	r2,r2,r3
   406f0:	1806d07a 	srli	r3,r3,1
   406f4:	280ad07a 	srli	r5,r5,1
   406f8:	183ffa1e 	bne	r3,zero,406e4 <__alt_data_end+0xfffcab84>
   406fc:	3000011e 	bne	r6,zero,40704 <udivmodsi4+0x54>
   40700:	f800283a 	ret
   40704:	2005883a 	mov	r2,r4
   40708:	f800283a 	ret
   4070c:	0005883a 	mov	r2,zero
   40710:	003ffa06 	br	406fc <__alt_data_end+0xfffcab9c>
   40714:	00c00044 	movi	r3,1
   40718:	003ff106 	br	406e0 <__alt_data_end+0xfffcab80>

0004071c <__divsi3>:
   4071c:	defffe04 	addi	sp,sp,-8
   40720:	dfc00115 	stw	ra,4(sp)
   40724:	dc000015 	stw	r16,0(sp)
   40728:	20000b16 	blt	r4,zero,40758 <__divsi3+0x3c>
   4072c:	0021883a 	mov	r16,zero
   40730:	28000c16 	blt	r5,zero,40764 <__divsi3+0x48>
   40734:	000d883a 	mov	r6,zero
   40738:	00406b00 	call	406b0 <udivmodsi4>
   4073c:	0407c83a 	sub	r3,zero,r16
   40740:	1884f03a 	xor	r2,r3,r2
   40744:	1405883a 	add	r2,r2,r16
   40748:	dfc00117 	ldw	ra,4(sp)
   4074c:	dc000017 	ldw	r16,0(sp)
   40750:	dec00204 	addi	sp,sp,8
   40754:	f800283a 	ret
   40758:	0109c83a 	sub	r4,zero,r4
   4075c:	04000044 	movi	r16,1
   40760:	283ff40e 	bge	r5,zero,40734 <__alt_data_end+0xfffcabd4>
   40764:	014bc83a 	sub	r5,zero,r5
   40768:	8400005c 	xori	r16,r16,1
   4076c:	003ff106 	br	40734 <__alt_data_end+0xfffcabd4>

00040770 <__modsi3>:
   40770:	defffd04 	addi	sp,sp,-12
   40774:	dfc00215 	stw	ra,8(sp)
   40778:	dc400115 	stw	r17,4(sp)
   4077c:	dc000015 	stw	r16,0(sp)
   40780:	20000c16 	blt	r4,zero,407b4 <__modsi3+0x44>
   40784:	0023883a 	mov	r17,zero
   40788:	0021883a 	mov	r16,zero
   4078c:	28000d16 	blt	r5,zero,407c4 <__modsi3+0x54>
   40790:	01800044 	movi	r6,1
   40794:	00406b00 	call	406b0 <udivmodsi4>
   40798:	1404f03a 	xor	r2,r2,r16
   4079c:	8885883a 	add	r2,r17,r2
   407a0:	dfc00217 	ldw	ra,8(sp)
   407a4:	dc400117 	ldw	r17,4(sp)
   407a8:	dc000017 	ldw	r16,0(sp)
   407ac:	dec00304 	addi	sp,sp,12
   407b0:	f800283a 	ret
   407b4:	0109c83a 	sub	r4,zero,r4
   407b8:	04400044 	movi	r17,1
   407bc:	043fffc4 	movi	r16,-1
   407c0:	283ff30e 	bge	r5,zero,40790 <__alt_data_end+0xfffcac30>
   407c4:	014bc83a 	sub	r5,zero,r5
   407c8:	003ff106 	br	40790 <__alt_data_end+0xfffcac30>

000407cc <__udivsi3>:
   407cc:	000d883a 	mov	r6,zero
   407d0:	00406b01 	jmpi	406b0 <udivmodsi4>

000407d4 <__umodsi3>:
   407d4:	01800044 	movi	r6,1
   407d8:	00406b01 	jmpi	406b0 <udivmodsi4>

000407dc <__mulsi3>:
   407dc:	0005883a 	mov	r2,zero
   407e0:	20000726 	beq	r4,zero,40800 <__mulsi3+0x24>
   407e4:	20c0004c 	andi	r3,r4,1
   407e8:	2008d07a 	srli	r4,r4,1
   407ec:	18000126 	beq	r3,zero,407f4 <__mulsi3+0x18>
   407f0:	1145883a 	add	r2,r2,r5
   407f4:	294b883a 	add	r5,r5,r5
   407f8:	203ffa1e 	bne	r4,zero,407e4 <__alt_data_end+0xfffcac84>
   407fc:	f800283a 	ret
   40800:	f800283a 	ret

00040804 <_puts_r>:
   40804:	defff604 	addi	sp,sp,-40
   40808:	dc000715 	stw	r16,28(sp)
   4080c:	2021883a 	mov	r16,r4
   40810:	2809883a 	mov	r4,r5
   40814:	dc400815 	stw	r17,32(sp)
   40818:	dfc00915 	stw	ra,36(sp)
   4081c:	2823883a 	mov	r17,r5
   40820:	004094c0 	call	4094c <strlen>
   40824:	00c00174 	movhi	r3,5
   40828:	18e0bf04 	addi	r3,r3,-32004
   4082c:	18c00017 	ldw	r3,0(r3)
   40830:	11000044 	addi	r4,r2,1
   40834:	d8800115 	stw	r2,4(sp)
   40838:	18c00217 	ldw	r3,8(r3)
   4083c:	01400134 	movhi	r5,4
   40840:	2959f004 	addi	r5,r5,26560
   40844:	1880030b 	ldhu	r2,12(r3)
   40848:	d9400215 	stw	r5,8(sp)
   4084c:	d9000615 	stw	r4,24(sp)
   40850:	01400044 	movi	r5,1
   40854:	01000084 	movi	r4,2
   40858:	d9000515 	stw	r4,20(sp)
   4085c:	dc400015 	stw	r17,0(sp)
   40860:	d9400315 	stw	r5,12(sp)
   40864:	dec00415 	stw	sp,16(sp)
   40868:	1108000c 	andi	r4,r2,8192
   4086c:	2000061e 	bne	r4,zero,40888 <_puts_r+0x84>
   40870:	19401917 	ldw	r5,100(r3)
   40874:	0137ffc4 	movi	r4,-8193
   40878:	10880014 	ori	r2,r2,8192
   4087c:	2908703a 	and	r4,r5,r4
   40880:	1880030d 	sth	r2,12(r3)
   40884:	19001915 	stw	r4,100(r3)
   40888:	81400217 	ldw	r5,8(r16)
   4088c:	8009883a 	mov	r4,r16
   40890:	d9800404 	addi	r6,sp,16
   40894:	00409e40 	call	409e4 <__sfvwrite_r>
   40898:	1000061e 	bne	r2,zero,408b4 <_puts_r+0xb0>
   4089c:	00800284 	movi	r2,10
   408a0:	dfc00917 	ldw	ra,36(sp)
   408a4:	dc400817 	ldw	r17,32(sp)
   408a8:	dc000717 	ldw	r16,28(sp)
   408ac:	dec00a04 	addi	sp,sp,40
   408b0:	f800283a 	ret
   408b4:	00bfffc4 	movi	r2,-1
   408b8:	003ff906 	br	408a0 <__alt_data_end+0xfffcad40>

000408bc <puts>:
   408bc:	00800174 	movhi	r2,5
   408c0:	10a0bf04 	addi	r2,r2,-32004
   408c4:	200b883a 	mov	r5,r4
   408c8:	11000017 	ldw	r4,0(r2)
   408cc:	00408041 	jmpi	40804 <_puts_r>

000408d0 <srand>:
   408d0:	00800174 	movhi	r2,5
   408d4:	10a0bf04 	addi	r2,r2,-32004
   408d8:	10800017 	ldw	r2,0(r2)
   408dc:	11002915 	stw	r4,164(r2)
   408e0:	10002a15 	stw	zero,168(r2)
   408e4:	f800283a 	ret

000408e8 <rand>:
   408e8:	00800174 	movhi	r2,5
   408ec:	defffe04 	addi	sp,sp,-8
   408f0:	10a0bf04 	addi	r2,r2,-32004
   408f4:	dc000015 	stw	r16,0(sp)
   408f8:	14000017 	ldw	r16,0(r2)
   408fc:	dfc00115 	stw	ra,4(sp)
   40900:	01932574 	movhi	r6,19605
   40904:	81002917 	ldw	r4,164(r16)
   40908:	81402a17 	ldw	r5,168(r16)
   4090c:	01d614b4 	movhi	r7,22610
   40910:	319fcb44 	addi	r6,r6,32557
   40914:	39fd0b44 	addi	r7,r7,-3027
   40918:	00433a00 	call	433a0 <__muldi3>
   4091c:	11000044 	addi	r4,r2,1
   40920:	2085803a 	cmpltu	r2,r4,r2
   40924:	10c7883a 	add	r3,r2,r3
   40928:	00a00034 	movhi	r2,32768
   4092c:	10bfffc4 	addi	r2,r2,-1
   40930:	1884703a 	and	r2,r3,r2
   40934:	81002915 	stw	r4,164(r16)
   40938:	80c02a15 	stw	r3,168(r16)
   4093c:	dfc00117 	ldw	ra,4(sp)
   40940:	dc000017 	ldw	r16,0(sp)
   40944:	dec00204 	addi	sp,sp,8
   40948:	f800283a 	ret

0004094c <strlen>:
   4094c:	208000cc 	andi	r2,r4,3
   40950:	10002026 	beq	r2,zero,409d4 <strlen+0x88>
   40954:	20800007 	ldb	r2,0(r4)
   40958:	10002026 	beq	r2,zero,409dc <strlen+0x90>
   4095c:	2005883a 	mov	r2,r4
   40960:	00000206 	br	4096c <strlen+0x20>
   40964:	10c00007 	ldb	r3,0(r2)
   40968:	18001826 	beq	r3,zero,409cc <strlen+0x80>
   4096c:	10800044 	addi	r2,r2,1
   40970:	10c000cc 	andi	r3,r2,3
   40974:	183ffb1e 	bne	r3,zero,40964 <__alt_data_end+0xfffcae04>
   40978:	10c00017 	ldw	r3,0(r2)
   4097c:	01ffbff4 	movhi	r7,65279
   40980:	39ffbfc4 	addi	r7,r7,-257
   40984:	00ca303a 	nor	r5,zero,r3
   40988:	01a02074 	movhi	r6,32897
   4098c:	19c7883a 	add	r3,r3,r7
   40990:	31a02004 	addi	r6,r6,-32640
   40994:	1946703a 	and	r3,r3,r5
   40998:	1986703a 	and	r3,r3,r6
   4099c:	1800091e 	bne	r3,zero,409c4 <strlen+0x78>
   409a0:	10800104 	addi	r2,r2,4
   409a4:	10c00017 	ldw	r3,0(r2)
   409a8:	19cb883a 	add	r5,r3,r7
   409ac:	00c6303a 	nor	r3,zero,r3
   409b0:	28c6703a 	and	r3,r5,r3
   409b4:	1986703a 	and	r3,r3,r6
   409b8:	183ff926 	beq	r3,zero,409a0 <__alt_data_end+0xfffcae40>
   409bc:	00000106 	br	409c4 <strlen+0x78>
   409c0:	10800044 	addi	r2,r2,1
   409c4:	10c00007 	ldb	r3,0(r2)
   409c8:	183ffd1e 	bne	r3,zero,409c0 <__alt_data_end+0xfffcae60>
   409cc:	1105c83a 	sub	r2,r2,r4
   409d0:	f800283a 	ret
   409d4:	2005883a 	mov	r2,r4
   409d8:	003fe706 	br	40978 <__alt_data_end+0xfffcae18>
   409dc:	0005883a 	mov	r2,zero
   409e0:	f800283a 	ret

000409e4 <__sfvwrite_r>:
   409e4:	30800217 	ldw	r2,8(r6)
   409e8:	10004526 	beq	r2,zero,40b00 <__sfvwrite_r+0x11c>
   409ec:	28c0030b 	ldhu	r3,12(r5)
   409f0:	defff404 	addi	sp,sp,-48
   409f4:	dd400715 	stw	r21,28(sp)
   409f8:	dcc00515 	stw	r19,20(sp)
   409fc:	dc000215 	stw	r16,8(sp)
   40a00:	dfc00b15 	stw	ra,44(sp)
   40a04:	df000a15 	stw	fp,40(sp)
   40a08:	ddc00915 	stw	r23,36(sp)
   40a0c:	dd800815 	stw	r22,32(sp)
   40a10:	dd000615 	stw	r20,24(sp)
   40a14:	dc800415 	stw	r18,16(sp)
   40a18:	dc400315 	stw	r17,12(sp)
   40a1c:	1880020c 	andi	r2,r3,8
   40a20:	2821883a 	mov	r16,r5
   40a24:	202b883a 	mov	r21,r4
   40a28:	3027883a 	mov	r19,r6
   40a2c:	10002526 	beq	r2,zero,40ac4 <__sfvwrite_r+0xe0>
   40a30:	28800417 	ldw	r2,16(r5)
   40a34:	10002326 	beq	r2,zero,40ac4 <__sfvwrite_r+0xe0>
   40a38:	1880008c 	andi	r2,r3,2
   40a3c:	9c400017 	ldw	r17,0(r19)
   40a40:	10003126 	beq	r2,zero,40b08 <__sfvwrite_r+0x124>
   40a44:	0029883a 	mov	r20,zero
   40a48:	0025883a 	mov	r18,zero
   40a4c:	05810004 	movi	r22,1024
   40a50:	a00d883a 	mov	r6,r20
   40a54:	a809883a 	mov	r4,r21
   40a58:	90002526 	beq	r18,zero,40af0 <__sfvwrite_r+0x10c>
   40a5c:	900f883a 	mov	r7,r18
   40a60:	81400717 	ldw	r5,28(r16)
   40a64:	b480012e 	bgeu	r22,r18,40a6c <__sfvwrite_r+0x88>
   40a68:	01c10004 	movi	r7,1024
   40a6c:	80800917 	ldw	r2,36(r16)
   40a70:	103ee83a 	callr	r2
   40a74:	0080510e 	bge	zero,r2,40bbc <__sfvwrite_r+0x1d8>
   40a78:	98c00217 	ldw	r3,8(r19)
   40a7c:	a0a9883a 	add	r20,r20,r2
   40a80:	90a5c83a 	sub	r18,r18,r2
   40a84:	1885c83a 	sub	r2,r3,r2
   40a88:	98800215 	stw	r2,8(r19)
   40a8c:	103ff01e 	bne	r2,zero,40a50 <__alt_data_end+0xfffcaef0>
   40a90:	0005883a 	mov	r2,zero
   40a94:	dfc00b17 	ldw	ra,44(sp)
   40a98:	df000a17 	ldw	fp,40(sp)
   40a9c:	ddc00917 	ldw	r23,36(sp)
   40aa0:	dd800817 	ldw	r22,32(sp)
   40aa4:	dd400717 	ldw	r21,28(sp)
   40aa8:	dd000617 	ldw	r20,24(sp)
   40aac:	dcc00517 	ldw	r19,20(sp)
   40ab0:	dc800417 	ldw	r18,16(sp)
   40ab4:	dc400317 	ldw	r17,12(sp)
   40ab8:	dc000217 	ldw	r16,8(sp)
   40abc:	dec00c04 	addi	sp,sp,48
   40ac0:	f800283a 	ret
   40ac4:	a809883a 	mov	r4,r21
   40ac8:	800b883a 	mov	r5,r16
   40acc:	0041fa00 	call	41fa0 <__swsetup_r>
   40ad0:	80c0030b 	ldhu	r3,12(r16)
   40ad4:	103fd826 	beq	r2,zero,40a38 <__alt_data_end+0xfffcaed8>
   40ad8:	18c01014 	ori	r3,r3,64
   40adc:	80c0030d 	sth	r3,12(r16)
   40ae0:	00c00244 	movi	r3,9
   40ae4:	00bfffc4 	movi	r2,-1
   40ae8:	a8c00015 	stw	r3,0(r21)
   40aec:	003fe906 	br	40a94 <__alt_data_end+0xfffcaf34>
   40af0:	8d000017 	ldw	r20,0(r17)
   40af4:	8c800117 	ldw	r18,4(r17)
   40af8:	8c400204 	addi	r17,r17,8
   40afc:	003fd406 	br	40a50 <__alt_data_end+0xfffcaef0>
   40b00:	0005883a 	mov	r2,zero
   40b04:	f800283a 	ret
   40b08:	1880004c 	andi	r2,r3,1
   40b0c:	1000301e 	bne	r2,zero,40bd0 <__sfvwrite_r+0x1ec>
   40b10:	002f883a 	mov	r23,zero
   40b14:	0025883a 	mov	r18,zero
   40b18:	90001c26 	beq	r18,zero,40b8c <__sfvwrite_r+0x1a8>
   40b1c:	1880800c 	andi	r2,r3,512
   40b20:	85000217 	ldw	r20,8(r16)
   40b24:	10006c26 	beq	r2,zero,40cd8 <__sfvwrite_r+0x2f4>
   40b28:	a02d883a 	mov	r22,r20
   40b2c:	95008536 	bltu	r18,r20,40d44 <__sfvwrite_r+0x360>
   40b30:	1881200c 	andi	r2,r3,1152
   40b34:	10009d1e 	bne	r2,zero,40dac <__sfvwrite_r+0x3c8>
   40b38:	81000017 	ldw	r4,0(r16)
   40b3c:	a039883a 	mov	fp,r20
   40b40:	9029883a 	mov	r20,r18
   40b44:	b80b883a 	mov	r5,r23
   40b48:	b00d883a 	mov	r6,r22
   40b4c:	00418500 	call	41850 <memmove>
   40b50:	80c00217 	ldw	r3,8(r16)
   40b54:	81000017 	ldw	r4,0(r16)
   40b58:	9005883a 	mov	r2,r18
   40b5c:	1f39c83a 	sub	fp,r3,fp
   40b60:	258f883a 	add	r7,r4,r22
   40b64:	87000215 	stw	fp,8(r16)
   40b68:	81c00015 	stw	r7,0(r16)
   40b6c:	98c00217 	ldw	r3,8(r19)
   40b70:	b8af883a 	add	r23,r23,r2
   40b74:	90a5c83a 	sub	r18,r18,r2
   40b78:	1d05c83a 	sub	r2,r3,r20
   40b7c:	98800215 	stw	r2,8(r19)
   40b80:	103fc326 	beq	r2,zero,40a90 <__alt_data_end+0xfffcaf30>
   40b84:	80c0030b 	ldhu	r3,12(r16)
   40b88:	903fe41e 	bne	r18,zero,40b1c <__alt_data_end+0xfffcafbc>
   40b8c:	8dc00017 	ldw	r23,0(r17)
   40b90:	8c800117 	ldw	r18,4(r17)
   40b94:	8c400204 	addi	r17,r17,8
   40b98:	003fdf06 	br	40b18 <__alt_data_end+0xfffcafb8>
   40b9c:	00419ac0 	call	419ac <_realloc_r>
   40ba0:	102d883a 	mov	r22,r2
   40ba4:	1000a01e 	bne	r2,zero,40e28 <__sfvwrite_r+0x444>
   40ba8:	81400417 	ldw	r5,16(r16)
   40bac:	a809883a 	mov	r4,r21
   40bb0:	00428000 	call	42800 <_free_r>
   40bb4:	00800304 	movi	r2,12
   40bb8:	a8800015 	stw	r2,0(r21)
   40bbc:	80c0030b 	ldhu	r3,12(r16)
   40bc0:	00bfffc4 	movi	r2,-1
   40bc4:	18c01014 	ori	r3,r3,64
   40bc8:	80c0030d 	sth	r3,12(r16)
   40bcc:	003fb106 	br	40a94 <__alt_data_end+0xfffcaf34>
   40bd0:	0029883a 	mov	r20,zero
   40bd4:	0011883a 	mov	r8,zero
   40bd8:	0039883a 	mov	fp,zero
   40bdc:	0025883a 	mov	r18,zero
   40be0:	90001f26 	beq	r18,zero,40c60 <__sfvwrite_r+0x27c>
   40be4:	40006826 	beq	r8,zero,40d88 <__sfvwrite_r+0x3a4>
   40be8:	a02f883a 	mov	r23,r20
   40bec:	9500012e 	bgeu	r18,r20,40bf4 <__sfvwrite_r+0x210>
   40bf0:	902f883a 	mov	r23,r18
   40bf4:	81000017 	ldw	r4,0(r16)
   40bf8:	80800417 	ldw	r2,16(r16)
   40bfc:	b82d883a 	mov	r22,r23
   40c00:	81800217 	ldw	r6,8(r16)
   40c04:	81c00517 	ldw	r7,20(r16)
   40c08:	1100022e 	bgeu	r2,r4,40c14 <__sfvwrite_r+0x230>
   40c0c:	31c7883a 	add	r3,r6,r7
   40c10:	1dc01816 	blt	r3,r23,40c74 <__sfvwrite_r+0x290>
   40c14:	b9c03f16 	blt	r23,r7,40d14 <__sfvwrite_r+0x330>
   40c18:	80800917 	ldw	r2,36(r16)
   40c1c:	81400717 	ldw	r5,28(r16)
   40c20:	a809883a 	mov	r4,r21
   40c24:	da000115 	stw	r8,4(sp)
   40c28:	e00d883a 	mov	r6,fp
   40c2c:	103ee83a 	callr	r2
   40c30:	102d883a 	mov	r22,r2
   40c34:	da000117 	ldw	r8,4(sp)
   40c38:	00bfe00e 	bge	zero,r2,40bbc <__alt_data_end+0xfffcb05c>
   40c3c:	a5a9c83a 	sub	r20,r20,r22
   40c40:	a0001f26 	beq	r20,zero,40cc0 <__sfvwrite_r+0x2dc>
   40c44:	98800217 	ldw	r2,8(r19)
   40c48:	e5b9883a 	add	fp,fp,r22
   40c4c:	95a5c83a 	sub	r18,r18,r22
   40c50:	15adc83a 	sub	r22,r2,r22
   40c54:	9d800215 	stw	r22,8(r19)
   40c58:	b03f8d26 	beq	r22,zero,40a90 <__alt_data_end+0xfffcaf30>
   40c5c:	903fe11e 	bne	r18,zero,40be4 <__alt_data_end+0xfffcb084>
   40c60:	8f000017 	ldw	fp,0(r17)
   40c64:	8c800117 	ldw	r18,4(r17)
   40c68:	0011883a 	mov	r8,zero
   40c6c:	8c400204 	addi	r17,r17,8
   40c70:	003fdb06 	br	40be0 <__alt_data_end+0xfffcb080>
   40c74:	180d883a 	mov	r6,r3
   40c78:	e00b883a 	mov	r5,fp
   40c7c:	da000115 	stw	r8,4(sp)
   40c80:	d8c00015 	stw	r3,0(sp)
   40c84:	00418500 	call	41850 <memmove>
   40c88:	d8c00017 	ldw	r3,0(sp)
   40c8c:	80800017 	ldw	r2,0(r16)
   40c90:	a809883a 	mov	r4,r21
   40c94:	800b883a 	mov	r5,r16
   40c98:	10c5883a 	add	r2,r2,r3
   40c9c:	80800015 	stw	r2,0(r16)
   40ca0:	d8c00015 	stw	r3,0(sp)
   40ca4:	00420d00 	call	420d0 <_fflush_r>
   40ca8:	d8c00017 	ldw	r3,0(sp)
   40cac:	da000117 	ldw	r8,4(sp)
   40cb0:	103fc21e 	bne	r2,zero,40bbc <__alt_data_end+0xfffcb05c>
   40cb4:	182d883a 	mov	r22,r3
   40cb8:	a5a9c83a 	sub	r20,r20,r22
   40cbc:	a03fe11e 	bne	r20,zero,40c44 <__alt_data_end+0xfffcb0e4>
   40cc0:	a809883a 	mov	r4,r21
   40cc4:	800b883a 	mov	r5,r16
   40cc8:	00420d00 	call	420d0 <_fflush_r>
   40ccc:	103fbb1e 	bne	r2,zero,40bbc <__alt_data_end+0xfffcb05c>
   40cd0:	0011883a 	mov	r8,zero
   40cd4:	003fdb06 	br	40c44 <__alt_data_end+0xfffcb0e4>
   40cd8:	81000017 	ldw	r4,0(r16)
   40cdc:	80800417 	ldw	r2,16(r16)
   40ce0:	1100012e 	bgeu	r2,r4,40ce8 <__sfvwrite_r+0x304>
   40ce4:	a4805a36 	bltu	r20,r18,40e50 <__sfvwrite_r+0x46c>
   40ce8:	81c00517 	ldw	r7,20(r16)
   40cec:	91c01a36 	bltu	r18,r7,40d58 <__sfvwrite_r+0x374>
   40cf0:	80800917 	ldw	r2,36(r16)
   40cf4:	81400717 	ldw	r5,28(r16)
   40cf8:	a809883a 	mov	r4,r21
   40cfc:	b80d883a 	mov	r6,r23
   40d00:	103ee83a 	callr	r2
   40d04:	1029883a 	mov	r20,r2
   40d08:	00bfac0e 	bge	zero,r2,40bbc <__alt_data_end+0xfffcb05c>
   40d0c:	a005883a 	mov	r2,r20
   40d10:	003f9606 	br	40b6c <__alt_data_end+0xfffcb00c>
   40d14:	b80d883a 	mov	r6,r23
   40d18:	e00b883a 	mov	r5,fp
   40d1c:	da000115 	stw	r8,4(sp)
   40d20:	00418500 	call	41850 <memmove>
   40d24:	80800217 	ldw	r2,8(r16)
   40d28:	80c00017 	ldw	r3,0(r16)
   40d2c:	da000117 	ldw	r8,4(sp)
   40d30:	15c5c83a 	sub	r2,r2,r23
   40d34:	1def883a 	add	r23,r3,r23
   40d38:	80800215 	stw	r2,8(r16)
   40d3c:	85c00015 	stw	r23,0(r16)
   40d40:	003fbe06 	br	40c3c <__alt_data_end+0xfffcb0dc>
   40d44:	81000017 	ldw	r4,0(r16)
   40d48:	9039883a 	mov	fp,r18
   40d4c:	9029883a 	mov	r20,r18
   40d50:	902d883a 	mov	r22,r18
   40d54:	003f7b06 	br	40b44 <__alt_data_end+0xfffcafe4>
   40d58:	b80b883a 	mov	r5,r23
   40d5c:	900d883a 	mov	r6,r18
   40d60:	00418500 	call	41850 <memmove>
   40d64:	80c00217 	ldw	r3,8(r16)
   40d68:	80800017 	ldw	r2,0(r16)
   40d6c:	9029883a 	mov	r20,r18
   40d70:	1c87c83a 	sub	r3,r3,r18
   40d74:	1485883a 	add	r2,r2,r18
   40d78:	80800015 	stw	r2,0(r16)
   40d7c:	80c00215 	stw	r3,8(r16)
   40d80:	9005883a 	mov	r2,r18
   40d84:	003f7906 	br	40b6c <__alt_data_end+0xfffcb00c>
   40d88:	e009883a 	mov	r4,fp
   40d8c:	01400284 	movi	r5,10
   40d90:	900d883a 	mov	r6,r18
   40d94:	00416300 	call	41630 <memchr>
   40d98:	10003826 	beq	r2,zero,40e7c <__sfvwrite_r+0x498>
   40d9c:	10800044 	addi	r2,r2,1
   40da0:	1729c83a 	sub	r20,r2,fp
   40da4:	02000044 	movi	r8,1
   40da8:	003f8f06 	br	40be8 <__alt_data_end+0xfffcb088>
   40dac:	80800517 	ldw	r2,20(r16)
   40db0:	81400417 	ldw	r5,16(r16)
   40db4:	87000017 	ldw	fp,0(r16)
   40db8:	10a9883a 	add	r20,r2,r2
   40dbc:	a085883a 	add	r2,r20,r2
   40dc0:	1028d7fa 	srli	r20,r2,31
   40dc4:	e179c83a 	sub	fp,fp,r5
   40dc8:	e1000044 	addi	r4,fp,1
   40dcc:	a085883a 	add	r2,r20,r2
   40dd0:	1029d07a 	srai	r20,r2,1
   40dd4:	2485883a 	add	r2,r4,r18
   40dd8:	a00d883a 	mov	r6,r20
   40ddc:	a080022e 	bgeu	r20,r2,40de8 <__sfvwrite_r+0x404>
   40de0:	1029883a 	mov	r20,r2
   40de4:	100d883a 	mov	r6,r2
   40de8:	18c1000c 	andi	r3,r3,1024
   40dec:	a809883a 	mov	r4,r21
   40df0:	183f6a26 	beq	r3,zero,40b9c <__alt_data_end+0xfffcb03c>
   40df4:	300b883a 	mov	r5,r6
   40df8:	0040e880 	call	40e88 <_malloc_r>
   40dfc:	102d883a 	mov	r22,r2
   40e00:	103f6c26 	beq	r2,zero,40bb4 <__alt_data_end+0xfffcb054>
   40e04:	81400417 	ldw	r5,16(r16)
   40e08:	1009883a 	mov	r4,r2
   40e0c:	e00d883a 	mov	r6,fp
   40e10:	00417180 	call	41718 <memcpy>
   40e14:	8080030b 	ldhu	r2,12(r16)
   40e18:	00fedfc4 	movi	r3,-1153
   40e1c:	10c4703a 	and	r2,r2,r3
   40e20:	10802014 	ori	r2,r2,128
   40e24:	8080030d 	sth	r2,12(r16)
   40e28:	b709883a 	add	r4,r22,fp
   40e2c:	a707c83a 	sub	r3,r20,fp
   40e30:	85800415 	stw	r22,16(r16)
   40e34:	85000515 	stw	r20,20(r16)
   40e38:	81000015 	stw	r4,0(r16)
   40e3c:	9039883a 	mov	fp,r18
   40e40:	80c00215 	stw	r3,8(r16)
   40e44:	9029883a 	mov	r20,r18
   40e48:	902d883a 	mov	r22,r18
   40e4c:	003f3d06 	br	40b44 <__alt_data_end+0xfffcafe4>
   40e50:	b80b883a 	mov	r5,r23
   40e54:	a00d883a 	mov	r6,r20
   40e58:	00418500 	call	41850 <memmove>
   40e5c:	80800017 	ldw	r2,0(r16)
   40e60:	a809883a 	mov	r4,r21
   40e64:	800b883a 	mov	r5,r16
   40e68:	1505883a 	add	r2,r2,r20
   40e6c:	80800015 	stw	r2,0(r16)
   40e70:	00420d00 	call	420d0 <_fflush_r>
   40e74:	103fa526 	beq	r2,zero,40d0c <__alt_data_end+0xfffcb1ac>
   40e78:	003f5006 	br	40bbc <__alt_data_end+0xfffcb05c>
   40e7c:	95000044 	addi	r20,r18,1
   40e80:	02000044 	movi	r8,1
   40e84:	003f5806 	br	40be8 <__alt_data_end+0xfffcb088>

00040e88 <_malloc_r>:
   40e88:	defff504 	addi	sp,sp,-44
   40e8c:	dc800315 	stw	r18,12(sp)
   40e90:	dfc00a15 	stw	ra,40(sp)
   40e94:	df000915 	stw	fp,36(sp)
   40e98:	ddc00815 	stw	r23,32(sp)
   40e9c:	dd800715 	stw	r22,28(sp)
   40ea0:	dd400615 	stw	r21,24(sp)
   40ea4:	dd000515 	stw	r20,20(sp)
   40ea8:	dcc00415 	stw	r19,16(sp)
   40eac:	dc400215 	stw	r17,8(sp)
   40eb0:	dc000115 	stw	r16,4(sp)
   40eb4:	288002c4 	addi	r2,r5,11
   40eb8:	00c00584 	movi	r3,22
   40ebc:	2025883a 	mov	r18,r4
   40ec0:	18802a2e 	bgeu	r3,r2,40f6c <_malloc_r+0xe4>
   40ec4:	047ffe04 	movi	r17,-8
   40ec8:	1462703a 	and	r17,r2,r17
   40ecc:	88009e16 	blt	r17,zero,41148 <_malloc_r+0x2c0>
   40ed0:	89409d36 	bltu	r17,r5,41148 <_malloc_r+0x2c0>
   40ed4:	0043a8c0 	call	43a8c <__malloc_lock>
   40ed8:	00807dc4 	movi	r2,503
   40edc:	14402736 	bltu	r2,r17,40f7c <_malloc_r+0xf4>
   40ee0:	8806d0fa 	srli	r3,r17,3
   40ee4:	04c00134 	movhi	r19,4
   40ee8:	9cdb0904 	addi	r19,r19,27684
   40eec:	18c5883a 	add	r2,r3,r3
   40ef0:	1085883a 	add	r2,r2,r2
   40ef4:	1085883a 	add	r2,r2,r2
   40ef8:	9885883a 	add	r2,r19,r2
   40efc:	14000317 	ldw	r16,12(r2)
   40f00:	80814a26 	beq	r16,r2,4142c <_malloc_r+0x5a4>
   40f04:	80c00117 	ldw	r3,4(r16)
   40f08:	81000317 	ldw	r4,12(r16)
   40f0c:	00bfff04 	movi	r2,-4
   40f10:	1884703a 	and	r2,r3,r2
   40f14:	81400217 	ldw	r5,8(r16)
   40f18:	8085883a 	add	r2,r16,r2
   40f1c:	10c00117 	ldw	r3,4(r2)
   40f20:	29000315 	stw	r4,12(r5)
   40f24:	21400215 	stw	r5,8(r4)
   40f28:	18c00054 	ori	r3,r3,1
   40f2c:	10c00115 	stw	r3,4(r2)
   40f30:	9009883a 	mov	r4,r18
   40f34:	0043aac0 	call	43aac <__malloc_unlock>
   40f38:	80800204 	addi	r2,r16,8
   40f3c:	dfc00a17 	ldw	ra,40(sp)
   40f40:	df000917 	ldw	fp,36(sp)
   40f44:	ddc00817 	ldw	r23,32(sp)
   40f48:	dd800717 	ldw	r22,28(sp)
   40f4c:	dd400617 	ldw	r21,24(sp)
   40f50:	dd000517 	ldw	r20,20(sp)
   40f54:	dcc00417 	ldw	r19,16(sp)
   40f58:	dc800317 	ldw	r18,12(sp)
   40f5c:	dc400217 	ldw	r17,8(sp)
   40f60:	dc000117 	ldw	r16,4(sp)
   40f64:	dec00b04 	addi	sp,sp,44
   40f68:	f800283a 	ret
   40f6c:	04400404 	movi	r17,16
   40f70:	89407536 	bltu	r17,r5,41148 <_malloc_r+0x2c0>
   40f74:	0043a8c0 	call	43a8c <__malloc_lock>
   40f78:	003fd906 	br	40ee0 <__alt_data_end+0xfffcb380>
   40f7c:	8806d27a 	srli	r3,r17,9
   40f80:	18007526 	beq	r3,zero,41158 <_malloc_r+0x2d0>
   40f84:	00800104 	movi	r2,4
   40f88:	10c0ef36 	bltu	r2,r3,41348 <_malloc_r+0x4c0>
   40f8c:	8806d1ba 	srli	r3,r17,6
   40f90:	19c00e04 	addi	r7,r3,56
   40f94:	39cb883a 	add	r5,r7,r7
   40f98:	04c00134 	movhi	r19,4
   40f9c:	294b883a 	add	r5,r5,r5
   40fa0:	9cdb0904 	addi	r19,r19,27684
   40fa4:	294b883a 	add	r5,r5,r5
   40fa8:	994b883a 	add	r5,r19,r5
   40fac:	2c000317 	ldw	r16,12(r5)
   40fb0:	2c000e26 	beq	r5,r16,40fec <_malloc_r+0x164>
   40fb4:	80800117 	ldw	r2,4(r16)
   40fb8:	01bfff04 	movi	r6,-4
   40fbc:	010003c4 	movi	r4,15
   40fc0:	1184703a 	and	r2,r2,r6
   40fc4:	1447c83a 	sub	r3,r2,r17
   40fc8:	20c00716 	blt	r4,r3,40fe8 <_malloc_r+0x160>
   40fcc:	1800650e 	bge	r3,zero,41164 <_malloc_r+0x2dc>
   40fd0:	84000317 	ldw	r16,12(r16)
   40fd4:	2c000526 	beq	r5,r16,40fec <_malloc_r+0x164>
   40fd8:	80800117 	ldw	r2,4(r16)
   40fdc:	1184703a 	and	r2,r2,r6
   40fe0:	1447c83a 	sub	r3,r2,r17
   40fe4:	20fff90e 	bge	r4,r3,40fcc <__alt_data_end+0xfffcb46c>
   40fe8:	39ffffc4 	addi	r7,r7,-1
   40fec:	38c00044 	addi	r3,r7,1
   40ff0:	01800134 	movhi	r6,4
   40ff4:	9c000417 	ldw	r16,16(r19)
   40ff8:	319b0904 	addi	r6,r6,27684
   40ffc:	32400204 	addi	r9,r6,8
   41000:	82410326 	beq	r16,r9,41410 <_malloc_r+0x588>
   41004:	81000117 	ldw	r4,4(r16)
   41008:	00bfff04 	movi	r2,-4
   4100c:	208e703a 	and	r7,r4,r2
   41010:	3c45c83a 	sub	r2,r7,r17
   41014:	010003c4 	movi	r4,15
   41018:	2080ee16 	blt	r4,r2,413d4 <_malloc_r+0x54c>
   4101c:	32400515 	stw	r9,20(r6)
   41020:	32400415 	stw	r9,16(r6)
   41024:	1000510e 	bge	r2,zero,4116c <_malloc_r+0x2e4>
   41028:	00807fc4 	movi	r2,511
   4102c:	11c0ce36 	bltu	r2,r7,41368 <_malloc_r+0x4e0>
   41030:	3808d0fa 	srli	r4,r7,3
   41034:	01c00044 	movi	r7,1
   41038:	30800117 	ldw	r2,4(r6)
   4103c:	210b883a 	add	r5,r4,r4
   41040:	294b883a 	add	r5,r5,r5
   41044:	2009d0ba 	srai	r4,r4,2
   41048:	294b883a 	add	r5,r5,r5
   4104c:	298b883a 	add	r5,r5,r6
   41050:	2a000217 	ldw	r8,8(r5)
   41054:	3908983a 	sll	r4,r7,r4
   41058:	81400315 	stw	r5,12(r16)
   4105c:	82000215 	stw	r8,8(r16)
   41060:	2088b03a 	or	r4,r4,r2
   41064:	2c000215 	stw	r16,8(r5)
   41068:	31000115 	stw	r4,4(r6)
   4106c:	44000315 	stw	r16,12(r8)
   41070:	1805d0ba 	srai	r2,r3,2
   41074:	01400044 	movi	r5,1
   41078:	288a983a 	sll	r5,r5,r2
   4107c:	21404336 	bltu	r4,r5,4118c <_malloc_r+0x304>
   41080:	2144703a 	and	r2,r4,r5
   41084:	10000a1e 	bne	r2,zero,410b0 <_malloc_r+0x228>
   41088:	00bfff04 	movi	r2,-4
   4108c:	294b883a 	add	r5,r5,r5
   41090:	1886703a 	and	r3,r3,r2
   41094:	2144703a 	and	r2,r4,r5
   41098:	18c00104 	addi	r3,r3,4
   4109c:	1000041e 	bne	r2,zero,410b0 <_malloc_r+0x228>
   410a0:	294b883a 	add	r5,r5,r5
   410a4:	2144703a 	and	r2,r4,r5
   410a8:	18c00104 	addi	r3,r3,4
   410ac:	103ffc26 	beq	r2,zero,410a0 <__alt_data_end+0xfffcb540>
   410b0:	023fff04 	movi	r8,-4
   410b4:	01c003c4 	movi	r7,15
   410b8:	18c5883a 	add	r2,r3,r3
   410bc:	1085883a 	add	r2,r2,r2
   410c0:	1085883a 	add	r2,r2,r2
   410c4:	9895883a 	add	r10,r19,r2
   410c8:	52c00304 	addi	r11,r10,12
   410cc:	1819883a 	mov	r12,r3
   410d0:	5c000017 	ldw	r16,0(r11)
   410d4:	59bffd04 	addi	r6,r11,-12
   410d8:	8180041e 	bne	r16,r6,410ec <_malloc_r+0x264>
   410dc:	0000ce06 	br	41418 <_malloc_r+0x590>
   410e0:	2000d70e 	bge	r4,zero,41440 <_malloc_r+0x5b8>
   410e4:	84000317 	ldw	r16,12(r16)
   410e8:	8180cb26 	beq	r16,r6,41418 <_malloc_r+0x590>
   410ec:	80800117 	ldw	r2,4(r16)
   410f0:	1204703a 	and	r2,r2,r8
   410f4:	1449c83a 	sub	r4,r2,r17
   410f8:	393ff90e 	bge	r7,r4,410e0 <__alt_data_end+0xfffcb580>
   410fc:	80800317 	ldw	r2,12(r16)
   41100:	80c00217 	ldw	r3,8(r16)
   41104:	89400054 	ori	r5,r17,1
   41108:	81400115 	stw	r5,4(r16)
   4110c:	18800315 	stw	r2,12(r3)
   41110:	10c00215 	stw	r3,8(r2)
   41114:	8463883a 	add	r17,r16,r17
   41118:	9c400515 	stw	r17,20(r19)
   4111c:	9c400415 	stw	r17,16(r19)
   41120:	20800054 	ori	r2,r4,1
   41124:	88800115 	stw	r2,4(r17)
   41128:	8a400315 	stw	r9,12(r17)
   4112c:	8a400215 	stw	r9,8(r17)
   41130:	8923883a 	add	r17,r17,r4
   41134:	89000015 	stw	r4,0(r17)
   41138:	9009883a 	mov	r4,r18
   4113c:	0043aac0 	call	43aac <__malloc_unlock>
   41140:	80800204 	addi	r2,r16,8
   41144:	003f7d06 	br	40f3c <__alt_data_end+0xfffcb3dc>
   41148:	00800304 	movi	r2,12
   4114c:	90800015 	stw	r2,0(r18)
   41150:	0005883a 	mov	r2,zero
   41154:	003f7906 	br	40f3c <__alt_data_end+0xfffcb3dc>
   41158:	01401f84 	movi	r5,126
   4115c:	01c00fc4 	movi	r7,63
   41160:	003f8d06 	br	40f98 <__alt_data_end+0xfffcb438>
   41164:	81000317 	ldw	r4,12(r16)
   41168:	003f6a06 	br	40f14 <__alt_data_end+0xfffcb3b4>
   4116c:	81c5883a 	add	r2,r16,r7
   41170:	10c00117 	ldw	r3,4(r2)
   41174:	9009883a 	mov	r4,r18
   41178:	18c00054 	ori	r3,r3,1
   4117c:	10c00115 	stw	r3,4(r2)
   41180:	0043aac0 	call	43aac <__malloc_unlock>
   41184:	80800204 	addi	r2,r16,8
   41188:	003f6c06 	br	40f3c <__alt_data_end+0xfffcb3dc>
   4118c:	9c000217 	ldw	r16,8(r19)
   41190:	00bfff04 	movi	r2,-4
   41194:	85800117 	ldw	r22,4(r16)
   41198:	b0ac703a 	and	r22,r22,r2
   4119c:	b4400336 	bltu	r22,r17,411ac <_malloc_r+0x324>
   411a0:	b445c83a 	sub	r2,r22,r17
   411a4:	00c003c4 	movi	r3,15
   411a8:	18805d16 	blt	r3,r2,41320 <_malloc_r+0x498>
   411ac:	05c00174 	movhi	r23,5
   411b0:	00800174 	movhi	r2,5
   411b4:	bde0c004 	addi	r23,r23,-32000
   411b8:	10a79a04 	addi	r2,r2,-24984
   411bc:	15400017 	ldw	r21,0(r2)
   411c0:	b9000017 	ldw	r4,0(r23)
   411c4:	00ffffc4 	movi	r3,-1
   411c8:	858d883a 	add	r6,r16,r22
   411cc:	8d6b883a 	add	r21,r17,r21
   411d0:	20c0e426 	beq	r4,r3,41564 <_malloc_r+0x6dc>
   411d4:	ad4403c4 	addi	r21,r21,4111
   411d8:	00fc0004 	movi	r3,-4096
   411dc:	a8ea703a 	and	r21,r21,r3
   411e0:	9009883a 	mov	r4,r18
   411e4:	a80b883a 	mov	r5,r21
   411e8:	d9800015 	stw	r6,0(sp)
   411ec:	0041f4c0 	call	41f4c <_sbrk_r>
   411f0:	00ffffc4 	movi	r3,-1
   411f4:	1029883a 	mov	r20,r2
   411f8:	d9800017 	ldw	r6,0(sp)
   411fc:	10c0a426 	beq	r2,r3,41490 <_malloc_r+0x608>
   41200:	1180a236 	bltu	r2,r6,4148c <_malloc_r+0x604>
   41204:	07000174 	movhi	fp,5
   41208:	e727a304 	addi	fp,fp,-24948
   4120c:	e0c00017 	ldw	r3,0(fp)
   41210:	a8c7883a 	add	r3,r21,r3
   41214:	e0c00015 	stw	r3,0(fp)
   41218:	3500da26 	beq	r6,r20,41584 <_malloc_r+0x6fc>
   4121c:	b9000017 	ldw	r4,0(r23)
   41220:	00bfffc4 	movi	r2,-1
   41224:	2080e426 	beq	r4,r2,415b8 <_malloc_r+0x730>
   41228:	a185c83a 	sub	r2,r20,r6
   4122c:	1885883a 	add	r2,r3,r2
   41230:	e0800015 	stw	r2,0(fp)
   41234:	a0c001cc 	andi	r3,r20,7
   41238:	1800b526 	beq	r3,zero,41510 <_malloc_r+0x688>
   4123c:	a0e9c83a 	sub	r20,r20,r3
   41240:	00840204 	movi	r2,4104
   41244:	a5000204 	addi	r20,r20,8
   41248:	10c7c83a 	sub	r3,r2,r3
   4124c:	a545883a 	add	r2,r20,r21
   41250:	1083ffcc 	andi	r2,r2,4095
   41254:	18abc83a 	sub	r21,r3,r2
   41258:	9009883a 	mov	r4,r18
   4125c:	a80b883a 	mov	r5,r21
   41260:	0041f4c0 	call	41f4c <_sbrk_r>
   41264:	00ffffc4 	movi	r3,-1
   41268:	10c0d026 	beq	r2,r3,415ac <_malloc_r+0x724>
   4126c:	1507c83a 	sub	r3,r2,r20
   41270:	a8c7883a 	add	r3,r21,r3
   41274:	18c00054 	ori	r3,r3,1
   41278:	e0800017 	ldw	r2,0(fp)
   4127c:	9d000215 	stw	r20,8(r19)
   41280:	a0c00115 	stw	r3,4(r20)
   41284:	a887883a 	add	r3,r21,r2
   41288:	e0c00015 	stw	r3,0(fp)
   4128c:	84c00e26 	beq	r16,r19,412c8 <_malloc_r+0x440>
   41290:	018003c4 	movi	r6,15
   41294:	3580a02e 	bgeu	r6,r22,41518 <_malloc_r+0x690>
   41298:	81400117 	ldw	r5,4(r16)
   4129c:	013ffe04 	movi	r4,-8
   412a0:	b0bffd04 	addi	r2,r22,-12
   412a4:	1104703a 	and	r2,r2,r4
   412a8:	2900004c 	andi	r4,r5,1
   412ac:	1108b03a 	or	r4,r2,r4
   412b0:	81000115 	stw	r4,4(r16)
   412b4:	01400144 	movi	r5,5
   412b8:	8089883a 	add	r4,r16,r2
   412bc:	21400115 	stw	r5,4(r4)
   412c0:	21400215 	stw	r5,8(r4)
   412c4:	3080c036 	bltu	r6,r2,415c8 <_malloc_r+0x740>
   412c8:	00800174 	movhi	r2,5
   412cc:	10a79904 	addi	r2,r2,-24988
   412d0:	11000017 	ldw	r4,0(r2)
   412d4:	20c0012e 	bgeu	r4,r3,412dc <_malloc_r+0x454>
   412d8:	10c00015 	stw	r3,0(r2)
   412dc:	00800174 	movhi	r2,5
   412e0:	10a79804 	addi	r2,r2,-24992
   412e4:	11000017 	ldw	r4,0(r2)
   412e8:	9c000217 	ldw	r16,8(r19)
   412ec:	20c0012e 	bgeu	r4,r3,412f4 <_malloc_r+0x46c>
   412f0:	10c00015 	stw	r3,0(r2)
   412f4:	80c00117 	ldw	r3,4(r16)
   412f8:	00bfff04 	movi	r2,-4
   412fc:	1886703a 	and	r3,r3,r2
   41300:	1c45c83a 	sub	r2,r3,r17
   41304:	1c400236 	bltu	r3,r17,41310 <_malloc_r+0x488>
   41308:	00c003c4 	movi	r3,15
   4130c:	18800416 	blt	r3,r2,41320 <_malloc_r+0x498>
   41310:	9009883a 	mov	r4,r18
   41314:	0043aac0 	call	43aac <__malloc_unlock>
   41318:	0005883a 	mov	r2,zero
   4131c:	003f0706 	br	40f3c <__alt_data_end+0xfffcb3dc>
   41320:	88c00054 	ori	r3,r17,1
   41324:	80c00115 	stw	r3,4(r16)
   41328:	8463883a 	add	r17,r16,r17
   4132c:	10800054 	ori	r2,r2,1
   41330:	9c400215 	stw	r17,8(r19)
   41334:	88800115 	stw	r2,4(r17)
   41338:	9009883a 	mov	r4,r18
   4133c:	0043aac0 	call	43aac <__malloc_unlock>
   41340:	80800204 	addi	r2,r16,8
   41344:	003efd06 	br	40f3c <__alt_data_end+0xfffcb3dc>
   41348:	00800504 	movi	r2,20
   4134c:	10c0482e 	bgeu	r2,r3,41470 <_malloc_r+0x5e8>
   41350:	00801504 	movi	r2,84
   41354:	10c06836 	bltu	r2,r3,414f8 <_malloc_r+0x670>
   41358:	8806d33a 	srli	r3,r17,12
   4135c:	19c01b84 	addi	r7,r3,110
   41360:	39cb883a 	add	r5,r7,r7
   41364:	003f0c06 	br	40f98 <__alt_data_end+0xfffcb438>
   41368:	3804d27a 	srli	r2,r7,9
   4136c:	01000104 	movi	r4,4
   41370:	2080422e 	bgeu	r4,r2,4147c <_malloc_r+0x5f4>
   41374:	01000504 	movi	r4,20
   41378:	20807c36 	bltu	r4,r2,4156c <_malloc_r+0x6e4>
   4137c:	110016c4 	addi	r4,r2,91
   41380:	210b883a 	add	r5,r4,r4
   41384:	294b883a 	add	r5,r5,r5
   41388:	294b883a 	add	r5,r5,r5
   4138c:	994b883a 	add	r5,r19,r5
   41390:	28800217 	ldw	r2,8(r5)
   41394:	02000134 	movhi	r8,4
   41398:	421b0904 	addi	r8,r8,27684
   4139c:	11406326 	beq	r2,r5,4152c <_malloc_r+0x6a4>
   413a0:	01bfff04 	movi	r6,-4
   413a4:	11000117 	ldw	r4,4(r2)
   413a8:	2188703a 	and	r4,r4,r6
   413ac:	3900022e 	bgeu	r7,r4,413b8 <_malloc_r+0x530>
   413b0:	10800217 	ldw	r2,8(r2)
   413b4:	28bffb1e 	bne	r5,r2,413a4 <__alt_data_end+0xfffcb844>
   413b8:	11800317 	ldw	r6,12(r2)
   413bc:	99000117 	ldw	r4,4(r19)
   413c0:	81800315 	stw	r6,12(r16)
   413c4:	80800215 	stw	r2,8(r16)
   413c8:	34000215 	stw	r16,8(r6)
   413cc:	14000315 	stw	r16,12(r2)
   413d0:	003f2706 	br	41070 <__alt_data_end+0xfffcb510>
   413d4:	88c00054 	ori	r3,r17,1
   413d8:	80c00115 	stw	r3,4(r16)
   413dc:	8463883a 	add	r17,r16,r17
   413e0:	34400515 	stw	r17,20(r6)
   413e4:	34400415 	stw	r17,16(r6)
   413e8:	10c00054 	ori	r3,r2,1
   413ec:	8a400315 	stw	r9,12(r17)
   413f0:	8a400215 	stw	r9,8(r17)
   413f4:	88c00115 	stw	r3,4(r17)
   413f8:	88a3883a 	add	r17,r17,r2
   413fc:	88800015 	stw	r2,0(r17)
   41400:	9009883a 	mov	r4,r18
   41404:	0043aac0 	call	43aac <__malloc_unlock>
   41408:	80800204 	addi	r2,r16,8
   4140c:	003ecb06 	br	40f3c <__alt_data_end+0xfffcb3dc>
   41410:	31000117 	ldw	r4,4(r6)
   41414:	003f1606 	br	41070 <__alt_data_end+0xfffcb510>
   41418:	63000044 	addi	r12,r12,1
   4141c:	608000cc 	andi	r2,r12,3
   41420:	5ac00204 	addi	r11,r11,8
   41424:	103f2a1e 	bne	r2,zero,410d0 <__alt_data_end+0xfffcb570>
   41428:	00002106 	br	414b0 <_malloc_r+0x628>
   4142c:	80800204 	addi	r2,r16,8
   41430:	84000517 	ldw	r16,20(r16)
   41434:	143eb31e 	bne	r2,r16,40f04 <__alt_data_end+0xfffcb3a4>
   41438:	18c00084 	addi	r3,r3,2
   4143c:	003eec06 	br	40ff0 <__alt_data_end+0xfffcb490>
   41440:	8085883a 	add	r2,r16,r2
   41444:	10c00117 	ldw	r3,4(r2)
   41448:	81000317 	ldw	r4,12(r16)
   4144c:	81400217 	ldw	r5,8(r16)
   41450:	18c00054 	ori	r3,r3,1
   41454:	10c00115 	stw	r3,4(r2)
   41458:	29000315 	stw	r4,12(r5)
   4145c:	21400215 	stw	r5,8(r4)
   41460:	9009883a 	mov	r4,r18
   41464:	0043aac0 	call	43aac <__malloc_unlock>
   41468:	80800204 	addi	r2,r16,8
   4146c:	003eb306 	br	40f3c <__alt_data_end+0xfffcb3dc>
   41470:	19c016c4 	addi	r7,r3,91
   41474:	39cb883a 	add	r5,r7,r7
   41478:	003ec706 	br	40f98 <__alt_data_end+0xfffcb438>
   4147c:	3804d1ba 	srli	r2,r7,6
   41480:	11000e04 	addi	r4,r2,56
   41484:	210b883a 	add	r5,r4,r4
   41488:	003fbe06 	br	41384 <__alt_data_end+0xfffcb824>
   4148c:	84ff5d26 	beq	r16,r19,41204 <__alt_data_end+0xfffcb6a4>
   41490:	9c000217 	ldw	r16,8(r19)
   41494:	00bfff04 	movi	r2,-4
   41498:	80c00117 	ldw	r3,4(r16)
   4149c:	1886703a 	and	r3,r3,r2
   414a0:	003f9706 	br	41300 <__alt_data_end+0xfffcb7a0>
   414a4:	52800017 	ldw	r10,0(r10)
   414a8:	18ffffc4 	addi	r3,r3,-1
   414ac:	50805c1e 	bne	r10,r2,41620 <_malloc_r+0x798>
   414b0:	190000cc 	andi	r4,r3,3
   414b4:	50bffe04 	addi	r2,r10,-8
   414b8:	203ffa1e 	bne	r4,zero,414a4 <__alt_data_end+0xfffcb944>
   414bc:	98800117 	ldw	r2,4(r19)
   414c0:	0146303a 	nor	r3,zero,r5
   414c4:	1884703a 	and	r2,r3,r2
   414c8:	98800115 	stw	r2,4(r19)
   414cc:	294b883a 	add	r5,r5,r5
   414d0:	117f2e36 	bltu	r2,r5,4118c <__alt_data_end+0xfffcb62c>
   414d4:	283f2d26 	beq	r5,zero,4118c <__alt_data_end+0xfffcb62c>
   414d8:	1146703a 	and	r3,r2,r5
   414dc:	1800521e 	bne	r3,zero,41628 <_malloc_r+0x7a0>
   414e0:	6007883a 	mov	r3,r12
   414e4:	294b883a 	add	r5,r5,r5
   414e8:	1148703a 	and	r4,r2,r5
   414ec:	18c00104 	addi	r3,r3,4
   414f0:	203ffc26 	beq	r4,zero,414e4 <__alt_data_end+0xfffcb984>
   414f4:	003ef006 	br	410b8 <__alt_data_end+0xfffcb558>
   414f8:	00805504 	movi	r2,340
   414fc:	10c01336 	bltu	r2,r3,4154c <_malloc_r+0x6c4>
   41500:	8806d3fa 	srli	r3,r17,15
   41504:	19c01dc4 	addi	r7,r3,119
   41508:	39cb883a 	add	r5,r7,r7
   4150c:	003ea206 	br	40f98 <__alt_data_end+0xfffcb438>
   41510:	00c40004 	movi	r3,4096
   41514:	003f4d06 	br	4124c <__alt_data_end+0xfffcb6ec>
   41518:	00800044 	movi	r2,1
   4151c:	a0800115 	stw	r2,4(r20)
   41520:	a021883a 	mov	r16,r20
   41524:	0007883a 	mov	r3,zero
   41528:	003f7506 	br	41300 <__alt_data_end+0xfffcb7a0>
   4152c:	200bd0ba 	srai	r5,r4,2
   41530:	01800044 	movi	r6,1
   41534:	41000117 	ldw	r4,4(r8)
   41538:	314a983a 	sll	r5,r6,r5
   4153c:	100d883a 	mov	r6,r2
   41540:	2908b03a 	or	r4,r5,r4
   41544:	41000115 	stw	r4,4(r8)
   41548:	003f9d06 	br	413c0 <__alt_data_end+0xfffcb860>
   4154c:	00815504 	movi	r2,1364
   41550:	10c01336 	bltu	r2,r3,415a0 <_malloc_r+0x718>
   41554:	8806d4ba 	srli	r3,r17,18
   41558:	19c01f04 	addi	r7,r3,124
   4155c:	39cb883a 	add	r5,r7,r7
   41560:	003e8d06 	br	40f98 <__alt_data_end+0xfffcb438>
   41564:	ad400404 	addi	r21,r21,16
   41568:	003f1d06 	br	411e0 <__alt_data_end+0xfffcb680>
   4156c:	01001504 	movi	r4,84
   41570:	20801c36 	bltu	r4,r2,415e4 <_malloc_r+0x75c>
   41574:	3804d33a 	srli	r2,r7,12
   41578:	11001b84 	addi	r4,r2,110
   4157c:	210b883a 	add	r5,r4,r4
   41580:	003f8006 	br	41384 <__alt_data_end+0xfffcb824>
   41584:	3083ffcc 	andi	r2,r6,4095
   41588:	103f241e 	bne	r2,zero,4121c <__alt_data_end+0xfffcb6bc>
   4158c:	99000217 	ldw	r4,8(r19)
   41590:	ad85883a 	add	r2,r21,r22
   41594:	10800054 	ori	r2,r2,1
   41598:	20800115 	stw	r2,4(r4)
   4159c:	003f4a06 	br	412c8 <__alt_data_end+0xfffcb768>
   415a0:	01403f04 	movi	r5,252
   415a4:	01c01f84 	movi	r7,126
   415a8:	003e7b06 	br	40f98 <__alt_data_end+0xfffcb438>
   415ac:	00c00044 	movi	r3,1
   415b0:	002b883a 	mov	r21,zero
   415b4:	003f3006 	br	41278 <__alt_data_end+0xfffcb718>
   415b8:	00800174 	movhi	r2,5
   415bc:	10a0c004 	addi	r2,r2,-32000
   415c0:	15000015 	stw	r20,0(r2)
   415c4:	003f1b06 	br	41234 <__alt_data_end+0xfffcb6d4>
   415c8:	9009883a 	mov	r4,r18
   415cc:	81400204 	addi	r5,r16,8
   415d0:	00428000 	call	42800 <_free_r>
   415d4:	00800174 	movhi	r2,5
   415d8:	10a7a304 	addi	r2,r2,-24948
   415dc:	10c00017 	ldw	r3,0(r2)
   415e0:	003f3906 	br	412c8 <__alt_data_end+0xfffcb768>
   415e4:	01005504 	movi	r4,340
   415e8:	20800436 	bltu	r4,r2,415fc <_malloc_r+0x774>
   415ec:	3804d3fa 	srli	r2,r7,15
   415f0:	11001dc4 	addi	r4,r2,119
   415f4:	210b883a 	add	r5,r4,r4
   415f8:	003f6206 	br	41384 <__alt_data_end+0xfffcb824>
   415fc:	01015504 	movi	r4,1364
   41600:	20800436 	bltu	r4,r2,41614 <_malloc_r+0x78c>
   41604:	3804d4ba 	srli	r2,r7,18
   41608:	11001f04 	addi	r4,r2,124
   4160c:	210b883a 	add	r5,r4,r4
   41610:	003f5c06 	br	41384 <__alt_data_end+0xfffcb824>
   41614:	01403f04 	movi	r5,252
   41618:	01001f84 	movi	r4,126
   4161c:	003f5906 	br	41384 <__alt_data_end+0xfffcb824>
   41620:	98800117 	ldw	r2,4(r19)
   41624:	003fa906 	br	414cc <__alt_data_end+0xfffcb96c>
   41628:	6007883a 	mov	r3,r12
   4162c:	003ea206 	br	410b8 <__alt_data_end+0xfffcb558>

00041630 <memchr>:
   41630:	208000cc 	andi	r2,r4,3
   41634:	280f883a 	mov	r7,r5
   41638:	10003526 	beq	r2,zero,41710 <memchr+0xe0>
   4163c:	30bfffc4 	addi	r2,r6,-1
   41640:	30001b26 	beq	r6,zero,416b0 <memchr+0x80>
   41644:	21800003 	ldbu	r6,0(r4)
   41648:	28c03fcc 	andi	r3,r5,255
   4164c:	30c01a26 	beq	r6,r3,416b8 <memchr+0x88>
   41650:	180d883a 	mov	r6,r3
   41654:	00000406 	br	41668 <memchr+0x38>
   41658:	10001526 	beq	r2,zero,416b0 <memchr+0x80>
   4165c:	20c00003 	ldbu	r3,0(r4)
   41660:	10bfffc4 	addi	r2,r2,-1
   41664:	19801426 	beq	r3,r6,416b8 <memchr+0x88>
   41668:	21000044 	addi	r4,r4,1
   4166c:	20c000cc 	andi	r3,r4,3
   41670:	183ff91e 	bne	r3,zero,41658 <__alt_data_end+0xfffcbaf8>
   41674:	024000c4 	movi	r9,3
   41678:	48801136 	bltu	r9,r2,416c0 <memchr+0x90>
   4167c:	10000c26 	beq	r2,zero,416b0 <memchr+0x80>
   41680:	20c00003 	ldbu	r3,0(r4)
   41684:	29403fcc 	andi	r5,r5,255
   41688:	19400b26 	beq	r3,r5,416b8 <memchr+0x88>
   4168c:	20c00044 	addi	r3,r4,1
   41690:	2085883a 	add	r2,r4,r2
   41694:	39803fcc 	andi	r6,r7,255
   41698:	00000306 	br	416a8 <memchr+0x78>
   4169c:	18c00044 	addi	r3,r3,1
   416a0:	197fffc3 	ldbu	r5,-1(r3)
   416a4:	29800426 	beq	r5,r6,416b8 <memchr+0x88>
   416a8:	1809883a 	mov	r4,r3
   416ac:	18bffb1e 	bne	r3,r2,4169c <__alt_data_end+0xfffcbb3c>
   416b0:	0005883a 	mov	r2,zero
   416b4:	f800283a 	ret
   416b8:	2005883a 	mov	r2,r4
   416bc:	f800283a 	ret
   416c0:	28c03fcc 	andi	r3,r5,255
   416c4:	1810923a 	slli	r8,r3,8
   416c8:	02ffbff4 	movhi	r11,65279
   416cc:	02a02074 	movhi	r10,32897
   416d0:	40c6b03a 	or	r3,r8,r3
   416d4:	1810943a 	slli	r8,r3,16
   416d8:	5affbfc4 	addi	r11,r11,-257
   416dc:	52a02004 	addi	r10,r10,-32640
   416e0:	40d0b03a 	or	r8,r8,r3
   416e4:	20c00017 	ldw	r3,0(r4)
   416e8:	40c6f03a 	xor	r3,r8,r3
   416ec:	1acd883a 	add	r6,r3,r11
   416f0:	00c6303a 	nor	r3,zero,r3
   416f4:	30c6703a 	and	r3,r6,r3
   416f8:	1a86703a 	and	r3,r3,r10
   416fc:	183fdf1e 	bne	r3,zero,4167c <__alt_data_end+0xfffcbb1c>
   41700:	10bfff04 	addi	r2,r2,-4
   41704:	21000104 	addi	r4,r4,4
   41708:	48bff636 	bltu	r9,r2,416e4 <__alt_data_end+0xfffcbb84>
   4170c:	003fdb06 	br	4167c <__alt_data_end+0xfffcbb1c>
   41710:	3005883a 	mov	r2,r6
   41714:	003fd706 	br	41674 <__alt_data_end+0xfffcbb14>

00041718 <memcpy>:
   41718:	deffff04 	addi	sp,sp,-4
   4171c:	dc000015 	stw	r16,0(sp)
   41720:	00c003c4 	movi	r3,15
   41724:	2005883a 	mov	r2,r4
   41728:	1980432e 	bgeu	r3,r6,41838 <memcpy+0x120>
   4172c:	2146b03a 	or	r3,r4,r5
   41730:	18c000cc 	andi	r3,r3,3
   41734:	1800421e 	bne	r3,zero,41840 <memcpy+0x128>
   41738:	343ffc04 	addi	r16,r6,-16
   4173c:	8020d13a 	srli	r16,r16,4
   41740:	28c00104 	addi	r3,r5,4
   41744:	23400104 	addi	r13,r4,4
   41748:	801e913a 	slli	r15,r16,4
   4174c:	2b000204 	addi	r12,r5,8
   41750:	22c00204 	addi	r11,r4,8
   41754:	7bc00504 	addi	r15,r15,20
   41758:	2a800304 	addi	r10,r5,12
   4175c:	22400304 	addi	r9,r4,12
   41760:	2bdf883a 	add	r15,r5,r15
   41764:	2811883a 	mov	r8,r5
   41768:	200f883a 	mov	r7,r4
   4176c:	41000017 	ldw	r4,0(r8)
   41770:	39c00404 	addi	r7,r7,16
   41774:	18c00404 	addi	r3,r3,16
   41778:	393ffc15 	stw	r4,-16(r7)
   4177c:	1bbffc17 	ldw	r14,-16(r3)
   41780:	6b400404 	addi	r13,r13,16
   41784:	5ac00404 	addi	r11,r11,16
   41788:	6bbffc15 	stw	r14,-16(r13)
   4178c:	63800017 	ldw	r14,0(r12)
   41790:	4a400404 	addi	r9,r9,16
   41794:	42000404 	addi	r8,r8,16
   41798:	5bbffc15 	stw	r14,-16(r11)
   4179c:	53800017 	ldw	r14,0(r10)
   417a0:	63000404 	addi	r12,r12,16
   417a4:	52800404 	addi	r10,r10,16
   417a8:	4bbffc15 	stw	r14,-16(r9)
   417ac:	1bffef1e 	bne	r3,r15,4176c <__alt_data_end+0xfffcbc0c>
   417b0:	81c00044 	addi	r7,r16,1
   417b4:	380e913a 	slli	r7,r7,4
   417b8:	310003cc 	andi	r4,r6,15
   417bc:	02c000c4 	movi	r11,3
   417c0:	11c7883a 	add	r3,r2,r7
   417c4:	29cb883a 	add	r5,r5,r7
   417c8:	59001f2e 	bgeu	r11,r4,41848 <memcpy+0x130>
   417cc:	1813883a 	mov	r9,r3
   417d0:	2811883a 	mov	r8,r5
   417d4:	200f883a 	mov	r7,r4
   417d8:	42800017 	ldw	r10,0(r8)
   417dc:	4a400104 	addi	r9,r9,4
   417e0:	39ffff04 	addi	r7,r7,-4
   417e4:	4abfff15 	stw	r10,-4(r9)
   417e8:	42000104 	addi	r8,r8,4
   417ec:	59fffa36 	bltu	r11,r7,417d8 <__alt_data_end+0xfffcbc78>
   417f0:	213fff04 	addi	r4,r4,-4
   417f4:	2008d0ba 	srli	r4,r4,2
   417f8:	318000cc 	andi	r6,r6,3
   417fc:	21000044 	addi	r4,r4,1
   41800:	2109883a 	add	r4,r4,r4
   41804:	2109883a 	add	r4,r4,r4
   41808:	1907883a 	add	r3,r3,r4
   4180c:	290b883a 	add	r5,r5,r4
   41810:	30000626 	beq	r6,zero,4182c <memcpy+0x114>
   41814:	198d883a 	add	r6,r3,r6
   41818:	29c00003 	ldbu	r7,0(r5)
   4181c:	18c00044 	addi	r3,r3,1
   41820:	29400044 	addi	r5,r5,1
   41824:	19ffffc5 	stb	r7,-1(r3)
   41828:	19bffb1e 	bne	r3,r6,41818 <__alt_data_end+0xfffcbcb8>
   4182c:	dc000017 	ldw	r16,0(sp)
   41830:	dec00104 	addi	sp,sp,4
   41834:	f800283a 	ret
   41838:	2007883a 	mov	r3,r4
   4183c:	003ff406 	br	41810 <__alt_data_end+0xfffcbcb0>
   41840:	2007883a 	mov	r3,r4
   41844:	003ff306 	br	41814 <__alt_data_end+0xfffcbcb4>
   41848:	200d883a 	mov	r6,r4
   4184c:	003ff006 	br	41810 <__alt_data_end+0xfffcbcb0>

00041850 <memmove>:
   41850:	2005883a 	mov	r2,r4
   41854:	29000b2e 	bgeu	r5,r4,41884 <memmove+0x34>
   41858:	298f883a 	add	r7,r5,r6
   4185c:	21c0092e 	bgeu	r4,r7,41884 <memmove+0x34>
   41860:	2187883a 	add	r3,r4,r6
   41864:	198bc83a 	sub	r5,r3,r6
   41868:	30004b26 	beq	r6,zero,41998 <memmove+0x148>
   4186c:	39ffffc4 	addi	r7,r7,-1
   41870:	39000003 	ldbu	r4,0(r7)
   41874:	18ffffc4 	addi	r3,r3,-1
   41878:	19000005 	stb	r4,0(r3)
   4187c:	197ffb1e 	bne	r3,r5,4186c <__alt_data_end+0xfffcbd0c>
   41880:	f800283a 	ret
   41884:	00c003c4 	movi	r3,15
   41888:	1980412e 	bgeu	r3,r6,41990 <memmove+0x140>
   4188c:	1146b03a 	or	r3,r2,r5
   41890:	18c000cc 	andi	r3,r3,3
   41894:	1800411e 	bne	r3,zero,4199c <memmove+0x14c>
   41898:	33fffc04 	addi	r15,r6,-16
   4189c:	781ed13a 	srli	r15,r15,4
   418a0:	28c00104 	addi	r3,r5,4
   418a4:	13400104 	addi	r13,r2,4
   418a8:	781c913a 	slli	r14,r15,4
   418ac:	2b000204 	addi	r12,r5,8
   418b0:	12c00204 	addi	r11,r2,8
   418b4:	73800504 	addi	r14,r14,20
   418b8:	2a800304 	addi	r10,r5,12
   418bc:	12400304 	addi	r9,r2,12
   418c0:	2b9d883a 	add	r14,r5,r14
   418c4:	2811883a 	mov	r8,r5
   418c8:	100f883a 	mov	r7,r2
   418cc:	41000017 	ldw	r4,0(r8)
   418d0:	39c00404 	addi	r7,r7,16
   418d4:	18c00404 	addi	r3,r3,16
   418d8:	393ffc15 	stw	r4,-16(r7)
   418dc:	193ffc17 	ldw	r4,-16(r3)
   418e0:	6b400404 	addi	r13,r13,16
   418e4:	5ac00404 	addi	r11,r11,16
   418e8:	693ffc15 	stw	r4,-16(r13)
   418ec:	61000017 	ldw	r4,0(r12)
   418f0:	4a400404 	addi	r9,r9,16
   418f4:	42000404 	addi	r8,r8,16
   418f8:	593ffc15 	stw	r4,-16(r11)
   418fc:	51000017 	ldw	r4,0(r10)
   41900:	63000404 	addi	r12,r12,16
   41904:	52800404 	addi	r10,r10,16
   41908:	493ffc15 	stw	r4,-16(r9)
   4190c:	1bbfef1e 	bne	r3,r14,418cc <__alt_data_end+0xfffcbd6c>
   41910:	79000044 	addi	r4,r15,1
   41914:	2008913a 	slli	r4,r4,4
   41918:	328003cc 	andi	r10,r6,15
   4191c:	02c000c4 	movi	r11,3
   41920:	1107883a 	add	r3,r2,r4
   41924:	290b883a 	add	r5,r5,r4
   41928:	5a801e2e 	bgeu	r11,r10,419a4 <memmove+0x154>
   4192c:	1813883a 	mov	r9,r3
   41930:	2811883a 	mov	r8,r5
   41934:	500f883a 	mov	r7,r10
   41938:	41000017 	ldw	r4,0(r8)
   4193c:	4a400104 	addi	r9,r9,4
   41940:	39ffff04 	addi	r7,r7,-4
   41944:	493fff15 	stw	r4,-4(r9)
   41948:	42000104 	addi	r8,r8,4
   4194c:	59fffa36 	bltu	r11,r7,41938 <__alt_data_end+0xfffcbdd8>
   41950:	513fff04 	addi	r4,r10,-4
   41954:	2008d0ba 	srli	r4,r4,2
   41958:	318000cc 	andi	r6,r6,3
   4195c:	21000044 	addi	r4,r4,1
   41960:	2109883a 	add	r4,r4,r4
   41964:	2109883a 	add	r4,r4,r4
   41968:	1907883a 	add	r3,r3,r4
   4196c:	290b883a 	add	r5,r5,r4
   41970:	30000926 	beq	r6,zero,41998 <memmove+0x148>
   41974:	198d883a 	add	r6,r3,r6
   41978:	29c00003 	ldbu	r7,0(r5)
   4197c:	18c00044 	addi	r3,r3,1
   41980:	29400044 	addi	r5,r5,1
   41984:	19ffffc5 	stb	r7,-1(r3)
   41988:	19bffb1e 	bne	r3,r6,41978 <__alt_data_end+0xfffcbe18>
   4198c:	f800283a 	ret
   41990:	1007883a 	mov	r3,r2
   41994:	003ff606 	br	41970 <__alt_data_end+0xfffcbe10>
   41998:	f800283a 	ret
   4199c:	1007883a 	mov	r3,r2
   419a0:	003ff406 	br	41974 <__alt_data_end+0xfffcbe14>
   419a4:	500d883a 	mov	r6,r10
   419a8:	003ff106 	br	41970 <__alt_data_end+0xfffcbe10>

000419ac <_realloc_r>:
   419ac:	defff604 	addi	sp,sp,-40
   419b0:	dcc00315 	stw	r19,12(sp)
   419b4:	dc400115 	stw	r17,4(sp)
   419b8:	dfc00915 	stw	ra,36(sp)
   419bc:	df000815 	stw	fp,32(sp)
   419c0:	ddc00715 	stw	r23,28(sp)
   419c4:	dd800615 	stw	r22,24(sp)
   419c8:	dd400515 	stw	r21,20(sp)
   419cc:	dd000415 	stw	r20,16(sp)
   419d0:	dc800215 	stw	r18,8(sp)
   419d4:	dc000015 	stw	r16,0(sp)
   419d8:	2827883a 	mov	r19,r5
   419dc:	3023883a 	mov	r17,r6
   419e0:	2800bf26 	beq	r5,zero,41ce0 <_realloc_r+0x334>
   419e4:	2025883a 	mov	r18,r4
   419e8:	0043a8c0 	call	43a8c <__malloc_lock>
   419ec:	98ffff17 	ldw	r3,-4(r19)
   419f0:	01bfff04 	movi	r6,-4
   419f4:	890002c4 	addi	r4,r17,11
   419f8:	01c00584 	movi	r7,22
   419fc:	9d7ffe04 	addi	r21,r19,-8
   41a00:	19a0703a 	and	r16,r3,r6
   41a04:	39003f2e 	bgeu	r7,r4,41b04 <_realloc_r+0x158>
   41a08:	053ffe04 	movi	r20,-8
   41a0c:	2528703a 	and	r20,r4,r20
   41a10:	a00f883a 	mov	r7,r20
   41a14:	a0008216 	blt	r20,zero,41c20 <_realloc_r+0x274>
   41a18:	a4408136 	bltu	r20,r17,41c20 <_realloc_r+0x274>
   41a1c:	81c03c0e 	bge	r16,r7,41b10 <_realloc_r+0x164>
   41a20:	07000134 	movhi	fp,4
   41a24:	e71b0904 	addi	fp,fp,27684
   41a28:	e1000217 	ldw	r4,8(fp)
   41a2c:	ac05883a 	add	r2,r21,r16
   41a30:	2080bf26 	beq	r4,r2,41d30 <_realloc_r+0x384>
   41a34:	11000117 	ldw	r4,4(r2)
   41a38:	023fff84 	movi	r8,-2
   41a3c:	2210703a 	and	r8,r4,r8
   41a40:	1211883a 	add	r8,r2,r8
   41a44:	41400117 	ldw	r5,4(r8)
   41a48:	2940004c 	andi	r5,r5,1
   41a4c:	28004a1e 	bne	r5,zero,41b78 <_realloc_r+0x1cc>
   41a50:	017fff04 	movi	r5,-4
   41a54:	2148703a 	and	r4,r4,r5
   41a58:	2409883a 	add	r4,r4,r16
   41a5c:	21c0ad0e 	bge	r4,r7,41d14 <_realloc_r+0x368>
   41a60:	18c0004c 	andi	r3,r3,1
   41a64:	18007f1e 	bne	r3,zero,41c64 <_realloc_r+0x2b8>
   41a68:	9dfffe17 	ldw	r23,-8(r19)
   41a6c:	adefc83a 	sub	r23,r21,r23
   41a70:	bd800117 	ldw	r22,4(r23)
   41a74:	b14a703a 	and	r5,r22,r5
   41a78:	216d883a 	add	r22,r4,r5
   41a7c:	b1c04516 	blt	r22,r7,41b94 <_realloc_r+0x1e8>
   41a80:	10c00317 	ldw	r3,12(r2)
   41a84:	10800217 	ldw	r2,8(r2)
   41a88:	81bfff04 	addi	r6,r16,-4
   41a8c:	bc400204 	addi	r17,r23,8
   41a90:	10c00315 	stw	r3,12(r2)
   41a94:	18800215 	stw	r2,8(r3)
   41a98:	b9400217 	ldw	r5,8(r23)
   41a9c:	b8c00317 	ldw	r3,12(r23)
   41aa0:	00800904 	movi	r2,36
   41aa4:	28c00315 	stw	r3,12(r5)
   41aa8:	19400215 	stw	r5,8(r3)
   41aac:	1180ef36 	bltu	r2,r6,41e6c <_realloc_r+0x4c0>
   41ab0:	008004c4 	movi	r2,19
   41ab4:	1180da2e 	bgeu	r2,r6,41e20 <_realloc_r+0x474>
   41ab8:	98800017 	ldw	r2,0(r19)
   41abc:	b8800215 	stw	r2,8(r23)
   41ac0:	98800117 	ldw	r2,4(r19)
   41ac4:	b8800315 	stw	r2,12(r23)
   41ac8:	008006c4 	movi	r2,27
   41acc:	1180fc2e 	bgeu	r2,r6,41ec0 <_realloc_r+0x514>
   41ad0:	98800217 	ldw	r2,8(r19)
   41ad4:	b8800415 	stw	r2,16(r23)
   41ad8:	98800317 	ldw	r2,12(r19)
   41adc:	b8800515 	stw	r2,20(r23)
   41ae0:	00800904 	movi	r2,36
   41ae4:	3080421e 	bne	r6,r2,41bf0 <_realloc_r+0x244>
   41ae8:	98800417 	ldw	r2,16(r19)
   41aec:	9cc00604 	addi	r19,r19,24
   41af0:	b8c00804 	addi	r3,r23,32
   41af4:	b8800615 	stw	r2,24(r23)
   41af8:	98bfff17 	ldw	r2,-4(r19)
   41afc:	b8800715 	stw	r2,28(r23)
   41b00:	00003d06 	br	41bf8 <_realloc_r+0x24c>
   41b04:	01c00404 	movi	r7,16
   41b08:	3829883a 	mov	r20,r7
   41b0c:	003fc206 	br	41a18 <__alt_data_end+0xfffcbeb8>
   41b10:	9823883a 	mov	r17,r19
   41b14:	850fc83a 	sub	r7,r16,r20
   41b18:	008003c4 	movi	r2,15
   41b1c:	18c0004c 	andi	r3,r3,1
   41b20:	11c04336 	bltu	r2,r7,41c30 <_realloc_r+0x284>
   41b24:	1c06b03a 	or	r3,r3,r16
   41b28:	a8c00115 	stw	r3,4(r21)
   41b2c:	ac21883a 	add	r16,r21,r16
   41b30:	80c00117 	ldw	r3,4(r16)
   41b34:	18c00054 	ori	r3,r3,1
   41b38:	80c00115 	stw	r3,4(r16)
   41b3c:	9009883a 	mov	r4,r18
   41b40:	0043aac0 	call	43aac <__malloc_unlock>
   41b44:	8805883a 	mov	r2,r17
   41b48:	dfc00917 	ldw	ra,36(sp)
   41b4c:	df000817 	ldw	fp,32(sp)
   41b50:	ddc00717 	ldw	r23,28(sp)
   41b54:	dd800617 	ldw	r22,24(sp)
   41b58:	dd400517 	ldw	r21,20(sp)
   41b5c:	dd000417 	ldw	r20,16(sp)
   41b60:	dcc00317 	ldw	r19,12(sp)
   41b64:	dc800217 	ldw	r18,8(sp)
   41b68:	dc400117 	ldw	r17,4(sp)
   41b6c:	dc000017 	ldw	r16,0(sp)
   41b70:	dec00a04 	addi	sp,sp,40
   41b74:	f800283a 	ret
   41b78:	18c0004c 	andi	r3,r3,1
   41b7c:	1800391e 	bne	r3,zero,41c64 <_realloc_r+0x2b8>
   41b80:	9dfffe17 	ldw	r23,-8(r19)
   41b84:	00bfff04 	movi	r2,-4
   41b88:	adefc83a 	sub	r23,r21,r23
   41b8c:	b9400117 	ldw	r5,4(r23)
   41b90:	288a703a 	and	r5,r5,r2
   41b94:	2c2d883a 	add	r22,r5,r16
   41b98:	b1c03216 	blt	r22,r7,41c64 <_realloc_r+0x2b8>
   41b9c:	b8800317 	ldw	r2,12(r23)
   41ba0:	b8c00217 	ldw	r3,8(r23)
   41ba4:	81bfff04 	addi	r6,r16,-4
   41ba8:	01000904 	movi	r4,36
   41bac:	18800315 	stw	r2,12(r3)
   41bb0:	10c00215 	stw	r3,8(r2)
   41bb4:	bc400204 	addi	r17,r23,8
   41bb8:	2180ac36 	bltu	r4,r6,41e6c <_realloc_r+0x4c0>
   41bbc:	008004c4 	movi	r2,19
   41bc0:	1180972e 	bgeu	r2,r6,41e20 <_realloc_r+0x474>
   41bc4:	98800017 	ldw	r2,0(r19)
   41bc8:	b8800215 	stw	r2,8(r23)
   41bcc:	98800117 	ldw	r2,4(r19)
   41bd0:	b8800315 	stw	r2,12(r23)
   41bd4:	008006c4 	movi	r2,27
   41bd8:	1180b92e 	bgeu	r2,r6,41ec0 <_realloc_r+0x514>
   41bdc:	98800217 	ldw	r2,8(r19)
   41be0:	b8800415 	stw	r2,16(r23)
   41be4:	98800317 	ldw	r2,12(r19)
   41be8:	b8800515 	stw	r2,20(r23)
   41bec:	313fbe26 	beq	r6,r4,41ae8 <__alt_data_end+0xfffcbf88>
   41bf0:	b8c00604 	addi	r3,r23,24
   41bf4:	9cc00404 	addi	r19,r19,16
   41bf8:	98800017 	ldw	r2,0(r19)
   41bfc:	b021883a 	mov	r16,r22
   41c00:	b82b883a 	mov	r21,r23
   41c04:	18800015 	stw	r2,0(r3)
   41c08:	98800117 	ldw	r2,4(r19)
   41c0c:	18800115 	stw	r2,4(r3)
   41c10:	98800217 	ldw	r2,8(r19)
   41c14:	18800215 	stw	r2,8(r3)
   41c18:	b8c00117 	ldw	r3,4(r23)
   41c1c:	003fbd06 	br	41b14 <__alt_data_end+0xfffcbfb4>
   41c20:	00800304 	movi	r2,12
   41c24:	90800015 	stw	r2,0(r18)
   41c28:	0005883a 	mov	r2,zero
   41c2c:	003fc606 	br	41b48 <__alt_data_end+0xfffcbfe8>
   41c30:	1d06b03a 	or	r3,r3,r20
   41c34:	ad0b883a 	add	r5,r21,r20
   41c38:	a8c00115 	stw	r3,4(r21)
   41c3c:	38800054 	ori	r2,r7,1
   41c40:	28800115 	stw	r2,4(r5)
   41c44:	29cf883a 	add	r7,r5,r7
   41c48:	38800117 	ldw	r2,4(r7)
   41c4c:	9009883a 	mov	r4,r18
   41c50:	29400204 	addi	r5,r5,8
   41c54:	10800054 	ori	r2,r2,1
   41c58:	38800115 	stw	r2,4(r7)
   41c5c:	00428000 	call	42800 <_free_r>
   41c60:	003fb606 	br	41b3c <__alt_data_end+0xfffcbfdc>
   41c64:	880b883a 	mov	r5,r17
   41c68:	9009883a 	mov	r4,r18
   41c6c:	0040e880 	call	40e88 <_malloc_r>
   41c70:	1023883a 	mov	r17,r2
   41c74:	1000aa26 	beq	r2,zero,41f20 <_realloc_r+0x574>
   41c78:	98ffff17 	ldw	r3,-4(r19)
   41c7c:	113ffe04 	addi	r4,r2,-8
   41c80:	00bfff84 	movi	r2,-2
   41c84:	1884703a 	and	r2,r3,r2
   41c88:	a885883a 	add	r2,r21,r2
   41c8c:	20808626 	beq	r4,r2,41ea8 <_realloc_r+0x4fc>
   41c90:	81bfff04 	addi	r6,r16,-4
   41c94:	00800904 	movi	r2,36
   41c98:	11807036 	bltu	r2,r6,41e5c <_realloc_r+0x4b0>
   41c9c:	00c004c4 	movi	r3,19
   41ca0:	19805636 	bltu	r3,r6,41dfc <_realloc_r+0x450>
   41ca4:	8805883a 	mov	r2,r17
   41ca8:	9807883a 	mov	r3,r19
   41cac:	19000017 	ldw	r4,0(r3)
   41cb0:	11000015 	stw	r4,0(r2)
   41cb4:	19000117 	ldw	r4,4(r3)
   41cb8:	11000115 	stw	r4,4(r2)
   41cbc:	18c00217 	ldw	r3,8(r3)
   41cc0:	10c00215 	stw	r3,8(r2)
   41cc4:	980b883a 	mov	r5,r19
   41cc8:	9009883a 	mov	r4,r18
   41ccc:	00428000 	call	42800 <_free_r>
   41cd0:	9009883a 	mov	r4,r18
   41cd4:	0043aac0 	call	43aac <__malloc_unlock>
   41cd8:	8805883a 	mov	r2,r17
   41cdc:	003f9a06 	br	41b48 <__alt_data_end+0xfffcbfe8>
   41ce0:	300b883a 	mov	r5,r6
   41ce4:	dfc00917 	ldw	ra,36(sp)
   41ce8:	df000817 	ldw	fp,32(sp)
   41cec:	ddc00717 	ldw	r23,28(sp)
   41cf0:	dd800617 	ldw	r22,24(sp)
   41cf4:	dd400517 	ldw	r21,20(sp)
   41cf8:	dd000417 	ldw	r20,16(sp)
   41cfc:	dcc00317 	ldw	r19,12(sp)
   41d00:	dc800217 	ldw	r18,8(sp)
   41d04:	dc400117 	ldw	r17,4(sp)
   41d08:	dc000017 	ldw	r16,0(sp)
   41d0c:	dec00a04 	addi	sp,sp,40
   41d10:	0040e881 	jmpi	40e88 <_malloc_r>
   41d14:	11400317 	ldw	r5,12(r2)
   41d18:	10800217 	ldw	r2,8(r2)
   41d1c:	9823883a 	mov	r17,r19
   41d20:	2021883a 	mov	r16,r4
   41d24:	11400315 	stw	r5,12(r2)
   41d28:	28800215 	stw	r2,8(r5)
   41d2c:	003f7906 	br	41b14 <__alt_data_end+0xfffcbfb4>
   41d30:	21000117 	ldw	r4,4(r4)
   41d34:	00bfff04 	movi	r2,-4
   41d38:	a1800404 	addi	r6,r20,16
   41d3c:	2088703a 	and	r4,r4,r2
   41d40:	2409883a 	add	r4,r4,r16
   41d44:	2180380e 	bge	r4,r6,41e28 <_realloc_r+0x47c>
   41d48:	18c0004c 	andi	r3,r3,1
   41d4c:	183fc51e 	bne	r3,zero,41c64 <__alt_data_end+0xfffcc104>
   41d50:	9dfffe17 	ldw	r23,-8(r19)
   41d54:	adefc83a 	sub	r23,r21,r23
   41d58:	b9400117 	ldw	r5,4(r23)
   41d5c:	288a703a 	and	r5,r5,r2
   41d60:	216d883a 	add	r22,r4,r5
   41d64:	b1bf8b16 	blt	r22,r6,41b94 <__alt_data_end+0xfffcc034>
   41d68:	b8800317 	ldw	r2,12(r23)
   41d6c:	b8c00217 	ldw	r3,8(r23)
   41d70:	81bfff04 	addi	r6,r16,-4
   41d74:	01000904 	movi	r4,36
   41d78:	18800315 	stw	r2,12(r3)
   41d7c:	10c00215 	stw	r3,8(r2)
   41d80:	bc400204 	addi	r17,r23,8
   41d84:	21805a36 	bltu	r4,r6,41ef0 <_realloc_r+0x544>
   41d88:	008004c4 	movi	r2,19
   41d8c:	1180562e 	bgeu	r2,r6,41ee8 <_realloc_r+0x53c>
   41d90:	98800017 	ldw	r2,0(r19)
   41d94:	b8800215 	stw	r2,8(r23)
   41d98:	98800117 	ldw	r2,4(r19)
   41d9c:	b8800315 	stw	r2,12(r23)
   41da0:	008006c4 	movi	r2,27
   41da4:	11805636 	bltu	r2,r6,41f00 <_realloc_r+0x554>
   41da8:	b8800404 	addi	r2,r23,16
   41dac:	9cc00204 	addi	r19,r19,8
   41db0:	98c00017 	ldw	r3,0(r19)
   41db4:	10c00015 	stw	r3,0(r2)
   41db8:	98c00117 	ldw	r3,4(r19)
   41dbc:	10c00115 	stw	r3,4(r2)
   41dc0:	98c00217 	ldw	r3,8(r19)
   41dc4:	10c00215 	stw	r3,8(r2)
   41dc8:	bd07883a 	add	r3,r23,r20
   41dcc:	b505c83a 	sub	r2,r22,r20
   41dd0:	e0c00215 	stw	r3,8(fp)
   41dd4:	10800054 	ori	r2,r2,1
   41dd8:	18800115 	stw	r2,4(r3)
   41ddc:	b8800117 	ldw	r2,4(r23)
   41de0:	9009883a 	mov	r4,r18
   41de4:	1080004c 	andi	r2,r2,1
   41de8:	a0a8b03a 	or	r20,r20,r2
   41dec:	bd000115 	stw	r20,4(r23)
   41df0:	0043aac0 	call	43aac <__malloc_unlock>
   41df4:	8805883a 	mov	r2,r17
   41df8:	003f5306 	br	41b48 <__alt_data_end+0xfffcbfe8>
   41dfc:	98c00017 	ldw	r3,0(r19)
   41e00:	88c00015 	stw	r3,0(r17)
   41e04:	98c00117 	ldw	r3,4(r19)
   41e08:	88c00115 	stw	r3,4(r17)
   41e0c:	00c006c4 	movi	r3,27
   41e10:	19801d36 	bltu	r3,r6,41e88 <_realloc_r+0x4dc>
   41e14:	88800204 	addi	r2,r17,8
   41e18:	98c00204 	addi	r3,r19,8
   41e1c:	003fa306 	br	41cac <__alt_data_end+0xfffcc14c>
   41e20:	8807883a 	mov	r3,r17
   41e24:	003f7406 	br	41bf8 <__alt_data_end+0xfffcc098>
   41e28:	ad2b883a 	add	r21,r21,r20
   41e2c:	2505c83a 	sub	r2,r4,r20
   41e30:	e5400215 	stw	r21,8(fp)
   41e34:	10800054 	ori	r2,r2,1
   41e38:	a8800115 	stw	r2,4(r21)
   41e3c:	98bfff17 	ldw	r2,-4(r19)
   41e40:	9009883a 	mov	r4,r18
   41e44:	1080004c 	andi	r2,r2,1
   41e48:	a0a8b03a 	or	r20,r20,r2
   41e4c:	9d3fff15 	stw	r20,-4(r19)
   41e50:	0043aac0 	call	43aac <__malloc_unlock>
   41e54:	9805883a 	mov	r2,r19
   41e58:	003f3b06 	br	41b48 <__alt_data_end+0xfffcbfe8>
   41e5c:	8809883a 	mov	r4,r17
   41e60:	980b883a 	mov	r5,r19
   41e64:	00418500 	call	41850 <memmove>
   41e68:	003f9606 	br	41cc4 <__alt_data_end+0xfffcc164>
   41e6c:	8809883a 	mov	r4,r17
   41e70:	980b883a 	mov	r5,r19
   41e74:	00418500 	call	41850 <memmove>
   41e78:	b8c00117 	ldw	r3,4(r23)
   41e7c:	b021883a 	mov	r16,r22
   41e80:	b82b883a 	mov	r21,r23
   41e84:	003f2306 	br	41b14 <__alt_data_end+0xfffcbfb4>
   41e88:	98c00217 	ldw	r3,8(r19)
   41e8c:	88c00215 	stw	r3,8(r17)
   41e90:	98c00317 	ldw	r3,12(r19)
   41e94:	88c00315 	stw	r3,12(r17)
   41e98:	30800c26 	beq	r6,r2,41ecc <_realloc_r+0x520>
   41e9c:	88800404 	addi	r2,r17,16
   41ea0:	98c00404 	addi	r3,r19,16
   41ea4:	003f8106 	br	41cac <__alt_data_end+0xfffcc14c>
   41ea8:	893fff17 	ldw	r4,-4(r17)
   41eac:	00bfff04 	movi	r2,-4
   41eb0:	9823883a 	mov	r17,r19
   41eb4:	2084703a 	and	r2,r4,r2
   41eb8:	80a1883a 	add	r16,r16,r2
   41ebc:	003f1506 	br	41b14 <__alt_data_end+0xfffcbfb4>
   41ec0:	b8c00404 	addi	r3,r23,16
   41ec4:	9cc00204 	addi	r19,r19,8
   41ec8:	003f4b06 	br	41bf8 <__alt_data_end+0xfffcc098>
   41ecc:	99000417 	ldw	r4,16(r19)
   41ed0:	88800604 	addi	r2,r17,24
   41ed4:	98c00604 	addi	r3,r19,24
   41ed8:	89000415 	stw	r4,16(r17)
   41edc:	99000517 	ldw	r4,20(r19)
   41ee0:	89000515 	stw	r4,20(r17)
   41ee4:	003f7106 	br	41cac <__alt_data_end+0xfffcc14c>
   41ee8:	8805883a 	mov	r2,r17
   41eec:	003fb006 	br	41db0 <__alt_data_end+0xfffcc250>
   41ef0:	8809883a 	mov	r4,r17
   41ef4:	980b883a 	mov	r5,r19
   41ef8:	00418500 	call	41850 <memmove>
   41efc:	003fb206 	br	41dc8 <__alt_data_end+0xfffcc268>
   41f00:	98800217 	ldw	r2,8(r19)
   41f04:	b8800415 	stw	r2,16(r23)
   41f08:	98800317 	ldw	r2,12(r19)
   41f0c:	b8800515 	stw	r2,20(r23)
   41f10:	31000726 	beq	r6,r4,41f30 <_realloc_r+0x584>
   41f14:	b8800604 	addi	r2,r23,24
   41f18:	9cc00404 	addi	r19,r19,16
   41f1c:	003fa406 	br	41db0 <__alt_data_end+0xfffcc250>
   41f20:	9009883a 	mov	r4,r18
   41f24:	0043aac0 	call	43aac <__malloc_unlock>
   41f28:	0005883a 	mov	r2,zero
   41f2c:	003f0606 	br	41b48 <__alt_data_end+0xfffcbfe8>
   41f30:	98c00417 	ldw	r3,16(r19)
   41f34:	9cc00604 	addi	r19,r19,24
   41f38:	b8800804 	addi	r2,r23,32
   41f3c:	b8c00615 	stw	r3,24(r23)
   41f40:	98ffff17 	ldw	r3,-4(r19)
   41f44:	b8c00715 	stw	r3,28(r23)
   41f48:	003f9906 	br	41db0 <__alt_data_end+0xfffcc250>

00041f4c <_sbrk_r>:
   41f4c:	defffd04 	addi	sp,sp,-12
   41f50:	dc000015 	stw	r16,0(sp)
   41f54:	04000174 	movhi	r16,5
   41f58:	dc400115 	stw	r17,4(sp)
   41f5c:	84279b04 	addi	r16,r16,-24980
   41f60:	2023883a 	mov	r17,r4
   41f64:	2809883a 	mov	r4,r5
   41f68:	dfc00215 	stw	ra,8(sp)
   41f6c:	80000015 	stw	zero,0(r16)
   41f70:	0043ca00 	call	43ca0 <sbrk>
   41f74:	00ffffc4 	movi	r3,-1
   41f78:	10c00526 	beq	r2,r3,41f90 <_sbrk_r+0x44>
   41f7c:	dfc00217 	ldw	ra,8(sp)
   41f80:	dc400117 	ldw	r17,4(sp)
   41f84:	dc000017 	ldw	r16,0(sp)
   41f88:	dec00304 	addi	sp,sp,12
   41f8c:	f800283a 	ret
   41f90:	80c00017 	ldw	r3,0(r16)
   41f94:	183ff926 	beq	r3,zero,41f7c <__alt_data_end+0xfffcc41c>
   41f98:	88c00015 	stw	r3,0(r17)
   41f9c:	003ff706 	br	41f7c <__alt_data_end+0xfffcc41c>

00041fa0 <__swsetup_r>:
   41fa0:	00800174 	movhi	r2,5
   41fa4:	defffd04 	addi	sp,sp,-12
   41fa8:	10a0bf04 	addi	r2,r2,-32004
   41fac:	dc400115 	stw	r17,4(sp)
   41fb0:	2023883a 	mov	r17,r4
   41fb4:	11000017 	ldw	r4,0(r2)
   41fb8:	dc000015 	stw	r16,0(sp)
   41fbc:	dfc00215 	stw	ra,8(sp)
   41fc0:	2821883a 	mov	r16,r5
   41fc4:	20000226 	beq	r4,zero,41fd0 <__swsetup_r+0x30>
   41fc8:	20c00e17 	ldw	r3,56(r4)
   41fcc:	18002e26 	beq	r3,zero,42088 <__swsetup_r+0xe8>
   41fd0:	8080030b 	ldhu	r2,12(r16)
   41fd4:	10c0020c 	andi	r3,r2,8
   41fd8:	100d883a 	mov	r6,r2
   41fdc:	18000f26 	beq	r3,zero,4201c <__swsetup_r+0x7c>
   41fe0:	80c00417 	ldw	r3,16(r16)
   41fe4:	18001526 	beq	r3,zero,4203c <__swsetup_r+0x9c>
   41fe8:	1100004c 	andi	r4,r2,1
   41fec:	20001c1e 	bne	r4,zero,42060 <__swsetup_r+0xc0>
   41ff0:	1080008c 	andi	r2,r2,2
   41ff4:	1000261e 	bne	r2,zero,42090 <__swsetup_r+0xf0>
   41ff8:	80800517 	ldw	r2,20(r16)
   41ffc:	80800215 	stw	r2,8(r16)
   42000:	18001c26 	beq	r3,zero,42074 <__swsetup_r+0xd4>
   42004:	0005883a 	mov	r2,zero
   42008:	dfc00217 	ldw	ra,8(sp)
   4200c:	dc400117 	ldw	r17,4(sp)
   42010:	dc000017 	ldw	r16,0(sp)
   42014:	dec00304 	addi	sp,sp,12
   42018:	f800283a 	ret
   4201c:	3080040c 	andi	r2,r6,16
   42020:	10001726 	beq	r2,zero,42080 <__swsetup_r+0xe0>
   42024:	3080010c 	andi	r2,r6,4
   42028:	10001b1e 	bne	r2,zero,42098 <__swsetup_r+0xf8>
   4202c:	80c00417 	ldw	r3,16(r16)
   42030:	30800214 	ori	r2,r6,8
   42034:	8080030d 	sth	r2,12(r16)
   42038:	183feb1e 	bne	r3,zero,41fe8 <__alt_data_end+0xfffcc488>
   4203c:	1140a00c 	andi	r5,r2,640
   42040:	01008004 	movi	r4,512
   42044:	293fe826 	beq	r5,r4,41fe8 <__alt_data_end+0xfffcc488>
   42048:	8809883a 	mov	r4,r17
   4204c:	800b883a 	mov	r5,r16
   42050:	0042c600 	call	42c60 <__smakebuf_r>
   42054:	8080030b 	ldhu	r2,12(r16)
   42058:	80c00417 	ldw	r3,16(r16)
   4205c:	003fe206 	br	41fe8 <__alt_data_end+0xfffcc488>
   42060:	80800517 	ldw	r2,20(r16)
   42064:	80000215 	stw	zero,8(r16)
   42068:	0085c83a 	sub	r2,zero,r2
   4206c:	80800615 	stw	r2,24(r16)
   42070:	183fe41e 	bne	r3,zero,42004 <__alt_data_end+0xfffcc4a4>
   42074:	8080030b 	ldhu	r2,12(r16)
   42078:	1080200c 	andi	r2,r2,128
   4207c:	103fe226 	beq	r2,zero,42008 <__alt_data_end+0xfffcc4a8>
   42080:	00bfffc4 	movi	r2,-1
   42084:	003fe006 	br	42008 <__alt_data_end+0xfffcc4a8>
   42088:	004268c0 	call	4268c <__sinit>
   4208c:	003fd006 	br	41fd0 <__alt_data_end+0xfffcc470>
   42090:	0005883a 	mov	r2,zero
   42094:	003fd906 	br	41ffc <__alt_data_end+0xfffcc49c>
   42098:	81400c17 	ldw	r5,48(r16)
   4209c:	28000626 	beq	r5,zero,420b8 <__swsetup_r+0x118>
   420a0:	80801004 	addi	r2,r16,64
   420a4:	28800326 	beq	r5,r2,420b4 <__swsetup_r+0x114>
   420a8:	8809883a 	mov	r4,r17
   420ac:	00428000 	call	42800 <_free_r>
   420b0:	8180030b 	ldhu	r6,12(r16)
   420b4:	80000c15 	stw	zero,48(r16)
   420b8:	80c00417 	ldw	r3,16(r16)
   420bc:	00bff6c4 	movi	r2,-37
   420c0:	118c703a 	and	r6,r2,r6
   420c4:	80000115 	stw	zero,4(r16)
   420c8:	80c00015 	stw	r3,0(r16)
   420cc:	003fd806 	br	42030 <__alt_data_end+0xfffcc4d0>

000420d0 <_fflush_r>:
   420d0:	defffb04 	addi	sp,sp,-20
   420d4:	dcc00315 	stw	r19,12(sp)
   420d8:	dc000015 	stw	r16,0(sp)
   420dc:	dfc00415 	stw	ra,16(sp)
   420e0:	dc800215 	stw	r18,8(sp)
   420e4:	dc400115 	stw	r17,4(sp)
   420e8:	2027883a 	mov	r19,r4
   420ec:	2821883a 	mov	r16,r5
   420f0:	20000226 	beq	r4,zero,420fc <_fflush_r+0x2c>
   420f4:	20800e17 	ldw	r2,56(r4)
   420f8:	10005326 	beq	r2,zero,42248 <_fflush_r+0x178>
   420fc:	8080030b 	ldhu	r2,12(r16)
   42100:	10ffffcc 	andi	r3,r2,65535
   42104:	18e0001c 	xori	r3,r3,32768
   42108:	18e00004 	addi	r3,r3,-32768
   4210c:	18002c26 	beq	r3,zero,421c0 <_fflush_r+0xf0>
   42110:	10c0020c 	andi	r3,r2,8
   42114:	1800321e 	bne	r3,zero,421e0 <_fflush_r+0x110>
   42118:	80c00117 	ldw	r3,4(r16)
   4211c:	10820014 	ori	r2,r2,2048
   42120:	8080030d 	sth	r2,12(r16)
   42124:	00c0570e 	bge	zero,r3,42284 <_fflush_r+0x1b4>
   42128:	82000a17 	ldw	r8,40(r16)
   4212c:	40002426 	beq	r8,zero,421c0 <_fflush_r+0xf0>
   42130:	9c400017 	ldw	r17,0(r19)
   42134:	10c4000c 	andi	r3,r2,4096
   42138:	98000015 	stw	zero,0(r19)
   4213c:	18004626 	beq	r3,zero,42258 <_fflush_r+0x188>
   42140:	81801417 	ldw	r6,80(r16)
   42144:	10c0010c 	andi	r3,r2,4
   42148:	18000626 	beq	r3,zero,42164 <_fflush_r+0x94>
   4214c:	80c00117 	ldw	r3,4(r16)
   42150:	80800c17 	ldw	r2,48(r16)
   42154:	30cdc83a 	sub	r6,r6,r3
   42158:	10000226 	beq	r2,zero,42164 <_fflush_r+0x94>
   4215c:	80800f17 	ldw	r2,60(r16)
   42160:	308dc83a 	sub	r6,r6,r2
   42164:	81400717 	ldw	r5,28(r16)
   42168:	9809883a 	mov	r4,r19
   4216c:	000f883a 	mov	r7,zero
   42170:	403ee83a 	callr	r8
   42174:	00ffffc4 	movi	r3,-1
   42178:	10c04526 	beq	r2,r3,42290 <_fflush_r+0x1c0>
   4217c:	80c0030b 	ldhu	r3,12(r16)
   42180:	81000417 	ldw	r4,16(r16)
   42184:	80000115 	stw	zero,4(r16)
   42188:	197dffcc 	andi	r5,r3,63487
   4218c:	8140030d 	sth	r5,12(r16)
   42190:	81000015 	stw	r4,0(r16)
   42194:	18c4000c 	andi	r3,r3,4096
   42198:	18000126 	beq	r3,zero,421a0 <_fflush_r+0xd0>
   4219c:	80801415 	stw	r2,80(r16)
   421a0:	81400c17 	ldw	r5,48(r16)
   421a4:	9c400015 	stw	r17,0(r19)
   421a8:	28000526 	beq	r5,zero,421c0 <_fflush_r+0xf0>
   421ac:	80801004 	addi	r2,r16,64
   421b0:	28800226 	beq	r5,r2,421bc <_fflush_r+0xec>
   421b4:	9809883a 	mov	r4,r19
   421b8:	00428000 	call	42800 <_free_r>
   421bc:	80000c15 	stw	zero,48(r16)
   421c0:	0005883a 	mov	r2,zero
   421c4:	dfc00417 	ldw	ra,16(sp)
   421c8:	dcc00317 	ldw	r19,12(sp)
   421cc:	dc800217 	ldw	r18,8(sp)
   421d0:	dc400117 	ldw	r17,4(sp)
   421d4:	dc000017 	ldw	r16,0(sp)
   421d8:	dec00504 	addi	sp,sp,20
   421dc:	f800283a 	ret
   421e0:	84800417 	ldw	r18,16(r16)
   421e4:	903ff626 	beq	r18,zero,421c0 <__alt_data_end+0xfffcc660>
   421e8:	84400017 	ldw	r17,0(r16)
   421ec:	108000cc 	andi	r2,r2,3
   421f0:	84800015 	stw	r18,0(r16)
   421f4:	8ca3c83a 	sub	r17,r17,r18
   421f8:	10001526 	beq	r2,zero,42250 <_fflush_r+0x180>
   421fc:	0005883a 	mov	r2,zero
   42200:	80800215 	stw	r2,8(r16)
   42204:	04400316 	blt	zero,r17,42214 <_fflush_r+0x144>
   42208:	003fed06 	br	421c0 <__alt_data_end+0xfffcc660>
   4220c:	90a5883a 	add	r18,r18,r2
   42210:	047feb0e 	bge	zero,r17,421c0 <__alt_data_end+0xfffcc660>
   42214:	80800917 	ldw	r2,36(r16)
   42218:	81400717 	ldw	r5,28(r16)
   4221c:	880f883a 	mov	r7,r17
   42220:	900d883a 	mov	r6,r18
   42224:	9809883a 	mov	r4,r19
   42228:	103ee83a 	callr	r2
   4222c:	88a3c83a 	sub	r17,r17,r2
   42230:	00bff616 	blt	zero,r2,4220c <__alt_data_end+0xfffcc6ac>
   42234:	80c0030b 	ldhu	r3,12(r16)
   42238:	00bfffc4 	movi	r2,-1
   4223c:	18c01014 	ori	r3,r3,64
   42240:	80c0030d 	sth	r3,12(r16)
   42244:	003fdf06 	br	421c4 <__alt_data_end+0xfffcc664>
   42248:	004268c0 	call	4268c <__sinit>
   4224c:	003fab06 	br	420fc <__alt_data_end+0xfffcc59c>
   42250:	80800517 	ldw	r2,20(r16)
   42254:	003fea06 	br	42200 <__alt_data_end+0xfffcc6a0>
   42258:	81400717 	ldw	r5,28(r16)
   4225c:	000d883a 	mov	r6,zero
   42260:	9809883a 	mov	r4,r19
   42264:	01c00044 	movi	r7,1
   42268:	403ee83a 	callr	r8
   4226c:	100d883a 	mov	r6,r2
   42270:	00bfffc4 	movi	r2,-1
   42274:	30801326 	beq	r6,r2,422c4 <_fflush_r+0x1f4>
   42278:	8080030b 	ldhu	r2,12(r16)
   4227c:	82000a17 	ldw	r8,40(r16)
   42280:	003fb006 	br	42144 <__alt_data_end+0xfffcc5e4>
   42284:	80c00f17 	ldw	r3,60(r16)
   42288:	00ffa716 	blt	zero,r3,42128 <__alt_data_end+0xfffcc5c8>
   4228c:	003fcc06 	br	421c0 <__alt_data_end+0xfffcc660>
   42290:	98c00017 	ldw	r3,0(r19)
   42294:	183fb926 	beq	r3,zero,4217c <__alt_data_end+0xfffcc61c>
   42298:	01000744 	movi	r4,29
   4229c:	19000226 	beq	r3,r4,422a8 <_fflush_r+0x1d8>
   422a0:	01000584 	movi	r4,22
   422a4:	1900101e 	bne	r3,r4,422e8 <_fflush_r+0x218>
   422a8:	8080030b 	ldhu	r2,12(r16)
   422ac:	80c00417 	ldw	r3,16(r16)
   422b0:	80000115 	stw	zero,4(r16)
   422b4:	10bdffcc 	andi	r2,r2,63487
   422b8:	8080030d 	sth	r2,12(r16)
   422bc:	80c00015 	stw	r3,0(r16)
   422c0:	003fb706 	br	421a0 <__alt_data_end+0xfffcc640>
   422c4:	98800017 	ldw	r2,0(r19)
   422c8:	103feb26 	beq	r2,zero,42278 <__alt_data_end+0xfffcc718>
   422cc:	00c00744 	movi	r3,29
   422d0:	10c00226 	beq	r2,r3,422dc <_fflush_r+0x20c>
   422d4:	00c00584 	movi	r3,22
   422d8:	10ffd61e 	bne	r2,r3,42234 <__alt_data_end+0xfffcc6d4>
   422dc:	9c400015 	stw	r17,0(r19)
   422e0:	0005883a 	mov	r2,zero
   422e4:	003fb706 	br	421c4 <__alt_data_end+0xfffcc664>
   422e8:	80c0030b 	ldhu	r3,12(r16)
   422ec:	18c01014 	ori	r3,r3,64
   422f0:	80c0030d 	sth	r3,12(r16)
   422f4:	003fb306 	br	421c4 <__alt_data_end+0xfffcc664>

000422f8 <fflush>:
   422f8:	20000526 	beq	r4,zero,42310 <fflush+0x18>
   422fc:	00800174 	movhi	r2,5
   42300:	10a0bf04 	addi	r2,r2,-32004
   42304:	200b883a 	mov	r5,r4
   42308:	11000017 	ldw	r4,0(r2)
   4230c:	00420d01 	jmpi	420d0 <_fflush_r>
   42310:	00800174 	movhi	r2,5
   42314:	10a0be04 	addi	r2,r2,-32008
   42318:	11000017 	ldw	r4,0(r2)
   4231c:	01400134 	movhi	r5,4
   42320:	29483404 	addi	r5,r5,8400
   42324:	0042ba81 	jmpi	42ba8 <_fwalk_reent>

00042328 <__fp_lock>:
   42328:	0005883a 	mov	r2,zero
   4232c:	f800283a 	ret

00042330 <__fp_unlock>:
   42330:	0005883a 	mov	r2,zero
   42334:	f800283a 	ret

00042338 <_cleanup_r>:
   42338:	01400134 	movhi	r5,4
   4233c:	294c8a04 	addi	r5,r5,12840
   42340:	0042af01 	jmpi	42af0 <_fwalk>

00042344 <__sinit.part.1>:
   42344:	defff604 	addi	sp,sp,-40
   42348:	00c00134 	movhi	r3,4
   4234c:	dfc00915 	stw	ra,36(sp)
   42350:	df000815 	stw	fp,32(sp)
   42354:	ddc00715 	stw	r23,28(sp)
   42358:	dd800615 	stw	r22,24(sp)
   4235c:	dd400515 	stw	r21,20(sp)
   42360:	dd000415 	stw	r20,16(sp)
   42364:	dcc00315 	stw	r19,12(sp)
   42368:	dc800215 	stw	r18,8(sp)
   4236c:	dc400115 	stw	r17,4(sp)
   42370:	dc000015 	stw	r16,0(sp)
   42374:	18c8ce04 	addi	r3,r3,9016
   42378:	24000117 	ldw	r16,4(r4)
   4237c:	20c00f15 	stw	r3,60(r4)
   42380:	07000044 	movi	fp,1
   42384:	00c000c4 	movi	r3,3
   42388:	2080bb04 	addi	r2,r4,748
   4238c:	20c0b915 	stw	r3,740(r4)
   42390:	27000e15 	stw	fp,56(r4)
   42394:	2080ba15 	stw	r2,744(r4)
   42398:	2000b815 	stw	zero,736(r4)
   4239c:	05c00204 	movi	r23,8
   423a0:	00800104 	movi	r2,4
   423a4:	2025883a 	mov	r18,r4
   423a8:	b80d883a 	mov	r6,r23
   423ac:	81001704 	addi	r4,r16,92
   423b0:	000b883a 	mov	r5,zero
   423b4:	80000015 	stw	zero,0(r16)
   423b8:	80000115 	stw	zero,4(r16)
   423bc:	80000215 	stw	zero,8(r16)
   423c0:	8080030d 	sth	r2,12(r16)
   423c4:	80001915 	stw	zero,100(r16)
   423c8:	8000038d 	sth	zero,14(r16)
   423cc:	80000415 	stw	zero,16(r16)
   423d0:	80000515 	stw	zero,20(r16)
   423d4:	80000615 	stw	zero,24(r16)
   423d8:	0042e180 	call	42e18 <memset>
   423dc:	05800134 	movhi	r22,4
   423e0:	94400217 	ldw	r17,8(r18)
   423e4:	05400134 	movhi	r21,4
   423e8:	05000134 	movhi	r20,4
   423ec:	04c00134 	movhi	r19,4
   423f0:	b58bcf04 	addi	r22,r22,12092
   423f4:	ad4be604 	addi	r21,r21,12184
   423f8:	a50c0504 	addi	r20,r20,12308
   423fc:	9ccc1c04 	addi	r19,r19,12400
   42400:	85800815 	stw	r22,32(r16)
   42404:	85400915 	stw	r21,36(r16)
   42408:	85000a15 	stw	r20,40(r16)
   4240c:	84c00b15 	stw	r19,44(r16)
   42410:	84000715 	stw	r16,28(r16)
   42414:	00800284 	movi	r2,10
   42418:	89001704 	addi	r4,r17,92
   4241c:	b80d883a 	mov	r6,r23
   42420:	000b883a 	mov	r5,zero
   42424:	88000015 	stw	zero,0(r17)
   42428:	88000115 	stw	zero,4(r17)
   4242c:	88000215 	stw	zero,8(r17)
   42430:	8880030d 	sth	r2,12(r17)
   42434:	88001915 	stw	zero,100(r17)
   42438:	8f00038d 	sth	fp,14(r17)
   4243c:	88000415 	stw	zero,16(r17)
   42440:	88000515 	stw	zero,20(r17)
   42444:	88000615 	stw	zero,24(r17)
   42448:	0042e180 	call	42e18 <memset>
   4244c:	94000317 	ldw	r16,12(r18)
   42450:	00800484 	movi	r2,18
   42454:	8c400715 	stw	r17,28(r17)
   42458:	8d800815 	stw	r22,32(r17)
   4245c:	8d400915 	stw	r21,36(r17)
   42460:	8d000a15 	stw	r20,40(r17)
   42464:	8cc00b15 	stw	r19,44(r17)
   42468:	8080030d 	sth	r2,12(r16)
   4246c:	00800084 	movi	r2,2
   42470:	80000015 	stw	zero,0(r16)
   42474:	80000115 	stw	zero,4(r16)
   42478:	80000215 	stw	zero,8(r16)
   4247c:	80001915 	stw	zero,100(r16)
   42480:	8080038d 	sth	r2,14(r16)
   42484:	80000415 	stw	zero,16(r16)
   42488:	80000515 	stw	zero,20(r16)
   4248c:	80000615 	stw	zero,24(r16)
   42490:	81001704 	addi	r4,r16,92
   42494:	000b883a 	mov	r5,zero
   42498:	b80d883a 	mov	r6,r23
   4249c:	0042e180 	call	42e18 <memset>
   424a0:	84000715 	stw	r16,28(r16)
   424a4:	85800815 	stw	r22,32(r16)
   424a8:	85400915 	stw	r21,36(r16)
   424ac:	85000a15 	stw	r20,40(r16)
   424b0:	84c00b15 	stw	r19,44(r16)
   424b4:	dfc00917 	ldw	ra,36(sp)
   424b8:	df000817 	ldw	fp,32(sp)
   424bc:	ddc00717 	ldw	r23,28(sp)
   424c0:	dd800617 	ldw	r22,24(sp)
   424c4:	dd400517 	ldw	r21,20(sp)
   424c8:	dd000417 	ldw	r20,16(sp)
   424cc:	dcc00317 	ldw	r19,12(sp)
   424d0:	dc800217 	ldw	r18,8(sp)
   424d4:	dc400117 	ldw	r17,4(sp)
   424d8:	dc000017 	ldw	r16,0(sp)
   424dc:	dec00a04 	addi	sp,sp,40
   424e0:	f800283a 	ret

000424e4 <__sfmoreglue>:
   424e4:	defffc04 	addi	sp,sp,-16
   424e8:	dc800215 	stw	r18,8(sp)
   424ec:	2825883a 	mov	r18,r5
   424f0:	dc000015 	stw	r16,0(sp)
   424f4:	01401a04 	movi	r5,104
   424f8:	2021883a 	mov	r16,r4
   424fc:	9009883a 	mov	r4,r18
   42500:	dfc00315 	stw	ra,12(sp)
   42504:	dc400115 	stw	r17,4(sp)
   42508:	00407dc0 	call	407dc <__mulsi3>
   4250c:	8009883a 	mov	r4,r16
   42510:	11400304 	addi	r5,r2,12
   42514:	1023883a 	mov	r17,r2
   42518:	0040e880 	call	40e88 <_malloc_r>
   4251c:	1021883a 	mov	r16,r2
   42520:	10000726 	beq	r2,zero,42540 <__sfmoreglue+0x5c>
   42524:	11000304 	addi	r4,r2,12
   42528:	10000015 	stw	zero,0(r2)
   4252c:	14800115 	stw	r18,4(r2)
   42530:	11000215 	stw	r4,8(r2)
   42534:	000b883a 	mov	r5,zero
   42538:	880d883a 	mov	r6,r17
   4253c:	0042e180 	call	42e18 <memset>
   42540:	8005883a 	mov	r2,r16
   42544:	dfc00317 	ldw	ra,12(sp)
   42548:	dc800217 	ldw	r18,8(sp)
   4254c:	dc400117 	ldw	r17,4(sp)
   42550:	dc000017 	ldw	r16,0(sp)
   42554:	dec00404 	addi	sp,sp,16
   42558:	f800283a 	ret

0004255c <__sfp>:
   4255c:	00800174 	movhi	r2,5
   42560:	defffb04 	addi	sp,sp,-20
   42564:	10a0be04 	addi	r2,r2,-32008
   42568:	dc800215 	stw	r18,8(sp)
   4256c:	14800017 	ldw	r18,0(r2)
   42570:	dcc00315 	stw	r19,12(sp)
   42574:	dfc00415 	stw	ra,16(sp)
   42578:	90800e17 	ldw	r2,56(r18)
   4257c:	dc400115 	stw	r17,4(sp)
   42580:	dc000015 	stw	r16,0(sp)
   42584:	2027883a 	mov	r19,r4
   42588:	1000021e 	bne	r2,zero,42594 <__sfp+0x38>
   4258c:	9009883a 	mov	r4,r18
   42590:	00423440 	call	42344 <__sinit.part.1>
   42594:	9480b804 	addi	r18,r18,736
   42598:	047fffc4 	movi	r17,-1
   4259c:	91400117 	ldw	r5,4(r18)
   425a0:	94000217 	ldw	r16,8(r18)
   425a4:	297fffc4 	addi	r5,r5,-1
   425a8:	28000a16 	blt	r5,zero,425d4 <__sfp+0x78>
   425ac:	8080030f 	ldh	r2,12(r16)
   425b0:	10000c26 	beq	r2,zero,425e4 <__sfp+0x88>
   425b4:	80c01d04 	addi	r3,r16,116
   425b8:	00000206 	br	425c4 <__sfp+0x68>
   425bc:	18bfe60f 	ldh	r2,-104(r3)
   425c0:	10000826 	beq	r2,zero,425e4 <__sfp+0x88>
   425c4:	297fffc4 	addi	r5,r5,-1
   425c8:	1c3ffd04 	addi	r16,r3,-12
   425cc:	18c01a04 	addi	r3,r3,104
   425d0:	2c7ffa1e 	bne	r5,r17,425bc <__alt_data_end+0xfffcca5c>
   425d4:	90800017 	ldw	r2,0(r18)
   425d8:	10001d26 	beq	r2,zero,42650 <__sfp+0xf4>
   425dc:	1025883a 	mov	r18,r2
   425e0:	003fee06 	br	4259c <__alt_data_end+0xfffcca3c>
   425e4:	00bfffc4 	movi	r2,-1
   425e8:	8080038d 	sth	r2,14(r16)
   425ec:	00800044 	movi	r2,1
   425f0:	8080030d 	sth	r2,12(r16)
   425f4:	80001915 	stw	zero,100(r16)
   425f8:	80000015 	stw	zero,0(r16)
   425fc:	80000215 	stw	zero,8(r16)
   42600:	80000115 	stw	zero,4(r16)
   42604:	80000415 	stw	zero,16(r16)
   42608:	80000515 	stw	zero,20(r16)
   4260c:	80000615 	stw	zero,24(r16)
   42610:	81001704 	addi	r4,r16,92
   42614:	000b883a 	mov	r5,zero
   42618:	01800204 	movi	r6,8
   4261c:	0042e180 	call	42e18 <memset>
   42620:	8005883a 	mov	r2,r16
   42624:	80000c15 	stw	zero,48(r16)
   42628:	80000d15 	stw	zero,52(r16)
   4262c:	80001115 	stw	zero,68(r16)
   42630:	80001215 	stw	zero,72(r16)
   42634:	dfc00417 	ldw	ra,16(sp)
   42638:	dcc00317 	ldw	r19,12(sp)
   4263c:	dc800217 	ldw	r18,8(sp)
   42640:	dc400117 	ldw	r17,4(sp)
   42644:	dc000017 	ldw	r16,0(sp)
   42648:	dec00504 	addi	sp,sp,20
   4264c:	f800283a 	ret
   42650:	9809883a 	mov	r4,r19
   42654:	01400104 	movi	r5,4
   42658:	00424e40 	call	424e4 <__sfmoreglue>
   4265c:	90800015 	stw	r2,0(r18)
   42660:	103fde1e 	bne	r2,zero,425dc <__alt_data_end+0xfffcca7c>
   42664:	00800304 	movi	r2,12
   42668:	98800015 	stw	r2,0(r19)
   4266c:	0005883a 	mov	r2,zero
   42670:	003ff006 	br	42634 <__alt_data_end+0xfffccad4>

00042674 <_cleanup>:
   42674:	00800174 	movhi	r2,5
   42678:	10a0be04 	addi	r2,r2,-32008
   4267c:	11000017 	ldw	r4,0(r2)
   42680:	01400134 	movhi	r5,4
   42684:	294c8a04 	addi	r5,r5,12840
   42688:	0042af01 	jmpi	42af0 <_fwalk>

0004268c <__sinit>:
   4268c:	20800e17 	ldw	r2,56(r4)
   42690:	10000126 	beq	r2,zero,42698 <__sinit+0xc>
   42694:	f800283a 	ret
   42698:	00423441 	jmpi	42344 <__sinit.part.1>

0004269c <__sfp_lock_acquire>:
   4269c:	f800283a 	ret

000426a0 <__sfp_lock_release>:
   426a0:	f800283a 	ret

000426a4 <__sinit_lock_acquire>:
   426a4:	f800283a 	ret

000426a8 <__sinit_lock_release>:
   426a8:	f800283a 	ret

000426ac <__fp_lock_all>:
   426ac:	00800174 	movhi	r2,5
   426b0:	10a0bf04 	addi	r2,r2,-32004
   426b4:	11000017 	ldw	r4,0(r2)
   426b8:	01400134 	movhi	r5,4
   426bc:	2948ca04 	addi	r5,r5,9000
   426c0:	0042af01 	jmpi	42af0 <_fwalk>

000426c4 <__fp_unlock_all>:
   426c4:	00800174 	movhi	r2,5
   426c8:	10a0bf04 	addi	r2,r2,-32004
   426cc:	11000017 	ldw	r4,0(r2)
   426d0:	01400134 	movhi	r5,4
   426d4:	2948cc04 	addi	r5,r5,9008
   426d8:	0042af01 	jmpi	42af0 <_fwalk>

000426dc <_malloc_trim_r>:
   426dc:	defffb04 	addi	sp,sp,-20
   426e0:	dcc00315 	stw	r19,12(sp)
   426e4:	04c00134 	movhi	r19,4
   426e8:	dc800215 	stw	r18,8(sp)
   426ec:	dc400115 	stw	r17,4(sp)
   426f0:	dc000015 	stw	r16,0(sp)
   426f4:	dfc00415 	stw	ra,16(sp)
   426f8:	2821883a 	mov	r16,r5
   426fc:	9cdb0904 	addi	r19,r19,27684
   42700:	2025883a 	mov	r18,r4
   42704:	0043a8c0 	call	43a8c <__malloc_lock>
   42708:	98800217 	ldw	r2,8(r19)
   4270c:	14400117 	ldw	r17,4(r2)
   42710:	00bfff04 	movi	r2,-4
   42714:	88a2703a 	and	r17,r17,r2
   42718:	8c21c83a 	sub	r16,r17,r16
   4271c:	8403fbc4 	addi	r16,r16,4079
   42720:	8020d33a 	srli	r16,r16,12
   42724:	0083ffc4 	movi	r2,4095
   42728:	843fffc4 	addi	r16,r16,-1
   4272c:	8020933a 	slli	r16,r16,12
   42730:	1400060e 	bge	r2,r16,4274c <_malloc_trim_r+0x70>
   42734:	9009883a 	mov	r4,r18
   42738:	000b883a 	mov	r5,zero
   4273c:	0041f4c0 	call	41f4c <_sbrk_r>
   42740:	98c00217 	ldw	r3,8(r19)
   42744:	1c47883a 	add	r3,r3,r17
   42748:	10c00a26 	beq	r2,r3,42774 <_malloc_trim_r+0x98>
   4274c:	9009883a 	mov	r4,r18
   42750:	0043aac0 	call	43aac <__malloc_unlock>
   42754:	0005883a 	mov	r2,zero
   42758:	dfc00417 	ldw	ra,16(sp)
   4275c:	dcc00317 	ldw	r19,12(sp)
   42760:	dc800217 	ldw	r18,8(sp)
   42764:	dc400117 	ldw	r17,4(sp)
   42768:	dc000017 	ldw	r16,0(sp)
   4276c:	dec00504 	addi	sp,sp,20
   42770:	f800283a 	ret
   42774:	9009883a 	mov	r4,r18
   42778:	040bc83a 	sub	r5,zero,r16
   4277c:	0041f4c0 	call	41f4c <_sbrk_r>
   42780:	00ffffc4 	movi	r3,-1
   42784:	10c00d26 	beq	r2,r3,427bc <_malloc_trim_r+0xe0>
   42788:	00c00174 	movhi	r3,5
   4278c:	18e7a304 	addi	r3,r3,-24948
   42790:	18800017 	ldw	r2,0(r3)
   42794:	99000217 	ldw	r4,8(r19)
   42798:	8c23c83a 	sub	r17,r17,r16
   4279c:	8c400054 	ori	r17,r17,1
   427a0:	1421c83a 	sub	r16,r2,r16
   427a4:	24400115 	stw	r17,4(r4)
   427a8:	9009883a 	mov	r4,r18
   427ac:	1c000015 	stw	r16,0(r3)
   427b0:	0043aac0 	call	43aac <__malloc_unlock>
   427b4:	00800044 	movi	r2,1
   427b8:	003fe706 	br	42758 <__alt_data_end+0xfffccbf8>
   427bc:	9009883a 	mov	r4,r18
   427c0:	000b883a 	mov	r5,zero
   427c4:	0041f4c0 	call	41f4c <_sbrk_r>
   427c8:	99000217 	ldw	r4,8(r19)
   427cc:	014003c4 	movi	r5,15
   427d0:	1107c83a 	sub	r3,r2,r4
   427d4:	28ffdd0e 	bge	r5,r3,4274c <__alt_data_end+0xfffccbec>
   427d8:	01400174 	movhi	r5,5
   427dc:	2960c004 	addi	r5,r5,-32000
   427e0:	29400017 	ldw	r5,0(r5)
   427e4:	18c00054 	ori	r3,r3,1
   427e8:	20c00115 	stw	r3,4(r4)
   427ec:	00c00174 	movhi	r3,5
   427f0:	1145c83a 	sub	r2,r2,r5
   427f4:	18e7a304 	addi	r3,r3,-24948
   427f8:	18800015 	stw	r2,0(r3)
   427fc:	003fd306 	br	4274c <__alt_data_end+0xfffccbec>

00042800 <_free_r>:
   42800:	28004c26 	beq	r5,zero,42934 <_free_r+0x134>
   42804:	defffd04 	addi	sp,sp,-12
   42808:	dc400115 	stw	r17,4(sp)
   4280c:	dc000015 	stw	r16,0(sp)
   42810:	2023883a 	mov	r17,r4
   42814:	2821883a 	mov	r16,r5
   42818:	dfc00215 	stw	ra,8(sp)
   4281c:	0043a8c0 	call	43a8c <__malloc_lock>
   42820:	813fff17 	ldw	r4,-4(r16)
   42824:	00bfff84 	movi	r2,-2
   42828:	02400134 	movhi	r9,4
   4282c:	81bffe04 	addi	r6,r16,-8
   42830:	2084703a 	and	r2,r4,r2
   42834:	4a5b0904 	addi	r9,r9,27684
   42838:	308b883a 	add	r5,r6,r2
   4283c:	2a000117 	ldw	r8,4(r5)
   42840:	49c00217 	ldw	r7,8(r9)
   42844:	00ffff04 	movi	r3,-4
   42848:	40c6703a 	and	r3,r8,r3
   4284c:	39405326 	beq	r7,r5,4299c <_free_r+0x19c>
   42850:	28c00115 	stw	r3,4(r5)
   42854:	2100004c 	andi	r4,r4,1
   42858:	2000091e 	bne	r4,zero,42880 <_free_r+0x80>
   4285c:	81fffe17 	ldw	r7,-8(r16)
   42860:	4a000204 	addi	r8,r9,8
   42864:	31cdc83a 	sub	r6,r6,r7
   42868:	31000217 	ldw	r4,8(r6)
   4286c:	11c5883a 	add	r2,r2,r7
   42870:	22006126 	beq	r4,r8,429f8 <_free_r+0x1f8>
   42874:	31c00317 	ldw	r7,12(r6)
   42878:	21c00315 	stw	r7,12(r4)
   4287c:	39000215 	stw	r4,8(r7)
   42880:	28c9883a 	add	r4,r5,r3
   42884:	21c00117 	ldw	r7,4(r4)
   42888:	39c0004c 	andi	r7,r7,1
   4288c:	38000d1e 	bne	r7,zero,428c4 <_free_r+0xc4>
   42890:	29000217 	ldw	r4,8(r5)
   42894:	10c5883a 	add	r2,r2,r3
   42898:	00c00134 	movhi	r3,4
   4289c:	18db0b04 	addi	r3,r3,27692
   428a0:	20c07526 	beq	r4,r3,42a78 <_free_r+0x278>
   428a4:	29c00317 	ldw	r7,12(r5)
   428a8:	11400054 	ori	r5,r2,1
   428ac:	3087883a 	add	r3,r6,r2
   428b0:	21c00315 	stw	r7,12(r4)
   428b4:	39000215 	stw	r4,8(r7)
   428b8:	31400115 	stw	r5,4(r6)
   428bc:	18800015 	stw	r2,0(r3)
   428c0:	00000406 	br	428d4 <_free_r+0xd4>
   428c4:	10c00054 	ori	r3,r2,1
   428c8:	30c00115 	stw	r3,4(r6)
   428cc:	3087883a 	add	r3,r6,r2
   428d0:	18800015 	stw	r2,0(r3)
   428d4:	00c07fc4 	movi	r3,511
   428d8:	18801736 	bltu	r3,r2,42938 <_free_r+0x138>
   428dc:	1004d0fa 	srli	r2,r2,3
   428e0:	01400044 	movi	r5,1
   428e4:	49000117 	ldw	r4,4(r9)
   428e8:	1087883a 	add	r3,r2,r2
   428ec:	18c7883a 	add	r3,r3,r3
   428f0:	1005d0ba 	srai	r2,r2,2
   428f4:	18c7883a 	add	r3,r3,r3
   428f8:	1a47883a 	add	r3,r3,r9
   428fc:	19c00217 	ldw	r7,8(r3)
   42900:	2884983a 	sll	r2,r5,r2
   42904:	30c00315 	stw	r3,12(r6)
   42908:	31c00215 	stw	r7,8(r6)
   4290c:	1104b03a 	or	r2,r2,r4
   42910:	19800215 	stw	r6,8(r3)
   42914:	48800115 	stw	r2,4(r9)
   42918:	39800315 	stw	r6,12(r7)
   4291c:	8809883a 	mov	r4,r17
   42920:	dfc00217 	ldw	ra,8(sp)
   42924:	dc400117 	ldw	r17,4(sp)
   42928:	dc000017 	ldw	r16,0(sp)
   4292c:	dec00304 	addi	sp,sp,12
   42930:	0043aac1 	jmpi	43aac <__malloc_unlock>
   42934:	f800283a 	ret
   42938:	1006d27a 	srli	r3,r2,9
   4293c:	01000104 	movi	r4,4
   42940:	20c04036 	bltu	r4,r3,42a44 <_free_r+0x244>
   42944:	1006d1ba 	srli	r3,r2,6
   42948:	19400e04 	addi	r5,r3,56
   4294c:	2947883a 	add	r3,r5,r5
   42950:	18c7883a 	add	r3,r3,r3
   42954:	18c7883a 	add	r3,r3,r3
   42958:	1a49883a 	add	r4,r3,r9
   4295c:	20c00217 	ldw	r3,8(r4)
   42960:	01c00134 	movhi	r7,4
   42964:	39db0904 	addi	r7,r7,27684
   42968:	19003b26 	beq	r3,r4,42a58 <_free_r+0x258>
   4296c:	01ffff04 	movi	r7,-4
   42970:	19400117 	ldw	r5,4(r3)
   42974:	29ca703a 	and	r5,r5,r7
   42978:	1140022e 	bgeu	r2,r5,42984 <_free_r+0x184>
   4297c:	18c00217 	ldw	r3,8(r3)
   42980:	20fffb1e 	bne	r4,r3,42970 <__alt_data_end+0xfffcce10>
   42984:	18800317 	ldw	r2,12(r3)
   42988:	30800315 	stw	r2,12(r6)
   4298c:	30c00215 	stw	r3,8(r6)
   42990:	11800215 	stw	r6,8(r2)
   42994:	19800315 	stw	r6,12(r3)
   42998:	003fe006 	br	4291c <__alt_data_end+0xfffccdbc>
   4299c:	2100004c 	andi	r4,r4,1
   429a0:	1885883a 	add	r2,r3,r2
   429a4:	2000071e 	bne	r4,zero,429c4 <_free_r+0x1c4>
   429a8:	817ffe17 	ldw	r5,-8(r16)
   429ac:	314dc83a 	sub	r6,r6,r5
   429b0:	30c00317 	ldw	r3,12(r6)
   429b4:	31000217 	ldw	r4,8(r6)
   429b8:	1145883a 	add	r2,r2,r5
   429bc:	20c00315 	stw	r3,12(r4)
   429c0:	19000215 	stw	r4,8(r3)
   429c4:	10c00054 	ori	r3,r2,1
   429c8:	30c00115 	stw	r3,4(r6)
   429cc:	00c00174 	movhi	r3,5
   429d0:	18e0c104 	addi	r3,r3,-31996
   429d4:	18c00017 	ldw	r3,0(r3)
   429d8:	49800215 	stw	r6,8(r9)
   429dc:	10ffcf36 	bltu	r2,r3,4291c <__alt_data_end+0xfffccdbc>
   429e0:	00800174 	movhi	r2,5
   429e4:	10a79a04 	addi	r2,r2,-24984
   429e8:	11400017 	ldw	r5,0(r2)
   429ec:	8809883a 	mov	r4,r17
   429f0:	00426dc0 	call	426dc <_malloc_trim_r>
   429f4:	003fc906 	br	4291c <__alt_data_end+0xfffccdbc>
   429f8:	28c9883a 	add	r4,r5,r3
   429fc:	21000117 	ldw	r4,4(r4)
   42a00:	2100004c 	andi	r4,r4,1
   42a04:	20000a1e 	bne	r4,zero,42a30 <_free_r+0x230>
   42a08:	29000317 	ldw	r4,12(r5)
   42a0c:	29400217 	ldw	r5,8(r5)
   42a10:	10c5883a 	add	r2,r2,r3
   42a14:	10c00054 	ori	r3,r2,1
   42a18:	29000315 	stw	r4,12(r5)
   42a1c:	21400215 	stw	r5,8(r4)
   42a20:	30c00115 	stw	r3,4(r6)
   42a24:	308d883a 	add	r6,r6,r2
   42a28:	30800015 	stw	r2,0(r6)
   42a2c:	003fbb06 	br	4291c <__alt_data_end+0xfffccdbc>
   42a30:	10c00054 	ori	r3,r2,1
   42a34:	30c00115 	stw	r3,4(r6)
   42a38:	308d883a 	add	r6,r6,r2
   42a3c:	30800015 	stw	r2,0(r6)
   42a40:	003fb606 	br	4291c <__alt_data_end+0xfffccdbc>
   42a44:	01000504 	movi	r4,20
   42a48:	20c01436 	bltu	r4,r3,42a9c <_free_r+0x29c>
   42a4c:	194016c4 	addi	r5,r3,91
   42a50:	2947883a 	add	r3,r5,r5
   42a54:	003fbe06 	br	42950 <__alt_data_end+0xfffccdf0>
   42a58:	280bd0ba 	srai	r5,r5,2
   42a5c:	00800044 	movi	r2,1
   42a60:	39000117 	ldw	r4,4(r7)
   42a64:	114a983a 	sll	r5,r2,r5
   42a68:	1805883a 	mov	r2,r3
   42a6c:	2908b03a 	or	r4,r5,r4
   42a70:	39000115 	stw	r4,4(r7)
   42a74:	003fc406 	br	42988 <__alt_data_end+0xfffcce28>
   42a78:	49800515 	stw	r6,20(r9)
   42a7c:	49800415 	stw	r6,16(r9)
   42a80:	10c00054 	ori	r3,r2,1
   42a84:	31000315 	stw	r4,12(r6)
   42a88:	31000215 	stw	r4,8(r6)
   42a8c:	30c00115 	stw	r3,4(r6)
   42a90:	308d883a 	add	r6,r6,r2
   42a94:	30800015 	stw	r2,0(r6)
   42a98:	003fa006 	br	4291c <__alt_data_end+0xfffccdbc>
   42a9c:	01001504 	movi	r4,84
   42aa0:	20c00436 	bltu	r4,r3,42ab4 <_free_r+0x2b4>
   42aa4:	1006d33a 	srli	r3,r2,12
   42aa8:	19401b84 	addi	r5,r3,110
   42aac:	2947883a 	add	r3,r5,r5
   42ab0:	003fa706 	br	42950 <__alt_data_end+0xfffccdf0>
   42ab4:	01005504 	movi	r4,340
   42ab8:	20c00436 	bltu	r4,r3,42acc <_free_r+0x2cc>
   42abc:	1006d3fa 	srli	r3,r2,15
   42ac0:	19401dc4 	addi	r5,r3,119
   42ac4:	2947883a 	add	r3,r5,r5
   42ac8:	003fa106 	br	42950 <__alt_data_end+0xfffccdf0>
   42acc:	01015504 	movi	r4,1364
   42ad0:	20c00436 	bltu	r4,r3,42ae4 <_free_r+0x2e4>
   42ad4:	1006d4ba 	srli	r3,r2,18
   42ad8:	19401f04 	addi	r5,r3,124
   42adc:	2947883a 	add	r3,r5,r5
   42ae0:	003f9b06 	br	42950 <__alt_data_end+0xfffccdf0>
   42ae4:	00c03f04 	movi	r3,252
   42ae8:	01401f84 	movi	r5,126
   42aec:	003f9806 	br	42950 <__alt_data_end+0xfffccdf0>

00042af0 <_fwalk>:
   42af0:	defff804 	addi	sp,sp,-32
   42af4:	dd400515 	stw	r21,20(sp)
   42af8:	2540b804 	addi	r21,r4,736
   42afc:	dd800615 	stw	r22,24(sp)
   42b00:	dd000415 	stw	r20,16(sp)
   42b04:	dfc00715 	stw	ra,28(sp)
   42b08:	dcc00315 	stw	r19,12(sp)
   42b0c:	dc800215 	stw	r18,8(sp)
   42b10:	dc400115 	stw	r17,4(sp)
   42b14:	dc000015 	stw	r16,0(sp)
   42b18:	2829883a 	mov	r20,r5
   42b1c:	002d883a 	mov	r22,zero
   42b20:	004269c0 	call	4269c <__sfp_lock_acquire>
   42b24:	a8001426 	beq	r21,zero,42b78 <_fwalk+0x88>
   42b28:	04ffffc4 	movi	r19,-1
   42b2c:	ac400117 	ldw	r17,4(r21)
   42b30:	ac800217 	ldw	r18,8(r21)
   42b34:	8c7fffc4 	addi	r17,r17,-1
   42b38:	88000d16 	blt	r17,zero,42b70 <_fwalk+0x80>
   42b3c:	94000304 	addi	r16,r18,12
   42b40:	94800384 	addi	r18,r18,14
   42b44:	80c0000f 	ldh	r3,0(r16)
   42b48:	8c7fffc4 	addi	r17,r17,-1
   42b4c:	813ffd04 	addi	r4,r16,-12
   42b50:	18000426 	beq	r3,zero,42b64 <_fwalk+0x74>
   42b54:	90c0000f 	ldh	r3,0(r18)
   42b58:	1cc00226 	beq	r3,r19,42b64 <_fwalk+0x74>
   42b5c:	a03ee83a 	callr	r20
   42b60:	b0acb03a 	or	r22,r22,r2
   42b64:	84001a04 	addi	r16,r16,104
   42b68:	94801a04 	addi	r18,r18,104
   42b6c:	8cfff51e 	bne	r17,r19,42b44 <__alt_data_end+0xfffccfe4>
   42b70:	ad400017 	ldw	r21,0(r21)
   42b74:	a83fed1e 	bne	r21,zero,42b2c <__alt_data_end+0xfffccfcc>
   42b78:	00426a00 	call	426a0 <__sfp_lock_release>
   42b7c:	b005883a 	mov	r2,r22
   42b80:	dfc00717 	ldw	ra,28(sp)
   42b84:	dd800617 	ldw	r22,24(sp)
   42b88:	dd400517 	ldw	r21,20(sp)
   42b8c:	dd000417 	ldw	r20,16(sp)
   42b90:	dcc00317 	ldw	r19,12(sp)
   42b94:	dc800217 	ldw	r18,8(sp)
   42b98:	dc400117 	ldw	r17,4(sp)
   42b9c:	dc000017 	ldw	r16,0(sp)
   42ba0:	dec00804 	addi	sp,sp,32
   42ba4:	f800283a 	ret

00042ba8 <_fwalk_reent>:
   42ba8:	defff804 	addi	sp,sp,-32
   42bac:	dd400515 	stw	r21,20(sp)
   42bb0:	2540b804 	addi	r21,r4,736
   42bb4:	dd800615 	stw	r22,24(sp)
   42bb8:	dd000415 	stw	r20,16(sp)
   42bbc:	dcc00315 	stw	r19,12(sp)
   42bc0:	dfc00715 	stw	ra,28(sp)
   42bc4:	dc800215 	stw	r18,8(sp)
   42bc8:	dc400115 	stw	r17,4(sp)
   42bcc:	dc000015 	stw	r16,0(sp)
   42bd0:	2027883a 	mov	r19,r4
   42bd4:	2829883a 	mov	r20,r5
   42bd8:	002d883a 	mov	r22,zero
   42bdc:	004269c0 	call	4269c <__sfp_lock_acquire>
   42be0:	a8001326 	beq	r21,zero,42c30 <_fwalk_reent+0x88>
   42be4:	04bfffc4 	movi	r18,-1
   42be8:	ac400117 	ldw	r17,4(r21)
   42bec:	ac000217 	ldw	r16,8(r21)
   42bf0:	8c7fffc4 	addi	r17,r17,-1
   42bf4:	88000c16 	blt	r17,zero,42c28 <_fwalk_reent+0x80>
   42bf8:	84000304 	addi	r16,r16,12
   42bfc:	80c0000f 	ldh	r3,0(r16)
   42c00:	8c7fffc4 	addi	r17,r17,-1
   42c04:	817ffd04 	addi	r5,r16,-12
   42c08:	18000526 	beq	r3,zero,42c20 <_fwalk_reent+0x78>
   42c0c:	80c0008f 	ldh	r3,2(r16)
   42c10:	9809883a 	mov	r4,r19
   42c14:	1c800226 	beq	r3,r18,42c20 <_fwalk_reent+0x78>
   42c18:	a03ee83a 	callr	r20
   42c1c:	b0acb03a 	or	r22,r22,r2
   42c20:	84001a04 	addi	r16,r16,104
   42c24:	8cbff51e 	bne	r17,r18,42bfc <__alt_data_end+0xfffcd09c>
   42c28:	ad400017 	ldw	r21,0(r21)
   42c2c:	a83fee1e 	bne	r21,zero,42be8 <__alt_data_end+0xfffcd088>
   42c30:	00426a00 	call	426a0 <__sfp_lock_release>
   42c34:	b005883a 	mov	r2,r22
   42c38:	dfc00717 	ldw	ra,28(sp)
   42c3c:	dd800617 	ldw	r22,24(sp)
   42c40:	dd400517 	ldw	r21,20(sp)
   42c44:	dd000417 	ldw	r20,16(sp)
   42c48:	dcc00317 	ldw	r19,12(sp)
   42c4c:	dc800217 	ldw	r18,8(sp)
   42c50:	dc400117 	ldw	r17,4(sp)
   42c54:	dc000017 	ldw	r16,0(sp)
   42c58:	dec00804 	addi	sp,sp,32
   42c5c:	f800283a 	ret

00042c60 <__smakebuf_r>:
   42c60:	2880030b 	ldhu	r2,12(r5)
   42c64:	10c0008c 	andi	r3,r2,2
   42c68:	1800401e 	bne	r3,zero,42d6c <__smakebuf_r+0x10c>
   42c6c:	deffec04 	addi	sp,sp,-80
   42c70:	dc000f15 	stw	r16,60(sp)
   42c74:	2821883a 	mov	r16,r5
   42c78:	2940038f 	ldh	r5,14(r5)
   42c7c:	dc401015 	stw	r17,64(sp)
   42c80:	dfc01315 	stw	ra,76(sp)
   42c84:	dcc01215 	stw	r19,72(sp)
   42c88:	dc801115 	stw	r18,68(sp)
   42c8c:	2023883a 	mov	r17,r4
   42c90:	28001b16 	blt	r5,zero,42d00 <__smakebuf_r+0xa0>
   42c94:	d80d883a 	mov	r6,sp
   42c98:	004323c0 	call	4323c <_fstat_r>
   42c9c:	10001716 	blt	r2,zero,42cfc <__smakebuf_r+0x9c>
   42ca0:	d8800117 	ldw	r2,4(sp)
   42ca4:	00e00014 	movui	r3,32768
   42ca8:	10bc000c 	andi	r2,r2,61440
   42cac:	10c03726 	beq	r2,r3,42d8c <__smakebuf_r+0x12c>
   42cb0:	80c0030b 	ldhu	r3,12(r16)
   42cb4:	18c20014 	ori	r3,r3,2048
   42cb8:	80c0030d 	sth	r3,12(r16)
   42cbc:	00c80004 	movi	r3,8192
   42cc0:	10c03c1e 	bne	r2,r3,42db4 <__smakebuf_r+0x154>
   42cc4:	8140038f 	ldh	r5,14(r16)
   42cc8:	8809883a 	mov	r4,r17
   42ccc:	00432940 	call	43294 <_isatty_r>
   42cd0:	10004e26 	beq	r2,zero,42e0c <__smakebuf_r+0x1ac>
   42cd4:	8080030b 	ldhu	r2,12(r16)
   42cd8:	04c00044 	movi	r19,1
   42cdc:	80c010c4 	addi	r3,r16,67
   42ce0:	14c4b03a 	or	r2,r2,r19
   42ce4:	8080030d 	sth	r2,12(r16)
   42ce8:	80c00015 	stw	r3,0(r16)
   42cec:	80c00415 	stw	r3,16(r16)
   42cf0:	84c00515 	stw	r19,20(r16)
   42cf4:	04810004 	movi	r18,1024
   42cf8:	00000706 	br	42d18 <__smakebuf_r+0xb8>
   42cfc:	8080030b 	ldhu	r2,12(r16)
   42d00:	10c0200c 	andi	r3,r2,128
   42d04:	18001f1e 	bne	r3,zero,42d84 <__smakebuf_r+0x124>
   42d08:	04810004 	movi	r18,1024
   42d0c:	10820014 	ori	r2,r2,2048
   42d10:	8080030d 	sth	r2,12(r16)
   42d14:	0027883a 	mov	r19,zero
   42d18:	8809883a 	mov	r4,r17
   42d1c:	900b883a 	mov	r5,r18
   42d20:	0040e880 	call	40e88 <_malloc_r>
   42d24:	10002e26 	beq	r2,zero,42de0 <__smakebuf_r+0x180>
   42d28:	80c0030b 	ldhu	r3,12(r16)
   42d2c:	01000134 	movhi	r4,4
   42d30:	2108ce04 	addi	r4,r4,9016
   42d34:	89000f15 	stw	r4,60(r17)
   42d38:	18c02014 	ori	r3,r3,128
   42d3c:	80c0030d 	sth	r3,12(r16)
   42d40:	80800015 	stw	r2,0(r16)
   42d44:	80800415 	stw	r2,16(r16)
   42d48:	84800515 	stw	r18,20(r16)
   42d4c:	98001c1e 	bne	r19,zero,42dc0 <__smakebuf_r+0x160>
   42d50:	dfc01317 	ldw	ra,76(sp)
   42d54:	dcc01217 	ldw	r19,72(sp)
   42d58:	dc801117 	ldw	r18,68(sp)
   42d5c:	dc401017 	ldw	r17,64(sp)
   42d60:	dc000f17 	ldw	r16,60(sp)
   42d64:	dec01404 	addi	sp,sp,80
   42d68:	f800283a 	ret
   42d6c:	288010c4 	addi	r2,r5,67
   42d70:	28800015 	stw	r2,0(r5)
   42d74:	28800415 	stw	r2,16(r5)
   42d78:	00800044 	movi	r2,1
   42d7c:	28800515 	stw	r2,20(r5)
   42d80:	f800283a 	ret
   42d84:	04801004 	movi	r18,64
   42d88:	003fe006 	br	42d0c <__alt_data_end+0xfffcd1ac>
   42d8c:	81000a17 	ldw	r4,40(r16)
   42d90:	00c00134 	movhi	r3,4
   42d94:	18cc0504 	addi	r3,r3,12308
   42d98:	20ffc51e 	bne	r4,r3,42cb0 <__alt_data_end+0xfffcd150>
   42d9c:	80c0030b 	ldhu	r3,12(r16)
   42da0:	01010004 	movi	r4,1024
   42da4:	81001315 	stw	r4,76(r16)
   42da8:	1906b03a 	or	r3,r3,r4
   42dac:	80c0030d 	sth	r3,12(r16)
   42db0:	003fc206 	br	42cbc <__alt_data_end+0xfffcd15c>
   42db4:	0027883a 	mov	r19,zero
   42db8:	04810004 	movi	r18,1024
   42dbc:	003fd606 	br	42d18 <__alt_data_end+0xfffcd1b8>
   42dc0:	8140038f 	ldh	r5,14(r16)
   42dc4:	8809883a 	mov	r4,r17
   42dc8:	00432940 	call	43294 <_isatty_r>
   42dcc:	103fe026 	beq	r2,zero,42d50 <__alt_data_end+0xfffcd1f0>
   42dd0:	8080030b 	ldhu	r2,12(r16)
   42dd4:	10800054 	ori	r2,r2,1
   42dd8:	8080030d 	sth	r2,12(r16)
   42ddc:	003fdc06 	br	42d50 <__alt_data_end+0xfffcd1f0>
   42de0:	8080030b 	ldhu	r2,12(r16)
   42de4:	10c0800c 	andi	r3,r2,512
   42de8:	183fd91e 	bne	r3,zero,42d50 <__alt_data_end+0xfffcd1f0>
   42dec:	10800094 	ori	r2,r2,2
   42df0:	80c010c4 	addi	r3,r16,67
   42df4:	8080030d 	sth	r2,12(r16)
   42df8:	00800044 	movi	r2,1
   42dfc:	80c00015 	stw	r3,0(r16)
   42e00:	80c00415 	stw	r3,16(r16)
   42e04:	80800515 	stw	r2,20(r16)
   42e08:	003fd106 	br	42d50 <__alt_data_end+0xfffcd1f0>
   42e0c:	04c00044 	movi	r19,1
   42e10:	04810004 	movi	r18,1024
   42e14:	003fc006 	br	42d18 <__alt_data_end+0xfffcd1b8>

00042e18 <memset>:
   42e18:	20c000cc 	andi	r3,r4,3
   42e1c:	2005883a 	mov	r2,r4
   42e20:	18004326 	beq	r3,zero,42f30 <memset+0x118>
   42e24:	31ffffc4 	addi	r7,r6,-1
   42e28:	30004026 	beq	r6,zero,42f2c <memset+0x114>
   42e2c:	2813883a 	mov	r9,r5
   42e30:	200d883a 	mov	r6,r4
   42e34:	2007883a 	mov	r3,r4
   42e38:	00000406 	br	42e4c <memset+0x34>
   42e3c:	3a3fffc4 	addi	r8,r7,-1
   42e40:	31800044 	addi	r6,r6,1
   42e44:	38003926 	beq	r7,zero,42f2c <memset+0x114>
   42e48:	400f883a 	mov	r7,r8
   42e4c:	18c00044 	addi	r3,r3,1
   42e50:	32400005 	stb	r9,0(r6)
   42e54:	1a0000cc 	andi	r8,r3,3
   42e58:	403ff81e 	bne	r8,zero,42e3c <__alt_data_end+0xfffcd2dc>
   42e5c:	010000c4 	movi	r4,3
   42e60:	21c02d2e 	bgeu	r4,r7,42f18 <memset+0x100>
   42e64:	29803fcc 	andi	r6,r5,255
   42e68:	3008923a 	slli	r4,r6,8
   42e6c:	218cb03a 	or	r6,r4,r6
   42e70:	3008943a 	slli	r4,r6,16
   42e74:	218cb03a 	or	r6,r4,r6
   42e78:	010003c4 	movi	r4,15
   42e7c:	21c0182e 	bgeu	r4,r7,42ee0 <memset+0xc8>
   42e80:	3b3ffc04 	addi	r12,r7,-16
   42e84:	6018d13a 	srli	r12,r12,4
   42e88:	1a000104 	addi	r8,r3,4
   42e8c:	1ac00204 	addi	r11,r3,8
   42e90:	6008913a 	slli	r4,r12,4
   42e94:	1a800304 	addi	r10,r3,12
   42e98:	1813883a 	mov	r9,r3
   42e9c:	21000504 	addi	r4,r4,20
   42ea0:	1909883a 	add	r4,r3,r4
   42ea4:	49800015 	stw	r6,0(r9)
   42ea8:	41800015 	stw	r6,0(r8)
   42eac:	59800015 	stw	r6,0(r11)
   42eb0:	51800015 	stw	r6,0(r10)
   42eb4:	42000404 	addi	r8,r8,16
   42eb8:	4a400404 	addi	r9,r9,16
   42ebc:	5ac00404 	addi	r11,r11,16
   42ec0:	52800404 	addi	r10,r10,16
   42ec4:	413ff71e 	bne	r8,r4,42ea4 <__alt_data_end+0xfffcd344>
   42ec8:	63000044 	addi	r12,r12,1
   42ecc:	6018913a 	slli	r12,r12,4
   42ed0:	39c003cc 	andi	r7,r7,15
   42ed4:	010000c4 	movi	r4,3
   42ed8:	1b07883a 	add	r3,r3,r12
   42edc:	21c00e2e 	bgeu	r4,r7,42f18 <memset+0x100>
   42ee0:	1813883a 	mov	r9,r3
   42ee4:	3811883a 	mov	r8,r7
   42ee8:	010000c4 	movi	r4,3
   42eec:	49800015 	stw	r6,0(r9)
   42ef0:	423fff04 	addi	r8,r8,-4
   42ef4:	4a400104 	addi	r9,r9,4
   42ef8:	223ffc36 	bltu	r4,r8,42eec <__alt_data_end+0xfffcd38c>
   42efc:	393fff04 	addi	r4,r7,-4
   42f00:	2008d0ba 	srli	r4,r4,2
   42f04:	39c000cc 	andi	r7,r7,3
   42f08:	21000044 	addi	r4,r4,1
   42f0c:	2109883a 	add	r4,r4,r4
   42f10:	2109883a 	add	r4,r4,r4
   42f14:	1907883a 	add	r3,r3,r4
   42f18:	38000426 	beq	r7,zero,42f2c <memset+0x114>
   42f1c:	19cf883a 	add	r7,r3,r7
   42f20:	19400005 	stb	r5,0(r3)
   42f24:	18c00044 	addi	r3,r3,1
   42f28:	19fffd1e 	bne	r3,r7,42f20 <__alt_data_end+0xfffcd3c0>
   42f2c:	f800283a 	ret
   42f30:	2007883a 	mov	r3,r4
   42f34:	300f883a 	mov	r7,r6
   42f38:	003fc806 	br	42e5c <__alt_data_end+0xfffcd2fc>

00042f3c <__sread>:
   42f3c:	defffe04 	addi	sp,sp,-8
   42f40:	dc000015 	stw	r16,0(sp)
   42f44:	2821883a 	mov	r16,r5
   42f48:	2940038f 	ldh	r5,14(r5)
   42f4c:	dfc00115 	stw	ra,4(sp)
   42f50:	00433440 	call	43344 <_read_r>
   42f54:	10000716 	blt	r2,zero,42f74 <__sread+0x38>
   42f58:	80c01417 	ldw	r3,80(r16)
   42f5c:	1887883a 	add	r3,r3,r2
   42f60:	80c01415 	stw	r3,80(r16)
   42f64:	dfc00117 	ldw	ra,4(sp)
   42f68:	dc000017 	ldw	r16,0(sp)
   42f6c:	dec00204 	addi	sp,sp,8
   42f70:	f800283a 	ret
   42f74:	80c0030b 	ldhu	r3,12(r16)
   42f78:	18fbffcc 	andi	r3,r3,61439
   42f7c:	80c0030d 	sth	r3,12(r16)
   42f80:	dfc00117 	ldw	ra,4(sp)
   42f84:	dc000017 	ldw	r16,0(sp)
   42f88:	dec00204 	addi	sp,sp,8
   42f8c:	f800283a 	ret

00042f90 <__seofread>:
   42f90:	0005883a 	mov	r2,zero
   42f94:	f800283a 	ret

00042f98 <__swrite>:
   42f98:	2880030b 	ldhu	r2,12(r5)
   42f9c:	defffb04 	addi	sp,sp,-20
   42fa0:	dcc00315 	stw	r19,12(sp)
   42fa4:	dc800215 	stw	r18,8(sp)
   42fa8:	dc400115 	stw	r17,4(sp)
   42fac:	dc000015 	stw	r16,0(sp)
   42fb0:	dfc00415 	stw	ra,16(sp)
   42fb4:	10c0400c 	andi	r3,r2,256
   42fb8:	2821883a 	mov	r16,r5
   42fbc:	2027883a 	mov	r19,r4
   42fc0:	3025883a 	mov	r18,r6
   42fc4:	3823883a 	mov	r17,r7
   42fc8:	18000526 	beq	r3,zero,42fe0 <__swrite+0x48>
   42fcc:	2940038f 	ldh	r5,14(r5)
   42fd0:	000d883a 	mov	r6,zero
   42fd4:	01c00084 	movi	r7,2
   42fd8:	00432e80 	call	432e8 <_lseek_r>
   42fdc:	8080030b 	ldhu	r2,12(r16)
   42fe0:	8140038f 	ldh	r5,14(r16)
   42fe4:	10bbffcc 	andi	r2,r2,61439
   42fe8:	9809883a 	mov	r4,r19
   42fec:	900d883a 	mov	r6,r18
   42ff0:	880f883a 	mov	r7,r17
   42ff4:	8080030d 	sth	r2,12(r16)
   42ff8:	dfc00417 	ldw	ra,16(sp)
   42ffc:	dcc00317 	ldw	r19,12(sp)
   43000:	dc800217 	ldw	r18,8(sp)
   43004:	dc400117 	ldw	r17,4(sp)
   43008:	dc000017 	ldw	r16,0(sp)
   4300c:	dec00504 	addi	sp,sp,20
   43010:	00430781 	jmpi	43078 <_write_r>

00043014 <__sseek>:
   43014:	defffe04 	addi	sp,sp,-8
   43018:	dc000015 	stw	r16,0(sp)
   4301c:	2821883a 	mov	r16,r5
   43020:	2940038f 	ldh	r5,14(r5)
   43024:	dfc00115 	stw	ra,4(sp)
   43028:	00432e80 	call	432e8 <_lseek_r>
   4302c:	00ffffc4 	movi	r3,-1
   43030:	10c00826 	beq	r2,r3,43054 <__sseek+0x40>
   43034:	80c0030b 	ldhu	r3,12(r16)
   43038:	80801415 	stw	r2,80(r16)
   4303c:	18c40014 	ori	r3,r3,4096
   43040:	80c0030d 	sth	r3,12(r16)
   43044:	dfc00117 	ldw	ra,4(sp)
   43048:	dc000017 	ldw	r16,0(sp)
   4304c:	dec00204 	addi	sp,sp,8
   43050:	f800283a 	ret
   43054:	80c0030b 	ldhu	r3,12(r16)
   43058:	18fbffcc 	andi	r3,r3,61439
   4305c:	80c0030d 	sth	r3,12(r16)
   43060:	dfc00117 	ldw	ra,4(sp)
   43064:	dc000017 	ldw	r16,0(sp)
   43068:	dec00204 	addi	sp,sp,8
   4306c:	f800283a 	ret

00043070 <__sclose>:
   43070:	2940038f 	ldh	r5,14(r5)
   43074:	00430d41 	jmpi	430d4 <_close_r>

00043078 <_write_r>:
   43078:	defffd04 	addi	sp,sp,-12
   4307c:	dc000015 	stw	r16,0(sp)
   43080:	04000174 	movhi	r16,5
   43084:	dc400115 	stw	r17,4(sp)
   43088:	84279b04 	addi	r16,r16,-24980
   4308c:	2023883a 	mov	r17,r4
   43090:	2809883a 	mov	r4,r5
   43094:	300b883a 	mov	r5,r6
   43098:	380d883a 	mov	r6,r7
   4309c:	dfc00215 	stw	ra,8(sp)
   430a0:	80000015 	stw	zero,0(r16)
   430a4:	0043dd00 	call	43dd0 <write>
   430a8:	00ffffc4 	movi	r3,-1
   430ac:	10c00526 	beq	r2,r3,430c4 <_write_r+0x4c>
   430b0:	dfc00217 	ldw	ra,8(sp)
   430b4:	dc400117 	ldw	r17,4(sp)
   430b8:	dc000017 	ldw	r16,0(sp)
   430bc:	dec00304 	addi	sp,sp,12
   430c0:	f800283a 	ret
   430c4:	80c00017 	ldw	r3,0(r16)
   430c8:	183ff926 	beq	r3,zero,430b0 <__alt_data_end+0xfffcd550>
   430cc:	88c00015 	stw	r3,0(r17)
   430d0:	003ff706 	br	430b0 <__alt_data_end+0xfffcd550>

000430d4 <_close_r>:
   430d4:	defffd04 	addi	sp,sp,-12
   430d8:	dc000015 	stw	r16,0(sp)
   430dc:	04000174 	movhi	r16,5
   430e0:	dc400115 	stw	r17,4(sp)
   430e4:	84279b04 	addi	r16,r16,-24980
   430e8:	2023883a 	mov	r17,r4
   430ec:	2809883a 	mov	r4,r5
   430f0:	dfc00215 	stw	ra,8(sp)
   430f4:	80000015 	stw	zero,0(r16)
   430f8:	00434fc0 	call	434fc <close>
   430fc:	00ffffc4 	movi	r3,-1
   43100:	10c00526 	beq	r2,r3,43118 <_close_r+0x44>
   43104:	dfc00217 	ldw	ra,8(sp)
   43108:	dc400117 	ldw	r17,4(sp)
   4310c:	dc000017 	ldw	r16,0(sp)
   43110:	dec00304 	addi	sp,sp,12
   43114:	f800283a 	ret
   43118:	80c00017 	ldw	r3,0(r16)
   4311c:	183ff926 	beq	r3,zero,43104 <__alt_data_end+0xfffcd5a4>
   43120:	88c00015 	stw	r3,0(r17)
   43124:	003ff706 	br	43104 <__alt_data_end+0xfffcd5a4>

00043128 <_fclose_r>:
   43128:	28003226 	beq	r5,zero,431f4 <_fclose_r+0xcc>
   4312c:	defffc04 	addi	sp,sp,-16
   43130:	dc400115 	stw	r17,4(sp)
   43134:	2023883a 	mov	r17,r4
   43138:	dc000015 	stw	r16,0(sp)
   4313c:	dfc00315 	stw	ra,12(sp)
   43140:	dc800215 	stw	r18,8(sp)
   43144:	2821883a 	mov	r16,r5
   43148:	004269c0 	call	4269c <__sfp_lock_acquire>
   4314c:	88000226 	beq	r17,zero,43158 <_fclose_r+0x30>
   43150:	88800e17 	ldw	r2,56(r17)
   43154:	10002926 	beq	r2,zero,431fc <_fclose_r+0xd4>
   43158:	8080030f 	ldh	r2,12(r16)
   4315c:	10002226 	beq	r2,zero,431e8 <_fclose_r+0xc0>
   43160:	8809883a 	mov	r4,r17
   43164:	800b883a 	mov	r5,r16
   43168:	00420d00 	call	420d0 <_fflush_r>
   4316c:	1025883a 	mov	r18,r2
   43170:	80800b17 	ldw	r2,44(r16)
   43174:	10000426 	beq	r2,zero,43188 <_fclose_r+0x60>
   43178:	81400717 	ldw	r5,28(r16)
   4317c:	8809883a 	mov	r4,r17
   43180:	103ee83a 	callr	r2
   43184:	10002616 	blt	r2,zero,43220 <_fclose_r+0xf8>
   43188:	8080030b 	ldhu	r2,12(r16)
   4318c:	1080200c 	andi	r2,r2,128
   43190:	10001f1e 	bne	r2,zero,43210 <_fclose_r+0xe8>
   43194:	81400c17 	ldw	r5,48(r16)
   43198:	28000526 	beq	r5,zero,431b0 <_fclose_r+0x88>
   4319c:	80801004 	addi	r2,r16,64
   431a0:	28800226 	beq	r5,r2,431ac <_fclose_r+0x84>
   431a4:	8809883a 	mov	r4,r17
   431a8:	00428000 	call	42800 <_free_r>
   431ac:	80000c15 	stw	zero,48(r16)
   431b0:	81401117 	ldw	r5,68(r16)
   431b4:	28000326 	beq	r5,zero,431c4 <_fclose_r+0x9c>
   431b8:	8809883a 	mov	r4,r17
   431bc:	00428000 	call	42800 <_free_r>
   431c0:	80001115 	stw	zero,68(r16)
   431c4:	8000030d 	sth	zero,12(r16)
   431c8:	00426a00 	call	426a0 <__sfp_lock_release>
   431cc:	9005883a 	mov	r2,r18
   431d0:	dfc00317 	ldw	ra,12(sp)
   431d4:	dc800217 	ldw	r18,8(sp)
   431d8:	dc400117 	ldw	r17,4(sp)
   431dc:	dc000017 	ldw	r16,0(sp)
   431e0:	dec00404 	addi	sp,sp,16
   431e4:	f800283a 	ret
   431e8:	00426a00 	call	426a0 <__sfp_lock_release>
   431ec:	0005883a 	mov	r2,zero
   431f0:	003ff706 	br	431d0 <__alt_data_end+0xfffcd670>
   431f4:	0005883a 	mov	r2,zero
   431f8:	f800283a 	ret
   431fc:	8809883a 	mov	r4,r17
   43200:	004268c0 	call	4268c <__sinit>
   43204:	8080030f 	ldh	r2,12(r16)
   43208:	103fd51e 	bne	r2,zero,43160 <__alt_data_end+0xfffcd600>
   4320c:	003ff606 	br	431e8 <__alt_data_end+0xfffcd688>
   43210:	81400417 	ldw	r5,16(r16)
   43214:	8809883a 	mov	r4,r17
   43218:	00428000 	call	42800 <_free_r>
   4321c:	003fdd06 	br	43194 <__alt_data_end+0xfffcd634>
   43220:	04bfffc4 	movi	r18,-1
   43224:	003fd806 	br	43188 <__alt_data_end+0xfffcd628>

00043228 <fclose>:
   43228:	00800174 	movhi	r2,5
   4322c:	10a0bf04 	addi	r2,r2,-32004
   43230:	200b883a 	mov	r5,r4
   43234:	11000017 	ldw	r4,0(r2)
   43238:	00431281 	jmpi	43128 <_fclose_r>

0004323c <_fstat_r>:
   4323c:	defffd04 	addi	sp,sp,-12
   43240:	dc000015 	stw	r16,0(sp)
   43244:	04000174 	movhi	r16,5
   43248:	dc400115 	stw	r17,4(sp)
   4324c:	84279b04 	addi	r16,r16,-24980
   43250:	2023883a 	mov	r17,r4
   43254:	2809883a 	mov	r4,r5
   43258:	300b883a 	mov	r5,r6
   4325c:	dfc00215 	stw	ra,8(sp)
   43260:	80000015 	stw	zero,0(r16)
   43264:	00436500 	call	43650 <fstat>
   43268:	00ffffc4 	movi	r3,-1
   4326c:	10c00526 	beq	r2,r3,43284 <_fstat_r+0x48>
   43270:	dfc00217 	ldw	ra,8(sp)
   43274:	dc400117 	ldw	r17,4(sp)
   43278:	dc000017 	ldw	r16,0(sp)
   4327c:	dec00304 	addi	sp,sp,12
   43280:	f800283a 	ret
   43284:	80c00017 	ldw	r3,0(r16)
   43288:	183ff926 	beq	r3,zero,43270 <__alt_data_end+0xfffcd710>
   4328c:	88c00015 	stw	r3,0(r17)
   43290:	003ff706 	br	43270 <__alt_data_end+0xfffcd710>

00043294 <_isatty_r>:
   43294:	defffd04 	addi	sp,sp,-12
   43298:	dc000015 	stw	r16,0(sp)
   4329c:	04000174 	movhi	r16,5
   432a0:	dc400115 	stw	r17,4(sp)
   432a4:	84279b04 	addi	r16,r16,-24980
   432a8:	2023883a 	mov	r17,r4
   432ac:	2809883a 	mov	r4,r5
   432b0:	dfc00215 	stw	ra,8(sp)
   432b4:	80000015 	stw	zero,0(r16)
   432b8:	00437580 	call	43758 <isatty>
   432bc:	00ffffc4 	movi	r3,-1
   432c0:	10c00526 	beq	r2,r3,432d8 <_isatty_r+0x44>
   432c4:	dfc00217 	ldw	ra,8(sp)
   432c8:	dc400117 	ldw	r17,4(sp)
   432cc:	dc000017 	ldw	r16,0(sp)
   432d0:	dec00304 	addi	sp,sp,12
   432d4:	f800283a 	ret
   432d8:	80c00017 	ldw	r3,0(r16)
   432dc:	183ff926 	beq	r3,zero,432c4 <__alt_data_end+0xfffcd764>
   432e0:	88c00015 	stw	r3,0(r17)
   432e4:	003ff706 	br	432c4 <__alt_data_end+0xfffcd764>

000432e8 <_lseek_r>:
   432e8:	defffd04 	addi	sp,sp,-12
   432ec:	dc000015 	stw	r16,0(sp)
   432f0:	04000174 	movhi	r16,5
   432f4:	dc400115 	stw	r17,4(sp)
   432f8:	84279b04 	addi	r16,r16,-24980
   432fc:	2023883a 	mov	r17,r4
   43300:	2809883a 	mov	r4,r5
   43304:	300b883a 	mov	r5,r6
   43308:	380d883a 	mov	r6,r7
   4330c:	dfc00215 	stw	ra,8(sp)
   43310:	80000015 	stw	zero,0(r16)
   43314:	00439380 	call	43938 <lseek>
   43318:	00ffffc4 	movi	r3,-1
   4331c:	10c00526 	beq	r2,r3,43334 <_lseek_r+0x4c>
   43320:	dfc00217 	ldw	ra,8(sp)
   43324:	dc400117 	ldw	r17,4(sp)
   43328:	dc000017 	ldw	r16,0(sp)
   4332c:	dec00304 	addi	sp,sp,12
   43330:	f800283a 	ret
   43334:	80c00017 	ldw	r3,0(r16)
   43338:	183ff926 	beq	r3,zero,43320 <__alt_data_end+0xfffcd7c0>
   4333c:	88c00015 	stw	r3,0(r17)
   43340:	003ff706 	br	43320 <__alt_data_end+0xfffcd7c0>

00043344 <_read_r>:
   43344:	defffd04 	addi	sp,sp,-12
   43348:	dc000015 	stw	r16,0(sp)
   4334c:	04000174 	movhi	r16,5
   43350:	dc400115 	stw	r17,4(sp)
   43354:	84279b04 	addi	r16,r16,-24980
   43358:	2023883a 	mov	r17,r4
   4335c:	2809883a 	mov	r4,r5
   43360:	300b883a 	mov	r5,r6
   43364:	380d883a 	mov	r6,r7
   43368:	dfc00215 	stw	ra,8(sp)
   4336c:	80000015 	stw	zero,0(r16)
   43370:	0043b1c0 	call	43b1c <read>
   43374:	00ffffc4 	movi	r3,-1
   43378:	10c00526 	beq	r2,r3,43390 <_read_r+0x4c>
   4337c:	dfc00217 	ldw	ra,8(sp)
   43380:	dc400117 	ldw	r17,4(sp)
   43384:	dc000017 	ldw	r16,0(sp)
   43388:	dec00304 	addi	sp,sp,12
   4338c:	f800283a 	ret
   43390:	80c00017 	ldw	r3,0(r16)
   43394:	183ff926 	beq	r3,zero,4337c <__alt_data_end+0xfffcd81c>
   43398:	88c00015 	stw	r3,0(r17)
   4339c:	003ff706 	br	4337c <__alt_data_end+0xfffcd81c>

000433a0 <__muldi3>:
   433a0:	defff604 	addi	sp,sp,-40
   433a4:	dd800615 	stw	r22,24(sp)
   433a8:	dd400515 	stw	r21,20(sp)
   433ac:	25bfffcc 	andi	r22,r4,65535
   433b0:	357fffcc 	andi	r21,r6,65535
   433b4:	dc400115 	stw	r17,4(sp)
   433b8:	2022d43a 	srli	r17,r4,16
   433bc:	dcc00315 	stw	r19,12(sp)
   433c0:	dc800215 	stw	r18,8(sp)
   433c4:	2027883a 	mov	r19,r4
   433c8:	2825883a 	mov	r18,r5
   433cc:	a809883a 	mov	r4,r21
   433d0:	b00b883a 	mov	r5,r22
   433d4:	dfc00915 	stw	ra,36(sp)
   433d8:	df000815 	stw	fp,32(sp)
   433dc:	ddc00715 	stw	r23,28(sp)
   433e0:	3839883a 	mov	fp,r7
   433e4:	302ed43a 	srli	r23,r6,16
   433e8:	dd000415 	stw	r20,16(sp)
   433ec:	dc000015 	stw	r16,0(sp)
   433f0:	3029883a 	mov	r20,r6
   433f4:	00407dc0 	call	407dc <__mulsi3>
   433f8:	a809883a 	mov	r4,r21
   433fc:	880b883a 	mov	r5,r17
   43400:	1021883a 	mov	r16,r2
   43404:	00407dc0 	call	407dc <__mulsi3>
   43408:	880b883a 	mov	r5,r17
   4340c:	b809883a 	mov	r4,r23
   43410:	102b883a 	mov	r21,r2
   43414:	00407dc0 	call	407dc <__mulsi3>
   43418:	b809883a 	mov	r4,r23
   4341c:	b00b883a 	mov	r5,r22
   43420:	1023883a 	mov	r17,r2
   43424:	00407dc0 	call	407dc <__mulsi3>
   43428:	8012d43a 	srli	r9,r16,16
   4342c:	a885883a 	add	r2,r21,r2
   43430:	1251883a 	add	r8,r2,r9
   43434:	4540022e 	bgeu	r8,r21,43440 <__muldi3+0xa0>
   43438:	00800074 	movhi	r2,1
   4343c:	88a3883a 	add	r17,r17,r2
   43440:	4006d43a 	srli	r3,r8,16
   43444:	4010943a 	slli	r8,r8,16
   43448:	9809883a 	mov	r4,r19
   4344c:	e00b883a 	mov	r5,fp
   43450:	843fffcc 	andi	r16,r16,65535
   43454:	88e3883a 	add	r17,r17,r3
   43458:	4421883a 	add	r16,r8,r16
   4345c:	00407dc0 	call	407dc <__mulsi3>
   43460:	a009883a 	mov	r4,r20
   43464:	900b883a 	mov	r5,r18
   43468:	1027883a 	mov	r19,r2
   4346c:	00407dc0 	call	407dc <__mulsi3>
   43470:	9885883a 	add	r2,r19,r2
   43474:	1447883a 	add	r3,r2,r17
   43478:	8005883a 	mov	r2,r16
   4347c:	dfc00917 	ldw	ra,36(sp)
   43480:	df000817 	ldw	fp,32(sp)
   43484:	ddc00717 	ldw	r23,28(sp)
   43488:	dd800617 	ldw	r22,24(sp)
   4348c:	dd400517 	ldw	r21,20(sp)
   43490:	dd000417 	ldw	r20,16(sp)
   43494:	dcc00317 	ldw	r19,12(sp)
   43498:	dc800217 	ldw	r18,8(sp)
   4349c:	dc400117 	ldw	r17,4(sp)
   434a0:	dc000017 	ldw	r16,0(sp)
   434a4:	dec00a04 	addi	sp,sp,40
   434a8:	f800283a 	ret

000434ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   434ac:	defffe04 	addi	sp,sp,-8
   434b0:	dfc00115 	stw	ra,4(sp)
   434b4:	df000015 	stw	fp,0(sp)
   434b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   434bc:	00800174 	movhi	r2,5
   434c0:	10a0c704 	addi	r2,r2,-31972
   434c4:	10800017 	ldw	r2,0(r2)
   434c8:	10000526 	beq	r2,zero,434e0 <alt_get_errno+0x34>
   434cc:	00800174 	movhi	r2,5
   434d0:	10a0c704 	addi	r2,r2,-31972
   434d4:	10800017 	ldw	r2,0(r2)
   434d8:	103ee83a 	callr	r2
   434dc:	00000206 	br	434e8 <alt_get_errno+0x3c>
   434e0:	00800174 	movhi	r2,5
   434e4:	10a79b04 	addi	r2,r2,-24980
}
   434e8:	e037883a 	mov	sp,fp
   434ec:	dfc00117 	ldw	ra,4(sp)
   434f0:	df000017 	ldw	fp,0(sp)
   434f4:	dec00204 	addi	sp,sp,8
   434f8:	f800283a 	ret

000434fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   434fc:	defffb04 	addi	sp,sp,-20
   43500:	dfc00415 	stw	ra,16(sp)
   43504:	df000315 	stw	fp,12(sp)
   43508:	df000304 	addi	fp,sp,12
   4350c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   43510:	e0bfff17 	ldw	r2,-4(fp)
   43514:	10000816 	blt	r2,zero,43538 <close+0x3c>
   43518:	e13fff17 	ldw	r4,-4(fp)
   4351c:	01400304 	movi	r5,12
   43520:	00407dc0 	call	407dc <__mulsi3>
   43524:	1007883a 	mov	r3,r2
   43528:	00800134 	movhi	r2,4
   4352c:	109c1504 	addi	r2,r2,28756
   43530:	1885883a 	add	r2,r3,r2
   43534:	00000106 	br	4353c <close+0x40>
   43538:	0005883a 	mov	r2,zero
   4353c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   43540:	e0bffd17 	ldw	r2,-12(fp)
   43544:	10001926 	beq	r2,zero,435ac <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   43548:	e0bffd17 	ldw	r2,-12(fp)
   4354c:	10800017 	ldw	r2,0(r2)
   43550:	10800417 	ldw	r2,16(r2)
   43554:	10000626 	beq	r2,zero,43570 <close+0x74>
   43558:	e0bffd17 	ldw	r2,-12(fp)
   4355c:	10800017 	ldw	r2,0(r2)
   43560:	10800417 	ldw	r2,16(r2)
   43564:	e13ffd17 	ldw	r4,-12(fp)
   43568:	103ee83a 	callr	r2
   4356c:	00000106 	br	43574 <close+0x78>
   43570:	0005883a 	mov	r2,zero
   43574:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43578:	e13fff17 	ldw	r4,-4(fp)
   4357c:	0043c200 	call	43c20 <alt_release_fd>
    if (rval < 0)
   43580:	e0bffe17 	ldw	r2,-8(fp)
   43584:	1000070e 	bge	r2,zero,435a4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   43588:	00434ac0 	call	434ac <alt_get_errno>
   4358c:	1007883a 	mov	r3,r2
   43590:	e0bffe17 	ldw	r2,-8(fp)
   43594:	0085c83a 	sub	r2,zero,r2
   43598:	18800015 	stw	r2,0(r3)
      return -1;
   4359c:	00bfffc4 	movi	r2,-1
   435a0:	00000706 	br	435c0 <close+0xc4>
    }
    return 0;
   435a4:	0005883a 	mov	r2,zero
   435a8:	00000506 	br	435c0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   435ac:	00434ac0 	call	434ac <alt_get_errno>
   435b0:	1007883a 	mov	r3,r2
   435b4:	00801444 	movi	r2,81
   435b8:	18800015 	stw	r2,0(r3)
    return -1;
   435bc:	00bfffc4 	movi	r2,-1
  }
}
   435c0:	e037883a 	mov	sp,fp
   435c4:	dfc00117 	ldw	ra,4(sp)
   435c8:	df000017 	ldw	fp,0(sp)
   435cc:	dec00204 	addi	sp,sp,8
   435d0:	f800283a 	ret

000435d4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   435d4:	defffc04 	addi	sp,sp,-16
   435d8:	df000315 	stw	fp,12(sp)
   435dc:	df000304 	addi	fp,sp,12
   435e0:	e13ffd15 	stw	r4,-12(fp)
   435e4:	e17ffe15 	stw	r5,-8(fp)
   435e8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   435ec:	e0bfff17 	ldw	r2,-4(fp)
}
   435f0:	e037883a 	mov	sp,fp
   435f4:	df000017 	ldw	fp,0(sp)
   435f8:	dec00104 	addi	sp,sp,4
   435fc:	f800283a 	ret

00043600 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43600:	defffe04 	addi	sp,sp,-8
   43604:	dfc00115 	stw	ra,4(sp)
   43608:	df000015 	stw	fp,0(sp)
   4360c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43610:	00800174 	movhi	r2,5
   43614:	10a0c704 	addi	r2,r2,-31972
   43618:	10800017 	ldw	r2,0(r2)
   4361c:	10000526 	beq	r2,zero,43634 <alt_get_errno+0x34>
   43620:	00800174 	movhi	r2,5
   43624:	10a0c704 	addi	r2,r2,-31972
   43628:	10800017 	ldw	r2,0(r2)
   4362c:	103ee83a 	callr	r2
   43630:	00000206 	br	4363c <alt_get_errno+0x3c>
   43634:	00800174 	movhi	r2,5
   43638:	10a79b04 	addi	r2,r2,-24980
}
   4363c:	e037883a 	mov	sp,fp
   43640:	dfc00117 	ldw	ra,4(sp)
   43644:	df000017 	ldw	fp,0(sp)
   43648:	dec00204 	addi	sp,sp,8
   4364c:	f800283a 	ret

00043650 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   43650:	defffb04 	addi	sp,sp,-20
   43654:	dfc00415 	stw	ra,16(sp)
   43658:	df000315 	stw	fp,12(sp)
   4365c:	df000304 	addi	fp,sp,12
   43660:	e13ffe15 	stw	r4,-8(fp)
   43664:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43668:	e0bffe17 	ldw	r2,-8(fp)
   4366c:	10000816 	blt	r2,zero,43690 <fstat+0x40>
   43670:	e13ffe17 	ldw	r4,-8(fp)
   43674:	01400304 	movi	r5,12
   43678:	00407dc0 	call	407dc <__mulsi3>
   4367c:	1007883a 	mov	r3,r2
   43680:	00800134 	movhi	r2,4
   43684:	109c1504 	addi	r2,r2,28756
   43688:	1885883a 	add	r2,r3,r2
   4368c:	00000106 	br	43694 <fstat+0x44>
   43690:	0005883a 	mov	r2,zero
   43694:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   43698:	e0bffd17 	ldw	r2,-12(fp)
   4369c:	10001026 	beq	r2,zero,436e0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   436a0:	e0bffd17 	ldw	r2,-12(fp)
   436a4:	10800017 	ldw	r2,0(r2)
   436a8:	10800817 	ldw	r2,32(r2)
   436ac:	10000726 	beq	r2,zero,436cc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   436b0:	e0bffd17 	ldw	r2,-12(fp)
   436b4:	10800017 	ldw	r2,0(r2)
   436b8:	10800817 	ldw	r2,32(r2)
   436bc:	e13ffd17 	ldw	r4,-12(fp)
   436c0:	e17fff17 	ldw	r5,-4(fp)
   436c4:	103ee83a 	callr	r2
   436c8:	00000a06 	br	436f4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   436cc:	e0bfff17 	ldw	r2,-4(fp)
   436d0:	00c80004 	movi	r3,8192
   436d4:	10c00115 	stw	r3,4(r2)
      return 0;
   436d8:	0005883a 	mov	r2,zero
   436dc:	00000506 	br	436f4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   436e0:	00436000 	call	43600 <alt_get_errno>
   436e4:	1007883a 	mov	r3,r2
   436e8:	00801444 	movi	r2,81
   436ec:	18800015 	stw	r2,0(r3)
    return -1;
   436f0:	00bfffc4 	movi	r2,-1
  }
}
   436f4:	e037883a 	mov	sp,fp
   436f8:	dfc00117 	ldw	ra,4(sp)
   436fc:	df000017 	ldw	fp,0(sp)
   43700:	dec00204 	addi	sp,sp,8
   43704:	f800283a 	ret

00043708 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43708:	defffe04 	addi	sp,sp,-8
   4370c:	dfc00115 	stw	ra,4(sp)
   43710:	df000015 	stw	fp,0(sp)
   43714:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43718:	00800174 	movhi	r2,5
   4371c:	10a0c704 	addi	r2,r2,-31972
   43720:	10800017 	ldw	r2,0(r2)
   43724:	10000526 	beq	r2,zero,4373c <alt_get_errno+0x34>
   43728:	00800174 	movhi	r2,5
   4372c:	10a0c704 	addi	r2,r2,-31972
   43730:	10800017 	ldw	r2,0(r2)
   43734:	103ee83a 	callr	r2
   43738:	00000206 	br	43744 <alt_get_errno+0x3c>
   4373c:	00800174 	movhi	r2,5
   43740:	10a79b04 	addi	r2,r2,-24980
}
   43744:	e037883a 	mov	sp,fp
   43748:	dfc00117 	ldw	ra,4(sp)
   4374c:	df000017 	ldw	fp,0(sp)
   43750:	dec00204 	addi	sp,sp,8
   43754:	f800283a 	ret

00043758 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   43758:	deffed04 	addi	sp,sp,-76
   4375c:	dfc01215 	stw	ra,72(sp)
   43760:	df001115 	stw	fp,68(sp)
   43764:	df001104 	addi	fp,sp,68
   43768:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4376c:	e0bfff17 	ldw	r2,-4(fp)
   43770:	10000816 	blt	r2,zero,43794 <isatty+0x3c>
   43774:	e13fff17 	ldw	r4,-4(fp)
   43778:	01400304 	movi	r5,12
   4377c:	00407dc0 	call	407dc <__mulsi3>
   43780:	1007883a 	mov	r3,r2
   43784:	00800134 	movhi	r2,4
   43788:	109c1504 	addi	r2,r2,28756
   4378c:	1885883a 	add	r2,r3,r2
   43790:	00000106 	br	43798 <isatty+0x40>
   43794:	0005883a 	mov	r2,zero
   43798:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4379c:	e0bfef17 	ldw	r2,-68(fp)
   437a0:	10000e26 	beq	r2,zero,437dc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   437a4:	e0bfef17 	ldw	r2,-68(fp)
   437a8:	10800017 	ldw	r2,0(r2)
   437ac:	10800817 	ldw	r2,32(r2)
   437b0:	1000021e 	bne	r2,zero,437bc <isatty+0x64>
    {
      return 1;
   437b4:	00800044 	movi	r2,1
   437b8:	00000d06 	br	437f0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   437bc:	e0bff004 	addi	r2,fp,-64
   437c0:	e13fff17 	ldw	r4,-4(fp)
   437c4:	100b883a 	mov	r5,r2
   437c8:	00436500 	call	43650 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   437cc:	e0bff117 	ldw	r2,-60(fp)
   437d0:	10880020 	cmpeqi	r2,r2,8192
   437d4:	10803fcc 	andi	r2,r2,255
   437d8:	00000506 	br	437f0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   437dc:	00437080 	call	43708 <alt_get_errno>
   437e0:	1007883a 	mov	r3,r2
   437e4:	00801444 	movi	r2,81
   437e8:	18800015 	stw	r2,0(r3)
    return 0;
   437ec:	0005883a 	mov	r2,zero
  }
}
   437f0:	e037883a 	mov	sp,fp
   437f4:	dfc00117 	ldw	ra,4(sp)
   437f8:	df000017 	ldw	fp,0(sp)
   437fc:	dec00204 	addi	sp,sp,8
   43800:	f800283a 	ret

00043804 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43804:	defffc04 	addi	sp,sp,-16
   43808:	df000315 	stw	fp,12(sp)
   4380c:	df000304 	addi	fp,sp,12
   43810:	e13ffd15 	stw	r4,-12(fp)
   43814:	e17ffe15 	stw	r5,-8(fp)
   43818:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4381c:	e0fffe17 	ldw	r3,-8(fp)
   43820:	e0bffd17 	ldw	r2,-12(fp)
   43824:	18800c26 	beq	r3,r2,43858 <alt_load_section+0x54>
  {
    while( to != end )
   43828:	00000806 	br	4384c <alt_load_section+0x48>
    {
      *to++ = *from++;
   4382c:	e0bffe17 	ldw	r2,-8(fp)
   43830:	10c00104 	addi	r3,r2,4
   43834:	e0fffe15 	stw	r3,-8(fp)
   43838:	e0fffd17 	ldw	r3,-12(fp)
   4383c:	19000104 	addi	r4,r3,4
   43840:	e13ffd15 	stw	r4,-12(fp)
   43844:	18c00017 	ldw	r3,0(r3)
   43848:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4384c:	e0fffe17 	ldw	r3,-8(fp)
   43850:	e0bfff17 	ldw	r2,-4(fp)
   43854:	18bff51e 	bne	r3,r2,4382c <__alt_data_end+0xfffcdccc>
    {
      *to++ = *from++;
    }
  }
}
   43858:	e037883a 	mov	sp,fp
   4385c:	df000017 	ldw	fp,0(sp)
   43860:	dec00104 	addi	sp,sp,4
   43864:	f800283a 	ret

00043868 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   43868:	defffe04 	addi	sp,sp,-8
   4386c:	dfc00115 	stw	ra,4(sp)
   43870:	df000015 	stw	fp,0(sp)
   43874:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43878:	01000174 	movhi	r4,5
   4387c:	2120cc04 	addi	r4,r4,-31952
   43880:	01400134 	movhi	r5,4
   43884:	295a0004 	addi	r5,r5,26624
   43888:	01800174 	movhi	r6,5
   4388c:	31a0cc04 	addi	r6,r6,-31952
   43890:	00438040 	call	43804 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43894:	01000134 	movhi	r4,4
   43898:	21000804 	addi	r4,r4,32
   4389c:	01400134 	movhi	r5,4
   438a0:	29400804 	addi	r5,r5,32
   438a4:	01800134 	movhi	r6,4
   438a8:	31808b04 	addi	r6,r6,556
   438ac:	00438040 	call	43804 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   438b0:	01000134 	movhi	r4,4
   438b4:	2119eb04 	addi	r4,r4,26540
   438b8:	01400134 	movhi	r5,4
   438bc:	2959eb04 	addi	r5,r5,26540
   438c0:	01800134 	movhi	r6,4
   438c4:	319a0004 	addi	r6,r6,26624
   438c8:	00438040 	call	43804 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   438cc:	00456880 	call	45688 <alt_dcache_flush_all>
  alt_icache_flush_all();
   438d0:	00458500 	call	45850 <alt_icache_flush_all>
}
   438d4:	e037883a 	mov	sp,fp
   438d8:	dfc00117 	ldw	ra,4(sp)
   438dc:	df000017 	ldw	fp,0(sp)
   438e0:	dec00204 	addi	sp,sp,8
   438e4:	f800283a 	ret

000438e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   438e8:	defffe04 	addi	sp,sp,-8
   438ec:	dfc00115 	stw	ra,4(sp)
   438f0:	df000015 	stw	fp,0(sp)
   438f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   438f8:	00800174 	movhi	r2,5
   438fc:	10a0c704 	addi	r2,r2,-31972
   43900:	10800017 	ldw	r2,0(r2)
   43904:	10000526 	beq	r2,zero,4391c <alt_get_errno+0x34>
   43908:	00800174 	movhi	r2,5
   4390c:	10a0c704 	addi	r2,r2,-31972
   43910:	10800017 	ldw	r2,0(r2)
   43914:	103ee83a 	callr	r2
   43918:	00000206 	br	43924 <alt_get_errno+0x3c>
   4391c:	00800174 	movhi	r2,5
   43920:	10a79b04 	addi	r2,r2,-24980
}
   43924:	e037883a 	mov	sp,fp
   43928:	dfc00117 	ldw	ra,4(sp)
   4392c:	df000017 	ldw	fp,0(sp)
   43930:	dec00204 	addi	sp,sp,8
   43934:	f800283a 	ret

00043938 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   43938:	defff904 	addi	sp,sp,-28
   4393c:	dfc00615 	stw	ra,24(sp)
   43940:	df000515 	stw	fp,20(sp)
   43944:	df000504 	addi	fp,sp,20
   43948:	e13ffd15 	stw	r4,-12(fp)
   4394c:	e17ffe15 	stw	r5,-8(fp)
   43950:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   43954:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43958:	e0bffd17 	ldw	r2,-12(fp)
   4395c:	10000816 	blt	r2,zero,43980 <lseek+0x48>
   43960:	e13ffd17 	ldw	r4,-12(fp)
   43964:	01400304 	movi	r5,12
   43968:	00407dc0 	call	407dc <__mulsi3>
   4396c:	1007883a 	mov	r3,r2
   43970:	00800134 	movhi	r2,4
   43974:	109c1504 	addi	r2,r2,28756
   43978:	1885883a 	add	r2,r3,r2
   4397c:	00000106 	br	43984 <lseek+0x4c>
   43980:	0005883a 	mov	r2,zero
   43984:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   43988:	e0bffc17 	ldw	r2,-16(fp)
   4398c:	10001026 	beq	r2,zero,439d0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43990:	e0bffc17 	ldw	r2,-16(fp)
   43994:	10800017 	ldw	r2,0(r2)
   43998:	10800717 	ldw	r2,28(r2)
   4399c:	10000926 	beq	r2,zero,439c4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   439a0:	e0bffc17 	ldw	r2,-16(fp)
   439a4:	10800017 	ldw	r2,0(r2)
   439a8:	10800717 	ldw	r2,28(r2)
   439ac:	e13ffc17 	ldw	r4,-16(fp)
   439b0:	e17ffe17 	ldw	r5,-8(fp)
   439b4:	e1bfff17 	ldw	r6,-4(fp)
   439b8:	103ee83a 	callr	r2
   439bc:	e0bffb15 	stw	r2,-20(fp)
   439c0:	00000506 	br	439d8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   439c4:	00bfde84 	movi	r2,-134
   439c8:	e0bffb15 	stw	r2,-20(fp)
   439cc:	00000206 	br	439d8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   439d0:	00bfebc4 	movi	r2,-81
   439d4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   439d8:	e0bffb17 	ldw	r2,-20(fp)
   439dc:	1000070e 	bge	r2,zero,439fc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   439e0:	00438e80 	call	438e8 <alt_get_errno>
   439e4:	1007883a 	mov	r3,r2
   439e8:	e0bffb17 	ldw	r2,-20(fp)
   439ec:	0085c83a 	sub	r2,zero,r2
   439f0:	18800015 	stw	r2,0(r3)
    rc = -1;
   439f4:	00bfffc4 	movi	r2,-1
   439f8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   439fc:	e0bffb17 	ldw	r2,-20(fp)
}
   43a00:	e037883a 	mov	sp,fp
   43a04:	dfc00117 	ldw	ra,4(sp)
   43a08:	df000017 	ldw	fp,0(sp)
   43a0c:	dec00204 	addi	sp,sp,8
   43a10:	f800283a 	ret

00043a14 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43a14:	defffd04 	addi	sp,sp,-12
   43a18:	dfc00215 	stw	ra,8(sp)
   43a1c:	df000115 	stw	fp,4(sp)
   43a20:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43a24:	0009883a 	mov	r4,zero
   43a28:	0043f080 	call	43f08 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   43a2c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   43a30:	0043f3c0 	call	43f3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   43a34:	01000134 	movhi	r4,4
   43a38:	2119f504 	addi	r4,r4,26580
   43a3c:	01400134 	movhi	r5,4
   43a40:	2959f504 	addi	r5,r5,26580
   43a44:	01800134 	movhi	r6,4
   43a48:	3199f504 	addi	r6,r6,26580
   43a4c:	0045c1c0 	call	45c1c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   43a50:	00457980 	call	45798 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   43a54:	01000134 	movhi	r4,4
   43a58:	2115fd04 	addi	r4,r4,22516
   43a5c:	00464080 	call	46408 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43a60:	d126de17 	ldw	r4,-25736(gp)
   43a64:	d0e6df17 	ldw	r3,-25732(gp)
   43a68:	d0a6e017 	ldw	r2,-25728(gp)
   43a6c:	180b883a 	mov	r5,r3
   43a70:	100d883a 	mov	r6,r2
   43a74:	00402680 	call	40268 <main>
   43a78:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43a7c:	01000044 	movi	r4,1
   43a80:	00434fc0 	call	434fc <close>
  exit (result);
   43a84:	e13fff17 	ldw	r4,-4(fp)
   43a88:	004641c0 	call	4641c <exit>

00043a8c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   43a8c:	defffe04 	addi	sp,sp,-8
   43a90:	df000115 	stw	fp,4(sp)
   43a94:	df000104 	addi	fp,sp,4
   43a98:	e13fff15 	stw	r4,-4(fp)
}
   43a9c:	e037883a 	mov	sp,fp
   43aa0:	df000017 	ldw	fp,0(sp)
   43aa4:	dec00104 	addi	sp,sp,4
   43aa8:	f800283a 	ret

00043aac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   43aac:	defffe04 	addi	sp,sp,-8
   43ab0:	df000115 	stw	fp,4(sp)
   43ab4:	df000104 	addi	fp,sp,4
   43ab8:	e13fff15 	stw	r4,-4(fp)
}
   43abc:	e037883a 	mov	sp,fp
   43ac0:	df000017 	ldw	fp,0(sp)
   43ac4:	dec00104 	addi	sp,sp,4
   43ac8:	f800283a 	ret

00043acc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43acc:	defffe04 	addi	sp,sp,-8
   43ad0:	dfc00115 	stw	ra,4(sp)
   43ad4:	df000015 	stw	fp,0(sp)
   43ad8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43adc:	00800174 	movhi	r2,5
   43ae0:	10a0c704 	addi	r2,r2,-31972
   43ae4:	10800017 	ldw	r2,0(r2)
   43ae8:	10000526 	beq	r2,zero,43b00 <alt_get_errno+0x34>
   43aec:	00800174 	movhi	r2,5
   43af0:	10a0c704 	addi	r2,r2,-31972
   43af4:	10800017 	ldw	r2,0(r2)
   43af8:	103ee83a 	callr	r2
   43afc:	00000206 	br	43b08 <alt_get_errno+0x3c>
   43b00:	00800174 	movhi	r2,5
   43b04:	10a79b04 	addi	r2,r2,-24980
}
   43b08:	e037883a 	mov	sp,fp
   43b0c:	dfc00117 	ldw	ra,4(sp)
   43b10:	df000017 	ldw	fp,0(sp)
   43b14:	dec00204 	addi	sp,sp,8
   43b18:	f800283a 	ret

00043b1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   43b1c:	defff904 	addi	sp,sp,-28
   43b20:	dfc00615 	stw	ra,24(sp)
   43b24:	df000515 	stw	fp,20(sp)
   43b28:	df000504 	addi	fp,sp,20
   43b2c:	e13ffd15 	stw	r4,-12(fp)
   43b30:	e17ffe15 	stw	r5,-8(fp)
   43b34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43b38:	e0bffd17 	ldw	r2,-12(fp)
   43b3c:	10000816 	blt	r2,zero,43b60 <read+0x44>
   43b40:	e13ffd17 	ldw	r4,-12(fp)
   43b44:	01400304 	movi	r5,12
   43b48:	00407dc0 	call	407dc <__mulsi3>
   43b4c:	1007883a 	mov	r3,r2
   43b50:	00800134 	movhi	r2,4
   43b54:	109c1504 	addi	r2,r2,28756
   43b58:	1885883a 	add	r2,r3,r2
   43b5c:	00000106 	br	43b64 <read+0x48>
   43b60:	0005883a 	mov	r2,zero
   43b64:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43b68:	e0bffb17 	ldw	r2,-20(fp)
   43b6c:	10002226 	beq	r2,zero,43bf8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43b70:	e0bffb17 	ldw	r2,-20(fp)
   43b74:	10800217 	ldw	r2,8(r2)
   43b78:	108000cc 	andi	r2,r2,3
   43b7c:	10800060 	cmpeqi	r2,r2,1
   43b80:	1000181e 	bne	r2,zero,43be4 <read+0xc8>
        (fd->dev->read))
   43b84:	e0bffb17 	ldw	r2,-20(fp)
   43b88:	10800017 	ldw	r2,0(r2)
   43b8c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43b90:	10001426 	beq	r2,zero,43be4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43b94:	e0bffb17 	ldw	r2,-20(fp)
   43b98:	10800017 	ldw	r2,0(r2)
   43b9c:	10800517 	ldw	r2,20(r2)
   43ba0:	e0ffff17 	ldw	r3,-4(fp)
   43ba4:	e13ffb17 	ldw	r4,-20(fp)
   43ba8:	e17ffe17 	ldw	r5,-8(fp)
   43bac:	180d883a 	mov	r6,r3
   43bb0:	103ee83a 	callr	r2
   43bb4:	e0bffc15 	stw	r2,-16(fp)
   43bb8:	e0bffc17 	ldw	r2,-16(fp)
   43bbc:	1000070e 	bge	r2,zero,43bdc <read+0xc0>
        {
          ALT_ERRNO = -rval;
   43bc0:	0043acc0 	call	43acc <alt_get_errno>
   43bc4:	1007883a 	mov	r3,r2
   43bc8:	e0bffc17 	ldw	r2,-16(fp)
   43bcc:	0085c83a 	sub	r2,zero,r2
   43bd0:	18800015 	stw	r2,0(r3)
          return -1;
   43bd4:	00bfffc4 	movi	r2,-1
   43bd8:	00000c06 	br	43c0c <read+0xf0>
        }
        return rval;
   43bdc:	e0bffc17 	ldw	r2,-16(fp)
   43be0:	00000a06 	br	43c0c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43be4:	0043acc0 	call	43acc <alt_get_errno>
   43be8:	1007883a 	mov	r3,r2
   43bec:	00800344 	movi	r2,13
   43bf0:	18800015 	stw	r2,0(r3)
   43bf4:	00000406 	br	43c08 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43bf8:	0043acc0 	call	43acc <alt_get_errno>
   43bfc:	1007883a 	mov	r3,r2
   43c00:	00801444 	movi	r2,81
   43c04:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43c08:	00bfffc4 	movi	r2,-1
}
   43c0c:	e037883a 	mov	sp,fp
   43c10:	dfc00117 	ldw	ra,4(sp)
   43c14:	df000017 	ldw	fp,0(sp)
   43c18:	dec00204 	addi	sp,sp,8
   43c1c:	f800283a 	ret

00043c20 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43c20:	defffc04 	addi	sp,sp,-16
   43c24:	dfc00315 	stw	ra,12(sp)
   43c28:	df000215 	stw	fp,8(sp)
   43c2c:	dc000115 	stw	r16,4(sp)
   43c30:	df000204 	addi	fp,sp,8
   43c34:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   43c38:	e0bffe17 	ldw	r2,-8(fp)
   43c3c:	108000d0 	cmplti	r2,r2,3
   43c40:	1000111e 	bne	r2,zero,43c88 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   43c44:	04000134 	movhi	r16,4
   43c48:	841c1504 	addi	r16,r16,28756
   43c4c:	e0bffe17 	ldw	r2,-8(fp)
   43c50:	1009883a 	mov	r4,r2
   43c54:	01400304 	movi	r5,12
   43c58:	00407dc0 	call	407dc <__mulsi3>
   43c5c:	8085883a 	add	r2,r16,r2
   43c60:	10800204 	addi	r2,r2,8
   43c64:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43c68:	04000134 	movhi	r16,4
   43c6c:	841c1504 	addi	r16,r16,28756
   43c70:	e0bffe17 	ldw	r2,-8(fp)
   43c74:	1009883a 	mov	r4,r2
   43c78:	01400304 	movi	r5,12
   43c7c:	00407dc0 	call	407dc <__mulsi3>
   43c80:	8085883a 	add	r2,r16,r2
   43c84:	10000015 	stw	zero,0(r2)
  }
}
   43c88:	e6ffff04 	addi	sp,fp,-4
   43c8c:	dfc00217 	ldw	ra,8(sp)
   43c90:	df000117 	ldw	fp,4(sp)
   43c94:	dc000017 	ldw	r16,0(sp)
   43c98:	dec00304 	addi	sp,sp,12
   43c9c:	f800283a 	ret

00043ca0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43ca0:	defff904 	addi	sp,sp,-28
   43ca4:	df000615 	stw	fp,24(sp)
   43ca8:	df000604 	addi	fp,sp,24
   43cac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43cb0:	0005303a 	rdctl	r2,status
   43cb4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43cb8:	e0fffc17 	ldw	r3,-16(fp)
   43cbc:	00bfff84 	movi	r2,-2
   43cc0:	1884703a 	and	r2,r3,r2
   43cc4:	1001703a 	wrctl	status,r2
  
  return context;
   43cc8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43ccc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43cd0:	d0a00a17 	ldw	r2,-32728(gp)
   43cd4:	10c000c4 	addi	r3,r2,3
   43cd8:	00bfff04 	movi	r2,-4
   43cdc:	1884703a 	and	r2,r3,r2
   43ce0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43ce4:	d0e00a17 	ldw	r3,-32728(gp)
   43ce8:	e0bfff17 	ldw	r2,-4(fp)
   43cec:	1887883a 	add	r3,r3,r2
   43cf0:	008001f4 	movhi	r2,7
   43cf4:	1096d804 	addi	r2,r2,23392
   43cf8:	10c0062e 	bgeu	r2,r3,43d14 <sbrk+0x74>
   43cfc:	e0bffa17 	ldw	r2,-24(fp)
   43d00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43d04:	e0bffd17 	ldw	r2,-12(fp)
   43d08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43d0c:	00bfffc4 	movi	r2,-1
   43d10:	00000b06 	br	43d40 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   43d14:	d0a00a17 	ldw	r2,-32728(gp)
   43d18:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   43d1c:	d0e00a17 	ldw	r3,-32728(gp)
   43d20:	e0bfff17 	ldw	r2,-4(fp)
   43d24:	1885883a 	add	r2,r3,r2
   43d28:	d0a00a15 	stw	r2,-32728(gp)
   43d2c:	e0bffa17 	ldw	r2,-24(fp)
   43d30:	e0bffe15 	stw	r2,-8(fp)
   43d34:	e0bffe17 	ldw	r2,-8(fp)
   43d38:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43d3c:	e0bffb17 	ldw	r2,-20(fp)
} 
   43d40:	e037883a 	mov	sp,fp
   43d44:	df000017 	ldw	fp,0(sp)
   43d48:	dec00104 	addi	sp,sp,4
   43d4c:	f800283a 	ret

00043d50 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   43d50:	defffd04 	addi	sp,sp,-12
   43d54:	dfc00215 	stw	ra,8(sp)
   43d58:	df000115 	stw	fp,4(sp)
   43d5c:	df000104 	addi	fp,sp,4
   43d60:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   43d64:	e13fff17 	ldw	r4,-4(fp)
   43d68:	00455300 	call	45530 <alt_busy_sleep>
}
   43d6c:	e037883a 	mov	sp,fp
   43d70:	dfc00117 	ldw	ra,4(sp)
   43d74:	df000017 	ldw	fp,0(sp)
   43d78:	dec00204 	addi	sp,sp,8
   43d7c:	f800283a 	ret

00043d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43d80:	defffe04 	addi	sp,sp,-8
   43d84:	dfc00115 	stw	ra,4(sp)
   43d88:	df000015 	stw	fp,0(sp)
   43d8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43d90:	00800174 	movhi	r2,5
   43d94:	10a0c704 	addi	r2,r2,-31972
   43d98:	10800017 	ldw	r2,0(r2)
   43d9c:	10000526 	beq	r2,zero,43db4 <alt_get_errno+0x34>
   43da0:	00800174 	movhi	r2,5
   43da4:	10a0c704 	addi	r2,r2,-31972
   43da8:	10800017 	ldw	r2,0(r2)
   43dac:	103ee83a 	callr	r2
   43db0:	00000206 	br	43dbc <alt_get_errno+0x3c>
   43db4:	00800174 	movhi	r2,5
   43db8:	10a79b04 	addi	r2,r2,-24980
}
   43dbc:	e037883a 	mov	sp,fp
   43dc0:	dfc00117 	ldw	ra,4(sp)
   43dc4:	df000017 	ldw	fp,0(sp)
   43dc8:	dec00204 	addi	sp,sp,8
   43dcc:	f800283a 	ret

00043dd0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43dd0:	defff904 	addi	sp,sp,-28
   43dd4:	dfc00615 	stw	ra,24(sp)
   43dd8:	df000515 	stw	fp,20(sp)
   43ddc:	df000504 	addi	fp,sp,20
   43de0:	e13ffd15 	stw	r4,-12(fp)
   43de4:	e17ffe15 	stw	r5,-8(fp)
   43de8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43dec:	e0bffd17 	ldw	r2,-12(fp)
   43df0:	10000816 	blt	r2,zero,43e14 <write+0x44>
   43df4:	e13ffd17 	ldw	r4,-12(fp)
   43df8:	01400304 	movi	r5,12
   43dfc:	00407dc0 	call	407dc <__mulsi3>
   43e00:	1007883a 	mov	r3,r2
   43e04:	00800134 	movhi	r2,4
   43e08:	109c1504 	addi	r2,r2,28756
   43e0c:	1885883a 	add	r2,r3,r2
   43e10:	00000106 	br	43e18 <write+0x48>
   43e14:	0005883a 	mov	r2,zero
   43e18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43e1c:	e0bffb17 	ldw	r2,-20(fp)
   43e20:	10002126 	beq	r2,zero,43ea8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43e24:	e0bffb17 	ldw	r2,-20(fp)
   43e28:	10800217 	ldw	r2,8(r2)
   43e2c:	108000cc 	andi	r2,r2,3
   43e30:	10001826 	beq	r2,zero,43e94 <write+0xc4>
   43e34:	e0bffb17 	ldw	r2,-20(fp)
   43e38:	10800017 	ldw	r2,0(r2)
   43e3c:	10800617 	ldw	r2,24(r2)
   43e40:	10001426 	beq	r2,zero,43e94 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43e44:	e0bffb17 	ldw	r2,-20(fp)
   43e48:	10800017 	ldw	r2,0(r2)
   43e4c:	10800617 	ldw	r2,24(r2)
   43e50:	e0ffff17 	ldw	r3,-4(fp)
   43e54:	e13ffb17 	ldw	r4,-20(fp)
   43e58:	e17ffe17 	ldw	r5,-8(fp)
   43e5c:	180d883a 	mov	r6,r3
   43e60:	103ee83a 	callr	r2
   43e64:	e0bffc15 	stw	r2,-16(fp)
   43e68:	e0bffc17 	ldw	r2,-16(fp)
   43e6c:	1000070e 	bge	r2,zero,43e8c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   43e70:	0043d800 	call	43d80 <alt_get_errno>
   43e74:	1007883a 	mov	r3,r2
   43e78:	e0bffc17 	ldw	r2,-16(fp)
   43e7c:	0085c83a 	sub	r2,zero,r2
   43e80:	18800015 	stw	r2,0(r3)
        return -1;
   43e84:	00bfffc4 	movi	r2,-1
   43e88:	00000c06 	br	43ebc <write+0xec>
      }
      return rval;
   43e8c:	e0bffc17 	ldw	r2,-16(fp)
   43e90:	00000a06 	br	43ebc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43e94:	0043d800 	call	43d80 <alt_get_errno>
   43e98:	1007883a 	mov	r3,r2
   43e9c:	00800344 	movi	r2,13
   43ea0:	18800015 	stw	r2,0(r3)
   43ea4:	00000406 	br	43eb8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43ea8:	0043d800 	call	43d80 <alt_get_errno>
   43eac:	1007883a 	mov	r3,r2
   43eb0:	00801444 	movi	r2,81
   43eb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43eb8:	00bfffc4 	movi	r2,-1
}
   43ebc:	e037883a 	mov	sp,fp
   43ec0:	dfc00117 	ldw	ra,4(sp)
   43ec4:	df000017 	ldw	fp,0(sp)
   43ec8:	dec00204 	addi	sp,sp,8
   43ecc:	f800283a 	ret

00043ed0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43ed0:	defffd04 	addi	sp,sp,-12
   43ed4:	dfc00215 	stw	ra,8(sp)
   43ed8:	df000115 	stw	fp,4(sp)
   43edc:	df000104 	addi	fp,sp,4
   43ee0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43ee4:	e13fff17 	ldw	r4,-4(fp)
   43ee8:	01400174 	movhi	r5,5
   43eec:	2960c404 	addi	r5,r5,-31984
   43ef0:	00456f40 	call	456f4 <alt_dev_llist_insert>
}
   43ef4:	e037883a 	mov	sp,fp
   43ef8:	dfc00117 	ldw	ra,4(sp)
   43efc:	df000017 	ldw	fp,0(sp)
   43f00:	dec00204 	addi	sp,sp,8
   43f04:	f800283a 	ret

00043f08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43f08:	defffd04 	addi	sp,sp,-12
   43f0c:	dfc00215 	stw	ra,8(sp)
   43f10:	df000115 	stw	fp,4(sp)
   43f14:	df000104 	addi	fp,sp,4
   43f18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   43f1c:	00460d40 	call	460d4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43f20:	00800044 	movi	r2,1
   43f24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43f28:	e037883a 	mov	sp,fp
   43f2c:	dfc00117 	ldw	ra,4(sp)
   43f30:	df000017 	ldw	fp,0(sp)
   43f34:	dec00204 	addi	sp,sp,8
   43f38:	f800283a 	ret

00043f3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43f3c:	defffe04 	addi	sp,sp,-8
   43f40:	dfc00115 	stw	ra,4(sp)
   43f44:	df000015 	stw	fp,0(sp)
   43f48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK, sys_clk);
   43f4c:	01000234 	movhi	r4,8
   43f50:	21040004 	addi	r4,r4,4096
   43f54:	000b883a 	mov	r5,zero
   43f58:	01800044 	movi	r6,1
   43f5c:	01c0fa04 	movi	r7,1000
   43f60:	0044a780 	call	44a78 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   43f64:	01000134 	movhi	r4,4
   43f68:	211c7f04 	addi	r4,r4,29180
   43f6c:	000b883a 	mov	r5,zero
   43f70:	01800084 	movi	r6,2
   43f74:	004411c0 	call	4411c <altera_avalon_jtag_uart_init>
   43f78:	01000134 	movhi	r4,4
   43f7c:	211c7504 	addi	r4,r4,29140
   43f80:	0043ed00 	call	43ed0 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
   43f84:	01000174 	movhi	r4,5
   43f88:	21209704 	addi	r4,r4,-32164
   43f8c:	000b883a 	mov	r5,zero
   43f90:	000d883a 	mov	r6,zero
   43f94:	0044c100 	call	44c10 <altera_avalon_uart_init>
   43f98:	01000174 	movhi	r4,5
   43f9c:	21208d04 	addi	r4,r4,-32204
   43fa0:	0043ed00 	call	43ed0 <alt_dev_reg>
}
   43fa4:	e037883a 	mov	sp,fp
   43fa8:	dfc00117 	ldw	ra,4(sp)
   43fac:	df000017 	ldw	fp,0(sp)
   43fb0:	dec00204 	addi	sp,sp,8
   43fb4:	f800283a 	ret

00043fb8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43fb8:	defffa04 	addi	sp,sp,-24
   43fbc:	dfc00515 	stw	ra,20(sp)
   43fc0:	df000415 	stw	fp,16(sp)
   43fc4:	df000404 	addi	fp,sp,16
   43fc8:	e13ffd15 	stw	r4,-12(fp)
   43fcc:	e17ffe15 	stw	r5,-8(fp)
   43fd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43fd4:	e0bffd17 	ldw	r2,-12(fp)
   43fd8:	10800017 	ldw	r2,0(r2)
   43fdc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43fe0:	e0bffc17 	ldw	r2,-16(fp)
   43fe4:	10c00a04 	addi	r3,r2,40
   43fe8:	e0bffd17 	ldw	r2,-12(fp)
   43fec:	10800217 	ldw	r2,8(r2)
   43ff0:	1809883a 	mov	r4,r3
   43ff4:	e17ffe17 	ldw	r5,-8(fp)
   43ff8:	e1bfff17 	ldw	r6,-4(fp)
   43ffc:	100f883a 	mov	r7,r2
   44000:	00445e00 	call	445e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   44004:	e037883a 	mov	sp,fp
   44008:	dfc00117 	ldw	ra,4(sp)
   4400c:	df000017 	ldw	fp,0(sp)
   44010:	dec00204 	addi	sp,sp,8
   44014:	f800283a 	ret

00044018 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   44018:	defffa04 	addi	sp,sp,-24
   4401c:	dfc00515 	stw	ra,20(sp)
   44020:	df000415 	stw	fp,16(sp)
   44024:	df000404 	addi	fp,sp,16
   44028:	e13ffd15 	stw	r4,-12(fp)
   4402c:	e17ffe15 	stw	r5,-8(fp)
   44030:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44034:	e0bffd17 	ldw	r2,-12(fp)
   44038:	10800017 	ldw	r2,0(r2)
   4403c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   44040:	e0bffc17 	ldw	r2,-16(fp)
   44044:	10c00a04 	addi	r3,r2,40
   44048:	e0bffd17 	ldw	r2,-12(fp)
   4404c:	10800217 	ldw	r2,8(r2)
   44050:	1809883a 	mov	r4,r3
   44054:	e17ffe17 	ldw	r5,-8(fp)
   44058:	e1bfff17 	ldw	r6,-4(fp)
   4405c:	100f883a 	mov	r7,r2
   44060:	00447ec0 	call	447ec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   44064:	e037883a 	mov	sp,fp
   44068:	dfc00117 	ldw	ra,4(sp)
   4406c:	df000017 	ldw	fp,0(sp)
   44070:	dec00204 	addi	sp,sp,8
   44074:	f800283a 	ret

00044078 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   44078:	defffc04 	addi	sp,sp,-16
   4407c:	dfc00315 	stw	ra,12(sp)
   44080:	df000215 	stw	fp,8(sp)
   44084:	df000204 	addi	fp,sp,8
   44088:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4408c:	e0bfff17 	ldw	r2,-4(fp)
   44090:	10800017 	ldw	r2,0(r2)
   44094:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   44098:	e0bffe17 	ldw	r2,-8(fp)
   4409c:	10c00a04 	addi	r3,r2,40
   440a0:	e0bfff17 	ldw	r2,-4(fp)
   440a4:	10800217 	ldw	r2,8(r2)
   440a8:	1809883a 	mov	r4,r3
   440ac:	100b883a 	mov	r5,r2
   440b0:	004448c0 	call	4448c <altera_avalon_jtag_uart_close>
}
   440b4:	e037883a 	mov	sp,fp
   440b8:	dfc00117 	ldw	ra,4(sp)
   440bc:	df000017 	ldw	fp,0(sp)
   440c0:	dec00204 	addi	sp,sp,8
   440c4:	f800283a 	ret

000440c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   440c8:	defffa04 	addi	sp,sp,-24
   440cc:	dfc00515 	stw	ra,20(sp)
   440d0:	df000415 	stw	fp,16(sp)
   440d4:	df000404 	addi	fp,sp,16
   440d8:	e13ffd15 	stw	r4,-12(fp)
   440dc:	e17ffe15 	stw	r5,-8(fp)
   440e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   440e4:	e0bffd17 	ldw	r2,-12(fp)
   440e8:	10800017 	ldw	r2,0(r2)
   440ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   440f0:	e0bffc17 	ldw	r2,-16(fp)
   440f4:	10800a04 	addi	r2,r2,40
   440f8:	1009883a 	mov	r4,r2
   440fc:	e17ffe17 	ldw	r5,-8(fp)
   44100:	e1bfff17 	ldw	r6,-4(fp)
   44104:	00444f40 	call	444f4 <altera_avalon_jtag_uart_ioctl>
}
   44108:	e037883a 	mov	sp,fp
   4410c:	dfc00117 	ldw	ra,4(sp)
   44110:	df000017 	ldw	fp,0(sp)
   44114:	dec00204 	addi	sp,sp,8
   44118:	f800283a 	ret

0004411c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4411c:	defffa04 	addi	sp,sp,-24
   44120:	dfc00515 	stw	ra,20(sp)
   44124:	df000415 	stw	fp,16(sp)
   44128:	df000404 	addi	fp,sp,16
   4412c:	e13ffd15 	stw	r4,-12(fp)
   44130:	e17ffe15 	stw	r5,-8(fp)
   44134:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44138:	e0bffd17 	ldw	r2,-12(fp)
   4413c:	00c00044 	movi	r3,1
   44140:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   44144:	e0bffd17 	ldw	r2,-12(fp)
   44148:	10800017 	ldw	r2,0(r2)
   4414c:	10800104 	addi	r2,r2,4
   44150:	1007883a 	mov	r3,r2
   44154:	e0bffd17 	ldw	r2,-12(fp)
   44158:	10800817 	ldw	r2,32(r2)
   4415c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   44160:	e0fffe17 	ldw	r3,-8(fp)
   44164:	e0bfff17 	ldw	r2,-4(fp)
   44168:	d8000015 	stw	zero,0(sp)
   4416c:	1809883a 	mov	r4,r3
   44170:	100b883a 	mov	r5,r2
   44174:	01800134 	movhi	r6,4
   44178:	31907804 	addi	r6,r6,16864
   4417c:	e1fffd17 	ldw	r7,-12(fp)
   44180:	004586c0 	call	4586c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   44184:	e0bffd17 	ldw	r2,-12(fp)
   44188:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4418c:	e0bffd17 	ldw	r2,-12(fp)
   44190:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   44194:	00800174 	movhi	r2,5
   44198:	10a7a004 	addi	r2,r2,-24960
   4419c:	10800017 	ldw	r2,0(r2)
   441a0:	1809883a 	mov	r4,r3
   441a4:	100b883a 	mov	r5,r2
   441a8:	01800134 	movhi	r6,4
   441ac:	3190f904 	addi	r6,r6,17380
   441b0:	e1fffd17 	ldw	r7,-12(fp)
   441b4:	00453f00 	call	453f0 <alt_alarm_start>
   441b8:	1000040e 	bge	r2,zero,441cc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   441bc:	e0fffd17 	ldw	r3,-12(fp)
   441c0:	00a00034 	movhi	r2,32768
   441c4:	10bfffc4 	addi	r2,r2,-1
   441c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   441cc:	e037883a 	mov	sp,fp
   441d0:	dfc00117 	ldw	ra,4(sp)
   441d4:	df000017 	ldw	fp,0(sp)
   441d8:	dec00204 	addi	sp,sp,8
   441dc:	f800283a 	ret

000441e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   441e0:	defff804 	addi	sp,sp,-32
   441e4:	df000715 	stw	fp,28(sp)
   441e8:	df000704 	addi	fp,sp,28
   441ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   441f0:	e0bfff17 	ldw	r2,-4(fp)
   441f4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   441f8:	e0bffb17 	ldw	r2,-20(fp)
   441fc:	10800017 	ldw	r2,0(r2)
   44200:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44204:	e0bffc17 	ldw	r2,-16(fp)
   44208:	10800104 	addi	r2,r2,4
   4420c:	10800037 	ldwio	r2,0(r2)
   44210:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   44214:	e0bffd17 	ldw	r2,-12(fp)
   44218:	1080c00c 	andi	r2,r2,768
   4421c:	1000011e 	bne	r2,zero,44224 <altera_avalon_jtag_uart_irq+0x44>
      break;
   44220:	00006c06 	br	443d4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   44224:	e0bffd17 	ldw	r2,-12(fp)
   44228:	1080400c 	andi	r2,r2,256
   4422c:	10003426 	beq	r2,zero,44300 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   44230:	00800074 	movhi	r2,1
   44234:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44238:	e0bffb17 	ldw	r2,-20(fp)
   4423c:	10800a17 	ldw	r2,40(r2)
   44240:	10800044 	addi	r2,r2,1
   44244:	1081ffcc 	andi	r2,r2,2047
   44248:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4424c:	e0bffb17 	ldw	r2,-20(fp)
   44250:	10c00b17 	ldw	r3,44(r2)
   44254:	e0bffe17 	ldw	r2,-8(fp)
   44258:	1880011e 	bne	r3,r2,44260 <altera_avalon_jtag_uart_irq+0x80>
          break;
   4425c:	00001606 	br	442b8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   44260:	e0bffc17 	ldw	r2,-16(fp)
   44264:	10800037 	ldwio	r2,0(r2)
   44268:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4426c:	e0bff917 	ldw	r2,-28(fp)
   44270:	10a0000c 	andi	r2,r2,32768
   44274:	1000011e 	bne	r2,zero,4427c <altera_avalon_jtag_uart_irq+0x9c>
          break;
   44278:	00000f06 	br	442b8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4427c:	e0bffb17 	ldw	r2,-20(fp)
   44280:	10800a17 	ldw	r2,40(r2)
   44284:	e0fff917 	ldw	r3,-28(fp)
   44288:	1809883a 	mov	r4,r3
   4428c:	e0fffb17 	ldw	r3,-20(fp)
   44290:	1885883a 	add	r2,r3,r2
   44294:	10800e04 	addi	r2,r2,56
   44298:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4429c:	e0bffb17 	ldw	r2,-20(fp)
   442a0:	10800a17 	ldw	r2,40(r2)
   442a4:	10800044 	addi	r2,r2,1
   442a8:	10c1ffcc 	andi	r3,r2,2047
   442ac:	e0bffb17 	ldw	r2,-20(fp)
   442b0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   442b4:	003fe006 	br	44238 <__alt_data_end+0xfffce6d8>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   442b8:	e0bff917 	ldw	r2,-28(fp)
   442bc:	10bfffec 	andhi	r2,r2,65535
   442c0:	10000f26 	beq	r2,zero,44300 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   442c4:	e0bffb17 	ldw	r2,-20(fp)
   442c8:	10c00817 	ldw	r3,32(r2)
   442cc:	00bfff84 	movi	r2,-2
   442d0:	1886703a 	and	r3,r3,r2
   442d4:	e0bffb17 	ldw	r2,-20(fp)
   442d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   442dc:	e0bffc17 	ldw	r2,-16(fp)
   442e0:	10800104 	addi	r2,r2,4
   442e4:	1007883a 	mov	r3,r2
   442e8:	e0bffb17 	ldw	r2,-20(fp)
   442ec:	10800817 	ldw	r2,32(r2)
   442f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   442f4:	e0bffc17 	ldw	r2,-16(fp)
   442f8:	10800104 	addi	r2,r2,4
   442fc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   44300:	e0bffd17 	ldw	r2,-12(fp)
   44304:	1080800c 	andi	r2,r2,512
   44308:	10003126 	beq	r2,zero,443d0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4430c:	e0bffd17 	ldw	r2,-12(fp)
   44310:	1004d43a 	srli	r2,r2,16
   44314:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   44318:	00001406 	br	4436c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4431c:	e0bffc17 	ldw	r2,-16(fp)
   44320:	e0fffb17 	ldw	r3,-20(fp)
   44324:	18c00d17 	ldw	r3,52(r3)
   44328:	e13ffb17 	ldw	r4,-20(fp)
   4432c:	20c7883a 	add	r3,r4,r3
   44330:	18c20e04 	addi	r3,r3,2104
   44334:	18c00003 	ldbu	r3,0(r3)
   44338:	18c03fcc 	andi	r3,r3,255
   4433c:	18c0201c 	xori	r3,r3,128
   44340:	18ffe004 	addi	r3,r3,-128
   44344:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44348:	e0bffb17 	ldw	r2,-20(fp)
   4434c:	10800d17 	ldw	r2,52(r2)
   44350:	10800044 	addi	r2,r2,1
   44354:	10c1ffcc 	andi	r3,r2,2047
   44358:	e0bffb17 	ldw	r2,-20(fp)
   4435c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   44360:	e0bffa17 	ldw	r2,-24(fp)
   44364:	10bfffc4 	addi	r2,r2,-1
   44368:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4436c:	e0bffa17 	ldw	r2,-24(fp)
   44370:	10000526 	beq	r2,zero,44388 <altera_avalon_jtag_uart_irq+0x1a8>
   44374:	e0bffb17 	ldw	r2,-20(fp)
   44378:	10c00d17 	ldw	r3,52(r2)
   4437c:	e0bffb17 	ldw	r2,-20(fp)
   44380:	10800c17 	ldw	r2,48(r2)
   44384:	18bfe51e 	bne	r3,r2,4431c <__alt_data_end+0xfffce7bc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   44388:	e0bffa17 	ldw	r2,-24(fp)
   4438c:	10001026 	beq	r2,zero,443d0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44390:	e0bffb17 	ldw	r2,-20(fp)
   44394:	10c00817 	ldw	r3,32(r2)
   44398:	00bfff44 	movi	r2,-3
   4439c:	1886703a 	and	r3,r3,r2
   443a0:	e0bffb17 	ldw	r2,-20(fp)
   443a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   443a8:	e0bffb17 	ldw	r2,-20(fp)
   443ac:	10800017 	ldw	r2,0(r2)
   443b0:	10800104 	addi	r2,r2,4
   443b4:	1007883a 	mov	r3,r2
   443b8:	e0bffb17 	ldw	r2,-20(fp)
   443bc:	10800817 	ldw	r2,32(r2)
   443c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   443c4:	e0bffc17 	ldw	r2,-16(fp)
   443c8:	10800104 	addi	r2,r2,4
   443cc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   443d0:	003f8c06 	br	44204 <__alt_data_end+0xfffce6a4>
}
   443d4:	e037883a 	mov	sp,fp
   443d8:	df000017 	ldw	fp,0(sp)
   443dc:	dec00104 	addi	sp,sp,4
   443e0:	f800283a 	ret

000443e4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   443e4:	defff804 	addi	sp,sp,-32
   443e8:	df000715 	stw	fp,28(sp)
   443ec:	df000704 	addi	fp,sp,28
   443f0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   443f4:	e0bffb17 	ldw	r2,-20(fp)
   443f8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   443fc:	e0bff917 	ldw	r2,-28(fp)
   44400:	10800017 	ldw	r2,0(r2)
   44404:	10800104 	addi	r2,r2,4
   44408:	10800037 	ldwio	r2,0(r2)
   4440c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   44410:	e0bffa17 	ldw	r2,-24(fp)
   44414:	1081000c 	andi	r2,r2,1024
   44418:	10000b26 	beq	r2,zero,44448 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4441c:	e0bff917 	ldw	r2,-28(fp)
   44420:	10800017 	ldw	r2,0(r2)
   44424:	10800104 	addi	r2,r2,4
   44428:	1007883a 	mov	r3,r2
   4442c:	e0bff917 	ldw	r2,-28(fp)
   44430:	10800817 	ldw	r2,32(r2)
   44434:	10810014 	ori	r2,r2,1024
   44438:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4443c:	e0bff917 	ldw	r2,-28(fp)
   44440:	10000915 	stw	zero,36(r2)
   44444:	00000a06 	br	44470 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   44448:	e0bff917 	ldw	r2,-28(fp)
   4444c:	10c00917 	ldw	r3,36(r2)
   44450:	00a00034 	movhi	r2,32768
   44454:	10bfff04 	addi	r2,r2,-4
   44458:	10c00536 	bltu	r2,r3,44470 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   4445c:	e0bff917 	ldw	r2,-28(fp)
   44460:	10800917 	ldw	r2,36(r2)
   44464:	10c00044 	addi	r3,r2,1
   44468:	e0bff917 	ldw	r2,-28(fp)
   4446c:	10c00915 	stw	r3,36(r2)
   44470:	00800174 	movhi	r2,5
   44474:	10a7a004 	addi	r2,r2,-24960
   44478:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4447c:	e037883a 	mov	sp,fp
   44480:	df000017 	ldw	fp,0(sp)
   44484:	dec00104 	addi	sp,sp,4
   44488:	f800283a 	ret

0004448c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4448c:	defffd04 	addi	sp,sp,-12
   44490:	df000215 	stw	fp,8(sp)
   44494:	df000204 	addi	fp,sp,8
   44498:	e13ffe15 	stw	r4,-8(fp)
   4449c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   444a0:	00000506 	br	444b8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   444a4:	e0bfff17 	ldw	r2,-4(fp)
   444a8:	1090000c 	andi	r2,r2,16384
   444ac:	10000226 	beq	r2,zero,444b8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   444b0:	00bffd44 	movi	r2,-11
   444b4:	00000b06 	br	444e4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   444b8:	e0bffe17 	ldw	r2,-8(fp)
   444bc:	10c00d17 	ldw	r3,52(r2)
   444c0:	e0bffe17 	ldw	r2,-8(fp)
   444c4:	10800c17 	ldw	r2,48(r2)
   444c8:	18800526 	beq	r3,r2,444e0 <altera_avalon_jtag_uart_close+0x54>
   444cc:	e0bffe17 	ldw	r2,-8(fp)
   444d0:	10c00917 	ldw	r3,36(r2)
   444d4:	e0bffe17 	ldw	r2,-8(fp)
   444d8:	10800117 	ldw	r2,4(r2)
   444dc:	18bff136 	bltu	r3,r2,444a4 <__alt_data_end+0xfffce944>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   444e0:	0005883a 	mov	r2,zero
}
   444e4:	e037883a 	mov	sp,fp
   444e8:	df000017 	ldw	fp,0(sp)
   444ec:	dec00104 	addi	sp,sp,4
   444f0:	f800283a 	ret

000444f4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   444f4:	defffa04 	addi	sp,sp,-24
   444f8:	df000515 	stw	fp,20(sp)
   444fc:	df000504 	addi	fp,sp,20
   44500:	e13ffd15 	stw	r4,-12(fp)
   44504:	e17ffe15 	stw	r5,-8(fp)
   44508:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4450c:	00bff9c4 	movi	r2,-25
   44510:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   44514:	e0bffe17 	ldw	r2,-8(fp)
   44518:	10da8060 	cmpeqi	r3,r2,27137
   4451c:	1800031e 	bne	r3,zero,4452c <altera_avalon_jtag_uart_ioctl+0x38>
   44520:	109a80a0 	cmpeqi	r2,r2,27138
   44524:	1000191e 	bne	r2,zero,4458c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   44528:	00002806 	br	445cc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4452c:	e0bffd17 	ldw	r2,-12(fp)
   44530:	10c00117 	ldw	r3,4(r2)
   44534:	00a00034 	movhi	r2,32768
   44538:	10bfffc4 	addi	r2,r2,-1
   4453c:	18801226 	beq	r3,r2,44588 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   44540:	e0bfff17 	ldw	r2,-4(fp)
   44544:	10800017 	ldw	r2,0(r2)
   44548:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4454c:	e0bffc17 	ldw	r2,-16(fp)
   44550:	10800090 	cmplti	r2,r2,2
   44554:	1000061e 	bne	r2,zero,44570 <altera_avalon_jtag_uart_ioctl+0x7c>
   44558:	e0fffc17 	ldw	r3,-16(fp)
   4455c:	00a00034 	movhi	r2,32768
   44560:	10bfffc4 	addi	r2,r2,-1
   44564:	18800226 	beq	r3,r2,44570 <altera_avalon_jtag_uart_ioctl+0x7c>
   44568:	e0bffc17 	ldw	r2,-16(fp)
   4456c:	00000206 	br	44578 <altera_avalon_jtag_uart_ioctl+0x84>
   44570:	00a00034 	movhi	r2,32768
   44574:	10bfff84 	addi	r2,r2,-2
   44578:	e0fffd17 	ldw	r3,-12(fp)
   4457c:	18800115 	stw	r2,4(r3)
      rc = 0;
   44580:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   44584:	00001106 	br	445cc <altera_avalon_jtag_uart_ioctl+0xd8>
   44588:	00001006 	br	445cc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4458c:	e0bffd17 	ldw	r2,-12(fp)
   44590:	10c00117 	ldw	r3,4(r2)
   44594:	00a00034 	movhi	r2,32768
   44598:	10bfffc4 	addi	r2,r2,-1
   4459c:	18800a26 	beq	r3,r2,445c8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   445a0:	e0bffd17 	ldw	r2,-12(fp)
   445a4:	10c00917 	ldw	r3,36(r2)
   445a8:	e0bffd17 	ldw	r2,-12(fp)
   445ac:	10800117 	ldw	r2,4(r2)
   445b0:	1885803a 	cmpltu	r2,r3,r2
   445b4:	10c03fcc 	andi	r3,r2,255
   445b8:	e0bfff17 	ldw	r2,-4(fp)
   445bc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   445c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   445c4:	00000006 	br	445c8 <altera_avalon_jtag_uart_ioctl+0xd4>
   445c8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   445cc:	e0bffb17 	ldw	r2,-20(fp)
}
   445d0:	e037883a 	mov	sp,fp
   445d4:	df000017 	ldw	fp,0(sp)
   445d8:	dec00104 	addi	sp,sp,4
   445dc:	f800283a 	ret

000445e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   445e0:	defff304 	addi	sp,sp,-52
   445e4:	dfc00c15 	stw	ra,48(sp)
   445e8:	df000b15 	stw	fp,44(sp)
   445ec:	df000b04 	addi	fp,sp,44
   445f0:	e13ffc15 	stw	r4,-16(fp)
   445f4:	e17ffd15 	stw	r5,-12(fp)
   445f8:	e1bffe15 	stw	r6,-8(fp)
   445fc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   44600:	e0bffd17 	ldw	r2,-12(fp)
   44604:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44608:	00004906 	br	44730 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4460c:	e0bffc17 	ldw	r2,-16(fp)
   44610:	10800a17 	ldw	r2,40(r2)
   44614:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   44618:	e0bffc17 	ldw	r2,-16(fp)
   4461c:	10800b17 	ldw	r2,44(r2)
   44620:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   44624:	e0fff717 	ldw	r3,-36(fp)
   44628:	e0bff817 	ldw	r2,-32(fp)
   4462c:	18800536 	bltu	r3,r2,44644 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   44630:	e0fff717 	ldw	r3,-36(fp)
   44634:	e0bff817 	ldw	r2,-32(fp)
   44638:	1885c83a 	sub	r2,r3,r2
   4463c:	e0bff615 	stw	r2,-40(fp)
   44640:	00000406 	br	44654 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   44644:	00c20004 	movi	r3,2048
   44648:	e0bff817 	ldw	r2,-32(fp)
   4464c:	1885c83a 	sub	r2,r3,r2
   44650:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   44654:	e0bff617 	ldw	r2,-40(fp)
   44658:	1000011e 	bne	r2,zero,44660 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   4465c:	00001d06 	br	446d4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   44660:	e0fffe17 	ldw	r3,-8(fp)
   44664:	e0bff617 	ldw	r2,-40(fp)
   44668:	1880022e 	bgeu	r3,r2,44674 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4466c:	e0bffe17 	ldw	r2,-8(fp)
   44670:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   44674:	e0bff817 	ldw	r2,-32(fp)
   44678:	10800e04 	addi	r2,r2,56
   4467c:	e0fffc17 	ldw	r3,-16(fp)
   44680:	1885883a 	add	r2,r3,r2
   44684:	e13ff517 	ldw	r4,-44(fp)
   44688:	100b883a 	mov	r5,r2
   4468c:	e1bff617 	ldw	r6,-40(fp)
   44690:	00417180 	call	41718 <memcpy>
      ptr   += n;
   44694:	e0fff517 	ldw	r3,-44(fp)
   44698:	e0bff617 	ldw	r2,-40(fp)
   4469c:	1885883a 	add	r2,r3,r2
   446a0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   446a4:	e0fffe17 	ldw	r3,-8(fp)
   446a8:	e0bff617 	ldw	r2,-40(fp)
   446ac:	1885c83a 	sub	r2,r3,r2
   446b0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   446b4:	e0fff817 	ldw	r3,-32(fp)
   446b8:	e0bff617 	ldw	r2,-40(fp)
   446bc:	1885883a 	add	r2,r3,r2
   446c0:	10c1ffcc 	andi	r3,r2,2047
   446c4:	e0bffc17 	ldw	r2,-16(fp)
   446c8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   446cc:	e0bffe17 	ldw	r2,-8(fp)
   446d0:	00bfce16 	blt	zero,r2,4460c <__alt_data_end+0xfffceaac>

    /* If we read any data then return it */
    if (ptr != buffer)
   446d4:	e0fff517 	ldw	r3,-44(fp)
   446d8:	e0bffd17 	ldw	r2,-12(fp)
   446dc:	18800126 	beq	r3,r2,446e4 <altera_avalon_jtag_uart_read+0x104>
      break;
   446e0:	00001506 	br	44738 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   446e4:	e0bfff17 	ldw	r2,-4(fp)
   446e8:	1090000c 	andi	r2,r2,16384
   446ec:	10000126 	beq	r2,zero,446f4 <altera_avalon_jtag_uart_read+0x114>
      break;
   446f0:	00001106 	br	44738 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   446f4:	0001883a 	nop
   446f8:	e0bffc17 	ldw	r2,-16(fp)
   446fc:	10c00a17 	ldw	r3,40(r2)
   44700:	e0bff717 	ldw	r2,-36(fp)
   44704:	1880051e 	bne	r3,r2,4471c <altera_avalon_jtag_uart_read+0x13c>
   44708:	e0bffc17 	ldw	r2,-16(fp)
   4470c:	10c00917 	ldw	r3,36(r2)
   44710:	e0bffc17 	ldw	r2,-16(fp)
   44714:	10800117 	ldw	r2,4(r2)
   44718:	18bff736 	bltu	r3,r2,446f8 <__alt_data_end+0xfffceb98>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4471c:	e0bffc17 	ldw	r2,-16(fp)
   44720:	10c00a17 	ldw	r3,40(r2)
   44724:	e0bff717 	ldw	r2,-36(fp)
   44728:	1880011e 	bne	r3,r2,44730 <altera_avalon_jtag_uart_read+0x150>
      break;
   4472c:	00000206 	br	44738 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44730:	e0bffe17 	ldw	r2,-8(fp)
   44734:	00bfb516 	blt	zero,r2,4460c <__alt_data_end+0xfffceaac>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   44738:	e0fff517 	ldw	r3,-44(fp)
   4473c:	e0bffd17 	ldw	r2,-12(fp)
   44740:	18801826 	beq	r3,r2,447a4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44744:	0005303a 	rdctl	r2,status
   44748:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4474c:	e0fffa17 	ldw	r3,-24(fp)
   44750:	00bfff84 	movi	r2,-2
   44754:	1884703a 	and	r2,r3,r2
   44758:	1001703a 	wrctl	status,r2
  
  return context;
   4475c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   44760:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44764:	e0bffc17 	ldw	r2,-16(fp)
   44768:	10800817 	ldw	r2,32(r2)
   4476c:	10c00054 	ori	r3,r2,1
   44770:	e0bffc17 	ldw	r2,-16(fp)
   44774:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44778:	e0bffc17 	ldw	r2,-16(fp)
   4477c:	10800017 	ldw	r2,0(r2)
   44780:	10800104 	addi	r2,r2,4
   44784:	1007883a 	mov	r3,r2
   44788:	e0bffc17 	ldw	r2,-16(fp)
   4478c:	10800817 	ldw	r2,32(r2)
   44790:	18800035 	stwio	r2,0(r3)
   44794:	e0bff917 	ldw	r2,-28(fp)
   44798:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4479c:	e0bffb17 	ldw	r2,-20(fp)
   447a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   447a4:	e0fff517 	ldw	r3,-44(fp)
   447a8:	e0bffd17 	ldw	r2,-12(fp)
   447ac:	18800426 	beq	r3,r2,447c0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   447b0:	e0fff517 	ldw	r3,-44(fp)
   447b4:	e0bffd17 	ldw	r2,-12(fp)
   447b8:	1885c83a 	sub	r2,r3,r2
   447bc:	00000606 	br	447d8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   447c0:	e0bfff17 	ldw	r2,-4(fp)
   447c4:	1090000c 	andi	r2,r2,16384
   447c8:	10000226 	beq	r2,zero,447d4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   447cc:	00bffd44 	movi	r2,-11
   447d0:	00000106 	br	447d8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   447d4:	00bffec4 	movi	r2,-5
}
   447d8:	e037883a 	mov	sp,fp
   447dc:	dfc00117 	ldw	ra,4(sp)
   447e0:	df000017 	ldw	fp,0(sp)
   447e4:	dec00204 	addi	sp,sp,8
   447e8:	f800283a 	ret

000447ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   447ec:	defff304 	addi	sp,sp,-52
   447f0:	dfc00c15 	stw	ra,48(sp)
   447f4:	df000b15 	stw	fp,44(sp)
   447f8:	df000b04 	addi	fp,sp,44
   447fc:	e13ffc15 	stw	r4,-16(fp)
   44800:	e17ffd15 	stw	r5,-12(fp)
   44804:	e1bffe15 	stw	r6,-8(fp)
   44808:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4480c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   44810:	e0bffd17 	ldw	r2,-12(fp)
   44814:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44818:	00003806 	br	448fc <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4481c:	e0bffc17 	ldw	r2,-16(fp)
   44820:	10800c17 	ldw	r2,48(r2)
   44824:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   44828:	e0bffc17 	ldw	r2,-16(fp)
   4482c:	10800d17 	ldw	r2,52(r2)
   44830:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   44834:	e0fff817 	ldw	r3,-32(fp)
   44838:	e0bff517 	ldw	r2,-44(fp)
   4483c:	1880062e 	bgeu	r3,r2,44858 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   44840:	e0fff517 	ldw	r3,-44(fp)
   44844:	e0bff817 	ldw	r2,-32(fp)
   44848:	1885c83a 	sub	r2,r3,r2
   4484c:	10bfffc4 	addi	r2,r2,-1
   44850:	e0bff615 	stw	r2,-40(fp)
   44854:	00000b06 	br	44884 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   44858:	e0bff517 	ldw	r2,-44(fp)
   4485c:	10000526 	beq	r2,zero,44874 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   44860:	00c20004 	movi	r3,2048
   44864:	e0bff817 	ldw	r2,-32(fp)
   44868:	1885c83a 	sub	r2,r3,r2
   4486c:	e0bff615 	stw	r2,-40(fp)
   44870:	00000406 	br	44884 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   44874:	00c1ffc4 	movi	r3,2047
   44878:	e0bff817 	ldw	r2,-32(fp)
   4487c:	1885c83a 	sub	r2,r3,r2
   44880:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   44884:	e0bff617 	ldw	r2,-40(fp)
   44888:	1000011e 	bne	r2,zero,44890 <altera_avalon_jtag_uart_write+0xa4>
        break;
   4488c:	00001d06 	br	44904 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   44890:	e0fffe17 	ldw	r3,-8(fp)
   44894:	e0bff617 	ldw	r2,-40(fp)
   44898:	1880022e 	bgeu	r3,r2,448a4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   4489c:	e0bffe17 	ldw	r2,-8(fp)
   448a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   448a4:	e0bff817 	ldw	r2,-32(fp)
   448a8:	10820e04 	addi	r2,r2,2104
   448ac:	e0fffc17 	ldw	r3,-16(fp)
   448b0:	1885883a 	add	r2,r3,r2
   448b4:	1009883a 	mov	r4,r2
   448b8:	e17ffd17 	ldw	r5,-12(fp)
   448bc:	e1bff617 	ldw	r6,-40(fp)
   448c0:	00417180 	call	41718 <memcpy>
      ptr   += n;
   448c4:	e0fffd17 	ldw	r3,-12(fp)
   448c8:	e0bff617 	ldw	r2,-40(fp)
   448cc:	1885883a 	add	r2,r3,r2
   448d0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   448d4:	e0fffe17 	ldw	r3,-8(fp)
   448d8:	e0bff617 	ldw	r2,-40(fp)
   448dc:	1885c83a 	sub	r2,r3,r2
   448e0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   448e4:	e0fff817 	ldw	r3,-32(fp)
   448e8:	e0bff617 	ldw	r2,-40(fp)
   448ec:	1885883a 	add	r2,r3,r2
   448f0:	10c1ffcc 	andi	r3,r2,2047
   448f4:	e0bffc17 	ldw	r2,-16(fp)
   448f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   448fc:	e0bffe17 	ldw	r2,-8(fp)
   44900:	00bfc616 	blt	zero,r2,4481c <__alt_data_end+0xfffcecbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44904:	0005303a 	rdctl	r2,status
   44908:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4490c:	e0fffa17 	ldw	r3,-24(fp)
   44910:	00bfff84 	movi	r2,-2
   44914:	1884703a 	and	r2,r3,r2
   44918:	1001703a 	wrctl	status,r2
  
  return context;
   4491c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   44920:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44924:	e0bffc17 	ldw	r2,-16(fp)
   44928:	10800817 	ldw	r2,32(r2)
   4492c:	10c00094 	ori	r3,r2,2
   44930:	e0bffc17 	ldw	r2,-16(fp)
   44934:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44938:	e0bffc17 	ldw	r2,-16(fp)
   4493c:	10800017 	ldw	r2,0(r2)
   44940:	10800104 	addi	r2,r2,4
   44944:	1007883a 	mov	r3,r2
   44948:	e0bffc17 	ldw	r2,-16(fp)
   4494c:	10800817 	ldw	r2,32(r2)
   44950:	18800035 	stwio	r2,0(r3)
   44954:	e0bff917 	ldw	r2,-28(fp)
   44958:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4495c:	e0bffb17 	ldw	r2,-20(fp)
   44960:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   44964:	e0bffe17 	ldw	r2,-8(fp)
   44968:	0080120e 	bge	zero,r2,449b4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   4496c:	e0bfff17 	ldw	r2,-4(fp)
   44970:	1090000c 	andi	r2,r2,16384
   44974:	10000126 	beq	r2,zero,4497c <altera_avalon_jtag_uart_write+0x190>
        break;
   44978:	00001006 	br	449bc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4497c:	0001883a 	nop
   44980:	e0bffc17 	ldw	r2,-16(fp)
   44984:	10c00d17 	ldw	r3,52(r2)
   44988:	e0bff517 	ldw	r2,-44(fp)
   4498c:	1880051e 	bne	r3,r2,449a4 <altera_avalon_jtag_uart_write+0x1b8>
   44990:	e0bffc17 	ldw	r2,-16(fp)
   44994:	10c00917 	ldw	r3,36(r2)
   44998:	e0bffc17 	ldw	r2,-16(fp)
   4499c:	10800117 	ldw	r2,4(r2)
   449a0:	18bff736 	bltu	r3,r2,44980 <__alt_data_end+0xfffcee20>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   449a4:	e0bffc17 	ldw	r2,-16(fp)
   449a8:	10800917 	ldw	r2,36(r2)
   449ac:	10000126 	beq	r2,zero,449b4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   449b0:	00000206 	br	449bc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   449b4:	e0bffe17 	ldw	r2,-8(fp)
   449b8:	00bf9716 	blt	zero,r2,44818 <__alt_data_end+0xfffcecb8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   449bc:	e0fffd17 	ldw	r3,-12(fp)
   449c0:	e0bff717 	ldw	r2,-36(fp)
   449c4:	18800426 	beq	r3,r2,449d8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   449c8:	e0fffd17 	ldw	r3,-12(fp)
   449cc:	e0bff717 	ldw	r2,-36(fp)
   449d0:	1885c83a 	sub	r2,r3,r2
   449d4:	00000606 	br	449f0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   449d8:	e0bfff17 	ldw	r2,-4(fp)
   449dc:	1090000c 	andi	r2,r2,16384
   449e0:	10000226 	beq	r2,zero,449ec <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   449e4:	00bffd44 	movi	r2,-11
   449e8:	00000106 	br	449f0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   449ec:	00bffec4 	movi	r2,-5
}
   449f0:	e037883a 	mov	sp,fp
   449f4:	dfc00117 	ldw	ra,4(sp)
   449f8:	df000017 	ldw	fp,0(sp)
   449fc:	dec00204 	addi	sp,sp,8
   44a00:	f800283a 	ret

00044a04 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   44a04:	defffa04 	addi	sp,sp,-24
   44a08:	dfc00515 	stw	ra,20(sp)
   44a0c:	df000415 	stw	fp,16(sp)
   44a10:	df000404 	addi	fp,sp,16
   44a14:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   44a18:	0007883a 	mov	r3,zero
   44a1c:	e0bfff17 	ldw	r2,-4(fp)
   44a20:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   44a24:	e0bfff17 	ldw	r2,-4(fp)
   44a28:	10800104 	addi	r2,r2,4
   44a2c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44a30:	0005303a 	rdctl	r2,status
   44a34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44a38:	e0fffd17 	ldw	r3,-12(fp)
   44a3c:	00bfff84 	movi	r2,-2
   44a40:	1884703a 	and	r2,r3,r2
   44a44:	1001703a 	wrctl	status,r2
  
  return context;
   44a48:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   44a4c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   44a50:	0045fd00 	call	45fd0 <alt_tick>
   44a54:	e0bffc17 	ldw	r2,-16(fp)
   44a58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44a5c:	e0bffe17 	ldw	r2,-8(fp)
   44a60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   44a64:	e037883a 	mov	sp,fp
   44a68:	dfc00117 	ldw	ra,4(sp)
   44a6c:	df000017 	ldw	fp,0(sp)
   44a70:	dec00204 	addi	sp,sp,8
   44a74:	f800283a 	ret

00044a78 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   44a78:	defff804 	addi	sp,sp,-32
   44a7c:	dfc00715 	stw	ra,28(sp)
   44a80:	df000615 	stw	fp,24(sp)
   44a84:	df000604 	addi	fp,sp,24
   44a88:	e13ffc15 	stw	r4,-16(fp)
   44a8c:	e17ffd15 	stw	r5,-12(fp)
   44a90:	e1bffe15 	stw	r6,-8(fp)
   44a94:	e1ffff15 	stw	r7,-4(fp)
   44a98:	e0bfff17 	ldw	r2,-4(fp)
   44a9c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   44aa0:	00800174 	movhi	r2,5
   44aa4:	10a7a004 	addi	r2,r2,-24960
   44aa8:	10800017 	ldw	r2,0(r2)
   44aac:	1000041e 	bne	r2,zero,44ac0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   44ab0:	00800174 	movhi	r2,5
   44ab4:	10a7a004 	addi	r2,r2,-24960
   44ab8:	e0fffb17 	ldw	r3,-20(fp)
   44abc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   44ac0:	e0bffc17 	ldw	r2,-16(fp)
   44ac4:	10800104 	addi	r2,r2,4
   44ac8:	00c001c4 	movi	r3,7
   44acc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   44ad0:	d8000015 	stw	zero,0(sp)
   44ad4:	e13ffd17 	ldw	r4,-12(fp)
   44ad8:	e17ffe17 	ldw	r5,-8(fp)
   44adc:	01800134 	movhi	r6,4
   44ae0:	31928104 	addi	r6,r6,18948
   44ae4:	e1fffc17 	ldw	r7,-16(fp)
   44ae8:	004586c0 	call	4586c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   44aec:	e037883a 	mov	sp,fp
   44af0:	dfc00117 	ldw	ra,4(sp)
   44af4:	df000017 	ldw	fp,0(sp)
   44af8:	dec00204 	addi	sp,sp,8
   44afc:	f800283a 	ret

00044b00 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   44b00:	defffa04 	addi	sp,sp,-24
   44b04:	dfc00515 	stw	ra,20(sp)
   44b08:	df000415 	stw	fp,16(sp)
   44b0c:	df000404 	addi	fp,sp,16
   44b10:	e13ffd15 	stw	r4,-12(fp)
   44b14:	e17ffe15 	stw	r5,-8(fp)
   44b18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   44b1c:	e0bffd17 	ldw	r2,-12(fp)
   44b20:	10800017 	ldw	r2,0(r2)
   44b24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   44b28:	e0bffc17 	ldw	r2,-16(fp)
   44b2c:	10c00a04 	addi	r3,r2,40
   44b30:	e0bffd17 	ldw	r2,-12(fp)
   44b34:	10800217 	ldw	r2,8(r2)
   44b38:	1809883a 	mov	r4,r3
   44b3c:	e17ffe17 	ldw	r5,-8(fp)
   44b40:	e1bfff17 	ldw	r6,-4(fp)
   44b44:	100f883a 	mov	r7,r2
   44b48:	00450180 	call	45018 <altera_avalon_uart_read>
      fd->fd_flags);
}
   44b4c:	e037883a 	mov	sp,fp
   44b50:	dfc00117 	ldw	ra,4(sp)
   44b54:	df000017 	ldw	fp,0(sp)
   44b58:	dec00204 	addi	sp,sp,8
   44b5c:	f800283a 	ret

00044b60 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   44b60:	defffa04 	addi	sp,sp,-24
   44b64:	dfc00515 	stw	ra,20(sp)
   44b68:	df000415 	stw	fp,16(sp)
   44b6c:	df000404 	addi	fp,sp,16
   44b70:	e13ffd15 	stw	r4,-12(fp)
   44b74:	e17ffe15 	stw	r5,-8(fp)
   44b78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   44b7c:	e0bffd17 	ldw	r2,-12(fp)
   44b80:	10800017 	ldw	r2,0(r2)
   44b84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   44b88:	e0bffc17 	ldw	r2,-16(fp)
   44b8c:	10c00a04 	addi	r3,r2,40
   44b90:	e0bffd17 	ldw	r2,-12(fp)
   44b94:	10800217 	ldw	r2,8(r2)
   44b98:	1809883a 	mov	r4,r3
   44b9c:	e17ffe17 	ldw	r5,-8(fp)
   44ba0:	e1bfff17 	ldw	r6,-4(fp)
   44ba4:	100f883a 	mov	r7,r2
   44ba8:	00452440 	call	45244 <altera_avalon_uart_write>
      fd->fd_flags);
}
   44bac:	e037883a 	mov	sp,fp
   44bb0:	dfc00117 	ldw	ra,4(sp)
   44bb4:	df000017 	ldw	fp,0(sp)
   44bb8:	dec00204 	addi	sp,sp,8
   44bbc:	f800283a 	ret

00044bc0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   44bc0:	defffc04 	addi	sp,sp,-16
   44bc4:	dfc00315 	stw	ra,12(sp)
   44bc8:	df000215 	stw	fp,8(sp)
   44bcc:	df000204 	addi	fp,sp,8
   44bd0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   44bd4:	e0bfff17 	ldw	r2,-4(fp)
   44bd8:	10800017 	ldw	r2,0(r2)
   44bdc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   44be0:	e0bffe17 	ldw	r2,-8(fp)
   44be4:	10c00a04 	addi	r3,r2,40
   44be8:	e0bfff17 	ldw	r2,-4(fp)
   44bec:	10800217 	ldw	r2,8(r2)
   44bf0:	1809883a 	mov	r4,r3
   44bf4:	100b883a 	mov	r5,r2
   44bf8:	0044f740 	call	44f74 <altera_avalon_uart_close>
}
   44bfc:	e037883a 	mov	sp,fp
   44c00:	dfc00117 	ldw	ra,4(sp)
   44c04:	df000017 	ldw	fp,0(sp)
   44c08:	dec00204 	addi	sp,sp,8
   44c0c:	f800283a 	ret

00044c10 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   44c10:	defff804 	addi	sp,sp,-32
   44c14:	dfc00715 	stw	ra,28(sp)
   44c18:	df000615 	stw	fp,24(sp)
   44c1c:	df000604 	addi	fp,sp,24
   44c20:	e13ffd15 	stw	r4,-12(fp)
   44c24:	e17ffe15 	stw	r5,-8(fp)
   44c28:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   44c2c:	e0bffd17 	ldw	r2,-12(fp)
   44c30:	10800017 	ldw	r2,0(r2)
   44c34:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   44c38:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   44c3c:	1000041e 	bne	r2,zero,44c50 <altera_avalon_uart_init+0x40>
   44c40:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   44c44:	1000021e 	bne	r2,zero,44c50 <altera_avalon_uart_init+0x40>
   44c48:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   44c4c:	10000226 	beq	r2,zero,44c58 <altera_avalon_uart_init+0x48>
   44c50:	00800044 	movi	r2,1
   44c54:	00000106 	br	44c5c <altera_avalon_uart_init+0x4c>
   44c58:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   44c5c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   44c60:	e0bffc17 	ldw	r2,-16(fp)
   44c64:	10000f1e 	bne	r2,zero,44ca4 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   44c68:	e0bffd17 	ldw	r2,-12(fp)
   44c6c:	00c32004 	movi	r3,3200
   44c70:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   44c74:	e0bffb17 	ldw	r2,-20(fp)
   44c78:	10800304 	addi	r2,r2,12
   44c7c:	e0fffd17 	ldw	r3,-12(fp)
   44c80:	18c00117 	ldw	r3,4(r3)
   44c84:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   44c88:	d8000015 	stw	zero,0(sp)
   44c8c:	e13ffe17 	ldw	r4,-8(fp)
   44c90:	e17fff17 	ldw	r5,-4(fp)
   44c94:	01800134 	movhi	r6,4
   44c98:	31932e04 	addi	r6,r6,19640
   44c9c:	e1fffd17 	ldw	r7,-12(fp)
   44ca0:	004586c0 	call	4586c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   44ca4:	e037883a 	mov	sp,fp
   44ca8:	dfc00117 	ldw	ra,4(sp)
   44cac:	df000017 	ldw	fp,0(sp)
   44cb0:	dec00204 	addi	sp,sp,8
   44cb4:	f800283a 	ret

00044cb8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   44cb8:	defffa04 	addi	sp,sp,-24
   44cbc:	dfc00515 	stw	ra,20(sp)
   44cc0:	df000415 	stw	fp,16(sp)
   44cc4:	df000404 	addi	fp,sp,16
   44cc8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   44ccc:	e0bfff17 	ldw	r2,-4(fp)
   44cd0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   44cd4:	e0bffc17 	ldw	r2,-16(fp)
   44cd8:	10800017 	ldw	r2,0(r2)
   44cdc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   44ce0:	e0bffd17 	ldw	r2,-12(fp)
   44ce4:	10800204 	addi	r2,r2,8
   44ce8:	10800037 	ldwio	r2,0(r2)
   44cec:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   44cf0:	e0bffd17 	ldw	r2,-12(fp)
   44cf4:	10800204 	addi	r2,r2,8
   44cf8:	0007883a 	mov	r3,zero
   44cfc:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   44d00:	e0bffd17 	ldw	r2,-12(fp)
   44d04:	10800204 	addi	r2,r2,8
   44d08:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   44d0c:	e0bffe17 	ldw	r2,-8(fp)
   44d10:	1080200c 	andi	r2,r2,128
   44d14:	10000326 	beq	r2,zero,44d24 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   44d18:	e13ffc17 	ldw	r4,-16(fp)
   44d1c:	e17ffe17 	ldw	r5,-8(fp)
   44d20:	0044d500 	call	44d50 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   44d24:	e0bffe17 	ldw	r2,-8(fp)
   44d28:	1081100c 	andi	r2,r2,1088
   44d2c:	10000326 	beq	r2,zero,44d3c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   44d30:	e13ffc17 	ldw	r4,-16(fp)
   44d34:	e17ffe17 	ldw	r5,-8(fp)
   44d38:	0044e300 	call	44e30 <altera_avalon_uart_txirq>
  }
  

}
   44d3c:	e037883a 	mov	sp,fp
   44d40:	dfc00117 	ldw	ra,4(sp)
   44d44:	df000017 	ldw	fp,0(sp)
   44d48:	dec00204 	addi	sp,sp,8
   44d4c:	f800283a 	ret

00044d50 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   44d50:	defffc04 	addi	sp,sp,-16
   44d54:	df000315 	stw	fp,12(sp)
   44d58:	df000304 	addi	fp,sp,12
   44d5c:	e13ffe15 	stw	r4,-8(fp)
   44d60:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   44d64:	e0bfff17 	ldw	r2,-4(fp)
   44d68:	108000cc 	andi	r2,r2,3
   44d6c:	10000126 	beq	r2,zero,44d74 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   44d70:	00002b06 	br	44e20 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   44d74:	e0bffe17 	ldw	r2,-8(fp)
   44d78:	10800317 	ldw	r2,12(r2)
   44d7c:	e0bffe17 	ldw	r2,-8(fp)
   44d80:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   44d84:	e0bffe17 	ldw	r2,-8(fp)
   44d88:	10800317 	ldw	r2,12(r2)
   44d8c:	10800044 	addi	r2,r2,1
   44d90:	10800fcc 	andi	r2,r2,63
   44d94:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   44d98:	e0bffe17 	ldw	r2,-8(fp)
   44d9c:	10800317 	ldw	r2,12(r2)
   44da0:	e0fffe17 	ldw	r3,-8(fp)
   44da4:	18c00017 	ldw	r3,0(r3)
   44da8:	18c00037 	ldwio	r3,0(r3)
   44dac:	1809883a 	mov	r4,r3
   44db0:	e0fffe17 	ldw	r3,-8(fp)
   44db4:	1885883a 	add	r2,r3,r2
   44db8:	10800704 	addi	r2,r2,28
   44dbc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   44dc0:	e0bffe17 	ldw	r2,-8(fp)
   44dc4:	e0fffd17 	ldw	r3,-12(fp)
   44dc8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   44dcc:	e0bffe17 	ldw	r2,-8(fp)
   44dd0:	10800317 	ldw	r2,12(r2)
   44dd4:	10800044 	addi	r2,r2,1
   44dd8:	10800fcc 	andi	r2,r2,63
   44ddc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   44de0:	e0bffe17 	ldw	r2,-8(fp)
   44de4:	10c00217 	ldw	r3,8(r2)
   44de8:	e0bffd17 	ldw	r2,-12(fp)
   44dec:	18800c1e 	bne	r3,r2,44e20 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   44df0:	e0bffe17 	ldw	r2,-8(fp)
   44df4:	10c00117 	ldw	r3,4(r2)
   44df8:	00bfdfc4 	movi	r2,-129
   44dfc:	1886703a 	and	r3,r3,r2
   44e00:	e0bffe17 	ldw	r2,-8(fp)
   44e04:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   44e08:	e0bffe17 	ldw	r2,-8(fp)
   44e0c:	10800017 	ldw	r2,0(r2)
   44e10:	10800304 	addi	r2,r2,12
   44e14:	e0fffe17 	ldw	r3,-8(fp)
   44e18:	18c00117 	ldw	r3,4(r3)
   44e1c:	10c00035 	stwio	r3,0(r2)
  }   
}
   44e20:	e037883a 	mov	sp,fp
   44e24:	df000017 	ldw	fp,0(sp)
   44e28:	dec00104 	addi	sp,sp,4
   44e2c:	f800283a 	ret

00044e30 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   44e30:	defffb04 	addi	sp,sp,-20
   44e34:	df000415 	stw	fp,16(sp)
   44e38:	df000404 	addi	fp,sp,16
   44e3c:	e13ffc15 	stw	r4,-16(fp)
   44e40:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   44e44:	e0bffc17 	ldw	r2,-16(fp)
   44e48:	10c00417 	ldw	r3,16(r2)
   44e4c:	e0bffc17 	ldw	r2,-16(fp)
   44e50:	10800517 	ldw	r2,20(r2)
   44e54:	18803226 	beq	r3,r2,44f20 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   44e58:	e0bffc17 	ldw	r2,-16(fp)
   44e5c:	10800617 	ldw	r2,24(r2)
   44e60:	1080008c 	andi	r2,r2,2
   44e64:	10000326 	beq	r2,zero,44e74 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   44e68:	e0bffd17 	ldw	r2,-12(fp)
   44e6c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   44e70:	10001d26 	beq	r2,zero,44ee8 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   44e74:	e0bffc17 	ldw	r2,-16(fp)
   44e78:	10800417 	ldw	r2,16(r2)
   44e7c:	e0bffc17 	ldw	r2,-16(fp)
   44e80:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   44e84:	e0bffc17 	ldw	r2,-16(fp)
   44e88:	10800017 	ldw	r2,0(r2)
   44e8c:	10800104 	addi	r2,r2,4
   44e90:	e0fffc17 	ldw	r3,-16(fp)
   44e94:	18c00417 	ldw	r3,16(r3)
   44e98:	e13ffc17 	ldw	r4,-16(fp)
   44e9c:	20c7883a 	add	r3,r4,r3
   44ea0:	18c01704 	addi	r3,r3,92
   44ea4:	18c00003 	ldbu	r3,0(r3)
   44ea8:	18c03fcc 	andi	r3,r3,255
   44eac:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   44eb0:	e0bffc17 	ldw	r2,-16(fp)
   44eb4:	10800417 	ldw	r2,16(r2)
   44eb8:	10800044 	addi	r2,r2,1
   44ebc:	e0fffc17 	ldw	r3,-16(fp)
   44ec0:	18800415 	stw	r2,16(r3)
   44ec4:	10c00fcc 	andi	r3,r2,63
   44ec8:	e0bffc17 	ldw	r2,-16(fp)
   44ecc:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   44ed0:	e0bffc17 	ldw	r2,-16(fp)
   44ed4:	10800117 	ldw	r2,4(r2)
   44ed8:	10c01014 	ori	r3,r2,64
   44edc:	e0bffc17 	ldw	r2,-16(fp)
   44ee0:	10c00115 	stw	r3,4(r2)
   44ee4:	00000e06 	br	44f20 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   44ee8:	e0bffc17 	ldw	r2,-16(fp)
   44eec:	10800017 	ldw	r2,0(r2)
   44ef0:	10800204 	addi	r2,r2,8
   44ef4:	10800037 	ldwio	r2,0(r2)
   44ef8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   44efc:	e0bffd17 	ldw	r2,-12(fp)
   44f00:	1082000c 	andi	r2,r2,2048
   44f04:	1000061e 	bne	r2,zero,44f20 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   44f08:	e0bffc17 	ldw	r2,-16(fp)
   44f0c:	10c00117 	ldw	r3,4(r2)
   44f10:	00bfefc4 	movi	r2,-65
   44f14:	1886703a 	and	r3,r3,r2
   44f18:	e0bffc17 	ldw	r2,-16(fp)
   44f1c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   44f20:	e0bffc17 	ldw	r2,-16(fp)
   44f24:	10c00417 	ldw	r3,16(r2)
   44f28:	e0bffc17 	ldw	r2,-16(fp)
   44f2c:	10800517 	ldw	r2,20(r2)
   44f30:	1880061e 	bne	r3,r2,44f4c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   44f34:	e0bffc17 	ldw	r2,-16(fp)
   44f38:	10c00117 	ldw	r3,4(r2)
   44f3c:	00beefc4 	movi	r2,-1089
   44f40:	1886703a 	and	r3,r3,r2
   44f44:	e0bffc17 	ldw	r2,-16(fp)
   44f48:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   44f4c:	e0bffc17 	ldw	r2,-16(fp)
   44f50:	10800017 	ldw	r2,0(r2)
   44f54:	10800304 	addi	r2,r2,12
   44f58:	e0fffc17 	ldw	r3,-16(fp)
   44f5c:	18c00117 	ldw	r3,4(r3)
   44f60:	10c00035 	stwio	r3,0(r2)
}
   44f64:	e037883a 	mov	sp,fp
   44f68:	df000017 	ldw	fp,0(sp)
   44f6c:	dec00104 	addi	sp,sp,4
   44f70:	f800283a 	ret

00044f74 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   44f74:	defffd04 	addi	sp,sp,-12
   44f78:	df000215 	stw	fp,8(sp)
   44f7c:	df000204 	addi	fp,sp,8
   44f80:	e13ffe15 	stw	r4,-8(fp)
   44f84:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   44f88:	00000506 	br	44fa0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   44f8c:	e0bfff17 	ldw	r2,-4(fp)
   44f90:	1090000c 	andi	r2,r2,16384
   44f94:	10000226 	beq	r2,zero,44fa0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   44f98:	00bffd44 	movi	r2,-11
   44f9c:	00000606 	br	44fb8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   44fa0:	e0bffe17 	ldw	r2,-8(fp)
   44fa4:	10c00417 	ldw	r3,16(r2)
   44fa8:	e0bffe17 	ldw	r2,-8(fp)
   44fac:	10800517 	ldw	r2,20(r2)
   44fb0:	18bff61e 	bne	r3,r2,44f8c <__alt_data_end+0xfffcf42c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44fb4:	0005883a 	mov	r2,zero
}
   44fb8:	e037883a 	mov	sp,fp
   44fbc:	df000017 	ldw	fp,0(sp)
   44fc0:	dec00104 	addi	sp,sp,4
   44fc4:	f800283a 	ret

00044fc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44fc8:	defffe04 	addi	sp,sp,-8
   44fcc:	dfc00115 	stw	ra,4(sp)
   44fd0:	df000015 	stw	fp,0(sp)
   44fd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44fd8:	00800174 	movhi	r2,5
   44fdc:	10a0c704 	addi	r2,r2,-31972
   44fe0:	10800017 	ldw	r2,0(r2)
   44fe4:	10000526 	beq	r2,zero,44ffc <alt_get_errno+0x34>
   44fe8:	00800174 	movhi	r2,5
   44fec:	10a0c704 	addi	r2,r2,-31972
   44ff0:	10800017 	ldw	r2,0(r2)
   44ff4:	103ee83a 	callr	r2
   44ff8:	00000206 	br	45004 <alt_get_errno+0x3c>
   44ffc:	00800174 	movhi	r2,5
   45000:	10a79b04 	addi	r2,r2,-24980
}
   45004:	e037883a 	mov	sp,fp
   45008:	dfc00117 	ldw	ra,4(sp)
   4500c:	df000017 	ldw	fp,0(sp)
   45010:	dec00204 	addi	sp,sp,8
   45014:	f800283a 	ret

00045018 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   45018:	defff204 	addi	sp,sp,-56
   4501c:	dfc00d15 	stw	ra,52(sp)
   45020:	df000c15 	stw	fp,48(sp)
   45024:	df000c04 	addi	fp,sp,48
   45028:	e13ffc15 	stw	r4,-16(fp)
   4502c:	e17ffd15 	stw	r5,-12(fp)
   45030:	e1bffe15 	stw	r6,-8(fp)
   45034:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   45038:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   4503c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   45040:	e0bfff17 	ldw	r2,-4(fp)
   45044:	1090000c 	andi	r2,r2,16384
   45048:	1005003a 	cmpeq	r2,r2,zero
   4504c:	10803fcc 	andi	r2,r2,255
   45050:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   45054:	00001306 	br	450a4 <altera_avalon_uart_read+0x8c>
    {
      count++;
   45058:	e0bff517 	ldw	r2,-44(fp)
   4505c:	10800044 	addi	r2,r2,1
   45060:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   45064:	e0bffd17 	ldw	r2,-12(fp)
   45068:	10c00044 	addi	r3,r2,1
   4506c:	e0fffd15 	stw	r3,-12(fp)
   45070:	e0fffc17 	ldw	r3,-16(fp)
   45074:	18c00217 	ldw	r3,8(r3)
   45078:	e13ffc17 	ldw	r4,-16(fp)
   4507c:	20c7883a 	add	r3,r4,r3
   45080:	18c00704 	addi	r3,r3,28
   45084:	18c00003 	ldbu	r3,0(r3)
   45088:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   4508c:	e0bffc17 	ldw	r2,-16(fp)
   45090:	10800217 	ldw	r2,8(r2)
   45094:	10800044 	addi	r2,r2,1
   45098:	10c00fcc 	andi	r3,r2,63
   4509c:	e0bffc17 	ldw	r2,-16(fp)
   450a0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   450a4:	e0fff517 	ldw	r3,-44(fp)
   450a8:	e0bffe17 	ldw	r2,-8(fp)
   450ac:	1880050e 	bge	r3,r2,450c4 <altera_avalon_uart_read+0xac>
   450b0:	e0bffc17 	ldw	r2,-16(fp)
   450b4:	10c00217 	ldw	r3,8(r2)
   450b8:	e0bffc17 	ldw	r2,-16(fp)
   450bc:	10800317 	ldw	r2,12(r2)
   450c0:	18bfe51e 	bne	r3,r2,45058 <__alt_data_end+0xfffcf4f8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   450c4:	e0bff517 	ldw	r2,-44(fp)
   450c8:	1000251e 	bne	r2,zero,45160 <altera_avalon_uart_read+0x148>
   450cc:	e0bffc17 	ldw	r2,-16(fp)
   450d0:	10c00217 	ldw	r3,8(r2)
   450d4:	e0bffc17 	ldw	r2,-16(fp)
   450d8:	10800317 	ldw	r2,12(r2)
   450dc:	1880201e 	bne	r3,r2,45160 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   450e0:	e0bff617 	ldw	r2,-40(fp)
   450e4:	1000071e 	bne	r2,zero,45104 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   450e8:	0044fc80 	call	44fc8 <alt_get_errno>
   450ec:	1007883a 	mov	r3,r2
   450f0:	008002c4 	movi	r2,11
   450f4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   450f8:	00800044 	movi	r2,1
   450fc:	e0bff405 	stb	r2,-48(fp)
        break;
   45100:	00001b06 	br	45170 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45104:	0005303a 	rdctl	r2,status
   45108:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4510c:	e0fff817 	ldw	r3,-32(fp)
   45110:	00bfff84 	movi	r2,-2
   45114:	1884703a 	and	r2,r3,r2
   45118:	1001703a 	wrctl	status,r2
  
  return context;
   4511c:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   45120:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   45124:	e0bffc17 	ldw	r2,-16(fp)
   45128:	10800117 	ldw	r2,4(r2)
   4512c:	10c02014 	ori	r3,r2,128
   45130:	e0bffc17 	ldw	r2,-16(fp)
   45134:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   45138:	e0bffc17 	ldw	r2,-16(fp)
   4513c:	10800017 	ldw	r2,0(r2)
   45140:	10800304 	addi	r2,r2,12
   45144:	e0fffc17 	ldw	r3,-16(fp)
   45148:	18c00117 	ldw	r3,4(r3)
   4514c:	10c00035 	stwio	r3,0(r2)
   45150:	e0bff717 	ldw	r2,-36(fp)
   45154:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45158:	e0bff917 	ldw	r2,-28(fp)
   4515c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   45160:	e0bff517 	ldw	r2,-44(fp)
   45164:	1000021e 	bne	r2,zero,45170 <altera_avalon_uart_read+0x158>
   45168:	e0bffe17 	ldw	r2,-8(fp)
   4516c:	103fb91e 	bne	r2,zero,45054 <__alt_data_end+0xfffcf4f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45170:	0005303a 	rdctl	r2,status
   45174:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45178:	e0fffa17 	ldw	r3,-24(fp)
   4517c:	00bfff84 	movi	r2,-2
   45180:	1884703a 	and	r2,r3,r2
   45184:	1001703a 	wrctl	status,r2
  
  return context;
   45188:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   4518c:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   45190:	e0bffc17 	ldw	r2,-16(fp)
   45194:	10800117 	ldw	r2,4(r2)
   45198:	10c02014 	ori	r3,r2,128
   4519c:	e0bffc17 	ldw	r2,-16(fp)
   451a0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   451a4:	e0bffc17 	ldw	r2,-16(fp)
   451a8:	10800017 	ldw	r2,0(r2)
   451ac:	10800304 	addi	r2,r2,12
   451b0:	e0fffc17 	ldw	r3,-16(fp)
   451b4:	18c00117 	ldw	r3,4(r3)
   451b8:	10c00035 	stwio	r3,0(r2)
   451bc:	e0bff717 	ldw	r2,-36(fp)
   451c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   451c4:	e0bffb17 	ldw	r2,-20(fp)
   451c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   451cc:	e0bff403 	ldbu	r2,-48(fp)
   451d0:	10000226 	beq	r2,zero,451dc <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   451d4:	00bffd44 	movi	r2,-11
   451d8:	00000106 	br	451e0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   451dc:	e0bff517 	ldw	r2,-44(fp)
  }
}
   451e0:	e037883a 	mov	sp,fp
   451e4:	dfc00117 	ldw	ra,4(sp)
   451e8:	df000017 	ldw	fp,0(sp)
   451ec:	dec00204 	addi	sp,sp,8
   451f0:	f800283a 	ret

000451f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   451f4:	defffe04 	addi	sp,sp,-8
   451f8:	dfc00115 	stw	ra,4(sp)
   451fc:	df000015 	stw	fp,0(sp)
   45200:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45204:	00800174 	movhi	r2,5
   45208:	10a0c704 	addi	r2,r2,-31972
   4520c:	10800017 	ldw	r2,0(r2)
   45210:	10000526 	beq	r2,zero,45228 <alt_get_errno+0x34>
   45214:	00800174 	movhi	r2,5
   45218:	10a0c704 	addi	r2,r2,-31972
   4521c:	10800017 	ldw	r2,0(r2)
   45220:	103ee83a 	callr	r2
   45224:	00000206 	br	45230 <alt_get_errno+0x3c>
   45228:	00800174 	movhi	r2,5
   4522c:	10a79b04 	addi	r2,r2,-24980
}
   45230:	e037883a 	mov	sp,fp
   45234:	dfc00117 	ldw	ra,4(sp)
   45238:	df000017 	ldw	fp,0(sp)
   4523c:	dec00204 	addi	sp,sp,8
   45240:	f800283a 	ret

00045244 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   45244:	defff204 	addi	sp,sp,-56
   45248:	dfc00d15 	stw	ra,52(sp)
   4524c:	df000c15 	stw	fp,48(sp)
   45250:	df000c04 	addi	fp,sp,48
   45254:	e13ffc15 	stw	r4,-16(fp)
   45258:	e17ffd15 	stw	r5,-12(fp)
   4525c:	e1bffe15 	stw	r6,-8(fp)
   45260:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   45264:	e0bffe17 	ldw	r2,-8(fp)
   45268:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   4526c:	e0bfff17 	ldw	r2,-4(fp)
   45270:	1090000c 	andi	r2,r2,16384
   45274:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   45278:	00003c06 	br	4536c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4527c:	e0bffc17 	ldw	r2,-16(fp)
   45280:	10800517 	ldw	r2,20(r2)
   45284:	10800044 	addi	r2,r2,1
   45288:	10800fcc 	andi	r2,r2,63
   4528c:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   45290:	e0bffc17 	ldw	r2,-16(fp)
   45294:	10c00417 	ldw	r3,16(r2)
   45298:	e0bff617 	ldw	r2,-40(fp)
   4529c:	1880221e 	bne	r3,r2,45328 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   452a0:	e0bff517 	ldw	r2,-44(fp)
   452a4:	10000526 	beq	r2,zero,452bc <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   452a8:	00451f40 	call	451f4 <alt_get_errno>
   452ac:	1007883a 	mov	r3,r2
   452b0:	008002c4 	movi	r2,11
   452b4:	18800015 	stw	r2,0(r3)
        break;
   452b8:	00002e06 	br	45374 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   452bc:	0005303a 	rdctl	r2,status
   452c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   452c4:	e0fff817 	ldw	r3,-32(fp)
   452c8:	00bfff84 	movi	r2,-2
   452cc:	1884703a 	and	r2,r3,r2
   452d0:	1001703a 	wrctl	status,r2
  
  return context;
   452d4:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   452d8:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   452dc:	e0bffc17 	ldw	r2,-16(fp)
   452e0:	10800117 	ldw	r2,4(r2)
   452e4:	10c11014 	ori	r3,r2,1088
   452e8:	e0bffc17 	ldw	r2,-16(fp)
   452ec:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   452f0:	e0bffc17 	ldw	r2,-16(fp)
   452f4:	10800017 	ldw	r2,0(r2)
   452f8:	10800304 	addi	r2,r2,12
   452fc:	e0fffc17 	ldw	r3,-16(fp)
   45300:	18c00117 	ldw	r3,4(r3)
   45304:	10c00035 	stwio	r3,0(r2)
   45308:	e0bff717 	ldw	r2,-36(fp)
   4530c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45310:	e0bff917 	ldw	r2,-28(fp)
   45314:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   45318:	e0bffc17 	ldw	r2,-16(fp)
   4531c:	10c00417 	ldw	r3,16(r2)
   45320:	e0bff617 	ldw	r2,-40(fp)
   45324:	18bffc26 	beq	r3,r2,45318 <__alt_data_end+0xfffcf7b8>
      }
    }

    count--;
   45328:	e0bff417 	ldw	r2,-48(fp)
   4532c:	10bfffc4 	addi	r2,r2,-1
   45330:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   45334:	e0bffc17 	ldw	r2,-16(fp)
   45338:	10c00517 	ldw	r3,20(r2)
   4533c:	e0bffd17 	ldw	r2,-12(fp)
   45340:	11000044 	addi	r4,r2,1
   45344:	e13ffd15 	stw	r4,-12(fp)
   45348:	10800003 	ldbu	r2,0(r2)
   4534c:	1009883a 	mov	r4,r2
   45350:	e0bffc17 	ldw	r2,-16(fp)
   45354:	10c5883a 	add	r2,r2,r3
   45358:	10801704 	addi	r2,r2,92
   4535c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   45360:	e0bffc17 	ldw	r2,-16(fp)
   45364:	e0fff617 	ldw	r3,-40(fp)
   45368:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   4536c:	e0bff417 	ldw	r2,-48(fp)
   45370:	103fc21e 	bne	r2,zero,4527c <__alt_data_end+0xfffcf71c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45374:	0005303a 	rdctl	r2,status
   45378:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4537c:	e0fffa17 	ldw	r3,-24(fp)
   45380:	00bfff84 	movi	r2,-2
   45384:	1884703a 	and	r2,r3,r2
   45388:	1001703a 	wrctl	status,r2
  
  return context;
   4538c:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   45390:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   45394:	e0bffc17 	ldw	r2,-16(fp)
   45398:	10800117 	ldw	r2,4(r2)
   4539c:	10c11014 	ori	r3,r2,1088
   453a0:	e0bffc17 	ldw	r2,-16(fp)
   453a4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   453a8:	e0bffc17 	ldw	r2,-16(fp)
   453ac:	10800017 	ldw	r2,0(r2)
   453b0:	10800304 	addi	r2,r2,12
   453b4:	e0fffc17 	ldw	r3,-16(fp)
   453b8:	18c00117 	ldw	r3,4(r3)
   453bc:	10c00035 	stwio	r3,0(r2)
   453c0:	e0bff717 	ldw	r2,-36(fp)
   453c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   453c8:	e0bffb17 	ldw	r2,-20(fp)
   453cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   453d0:	e0fffe17 	ldw	r3,-8(fp)
   453d4:	e0bff417 	ldw	r2,-48(fp)
   453d8:	1885c83a 	sub	r2,r3,r2
}
   453dc:	e037883a 	mov	sp,fp
   453e0:	dfc00117 	ldw	ra,4(sp)
   453e4:	df000017 	ldw	fp,0(sp)
   453e8:	dec00204 	addi	sp,sp,8
   453ec:	f800283a 	ret

000453f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   453f0:	defff504 	addi	sp,sp,-44
   453f4:	df000a15 	stw	fp,40(sp)
   453f8:	df000a04 	addi	fp,sp,40
   453fc:	e13ffc15 	stw	r4,-16(fp)
   45400:	e17ffd15 	stw	r5,-12(fp)
   45404:	e1bffe15 	stw	r6,-8(fp)
   45408:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4540c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   45410:	00800174 	movhi	r2,5
   45414:	10a7a004 	addi	r2,r2,-24960
   45418:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4541c:	10003f26 	beq	r2,zero,4551c <alt_alarm_start+0x12c>
  {
    if (alarm)
   45420:	e0bffc17 	ldw	r2,-16(fp)
   45424:	10003b26 	beq	r2,zero,45514 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   45428:	e0bffc17 	ldw	r2,-16(fp)
   4542c:	e0fffe17 	ldw	r3,-8(fp)
   45430:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   45434:	e0bffc17 	ldw	r2,-16(fp)
   45438:	e0ffff17 	ldw	r3,-4(fp)
   4543c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45440:	0005303a 	rdctl	r2,status
   45444:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45448:	e0fff817 	ldw	r3,-32(fp)
   4544c:	00bfff84 	movi	r2,-2
   45450:	1884703a 	and	r2,r3,r2
   45454:	1001703a 	wrctl	status,r2
  
  return context;
   45458:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4545c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   45460:	00800174 	movhi	r2,5
   45464:	10a7a104 	addi	r2,r2,-24956
   45468:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4546c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   45470:	e0fffd17 	ldw	r3,-12(fp)
   45474:	e0bff617 	ldw	r2,-40(fp)
   45478:	1885883a 	add	r2,r3,r2
   4547c:	10c00044 	addi	r3,r2,1
   45480:	e0bffc17 	ldw	r2,-16(fp)
   45484:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   45488:	e0bffc17 	ldw	r2,-16(fp)
   4548c:	10c00217 	ldw	r3,8(r2)
   45490:	e0bff617 	ldw	r2,-40(fp)
   45494:	1880042e 	bgeu	r3,r2,454a8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   45498:	e0bffc17 	ldw	r2,-16(fp)
   4549c:	00c00044 	movi	r3,1
   454a0:	10c00405 	stb	r3,16(r2)
   454a4:	00000206 	br	454b0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   454a8:	e0bffc17 	ldw	r2,-16(fp)
   454ac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   454b0:	e0fffc17 	ldw	r3,-16(fp)
   454b4:	00800174 	movhi	r2,5
   454b8:	10a0ca04 	addi	r2,r2,-31960
   454bc:	e0bff915 	stw	r2,-28(fp)
   454c0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   454c4:	e0bffa17 	ldw	r2,-24(fp)
   454c8:	e0fff917 	ldw	r3,-28(fp)
   454cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   454d0:	e0bff917 	ldw	r2,-28(fp)
   454d4:	10c00017 	ldw	r3,0(r2)
   454d8:	e0bffa17 	ldw	r2,-24(fp)
   454dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   454e0:	e0bff917 	ldw	r2,-28(fp)
   454e4:	10800017 	ldw	r2,0(r2)
   454e8:	e0fffa17 	ldw	r3,-24(fp)
   454ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   454f0:	e0bff917 	ldw	r2,-28(fp)
   454f4:	e0fffa17 	ldw	r3,-24(fp)
   454f8:	10c00015 	stw	r3,0(r2)
   454fc:	e0bff717 	ldw	r2,-36(fp)
   45500:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45504:	e0bffb17 	ldw	r2,-20(fp)
   45508:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4550c:	0005883a 	mov	r2,zero
   45510:	00000306 	br	45520 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   45514:	00bffa84 	movi	r2,-22
   45518:	00000106 	br	45520 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4551c:	00bfde84 	movi	r2,-134
  }
}
   45520:	e037883a 	mov	sp,fp
   45524:	df000017 	ldw	fp,0(sp)
   45528:	dec00104 	addi	sp,sp,4
   4552c:	f800283a 	ret

00045530 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   45530:	defffa04 	addi	sp,sp,-24
   45534:	dfc00515 	stw	ra,20(sp)
   45538:	df000415 	stw	fp,16(sp)
   4553c:	df000404 	addi	fp,sp,16
   45540:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   45544:	00800244 	movi	r2,9
   45548:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   4554c:	e13ffd17 	ldw	r4,-12(fp)
   45550:	014003f4 	movhi	r5,15
   45554:	29509004 	addi	r5,r5,16960
   45558:	00407dc0 	call	407dc <__mulsi3>
   4555c:	01023c74 	movhi	r4,2289
   45560:	21346004 	addi	r4,r4,-11904
   45564:	100b883a 	mov	r5,r2
   45568:	00407cc0 	call	407cc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   4556c:	01200034 	movhi	r4,32768
   45570:	213fffc4 	addi	r4,r4,-1
   45574:	100b883a 	mov	r5,r2
   45578:	00407cc0 	call	407cc <__udivsi3>
   4557c:	e13fff17 	ldw	r4,-4(fp)
   45580:	100b883a 	mov	r5,r2
   45584:	00407cc0 	call	407cc <__udivsi3>
   45588:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   4558c:	e0bffe17 	ldw	r2,-8(fp)
   45590:	10002a26 	beq	r2,zero,4563c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   45594:	e03ffc15 	stw	zero,-16(fp)
   45598:	00001706 	br	455f8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   4559c:	00a00034 	movhi	r2,32768
   455a0:	10bfffc4 	addi	r2,r2,-1
   455a4:	10bfffc4 	addi	r2,r2,-1
   455a8:	103ffe1e 	bne	r2,zero,455a4 <__alt_data_end+0xfffcfa44>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   455ac:	e13ffd17 	ldw	r4,-12(fp)
   455b0:	014003f4 	movhi	r5,15
   455b4:	29509004 	addi	r5,r5,16960
   455b8:	00407dc0 	call	407dc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   455bc:	01023c74 	movhi	r4,2289
   455c0:	21346004 	addi	r4,r4,-11904
   455c4:	100b883a 	mov	r5,r2
   455c8:	00407cc0 	call	407cc <__udivsi3>
   455cc:	01200034 	movhi	r4,32768
   455d0:	213fffc4 	addi	r4,r4,-1
   455d4:	100b883a 	mov	r5,r2
   455d8:	00407cc0 	call	407cc <__udivsi3>
   455dc:	1007883a 	mov	r3,r2
   455e0:	e0bfff17 	ldw	r2,-4(fp)
   455e4:	10c5c83a 	sub	r2,r2,r3
   455e8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   455ec:	e0bffc17 	ldw	r2,-16(fp)
   455f0:	10800044 	addi	r2,r2,1
   455f4:	e0bffc15 	stw	r2,-16(fp)
   455f8:	e0fffc17 	ldw	r3,-16(fp)
   455fc:	e0bffe17 	ldw	r2,-8(fp)
   45600:	18bfe616 	blt	r3,r2,4559c <__alt_data_end+0xfffcfa3c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   45604:	e13ffd17 	ldw	r4,-12(fp)
   45608:	014003f4 	movhi	r5,15
   4560c:	29509004 	addi	r5,r5,16960
   45610:	00407dc0 	call	407dc <__mulsi3>
   45614:	01023c74 	movhi	r4,2289
   45618:	21346004 	addi	r4,r4,-11904
   4561c:	100b883a 	mov	r5,r2
   45620:	00407cc0 	call	407cc <__udivsi3>
   45624:	1009883a 	mov	r4,r2
   45628:	e17fff17 	ldw	r5,-4(fp)
   4562c:	00407dc0 	call	407dc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   45630:	10bfffc4 	addi	r2,r2,-1
   45634:	103ffe1e 	bne	r2,zero,45630 <__alt_data_end+0xfffcfad0>
   45638:	00000d06 	br	45670 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4563c:	e13ffd17 	ldw	r4,-12(fp)
   45640:	014003f4 	movhi	r5,15
   45644:	29509004 	addi	r5,r5,16960
   45648:	00407dc0 	call	407dc <__mulsi3>
   4564c:	01023c74 	movhi	r4,2289
   45650:	21346004 	addi	r4,r4,-11904
   45654:	100b883a 	mov	r5,r2
   45658:	00407cc0 	call	407cc <__udivsi3>
   4565c:	1009883a 	mov	r4,r2
   45660:	e17fff17 	ldw	r5,-4(fp)
   45664:	00407dc0 	call	407dc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   45668:	10bfffc4 	addi	r2,r2,-1
   4566c:	00bffe16 	blt	zero,r2,45668 <__alt_data_end+0xfffcfb08>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   45670:	0005883a 	mov	r2,zero
}
   45674:	e037883a 	mov	sp,fp
   45678:	dfc00117 	ldw	ra,4(sp)
   4567c:	df000017 	ldw	fp,0(sp)
   45680:	dec00204 	addi	sp,sp,8
   45684:	f800283a 	ret

00045688 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   45688:	deffff04 	addi	sp,sp,-4
   4568c:	df000015 	stw	fp,0(sp)
   45690:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   45694:	e037883a 	mov	sp,fp
   45698:	df000017 	ldw	fp,0(sp)
   4569c:	dec00104 	addi	sp,sp,4
   456a0:	f800283a 	ret

000456a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   456a4:	defffe04 	addi	sp,sp,-8
   456a8:	dfc00115 	stw	ra,4(sp)
   456ac:	df000015 	stw	fp,0(sp)
   456b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   456b4:	00800174 	movhi	r2,5
   456b8:	10a0c704 	addi	r2,r2,-31972
   456bc:	10800017 	ldw	r2,0(r2)
   456c0:	10000526 	beq	r2,zero,456d8 <alt_get_errno+0x34>
   456c4:	00800174 	movhi	r2,5
   456c8:	10a0c704 	addi	r2,r2,-31972
   456cc:	10800017 	ldw	r2,0(r2)
   456d0:	103ee83a 	callr	r2
   456d4:	00000206 	br	456e0 <alt_get_errno+0x3c>
   456d8:	00800174 	movhi	r2,5
   456dc:	10a79b04 	addi	r2,r2,-24980
}
   456e0:	e037883a 	mov	sp,fp
   456e4:	dfc00117 	ldw	ra,4(sp)
   456e8:	df000017 	ldw	fp,0(sp)
   456ec:	dec00204 	addi	sp,sp,8
   456f0:	f800283a 	ret

000456f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   456f4:	defffa04 	addi	sp,sp,-24
   456f8:	dfc00515 	stw	ra,20(sp)
   456fc:	df000415 	stw	fp,16(sp)
   45700:	df000404 	addi	fp,sp,16
   45704:	e13ffe15 	stw	r4,-8(fp)
   45708:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4570c:	e0bffe17 	ldw	r2,-8(fp)
   45710:	10000326 	beq	r2,zero,45720 <alt_dev_llist_insert+0x2c>
   45714:	e0bffe17 	ldw	r2,-8(fp)
   45718:	10800217 	ldw	r2,8(r2)
   4571c:	1000061e 	bne	r2,zero,45738 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   45720:	00456a40 	call	456a4 <alt_get_errno>
   45724:	1007883a 	mov	r3,r2
   45728:	00800584 	movi	r2,22
   4572c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   45730:	00bffa84 	movi	r2,-22
   45734:	00001306 	br	45784 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   45738:	e0bffe17 	ldw	r2,-8(fp)
   4573c:	e0ffff17 	ldw	r3,-4(fp)
   45740:	e0fffc15 	stw	r3,-16(fp)
   45744:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   45748:	e0bffd17 	ldw	r2,-12(fp)
   4574c:	e0fffc17 	ldw	r3,-16(fp)
   45750:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45754:	e0bffc17 	ldw	r2,-16(fp)
   45758:	10c00017 	ldw	r3,0(r2)
   4575c:	e0bffd17 	ldw	r2,-12(fp)
   45760:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45764:	e0bffc17 	ldw	r2,-16(fp)
   45768:	10800017 	ldw	r2,0(r2)
   4576c:	e0fffd17 	ldw	r3,-12(fp)
   45770:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45774:	e0bffc17 	ldw	r2,-16(fp)
   45778:	e0fffd17 	ldw	r3,-12(fp)
   4577c:	10c00015 	stw	r3,0(r2)

  return 0;  
   45780:	0005883a 	mov	r2,zero
}
   45784:	e037883a 	mov	sp,fp
   45788:	dfc00117 	ldw	ra,4(sp)
   4578c:	df000017 	ldw	fp,0(sp)
   45790:	dec00204 	addi	sp,sp,8
   45794:	f800283a 	ret

00045798 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   45798:	defffd04 	addi	sp,sp,-12
   4579c:	dfc00215 	stw	ra,8(sp)
   457a0:	df000115 	stw	fp,4(sp)
   457a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   457a8:	00800134 	movhi	r2,4
   457ac:	1099ea04 	addi	r2,r2,26536
   457b0:	e0bfff15 	stw	r2,-4(fp)
   457b4:	00000606 	br	457d0 <_do_ctors+0x38>
        (*ctor) (); 
   457b8:	e0bfff17 	ldw	r2,-4(fp)
   457bc:	10800017 	ldw	r2,0(r2)
   457c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   457c4:	e0bfff17 	ldw	r2,-4(fp)
   457c8:	10bfff04 	addi	r2,r2,-4
   457cc:	e0bfff15 	stw	r2,-4(fp)
   457d0:	e0ffff17 	ldw	r3,-4(fp)
   457d4:	00800134 	movhi	r2,4
   457d8:	1099eb04 	addi	r2,r2,26540
   457dc:	18bff62e 	bgeu	r3,r2,457b8 <__alt_data_end+0xfffcfc58>
        (*ctor) (); 
}
   457e0:	e037883a 	mov	sp,fp
   457e4:	dfc00117 	ldw	ra,4(sp)
   457e8:	df000017 	ldw	fp,0(sp)
   457ec:	dec00204 	addi	sp,sp,8
   457f0:	f800283a 	ret

000457f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   457f4:	defffd04 	addi	sp,sp,-12
   457f8:	dfc00215 	stw	ra,8(sp)
   457fc:	df000115 	stw	fp,4(sp)
   45800:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45804:	00800134 	movhi	r2,4
   45808:	1099ea04 	addi	r2,r2,26536
   4580c:	e0bfff15 	stw	r2,-4(fp)
   45810:	00000606 	br	4582c <_do_dtors+0x38>
        (*dtor) (); 
   45814:	e0bfff17 	ldw	r2,-4(fp)
   45818:	10800017 	ldw	r2,0(r2)
   4581c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45820:	e0bfff17 	ldw	r2,-4(fp)
   45824:	10bfff04 	addi	r2,r2,-4
   45828:	e0bfff15 	stw	r2,-4(fp)
   4582c:	e0ffff17 	ldw	r3,-4(fp)
   45830:	00800134 	movhi	r2,4
   45834:	1099eb04 	addi	r2,r2,26540
   45838:	18bff62e 	bgeu	r3,r2,45814 <__alt_data_end+0xfffcfcb4>
        (*dtor) (); 
}
   4583c:	e037883a 	mov	sp,fp
   45840:	dfc00117 	ldw	ra,4(sp)
   45844:	df000017 	ldw	fp,0(sp)
   45848:	dec00204 	addi	sp,sp,8
   4584c:	f800283a 	ret

00045850 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   45850:	deffff04 	addi	sp,sp,-4
   45854:	df000015 	stw	fp,0(sp)
   45858:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   4585c:	e037883a 	mov	sp,fp
   45860:	df000017 	ldw	fp,0(sp)
   45864:	dec00104 	addi	sp,sp,4
   45868:	f800283a 	ret

0004586c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4586c:	defff904 	addi	sp,sp,-28
   45870:	dfc00615 	stw	ra,24(sp)
   45874:	df000515 	stw	fp,20(sp)
   45878:	df000504 	addi	fp,sp,20
   4587c:	e13ffc15 	stw	r4,-16(fp)
   45880:	e17ffd15 	stw	r5,-12(fp)
   45884:	e1bffe15 	stw	r6,-8(fp)
   45888:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4588c:	e0800217 	ldw	r2,8(fp)
   45890:	d8800015 	stw	r2,0(sp)
   45894:	e13ffc17 	ldw	r4,-16(fp)
   45898:	e17ffd17 	ldw	r5,-12(fp)
   4589c:	e1bffe17 	ldw	r6,-8(fp)
   458a0:	e1ffff17 	ldw	r7,-4(fp)
   458a4:	0045a4c0 	call	45a4c <alt_iic_isr_register>
}  
   458a8:	e037883a 	mov	sp,fp
   458ac:	dfc00117 	ldw	ra,4(sp)
   458b0:	df000017 	ldw	fp,0(sp)
   458b4:	dec00204 	addi	sp,sp,8
   458b8:	f800283a 	ret

000458bc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   458bc:	defff904 	addi	sp,sp,-28
   458c0:	df000615 	stw	fp,24(sp)
   458c4:	df000604 	addi	fp,sp,24
   458c8:	e13ffe15 	stw	r4,-8(fp)
   458cc:	e17fff15 	stw	r5,-4(fp)
   458d0:	e0bfff17 	ldw	r2,-4(fp)
   458d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   458d8:	0005303a 	rdctl	r2,status
   458dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   458e0:	e0fffb17 	ldw	r3,-20(fp)
   458e4:	00bfff84 	movi	r2,-2
   458e8:	1884703a 	and	r2,r3,r2
   458ec:	1001703a 	wrctl	status,r2
  
  return context;
   458f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   458f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   458f8:	e0bffa17 	ldw	r2,-24(fp)
   458fc:	00c00044 	movi	r3,1
   45900:	1884983a 	sll	r2,r3,r2
   45904:	1007883a 	mov	r3,r2
   45908:	00800174 	movhi	r2,5
   4590c:	10a79f04 	addi	r2,r2,-24964
   45910:	10800017 	ldw	r2,0(r2)
   45914:	1886b03a 	or	r3,r3,r2
   45918:	00800174 	movhi	r2,5
   4591c:	10a79f04 	addi	r2,r2,-24964
   45920:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45924:	00800174 	movhi	r2,5
   45928:	10a79f04 	addi	r2,r2,-24964
   4592c:	10800017 	ldw	r2,0(r2)
   45930:	100170fa 	wrctl	ienable,r2
   45934:	e0bffc17 	ldw	r2,-16(fp)
   45938:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4593c:	e0bffd17 	ldw	r2,-12(fp)
   45940:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45944:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   45948:	0001883a 	nop
}
   4594c:	e037883a 	mov	sp,fp
   45950:	df000017 	ldw	fp,0(sp)
   45954:	dec00104 	addi	sp,sp,4
   45958:	f800283a 	ret

0004595c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4595c:	defff904 	addi	sp,sp,-28
   45960:	df000615 	stw	fp,24(sp)
   45964:	df000604 	addi	fp,sp,24
   45968:	e13ffe15 	stw	r4,-8(fp)
   4596c:	e17fff15 	stw	r5,-4(fp)
   45970:	e0bfff17 	ldw	r2,-4(fp)
   45974:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45978:	0005303a 	rdctl	r2,status
   4597c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45980:	e0fffb17 	ldw	r3,-20(fp)
   45984:	00bfff84 	movi	r2,-2
   45988:	1884703a 	and	r2,r3,r2
   4598c:	1001703a 	wrctl	status,r2
  
  return context;
   45990:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45994:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   45998:	e0bffa17 	ldw	r2,-24(fp)
   4599c:	00c00044 	movi	r3,1
   459a0:	1884983a 	sll	r2,r3,r2
   459a4:	0084303a 	nor	r2,zero,r2
   459a8:	1007883a 	mov	r3,r2
   459ac:	00800174 	movhi	r2,5
   459b0:	10a79f04 	addi	r2,r2,-24964
   459b4:	10800017 	ldw	r2,0(r2)
   459b8:	1886703a 	and	r3,r3,r2
   459bc:	00800174 	movhi	r2,5
   459c0:	10a79f04 	addi	r2,r2,-24964
   459c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   459c8:	00800174 	movhi	r2,5
   459cc:	10a79f04 	addi	r2,r2,-24964
   459d0:	10800017 	ldw	r2,0(r2)
   459d4:	100170fa 	wrctl	ienable,r2
   459d8:	e0bffc17 	ldw	r2,-16(fp)
   459dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   459e0:	e0bffd17 	ldw	r2,-12(fp)
   459e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   459e8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   459ec:	0001883a 	nop
}
   459f0:	e037883a 	mov	sp,fp
   459f4:	df000017 	ldw	fp,0(sp)
   459f8:	dec00104 	addi	sp,sp,4
   459fc:	f800283a 	ret

00045a00 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   45a00:	defffc04 	addi	sp,sp,-16
   45a04:	df000315 	stw	fp,12(sp)
   45a08:	df000304 	addi	fp,sp,12
   45a0c:	e13ffe15 	stw	r4,-8(fp)
   45a10:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   45a14:	000530fa 	rdctl	r2,ienable
   45a18:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   45a1c:	e0bfff17 	ldw	r2,-4(fp)
   45a20:	00c00044 	movi	r3,1
   45a24:	1884983a 	sll	r2,r3,r2
   45a28:	1007883a 	mov	r3,r2
   45a2c:	e0bffd17 	ldw	r2,-12(fp)
   45a30:	1884703a 	and	r2,r3,r2
   45a34:	1004c03a 	cmpne	r2,r2,zero
   45a38:	10803fcc 	andi	r2,r2,255
}
   45a3c:	e037883a 	mov	sp,fp
   45a40:	df000017 	ldw	fp,0(sp)
   45a44:	dec00104 	addi	sp,sp,4
   45a48:	f800283a 	ret

00045a4c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   45a4c:	defff504 	addi	sp,sp,-44
   45a50:	dfc00a15 	stw	ra,40(sp)
   45a54:	df000915 	stw	fp,36(sp)
   45a58:	df000904 	addi	fp,sp,36
   45a5c:	e13ffc15 	stw	r4,-16(fp)
   45a60:	e17ffd15 	stw	r5,-12(fp)
   45a64:	e1bffe15 	stw	r6,-8(fp)
   45a68:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   45a6c:	00bffa84 	movi	r2,-22
   45a70:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   45a74:	e0bffd17 	ldw	r2,-12(fp)
   45a78:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   45a7c:	e0bff817 	ldw	r2,-32(fp)
   45a80:	10800808 	cmpgei	r2,r2,32
   45a84:	1000271e 	bne	r2,zero,45b24 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45a88:	0005303a 	rdctl	r2,status
   45a8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45a90:	e0fffa17 	ldw	r3,-24(fp)
   45a94:	00bfff84 	movi	r2,-2
   45a98:	1884703a 	and	r2,r3,r2
   45a9c:	1001703a 	wrctl	status,r2
  
  return context;
   45aa0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   45aa4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   45aa8:	00800174 	movhi	r2,5
   45aac:	10a7ad04 	addi	r2,r2,-24908
   45ab0:	e0fff817 	ldw	r3,-32(fp)
   45ab4:	180690fa 	slli	r3,r3,3
   45ab8:	10c5883a 	add	r2,r2,r3
   45abc:	e0fffe17 	ldw	r3,-8(fp)
   45ac0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   45ac4:	00800174 	movhi	r2,5
   45ac8:	10a7ad04 	addi	r2,r2,-24908
   45acc:	e0fff817 	ldw	r3,-32(fp)
   45ad0:	180690fa 	slli	r3,r3,3
   45ad4:	10c5883a 	add	r2,r2,r3
   45ad8:	10800104 	addi	r2,r2,4
   45adc:	e0ffff17 	ldw	r3,-4(fp)
   45ae0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   45ae4:	e0bffe17 	ldw	r2,-8(fp)
   45ae8:	10000526 	beq	r2,zero,45b00 <alt_iic_isr_register+0xb4>
   45aec:	e0bff817 	ldw	r2,-32(fp)
   45af0:	e13ffc17 	ldw	r4,-16(fp)
   45af4:	100b883a 	mov	r5,r2
   45af8:	00458bc0 	call	458bc <alt_ic_irq_enable>
   45afc:	00000406 	br	45b10 <alt_iic_isr_register+0xc4>
   45b00:	e0bff817 	ldw	r2,-32(fp)
   45b04:	e13ffc17 	ldw	r4,-16(fp)
   45b08:	100b883a 	mov	r5,r2
   45b0c:	004595c0 	call	4595c <alt_ic_irq_disable>
   45b10:	e0bff715 	stw	r2,-36(fp)
   45b14:	e0bff917 	ldw	r2,-28(fp)
   45b18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45b1c:	e0bffb17 	ldw	r2,-20(fp)
   45b20:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   45b24:	e0bff717 	ldw	r2,-36(fp)
}
   45b28:	e037883a 	mov	sp,fp
   45b2c:	dfc00117 	ldw	ra,4(sp)
   45b30:	df000017 	ldw	fp,0(sp)
   45b34:	dec00204 	addi	sp,sp,8
   45b38:	f800283a 	ret

00045b3c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   45b3c:	defff804 	addi	sp,sp,-32
   45b40:	dfc00715 	stw	ra,28(sp)
   45b44:	df000615 	stw	fp,24(sp)
   45b48:	dc000515 	stw	r16,20(sp)
   45b4c:	df000604 	addi	fp,sp,24
   45b50:	e13ffb15 	stw	r4,-20(fp)
   45b54:	e17ffc15 	stw	r5,-16(fp)
   45b58:	e1bffd15 	stw	r6,-12(fp)
   45b5c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   45b60:	e13ffc17 	ldw	r4,-16(fp)
   45b64:	e17ffd17 	ldw	r5,-12(fp)
   45b68:	e1bffe17 	ldw	r6,-8(fp)
   45b6c:	0045dd80 	call	45dd8 <open>
   45b70:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   45b74:	e0bffa17 	ldw	r2,-24(fp)
   45b78:	10002216 	blt	r2,zero,45c04 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   45b7c:	04000134 	movhi	r16,4
   45b80:	841c1504 	addi	r16,r16,28756
   45b84:	e0bffa17 	ldw	r2,-24(fp)
   45b88:	1009883a 	mov	r4,r2
   45b8c:	01400304 	movi	r5,12
   45b90:	00407dc0 	call	407dc <__mulsi3>
   45b94:	8085883a 	add	r2,r16,r2
   45b98:	10c00017 	ldw	r3,0(r2)
   45b9c:	e0bffb17 	ldw	r2,-20(fp)
   45ba0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   45ba4:	04000134 	movhi	r16,4
   45ba8:	841c1504 	addi	r16,r16,28756
   45bac:	e0bffa17 	ldw	r2,-24(fp)
   45bb0:	1009883a 	mov	r4,r2
   45bb4:	01400304 	movi	r5,12
   45bb8:	00407dc0 	call	407dc <__mulsi3>
   45bbc:	8085883a 	add	r2,r16,r2
   45bc0:	10800104 	addi	r2,r2,4
   45bc4:	10c00017 	ldw	r3,0(r2)
   45bc8:	e0bffb17 	ldw	r2,-20(fp)
   45bcc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   45bd0:	04000134 	movhi	r16,4
   45bd4:	841c1504 	addi	r16,r16,28756
   45bd8:	e0bffa17 	ldw	r2,-24(fp)
   45bdc:	1009883a 	mov	r4,r2
   45be0:	01400304 	movi	r5,12
   45be4:	00407dc0 	call	407dc <__mulsi3>
   45be8:	8085883a 	add	r2,r16,r2
   45bec:	10800204 	addi	r2,r2,8
   45bf0:	10c00017 	ldw	r3,0(r2)
   45bf4:	e0bffb17 	ldw	r2,-20(fp)
   45bf8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   45bfc:	e13ffa17 	ldw	r4,-24(fp)
   45c00:	0043c200 	call	43c20 <alt_release_fd>
  }
} 
   45c04:	e6ffff04 	addi	sp,fp,-4
   45c08:	dfc00217 	ldw	ra,8(sp)
   45c0c:	df000117 	ldw	fp,4(sp)
   45c10:	dc000017 	ldw	r16,0(sp)
   45c14:	dec00304 	addi	sp,sp,12
   45c18:	f800283a 	ret

00045c1c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   45c1c:	defffb04 	addi	sp,sp,-20
   45c20:	dfc00415 	stw	ra,16(sp)
   45c24:	df000315 	stw	fp,12(sp)
   45c28:	df000304 	addi	fp,sp,12
   45c2c:	e13ffd15 	stw	r4,-12(fp)
   45c30:	e17ffe15 	stw	r5,-8(fp)
   45c34:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   45c38:	01000134 	movhi	r4,4
   45c3c:	211c1804 	addi	r4,r4,28768
   45c40:	e17ffd17 	ldw	r5,-12(fp)
   45c44:	01800044 	movi	r6,1
   45c48:	01c07fc4 	movi	r7,511
   45c4c:	0045b3c0 	call	45b3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   45c50:	01000134 	movhi	r4,4
   45c54:	211c1504 	addi	r4,r4,28756
   45c58:	e17ffe17 	ldw	r5,-8(fp)
   45c5c:	000d883a 	mov	r6,zero
   45c60:	01c07fc4 	movi	r7,511
   45c64:	0045b3c0 	call	45b3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   45c68:	01000134 	movhi	r4,4
   45c6c:	211c1b04 	addi	r4,r4,28780
   45c70:	e17fff17 	ldw	r5,-4(fp)
   45c74:	01800044 	movi	r6,1
   45c78:	01c07fc4 	movi	r7,511
   45c7c:	0045b3c0 	call	45b3c <alt_open_fd>
}  
   45c80:	e037883a 	mov	sp,fp
   45c84:	dfc00117 	ldw	ra,4(sp)
   45c88:	df000017 	ldw	fp,0(sp)
   45c8c:	dec00204 	addi	sp,sp,8
   45c90:	f800283a 	ret

00045c94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45c94:	defffe04 	addi	sp,sp,-8
   45c98:	dfc00115 	stw	ra,4(sp)
   45c9c:	df000015 	stw	fp,0(sp)
   45ca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45ca4:	00800174 	movhi	r2,5
   45ca8:	10a0c704 	addi	r2,r2,-31972
   45cac:	10800017 	ldw	r2,0(r2)
   45cb0:	10000526 	beq	r2,zero,45cc8 <alt_get_errno+0x34>
   45cb4:	00800174 	movhi	r2,5
   45cb8:	10a0c704 	addi	r2,r2,-31972
   45cbc:	10800017 	ldw	r2,0(r2)
   45cc0:	103ee83a 	callr	r2
   45cc4:	00000206 	br	45cd0 <alt_get_errno+0x3c>
   45cc8:	00800174 	movhi	r2,5
   45ccc:	10a79b04 	addi	r2,r2,-24980
}
   45cd0:	e037883a 	mov	sp,fp
   45cd4:	dfc00117 	ldw	ra,4(sp)
   45cd8:	df000017 	ldw	fp,0(sp)
   45cdc:	dec00204 	addi	sp,sp,8
   45ce0:	f800283a 	ret

00045ce4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   45ce4:	defffb04 	addi	sp,sp,-20
   45ce8:	dfc00415 	stw	ra,16(sp)
   45cec:	df000315 	stw	fp,12(sp)
   45cf0:	dc000215 	stw	r16,8(sp)
   45cf4:	df000304 	addi	fp,sp,12
   45cf8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   45cfc:	e0bffe17 	ldw	r2,-8(fp)
   45d00:	10800217 	ldw	r2,8(r2)
   45d04:	10d00034 	orhi	r3,r2,16384
   45d08:	e0bffe17 	ldw	r2,-8(fp)
   45d0c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45d10:	e03ffd15 	stw	zero,-12(fp)
   45d14:	00002306 	br	45da4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45d18:	04000134 	movhi	r16,4
   45d1c:	841c1504 	addi	r16,r16,28756
   45d20:	e0bffd17 	ldw	r2,-12(fp)
   45d24:	1009883a 	mov	r4,r2
   45d28:	01400304 	movi	r5,12
   45d2c:	00407dc0 	call	407dc <__mulsi3>
   45d30:	8085883a 	add	r2,r16,r2
   45d34:	10c00017 	ldw	r3,0(r2)
   45d38:	e0bffe17 	ldw	r2,-8(fp)
   45d3c:	10800017 	ldw	r2,0(r2)
   45d40:	1880151e 	bne	r3,r2,45d98 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45d44:	04000134 	movhi	r16,4
   45d48:	841c1504 	addi	r16,r16,28756
   45d4c:	e0bffd17 	ldw	r2,-12(fp)
   45d50:	1009883a 	mov	r4,r2
   45d54:	01400304 	movi	r5,12
   45d58:	00407dc0 	call	407dc <__mulsi3>
   45d5c:	8085883a 	add	r2,r16,r2
   45d60:	10800204 	addi	r2,r2,8
   45d64:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45d68:	10000b0e 	bge	r2,zero,45d98 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   45d6c:	e13ffd17 	ldw	r4,-12(fp)
   45d70:	01400304 	movi	r5,12
   45d74:	00407dc0 	call	407dc <__mulsi3>
   45d78:	1007883a 	mov	r3,r2
   45d7c:	00800134 	movhi	r2,4
   45d80:	109c1504 	addi	r2,r2,28756
   45d84:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45d88:	e0bffe17 	ldw	r2,-8(fp)
   45d8c:	18800226 	beq	r3,r2,45d98 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   45d90:	00bffcc4 	movi	r2,-13
   45d94:	00000a06 	br	45dc0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45d98:	e0bffd17 	ldw	r2,-12(fp)
   45d9c:	10800044 	addi	r2,r2,1
   45da0:	e0bffd15 	stw	r2,-12(fp)
   45da4:	00800174 	movhi	r2,5
   45da8:	10a0c604 	addi	r2,r2,-31976
   45dac:	10800017 	ldw	r2,0(r2)
   45db0:	1007883a 	mov	r3,r2
   45db4:	e0bffd17 	ldw	r2,-12(fp)
   45db8:	18bfd72e 	bgeu	r3,r2,45d18 <__alt_data_end+0xfffd01b8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   45dbc:	0005883a 	mov	r2,zero
}
   45dc0:	e6ffff04 	addi	sp,fp,-4
   45dc4:	dfc00217 	ldw	ra,8(sp)
   45dc8:	df000117 	ldw	fp,4(sp)
   45dcc:	dc000017 	ldw	r16,0(sp)
   45dd0:	dec00304 	addi	sp,sp,12
   45dd4:	f800283a 	ret

00045dd8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   45dd8:	defff604 	addi	sp,sp,-40
   45ddc:	dfc00915 	stw	ra,36(sp)
   45de0:	df000815 	stw	fp,32(sp)
   45de4:	df000804 	addi	fp,sp,32
   45de8:	e13ffd15 	stw	r4,-12(fp)
   45dec:	e17ffe15 	stw	r5,-8(fp)
   45df0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   45df4:	00bfffc4 	movi	r2,-1
   45df8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   45dfc:	00bffb44 	movi	r2,-19
   45e00:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   45e04:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   45e08:	e13ffd17 	ldw	r4,-12(fp)
   45e0c:	01400174 	movhi	r5,5
   45e10:	2960c404 	addi	r5,r5,-31984
   45e14:	00460f40 	call	460f4 <alt_find_dev>
   45e18:	e0bff815 	stw	r2,-32(fp)
   45e1c:	e0bff817 	ldw	r2,-32(fp)
   45e20:	1000051e 	bne	r2,zero,45e38 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   45e24:	e13ffd17 	ldw	r4,-12(fp)
   45e28:	00461840 	call	46184 <alt_find_file>
   45e2c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   45e30:	00800044 	movi	r2,1
   45e34:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   45e38:	e0bff817 	ldw	r2,-32(fp)
   45e3c:	10002b26 	beq	r2,zero,45eec <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   45e40:	e13ff817 	ldw	r4,-32(fp)
   45e44:	00462980 	call	46298 <alt_get_fd>
   45e48:	e0bff915 	stw	r2,-28(fp)
   45e4c:	e0bff917 	ldw	r2,-28(fp)
   45e50:	1000030e 	bge	r2,zero,45e60 <open+0x88>
    {
      status = index;
   45e54:	e0bff917 	ldw	r2,-28(fp)
   45e58:	e0bffa15 	stw	r2,-24(fp)
   45e5c:	00002506 	br	45ef4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   45e60:	e13ff917 	ldw	r4,-28(fp)
   45e64:	01400304 	movi	r5,12
   45e68:	00407dc0 	call	407dc <__mulsi3>
   45e6c:	1007883a 	mov	r3,r2
   45e70:	00800134 	movhi	r2,4
   45e74:	109c1504 	addi	r2,r2,28756
   45e78:	1885883a 	add	r2,r3,r2
   45e7c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   45e80:	e0fffe17 	ldw	r3,-8(fp)
   45e84:	00900034 	movhi	r2,16384
   45e88:	10bfffc4 	addi	r2,r2,-1
   45e8c:	1886703a 	and	r3,r3,r2
   45e90:	e0bffc17 	ldw	r2,-16(fp)
   45e94:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   45e98:	e0bffb17 	ldw	r2,-20(fp)
   45e9c:	1000051e 	bne	r2,zero,45eb4 <open+0xdc>
   45ea0:	e13ffc17 	ldw	r4,-16(fp)
   45ea4:	0045ce40 	call	45ce4 <alt_file_locked>
   45ea8:	e0bffa15 	stw	r2,-24(fp)
   45eac:	e0bffa17 	ldw	r2,-24(fp)
   45eb0:	10001016 	blt	r2,zero,45ef4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   45eb4:	e0bff817 	ldw	r2,-32(fp)
   45eb8:	10800317 	ldw	r2,12(r2)
   45ebc:	10000826 	beq	r2,zero,45ee0 <open+0x108>
   45ec0:	e0bff817 	ldw	r2,-32(fp)
   45ec4:	10800317 	ldw	r2,12(r2)
   45ec8:	e13ffc17 	ldw	r4,-16(fp)
   45ecc:	e17ffd17 	ldw	r5,-12(fp)
   45ed0:	e1bffe17 	ldw	r6,-8(fp)
   45ed4:	e1ffff17 	ldw	r7,-4(fp)
   45ed8:	103ee83a 	callr	r2
   45edc:	00000106 	br	45ee4 <open+0x10c>
   45ee0:	0005883a 	mov	r2,zero
   45ee4:	e0bffa15 	stw	r2,-24(fp)
   45ee8:	00000206 	br	45ef4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   45eec:	00bffb44 	movi	r2,-19
   45ef0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   45ef4:	e0bffa17 	ldw	r2,-24(fp)
   45ef8:	1000090e 	bge	r2,zero,45f20 <open+0x148>
  {
    alt_release_fd (index);  
   45efc:	e13ff917 	ldw	r4,-28(fp)
   45f00:	0043c200 	call	43c20 <alt_release_fd>
    ALT_ERRNO = -status;
   45f04:	0045c940 	call	45c94 <alt_get_errno>
   45f08:	1007883a 	mov	r3,r2
   45f0c:	e0bffa17 	ldw	r2,-24(fp)
   45f10:	0085c83a 	sub	r2,zero,r2
   45f14:	18800015 	stw	r2,0(r3)
    return -1;
   45f18:	00bfffc4 	movi	r2,-1
   45f1c:	00000106 	br	45f24 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   45f20:	e0bff917 	ldw	r2,-28(fp)
}
   45f24:	e037883a 	mov	sp,fp
   45f28:	dfc00117 	ldw	ra,4(sp)
   45f2c:	df000017 	ldw	fp,0(sp)
   45f30:	dec00204 	addi	sp,sp,8
   45f34:	f800283a 	ret

00045f38 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   45f38:	defffa04 	addi	sp,sp,-24
   45f3c:	df000515 	stw	fp,20(sp)
   45f40:	df000504 	addi	fp,sp,20
   45f44:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45f48:	0005303a 	rdctl	r2,status
   45f4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45f50:	e0fffc17 	ldw	r3,-16(fp)
   45f54:	00bfff84 	movi	r2,-2
   45f58:	1884703a 	and	r2,r3,r2
   45f5c:	1001703a 	wrctl	status,r2
  
  return context;
   45f60:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   45f64:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   45f68:	e0bfff17 	ldw	r2,-4(fp)
   45f6c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   45f70:	e0bffd17 	ldw	r2,-12(fp)
   45f74:	10800017 	ldw	r2,0(r2)
   45f78:	e0fffd17 	ldw	r3,-12(fp)
   45f7c:	18c00117 	ldw	r3,4(r3)
   45f80:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   45f84:	e0bffd17 	ldw	r2,-12(fp)
   45f88:	10800117 	ldw	r2,4(r2)
   45f8c:	e0fffd17 	ldw	r3,-12(fp)
   45f90:	18c00017 	ldw	r3,0(r3)
   45f94:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   45f98:	e0bffd17 	ldw	r2,-12(fp)
   45f9c:	e0fffd17 	ldw	r3,-12(fp)
   45fa0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   45fa4:	e0bffd17 	ldw	r2,-12(fp)
   45fa8:	e0fffd17 	ldw	r3,-12(fp)
   45fac:	10c00015 	stw	r3,0(r2)
   45fb0:	e0bffb17 	ldw	r2,-20(fp)
   45fb4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45fb8:	e0bffe17 	ldw	r2,-8(fp)
   45fbc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   45fc0:	e037883a 	mov	sp,fp
   45fc4:	df000017 	ldw	fp,0(sp)
   45fc8:	dec00104 	addi	sp,sp,4
   45fcc:	f800283a 	ret

00045fd0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   45fd0:	defffb04 	addi	sp,sp,-20
   45fd4:	dfc00415 	stw	ra,16(sp)
   45fd8:	df000315 	stw	fp,12(sp)
   45fdc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   45fe0:	d0a00c17 	ldw	r2,-32720(gp)
   45fe4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   45fe8:	d0a6e317 	ldw	r2,-25716(gp)
   45fec:	10800044 	addi	r2,r2,1
   45ff0:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45ff4:	00002e06 	br	460b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   45ff8:	e0bffd17 	ldw	r2,-12(fp)
   45ffc:	10800017 	ldw	r2,0(r2)
   46000:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   46004:	e0bffd17 	ldw	r2,-12(fp)
   46008:	10800403 	ldbu	r2,16(r2)
   4600c:	10803fcc 	andi	r2,r2,255
   46010:	10000426 	beq	r2,zero,46024 <alt_tick+0x54>
   46014:	d0a6e317 	ldw	r2,-25716(gp)
   46018:	1000021e 	bne	r2,zero,46024 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4601c:	e0bffd17 	ldw	r2,-12(fp)
   46020:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   46024:	e0bffd17 	ldw	r2,-12(fp)
   46028:	10800217 	ldw	r2,8(r2)
   4602c:	d0e6e317 	ldw	r3,-25716(gp)
   46030:	18801d36 	bltu	r3,r2,460a8 <alt_tick+0xd8>
   46034:	e0bffd17 	ldw	r2,-12(fp)
   46038:	10800403 	ldbu	r2,16(r2)
   4603c:	10803fcc 	andi	r2,r2,255
   46040:	1000191e 	bne	r2,zero,460a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   46044:	e0bffd17 	ldw	r2,-12(fp)
   46048:	10800317 	ldw	r2,12(r2)
   4604c:	e0fffd17 	ldw	r3,-12(fp)
   46050:	18c00517 	ldw	r3,20(r3)
   46054:	1809883a 	mov	r4,r3
   46058:	103ee83a 	callr	r2
   4605c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   46060:	e0bfff17 	ldw	r2,-4(fp)
   46064:	1000031e 	bne	r2,zero,46074 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   46068:	e13ffd17 	ldw	r4,-12(fp)
   4606c:	0045f380 	call	45f38 <alt_alarm_stop>
   46070:	00000d06 	br	460a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   46074:	e0bffd17 	ldw	r2,-12(fp)
   46078:	10c00217 	ldw	r3,8(r2)
   4607c:	e0bfff17 	ldw	r2,-4(fp)
   46080:	1887883a 	add	r3,r3,r2
   46084:	e0bffd17 	ldw	r2,-12(fp)
   46088:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4608c:	e0bffd17 	ldw	r2,-12(fp)
   46090:	10c00217 	ldw	r3,8(r2)
   46094:	d0a6e317 	ldw	r2,-25716(gp)
   46098:	1880032e 	bgeu	r3,r2,460a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4609c:	e0bffd17 	ldw	r2,-12(fp)
   460a0:	00c00044 	movi	r3,1
   460a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   460a8:	e0bffe17 	ldw	r2,-8(fp)
   460ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   460b0:	e0fffd17 	ldw	r3,-12(fp)
   460b4:	d0a00c04 	addi	r2,gp,-32720
   460b8:	18bfcf1e 	bne	r3,r2,45ff8 <__alt_data_end+0xfffd0498>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   460bc:	0001883a 	nop
}
   460c0:	e037883a 	mov	sp,fp
   460c4:	dfc00117 	ldw	ra,4(sp)
   460c8:	df000017 	ldw	fp,0(sp)
   460cc:	dec00204 	addi	sp,sp,8
   460d0:	f800283a 	ret

000460d4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   460d4:	deffff04 	addi	sp,sp,-4
   460d8:	df000015 	stw	fp,0(sp)
   460dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   460e0:	000170fa 	wrctl	ienable,zero
}
   460e4:	e037883a 	mov	sp,fp
   460e8:	df000017 	ldw	fp,0(sp)
   460ec:	dec00104 	addi	sp,sp,4
   460f0:	f800283a 	ret

000460f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   460f4:	defffa04 	addi	sp,sp,-24
   460f8:	dfc00515 	stw	ra,20(sp)
   460fc:	df000415 	stw	fp,16(sp)
   46100:	df000404 	addi	fp,sp,16
   46104:	e13ffe15 	stw	r4,-8(fp)
   46108:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4610c:	e0bfff17 	ldw	r2,-4(fp)
   46110:	10800017 	ldw	r2,0(r2)
   46114:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   46118:	e13ffe17 	ldw	r4,-8(fp)
   4611c:	004094c0 	call	4094c <strlen>
   46120:	10800044 	addi	r2,r2,1
   46124:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   46128:	00000d06 	br	46160 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4612c:	e0bffc17 	ldw	r2,-16(fp)
   46130:	10c00217 	ldw	r3,8(r2)
   46134:	e0bffd17 	ldw	r2,-12(fp)
   46138:	1809883a 	mov	r4,r3
   4613c:	e17ffe17 	ldw	r5,-8(fp)
   46140:	100d883a 	mov	r6,r2
   46144:	00464540 	call	46454 <memcmp>
   46148:	1000021e 	bne	r2,zero,46154 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4614c:	e0bffc17 	ldw	r2,-16(fp)
   46150:	00000706 	br	46170 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   46154:	e0bffc17 	ldw	r2,-16(fp)
   46158:	10800017 	ldw	r2,0(r2)
   4615c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   46160:	e0fffc17 	ldw	r3,-16(fp)
   46164:	e0bfff17 	ldw	r2,-4(fp)
   46168:	18bff01e 	bne	r3,r2,4612c <__alt_data_end+0xfffd05cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4616c:	0005883a 	mov	r2,zero
}
   46170:	e037883a 	mov	sp,fp
   46174:	dfc00117 	ldw	ra,4(sp)
   46178:	df000017 	ldw	fp,0(sp)
   4617c:	dec00204 	addi	sp,sp,8
   46180:	f800283a 	ret

00046184 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   46184:	defffb04 	addi	sp,sp,-20
   46188:	dfc00415 	stw	ra,16(sp)
   4618c:	df000315 	stw	fp,12(sp)
   46190:	df000304 	addi	fp,sp,12
   46194:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   46198:	00800174 	movhi	r2,5
   4619c:	10a0c204 	addi	r2,r2,-31992
   461a0:	10800017 	ldw	r2,0(r2)
   461a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   461a8:	00003106 	br	46270 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   461ac:	e0bffd17 	ldw	r2,-12(fp)
   461b0:	10800217 	ldw	r2,8(r2)
   461b4:	1009883a 	mov	r4,r2
   461b8:	004094c0 	call	4094c <strlen>
   461bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   461c0:	e0bffd17 	ldw	r2,-12(fp)
   461c4:	10c00217 	ldw	r3,8(r2)
   461c8:	e0bffe17 	ldw	r2,-8(fp)
   461cc:	10bfffc4 	addi	r2,r2,-1
   461d0:	1885883a 	add	r2,r3,r2
   461d4:	10800003 	ldbu	r2,0(r2)
   461d8:	10803fcc 	andi	r2,r2,255
   461dc:	1080201c 	xori	r2,r2,128
   461e0:	10bfe004 	addi	r2,r2,-128
   461e4:	10800bd8 	cmpnei	r2,r2,47
   461e8:	1000031e 	bne	r2,zero,461f8 <alt_find_file+0x74>
    {
      len -= 1;
   461ec:	e0bffe17 	ldw	r2,-8(fp)
   461f0:	10bfffc4 	addi	r2,r2,-1
   461f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   461f8:	e0bffe17 	ldw	r2,-8(fp)
   461fc:	e0ffff17 	ldw	r3,-4(fp)
   46200:	1885883a 	add	r2,r3,r2
   46204:	10800003 	ldbu	r2,0(r2)
   46208:	10803fcc 	andi	r2,r2,255
   4620c:	1080201c 	xori	r2,r2,128
   46210:	10bfe004 	addi	r2,r2,-128
   46214:	10800be0 	cmpeqi	r2,r2,47
   46218:	1000081e 	bne	r2,zero,4623c <alt_find_file+0xb8>
   4621c:	e0bffe17 	ldw	r2,-8(fp)
   46220:	e0ffff17 	ldw	r3,-4(fp)
   46224:	1885883a 	add	r2,r3,r2
   46228:	10800003 	ldbu	r2,0(r2)
   4622c:	10803fcc 	andi	r2,r2,255
   46230:	1080201c 	xori	r2,r2,128
   46234:	10bfe004 	addi	r2,r2,-128
   46238:	10000a1e 	bne	r2,zero,46264 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4623c:	e0bffd17 	ldw	r2,-12(fp)
   46240:	10c00217 	ldw	r3,8(r2)
   46244:	e0bffe17 	ldw	r2,-8(fp)
   46248:	1809883a 	mov	r4,r3
   4624c:	e17fff17 	ldw	r5,-4(fp)
   46250:	100d883a 	mov	r6,r2
   46254:	00464540 	call	46454 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   46258:	1000021e 	bne	r2,zero,46264 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4625c:	e0bffd17 	ldw	r2,-12(fp)
   46260:	00000806 	br	46284 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   46264:	e0bffd17 	ldw	r2,-12(fp)
   46268:	10800017 	ldw	r2,0(r2)
   4626c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   46270:	e0fffd17 	ldw	r3,-12(fp)
   46274:	00800174 	movhi	r2,5
   46278:	10a0c204 	addi	r2,r2,-31992
   4627c:	18bfcb1e 	bne	r3,r2,461ac <__alt_data_end+0xfffd064c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   46280:	0005883a 	mov	r2,zero
}
   46284:	e037883a 	mov	sp,fp
   46288:	dfc00117 	ldw	ra,4(sp)
   4628c:	df000017 	ldw	fp,0(sp)
   46290:	dec00204 	addi	sp,sp,8
   46294:	f800283a 	ret

00046298 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   46298:	defffa04 	addi	sp,sp,-24
   4629c:	dfc00515 	stw	ra,20(sp)
   462a0:	df000415 	stw	fp,16(sp)
   462a4:	dc000315 	stw	r16,12(sp)
   462a8:	df000404 	addi	fp,sp,16
   462ac:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   462b0:	00bffa04 	movi	r2,-24
   462b4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   462b8:	e03ffc15 	stw	zero,-16(fp)
   462bc:	00002106 	br	46344 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   462c0:	04000134 	movhi	r16,4
   462c4:	841c1504 	addi	r16,r16,28756
   462c8:	e0bffc17 	ldw	r2,-16(fp)
   462cc:	1009883a 	mov	r4,r2
   462d0:	01400304 	movi	r5,12
   462d4:	00407dc0 	call	407dc <__mulsi3>
   462d8:	8085883a 	add	r2,r16,r2
   462dc:	10800017 	ldw	r2,0(r2)
   462e0:	1000151e 	bne	r2,zero,46338 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   462e4:	04000134 	movhi	r16,4
   462e8:	841c1504 	addi	r16,r16,28756
   462ec:	e0bffc17 	ldw	r2,-16(fp)
   462f0:	1009883a 	mov	r4,r2
   462f4:	01400304 	movi	r5,12
   462f8:	00407dc0 	call	407dc <__mulsi3>
   462fc:	8085883a 	add	r2,r16,r2
   46300:	e0fffe17 	ldw	r3,-8(fp)
   46304:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   46308:	00800174 	movhi	r2,5
   4630c:	10a0c604 	addi	r2,r2,-31976
   46310:	10c00017 	ldw	r3,0(r2)
   46314:	e0bffc17 	ldw	r2,-16(fp)
   46318:	1880040e 	bge	r3,r2,4632c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   4631c:	00800174 	movhi	r2,5
   46320:	10a0c604 	addi	r2,r2,-31976
   46324:	e0fffc17 	ldw	r3,-16(fp)
   46328:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4632c:	e0bffc17 	ldw	r2,-16(fp)
   46330:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   46334:	00000606 	br	46350 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   46338:	e0bffc17 	ldw	r2,-16(fp)
   4633c:	10800044 	addi	r2,r2,1
   46340:	e0bffc15 	stw	r2,-16(fp)
   46344:	e0bffc17 	ldw	r2,-16(fp)
   46348:	10800810 	cmplti	r2,r2,32
   4634c:	103fdc1e 	bne	r2,zero,462c0 <__alt_data_end+0xfffd0760>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   46350:	e0bffd17 	ldw	r2,-12(fp)
}
   46354:	e6ffff04 	addi	sp,fp,-4
   46358:	dfc00217 	ldw	ra,8(sp)
   4635c:	df000117 	ldw	fp,4(sp)
   46360:	dc000017 	ldw	r16,0(sp)
   46364:	dec00304 	addi	sp,sp,12
   46368:	f800283a 	ret

0004636c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4636c:	defffe04 	addi	sp,sp,-8
   46370:	df000115 	stw	fp,4(sp)
   46374:	df000104 	addi	fp,sp,4
   46378:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4637c:	e0bfff17 	ldw	r2,-4(fp)
   46380:	10bffe84 	addi	r2,r2,-6
   46384:	10c00428 	cmpgeui	r3,r2,16
   46388:	18001a1e 	bne	r3,zero,463f4 <alt_exception_cause_generated_bad_addr+0x88>
   4638c:	100690ba 	slli	r3,r2,2
   46390:	00800134 	movhi	r2,4
   46394:	1098e904 	addi	r2,r2,25508
   46398:	1885883a 	add	r2,r3,r2
   4639c:	10800017 	ldw	r2,0(r2)
   463a0:	1000683a 	jmp	r2
   463a4:	000463e4 	muli	zero,zero,4495
   463a8:	000463e4 	muli	zero,zero,4495
   463ac:	000463f4 	movhi	zero,4495
   463b0:	000463f4 	movhi	zero,4495
   463b4:	000463f4 	movhi	zero,4495
   463b8:	000463e4 	muli	zero,zero,4495
   463bc:	000463ec 	andhi	zero,zero,4495
   463c0:	000463f4 	movhi	zero,4495
   463c4:	000463e4 	muli	zero,zero,4495
   463c8:	000463e4 	muli	zero,zero,4495
   463cc:	000463f4 	movhi	zero,4495
   463d0:	000463e4 	muli	zero,zero,4495
   463d4:	000463ec 	andhi	zero,zero,4495
   463d8:	000463f4 	movhi	zero,4495
   463dc:	000463f4 	movhi	zero,4495
   463e0:	000463e4 	muli	zero,zero,4495
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   463e4:	00800044 	movi	r2,1
   463e8:	00000306 	br	463f8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   463ec:	0005883a 	mov	r2,zero
   463f0:	00000106 	br	463f8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   463f4:	0005883a 	mov	r2,zero
  }
}
   463f8:	e037883a 	mov	sp,fp
   463fc:	df000017 	ldw	fp,0(sp)
   46400:	dec00104 	addi	sp,sp,4
   46404:	f800283a 	ret

00046408 <atexit>:
   46408:	200b883a 	mov	r5,r4
   4640c:	000d883a 	mov	r6,zero
   46410:	0009883a 	mov	r4,zero
   46414:	000f883a 	mov	r7,zero
   46418:	00464d01 	jmpi	464d0 <__register_exitproc>

0004641c <exit>:
   4641c:	defffe04 	addi	sp,sp,-8
   46420:	000b883a 	mov	r5,zero
   46424:	dc000015 	stw	r16,0(sp)
   46428:	dfc00115 	stw	ra,4(sp)
   4642c:	2021883a 	mov	r16,r4
   46430:	00465e40 	call	465e4 <__call_exitprocs>
   46434:	00800174 	movhi	r2,5
   46438:	10a0be04 	addi	r2,r2,-32008
   4643c:	11000017 	ldw	r4,0(r2)
   46440:	20800f17 	ldw	r2,60(r4)
   46444:	10000126 	beq	r2,zero,4644c <exit+0x30>
   46448:	103ee83a 	callr	r2
   4644c:	8009883a 	mov	r4,r16
   46450:	00467780 	call	46778 <_exit>

00046454 <memcmp>:
   46454:	01c000c4 	movi	r7,3
   46458:	3980192e 	bgeu	r7,r6,464c0 <memcmp+0x6c>
   4645c:	2144b03a 	or	r2,r4,r5
   46460:	11c4703a 	and	r2,r2,r7
   46464:	10000f26 	beq	r2,zero,464a4 <memcmp+0x50>
   46468:	20800003 	ldbu	r2,0(r4)
   4646c:	28c00003 	ldbu	r3,0(r5)
   46470:	10c0151e 	bne	r2,r3,464c8 <memcmp+0x74>
   46474:	31bfff84 	addi	r6,r6,-2
   46478:	01ffffc4 	movi	r7,-1
   4647c:	00000406 	br	46490 <memcmp+0x3c>
   46480:	20800003 	ldbu	r2,0(r4)
   46484:	28c00003 	ldbu	r3,0(r5)
   46488:	31bfffc4 	addi	r6,r6,-1
   4648c:	10c00e1e 	bne	r2,r3,464c8 <memcmp+0x74>
   46490:	21000044 	addi	r4,r4,1
   46494:	29400044 	addi	r5,r5,1
   46498:	31fff91e 	bne	r6,r7,46480 <__alt_data_end+0xfffd0920>
   4649c:	0005883a 	mov	r2,zero
   464a0:	f800283a 	ret
   464a4:	20c00017 	ldw	r3,0(r4)
   464a8:	28800017 	ldw	r2,0(r5)
   464ac:	1880041e 	bne	r3,r2,464c0 <memcmp+0x6c>
   464b0:	31bfff04 	addi	r6,r6,-4
   464b4:	21000104 	addi	r4,r4,4
   464b8:	29400104 	addi	r5,r5,4
   464bc:	39bff936 	bltu	r7,r6,464a4 <__alt_data_end+0xfffd0944>
   464c0:	303fe91e 	bne	r6,zero,46468 <__alt_data_end+0xfffd0908>
   464c4:	003ff506 	br	4649c <__alt_data_end+0xfffd093c>
   464c8:	10c5c83a 	sub	r2,r2,r3
   464cc:	f800283a 	ret

000464d0 <__register_exitproc>:
   464d0:	00800174 	movhi	r2,5
   464d4:	defffa04 	addi	sp,sp,-24
   464d8:	10a0be04 	addi	r2,r2,-32008
   464dc:	dc000315 	stw	r16,12(sp)
   464e0:	14000017 	ldw	r16,0(r2)
   464e4:	dc400415 	stw	r17,16(sp)
   464e8:	dfc00515 	stw	ra,20(sp)
   464ec:	80805217 	ldw	r2,328(r16)
   464f0:	2023883a 	mov	r17,r4
   464f4:	10003626 	beq	r2,zero,465d0 <__register_exitproc+0x100>
   464f8:	10c00117 	ldw	r3,4(r2)
   464fc:	010007c4 	movi	r4,31
   46500:	20c00e16 	blt	r4,r3,4653c <__register_exitproc+0x6c>
   46504:	1a400044 	addi	r9,r3,1
   46508:	8800211e 	bne	r17,zero,46590 <__register_exitproc+0xc0>
   4650c:	18c00084 	addi	r3,r3,2
   46510:	18c7883a 	add	r3,r3,r3
   46514:	18c7883a 	add	r3,r3,r3
   46518:	12400115 	stw	r9,4(r2)
   4651c:	10c7883a 	add	r3,r2,r3
   46520:	19400015 	stw	r5,0(r3)
   46524:	0005883a 	mov	r2,zero
   46528:	dfc00517 	ldw	ra,20(sp)
   4652c:	dc400417 	ldw	r17,16(sp)
   46530:	dc000317 	ldw	r16,12(sp)
   46534:	dec00604 	addi	sp,sp,24
   46538:	f800283a 	ret
   4653c:	00800034 	movhi	r2,0
   46540:	10800004 	addi	r2,r2,0
   46544:	10002526 	beq	r2,zero,465dc <__register_exitproc+0x10c>
   46548:	01006404 	movi	r4,400
   4654c:	d9400015 	stw	r5,0(sp)
   46550:	d9800115 	stw	r6,4(sp)
   46554:	d9c00215 	stw	r7,8(sp)
   46558:	00000000 	call	0 <__alt_mem_RAM_jesus-0x40000>
   4655c:	d9400017 	ldw	r5,0(sp)
   46560:	d9800117 	ldw	r6,4(sp)
   46564:	d9c00217 	ldw	r7,8(sp)
   46568:	10001c26 	beq	r2,zero,465dc <__register_exitproc+0x10c>
   4656c:	80c05217 	ldw	r3,328(r16)
   46570:	10000115 	stw	zero,4(r2)
   46574:	02400044 	movi	r9,1
   46578:	10c00015 	stw	r3,0(r2)
   4657c:	80805215 	stw	r2,328(r16)
   46580:	10006215 	stw	zero,392(r2)
   46584:	10006315 	stw	zero,396(r2)
   46588:	0007883a 	mov	r3,zero
   4658c:	883fdf26 	beq	r17,zero,4650c <__alt_data_end+0xfffd09ac>
   46590:	18d1883a 	add	r8,r3,r3
   46594:	4211883a 	add	r8,r8,r8
   46598:	1211883a 	add	r8,r2,r8
   4659c:	41802215 	stw	r6,136(r8)
   465a0:	01000044 	movi	r4,1
   465a4:	11806217 	ldw	r6,392(r2)
   465a8:	20c8983a 	sll	r4,r4,r3
   465ac:	310cb03a 	or	r6,r6,r4
   465b0:	11806215 	stw	r6,392(r2)
   465b4:	41c04215 	stw	r7,264(r8)
   465b8:	01800084 	movi	r6,2
   465bc:	89bfd31e 	bne	r17,r6,4650c <__alt_data_end+0xfffd09ac>
   465c0:	11806317 	ldw	r6,396(r2)
   465c4:	3108b03a 	or	r4,r6,r4
   465c8:	11006315 	stw	r4,396(r2)
   465cc:	003fcf06 	br	4650c <__alt_data_end+0xfffd09ac>
   465d0:	80805304 	addi	r2,r16,332
   465d4:	80805215 	stw	r2,328(r16)
   465d8:	003fc706 	br	464f8 <__alt_data_end+0xfffd0998>
   465dc:	00bfffc4 	movi	r2,-1
   465e0:	003fd106 	br	46528 <__alt_data_end+0xfffd09c8>

000465e4 <__call_exitprocs>:
   465e4:	00800174 	movhi	r2,5
   465e8:	10a0be04 	addi	r2,r2,-32008
   465ec:	10800017 	ldw	r2,0(r2)
   465f0:	defff404 	addi	sp,sp,-48
   465f4:	dd800815 	stw	r22,32(sp)
   465f8:	d8800015 	stw	r2,0(sp)
   465fc:	10805204 	addi	r2,r2,328
   46600:	dd000615 	stw	r20,24(sp)
   46604:	dc800415 	stw	r18,16(sp)
   46608:	dfc00b15 	stw	ra,44(sp)
   4660c:	df000a15 	stw	fp,40(sp)
   46610:	ddc00915 	stw	r23,36(sp)
   46614:	dd400715 	stw	r21,28(sp)
   46618:	dcc00515 	stw	r19,20(sp)
   4661c:	dc400315 	stw	r17,12(sp)
   46620:	dc000215 	stw	r16,8(sp)
   46624:	2025883a 	mov	r18,r4
   46628:	2829883a 	mov	r20,r5
   4662c:	d8800115 	stw	r2,4(sp)
   46630:	05bfffc4 	movi	r22,-1
   46634:	d8800017 	ldw	r2,0(sp)
   46638:	14c05217 	ldw	r19,328(r2)
   4663c:	98001d26 	beq	r19,zero,466b4 <__call_exitprocs+0xd0>
   46640:	dd400117 	ldw	r21,4(sp)
   46644:	98800117 	ldw	r2,4(r19)
   46648:	173fffc4 	addi	fp,r2,-1
   4664c:	e0000d16 	blt	fp,zero,46684 <__call_exitprocs+0xa0>
   46650:	14000044 	addi	r16,r2,1
   46654:	8421883a 	add	r16,r16,r16
   46658:	8421883a 	add	r16,r16,r16
   4665c:	84402004 	addi	r17,r16,128
   46660:	9c63883a 	add	r17,r19,r17
   46664:	9c21883a 	add	r16,r19,r16
   46668:	a0001e26 	beq	r20,zero,466e4 <__call_exitprocs+0x100>
   4666c:	80804017 	ldw	r2,256(r16)
   46670:	15001c26 	beq	r2,r20,466e4 <__call_exitprocs+0x100>
   46674:	e73fffc4 	addi	fp,fp,-1
   46678:	843fff04 	addi	r16,r16,-4
   4667c:	8c7fff04 	addi	r17,r17,-4
   46680:	e5bff91e 	bne	fp,r22,46668 <__alt_data_end+0xfffd0b08>
   46684:	00800034 	movhi	r2,0
   46688:	10800004 	addi	r2,r2,0
   4668c:	10000926 	beq	r2,zero,466b4 <__call_exitprocs+0xd0>
   46690:	98800117 	ldw	r2,4(r19)
   46694:	1000311e 	bne	r2,zero,4675c <__call_exitprocs+0x178>
   46698:	98800017 	ldw	r2,0(r19)
   4669c:	10003426 	beq	r2,zero,46770 <__call_exitprocs+0x18c>
   466a0:	9809883a 	mov	r4,r19
   466a4:	a8800015 	stw	r2,0(r21)
   466a8:	00000000 	call	0 <__alt_mem_RAM_jesus-0x40000>
   466ac:	acc00017 	ldw	r19,0(r21)
   466b0:	983fe41e 	bne	r19,zero,46644 <__alt_data_end+0xfffd0ae4>
   466b4:	dfc00b17 	ldw	ra,44(sp)
   466b8:	df000a17 	ldw	fp,40(sp)
   466bc:	ddc00917 	ldw	r23,36(sp)
   466c0:	dd800817 	ldw	r22,32(sp)
   466c4:	dd400717 	ldw	r21,28(sp)
   466c8:	dd000617 	ldw	r20,24(sp)
   466cc:	dcc00517 	ldw	r19,20(sp)
   466d0:	dc800417 	ldw	r18,16(sp)
   466d4:	dc400317 	ldw	r17,12(sp)
   466d8:	dc000217 	ldw	r16,8(sp)
   466dc:	dec00c04 	addi	sp,sp,48
   466e0:	f800283a 	ret
   466e4:	98800117 	ldw	r2,4(r19)
   466e8:	80c00017 	ldw	r3,0(r16)
   466ec:	10bfffc4 	addi	r2,r2,-1
   466f0:	17001526 	beq	r2,fp,46748 <__call_exitprocs+0x164>
   466f4:	80000015 	stw	zero,0(r16)
   466f8:	183fde26 	beq	r3,zero,46674 <__alt_data_end+0xfffd0b14>
   466fc:	00800044 	movi	r2,1
   46700:	1708983a 	sll	r4,r2,fp
   46704:	98806217 	ldw	r2,392(r19)
   46708:	9dc00117 	ldw	r23,4(r19)
   4670c:	2084703a 	and	r2,r4,r2
   46710:	1000061e 	bne	r2,zero,4672c <__call_exitprocs+0x148>
   46714:	183ee83a 	callr	r3
   46718:	98800117 	ldw	r2,4(r19)
   4671c:	15ffc51e 	bne	r2,r23,46634 <__alt_data_end+0xfffd0ad4>
   46720:	a8800017 	ldw	r2,0(r21)
   46724:	14ffd326 	beq	r2,r19,46674 <__alt_data_end+0xfffd0b14>
   46728:	003fc206 	br	46634 <__alt_data_end+0xfffd0ad4>
   4672c:	98806317 	ldw	r2,396(r19)
   46730:	2084703a 	and	r2,r4,r2
   46734:	1000061e 	bne	r2,zero,46750 <__call_exitprocs+0x16c>
   46738:	89400017 	ldw	r5,0(r17)
   4673c:	9009883a 	mov	r4,r18
   46740:	183ee83a 	callr	r3
   46744:	003ff406 	br	46718 <__alt_data_end+0xfffd0bb8>
   46748:	9f000115 	stw	fp,4(r19)
   4674c:	003fea06 	br	466f8 <__alt_data_end+0xfffd0b98>
   46750:	89000017 	ldw	r4,0(r17)
   46754:	183ee83a 	callr	r3
   46758:	003fef06 	br	46718 <__alt_data_end+0xfffd0bb8>
   4675c:	98800017 	ldw	r2,0(r19)
   46760:	982b883a 	mov	r21,r19
   46764:	1027883a 	mov	r19,r2
   46768:	983fb61e 	bne	r19,zero,46644 <__alt_data_end+0xfffd0ae4>
   4676c:	003fd106 	br	466b4 <__alt_data_end+0xfffd0b54>
   46770:	0005883a 	mov	r2,zero
   46774:	003ffa06 	br	46760 <__alt_data_end+0xfffd0c00>

00046778 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   46778:	defffd04 	addi	sp,sp,-12
   4677c:	df000215 	stw	fp,8(sp)
   46780:	df000204 	addi	fp,sp,8
   46784:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   46788:	0001883a 	nop
   4678c:	e0bfff17 	ldw	r2,-4(fp)
   46790:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   46794:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   46798:	10000226 	beq	r2,zero,467a4 <_exit+0x2c>
    ALT_SIM_FAIL();
   4679c:	002af070 	cmpltui	zero,zero,43969
   467a0:	00000106 	br	467a8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   467a4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   467a8:	003fff06 	br	467a8 <__alt_data_end+0xfffd0c48>
