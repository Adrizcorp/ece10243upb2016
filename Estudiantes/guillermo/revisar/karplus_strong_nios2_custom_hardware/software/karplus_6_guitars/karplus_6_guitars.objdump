
karplus_6_guitars.elf:     file format elf32-littlenios2
karplus_6_guitars.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0004022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00006900 memsz 0x00006900 flags r-x
    LOAD off    0x00007920 vaddr 0x00046920 paddr 0x00048450 align 2**12
         filesz 0x00001b30 memsz 0x00001b30 flags rw-
    LOAD off    0x00009f80 vaddr 0x00049f80 paddr 0x00049f80 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000066a0  0004022c  0004022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000054  000468cc  000468cc  000078cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b30  00046920  00048450  00007920  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00049f80  00049f80  00009f80  2**2
                  ALLOC, SMALL_DATA
  6 .RAM_jesus    00000000  0004a0d4  0004a0d4  00009450  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009450  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ab8  00000000  00000000  00009478  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00018015  00000000  00000000  00009f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006974  00000000  00000000  00021f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000735b  00000000  00000000  000288b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000196c  00000000  00000000  0002fc14  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002b7f  00000000  00000000  00031580  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000487e  00000000  00000000  000340ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00038980  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000360  00000000  00000000  000389c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003b689  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003b68c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003b68f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003b690  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003b691  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003b69a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003b6a3  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  0003b6ac  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003c  00000000  00000000  0003b6b9  2**0
                  CONTENTS, READONLY
 26 .jdi          00003b78  00000000  00000000  0003b6f5  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00086bcf  00000000  00000000  0003f26d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
0004022c l    d  .text	00000000 .text
000468cc l    d  .rodata	00000000 .rodata
00046920 l    d  .rwdata	00000000 .rwdata
00049f80 l    d  .bss	00000000 .bss
0004a0d4 l    d  .RAM_jesus	00000000 .RAM_jesus
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../karplus_6_guitars_bsp//obj/HAL/src/crt0.o
00040264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 karplus.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000407d0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00046920 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00042448 l     F .text	00000008 __fp_lock
00042450 l     F .text	00000008 __fp_unlock
00042464 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000435cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000436f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00043720 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00043828 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043924 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043a08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043bec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00048440 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00043ea0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043ff0 l     F .text	00000038 alt_dev_reg
000472f4 l     O .rwdata	00001060 jtag_uart
00048354 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00044300 l     F .text	00000204 altera_avalon_jtag_uart_irq
00044504 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00044b24 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00044dd8 l     F .text	00000098 altera_avalon_uart_irq
00044e70 l     F .text	000000e0 altera_avalon_uart_rxirq
00044f50 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000450e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00045314 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000457c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00045c5c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00045db4 l     F .text	00000050 alt_get_errno
00045e04 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00049fa8 g     O .bss	00000004 alt_instruction_exception_handler
000433b4 g     F .text	00000054 _isatty_r
00043b34 g     F .text	00000078 alt_main
00040924 g     F .text	000000b8 _puts_r
00049fd4 g     O .bss	00000100 alt_irq
00043408 g     F .text	0000005c _lseek_r
00048450 g       *ABS*	00000000 __flash_rwdata_start
0004a0d4 g       *ABS*	00000000 __alt_heap_start
00043134 g     F .text	0000005c __sseek
000427ac g     F .text	00000010 __sinit
00042604 g     F .text	00000078 __sfmoreglue
00043bcc g     F .text	00000020 __malloc_unlock
00041970 g     F .text	0000015c memmove
00042794 g     F .text	00000018 _cleanup
000461f4 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004335c g     F .text	00000058 _fstat_r
00049f8c g     O .bss	00000004 errno
000430b0 g     F .text	00000008 __seofread
00049f94 g     O .bss	00000004 alt_argv
00050418 g       *ABS*	00000000 _gp
00043e70 g     F .text	00000030 usleep
00047174 g     O .rwdata	00000180 alt_fd_list
00046214 g     F .text	00000090 alt_find_dev
00041838 g     F .text	00000138 memcpy
00042458 g     F .text	0000000c _cleanup_r
00045d3c g     F .text	00000078 alt_io_redirect
000468cc g       *ABS*	00000000 __DTOR_END__
000409dc g     F .text	00000014 puts
0004648c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00044700 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000408ec g     F .text	00000008 .hidden __udivsi3
00043878 g     F .text	000000ac isatty
00049f88 g     O .bss	00000004 __malloc_top_pad
00040b04 g     F .text	000004a4 __sfvwrite_r
0004206c g     F .text	00000054 _sbrk_r
00043464 g     F .text	0000005c _read_r
00048438 g     O .rwdata	00000004 alt_max_fd
00043248 g     F .text	00000100 _fclose_r
00042418 g     F .text	00000030 fflush
00049f84 g     O .bss	00000004 __malloc_max_sbrked_mem
00043a58 g     F .text	000000dc lseek
00048418 g     O .rwdata	00000004 _global_impure_ptr
00041acc g     F .text	000005a0 _realloc_r
0004a0d4 g       *ABS*	00000000 __bss_end
00045b6c g     F .text	000000f0 alt_iic_isr_register
000460f0 g     F .text	00000104 alt_tick
00044d30 g     F .text	000000a8 altera_avalon_uart_init
000427cc g     F .text	00000018 __fp_lock_all
00045b20 g     F .text	0000004c alt_ic_irq_enabled
00046058 g     F .text	00000098 alt_alarm_stop
00049f9c g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d0 alt_irq_handler
0004714c g     O .rwdata	00000028 alt_dev_null
000457a8 g     F .text	0000001c alt_dcache_flush_all
00048450 g       *ABS*	00000000 __ram_rwdata_end
00048430 g     O .rwdata	00000008 alt_dev_list
00043ef0 g     F .text	00000100 write
00046920 g       *ABS*	00000000 __ram_rodata_end
00043770 g     F .text	000000b8 fstat
000408f4 g     F .text	00000008 .hidden __umodsi3
0004a0d4 g       *ABS*	00000000 end
00045364 g     F .text	000001ac altera_avalon_uart_write
0004423c g     F .text	000000c4 altera_avalon_jtag_uart_init
000401cc g     F .exceptions	00000060 alt_instruction_exception_entry
000406a8 g     F .text	00000064 play_tone
000468cc g       *ABS*	00000000 __CTOR_LIST__
00075b60 g       *ABS*	00000000 __alt_stack_pointer
00044b98 g     F .text	00000088 alt_avalon_timer_sc_init
00044c80 g     F .text	00000060 altera_avalon_uart_write_fd
00044ce0 g     F .text	00000050 altera_avalon_uart_close_fd
0004490c g     F .text	00000218 altera_avalon_jtag_uart_write
000427bc g     F .text	00000004 __sfp_lock_acquire
00041750 g     F .text	000000e8 memchr
00042920 g     F .text	000002f0 _free_r
000405dc g     F .text	000000cc inject_noise
00046704 g     F .text	00000194 __call_exitprocs
00048420 g     O .rwdata	00000004 __malloc_sbrk_base
0004022c g     F .text	0000003c _start
00049fa0 g     O .bss	00000004 _alt_tick_rate
00040a08 g     F .text	00000064 rand
00049fa4 g     O .bss	00000004 _alt_nticks
00043c3c g     F .text	00000104 read
0004405c g     F .text	0000007c alt_sys_init
000465f0 g     F .text	00000114 __register_exitproc
000445ac g     F .text	00000068 altera_avalon_jtag_uart_close
000408fc g     F .text	00000028 .hidden __mulsi3
00046920 g       *ABS*	00000000 __ram_rwdata_start
000468cc g       *ABS*	00000000 __ram_rodata_start
00049fac g     O .bss	00000028 __malloc_current_mallinfo
000440d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000463b8 g     F .text	000000d4 alt_get_fd
00045650 g     F .text	00000158 alt_busy_sleep
000431f4 g     F .text	00000054 _close_r
00046574 g     F .text	0000007c memcmp
00044198 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0004a0d4 g       *ABS*	00000000 __alt_stack_base
000441e8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000420c0 g     F .text	00000130 __swsetup_r
0004267c g     F .text	00000118 __sfp
00046d44 g     O .rwdata	00000408 __malloc_av_
000427c8 g     F .text	00000004 __sinit_lock_release
0004305c g     F .text	00000054 __sread
000462a4 g     F .text	00000114 alt_find_file
00045814 g     F .text	000000a4 alt_dev_llist_insert
00043bac g     F .text	00000020 __malloc_lock
00043dc0 g     F .text	000000b0 sbrk
000421f0 g     F .text	00000228 _fflush_r
00049f80 g       *ABS*	00000000 __bss_start
00042f38 g     F .text	00000124 memset
00040268 g     F .text	00000374 main
00049f98 g     O .bss	00000004 alt_envp
00049f80 g     O .bss	00000004 __malloc_max_total_mem
00044138 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000409f0 g     F .text	00000018 srand
00040000 g       *ABS*	00000000 __alt_mem_RAM_jesus
00043190 g     F .text	00000008 __sclose
00075b60 g       *ABS*	00000000 __alt_heap_limit
00043348 g     F .text	00000014 fclose
00040fa8 g     F .text	000007a8 _malloc_r
0004843c g     O .rwdata	00000004 alt_errno
00042c10 g     F .text	000000b8 _fwalk
0004083c g     F .text	00000054 .hidden __divsi3
000427fc g     F .text	00000124 _malloc_trim_r
000468cc g       *ABS*	00000000 __CTOR_END__
000468cc g       *ABS*	00000000 __flash_rodata_start
000468cc g       *ABS*	00000000 __DTOR_LIST__
00044028 g     F .text	00000034 alt_irq_init
00043d40 g     F .text	00000080 alt_release_fd
00046528 g     F .text	00000014 atexit
00043198 g     F .text	0000005c _write_r
0004841c g     O .rwdata	00000004 _impure_ptr
00049f90 g     O .bss	00000004 alt_argc
00045914 g     F .text	0000005c _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
000427e4 g     F .text	00000018 __fp_unlock_all
00048428 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004598c g     F .text	00000050 alt_ic_isr_register
00048450 g       *ABS*	00000000 _edata
00044c20 g     F .text	00000060 altera_avalon_uart_read_fd
0004a0d4 g       *ABS*	00000000 _end
0004022c g       *ABS*	00000000 __ram_exceptions_end
00044614 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00045a7c g     F .text	000000a4 alt_ic_irq_disable
000430b8 g     F .text	0000007c __swrite
00048424 g     O .rwdata	00000004 __malloc_trim_threshold
00040764 g     F .text	0000006c init_karplus
0004653c g     F .text	00000038 exit
00042cc8 g     F .text	000000b8 _fwalk_reent
00040890 g     F .text	0000005c .hidden __modsi3
00075b60 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000427c0 g     F .text	00000004 __sfp_lock_release
00045094 g     F .text	00000054 altera_avalon_uart_close
00046898 g     F .text	00000034 _exit
00045510 g     F .text	00000140 alt_alarm_start
0004070c g     F .text	00000058 set_karplus_frequency
000434c0 g     F .text	0000010c .hidden __muldi3
00042d80 g     F .text	000001b8 __smakebuf_r
00040a6c g     F .text	00000098 strlen
00045ef8 g     F .text	00000160 open
00045970 g     F .text	0000001c alt_icache_flush_all
00048444 g     O .rwdata	00000004 alt_priority_mask
000459dc g     F .text	000000a0 alt_ic_irq_enable
00045138 g     F .text	000001dc altera_avalon_uart_read
00048448 g     O .rwdata	00000008 alt_alarm_list
000458b8 g     F .text	0000005c _do_ctors
0004361c g     F .text	000000d8 close
00043988 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
000427c4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408b14 	ori	at,at,556
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401cc0 	call	401cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10a7f504 	addi	r2,r2,-24620
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10a7f504 	addi	r2,r2,-24620
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffca5cc>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffca5c0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	e037883a 	mov	sp,fp
   401bc:	dfc00117 	ldw	ra,4(sp)
   401c0:	df000017 	ldw	fp,0(sp)
   401c4:	dec00204 	addi	sp,sp,8
   401c8:	f800283a 	ret

000401cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401cc:	defffb04 	addi	sp,sp,-20
   401d0:	dfc00415 	stw	ra,16(sp)
   401d4:	df000315 	stw	fp,12(sp)
   401d8:	df000304 	addi	fp,sp,12
   401dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e0:	00bfffc4 	movi	r2,-1
   401e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401ec:	d0a6e417 	ldw	r2,-25712(gp)
   401f0:	10000726 	beq	r2,zero,40210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f4:	d0a6e417 	ldw	r2,-25712(gp)
   401f8:	e0fffd17 	ldw	r3,-12(fp)
   401fc:	1809883a 	mov	r4,r3
   40200:	e17fff17 	ldw	r5,-4(fp)
   40204:	e1bffe17 	ldw	r6,-8(fp)
   40208:	103ee83a 	callr	r2
   4020c:	00000206 	br	40218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40214:	0005883a 	mov	r2,zero
}
   40218:	e037883a 	mov	sp,fp
   4021c:	dfc00117 	ldw	ra,4(sp)
   40220:	df000017 	ldw	fp,0(sp)
   40224:	dec00204 	addi	sp,sp,8
   40228:	f800283a 	ret

Disassembly of section .text:

0004022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   4022c:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40230:	ded6d814 	ori	sp,sp,23392
    movhi gp, %hi(_gp)
   40234:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40238:	d6810614 	ori	gp,gp,1048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   4023c:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40240:	10a7e014 	ori	r2,r2,40832

    movhi r3, %hi(__bss_end)
   40244:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40248:	18e83514 	ori	r3,r3,41172

    beq r2, r3, 1f
   4024c:	10c00326 	beq	r2,r3,4025c <_start+0x30>

0:
    stw zero, (r2)
   40250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40258:	10fffd36 	bltu	r2,r3,40250 <__alt_data_end+0xfffca6f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   4025c:	00439880 	call	43988 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40260:	0043b340 	call	43b34 <alt_main>

00040264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40264:	003fff06 	br	40264 <__alt_data_end+0xfffca704>

00040268 <main>:
 */

#include "./karplus/karplus.h"

int main()
{
   40268:	defffe04 	addi	sp,sp,-8
   4026c:	dfc00115 	stw	ra,4(sp)
   40270:	df000015 	stw	fp,0(sp)
   40274:	d839883a 	mov	fp,sp

	printf("Hello from Nios II!\n");
   40278:	01000134 	movhi	r4,4
   4027c:	211a3304 	addi	r4,r4,26828
   40280:	00409dc0 	call	409dc <puts>
	init_karplus();
   40284:	00407640 	call	40764 <init_karplus>
	set_karplus_frequency(44100);
   40288:	012b1114 	movui	r4,44100
   4028c:	004070c0 	call	4070c <set_karplus_frequency>
		play_tone(A_9,1000);
		play_tone(LOW_E_9,1000);*/

	//himno de la alegria

	  play_tone(G_4,400);
   40290:	01002704 	movi	r4,156
   40294:	01406404 	movi	r5,400
   40298:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_5,200);
   4029c:	010024c4 	movi	r4,147
   402a0:	01403204 	movi	r5,200
   402a4:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_7,200);
   402a8:	010020c4 	movi	r4,131
   402ac:	01403204 	movi	r5,200
   402b0:	00406a80 	call	406a8 <play_tone>
	  play_tone(silence,1);
   402b4:	01000044 	movi	r4,1
   402b8:	01400044 	movi	r5,1
   402bc:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_7,200);
   402c0:	010020c4 	movi	r4,131
   402c4:	01403204 	movi	r5,200
   402c8:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_5,200);
   402cc:	010024c4 	movi	r4,147
   402d0:	01403204 	movi	r5,200
   402d4:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_4,200);
   402d8:	01002704 	movi	r4,156
   402dc:	01403204 	movi	r5,200
   402e0:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,200);
   402e4:	01002bc4 	movi	r4,175
   402e8:	01403204 	movi	r5,200
   402ec:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_0,200);
   402f0:	01003144 	movi	r4,197
   402f4:	01403204 	movi	r5,200
   402f8:	00406a80 	call	406a8 <play_tone>
	  play_tone(silence,1);
   402fc:	01000044 	movi	r4,1
   40300:	01400044 	movi	r5,1
   40304:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_0,200);
   40308:	01003144 	movi	r4,197
   4030c:	01403204 	movi	r5,200
   40310:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,200);
   40314:	01002bc4 	movi	r4,175
   40318:	01403204 	movi	r5,200
   4031c:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_4,200);
   40320:	01002704 	movi	r4,156
   40324:	01403204 	movi	r5,200
   40328:	00406a80 	call	406a8 <play_tone>
	  play_tone(silence,1);
   4032c:	01000044 	movi	r4,1
   40330:	01400044 	movi	r5,1
   40334:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_4,300);
   40338:	01002704 	movi	r4,156
   4033c:	01404b04 	movi	r5,300
   40340:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,100);
   40344:	01002bc4 	movi	r4,175
   40348:	01401904 	movi	r5,100
   4034c:	00406a80 	call	406a8 <play_tone>
	  play_tone(silence,1);
   40350:	01000044 	movi	r4,1
   40354:	01400044 	movi	r5,1
   40358:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,400);
   4035c:	01002bc4 	movi	r4,175
   40360:	01406404 	movi	r5,400
   40364:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_4,400);
   40368:	01002704 	movi	r4,156
   4036c:	01406404 	movi	r5,400
   40370:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_5,200);
   40374:	010024c4 	movi	r4,147
   40378:	01403204 	movi	r5,200
   4037c:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_7,200);
   40380:	010020c4 	movi	r4,131
   40384:	01403204 	movi	r5,200
   40388:	00406a80 	call	406a8 <play_tone>
	  play_tone(silence,1);
   4038c:	01000044 	movi	r4,1
   40390:	01400044 	movi	r5,1
   40394:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_7,200);
   40398:	010020c4 	movi	r4,131
   4039c:	01403204 	movi	r5,200
   403a0:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_5,200);
   403a4:	010024c4 	movi	r4,147
   403a8:	01403204 	movi	r5,200
   403ac:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_4,200);
   403b0:	01002704 	movi	r4,156
   403b4:	01403204 	movi	r5,200
   403b8:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,200);
   403bc:	01002bc4 	movi	r4,175
   403c0:	01403204 	movi	r5,200
   403c4:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_0,200);
   403c8:	01003144 	movi	r4,197
   403cc:	01403204 	movi	r5,200
   403d0:	00406a80 	call	406a8 <play_tone>
	  play_tone(silence,1);
   403d4:	01000044 	movi	r4,1
   403d8:	01400044 	movi	r5,1
   403dc:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_0,200);
   403e0:	01003144 	movi	r4,197
   403e4:	01403204 	movi	r5,200
   403e8:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,200);
   403ec:	01002bc4 	movi	r4,175
   403f0:	01403204 	movi	r5,200
   403f4:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_4,200);
   403f8:	01002704 	movi	r4,156
   403fc:	01403204 	movi	r5,200
   40400:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,300);
   40404:	01002bc4 	movi	r4,175
   40408:	01404b04 	movi	r5,300
   4040c:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_0,100);
   40410:	01003144 	movi	r4,197
   40414:	01401904 	movi	r5,100
   40418:	00406a80 	call	406a8 <play_tone>
	  play_tone(silence,1);
   4041c:	01000044 	movi	r4,1
   40420:	01400044 	movi	r5,1
   40424:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_0,400);
   40428:	01003144 	movi	r4,197
   4042c:	01406404 	movi	r5,400
   40430:	00406a80 	call	406a8 <play_tone>
	  play_tone(silence,200);
   40434:	01000044 	movi	r4,1
   40438:	01403204 	movi	r5,200
   4043c:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,400);
   40440:	01002bc4 	movi	r4,175
   40444:	01406404 	movi	r5,400
   40448:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_4,200);
   4044c:	01002704 	movi	r4,156
   40450:	01403204 	movi	r5,200
   40454:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_0,200);
   40458:	01003144 	movi	r4,197
   4045c:	01403204 	movi	r5,200
   40460:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,200);
   40464:	01002bc4 	movi	r4,175
   40468:	01403204 	movi	r5,200
   4046c:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_4,100);
   40470:	01002704 	movi	r4,156
   40474:	01401904 	movi	r5,100
   40478:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_5,100);
   4047c:	010024c4 	movi	r4,147
   40480:	01401904 	movi	r5,100
   40484:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_4,200);
   40488:	01002704 	movi	r4,156
   4048c:	01403204 	movi	r5,200
   40490:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_0,200);
   40494:	01003144 	movi	r4,197
   40498:	01403204 	movi	r5,200
   4049c:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,200);
   404a0:	01002bc4 	movi	r4,175
   404a4:	01403204 	movi	r5,200
   404a8:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_4,100);
   404ac:	01002704 	movi	r4,156
   404b0:	01401904 	movi	r5,100
   404b4:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_5,100);
   404b8:	010024c4 	movi	r4,147
   404bc:	01401904 	movi	r5,100
   404c0:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_4,200);
   404c4:	01002704 	movi	r4,156
   404c8:	01403204 	movi	r5,200
   404cc:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,200);
   404d0:	01002bc4 	movi	r4,175
   404d4:	01403204 	movi	r5,200
   404d8:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_0,200);
   404dc:	01003144 	movi	r4,197
   404e0:	01403204 	movi	r5,200
   404e4:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,200);
   404e8:	01002bc4 	movi	r4,175
   404ec:	01403204 	movi	r5,200
   404f0:	00406a80 	call	406a8 <play_tone>
	  play_tone(B_1,400);
   404f4:	010024c4 	movi	r4,147
   404f8:	01406404 	movi	r5,400
   404fc:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,400);
   40500:	01002bc4 	movi	r4,175
   40504:	01406404 	movi	r5,400
   40508:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_5,200);
   4050c:	010024c4 	movi	r4,147
   40510:	01403204 	movi	r5,200
   40514:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_7,200);
   40518:	010020c4 	movi	r4,131
   4051c:	01403204 	movi	r5,200
   40520:	00406a80 	call	406a8 <play_tone>
	  play_tone(silence,1);
   40524:	01000044 	movi	r4,1
   40528:	01400044 	movi	r5,1
   4052c:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_7,200);
   40530:	010020c4 	movi	r4,131
   40534:	01403204 	movi	r5,200
   40538:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_5,200);
   4053c:	010024c4 	movi	r4,147
   40540:	01403204 	movi	r5,200
   40544:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_4,200);
   40548:	01002704 	movi	r4,156
   4054c:	01403204 	movi	r5,200
   40550:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,200);
   40554:	01002bc4 	movi	r4,175
   40558:	01403204 	movi	r5,200
   4055c:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_0,200);
   40560:	01003144 	movi	r4,197
   40564:	01403204 	movi	r5,200
   40568:	00406a80 	call	406a8 <play_tone>
	  play_tone(silence,1);
   4056c:	01000044 	movi	r4,1
   40570:	01400044 	movi	r5,1
   40574:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_0,200);
   40578:	01003144 	movi	r4,197
   4057c:	01403204 	movi	r5,200
   40580:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,200);
   40584:	01002bc4 	movi	r4,175
   40588:	01403204 	movi	r5,200
   4058c:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_4,200);
   40590:	01002704 	movi	r4,156
   40594:	01403204 	movi	r5,200
   40598:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_2,300);
   4059c:	01002bc4 	movi	r4,175
   405a0:	01404b04 	movi	r5,300
   405a4:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_0,100);
   405a8:	01003144 	movi	r4,197
   405ac:	01401904 	movi	r5,100
   405b0:	00406a80 	call	406a8 <play_tone>
	  play_tone(silence,1);
   405b4:	01000044 	movi	r4,1
   405b8:	01400044 	movi	r5,1
   405bc:	00406a80 	call	406a8 <play_tone>
	  play_tone(G_0,400);
   405c0:	01003144 	movi	r4,197
   405c4:	01406404 	movi	r5,400
   405c8:	00406a80 	call	406a8 <play_tone>
	  play_tone(silence,400);
   405cc:	01000044 	movi	r4,1
   405d0:	01406404 	movi	r5,400
   405d4:	00406a80 	call	406a8 <play_tone>
		play_tone(HIGH_E_8,200);
		play_tone(HIGH_E_8,200);
		play_tone(HIGH_E_7,200);
		play_tone(HIGH_E_7,400);*/

	}
   405d8:	003f2d06 	br	40290 <__alt_data_end+0xfffca730>

000405dc <inject_noise>:
 *      Author: Usuario
 */

#include "karplus.h"

void inject_noise(){
   405dc:	defffc04 	addi	sp,sp,-16
   405e0:	dfc00315 	stw	ra,12(sp)
   405e4:	df000215 	stw	fp,8(sp)
   405e8:	df000204 	addi	fp,sp,8
	int i;
	int noise;
	IOWR(KARPLUS_STRONG_0_BASE,1,1);
   405ec:	00c00044 	movi	r3,1
   405f0:	00800234 	movhi	r2,8
   405f4:	10842904 	addi	r2,r2,4260
   405f8:	10c00035 	stwio	r3,0(r2)
	for(i=0;i<500;i++)
   405fc:	e03ffe15 	stw	zero,-8(fp)
   40600:	00001906 	br	40668 <inject_noise+0x8c>
	{
		noise=rand()*255;
   40604:	0040a080 	call	40a08 <rand>
   40608:	1009883a 	mov	r4,r2
   4060c:	01403fc4 	movi	r5,255
   40610:	00408fc0 	call	408fc <__mulsi3>
   40614:	e0bfff15 	stw	r2,-4(fp)
		IOWR(KARPLUS_STRONG_0_BASE,0,noise & 0x7fff);
   40618:	e0bfff17 	ldw	r2,-4(fp)
   4061c:	10dfffcc 	andi	r3,r2,32767
   40620:	00800234 	movhi	r2,8
   40624:	10842804 	addi	r2,r2,4256
   40628:	10c00035 	stwio	r3,0(r2)
		IOWR(KARPLUS_STRONG_0_BASE,3,0);
   4062c:	0007883a 	mov	r3,zero
   40630:	00800234 	movhi	r2,8
   40634:	10842b04 	addi	r2,r2,4268
   40638:	10c00035 	stwio	r3,0(r2)
		usleep(1);
   4063c:	01000044 	movi	r4,1
   40640:	0043e700 	call	43e70 <usleep>
		IOWR(KARPLUS_STRONG_0_BASE,3,1);
   40644:	00c00044 	movi	r3,1
   40648:	00800234 	movhi	r2,8
   4064c:	10842b04 	addi	r2,r2,4268
   40650:	10c00035 	stwio	r3,0(r2)
		usleep(1);
   40654:	01000044 	movi	r4,1
   40658:	0043e700 	call	43e70 <usleep>

void inject_noise(){
	int i;
	int noise;
	IOWR(KARPLUS_STRONG_0_BASE,1,1);
	for(i=0;i<500;i++)
   4065c:	e0bffe17 	ldw	r2,-8(fp)
   40660:	10800044 	addi	r2,r2,1
   40664:	e0bffe15 	stw	r2,-8(fp)
   40668:	e0bffe17 	ldw	r2,-8(fp)
   4066c:	10807d10 	cmplti	r2,r2,500
   40670:	103fe41e 	bne	r2,zero,40604 <__alt_data_end+0xfffcaaa4>
		IOWR(KARPLUS_STRONG_0_BASE,3,0);
		usleep(1);
		IOWR(KARPLUS_STRONG_0_BASE,3,1);
		usleep(1);
	}
	IOWR(KARPLUS_STRONG_0_BASE,3,0);
   40674:	0007883a 	mov	r3,zero
   40678:	00800234 	movhi	r2,8
   4067c:	10842b04 	addi	r2,r2,4268
   40680:	10c00035 	stwio	r3,0(r2)
	IOWR(KARPLUS_STRONG_0_BASE,1,0);
   40684:	0007883a 	mov	r3,zero
   40688:	00800234 	movhi	r2,8
   4068c:	10842904 	addi	r2,r2,4260
   40690:	10c00035 	stwio	r3,0(r2)
}
   40694:	e037883a 	mov	sp,fp
   40698:	dfc00117 	ldw	ra,4(sp)
   4069c:	df000017 	ldw	fp,0(sp)
   406a0:	dec00204 	addi	sp,sp,8
   406a4:	f800283a 	ret

000406a8 <play_tone>:

void play_tone(int nota, int time_ms){
   406a8:	defffc04 	addi	sp,sp,-16
   406ac:	dfc00315 	stw	ra,12(sp)
   406b0:	df000215 	stw	fp,8(sp)
   406b4:	df000204 	addi	fp,sp,8
   406b8:	e13ffe15 	stw	r4,-8(fp)
   406bc:	e17fff15 	stw	r5,-4(fp)
	IOWR(KARPLUS_STRONG_0_BASE,1,1);
   406c0:	00c00044 	movi	r3,1
   406c4:	00800234 	movhi	r2,8
   406c8:	10842904 	addi	r2,r2,4260
   406cc:	10c00035 	stwio	r3,0(r2)
	IOWR(KARPLUS_STRONG_0_BASE,2,nota);
   406d0:	00800234 	movhi	r2,8
   406d4:	10842a04 	addi	r2,r2,4264
   406d8:	e0fffe17 	ldw	r3,-8(fp)
   406dc:	10c00035 	stwio	r3,0(r2)
	inject_noise();
   406e0:	00405dc0 	call	405dc <inject_noise>
	usleep(time_ms*1000);
   406e4:	e13fff17 	ldw	r4,-4(fp)
   406e8:	0140fa04 	movi	r5,1000
   406ec:	00408fc0 	call	408fc <__mulsi3>
   406f0:	1009883a 	mov	r4,r2
   406f4:	0043e700 	call	43e70 <usleep>
}
   406f8:	e037883a 	mov	sp,fp
   406fc:	dfc00117 	ldw	ra,4(sp)
   40700:	df000017 	ldw	fp,0(sp)
   40704:	dec00204 	addi	sp,sp,8
   40708:	f800283a 	ret

0004070c <set_karplus_frequency>:

void set_karplus_frequency(int frecuencia){
   4070c:	defffc04 	addi	sp,sp,-16
   40710:	dfc00315 	stw	ra,12(sp)
   40714:	df000215 	stw	fp,8(sp)
   40718:	df000204 	addi	fp,sp,8
   4071c:	e13fff15 	stw	r4,-4(fp)
	int in_freq=(50000000/(2*frecuencia))-1;
   40720:	e0bfff17 	ldw	r2,-4(fp)
   40724:	1085883a 	add	r2,r2,r2
   40728:	0100bef4 	movhi	r4,763
   4072c:	213c2004 	addi	r4,r4,-3968
   40730:	100b883a 	mov	r5,r2
   40734:	004083c0 	call	4083c <__divsi3>
   40738:	10bfffc4 	addi	r2,r2,-1
   4073c:	e0bffe15 	stw	r2,-8(fp)
	IOWR(KARPLUS_STRONG_0_BASE,4,in_freq);
   40740:	00800234 	movhi	r2,8
   40744:	10842c04 	addi	r2,r2,4272
   40748:	e0fffe17 	ldw	r3,-8(fp)
   4074c:	10c00035 	stwio	r3,0(r2)
}
   40750:	e037883a 	mov	sp,fp
   40754:	dfc00117 	ldw	ra,4(sp)
   40758:	df000017 	ldw	fp,0(sp)
   4075c:	dec00204 	addi	sp,sp,8
   40760:	f800283a 	ret

00040764 <init_karplus>:

void init_karplus(){
   40764:	defffe04 	addi	sp,sp,-8
   40768:	dfc00115 	stw	ra,4(sp)
   4076c:	df000015 	stw	fp,0(sp)
   40770:	d839883a 	mov	fp,sp
	IOWR(KARPLUS_STRONG_0_BASE,0,0);
   40774:	0007883a 	mov	r3,zero
   40778:	00800234 	movhi	r2,8
   4077c:	10842804 	addi	r2,r2,4256
   40780:	10c00035 	stwio	r3,0(r2)
	IOWR(KARPLUS_STRONG_0_BASE,1,0);
   40784:	0007883a 	mov	r3,zero
   40788:	00800234 	movhi	r2,8
   4078c:	10842904 	addi	r2,r2,4260
   40790:	10c00035 	stwio	r3,0(r2)
	IOWR(KARPLUS_STRONG_0_BASE,2,0);
   40794:	0007883a 	mov	r3,zero
   40798:	00800234 	movhi	r2,8
   4079c:	10842a04 	addi	r2,r2,4264
   407a0:	10c00035 	stwio	r3,0(r2)
	IOWR(KARPLUS_STRONG_0_BASE,3,0);
   407a4:	0007883a 	mov	r3,zero
   407a8:	00800234 	movhi	r2,8
   407ac:	10842b04 	addi	r2,r2,4268
   407b0:	10c00035 	stwio	r3,0(r2)

	set_karplus_frequency(44100);
   407b4:	012b1114 	movui	r4,44100
   407b8:	004070c0 	call	4070c <set_karplus_frequency>
}
   407bc:	e037883a 	mov	sp,fp
   407c0:	dfc00117 	ldw	ra,4(sp)
   407c4:	df000017 	ldw	fp,0(sp)
   407c8:	dec00204 	addi	sp,sp,8
   407cc:	f800283a 	ret

000407d0 <udivmodsi4>:
   407d0:	2900182e 	bgeu	r5,r4,40834 <udivmodsi4+0x64>
   407d4:	28001716 	blt	r5,zero,40834 <udivmodsi4+0x64>
   407d8:	00800804 	movi	r2,32
   407dc:	00c00044 	movi	r3,1
   407e0:	00000206 	br	407ec <udivmodsi4+0x1c>
   407e4:	10001126 	beq	r2,zero,4082c <udivmodsi4+0x5c>
   407e8:	28000516 	blt	r5,zero,40800 <udivmodsi4+0x30>
   407ec:	294b883a 	add	r5,r5,r5
   407f0:	10bfffc4 	addi	r2,r2,-1
   407f4:	18c7883a 	add	r3,r3,r3
   407f8:	293ffa36 	bltu	r5,r4,407e4 <__alt_data_end+0xfffcac84>
   407fc:	18000b26 	beq	r3,zero,4082c <udivmodsi4+0x5c>
   40800:	0005883a 	mov	r2,zero
   40804:	21400236 	bltu	r4,r5,40810 <udivmodsi4+0x40>
   40808:	2149c83a 	sub	r4,r4,r5
   4080c:	10c4b03a 	or	r2,r2,r3
   40810:	1806d07a 	srli	r3,r3,1
   40814:	280ad07a 	srli	r5,r5,1
   40818:	183ffa1e 	bne	r3,zero,40804 <__alt_data_end+0xfffcaca4>
   4081c:	3000011e 	bne	r6,zero,40824 <udivmodsi4+0x54>
   40820:	f800283a 	ret
   40824:	2005883a 	mov	r2,r4
   40828:	f800283a 	ret
   4082c:	0005883a 	mov	r2,zero
   40830:	003ffa06 	br	4081c <__alt_data_end+0xfffcacbc>
   40834:	00c00044 	movi	r3,1
   40838:	003ff106 	br	40800 <__alt_data_end+0xfffcaca0>

0004083c <__divsi3>:
   4083c:	defffe04 	addi	sp,sp,-8
   40840:	dfc00115 	stw	ra,4(sp)
   40844:	dc000015 	stw	r16,0(sp)
   40848:	20000b16 	blt	r4,zero,40878 <__divsi3+0x3c>
   4084c:	0021883a 	mov	r16,zero
   40850:	28000c16 	blt	r5,zero,40884 <__divsi3+0x48>
   40854:	000d883a 	mov	r6,zero
   40858:	00407d00 	call	407d0 <udivmodsi4>
   4085c:	0407c83a 	sub	r3,zero,r16
   40860:	1884f03a 	xor	r2,r3,r2
   40864:	1405883a 	add	r2,r2,r16
   40868:	dfc00117 	ldw	ra,4(sp)
   4086c:	dc000017 	ldw	r16,0(sp)
   40870:	dec00204 	addi	sp,sp,8
   40874:	f800283a 	ret
   40878:	0109c83a 	sub	r4,zero,r4
   4087c:	04000044 	movi	r16,1
   40880:	283ff40e 	bge	r5,zero,40854 <__alt_data_end+0xfffcacf4>
   40884:	014bc83a 	sub	r5,zero,r5
   40888:	8400005c 	xori	r16,r16,1
   4088c:	003ff106 	br	40854 <__alt_data_end+0xfffcacf4>

00040890 <__modsi3>:
   40890:	defffd04 	addi	sp,sp,-12
   40894:	dfc00215 	stw	ra,8(sp)
   40898:	dc400115 	stw	r17,4(sp)
   4089c:	dc000015 	stw	r16,0(sp)
   408a0:	20000c16 	blt	r4,zero,408d4 <__modsi3+0x44>
   408a4:	0023883a 	mov	r17,zero
   408a8:	0021883a 	mov	r16,zero
   408ac:	28000d16 	blt	r5,zero,408e4 <__modsi3+0x54>
   408b0:	01800044 	movi	r6,1
   408b4:	00407d00 	call	407d0 <udivmodsi4>
   408b8:	1404f03a 	xor	r2,r2,r16
   408bc:	8885883a 	add	r2,r17,r2
   408c0:	dfc00217 	ldw	ra,8(sp)
   408c4:	dc400117 	ldw	r17,4(sp)
   408c8:	dc000017 	ldw	r16,0(sp)
   408cc:	dec00304 	addi	sp,sp,12
   408d0:	f800283a 	ret
   408d4:	0109c83a 	sub	r4,zero,r4
   408d8:	04400044 	movi	r17,1
   408dc:	043fffc4 	movi	r16,-1
   408e0:	283ff30e 	bge	r5,zero,408b0 <__alt_data_end+0xfffcad50>
   408e4:	014bc83a 	sub	r5,zero,r5
   408e8:	003ff106 	br	408b0 <__alt_data_end+0xfffcad50>

000408ec <__udivsi3>:
   408ec:	000d883a 	mov	r6,zero
   408f0:	00407d01 	jmpi	407d0 <udivmodsi4>

000408f4 <__umodsi3>:
   408f4:	01800044 	movi	r6,1
   408f8:	00407d01 	jmpi	407d0 <udivmodsi4>

000408fc <__mulsi3>:
   408fc:	0005883a 	mov	r2,zero
   40900:	20000726 	beq	r4,zero,40920 <__mulsi3+0x24>
   40904:	20c0004c 	andi	r3,r4,1
   40908:	2008d07a 	srli	r4,r4,1
   4090c:	18000126 	beq	r3,zero,40914 <__mulsi3+0x18>
   40910:	1145883a 	add	r2,r2,r5
   40914:	294b883a 	add	r5,r5,r5
   40918:	203ffa1e 	bne	r4,zero,40904 <__alt_data_end+0xfffcada4>
   4091c:	f800283a 	ret
   40920:	f800283a 	ret

00040924 <_puts_r>:
   40924:	defff604 	addi	sp,sp,-40
   40928:	dc000715 	stw	r16,28(sp)
   4092c:	2021883a 	mov	r16,r4
   40930:	2809883a 	mov	r4,r5
   40934:	dc400815 	stw	r17,32(sp)
   40938:	dfc00915 	stw	ra,36(sp)
   4093c:	2823883a 	mov	r17,r5
   40940:	0040a6c0 	call	40a6c <strlen>
   40944:	00c00174 	movhi	r3,5
   40948:	18e10704 	addi	r3,r3,-31716
   4094c:	18c00017 	ldw	r3,0(r3)
   40950:	11000044 	addi	r4,r2,1
   40954:	d8800115 	stw	r2,4(sp)
   40958:	18c00217 	ldw	r3,8(r3)
   4095c:	01400134 	movhi	r5,4
   40960:	295a3804 	addi	r5,r5,26848
   40964:	1880030b 	ldhu	r2,12(r3)
   40968:	d9400215 	stw	r5,8(sp)
   4096c:	d9000615 	stw	r4,24(sp)
   40970:	01400044 	movi	r5,1
   40974:	01000084 	movi	r4,2
   40978:	d9000515 	stw	r4,20(sp)
   4097c:	dc400015 	stw	r17,0(sp)
   40980:	d9400315 	stw	r5,12(sp)
   40984:	dec00415 	stw	sp,16(sp)
   40988:	1108000c 	andi	r4,r2,8192
   4098c:	2000061e 	bne	r4,zero,409a8 <_puts_r+0x84>
   40990:	19401917 	ldw	r5,100(r3)
   40994:	0137ffc4 	movi	r4,-8193
   40998:	10880014 	ori	r2,r2,8192
   4099c:	2908703a 	and	r4,r5,r4
   409a0:	1880030d 	sth	r2,12(r3)
   409a4:	19001915 	stw	r4,100(r3)
   409a8:	81400217 	ldw	r5,8(r16)
   409ac:	8009883a 	mov	r4,r16
   409b0:	d9800404 	addi	r6,sp,16
   409b4:	0040b040 	call	40b04 <__sfvwrite_r>
   409b8:	1000061e 	bne	r2,zero,409d4 <_puts_r+0xb0>
   409bc:	00800284 	movi	r2,10
   409c0:	dfc00917 	ldw	ra,36(sp)
   409c4:	dc400817 	ldw	r17,32(sp)
   409c8:	dc000717 	ldw	r16,28(sp)
   409cc:	dec00a04 	addi	sp,sp,40
   409d0:	f800283a 	ret
   409d4:	00bfffc4 	movi	r2,-1
   409d8:	003ff906 	br	409c0 <__alt_data_end+0xfffcae60>

000409dc <puts>:
   409dc:	00800174 	movhi	r2,5
   409e0:	10a10704 	addi	r2,r2,-31716
   409e4:	200b883a 	mov	r5,r4
   409e8:	11000017 	ldw	r4,0(r2)
   409ec:	00409241 	jmpi	40924 <_puts_r>

000409f0 <srand>:
   409f0:	00800174 	movhi	r2,5
   409f4:	10a10704 	addi	r2,r2,-31716
   409f8:	10800017 	ldw	r2,0(r2)
   409fc:	11002915 	stw	r4,164(r2)
   40a00:	10002a15 	stw	zero,168(r2)
   40a04:	f800283a 	ret

00040a08 <rand>:
   40a08:	00800174 	movhi	r2,5
   40a0c:	defffe04 	addi	sp,sp,-8
   40a10:	10a10704 	addi	r2,r2,-31716
   40a14:	dc000015 	stw	r16,0(sp)
   40a18:	14000017 	ldw	r16,0(r2)
   40a1c:	dfc00115 	stw	ra,4(sp)
   40a20:	01932574 	movhi	r6,19605
   40a24:	81002917 	ldw	r4,164(r16)
   40a28:	81402a17 	ldw	r5,168(r16)
   40a2c:	01d614b4 	movhi	r7,22610
   40a30:	319fcb44 	addi	r6,r6,32557
   40a34:	39fd0b44 	addi	r7,r7,-3027
   40a38:	00434c00 	call	434c0 <__muldi3>
   40a3c:	11000044 	addi	r4,r2,1
   40a40:	2085803a 	cmpltu	r2,r4,r2
   40a44:	10c7883a 	add	r3,r2,r3
   40a48:	00a00034 	movhi	r2,32768
   40a4c:	10bfffc4 	addi	r2,r2,-1
   40a50:	1884703a 	and	r2,r3,r2
   40a54:	81002915 	stw	r4,164(r16)
   40a58:	80c02a15 	stw	r3,168(r16)
   40a5c:	dfc00117 	ldw	ra,4(sp)
   40a60:	dc000017 	ldw	r16,0(sp)
   40a64:	dec00204 	addi	sp,sp,8
   40a68:	f800283a 	ret

00040a6c <strlen>:
   40a6c:	208000cc 	andi	r2,r4,3
   40a70:	10002026 	beq	r2,zero,40af4 <strlen+0x88>
   40a74:	20800007 	ldb	r2,0(r4)
   40a78:	10002026 	beq	r2,zero,40afc <strlen+0x90>
   40a7c:	2005883a 	mov	r2,r4
   40a80:	00000206 	br	40a8c <strlen+0x20>
   40a84:	10c00007 	ldb	r3,0(r2)
   40a88:	18001826 	beq	r3,zero,40aec <strlen+0x80>
   40a8c:	10800044 	addi	r2,r2,1
   40a90:	10c000cc 	andi	r3,r2,3
   40a94:	183ffb1e 	bne	r3,zero,40a84 <__alt_data_end+0xfffcaf24>
   40a98:	10c00017 	ldw	r3,0(r2)
   40a9c:	01ffbff4 	movhi	r7,65279
   40aa0:	39ffbfc4 	addi	r7,r7,-257
   40aa4:	00ca303a 	nor	r5,zero,r3
   40aa8:	01a02074 	movhi	r6,32897
   40aac:	19c7883a 	add	r3,r3,r7
   40ab0:	31a02004 	addi	r6,r6,-32640
   40ab4:	1946703a 	and	r3,r3,r5
   40ab8:	1986703a 	and	r3,r3,r6
   40abc:	1800091e 	bne	r3,zero,40ae4 <strlen+0x78>
   40ac0:	10800104 	addi	r2,r2,4
   40ac4:	10c00017 	ldw	r3,0(r2)
   40ac8:	19cb883a 	add	r5,r3,r7
   40acc:	00c6303a 	nor	r3,zero,r3
   40ad0:	28c6703a 	and	r3,r5,r3
   40ad4:	1986703a 	and	r3,r3,r6
   40ad8:	183ff926 	beq	r3,zero,40ac0 <__alt_data_end+0xfffcaf60>
   40adc:	00000106 	br	40ae4 <strlen+0x78>
   40ae0:	10800044 	addi	r2,r2,1
   40ae4:	10c00007 	ldb	r3,0(r2)
   40ae8:	183ffd1e 	bne	r3,zero,40ae0 <__alt_data_end+0xfffcaf80>
   40aec:	1105c83a 	sub	r2,r2,r4
   40af0:	f800283a 	ret
   40af4:	2005883a 	mov	r2,r4
   40af8:	003fe706 	br	40a98 <__alt_data_end+0xfffcaf38>
   40afc:	0005883a 	mov	r2,zero
   40b00:	f800283a 	ret

00040b04 <__sfvwrite_r>:
   40b04:	30800217 	ldw	r2,8(r6)
   40b08:	10004526 	beq	r2,zero,40c20 <__sfvwrite_r+0x11c>
   40b0c:	28c0030b 	ldhu	r3,12(r5)
   40b10:	defff404 	addi	sp,sp,-48
   40b14:	dd400715 	stw	r21,28(sp)
   40b18:	dcc00515 	stw	r19,20(sp)
   40b1c:	dc000215 	stw	r16,8(sp)
   40b20:	dfc00b15 	stw	ra,44(sp)
   40b24:	df000a15 	stw	fp,40(sp)
   40b28:	ddc00915 	stw	r23,36(sp)
   40b2c:	dd800815 	stw	r22,32(sp)
   40b30:	dd000615 	stw	r20,24(sp)
   40b34:	dc800415 	stw	r18,16(sp)
   40b38:	dc400315 	stw	r17,12(sp)
   40b3c:	1880020c 	andi	r2,r3,8
   40b40:	2821883a 	mov	r16,r5
   40b44:	202b883a 	mov	r21,r4
   40b48:	3027883a 	mov	r19,r6
   40b4c:	10002526 	beq	r2,zero,40be4 <__sfvwrite_r+0xe0>
   40b50:	28800417 	ldw	r2,16(r5)
   40b54:	10002326 	beq	r2,zero,40be4 <__sfvwrite_r+0xe0>
   40b58:	1880008c 	andi	r2,r3,2
   40b5c:	9c400017 	ldw	r17,0(r19)
   40b60:	10003126 	beq	r2,zero,40c28 <__sfvwrite_r+0x124>
   40b64:	0029883a 	mov	r20,zero
   40b68:	0025883a 	mov	r18,zero
   40b6c:	05810004 	movi	r22,1024
   40b70:	a00d883a 	mov	r6,r20
   40b74:	a809883a 	mov	r4,r21
   40b78:	90002526 	beq	r18,zero,40c10 <__sfvwrite_r+0x10c>
   40b7c:	900f883a 	mov	r7,r18
   40b80:	81400717 	ldw	r5,28(r16)
   40b84:	b480012e 	bgeu	r22,r18,40b8c <__sfvwrite_r+0x88>
   40b88:	01c10004 	movi	r7,1024
   40b8c:	80800917 	ldw	r2,36(r16)
   40b90:	103ee83a 	callr	r2
   40b94:	0080510e 	bge	zero,r2,40cdc <__sfvwrite_r+0x1d8>
   40b98:	98c00217 	ldw	r3,8(r19)
   40b9c:	a0a9883a 	add	r20,r20,r2
   40ba0:	90a5c83a 	sub	r18,r18,r2
   40ba4:	1885c83a 	sub	r2,r3,r2
   40ba8:	98800215 	stw	r2,8(r19)
   40bac:	103ff01e 	bne	r2,zero,40b70 <__alt_data_end+0xfffcb010>
   40bb0:	0005883a 	mov	r2,zero
   40bb4:	dfc00b17 	ldw	ra,44(sp)
   40bb8:	df000a17 	ldw	fp,40(sp)
   40bbc:	ddc00917 	ldw	r23,36(sp)
   40bc0:	dd800817 	ldw	r22,32(sp)
   40bc4:	dd400717 	ldw	r21,28(sp)
   40bc8:	dd000617 	ldw	r20,24(sp)
   40bcc:	dcc00517 	ldw	r19,20(sp)
   40bd0:	dc800417 	ldw	r18,16(sp)
   40bd4:	dc400317 	ldw	r17,12(sp)
   40bd8:	dc000217 	ldw	r16,8(sp)
   40bdc:	dec00c04 	addi	sp,sp,48
   40be0:	f800283a 	ret
   40be4:	a809883a 	mov	r4,r21
   40be8:	800b883a 	mov	r5,r16
   40bec:	00420c00 	call	420c0 <__swsetup_r>
   40bf0:	80c0030b 	ldhu	r3,12(r16)
   40bf4:	103fd826 	beq	r2,zero,40b58 <__alt_data_end+0xfffcaff8>
   40bf8:	18c01014 	ori	r3,r3,64
   40bfc:	80c0030d 	sth	r3,12(r16)
   40c00:	00c00244 	movi	r3,9
   40c04:	00bfffc4 	movi	r2,-1
   40c08:	a8c00015 	stw	r3,0(r21)
   40c0c:	003fe906 	br	40bb4 <__alt_data_end+0xfffcb054>
   40c10:	8d000017 	ldw	r20,0(r17)
   40c14:	8c800117 	ldw	r18,4(r17)
   40c18:	8c400204 	addi	r17,r17,8
   40c1c:	003fd406 	br	40b70 <__alt_data_end+0xfffcb010>
   40c20:	0005883a 	mov	r2,zero
   40c24:	f800283a 	ret
   40c28:	1880004c 	andi	r2,r3,1
   40c2c:	1000301e 	bne	r2,zero,40cf0 <__sfvwrite_r+0x1ec>
   40c30:	002f883a 	mov	r23,zero
   40c34:	0025883a 	mov	r18,zero
   40c38:	90001c26 	beq	r18,zero,40cac <__sfvwrite_r+0x1a8>
   40c3c:	1880800c 	andi	r2,r3,512
   40c40:	85000217 	ldw	r20,8(r16)
   40c44:	10006c26 	beq	r2,zero,40df8 <__sfvwrite_r+0x2f4>
   40c48:	a02d883a 	mov	r22,r20
   40c4c:	95008536 	bltu	r18,r20,40e64 <__sfvwrite_r+0x360>
   40c50:	1881200c 	andi	r2,r3,1152
   40c54:	10009d1e 	bne	r2,zero,40ecc <__sfvwrite_r+0x3c8>
   40c58:	81000017 	ldw	r4,0(r16)
   40c5c:	a039883a 	mov	fp,r20
   40c60:	9029883a 	mov	r20,r18
   40c64:	b80b883a 	mov	r5,r23
   40c68:	b00d883a 	mov	r6,r22
   40c6c:	00419700 	call	41970 <memmove>
   40c70:	80c00217 	ldw	r3,8(r16)
   40c74:	81000017 	ldw	r4,0(r16)
   40c78:	9005883a 	mov	r2,r18
   40c7c:	1f39c83a 	sub	fp,r3,fp
   40c80:	258f883a 	add	r7,r4,r22
   40c84:	87000215 	stw	fp,8(r16)
   40c88:	81c00015 	stw	r7,0(r16)
   40c8c:	98c00217 	ldw	r3,8(r19)
   40c90:	b8af883a 	add	r23,r23,r2
   40c94:	90a5c83a 	sub	r18,r18,r2
   40c98:	1d05c83a 	sub	r2,r3,r20
   40c9c:	98800215 	stw	r2,8(r19)
   40ca0:	103fc326 	beq	r2,zero,40bb0 <__alt_data_end+0xfffcb050>
   40ca4:	80c0030b 	ldhu	r3,12(r16)
   40ca8:	903fe41e 	bne	r18,zero,40c3c <__alt_data_end+0xfffcb0dc>
   40cac:	8dc00017 	ldw	r23,0(r17)
   40cb0:	8c800117 	ldw	r18,4(r17)
   40cb4:	8c400204 	addi	r17,r17,8
   40cb8:	003fdf06 	br	40c38 <__alt_data_end+0xfffcb0d8>
   40cbc:	0041acc0 	call	41acc <_realloc_r>
   40cc0:	102d883a 	mov	r22,r2
   40cc4:	1000a01e 	bne	r2,zero,40f48 <__sfvwrite_r+0x444>
   40cc8:	81400417 	ldw	r5,16(r16)
   40ccc:	a809883a 	mov	r4,r21
   40cd0:	00429200 	call	42920 <_free_r>
   40cd4:	00800304 	movi	r2,12
   40cd8:	a8800015 	stw	r2,0(r21)
   40cdc:	80c0030b 	ldhu	r3,12(r16)
   40ce0:	00bfffc4 	movi	r2,-1
   40ce4:	18c01014 	ori	r3,r3,64
   40ce8:	80c0030d 	sth	r3,12(r16)
   40cec:	003fb106 	br	40bb4 <__alt_data_end+0xfffcb054>
   40cf0:	0029883a 	mov	r20,zero
   40cf4:	0011883a 	mov	r8,zero
   40cf8:	0039883a 	mov	fp,zero
   40cfc:	0025883a 	mov	r18,zero
   40d00:	90001f26 	beq	r18,zero,40d80 <__sfvwrite_r+0x27c>
   40d04:	40006826 	beq	r8,zero,40ea8 <__sfvwrite_r+0x3a4>
   40d08:	a02f883a 	mov	r23,r20
   40d0c:	9500012e 	bgeu	r18,r20,40d14 <__sfvwrite_r+0x210>
   40d10:	902f883a 	mov	r23,r18
   40d14:	81000017 	ldw	r4,0(r16)
   40d18:	80800417 	ldw	r2,16(r16)
   40d1c:	b82d883a 	mov	r22,r23
   40d20:	81800217 	ldw	r6,8(r16)
   40d24:	81c00517 	ldw	r7,20(r16)
   40d28:	1100022e 	bgeu	r2,r4,40d34 <__sfvwrite_r+0x230>
   40d2c:	31c7883a 	add	r3,r6,r7
   40d30:	1dc01816 	blt	r3,r23,40d94 <__sfvwrite_r+0x290>
   40d34:	b9c03f16 	blt	r23,r7,40e34 <__sfvwrite_r+0x330>
   40d38:	80800917 	ldw	r2,36(r16)
   40d3c:	81400717 	ldw	r5,28(r16)
   40d40:	a809883a 	mov	r4,r21
   40d44:	da000115 	stw	r8,4(sp)
   40d48:	e00d883a 	mov	r6,fp
   40d4c:	103ee83a 	callr	r2
   40d50:	102d883a 	mov	r22,r2
   40d54:	da000117 	ldw	r8,4(sp)
   40d58:	00bfe00e 	bge	zero,r2,40cdc <__alt_data_end+0xfffcb17c>
   40d5c:	a5a9c83a 	sub	r20,r20,r22
   40d60:	a0001f26 	beq	r20,zero,40de0 <__sfvwrite_r+0x2dc>
   40d64:	98800217 	ldw	r2,8(r19)
   40d68:	e5b9883a 	add	fp,fp,r22
   40d6c:	95a5c83a 	sub	r18,r18,r22
   40d70:	15adc83a 	sub	r22,r2,r22
   40d74:	9d800215 	stw	r22,8(r19)
   40d78:	b03f8d26 	beq	r22,zero,40bb0 <__alt_data_end+0xfffcb050>
   40d7c:	903fe11e 	bne	r18,zero,40d04 <__alt_data_end+0xfffcb1a4>
   40d80:	8f000017 	ldw	fp,0(r17)
   40d84:	8c800117 	ldw	r18,4(r17)
   40d88:	0011883a 	mov	r8,zero
   40d8c:	8c400204 	addi	r17,r17,8
   40d90:	003fdb06 	br	40d00 <__alt_data_end+0xfffcb1a0>
   40d94:	180d883a 	mov	r6,r3
   40d98:	e00b883a 	mov	r5,fp
   40d9c:	da000115 	stw	r8,4(sp)
   40da0:	d8c00015 	stw	r3,0(sp)
   40da4:	00419700 	call	41970 <memmove>
   40da8:	d8c00017 	ldw	r3,0(sp)
   40dac:	80800017 	ldw	r2,0(r16)
   40db0:	a809883a 	mov	r4,r21
   40db4:	800b883a 	mov	r5,r16
   40db8:	10c5883a 	add	r2,r2,r3
   40dbc:	80800015 	stw	r2,0(r16)
   40dc0:	d8c00015 	stw	r3,0(sp)
   40dc4:	00421f00 	call	421f0 <_fflush_r>
   40dc8:	d8c00017 	ldw	r3,0(sp)
   40dcc:	da000117 	ldw	r8,4(sp)
   40dd0:	103fc21e 	bne	r2,zero,40cdc <__alt_data_end+0xfffcb17c>
   40dd4:	182d883a 	mov	r22,r3
   40dd8:	a5a9c83a 	sub	r20,r20,r22
   40ddc:	a03fe11e 	bne	r20,zero,40d64 <__alt_data_end+0xfffcb204>
   40de0:	a809883a 	mov	r4,r21
   40de4:	800b883a 	mov	r5,r16
   40de8:	00421f00 	call	421f0 <_fflush_r>
   40dec:	103fbb1e 	bne	r2,zero,40cdc <__alt_data_end+0xfffcb17c>
   40df0:	0011883a 	mov	r8,zero
   40df4:	003fdb06 	br	40d64 <__alt_data_end+0xfffcb204>
   40df8:	81000017 	ldw	r4,0(r16)
   40dfc:	80800417 	ldw	r2,16(r16)
   40e00:	1100012e 	bgeu	r2,r4,40e08 <__sfvwrite_r+0x304>
   40e04:	a4805a36 	bltu	r20,r18,40f70 <__sfvwrite_r+0x46c>
   40e08:	81c00517 	ldw	r7,20(r16)
   40e0c:	91c01a36 	bltu	r18,r7,40e78 <__sfvwrite_r+0x374>
   40e10:	80800917 	ldw	r2,36(r16)
   40e14:	81400717 	ldw	r5,28(r16)
   40e18:	a809883a 	mov	r4,r21
   40e1c:	b80d883a 	mov	r6,r23
   40e20:	103ee83a 	callr	r2
   40e24:	1029883a 	mov	r20,r2
   40e28:	00bfac0e 	bge	zero,r2,40cdc <__alt_data_end+0xfffcb17c>
   40e2c:	a005883a 	mov	r2,r20
   40e30:	003f9606 	br	40c8c <__alt_data_end+0xfffcb12c>
   40e34:	b80d883a 	mov	r6,r23
   40e38:	e00b883a 	mov	r5,fp
   40e3c:	da000115 	stw	r8,4(sp)
   40e40:	00419700 	call	41970 <memmove>
   40e44:	80800217 	ldw	r2,8(r16)
   40e48:	80c00017 	ldw	r3,0(r16)
   40e4c:	da000117 	ldw	r8,4(sp)
   40e50:	15c5c83a 	sub	r2,r2,r23
   40e54:	1def883a 	add	r23,r3,r23
   40e58:	80800215 	stw	r2,8(r16)
   40e5c:	85c00015 	stw	r23,0(r16)
   40e60:	003fbe06 	br	40d5c <__alt_data_end+0xfffcb1fc>
   40e64:	81000017 	ldw	r4,0(r16)
   40e68:	9039883a 	mov	fp,r18
   40e6c:	9029883a 	mov	r20,r18
   40e70:	902d883a 	mov	r22,r18
   40e74:	003f7b06 	br	40c64 <__alt_data_end+0xfffcb104>
   40e78:	b80b883a 	mov	r5,r23
   40e7c:	900d883a 	mov	r6,r18
   40e80:	00419700 	call	41970 <memmove>
   40e84:	80c00217 	ldw	r3,8(r16)
   40e88:	80800017 	ldw	r2,0(r16)
   40e8c:	9029883a 	mov	r20,r18
   40e90:	1c87c83a 	sub	r3,r3,r18
   40e94:	1485883a 	add	r2,r2,r18
   40e98:	80800015 	stw	r2,0(r16)
   40e9c:	80c00215 	stw	r3,8(r16)
   40ea0:	9005883a 	mov	r2,r18
   40ea4:	003f7906 	br	40c8c <__alt_data_end+0xfffcb12c>
   40ea8:	e009883a 	mov	r4,fp
   40eac:	01400284 	movi	r5,10
   40eb0:	900d883a 	mov	r6,r18
   40eb4:	00417500 	call	41750 <memchr>
   40eb8:	10003826 	beq	r2,zero,40f9c <__sfvwrite_r+0x498>
   40ebc:	10800044 	addi	r2,r2,1
   40ec0:	1729c83a 	sub	r20,r2,fp
   40ec4:	02000044 	movi	r8,1
   40ec8:	003f8f06 	br	40d08 <__alt_data_end+0xfffcb1a8>
   40ecc:	80800517 	ldw	r2,20(r16)
   40ed0:	81400417 	ldw	r5,16(r16)
   40ed4:	87000017 	ldw	fp,0(r16)
   40ed8:	10a9883a 	add	r20,r2,r2
   40edc:	a085883a 	add	r2,r20,r2
   40ee0:	1028d7fa 	srli	r20,r2,31
   40ee4:	e179c83a 	sub	fp,fp,r5
   40ee8:	e1000044 	addi	r4,fp,1
   40eec:	a085883a 	add	r2,r20,r2
   40ef0:	1029d07a 	srai	r20,r2,1
   40ef4:	2485883a 	add	r2,r4,r18
   40ef8:	a00d883a 	mov	r6,r20
   40efc:	a080022e 	bgeu	r20,r2,40f08 <__sfvwrite_r+0x404>
   40f00:	1029883a 	mov	r20,r2
   40f04:	100d883a 	mov	r6,r2
   40f08:	18c1000c 	andi	r3,r3,1024
   40f0c:	a809883a 	mov	r4,r21
   40f10:	183f6a26 	beq	r3,zero,40cbc <__alt_data_end+0xfffcb15c>
   40f14:	300b883a 	mov	r5,r6
   40f18:	0040fa80 	call	40fa8 <_malloc_r>
   40f1c:	102d883a 	mov	r22,r2
   40f20:	103f6c26 	beq	r2,zero,40cd4 <__alt_data_end+0xfffcb174>
   40f24:	81400417 	ldw	r5,16(r16)
   40f28:	1009883a 	mov	r4,r2
   40f2c:	e00d883a 	mov	r6,fp
   40f30:	00418380 	call	41838 <memcpy>
   40f34:	8080030b 	ldhu	r2,12(r16)
   40f38:	00fedfc4 	movi	r3,-1153
   40f3c:	10c4703a 	and	r2,r2,r3
   40f40:	10802014 	ori	r2,r2,128
   40f44:	8080030d 	sth	r2,12(r16)
   40f48:	b709883a 	add	r4,r22,fp
   40f4c:	a707c83a 	sub	r3,r20,fp
   40f50:	85800415 	stw	r22,16(r16)
   40f54:	85000515 	stw	r20,20(r16)
   40f58:	81000015 	stw	r4,0(r16)
   40f5c:	9039883a 	mov	fp,r18
   40f60:	80c00215 	stw	r3,8(r16)
   40f64:	9029883a 	mov	r20,r18
   40f68:	902d883a 	mov	r22,r18
   40f6c:	003f3d06 	br	40c64 <__alt_data_end+0xfffcb104>
   40f70:	b80b883a 	mov	r5,r23
   40f74:	a00d883a 	mov	r6,r20
   40f78:	00419700 	call	41970 <memmove>
   40f7c:	80800017 	ldw	r2,0(r16)
   40f80:	a809883a 	mov	r4,r21
   40f84:	800b883a 	mov	r5,r16
   40f88:	1505883a 	add	r2,r2,r20
   40f8c:	80800015 	stw	r2,0(r16)
   40f90:	00421f00 	call	421f0 <_fflush_r>
   40f94:	103fa526 	beq	r2,zero,40e2c <__alt_data_end+0xfffcb2cc>
   40f98:	003f5006 	br	40cdc <__alt_data_end+0xfffcb17c>
   40f9c:	95000044 	addi	r20,r18,1
   40fa0:	02000044 	movi	r8,1
   40fa4:	003f5806 	br	40d08 <__alt_data_end+0xfffcb1a8>

00040fa8 <_malloc_r>:
   40fa8:	defff504 	addi	sp,sp,-44
   40fac:	dc800315 	stw	r18,12(sp)
   40fb0:	dfc00a15 	stw	ra,40(sp)
   40fb4:	df000915 	stw	fp,36(sp)
   40fb8:	ddc00815 	stw	r23,32(sp)
   40fbc:	dd800715 	stw	r22,28(sp)
   40fc0:	dd400615 	stw	r21,24(sp)
   40fc4:	dd000515 	stw	r20,20(sp)
   40fc8:	dcc00415 	stw	r19,16(sp)
   40fcc:	dc400215 	stw	r17,8(sp)
   40fd0:	dc000115 	stw	r16,4(sp)
   40fd4:	288002c4 	addi	r2,r5,11
   40fd8:	00c00584 	movi	r3,22
   40fdc:	2025883a 	mov	r18,r4
   40fe0:	18802a2e 	bgeu	r3,r2,4108c <_malloc_r+0xe4>
   40fe4:	047ffe04 	movi	r17,-8
   40fe8:	1462703a 	and	r17,r2,r17
   40fec:	88009e16 	blt	r17,zero,41268 <_malloc_r+0x2c0>
   40ff0:	89409d36 	bltu	r17,r5,41268 <_malloc_r+0x2c0>
   40ff4:	0043bac0 	call	43bac <__malloc_lock>
   40ff8:	00807dc4 	movi	r2,503
   40ffc:	14402736 	bltu	r2,r17,4109c <_malloc_r+0xf4>
   41000:	8806d0fa 	srli	r3,r17,3
   41004:	04c00134 	movhi	r19,4
   41008:	9cdb5104 	addi	r19,r19,27972
   4100c:	18c5883a 	add	r2,r3,r3
   41010:	1085883a 	add	r2,r2,r2
   41014:	1085883a 	add	r2,r2,r2
   41018:	9885883a 	add	r2,r19,r2
   4101c:	14000317 	ldw	r16,12(r2)
   41020:	80814a26 	beq	r16,r2,4154c <_malloc_r+0x5a4>
   41024:	80c00117 	ldw	r3,4(r16)
   41028:	81000317 	ldw	r4,12(r16)
   4102c:	00bfff04 	movi	r2,-4
   41030:	1884703a 	and	r2,r3,r2
   41034:	81400217 	ldw	r5,8(r16)
   41038:	8085883a 	add	r2,r16,r2
   4103c:	10c00117 	ldw	r3,4(r2)
   41040:	29000315 	stw	r4,12(r5)
   41044:	21400215 	stw	r5,8(r4)
   41048:	18c00054 	ori	r3,r3,1
   4104c:	10c00115 	stw	r3,4(r2)
   41050:	9009883a 	mov	r4,r18
   41054:	0043bcc0 	call	43bcc <__malloc_unlock>
   41058:	80800204 	addi	r2,r16,8
   4105c:	dfc00a17 	ldw	ra,40(sp)
   41060:	df000917 	ldw	fp,36(sp)
   41064:	ddc00817 	ldw	r23,32(sp)
   41068:	dd800717 	ldw	r22,28(sp)
   4106c:	dd400617 	ldw	r21,24(sp)
   41070:	dd000517 	ldw	r20,20(sp)
   41074:	dcc00417 	ldw	r19,16(sp)
   41078:	dc800317 	ldw	r18,12(sp)
   4107c:	dc400217 	ldw	r17,8(sp)
   41080:	dc000117 	ldw	r16,4(sp)
   41084:	dec00b04 	addi	sp,sp,44
   41088:	f800283a 	ret
   4108c:	04400404 	movi	r17,16
   41090:	89407536 	bltu	r17,r5,41268 <_malloc_r+0x2c0>
   41094:	0043bac0 	call	43bac <__malloc_lock>
   41098:	003fd906 	br	41000 <__alt_data_end+0xfffcb4a0>
   4109c:	8806d27a 	srli	r3,r17,9
   410a0:	18007526 	beq	r3,zero,41278 <_malloc_r+0x2d0>
   410a4:	00800104 	movi	r2,4
   410a8:	10c0ef36 	bltu	r2,r3,41468 <_malloc_r+0x4c0>
   410ac:	8806d1ba 	srli	r3,r17,6
   410b0:	19c00e04 	addi	r7,r3,56
   410b4:	39cb883a 	add	r5,r7,r7
   410b8:	04c00134 	movhi	r19,4
   410bc:	294b883a 	add	r5,r5,r5
   410c0:	9cdb5104 	addi	r19,r19,27972
   410c4:	294b883a 	add	r5,r5,r5
   410c8:	994b883a 	add	r5,r19,r5
   410cc:	2c000317 	ldw	r16,12(r5)
   410d0:	2c000e26 	beq	r5,r16,4110c <_malloc_r+0x164>
   410d4:	80800117 	ldw	r2,4(r16)
   410d8:	01bfff04 	movi	r6,-4
   410dc:	010003c4 	movi	r4,15
   410e0:	1184703a 	and	r2,r2,r6
   410e4:	1447c83a 	sub	r3,r2,r17
   410e8:	20c00716 	blt	r4,r3,41108 <_malloc_r+0x160>
   410ec:	1800650e 	bge	r3,zero,41284 <_malloc_r+0x2dc>
   410f0:	84000317 	ldw	r16,12(r16)
   410f4:	2c000526 	beq	r5,r16,4110c <_malloc_r+0x164>
   410f8:	80800117 	ldw	r2,4(r16)
   410fc:	1184703a 	and	r2,r2,r6
   41100:	1447c83a 	sub	r3,r2,r17
   41104:	20fff90e 	bge	r4,r3,410ec <__alt_data_end+0xfffcb58c>
   41108:	39ffffc4 	addi	r7,r7,-1
   4110c:	38c00044 	addi	r3,r7,1
   41110:	01800134 	movhi	r6,4
   41114:	9c000417 	ldw	r16,16(r19)
   41118:	319b5104 	addi	r6,r6,27972
   4111c:	32400204 	addi	r9,r6,8
   41120:	82410326 	beq	r16,r9,41530 <_malloc_r+0x588>
   41124:	81000117 	ldw	r4,4(r16)
   41128:	00bfff04 	movi	r2,-4
   4112c:	208e703a 	and	r7,r4,r2
   41130:	3c45c83a 	sub	r2,r7,r17
   41134:	010003c4 	movi	r4,15
   41138:	2080ee16 	blt	r4,r2,414f4 <_malloc_r+0x54c>
   4113c:	32400515 	stw	r9,20(r6)
   41140:	32400415 	stw	r9,16(r6)
   41144:	1000510e 	bge	r2,zero,4128c <_malloc_r+0x2e4>
   41148:	00807fc4 	movi	r2,511
   4114c:	11c0ce36 	bltu	r2,r7,41488 <_malloc_r+0x4e0>
   41150:	3808d0fa 	srli	r4,r7,3
   41154:	01c00044 	movi	r7,1
   41158:	30800117 	ldw	r2,4(r6)
   4115c:	210b883a 	add	r5,r4,r4
   41160:	294b883a 	add	r5,r5,r5
   41164:	2009d0ba 	srai	r4,r4,2
   41168:	294b883a 	add	r5,r5,r5
   4116c:	298b883a 	add	r5,r5,r6
   41170:	2a000217 	ldw	r8,8(r5)
   41174:	3908983a 	sll	r4,r7,r4
   41178:	81400315 	stw	r5,12(r16)
   4117c:	82000215 	stw	r8,8(r16)
   41180:	2088b03a 	or	r4,r4,r2
   41184:	2c000215 	stw	r16,8(r5)
   41188:	31000115 	stw	r4,4(r6)
   4118c:	44000315 	stw	r16,12(r8)
   41190:	1805d0ba 	srai	r2,r3,2
   41194:	01400044 	movi	r5,1
   41198:	288a983a 	sll	r5,r5,r2
   4119c:	21404336 	bltu	r4,r5,412ac <_malloc_r+0x304>
   411a0:	2144703a 	and	r2,r4,r5
   411a4:	10000a1e 	bne	r2,zero,411d0 <_malloc_r+0x228>
   411a8:	00bfff04 	movi	r2,-4
   411ac:	294b883a 	add	r5,r5,r5
   411b0:	1886703a 	and	r3,r3,r2
   411b4:	2144703a 	and	r2,r4,r5
   411b8:	18c00104 	addi	r3,r3,4
   411bc:	1000041e 	bne	r2,zero,411d0 <_malloc_r+0x228>
   411c0:	294b883a 	add	r5,r5,r5
   411c4:	2144703a 	and	r2,r4,r5
   411c8:	18c00104 	addi	r3,r3,4
   411cc:	103ffc26 	beq	r2,zero,411c0 <__alt_data_end+0xfffcb660>
   411d0:	023fff04 	movi	r8,-4
   411d4:	01c003c4 	movi	r7,15
   411d8:	18c5883a 	add	r2,r3,r3
   411dc:	1085883a 	add	r2,r2,r2
   411e0:	1085883a 	add	r2,r2,r2
   411e4:	9895883a 	add	r10,r19,r2
   411e8:	52c00304 	addi	r11,r10,12
   411ec:	1819883a 	mov	r12,r3
   411f0:	5c000017 	ldw	r16,0(r11)
   411f4:	59bffd04 	addi	r6,r11,-12
   411f8:	8180041e 	bne	r16,r6,4120c <_malloc_r+0x264>
   411fc:	0000ce06 	br	41538 <_malloc_r+0x590>
   41200:	2000d70e 	bge	r4,zero,41560 <_malloc_r+0x5b8>
   41204:	84000317 	ldw	r16,12(r16)
   41208:	8180cb26 	beq	r16,r6,41538 <_malloc_r+0x590>
   4120c:	80800117 	ldw	r2,4(r16)
   41210:	1204703a 	and	r2,r2,r8
   41214:	1449c83a 	sub	r4,r2,r17
   41218:	393ff90e 	bge	r7,r4,41200 <__alt_data_end+0xfffcb6a0>
   4121c:	80800317 	ldw	r2,12(r16)
   41220:	80c00217 	ldw	r3,8(r16)
   41224:	89400054 	ori	r5,r17,1
   41228:	81400115 	stw	r5,4(r16)
   4122c:	18800315 	stw	r2,12(r3)
   41230:	10c00215 	stw	r3,8(r2)
   41234:	8463883a 	add	r17,r16,r17
   41238:	9c400515 	stw	r17,20(r19)
   4123c:	9c400415 	stw	r17,16(r19)
   41240:	20800054 	ori	r2,r4,1
   41244:	88800115 	stw	r2,4(r17)
   41248:	8a400315 	stw	r9,12(r17)
   4124c:	8a400215 	stw	r9,8(r17)
   41250:	8923883a 	add	r17,r17,r4
   41254:	89000015 	stw	r4,0(r17)
   41258:	9009883a 	mov	r4,r18
   4125c:	0043bcc0 	call	43bcc <__malloc_unlock>
   41260:	80800204 	addi	r2,r16,8
   41264:	003f7d06 	br	4105c <__alt_data_end+0xfffcb4fc>
   41268:	00800304 	movi	r2,12
   4126c:	90800015 	stw	r2,0(r18)
   41270:	0005883a 	mov	r2,zero
   41274:	003f7906 	br	4105c <__alt_data_end+0xfffcb4fc>
   41278:	01401f84 	movi	r5,126
   4127c:	01c00fc4 	movi	r7,63
   41280:	003f8d06 	br	410b8 <__alt_data_end+0xfffcb558>
   41284:	81000317 	ldw	r4,12(r16)
   41288:	003f6a06 	br	41034 <__alt_data_end+0xfffcb4d4>
   4128c:	81c5883a 	add	r2,r16,r7
   41290:	10c00117 	ldw	r3,4(r2)
   41294:	9009883a 	mov	r4,r18
   41298:	18c00054 	ori	r3,r3,1
   4129c:	10c00115 	stw	r3,4(r2)
   412a0:	0043bcc0 	call	43bcc <__malloc_unlock>
   412a4:	80800204 	addi	r2,r16,8
   412a8:	003f6c06 	br	4105c <__alt_data_end+0xfffcb4fc>
   412ac:	9c000217 	ldw	r16,8(r19)
   412b0:	00bfff04 	movi	r2,-4
   412b4:	85800117 	ldw	r22,4(r16)
   412b8:	b0ac703a 	and	r22,r22,r2
   412bc:	b4400336 	bltu	r22,r17,412cc <_malloc_r+0x324>
   412c0:	b445c83a 	sub	r2,r22,r17
   412c4:	00c003c4 	movi	r3,15
   412c8:	18805d16 	blt	r3,r2,41440 <_malloc_r+0x498>
   412cc:	05c00174 	movhi	r23,5
   412d0:	00800174 	movhi	r2,5
   412d4:	bde10804 	addi	r23,r23,-31712
   412d8:	10a7e204 	addi	r2,r2,-24696
   412dc:	15400017 	ldw	r21,0(r2)
   412e0:	b9000017 	ldw	r4,0(r23)
   412e4:	00ffffc4 	movi	r3,-1
   412e8:	858d883a 	add	r6,r16,r22
   412ec:	8d6b883a 	add	r21,r17,r21
   412f0:	20c0e426 	beq	r4,r3,41684 <_malloc_r+0x6dc>
   412f4:	ad4403c4 	addi	r21,r21,4111
   412f8:	00fc0004 	movi	r3,-4096
   412fc:	a8ea703a 	and	r21,r21,r3
   41300:	9009883a 	mov	r4,r18
   41304:	a80b883a 	mov	r5,r21
   41308:	d9800015 	stw	r6,0(sp)
   4130c:	004206c0 	call	4206c <_sbrk_r>
   41310:	00ffffc4 	movi	r3,-1
   41314:	1029883a 	mov	r20,r2
   41318:	d9800017 	ldw	r6,0(sp)
   4131c:	10c0a426 	beq	r2,r3,415b0 <_malloc_r+0x608>
   41320:	1180a236 	bltu	r2,r6,415ac <_malloc_r+0x604>
   41324:	07000174 	movhi	fp,5
   41328:	e727eb04 	addi	fp,fp,-24660
   4132c:	e0c00017 	ldw	r3,0(fp)
   41330:	a8c7883a 	add	r3,r21,r3
   41334:	e0c00015 	stw	r3,0(fp)
   41338:	3500da26 	beq	r6,r20,416a4 <_malloc_r+0x6fc>
   4133c:	b9000017 	ldw	r4,0(r23)
   41340:	00bfffc4 	movi	r2,-1
   41344:	2080e426 	beq	r4,r2,416d8 <_malloc_r+0x730>
   41348:	a185c83a 	sub	r2,r20,r6
   4134c:	1885883a 	add	r2,r3,r2
   41350:	e0800015 	stw	r2,0(fp)
   41354:	a0c001cc 	andi	r3,r20,7
   41358:	1800b526 	beq	r3,zero,41630 <_malloc_r+0x688>
   4135c:	a0e9c83a 	sub	r20,r20,r3
   41360:	00840204 	movi	r2,4104
   41364:	a5000204 	addi	r20,r20,8
   41368:	10c7c83a 	sub	r3,r2,r3
   4136c:	a545883a 	add	r2,r20,r21
   41370:	1083ffcc 	andi	r2,r2,4095
   41374:	18abc83a 	sub	r21,r3,r2
   41378:	9009883a 	mov	r4,r18
   4137c:	a80b883a 	mov	r5,r21
   41380:	004206c0 	call	4206c <_sbrk_r>
   41384:	00ffffc4 	movi	r3,-1
   41388:	10c0d026 	beq	r2,r3,416cc <_malloc_r+0x724>
   4138c:	1507c83a 	sub	r3,r2,r20
   41390:	a8c7883a 	add	r3,r21,r3
   41394:	18c00054 	ori	r3,r3,1
   41398:	e0800017 	ldw	r2,0(fp)
   4139c:	9d000215 	stw	r20,8(r19)
   413a0:	a0c00115 	stw	r3,4(r20)
   413a4:	a887883a 	add	r3,r21,r2
   413a8:	e0c00015 	stw	r3,0(fp)
   413ac:	84c00e26 	beq	r16,r19,413e8 <_malloc_r+0x440>
   413b0:	018003c4 	movi	r6,15
   413b4:	3580a02e 	bgeu	r6,r22,41638 <_malloc_r+0x690>
   413b8:	81400117 	ldw	r5,4(r16)
   413bc:	013ffe04 	movi	r4,-8
   413c0:	b0bffd04 	addi	r2,r22,-12
   413c4:	1104703a 	and	r2,r2,r4
   413c8:	2900004c 	andi	r4,r5,1
   413cc:	1108b03a 	or	r4,r2,r4
   413d0:	81000115 	stw	r4,4(r16)
   413d4:	01400144 	movi	r5,5
   413d8:	8089883a 	add	r4,r16,r2
   413dc:	21400115 	stw	r5,4(r4)
   413e0:	21400215 	stw	r5,8(r4)
   413e4:	3080c036 	bltu	r6,r2,416e8 <_malloc_r+0x740>
   413e8:	00800174 	movhi	r2,5
   413ec:	10a7e104 	addi	r2,r2,-24700
   413f0:	11000017 	ldw	r4,0(r2)
   413f4:	20c0012e 	bgeu	r4,r3,413fc <_malloc_r+0x454>
   413f8:	10c00015 	stw	r3,0(r2)
   413fc:	00800174 	movhi	r2,5
   41400:	10a7e004 	addi	r2,r2,-24704
   41404:	11000017 	ldw	r4,0(r2)
   41408:	9c000217 	ldw	r16,8(r19)
   4140c:	20c0012e 	bgeu	r4,r3,41414 <_malloc_r+0x46c>
   41410:	10c00015 	stw	r3,0(r2)
   41414:	80c00117 	ldw	r3,4(r16)
   41418:	00bfff04 	movi	r2,-4
   4141c:	1886703a 	and	r3,r3,r2
   41420:	1c45c83a 	sub	r2,r3,r17
   41424:	1c400236 	bltu	r3,r17,41430 <_malloc_r+0x488>
   41428:	00c003c4 	movi	r3,15
   4142c:	18800416 	blt	r3,r2,41440 <_malloc_r+0x498>
   41430:	9009883a 	mov	r4,r18
   41434:	0043bcc0 	call	43bcc <__malloc_unlock>
   41438:	0005883a 	mov	r2,zero
   4143c:	003f0706 	br	4105c <__alt_data_end+0xfffcb4fc>
   41440:	88c00054 	ori	r3,r17,1
   41444:	80c00115 	stw	r3,4(r16)
   41448:	8463883a 	add	r17,r16,r17
   4144c:	10800054 	ori	r2,r2,1
   41450:	9c400215 	stw	r17,8(r19)
   41454:	88800115 	stw	r2,4(r17)
   41458:	9009883a 	mov	r4,r18
   4145c:	0043bcc0 	call	43bcc <__malloc_unlock>
   41460:	80800204 	addi	r2,r16,8
   41464:	003efd06 	br	4105c <__alt_data_end+0xfffcb4fc>
   41468:	00800504 	movi	r2,20
   4146c:	10c0482e 	bgeu	r2,r3,41590 <_malloc_r+0x5e8>
   41470:	00801504 	movi	r2,84
   41474:	10c06836 	bltu	r2,r3,41618 <_malloc_r+0x670>
   41478:	8806d33a 	srli	r3,r17,12
   4147c:	19c01b84 	addi	r7,r3,110
   41480:	39cb883a 	add	r5,r7,r7
   41484:	003f0c06 	br	410b8 <__alt_data_end+0xfffcb558>
   41488:	3804d27a 	srli	r2,r7,9
   4148c:	01000104 	movi	r4,4
   41490:	2080422e 	bgeu	r4,r2,4159c <_malloc_r+0x5f4>
   41494:	01000504 	movi	r4,20
   41498:	20807c36 	bltu	r4,r2,4168c <_malloc_r+0x6e4>
   4149c:	110016c4 	addi	r4,r2,91
   414a0:	210b883a 	add	r5,r4,r4
   414a4:	294b883a 	add	r5,r5,r5
   414a8:	294b883a 	add	r5,r5,r5
   414ac:	994b883a 	add	r5,r19,r5
   414b0:	28800217 	ldw	r2,8(r5)
   414b4:	02000134 	movhi	r8,4
   414b8:	421b5104 	addi	r8,r8,27972
   414bc:	11406326 	beq	r2,r5,4164c <_malloc_r+0x6a4>
   414c0:	01bfff04 	movi	r6,-4
   414c4:	11000117 	ldw	r4,4(r2)
   414c8:	2188703a 	and	r4,r4,r6
   414cc:	3900022e 	bgeu	r7,r4,414d8 <_malloc_r+0x530>
   414d0:	10800217 	ldw	r2,8(r2)
   414d4:	28bffb1e 	bne	r5,r2,414c4 <__alt_data_end+0xfffcb964>
   414d8:	11800317 	ldw	r6,12(r2)
   414dc:	99000117 	ldw	r4,4(r19)
   414e0:	81800315 	stw	r6,12(r16)
   414e4:	80800215 	stw	r2,8(r16)
   414e8:	34000215 	stw	r16,8(r6)
   414ec:	14000315 	stw	r16,12(r2)
   414f0:	003f2706 	br	41190 <__alt_data_end+0xfffcb630>
   414f4:	88c00054 	ori	r3,r17,1
   414f8:	80c00115 	stw	r3,4(r16)
   414fc:	8463883a 	add	r17,r16,r17
   41500:	34400515 	stw	r17,20(r6)
   41504:	34400415 	stw	r17,16(r6)
   41508:	10c00054 	ori	r3,r2,1
   4150c:	8a400315 	stw	r9,12(r17)
   41510:	8a400215 	stw	r9,8(r17)
   41514:	88c00115 	stw	r3,4(r17)
   41518:	88a3883a 	add	r17,r17,r2
   4151c:	88800015 	stw	r2,0(r17)
   41520:	9009883a 	mov	r4,r18
   41524:	0043bcc0 	call	43bcc <__malloc_unlock>
   41528:	80800204 	addi	r2,r16,8
   4152c:	003ecb06 	br	4105c <__alt_data_end+0xfffcb4fc>
   41530:	31000117 	ldw	r4,4(r6)
   41534:	003f1606 	br	41190 <__alt_data_end+0xfffcb630>
   41538:	63000044 	addi	r12,r12,1
   4153c:	608000cc 	andi	r2,r12,3
   41540:	5ac00204 	addi	r11,r11,8
   41544:	103f2a1e 	bne	r2,zero,411f0 <__alt_data_end+0xfffcb690>
   41548:	00002106 	br	415d0 <_malloc_r+0x628>
   4154c:	80800204 	addi	r2,r16,8
   41550:	84000517 	ldw	r16,20(r16)
   41554:	143eb31e 	bne	r2,r16,41024 <__alt_data_end+0xfffcb4c4>
   41558:	18c00084 	addi	r3,r3,2
   4155c:	003eec06 	br	41110 <__alt_data_end+0xfffcb5b0>
   41560:	8085883a 	add	r2,r16,r2
   41564:	10c00117 	ldw	r3,4(r2)
   41568:	81000317 	ldw	r4,12(r16)
   4156c:	81400217 	ldw	r5,8(r16)
   41570:	18c00054 	ori	r3,r3,1
   41574:	10c00115 	stw	r3,4(r2)
   41578:	29000315 	stw	r4,12(r5)
   4157c:	21400215 	stw	r5,8(r4)
   41580:	9009883a 	mov	r4,r18
   41584:	0043bcc0 	call	43bcc <__malloc_unlock>
   41588:	80800204 	addi	r2,r16,8
   4158c:	003eb306 	br	4105c <__alt_data_end+0xfffcb4fc>
   41590:	19c016c4 	addi	r7,r3,91
   41594:	39cb883a 	add	r5,r7,r7
   41598:	003ec706 	br	410b8 <__alt_data_end+0xfffcb558>
   4159c:	3804d1ba 	srli	r2,r7,6
   415a0:	11000e04 	addi	r4,r2,56
   415a4:	210b883a 	add	r5,r4,r4
   415a8:	003fbe06 	br	414a4 <__alt_data_end+0xfffcb944>
   415ac:	84ff5d26 	beq	r16,r19,41324 <__alt_data_end+0xfffcb7c4>
   415b0:	9c000217 	ldw	r16,8(r19)
   415b4:	00bfff04 	movi	r2,-4
   415b8:	80c00117 	ldw	r3,4(r16)
   415bc:	1886703a 	and	r3,r3,r2
   415c0:	003f9706 	br	41420 <__alt_data_end+0xfffcb8c0>
   415c4:	52800017 	ldw	r10,0(r10)
   415c8:	18ffffc4 	addi	r3,r3,-1
   415cc:	50805c1e 	bne	r10,r2,41740 <_malloc_r+0x798>
   415d0:	190000cc 	andi	r4,r3,3
   415d4:	50bffe04 	addi	r2,r10,-8
   415d8:	203ffa1e 	bne	r4,zero,415c4 <__alt_data_end+0xfffcba64>
   415dc:	98800117 	ldw	r2,4(r19)
   415e0:	0146303a 	nor	r3,zero,r5
   415e4:	1884703a 	and	r2,r3,r2
   415e8:	98800115 	stw	r2,4(r19)
   415ec:	294b883a 	add	r5,r5,r5
   415f0:	117f2e36 	bltu	r2,r5,412ac <__alt_data_end+0xfffcb74c>
   415f4:	283f2d26 	beq	r5,zero,412ac <__alt_data_end+0xfffcb74c>
   415f8:	1146703a 	and	r3,r2,r5
   415fc:	1800521e 	bne	r3,zero,41748 <_malloc_r+0x7a0>
   41600:	6007883a 	mov	r3,r12
   41604:	294b883a 	add	r5,r5,r5
   41608:	1148703a 	and	r4,r2,r5
   4160c:	18c00104 	addi	r3,r3,4
   41610:	203ffc26 	beq	r4,zero,41604 <__alt_data_end+0xfffcbaa4>
   41614:	003ef006 	br	411d8 <__alt_data_end+0xfffcb678>
   41618:	00805504 	movi	r2,340
   4161c:	10c01336 	bltu	r2,r3,4166c <_malloc_r+0x6c4>
   41620:	8806d3fa 	srli	r3,r17,15
   41624:	19c01dc4 	addi	r7,r3,119
   41628:	39cb883a 	add	r5,r7,r7
   4162c:	003ea206 	br	410b8 <__alt_data_end+0xfffcb558>
   41630:	00c40004 	movi	r3,4096
   41634:	003f4d06 	br	4136c <__alt_data_end+0xfffcb80c>
   41638:	00800044 	movi	r2,1
   4163c:	a0800115 	stw	r2,4(r20)
   41640:	a021883a 	mov	r16,r20
   41644:	0007883a 	mov	r3,zero
   41648:	003f7506 	br	41420 <__alt_data_end+0xfffcb8c0>
   4164c:	200bd0ba 	srai	r5,r4,2
   41650:	01800044 	movi	r6,1
   41654:	41000117 	ldw	r4,4(r8)
   41658:	314a983a 	sll	r5,r6,r5
   4165c:	100d883a 	mov	r6,r2
   41660:	2908b03a 	or	r4,r5,r4
   41664:	41000115 	stw	r4,4(r8)
   41668:	003f9d06 	br	414e0 <__alt_data_end+0xfffcb980>
   4166c:	00815504 	movi	r2,1364
   41670:	10c01336 	bltu	r2,r3,416c0 <_malloc_r+0x718>
   41674:	8806d4ba 	srli	r3,r17,18
   41678:	19c01f04 	addi	r7,r3,124
   4167c:	39cb883a 	add	r5,r7,r7
   41680:	003e8d06 	br	410b8 <__alt_data_end+0xfffcb558>
   41684:	ad400404 	addi	r21,r21,16
   41688:	003f1d06 	br	41300 <__alt_data_end+0xfffcb7a0>
   4168c:	01001504 	movi	r4,84
   41690:	20801c36 	bltu	r4,r2,41704 <_malloc_r+0x75c>
   41694:	3804d33a 	srli	r2,r7,12
   41698:	11001b84 	addi	r4,r2,110
   4169c:	210b883a 	add	r5,r4,r4
   416a0:	003f8006 	br	414a4 <__alt_data_end+0xfffcb944>
   416a4:	3083ffcc 	andi	r2,r6,4095
   416a8:	103f241e 	bne	r2,zero,4133c <__alt_data_end+0xfffcb7dc>
   416ac:	99000217 	ldw	r4,8(r19)
   416b0:	ad85883a 	add	r2,r21,r22
   416b4:	10800054 	ori	r2,r2,1
   416b8:	20800115 	stw	r2,4(r4)
   416bc:	003f4a06 	br	413e8 <__alt_data_end+0xfffcb888>
   416c0:	01403f04 	movi	r5,252
   416c4:	01c01f84 	movi	r7,126
   416c8:	003e7b06 	br	410b8 <__alt_data_end+0xfffcb558>
   416cc:	00c00044 	movi	r3,1
   416d0:	002b883a 	mov	r21,zero
   416d4:	003f3006 	br	41398 <__alt_data_end+0xfffcb838>
   416d8:	00800174 	movhi	r2,5
   416dc:	10a10804 	addi	r2,r2,-31712
   416e0:	15000015 	stw	r20,0(r2)
   416e4:	003f1b06 	br	41354 <__alt_data_end+0xfffcb7f4>
   416e8:	9009883a 	mov	r4,r18
   416ec:	81400204 	addi	r5,r16,8
   416f0:	00429200 	call	42920 <_free_r>
   416f4:	00800174 	movhi	r2,5
   416f8:	10a7eb04 	addi	r2,r2,-24660
   416fc:	10c00017 	ldw	r3,0(r2)
   41700:	003f3906 	br	413e8 <__alt_data_end+0xfffcb888>
   41704:	01005504 	movi	r4,340
   41708:	20800436 	bltu	r4,r2,4171c <_malloc_r+0x774>
   4170c:	3804d3fa 	srli	r2,r7,15
   41710:	11001dc4 	addi	r4,r2,119
   41714:	210b883a 	add	r5,r4,r4
   41718:	003f6206 	br	414a4 <__alt_data_end+0xfffcb944>
   4171c:	01015504 	movi	r4,1364
   41720:	20800436 	bltu	r4,r2,41734 <_malloc_r+0x78c>
   41724:	3804d4ba 	srli	r2,r7,18
   41728:	11001f04 	addi	r4,r2,124
   4172c:	210b883a 	add	r5,r4,r4
   41730:	003f5c06 	br	414a4 <__alt_data_end+0xfffcb944>
   41734:	01403f04 	movi	r5,252
   41738:	01001f84 	movi	r4,126
   4173c:	003f5906 	br	414a4 <__alt_data_end+0xfffcb944>
   41740:	98800117 	ldw	r2,4(r19)
   41744:	003fa906 	br	415ec <__alt_data_end+0xfffcba8c>
   41748:	6007883a 	mov	r3,r12
   4174c:	003ea206 	br	411d8 <__alt_data_end+0xfffcb678>

00041750 <memchr>:
   41750:	208000cc 	andi	r2,r4,3
   41754:	280f883a 	mov	r7,r5
   41758:	10003526 	beq	r2,zero,41830 <memchr+0xe0>
   4175c:	30bfffc4 	addi	r2,r6,-1
   41760:	30001b26 	beq	r6,zero,417d0 <memchr+0x80>
   41764:	21800003 	ldbu	r6,0(r4)
   41768:	28c03fcc 	andi	r3,r5,255
   4176c:	30c01a26 	beq	r6,r3,417d8 <memchr+0x88>
   41770:	180d883a 	mov	r6,r3
   41774:	00000406 	br	41788 <memchr+0x38>
   41778:	10001526 	beq	r2,zero,417d0 <memchr+0x80>
   4177c:	20c00003 	ldbu	r3,0(r4)
   41780:	10bfffc4 	addi	r2,r2,-1
   41784:	19801426 	beq	r3,r6,417d8 <memchr+0x88>
   41788:	21000044 	addi	r4,r4,1
   4178c:	20c000cc 	andi	r3,r4,3
   41790:	183ff91e 	bne	r3,zero,41778 <__alt_data_end+0xfffcbc18>
   41794:	024000c4 	movi	r9,3
   41798:	48801136 	bltu	r9,r2,417e0 <memchr+0x90>
   4179c:	10000c26 	beq	r2,zero,417d0 <memchr+0x80>
   417a0:	20c00003 	ldbu	r3,0(r4)
   417a4:	29403fcc 	andi	r5,r5,255
   417a8:	19400b26 	beq	r3,r5,417d8 <memchr+0x88>
   417ac:	20c00044 	addi	r3,r4,1
   417b0:	2085883a 	add	r2,r4,r2
   417b4:	39803fcc 	andi	r6,r7,255
   417b8:	00000306 	br	417c8 <memchr+0x78>
   417bc:	18c00044 	addi	r3,r3,1
   417c0:	197fffc3 	ldbu	r5,-1(r3)
   417c4:	29800426 	beq	r5,r6,417d8 <memchr+0x88>
   417c8:	1809883a 	mov	r4,r3
   417cc:	18bffb1e 	bne	r3,r2,417bc <__alt_data_end+0xfffcbc5c>
   417d0:	0005883a 	mov	r2,zero
   417d4:	f800283a 	ret
   417d8:	2005883a 	mov	r2,r4
   417dc:	f800283a 	ret
   417e0:	28c03fcc 	andi	r3,r5,255
   417e4:	1810923a 	slli	r8,r3,8
   417e8:	02ffbff4 	movhi	r11,65279
   417ec:	02a02074 	movhi	r10,32897
   417f0:	40c6b03a 	or	r3,r8,r3
   417f4:	1810943a 	slli	r8,r3,16
   417f8:	5affbfc4 	addi	r11,r11,-257
   417fc:	52a02004 	addi	r10,r10,-32640
   41800:	40d0b03a 	or	r8,r8,r3
   41804:	20c00017 	ldw	r3,0(r4)
   41808:	40c6f03a 	xor	r3,r8,r3
   4180c:	1acd883a 	add	r6,r3,r11
   41810:	00c6303a 	nor	r3,zero,r3
   41814:	30c6703a 	and	r3,r6,r3
   41818:	1a86703a 	and	r3,r3,r10
   4181c:	183fdf1e 	bne	r3,zero,4179c <__alt_data_end+0xfffcbc3c>
   41820:	10bfff04 	addi	r2,r2,-4
   41824:	21000104 	addi	r4,r4,4
   41828:	48bff636 	bltu	r9,r2,41804 <__alt_data_end+0xfffcbca4>
   4182c:	003fdb06 	br	4179c <__alt_data_end+0xfffcbc3c>
   41830:	3005883a 	mov	r2,r6
   41834:	003fd706 	br	41794 <__alt_data_end+0xfffcbc34>

00041838 <memcpy>:
   41838:	deffff04 	addi	sp,sp,-4
   4183c:	dc000015 	stw	r16,0(sp)
   41840:	00c003c4 	movi	r3,15
   41844:	2005883a 	mov	r2,r4
   41848:	1980432e 	bgeu	r3,r6,41958 <memcpy+0x120>
   4184c:	2146b03a 	or	r3,r4,r5
   41850:	18c000cc 	andi	r3,r3,3
   41854:	1800421e 	bne	r3,zero,41960 <memcpy+0x128>
   41858:	343ffc04 	addi	r16,r6,-16
   4185c:	8020d13a 	srli	r16,r16,4
   41860:	28c00104 	addi	r3,r5,4
   41864:	23400104 	addi	r13,r4,4
   41868:	801e913a 	slli	r15,r16,4
   4186c:	2b000204 	addi	r12,r5,8
   41870:	22c00204 	addi	r11,r4,8
   41874:	7bc00504 	addi	r15,r15,20
   41878:	2a800304 	addi	r10,r5,12
   4187c:	22400304 	addi	r9,r4,12
   41880:	2bdf883a 	add	r15,r5,r15
   41884:	2811883a 	mov	r8,r5
   41888:	200f883a 	mov	r7,r4
   4188c:	41000017 	ldw	r4,0(r8)
   41890:	39c00404 	addi	r7,r7,16
   41894:	18c00404 	addi	r3,r3,16
   41898:	393ffc15 	stw	r4,-16(r7)
   4189c:	1bbffc17 	ldw	r14,-16(r3)
   418a0:	6b400404 	addi	r13,r13,16
   418a4:	5ac00404 	addi	r11,r11,16
   418a8:	6bbffc15 	stw	r14,-16(r13)
   418ac:	63800017 	ldw	r14,0(r12)
   418b0:	4a400404 	addi	r9,r9,16
   418b4:	42000404 	addi	r8,r8,16
   418b8:	5bbffc15 	stw	r14,-16(r11)
   418bc:	53800017 	ldw	r14,0(r10)
   418c0:	63000404 	addi	r12,r12,16
   418c4:	52800404 	addi	r10,r10,16
   418c8:	4bbffc15 	stw	r14,-16(r9)
   418cc:	1bffef1e 	bne	r3,r15,4188c <__alt_data_end+0xfffcbd2c>
   418d0:	81c00044 	addi	r7,r16,1
   418d4:	380e913a 	slli	r7,r7,4
   418d8:	310003cc 	andi	r4,r6,15
   418dc:	02c000c4 	movi	r11,3
   418e0:	11c7883a 	add	r3,r2,r7
   418e4:	29cb883a 	add	r5,r5,r7
   418e8:	59001f2e 	bgeu	r11,r4,41968 <memcpy+0x130>
   418ec:	1813883a 	mov	r9,r3
   418f0:	2811883a 	mov	r8,r5
   418f4:	200f883a 	mov	r7,r4
   418f8:	42800017 	ldw	r10,0(r8)
   418fc:	4a400104 	addi	r9,r9,4
   41900:	39ffff04 	addi	r7,r7,-4
   41904:	4abfff15 	stw	r10,-4(r9)
   41908:	42000104 	addi	r8,r8,4
   4190c:	59fffa36 	bltu	r11,r7,418f8 <__alt_data_end+0xfffcbd98>
   41910:	213fff04 	addi	r4,r4,-4
   41914:	2008d0ba 	srli	r4,r4,2
   41918:	318000cc 	andi	r6,r6,3
   4191c:	21000044 	addi	r4,r4,1
   41920:	2109883a 	add	r4,r4,r4
   41924:	2109883a 	add	r4,r4,r4
   41928:	1907883a 	add	r3,r3,r4
   4192c:	290b883a 	add	r5,r5,r4
   41930:	30000626 	beq	r6,zero,4194c <memcpy+0x114>
   41934:	198d883a 	add	r6,r3,r6
   41938:	29c00003 	ldbu	r7,0(r5)
   4193c:	18c00044 	addi	r3,r3,1
   41940:	29400044 	addi	r5,r5,1
   41944:	19ffffc5 	stb	r7,-1(r3)
   41948:	19bffb1e 	bne	r3,r6,41938 <__alt_data_end+0xfffcbdd8>
   4194c:	dc000017 	ldw	r16,0(sp)
   41950:	dec00104 	addi	sp,sp,4
   41954:	f800283a 	ret
   41958:	2007883a 	mov	r3,r4
   4195c:	003ff406 	br	41930 <__alt_data_end+0xfffcbdd0>
   41960:	2007883a 	mov	r3,r4
   41964:	003ff306 	br	41934 <__alt_data_end+0xfffcbdd4>
   41968:	200d883a 	mov	r6,r4
   4196c:	003ff006 	br	41930 <__alt_data_end+0xfffcbdd0>

00041970 <memmove>:
   41970:	2005883a 	mov	r2,r4
   41974:	29000b2e 	bgeu	r5,r4,419a4 <memmove+0x34>
   41978:	298f883a 	add	r7,r5,r6
   4197c:	21c0092e 	bgeu	r4,r7,419a4 <memmove+0x34>
   41980:	2187883a 	add	r3,r4,r6
   41984:	198bc83a 	sub	r5,r3,r6
   41988:	30004b26 	beq	r6,zero,41ab8 <memmove+0x148>
   4198c:	39ffffc4 	addi	r7,r7,-1
   41990:	39000003 	ldbu	r4,0(r7)
   41994:	18ffffc4 	addi	r3,r3,-1
   41998:	19000005 	stb	r4,0(r3)
   4199c:	197ffb1e 	bne	r3,r5,4198c <__alt_data_end+0xfffcbe2c>
   419a0:	f800283a 	ret
   419a4:	00c003c4 	movi	r3,15
   419a8:	1980412e 	bgeu	r3,r6,41ab0 <memmove+0x140>
   419ac:	1146b03a 	or	r3,r2,r5
   419b0:	18c000cc 	andi	r3,r3,3
   419b4:	1800411e 	bne	r3,zero,41abc <memmove+0x14c>
   419b8:	33fffc04 	addi	r15,r6,-16
   419bc:	781ed13a 	srli	r15,r15,4
   419c0:	28c00104 	addi	r3,r5,4
   419c4:	13400104 	addi	r13,r2,4
   419c8:	781c913a 	slli	r14,r15,4
   419cc:	2b000204 	addi	r12,r5,8
   419d0:	12c00204 	addi	r11,r2,8
   419d4:	73800504 	addi	r14,r14,20
   419d8:	2a800304 	addi	r10,r5,12
   419dc:	12400304 	addi	r9,r2,12
   419e0:	2b9d883a 	add	r14,r5,r14
   419e4:	2811883a 	mov	r8,r5
   419e8:	100f883a 	mov	r7,r2
   419ec:	41000017 	ldw	r4,0(r8)
   419f0:	39c00404 	addi	r7,r7,16
   419f4:	18c00404 	addi	r3,r3,16
   419f8:	393ffc15 	stw	r4,-16(r7)
   419fc:	193ffc17 	ldw	r4,-16(r3)
   41a00:	6b400404 	addi	r13,r13,16
   41a04:	5ac00404 	addi	r11,r11,16
   41a08:	693ffc15 	stw	r4,-16(r13)
   41a0c:	61000017 	ldw	r4,0(r12)
   41a10:	4a400404 	addi	r9,r9,16
   41a14:	42000404 	addi	r8,r8,16
   41a18:	593ffc15 	stw	r4,-16(r11)
   41a1c:	51000017 	ldw	r4,0(r10)
   41a20:	63000404 	addi	r12,r12,16
   41a24:	52800404 	addi	r10,r10,16
   41a28:	493ffc15 	stw	r4,-16(r9)
   41a2c:	1bbfef1e 	bne	r3,r14,419ec <__alt_data_end+0xfffcbe8c>
   41a30:	79000044 	addi	r4,r15,1
   41a34:	2008913a 	slli	r4,r4,4
   41a38:	328003cc 	andi	r10,r6,15
   41a3c:	02c000c4 	movi	r11,3
   41a40:	1107883a 	add	r3,r2,r4
   41a44:	290b883a 	add	r5,r5,r4
   41a48:	5a801e2e 	bgeu	r11,r10,41ac4 <memmove+0x154>
   41a4c:	1813883a 	mov	r9,r3
   41a50:	2811883a 	mov	r8,r5
   41a54:	500f883a 	mov	r7,r10
   41a58:	41000017 	ldw	r4,0(r8)
   41a5c:	4a400104 	addi	r9,r9,4
   41a60:	39ffff04 	addi	r7,r7,-4
   41a64:	493fff15 	stw	r4,-4(r9)
   41a68:	42000104 	addi	r8,r8,4
   41a6c:	59fffa36 	bltu	r11,r7,41a58 <__alt_data_end+0xfffcbef8>
   41a70:	513fff04 	addi	r4,r10,-4
   41a74:	2008d0ba 	srli	r4,r4,2
   41a78:	318000cc 	andi	r6,r6,3
   41a7c:	21000044 	addi	r4,r4,1
   41a80:	2109883a 	add	r4,r4,r4
   41a84:	2109883a 	add	r4,r4,r4
   41a88:	1907883a 	add	r3,r3,r4
   41a8c:	290b883a 	add	r5,r5,r4
   41a90:	30000926 	beq	r6,zero,41ab8 <memmove+0x148>
   41a94:	198d883a 	add	r6,r3,r6
   41a98:	29c00003 	ldbu	r7,0(r5)
   41a9c:	18c00044 	addi	r3,r3,1
   41aa0:	29400044 	addi	r5,r5,1
   41aa4:	19ffffc5 	stb	r7,-1(r3)
   41aa8:	19bffb1e 	bne	r3,r6,41a98 <__alt_data_end+0xfffcbf38>
   41aac:	f800283a 	ret
   41ab0:	1007883a 	mov	r3,r2
   41ab4:	003ff606 	br	41a90 <__alt_data_end+0xfffcbf30>
   41ab8:	f800283a 	ret
   41abc:	1007883a 	mov	r3,r2
   41ac0:	003ff406 	br	41a94 <__alt_data_end+0xfffcbf34>
   41ac4:	500d883a 	mov	r6,r10
   41ac8:	003ff106 	br	41a90 <__alt_data_end+0xfffcbf30>

00041acc <_realloc_r>:
   41acc:	defff604 	addi	sp,sp,-40
   41ad0:	dcc00315 	stw	r19,12(sp)
   41ad4:	dc400115 	stw	r17,4(sp)
   41ad8:	dfc00915 	stw	ra,36(sp)
   41adc:	df000815 	stw	fp,32(sp)
   41ae0:	ddc00715 	stw	r23,28(sp)
   41ae4:	dd800615 	stw	r22,24(sp)
   41ae8:	dd400515 	stw	r21,20(sp)
   41aec:	dd000415 	stw	r20,16(sp)
   41af0:	dc800215 	stw	r18,8(sp)
   41af4:	dc000015 	stw	r16,0(sp)
   41af8:	2827883a 	mov	r19,r5
   41afc:	3023883a 	mov	r17,r6
   41b00:	2800bf26 	beq	r5,zero,41e00 <_realloc_r+0x334>
   41b04:	2025883a 	mov	r18,r4
   41b08:	0043bac0 	call	43bac <__malloc_lock>
   41b0c:	98ffff17 	ldw	r3,-4(r19)
   41b10:	01bfff04 	movi	r6,-4
   41b14:	890002c4 	addi	r4,r17,11
   41b18:	01c00584 	movi	r7,22
   41b1c:	9d7ffe04 	addi	r21,r19,-8
   41b20:	19a0703a 	and	r16,r3,r6
   41b24:	39003f2e 	bgeu	r7,r4,41c24 <_realloc_r+0x158>
   41b28:	053ffe04 	movi	r20,-8
   41b2c:	2528703a 	and	r20,r4,r20
   41b30:	a00f883a 	mov	r7,r20
   41b34:	a0008216 	blt	r20,zero,41d40 <_realloc_r+0x274>
   41b38:	a4408136 	bltu	r20,r17,41d40 <_realloc_r+0x274>
   41b3c:	81c03c0e 	bge	r16,r7,41c30 <_realloc_r+0x164>
   41b40:	07000134 	movhi	fp,4
   41b44:	e71b5104 	addi	fp,fp,27972
   41b48:	e1000217 	ldw	r4,8(fp)
   41b4c:	ac05883a 	add	r2,r21,r16
   41b50:	2080bf26 	beq	r4,r2,41e50 <_realloc_r+0x384>
   41b54:	11000117 	ldw	r4,4(r2)
   41b58:	023fff84 	movi	r8,-2
   41b5c:	2210703a 	and	r8,r4,r8
   41b60:	1211883a 	add	r8,r2,r8
   41b64:	41400117 	ldw	r5,4(r8)
   41b68:	2940004c 	andi	r5,r5,1
   41b6c:	28004a1e 	bne	r5,zero,41c98 <_realloc_r+0x1cc>
   41b70:	017fff04 	movi	r5,-4
   41b74:	2148703a 	and	r4,r4,r5
   41b78:	2409883a 	add	r4,r4,r16
   41b7c:	21c0ad0e 	bge	r4,r7,41e34 <_realloc_r+0x368>
   41b80:	18c0004c 	andi	r3,r3,1
   41b84:	18007f1e 	bne	r3,zero,41d84 <_realloc_r+0x2b8>
   41b88:	9dfffe17 	ldw	r23,-8(r19)
   41b8c:	adefc83a 	sub	r23,r21,r23
   41b90:	bd800117 	ldw	r22,4(r23)
   41b94:	b14a703a 	and	r5,r22,r5
   41b98:	216d883a 	add	r22,r4,r5
   41b9c:	b1c04516 	blt	r22,r7,41cb4 <_realloc_r+0x1e8>
   41ba0:	10c00317 	ldw	r3,12(r2)
   41ba4:	10800217 	ldw	r2,8(r2)
   41ba8:	81bfff04 	addi	r6,r16,-4
   41bac:	bc400204 	addi	r17,r23,8
   41bb0:	10c00315 	stw	r3,12(r2)
   41bb4:	18800215 	stw	r2,8(r3)
   41bb8:	b9400217 	ldw	r5,8(r23)
   41bbc:	b8c00317 	ldw	r3,12(r23)
   41bc0:	00800904 	movi	r2,36
   41bc4:	28c00315 	stw	r3,12(r5)
   41bc8:	19400215 	stw	r5,8(r3)
   41bcc:	1180ef36 	bltu	r2,r6,41f8c <_realloc_r+0x4c0>
   41bd0:	008004c4 	movi	r2,19
   41bd4:	1180da2e 	bgeu	r2,r6,41f40 <_realloc_r+0x474>
   41bd8:	98800017 	ldw	r2,0(r19)
   41bdc:	b8800215 	stw	r2,8(r23)
   41be0:	98800117 	ldw	r2,4(r19)
   41be4:	b8800315 	stw	r2,12(r23)
   41be8:	008006c4 	movi	r2,27
   41bec:	1180fc2e 	bgeu	r2,r6,41fe0 <_realloc_r+0x514>
   41bf0:	98800217 	ldw	r2,8(r19)
   41bf4:	b8800415 	stw	r2,16(r23)
   41bf8:	98800317 	ldw	r2,12(r19)
   41bfc:	b8800515 	stw	r2,20(r23)
   41c00:	00800904 	movi	r2,36
   41c04:	3080421e 	bne	r6,r2,41d10 <_realloc_r+0x244>
   41c08:	98800417 	ldw	r2,16(r19)
   41c0c:	9cc00604 	addi	r19,r19,24
   41c10:	b8c00804 	addi	r3,r23,32
   41c14:	b8800615 	stw	r2,24(r23)
   41c18:	98bfff17 	ldw	r2,-4(r19)
   41c1c:	b8800715 	stw	r2,28(r23)
   41c20:	00003d06 	br	41d18 <_realloc_r+0x24c>
   41c24:	01c00404 	movi	r7,16
   41c28:	3829883a 	mov	r20,r7
   41c2c:	003fc206 	br	41b38 <__alt_data_end+0xfffcbfd8>
   41c30:	9823883a 	mov	r17,r19
   41c34:	850fc83a 	sub	r7,r16,r20
   41c38:	008003c4 	movi	r2,15
   41c3c:	18c0004c 	andi	r3,r3,1
   41c40:	11c04336 	bltu	r2,r7,41d50 <_realloc_r+0x284>
   41c44:	1c06b03a 	or	r3,r3,r16
   41c48:	a8c00115 	stw	r3,4(r21)
   41c4c:	ac21883a 	add	r16,r21,r16
   41c50:	80c00117 	ldw	r3,4(r16)
   41c54:	18c00054 	ori	r3,r3,1
   41c58:	80c00115 	stw	r3,4(r16)
   41c5c:	9009883a 	mov	r4,r18
   41c60:	0043bcc0 	call	43bcc <__malloc_unlock>
   41c64:	8805883a 	mov	r2,r17
   41c68:	dfc00917 	ldw	ra,36(sp)
   41c6c:	df000817 	ldw	fp,32(sp)
   41c70:	ddc00717 	ldw	r23,28(sp)
   41c74:	dd800617 	ldw	r22,24(sp)
   41c78:	dd400517 	ldw	r21,20(sp)
   41c7c:	dd000417 	ldw	r20,16(sp)
   41c80:	dcc00317 	ldw	r19,12(sp)
   41c84:	dc800217 	ldw	r18,8(sp)
   41c88:	dc400117 	ldw	r17,4(sp)
   41c8c:	dc000017 	ldw	r16,0(sp)
   41c90:	dec00a04 	addi	sp,sp,40
   41c94:	f800283a 	ret
   41c98:	18c0004c 	andi	r3,r3,1
   41c9c:	1800391e 	bne	r3,zero,41d84 <_realloc_r+0x2b8>
   41ca0:	9dfffe17 	ldw	r23,-8(r19)
   41ca4:	00bfff04 	movi	r2,-4
   41ca8:	adefc83a 	sub	r23,r21,r23
   41cac:	b9400117 	ldw	r5,4(r23)
   41cb0:	288a703a 	and	r5,r5,r2
   41cb4:	2c2d883a 	add	r22,r5,r16
   41cb8:	b1c03216 	blt	r22,r7,41d84 <_realloc_r+0x2b8>
   41cbc:	b8800317 	ldw	r2,12(r23)
   41cc0:	b8c00217 	ldw	r3,8(r23)
   41cc4:	81bfff04 	addi	r6,r16,-4
   41cc8:	01000904 	movi	r4,36
   41ccc:	18800315 	stw	r2,12(r3)
   41cd0:	10c00215 	stw	r3,8(r2)
   41cd4:	bc400204 	addi	r17,r23,8
   41cd8:	2180ac36 	bltu	r4,r6,41f8c <_realloc_r+0x4c0>
   41cdc:	008004c4 	movi	r2,19
   41ce0:	1180972e 	bgeu	r2,r6,41f40 <_realloc_r+0x474>
   41ce4:	98800017 	ldw	r2,0(r19)
   41ce8:	b8800215 	stw	r2,8(r23)
   41cec:	98800117 	ldw	r2,4(r19)
   41cf0:	b8800315 	stw	r2,12(r23)
   41cf4:	008006c4 	movi	r2,27
   41cf8:	1180b92e 	bgeu	r2,r6,41fe0 <_realloc_r+0x514>
   41cfc:	98800217 	ldw	r2,8(r19)
   41d00:	b8800415 	stw	r2,16(r23)
   41d04:	98800317 	ldw	r2,12(r19)
   41d08:	b8800515 	stw	r2,20(r23)
   41d0c:	313fbe26 	beq	r6,r4,41c08 <__alt_data_end+0xfffcc0a8>
   41d10:	b8c00604 	addi	r3,r23,24
   41d14:	9cc00404 	addi	r19,r19,16
   41d18:	98800017 	ldw	r2,0(r19)
   41d1c:	b021883a 	mov	r16,r22
   41d20:	b82b883a 	mov	r21,r23
   41d24:	18800015 	stw	r2,0(r3)
   41d28:	98800117 	ldw	r2,4(r19)
   41d2c:	18800115 	stw	r2,4(r3)
   41d30:	98800217 	ldw	r2,8(r19)
   41d34:	18800215 	stw	r2,8(r3)
   41d38:	b8c00117 	ldw	r3,4(r23)
   41d3c:	003fbd06 	br	41c34 <__alt_data_end+0xfffcc0d4>
   41d40:	00800304 	movi	r2,12
   41d44:	90800015 	stw	r2,0(r18)
   41d48:	0005883a 	mov	r2,zero
   41d4c:	003fc606 	br	41c68 <__alt_data_end+0xfffcc108>
   41d50:	1d06b03a 	or	r3,r3,r20
   41d54:	ad0b883a 	add	r5,r21,r20
   41d58:	a8c00115 	stw	r3,4(r21)
   41d5c:	38800054 	ori	r2,r7,1
   41d60:	28800115 	stw	r2,4(r5)
   41d64:	29cf883a 	add	r7,r5,r7
   41d68:	38800117 	ldw	r2,4(r7)
   41d6c:	9009883a 	mov	r4,r18
   41d70:	29400204 	addi	r5,r5,8
   41d74:	10800054 	ori	r2,r2,1
   41d78:	38800115 	stw	r2,4(r7)
   41d7c:	00429200 	call	42920 <_free_r>
   41d80:	003fb606 	br	41c5c <__alt_data_end+0xfffcc0fc>
   41d84:	880b883a 	mov	r5,r17
   41d88:	9009883a 	mov	r4,r18
   41d8c:	0040fa80 	call	40fa8 <_malloc_r>
   41d90:	1023883a 	mov	r17,r2
   41d94:	1000aa26 	beq	r2,zero,42040 <_realloc_r+0x574>
   41d98:	98ffff17 	ldw	r3,-4(r19)
   41d9c:	113ffe04 	addi	r4,r2,-8
   41da0:	00bfff84 	movi	r2,-2
   41da4:	1884703a 	and	r2,r3,r2
   41da8:	a885883a 	add	r2,r21,r2
   41dac:	20808626 	beq	r4,r2,41fc8 <_realloc_r+0x4fc>
   41db0:	81bfff04 	addi	r6,r16,-4
   41db4:	00800904 	movi	r2,36
   41db8:	11807036 	bltu	r2,r6,41f7c <_realloc_r+0x4b0>
   41dbc:	00c004c4 	movi	r3,19
   41dc0:	19805636 	bltu	r3,r6,41f1c <_realloc_r+0x450>
   41dc4:	8805883a 	mov	r2,r17
   41dc8:	9807883a 	mov	r3,r19
   41dcc:	19000017 	ldw	r4,0(r3)
   41dd0:	11000015 	stw	r4,0(r2)
   41dd4:	19000117 	ldw	r4,4(r3)
   41dd8:	11000115 	stw	r4,4(r2)
   41ddc:	18c00217 	ldw	r3,8(r3)
   41de0:	10c00215 	stw	r3,8(r2)
   41de4:	980b883a 	mov	r5,r19
   41de8:	9009883a 	mov	r4,r18
   41dec:	00429200 	call	42920 <_free_r>
   41df0:	9009883a 	mov	r4,r18
   41df4:	0043bcc0 	call	43bcc <__malloc_unlock>
   41df8:	8805883a 	mov	r2,r17
   41dfc:	003f9a06 	br	41c68 <__alt_data_end+0xfffcc108>
   41e00:	300b883a 	mov	r5,r6
   41e04:	dfc00917 	ldw	ra,36(sp)
   41e08:	df000817 	ldw	fp,32(sp)
   41e0c:	ddc00717 	ldw	r23,28(sp)
   41e10:	dd800617 	ldw	r22,24(sp)
   41e14:	dd400517 	ldw	r21,20(sp)
   41e18:	dd000417 	ldw	r20,16(sp)
   41e1c:	dcc00317 	ldw	r19,12(sp)
   41e20:	dc800217 	ldw	r18,8(sp)
   41e24:	dc400117 	ldw	r17,4(sp)
   41e28:	dc000017 	ldw	r16,0(sp)
   41e2c:	dec00a04 	addi	sp,sp,40
   41e30:	0040fa81 	jmpi	40fa8 <_malloc_r>
   41e34:	11400317 	ldw	r5,12(r2)
   41e38:	10800217 	ldw	r2,8(r2)
   41e3c:	9823883a 	mov	r17,r19
   41e40:	2021883a 	mov	r16,r4
   41e44:	11400315 	stw	r5,12(r2)
   41e48:	28800215 	stw	r2,8(r5)
   41e4c:	003f7906 	br	41c34 <__alt_data_end+0xfffcc0d4>
   41e50:	21000117 	ldw	r4,4(r4)
   41e54:	00bfff04 	movi	r2,-4
   41e58:	a1800404 	addi	r6,r20,16
   41e5c:	2088703a 	and	r4,r4,r2
   41e60:	2409883a 	add	r4,r4,r16
   41e64:	2180380e 	bge	r4,r6,41f48 <_realloc_r+0x47c>
   41e68:	18c0004c 	andi	r3,r3,1
   41e6c:	183fc51e 	bne	r3,zero,41d84 <__alt_data_end+0xfffcc224>
   41e70:	9dfffe17 	ldw	r23,-8(r19)
   41e74:	adefc83a 	sub	r23,r21,r23
   41e78:	b9400117 	ldw	r5,4(r23)
   41e7c:	288a703a 	and	r5,r5,r2
   41e80:	216d883a 	add	r22,r4,r5
   41e84:	b1bf8b16 	blt	r22,r6,41cb4 <__alt_data_end+0xfffcc154>
   41e88:	b8800317 	ldw	r2,12(r23)
   41e8c:	b8c00217 	ldw	r3,8(r23)
   41e90:	81bfff04 	addi	r6,r16,-4
   41e94:	01000904 	movi	r4,36
   41e98:	18800315 	stw	r2,12(r3)
   41e9c:	10c00215 	stw	r3,8(r2)
   41ea0:	bc400204 	addi	r17,r23,8
   41ea4:	21805a36 	bltu	r4,r6,42010 <_realloc_r+0x544>
   41ea8:	008004c4 	movi	r2,19
   41eac:	1180562e 	bgeu	r2,r6,42008 <_realloc_r+0x53c>
   41eb0:	98800017 	ldw	r2,0(r19)
   41eb4:	b8800215 	stw	r2,8(r23)
   41eb8:	98800117 	ldw	r2,4(r19)
   41ebc:	b8800315 	stw	r2,12(r23)
   41ec0:	008006c4 	movi	r2,27
   41ec4:	11805636 	bltu	r2,r6,42020 <_realloc_r+0x554>
   41ec8:	b8800404 	addi	r2,r23,16
   41ecc:	9cc00204 	addi	r19,r19,8
   41ed0:	98c00017 	ldw	r3,0(r19)
   41ed4:	10c00015 	stw	r3,0(r2)
   41ed8:	98c00117 	ldw	r3,4(r19)
   41edc:	10c00115 	stw	r3,4(r2)
   41ee0:	98c00217 	ldw	r3,8(r19)
   41ee4:	10c00215 	stw	r3,8(r2)
   41ee8:	bd07883a 	add	r3,r23,r20
   41eec:	b505c83a 	sub	r2,r22,r20
   41ef0:	e0c00215 	stw	r3,8(fp)
   41ef4:	10800054 	ori	r2,r2,1
   41ef8:	18800115 	stw	r2,4(r3)
   41efc:	b8800117 	ldw	r2,4(r23)
   41f00:	9009883a 	mov	r4,r18
   41f04:	1080004c 	andi	r2,r2,1
   41f08:	a0a8b03a 	or	r20,r20,r2
   41f0c:	bd000115 	stw	r20,4(r23)
   41f10:	0043bcc0 	call	43bcc <__malloc_unlock>
   41f14:	8805883a 	mov	r2,r17
   41f18:	003f5306 	br	41c68 <__alt_data_end+0xfffcc108>
   41f1c:	98c00017 	ldw	r3,0(r19)
   41f20:	88c00015 	stw	r3,0(r17)
   41f24:	98c00117 	ldw	r3,4(r19)
   41f28:	88c00115 	stw	r3,4(r17)
   41f2c:	00c006c4 	movi	r3,27
   41f30:	19801d36 	bltu	r3,r6,41fa8 <_realloc_r+0x4dc>
   41f34:	88800204 	addi	r2,r17,8
   41f38:	98c00204 	addi	r3,r19,8
   41f3c:	003fa306 	br	41dcc <__alt_data_end+0xfffcc26c>
   41f40:	8807883a 	mov	r3,r17
   41f44:	003f7406 	br	41d18 <__alt_data_end+0xfffcc1b8>
   41f48:	ad2b883a 	add	r21,r21,r20
   41f4c:	2505c83a 	sub	r2,r4,r20
   41f50:	e5400215 	stw	r21,8(fp)
   41f54:	10800054 	ori	r2,r2,1
   41f58:	a8800115 	stw	r2,4(r21)
   41f5c:	98bfff17 	ldw	r2,-4(r19)
   41f60:	9009883a 	mov	r4,r18
   41f64:	1080004c 	andi	r2,r2,1
   41f68:	a0a8b03a 	or	r20,r20,r2
   41f6c:	9d3fff15 	stw	r20,-4(r19)
   41f70:	0043bcc0 	call	43bcc <__malloc_unlock>
   41f74:	9805883a 	mov	r2,r19
   41f78:	003f3b06 	br	41c68 <__alt_data_end+0xfffcc108>
   41f7c:	8809883a 	mov	r4,r17
   41f80:	980b883a 	mov	r5,r19
   41f84:	00419700 	call	41970 <memmove>
   41f88:	003f9606 	br	41de4 <__alt_data_end+0xfffcc284>
   41f8c:	8809883a 	mov	r4,r17
   41f90:	980b883a 	mov	r5,r19
   41f94:	00419700 	call	41970 <memmove>
   41f98:	b8c00117 	ldw	r3,4(r23)
   41f9c:	b021883a 	mov	r16,r22
   41fa0:	b82b883a 	mov	r21,r23
   41fa4:	003f2306 	br	41c34 <__alt_data_end+0xfffcc0d4>
   41fa8:	98c00217 	ldw	r3,8(r19)
   41fac:	88c00215 	stw	r3,8(r17)
   41fb0:	98c00317 	ldw	r3,12(r19)
   41fb4:	88c00315 	stw	r3,12(r17)
   41fb8:	30800c26 	beq	r6,r2,41fec <_realloc_r+0x520>
   41fbc:	88800404 	addi	r2,r17,16
   41fc0:	98c00404 	addi	r3,r19,16
   41fc4:	003f8106 	br	41dcc <__alt_data_end+0xfffcc26c>
   41fc8:	893fff17 	ldw	r4,-4(r17)
   41fcc:	00bfff04 	movi	r2,-4
   41fd0:	9823883a 	mov	r17,r19
   41fd4:	2084703a 	and	r2,r4,r2
   41fd8:	80a1883a 	add	r16,r16,r2
   41fdc:	003f1506 	br	41c34 <__alt_data_end+0xfffcc0d4>
   41fe0:	b8c00404 	addi	r3,r23,16
   41fe4:	9cc00204 	addi	r19,r19,8
   41fe8:	003f4b06 	br	41d18 <__alt_data_end+0xfffcc1b8>
   41fec:	99000417 	ldw	r4,16(r19)
   41ff0:	88800604 	addi	r2,r17,24
   41ff4:	98c00604 	addi	r3,r19,24
   41ff8:	89000415 	stw	r4,16(r17)
   41ffc:	99000517 	ldw	r4,20(r19)
   42000:	89000515 	stw	r4,20(r17)
   42004:	003f7106 	br	41dcc <__alt_data_end+0xfffcc26c>
   42008:	8805883a 	mov	r2,r17
   4200c:	003fb006 	br	41ed0 <__alt_data_end+0xfffcc370>
   42010:	8809883a 	mov	r4,r17
   42014:	980b883a 	mov	r5,r19
   42018:	00419700 	call	41970 <memmove>
   4201c:	003fb206 	br	41ee8 <__alt_data_end+0xfffcc388>
   42020:	98800217 	ldw	r2,8(r19)
   42024:	b8800415 	stw	r2,16(r23)
   42028:	98800317 	ldw	r2,12(r19)
   4202c:	b8800515 	stw	r2,20(r23)
   42030:	31000726 	beq	r6,r4,42050 <_realloc_r+0x584>
   42034:	b8800604 	addi	r2,r23,24
   42038:	9cc00404 	addi	r19,r19,16
   4203c:	003fa406 	br	41ed0 <__alt_data_end+0xfffcc370>
   42040:	9009883a 	mov	r4,r18
   42044:	0043bcc0 	call	43bcc <__malloc_unlock>
   42048:	0005883a 	mov	r2,zero
   4204c:	003f0606 	br	41c68 <__alt_data_end+0xfffcc108>
   42050:	98c00417 	ldw	r3,16(r19)
   42054:	9cc00604 	addi	r19,r19,24
   42058:	b8800804 	addi	r2,r23,32
   4205c:	b8c00615 	stw	r3,24(r23)
   42060:	98ffff17 	ldw	r3,-4(r19)
   42064:	b8c00715 	stw	r3,28(r23)
   42068:	003f9906 	br	41ed0 <__alt_data_end+0xfffcc370>

0004206c <_sbrk_r>:
   4206c:	defffd04 	addi	sp,sp,-12
   42070:	dc000015 	stw	r16,0(sp)
   42074:	04000174 	movhi	r16,5
   42078:	dc400115 	stw	r17,4(sp)
   4207c:	8427e304 	addi	r16,r16,-24692
   42080:	2023883a 	mov	r17,r4
   42084:	2809883a 	mov	r4,r5
   42088:	dfc00215 	stw	ra,8(sp)
   4208c:	80000015 	stw	zero,0(r16)
   42090:	0043dc00 	call	43dc0 <sbrk>
   42094:	00ffffc4 	movi	r3,-1
   42098:	10c00526 	beq	r2,r3,420b0 <_sbrk_r+0x44>
   4209c:	dfc00217 	ldw	ra,8(sp)
   420a0:	dc400117 	ldw	r17,4(sp)
   420a4:	dc000017 	ldw	r16,0(sp)
   420a8:	dec00304 	addi	sp,sp,12
   420ac:	f800283a 	ret
   420b0:	80c00017 	ldw	r3,0(r16)
   420b4:	183ff926 	beq	r3,zero,4209c <__alt_data_end+0xfffcc53c>
   420b8:	88c00015 	stw	r3,0(r17)
   420bc:	003ff706 	br	4209c <__alt_data_end+0xfffcc53c>

000420c0 <__swsetup_r>:
   420c0:	00800174 	movhi	r2,5
   420c4:	defffd04 	addi	sp,sp,-12
   420c8:	10a10704 	addi	r2,r2,-31716
   420cc:	dc400115 	stw	r17,4(sp)
   420d0:	2023883a 	mov	r17,r4
   420d4:	11000017 	ldw	r4,0(r2)
   420d8:	dc000015 	stw	r16,0(sp)
   420dc:	dfc00215 	stw	ra,8(sp)
   420e0:	2821883a 	mov	r16,r5
   420e4:	20000226 	beq	r4,zero,420f0 <__swsetup_r+0x30>
   420e8:	20c00e17 	ldw	r3,56(r4)
   420ec:	18002e26 	beq	r3,zero,421a8 <__swsetup_r+0xe8>
   420f0:	8080030b 	ldhu	r2,12(r16)
   420f4:	10c0020c 	andi	r3,r2,8
   420f8:	100d883a 	mov	r6,r2
   420fc:	18000f26 	beq	r3,zero,4213c <__swsetup_r+0x7c>
   42100:	80c00417 	ldw	r3,16(r16)
   42104:	18001526 	beq	r3,zero,4215c <__swsetup_r+0x9c>
   42108:	1100004c 	andi	r4,r2,1
   4210c:	20001c1e 	bne	r4,zero,42180 <__swsetup_r+0xc0>
   42110:	1080008c 	andi	r2,r2,2
   42114:	1000261e 	bne	r2,zero,421b0 <__swsetup_r+0xf0>
   42118:	80800517 	ldw	r2,20(r16)
   4211c:	80800215 	stw	r2,8(r16)
   42120:	18001c26 	beq	r3,zero,42194 <__swsetup_r+0xd4>
   42124:	0005883a 	mov	r2,zero
   42128:	dfc00217 	ldw	ra,8(sp)
   4212c:	dc400117 	ldw	r17,4(sp)
   42130:	dc000017 	ldw	r16,0(sp)
   42134:	dec00304 	addi	sp,sp,12
   42138:	f800283a 	ret
   4213c:	3080040c 	andi	r2,r6,16
   42140:	10001726 	beq	r2,zero,421a0 <__swsetup_r+0xe0>
   42144:	3080010c 	andi	r2,r6,4
   42148:	10001b1e 	bne	r2,zero,421b8 <__swsetup_r+0xf8>
   4214c:	80c00417 	ldw	r3,16(r16)
   42150:	30800214 	ori	r2,r6,8
   42154:	8080030d 	sth	r2,12(r16)
   42158:	183feb1e 	bne	r3,zero,42108 <__alt_data_end+0xfffcc5a8>
   4215c:	1140a00c 	andi	r5,r2,640
   42160:	01008004 	movi	r4,512
   42164:	293fe826 	beq	r5,r4,42108 <__alt_data_end+0xfffcc5a8>
   42168:	8809883a 	mov	r4,r17
   4216c:	800b883a 	mov	r5,r16
   42170:	0042d800 	call	42d80 <__smakebuf_r>
   42174:	8080030b 	ldhu	r2,12(r16)
   42178:	80c00417 	ldw	r3,16(r16)
   4217c:	003fe206 	br	42108 <__alt_data_end+0xfffcc5a8>
   42180:	80800517 	ldw	r2,20(r16)
   42184:	80000215 	stw	zero,8(r16)
   42188:	0085c83a 	sub	r2,zero,r2
   4218c:	80800615 	stw	r2,24(r16)
   42190:	183fe41e 	bne	r3,zero,42124 <__alt_data_end+0xfffcc5c4>
   42194:	8080030b 	ldhu	r2,12(r16)
   42198:	1080200c 	andi	r2,r2,128
   4219c:	103fe226 	beq	r2,zero,42128 <__alt_data_end+0xfffcc5c8>
   421a0:	00bfffc4 	movi	r2,-1
   421a4:	003fe006 	br	42128 <__alt_data_end+0xfffcc5c8>
   421a8:	00427ac0 	call	427ac <__sinit>
   421ac:	003fd006 	br	420f0 <__alt_data_end+0xfffcc590>
   421b0:	0005883a 	mov	r2,zero
   421b4:	003fd906 	br	4211c <__alt_data_end+0xfffcc5bc>
   421b8:	81400c17 	ldw	r5,48(r16)
   421bc:	28000626 	beq	r5,zero,421d8 <__swsetup_r+0x118>
   421c0:	80801004 	addi	r2,r16,64
   421c4:	28800326 	beq	r5,r2,421d4 <__swsetup_r+0x114>
   421c8:	8809883a 	mov	r4,r17
   421cc:	00429200 	call	42920 <_free_r>
   421d0:	8180030b 	ldhu	r6,12(r16)
   421d4:	80000c15 	stw	zero,48(r16)
   421d8:	80c00417 	ldw	r3,16(r16)
   421dc:	00bff6c4 	movi	r2,-37
   421e0:	118c703a 	and	r6,r2,r6
   421e4:	80000115 	stw	zero,4(r16)
   421e8:	80c00015 	stw	r3,0(r16)
   421ec:	003fd806 	br	42150 <__alt_data_end+0xfffcc5f0>

000421f0 <_fflush_r>:
   421f0:	defffb04 	addi	sp,sp,-20
   421f4:	dcc00315 	stw	r19,12(sp)
   421f8:	dc000015 	stw	r16,0(sp)
   421fc:	dfc00415 	stw	ra,16(sp)
   42200:	dc800215 	stw	r18,8(sp)
   42204:	dc400115 	stw	r17,4(sp)
   42208:	2027883a 	mov	r19,r4
   4220c:	2821883a 	mov	r16,r5
   42210:	20000226 	beq	r4,zero,4221c <_fflush_r+0x2c>
   42214:	20800e17 	ldw	r2,56(r4)
   42218:	10005326 	beq	r2,zero,42368 <_fflush_r+0x178>
   4221c:	8080030b 	ldhu	r2,12(r16)
   42220:	10ffffcc 	andi	r3,r2,65535
   42224:	18e0001c 	xori	r3,r3,32768
   42228:	18e00004 	addi	r3,r3,-32768
   4222c:	18002c26 	beq	r3,zero,422e0 <_fflush_r+0xf0>
   42230:	10c0020c 	andi	r3,r2,8
   42234:	1800321e 	bne	r3,zero,42300 <_fflush_r+0x110>
   42238:	80c00117 	ldw	r3,4(r16)
   4223c:	10820014 	ori	r2,r2,2048
   42240:	8080030d 	sth	r2,12(r16)
   42244:	00c0570e 	bge	zero,r3,423a4 <_fflush_r+0x1b4>
   42248:	82000a17 	ldw	r8,40(r16)
   4224c:	40002426 	beq	r8,zero,422e0 <_fflush_r+0xf0>
   42250:	9c400017 	ldw	r17,0(r19)
   42254:	10c4000c 	andi	r3,r2,4096
   42258:	98000015 	stw	zero,0(r19)
   4225c:	18004626 	beq	r3,zero,42378 <_fflush_r+0x188>
   42260:	81801417 	ldw	r6,80(r16)
   42264:	10c0010c 	andi	r3,r2,4
   42268:	18000626 	beq	r3,zero,42284 <_fflush_r+0x94>
   4226c:	80c00117 	ldw	r3,4(r16)
   42270:	80800c17 	ldw	r2,48(r16)
   42274:	30cdc83a 	sub	r6,r6,r3
   42278:	10000226 	beq	r2,zero,42284 <_fflush_r+0x94>
   4227c:	80800f17 	ldw	r2,60(r16)
   42280:	308dc83a 	sub	r6,r6,r2
   42284:	81400717 	ldw	r5,28(r16)
   42288:	9809883a 	mov	r4,r19
   4228c:	000f883a 	mov	r7,zero
   42290:	403ee83a 	callr	r8
   42294:	00ffffc4 	movi	r3,-1
   42298:	10c04526 	beq	r2,r3,423b0 <_fflush_r+0x1c0>
   4229c:	80c0030b 	ldhu	r3,12(r16)
   422a0:	81000417 	ldw	r4,16(r16)
   422a4:	80000115 	stw	zero,4(r16)
   422a8:	197dffcc 	andi	r5,r3,63487
   422ac:	8140030d 	sth	r5,12(r16)
   422b0:	81000015 	stw	r4,0(r16)
   422b4:	18c4000c 	andi	r3,r3,4096
   422b8:	18000126 	beq	r3,zero,422c0 <_fflush_r+0xd0>
   422bc:	80801415 	stw	r2,80(r16)
   422c0:	81400c17 	ldw	r5,48(r16)
   422c4:	9c400015 	stw	r17,0(r19)
   422c8:	28000526 	beq	r5,zero,422e0 <_fflush_r+0xf0>
   422cc:	80801004 	addi	r2,r16,64
   422d0:	28800226 	beq	r5,r2,422dc <_fflush_r+0xec>
   422d4:	9809883a 	mov	r4,r19
   422d8:	00429200 	call	42920 <_free_r>
   422dc:	80000c15 	stw	zero,48(r16)
   422e0:	0005883a 	mov	r2,zero
   422e4:	dfc00417 	ldw	ra,16(sp)
   422e8:	dcc00317 	ldw	r19,12(sp)
   422ec:	dc800217 	ldw	r18,8(sp)
   422f0:	dc400117 	ldw	r17,4(sp)
   422f4:	dc000017 	ldw	r16,0(sp)
   422f8:	dec00504 	addi	sp,sp,20
   422fc:	f800283a 	ret
   42300:	84800417 	ldw	r18,16(r16)
   42304:	903ff626 	beq	r18,zero,422e0 <__alt_data_end+0xfffcc780>
   42308:	84400017 	ldw	r17,0(r16)
   4230c:	108000cc 	andi	r2,r2,3
   42310:	84800015 	stw	r18,0(r16)
   42314:	8ca3c83a 	sub	r17,r17,r18
   42318:	10001526 	beq	r2,zero,42370 <_fflush_r+0x180>
   4231c:	0005883a 	mov	r2,zero
   42320:	80800215 	stw	r2,8(r16)
   42324:	04400316 	blt	zero,r17,42334 <_fflush_r+0x144>
   42328:	003fed06 	br	422e0 <__alt_data_end+0xfffcc780>
   4232c:	90a5883a 	add	r18,r18,r2
   42330:	047feb0e 	bge	zero,r17,422e0 <__alt_data_end+0xfffcc780>
   42334:	80800917 	ldw	r2,36(r16)
   42338:	81400717 	ldw	r5,28(r16)
   4233c:	880f883a 	mov	r7,r17
   42340:	900d883a 	mov	r6,r18
   42344:	9809883a 	mov	r4,r19
   42348:	103ee83a 	callr	r2
   4234c:	88a3c83a 	sub	r17,r17,r2
   42350:	00bff616 	blt	zero,r2,4232c <__alt_data_end+0xfffcc7cc>
   42354:	80c0030b 	ldhu	r3,12(r16)
   42358:	00bfffc4 	movi	r2,-1
   4235c:	18c01014 	ori	r3,r3,64
   42360:	80c0030d 	sth	r3,12(r16)
   42364:	003fdf06 	br	422e4 <__alt_data_end+0xfffcc784>
   42368:	00427ac0 	call	427ac <__sinit>
   4236c:	003fab06 	br	4221c <__alt_data_end+0xfffcc6bc>
   42370:	80800517 	ldw	r2,20(r16)
   42374:	003fea06 	br	42320 <__alt_data_end+0xfffcc7c0>
   42378:	81400717 	ldw	r5,28(r16)
   4237c:	000d883a 	mov	r6,zero
   42380:	9809883a 	mov	r4,r19
   42384:	01c00044 	movi	r7,1
   42388:	403ee83a 	callr	r8
   4238c:	100d883a 	mov	r6,r2
   42390:	00bfffc4 	movi	r2,-1
   42394:	30801326 	beq	r6,r2,423e4 <_fflush_r+0x1f4>
   42398:	8080030b 	ldhu	r2,12(r16)
   4239c:	82000a17 	ldw	r8,40(r16)
   423a0:	003fb006 	br	42264 <__alt_data_end+0xfffcc704>
   423a4:	80c00f17 	ldw	r3,60(r16)
   423a8:	00ffa716 	blt	zero,r3,42248 <__alt_data_end+0xfffcc6e8>
   423ac:	003fcc06 	br	422e0 <__alt_data_end+0xfffcc780>
   423b0:	98c00017 	ldw	r3,0(r19)
   423b4:	183fb926 	beq	r3,zero,4229c <__alt_data_end+0xfffcc73c>
   423b8:	01000744 	movi	r4,29
   423bc:	19000226 	beq	r3,r4,423c8 <_fflush_r+0x1d8>
   423c0:	01000584 	movi	r4,22
   423c4:	1900101e 	bne	r3,r4,42408 <_fflush_r+0x218>
   423c8:	8080030b 	ldhu	r2,12(r16)
   423cc:	80c00417 	ldw	r3,16(r16)
   423d0:	80000115 	stw	zero,4(r16)
   423d4:	10bdffcc 	andi	r2,r2,63487
   423d8:	8080030d 	sth	r2,12(r16)
   423dc:	80c00015 	stw	r3,0(r16)
   423e0:	003fb706 	br	422c0 <__alt_data_end+0xfffcc760>
   423e4:	98800017 	ldw	r2,0(r19)
   423e8:	103feb26 	beq	r2,zero,42398 <__alt_data_end+0xfffcc838>
   423ec:	00c00744 	movi	r3,29
   423f0:	10c00226 	beq	r2,r3,423fc <_fflush_r+0x20c>
   423f4:	00c00584 	movi	r3,22
   423f8:	10ffd61e 	bne	r2,r3,42354 <__alt_data_end+0xfffcc7f4>
   423fc:	9c400015 	stw	r17,0(r19)
   42400:	0005883a 	mov	r2,zero
   42404:	003fb706 	br	422e4 <__alt_data_end+0xfffcc784>
   42408:	80c0030b 	ldhu	r3,12(r16)
   4240c:	18c01014 	ori	r3,r3,64
   42410:	80c0030d 	sth	r3,12(r16)
   42414:	003fb306 	br	422e4 <__alt_data_end+0xfffcc784>

00042418 <fflush>:
   42418:	20000526 	beq	r4,zero,42430 <fflush+0x18>
   4241c:	00800174 	movhi	r2,5
   42420:	10a10704 	addi	r2,r2,-31716
   42424:	200b883a 	mov	r5,r4
   42428:	11000017 	ldw	r4,0(r2)
   4242c:	00421f01 	jmpi	421f0 <_fflush_r>
   42430:	00800174 	movhi	r2,5
   42434:	10a10604 	addi	r2,r2,-31720
   42438:	11000017 	ldw	r4,0(r2)
   4243c:	01400134 	movhi	r5,4
   42440:	29487c04 	addi	r5,r5,8688
   42444:	0042cc81 	jmpi	42cc8 <_fwalk_reent>

00042448 <__fp_lock>:
   42448:	0005883a 	mov	r2,zero
   4244c:	f800283a 	ret

00042450 <__fp_unlock>:
   42450:	0005883a 	mov	r2,zero
   42454:	f800283a 	ret

00042458 <_cleanup_r>:
   42458:	01400134 	movhi	r5,4
   4245c:	294cd204 	addi	r5,r5,13128
   42460:	0042c101 	jmpi	42c10 <_fwalk>

00042464 <__sinit.part.1>:
   42464:	defff604 	addi	sp,sp,-40
   42468:	00c00134 	movhi	r3,4
   4246c:	dfc00915 	stw	ra,36(sp)
   42470:	df000815 	stw	fp,32(sp)
   42474:	ddc00715 	stw	r23,28(sp)
   42478:	dd800615 	stw	r22,24(sp)
   4247c:	dd400515 	stw	r21,20(sp)
   42480:	dd000415 	stw	r20,16(sp)
   42484:	dcc00315 	stw	r19,12(sp)
   42488:	dc800215 	stw	r18,8(sp)
   4248c:	dc400115 	stw	r17,4(sp)
   42490:	dc000015 	stw	r16,0(sp)
   42494:	18c91604 	addi	r3,r3,9304
   42498:	24000117 	ldw	r16,4(r4)
   4249c:	20c00f15 	stw	r3,60(r4)
   424a0:	07000044 	movi	fp,1
   424a4:	00c000c4 	movi	r3,3
   424a8:	2080bb04 	addi	r2,r4,748
   424ac:	20c0b915 	stw	r3,740(r4)
   424b0:	27000e15 	stw	fp,56(r4)
   424b4:	2080ba15 	stw	r2,744(r4)
   424b8:	2000b815 	stw	zero,736(r4)
   424bc:	05c00204 	movi	r23,8
   424c0:	00800104 	movi	r2,4
   424c4:	2025883a 	mov	r18,r4
   424c8:	b80d883a 	mov	r6,r23
   424cc:	81001704 	addi	r4,r16,92
   424d0:	000b883a 	mov	r5,zero
   424d4:	80000015 	stw	zero,0(r16)
   424d8:	80000115 	stw	zero,4(r16)
   424dc:	80000215 	stw	zero,8(r16)
   424e0:	8080030d 	sth	r2,12(r16)
   424e4:	80001915 	stw	zero,100(r16)
   424e8:	8000038d 	sth	zero,14(r16)
   424ec:	80000415 	stw	zero,16(r16)
   424f0:	80000515 	stw	zero,20(r16)
   424f4:	80000615 	stw	zero,24(r16)
   424f8:	0042f380 	call	42f38 <memset>
   424fc:	05800134 	movhi	r22,4
   42500:	94400217 	ldw	r17,8(r18)
   42504:	05400134 	movhi	r21,4
   42508:	05000134 	movhi	r20,4
   4250c:	04c00134 	movhi	r19,4
   42510:	b58c1704 	addi	r22,r22,12380
   42514:	ad4c2e04 	addi	r21,r21,12472
   42518:	a50c4d04 	addi	r20,r20,12596
   4251c:	9ccc6404 	addi	r19,r19,12688
   42520:	85800815 	stw	r22,32(r16)
   42524:	85400915 	stw	r21,36(r16)
   42528:	85000a15 	stw	r20,40(r16)
   4252c:	84c00b15 	stw	r19,44(r16)
   42530:	84000715 	stw	r16,28(r16)
   42534:	00800284 	movi	r2,10
   42538:	89001704 	addi	r4,r17,92
   4253c:	b80d883a 	mov	r6,r23
   42540:	000b883a 	mov	r5,zero
   42544:	88000015 	stw	zero,0(r17)
   42548:	88000115 	stw	zero,4(r17)
   4254c:	88000215 	stw	zero,8(r17)
   42550:	8880030d 	sth	r2,12(r17)
   42554:	88001915 	stw	zero,100(r17)
   42558:	8f00038d 	sth	fp,14(r17)
   4255c:	88000415 	stw	zero,16(r17)
   42560:	88000515 	stw	zero,20(r17)
   42564:	88000615 	stw	zero,24(r17)
   42568:	0042f380 	call	42f38 <memset>
   4256c:	94000317 	ldw	r16,12(r18)
   42570:	00800484 	movi	r2,18
   42574:	8c400715 	stw	r17,28(r17)
   42578:	8d800815 	stw	r22,32(r17)
   4257c:	8d400915 	stw	r21,36(r17)
   42580:	8d000a15 	stw	r20,40(r17)
   42584:	8cc00b15 	stw	r19,44(r17)
   42588:	8080030d 	sth	r2,12(r16)
   4258c:	00800084 	movi	r2,2
   42590:	80000015 	stw	zero,0(r16)
   42594:	80000115 	stw	zero,4(r16)
   42598:	80000215 	stw	zero,8(r16)
   4259c:	80001915 	stw	zero,100(r16)
   425a0:	8080038d 	sth	r2,14(r16)
   425a4:	80000415 	stw	zero,16(r16)
   425a8:	80000515 	stw	zero,20(r16)
   425ac:	80000615 	stw	zero,24(r16)
   425b0:	81001704 	addi	r4,r16,92
   425b4:	000b883a 	mov	r5,zero
   425b8:	b80d883a 	mov	r6,r23
   425bc:	0042f380 	call	42f38 <memset>
   425c0:	84000715 	stw	r16,28(r16)
   425c4:	85800815 	stw	r22,32(r16)
   425c8:	85400915 	stw	r21,36(r16)
   425cc:	85000a15 	stw	r20,40(r16)
   425d0:	84c00b15 	stw	r19,44(r16)
   425d4:	dfc00917 	ldw	ra,36(sp)
   425d8:	df000817 	ldw	fp,32(sp)
   425dc:	ddc00717 	ldw	r23,28(sp)
   425e0:	dd800617 	ldw	r22,24(sp)
   425e4:	dd400517 	ldw	r21,20(sp)
   425e8:	dd000417 	ldw	r20,16(sp)
   425ec:	dcc00317 	ldw	r19,12(sp)
   425f0:	dc800217 	ldw	r18,8(sp)
   425f4:	dc400117 	ldw	r17,4(sp)
   425f8:	dc000017 	ldw	r16,0(sp)
   425fc:	dec00a04 	addi	sp,sp,40
   42600:	f800283a 	ret

00042604 <__sfmoreglue>:
   42604:	defffc04 	addi	sp,sp,-16
   42608:	dc800215 	stw	r18,8(sp)
   4260c:	2825883a 	mov	r18,r5
   42610:	dc000015 	stw	r16,0(sp)
   42614:	01401a04 	movi	r5,104
   42618:	2021883a 	mov	r16,r4
   4261c:	9009883a 	mov	r4,r18
   42620:	dfc00315 	stw	ra,12(sp)
   42624:	dc400115 	stw	r17,4(sp)
   42628:	00408fc0 	call	408fc <__mulsi3>
   4262c:	8009883a 	mov	r4,r16
   42630:	11400304 	addi	r5,r2,12
   42634:	1023883a 	mov	r17,r2
   42638:	0040fa80 	call	40fa8 <_malloc_r>
   4263c:	1021883a 	mov	r16,r2
   42640:	10000726 	beq	r2,zero,42660 <__sfmoreglue+0x5c>
   42644:	11000304 	addi	r4,r2,12
   42648:	10000015 	stw	zero,0(r2)
   4264c:	14800115 	stw	r18,4(r2)
   42650:	11000215 	stw	r4,8(r2)
   42654:	000b883a 	mov	r5,zero
   42658:	880d883a 	mov	r6,r17
   4265c:	0042f380 	call	42f38 <memset>
   42660:	8005883a 	mov	r2,r16
   42664:	dfc00317 	ldw	ra,12(sp)
   42668:	dc800217 	ldw	r18,8(sp)
   4266c:	dc400117 	ldw	r17,4(sp)
   42670:	dc000017 	ldw	r16,0(sp)
   42674:	dec00404 	addi	sp,sp,16
   42678:	f800283a 	ret

0004267c <__sfp>:
   4267c:	00800174 	movhi	r2,5
   42680:	defffb04 	addi	sp,sp,-20
   42684:	10a10604 	addi	r2,r2,-31720
   42688:	dc800215 	stw	r18,8(sp)
   4268c:	14800017 	ldw	r18,0(r2)
   42690:	dcc00315 	stw	r19,12(sp)
   42694:	dfc00415 	stw	ra,16(sp)
   42698:	90800e17 	ldw	r2,56(r18)
   4269c:	dc400115 	stw	r17,4(sp)
   426a0:	dc000015 	stw	r16,0(sp)
   426a4:	2027883a 	mov	r19,r4
   426a8:	1000021e 	bne	r2,zero,426b4 <__sfp+0x38>
   426ac:	9009883a 	mov	r4,r18
   426b0:	00424640 	call	42464 <__sinit.part.1>
   426b4:	9480b804 	addi	r18,r18,736
   426b8:	047fffc4 	movi	r17,-1
   426bc:	91400117 	ldw	r5,4(r18)
   426c0:	94000217 	ldw	r16,8(r18)
   426c4:	297fffc4 	addi	r5,r5,-1
   426c8:	28000a16 	blt	r5,zero,426f4 <__sfp+0x78>
   426cc:	8080030f 	ldh	r2,12(r16)
   426d0:	10000c26 	beq	r2,zero,42704 <__sfp+0x88>
   426d4:	80c01d04 	addi	r3,r16,116
   426d8:	00000206 	br	426e4 <__sfp+0x68>
   426dc:	18bfe60f 	ldh	r2,-104(r3)
   426e0:	10000826 	beq	r2,zero,42704 <__sfp+0x88>
   426e4:	297fffc4 	addi	r5,r5,-1
   426e8:	1c3ffd04 	addi	r16,r3,-12
   426ec:	18c01a04 	addi	r3,r3,104
   426f0:	2c7ffa1e 	bne	r5,r17,426dc <__alt_data_end+0xfffccb7c>
   426f4:	90800017 	ldw	r2,0(r18)
   426f8:	10001d26 	beq	r2,zero,42770 <__sfp+0xf4>
   426fc:	1025883a 	mov	r18,r2
   42700:	003fee06 	br	426bc <__alt_data_end+0xfffccb5c>
   42704:	00bfffc4 	movi	r2,-1
   42708:	8080038d 	sth	r2,14(r16)
   4270c:	00800044 	movi	r2,1
   42710:	8080030d 	sth	r2,12(r16)
   42714:	80001915 	stw	zero,100(r16)
   42718:	80000015 	stw	zero,0(r16)
   4271c:	80000215 	stw	zero,8(r16)
   42720:	80000115 	stw	zero,4(r16)
   42724:	80000415 	stw	zero,16(r16)
   42728:	80000515 	stw	zero,20(r16)
   4272c:	80000615 	stw	zero,24(r16)
   42730:	81001704 	addi	r4,r16,92
   42734:	000b883a 	mov	r5,zero
   42738:	01800204 	movi	r6,8
   4273c:	0042f380 	call	42f38 <memset>
   42740:	8005883a 	mov	r2,r16
   42744:	80000c15 	stw	zero,48(r16)
   42748:	80000d15 	stw	zero,52(r16)
   4274c:	80001115 	stw	zero,68(r16)
   42750:	80001215 	stw	zero,72(r16)
   42754:	dfc00417 	ldw	ra,16(sp)
   42758:	dcc00317 	ldw	r19,12(sp)
   4275c:	dc800217 	ldw	r18,8(sp)
   42760:	dc400117 	ldw	r17,4(sp)
   42764:	dc000017 	ldw	r16,0(sp)
   42768:	dec00504 	addi	sp,sp,20
   4276c:	f800283a 	ret
   42770:	9809883a 	mov	r4,r19
   42774:	01400104 	movi	r5,4
   42778:	00426040 	call	42604 <__sfmoreglue>
   4277c:	90800015 	stw	r2,0(r18)
   42780:	103fde1e 	bne	r2,zero,426fc <__alt_data_end+0xfffccb9c>
   42784:	00800304 	movi	r2,12
   42788:	98800015 	stw	r2,0(r19)
   4278c:	0005883a 	mov	r2,zero
   42790:	003ff006 	br	42754 <__alt_data_end+0xfffccbf4>

00042794 <_cleanup>:
   42794:	00800174 	movhi	r2,5
   42798:	10a10604 	addi	r2,r2,-31720
   4279c:	11000017 	ldw	r4,0(r2)
   427a0:	01400134 	movhi	r5,4
   427a4:	294cd204 	addi	r5,r5,13128
   427a8:	0042c101 	jmpi	42c10 <_fwalk>

000427ac <__sinit>:
   427ac:	20800e17 	ldw	r2,56(r4)
   427b0:	10000126 	beq	r2,zero,427b8 <__sinit+0xc>
   427b4:	f800283a 	ret
   427b8:	00424641 	jmpi	42464 <__sinit.part.1>

000427bc <__sfp_lock_acquire>:
   427bc:	f800283a 	ret

000427c0 <__sfp_lock_release>:
   427c0:	f800283a 	ret

000427c4 <__sinit_lock_acquire>:
   427c4:	f800283a 	ret

000427c8 <__sinit_lock_release>:
   427c8:	f800283a 	ret

000427cc <__fp_lock_all>:
   427cc:	00800174 	movhi	r2,5
   427d0:	10a10704 	addi	r2,r2,-31716
   427d4:	11000017 	ldw	r4,0(r2)
   427d8:	01400134 	movhi	r5,4
   427dc:	29491204 	addi	r5,r5,9288
   427e0:	0042c101 	jmpi	42c10 <_fwalk>

000427e4 <__fp_unlock_all>:
   427e4:	00800174 	movhi	r2,5
   427e8:	10a10704 	addi	r2,r2,-31716
   427ec:	11000017 	ldw	r4,0(r2)
   427f0:	01400134 	movhi	r5,4
   427f4:	29491404 	addi	r5,r5,9296
   427f8:	0042c101 	jmpi	42c10 <_fwalk>

000427fc <_malloc_trim_r>:
   427fc:	defffb04 	addi	sp,sp,-20
   42800:	dcc00315 	stw	r19,12(sp)
   42804:	04c00134 	movhi	r19,4
   42808:	dc800215 	stw	r18,8(sp)
   4280c:	dc400115 	stw	r17,4(sp)
   42810:	dc000015 	stw	r16,0(sp)
   42814:	dfc00415 	stw	ra,16(sp)
   42818:	2821883a 	mov	r16,r5
   4281c:	9cdb5104 	addi	r19,r19,27972
   42820:	2025883a 	mov	r18,r4
   42824:	0043bac0 	call	43bac <__malloc_lock>
   42828:	98800217 	ldw	r2,8(r19)
   4282c:	14400117 	ldw	r17,4(r2)
   42830:	00bfff04 	movi	r2,-4
   42834:	88a2703a 	and	r17,r17,r2
   42838:	8c21c83a 	sub	r16,r17,r16
   4283c:	8403fbc4 	addi	r16,r16,4079
   42840:	8020d33a 	srli	r16,r16,12
   42844:	0083ffc4 	movi	r2,4095
   42848:	843fffc4 	addi	r16,r16,-1
   4284c:	8020933a 	slli	r16,r16,12
   42850:	1400060e 	bge	r2,r16,4286c <_malloc_trim_r+0x70>
   42854:	9009883a 	mov	r4,r18
   42858:	000b883a 	mov	r5,zero
   4285c:	004206c0 	call	4206c <_sbrk_r>
   42860:	98c00217 	ldw	r3,8(r19)
   42864:	1c47883a 	add	r3,r3,r17
   42868:	10c00a26 	beq	r2,r3,42894 <_malloc_trim_r+0x98>
   4286c:	9009883a 	mov	r4,r18
   42870:	0043bcc0 	call	43bcc <__malloc_unlock>
   42874:	0005883a 	mov	r2,zero
   42878:	dfc00417 	ldw	ra,16(sp)
   4287c:	dcc00317 	ldw	r19,12(sp)
   42880:	dc800217 	ldw	r18,8(sp)
   42884:	dc400117 	ldw	r17,4(sp)
   42888:	dc000017 	ldw	r16,0(sp)
   4288c:	dec00504 	addi	sp,sp,20
   42890:	f800283a 	ret
   42894:	9009883a 	mov	r4,r18
   42898:	040bc83a 	sub	r5,zero,r16
   4289c:	004206c0 	call	4206c <_sbrk_r>
   428a0:	00ffffc4 	movi	r3,-1
   428a4:	10c00d26 	beq	r2,r3,428dc <_malloc_trim_r+0xe0>
   428a8:	00c00174 	movhi	r3,5
   428ac:	18e7eb04 	addi	r3,r3,-24660
   428b0:	18800017 	ldw	r2,0(r3)
   428b4:	99000217 	ldw	r4,8(r19)
   428b8:	8c23c83a 	sub	r17,r17,r16
   428bc:	8c400054 	ori	r17,r17,1
   428c0:	1421c83a 	sub	r16,r2,r16
   428c4:	24400115 	stw	r17,4(r4)
   428c8:	9009883a 	mov	r4,r18
   428cc:	1c000015 	stw	r16,0(r3)
   428d0:	0043bcc0 	call	43bcc <__malloc_unlock>
   428d4:	00800044 	movi	r2,1
   428d8:	003fe706 	br	42878 <__alt_data_end+0xfffccd18>
   428dc:	9009883a 	mov	r4,r18
   428e0:	000b883a 	mov	r5,zero
   428e4:	004206c0 	call	4206c <_sbrk_r>
   428e8:	99000217 	ldw	r4,8(r19)
   428ec:	014003c4 	movi	r5,15
   428f0:	1107c83a 	sub	r3,r2,r4
   428f4:	28ffdd0e 	bge	r5,r3,4286c <__alt_data_end+0xfffccd0c>
   428f8:	01400174 	movhi	r5,5
   428fc:	29610804 	addi	r5,r5,-31712
   42900:	29400017 	ldw	r5,0(r5)
   42904:	18c00054 	ori	r3,r3,1
   42908:	20c00115 	stw	r3,4(r4)
   4290c:	00c00174 	movhi	r3,5
   42910:	1145c83a 	sub	r2,r2,r5
   42914:	18e7eb04 	addi	r3,r3,-24660
   42918:	18800015 	stw	r2,0(r3)
   4291c:	003fd306 	br	4286c <__alt_data_end+0xfffccd0c>

00042920 <_free_r>:
   42920:	28004c26 	beq	r5,zero,42a54 <_free_r+0x134>
   42924:	defffd04 	addi	sp,sp,-12
   42928:	dc400115 	stw	r17,4(sp)
   4292c:	dc000015 	stw	r16,0(sp)
   42930:	2023883a 	mov	r17,r4
   42934:	2821883a 	mov	r16,r5
   42938:	dfc00215 	stw	ra,8(sp)
   4293c:	0043bac0 	call	43bac <__malloc_lock>
   42940:	813fff17 	ldw	r4,-4(r16)
   42944:	00bfff84 	movi	r2,-2
   42948:	02400134 	movhi	r9,4
   4294c:	81bffe04 	addi	r6,r16,-8
   42950:	2084703a 	and	r2,r4,r2
   42954:	4a5b5104 	addi	r9,r9,27972
   42958:	308b883a 	add	r5,r6,r2
   4295c:	2a000117 	ldw	r8,4(r5)
   42960:	49c00217 	ldw	r7,8(r9)
   42964:	00ffff04 	movi	r3,-4
   42968:	40c6703a 	and	r3,r8,r3
   4296c:	39405326 	beq	r7,r5,42abc <_free_r+0x19c>
   42970:	28c00115 	stw	r3,4(r5)
   42974:	2100004c 	andi	r4,r4,1
   42978:	2000091e 	bne	r4,zero,429a0 <_free_r+0x80>
   4297c:	81fffe17 	ldw	r7,-8(r16)
   42980:	4a000204 	addi	r8,r9,8
   42984:	31cdc83a 	sub	r6,r6,r7
   42988:	31000217 	ldw	r4,8(r6)
   4298c:	11c5883a 	add	r2,r2,r7
   42990:	22006126 	beq	r4,r8,42b18 <_free_r+0x1f8>
   42994:	31c00317 	ldw	r7,12(r6)
   42998:	21c00315 	stw	r7,12(r4)
   4299c:	39000215 	stw	r4,8(r7)
   429a0:	28c9883a 	add	r4,r5,r3
   429a4:	21c00117 	ldw	r7,4(r4)
   429a8:	39c0004c 	andi	r7,r7,1
   429ac:	38000d1e 	bne	r7,zero,429e4 <_free_r+0xc4>
   429b0:	29000217 	ldw	r4,8(r5)
   429b4:	10c5883a 	add	r2,r2,r3
   429b8:	00c00134 	movhi	r3,4
   429bc:	18db5304 	addi	r3,r3,27980
   429c0:	20c07526 	beq	r4,r3,42b98 <_free_r+0x278>
   429c4:	29c00317 	ldw	r7,12(r5)
   429c8:	11400054 	ori	r5,r2,1
   429cc:	3087883a 	add	r3,r6,r2
   429d0:	21c00315 	stw	r7,12(r4)
   429d4:	39000215 	stw	r4,8(r7)
   429d8:	31400115 	stw	r5,4(r6)
   429dc:	18800015 	stw	r2,0(r3)
   429e0:	00000406 	br	429f4 <_free_r+0xd4>
   429e4:	10c00054 	ori	r3,r2,1
   429e8:	30c00115 	stw	r3,4(r6)
   429ec:	3087883a 	add	r3,r6,r2
   429f0:	18800015 	stw	r2,0(r3)
   429f4:	00c07fc4 	movi	r3,511
   429f8:	18801736 	bltu	r3,r2,42a58 <_free_r+0x138>
   429fc:	1004d0fa 	srli	r2,r2,3
   42a00:	01400044 	movi	r5,1
   42a04:	49000117 	ldw	r4,4(r9)
   42a08:	1087883a 	add	r3,r2,r2
   42a0c:	18c7883a 	add	r3,r3,r3
   42a10:	1005d0ba 	srai	r2,r2,2
   42a14:	18c7883a 	add	r3,r3,r3
   42a18:	1a47883a 	add	r3,r3,r9
   42a1c:	19c00217 	ldw	r7,8(r3)
   42a20:	2884983a 	sll	r2,r5,r2
   42a24:	30c00315 	stw	r3,12(r6)
   42a28:	31c00215 	stw	r7,8(r6)
   42a2c:	1104b03a 	or	r2,r2,r4
   42a30:	19800215 	stw	r6,8(r3)
   42a34:	48800115 	stw	r2,4(r9)
   42a38:	39800315 	stw	r6,12(r7)
   42a3c:	8809883a 	mov	r4,r17
   42a40:	dfc00217 	ldw	ra,8(sp)
   42a44:	dc400117 	ldw	r17,4(sp)
   42a48:	dc000017 	ldw	r16,0(sp)
   42a4c:	dec00304 	addi	sp,sp,12
   42a50:	0043bcc1 	jmpi	43bcc <__malloc_unlock>
   42a54:	f800283a 	ret
   42a58:	1006d27a 	srli	r3,r2,9
   42a5c:	01000104 	movi	r4,4
   42a60:	20c04036 	bltu	r4,r3,42b64 <_free_r+0x244>
   42a64:	1006d1ba 	srli	r3,r2,6
   42a68:	19400e04 	addi	r5,r3,56
   42a6c:	2947883a 	add	r3,r5,r5
   42a70:	18c7883a 	add	r3,r3,r3
   42a74:	18c7883a 	add	r3,r3,r3
   42a78:	1a49883a 	add	r4,r3,r9
   42a7c:	20c00217 	ldw	r3,8(r4)
   42a80:	01c00134 	movhi	r7,4
   42a84:	39db5104 	addi	r7,r7,27972
   42a88:	19003b26 	beq	r3,r4,42b78 <_free_r+0x258>
   42a8c:	01ffff04 	movi	r7,-4
   42a90:	19400117 	ldw	r5,4(r3)
   42a94:	29ca703a 	and	r5,r5,r7
   42a98:	1140022e 	bgeu	r2,r5,42aa4 <_free_r+0x184>
   42a9c:	18c00217 	ldw	r3,8(r3)
   42aa0:	20fffb1e 	bne	r4,r3,42a90 <__alt_data_end+0xfffccf30>
   42aa4:	18800317 	ldw	r2,12(r3)
   42aa8:	30800315 	stw	r2,12(r6)
   42aac:	30c00215 	stw	r3,8(r6)
   42ab0:	11800215 	stw	r6,8(r2)
   42ab4:	19800315 	stw	r6,12(r3)
   42ab8:	003fe006 	br	42a3c <__alt_data_end+0xfffccedc>
   42abc:	2100004c 	andi	r4,r4,1
   42ac0:	1885883a 	add	r2,r3,r2
   42ac4:	2000071e 	bne	r4,zero,42ae4 <_free_r+0x1c4>
   42ac8:	817ffe17 	ldw	r5,-8(r16)
   42acc:	314dc83a 	sub	r6,r6,r5
   42ad0:	30c00317 	ldw	r3,12(r6)
   42ad4:	31000217 	ldw	r4,8(r6)
   42ad8:	1145883a 	add	r2,r2,r5
   42adc:	20c00315 	stw	r3,12(r4)
   42ae0:	19000215 	stw	r4,8(r3)
   42ae4:	10c00054 	ori	r3,r2,1
   42ae8:	30c00115 	stw	r3,4(r6)
   42aec:	00c00174 	movhi	r3,5
   42af0:	18e10904 	addi	r3,r3,-31708
   42af4:	18c00017 	ldw	r3,0(r3)
   42af8:	49800215 	stw	r6,8(r9)
   42afc:	10ffcf36 	bltu	r2,r3,42a3c <__alt_data_end+0xfffccedc>
   42b00:	00800174 	movhi	r2,5
   42b04:	10a7e204 	addi	r2,r2,-24696
   42b08:	11400017 	ldw	r5,0(r2)
   42b0c:	8809883a 	mov	r4,r17
   42b10:	00427fc0 	call	427fc <_malloc_trim_r>
   42b14:	003fc906 	br	42a3c <__alt_data_end+0xfffccedc>
   42b18:	28c9883a 	add	r4,r5,r3
   42b1c:	21000117 	ldw	r4,4(r4)
   42b20:	2100004c 	andi	r4,r4,1
   42b24:	20000a1e 	bne	r4,zero,42b50 <_free_r+0x230>
   42b28:	29000317 	ldw	r4,12(r5)
   42b2c:	29400217 	ldw	r5,8(r5)
   42b30:	10c5883a 	add	r2,r2,r3
   42b34:	10c00054 	ori	r3,r2,1
   42b38:	29000315 	stw	r4,12(r5)
   42b3c:	21400215 	stw	r5,8(r4)
   42b40:	30c00115 	stw	r3,4(r6)
   42b44:	308d883a 	add	r6,r6,r2
   42b48:	30800015 	stw	r2,0(r6)
   42b4c:	003fbb06 	br	42a3c <__alt_data_end+0xfffccedc>
   42b50:	10c00054 	ori	r3,r2,1
   42b54:	30c00115 	stw	r3,4(r6)
   42b58:	308d883a 	add	r6,r6,r2
   42b5c:	30800015 	stw	r2,0(r6)
   42b60:	003fb606 	br	42a3c <__alt_data_end+0xfffccedc>
   42b64:	01000504 	movi	r4,20
   42b68:	20c01436 	bltu	r4,r3,42bbc <_free_r+0x29c>
   42b6c:	194016c4 	addi	r5,r3,91
   42b70:	2947883a 	add	r3,r5,r5
   42b74:	003fbe06 	br	42a70 <__alt_data_end+0xfffccf10>
   42b78:	280bd0ba 	srai	r5,r5,2
   42b7c:	00800044 	movi	r2,1
   42b80:	39000117 	ldw	r4,4(r7)
   42b84:	114a983a 	sll	r5,r2,r5
   42b88:	1805883a 	mov	r2,r3
   42b8c:	2908b03a 	or	r4,r5,r4
   42b90:	39000115 	stw	r4,4(r7)
   42b94:	003fc406 	br	42aa8 <__alt_data_end+0xfffccf48>
   42b98:	49800515 	stw	r6,20(r9)
   42b9c:	49800415 	stw	r6,16(r9)
   42ba0:	10c00054 	ori	r3,r2,1
   42ba4:	31000315 	stw	r4,12(r6)
   42ba8:	31000215 	stw	r4,8(r6)
   42bac:	30c00115 	stw	r3,4(r6)
   42bb0:	308d883a 	add	r6,r6,r2
   42bb4:	30800015 	stw	r2,0(r6)
   42bb8:	003fa006 	br	42a3c <__alt_data_end+0xfffccedc>
   42bbc:	01001504 	movi	r4,84
   42bc0:	20c00436 	bltu	r4,r3,42bd4 <_free_r+0x2b4>
   42bc4:	1006d33a 	srli	r3,r2,12
   42bc8:	19401b84 	addi	r5,r3,110
   42bcc:	2947883a 	add	r3,r5,r5
   42bd0:	003fa706 	br	42a70 <__alt_data_end+0xfffccf10>
   42bd4:	01005504 	movi	r4,340
   42bd8:	20c00436 	bltu	r4,r3,42bec <_free_r+0x2cc>
   42bdc:	1006d3fa 	srli	r3,r2,15
   42be0:	19401dc4 	addi	r5,r3,119
   42be4:	2947883a 	add	r3,r5,r5
   42be8:	003fa106 	br	42a70 <__alt_data_end+0xfffccf10>
   42bec:	01015504 	movi	r4,1364
   42bf0:	20c00436 	bltu	r4,r3,42c04 <_free_r+0x2e4>
   42bf4:	1006d4ba 	srli	r3,r2,18
   42bf8:	19401f04 	addi	r5,r3,124
   42bfc:	2947883a 	add	r3,r5,r5
   42c00:	003f9b06 	br	42a70 <__alt_data_end+0xfffccf10>
   42c04:	00c03f04 	movi	r3,252
   42c08:	01401f84 	movi	r5,126
   42c0c:	003f9806 	br	42a70 <__alt_data_end+0xfffccf10>

00042c10 <_fwalk>:
   42c10:	defff804 	addi	sp,sp,-32
   42c14:	dd400515 	stw	r21,20(sp)
   42c18:	2540b804 	addi	r21,r4,736
   42c1c:	dd800615 	stw	r22,24(sp)
   42c20:	dd000415 	stw	r20,16(sp)
   42c24:	dfc00715 	stw	ra,28(sp)
   42c28:	dcc00315 	stw	r19,12(sp)
   42c2c:	dc800215 	stw	r18,8(sp)
   42c30:	dc400115 	stw	r17,4(sp)
   42c34:	dc000015 	stw	r16,0(sp)
   42c38:	2829883a 	mov	r20,r5
   42c3c:	002d883a 	mov	r22,zero
   42c40:	00427bc0 	call	427bc <__sfp_lock_acquire>
   42c44:	a8001426 	beq	r21,zero,42c98 <_fwalk+0x88>
   42c48:	04ffffc4 	movi	r19,-1
   42c4c:	ac400117 	ldw	r17,4(r21)
   42c50:	ac800217 	ldw	r18,8(r21)
   42c54:	8c7fffc4 	addi	r17,r17,-1
   42c58:	88000d16 	blt	r17,zero,42c90 <_fwalk+0x80>
   42c5c:	94000304 	addi	r16,r18,12
   42c60:	94800384 	addi	r18,r18,14
   42c64:	80c0000f 	ldh	r3,0(r16)
   42c68:	8c7fffc4 	addi	r17,r17,-1
   42c6c:	813ffd04 	addi	r4,r16,-12
   42c70:	18000426 	beq	r3,zero,42c84 <_fwalk+0x74>
   42c74:	90c0000f 	ldh	r3,0(r18)
   42c78:	1cc00226 	beq	r3,r19,42c84 <_fwalk+0x74>
   42c7c:	a03ee83a 	callr	r20
   42c80:	b0acb03a 	or	r22,r22,r2
   42c84:	84001a04 	addi	r16,r16,104
   42c88:	94801a04 	addi	r18,r18,104
   42c8c:	8cfff51e 	bne	r17,r19,42c64 <__alt_data_end+0xfffcd104>
   42c90:	ad400017 	ldw	r21,0(r21)
   42c94:	a83fed1e 	bne	r21,zero,42c4c <__alt_data_end+0xfffcd0ec>
   42c98:	00427c00 	call	427c0 <__sfp_lock_release>
   42c9c:	b005883a 	mov	r2,r22
   42ca0:	dfc00717 	ldw	ra,28(sp)
   42ca4:	dd800617 	ldw	r22,24(sp)
   42ca8:	dd400517 	ldw	r21,20(sp)
   42cac:	dd000417 	ldw	r20,16(sp)
   42cb0:	dcc00317 	ldw	r19,12(sp)
   42cb4:	dc800217 	ldw	r18,8(sp)
   42cb8:	dc400117 	ldw	r17,4(sp)
   42cbc:	dc000017 	ldw	r16,0(sp)
   42cc0:	dec00804 	addi	sp,sp,32
   42cc4:	f800283a 	ret

00042cc8 <_fwalk_reent>:
   42cc8:	defff804 	addi	sp,sp,-32
   42ccc:	dd400515 	stw	r21,20(sp)
   42cd0:	2540b804 	addi	r21,r4,736
   42cd4:	dd800615 	stw	r22,24(sp)
   42cd8:	dd000415 	stw	r20,16(sp)
   42cdc:	dcc00315 	stw	r19,12(sp)
   42ce0:	dfc00715 	stw	ra,28(sp)
   42ce4:	dc800215 	stw	r18,8(sp)
   42ce8:	dc400115 	stw	r17,4(sp)
   42cec:	dc000015 	stw	r16,0(sp)
   42cf0:	2027883a 	mov	r19,r4
   42cf4:	2829883a 	mov	r20,r5
   42cf8:	002d883a 	mov	r22,zero
   42cfc:	00427bc0 	call	427bc <__sfp_lock_acquire>
   42d00:	a8001326 	beq	r21,zero,42d50 <_fwalk_reent+0x88>
   42d04:	04bfffc4 	movi	r18,-1
   42d08:	ac400117 	ldw	r17,4(r21)
   42d0c:	ac000217 	ldw	r16,8(r21)
   42d10:	8c7fffc4 	addi	r17,r17,-1
   42d14:	88000c16 	blt	r17,zero,42d48 <_fwalk_reent+0x80>
   42d18:	84000304 	addi	r16,r16,12
   42d1c:	80c0000f 	ldh	r3,0(r16)
   42d20:	8c7fffc4 	addi	r17,r17,-1
   42d24:	817ffd04 	addi	r5,r16,-12
   42d28:	18000526 	beq	r3,zero,42d40 <_fwalk_reent+0x78>
   42d2c:	80c0008f 	ldh	r3,2(r16)
   42d30:	9809883a 	mov	r4,r19
   42d34:	1c800226 	beq	r3,r18,42d40 <_fwalk_reent+0x78>
   42d38:	a03ee83a 	callr	r20
   42d3c:	b0acb03a 	or	r22,r22,r2
   42d40:	84001a04 	addi	r16,r16,104
   42d44:	8cbff51e 	bne	r17,r18,42d1c <__alt_data_end+0xfffcd1bc>
   42d48:	ad400017 	ldw	r21,0(r21)
   42d4c:	a83fee1e 	bne	r21,zero,42d08 <__alt_data_end+0xfffcd1a8>
   42d50:	00427c00 	call	427c0 <__sfp_lock_release>
   42d54:	b005883a 	mov	r2,r22
   42d58:	dfc00717 	ldw	ra,28(sp)
   42d5c:	dd800617 	ldw	r22,24(sp)
   42d60:	dd400517 	ldw	r21,20(sp)
   42d64:	dd000417 	ldw	r20,16(sp)
   42d68:	dcc00317 	ldw	r19,12(sp)
   42d6c:	dc800217 	ldw	r18,8(sp)
   42d70:	dc400117 	ldw	r17,4(sp)
   42d74:	dc000017 	ldw	r16,0(sp)
   42d78:	dec00804 	addi	sp,sp,32
   42d7c:	f800283a 	ret

00042d80 <__smakebuf_r>:
   42d80:	2880030b 	ldhu	r2,12(r5)
   42d84:	10c0008c 	andi	r3,r2,2
   42d88:	1800401e 	bne	r3,zero,42e8c <__smakebuf_r+0x10c>
   42d8c:	deffec04 	addi	sp,sp,-80
   42d90:	dc000f15 	stw	r16,60(sp)
   42d94:	2821883a 	mov	r16,r5
   42d98:	2940038f 	ldh	r5,14(r5)
   42d9c:	dc401015 	stw	r17,64(sp)
   42da0:	dfc01315 	stw	ra,76(sp)
   42da4:	dcc01215 	stw	r19,72(sp)
   42da8:	dc801115 	stw	r18,68(sp)
   42dac:	2023883a 	mov	r17,r4
   42db0:	28001b16 	blt	r5,zero,42e20 <__smakebuf_r+0xa0>
   42db4:	d80d883a 	mov	r6,sp
   42db8:	004335c0 	call	4335c <_fstat_r>
   42dbc:	10001716 	blt	r2,zero,42e1c <__smakebuf_r+0x9c>
   42dc0:	d8800117 	ldw	r2,4(sp)
   42dc4:	00e00014 	movui	r3,32768
   42dc8:	10bc000c 	andi	r2,r2,61440
   42dcc:	10c03726 	beq	r2,r3,42eac <__smakebuf_r+0x12c>
   42dd0:	80c0030b 	ldhu	r3,12(r16)
   42dd4:	18c20014 	ori	r3,r3,2048
   42dd8:	80c0030d 	sth	r3,12(r16)
   42ddc:	00c80004 	movi	r3,8192
   42de0:	10c03c1e 	bne	r2,r3,42ed4 <__smakebuf_r+0x154>
   42de4:	8140038f 	ldh	r5,14(r16)
   42de8:	8809883a 	mov	r4,r17
   42dec:	00433b40 	call	433b4 <_isatty_r>
   42df0:	10004e26 	beq	r2,zero,42f2c <__smakebuf_r+0x1ac>
   42df4:	8080030b 	ldhu	r2,12(r16)
   42df8:	04c00044 	movi	r19,1
   42dfc:	80c010c4 	addi	r3,r16,67
   42e00:	14c4b03a 	or	r2,r2,r19
   42e04:	8080030d 	sth	r2,12(r16)
   42e08:	80c00015 	stw	r3,0(r16)
   42e0c:	80c00415 	stw	r3,16(r16)
   42e10:	84c00515 	stw	r19,20(r16)
   42e14:	04810004 	movi	r18,1024
   42e18:	00000706 	br	42e38 <__smakebuf_r+0xb8>
   42e1c:	8080030b 	ldhu	r2,12(r16)
   42e20:	10c0200c 	andi	r3,r2,128
   42e24:	18001f1e 	bne	r3,zero,42ea4 <__smakebuf_r+0x124>
   42e28:	04810004 	movi	r18,1024
   42e2c:	10820014 	ori	r2,r2,2048
   42e30:	8080030d 	sth	r2,12(r16)
   42e34:	0027883a 	mov	r19,zero
   42e38:	8809883a 	mov	r4,r17
   42e3c:	900b883a 	mov	r5,r18
   42e40:	0040fa80 	call	40fa8 <_malloc_r>
   42e44:	10002e26 	beq	r2,zero,42f00 <__smakebuf_r+0x180>
   42e48:	80c0030b 	ldhu	r3,12(r16)
   42e4c:	01000134 	movhi	r4,4
   42e50:	21091604 	addi	r4,r4,9304
   42e54:	89000f15 	stw	r4,60(r17)
   42e58:	18c02014 	ori	r3,r3,128
   42e5c:	80c0030d 	sth	r3,12(r16)
   42e60:	80800015 	stw	r2,0(r16)
   42e64:	80800415 	stw	r2,16(r16)
   42e68:	84800515 	stw	r18,20(r16)
   42e6c:	98001c1e 	bne	r19,zero,42ee0 <__smakebuf_r+0x160>
   42e70:	dfc01317 	ldw	ra,76(sp)
   42e74:	dcc01217 	ldw	r19,72(sp)
   42e78:	dc801117 	ldw	r18,68(sp)
   42e7c:	dc401017 	ldw	r17,64(sp)
   42e80:	dc000f17 	ldw	r16,60(sp)
   42e84:	dec01404 	addi	sp,sp,80
   42e88:	f800283a 	ret
   42e8c:	288010c4 	addi	r2,r5,67
   42e90:	28800015 	stw	r2,0(r5)
   42e94:	28800415 	stw	r2,16(r5)
   42e98:	00800044 	movi	r2,1
   42e9c:	28800515 	stw	r2,20(r5)
   42ea0:	f800283a 	ret
   42ea4:	04801004 	movi	r18,64
   42ea8:	003fe006 	br	42e2c <__alt_data_end+0xfffcd2cc>
   42eac:	81000a17 	ldw	r4,40(r16)
   42eb0:	00c00134 	movhi	r3,4
   42eb4:	18cc4d04 	addi	r3,r3,12596
   42eb8:	20ffc51e 	bne	r4,r3,42dd0 <__alt_data_end+0xfffcd270>
   42ebc:	80c0030b 	ldhu	r3,12(r16)
   42ec0:	01010004 	movi	r4,1024
   42ec4:	81001315 	stw	r4,76(r16)
   42ec8:	1906b03a 	or	r3,r3,r4
   42ecc:	80c0030d 	sth	r3,12(r16)
   42ed0:	003fc206 	br	42ddc <__alt_data_end+0xfffcd27c>
   42ed4:	0027883a 	mov	r19,zero
   42ed8:	04810004 	movi	r18,1024
   42edc:	003fd606 	br	42e38 <__alt_data_end+0xfffcd2d8>
   42ee0:	8140038f 	ldh	r5,14(r16)
   42ee4:	8809883a 	mov	r4,r17
   42ee8:	00433b40 	call	433b4 <_isatty_r>
   42eec:	103fe026 	beq	r2,zero,42e70 <__alt_data_end+0xfffcd310>
   42ef0:	8080030b 	ldhu	r2,12(r16)
   42ef4:	10800054 	ori	r2,r2,1
   42ef8:	8080030d 	sth	r2,12(r16)
   42efc:	003fdc06 	br	42e70 <__alt_data_end+0xfffcd310>
   42f00:	8080030b 	ldhu	r2,12(r16)
   42f04:	10c0800c 	andi	r3,r2,512
   42f08:	183fd91e 	bne	r3,zero,42e70 <__alt_data_end+0xfffcd310>
   42f0c:	10800094 	ori	r2,r2,2
   42f10:	80c010c4 	addi	r3,r16,67
   42f14:	8080030d 	sth	r2,12(r16)
   42f18:	00800044 	movi	r2,1
   42f1c:	80c00015 	stw	r3,0(r16)
   42f20:	80c00415 	stw	r3,16(r16)
   42f24:	80800515 	stw	r2,20(r16)
   42f28:	003fd106 	br	42e70 <__alt_data_end+0xfffcd310>
   42f2c:	04c00044 	movi	r19,1
   42f30:	04810004 	movi	r18,1024
   42f34:	003fc006 	br	42e38 <__alt_data_end+0xfffcd2d8>

00042f38 <memset>:
   42f38:	20c000cc 	andi	r3,r4,3
   42f3c:	2005883a 	mov	r2,r4
   42f40:	18004326 	beq	r3,zero,43050 <memset+0x118>
   42f44:	31ffffc4 	addi	r7,r6,-1
   42f48:	30004026 	beq	r6,zero,4304c <memset+0x114>
   42f4c:	2813883a 	mov	r9,r5
   42f50:	200d883a 	mov	r6,r4
   42f54:	2007883a 	mov	r3,r4
   42f58:	00000406 	br	42f6c <memset+0x34>
   42f5c:	3a3fffc4 	addi	r8,r7,-1
   42f60:	31800044 	addi	r6,r6,1
   42f64:	38003926 	beq	r7,zero,4304c <memset+0x114>
   42f68:	400f883a 	mov	r7,r8
   42f6c:	18c00044 	addi	r3,r3,1
   42f70:	32400005 	stb	r9,0(r6)
   42f74:	1a0000cc 	andi	r8,r3,3
   42f78:	403ff81e 	bne	r8,zero,42f5c <__alt_data_end+0xfffcd3fc>
   42f7c:	010000c4 	movi	r4,3
   42f80:	21c02d2e 	bgeu	r4,r7,43038 <memset+0x100>
   42f84:	29803fcc 	andi	r6,r5,255
   42f88:	3008923a 	slli	r4,r6,8
   42f8c:	218cb03a 	or	r6,r4,r6
   42f90:	3008943a 	slli	r4,r6,16
   42f94:	218cb03a 	or	r6,r4,r6
   42f98:	010003c4 	movi	r4,15
   42f9c:	21c0182e 	bgeu	r4,r7,43000 <memset+0xc8>
   42fa0:	3b3ffc04 	addi	r12,r7,-16
   42fa4:	6018d13a 	srli	r12,r12,4
   42fa8:	1a000104 	addi	r8,r3,4
   42fac:	1ac00204 	addi	r11,r3,8
   42fb0:	6008913a 	slli	r4,r12,4
   42fb4:	1a800304 	addi	r10,r3,12
   42fb8:	1813883a 	mov	r9,r3
   42fbc:	21000504 	addi	r4,r4,20
   42fc0:	1909883a 	add	r4,r3,r4
   42fc4:	49800015 	stw	r6,0(r9)
   42fc8:	41800015 	stw	r6,0(r8)
   42fcc:	59800015 	stw	r6,0(r11)
   42fd0:	51800015 	stw	r6,0(r10)
   42fd4:	42000404 	addi	r8,r8,16
   42fd8:	4a400404 	addi	r9,r9,16
   42fdc:	5ac00404 	addi	r11,r11,16
   42fe0:	52800404 	addi	r10,r10,16
   42fe4:	413ff71e 	bne	r8,r4,42fc4 <__alt_data_end+0xfffcd464>
   42fe8:	63000044 	addi	r12,r12,1
   42fec:	6018913a 	slli	r12,r12,4
   42ff0:	39c003cc 	andi	r7,r7,15
   42ff4:	010000c4 	movi	r4,3
   42ff8:	1b07883a 	add	r3,r3,r12
   42ffc:	21c00e2e 	bgeu	r4,r7,43038 <memset+0x100>
   43000:	1813883a 	mov	r9,r3
   43004:	3811883a 	mov	r8,r7
   43008:	010000c4 	movi	r4,3
   4300c:	49800015 	stw	r6,0(r9)
   43010:	423fff04 	addi	r8,r8,-4
   43014:	4a400104 	addi	r9,r9,4
   43018:	223ffc36 	bltu	r4,r8,4300c <__alt_data_end+0xfffcd4ac>
   4301c:	393fff04 	addi	r4,r7,-4
   43020:	2008d0ba 	srli	r4,r4,2
   43024:	39c000cc 	andi	r7,r7,3
   43028:	21000044 	addi	r4,r4,1
   4302c:	2109883a 	add	r4,r4,r4
   43030:	2109883a 	add	r4,r4,r4
   43034:	1907883a 	add	r3,r3,r4
   43038:	38000426 	beq	r7,zero,4304c <memset+0x114>
   4303c:	19cf883a 	add	r7,r3,r7
   43040:	19400005 	stb	r5,0(r3)
   43044:	18c00044 	addi	r3,r3,1
   43048:	19fffd1e 	bne	r3,r7,43040 <__alt_data_end+0xfffcd4e0>
   4304c:	f800283a 	ret
   43050:	2007883a 	mov	r3,r4
   43054:	300f883a 	mov	r7,r6
   43058:	003fc806 	br	42f7c <__alt_data_end+0xfffcd41c>

0004305c <__sread>:
   4305c:	defffe04 	addi	sp,sp,-8
   43060:	dc000015 	stw	r16,0(sp)
   43064:	2821883a 	mov	r16,r5
   43068:	2940038f 	ldh	r5,14(r5)
   4306c:	dfc00115 	stw	ra,4(sp)
   43070:	00434640 	call	43464 <_read_r>
   43074:	10000716 	blt	r2,zero,43094 <__sread+0x38>
   43078:	80c01417 	ldw	r3,80(r16)
   4307c:	1887883a 	add	r3,r3,r2
   43080:	80c01415 	stw	r3,80(r16)
   43084:	dfc00117 	ldw	ra,4(sp)
   43088:	dc000017 	ldw	r16,0(sp)
   4308c:	dec00204 	addi	sp,sp,8
   43090:	f800283a 	ret
   43094:	80c0030b 	ldhu	r3,12(r16)
   43098:	18fbffcc 	andi	r3,r3,61439
   4309c:	80c0030d 	sth	r3,12(r16)
   430a0:	dfc00117 	ldw	ra,4(sp)
   430a4:	dc000017 	ldw	r16,0(sp)
   430a8:	dec00204 	addi	sp,sp,8
   430ac:	f800283a 	ret

000430b0 <__seofread>:
   430b0:	0005883a 	mov	r2,zero
   430b4:	f800283a 	ret

000430b8 <__swrite>:
   430b8:	2880030b 	ldhu	r2,12(r5)
   430bc:	defffb04 	addi	sp,sp,-20
   430c0:	dcc00315 	stw	r19,12(sp)
   430c4:	dc800215 	stw	r18,8(sp)
   430c8:	dc400115 	stw	r17,4(sp)
   430cc:	dc000015 	stw	r16,0(sp)
   430d0:	dfc00415 	stw	ra,16(sp)
   430d4:	10c0400c 	andi	r3,r2,256
   430d8:	2821883a 	mov	r16,r5
   430dc:	2027883a 	mov	r19,r4
   430e0:	3025883a 	mov	r18,r6
   430e4:	3823883a 	mov	r17,r7
   430e8:	18000526 	beq	r3,zero,43100 <__swrite+0x48>
   430ec:	2940038f 	ldh	r5,14(r5)
   430f0:	000d883a 	mov	r6,zero
   430f4:	01c00084 	movi	r7,2
   430f8:	00434080 	call	43408 <_lseek_r>
   430fc:	8080030b 	ldhu	r2,12(r16)
   43100:	8140038f 	ldh	r5,14(r16)
   43104:	10bbffcc 	andi	r2,r2,61439
   43108:	9809883a 	mov	r4,r19
   4310c:	900d883a 	mov	r6,r18
   43110:	880f883a 	mov	r7,r17
   43114:	8080030d 	sth	r2,12(r16)
   43118:	dfc00417 	ldw	ra,16(sp)
   4311c:	dcc00317 	ldw	r19,12(sp)
   43120:	dc800217 	ldw	r18,8(sp)
   43124:	dc400117 	ldw	r17,4(sp)
   43128:	dc000017 	ldw	r16,0(sp)
   4312c:	dec00504 	addi	sp,sp,20
   43130:	00431981 	jmpi	43198 <_write_r>

00043134 <__sseek>:
   43134:	defffe04 	addi	sp,sp,-8
   43138:	dc000015 	stw	r16,0(sp)
   4313c:	2821883a 	mov	r16,r5
   43140:	2940038f 	ldh	r5,14(r5)
   43144:	dfc00115 	stw	ra,4(sp)
   43148:	00434080 	call	43408 <_lseek_r>
   4314c:	00ffffc4 	movi	r3,-1
   43150:	10c00826 	beq	r2,r3,43174 <__sseek+0x40>
   43154:	80c0030b 	ldhu	r3,12(r16)
   43158:	80801415 	stw	r2,80(r16)
   4315c:	18c40014 	ori	r3,r3,4096
   43160:	80c0030d 	sth	r3,12(r16)
   43164:	dfc00117 	ldw	ra,4(sp)
   43168:	dc000017 	ldw	r16,0(sp)
   4316c:	dec00204 	addi	sp,sp,8
   43170:	f800283a 	ret
   43174:	80c0030b 	ldhu	r3,12(r16)
   43178:	18fbffcc 	andi	r3,r3,61439
   4317c:	80c0030d 	sth	r3,12(r16)
   43180:	dfc00117 	ldw	ra,4(sp)
   43184:	dc000017 	ldw	r16,0(sp)
   43188:	dec00204 	addi	sp,sp,8
   4318c:	f800283a 	ret

00043190 <__sclose>:
   43190:	2940038f 	ldh	r5,14(r5)
   43194:	00431f41 	jmpi	431f4 <_close_r>

00043198 <_write_r>:
   43198:	defffd04 	addi	sp,sp,-12
   4319c:	dc000015 	stw	r16,0(sp)
   431a0:	04000174 	movhi	r16,5
   431a4:	dc400115 	stw	r17,4(sp)
   431a8:	8427e304 	addi	r16,r16,-24692
   431ac:	2023883a 	mov	r17,r4
   431b0:	2809883a 	mov	r4,r5
   431b4:	300b883a 	mov	r5,r6
   431b8:	380d883a 	mov	r6,r7
   431bc:	dfc00215 	stw	ra,8(sp)
   431c0:	80000015 	stw	zero,0(r16)
   431c4:	0043ef00 	call	43ef0 <write>
   431c8:	00ffffc4 	movi	r3,-1
   431cc:	10c00526 	beq	r2,r3,431e4 <_write_r+0x4c>
   431d0:	dfc00217 	ldw	ra,8(sp)
   431d4:	dc400117 	ldw	r17,4(sp)
   431d8:	dc000017 	ldw	r16,0(sp)
   431dc:	dec00304 	addi	sp,sp,12
   431e0:	f800283a 	ret
   431e4:	80c00017 	ldw	r3,0(r16)
   431e8:	183ff926 	beq	r3,zero,431d0 <__alt_data_end+0xfffcd670>
   431ec:	88c00015 	stw	r3,0(r17)
   431f0:	003ff706 	br	431d0 <__alt_data_end+0xfffcd670>

000431f4 <_close_r>:
   431f4:	defffd04 	addi	sp,sp,-12
   431f8:	dc000015 	stw	r16,0(sp)
   431fc:	04000174 	movhi	r16,5
   43200:	dc400115 	stw	r17,4(sp)
   43204:	8427e304 	addi	r16,r16,-24692
   43208:	2023883a 	mov	r17,r4
   4320c:	2809883a 	mov	r4,r5
   43210:	dfc00215 	stw	ra,8(sp)
   43214:	80000015 	stw	zero,0(r16)
   43218:	004361c0 	call	4361c <close>
   4321c:	00ffffc4 	movi	r3,-1
   43220:	10c00526 	beq	r2,r3,43238 <_close_r+0x44>
   43224:	dfc00217 	ldw	ra,8(sp)
   43228:	dc400117 	ldw	r17,4(sp)
   4322c:	dc000017 	ldw	r16,0(sp)
   43230:	dec00304 	addi	sp,sp,12
   43234:	f800283a 	ret
   43238:	80c00017 	ldw	r3,0(r16)
   4323c:	183ff926 	beq	r3,zero,43224 <__alt_data_end+0xfffcd6c4>
   43240:	88c00015 	stw	r3,0(r17)
   43244:	003ff706 	br	43224 <__alt_data_end+0xfffcd6c4>

00043248 <_fclose_r>:
   43248:	28003226 	beq	r5,zero,43314 <_fclose_r+0xcc>
   4324c:	defffc04 	addi	sp,sp,-16
   43250:	dc400115 	stw	r17,4(sp)
   43254:	2023883a 	mov	r17,r4
   43258:	dc000015 	stw	r16,0(sp)
   4325c:	dfc00315 	stw	ra,12(sp)
   43260:	dc800215 	stw	r18,8(sp)
   43264:	2821883a 	mov	r16,r5
   43268:	00427bc0 	call	427bc <__sfp_lock_acquire>
   4326c:	88000226 	beq	r17,zero,43278 <_fclose_r+0x30>
   43270:	88800e17 	ldw	r2,56(r17)
   43274:	10002926 	beq	r2,zero,4331c <_fclose_r+0xd4>
   43278:	8080030f 	ldh	r2,12(r16)
   4327c:	10002226 	beq	r2,zero,43308 <_fclose_r+0xc0>
   43280:	8809883a 	mov	r4,r17
   43284:	800b883a 	mov	r5,r16
   43288:	00421f00 	call	421f0 <_fflush_r>
   4328c:	1025883a 	mov	r18,r2
   43290:	80800b17 	ldw	r2,44(r16)
   43294:	10000426 	beq	r2,zero,432a8 <_fclose_r+0x60>
   43298:	81400717 	ldw	r5,28(r16)
   4329c:	8809883a 	mov	r4,r17
   432a0:	103ee83a 	callr	r2
   432a4:	10002616 	blt	r2,zero,43340 <_fclose_r+0xf8>
   432a8:	8080030b 	ldhu	r2,12(r16)
   432ac:	1080200c 	andi	r2,r2,128
   432b0:	10001f1e 	bne	r2,zero,43330 <_fclose_r+0xe8>
   432b4:	81400c17 	ldw	r5,48(r16)
   432b8:	28000526 	beq	r5,zero,432d0 <_fclose_r+0x88>
   432bc:	80801004 	addi	r2,r16,64
   432c0:	28800226 	beq	r5,r2,432cc <_fclose_r+0x84>
   432c4:	8809883a 	mov	r4,r17
   432c8:	00429200 	call	42920 <_free_r>
   432cc:	80000c15 	stw	zero,48(r16)
   432d0:	81401117 	ldw	r5,68(r16)
   432d4:	28000326 	beq	r5,zero,432e4 <_fclose_r+0x9c>
   432d8:	8809883a 	mov	r4,r17
   432dc:	00429200 	call	42920 <_free_r>
   432e0:	80001115 	stw	zero,68(r16)
   432e4:	8000030d 	sth	zero,12(r16)
   432e8:	00427c00 	call	427c0 <__sfp_lock_release>
   432ec:	9005883a 	mov	r2,r18
   432f0:	dfc00317 	ldw	ra,12(sp)
   432f4:	dc800217 	ldw	r18,8(sp)
   432f8:	dc400117 	ldw	r17,4(sp)
   432fc:	dc000017 	ldw	r16,0(sp)
   43300:	dec00404 	addi	sp,sp,16
   43304:	f800283a 	ret
   43308:	00427c00 	call	427c0 <__sfp_lock_release>
   4330c:	0005883a 	mov	r2,zero
   43310:	003ff706 	br	432f0 <__alt_data_end+0xfffcd790>
   43314:	0005883a 	mov	r2,zero
   43318:	f800283a 	ret
   4331c:	8809883a 	mov	r4,r17
   43320:	00427ac0 	call	427ac <__sinit>
   43324:	8080030f 	ldh	r2,12(r16)
   43328:	103fd51e 	bne	r2,zero,43280 <__alt_data_end+0xfffcd720>
   4332c:	003ff606 	br	43308 <__alt_data_end+0xfffcd7a8>
   43330:	81400417 	ldw	r5,16(r16)
   43334:	8809883a 	mov	r4,r17
   43338:	00429200 	call	42920 <_free_r>
   4333c:	003fdd06 	br	432b4 <__alt_data_end+0xfffcd754>
   43340:	04bfffc4 	movi	r18,-1
   43344:	003fd806 	br	432a8 <__alt_data_end+0xfffcd748>

00043348 <fclose>:
   43348:	00800174 	movhi	r2,5
   4334c:	10a10704 	addi	r2,r2,-31716
   43350:	200b883a 	mov	r5,r4
   43354:	11000017 	ldw	r4,0(r2)
   43358:	00432481 	jmpi	43248 <_fclose_r>

0004335c <_fstat_r>:
   4335c:	defffd04 	addi	sp,sp,-12
   43360:	dc000015 	stw	r16,0(sp)
   43364:	04000174 	movhi	r16,5
   43368:	dc400115 	stw	r17,4(sp)
   4336c:	8427e304 	addi	r16,r16,-24692
   43370:	2023883a 	mov	r17,r4
   43374:	2809883a 	mov	r4,r5
   43378:	300b883a 	mov	r5,r6
   4337c:	dfc00215 	stw	ra,8(sp)
   43380:	80000015 	stw	zero,0(r16)
   43384:	00437700 	call	43770 <fstat>
   43388:	00ffffc4 	movi	r3,-1
   4338c:	10c00526 	beq	r2,r3,433a4 <_fstat_r+0x48>
   43390:	dfc00217 	ldw	ra,8(sp)
   43394:	dc400117 	ldw	r17,4(sp)
   43398:	dc000017 	ldw	r16,0(sp)
   4339c:	dec00304 	addi	sp,sp,12
   433a0:	f800283a 	ret
   433a4:	80c00017 	ldw	r3,0(r16)
   433a8:	183ff926 	beq	r3,zero,43390 <__alt_data_end+0xfffcd830>
   433ac:	88c00015 	stw	r3,0(r17)
   433b0:	003ff706 	br	43390 <__alt_data_end+0xfffcd830>

000433b4 <_isatty_r>:
   433b4:	defffd04 	addi	sp,sp,-12
   433b8:	dc000015 	stw	r16,0(sp)
   433bc:	04000174 	movhi	r16,5
   433c0:	dc400115 	stw	r17,4(sp)
   433c4:	8427e304 	addi	r16,r16,-24692
   433c8:	2023883a 	mov	r17,r4
   433cc:	2809883a 	mov	r4,r5
   433d0:	dfc00215 	stw	ra,8(sp)
   433d4:	80000015 	stw	zero,0(r16)
   433d8:	00438780 	call	43878 <isatty>
   433dc:	00ffffc4 	movi	r3,-1
   433e0:	10c00526 	beq	r2,r3,433f8 <_isatty_r+0x44>
   433e4:	dfc00217 	ldw	ra,8(sp)
   433e8:	dc400117 	ldw	r17,4(sp)
   433ec:	dc000017 	ldw	r16,0(sp)
   433f0:	dec00304 	addi	sp,sp,12
   433f4:	f800283a 	ret
   433f8:	80c00017 	ldw	r3,0(r16)
   433fc:	183ff926 	beq	r3,zero,433e4 <__alt_data_end+0xfffcd884>
   43400:	88c00015 	stw	r3,0(r17)
   43404:	003ff706 	br	433e4 <__alt_data_end+0xfffcd884>

00043408 <_lseek_r>:
   43408:	defffd04 	addi	sp,sp,-12
   4340c:	dc000015 	stw	r16,0(sp)
   43410:	04000174 	movhi	r16,5
   43414:	dc400115 	stw	r17,4(sp)
   43418:	8427e304 	addi	r16,r16,-24692
   4341c:	2023883a 	mov	r17,r4
   43420:	2809883a 	mov	r4,r5
   43424:	300b883a 	mov	r5,r6
   43428:	380d883a 	mov	r6,r7
   4342c:	dfc00215 	stw	ra,8(sp)
   43430:	80000015 	stw	zero,0(r16)
   43434:	0043a580 	call	43a58 <lseek>
   43438:	00ffffc4 	movi	r3,-1
   4343c:	10c00526 	beq	r2,r3,43454 <_lseek_r+0x4c>
   43440:	dfc00217 	ldw	ra,8(sp)
   43444:	dc400117 	ldw	r17,4(sp)
   43448:	dc000017 	ldw	r16,0(sp)
   4344c:	dec00304 	addi	sp,sp,12
   43450:	f800283a 	ret
   43454:	80c00017 	ldw	r3,0(r16)
   43458:	183ff926 	beq	r3,zero,43440 <__alt_data_end+0xfffcd8e0>
   4345c:	88c00015 	stw	r3,0(r17)
   43460:	003ff706 	br	43440 <__alt_data_end+0xfffcd8e0>

00043464 <_read_r>:
   43464:	defffd04 	addi	sp,sp,-12
   43468:	dc000015 	stw	r16,0(sp)
   4346c:	04000174 	movhi	r16,5
   43470:	dc400115 	stw	r17,4(sp)
   43474:	8427e304 	addi	r16,r16,-24692
   43478:	2023883a 	mov	r17,r4
   4347c:	2809883a 	mov	r4,r5
   43480:	300b883a 	mov	r5,r6
   43484:	380d883a 	mov	r6,r7
   43488:	dfc00215 	stw	ra,8(sp)
   4348c:	80000015 	stw	zero,0(r16)
   43490:	0043c3c0 	call	43c3c <read>
   43494:	00ffffc4 	movi	r3,-1
   43498:	10c00526 	beq	r2,r3,434b0 <_read_r+0x4c>
   4349c:	dfc00217 	ldw	ra,8(sp)
   434a0:	dc400117 	ldw	r17,4(sp)
   434a4:	dc000017 	ldw	r16,0(sp)
   434a8:	dec00304 	addi	sp,sp,12
   434ac:	f800283a 	ret
   434b0:	80c00017 	ldw	r3,0(r16)
   434b4:	183ff926 	beq	r3,zero,4349c <__alt_data_end+0xfffcd93c>
   434b8:	88c00015 	stw	r3,0(r17)
   434bc:	003ff706 	br	4349c <__alt_data_end+0xfffcd93c>

000434c0 <__muldi3>:
   434c0:	defff604 	addi	sp,sp,-40
   434c4:	dd800615 	stw	r22,24(sp)
   434c8:	dd400515 	stw	r21,20(sp)
   434cc:	25bfffcc 	andi	r22,r4,65535
   434d0:	357fffcc 	andi	r21,r6,65535
   434d4:	dc400115 	stw	r17,4(sp)
   434d8:	2022d43a 	srli	r17,r4,16
   434dc:	dcc00315 	stw	r19,12(sp)
   434e0:	dc800215 	stw	r18,8(sp)
   434e4:	2027883a 	mov	r19,r4
   434e8:	2825883a 	mov	r18,r5
   434ec:	a809883a 	mov	r4,r21
   434f0:	b00b883a 	mov	r5,r22
   434f4:	dfc00915 	stw	ra,36(sp)
   434f8:	df000815 	stw	fp,32(sp)
   434fc:	ddc00715 	stw	r23,28(sp)
   43500:	3839883a 	mov	fp,r7
   43504:	302ed43a 	srli	r23,r6,16
   43508:	dd000415 	stw	r20,16(sp)
   4350c:	dc000015 	stw	r16,0(sp)
   43510:	3029883a 	mov	r20,r6
   43514:	00408fc0 	call	408fc <__mulsi3>
   43518:	a809883a 	mov	r4,r21
   4351c:	880b883a 	mov	r5,r17
   43520:	1021883a 	mov	r16,r2
   43524:	00408fc0 	call	408fc <__mulsi3>
   43528:	880b883a 	mov	r5,r17
   4352c:	b809883a 	mov	r4,r23
   43530:	102b883a 	mov	r21,r2
   43534:	00408fc0 	call	408fc <__mulsi3>
   43538:	b809883a 	mov	r4,r23
   4353c:	b00b883a 	mov	r5,r22
   43540:	1023883a 	mov	r17,r2
   43544:	00408fc0 	call	408fc <__mulsi3>
   43548:	8012d43a 	srli	r9,r16,16
   4354c:	a885883a 	add	r2,r21,r2
   43550:	1251883a 	add	r8,r2,r9
   43554:	4540022e 	bgeu	r8,r21,43560 <__muldi3+0xa0>
   43558:	00800074 	movhi	r2,1
   4355c:	88a3883a 	add	r17,r17,r2
   43560:	4006d43a 	srli	r3,r8,16
   43564:	4010943a 	slli	r8,r8,16
   43568:	9809883a 	mov	r4,r19
   4356c:	e00b883a 	mov	r5,fp
   43570:	843fffcc 	andi	r16,r16,65535
   43574:	88e3883a 	add	r17,r17,r3
   43578:	4421883a 	add	r16,r8,r16
   4357c:	00408fc0 	call	408fc <__mulsi3>
   43580:	a009883a 	mov	r4,r20
   43584:	900b883a 	mov	r5,r18
   43588:	1027883a 	mov	r19,r2
   4358c:	00408fc0 	call	408fc <__mulsi3>
   43590:	9885883a 	add	r2,r19,r2
   43594:	1447883a 	add	r3,r2,r17
   43598:	8005883a 	mov	r2,r16
   4359c:	dfc00917 	ldw	ra,36(sp)
   435a0:	df000817 	ldw	fp,32(sp)
   435a4:	ddc00717 	ldw	r23,28(sp)
   435a8:	dd800617 	ldw	r22,24(sp)
   435ac:	dd400517 	ldw	r21,20(sp)
   435b0:	dd000417 	ldw	r20,16(sp)
   435b4:	dcc00317 	ldw	r19,12(sp)
   435b8:	dc800217 	ldw	r18,8(sp)
   435bc:	dc400117 	ldw	r17,4(sp)
   435c0:	dc000017 	ldw	r16,0(sp)
   435c4:	dec00a04 	addi	sp,sp,40
   435c8:	f800283a 	ret

000435cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   435cc:	defffe04 	addi	sp,sp,-8
   435d0:	dfc00115 	stw	ra,4(sp)
   435d4:	df000015 	stw	fp,0(sp)
   435d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   435dc:	00800174 	movhi	r2,5
   435e0:	10a10f04 	addi	r2,r2,-31684
   435e4:	10800017 	ldw	r2,0(r2)
   435e8:	10000526 	beq	r2,zero,43600 <alt_get_errno+0x34>
   435ec:	00800174 	movhi	r2,5
   435f0:	10a10f04 	addi	r2,r2,-31684
   435f4:	10800017 	ldw	r2,0(r2)
   435f8:	103ee83a 	callr	r2
   435fc:	00000206 	br	43608 <alt_get_errno+0x3c>
   43600:	00800174 	movhi	r2,5
   43604:	10a7e304 	addi	r2,r2,-24692
}
   43608:	e037883a 	mov	sp,fp
   4360c:	dfc00117 	ldw	ra,4(sp)
   43610:	df000017 	ldw	fp,0(sp)
   43614:	dec00204 	addi	sp,sp,8
   43618:	f800283a 	ret

0004361c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4361c:	defffb04 	addi	sp,sp,-20
   43620:	dfc00415 	stw	ra,16(sp)
   43624:	df000315 	stw	fp,12(sp)
   43628:	df000304 	addi	fp,sp,12
   4362c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   43630:	e0bfff17 	ldw	r2,-4(fp)
   43634:	10000816 	blt	r2,zero,43658 <close+0x3c>
   43638:	e13fff17 	ldw	r4,-4(fp)
   4363c:	01400304 	movi	r5,12
   43640:	00408fc0 	call	408fc <__mulsi3>
   43644:	1007883a 	mov	r3,r2
   43648:	00800134 	movhi	r2,4
   4364c:	109c5d04 	addi	r2,r2,29044
   43650:	1885883a 	add	r2,r3,r2
   43654:	00000106 	br	4365c <close+0x40>
   43658:	0005883a 	mov	r2,zero
   4365c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   43660:	e0bffd17 	ldw	r2,-12(fp)
   43664:	10001926 	beq	r2,zero,436cc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   43668:	e0bffd17 	ldw	r2,-12(fp)
   4366c:	10800017 	ldw	r2,0(r2)
   43670:	10800417 	ldw	r2,16(r2)
   43674:	10000626 	beq	r2,zero,43690 <close+0x74>
   43678:	e0bffd17 	ldw	r2,-12(fp)
   4367c:	10800017 	ldw	r2,0(r2)
   43680:	10800417 	ldw	r2,16(r2)
   43684:	e13ffd17 	ldw	r4,-12(fp)
   43688:	103ee83a 	callr	r2
   4368c:	00000106 	br	43694 <close+0x78>
   43690:	0005883a 	mov	r2,zero
   43694:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43698:	e13fff17 	ldw	r4,-4(fp)
   4369c:	0043d400 	call	43d40 <alt_release_fd>
    if (rval < 0)
   436a0:	e0bffe17 	ldw	r2,-8(fp)
   436a4:	1000070e 	bge	r2,zero,436c4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   436a8:	00435cc0 	call	435cc <alt_get_errno>
   436ac:	1007883a 	mov	r3,r2
   436b0:	e0bffe17 	ldw	r2,-8(fp)
   436b4:	0085c83a 	sub	r2,zero,r2
   436b8:	18800015 	stw	r2,0(r3)
      return -1;
   436bc:	00bfffc4 	movi	r2,-1
   436c0:	00000706 	br	436e0 <close+0xc4>
    }
    return 0;
   436c4:	0005883a 	mov	r2,zero
   436c8:	00000506 	br	436e0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   436cc:	00435cc0 	call	435cc <alt_get_errno>
   436d0:	1007883a 	mov	r3,r2
   436d4:	00801444 	movi	r2,81
   436d8:	18800015 	stw	r2,0(r3)
    return -1;
   436dc:	00bfffc4 	movi	r2,-1
  }
}
   436e0:	e037883a 	mov	sp,fp
   436e4:	dfc00117 	ldw	ra,4(sp)
   436e8:	df000017 	ldw	fp,0(sp)
   436ec:	dec00204 	addi	sp,sp,8
   436f0:	f800283a 	ret

000436f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   436f4:	defffc04 	addi	sp,sp,-16
   436f8:	df000315 	stw	fp,12(sp)
   436fc:	df000304 	addi	fp,sp,12
   43700:	e13ffd15 	stw	r4,-12(fp)
   43704:	e17ffe15 	stw	r5,-8(fp)
   43708:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4370c:	e0bfff17 	ldw	r2,-4(fp)
}
   43710:	e037883a 	mov	sp,fp
   43714:	df000017 	ldw	fp,0(sp)
   43718:	dec00104 	addi	sp,sp,4
   4371c:	f800283a 	ret

00043720 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43720:	defffe04 	addi	sp,sp,-8
   43724:	dfc00115 	stw	ra,4(sp)
   43728:	df000015 	stw	fp,0(sp)
   4372c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43730:	00800174 	movhi	r2,5
   43734:	10a10f04 	addi	r2,r2,-31684
   43738:	10800017 	ldw	r2,0(r2)
   4373c:	10000526 	beq	r2,zero,43754 <alt_get_errno+0x34>
   43740:	00800174 	movhi	r2,5
   43744:	10a10f04 	addi	r2,r2,-31684
   43748:	10800017 	ldw	r2,0(r2)
   4374c:	103ee83a 	callr	r2
   43750:	00000206 	br	4375c <alt_get_errno+0x3c>
   43754:	00800174 	movhi	r2,5
   43758:	10a7e304 	addi	r2,r2,-24692
}
   4375c:	e037883a 	mov	sp,fp
   43760:	dfc00117 	ldw	ra,4(sp)
   43764:	df000017 	ldw	fp,0(sp)
   43768:	dec00204 	addi	sp,sp,8
   4376c:	f800283a 	ret

00043770 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   43770:	defffb04 	addi	sp,sp,-20
   43774:	dfc00415 	stw	ra,16(sp)
   43778:	df000315 	stw	fp,12(sp)
   4377c:	df000304 	addi	fp,sp,12
   43780:	e13ffe15 	stw	r4,-8(fp)
   43784:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43788:	e0bffe17 	ldw	r2,-8(fp)
   4378c:	10000816 	blt	r2,zero,437b0 <fstat+0x40>
   43790:	e13ffe17 	ldw	r4,-8(fp)
   43794:	01400304 	movi	r5,12
   43798:	00408fc0 	call	408fc <__mulsi3>
   4379c:	1007883a 	mov	r3,r2
   437a0:	00800134 	movhi	r2,4
   437a4:	109c5d04 	addi	r2,r2,29044
   437a8:	1885883a 	add	r2,r3,r2
   437ac:	00000106 	br	437b4 <fstat+0x44>
   437b0:	0005883a 	mov	r2,zero
   437b4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   437b8:	e0bffd17 	ldw	r2,-12(fp)
   437bc:	10001026 	beq	r2,zero,43800 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   437c0:	e0bffd17 	ldw	r2,-12(fp)
   437c4:	10800017 	ldw	r2,0(r2)
   437c8:	10800817 	ldw	r2,32(r2)
   437cc:	10000726 	beq	r2,zero,437ec <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   437d0:	e0bffd17 	ldw	r2,-12(fp)
   437d4:	10800017 	ldw	r2,0(r2)
   437d8:	10800817 	ldw	r2,32(r2)
   437dc:	e13ffd17 	ldw	r4,-12(fp)
   437e0:	e17fff17 	ldw	r5,-4(fp)
   437e4:	103ee83a 	callr	r2
   437e8:	00000a06 	br	43814 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   437ec:	e0bfff17 	ldw	r2,-4(fp)
   437f0:	00c80004 	movi	r3,8192
   437f4:	10c00115 	stw	r3,4(r2)
      return 0;
   437f8:	0005883a 	mov	r2,zero
   437fc:	00000506 	br	43814 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43800:	00437200 	call	43720 <alt_get_errno>
   43804:	1007883a 	mov	r3,r2
   43808:	00801444 	movi	r2,81
   4380c:	18800015 	stw	r2,0(r3)
    return -1;
   43810:	00bfffc4 	movi	r2,-1
  }
}
   43814:	e037883a 	mov	sp,fp
   43818:	dfc00117 	ldw	ra,4(sp)
   4381c:	df000017 	ldw	fp,0(sp)
   43820:	dec00204 	addi	sp,sp,8
   43824:	f800283a 	ret

00043828 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43828:	defffe04 	addi	sp,sp,-8
   4382c:	dfc00115 	stw	ra,4(sp)
   43830:	df000015 	stw	fp,0(sp)
   43834:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43838:	00800174 	movhi	r2,5
   4383c:	10a10f04 	addi	r2,r2,-31684
   43840:	10800017 	ldw	r2,0(r2)
   43844:	10000526 	beq	r2,zero,4385c <alt_get_errno+0x34>
   43848:	00800174 	movhi	r2,5
   4384c:	10a10f04 	addi	r2,r2,-31684
   43850:	10800017 	ldw	r2,0(r2)
   43854:	103ee83a 	callr	r2
   43858:	00000206 	br	43864 <alt_get_errno+0x3c>
   4385c:	00800174 	movhi	r2,5
   43860:	10a7e304 	addi	r2,r2,-24692
}
   43864:	e037883a 	mov	sp,fp
   43868:	dfc00117 	ldw	ra,4(sp)
   4386c:	df000017 	ldw	fp,0(sp)
   43870:	dec00204 	addi	sp,sp,8
   43874:	f800283a 	ret

00043878 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   43878:	deffed04 	addi	sp,sp,-76
   4387c:	dfc01215 	stw	ra,72(sp)
   43880:	df001115 	stw	fp,68(sp)
   43884:	df001104 	addi	fp,sp,68
   43888:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4388c:	e0bfff17 	ldw	r2,-4(fp)
   43890:	10000816 	blt	r2,zero,438b4 <isatty+0x3c>
   43894:	e13fff17 	ldw	r4,-4(fp)
   43898:	01400304 	movi	r5,12
   4389c:	00408fc0 	call	408fc <__mulsi3>
   438a0:	1007883a 	mov	r3,r2
   438a4:	00800134 	movhi	r2,4
   438a8:	109c5d04 	addi	r2,r2,29044
   438ac:	1885883a 	add	r2,r3,r2
   438b0:	00000106 	br	438b8 <isatty+0x40>
   438b4:	0005883a 	mov	r2,zero
   438b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   438bc:	e0bfef17 	ldw	r2,-68(fp)
   438c0:	10000e26 	beq	r2,zero,438fc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   438c4:	e0bfef17 	ldw	r2,-68(fp)
   438c8:	10800017 	ldw	r2,0(r2)
   438cc:	10800817 	ldw	r2,32(r2)
   438d0:	1000021e 	bne	r2,zero,438dc <isatty+0x64>
    {
      return 1;
   438d4:	00800044 	movi	r2,1
   438d8:	00000d06 	br	43910 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   438dc:	e0bff004 	addi	r2,fp,-64
   438e0:	e13fff17 	ldw	r4,-4(fp)
   438e4:	100b883a 	mov	r5,r2
   438e8:	00437700 	call	43770 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   438ec:	e0bff117 	ldw	r2,-60(fp)
   438f0:	10880020 	cmpeqi	r2,r2,8192
   438f4:	10803fcc 	andi	r2,r2,255
   438f8:	00000506 	br	43910 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   438fc:	00438280 	call	43828 <alt_get_errno>
   43900:	1007883a 	mov	r3,r2
   43904:	00801444 	movi	r2,81
   43908:	18800015 	stw	r2,0(r3)
    return 0;
   4390c:	0005883a 	mov	r2,zero
  }
}
   43910:	e037883a 	mov	sp,fp
   43914:	dfc00117 	ldw	ra,4(sp)
   43918:	df000017 	ldw	fp,0(sp)
   4391c:	dec00204 	addi	sp,sp,8
   43920:	f800283a 	ret

00043924 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43924:	defffc04 	addi	sp,sp,-16
   43928:	df000315 	stw	fp,12(sp)
   4392c:	df000304 	addi	fp,sp,12
   43930:	e13ffd15 	stw	r4,-12(fp)
   43934:	e17ffe15 	stw	r5,-8(fp)
   43938:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4393c:	e0fffe17 	ldw	r3,-8(fp)
   43940:	e0bffd17 	ldw	r2,-12(fp)
   43944:	18800c26 	beq	r3,r2,43978 <alt_load_section+0x54>
  {
    while( to != end )
   43948:	00000806 	br	4396c <alt_load_section+0x48>
    {
      *to++ = *from++;
   4394c:	e0bffe17 	ldw	r2,-8(fp)
   43950:	10c00104 	addi	r3,r2,4
   43954:	e0fffe15 	stw	r3,-8(fp)
   43958:	e0fffd17 	ldw	r3,-12(fp)
   4395c:	19000104 	addi	r4,r3,4
   43960:	e13ffd15 	stw	r4,-12(fp)
   43964:	18c00017 	ldw	r3,0(r3)
   43968:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4396c:	e0fffe17 	ldw	r3,-8(fp)
   43970:	e0bfff17 	ldw	r2,-4(fp)
   43974:	18bff51e 	bne	r3,r2,4394c <__alt_data_end+0xfffcddec>
    {
      *to++ = *from++;
    }
  }
}
   43978:	e037883a 	mov	sp,fp
   4397c:	df000017 	ldw	fp,0(sp)
   43980:	dec00104 	addi	sp,sp,4
   43984:	f800283a 	ret

00043988 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   43988:	defffe04 	addi	sp,sp,-8
   4398c:	dfc00115 	stw	ra,4(sp)
   43990:	df000015 	stw	fp,0(sp)
   43994:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43998:	01000174 	movhi	r4,5
   4399c:	21211404 	addi	r4,r4,-31664
   439a0:	01400134 	movhi	r5,4
   439a4:	295a4804 	addi	r5,r5,26912
   439a8:	01800174 	movhi	r6,5
   439ac:	31a11404 	addi	r6,r6,-31664
   439b0:	00439240 	call	43924 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   439b4:	01000134 	movhi	r4,4
   439b8:	21000804 	addi	r4,r4,32
   439bc:	01400134 	movhi	r5,4
   439c0:	29400804 	addi	r5,r5,32
   439c4:	01800134 	movhi	r6,4
   439c8:	31808b04 	addi	r6,r6,556
   439cc:	00439240 	call	43924 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   439d0:	01000134 	movhi	r4,4
   439d4:	211a3304 	addi	r4,r4,26828
   439d8:	01400134 	movhi	r5,4
   439dc:	295a3304 	addi	r5,r5,26828
   439e0:	01800134 	movhi	r6,4
   439e4:	319a4804 	addi	r6,r6,26912
   439e8:	00439240 	call	43924 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   439ec:	00457a80 	call	457a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   439f0:	00459700 	call	45970 <alt_icache_flush_all>
}
   439f4:	e037883a 	mov	sp,fp
   439f8:	dfc00117 	ldw	ra,4(sp)
   439fc:	df000017 	ldw	fp,0(sp)
   43a00:	dec00204 	addi	sp,sp,8
   43a04:	f800283a 	ret

00043a08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43a08:	defffe04 	addi	sp,sp,-8
   43a0c:	dfc00115 	stw	ra,4(sp)
   43a10:	df000015 	stw	fp,0(sp)
   43a14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43a18:	00800174 	movhi	r2,5
   43a1c:	10a10f04 	addi	r2,r2,-31684
   43a20:	10800017 	ldw	r2,0(r2)
   43a24:	10000526 	beq	r2,zero,43a3c <alt_get_errno+0x34>
   43a28:	00800174 	movhi	r2,5
   43a2c:	10a10f04 	addi	r2,r2,-31684
   43a30:	10800017 	ldw	r2,0(r2)
   43a34:	103ee83a 	callr	r2
   43a38:	00000206 	br	43a44 <alt_get_errno+0x3c>
   43a3c:	00800174 	movhi	r2,5
   43a40:	10a7e304 	addi	r2,r2,-24692
}
   43a44:	e037883a 	mov	sp,fp
   43a48:	dfc00117 	ldw	ra,4(sp)
   43a4c:	df000017 	ldw	fp,0(sp)
   43a50:	dec00204 	addi	sp,sp,8
   43a54:	f800283a 	ret

00043a58 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   43a58:	defff904 	addi	sp,sp,-28
   43a5c:	dfc00615 	stw	ra,24(sp)
   43a60:	df000515 	stw	fp,20(sp)
   43a64:	df000504 	addi	fp,sp,20
   43a68:	e13ffd15 	stw	r4,-12(fp)
   43a6c:	e17ffe15 	stw	r5,-8(fp)
   43a70:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   43a74:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43a78:	e0bffd17 	ldw	r2,-12(fp)
   43a7c:	10000816 	blt	r2,zero,43aa0 <lseek+0x48>
   43a80:	e13ffd17 	ldw	r4,-12(fp)
   43a84:	01400304 	movi	r5,12
   43a88:	00408fc0 	call	408fc <__mulsi3>
   43a8c:	1007883a 	mov	r3,r2
   43a90:	00800134 	movhi	r2,4
   43a94:	109c5d04 	addi	r2,r2,29044
   43a98:	1885883a 	add	r2,r3,r2
   43a9c:	00000106 	br	43aa4 <lseek+0x4c>
   43aa0:	0005883a 	mov	r2,zero
   43aa4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   43aa8:	e0bffc17 	ldw	r2,-16(fp)
   43aac:	10001026 	beq	r2,zero,43af0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43ab0:	e0bffc17 	ldw	r2,-16(fp)
   43ab4:	10800017 	ldw	r2,0(r2)
   43ab8:	10800717 	ldw	r2,28(r2)
   43abc:	10000926 	beq	r2,zero,43ae4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43ac0:	e0bffc17 	ldw	r2,-16(fp)
   43ac4:	10800017 	ldw	r2,0(r2)
   43ac8:	10800717 	ldw	r2,28(r2)
   43acc:	e13ffc17 	ldw	r4,-16(fp)
   43ad0:	e17ffe17 	ldw	r5,-8(fp)
   43ad4:	e1bfff17 	ldw	r6,-4(fp)
   43ad8:	103ee83a 	callr	r2
   43adc:	e0bffb15 	stw	r2,-20(fp)
   43ae0:	00000506 	br	43af8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43ae4:	00bfde84 	movi	r2,-134
   43ae8:	e0bffb15 	stw	r2,-20(fp)
   43aec:	00000206 	br	43af8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   43af0:	00bfebc4 	movi	r2,-81
   43af4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   43af8:	e0bffb17 	ldw	r2,-20(fp)
   43afc:	1000070e 	bge	r2,zero,43b1c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   43b00:	0043a080 	call	43a08 <alt_get_errno>
   43b04:	1007883a 	mov	r3,r2
   43b08:	e0bffb17 	ldw	r2,-20(fp)
   43b0c:	0085c83a 	sub	r2,zero,r2
   43b10:	18800015 	stw	r2,0(r3)
    rc = -1;
   43b14:	00bfffc4 	movi	r2,-1
   43b18:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   43b1c:	e0bffb17 	ldw	r2,-20(fp)
}
   43b20:	e037883a 	mov	sp,fp
   43b24:	dfc00117 	ldw	ra,4(sp)
   43b28:	df000017 	ldw	fp,0(sp)
   43b2c:	dec00204 	addi	sp,sp,8
   43b30:	f800283a 	ret

00043b34 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43b34:	defffd04 	addi	sp,sp,-12
   43b38:	dfc00215 	stw	ra,8(sp)
   43b3c:	df000115 	stw	fp,4(sp)
   43b40:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43b44:	0009883a 	mov	r4,zero
   43b48:	00440280 	call	44028 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   43b4c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   43b50:	004405c0 	call	4405c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   43b54:	01000134 	movhi	r4,4
   43b58:	211a3d04 	addi	r4,r4,26868
   43b5c:	01400134 	movhi	r5,4
   43b60:	295a3d04 	addi	r5,r5,26868
   43b64:	01800134 	movhi	r6,4
   43b68:	319a3d04 	addi	r6,r6,26868
   43b6c:	0045d3c0 	call	45d3c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   43b70:	00458b80 	call	458b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   43b74:	01000134 	movhi	r4,4
   43b78:	21164504 	addi	r4,r4,22804
   43b7c:	00465280 	call	46528 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43b80:	d126de17 	ldw	r4,-25736(gp)
   43b84:	d0e6df17 	ldw	r3,-25732(gp)
   43b88:	d0a6e017 	ldw	r2,-25728(gp)
   43b8c:	180b883a 	mov	r5,r3
   43b90:	100d883a 	mov	r6,r2
   43b94:	00402680 	call	40268 <main>
   43b98:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43b9c:	01000044 	movi	r4,1
   43ba0:	004361c0 	call	4361c <close>
  exit (result);
   43ba4:	e13fff17 	ldw	r4,-4(fp)
   43ba8:	004653c0 	call	4653c <exit>

00043bac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   43bac:	defffe04 	addi	sp,sp,-8
   43bb0:	df000115 	stw	fp,4(sp)
   43bb4:	df000104 	addi	fp,sp,4
   43bb8:	e13fff15 	stw	r4,-4(fp)
}
   43bbc:	e037883a 	mov	sp,fp
   43bc0:	df000017 	ldw	fp,0(sp)
   43bc4:	dec00104 	addi	sp,sp,4
   43bc8:	f800283a 	ret

00043bcc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   43bcc:	defffe04 	addi	sp,sp,-8
   43bd0:	df000115 	stw	fp,4(sp)
   43bd4:	df000104 	addi	fp,sp,4
   43bd8:	e13fff15 	stw	r4,-4(fp)
}
   43bdc:	e037883a 	mov	sp,fp
   43be0:	df000017 	ldw	fp,0(sp)
   43be4:	dec00104 	addi	sp,sp,4
   43be8:	f800283a 	ret

00043bec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43bec:	defffe04 	addi	sp,sp,-8
   43bf0:	dfc00115 	stw	ra,4(sp)
   43bf4:	df000015 	stw	fp,0(sp)
   43bf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43bfc:	00800174 	movhi	r2,5
   43c00:	10a10f04 	addi	r2,r2,-31684
   43c04:	10800017 	ldw	r2,0(r2)
   43c08:	10000526 	beq	r2,zero,43c20 <alt_get_errno+0x34>
   43c0c:	00800174 	movhi	r2,5
   43c10:	10a10f04 	addi	r2,r2,-31684
   43c14:	10800017 	ldw	r2,0(r2)
   43c18:	103ee83a 	callr	r2
   43c1c:	00000206 	br	43c28 <alt_get_errno+0x3c>
   43c20:	00800174 	movhi	r2,5
   43c24:	10a7e304 	addi	r2,r2,-24692
}
   43c28:	e037883a 	mov	sp,fp
   43c2c:	dfc00117 	ldw	ra,4(sp)
   43c30:	df000017 	ldw	fp,0(sp)
   43c34:	dec00204 	addi	sp,sp,8
   43c38:	f800283a 	ret

00043c3c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   43c3c:	defff904 	addi	sp,sp,-28
   43c40:	dfc00615 	stw	ra,24(sp)
   43c44:	df000515 	stw	fp,20(sp)
   43c48:	df000504 	addi	fp,sp,20
   43c4c:	e13ffd15 	stw	r4,-12(fp)
   43c50:	e17ffe15 	stw	r5,-8(fp)
   43c54:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43c58:	e0bffd17 	ldw	r2,-12(fp)
   43c5c:	10000816 	blt	r2,zero,43c80 <read+0x44>
   43c60:	e13ffd17 	ldw	r4,-12(fp)
   43c64:	01400304 	movi	r5,12
   43c68:	00408fc0 	call	408fc <__mulsi3>
   43c6c:	1007883a 	mov	r3,r2
   43c70:	00800134 	movhi	r2,4
   43c74:	109c5d04 	addi	r2,r2,29044
   43c78:	1885883a 	add	r2,r3,r2
   43c7c:	00000106 	br	43c84 <read+0x48>
   43c80:	0005883a 	mov	r2,zero
   43c84:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43c88:	e0bffb17 	ldw	r2,-20(fp)
   43c8c:	10002226 	beq	r2,zero,43d18 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43c90:	e0bffb17 	ldw	r2,-20(fp)
   43c94:	10800217 	ldw	r2,8(r2)
   43c98:	108000cc 	andi	r2,r2,3
   43c9c:	10800060 	cmpeqi	r2,r2,1
   43ca0:	1000181e 	bne	r2,zero,43d04 <read+0xc8>
        (fd->dev->read))
   43ca4:	e0bffb17 	ldw	r2,-20(fp)
   43ca8:	10800017 	ldw	r2,0(r2)
   43cac:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43cb0:	10001426 	beq	r2,zero,43d04 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43cb4:	e0bffb17 	ldw	r2,-20(fp)
   43cb8:	10800017 	ldw	r2,0(r2)
   43cbc:	10800517 	ldw	r2,20(r2)
   43cc0:	e0ffff17 	ldw	r3,-4(fp)
   43cc4:	e13ffb17 	ldw	r4,-20(fp)
   43cc8:	e17ffe17 	ldw	r5,-8(fp)
   43ccc:	180d883a 	mov	r6,r3
   43cd0:	103ee83a 	callr	r2
   43cd4:	e0bffc15 	stw	r2,-16(fp)
   43cd8:	e0bffc17 	ldw	r2,-16(fp)
   43cdc:	1000070e 	bge	r2,zero,43cfc <read+0xc0>
        {
          ALT_ERRNO = -rval;
   43ce0:	0043bec0 	call	43bec <alt_get_errno>
   43ce4:	1007883a 	mov	r3,r2
   43ce8:	e0bffc17 	ldw	r2,-16(fp)
   43cec:	0085c83a 	sub	r2,zero,r2
   43cf0:	18800015 	stw	r2,0(r3)
          return -1;
   43cf4:	00bfffc4 	movi	r2,-1
   43cf8:	00000c06 	br	43d2c <read+0xf0>
        }
        return rval;
   43cfc:	e0bffc17 	ldw	r2,-16(fp)
   43d00:	00000a06 	br	43d2c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43d04:	0043bec0 	call	43bec <alt_get_errno>
   43d08:	1007883a 	mov	r3,r2
   43d0c:	00800344 	movi	r2,13
   43d10:	18800015 	stw	r2,0(r3)
   43d14:	00000406 	br	43d28 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43d18:	0043bec0 	call	43bec <alt_get_errno>
   43d1c:	1007883a 	mov	r3,r2
   43d20:	00801444 	movi	r2,81
   43d24:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43d28:	00bfffc4 	movi	r2,-1
}
   43d2c:	e037883a 	mov	sp,fp
   43d30:	dfc00117 	ldw	ra,4(sp)
   43d34:	df000017 	ldw	fp,0(sp)
   43d38:	dec00204 	addi	sp,sp,8
   43d3c:	f800283a 	ret

00043d40 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43d40:	defffc04 	addi	sp,sp,-16
   43d44:	dfc00315 	stw	ra,12(sp)
   43d48:	df000215 	stw	fp,8(sp)
   43d4c:	dc000115 	stw	r16,4(sp)
   43d50:	df000204 	addi	fp,sp,8
   43d54:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   43d58:	e0bffe17 	ldw	r2,-8(fp)
   43d5c:	108000d0 	cmplti	r2,r2,3
   43d60:	1000111e 	bne	r2,zero,43da8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   43d64:	04000134 	movhi	r16,4
   43d68:	841c5d04 	addi	r16,r16,29044
   43d6c:	e0bffe17 	ldw	r2,-8(fp)
   43d70:	1009883a 	mov	r4,r2
   43d74:	01400304 	movi	r5,12
   43d78:	00408fc0 	call	408fc <__mulsi3>
   43d7c:	8085883a 	add	r2,r16,r2
   43d80:	10800204 	addi	r2,r2,8
   43d84:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43d88:	04000134 	movhi	r16,4
   43d8c:	841c5d04 	addi	r16,r16,29044
   43d90:	e0bffe17 	ldw	r2,-8(fp)
   43d94:	1009883a 	mov	r4,r2
   43d98:	01400304 	movi	r5,12
   43d9c:	00408fc0 	call	408fc <__mulsi3>
   43da0:	8085883a 	add	r2,r16,r2
   43da4:	10000015 	stw	zero,0(r2)
  }
}
   43da8:	e6ffff04 	addi	sp,fp,-4
   43dac:	dfc00217 	ldw	ra,8(sp)
   43db0:	df000117 	ldw	fp,4(sp)
   43db4:	dc000017 	ldw	r16,0(sp)
   43db8:	dec00304 	addi	sp,sp,12
   43dbc:	f800283a 	ret

00043dc0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43dc0:	defff904 	addi	sp,sp,-28
   43dc4:	df000615 	stw	fp,24(sp)
   43dc8:	df000604 	addi	fp,sp,24
   43dcc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43dd0:	0005303a 	rdctl	r2,status
   43dd4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43dd8:	e0fffc17 	ldw	r3,-16(fp)
   43ddc:	00bfff84 	movi	r2,-2
   43de0:	1884703a 	and	r2,r3,r2
   43de4:	1001703a 	wrctl	status,r2
  
  return context;
   43de8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43dec:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43df0:	d0a00a17 	ldw	r2,-32728(gp)
   43df4:	10c000c4 	addi	r3,r2,3
   43df8:	00bfff04 	movi	r2,-4
   43dfc:	1884703a 	and	r2,r3,r2
   43e00:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43e04:	d0e00a17 	ldw	r3,-32728(gp)
   43e08:	e0bfff17 	ldw	r2,-4(fp)
   43e0c:	1887883a 	add	r3,r3,r2
   43e10:	008001f4 	movhi	r2,7
   43e14:	1096d804 	addi	r2,r2,23392
   43e18:	10c0062e 	bgeu	r2,r3,43e34 <sbrk+0x74>
   43e1c:	e0bffa17 	ldw	r2,-24(fp)
   43e20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43e24:	e0bffd17 	ldw	r2,-12(fp)
   43e28:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43e2c:	00bfffc4 	movi	r2,-1
   43e30:	00000b06 	br	43e60 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   43e34:	d0a00a17 	ldw	r2,-32728(gp)
   43e38:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   43e3c:	d0e00a17 	ldw	r3,-32728(gp)
   43e40:	e0bfff17 	ldw	r2,-4(fp)
   43e44:	1885883a 	add	r2,r3,r2
   43e48:	d0a00a15 	stw	r2,-32728(gp)
   43e4c:	e0bffa17 	ldw	r2,-24(fp)
   43e50:	e0bffe15 	stw	r2,-8(fp)
   43e54:	e0bffe17 	ldw	r2,-8(fp)
   43e58:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43e5c:	e0bffb17 	ldw	r2,-20(fp)
} 
   43e60:	e037883a 	mov	sp,fp
   43e64:	df000017 	ldw	fp,0(sp)
   43e68:	dec00104 	addi	sp,sp,4
   43e6c:	f800283a 	ret

00043e70 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   43e70:	defffd04 	addi	sp,sp,-12
   43e74:	dfc00215 	stw	ra,8(sp)
   43e78:	df000115 	stw	fp,4(sp)
   43e7c:	df000104 	addi	fp,sp,4
   43e80:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   43e84:	e13fff17 	ldw	r4,-4(fp)
   43e88:	00456500 	call	45650 <alt_busy_sleep>
}
   43e8c:	e037883a 	mov	sp,fp
   43e90:	dfc00117 	ldw	ra,4(sp)
   43e94:	df000017 	ldw	fp,0(sp)
   43e98:	dec00204 	addi	sp,sp,8
   43e9c:	f800283a 	ret

00043ea0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43ea0:	defffe04 	addi	sp,sp,-8
   43ea4:	dfc00115 	stw	ra,4(sp)
   43ea8:	df000015 	stw	fp,0(sp)
   43eac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43eb0:	00800174 	movhi	r2,5
   43eb4:	10a10f04 	addi	r2,r2,-31684
   43eb8:	10800017 	ldw	r2,0(r2)
   43ebc:	10000526 	beq	r2,zero,43ed4 <alt_get_errno+0x34>
   43ec0:	00800174 	movhi	r2,5
   43ec4:	10a10f04 	addi	r2,r2,-31684
   43ec8:	10800017 	ldw	r2,0(r2)
   43ecc:	103ee83a 	callr	r2
   43ed0:	00000206 	br	43edc <alt_get_errno+0x3c>
   43ed4:	00800174 	movhi	r2,5
   43ed8:	10a7e304 	addi	r2,r2,-24692
}
   43edc:	e037883a 	mov	sp,fp
   43ee0:	dfc00117 	ldw	ra,4(sp)
   43ee4:	df000017 	ldw	fp,0(sp)
   43ee8:	dec00204 	addi	sp,sp,8
   43eec:	f800283a 	ret

00043ef0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43ef0:	defff904 	addi	sp,sp,-28
   43ef4:	dfc00615 	stw	ra,24(sp)
   43ef8:	df000515 	stw	fp,20(sp)
   43efc:	df000504 	addi	fp,sp,20
   43f00:	e13ffd15 	stw	r4,-12(fp)
   43f04:	e17ffe15 	stw	r5,-8(fp)
   43f08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43f0c:	e0bffd17 	ldw	r2,-12(fp)
   43f10:	10000816 	blt	r2,zero,43f34 <write+0x44>
   43f14:	e13ffd17 	ldw	r4,-12(fp)
   43f18:	01400304 	movi	r5,12
   43f1c:	00408fc0 	call	408fc <__mulsi3>
   43f20:	1007883a 	mov	r3,r2
   43f24:	00800134 	movhi	r2,4
   43f28:	109c5d04 	addi	r2,r2,29044
   43f2c:	1885883a 	add	r2,r3,r2
   43f30:	00000106 	br	43f38 <write+0x48>
   43f34:	0005883a 	mov	r2,zero
   43f38:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43f3c:	e0bffb17 	ldw	r2,-20(fp)
   43f40:	10002126 	beq	r2,zero,43fc8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43f44:	e0bffb17 	ldw	r2,-20(fp)
   43f48:	10800217 	ldw	r2,8(r2)
   43f4c:	108000cc 	andi	r2,r2,3
   43f50:	10001826 	beq	r2,zero,43fb4 <write+0xc4>
   43f54:	e0bffb17 	ldw	r2,-20(fp)
   43f58:	10800017 	ldw	r2,0(r2)
   43f5c:	10800617 	ldw	r2,24(r2)
   43f60:	10001426 	beq	r2,zero,43fb4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43f64:	e0bffb17 	ldw	r2,-20(fp)
   43f68:	10800017 	ldw	r2,0(r2)
   43f6c:	10800617 	ldw	r2,24(r2)
   43f70:	e0ffff17 	ldw	r3,-4(fp)
   43f74:	e13ffb17 	ldw	r4,-20(fp)
   43f78:	e17ffe17 	ldw	r5,-8(fp)
   43f7c:	180d883a 	mov	r6,r3
   43f80:	103ee83a 	callr	r2
   43f84:	e0bffc15 	stw	r2,-16(fp)
   43f88:	e0bffc17 	ldw	r2,-16(fp)
   43f8c:	1000070e 	bge	r2,zero,43fac <write+0xbc>
      {
        ALT_ERRNO = -rval;
   43f90:	0043ea00 	call	43ea0 <alt_get_errno>
   43f94:	1007883a 	mov	r3,r2
   43f98:	e0bffc17 	ldw	r2,-16(fp)
   43f9c:	0085c83a 	sub	r2,zero,r2
   43fa0:	18800015 	stw	r2,0(r3)
        return -1;
   43fa4:	00bfffc4 	movi	r2,-1
   43fa8:	00000c06 	br	43fdc <write+0xec>
      }
      return rval;
   43fac:	e0bffc17 	ldw	r2,-16(fp)
   43fb0:	00000a06 	br	43fdc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43fb4:	0043ea00 	call	43ea0 <alt_get_errno>
   43fb8:	1007883a 	mov	r3,r2
   43fbc:	00800344 	movi	r2,13
   43fc0:	18800015 	stw	r2,0(r3)
   43fc4:	00000406 	br	43fd8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43fc8:	0043ea00 	call	43ea0 <alt_get_errno>
   43fcc:	1007883a 	mov	r3,r2
   43fd0:	00801444 	movi	r2,81
   43fd4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43fd8:	00bfffc4 	movi	r2,-1
}
   43fdc:	e037883a 	mov	sp,fp
   43fe0:	dfc00117 	ldw	ra,4(sp)
   43fe4:	df000017 	ldw	fp,0(sp)
   43fe8:	dec00204 	addi	sp,sp,8
   43fec:	f800283a 	ret

00043ff0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43ff0:	defffd04 	addi	sp,sp,-12
   43ff4:	dfc00215 	stw	ra,8(sp)
   43ff8:	df000115 	stw	fp,4(sp)
   43ffc:	df000104 	addi	fp,sp,4
   44000:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   44004:	e13fff17 	ldw	r4,-4(fp)
   44008:	01400174 	movhi	r5,5
   4400c:	29610c04 	addi	r5,r5,-31696
   44010:	00458140 	call	45814 <alt_dev_llist_insert>
}
   44014:	e037883a 	mov	sp,fp
   44018:	dfc00117 	ldw	ra,4(sp)
   4401c:	df000017 	ldw	fp,0(sp)
   44020:	dec00204 	addi	sp,sp,8
   44024:	f800283a 	ret

00044028 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   44028:	defffd04 	addi	sp,sp,-12
   4402c:	dfc00215 	stw	ra,8(sp)
   44030:	df000115 	stw	fp,4(sp)
   44034:	df000104 	addi	fp,sp,4
   44038:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   4403c:	00461f40 	call	461f4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   44040:	00800044 	movi	r2,1
   44044:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   44048:	e037883a 	mov	sp,fp
   4404c:	dfc00117 	ldw	ra,4(sp)
   44050:	df000017 	ldw	fp,0(sp)
   44054:	dec00204 	addi	sp,sp,8
   44058:	f800283a 	ret

0004405c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4405c:	defffe04 	addi	sp,sp,-8
   44060:	dfc00115 	stw	ra,4(sp)
   44064:	df000015 	stw	fp,0(sp)
   44068:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK, sys_clk);
   4406c:	01000234 	movhi	r4,8
   44070:	21043004 	addi	r4,r4,4288
   44074:	000b883a 	mov	r5,zero
   44078:	01800044 	movi	r6,1
   4407c:	01c0fa04 	movi	r7,1000
   44080:	0044b980 	call	44b98 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   44084:	01000134 	movhi	r4,4
   44088:	211cc704 	addi	r4,r4,29468
   4408c:	000b883a 	mov	r5,zero
   44090:	01800084 	movi	r6,2
   44094:	004423c0 	call	4423c <altera_avalon_jtag_uart_init>
   44098:	01000134 	movhi	r4,4
   4409c:	211cbd04 	addi	r4,r4,29428
   440a0:	0043ff00 	call	43ff0 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
   440a4:	01000174 	movhi	r4,5
   440a8:	2120df04 	addi	r4,r4,-31876
   440ac:	000b883a 	mov	r5,zero
   440b0:	000d883a 	mov	r6,zero
   440b4:	0044d300 	call	44d30 <altera_avalon_uart_init>
   440b8:	01000174 	movhi	r4,5
   440bc:	2120d504 	addi	r4,r4,-31916
   440c0:	0043ff00 	call	43ff0 <alt_dev_reg>
}
   440c4:	e037883a 	mov	sp,fp
   440c8:	dfc00117 	ldw	ra,4(sp)
   440cc:	df000017 	ldw	fp,0(sp)
   440d0:	dec00204 	addi	sp,sp,8
   440d4:	f800283a 	ret

000440d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   440d8:	defffa04 	addi	sp,sp,-24
   440dc:	dfc00515 	stw	ra,20(sp)
   440e0:	df000415 	stw	fp,16(sp)
   440e4:	df000404 	addi	fp,sp,16
   440e8:	e13ffd15 	stw	r4,-12(fp)
   440ec:	e17ffe15 	stw	r5,-8(fp)
   440f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   440f4:	e0bffd17 	ldw	r2,-12(fp)
   440f8:	10800017 	ldw	r2,0(r2)
   440fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   44100:	e0bffc17 	ldw	r2,-16(fp)
   44104:	10c00a04 	addi	r3,r2,40
   44108:	e0bffd17 	ldw	r2,-12(fp)
   4410c:	10800217 	ldw	r2,8(r2)
   44110:	1809883a 	mov	r4,r3
   44114:	e17ffe17 	ldw	r5,-8(fp)
   44118:	e1bfff17 	ldw	r6,-4(fp)
   4411c:	100f883a 	mov	r7,r2
   44120:	00447000 	call	44700 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   44124:	e037883a 	mov	sp,fp
   44128:	dfc00117 	ldw	ra,4(sp)
   4412c:	df000017 	ldw	fp,0(sp)
   44130:	dec00204 	addi	sp,sp,8
   44134:	f800283a 	ret

00044138 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   44138:	defffa04 	addi	sp,sp,-24
   4413c:	dfc00515 	stw	ra,20(sp)
   44140:	df000415 	stw	fp,16(sp)
   44144:	df000404 	addi	fp,sp,16
   44148:	e13ffd15 	stw	r4,-12(fp)
   4414c:	e17ffe15 	stw	r5,-8(fp)
   44150:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44154:	e0bffd17 	ldw	r2,-12(fp)
   44158:	10800017 	ldw	r2,0(r2)
   4415c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   44160:	e0bffc17 	ldw	r2,-16(fp)
   44164:	10c00a04 	addi	r3,r2,40
   44168:	e0bffd17 	ldw	r2,-12(fp)
   4416c:	10800217 	ldw	r2,8(r2)
   44170:	1809883a 	mov	r4,r3
   44174:	e17ffe17 	ldw	r5,-8(fp)
   44178:	e1bfff17 	ldw	r6,-4(fp)
   4417c:	100f883a 	mov	r7,r2
   44180:	004490c0 	call	4490c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   44184:	e037883a 	mov	sp,fp
   44188:	dfc00117 	ldw	ra,4(sp)
   4418c:	df000017 	ldw	fp,0(sp)
   44190:	dec00204 	addi	sp,sp,8
   44194:	f800283a 	ret

00044198 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   44198:	defffc04 	addi	sp,sp,-16
   4419c:	dfc00315 	stw	ra,12(sp)
   441a0:	df000215 	stw	fp,8(sp)
   441a4:	df000204 	addi	fp,sp,8
   441a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   441ac:	e0bfff17 	ldw	r2,-4(fp)
   441b0:	10800017 	ldw	r2,0(r2)
   441b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   441b8:	e0bffe17 	ldw	r2,-8(fp)
   441bc:	10c00a04 	addi	r3,r2,40
   441c0:	e0bfff17 	ldw	r2,-4(fp)
   441c4:	10800217 	ldw	r2,8(r2)
   441c8:	1809883a 	mov	r4,r3
   441cc:	100b883a 	mov	r5,r2
   441d0:	00445ac0 	call	445ac <altera_avalon_jtag_uart_close>
}
   441d4:	e037883a 	mov	sp,fp
   441d8:	dfc00117 	ldw	ra,4(sp)
   441dc:	df000017 	ldw	fp,0(sp)
   441e0:	dec00204 	addi	sp,sp,8
   441e4:	f800283a 	ret

000441e8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   441e8:	defffa04 	addi	sp,sp,-24
   441ec:	dfc00515 	stw	ra,20(sp)
   441f0:	df000415 	stw	fp,16(sp)
   441f4:	df000404 	addi	fp,sp,16
   441f8:	e13ffd15 	stw	r4,-12(fp)
   441fc:	e17ffe15 	stw	r5,-8(fp)
   44200:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   44204:	e0bffd17 	ldw	r2,-12(fp)
   44208:	10800017 	ldw	r2,0(r2)
   4420c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   44210:	e0bffc17 	ldw	r2,-16(fp)
   44214:	10800a04 	addi	r2,r2,40
   44218:	1009883a 	mov	r4,r2
   4421c:	e17ffe17 	ldw	r5,-8(fp)
   44220:	e1bfff17 	ldw	r6,-4(fp)
   44224:	00446140 	call	44614 <altera_avalon_jtag_uart_ioctl>
}
   44228:	e037883a 	mov	sp,fp
   4422c:	dfc00117 	ldw	ra,4(sp)
   44230:	df000017 	ldw	fp,0(sp)
   44234:	dec00204 	addi	sp,sp,8
   44238:	f800283a 	ret

0004423c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4423c:	defffa04 	addi	sp,sp,-24
   44240:	dfc00515 	stw	ra,20(sp)
   44244:	df000415 	stw	fp,16(sp)
   44248:	df000404 	addi	fp,sp,16
   4424c:	e13ffd15 	stw	r4,-12(fp)
   44250:	e17ffe15 	stw	r5,-8(fp)
   44254:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44258:	e0bffd17 	ldw	r2,-12(fp)
   4425c:	00c00044 	movi	r3,1
   44260:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   44264:	e0bffd17 	ldw	r2,-12(fp)
   44268:	10800017 	ldw	r2,0(r2)
   4426c:	10800104 	addi	r2,r2,4
   44270:	1007883a 	mov	r3,r2
   44274:	e0bffd17 	ldw	r2,-12(fp)
   44278:	10800817 	ldw	r2,32(r2)
   4427c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   44280:	e0fffe17 	ldw	r3,-8(fp)
   44284:	e0bfff17 	ldw	r2,-4(fp)
   44288:	d8000015 	stw	zero,0(sp)
   4428c:	1809883a 	mov	r4,r3
   44290:	100b883a 	mov	r5,r2
   44294:	01800134 	movhi	r6,4
   44298:	3190c004 	addi	r6,r6,17152
   4429c:	e1fffd17 	ldw	r7,-12(fp)
   442a0:	004598c0 	call	4598c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   442a4:	e0bffd17 	ldw	r2,-12(fp)
   442a8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   442ac:	e0bffd17 	ldw	r2,-12(fp)
   442b0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   442b4:	00800174 	movhi	r2,5
   442b8:	10a7e804 	addi	r2,r2,-24672
   442bc:	10800017 	ldw	r2,0(r2)
   442c0:	1809883a 	mov	r4,r3
   442c4:	100b883a 	mov	r5,r2
   442c8:	01800134 	movhi	r6,4
   442cc:	31914104 	addi	r6,r6,17668
   442d0:	e1fffd17 	ldw	r7,-12(fp)
   442d4:	00455100 	call	45510 <alt_alarm_start>
   442d8:	1000040e 	bge	r2,zero,442ec <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   442dc:	e0fffd17 	ldw	r3,-12(fp)
   442e0:	00a00034 	movhi	r2,32768
   442e4:	10bfffc4 	addi	r2,r2,-1
   442e8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   442ec:	e037883a 	mov	sp,fp
   442f0:	dfc00117 	ldw	ra,4(sp)
   442f4:	df000017 	ldw	fp,0(sp)
   442f8:	dec00204 	addi	sp,sp,8
   442fc:	f800283a 	ret

00044300 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   44300:	defff804 	addi	sp,sp,-32
   44304:	df000715 	stw	fp,28(sp)
   44308:	df000704 	addi	fp,sp,28
   4430c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   44310:	e0bfff17 	ldw	r2,-4(fp)
   44314:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   44318:	e0bffb17 	ldw	r2,-20(fp)
   4431c:	10800017 	ldw	r2,0(r2)
   44320:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44324:	e0bffc17 	ldw	r2,-16(fp)
   44328:	10800104 	addi	r2,r2,4
   4432c:	10800037 	ldwio	r2,0(r2)
   44330:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   44334:	e0bffd17 	ldw	r2,-12(fp)
   44338:	1080c00c 	andi	r2,r2,768
   4433c:	1000011e 	bne	r2,zero,44344 <altera_avalon_jtag_uart_irq+0x44>
      break;
   44340:	00006c06 	br	444f4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   44344:	e0bffd17 	ldw	r2,-12(fp)
   44348:	1080400c 	andi	r2,r2,256
   4434c:	10003426 	beq	r2,zero,44420 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   44350:	00800074 	movhi	r2,1
   44354:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44358:	e0bffb17 	ldw	r2,-20(fp)
   4435c:	10800a17 	ldw	r2,40(r2)
   44360:	10800044 	addi	r2,r2,1
   44364:	1081ffcc 	andi	r2,r2,2047
   44368:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4436c:	e0bffb17 	ldw	r2,-20(fp)
   44370:	10c00b17 	ldw	r3,44(r2)
   44374:	e0bffe17 	ldw	r2,-8(fp)
   44378:	1880011e 	bne	r3,r2,44380 <altera_avalon_jtag_uart_irq+0x80>
          break;
   4437c:	00001606 	br	443d8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   44380:	e0bffc17 	ldw	r2,-16(fp)
   44384:	10800037 	ldwio	r2,0(r2)
   44388:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4438c:	e0bff917 	ldw	r2,-28(fp)
   44390:	10a0000c 	andi	r2,r2,32768
   44394:	1000011e 	bne	r2,zero,4439c <altera_avalon_jtag_uart_irq+0x9c>
          break;
   44398:	00000f06 	br	443d8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4439c:	e0bffb17 	ldw	r2,-20(fp)
   443a0:	10800a17 	ldw	r2,40(r2)
   443a4:	e0fff917 	ldw	r3,-28(fp)
   443a8:	1809883a 	mov	r4,r3
   443ac:	e0fffb17 	ldw	r3,-20(fp)
   443b0:	1885883a 	add	r2,r3,r2
   443b4:	10800e04 	addi	r2,r2,56
   443b8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   443bc:	e0bffb17 	ldw	r2,-20(fp)
   443c0:	10800a17 	ldw	r2,40(r2)
   443c4:	10800044 	addi	r2,r2,1
   443c8:	10c1ffcc 	andi	r3,r2,2047
   443cc:	e0bffb17 	ldw	r2,-20(fp)
   443d0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   443d4:	003fe006 	br	44358 <__alt_data_end+0xfffce7f8>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   443d8:	e0bff917 	ldw	r2,-28(fp)
   443dc:	10bfffec 	andhi	r2,r2,65535
   443e0:	10000f26 	beq	r2,zero,44420 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   443e4:	e0bffb17 	ldw	r2,-20(fp)
   443e8:	10c00817 	ldw	r3,32(r2)
   443ec:	00bfff84 	movi	r2,-2
   443f0:	1886703a 	and	r3,r3,r2
   443f4:	e0bffb17 	ldw	r2,-20(fp)
   443f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   443fc:	e0bffc17 	ldw	r2,-16(fp)
   44400:	10800104 	addi	r2,r2,4
   44404:	1007883a 	mov	r3,r2
   44408:	e0bffb17 	ldw	r2,-20(fp)
   4440c:	10800817 	ldw	r2,32(r2)
   44410:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44414:	e0bffc17 	ldw	r2,-16(fp)
   44418:	10800104 	addi	r2,r2,4
   4441c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   44420:	e0bffd17 	ldw	r2,-12(fp)
   44424:	1080800c 	andi	r2,r2,512
   44428:	10003126 	beq	r2,zero,444f0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4442c:	e0bffd17 	ldw	r2,-12(fp)
   44430:	1004d43a 	srli	r2,r2,16
   44434:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   44438:	00001406 	br	4448c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4443c:	e0bffc17 	ldw	r2,-16(fp)
   44440:	e0fffb17 	ldw	r3,-20(fp)
   44444:	18c00d17 	ldw	r3,52(r3)
   44448:	e13ffb17 	ldw	r4,-20(fp)
   4444c:	20c7883a 	add	r3,r4,r3
   44450:	18c20e04 	addi	r3,r3,2104
   44454:	18c00003 	ldbu	r3,0(r3)
   44458:	18c03fcc 	andi	r3,r3,255
   4445c:	18c0201c 	xori	r3,r3,128
   44460:	18ffe004 	addi	r3,r3,-128
   44464:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44468:	e0bffb17 	ldw	r2,-20(fp)
   4446c:	10800d17 	ldw	r2,52(r2)
   44470:	10800044 	addi	r2,r2,1
   44474:	10c1ffcc 	andi	r3,r2,2047
   44478:	e0bffb17 	ldw	r2,-20(fp)
   4447c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   44480:	e0bffa17 	ldw	r2,-24(fp)
   44484:	10bfffc4 	addi	r2,r2,-1
   44488:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4448c:	e0bffa17 	ldw	r2,-24(fp)
   44490:	10000526 	beq	r2,zero,444a8 <altera_avalon_jtag_uart_irq+0x1a8>
   44494:	e0bffb17 	ldw	r2,-20(fp)
   44498:	10c00d17 	ldw	r3,52(r2)
   4449c:	e0bffb17 	ldw	r2,-20(fp)
   444a0:	10800c17 	ldw	r2,48(r2)
   444a4:	18bfe51e 	bne	r3,r2,4443c <__alt_data_end+0xfffce8dc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   444a8:	e0bffa17 	ldw	r2,-24(fp)
   444ac:	10001026 	beq	r2,zero,444f0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   444b0:	e0bffb17 	ldw	r2,-20(fp)
   444b4:	10c00817 	ldw	r3,32(r2)
   444b8:	00bfff44 	movi	r2,-3
   444bc:	1886703a 	and	r3,r3,r2
   444c0:	e0bffb17 	ldw	r2,-20(fp)
   444c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   444c8:	e0bffb17 	ldw	r2,-20(fp)
   444cc:	10800017 	ldw	r2,0(r2)
   444d0:	10800104 	addi	r2,r2,4
   444d4:	1007883a 	mov	r3,r2
   444d8:	e0bffb17 	ldw	r2,-20(fp)
   444dc:	10800817 	ldw	r2,32(r2)
   444e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   444e4:	e0bffc17 	ldw	r2,-16(fp)
   444e8:	10800104 	addi	r2,r2,4
   444ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   444f0:	003f8c06 	br	44324 <__alt_data_end+0xfffce7c4>
}
   444f4:	e037883a 	mov	sp,fp
   444f8:	df000017 	ldw	fp,0(sp)
   444fc:	dec00104 	addi	sp,sp,4
   44500:	f800283a 	ret

00044504 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   44504:	defff804 	addi	sp,sp,-32
   44508:	df000715 	stw	fp,28(sp)
   4450c:	df000704 	addi	fp,sp,28
   44510:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   44514:	e0bffb17 	ldw	r2,-20(fp)
   44518:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4451c:	e0bff917 	ldw	r2,-28(fp)
   44520:	10800017 	ldw	r2,0(r2)
   44524:	10800104 	addi	r2,r2,4
   44528:	10800037 	ldwio	r2,0(r2)
   4452c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   44530:	e0bffa17 	ldw	r2,-24(fp)
   44534:	1081000c 	andi	r2,r2,1024
   44538:	10000b26 	beq	r2,zero,44568 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4453c:	e0bff917 	ldw	r2,-28(fp)
   44540:	10800017 	ldw	r2,0(r2)
   44544:	10800104 	addi	r2,r2,4
   44548:	1007883a 	mov	r3,r2
   4454c:	e0bff917 	ldw	r2,-28(fp)
   44550:	10800817 	ldw	r2,32(r2)
   44554:	10810014 	ori	r2,r2,1024
   44558:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4455c:	e0bff917 	ldw	r2,-28(fp)
   44560:	10000915 	stw	zero,36(r2)
   44564:	00000a06 	br	44590 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   44568:	e0bff917 	ldw	r2,-28(fp)
   4456c:	10c00917 	ldw	r3,36(r2)
   44570:	00a00034 	movhi	r2,32768
   44574:	10bfff04 	addi	r2,r2,-4
   44578:	10c00536 	bltu	r2,r3,44590 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   4457c:	e0bff917 	ldw	r2,-28(fp)
   44580:	10800917 	ldw	r2,36(r2)
   44584:	10c00044 	addi	r3,r2,1
   44588:	e0bff917 	ldw	r2,-28(fp)
   4458c:	10c00915 	stw	r3,36(r2)
   44590:	00800174 	movhi	r2,5
   44594:	10a7e804 	addi	r2,r2,-24672
   44598:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4459c:	e037883a 	mov	sp,fp
   445a0:	df000017 	ldw	fp,0(sp)
   445a4:	dec00104 	addi	sp,sp,4
   445a8:	f800283a 	ret

000445ac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   445ac:	defffd04 	addi	sp,sp,-12
   445b0:	df000215 	stw	fp,8(sp)
   445b4:	df000204 	addi	fp,sp,8
   445b8:	e13ffe15 	stw	r4,-8(fp)
   445bc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   445c0:	00000506 	br	445d8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   445c4:	e0bfff17 	ldw	r2,-4(fp)
   445c8:	1090000c 	andi	r2,r2,16384
   445cc:	10000226 	beq	r2,zero,445d8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   445d0:	00bffd44 	movi	r2,-11
   445d4:	00000b06 	br	44604 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   445d8:	e0bffe17 	ldw	r2,-8(fp)
   445dc:	10c00d17 	ldw	r3,52(r2)
   445e0:	e0bffe17 	ldw	r2,-8(fp)
   445e4:	10800c17 	ldw	r2,48(r2)
   445e8:	18800526 	beq	r3,r2,44600 <altera_avalon_jtag_uart_close+0x54>
   445ec:	e0bffe17 	ldw	r2,-8(fp)
   445f0:	10c00917 	ldw	r3,36(r2)
   445f4:	e0bffe17 	ldw	r2,-8(fp)
   445f8:	10800117 	ldw	r2,4(r2)
   445fc:	18bff136 	bltu	r3,r2,445c4 <__alt_data_end+0xfffcea64>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44600:	0005883a 	mov	r2,zero
}
   44604:	e037883a 	mov	sp,fp
   44608:	df000017 	ldw	fp,0(sp)
   4460c:	dec00104 	addi	sp,sp,4
   44610:	f800283a 	ret

00044614 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   44614:	defffa04 	addi	sp,sp,-24
   44618:	df000515 	stw	fp,20(sp)
   4461c:	df000504 	addi	fp,sp,20
   44620:	e13ffd15 	stw	r4,-12(fp)
   44624:	e17ffe15 	stw	r5,-8(fp)
   44628:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4462c:	00bff9c4 	movi	r2,-25
   44630:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   44634:	e0bffe17 	ldw	r2,-8(fp)
   44638:	10da8060 	cmpeqi	r3,r2,27137
   4463c:	1800031e 	bne	r3,zero,4464c <altera_avalon_jtag_uart_ioctl+0x38>
   44640:	109a80a0 	cmpeqi	r2,r2,27138
   44644:	1000191e 	bne	r2,zero,446ac <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   44648:	00002806 	br	446ec <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4464c:	e0bffd17 	ldw	r2,-12(fp)
   44650:	10c00117 	ldw	r3,4(r2)
   44654:	00a00034 	movhi	r2,32768
   44658:	10bfffc4 	addi	r2,r2,-1
   4465c:	18801226 	beq	r3,r2,446a8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   44660:	e0bfff17 	ldw	r2,-4(fp)
   44664:	10800017 	ldw	r2,0(r2)
   44668:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4466c:	e0bffc17 	ldw	r2,-16(fp)
   44670:	10800090 	cmplti	r2,r2,2
   44674:	1000061e 	bne	r2,zero,44690 <altera_avalon_jtag_uart_ioctl+0x7c>
   44678:	e0fffc17 	ldw	r3,-16(fp)
   4467c:	00a00034 	movhi	r2,32768
   44680:	10bfffc4 	addi	r2,r2,-1
   44684:	18800226 	beq	r3,r2,44690 <altera_avalon_jtag_uart_ioctl+0x7c>
   44688:	e0bffc17 	ldw	r2,-16(fp)
   4468c:	00000206 	br	44698 <altera_avalon_jtag_uart_ioctl+0x84>
   44690:	00a00034 	movhi	r2,32768
   44694:	10bfff84 	addi	r2,r2,-2
   44698:	e0fffd17 	ldw	r3,-12(fp)
   4469c:	18800115 	stw	r2,4(r3)
      rc = 0;
   446a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   446a4:	00001106 	br	446ec <altera_avalon_jtag_uart_ioctl+0xd8>
   446a8:	00001006 	br	446ec <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   446ac:	e0bffd17 	ldw	r2,-12(fp)
   446b0:	10c00117 	ldw	r3,4(r2)
   446b4:	00a00034 	movhi	r2,32768
   446b8:	10bfffc4 	addi	r2,r2,-1
   446bc:	18800a26 	beq	r3,r2,446e8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   446c0:	e0bffd17 	ldw	r2,-12(fp)
   446c4:	10c00917 	ldw	r3,36(r2)
   446c8:	e0bffd17 	ldw	r2,-12(fp)
   446cc:	10800117 	ldw	r2,4(r2)
   446d0:	1885803a 	cmpltu	r2,r3,r2
   446d4:	10c03fcc 	andi	r3,r2,255
   446d8:	e0bfff17 	ldw	r2,-4(fp)
   446dc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   446e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   446e4:	00000006 	br	446e8 <altera_avalon_jtag_uart_ioctl+0xd4>
   446e8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   446ec:	e0bffb17 	ldw	r2,-20(fp)
}
   446f0:	e037883a 	mov	sp,fp
   446f4:	df000017 	ldw	fp,0(sp)
   446f8:	dec00104 	addi	sp,sp,4
   446fc:	f800283a 	ret

00044700 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   44700:	defff304 	addi	sp,sp,-52
   44704:	dfc00c15 	stw	ra,48(sp)
   44708:	df000b15 	stw	fp,44(sp)
   4470c:	df000b04 	addi	fp,sp,44
   44710:	e13ffc15 	stw	r4,-16(fp)
   44714:	e17ffd15 	stw	r5,-12(fp)
   44718:	e1bffe15 	stw	r6,-8(fp)
   4471c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   44720:	e0bffd17 	ldw	r2,-12(fp)
   44724:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44728:	00004906 	br	44850 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4472c:	e0bffc17 	ldw	r2,-16(fp)
   44730:	10800a17 	ldw	r2,40(r2)
   44734:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   44738:	e0bffc17 	ldw	r2,-16(fp)
   4473c:	10800b17 	ldw	r2,44(r2)
   44740:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   44744:	e0fff717 	ldw	r3,-36(fp)
   44748:	e0bff817 	ldw	r2,-32(fp)
   4474c:	18800536 	bltu	r3,r2,44764 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   44750:	e0fff717 	ldw	r3,-36(fp)
   44754:	e0bff817 	ldw	r2,-32(fp)
   44758:	1885c83a 	sub	r2,r3,r2
   4475c:	e0bff615 	stw	r2,-40(fp)
   44760:	00000406 	br	44774 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   44764:	00c20004 	movi	r3,2048
   44768:	e0bff817 	ldw	r2,-32(fp)
   4476c:	1885c83a 	sub	r2,r3,r2
   44770:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   44774:	e0bff617 	ldw	r2,-40(fp)
   44778:	1000011e 	bne	r2,zero,44780 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   4477c:	00001d06 	br	447f4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   44780:	e0fffe17 	ldw	r3,-8(fp)
   44784:	e0bff617 	ldw	r2,-40(fp)
   44788:	1880022e 	bgeu	r3,r2,44794 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4478c:	e0bffe17 	ldw	r2,-8(fp)
   44790:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   44794:	e0bff817 	ldw	r2,-32(fp)
   44798:	10800e04 	addi	r2,r2,56
   4479c:	e0fffc17 	ldw	r3,-16(fp)
   447a0:	1885883a 	add	r2,r3,r2
   447a4:	e13ff517 	ldw	r4,-44(fp)
   447a8:	100b883a 	mov	r5,r2
   447ac:	e1bff617 	ldw	r6,-40(fp)
   447b0:	00418380 	call	41838 <memcpy>
      ptr   += n;
   447b4:	e0fff517 	ldw	r3,-44(fp)
   447b8:	e0bff617 	ldw	r2,-40(fp)
   447bc:	1885883a 	add	r2,r3,r2
   447c0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   447c4:	e0fffe17 	ldw	r3,-8(fp)
   447c8:	e0bff617 	ldw	r2,-40(fp)
   447cc:	1885c83a 	sub	r2,r3,r2
   447d0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   447d4:	e0fff817 	ldw	r3,-32(fp)
   447d8:	e0bff617 	ldw	r2,-40(fp)
   447dc:	1885883a 	add	r2,r3,r2
   447e0:	10c1ffcc 	andi	r3,r2,2047
   447e4:	e0bffc17 	ldw	r2,-16(fp)
   447e8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   447ec:	e0bffe17 	ldw	r2,-8(fp)
   447f0:	00bfce16 	blt	zero,r2,4472c <__alt_data_end+0xfffcebcc>

    /* If we read any data then return it */
    if (ptr != buffer)
   447f4:	e0fff517 	ldw	r3,-44(fp)
   447f8:	e0bffd17 	ldw	r2,-12(fp)
   447fc:	18800126 	beq	r3,r2,44804 <altera_avalon_jtag_uart_read+0x104>
      break;
   44800:	00001506 	br	44858 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   44804:	e0bfff17 	ldw	r2,-4(fp)
   44808:	1090000c 	andi	r2,r2,16384
   4480c:	10000126 	beq	r2,zero,44814 <altera_avalon_jtag_uart_read+0x114>
      break;
   44810:	00001106 	br	44858 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   44814:	0001883a 	nop
   44818:	e0bffc17 	ldw	r2,-16(fp)
   4481c:	10c00a17 	ldw	r3,40(r2)
   44820:	e0bff717 	ldw	r2,-36(fp)
   44824:	1880051e 	bne	r3,r2,4483c <altera_avalon_jtag_uart_read+0x13c>
   44828:	e0bffc17 	ldw	r2,-16(fp)
   4482c:	10c00917 	ldw	r3,36(r2)
   44830:	e0bffc17 	ldw	r2,-16(fp)
   44834:	10800117 	ldw	r2,4(r2)
   44838:	18bff736 	bltu	r3,r2,44818 <__alt_data_end+0xfffcecb8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4483c:	e0bffc17 	ldw	r2,-16(fp)
   44840:	10c00a17 	ldw	r3,40(r2)
   44844:	e0bff717 	ldw	r2,-36(fp)
   44848:	1880011e 	bne	r3,r2,44850 <altera_avalon_jtag_uart_read+0x150>
      break;
   4484c:	00000206 	br	44858 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44850:	e0bffe17 	ldw	r2,-8(fp)
   44854:	00bfb516 	blt	zero,r2,4472c <__alt_data_end+0xfffcebcc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   44858:	e0fff517 	ldw	r3,-44(fp)
   4485c:	e0bffd17 	ldw	r2,-12(fp)
   44860:	18801826 	beq	r3,r2,448c4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44864:	0005303a 	rdctl	r2,status
   44868:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4486c:	e0fffa17 	ldw	r3,-24(fp)
   44870:	00bfff84 	movi	r2,-2
   44874:	1884703a 	and	r2,r3,r2
   44878:	1001703a 	wrctl	status,r2
  
  return context;
   4487c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   44880:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44884:	e0bffc17 	ldw	r2,-16(fp)
   44888:	10800817 	ldw	r2,32(r2)
   4488c:	10c00054 	ori	r3,r2,1
   44890:	e0bffc17 	ldw	r2,-16(fp)
   44894:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44898:	e0bffc17 	ldw	r2,-16(fp)
   4489c:	10800017 	ldw	r2,0(r2)
   448a0:	10800104 	addi	r2,r2,4
   448a4:	1007883a 	mov	r3,r2
   448a8:	e0bffc17 	ldw	r2,-16(fp)
   448ac:	10800817 	ldw	r2,32(r2)
   448b0:	18800035 	stwio	r2,0(r3)
   448b4:	e0bff917 	ldw	r2,-28(fp)
   448b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   448bc:	e0bffb17 	ldw	r2,-20(fp)
   448c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   448c4:	e0fff517 	ldw	r3,-44(fp)
   448c8:	e0bffd17 	ldw	r2,-12(fp)
   448cc:	18800426 	beq	r3,r2,448e0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   448d0:	e0fff517 	ldw	r3,-44(fp)
   448d4:	e0bffd17 	ldw	r2,-12(fp)
   448d8:	1885c83a 	sub	r2,r3,r2
   448dc:	00000606 	br	448f8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   448e0:	e0bfff17 	ldw	r2,-4(fp)
   448e4:	1090000c 	andi	r2,r2,16384
   448e8:	10000226 	beq	r2,zero,448f4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   448ec:	00bffd44 	movi	r2,-11
   448f0:	00000106 	br	448f8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   448f4:	00bffec4 	movi	r2,-5
}
   448f8:	e037883a 	mov	sp,fp
   448fc:	dfc00117 	ldw	ra,4(sp)
   44900:	df000017 	ldw	fp,0(sp)
   44904:	dec00204 	addi	sp,sp,8
   44908:	f800283a 	ret

0004490c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4490c:	defff304 	addi	sp,sp,-52
   44910:	dfc00c15 	stw	ra,48(sp)
   44914:	df000b15 	stw	fp,44(sp)
   44918:	df000b04 	addi	fp,sp,44
   4491c:	e13ffc15 	stw	r4,-16(fp)
   44920:	e17ffd15 	stw	r5,-12(fp)
   44924:	e1bffe15 	stw	r6,-8(fp)
   44928:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4492c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   44930:	e0bffd17 	ldw	r2,-12(fp)
   44934:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44938:	00003806 	br	44a1c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4493c:	e0bffc17 	ldw	r2,-16(fp)
   44940:	10800c17 	ldw	r2,48(r2)
   44944:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   44948:	e0bffc17 	ldw	r2,-16(fp)
   4494c:	10800d17 	ldw	r2,52(r2)
   44950:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   44954:	e0fff817 	ldw	r3,-32(fp)
   44958:	e0bff517 	ldw	r2,-44(fp)
   4495c:	1880062e 	bgeu	r3,r2,44978 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   44960:	e0fff517 	ldw	r3,-44(fp)
   44964:	e0bff817 	ldw	r2,-32(fp)
   44968:	1885c83a 	sub	r2,r3,r2
   4496c:	10bfffc4 	addi	r2,r2,-1
   44970:	e0bff615 	stw	r2,-40(fp)
   44974:	00000b06 	br	449a4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   44978:	e0bff517 	ldw	r2,-44(fp)
   4497c:	10000526 	beq	r2,zero,44994 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   44980:	00c20004 	movi	r3,2048
   44984:	e0bff817 	ldw	r2,-32(fp)
   44988:	1885c83a 	sub	r2,r3,r2
   4498c:	e0bff615 	stw	r2,-40(fp)
   44990:	00000406 	br	449a4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   44994:	00c1ffc4 	movi	r3,2047
   44998:	e0bff817 	ldw	r2,-32(fp)
   4499c:	1885c83a 	sub	r2,r3,r2
   449a0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   449a4:	e0bff617 	ldw	r2,-40(fp)
   449a8:	1000011e 	bne	r2,zero,449b0 <altera_avalon_jtag_uart_write+0xa4>
        break;
   449ac:	00001d06 	br	44a24 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   449b0:	e0fffe17 	ldw	r3,-8(fp)
   449b4:	e0bff617 	ldw	r2,-40(fp)
   449b8:	1880022e 	bgeu	r3,r2,449c4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   449bc:	e0bffe17 	ldw	r2,-8(fp)
   449c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   449c4:	e0bff817 	ldw	r2,-32(fp)
   449c8:	10820e04 	addi	r2,r2,2104
   449cc:	e0fffc17 	ldw	r3,-16(fp)
   449d0:	1885883a 	add	r2,r3,r2
   449d4:	1009883a 	mov	r4,r2
   449d8:	e17ffd17 	ldw	r5,-12(fp)
   449dc:	e1bff617 	ldw	r6,-40(fp)
   449e0:	00418380 	call	41838 <memcpy>
      ptr   += n;
   449e4:	e0fffd17 	ldw	r3,-12(fp)
   449e8:	e0bff617 	ldw	r2,-40(fp)
   449ec:	1885883a 	add	r2,r3,r2
   449f0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   449f4:	e0fffe17 	ldw	r3,-8(fp)
   449f8:	e0bff617 	ldw	r2,-40(fp)
   449fc:	1885c83a 	sub	r2,r3,r2
   44a00:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44a04:	e0fff817 	ldw	r3,-32(fp)
   44a08:	e0bff617 	ldw	r2,-40(fp)
   44a0c:	1885883a 	add	r2,r3,r2
   44a10:	10c1ffcc 	andi	r3,r2,2047
   44a14:	e0bffc17 	ldw	r2,-16(fp)
   44a18:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44a1c:	e0bffe17 	ldw	r2,-8(fp)
   44a20:	00bfc616 	blt	zero,r2,4493c <__alt_data_end+0xfffceddc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44a24:	0005303a 	rdctl	r2,status
   44a28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44a2c:	e0fffa17 	ldw	r3,-24(fp)
   44a30:	00bfff84 	movi	r2,-2
   44a34:	1884703a 	and	r2,r3,r2
   44a38:	1001703a 	wrctl	status,r2
  
  return context;
   44a3c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   44a40:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44a44:	e0bffc17 	ldw	r2,-16(fp)
   44a48:	10800817 	ldw	r2,32(r2)
   44a4c:	10c00094 	ori	r3,r2,2
   44a50:	e0bffc17 	ldw	r2,-16(fp)
   44a54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44a58:	e0bffc17 	ldw	r2,-16(fp)
   44a5c:	10800017 	ldw	r2,0(r2)
   44a60:	10800104 	addi	r2,r2,4
   44a64:	1007883a 	mov	r3,r2
   44a68:	e0bffc17 	ldw	r2,-16(fp)
   44a6c:	10800817 	ldw	r2,32(r2)
   44a70:	18800035 	stwio	r2,0(r3)
   44a74:	e0bff917 	ldw	r2,-28(fp)
   44a78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44a7c:	e0bffb17 	ldw	r2,-20(fp)
   44a80:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   44a84:	e0bffe17 	ldw	r2,-8(fp)
   44a88:	0080120e 	bge	zero,r2,44ad4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   44a8c:	e0bfff17 	ldw	r2,-4(fp)
   44a90:	1090000c 	andi	r2,r2,16384
   44a94:	10000126 	beq	r2,zero,44a9c <altera_avalon_jtag_uart_write+0x190>
        break;
   44a98:	00001006 	br	44adc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   44a9c:	0001883a 	nop
   44aa0:	e0bffc17 	ldw	r2,-16(fp)
   44aa4:	10c00d17 	ldw	r3,52(r2)
   44aa8:	e0bff517 	ldw	r2,-44(fp)
   44aac:	1880051e 	bne	r3,r2,44ac4 <altera_avalon_jtag_uart_write+0x1b8>
   44ab0:	e0bffc17 	ldw	r2,-16(fp)
   44ab4:	10c00917 	ldw	r3,36(r2)
   44ab8:	e0bffc17 	ldw	r2,-16(fp)
   44abc:	10800117 	ldw	r2,4(r2)
   44ac0:	18bff736 	bltu	r3,r2,44aa0 <__alt_data_end+0xfffcef40>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   44ac4:	e0bffc17 	ldw	r2,-16(fp)
   44ac8:	10800917 	ldw	r2,36(r2)
   44acc:	10000126 	beq	r2,zero,44ad4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   44ad0:	00000206 	br	44adc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   44ad4:	e0bffe17 	ldw	r2,-8(fp)
   44ad8:	00bf9716 	blt	zero,r2,44938 <__alt_data_end+0xfffcedd8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   44adc:	e0fffd17 	ldw	r3,-12(fp)
   44ae0:	e0bff717 	ldw	r2,-36(fp)
   44ae4:	18800426 	beq	r3,r2,44af8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   44ae8:	e0fffd17 	ldw	r3,-12(fp)
   44aec:	e0bff717 	ldw	r2,-36(fp)
   44af0:	1885c83a 	sub	r2,r3,r2
   44af4:	00000606 	br	44b10 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   44af8:	e0bfff17 	ldw	r2,-4(fp)
   44afc:	1090000c 	andi	r2,r2,16384
   44b00:	10000226 	beq	r2,zero,44b0c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   44b04:	00bffd44 	movi	r2,-11
   44b08:	00000106 	br	44b10 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   44b0c:	00bffec4 	movi	r2,-5
}
   44b10:	e037883a 	mov	sp,fp
   44b14:	dfc00117 	ldw	ra,4(sp)
   44b18:	df000017 	ldw	fp,0(sp)
   44b1c:	dec00204 	addi	sp,sp,8
   44b20:	f800283a 	ret

00044b24 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   44b24:	defffa04 	addi	sp,sp,-24
   44b28:	dfc00515 	stw	ra,20(sp)
   44b2c:	df000415 	stw	fp,16(sp)
   44b30:	df000404 	addi	fp,sp,16
   44b34:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   44b38:	0007883a 	mov	r3,zero
   44b3c:	e0bfff17 	ldw	r2,-4(fp)
   44b40:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   44b44:	e0bfff17 	ldw	r2,-4(fp)
   44b48:	10800104 	addi	r2,r2,4
   44b4c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44b50:	0005303a 	rdctl	r2,status
   44b54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44b58:	e0fffd17 	ldw	r3,-12(fp)
   44b5c:	00bfff84 	movi	r2,-2
   44b60:	1884703a 	and	r2,r3,r2
   44b64:	1001703a 	wrctl	status,r2
  
  return context;
   44b68:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   44b6c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   44b70:	00460f00 	call	460f0 <alt_tick>
   44b74:	e0bffc17 	ldw	r2,-16(fp)
   44b78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44b7c:	e0bffe17 	ldw	r2,-8(fp)
   44b80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   44b84:	e037883a 	mov	sp,fp
   44b88:	dfc00117 	ldw	ra,4(sp)
   44b8c:	df000017 	ldw	fp,0(sp)
   44b90:	dec00204 	addi	sp,sp,8
   44b94:	f800283a 	ret

00044b98 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   44b98:	defff804 	addi	sp,sp,-32
   44b9c:	dfc00715 	stw	ra,28(sp)
   44ba0:	df000615 	stw	fp,24(sp)
   44ba4:	df000604 	addi	fp,sp,24
   44ba8:	e13ffc15 	stw	r4,-16(fp)
   44bac:	e17ffd15 	stw	r5,-12(fp)
   44bb0:	e1bffe15 	stw	r6,-8(fp)
   44bb4:	e1ffff15 	stw	r7,-4(fp)
   44bb8:	e0bfff17 	ldw	r2,-4(fp)
   44bbc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   44bc0:	00800174 	movhi	r2,5
   44bc4:	10a7e804 	addi	r2,r2,-24672
   44bc8:	10800017 	ldw	r2,0(r2)
   44bcc:	1000041e 	bne	r2,zero,44be0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   44bd0:	00800174 	movhi	r2,5
   44bd4:	10a7e804 	addi	r2,r2,-24672
   44bd8:	e0fffb17 	ldw	r3,-20(fp)
   44bdc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   44be0:	e0bffc17 	ldw	r2,-16(fp)
   44be4:	10800104 	addi	r2,r2,4
   44be8:	00c001c4 	movi	r3,7
   44bec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   44bf0:	d8000015 	stw	zero,0(sp)
   44bf4:	e13ffd17 	ldw	r4,-12(fp)
   44bf8:	e17ffe17 	ldw	r5,-8(fp)
   44bfc:	01800134 	movhi	r6,4
   44c00:	3192c904 	addi	r6,r6,19236
   44c04:	e1fffc17 	ldw	r7,-16(fp)
   44c08:	004598c0 	call	4598c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   44c0c:	e037883a 	mov	sp,fp
   44c10:	dfc00117 	ldw	ra,4(sp)
   44c14:	df000017 	ldw	fp,0(sp)
   44c18:	dec00204 	addi	sp,sp,8
   44c1c:	f800283a 	ret

00044c20 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   44c20:	defffa04 	addi	sp,sp,-24
   44c24:	dfc00515 	stw	ra,20(sp)
   44c28:	df000415 	stw	fp,16(sp)
   44c2c:	df000404 	addi	fp,sp,16
   44c30:	e13ffd15 	stw	r4,-12(fp)
   44c34:	e17ffe15 	stw	r5,-8(fp)
   44c38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   44c3c:	e0bffd17 	ldw	r2,-12(fp)
   44c40:	10800017 	ldw	r2,0(r2)
   44c44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   44c48:	e0bffc17 	ldw	r2,-16(fp)
   44c4c:	10c00a04 	addi	r3,r2,40
   44c50:	e0bffd17 	ldw	r2,-12(fp)
   44c54:	10800217 	ldw	r2,8(r2)
   44c58:	1809883a 	mov	r4,r3
   44c5c:	e17ffe17 	ldw	r5,-8(fp)
   44c60:	e1bfff17 	ldw	r6,-4(fp)
   44c64:	100f883a 	mov	r7,r2
   44c68:	00451380 	call	45138 <altera_avalon_uart_read>
      fd->fd_flags);
}
   44c6c:	e037883a 	mov	sp,fp
   44c70:	dfc00117 	ldw	ra,4(sp)
   44c74:	df000017 	ldw	fp,0(sp)
   44c78:	dec00204 	addi	sp,sp,8
   44c7c:	f800283a 	ret

00044c80 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   44c80:	defffa04 	addi	sp,sp,-24
   44c84:	dfc00515 	stw	ra,20(sp)
   44c88:	df000415 	stw	fp,16(sp)
   44c8c:	df000404 	addi	fp,sp,16
   44c90:	e13ffd15 	stw	r4,-12(fp)
   44c94:	e17ffe15 	stw	r5,-8(fp)
   44c98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   44c9c:	e0bffd17 	ldw	r2,-12(fp)
   44ca0:	10800017 	ldw	r2,0(r2)
   44ca4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   44ca8:	e0bffc17 	ldw	r2,-16(fp)
   44cac:	10c00a04 	addi	r3,r2,40
   44cb0:	e0bffd17 	ldw	r2,-12(fp)
   44cb4:	10800217 	ldw	r2,8(r2)
   44cb8:	1809883a 	mov	r4,r3
   44cbc:	e17ffe17 	ldw	r5,-8(fp)
   44cc0:	e1bfff17 	ldw	r6,-4(fp)
   44cc4:	100f883a 	mov	r7,r2
   44cc8:	00453640 	call	45364 <altera_avalon_uart_write>
      fd->fd_flags);
}
   44ccc:	e037883a 	mov	sp,fp
   44cd0:	dfc00117 	ldw	ra,4(sp)
   44cd4:	df000017 	ldw	fp,0(sp)
   44cd8:	dec00204 	addi	sp,sp,8
   44cdc:	f800283a 	ret

00044ce0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   44ce0:	defffc04 	addi	sp,sp,-16
   44ce4:	dfc00315 	stw	ra,12(sp)
   44ce8:	df000215 	stw	fp,8(sp)
   44cec:	df000204 	addi	fp,sp,8
   44cf0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   44cf4:	e0bfff17 	ldw	r2,-4(fp)
   44cf8:	10800017 	ldw	r2,0(r2)
   44cfc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   44d00:	e0bffe17 	ldw	r2,-8(fp)
   44d04:	10c00a04 	addi	r3,r2,40
   44d08:	e0bfff17 	ldw	r2,-4(fp)
   44d0c:	10800217 	ldw	r2,8(r2)
   44d10:	1809883a 	mov	r4,r3
   44d14:	100b883a 	mov	r5,r2
   44d18:	00450940 	call	45094 <altera_avalon_uart_close>
}
   44d1c:	e037883a 	mov	sp,fp
   44d20:	dfc00117 	ldw	ra,4(sp)
   44d24:	df000017 	ldw	fp,0(sp)
   44d28:	dec00204 	addi	sp,sp,8
   44d2c:	f800283a 	ret

00044d30 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   44d30:	defff804 	addi	sp,sp,-32
   44d34:	dfc00715 	stw	ra,28(sp)
   44d38:	df000615 	stw	fp,24(sp)
   44d3c:	df000604 	addi	fp,sp,24
   44d40:	e13ffd15 	stw	r4,-12(fp)
   44d44:	e17ffe15 	stw	r5,-8(fp)
   44d48:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   44d4c:	e0bffd17 	ldw	r2,-12(fp)
   44d50:	10800017 	ldw	r2,0(r2)
   44d54:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   44d58:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   44d5c:	1000041e 	bne	r2,zero,44d70 <altera_avalon_uart_init+0x40>
   44d60:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   44d64:	1000021e 	bne	r2,zero,44d70 <altera_avalon_uart_init+0x40>
   44d68:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   44d6c:	10000226 	beq	r2,zero,44d78 <altera_avalon_uart_init+0x48>
   44d70:	00800044 	movi	r2,1
   44d74:	00000106 	br	44d7c <altera_avalon_uart_init+0x4c>
   44d78:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   44d7c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   44d80:	e0bffc17 	ldw	r2,-16(fp)
   44d84:	10000f1e 	bne	r2,zero,44dc4 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   44d88:	e0bffd17 	ldw	r2,-12(fp)
   44d8c:	00c32004 	movi	r3,3200
   44d90:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   44d94:	e0bffb17 	ldw	r2,-20(fp)
   44d98:	10800304 	addi	r2,r2,12
   44d9c:	e0fffd17 	ldw	r3,-12(fp)
   44da0:	18c00117 	ldw	r3,4(r3)
   44da4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   44da8:	d8000015 	stw	zero,0(sp)
   44dac:	e13ffe17 	ldw	r4,-8(fp)
   44db0:	e17fff17 	ldw	r5,-4(fp)
   44db4:	01800134 	movhi	r6,4
   44db8:	31937604 	addi	r6,r6,19928
   44dbc:	e1fffd17 	ldw	r7,-12(fp)
   44dc0:	004598c0 	call	4598c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   44dc4:	e037883a 	mov	sp,fp
   44dc8:	dfc00117 	ldw	ra,4(sp)
   44dcc:	df000017 	ldw	fp,0(sp)
   44dd0:	dec00204 	addi	sp,sp,8
   44dd4:	f800283a 	ret

00044dd8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   44dd8:	defffa04 	addi	sp,sp,-24
   44ddc:	dfc00515 	stw	ra,20(sp)
   44de0:	df000415 	stw	fp,16(sp)
   44de4:	df000404 	addi	fp,sp,16
   44de8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   44dec:	e0bfff17 	ldw	r2,-4(fp)
   44df0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   44df4:	e0bffc17 	ldw	r2,-16(fp)
   44df8:	10800017 	ldw	r2,0(r2)
   44dfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   44e00:	e0bffd17 	ldw	r2,-12(fp)
   44e04:	10800204 	addi	r2,r2,8
   44e08:	10800037 	ldwio	r2,0(r2)
   44e0c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   44e10:	e0bffd17 	ldw	r2,-12(fp)
   44e14:	10800204 	addi	r2,r2,8
   44e18:	0007883a 	mov	r3,zero
   44e1c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   44e20:	e0bffd17 	ldw	r2,-12(fp)
   44e24:	10800204 	addi	r2,r2,8
   44e28:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   44e2c:	e0bffe17 	ldw	r2,-8(fp)
   44e30:	1080200c 	andi	r2,r2,128
   44e34:	10000326 	beq	r2,zero,44e44 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   44e38:	e13ffc17 	ldw	r4,-16(fp)
   44e3c:	e17ffe17 	ldw	r5,-8(fp)
   44e40:	0044e700 	call	44e70 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   44e44:	e0bffe17 	ldw	r2,-8(fp)
   44e48:	1081100c 	andi	r2,r2,1088
   44e4c:	10000326 	beq	r2,zero,44e5c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   44e50:	e13ffc17 	ldw	r4,-16(fp)
   44e54:	e17ffe17 	ldw	r5,-8(fp)
   44e58:	0044f500 	call	44f50 <altera_avalon_uart_txirq>
  }
  

}
   44e5c:	e037883a 	mov	sp,fp
   44e60:	dfc00117 	ldw	ra,4(sp)
   44e64:	df000017 	ldw	fp,0(sp)
   44e68:	dec00204 	addi	sp,sp,8
   44e6c:	f800283a 	ret

00044e70 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   44e70:	defffc04 	addi	sp,sp,-16
   44e74:	df000315 	stw	fp,12(sp)
   44e78:	df000304 	addi	fp,sp,12
   44e7c:	e13ffe15 	stw	r4,-8(fp)
   44e80:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   44e84:	e0bfff17 	ldw	r2,-4(fp)
   44e88:	108000cc 	andi	r2,r2,3
   44e8c:	10000126 	beq	r2,zero,44e94 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   44e90:	00002b06 	br	44f40 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   44e94:	e0bffe17 	ldw	r2,-8(fp)
   44e98:	10800317 	ldw	r2,12(r2)
   44e9c:	e0bffe17 	ldw	r2,-8(fp)
   44ea0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   44ea4:	e0bffe17 	ldw	r2,-8(fp)
   44ea8:	10800317 	ldw	r2,12(r2)
   44eac:	10800044 	addi	r2,r2,1
   44eb0:	10800fcc 	andi	r2,r2,63
   44eb4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   44eb8:	e0bffe17 	ldw	r2,-8(fp)
   44ebc:	10800317 	ldw	r2,12(r2)
   44ec0:	e0fffe17 	ldw	r3,-8(fp)
   44ec4:	18c00017 	ldw	r3,0(r3)
   44ec8:	18c00037 	ldwio	r3,0(r3)
   44ecc:	1809883a 	mov	r4,r3
   44ed0:	e0fffe17 	ldw	r3,-8(fp)
   44ed4:	1885883a 	add	r2,r3,r2
   44ed8:	10800704 	addi	r2,r2,28
   44edc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   44ee0:	e0bffe17 	ldw	r2,-8(fp)
   44ee4:	e0fffd17 	ldw	r3,-12(fp)
   44ee8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   44eec:	e0bffe17 	ldw	r2,-8(fp)
   44ef0:	10800317 	ldw	r2,12(r2)
   44ef4:	10800044 	addi	r2,r2,1
   44ef8:	10800fcc 	andi	r2,r2,63
   44efc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   44f00:	e0bffe17 	ldw	r2,-8(fp)
   44f04:	10c00217 	ldw	r3,8(r2)
   44f08:	e0bffd17 	ldw	r2,-12(fp)
   44f0c:	18800c1e 	bne	r3,r2,44f40 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   44f10:	e0bffe17 	ldw	r2,-8(fp)
   44f14:	10c00117 	ldw	r3,4(r2)
   44f18:	00bfdfc4 	movi	r2,-129
   44f1c:	1886703a 	and	r3,r3,r2
   44f20:	e0bffe17 	ldw	r2,-8(fp)
   44f24:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   44f28:	e0bffe17 	ldw	r2,-8(fp)
   44f2c:	10800017 	ldw	r2,0(r2)
   44f30:	10800304 	addi	r2,r2,12
   44f34:	e0fffe17 	ldw	r3,-8(fp)
   44f38:	18c00117 	ldw	r3,4(r3)
   44f3c:	10c00035 	stwio	r3,0(r2)
  }   
}
   44f40:	e037883a 	mov	sp,fp
   44f44:	df000017 	ldw	fp,0(sp)
   44f48:	dec00104 	addi	sp,sp,4
   44f4c:	f800283a 	ret

00044f50 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   44f50:	defffb04 	addi	sp,sp,-20
   44f54:	df000415 	stw	fp,16(sp)
   44f58:	df000404 	addi	fp,sp,16
   44f5c:	e13ffc15 	stw	r4,-16(fp)
   44f60:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   44f64:	e0bffc17 	ldw	r2,-16(fp)
   44f68:	10c00417 	ldw	r3,16(r2)
   44f6c:	e0bffc17 	ldw	r2,-16(fp)
   44f70:	10800517 	ldw	r2,20(r2)
   44f74:	18803226 	beq	r3,r2,45040 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   44f78:	e0bffc17 	ldw	r2,-16(fp)
   44f7c:	10800617 	ldw	r2,24(r2)
   44f80:	1080008c 	andi	r2,r2,2
   44f84:	10000326 	beq	r2,zero,44f94 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   44f88:	e0bffd17 	ldw	r2,-12(fp)
   44f8c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   44f90:	10001d26 	beq	r2,zero,45008 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   44f94:	e0bffc17 	ldw	r2,-16(fp)
   44f98:	10800417 	ldw	r2,16(r2)
   44f9c:	e0bffc17 	ldw	r2,-16(fp)
   44fa0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   44fa4:	e0bffc17 	ldw	r2,-16(fp)
   44fa8:	10800017 	ldw	r2,0(r2)
   44fac:	10800104 	addi	r2,r2,4
   44fb0:	e0fffc17 	ldw	r3,-16(fp)
   44fb4:	18c00417 	ldw	r3,16(r3)
   44fb8:	e13ffc17 	ldw	r4,-16(fp)
   44fbc:	20c7883a 	add	r3,r4,r3
   44fc0:	18c01704 	addi	r3,r3,92
   44fc4:	18c00003 	ldbu	r3,0(r3)
   44fc8:	18c03fcc 	andi	r3,r3,255
   44fcc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   44fd0:	e0bffc17 	ldw	r2,-16(fp)
   44fd4:	10800417 	ldw	r2,16(r2)
   44fd8:	10800044 	addi	r2,r2,1
   44fdc:	e0fffc17 	ldw	r3,-16(fp)
   44fe0:	18800415 	stw	r2,16(r3)
   44fe4:	10c00fcc 	andi	r3,r2,63
   44fe8:	e0bffc17 	ldw	r2,-16(fp)
   44fec:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   44ff0:	e0bffc17 	ldw	r2,-16(fp)
   44ff4:	10800117 	ldw	r2,4(r2)
   44ff8:	10c01014 	ori	r3,r2,64
   44ffc:	e0bffc17 	ldw	r2,-16(fp)
   45000:	10c00115 	stw	r3,4(r2)
   45004:	00000e06 	br	45040 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   45008:	e0bffc17 	ldw	r2,-16(fp)
   4500c:	10800017 	ldw	r2,0(r2)
   45010:	10800204 	addi	r2,r2,8
   45014:	10800037 	ldwio	r2,0(r2)
   45018:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   4501c:	e0bffd17 	ldw	r2,-12(fp)
   45020:	1082000c 	andi	r2,r2,2048
   45024:	1000061e 	bne	r2,zero,45040 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   45028:	e0bffc17 	ldw	r2,-16(fp)
   4502c:	10c00117 	ldw	r3,4(r2)
   45030:	00bfefc4 	movi	r2,-65
   45034:	1886703a 	and	r3,r3,r2
   45038:	e0bffc17 	ldw	r2,-16(fp)
   4503c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   45040:	e0bffc17 	ldw	r2,-16(fp)
   45044:	10c00417 	ldw	r3,16(r2)
   45048:	e0bffc17 	ldw	r2,-16(fp)
   4504c:	10800517 	ldw	r2,20(r2)
   45050:	1880061e 	bne	r3,r2,4506c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   45054:	e0bffc17 	ldw	r2,-16(fp)
   45058:	10c00117 	ldw	r3,4(r2)
   4505c:	00beefc4 	movi	r2,-1089
   45060:	1886703a 	and	r3,r3,r2
   45064:	e0bffc17 	ldw	r2,-16(fp)
   45068:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4506c:	e0bffc17 	ldw	r2,-16(fp)
   45070:	10800017 	ldw	r2,0(r2)
   45074:	10800304 	addi	r2,r2,12
   45078:	e0fffc17 	ldw	r3,-16(fp)
   4507c:	18c00117 	ldw	r3,4(r3)
   45080:	10c00035 	stwio	r3,0(r2)
}
   45084:	e037883a 	mov	sp,fp
   45088:	df000017 	ldw	fp,0(sp)
   4508c:	dec00104 	addi	sp,sp,4
   45090:	f800283a 	ret

00045094 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   45094:	defffd04 	addi	sp,sp,-12
   45098:	df000215 	stw	fp,8(sp)
   4509c:	df000204 	addi	fp,sp,8
   450a0:	e13ffe15 	stw	r4,-8(fp)
   450a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   450a8:	00000506 	br	450c0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   450ac:	e0bfff17 	ldw	r2,-4(fp)
   450b0:	1090000c 	andi	r2,r2,16384
   450b4:	10000226 	beq	r2,zero,450c0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   450b8:	00bffd44 	movi	r2,-11
   450bc:	00000606 	br	450d8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   450c0:	e0bffe17 	ldw	r2,-8(fp)
   450c4:	10c00417 	ldw	r3,16(r2)
   450c8:	e0bffe17 	ldw	r2,-8(fp)
   450cc:	10800517 	ldw	r2,20(r2)
   450d0:	18bff61e 	bne	r3,r2,450ac <__alt_data_end+0xfffcf54c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   450d4:	0005883a 	mov	r2,zero
}
   450d8:	e037883a 	mov	sp,fp
   450dc:	df000017 	ldw	fp,0(sp)
   450e0:	dec00104 	addi	sp,sp,4
   450e4:	f800283a 	ret

000450e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   450e8:	defffe04 	addi	sp,sp,-8
   450ec:	dfc00115 	stw	ra,4(sp)
   450f0:	df000015 	stw	fp,0(sp)
   450f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   450f8:	00800174 	movhi	r2,5
   450fc:	10a10f04 	addi	r2,r2,-31684
   45100:	10800017 	ldw	r2,0(r2)
   45104:	10000526 	beq	r2,zero,4511c <alt_get_errno+0x34>
   45108:	00800174 	movhi	r2,5
   4510c:	10a10f04 	addi	r2,r2,-31684
   45110:	10800017 	ldw	r2,0(r2)
   45114:	103ee83a 	callr	r2
   45118:	00000206 	br	45124 <alt_get_errno+0x3c>
   4511c:	00800174 	movhi	r2,5
   45120:	10a7e304 	addi	r2,r2,-24692
}
   45124:	e037883a 	mov	sp,fp
   45128:	dfc00117 	ldw	ra,4(sp)
   4512c:	df000017 	ldw	fp,0(sp)
   45130:	dec00204 	addi	sp,sp,8
   45134:	f800283a 	ret

00045138 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   45138:	defff204 	addi	sp,sp,-56
   4513c:	dfc00d15 	stw	ra,52(sp)
   45140:	df000c15 	stw	fp,48(sp)
   45144:	df000c04 	addi	fp,sp,48
   45148:	e13ffc15 	stw	r4,-16(fp)
   4514c:	e17ffd15 	stw	r5,-12(fp)
   45150:	e1bffe15 	stw	r6,-8(fp)
   45154:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   45158:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   4515c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   45160:	e0bfff17 	ldw	r2,-4(fp)
   45164:	1090000c 	andi	r2,r2,16384
   45168:	1005003a 	cmpeq	r2,r2,zero
   4516c:	10803fcc 	andi	r2,r2,255
   45170:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   45174:	00001306 	br	451c4 <altera_avalon_uart_read+0x8c>
    {
      count++;
   45178:	e0bff517 	ldw	r2,-44(fp)
   4517c:	10800044 	addi	r2,r2,1
   45180:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   45184:	e0bffd17 	ldw	r2,-12(fp)
   45188:	10c00044 	addi	r3,r2,1
   4518c:	e0fffd15 	stw	r3,-12(fp)
   45190:	e0fffc17 	ldw	r3,-16(fp)
   45194:	18c00217 	ldw	r3,8(r3)
   45198:	e13ffc17 	ldw	r4,-16(fp)
   4519c:	20c7883a 	add	r3,r4,r3
   451a0:	18c00704 	addi	r3,r3,28
   451a4:	18c00003 	ldbu	r3,0(r3)
   451a8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   451ac:	e0bffc17 	ldw	r2,-16(fp)
   451b0:	10800217 	ldw	r2,8(r2)
   451b4:	10800044 	addi	r2,r2,1
   451b8:	10c00fcc 	andi	r3,r2,63
   451bc:	e0bffc17 	ldw	r2,-16(fp)
   451c0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   451c4:	e0fff517 	ldw	r3,-44(fp)
   451c8:	e0bffe17 	ldw	r2,-8(fp)
   451cc:	1880050e 	bge	r3,r2,451e4 <altera_avalon_uart_read+0xac>
   451d0:	e0bffc17 	ldw	r2,-16(fp)
   451d4:	10c00217 	ldw	r3,8(r2)
   451d8:	e0bffc17 	ldw	r2,-16(fp)
   451dc:	10800317 	ldw	r2,12(r2)
   451e0:	18bfe51e 	bne	r3,r2,45178 <__alt_data_end+0xfffcf618>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   451e4:	e0bff517 	ldw	r2,-44(fp)
   451e8:	1000251e 	bne	r2,zero,45280 <altera_avalon_uart_read+0x148>
   451ec:	e0bffc17 	ldw	r2,-16(fp)
   451f0:	10c00217 	ldw	r3,8(r2)
   451f4:	e0bffc17 	ldw	r2,-16(fp)
   451f8:	10800317 	ldw	r2,12(r2)
   451fc:	1880201e 	bne	r3,r2,45280 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   45200:	e0bff617 	ldw	r2,-40(fp)
   45204:	1000071e 	bne	r2,zero,45224 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   45208:	00450e80 	call	450e8 <alt_get_errno>
   4520c:	1007883a 	mov	r3,r2
   45210:	008002c4 	movi	r2,11
   45214:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   45218:	00800044 	movi	r2,1
   4521c:	e0bff405 	stb	r2,-48(fp)
        break;
   45220:	00001b06 	br	45290 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45224:	0005303a 	rdctl	r2,status
   45228:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4522c:	e0fff817 	ldw	r3,-32(fp)
   45230:	00bfff84 	movi	r2,-2
   45234:	1884703a 	and	r2,r3,r2
   45238:	1001703a 	wrctl	status,r2
  
  return context;
   4523c:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   45240:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   45244:	e0bffc17 	ldw	r2,-16(fp)
   45248:	10800117 	ldw	r2,4(r2)
   4524c:	10c02014 	ori	r3,r2,128
   45250:	e0bffc17 	ldw	r2,-16(fp)
   45254:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   45258:	e0bffc17 	ldw	r2,-16(fp)
   4525c:	10800017 	ldw	r2,0(r2)
   45260:	10800304 	addi	r2,r2,12
   45264:	e0fffc17 	ldw	r3,-16(fp)
   45268:	18c00117 	ldw	r3,4(r3)
   4526c:	10c00035 	stwio	r3,0(r2)
   45270:	e0bff717 	ldw	r2,-36(fp)
   45274:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45278:	e0bff917 	ldw	r2,-28(fp)
   4527c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   45280:	e0bff517 	ldw	r2,-44(fp)
   45284:	1000021e 	bne	r2,zero,45290 <altera_avalon_uart_read+0x158>
   45288:	e0bffe17 	ldw	r2,-8(fp)
   4528c:	103fb91e 	bne	r2,zero,45174 <__alt_data_end+0xfffcf614>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45290:	0005303a 	rdctl	r2,status
   45294:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45298:	e0fffa17 	ldw	r3,-24(fp)
   4529c:	00bfff84 	movi	r2,-2
   452a0:	1884703a 	and	r2,r3,r2
   452a4:	1001703a 	wrctl	status,r2
  
  return context;
   452a8:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   452ac:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   452b0:	e0bffc17 	ldw	r2,-16(fp)
   452b4:	10800117 	ldw	r2,4(r2)
   452b8:	10c02014 	ori	r3,r2,128
   452bc:	e0bffc17 	ldw	r2,-16(fp)
   452c0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   452c4:	e0bffc17 	ldw	r2,-16(fp)
   452c8:	10800017 	ldw	r2,0(r2)
   452cc:	10800304 	addi	r2,r2,12
   452d0:	e0fffc17 	ldw	r3,-16(fp)
   452d4:	18c00117 	ldw	r3,4(r3)
   452d8:	10c00035 	stwio	r3,0(r2)
   452dc:	e0bff717 	ldw	r2,-36(fp)
   452e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   452e4:	e0bffb17 	ldw	r2,-20(fp)
   452e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   452ec:	e0bff403 	ldbu	r2,-48(fp)
   452f0:	10000226 	beq	r2,zero,452fc <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   452f4:	00bffd44 	movi	r2,-11
   452f8:	00000106 	br	45300 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   452fc:	e0bff517 	ldw	r2,-44(fp)
  }
}
   45300:	e037883a 	mov	sp,fp
   45304:	dfc00117 	ldw	ra,4(sp)
   45308:	df000017 	ldw	fp,0(sp)
   4530c:	dec00204 	addi	sp,sp,8
   45310:	f800283a 	ret

00045314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45314:	defffe04 	addi	sp,sp,-8
   45318:	dfc00115 	stw	ra,4(sp)
   4531c:	df000015 	stw	fp,0(sp)
   45320:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45324:	00800174 	movhi	r2,5
   45328:	10a10f04 	addi	r2,r2,-31684
   4532c:	10800017 	ldw	r2,0(r2)
   45330:	10000526 	beq	r2,zero,45348 <alt_get_errno+0x34>
   45334:	00800174 	movhi	r2,5
   45338:	10a10f04 	addi	r2,r2,-31684
   4533c:	10800017 	ldw	r2,0(r2)
   45340:	103ee83a 	callr	r2
   45344:	00000206 	br	45350 <alt_get_errno+0x3c>
   45348:	00800174 	movhi	r2,5
   4534c:	10a7e304 	addi	r2,r2,-24692
}
   45350:	e037883a 	mov	sp,fp
   45354:	dfc00117 	ldw	ra,4(sp)
   45358:	df000017 	ldw	fp,0(sp)
   4535c:	dec00204 	addi	sp,sp,8
   45360:	f800283a 	ret

00045364 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   45364:	defff204 	addi	sp,sp,-56
   45368:	dfc00d15 	stw	ra,52(sp)
   4536c:	df000c15 	stw	fp,48(sp)
   45370:	df000c04 	addi	fp,sp,48
   45374:	e13ffc15 	stw	r4,-16(fp)
   45378:	e17ffd15 	stw	r5,-12(fp)
   4537c:	e1bffe15 	stw	r6,-8(fp)
   45380:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   45384:	e0bffe17 	ldw	r2,-8(fp)
   45388:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   4538c:	e0bfff17 	ldw	r2,-4(fp)
   45390:	1090000c 	andi	r2,r2,16384
   45394:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   45398:	00003c06 	br	4548c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4539c:	e0bffc17 	ldw	r2,-16(fp)
   453a0:	10800517 	ldw	r2,20(r2)
   453a4:	10800044 	addi	r2,r2,1
   453a8:	10800fcc 	andi	r2,r2,63
   453ac:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   453b0:	e0bffc17 	ldw	r2,-16(fp)
   453b4:	10c00417 	ldw	r3,16(r2)
   453b8:	e0bff617 	ldw	r2,-40(fp)
   453bc:	1880221e 	bne	r3,r2,45448 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   453c0:	e0bff517 	ldw	r2,-44(fp)
   453c4:	10000526 	beq	r2,zero,453dc <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   453c8:	00453140 	call	45314 <alt_get_errno>
   453cc:	1007883a 	mov	r3,r2
   453d0:	008002c4 	movi	r2,11
   453d4:	18800015 	stw	r2,0(r3)
        break;
   453d8:	00002e06 	br	45494 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   453dc:	0005303a 	rdctl	r2,status
   453e0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   453e4:	e0fff817 	ldw	r3,-32(fp)
   453e8:	00bfff84 	movi	r2,-2
   453ec:	1884703a 	and	r2,r3,r2
   453f0:	1001703a 	wrctl	status,r2
  
  return context;
   453f4:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   453f8:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   453fc:	e0bffc17 	ldw	r2,-16(fp)
   45400:	10800117 	ldw	r2,4(r2)
   45404:	10c11014 	ori	r3,r2,1088
   45408:	e0bffc17 	ldw	r2,-16(fp)
   4540c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   45410:	e0bffc17 	ldw	r2,-16(fp)
   45414:	10800017 	ldw	r2,0(r2)
   45418:	10800304 	addi	r2,r2,12
   4541c:	e0fffc17 	ldw	r3,-16(fp)
   45420:	18c00117 	ldw	r3,4(r3)
   45424:	10c00035 	stwio	r3,0(r2)
   45428:	e0bff717 	ldw	r2,-36(fp)
   4542c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45430:	e0bff917 	ldw	r2,-28(fp)
   45434:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   45438:	e0bffc17 	ldw	r2,-16(fp)
   4543c:	10c00417 	ldw	r3,16(r2)
   45440:	e0bff617 	ldw	r2,-40(fp)
   45444:	18bffc26 	beq	r3,r2,45438 <__alt_data_end+0xfffcf8d8>
      }
    }

    count--;
   45448:	e0bff417 	ldw	r2,-48(fp)
   4544c:	10bfffc4 	addi	r2,r2,-1
   45450:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   45454:	e0bffc17 	ldw	r2,-16(fp)
   45458:	10c00517 	ldw	r3,20(r2)
   4545c:	e0bffd17 	ldw	r2,-12(fp)
   45460:	11000044 	addi	r4,r2,1
   45464:	e13ffd15 	stw	r4,-12(fp)
   45468:	10800003 	ldbu	r2,0(r2)
   4546c:	1009883a 	mov	r4,r2
   45470:	e0bffc17 	ldw	r2,-16(fp)
   45474:	10c5883a 	add	r2,r2,r3
   45478:	10801704 	addi	r2,r2,92
   4547c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   45480:	e0bffc17 	ldw	r2,-16(fp)
   45484:	e0fff617 	ldw	r3,-40(fp)
   45488:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   4548c:	e0bff417 	ldw	r2,-48(fp)
   45490:	103fc21e 	bne	r2,zero,4539c <__alt_data_end+0xfffcf83c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45494:	0005303a 	rdctl	r2,status
   45498:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4549c:	e0fffa17 	ldw	r3,-24(fp)
   454a0:	00bfff84 	movi	r2,-2
   454a4:	1884703a 	and	r2,r3,r2
   454a8:	1001703a 	wrctl	status,r2
  
  return context;
   454ac:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   454b0:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   454b4:	e0bffc17 	ldw	r2,-16(fp)
   454b8:	10800117 	ldw	r2,4(r2)
   454bc:	10c11014 	ori	r3,r2,1088
   454c0:	e0bffc17 	ldw	r2,-16(fp)
   454c4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   454c8:	e0bffc17 	ldw	r2,-16(fp)
   454cc:	10800017 	ldw	r2,0(r2)
   454d0:	10800304 	addi	r2,r2,12
   454d4:	e0fffc17 	ldw	r3,-16(fp)
   454d8:	18c00117 	ldw	r3,4(r3)
   454dc:	10c00035 	stwio	r3,0(r2)
   454e0:	e0bff717 	ldw	r2,-36(fp)
   454e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   454e8:	e0bffb17 	ldw	r2,-20(fp)
   454ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   454f0:	e0fffe17 	ldw	r3,-8(fp)
   454f4:	e0bff417 	ldw	r2,-48(fp)
   454f8:	1885c83a 	sub	r2,r3,r2
}
   454fc:	e037883a 	mov	sp,fp
   45500:	dfc00117 	ldw	ra,4(sp)
   45504:	df000017 	ldw	fp,0(sp)
   45508:	dec00204 	addi	sp,sp,8
   4550c:	f800283a 	ret

00045510 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   45510:	defff504 	addi	sp,sp,-44
   45514:	df000a15 	stw	fp,40(sp)
   45518:	df000a04 	addi	fp,sp,40
   4551c:	e13ffc15 	stw	r4,-16(fp)
   45520:	e17ffd15 	stw	r5,-12(fp)
   45524:	e1bffe15 	stw	r6,-8(fp)
   45528:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4552c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   45530:	00800174 	movhi	r2,5
   45534:	10a7e804 	addi	r2,r2,-24672
   45538:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4553c:	10003f26 	beq	r2,zero,4563c <alt_alarm_start+0x12c>
  {
    if (alarm)
   45540:	e0bffc17 	ldw	r2,-16(fp)
   45544:	10003b26 	beq	r2,zero,45634 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   45548:	e0bffc17 	ldw	r2,-16(fp)
   4554c:	e0fffe17 	ldw	r3,-8(fp)
   45550:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   45554:	e0bffc17 	ldw	r2,-16(fp)
   45558:	e0ffff17 	ldw	r3,-4(fp)
   4555c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45560:	0005303a 	rdctl	r2,status
   45564:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45568:	e0fff817 	ldw	r3,-32(fp)
   4556c:	00bfff84 	movi	r2,-2
   45570:	1884703a 	and	r2,r3,r2
   45574:	1001703a 	wrctl	status,r2
  
  return context;
   45578:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4557c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   45580:	00800174 	movhi	r2,5
   45584:	10a7e904 	addi	r2,r2,-24668
   45588:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4558c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   45590:	e0fffd17 	ldw	r3,-12(fp)
   45594:	e0bff617 	ldw	r2,-40(fp)
   45598:	1885883a 	add	r2,r3,r2
   4559c:	10c00044 	addi	r3,r2,1
   455a0:	e0bffc17 	ldw	r2,-16(fp)
   455a4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   455a8:	e0bffc17 	ldw	r2,-16(fp)
   455ac:	10c00217 	ldw	r3,8(r2)
   455b0:	e0bff617 	ldw	r2,-40(fp)
   455b4:	1880042e 	bgeu	r3,r2,455c8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   455b8:	e0bffc17 	ldw	r2,-16(fp)
   455bc:	00c00044 	movi	r3,1
   455c0:	10c00405 	stb	r3,16(r2)
   455c4:	00000206 	br	455d0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   455c8:	e0bffc17 	ldw	r2,-16(fp)
   455cc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   455d0:	e0fffc17 	ldw	r3,-16(fp)
   455d4:	00800174 	movhi	r2,5
   455d8:	10a11204 	addi	r2,r2,-31672
   455dc:	e0bff915 	stw	r2,-28(fp)
   455e0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   455e4:	e0bffa17 	ldw	r2,-24(fp)
   455e8:	e0fff917 	ldw	r3,-28(fp)
   455ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   455f0:	e0bff917 	ldw	r2,-28(fp)
   455f4:	10c00017 	ldw	r3,0(r2)
   455f8:	e0bffa17 	ldw	r2,-24(fp)
   455fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45600:	e0bff917 	ldw	r2,-28(fp)
   45604:	10800017 	ldw	r2,0(r2)
   45608:	e0fffa17 	ldw	r3,-24(fp)
   4560c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45610:	e0bff917 	ldw	r2,-28(fp)
   45614:	e0fffa17 	ldw	r3,-24(fp)
   45618:	10c00015 	stw	r3,0(r2)
   4561c:	e0bff717 	ldw	r2,-36(fp)
   45620:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45624:	e0bffb17 	ldw	r2,-20(fp)
   45628:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4562c:	0005883a 	mov	r2,zero
   45630:	00000306 	br	45640 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   45634:	00bffa84 	movi	r2,-22
   45638:	00000106 	br	45640 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4563c:	00bfde84 	movi	r2,-134
  }
}
   45640:	e037883a 	mov	sp,fp
   45644:	df000017 	ldw	fp,0(sp)
   45648:	dec00104 	addi	sp,sp,4
   4564c:	f800283a 	ret

00045650 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   45650:	defffa04 	addi	sp,sp,-24
   45654:	dfc00515 	stw	ra,20(sp)
   45658:	df000415 	stw	fp,16(sp)
   4565c:	df000404 	addi	fp,sp,16
   45660:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   45664:	00800244 	movi	r2,9
   45668:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   4566c:	e13ffd17 	ldw	r4,-12(fp)
   45670:	014003f4 	movhi	r5,15
   45674:	29509004 	addi	r5,r5,16960
   45678:	00408fc0 	call	408fc <__mulsi3>
   4567c:	01023c74 	movhi	r4,2289
   45680:	21346004 	addi	r4,r4,-11904
   45684:	100b883a 	mov	r5,r2
   45688:	00408ec0 	call	408ec <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   4568c:	01200034 	movhi	r4,32768
   45690:	213fffc4 	addi	r4,r4,-1
   45694:	100b883a 	mov	r5,r2
   45698:	00408ec0 	call	408ec <__udivsi3>
   4569c:	e13fff17 	ldw	r4,-4(fp)
   456a0:	100b883a 	mov	r5,r2
   456a4:	00408ec0 	call	408ec <__udivsi3>
   456a8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   456ac:	e0bffe17 	ldw	r2,-8(fp)
   456b0:	10002a26 	beq	r2,zero,4575c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   456b4:	e03ffc15 	stw	zero,-16(fp)
   456b8:	00001706 	br	45718 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   456bc:	00a00034 	movhi	r2,32768
   456c0:	10bfffc4 	addi	r2,r2,-1
   456c4:	10bfffc4 	addi	r2,r2,-1
   456c8:	103ffe1e 	bne	r2,zero,456c4 <__alt_data_end+0xfffcfb64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   456cc:	e13ffd17 	ldw	r4,-12(fp)
   456d0:	014003f4 	movhi	r5,15
   456d4:	29509004 	addi	r5,r5,16960
   456d8:	00408fc0 	call	408fc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   456dc:	01023c74 	movhi	r4,2289
   456e0:	21346004 	addi	r4,r4,-11904
   456e4:	100b883a 	mov	r5,r2
   456e8:	00408ec0 	call	408ec <__udivsi3>
   456ec:	01200034 	movhi	r4,32768
   456f0:	213fffc4 	addi	r4,r4,-1
   456f4:	100b883a 	mov	r5,r2
   456f8:	00408ec0 	call	408ec <__udivsi3>
   456fc:	1007883a 	mov	r3,r2
   45700:	e0bfff17 	ldw	r2,-4(fp)
   45704:	10c5c83a 	sub	r2,r2,r3
   45708:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   4570c:	e0bffc17 	ldw	r2,-16(fp)
   45710:	10800044 	addi	r2,r2,1
   45714:	e0bffc15 	stw	r2,-16(fp)
   45718:	e0fffc17 	ldw	r3,-16(fp)
   4571c:	e0bffe17 	ldw	r2,-8(fp)
   45720:	18bfe616 	blt	r3,r2,456bc <__alt_data_end+0xfffcfb5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   45724:	e13ffd17 	ldw	r4,-12(fp)
   45728:	014003f4 	movhi	r5,15
   4572c:	29509004 	addi	r5,r5,16960
   45730:	00408fc0 	call	408fc <__mulsi3>
   45734:	01023c74 	movhi	r4,2289
   45738:	21346004 	addi	r4,r4,-11904
   4573c:	100b883a 	mov	r5,r2
   45740:	00408ec0 	call	408ec <__udivsi3>
   45744:	1009883a 	mov	r4,r2
   45748:	e17fff17 	ldw	r5,-4(fp)
   4574c:	00408fc0 	call	408fc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   45750:	10bfffc4 	addi	r2,r2,-1
   45754:	103ffe1e 	bne	r2,zero,45750 <__alt_data_end+0xfffcfbf0>
   45758:	00000d06 	br	45790 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4575c:	e13ffd17 	ldw	r4,-12(fp)
   45760:	014003f4 	movhi	r5,15
   45764:	29509004 	addi	r5,r5,16960
   45768:	00408fc0 	call	408fc <__mulsi3>
   4576c:	01023c74 	movhi	r4,2289
   45770:	21346004 	addi	r4,r4,-11904
   45774:	100b883a 	mov	r5,r2
   45778:	00408ec0 	call	408ec <__udivsi3>
   4577c:	1009883a 	mov	r4,r2
   45780:	e17fff17 	ldw	r5,-4(fp)
   45784:	00408fc0 	call	408fc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   45788:	10bfffc4 	addi	r2,r2,-1
   4578c:	00bffe16 	blt	zero,r2,45788 <__alt_data_end+0xfffcfc28>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   45790:	0005883a 	mov	r2,zero
}
   45794:	e037883a 	mov	sp,fp
   45798:	dfc00117 	ldw	ra,4(sp)
   4579c:	df000017 	ldw	fp,0(sp)
   457a0:	dec00204 	addi	sp,sp,8
   457a4:	f800283a 	ret

000457a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   457a8:	deffff04 	addi	sp,sp,-4
   457ac:	df000015 	stw	fp,0(sp)
   457b0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   457b4:	e037883a 	mov	sp,fp
   457b8:	df000017 	ldw	fp,0(sp)
   457bc:	dec00104 	addi	sp,sp,4
   457c0:	f800283a 	ret

000457c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   457c4:	defffe04 	addi	sp,sp,-8
   457c8:	dfc00115 	stw	ra,4(sp)
   457cc:	df000015 	stw	fp,0(sp)
   457d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   457d4:	00800174 	movhi	r2,5
   457d8:	10a10f04 	addi	r2,r2,-31684
   457dc:	10800017 	ldw	r2,0(r2)
   457e0:	10000526 	beq	r2,zero,457f8 <alt_get_errno+0x34>
   457e4:	00800174 	movhi	r2,5
   457e8:	10a10f04 	addi	r2,r2,-31684
   457ec:	10800017 	ldw	r2,0(r2)
   457f0:	103ee83a 	callr	r2
   457f4:	00000206 	br	45800 <alt_get_errno+0x3c>
   457f8:	00800174 	movhi	r2,5
   457fc:	10a7e304 	addi	r2,r2,-24692
}
   45800:	e037883a 	mov	sp,fp
   45804:	dfc00117 	ldw	ra,4(sp)
   45808:	df000017 	ldw	fp,0(sp)
   4580c:	dec00204 	addi	sp,sp,8
   45810:	f800283a 	ret

00045814 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   45814:	defffa04 	addi	sp,sp,-24
   45818:	dfc00515 	stw	ra,20(sp)
   4581c:	df000415 	stw	fp,16(sp)
   45820:	df000404 	addi	fp,sp,16
   45824:	e13ffe15 	stw	r4,-8(fp)
   45828:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4582c:	e0bffe17 	ldw	r2,-8(fp)
   45830:	10000326 	beq	r2,zero,45840 <alt_dev_llist_insert+0x2c>
   45834:	e0bffe17 	ldw	r2,-8(fp)
   45838:	10800217 	ldw	r2,8(r2)
   4583c:	1000061e 	bne	r2,zero,45858 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   45840:	00457c40 	call	457c4 <alt_get_errno>
   45844:	1007883a 	mov	r3,r2
   45848:	00800584 	movi	r2,22
   4584c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   45850:	00bffa84 	movi	r2,-22
   45854:	00001306 	br	458a4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   45858:	e0bffe17 	ldw	r2,-8(fp)
   4585c:	e0ffff17 	ldw	r3,-4(fp)
   45860:	e0fffc15 	stw	r3,-16(fp)
   45864:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   45868:	e0bffd17 	ldw	r2,-12(fp)
   4586c:	e0fffc17 	ldw	r3,-16(fp)
   45870:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45874:	e0bffc17 	ldw	r2,-16(fp)
   45878:	10c00017 	ldw	r3,0(r2)
   4587c:	e0bffd17 	ldw	r2,-12(fp)
   45880:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45884:	e0bffc17 	ldw	r2,-16(fp)
   45888:	10800017 	ldw	r2,0(r2)
   4588c:	e0fffd17 	ldw	r3,-12(fp)
   45890:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45894:	e0bffc17 	ldw	r2,-16(fp)
   45898:	e0fffd17 	ldw	r3,-12(fp)
   4589c:	10c00015 	stw	r3,0(r2)

  return 0;  
   458a0:	0005883a 	mov	r2,zero
}
   458a4:	e037883a 	mov	sp,fp
   458a8:	dfc00117 	ldw	ra,4(sp)
   458ac:	df000017 	ldw	fp,0(sp)
   458b0:	dec00204 	addi	sp,sp,8
   458b4:	f800283a 	ret

000458b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   458b8:	defffd04 	addi	sp,sp,-12
   458bc:	dfc00215 	stw	ra,8(sp)
   458c0:	df000115 	stw	fp,4(sp)
   458c4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   458c8:	00800134 	movhi	r2,4
   458cc:	109a3204 	addi	r2,r2,26824
   458d0:	e0bfff15 	stw	r2,-4(fp)
   458d4:	00000606 	br	458f0 <_do_ctors+0x38>
        (*ctor) (); 
   458d8:	e0bfff17 	ldw	r2,-4(fp)
   458dc:	10800017 	ldw	r2,0(r2)
   458e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   458e4:	e0bfff17 	ldw	r2,-4(fp)
   458e8:	10bfff04 	addi	r2,r2,-4
   458ec:	e0bfff15 	stw	r2,-4(fp)
   458f0:	e0ffff17 	ldw	r3,-4(fp)
   458f4:	00800134 	movhi	r2,4
   458f8:	109a3304 	addi	r2,r2,26828
   458fc:	18bff62e 	bgeu	r3,r2,458d8 <__alt_data_end+0xfffcfd78>
        (*ctor) (); 
}
   45900:	e037883a 	mov	sp,fp
   45904:	dfc00117 	ldw	ra,4(sp)
   45908:	df000017 	ldw	fp,0(sp)
   4590c:	dec00204 	addi	sp,sp,8
   45910:	f800283a 	ret

00045914 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   45914:	defffd04 	addi	sp,sp,-12
   45918:	dfc00215 	stw	ra,8(sp)
   4591c:	df000115 	stw	fp,4(sp)
   45920:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45924:	00800134 	movhi	r2,4
   45928:	109a3204 	addi	r2,r2,26824
   4592c:	e0bfff15 	stw	r2,-4(fp)
   45930:	00000606 	br	4594c <_do_dtors+0x38>
        (*dtor) (); 
   45934:	e0bfff17 	ldw	r2,-4(fp)
   45938:	10800017 	ldw	r2,0(r2)
   4593c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45940:	e0bfff17 	ldw	r2,-4(fp)
   45944:	10bfff04 	addi	r2,r2,-4
   45948:	e0bfff15 	stw	r2,-4(fp)
   4594c:	e0ffff17 	ldw	r3,-4(fp)
   45950:	00800134 	movhi	r2,4
   45954:	109a3304 	addi	r2,r2,26828
   45958:	18bff62e 	bgeu	r3,r2,45934 <__alt_data_end+0xfffcfdd4>
        (*dtor) (); 
}
   4595c:	e037883a 	mov	sp,fp
   45960:	dfc00117 	ldw	ra,4(sp)
   45964:	df000017 	ldw	fp,0(sp)
   45968:	dec00204 	addi	sp,sp,8
   4596c:	f800283a 	ret

00045970 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   45970:	deffff04 	addi	sp,sp,-4
   45974:	df000015 	stw	fp,0(sp)
   45978:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   4597c:	e037883a 	mov	sp,fp
   45980:	df000017 	ldw	fp,0(sp)
   45984:	dec00104 	addi	sp,sp,4
   45988:	f800283a 	ret

0004598c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4598c:	defff904 	addi	sp,sp,-28
   45990:	dfc00615 	stw	ra,24(sp)
   45994:	df000515 	stw	fp,20(sp)
   45998:	df000504 	addi	fp,sp,20
   4599c:	e13ffc15 	stw	r4,-16(fp)
   459a0:	e17ffd15 	stw	r5,-12(fp)
   459a4:	e1bffe15 	stw	r6,-8(fp)
   459a8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   459ac:	e0800217 	ldw	r2,8(fp)
   459b0:	d8800015 	stw	r2,0(sp)
   459b4:	e13ffc17 	ldw	r4,-16(fp)
   459b8:	e17ffd17 	ldw	r5,-12(fp)
   459bc:	e1bffe17 	ldw	r6,-8(fp)
   459c0:	e1ffff17 	ldw	r7,-4(fp)
   459c4:	0045b6c0 	call	45b6c <alt_iic_isr_register>
}  
   459c8:	e037883a 	mov	sp,fp
   459cc:	dfc00117 	ldw	ra,4(sp)
   459d0:	df000017 	ldw	fp,0(sp)
   459d4:	dec00204 	addi	sp,sp,8
   459d8:	f800283a 	ret

000459dc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   459dc:	defff904 	addi	sp,sp,-28
   459e0:	df000615 	stw	fp,24(sp)
   459e4:	df000604 	addi	fp,sp,24
   459e8:	e13ffe15 	stw	r4,-8(fp)
   459ec:	e17fff15 	stw	r5,-4(fp)
   459f0:	e0bfff17 	ldw	r2,-4(fp)
   459f4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   459f8:	0005303a 	rdctl	r2,status
   459fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45a00:	e0fffb17 	ldw	r3,-20(fp)
   45a04:	00bfff84 	movi	r2,-2
   45a08:	1884703a 	and	r2,r3,r2
   45a0c:	1001703a 	wrctl	status,r2
  
  return context;
   45a10:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45a14:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   45a18:	e0bffa17 	ldw	r2,-24(fp)
   45a1c:	00c00044 	movi	r3,1
   45a20:	1884983a 	sll	r2,r3,r2
   45a24:	1007883a 	mov	r3,r2
   45a28:	00800174 	movhi	r2,5
   45a2c:	10a7e704 	addi	r2,r2,-24676
   45a30:	10800017 	ldw	r2,0(r2)
   45a34:	1886b03a 	or	r3,r3,r2
   45a38:	00800174 	movhi	r2,5
   45a3c:	10a7e704 	addi	r2,r2,-24676
   45a40:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45a44:	00800174 	movhi	r2,5
   45a48:	10a7e704 	addi	r2,r2,-24676
   45a4c:	10800017 	ldw	r2,0(r2)
   45a50:	100170fa 	wrctl	ienable,r2
   45a54:	e0bffc17 	ldw	r2,-16(fp)
   45a58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45a5c:	e0bffd17 	ldw	r2,-12(fp)
   45a60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45a64:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   45a68:	0001883a 	nop
}
   45a6c:	e037883a 	mov	sp,fp
   45a70:	df000017 	ldw	fp,0(sp)
   45a74:	dec00104 	addi	sp,sp,4
   45a78:	f800283a 	ret

00045a7c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   45a7c:	defff904 	addi	sp,sp,-28
   45a80:	df000615 	stw	fp,24(sp)
   45a84:	df000604 	addi	fp,sp,24
   45a88:	e13ffe15 	stw	r4,-8(fp)
   45a8c:	e17fff15 	stw	r5,-4(fp)
   45a90:	e0bfff17 	ldw	r2,-4(fp)
   45a94:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45a98:	0005303a 	rdctl	r2,status
   45a9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45aa0:	e0fffb17 	ldw	r3,-20(fp)
   45aa4:	00bfff84 	movi	r2,-2
   45aa8:	1884703a 	and	r2,r3,r2
   45aac:	1001703a 	wrctl	status,r2
  
  return context;
   45ab0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45ab4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   45ab8:	e0bffa17 	ldw	r2,-24(fp)
   45abc:	00c00044 	movi	r3,1
   45ac0:	1884983a 	sll	r2,r3,r2
   45ac4:	0084303a 	nor	r2,zero,r2
   45ac8:	1007883a 	mov	r3,r2
   45acc:	00800174 	movhi	r2,5
   45ad0:	10a7e704 	addi	r2,r2,-24676
   45ad4:	10800017 	ldw	r2,0(r2)
   45ad8:	1886703a 	and	r3,r3,r2
   45adc:	00800174 	movhi	r2,5
   45ae0:	10a7e704 	addi	r2,r2,-24676
   45ae4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45ae8:	00800174 	movhi	r2,5
   45aec:	10a7e704 	addi	r2,r2,-24676
   45af0:	10800017 	ldw	r2,0(r2)
   45af4:	100170fa 	wrctl	ienable,r2
   45af8:	e0bffc17 	ldw	r2,-16(fp)
   45afc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45b00:	e0bffd17 	ldw	r2,-12(fp)
   45b04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45b08:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   45b0c:	0001883a 	nop
}
   45b10:	e037883a 	mov	sp,fp
   45b14:	df000017 	ldw	fp,0(sp)
   45b18:	dec00104 	addi	sp,sp,4
   45b1c:	f800283a 	ret

00045b20 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   45b20:	defffc04 	addi	sp,sp,-16
   45b24:	df000315 	stw	fp,12(sp)
   45b28:	df000304 	addi	fp,sp,12
   45b2c:	e13ffe15 	stw	r4,-8(fp)
   45b30:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   45b34:	000530fa 	rdctl	r2,ienable
   45b38:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   45b3c:	e0bfff17 	ldw	r2,-4(fp)
   45b40:	00c00044 	movi	r3,1
   45b44:	1884983a 	sll	r2,r3,r2
   45b48:	1007883a 	mov	r3,r2
   45b4c:	e0bffd17 	ldw	r2,-12(fp)
   45b50:	1884703a 	and	r2,r3,r2
   45b54:	1004c03a 	cmpne	r2,r2,zero
   45b58:	10803fcc 	andi	r2,r2,255
}
   45b5c:	e037883a 	mov	sp,fp
   45b60:	df000017 	ldw	fp,0(sp)
   45b64:	dec00104 	addi	sp,sp,4
   45b68:	f800283a 	ret

00045b6c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   45b6c:	defff504 	addi	sp,sp,-44
   45b70:	dfc00a15 	stw	ra,40(sp)
   45b74:	df000915 	stw	fp,36(sp)
   45b78:	df000904 	addi	fp,sp,36
   45b7c:	e13ffc15 	stw	r4,-16(fp)
   45b80:	e17ffd15 	stw	r5,-12(fp)
   45b84:	e1bffe15 	stw	r6,-8(fp)
   45b88:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   45b8c:	00bffa84 	movi	r2,-22
   45b90:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   45b94:	e0bffd17 	ldw	r2,-12(fp)
   45b98:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   45b9c:	e0bff817 	ldw	r2,-32(fp)
   45ba0:	10800808 	cmpgei	r2,r2,32
   45ba4:	1000271e 	bne	r2,zero,45c44 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45ba8:	0005303a 	rdctl	r2,status
   45bac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45bb0:	e0fffa17 	ldw	r3,-24(fp)
   45bb4:	00bfff84 	movi	r2,-2
   45bb8:	1884703a 	and	r2,r3,r2
   45bbc:	1001703a 	wrctl	status,r2
  
  return context;
   45bc0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   45bc4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   45bc8:	00800174 	movhi	r2,5
   45bcc:	10a7f504 	addi	r2,r2,-24620
   45bd0:	e0fff817 	ldw	r3,-32(fp)
   45bd4:	180690fa 	slli	r3,r3,3
   45bd8:	10c5883a 	add	r2,r2,r3
   45bdc:	e0fffe17 	ldw	r3,-8(fp)
   45be0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   45be4:	00800174 	movhi	r2,5
   45be8:	10a7f504 	addi	r2,r2,-24620
   45bec:	e0fff817 	ldw	r3,-32(fp)
   45bf0:	180690fa 	slli	r3,r3,3
   45bf4:	10c5883a 	add	r2,r2,r3
   45bf8:	10800104 	addi	r2,r2,4
   45bfc:	e0ffff17 	ldw	r3,-4(fp)
   45c00:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   45c04:	e0bffe17 	ldw	r2,-8(fp)
   45c08:	10000526 	beq	r2,zero,45c20 <alt_iic_isr_register+0xb4>
   45c0c:	e0bff817 	ldw	r2,-32(fp)
   45c10:	e13ffc17 	ldw	r4,-16(fp)
   45c14:	100b883a 	mov	r5,r2
   45c18:	00459dc0 	call	459dc <alt_ic_irq_enable>
   45c1c:	00000406 	br	45c30 <alt_iic_isr_register+0xc4>
   45c20:	e0bff817 	ldw	r2,-32(fp)
   45c24:	e13ffc17 	ldw	r4,-16(fp)
   45c28:	100b883a 	mov	r5,r2
   45c2c:	0045a7c0 	call	45a7c <alt_ic_irq_disable>
   45c30:	e0bff715 	stw	r2,-36(fp)
   45c34:	e0bff917 	ldw	r2,-28(fp)
   45c38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45c3c:	e0bffb17 	ldw	r2,-20(fp)
   45c40:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   45c44:	e0bff717 	ldw	r2,-36(fp)
}
   45c48:	e037883a 	mov	sp,fp
   45c4c:	dfc00117 	ldw	ra,4(sp)
   45c50:	df000017 	ldw	fp,0(sp)
   45c54:	dec00204 	addi	sp,sp,8
   45c58:	f800283a 	ret

00045c5c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   45c5c:	defff804 	addi	sp,sp,-32
   45c60:	dfc00715 	stw	ra,28(sp)
   45c64:	df000615 	stw	fp,24(sp)
   45c68:	dc000515 	stw	r16,20(sp)
   45c6c:	df000604 	addi	fp,sp,24
   45c70:	e13ffb15 	stw	r4,-20(fp)
   45c74:	e17ffc15 	stw	r5,-16(fp)
   45c78:	e1bffd15 	stw	r6,-12(fp)
   45c7c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   45c80:	e13ffc17 	ldw	r4,-16(fp)
   45c84:	e17ffd17 	ldw	r5,-12(fp)
   45c88:	e1bffe17 	ldw	r6,-8(fp)
   45c8c:	0045ef80 	call	45ef8 <open>
   45c90:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   45c94:	e0bffa17 	ldw	r2,-24(fp)
   45c98:	10002216 	blt	r2,zero,45d24 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   45c9c:	04000134 	movhi	r16,4
   45ca0:	841c5d04 	addi	r16,r16,29044
   45ca4:	e0bffa17 	ldw	r2,-24(fp)
   45ca8:	1009883a 	mov	r4,r2
   45cac:	01400304 	movi	r5,12
   45cb0:	00408fc0 	call	408fc <__mulsi3>
   45cb4:	8085883a 	add	r2,r16,r2
   45cb8:	10c00017 	ldw	r3,0(r2)
   45cbc:	e0bffb17 	ldw	r2,-20(fp)
   45cc0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   45cc4:	04000134 	movhi	r16,4
   45cc8:	841c5d04 	addi	r16,r16,29044
   45ccc:	e0bffa17 	ldw	r2,-24(fp)
   45cd0:	1009883a 	mov	r4,r2
   45cd4:	01400304 	movi	r5,12
   45cd8:	00408fc0 	call	408fc <__mulsi3>
   45cdc:	8085883a 	add	r2,r16,r2
   45ce0:	10800104 	addi	r2,r2,4
   45ce4:	10c00017 	ldw	r3,0(r2)
   45ce8:	e0bffb17 	ldw	r2,-20(fp)
   45cec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   45cf0:	04000134 	movhi	r16,4
   45cf4:	841c5d04 	addi	r16,r16,29044
   45cf8:	e0bffa17 	ldw	r2,-24(fp)
   45cfc:	1009883a 	mov	r4,r2
   45d00:	01400304 	movi	r5,12
   45d04:	00408fc0 	call	408fc <__mulsi3>
   45d08:	8085883a 	add	r2,r16,r2
   45d0c:	10800204 	addi	r2,r2,8
   45d10:	10c00017 	ldw	r3,0(r2)
   45d14:	e0bffb17 	ldw	r2,-20(fp)
   45d18:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   45d1c:	e13ffa17 	ldw	r4,-24(fp)
   45d20:	0043d400 	call	43d40 <alt_release_fd>
  }
} 
   45d24:	e6ffff04 	addi	sp,fp,-4
   45d28:	dfc00217 	ldw	ra,8(sp)
   45d2c:	df000117 	ldw	fp,4(sp)
   45d30:	dc000017 	ldw	r16,0(sp)
   45d34:	dec00304 	addi	sp,sp,12
   45d38:	f800283a 	ret

00045d3c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   45d3c:	defffb04 	addi	sp,sp,-20
   45d40:	dfc00415 	stw	ra,16(sp)
   45d44:	df000315 	stw	fp,12(sp)
   45d48:	df000304 	addi	fp,sp,12
   45d4c:	e13ffd15 	stw	r4,-12(fp)
   45d50:	e17ffe15 	stw	r5,-8(fp)
   45d54:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   45d58:	01000134 	movhi	r4,4
   45d5c:	211c6004 	addi	r4,r4,29056
   45d60:	e17ffd17 	ldw	r5,-12(fp)
   45d64:	01800044 	movi	r6,1
   45d68:	01c07fc4 	movi	r7,511
   45d6c:	0045c5c0 	call	45c5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   45d70:	01000134 	movhi	r4,4
   45d74:	211c5d04 	addi	r4,r4,29044
   45d78:	e17ffe17 	ldw	r5,-8(fp)
   45d7c:	000d883a 	mov	r6,zero
   45d80:	01c07fc4 	movi	r7,511
   45d84:	0045c5c0 	call	45c5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   45d88:	01000134 	movhi	r4,4
   45d8c:	211c6304 	addi	r4,r4,29068
   45d90:	e17fff17 	ldw	r5,-4(fp)
   45d94:	01800044 	movi	r6,1
   45d98:	01c07fc4 	movi	r7,511
   45d9c:	0045c5c0 	call	45c5c <alt_open_fd>
}  
   45da0:	e037883a 	mov	sp,fp
   45da4:	dfc00117 	ldw	ra,4(sp)
   45da8:	df000017 	ldw	fp,0(sp)
   45dac:	dec00204 	addi	sp,sp,8
   45db0:	f800283a 	ret

00045db4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45db4:	defffe04 	addi	sp,sp,-8
   45db8:	dfc00115 	stw	ra,4(sp)
   45dbc:	df000015 	stw	fp,0(sp)
   45dc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45dc4:	00800174 	movhi	r2,5
   45dc8:	10a10f04 	addi	r2,r2,-31684
   45dcc:	10800017 	ldw	r2,0(r2)
   45dd0:	10000526 	beq	r2,zero,45de8 <alt_get_errno+0x34>
   45dd4:	00800174 	movhi	r2,5
   45dd8:	10a10f04 	addi	r2,r2,-31684
   45ddc:	10800017 	ldw	r2,0(r2)
   45de0:	103ee83a 	callr	r2
   45de4:	00000206 	br	45df0 <alt_get_errno+0x3c>
   45de8:	00800174 	movhi	r2,5
   45dec:	10a7e304 	addi	r2,r2,-24692
}
   45df0:	e037883a 	mov	sp,fp
   45df4:	dfc00117 	ldw	ra,4(sp)
   45df8:	df000017 	ldw	fp,0(sp)
   45dfc:	dec00204 	addi	sp,sp,8
   45e00:	f800283a 	ret

00045e04 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   45e04:	defffb04 	addi	sp,sp,-20
   45e08:	dfc00415 	stw	ra,16(sp)
   45e0c:	df000315 	stw	fp,12(sp)
   45e10:	dc000215 	stw	r16,8(sp)
   45e14:	df000304 	addi	fp,sp,12
   45e18:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   45e1c:	e0bffe17 	ldw	r2,-8(fp)
   45e20:	10800217 	ldw	r2,8(r2)
   45e24:	10d00034 	orhi	r3,r2,16384
   45e28:	e0bffe17 	ldw	r2,-8(fp)
   45e2c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45e30:	e03ffd15 	stw	zero,-12(fp)
   45e34:	00002306 	br	45ec4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45e38:	04000134 	movhi	r16,4
   45e3c:	841c5d04 	addi	r16,r16,29044
   45e40:	e0bffd17 	ldw	r2,-12(fp)
   45e44:	1009883a 	mov	r4,r2
   45e48:	01400304 	movi	r5,12
   45e4c:	00408fc0 	call	408fc <__mulsi3>
   45e50:	8085883a 	add	r2,r16,r2
   45e54:	10c00017 	ldw	r3,0(r2)
   45e58:	e0bffe17 	ldw	r2,-8(fp)
   45e5c:	10800017 	ldw	r2,0(r2)
   45e60:	1880151e 	bne	r3,r2,45eb8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45e64:	04000134 	movhi	r16,4
   45e68:	841c5d04 	addi	r16,r16,29044
   45e6c:	e0bffd17 	ldw	r2,-12(fp)
   45e70:	1009883a 	mov	r4,r2
   45e74:	01400304 	movi	r5,12
   45e78:	00408fc0 	call	408fc <__mulsi3>
   45e7c:	8085883a 	add	r2,r16,r2
   45e80:	10800204 	addi	r2,r2,8
   45e84:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45e88:	10000b0e 	bge	r2,zero,45eb8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   45e8c:	e13ffd17 	ldw	r4,-12(fp)
   45e90:	01400304 	movi	r5,12
   45e94:	00408fc0 	call	408fc <__mulsi3>
   45e98:	1007883a 	mov	r3,r2
   45e9c:	00800134 	movhi	r2,4
   45ea0:	109c5d04 	addi	r2,r2,29044
   45ea4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45ea8:	e0bffe17 	ldw	r2,-8(fp)
   45eac:	18800226 	beq	r3,r2,45eb8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   45eb0:	00bffcc4 	movi	r2,-13
   45eb4:	00000a06 	br	45ee0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45eb8:	e0bffd17 	ldw	r2,-12(fp)
   45ebc:	10800044 	addi	r2,r2,1
   45ec0:	e0bffd15 	stw	r2,-12(fp)
   45ec4:	00800174 	movhi	r2,5
   45ec8:	10a10e04 	addi	r2,r2,-31688
   45ecc:	10800017 	ldw	r2,0(r2)
   45ed0:	1007883a 	mov	r3,r2
   45ed4:	e0bffd17 	ldw	r2,-12(fp)
   45ed8:	18bfd72e 	bgeu	r3,r2,45e38 <__alt_data_end+0xfffd02d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   45edc:	0005883a 	mov	r2,zero
}
   45ee0:	e6ffff04 	addi	sp,fp,-4
   45ee4:	dfc00217 	ldw	ra,8(sp)
   45ee8:	df000117 	ldw	fp,4(sp)
   45eec:	dc000017 	ldw	r16,0(sp)
   45ef0:	dec00304 	addi	sp,sp,12
   45ef4:	f800283a 	ret

00045ef8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   45ef8:	defff604 	addi	sp,sp,-40
   45efc:	dfc00915 	stw	ra,36(sp)
   45f00:	df000815 	stw	fp,32(sp)
   45f04:	df000804 	addi	fp,sp,32
   45f08:	e13ffd15 	stw	r4,-12(fp)
   45f0c:	e17ffe15 	stw	r5,-8(fp)
   45f10:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   45f14:	00bfffc4 	movi	r2,-1
   45f18:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   45f1c:	00bffb44 	movi	r2,-19
   45f20:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   45f24:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   45f28:	e13ffd17 	ldw	r4,-12(fp)
   45f2c:	01400174 	movhi	r5,5
   45f30:	29610c04 	addi	r5,r5,-31696
   45f34:	00462140 	call	46214 <alt_find_dev>
   45f38:	e0bff815 	stw	r2,-32(fp)
   45f3c:	e0bff817 	ldw	r2,-32(fp)
   45f40:	1000051e 	bne	r2,zero,45f58 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   45f44:	e13ffd17 	ldw	r4,-12(fp)
   45f48:	00462a40 	call	462a4 <alt_find_file>
   45f4c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   45f50:	00800044 	movi	r2,1
   45f54:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   45f58:	e0bff817 	ldw	r2,-32(fp)
   45f5c:	10002b26 	beq	r2,zero,4600c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   45f60:	e13ff817 	ldw	r4,-32(fp)
   45f64:	00463b80 	call	463b8 <alt_get_fd>
   45f68:	e0bff915 	stw	r2,-28(fp)
   45f6c:	e0bff917 	ldw	r2,-28(fp)
   45f70:	1000030e 	bge	r2,zero,45f80 <open+0x88>
    {
      status = index;
   45f74:	e0bff917 	ldw	r2,-28(fp)
   45f78:	e0bffa15 	stw	r2,-24(fp)
   45f7c:	00002506 	br	46014 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   45f80:	e13ff917 	ldw	r4,-28(fp)
   45f84:	01400304 	movi	r5,12
   45f88:	00408fc0 	call	408fc <__mulsi3>
   45f8c:	1007883a 	mov	r3,r2
   45f90:	00800134 	movhi	r2,4
   45f94:	109c5d04 	addi	r2,r2,29044
   45f98:	1885883a 	add	r2,r3,r2
   45f9c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   45fa0:	e0fffe17 	ldw	r3,-8(fp)
   45fa4:	00900034 	movhi	r2,16384
   45fa8:	10bfffc4 	addi	r2,r2,-1
   45fac:	1886703a 	and	r3,r3,r2
   45fb0:	e0bffc17 	ldw	r2,-16(fp)
   45fb4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   45fb8:	e0bffb17 	ldw	r2,-20(fp)
   45fbc:	1000051e 	bne	r2,zero,45fd4 <open+0xdc>
   45fc0:	e13ffc17 	ldw	r4,-16(fp)
   45fc4:	0045e040 	call	45e04 <alt_file_locked>
   45fc8:	e0bffa15 	stw	r2,-24(fp)
   45fcc:	e0bffa17 	ldw	r2,-24(fp)
   45fd0:	10001016 	blt	r2,zero,46014 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   45fd4:	e0bff817 	ldw	r2,-32(fp)
   45fd8:	10800317 	ldw	r2,12(r2)
   45fdc:	10000826 	beq	r2,zero,46000 <open+0x108>
   45fe0:	e0bff817 	ldw	r2,-32(fp)
   45fe4:	10800317 	ldw	r2,12(r2)
   45fe8:	e13ffc17 	ldw	r4,-16(fp)
   45fec:	e17ffd17 	ldw	r5,-12(fp)
   45ff0:	e1bffe17 	ldw	r6,-8(fp)
   45ff4:	e1ffff17 	ldw	r7,-4(fp)
   45ff8:	103ee83a 	callr	r2
   45ffc:	00000106 	br	46004 <open+0x10c>
   46000:	0005883a 	mov	r2,zero
   46004:	e0bffa15 	stw	r2,-24(fp)
   46008:	00000206 	br	46014 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4600c:	00bffb44 	movi	r2,-19
   46010:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   46014:	e0bffa17 	ldw	r2,-24(fp)
   46018:	1000090e 	bge	r2,zero,46040 <open+0x148>
  {
    alt_release_fd (index);  
   4601c:	e13ff917 	ldw	r4,-28(fp)
   46020:	0043d400 	call	43d40 <alt_release_fd>
    ALT_ERRNO = -status;
   46024:	0045db40 	call	45db4 <alt_get_errno>
   46028:	1007883a 	mov	r3,r2
   4602c:	e0bffa17 	ldw	r2,-24(fp)
   46030:	0085c83a 	sub	r2,zero,r2
   46034:	18800015 	stw	r2,0(r3)
    return -1;
   46038:	00bfffc4 	movi	r2,-1
   4603c:	00000106 	br	46044 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   46040:	e0bff917 	ldw	r2,-28(fp)
}
   46044:	e037883a 	mov	sp,fp
   46048:	dfc00117 	ldw	ra,4(sp)
   4604c:	df000017 	ldw	fp,0(sp)
   46050:	dec00204 	addi	sp,sp,8
   46054:	f800283a 	ret

00046058 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   46058:	defffa04 	addi	sp,sp,-24
   4605c:	df000515 	stw	fp,20(sp)
   46060:	df000504 	addi	fp,sp,20
   46064:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46068:	0005303a 	rdctl	r2,status
   4606c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46070:	e0fffc17 	ldw	r3,-16(fp)
   46074:	00bfff84 	movi	r2,-2
   46078:	1884703a 	and	r2,r3,r2
   4607c:	1001703a 	wrctl	status,r2
  
  return context;
   46080:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   46084:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   46088:	e0bfff17 	ldw	r2,-4(fp)
   4608c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   46090:	e0bffd17 	ldw	r2,-12(fp)
   46094:	10800017 	ldw	r2,0(r2)
   46098:	e0fffd17 	ldw	r3,-12(fp)
   4609c:	18c00117 	ldw	r3,4(r3)
   460a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   460a4:	e0bffd17 	ldw	r2,-12(fp)
   460a8:	10800117 	ldw	r2,4(r2)
   460ac:	e0fffd17 	ldw	r3,-12(fp)
   460b0:	18c00017 	ldw	r3,0(r3)
   460b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   460b8:	e0bffd17 	ldw	r2,-12(fp)
   460bc:	e0fffd17 	ldw	r3,-12(fp)
   460c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   460c4:	e0bffd17 	ldw	r2,-12(fp)
   460c8:	e0fffd17 	ldw	r3,-12(fp)
   460cc:	10c00015 	stw	r3,0(r2)
   460d0:	e0bffb17 	ldw	r2,-20(fp)
   460d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   460d8:	e0bffe17 	ldw	r2,-8(fp)
   460dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   460e0:	e037883a 	mov	sp,fp
   460e4:	df000017 	ldw	fp,0(sp)
   460e8:	dec00104 	addi	sp,sp,4
   460ec:	f800283a 	ret

000460f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   460f0:	defffb04 	addi	sp,sp,-20
   460f4:	dfc00415 	stw	ra,16(sp)
   460f8:	df000315 	stw	fp,12(sp)
   460fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   46100:	d0a00c17 	ldw	r2,-32720(gp)
   46104:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   46108:	d0a6e317 	ldw	r2,-25716(gp)
   4610c:	10800044 	addi	r2,r2,1
   46110:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   46114:	00002e06 	br	461d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   46118:	e0bffd17 	ldw	r2,-12(fp)
   4611c:	10800017 	ldw	r2,0(r2)
   46120:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   46124:	e0bffd17 	ldw	r2,-12(fp)
   46128:	10800403 	ldbu	r2,16(r2)
   4612c:	10803fcc 	andi	r2,r2,255
   46130:	10000426 	beq	r2,zero,46144 <alt_tick+0x54>
   46134:	d0a6e317 	ldw	r2,-25716(gp)
   46138:	1000021e 	bne	r2,zero,46144 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4613c:	e0bffd17 	ldw	r2,-12(fp)
   46140:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   46144:	e0bffd17 	ldw	r2,-12(fp)
   46148:	10800217 	ldw	r2,8(r2)
   4614c:	d0e6e317 	ldw	r3,-25716(gp)
   46150:	18801d36 	bltu	r3,r2,461c8 <alt_tick+0xd8>
   46154:	e0bffd17 	ldw	r2,-12(fp)
   46158:	10800403 	ldbu	r2,16(r2)
   4615c:	10803fcc 	andi	r2,r2,255
   46160:	1000191e 	bne	r2,zero,461c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   46164:	e0bffd17 	ldw	r2,-12(fp)
   46168:	10800317 	ldw	r2,12(r2)
   4616c:	e0fffd17 	ldw	r3,-12(fp)
   46170:	18c00517 	ldw	r3,20(r3)
   46174:	1809883a 	mov	r4,r3
   46178:	103ee83a 	callr	r2
   4617c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   46180:	e0bfff17 	ldw	r2,-4(fp)
   46184:	1000031e 	bne	r2,zero,46194 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   46188:	e13ffd17 	ldw	r4,-12(fp)
   4618c:	00460580 	call	46058 <alt_alarm_stop>
   46190:	00000d06 	br	461c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   46194:	e0bffd17 	ldw	r2,-12(fp)
   46198:	10c00217 	ldw	r3,8(r2)
   4619c:	e0bfff17 	ldw	r2,-4(fp)
   461a0:	1887883a 	add	r3,r3,r2
   461a4:	e0bffd17 	ldw	r2,-12(fp)
   461a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   461ac:	e0bffd17 	ldw	r2,-12(fp)
   461b0:	10c00217 	ldw	r3,8(r2)
   461b4:	d0a6e317 	ldw	r2,-25716(gp)
   461b8:	1880032e 	bgeu	r3,r2,461c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   461bc:	e0bffd17 	ldw	r2,-12(fp)
   461c0:	00c00044 	movi	r3,1
   461c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   461c8:	e0bffe17 	ldw	r2,-8(fp)
   461cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   461d0:	e0fffd17 	ldw	r3,-12(fp)
   461d4:	d0a00c04 	addi	r2,gp,-32720
   461d8:	18bfcf1e 	bne	r3,r2,46118 <__alt_data_end+0xfffd05b8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   461dc:	0001883a 	nop
}
   461e0:	e037883a 	mov	sp,fp
   461e4:	dfc00117 	ldw	ra,4(sp)
   461e8:	df000017 	ldw	fp,0(sp)
   461ec:	dec00204 	addi	sp,sp,8
   461f0:	f800283a 	ret

000461f4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   461f4:	deffff04 	addi	sp,sp,-4
   461f8:	df000015 	stw	fp,0(sp)
   461fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   46200:	000170fa 	wrctl	ienable,zero
}
   46204:	e037883a 	mov	sp,fp
   46208:	df000017 	ldw	fp,0(sp)
   4620c:	dec00104 	addi	sp,sp,4
   46210:	f800283a 	ret

00046214 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   46214:	defffa04 	addi	sp,sp,-24
   46218:	dfc00515 	stw	ra,20(sp)
   4621c:	df000415 	stw	fp,16(sp)
   46220:	df000404 	addi	fp,sp,16
   46224:	e13ffe15 	stw	r4,-8(fp)
   46228:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4622c:	e0bfff17 	ldw	r2,-4(fp)
   46230:	10800017 	ldw	r2,0(r2)
   46234:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   46238:	e13ffe17 	ldw	r4,-8(fp)
   4623c:	0040a6c0 	call	40a6c <strlen>
   46240:	10800044 	addi	r2,r2,1
   46244:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   46248:	00000d06 	br	46280 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4624c:	e0bffc17 	ldw	r2,-16(fp)
   46250:	10c00217 	ldw	r3,8(r2)
   46254:	e0bffd17 	ldw	r2,-12(fp)
   46258:	1809883a 	mov	r4,r3
   4625c:	e17ffe17 	ldw	r5,-8(fp)
   46260:	100d883a 	mov	r6,r2
   46264:	00465740 	call	46574 <memcmp>
   46268:	1000021e 	bne	r2,zero,46274 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4626c:	e0bffc17 	ldw	r2,-16(fp)
   46270:	00000706 	br	46290 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   46274:	e0bffc17 	ldw	r2,-16(fp)
   46278:	10800017 	ldw	r2,0(r2)
   4627c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   46280:	e0fffc17 	ldw	r3,-16(fp)
   46284:	e0bfff17 	ldw	r2,-4(fp)
   46288:	18bff01e 	bne	r3,r2,4624c <__alt_data_end+0xfffd06ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4628c:	0005883a 	mov	r2,zero
}
   46290:	e037883a 	mov	sp,fp
   46294:	dfc00117 	ldw	ra,4(sp)
   46298:	df000017 	ldw	fp,0(sp)
   4629c:	dec00204 	addi	sp,sp,8
   462a0:	f800283a 	ret

000462a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   462a4:	defffb04 	addi	sp,sp,-20
   462a8:	dfc00415 	stw	ra,16(sp)
   462ac:	df000315 	stw	fp,12(sp)
   462b0:	df000304 	addi	fp,sp,12
   462b4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   462b8:	00800174 	movhi	r2,5
   462bc:	10a10a04 	addi	r2,r2,-31704
   462c0:	10800017 	ldw	r2,0(r2)
   462c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   462c8:	00003106 	br	46390 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   462cc:	e0bffd17 	ldw	r2,-12(fp)
   462d0:	10800217 	ldw	r2,8(r2)
   462d4:	1009883a 	mov	r4,r2
   462d8:	0040a6c0 	call	40a6c <strlen>
   462dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   462e0:	e0bffd17 	ldw	r2,-12(fp)
   462e4:	10c00217 	ldw	r3,8(r2)
   462e8:	e0bffe17 	ldw	r2,-8(fp)
   462ec:	10bfffc4 	addi	r2,r2,-1
   462f0:	1885883a 	add	r2,r3,r2
   462f4:	10800003 	ldbu	r2,0(r2)
   462f8:	10803fcc 	andi	r2,r2,255
   462fc:	1080201c 	xori	r2,r2,128
   46300:	10bfe004 	addi	r2,r2,-128
   46304:	10800bd8 	cmpnei	r2,r2,47
   46308:	1000031e 	bne	r2,zero,46318 <alt_find_file+0x74>
    {
      len -= 1;
   4630c:	e0bffe17 	ldw	r2,-8(fp)
   46310:	10bfffc4 	addi	r2,r2,-1
   46314:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   46318:	e0bffe17 	ldw	r2,-8(fp)
   4631c:	e0ffff17 	ldw	r3,-4(fp)
   46320:	1885883a 	add	r2,r3,r2
   46324:	10800003 	ldbu	r2,0(r2)
   46328:	10803fcc 	andi	r2,r2,255
   4632c:	1080201c 	xori	r2,r2,128
   46330:	10bfe004 	addi	r2,r2,-128
   46334:	10800be0 	cmpeqi	r2,r2,47
   46338:	1000081e 	bne	r2,zero,4635c <alt_find_file+0xb8>
   4633c:	e0bffe17 	ldw	r2,-8(fp)
   46340:	e0ffff17 	ldw	r3,-4(fp)
   46344:	1885883a 	add	r2,r3,r2
   46348:	10800003 	ldbu	r2,0(r2)
   4634c:	10803fcc 	andi	r2,r2,255
   46350:	1080201c 	xori	r2,r2,128
   46354:	10bfe004 	addi	r2,r2,-128
   46358:	10000a1e 	bne	r2,zero,46384 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4635c:	e0bffd17 	ldw	r2,-12(fp)
   46360:	10c00217 	ldw	r3,8(r2)
   46364:	e0bffe17 	ldw	r2,-8(fp)
   46368:	1809883a 	mov	r4,r3
   4636c:	e17fff17 	ldw	r5,-4(fp)
   46370:	100d883a 	mov	r6,r2
   46374:	00465740 	call	46574 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   46378:	1000021e 	bne	r2,zero,46384 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4637c:	e0bffd17 	ldw	r2,-12(fp)
   46380:	00000806 	br	463a4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   46384:	e0bffd17 	ldw	r2,-12(fp)
   46388:	10800017 	ldw	r2,0(r2)
   4638c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   46390:	e0fffd17 	ldw	r3,-12(fp)
   46394:	00800174 	movhi	r2,5
   46398:	10a10a04 	addi	r2,r2,-31704
   4639c:	18bfcb1e 	bne	r3,r2,462cc <__alt_data_end+0xfffd076c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   463a0:	0005883a 	mov	r2,zero
}
   463a4:	e037883a 	mov	sp,fp
   463a8:	dfc00117 	ldw	ra,4(sp)
   463ac:	df000017 	ldw	fp,0(sp)
   463b0:	dec00204 	addi	sp,sp,8
   463b4:	f800283a 	ret

000463b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   463b8:	defffa04 	addi	sp,sp,-24
   463bc:	dfc00515 	stw	ra,20(sp)
   463c0:	df000415 	stw	fp,16(sp)
   463c4:	dc000315 	stw	r16,12(sp)
   463c8:	df000404 	addi	fp,sp,16
   463cc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   463d0:	00bffa04 	movi	r2,-24
   463d4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   463d8:	e03ffc15 	stw	zero,-16(fp)
   463dc:	00002106 	br	46464 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   463e0:	04000134 	movhi	r16,4
   463e4:	841c5d04 	addi	r16,r16,29044
   463e8:	e0bffc17 	ldw	r2,-16(fp)
   463ec:	1009883a 	mov	r4,r2
   463f0:	01400304 	movi	r5,12
   463f4:	00408fc0 	call	408fc <__mulsi3>
   463f8:	8085883a 	add	r2,r16,r2
   463fc:	10800017 	ldw	r2,0(r2)
   46400:	1000151e 	bne	r2,zero,46458 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   46404:	04000134 	movhi	r16,4
   46408:	841c5d04 	addi	r16,r16,29044
   4640c:	e0bffc17 	ldw	r2,-16(fp)
   46410:	1009883a 	mov	r4,r2
   46414:	01400304 	movi	r5,12
   46418:	00408fc0 	call	408fc <__mulsi3>
   4641c:	8085883a 	add	r2,r16,r2
   46420:	e0fffe17 	ldw	r3,-8(fp)
   46424:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   46428:	00800174 	movhi	r2,5
   4642c:	10a10e04 	addi	r2,r2,-31688
   46430:	10c00017 	ldw	r3,0(r2)
   46434:	e0bffc17 	ldw	r2,-16(fp)
   46438:	1880040e 	bge	r3,r2,4644c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   4643c:	00800174 	movhi	r2,5
   46440:	10a10e04 	addi	r2,r2,-31688
   46444:	e0fffc17 	ldw	r3,-16(fp)
   46448:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4644c:	e0bffc17 	ldw	r2,-16(fp)
   46450:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   46454:	00000606 	br	46470 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   46458:	e0bffc17 	ldw	r2,-16(fp)
   4645c:	10800044 	addi	r2,r2,1
   46460:	e0bffc15 	stw	r2,-16(fp)
   46464:	e0bffc17 	ldw	r2,-16(fp)
   46468:	10800810 	cmplti	r2,r2,32
   4646c:	103fdc1e 	bne	r2,zero,463e0 <__alt_data_end+0xfffd0880>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   46470:	e0bffd17 	ldw	r2,-12(fp)
}
   46474:	e6ffff04 	addi	sp,fp,-4
   46478:	dfc00217 	ldw	ra,8(sp)
   4647c:	df000117 	ldw	fp,4(sp)
   46480:	dc000017 	ldw	r16,0(sp)
   46484:	dec00304 	addi	sp,sp,12
   46488:	f800283a 	ret

0004648c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4648c:	defffe04 	addi	sp,sp,-8
   46490:	df000115 	stw	fp,4(sp)
   46494:	df000104 	addi	fp,sp,4
   46498:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4649c:	e0bfff17 	ldw	r2,-4(fp)
   464a0:	10bffe84 	addi	r2,r2,-6
   464a4:	10c00428 	cmpgeui	r3,r2,16
   464a8:	18001a1e 	bne	r3,zero,46514 <alt_exception_cause_generated_bad_addr+0x88>
   464ac:	100690ba 	slli	r3,r2,2
   464b0:	00800134 	movhi	r2,4
   464b4:	10993104 	addi	r2,r2,25796
   464b8:	1885883a 	add	r2,r3,r2
   464bc:	10800017 	ldw	r2,0(r2)
   464c0:	1000683a 	jmp	r2
   464c4:	00046504 	movi	zero,4500
   464c8:	00046504 	movi	zero,4500
   464cc:	00046514 	movui	zero,4500
   464d0:	00046514 	movui	zero,4500
   464d4:	00046514 	movui	zero,4500
   464d8:	00046504 	movi	zero,4500
   464dc:	0004650c 	andi	zero,zero,4500
   464e0:	00046514 	movui	zero,4500
   464e4:	00046504 	movi	zero,4500
   464e8:	00046504 	movi	zero,4500
   464ec:	00046514 	movui	zero,4500
   464f0:	00046504 	movi	zero,4500
   464f4:	0004650c 	andi	zero,zero,4500
   464f8:	00046514 	movui	zero,4500
   464fc:	00046514 	movui	zero,4500
   46500:	00046504 	movi	zero,4500
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   46504:	00800044 	movi	r2,1
   46508:	00000306 	br	46518 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   4650c:	0005883a 	mov	r2,zero
   46510:	00000106 	br	46518 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   46514:	0005883a 	mov	r2,zero
  }
}
   46518:	e037883a 	mov	sp,fp
   4651c:	df000017 	ldw	fp,0(sp)
   46520:	dec00104 	addi	sp,sp,4
   46524:	f800283a 	ret

00046528 <atexit>:
   46528:	200b883a 	mov	r5,r4
   4652c:	000d883a 	mov	r6,zero
   46530:	0009883a 	mov	r4,zero
   46534:	000f883a 	mov	r7,zero
   46538:	00465f01 	jmpi	465f0 <__register_exitproc>

0004653c <exit>:
   4653c:	defffe04 	addi	sp,sp,-8
   46540:	000b883a 	mov	r5,zero
   46544:	dc000015 	stw	r16,0(sp)
   46548:	dfc00115 	stw	ra,4(sp)
   4654c:	2021883a 	mov	r16,r4
   46550:	00467040 	call	46704 <__call_exitprocs>
   46554:	00800174 	movhi	r2,5
   46558:	10a10604 	addi	r2,r2,-31720
   4655c:	11000017 	ldw	r4,0(r2)
   46560:	20800f17 	ldw	r2,60(r4)
   46564:	10000126 	beq	r2,zero,4656c <exit+0x30>
   46568:	103ee83a 	callr	r2
   4656c:	8009883a 	mov	r4,r16
   46570:	00468980 	call	46898 <_exit>

00046574 <memcmp>:
   46574:	01c000c4 	movi	r7,3
   46578:	3980192e 	bgeu	r7,r6,465e0 <memcmp+0x6c>
   4657c:	2144b03a 	or	r2,r4,r5
   46580:	11c4703a 	and	r2,r2,r7
   46584:	10000f26 	beq	r2,zero,465c4 <memcmp+0x50>
   46588:	20800003 	ldbu	r2,0(r4)
   4658c:	28c00003 	ldbu	r3,0(r5)
   46590:	10c0151e 	bne	r2,r3,465e8 <memcmp+0x74>
   46594:	31bfff84 	addi	r6,r6,-2
   46598:	01ffffc4 	movi	r7,-1
   4659c:	00000406 	br	465b0 <memcmp+0x3c>
   465a0:	20800003 	ldbu	r2,0(r4)
   465a4:	28c00003 	ldbu	r3,0(r5)
   465a8:	31bfffc4 	addi	r6,r6,-1
   465ac:	10c00e1e 	bne	r2,r3,465e8 <memcmp+0x74>
   465b0:	21000044 	addi	r4,r4,1
   465b4:	29400044 	addi	r5,r5,1
   465b8:	31fff91e 	bne	r6,r7,465a0 <__alt_data_end+0xfffd0a40>
   465bc:	0005883a 	mov	r2,zero
   465c0:	f800283a 	ret
   465c4:	20c00017 	ldw	r3,0(r4)
   465c8:	28800017 	ldw	r2,0(r5)
   465cc:	1880041e 	bne	r3,r2,465e0 <memcmp+0x6c>
   465d0:	31bfff04 	addi	r6,r6,-4
   465d4:	21000104 	addi	r4,r4,4
   465d8:	29400104 	addi	r5,r5,4
   465dc:	39bff936 	bltu	r7,r6,465c4 <__alt_data_end+0xfffd0a64>
   465e0:	303fe91e 	bne	r6,zero,46588 <__alt_data_end+0xfffd0a28>
   465e4:	003ff506 	br	465bc <__alt_data_end+0xfffd0a5c>
   465e8:	10c5c83a 	sub	r2,r2,r3
   465ec:	f800283a 	ret

000465f0 <__register_exitproc>:
   465f0:	00800174 	movhi	r2,5
   465f4:	defffa04 	addi	sp,sp,-24
   465f8:	10a10604 	addi	r2,r2,-31720
   465fc:	dc000315 	stw	r16,12(sp)
   46600:	14000017 	ldw	r16,0(r2)
   46604:	dc400415 	stw	r17,16(sp)
   46608:	dfc00515 	stw	ra,20(sp)
   4660c:	80805217 	ldw	r2,328(r16)
   46610:	2023883a 	mov	r17,r4
   46614:	10003626 	beq	r2,zero,466f0 <__register_exitproc+0x100>
   46618:	10c00117 	ldw	r3,4(r2)
   4661c:	010007c4 	movi	r4,31
   46620:	20c00e16 	blt	r4,r3,4665c <__register_exitproc+0x6c>
   46624:	1a400044 	addi	r9,r3,1
   46628:	8800211e 	bne	r17,zero,466b0 <__register_exitproc+0xc0>
   4662c:	18c00084 	addi	r3,r3,2
   46630:	18c7883a 	add	r3,r3,r3
   46634:	18c7883a 	add	r3,r3,r3
   46638:	12400115 	stw	r9,4(r2)
   4663c:	10c7883a 	add	r3,r2,r3
   46640:	19400015 	stw	r5,0(r3)
   46644:	0005883a 	mov	r2,zero
   46648:	dfc00517 	ldw	ra,20(sp)
   4664c:	dc400417 	ldw	r17,16(sp)
   46650:	dc000317 	ldw	r16,12(sp)
   46654:	dec00604 	addi	sp,sp,24
   46658:	f800283a 	ret
   4665c:	00800034 	movhi	r2,0
   46660:	10800004 	addi	r2,r2,0
   46664:	10002526 	beq	r2,zero,466fc <__register_exitproc+0x10c>
   46668:	01006404 	movi	r4,400
   4666c:	d9400015 	stw	r5,0(sp)
   46670:	d9800115 	stw	r6,4(sp)
   46674:	d9c00215 	stw	r7,8(sp)
   46678:	00000000 	call	0 <__reset-0x40000>
   4667c:	d9400017 	ldw	r5,0(sp)
   46680:	d9800117 	ldw	r6,4(sp)
   46684:	d9c00217 	ldw	r7,8(sp)
   46688:	10001c26 	beq	r2,zero,466fc <__register_exitproc+0x10c>
   4668c:	80c05217 	ldw	r3,328(r16)
   46690:	10000115 	stw	zero,4(r2)
   46694:	02400044 	movi	r9,1
   46698:	10c00015 	stw	r3,0(r2)
   4669c:	80805215 	stw	r2,328(r16)
   466a0:	10006215 	stw	zero,392(r2)
   466a4:	10006315 	stw	zero,396(r2)
   466a8:	0007883a 	mov	r3,zero
   466ac:	883fdf26 	beq	r17,zero,4662c <__alt_data_end+0xfffd0acc>
   466b0:	18d1883a 	add	r8,r3,r3
   466b4:	4211883a 	add	r8,r8,r8
   466b8:	1211883a 	add	r8,r2,r8
   466bc:	41802215 	stw	r6,136(r8)
   466c0:	01000044 	movi	r4,1
   466c4:	11806217 	ldw	r6,392(r2)
   466c8:	20c8983a 	sll	r4,r4,r3
   466cc:	310cb03a 	or	r6,r6,r4
   466d0:	11806215 	stw	r6,392(r2)
   466d4:	41c04215 	stw	r7,264(r8)
   466d8:	01800084 	movi	r6,2
   466dc:	89bfd31e 	bne	r17,r6,4662c <__alt_data_end+0xfffd0acc>
   466e0:	11806317 	ldw	r6,396(r2)
   466e4:	3108b03a 	or	r4,r6,r4
   466e8:	11006315 	stw	r4,396(r2)
   466ec:	003fcf06 	br	4662c <__alt_data_end+0xfffd0acc>
   466f0:	80805304 	addi	r2,r16,332
   466f4:	80805215 	stw	r2,328(r16)
   466f8:	003fc706 	br	46618 <__alt_data_end+0xfffd0ab8>
   466fc:	00bfffc4 	movi	r2,-1
   46700:	003fd106 	br	46648 <__alt_data_end+0xfffd0ae8>

00046704 <__call_exitprocs>:
   46704:	00800174 	movhi	r2,5
   46708:	10a10604 	addi	r2,r2,-31720
   4670c:	10800017 	ldw	r2,0(r2)
   46710:	defff404 	addi	sp,sp,-48
   46714:	dd800815 	stw	r22,32(sp)
   46718:	d8800015 	stw	r2,0(sp)
   4671c:	10805204 	addi	r2,r2,328
   46720:	dd000615 	stw	r20,24(sp)
   46724:	dc800415 	stw	r18,16(sp)
   46728:	dfc00b15 	stw	ra,44(sp)
   4672c:	df000a15 	stw	fp,40(sp)
   46730:	ddc00915 	stw	r23,36(sp)
   46734:	dd400715 	stw	r21,28(sp)
   46738:	dcc00515 	stw	r19,20(sp)
   4673c:	dc400315 	stw	r17,12(sp)
   46740:	dc000215 	stw	r16,8(sp)
   46744:	2025883a 	mov	r18,r4
   46748:	2829883a 	mov	r20,r5
   4674c:	d8800115 	stw	r2,4(sp)
   46750:	05bfffc4 	movi	r22,-1
   46754:	d8800017 	ldw	r2,0(sp)
   46758:	14c05217 	ldw	r19,328(r2)
   4675c:	98001d26 	beq	r19,zero,467d4 <__call_exitprocs+0xd0>
   46760:	dd400117 	ldw	r21,4(sp)
   46764:	98800117 	ldw	r2,4(r19)
   46768:	173fffc4 	addi	fp,r2,-1
   4676c:	e0000d16 	blt	fp,zero,467a4 <__call_exitprocs+0xa0>
   46770:	14000044 	addi	r16,r2,1
   46774:	8421883a 	add	r16,r16,r16
   46778:	8421883a 	add	r16,r16,r16
   4677c:	84402004 	addi	r17,r16,128
   46780:	9c63883a 	add	r17,r19,r17
   46784:	9c21883a 	add	r16,r19,r16
   46788:	a0001e26 	beq	r20,zero,46804 <__call_exitprocs+0x100>
   4678c:	80804017 	ldw	r2,256(r16)
   46790:	15001c26 	beq	r2,r20,46804 <__call_exitprocs+0x100>
   46794:	e73fffc4 	addi	fp,fp,-1
   46798:	843fff04 	addi	r16,r16,-4
   4679c:	8c7fff04 	addi	r17,r17,-4
   467a0:	e5bff91e 	bne	fp,r22,46788 <__alt_data_end+0xfffd0c28>
   467a4:	00800034 	movhi	r2,0
   467a8:	10800004 	addi	r2,r2,0
   467ac:	10000926 	beq	r2,zero,467d4 <__call_exitprocs+0xd0>
   467b0:	98800117 	ldw	r2,4(r19)
   467b4:	1000311e 	bne	r2,zero,4687c <__call_exitprocs+0x178>
   467b8:	98800017 	ldw	r2,0(r19)
   467bc:	10003426 	beq	r2,zero,46890 <__call_exitprocs+0x18c>
   467c0:	9809883a 	mov	r4,r19
   467c4:	a8800015 	stw	r2,0(r21)
   467c8:	00000000 	call	0 <__reset-0x40000>
   467cc:	acc00017 	ldw	r19,0(r21)
   467d0:	983fe41e 	bne	r19,zero,46764 <__alt_data_end+0xfffd0c04>
   467d4:	dfc00b17 	ldw	ra,44(sp)
   467d8:	df000a17 	ldw	fp,40(sp)
   467dc:	ddc00917 	ldw	r23,36(sp)
   467e0:	dd800817 	ldw	r22,32(sp)
   467e4:	dd400717 	ldw	r21,28(sp)
   467e8:	dd000617 	ldw	r20,24(sp)
   467ec:	dcc00517 	ldw	r19,20(sp)
   467f0:	dc800417 	ldw	r18,16(sp)
   467f4:	dc400317 	ldw	r17,12(sp)
   467f8:	dc000217 	ldw	r16,8(sp)
   467fc:	dec00c04 	addi	sp,sp,48
   46800:	f800283a 	ret
   46804:	98800117 	ldw	r2,4(r19)
   46808:	80c00017 	ldw	r3,0(r16)
   4680c:	10bfffc4 	addi	r2,r2,-1
   46810:	17001526 	beq	r2,fp,46868 <__call_exitprocs+0x164>
   46814:	80000015 	stw	zero,0(r16)
   46818:	183fde26 	beq	r3,zero,46794 <__alt_data_end+0xfffd0c34>
   4681c:	00800044 	movi	r2,1
   46820:	1708983a 	sll	r4,r2,fp
   46824:	98806217 	ldw	r2,392(r19)
   46828:	9dc00117 	ldw	r23,4(r19)
   4682c:	2084703a 	and	r2,r4,r2
   46830:	1000061e 	bne	r2,zero,4684c <__call_exitprocs+0x148>
   46834:	183ee83a 	callr	r3
   46838:	98800117 	ldw	r2,4(r19)
   4683c:	15ffc51e 	bne	r2,r23,46754 <__alt_data_end+0xfffd0bf4>
   46840:	a8800017 	ldw	r2,0(r21)
   46844:	14ffd326 	beq	r2,r19,46794 <__alt_data_end+0xfffd0c34>
   46848:	003fc206 	br	46754 <__alt_data_end+0xfffd0bf4>
   4684c:	98806317 	ldw	r2,396(r19)
   46850:	2084703a 	and	r2,r4,r2
   46854:	1000061e 	bne	r2,zero,46870 <__call_exitprocs+0x16c>
   46858:	89400017 	ldw	r5,0(r17)
   4685c:	9009883a 	mov	r4,r18
   46860:	183ee83a 	callr	r3
   46864:	003ff406 	br	46838 <__alt_data_end+0xfffd0cd8>
   46868:	9f000115 	stw	fp,4(r19)
   4686c:	003fea06 	br	46818 <__alt_data_end+0xfffd0cb8>
   46870:	89000017 	ldw	r4,0(r17)
   46874:	183ee83a 	callr	r3
   46878:	003fef06 	br	46838 <__alt_data_end+0xfffd0cd8>
   4687c:	98800017 	ldw	r2,0(r19)
   46880:	982b883a 	mov	r21,r19
   46884:	1027883a 	mov	r19,r2
   46888:	983fb61e 	bne	r19,zero,46764 <__alt_data_end+0xfffd0c04>
   4688c:	003fd106 	br	467d4 <__alt_data_end+0xfffd0c74>
   46890:	0005883a 	mov	r2,zero
   46894:	003ffa06 	br	46880 <__alt_data_end+0xfffd0d20>

00046898 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   46898:	defffd04 	addi	sp,sp,-12
   4689c:	df000215 	stw	fp,8(sp)
   468a0:	df000204 	addi	fp,sp,8
   468a4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   468a8:	0001883a 	nop
   468ac:	e0bfff17 	ldw	r2,-4(fp)
   468b0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   468b4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   468b8:	10000226 	beq	r2,zero,468c4 <_exit+0x2c>
    ALT_SIM_FAIL();
   468bc:	002af070 	cmpltui	zero,zero,43969
   468c0:	00000106 	br	468c8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   468c4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   468c8:	003fff06 	br	468c8 <__alt_data_end+0xfffd0d68>
