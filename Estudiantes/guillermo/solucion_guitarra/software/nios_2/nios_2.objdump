
nios_2.elf:     file format elf32-littlenios2
nios_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0004022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00006888 memsz 0x00006888 flags r-x
    LOAD off    0x000078a8 vaddr 0x000468a8 paddr 0x000483d8 align 2**12
         filesz 0x00001b30 memsz 0x00001b30 flags rw-
    LOAD off    0x00009f08 vaddr 0x00049f08 paddr 0x00049f08 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006628  0004022c  0004022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000054  00046854  00046854  00007854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b30  000468a8  000483d8  000078a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00049f08  00049f08  00009f08  2**2
                  ALLOC, SMALL_DATA
  6 .RAM_jesus    00000000  0004a05c  0004a05c  000093d8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000093d8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ab8  00000000  00000000  00009400  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000180b7  00000000  00000000  00009eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006974  00000000  00000000  00021f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007319  00000000  00000000  000288e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000196c  00000000  00000000  0002fbfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002beb  00000000  00000000  00031568  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000487e  00000000  00000000  00034153  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000389d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000360  00000000  00000000  00038a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003b6d6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003b6d9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003b6dc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003b6dd  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003b6de  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003b6e7  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003b6f0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  0003b6f9  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000007d  00000000  00000000  0003b706  2**0
                  CONTENTS, READONLY
 26 .jdi          00003b78  00000000  00000000  0003b783  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007db43  00000000  00000000  0003f2fb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
0004022c l    d  .text	00000000 .text
00046854 l    d  .rodata	00000000 .rodata
000468a8 l    d  .rwdata	00000000 .rwdata
00049f08 l    d  .bss	00000000 .bss
0004a05c l    d  .RAM_jesus	00000000 .RAM_jesus
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_2_bsp//obj/HAL/src/crt0.o
00040264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 karplus.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00040758 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000468a8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000423d0 l     F .text	00000008 __fp_lock
000423d8 l     F .text	00000008 __fp_unlock
000423ec l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00043554 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004367c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000436a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000437b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000438ac l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043990 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043b74 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000483c8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00043e28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043f78 l     F .text	00000038 alt_dev_reg
0004727c l     O .rwdata	00001060 jtag_uart
000482dc l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00044288 l     F .text	00000204 altera_avalon_jtag_uart_irq
0004448c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00044aac l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00044d60 l     F .text	00000098 altera_avalon_uart_irq
00044df8 l     F .text	000000e0 altera_avalon_uart_rxirq
00044ed8 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00045070 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0004529c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004574c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00045be4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00045d3c l     F .text	00000050 alt_get_errno
00045d8c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00049f30 g     O .bss	00000004 alt_instruction_exception_handler
0004333c g     F .text	00000054 _isatty_r
00043abc g     F .text	00000078 alt_main
000408ac g     F .text	000000b8 _puts_r
00049f5c g     O .bss	00000100 alt_irq
00043390 g     F .text	0000005c _lseek_r
000483d8 g       *ABS*	00000000 __flash_rwdata_start
0004a05c g       *ABS*	00000000 __alt_heap_start
000430bc g     F .text	0000005c __sseek
00042734 g     F .text	00000010 __sinit
0004258c g     F .text	00000078 __sfmoreglue
00043b54 g     F .text	00000020 __malloc_unlock
000418f8 g     F .text	0000015c memmove
0004271c g     F .text	00000018 _cleanup
0004617c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
000432e4 g     F .text	00000058 _fstat_r
00049f14 g     O .bss	00000004 errno
00043038 g     F .text	00000008 __seofread
00049f1c g     O .bss	00000004 alt_argv
000503a0 g       *ABS*	00000000 _gp
00043df8 g     F .text	00000030 usleep
000470fc g     O .rwdata	00000180 alt_fd_list
0004619c g     F .text	00000090 alt_find_dev
000417c0 g     F .text	00000138 memcpy
000423e0 g     F .text	0000000c _cleanup_r
00045cc4 g     F .text	00000078 alt_io_redirect
00046854 g       *ABS*	00000000 __DTOR_END__
00040964 g     F .text	00000014 puts
00046414 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00044688 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00040874 g     F .text	00000008 .hidden __udivsi3
00043800 g     F .text	000000ac isatty
00049f10 g     O .bss	00000004 __malloc_top_pad
00040a8c g     F .text	000004a4 __sfvwrite_r
00041ff4 g     F .text	00000054 _sbrk_r
000433ec g     F .text	0000005c _read_r
000483c0 g     O .rwdata	00000004 alt_max_fd
000431d0 g     F .text	00000100 _fclose_r
000423a0 g     F .text	00000030 fflush
00049f0c g     O .bss	00000004 __malloc_max_sbrked_mem
000439e0 g     F .text	000000dc lseek
000483a0 g     O .rwdata	00000004 _global_impure_ptr
00041a54 g     F .text	000005a0 _realloc_r
0004a05c g       *ABS*	00000000 __bss_end
00045af4 g     F .text	000000f0 alt_iic_isr_register
00046078 g     F .text	00000104 alt_tick
00044cb8 g     F .text	000000a8 altera_avalon_uart_init
00042754 g     F .text	00000018 __fp_lock_all
00045aa8 g     F .text	0000004c alt_ic_irq_enabled
00045fe0 g     F .text	00000098 alt_alarm_stop
00049f24 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d0 alt_irq_handler
000470d4 g     O .rwdata	00000028 alt_dev_null
00045730 g     F .text	0000001c alt_dcache_flush_all
000483d8 g       *ABS*	00000000 __ram_rwdata_end
000483b8 g     O .rwdata	00000008 alt_dev_list
00043e78 g     F .text	00000100 write
000468a8 g       *ABS*	00000000 __ram_rodata_end
000436f8 g     F .text	000000b8 fstat
0004087c g     F .text	00000008 .hidden __umodsi3
0004a05c g       *ABS*	00000000 end
000452ec g     F .text	000001ac altera_avalon_uart_write
000441c4 g     F .text	000000c4 altera_avalon_jtag_uart_init
000401cc g     F .exceptions	00000060 alt_instruction_exception_entry
00040630 g     F .text	00000064 play_tone
00046854 g       *ABS*	00000000 __CTOR_LIST__
00075b60 g       *ABS*	00000000 __alt_stack_pointer
00044b20 g     F .text	00000088 alt_avalon_timer_sc_init
00044c08 g     F .text	00000060 altera_avalon_uart_write_fd
00044c68 g     F .text	00000050 altera_avalon_uart_close_fd
00044894 g     F .text	00000218 altera_avalon_jtag_uart_write
00042744 g     F .text	00000004 __sfp_lock_acquire
000416d8 g     F .text	000000e8 memchr
000428a8 g     F .text	000002f0 _free_r
00040564 g     F .text	000000cc inject_noise
0004668c g     F .text	00000194 __call_exitprocs
000483a8 g     O .rwdata	00000004 __malloc_sbrk_base
0004022c g     F .text	0000003c _start
00049f28 g     O .bss	00000004 _alt_tick_rate
00040990 g     F .text	00000064 rand
00049f2c g     O .bss	00000004 _alt_nticks
00043bc4 g     F .text	00000104 read
00043fe4 g     F .text	0000007c alt_sys_init
00046578 g     F .text	00000114 __register_exitproc
00044534 g     F .text	00000068 altera_avalon_jtag_uart_close
00040884 g     F .text	00000028 .hidden __mulsi3
000468a8 g       *ABS*	00000000 __ram_rwdata_start
00046854 g       *ABS*	00000000 __ram_rodata_start
00049f34 g     O .bss	00000028 __malloc_current_mallinfo
00044060 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00046340 g     F .text	000000d4 alt_get_fd
000455d8 g     F .text	00000158 alt_busy_sleep
0004317c g     F .text	00000054 _close_r
000464fc g     F .text	0000007c memcmp
00044120 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0004a05c g       *ABS*	00000000 __alt_stack_base
00044170 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00042048 g     F .text	00000130 __swsetup_r
00042604 g     F .text	00000118 __sfp
00046ccc g     O .rwdata	00000408 __malloc_av_
00042750 g     F .text	00000004 __sinit_lock_release
00042fe4 g     F .text	00000054 __sread
0004622c g     F .text	00000114 alt_find_file
0004579c g     F .text	000000a4 alt_dev_llist_insert
00043b34 g     F .text	00000020 __malloc_lock
00043d48 g     F .text	000000b0 sbrk
00042178 g     F .text	00000228 _fflush_r
00049f08 g       *ABS*	00000000 __bss_start
00042ec0 g     F .text	00000124 memset
00040268 g     F .text	000002fc main
00049f20 g     O .bss	00000004 alt_envp
00049f08 g     O .bss	00000004 __malloc_max_total_mem
000440c0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00040978 g     F .text	00000018 srand
00040000 g       *ABS*	00000000 __alt_mem_RAM_jesus
00043118 g     F .text	00000008 __sclose
00075b60 g       *ABS*	00000000 __alt_heap_limit
000432d0 g     F .text	00000014 fclose
00040f30 g     F .text	000007a8 _malloc_r
000483c4 g     O .rwdata	00000004 alt_errno
00042b98 g     F .text	000000b8 _fwalk
000407c4 g     F .text	00000054 .hidden __divsi3
00042784 g     F .text	00000124 _malloc_trim_r
00046854 g       *ABS*	00000000 __CTOR_END__
00046854 g       *ABS*	00000000 __flash_rodata_start
00046854 g       *ABS*	00000000 __DTOR_LIST__
00043fb0 g     F .text	00000034 alt_irq_init
00043cc8 g     F .text	00000080 alt_release_fd
000464b0 g     F .text	00000014 atexit
00043120 g     F .text	0000005c _write_r
000483a4 g     O .rwdata	00000004 _impure_ptr
00049f18 g     O .bss	00000004 alt_argc
0004589c g     F .text	0000005c _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
0004276c g     F .text	00000018 __fp_unlock_all
000483b0 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00045914 g     F .text	00000050 alt_ic_isr_register
000483d8 g       *ABS*	00000000 _edata
00044ba8 g     F .text	00000060 altera_avalon_uart_read_fd
0004a05c g       *ABS*	00000000 _end
0004022c g       *ABS*	00000000 __ram_exceptions_end
0004459c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00045a04 g     F .text	000000a4 alt_ic_irq_disable
00043040 g     F .text	0000007c __swrite
000483ac g     O .rwdata	00000004 __malloc_trim_threshold
000406ec g     F .text	0000006c init_karplus
000464c4 g     F .text	00000038 exit
00042c50 g     F .text	000000b8 _fwalk_reent
00040818 g     F .text	0000005c .hidden __modsi3
00075b60 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00042748 g     F .text	00000004 __sfp_lock_release
0004501c g     F .text	00000054 altera_avalon_uart_close
00046820 g     F .text	00000034 _exit
00045498 g     F .text	00000140 alt_alarm_start
00040694 g     F .text	00000058 set_karplus_frequency
00043448 g     F .text	0000010c .hidden __muldi3
00042d08 g     F .text	000001b8 __smakebuf_r
000409f4 g     F .text	00000098 strlen
00045e80 g     F .text	00000160 open
000458f8 g     F .text	0000001c alt_icache_flush_all
000483cc g     O .rwdata	00000004 alt_priority_mask
00045964 g     F .text	000000a0 alt_ic_irq_enable
000450c0 g     F .text	000001dc altera_avalon_uart_read
000483d0 g     O .rwdata	00000008 alt_alarm_list
00045840 g     F .text	0000005c _do_ctors
000435a4 g     F .text	000000d8 close
00043910 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
0004274c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408b14 	ori	at,at,556
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401cc0 	call	401cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10a7d704 	addi	r2,r2,-24740
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10a7d704 	addi	r2,r2,-24740
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffca5cc>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffca5c0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	e037883a 	mov	sp,fp
   401bc:	dfc00117 	ldw	ra,4(sp)
   401c0:	df000017 	ldw	fp,0(sp)
   401c4:	dec00204 	addi	sp,sp,8
   401c8:	f800283a 	ret

000401cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401cc:	defffb04 	addi	sp,sp,-20
   401d0:	dfc00415 	stw	ra,16(sp)
   401d4:	df000315 	stw	fp,12(sp)
   401d8:	df000304 	addi	fp,sp,12
   401dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e0:	00bfffc4 	movi	r2,-1
   401e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401ec:	d0a6e417 	ldw	r2,-25712(gp)
   401f0:	10000726 	beq	r2,zero,40210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f4:	d0a6e417 	ldw	r2,-25712(gp)
   401f8:	e0fffd17 	ldw	r3,-12(fp)
   401fc:	1809883a 	mov	r4,r3
   40200:	e17fff17 	ldw	r5,-4(fp)
   40204:	e1bffe17 	ldw	r6,-8(fp)
   40208:	103ee83a 	callr	r2
   4020c:	00000206 	br	40218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40214:	0005883a 	mov	r2,zero
}
   40218:	e037883a 	mov	sp,fp
   4021c:	dfc00117 	ldw	ra,4(sp)
   40220:	df000017 	ldw	fp,0(sp)
   40224:	dec00204 	addi	sp,sp,8
   40228:	f800283a 	ret

Disassembly of section .text:

0004022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   4022c:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40230:	ded6d814 	ori	sp,sp,23392
    movhi gp, %hi(_gp)
   40234:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40238:	d680e814 	ori	gp,gp,928
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   4023c:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40240:	10a7c214 	ori	r2,r2,40712

    movhi r3, %hi(__bss_end)
   40244:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40248:	18e81714 	ori	r3,r3,41052

    beq r2, r3, 1f
   4024c:	10c00326 	beq	r2,r3,4025c <_start+0x30>

0:
    stw zero, (r2)
   40250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40258:	10fffd36 	bltu	r2,r3,40250 <__alt_data_end+0xfffca6f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   4025c:	00439100 	call	43910 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40260:	0043abc0 	call	43abc <alt_main>

00040264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40264:	003fff06 	br	40264 <__alt_data_end+0xfffca704>

00040268 <main>:
 */

#include "./karplus/karplus.h"

int main()
{
   40268:	defffe04 	addi	sp,sp,-8
   4026c:	dfc00115 	stw	ra,4(sp)
   40270:	df000015 	stw	fp,0(sp)
   40274:	d839883a 	mov	fp,sp

	printf("Hello from Nios II!\n");
   40278:	01000134 	movhi	r4,4
   4027c:	211a1504 	addi	r4,r4,26708
   40280:	00409640 	call	40964 <puts>
	init_karplus();
   40284:	00406ec0 	call	406ec <init_karplus>
	set_karplus_frequency(44100);
   40288:	012b1114 	movui	r4,44100
   4028c:	00406940 	call	40694 <set_karplus_frequency>
	while(1)
	{
		play_tone(HIGH_E_0,100);
   40290:	010023c4 	movi	r4,143
   40294:	01401904 	movi	r5,100
   40298:	00406300 	call	40630 <play_tone>
		play_tone(B_0,100);
   4029c:	01002704 	movi	r4,156
   402a0:	01401904 	movi	r5,100
   402a4:	00406300 	call	40630 <play_tone>
		play_tone(G_0,100);
   402a8:	01003144 	movi	r4,197
   402ac:	01401904 	movi	r5,100
   402b0:	00406300 	call	40630 <play_tone>
		play_tone(D_0,100);
   402b4:	010041c4 	movi	r4,263
   402b8:	01401904 	movi	r5,100
   402bc:	00406300 	call	40630 <play_tone>
		play_tone(A_0,100);
   402c0:	010057c4 	movi	r4,351
   402c4:	01401904 	movi	r5,100
   402c8:	00406300 	call	40630 <play_tone>
		play_tone(LOW_E_0,100);
   402cc:	01007544 	movi	r4,469
   402d0:	01401904 	movi	r5,100
   402d4:	00406300 	call	40630 <play_tone>
		play_tone(HIGH_E_1,100);
   402d8:	010021c4 	movi	r4,135
   402dc:	01401904 	movi	r5,100
   402e0:	00406300 	call	40630 <play_tone>
		play_tone(B_1,100);
   402e4:	010024c4 	movi	r4,147
   402e8:	01401904 	movi	r5,100
   402ec:	00406300 	call	40630 <play_tone>
		play_tone(G_1,100);
   402f0:	01002e84 	movi	r4,186
   402f4:	01401904 	movi	r5,100
   402f8:	00406300 	call	40630 <play_tone>
		play_tone(D_1,100);
   402fc:	01003e04 	movi	r4,248
   40300:	01401904 	movi	r5,100
   40304:	00406300 	call	40630 <play_tone>
		play_tone(A_1,100);
   40308:	010052c4 	movi	r4,331
   4030c:	01401904 	movi	r5,100
   40310:	00406300 	call	40630 <play_tone>
		play_tone(LOW_E_1,100);
   40314:	01006e84 	movi	r4,442
   40318:	01401904 	movi	r5,100
   4031c:	00406300 	call	40630 <play_tone>
		play_tone(HIGH_E_2,100);
   40320:	01001fc4 	movi	r4,127
   40324:	01401904 	movi	r5,100
   40328:	00406300 	call	40630 <play_tone>
		play_tone(B_2,100);
   4032c:	010022c4 	movi	r4,139
   40330:	01401904 	movi	r5,100
   40334:	00406300 	call	40630 <play_tone>
		play_tone(G_2,100);
   40338:	01002bc4 	movi	r4,175
   4033c:	01401904 	movi	r5,100
   40340:	00406300 	call	40630 <play_tone>
		play_tone(D_2,100);
   40344:	01003a84 	movi	r4,234
   40348:	01401904 	movi	r5,100
   4034c:	00406300 	call	40630 <play_tone>
		play_tone(A_2,100);
   40350:	01004e44 	movi	r4,313
   40354:	01401904 	movi	r5,100
   40358:	00406300 	call	40630 <play_tone>
		play_tone(LOW_E_2,100);
   4035c:	01006844 	movi	r4,417
   40360:	01401904 	movi	r5,100
   40364:	00406300 	call	40630 <play_tone>
		play_tone(HIGH_E_3,100);
   40368:	01001e04 	movi	r4,120
   4036c:	01401904 	movi	r5,100
   40370:	00406300 	call	40630 <play_tone>
		play_tone(B_3,100);
   40374:	010020c4 	movi	r4,131
   40378:	01401904 	movi	r5,100
   4037c:	00406300 	call	40630 <play_tone>
		play_tone(G_3,100);
   40380:	01002944 	movi	r4,165
   40384:	01401904 	movi	r5,100
   40388:	00406300 	call	40630 <play_tone>
		play_tone(D_3,100);
   4038c:	01003744 	movi	r4,221
   40390:	01401904 	movi	r5,100
   40394:	00406300 	call	40630 <play_tone>
		play_tone(A_3,100);
   40398:	010049c4 	movi	r4,295
   4039c:	01401904 	movi	r5,100
   403a0:	00406300 	call	40630 <play_tone>
		play_tone(LOW_E_3,100);
   403a4:	01006284 	movi	r4,394
   403a8:	01401904 	movi	r5,100
   403ac:	00406300 	call	40630 <play_tone>
		play_tone(HIGH_E_4,100);
   403b0:	01001c44 	movi	r4,113
   403b4:	01401904 	movi	r5,100
   403b8:	00406300 	call	40630 <play_tone>
		play_tone(B_4,100);
   403bc:	01001f04 	movi	r4,124
   403c0:	01401904 	movi	r5,100
   403c4:	00406300 	call	40630 <play_tone>
		play_tone(G_4,100);
   403c8:	01002704 	movi	r4,156
   403cc:	01401904 	movi	r5,100
   403d0:	00406300 	call	40630 <play_tone>
		play_tone(D_4,100);
   403d4:	01003444 	movi	r4,209
   403d8:	01401904 	movi	r5,100
   403dc:	00406300 	call	40630 <play_tone>
		play_tone(A_4,100);
   403e0:	010045c4 	movi	r4,279
   403e4:	01401904 	movi	r5,100
   403e8:	00406300 	call	40630 <play_tone>
		play_tone(LOW_E_4,100);
   403ec:	01005d04 	movi	r4,372
   403f0:	01401904 	movi	r5,100
   403f4:	00406300 	call	40630 <play_tone>
		play_tone(HIGH_E_5,100);
   403f8:	01001ac4 	movi	r4,107
   403fc:	01401904 	movi	r5,100
   40400:	00406300 	call	40630 <play_tone>
		play_tone(B_5,100);
   40404:	01001d44 	movi	r4,117
   40408:	01401904 	movi	r5,100
   4040c:	00406300 	call	40630 <play_tone>
		play_tone(G_5,100);
   40410:	010024c4 	movi	r4,147
   40414:	01401904 	movi	r5,100
   40418:	00406300 	call	40630 <play_tone>
		play_tone(D_5,100);
   4041c:	01003144 	movi	r4,197
   40420:	01401904 	movi	r5,100
   40424:	00406300 	call	40630 <play_tone>
		play_tone(A_5,100);
   40428:	010041c4 	movi	r4,263
   4042c:	01401904 	movi	r5,100
   40430:	00406300 	call	40630 <play_tone>
		play_tone(LOW_E_5,100);
   40434:	010057c4 	movi	r4,351
   40438:	01401904 	movi	r5,100
   4043c:	00406300 	call	40630 <play_tone>
		play_tone(HIGH_E_6,100);
   40440:	01001944 	movi	r4,101
   40444:	01401904 	movi	r5,100
   40448:	00406300 	call	40630 <play_tone>
		play_tone(B_6,100);
   4044c:	01001b84 	movi	r4,110
   40450:	01401904 	movi	r5,100
   40454:	00406300 	call	40630 <play_tone>
		play_tone(G_6,100);
   40458:	010022c4 	movi	r4,139
   4045c:	01401904 	movi	r5,100
   40460:	00406300 	call	40630 <play_tone>
		play_tone(D_6,100);
   40464:	01002e84 	movi	r4,186
   40468:	01401904 	movi	r5,100
   4046c:	00406300 	call	40630 <play_tone>
		play_tone(A_6,100);
   40470:	01003e04 	movi	r4,248
   40474:	01401904 	movi	r5,100
   40478:	00406300 	call	40630 <play_tone>
		play_tone(LOW_E_6,100);
   4047c:	010052c4 	movi	r4,331
   40480:	01401904 	movi	r5,100
   40484:	00406300 	call	40630 <play_tone>
		play_tone(HIGH_E_7,100);
   40488:	010017c4 	movi	r4,95
   4048c:	01401904 	movi	r5,100
   40490:	00406300 	call	40630 <play_tone>
		play_tone(B_7,100);
   40494:	01001a04 	movi	r4,104
   40498:	01401904 	movi	r5,100
   4049c:	00406300 	call	40630 <play_tone>
		play_tone(G_7,100);
   404a0:	010020c4 	movi	r4,131
   404a4:	01401904 	movi	r5,100
   404a8:	00406300 	call	40630 <play_tone>
		play_tone(D_7,100);
   404ac:	01002c04 	movi	r4,176
   404b0:	01401904 	movi	r5,100
   404b4:	00406300 	call	40630 <play_tone>
		play_tone(A_7,100);
   404b8:	01003a84 	movi	r4,234
   404bc:	01401904 	movi	r5,100
   404c0:	00406300 	call	40630 <play_tone>
		play_tone(LOW_E_7,100);
   404c4:	01004e44 	movi	r4,313
   404c8:	01401904 	movi	r5,100
   404cc:	00406300 	call	40630 <play_tone>
		play_tone(HIGH_E_8,100);
   404d0:	01001684 	movi	r4,90
   404d4:	01401904 	movi	r5,100
   404d8:	00406300 	call	40630 <play_tone>
		play_tone(B_8,100);
   404dc:	01001884 	movi	r4,98
   404e0:	01401904 	movi	r5,100
   404e4:	00406300 	call	40630 <play_tone>
		play_tone(G_8,100);
   404e8:	01001f04 	movi	r4,124
   404ec:	01401904 	movi	r5,100
   404f0:	00406300 	call	40630 <play_tone>
		play_tone(D_8,100);
   404f4:	01002984 	movi	r4,166
   404f8:	01401904 	movi	r5,100
   404fc:	00406300 	call	40630 <play_tone>
		play_tone(A_8,100);
   40500:	01003744 	movi	r4,221
   40504:	01401904 	movi	r5,100
   40508:	00406300 	call	40630 <play_tone>
		play_tone(LOW_E_8,100);
   4050c:	010049c4 	movi	r4,295
   40510:	01401904 	movi	r5,100
   40514:	00406300 	call	40630 <play_tone>
		play_tone(HIGH_E_9,100);
   40518:	01001544 	movi	r4,85
   4051c:	01401904 	movi	r5,100
   40520:	00406300 	call	40630 <play_tone>
		play_tone(B_9,100);
   40524:	01001744 	movi	r4,93
   40528:	01401904 	movi	r5,100
   4052c:	00406300 	call	40630 <play_tone>
		play_tone(G_9,100);
   40530:	01001d44 	movi	r4,117
   40534:	01401904 	movi	r5,100
   40538:	00406300 	call	40630 <play_tone>
		play_tone(D_9,100);
   4053c:	01002704 	movi	r4,156
   40540:	01401904 	movi	r5,100
   40544:	00406300 	call	40630 <play_tone>
		play_tone(A_9,100);
   40548:	01003444 	movi	r4,209
   4054c:	01401904 	movi	r5,100
   40550:	00406300 	call	40630 <play_tone>
		play_tone(LOW_E_9,100);
   40554:	010045c4 	movi	r4,279
   40558:	01401904 	movi	r5,100
   4055c:	00406300 	call	40630 <play_tone>
	}
   40560:	003f4b06 	br	40290 <__alt_data_end+0xfffca730>

00040564 <inject_noise>:
 *      Author: Usuario
 */

#include "karplus.h"

void inject_noise(){
   40564:	defffc04 	addi	sp,sp,-16
   40568:	dfc00315 	stw	ra,12(sp)
   4056c:	df000215 	stw	fp,8(sp)
   40570:	df000204 	addi	fp,sp,8
	int i;
	int noise;
	IOWR(NOISE_EN_BASE,0,1);
   40574:	00c00044 	movi	r3,1
   40578:	00800234 	movhi	r2,8
   4057c:	10841804 	addi	r2,r2,4192
   40580:	10c00035 	stwio	r3,0(r2)
	for(i=0;i<500;i++)
   40584:	e03ffe15 	stw	zero,-8(fp)
   40588:	00001906 	br	405f0 <inject_noise+0x8c>
				{

					noise=rand()*255;
   4058c:	00409900 	call	40990 <rand>
   40590:	1009883a 	mov	r4,r2
   40594:	01403fc4 	movi	r5,255
   40598:	00408840 	call	40884 <__mulsi3>
   4059c:	e0bfff15 	stw	r2,-4(fp)
					IOWR(NOISE_BASE,0,noise & 0x7fff);
   405a0:	e0bfff17 	ldw	r2,-4(fp)
   405a4:	10dfffcc 	andi	r3,r2,32767
   405a8:	00800234 	movhi	r2,8
   405ac:	10841c04 	addi	r2,r2,4208
   405b0:	10c00035 	stwio	r3,0(r2)
					IOWR(NOISE_PULSE_BASE,0,0);
   405b4:	0007883a 	mov	r3,zero
   405b8:	00800234 	movhi	r2,8
   405bc:	10841004 	addi	r2,r2,4160
   405c0:	10c00035 	stwio	r3,0(r2)
					usleep(1);
   405c4:	01000044 	movi	r4,1
   405c8:	0043df80 	call	43df8 <usleep>
					IOWR(NOISE_PULSE_BASE,0,1);
   405cc:	00c00044 	movi	r3,1
   405d0:	00800234 	movhi	r2,8
   405d4:	10841004 	addi	r2,r2,4160
   405d8:	10c00035 	stwio	r3,0(r2)
					usleep(1);
   405dc:	01000044 	movi	r4,1
   405e0:	0043df80 	call	43df8 <usleep>

void inject_noise(){
	int i;
	int noise;
	IOWR(NOISE_EN_BASE,0,1);
	for(i=0;i<500;i++)
   405e4:	e0bffe17 	ldw	r2,-8(fp)
   405e8:	10800044 	addi	r2,r2,1
   405ec:	e0bffe15 	stw	r2,-8(fp)
   405f0:	e0bffe17 	ldw	r2,-8(fp)
   405f4:	10807d10 	cmplti	r2,r2,500
   405f8:	103fe41e 	bne	r2,zero,4058c <__alt_data_end+0xfffcaa2c>
					IOWR(NOISE_PULSE_BASE,0,0);
					usleep(1);
					IOWR(NOISE_PULSE_BASE,0,1);
					usleep(1);
				}
	IOWR(NOISE_PULSE_BASE,0,0);
   405fc:	0007883a 	mov	r3,zero
   40600:	00800234 	movhi	r2,8
   40604:	10841004 	addi	r2,r2,4160
   40608:	10c00035 	stwio	r3,0(r2)
	IOWR(NOISE_EN_BASE,0,0);
   4060c:	0007883a 	mov	r3,zero
   40610:	00800234 	movhi	r2,8
   40614:	10841804 	addi	r2,r2,4192
   40618:	10c00035 	stwio	r3,0(r2)
}
   4061c:	e037883a 	mov	sp,fp
   40620:	dfc00117 	ldw	ra,4(sp)
   40624:	df000017 	ldw	fp,0(sp)
   40628:	dec00204 	addi	sp,sp,8
   4062c:	f800283a 	ret

00040630 <play_tone>:

void play_tone(int nota, int time_ms){
   40630:	defffc04 	addi	sp,sp,-16
   40634:	dfc00315 	stw	ra,12(sp)
   40638:	df000215 	stw	fp,8(sp)
   4063c:	df000204 	addi	fp,sp,8
   40640:	e13ffe15 	stw	r4,-8(fp)
   40644:	e17fff15 	stw	r5,-4(fp)
	IOWR(NOISE_EN_BASE,0,1);
   40648:	00c00044 	movi	r3,1
   4064c:	00800234 	movhi	r2,8
   40650:	10841804 	addi	r2,r2,4192
   40654:	10c00035 	stwio	r3,0(r2)
	IOWR(SEL_NOTA_BASE,0,nota);
   40658:	00800234 	movhi	r2,8
   4065c:	10841404 	addi	r2,r2,4176
   40660:	e0fffe17 	ldw	r3,-8(fp)
   40664:	10c00035 	stwio	r3,0(r2)
	inject_noise();
   40668:	00405640 	call	40564 <inject_noise>
	usleep(time_ms*1000);
   4066c:	e13fff17 	ldw	r4,-4(fp)
   40670:	0140fa04 	movi	r5,1000
   40674:	00408840 	call	40884 <__mulsi3>
   40678:	1009883a 	mov	r4,r2
   4067c:	0043df80 	call	43df8 <usleep>
}
   40680:	e037883a 	mov	sp,fp
   40684:	dfc00117 	ldw	ra,4(sp)
   40688:	df000017 	ldw	fp,0(sp)
   4068c:	dec00204 	addi	sp,sp,8
   40690:	f800283a 	ret

00040694 <set_karplus_frequency>:

void set_karplus_frequency(int frecuencia){
   40694:	defffc04 	addi	sp,sp,-16
   40698:	dfc00315 	stw	ra,12(sp)
   4069c:	df000215 	stw	fp,8(sp)
   406a0:	df000204 	addi	fp,sp,8
   406a4:	e13fff15 	stw	r4,-4(fp)
	int in_freq=(50000000/(2*frecuencia))-1;
   406a8:	e0bfff17 	ldw	r2,-4(fp)
   406ac:	1085883a 	add	r2,r2,r2
   406b0:	0100bef4 	movhi	r4,763
   406b4:	213c2004 	addi	r4,r4,-3968
   406b8:	100b883a 	mov	r5,r2
   406bc:	00407c40 	call	407c4 <__divsi3>
   406c0:	10bfffc4 	addi	r2,r2,-1
   406c4:	e0bffe15 	stw	r2,-8(fp)
	IOWR(DIV_FREQ_BASE,0,in_freq);
   406c8:	00800234 	movhi	r2,8
   406cc:	10842004 	addi	r2,r2,4224
   406d0:	e0fffe17 	ldw	r3,-8(fp)
   406d4:	10c00035 	stwio	r3,0(r2)
}
   406d8:	e037883a 	mov	sp,fp
   406dc:	dfc00117 	ldw	ra,4(sp)
   406e0:	df000017 	ldw	fp,0(sp)
   406e4:	dec00204 	addi	sp,sp,8
   406e8:	f800283a 	ret

000406ec <init_karplus>:

void init_karplus(){
   406ec:	defffe04 	addi	sp,sp,-8
   406f0:	dfc00115 	stw	ra,4(sp)
   406f4:	df000015 	stw	fp,0(sp)
   406f8:	d839883a 	mov	fp,sp
	IOWR(NOISE_BASE,0,0);
   406fc:	0007883a 	mov	r3,zero
   40700:	00800234 	movhi	r2,8
   40704:	10841c04 	addi	r2,r2,4208
   40708:	10c00035 	stwio	r3,0(r2)
	IOWR(NOISE_EN_BASE,0,0);
   4070c:	0007883a 	mov	r3,zero
   40710:	00800234 	movhi	r2,8
   40714:	10841804 	addi	r2,r2,4192
   40718:	10c00035 	stwio	r3,0(r2)
	IOWR(SEL_NOTA_BASE,0,0);
   4071c:	0007883a 	mov	r3,zero
   40720:	00800234 	movhi	r2,8
   40724:	10841404 	addi	r2,r2,4176
   40728:	10c00035 	stwio	r3,0(r2)
	IOWR(NOISE_PULSE_BASE,0,0);
   4072c:	0007883a 	mov	r3,zero
   40730:	00800234 	movhi	r2,8
   40734:	10841004 	addi	r2,r2,4160
   40738:	10c00035 	stwio	r3,0(r2)

	set_karplus_frequency(44100);
   4073c:	012b1114 	movui	r4,44100
   40740:	00406940 	call	40694 <set_karplus_frequency>
}
   40744:	e037883a 	mov	sp,fp
   40748:	dfc00117 	ldw	ra,4(sp)
   4074c:	df000017 	ldw	fp,0(sp)
   40750:	dec00204 	addi	sp,sp,8
   40754:	f800283a 	ret

00040758 <udivmodsi4>:
   40758:	2900182e 	bgeu	r5,r4,407bc <udivmodsi4+0x64>
   4075c:	28001716 	blt	r5,zero,407bc <udivmodsi4+0x64>
   40760:	00800804 	movi	r2,32
   40764:	00c00044 	movi	r3,1
   40768:	00000206 	br	40774 <udivmodsi4+0x1c>
   4076c:	10001126 	beq	r2,zero,407b4 <udivmodsi4+0x5c>
   40770:	28000516 	blt	r5,zero,40788 <udivmodsi4+0x30>
   40774:	294b883a 	add	r5,r5,r5
   40778:	10bfffc4 	addi	r2,r2,-1
   4077c:	18c7883a 	add	r3,r3,r3
   40780:	293ffa36 	bltu	r5,r4,4076c <__alt_data_end+0xfffcac0c>
   40784:	18000b26 	beq	r3,zero,407b4 <udivmodsi4+0x5c>
   40788:	0005883a 	mov	r2,zero
   4078c:	21400236 	bltu	r4,r5,40798 <udivmodsi4+0x40>
   40790:	2149c83a 	sub	r4,r4,r5
   40794:	10c4b03a 	or	r2,r2,r3
   40798:	1806d07a 	srli	r3,r3,1
   4079c:	280ad07a 	srli	r5,r5,1
   407a0:	183ffa1e 	bne	r3,zero,4078c <__alt_data_end+0xfffcac2c>
   407a4:	3000011e 	bne	r6,zero,407ac <udivmodsi4+0x54>
   407a8:	f800283a 	ret
   407ac:	2005883a 	mov	r2,r4
   407b0:	f800283a 	ret
   407b4:	0005883a 	mov	r2,zero
   407b8:	003ffa06 	br	407a4 <__alt_data_end+0xfffcac44>
   407bc:	00c00044 	movi	r3,1
   407c0:	003ff106 	br	40788 <__alt_data_end+0xfffcac28>

000407c4 <__divsi3>:
   407c4:	defffe04 	addi	sp,sp,-8
   407c8:	dfc00115 	stw	ra,4(sp)
   407cc:	dc000015 	stw	r16,0(sp)
   407d0:	20000b16 	blt	r4,zero,40800 <__divsi3+0x3c>
   407d4:	0021883a 	mov	r16,zero
   407d8:	28000c16 	blt	r5,zero,4080c <__divsi3+0x48>
   407dc:	000d883a 	mov	r6,zero
   407e0:	00407580 	call	40758 <udivmodsi4>
   407e4:	0407c83a 	sub	r3,zero,r16
   407e8:	1884f03a 	xor	r2,r3,r2
   407ec:	1405883a 	add	r2,r2,r16
   407f0:	dfc00117 	ldw	ra,4(sp)
   407f4:	dc000017 	ldw	r16,0(sp)
   407f8:	dec00204 	addi	sp,sp,8
   407fc:	f800283a 	ret
   40800:	0109c83a 	sub	r4,zero,r4
   40804:	04000044 	movi	r16,1
   40808:	283ff40e 	bge	r5,zero,407dc <__alt_data_end+0xfffcac7c>
   4080c:	014bc83a 	sub	r5,zero,r5
   40810:	8400005c 	xori	r16,r16,1
   40814:	003ff106 	br	407dc <__alt_data_end+0xfffcac7c>

00040818 <__modsi3>:
   40818:	defffd04 	addi	sp,sp,-12
   4081c:	dfc00215 	stw	ra,8(sp)
   40820:	dc400115 	stw	r17,4(sp)
   40824:	dc000015 	stw	r16,0(sp)
   40828:	20000c16 	blt	r4,zero,4085c <__modsi3+0x44>
   4082c:	0023883a 	mov	r17,zero
   40830:	0021883a 	mov	r16,zero
   40834:	28000d16 	blt	r5,zero,4086c <__modsi3+0x54>
   40838:	01800044 	movi	r6,1
   4083c:	00407580 	call	40758 <udivmodsi4>
   40840:	1404f03a 	xor	r2,r2,r16
   40844:	8885883a 	add	r2,r17,r2
   40848:	dfc00217 	ldw	ra,8(sp)
   4084c:	dc400117 	ldw	r17,4(sp)
   40850:	dc000017 	ldw	r16,0(sp)
   40854:	dec00304 	addi	sp,sp,12
   40858:	f800283a 	ret
   4085c:	0109c83a 	sub	r4,zero,r4
   40860:	04400044 	movi	r17,1
   40864:	043fffc4 	movi	r16,-1
   40868:	283ff30e 	bge	r5,zero,40838 <__alt_data_end+0xfffcacd8>
   4086c:	014bc83a 	sub	r5,zero,r5
   40870:	003ff106 	br	40838 <__alt_data_end+0xfffcacd8>

00040874 <__udivsi3>:
   40874:	000d883a 	mov	r6,zero
   40878:	00407581 	jmpi	40758 <udivmodsi4>

0004087c <__umodsi3>:
   4087c:	01800044 	movi	r6,1
   40880:	00407581 	jmpi	40758 <udivmodsi4>

00040884 <__mulsi3>:
   40884:	0005883a 	mov	r2,zero
   40888:	20000726 	beq	r4,zero,408a8 <__mulsi3+0x24>
   4088c:	20c0004c 	andi	r3,r4,1
   40890:	2008d07a 	srli	r4,r4,1
   40894:	18000126 	beq	r3,zero,4089c <__mulsi3+0x18>
   40898:	1145883a 	add	r2,r2,r5
   4089c:	294b883a 	add	r5,r5,r5
   408a0:	203ffa1e 	bne	r4,zero,4088c <__alt_data_end+0xfffcad2c>
   408a4:	f800283a 	ret
   408a8:	f800283a 	ret

000408ac <_puts_r>:
   408ac:	defff604 	addi	sp,sp,-40
   408b0:	dc000715 	stw	r16,28(sp)
   408b4:	2021883a 	mov	r16,r4
   408b8:	2809883a 	mov	r4,r5
   408bc:	dc400815 	stw	r17,32(sp)
   408c0:	dfc00915 	stw	ra,36(sp)
   408c4:	2823883a 	mov	r17,r5
   408c8:	00409f40 	call	409f4 <strlen>
   408cc:	00c00174 	movhi	r3,5
   408d0:	18e0e904 	addi	r3,r3,-31836
   408d4:	18c00017 	ldw	r3,0(r3)
   408d8:	11000044 	addi	r4,r2,1
   408dc:	d8800115 	stw	r2,4(sp)
   408e0:	18c00217 	ldw	r3,8(r3)
   408e4:	01400134 	movhi	r5,4
   408e8:	295a1a04 	addi	r5,r5,26728
   408ec:	1880030b 	ldhu	r2,12(r3)
   408f0:	d9400215 	stw	r5,8(sp)
   408f4:	d9000615 	stw	r4,24(sp)
   408f8:	01400044 	movi	r5,1
   408fc:	01000084 	movi	r4,2
   40900:	d9000515 	stw	r4,20(sp)
   40904:	dc400015 	stw	r17,0(sp)
   40908:	d9400315 	stw	r5,12(sp)
   4090c:	dec00415 	stw	sp,16(sp)
   40910:	1108000c 	andi	r4,r2,8192
   40914:	2000061e 	bne	r4,zero,40930 <_puts_r+0x84>
   40918:	19401917 	ldw	r5,100(r3)
   4091c:	0137ffc4 	movi	r4,-8193
   40920:	10880014 	ori	r2,r2,8192
   40924:	2908703a 	and	r4,r5,r4
   40928:	1880030d 	sth	r2,12(r3)
   4092c:	19001915 	stw	r4,100(r3)
   40930:	81400217 	ldw	r5,8(r16)
   40934:	8009883a 	mov	r4,r16
   40938:	d9800404 	addi	r6,sp,16
   4093c:	0040a8c0 	call	40a8c <__sfvwrite_r>
   40940:	1000061e 	bne	r2,zero,4095c <_puts_r+0xb0>
   40944:	00800284 	movi	r2,10
   40948:	dfc00917 	ldw	ra,36(sp)
   4094c:	dc400817 	ldw	r17,32(sp)
   40950:	dc000717 	ldw	r16,28(sp)
   40954:	dec00a04 	addi	sp,sp,40
   40958:	f800283a 	ret
   4095c:	00bfffc4 	movi	r2,-1
   40960:	003ff906 	br	40948 <__alt_data_end+0xfffcade8>

00040964 <puts>:
   40964:	00800174 	movhi	r2,5
   40968:	10a0e904 	addi	r2,r2,-31836
   4096c:	200b883a 	mov	r5,r4
   40970:	11000017 	ldw	r4,0(r2)
   40974:	00408ac1 	jmpi	408ac <_puts_r>

00040978 <srand>:
   40978:	00800174 	movhi	r2,5
   4097c:	10a0e904 	addi	r2,r2,-31836
   40980:	10800017 	ldw	r2,0(r2)
   40984:	11002915 	stw	r4,164(r2)
   40988:	10002a15 	stw	zero,168(r2)
   4098c:	f800283a 	ret

00040990 <rand>:
   40990:	00800174 	movhi	r2,5
   40994:	defffe04 	addi	sp,sp,-8
   40998:	10a0e904 	addi	r2,r2,-31836
   4099c:	dc000015 	stw	r16,0(sp)
   409a0:	14000017 	ldw	r16,0(r2)
   409a4:	dfc00115 	stw	ra,4(sp)
   409a8:	01932574 	movhi	r6,19605
   409ac:	81002917 	ldw	r4,164(r16)
   409b0:	81402a17 	ldw	r5,168(r16)
   409b4:	01d614b4 	movhi	r7,22610
   409b8:	319fcb44 	addi	r6,r6,32557
   409bc:	39fd0b44 	addi	r7,r7,-3027
   409c0:	00434480 	call	43448 <__muldi3>
   409c4:	11000044 	addi	r4,r2,1
   409c8:	2085803a 	cmpltu	r2,r4,r2
   409cc:	10c7883a 	add	r3,r2,r3
   409d0:	00a00034 	movhi	r2,32768
   409d4:	10bfffc4 	addi	r2,r2,-1
   409d8:	1884703a 	and	r2,r3,r2
   409dc:	81002915 	stw	r4,164(r16)
   409e0:	80c02a15 	stw	r3,168(r16)
   409e4:	dfc00117 	ldw	ra,4(sp)
   409e8:	dc000017 	ldw	r16,0(sp)
   409ec:	dec00204 	addi	sp,sp,8
   409f0:	f800283a 	ret

000409f4 <strlen>:
   409f4:	208000cc 	andi	r2,r4,3
   409f8:	10002026 	beq	r2,zero,40a7c <strlen+0x88>
   409fc:	20800007 	ldb	r2,0(r4)
   40a00:	10002026 	beq	r2,zero,40a84 <strlen+0x90>
   40a04:	2005883a 	mov	r2,r4
   40a08:	00000206 	br	40a14 <strlen+0x20>
   40a0c:	10c00007 	ldb	r3,0(r2)
   40a10:	18001826 	beq	r3,zero,40a74 <strlen+0x80>
   40a14:	10800044 	addi	r2,r2,1
   40a18:	10c000cc 	andi	r3,r2,3
   40a1c:	183ffb1e 	bne	r3,zero,40a0c <__alt_data_end+0xfffcaeac>
   40a20:	10c00017 	ldw	r3,0(r2)
   40a24:	01ffbff4 	movhi	r7,65279
   40a28:	39ffbfc4 	addi	r7,r7,-257
   40a2c:	00ca303a 	nor	r5,zero,r3
   40a30:	01a02074 	movhi	r6,32897
   40a34:	19c7883a 	add	r3,r3,r7
   40a38:	31a02004 	addi	r6,r6,-32640
   40a3c:	1946703a 	and	r3,r3,r5
   40a40:	1986703a 	and	r3,r3,r6
   40a44:	1800091e 	bne	r3,zero,40a6c <strlen+0x78>
   40a48:	10800104 	addi	r2,r2,4
   40a4c:	10c00017 	ldw	r3,0(r2)
   40a50:	19cb883a 	add	r5,r3,r7
   40a54:	00c6303a 	nor	r3,zero,r3
   40a58:	28c6703a 	and	r3,r5,r3
   40a5c:	1986703a 	and	r3,r3,r6
   40a60:	183ff926 	beq	r3,zero,40a48 <__alt_data_end+0xfffcaee8>
   40a64:	00000106 	br	40a6c <strlen+0x78>
   40a68:	10800044 	addi	r2,r2,1
   40a6c:	10c00007 	ldb	r3,0(r2)
   40a70:	183ffd1e 	bne	r3,zero,40a68 <__alt_data_end+0xfffcaf08>
   40a74:	1105c83a 	sub	r2,r2,r4
   40a78:	f800283a 	ret
   40a7c:	2005883a 	mov	r2,r4
   40a80:	003fe706 	br	40a20 <__alt_data_end+0xfffcaec0>
   40a84:	0005883a 	mov	r2,zero
   40a88:	f800283a 	ret

00040a8c <__sfvwrite_r>:
   40a8c:	30800217 	ldw	r2,8(r6)
   40a90:	10004526 	beq	r2,zero,40ba8 <__sfvwrite_r+0x11c>
   40a94:	28c0030b 	ldhu	r3,12(r5)
   40a98:	defff404 	addi	sp,sp,-48
   40a9c:	dd400715 	stw	r21,28(sp)
   40aa0:	dcc00515 	stw	r19,20(sp)
   40aa4:	dc000215 	stw	r16,8(sp)
   40aa8:	dfc00b15 	stw	ra,44(sp)
   40aac:	df000a15 	stw	fp,40(sp)
   40ab0:	ddc00915 	stw	r23,36(sp)
   40ab4:	dd800815 	stw	r22,32(sp)
   40ab8:	dd000615 	stw	r20,24(sp)
   40abc:	dc800415 	stw	r18,16(sp)
   40ac0:	dc400315 	stw	r17,12(sp)
   40ac4:	1880020c 	andi	r2,r3,8
   40ac8:	2821883a 	mov	r16,r5
   40acc:	202b883a 	mov	r21,r4
   40ad0:	3027883a 	mov	r19,r6
   40ad4:	10002526 	beq	r2,zero,40b6c <__sfvwrite_r+0xe0>
   40ad8:	28800417 	ldw	r2,16(r5)
   40adc:	10002326 	beq	r2,zero,40b6c <__sfvwrite_r+0xe0>
   40ae0:	1880008c 	andi	r2,r3,2
   40ae4:	9c400017 	ldw	r17,0(r19)
   40ae8:	10003126 	beq	r2,zero,40bb0 <__sfvwrite_r+0x124>
   40aec:	0029883a 	mov	r20,zero
   40af0:	0025883a 	mov	r18,zero
   40af4:	05810004 	movi	r22,1024
   40af8:	a00d883a 	mov	r6,r20
   40afc:	a809883a 	mov	r4,r21
   40b00:	90002526 	beq	r18,zero,40b98 <__sfvwrite_r+0x10c>
   40b04:	900f883a 	mov	r7,r18
   40b08:	81400717 	ldw	r5,28(r16)
   40b0c:	b480012e 	bgeu	r22,r18,40b14 <__sfvwrite_r+0x88>
   40b10:	01c10004 	movi	r7,1024
   40b14:	80800917 	ldw	r2,36(r16)
   40b18:	103ee83a 	callr	r2
   40b1c:	0080510e 	bge	zero,r2,40c64 <__sfvwrite_r+0x1d8>
   40b20:	98c00217 	ldw	r3,8(r19)
   40b24:	a0a9883a 	add	r20,r20,r2
   40b28:	90a5c83a 	sub	r18,r18,r2
   40b2c:	1885c83a 	sub	r2,r3,r2
   40b30:	98800215 	stw	r2,8(r19)
   40b34:	103ff01e 	bne	r2,zero,40af8 <__alt_data_end+0xfffcaf98>
   40b38:	0005883a 	mov	r2,zero
   40b3c:	dfc00b17 	ldw	ra,44(sp)
   40b40:	df000a17 	ldw	fp,40(sp)
   40b44:	ddc00917 	ldw	r23,36(sp)
   40b48:	dd800817 	ldw	r22,32(sp)
   40b4c:	dd400717 	ldw	r21,28(sp)
   40b50:	dd000617 	ldw	r20,24(sp)
   40b54:	dcc00517 	ldw	r19,20(sp)
   40b58:	dc800417 	ldw	r18,16(sp)
   40b5c:	dc400317 	ldw	r17,12(sp)
   40b60:	dc000217 	ldw	r16,8(sp)
   40b64:	dec00c04 	addi	sp,sp,48
   40b68:	f800283a 	ret
   40b6c:	a809883a 	mov	r4,r21
   40b70:	800b883a 	mov	r5,r16
   40b74:	00420480 	call	42048 <__swsetup_r>
   40b78:	80c0030b 	ldhu	r3,12(r16)
   40b7c:	103fd826 	beq	r2,zero,40ae0 <__alt_data_end+0xfffcaf80>
   40b80:	18c01014 	ori	r3,r3,64
   40b84:	80c0030d 	sth	r3,12(r16)
   40b88:	00c00244 	movi	r3,9
   40b8c:	00bfffc4 	movi	r2,-1
   40b90:	a8c00015 	stw	r3,0(r21)
   40b94:	003fe906 	br	40b3c <__alt_data_end+0xfffcafdc>
   40b98:	8d000017 	ldw	r20,0(r17)
   40b9c:	8c800117 	ldw	r18,4(r17)
   40ba0:	8c400204 	addi	r17,r17,8
   40ba4:	003fd406 	br	40af8 <__alt_data_end+0xfffcaf98>
   40ba8:	0005883a 	mov	r2,zero
   40bac:	f800283a 	ret
   40bb0:	1880004c 	andi	r2,r3,1
   40bb4:	1000301e 	bne	r2,zero,40c78 <__sfvwrite_r+0x1ec>
   40bb8:	002f883a 	mov	r23,zero
   40bbc:	0025883a 	mov	r18,zero
   40bc0:	90001c26 	beq	r18,zero,40c34 <__sfvwrite_r+0x1a8>
   40bc4:	1880800c 	andi	r2,r3,512
   40bc8:	85000217 	ldw	r20,8(r16)
   40bcc:	10006c26 	beq	r2,zero,40d80 <__sfvwrite_r+0x2f4>
   40bd0:	a02d883a 	mov	r22,r20
   40bd4:	95008536 	bltu	r18,r20,40dec <__sfvwrite_r+0x360>
   40bd8:	1881200c 	andi	r2,r3,1152
   40bdc:	10009d1e 	bne	r2,zero,40e54 <__sfvwrite_r+0x3c8>
   40be0:	81000017 	ldw	r4,0(r16)
   40be4:	a039883a 	mov	fp,r20
   40be8:	9029883a 	mov	r20,r18
   40bec:	b80b883a 	mov	r5,r23
   40bf0:	b00d883a 	mov	r6,r22
   40bf4:	00418f80 	call	418f8 <memmove>
   40bf8:	80c00217 	ldw	r3,8(r16)
   40bfc:	81000017 	ldw	r4,0(r16)
   40c00:	9005883a 	mov	r2,r18
   40c04:	1f39c83a 	sub	fp,r3,fp
   40c08:	258f883a 	add	r7,r4,r22
   40c0c:	87000215 	stw	fp,8(r16)
   40c10:	81c00015 	stw	r7,0(r16)
   40c14:	98c00217 	ldw	r3,8(r19)
   40c18:	b8af883a 	add	r23,r23,r2
   40c1c:	90a5c83a 	sub	r18,r18,r2
   40c20:	1d05c83a 	sub	r2,r3,r20
   40c24:	98800215 	stw	r2,8(r19)
   40c28:	103fc326 	beq	r2,zero,40b38 <__alt_data_end+0xfffcafd8>
   40c2c:	80c0030b 	ldhu	r3,12(r16)
   40c30:	903fe41e 	bne	r18,zero,40bc4 <__alt_data_end+0xfffcb064>
   40c34:	8dc00017 	ldw	r23,0(r17)
   40c38:	8c800117 	ldw	r18,4(r17)
   40c3c:	8c400204 	addi	r17,r17,8
   40c40:	003fdf06 	br	40bc0 <__alt_data_end+0xfffcb060>
   40c44:	0041a540 	call	41a54 <_realloc_r>
   40c48:	102d883a 	mov	r22,r2
   40c4c:	1000a01e 	bne	r2,zero,40ed0 <__sfvwrite_r+0x444>
   40c50:	81400417 	ldw	r5,16(r16)
   40c54:	a809883a 	mov	r4,r21
   40c58:	00428a80 	call	428a8 <_free_r>
   40c5c:	00800304 	movi	r2,12
   40c60:	a8800015 	stw	r2,0(r21)
   40c64:	80c0030b 	ldhu	r3,12(r16)
   40c68:	00bfffc4 	movi	r2,-1
   40c6c:	18c01014 	ori	r3,r3,64
   40c70:	80c0030d 	sth	r3,12(r16)
   40c74:	003fb106 	br	40b3c <__alt_data_end+0xfffcafdc>
   40c78:	0029883a 	mov	r20,zero
   40c7c:	0011883a 	mov	r8,zero
   40c80:	0039883a 	mov	fp,zero
   40c84:	0025883a 	mov	r18,zero
   40c88:	90001f26 	beq	r18,zero,40d08 <__sfvwrite_r+0x27c>
   40c8c:	40006826 	beq	r8,zero,40e30 <__sfvwrite_r+0x3a4>
   40c90:	a02f883a 	mov	r23,r20
   40c94:	9500012e 	bgeu	r18,r20,40c9c <__sfvwrite_r+0x210>
   40c98:	902f883a 	mov	r23,r18
   40c9c:	81000017 	ldw	r4,0(r16)
   40ca0:	80800417 	ldw	r2,16(r16)
   40ca4:	b82d883a 	mov	r22,r23
   40ca8:	81800217 	ldw	r6,8(r16)
   40cac:	81c00517 	ldw	r7,20(r16)
   40cb0:	1100022e 	bgeu	r2,r4,40cbc <__sfvwrite_r+0x230>
   40cb4:	31c7883a 	add	r3,r6,r7
   40cb8:	1dc01816 	blt	r3,r23,40d1c <__sfvwrite_r+0x290>
   40cbc:	b9c03f16 	blt	r23,r7,40dbc <__sfvwrite_r+0x330>
   40cc0:	80800917 	ldw	r2,36(r16)
   40cc4:	81400717 	ldw	r5,28(r16)
   40cc8:	a809883a 	mov	r4,r21
   40ccc:	da000115 	stw	r8,4(sp)
   40cd0:	e00d883a 	mov	r6,fp
   40cd4:	103ee83a 	callr	r2
   40cd8:	102d883a 	mov	r22,r2
   40cdc:	da000117 	ldw	r8,4(sp)
   40ce0:	00bfe00e 	bge	zero,r2,40c64 <__alt_data_end+0xfffcb104>
   40ce4:	a5a9c83a 	sub	r20,r20,r22
   40ce8:	a0001f26 	beq	r20,zero,40d68 <__sfvwrite_r+0x2dc>
   40cec:	98800217 	ldw	r2,8(r19)
   40cf0:	e5b9883a 	add	fp,fp,r22
   40cf4:	95a5c83a 	sub	r18,r18,r22
   40cf8:	15adc83a 	sub	r22,r2,r22
   40cfc:	9d800215 	stw	r22,8(r19)
   40d00:	b03f8d26 	beq	r22,zero,40b38 <__alt_data_end+0xfffcafd8>
   40d04:	903fe11e 	bne	r18,zero,40c8c <__alt_data_end+0xfffcb12c>
   40d08:	8f000017 	ldw	fp,0(r17)
   40d0c:	8c800117 	ldw	r18,4(r17)
   40d10:	0011883a 	mov	r8,zero
   40d14:	8c400204 	addi	r17,r17,8
   40d18:	003fdb06 	br	40c88 <__alt_data_end+0xfffcb128>
   40d1c:	180d883a 	mov	r6,r3
   40d20:	e00b883a 	mov	r5,fp
   40d24:	da000115 	stw	r8,4(sp)
   40d28:	d8c00015 	stw	r3,0(sp)
   40d2c:	00418f80 	call	418f8 <memmove>
   40d30:	d8c00017 	ldw	r3,0(sp)
   40d34:	80800017 	ldw	r2,0(r16)
   40d38:	a809883a 	mov	r4,r21
   40d3c:	800b883a 	mov	r5,r16
   40d40:	10c5883a 	add	r2,r2,r3
   40d44:	80800015 	stw	r2,0(r16)
   40d48:	d8c00015 	stw	r3,0(sp)
   40d4c:	00421780 	call	42178 <_fflush_r>
   40d50:	d8c00017 	ldw	r3,0(sp)
   40d54:	da000117 	ldw	r8,4(sp)
   40d58:	103fc21e 	bne	r2,zero,40c64 <__alt_data_end+0xfffcb104>
   40d5c:	182d883a 	mov	r22,r3
   40d60:	a5a9c83a 	sub	r20,r20,r22
   40d64:	a03fe11e 	bne	r20,zero,40cec <__alt_data_end+0xfffcb18c>
   40d68:	a809883a 	mov	r4,r21
   40d6c:	800b883a 	mov	r5,r16
   40d70:	00421780 	call	42178 <_fflush_r>
   40d74:	103fbb1e 	bne	r2,zero,40c64 <__alt_data_end+0xfffcb104>
   40d78:	0011883a 	mov	r8,zero
   40d7c:	003fdb06 	br	40cec <__alt_data_end+0xfffcb18c>
   40d80:	81000017 	ldw	r4,0(r16)
   40d84:	80800417 	ldw	r2,16(r16)
   40d88:	1100012e 	bgeu	r2,r4,40d90 <__sfvwrite_r+0x304>
   40d8c:	a4805a36 	bltu	r20,r18,40ef8 <__sfvwrite_r+0x46c>
   40d90:	81c00517 	ldw	r7,20(r16)
   40d94:	91c01a36 	bltu	r18,r7,40e00 <__sfvwrite_r+0x374>
   40d98:	80800917 	ldw	r2,36(r16)
   40d9c:	81400717 	ldw	r5,28(r16)
   40da0:	a809883a 	mov	r4,r21
   40da4:	b80d883a 	mov	r6,r23
   40da8:	103ee83a 	callr	r2
   40dac:	1029883a 	mov	r20,r2
   40db0:	00bfac0e 	bge	zero,r2,40c64 <__alt_data_end+0xfffcb104>
   40db4:	a005883a 	mov	r2,r20
   40db8:	003f9606 	br	40c14 <__alt_data_end+0xfffcb0b4>
   40dbc:	b80d883a 	mov	r6,r23
   40dc0:	e00b883a 	mov	r5,fp
   40dc4:	da000115 	stw	r8,4(sp)
   40dc8:	00418f80 	call	418f8 <memmove>
   40dcc:	80800217 	ldw	r2,8(r16)
   40dd0:	80c00017 	ldw	r3,0(r16)
   40dd4:	da000117 	ldw	r8,4(sp)
   40dd8:	15c5c83a 	sub	r2,r2,r23
   40ddc:	1def883a 	add	r23,r3,r23
   40de0:	80800215 	stw	r2,8(r16)
   40de4:	85c00015 	stw	r23,0(r16)
   40de8:	003fbe06 	br	40ce4 <__alt_data_end+0xfffcb184>
   40dec:	81000017 	ldw	r4,0(r16)
   40df0:	9039883a 	mov	fp,r18
   40df4:	9029883a 	mov	r20,r18
   40df8:	902d883a 	mov	r22,r18
   40dfc:	003f7b06 	br	40bec <__alt_data_end+0xfffcb08c>
   40e00:	b80b883a 	mov	r5,r23
   40e04:	900d883a 	mov	r6,r18
   40e08:	00418f80 	call	418f8 <memmove>
   40e0c:	80c00217 	ldw	r3,8(r16)
   40e10:	80800017 	ldw	r2,0(r16)
   40e14:	9029883a 	mov	r20,r18
   40e18:	1c87c83a 	sub	r3,r3,r18
   40e1c:	1485883a 	add	r2,r2,r18
   40e20:	80800015 	stw	r2,0(r16)
   40e24:	80c00215 	stw	r3,8(r16)
   40e28:	9005883a 	mov	r2,r18
   40e2c:	003f7906 	br	40c14 <__alt_data_end+0xfffcb0b4>
   40e30:	e009883a 	mov	r4,fp
   40e34:	01400284 	movi	r5,10
   40e38:	900d883a 	mov	r6,r18
   40e3c:	00416d80 	call	416d8 <memchr>
   40e40:	10003826 	beq	r2,zero,40f24 <__sfvwrite_r+0x498>
   40e44:	10800044 	addi	r2,r2,1
   40e48:	1729c83a 	sub	r20,r2,fp
   40e4c:	02000044 	movi	r8,1
   40e50:	003f8f06 	br	40c90 <__alt_data_end+0xfffcb130>
   40e54:	80800517 	ldw	r2,20(r16)
   40e58:	81400417 	ldw	r5,16(r16)
   40e5c:	87000017 	ldw	fp,0(r16)
   40e60:	10a9883a 	add	r20,r2,r2
   40e64:	a085883a 	add	r2,r20,r2
   40e68:	1028d7fa 	srli	r20,r2,31
   40e6c:	e179c83a 	sub	fp,fp,r5
   40e70:	e1000044 	addi	r4,fp,1
   40e74:	a085883a 	add	r2,r20,r2
   40e78:	1029d07a 	srai	r20,r2,1
   40e7c:	2485883a 	add	r2,r4,r18
   40e80:	a00d883a 	mov	r6,r20
   40e84:	a080022e 	bgeu	r20,r2,40e90 <__sfvwrite_r+0x404>
   40e88:	1029883a 	mov	r20,r2
   40e8c:	100d883a 	mov	r6,r2
   40e90:	18c1000c 	andi	r3,r3,1024
   40e94:	a809883a 	mov	r4,r21
   40e98:	183f6a26 	beq	r3,zero,40c44 <__alt_data_end+0xfffcb0e4>
   40e9c:	300b883a 	mov	r5,r6
   40ea0:	0040f300 	call	40f30 <_malloc_r>
   40ea4:	102d883a 	mov	r22,r2
   40ea8:	103f6c26 	beq	r2,zero,40c5c <__alt_data_end+0xfffcb0fc>
   40eac:	81400417 	ldw	r5,16(r16)
   40eb0:	1009883a 	mov	r4,r2
   40eb4:	e00d883a 	mov	r6,fp
   40eb8:	00417c00 	call	417c0 <memcpy>
   40ebc:	8080030b 	ldhu	r2,12(r16)
   40ec0:	00fedfc4 	movi	r3,-1153
   40ec4:	10c4703a 	and	r2,r2,r3
   40ec8:	10802014 	ori	r2,r2,128
   40ecc:	8080030d 	sth	r2,12(r16)
   40ed0:	b709883a 	add	r4,r22,fp
   40ed4:	a707c83a 	sub	r3,r20,fp
   40ed8:	85800415 	stw	r22,16(r16)
   40edc:	85000515 	stw	r20,20(r16)
   40ee0:	81000015 	stw	r4,0(r16)
   40ee4:	9039883a 	mov	fp,r18
   40ee8:	80c00215 	stw	r3,8(r16)
   40eec:	9029883a 	mov	r20,r18
   40ef0:	902d883a 	mov	r22,r18
   40ef4:	003f3d06 	br	40bec <__alt_data_end+0xfffcb08c>
   40ef8:	b80b883a 	mov	r5,r23
   40efc:	a00d883a 	mov	r6,r20
   40f00:	00418f80 	call	418f8 <memmove>
   40f04:	80800017 	ldw	r2,0(r16)
   40f08:	a809883a 	mov	r4,r21
   40f0c:	800b883a 	mov	r5,r16
   40f10:	1505883a 	add	r2,r2,r20
   40f14:	80800015 	stw	r2,0(r16)
   40f18:	00421780 	call	42178 <_fflush_r>
   40f1c:	103fa526 	beq	r2,zero,40db4 <__alt_data_end+0xfffcb254>
   40f20:	003f5006 	br	40c64 <__alt_data_end+0xfffcb104>
   40f24:	95000044 	addi	r20,r18,1
   40f28:	02000044 	movi	r8,1
   40f2c:	003f5806 	br	40c90 <__alt_data_end+0xfffcb130>

00040f30 <_malloc_r>:
   40f30:	defff504 	addi	sp,sp,-44
   40f34:	dc800315 	stw	r18,12(sp)
   40f38:	dfc00a15 	stw	ra,40(sp)
   40f3c:	df000915 	stw	fp,36(sp)
   40f40:	ddc00815 	stw	r23,32(sp)
   40f44:	dd800715 	stw	r22,28(sp)
   40f48:	dd400615 	stw	r21,24(sp)
   40f4c:	dd000515 	stw	r20,20(sp)
   40f50:	dcc00415 	stw	r19,16(sp)
   40f54:	dc400215 	stw	r17,8(sp)
   40f58:	dc000115 	stw	r16,4(sp)
   40f5c:	288002c4 	addi	r2,r5,11
   40f60:	00c00584 	movi	r3,22
   40f64:	2025883a 	mov	r18,r4
   40f68:	18802a2e 	bgeu	r3,r2,41014 <_malloc_r+0xe4>
   40f6c:	047ffe04 	movi	r17,-8
   40f70:	1462703a 	and	r17,r2,r17
   40f74:	88009e16 	blt	r17,zero,411f0 <_malloc_r+0x2c0>
   40f78:	89409d36 	bltu	r17,r5,411f0 <_malloc_r+0x2c0>
   40f7c:	0043b340 	call	43b34 <__malloc_lock>
   40f80:	00807dc4 	movi	r2,503
   40f84:	14402736 	bltu	r2,r17,41024 <_malloc_r+0xf4>
   40f88:	8806d0fa 	srli	r3,r17,3
   40f8c:	04c00134 	movhi	r19,4
   40f90:	9cdb3304 	addi	r19,r19,27852
   40f94:	18c5883a 	add	r2,r3,r3
   40f98:	1085883a 	add	r2,r2,r2
   40f9c:	1085883a 	add	r2,r2,r2
   40fa0:	9885883a 	add	r2,r19,r2
   40fa4:	14000317 	ldw	r16,12(r2)
   40fa8:	80814a26 	beq	r16,r2,414d4 <_malloc_r+0x5a4>
   40fac:	80c00117 	ldw	r3,4(r16)
   40fb0:	81000317 	ldw	r4,12(r16)
   40fb4:	00bfff04 	movi	r2,-4
   40fb8:	1884703a 	and	r2,r3,r2
   40fbc:	81400217 	ldw	r5,8(r16)
   40fc0:	8085883a 	add	r2,r16,r2
   40fc4:	10c00117 	ldw	r3,4(r2)
   40fc8:	29000315 	stw	r4,12(r5)
   40fcc:	21400215 	stw	r5,8(r4)
   40fd0:	18c00054 	ori	r3,r3,1
   40fd4:	10c00115 	stw	r3,4(r2)
   40fd8:	9009883a 	mov	r4,r18
   40fdc:	0043b540 	call	43b54 <__malloc_unlock>
   40fe0:	80800204 	addi	r2,r16,8
   40fe4:	dfc00a17 	ldw	ra,40(sp)
   40fe8:	df000917 	ldw	fp,36(sp)
   40fec:	ddc00817 	ldw	r23,32(sp)
   40ff0:	dd800717 	ldw	r22,28(sp)
   40ff4:	dd400617 	ldw	r21,24(sp)
   40ff8:	dd000517 	ldw	r20,20(sp)
   40ffc:	dcc00417 	ldw	r19,16(sp)
   41000:	dc800317 	ldw	r18,12(sp)
   41004:	dc400217 	ldw	r17,8(sp)
   41008:	dc000117 	ldw	r16,4(sp)
   4100c:	dec00b04 	addi	sp,sp,44
   41010:	f800283a 	ret
   41014:	04400404 	movi	r17,16
   41018:	89407536 	bltu	r17,r5,411f0 <_malloc_r+0x2c0>
   4101c:	0043b340 	call	43b34 <__malloc_lock>
   41020:	003fd906 	br	40f88 <__alt_data_end+0xfffcb428>
   41024:	8806d27a 	srli	r3,r17,9
   41028:	18007526 	beq	r3,zero,41200 <_malloc_r+0x2d0>
   4102c:	00800104 	movi	r2,4
   41030:	10c0ef36 	bltu	r2,r3,413f0 <_malloc_r+0x4c0>
   41034:	8806d1ba 	srli	r3,r17,6
   41038:	19c00e04 	addi	r7,r3,56
   4103c:	39cb883a 	add	r5,r7,r7
   41040:	04c00134 	movhi	r19,4
   41044:	294b883a 	add	r5,r5,r5
   41048:	9cdb3304 	addi	r19,r19,27852
   4104c:	294b883a 	add	r5,r5,r5
   41050:	994b883a 	add	r5,r19,r5
   41054:	2c000317 	ldw	r16,12(r5)
   41058:	2c000e26 	beq	r5,r16,41094 <_malloc_r+0x164>
   4105c:	80800117 	ldw	r2,4(r16)
   41060:	01bfff04 	movi	r6,-4
   41064:	010003c4 	movi	r4,15
   41068:	1184703a 	and	r2,r2,r6
   4106c:	1447c83a 	sub	r3,r2,r17
   41070:	20c00716 	blt	r4,r3,41090 <_malloc_r+0x160>
   41074:	1800650e 	bge	r3,zero,4120c <_malloc_r+0x2dc>
   41078:	84000317 	ldw	r16,12(r16)
   4107c:	2c000526 	beq	r5,r16,41094 <_malloc_r+0x164>
   41080:	80800117 	ldw	r2,4(r16)
   41084:	1184703a 	and	r2,r2,r6
   41088:	1447c83a 	sub	r3,r2,r17
   4108c:	20fff90e 	bge	r4,r3,41074 <__alt_data_end+0xfffcb514>
   41090:	39ffffc4 	addi	r7,r7,-1
   41094:	38c00044 	addi	r3,r7,1
   41098:	01800134 	movhi	r6,4
   4109c:	9c000417 	ldw	r16,16(r19)
   410a0:	319b3304 	addi	r6,r6,27852
   410a4:	32400204 	addi	r9,r6,8
   410a8:	82410326 	beq	r16,r9,414b8 <_malloc_r+0x588>
   410ac:	81000117 	ldw	r4,4(r16)
   410b0:	00bfff04 	movi	r2,-4
   410b4:	208e703a 	and	r7,r4,r2
   410b8:	3c45c83a 	sub	r2,r7,r17
   410bc:	010003c4 	movi	r4,15
   410c0:	2080ee16 	blt	r4,r2,4147c <_malloc_r+0x54c>
   410c4:	32400515 	stw	r9,20(r6)
   410c8:	32400415 	stw	r9,16(r6)
   410cc:	1000510e 	bge	r2,zero,41214 <_malloc_r+0x2e4>
   410d0:	00807fc4 	movi	r2,511
   410d4:	11c0ce36 	bltu	r2,r7,41410 <_malloc_r+0x4e0>
   410d8:	3808d0fa 	srli	r4,r7,3
   410dc:	01c00044 	movi	r7,1
   410e0:	30800117 	ldw	r2,4(r6)
   410e4:	210b883a 	add	r5,r4,r4
   410e8:	294b883a 	add	r5,r5,r5
   410ec:	2009d0ba 	srai	r4,r4,2
   410f0:	294b883a 	add	r5,r5,r5
   410f4:	298b883a 	add	r5,r5,r6
   410f8:	2a000217 	ldw	r8,8(r5)
   410fc:	3908983a 	sll	r4,r7,r4
   41100:	81400315 	stw	r5,12(r16)
   41104:	82000215 	stw	r8,8(r16)
   41108:	2088b03a 	or	r4,r4,r2
   4110c:	2c000215 	stw	r16,8(r5)
   41110:	31000115 	stw	r4,4(r6)
   41114:	44000315 	stw	r16,12(r8)
   41118:	1805d0ba 	srai	r2,r3,2
   4111c:	01400044 	movi	r5,1
   41120:	288a983a 	sll	r5,r5,r2
   41124:	21404336 	bltu	r4,r5,41234 <_malloc_r+0x304>
   41128:	2144703a 	and	r2,r4,r5
   4112c:	10000a1e 	bne	r2,zero,41158 <_malloc_r+0x228>
   41130:	00bfff04 	movi	r2,-4
   41134:	294b883a 	add	r5,r5,r5
   41138:	1886703a 	and	r3,r3,r2
   4113c:	2144703a 	and	r2,r4,r5
   41140:	18c00104 	addi	r3,r3,4
   41144:	1000041e 	bne	r2,zero,41158 <_malloc_r+0x228>
   41148:	294b883a 	add	r5,r5,r5
   4114c:	2144703a 	and	r2,r4,r5
   41150:	18c00104 	addi	r3,r3,4
   41154:	103ffc26 	beq	r2,zero,41148 <__alt_data_end+0xfffcb5e8>
   41158:	023fff04 	movi	r8,-4
   4115c:	01c003c4 	movi	r7,15
   41160:	18c5883a 	add	r2,r3,r3
   41164:	1085883a 	add	r2,r2,r2
   41168:	1085883a 	add	r2,r2,r2
   4116c:	9895883a 	add	r10,r19,r2
   41170:	52c00304 	addi	r11,r10,12
   41174:	1819883a 	mov	r12,r3
   41178:	5c000017 	ldw	r16,0(r11)
   4117c:	59bffd04 	addi	r6,r11,-12
   41180:	8180041e 	bne	r16,r6,41194 <_malloc_r+0x264>
   41184:	0000ce06 	br	414c0 <_malloc_r+0x590>
   41188:	2000d70e 	bge	r4,zero,414e8 <_malloc_r+0x5b8>
   4118c:	84000317 	ldw	r16,12(r16)
   41190:	8180cb26 	beq	r16,r6,414c0 <_malloc_r+0x590>
   41194:	80800117 	ldw	r2,4(r16)
   41198:	1204703a 	and	r2,r2,r8
   4119c:	1449c83a 	sub	r4,r2,r17
   411a0:	393ff90e 	bge	r7,r4,41188 <__alt_data_end+0xfffcb628>
   411a4:	80800317 	ldw	r2,12(r16)
   411a8:	80c00217 	ldw	r3,8(r16)
   411ac:	89400054 	ori	r5,r17,1
   411b0:	81400115 	stw	r5,4(r16)
   411b4:	18800315 	stw	r2,12(r3)
   411b8:	10c00215 	stw	r3,8(r2)
   411bc:	8463883a 	add	r17,r16,r17
   411c0:	9c400515 	stw	r17,20(r19)
   411c4:	9c400415 	stw	r17,16(r19)
   411c8:	20800054 	ori	r2,r4,1
   411cc:	88800115 	stw	r2,4(r17)
   411d0:	8a400315 	stw	r9,12(r17)
   411d4:	8a400215 	stw	r9,8(r17)
   411d8:	8923883a 	add	r17,r17,r4
   411dc:	89000015 	stw	r4,0(r17)
   411e0:	9009883a 	mov	r4,r18
   411e4:	0043b540 	call	43b54 <__malloc_unlock>
   411e8:	80800204 	addi	r2,r16,8
   411ec:	003f7d06 	br	40fe4 <__alt_data_end+0xfffcb484>
   411f0:	00800304 	movi	r2,12
   411f4:	90800015 	stw	r2,0(r18)
   411f8:	0005883a 	mov	r2,zero
   411fc:	003f7906 	br	40fe4 <__alt_data_end+0xfffcb484>
   41200:	01401f84 	movi	r5,126
   41204:	01c00fc4 	movi	r7,63
   41208:	003f8d06 	br	41040 <__alt_data_end+0xfffcb4e0>
   4120c:	81000317 	ldw	r4,12(r16)
   41210:	003f6a06 	br	40fbc <__alt_data_end+0xfffcb45c>
   41214:	81c5883a 	add	r2,r16,r7
   41218:	10c00117 	ldw	r3,4(r2)
   4121c:	9009883a 	mov	r4,r18
   41220:	18c00054 	ori	r3,r3,1
   41224:	10c00115 	stw	r3,4(r2)
   41228:	0043b540 	call	43b54 <__malloc_unlock>
   4122c:	80800204 	addi	r2,r16,8
   41230:	003f6c06 	br	40fe4 <__alt_data_end+0xfffcb484>
   41234:	9c000217 	ldw	r16,8(r19)
   41238:	00bfff04 	movi	r2,-4
   4123c:	85800117 	ldw	r22,4(r16)
   41240:	b0ac703a 	and	r22,r22,r2
   41244:	b4400336 	bltu	r22,r17,41254 <_malloc_r+0x324>
   41248:	b445c83a 	sub	r2,r22,r17
   4124c:	00c003c4 	movi	r3,15
   41250:	18805d16 	blt	r3,r2,413c8 <_malloc_r+0x498>
   41254:	05c00174 	movhi	r23,5
   41258:	00800174 	movhi	r2,5
   4125c:	bde0ea04 	addi	r23,r23,-31832
   41260:	10a7c404 	addi	r2,r2,-24816
   41264:	15400017 	ldw	r21,0(r2)
   41268:	b9000017 	ldw	r4,0(r23)
   4126c:	00ffffc4 	movi	r3,-1
   41270:	858d883a 	add	r6,r16,r22
   41274:	8d6b883a 	add	r21,r17,r21
   41278:	20c0e426 	beq	r4,r3,4160c <_malloc_r+0x6dc>
   4127c:	ad4403c4 	addi	r21,r21,4111
   41280:	00fc0004 	movi	r3,-4096
   41284:	a8ea703a 	and	r21,r21,r3
   41288:	9009883a 	mov	r4,r18
   4128c:	a80b883a 	mov	r5,r21
   41290:	d9800015 	stw	r6,0(sp)
   41294:	0041ff40 	call	41ff4 <_sbrk_r>
   41298:	00ffffc4 	movi	r3,-1
   4129c:	1029883a 	mov	r20,r2
   412a0:	d9800017 	ldw	r6,0(sp)
   412a4:	10c0a426 	beq	r2,r3,41538 <_malloc_r+0x608>
   412a8:	1180a236 	bltu	r2,r6,41534 <_malloc_r+0x604>
   412ac:	07000174 	movhi	fp,5
   412b0:	e727cd04 	addi	fp,fp,-24780
   412b4:	e0c00017 	ldw	r3,0(fp)
   412b8:	a8c7883a 	add	r3,r21,r3
   412bc:	e0c00015 	stw	r3,0(fp)
   412c0:	3500da26 	beq	r6,r20,4162c <_malloc_r+0x6fc>
   412c4:	b9000017 	ldw	r4,0(r23)
   412c8:	00bfffc4 	movi	r2,-1
   412cc:	2080e426 	beq	r4,r2,41660 <_malloc_r+0x730>
   412d0:	a185c83a 	sub	r2,r20,r6
   412d4:	1885883a 	add	r2,r3,r2
   412d8:	e0800015 	stw	r2,0(fp)
   412dc:	a0c001cc 	andi	r3,r20,7
   412e0:	1800b526 	beq	r3,zero,415b8 <_malloc_r+0x688>
   412e4:	a0e9c83a 	sub	r20,r20,r3
   412e8:	00840204 	movi	r2,4104
   412ec:	a5000204 	addi	r20,r20,8
   412f0:	10c7c83a 	sub	r3,r2,r3
   412f4:	a545883a 	add	r2,r20,r21
   412f8:	1083ffcc 	andi	r2,r2,4095
   412fc:	18abc83a 	sub	r21,r3,r2
   41300:	9009883a 	mov	r4,r18
   41304:	a80b883a 	mov	r5,r21
   41308:	0041ff40 	call	41ff4 <_sbrk_r>
   4130c:	00ffffc4 	movi	r3,-1
   41310:	10c0d026 	beq	r2,r3,41654 <_malloc_r+0x724>
   41314:	1507c83a 	sub	r3,r2,r20
   41318:	a8c7883a 	add	r3,r21,r3
   4131c:	18c00054 	ori	r3,r3,1
   41320:	e0800017 	ldw	r2,0(fp)
   41324:	9d000215 	stw	r20,8(r19)
   41328:	a0c00115 	stw	r3,4(r20)
   4132c:	a887883a 	add	r3,r21,r2
   41330:	e0c00015 	stw	r3,0(fp)
   41334:	84c00e26 	beq	r16,r19,41370 <_malloc_r+0x440>
   41338:	018003c4 	movi	r6,15
   4133c:	3580a02e 	bgeu	r6,r22,415c0 <_malloc_r+0x690>
   41340:	81400117 	ldw	r5,4(r16)
   41344:	013ffe04 	movi	r4,-8
   41348:	b0bffd04 	addi	r2,r22,-12
   4134c:	1104703a 	and	r2,r2,r4
   41350:	2900004c 	andi	r4,r5,1
   41354:	1108b03a 	or	r4,r2,r4
   41358:	81000115 	stw	r4,4(r16)
   4135c:	01400144 	movi	r5,5
   41360:	8089883a 	add	r4,r16,r2
   41364:	21400115 	stw	r5,4(r4)
   41368:	21400215 	stw	r5,8(r4)
   4136c:	3080c036 	bltu	r6,r2,41670 <_malloc_r+0x740>
   41370:	00800174 	movhi	r2,5
   41374:	10a7c304 	addi	r2,r2,-24820
   41378:	11000017 	ldw	r4,0(r2)
   4137c:	20c0012e 	bgeu	r4,r3,41384 <_malloc_r+0x454>
   41380:	10c00015 	stw	r3,0(r2)
   41384:	00800174 	movhi	r2,5
   41388:	10a7c204 	addi	r2,r2,-24824
   4138c:	11000017 	ldw	r4,0(r2)
   41390:	9c000217 	ldw	r16,8(r19)
   41394:	20c0012e 	bgeu	r4,r3,4139c <_malloc_r+0x46c>
   41398:	10c00015 	stw	r3,0(r2)
   4139c:	80c00117 	ldw	r3,4(r16)
   413a0:	00bfff04 	movi	r2,-4
   413a4:	1886703a 	and	r3,r3,r2
   413a8:	1c45c83a 	sub	r2,r3,r17
   413ac:	1c400236 	bltu	r3,r17,413b8 <_malloc_r+0x488>
   413b0:	00c003c4 	movi	r3,15
   413b4:	18800416 	blt	r3,r2,413c8 <_malloc_r+0x498>
   413b8:	9009883a 	mov	r4,r18
   413bc:	0043b540 	call	43b54 <__malloc_unlock>
   413c0:	0005883a 	mov	r2,zero
   413c4:	003f0706 	br	40fe4 <__alt_data_end+0xfffcb484>
   413c8:	88c00054 	ori	r3,r17,1
   413cc:	80c00115 	stw	r3,4(r16)
   413d0:	8463883a 	add	r17,r16,r17
   413d4:	10800054 	ori	r2,r2,1
   413d8:	9c400215 	stw	r17,8(r19)
   413dc:	88800115 	stw	r2,4(r17)
   413e0:	9009883a 	mov	r4,r18
   413e4:	0043b540 	call	43b54 <__malloc_unlock>
   413e8:	80800204 	addi	r2,r16,8
   413ec:	003efd06 	br	40fe4 <__alt_data_end+0xfffcb484>
   413f0:	00800504 	movi	r2,20
   413f4:	10c0482e 	bgeu	r2,r3,41518 <_malloc_r+0x5e8>
   413f8:	00801504 	movi	r2,84
   413fc:	10c06836 	bltu	r2,r3,415a0 <_malloc_r+0x670>
   41400:	8806d33a 	srli	r3,r17,12
   41404:	19c01b84 	addi	r7,r3,110
   41408:	39cb883a 	add	r5,r7,r7
   4140c:	003f0c06 	br	41040 <__alt_data_end+0xfffcb4e0>
   41410:	3804d27a 	srli	r2,r7,9
   41414:	01000104 	movi	r4,4
   41418:	2080422e 	bgeu	r4,r2,41524 <_malloc_r+0x5f4>
   4141c:	01000504 	movi	r4,20
   41420:	20807c36 	bltu	r4,r2,41614 <_malloc_r+0x6e4>
   41424:	110016c4 	addi	r4,r2,91
   41428:	210b883a 	add	r5,r4,r4
   4142c:	294b883a 	add	r5,r5,r5
   41430:	294b883a 	add	r5,r5,r5
   41434:	994b883a 	add	r5,r19,r5
   41438:	28800217 	ldw	r2,8(r5)
   4143c:	02000134 	movhi	r8,4
   41440:	421b3304 	addi	r8,r8,27852
   41444:	11406326 	beq	r2,r5,415d4 <_malloc_r+0x6a4>
   41448:	01bfff04 	movi	r6,-4
   4144c:	11000117 	ldw	r4,4(r2)
   41450:	2188703a 	and	r4,r4,r6
   41454:	3900022e 	bgeu	r7,r4,41460 <_malloc_r+0x530>
   41458:	10800217 	ldw	r2,8(r2)
   4145c:	28bffb1e 	bne	r5,r2,4144c <__alt_data_end+0xfffcb8ec>
   41460:	11800317 	ldw	r6,12(r2)
   41464:	99000117 	ldw	r4,4(r19)
   41468:	81800315 	stw	r6,12(r16)
   4146c:	80800215 	stw	r2,8(r16)
   41470:	34000215 	stw	r16,8(r6)
   41474:	14000315 	stw	r16,12(r2)
   41478:	003f2706 	br	41118 <__alt_data_end+0xfffcb5b8>
   4147c:	88c00054 	ori	r3,r17,1
   41480:	80c00115 	stw	r3,4(r16)
   41484:	8463883a 	add	r17,r16,r17
   41488:	34400515 	stw	r17,20(r6)
   4148c:	34400415 	stw	r17,16(r6)
   41490:	10c00054 	ori	r3,r2,1
   41494:	8a400315 	stw	r9,12(r17)
   41498:	8a400215 	stw	r9,8(r17)
   4149c:	88c00115 	stw	r3,4(r17)
   414a0:	88a3883a 	add	r17,r17,r2
   414a4:	88800015 	stw	r2,0(r17)
   414a8:	9009883a 	mov	r4,r18
   414ac:	0043b540 	call	43b54 <__malloc_unlock>
   414b0:	80800204 	addi	r2,r16,8
   414b4:	003ecb06 	br	40fe4 <__alt_data_end+0xfffcb484>
   414b8:	31000117 	ldw	r4,4(r6)
   414bc:	003f1606 	br	41118 <__alt_data_end+0xfffcb5b8>
   414c0:	63000044 	addi	r12,r12,1
   414c4:	608000cc 	andi	r2,r12,3
   414c8:	5ac00204 	addi	r11,r11,8
   414cc:	103f2a1e 	bne	r2,zero,41178 <__alt_data_end+0xfffcb618>
   414d0:	00002106 	br	41558 <_malloc_r+0x628>
   414d4:	80800204 	addi	r2,r16,8
   414d8:	84000517 	ldw	r16,20(r16)
   414dc:	143eb31e 	bne	r2,r16,40fac <__alt_data_end+0xfffcb44c>
   414e0:	18c00084 	addi	r3,r3,2
   414e4:	003eec06 	br	41098 <__alt_data_end+0xfffcb538>
   414e8:	8085883a 	add	r2,r16,r2
   414ec:	10c00117 	ldw	r3,4(r2)
   414f0:	81000317 	ldw	r4,12(r16)
   414f4:	81400217 	ldw	r5,8(r16)
   414f8:	18c00054 	ori	r3,r3,1
   414fc:	10c00115 	stw	r3,4(r2)
   41500:	29000315 	stw	r4,12(r5)
   41504:	21400215 	stw	r5,8(r4)
   41508:	9009883a 	mov	r4,r18
   4150c:	0043b540 	call	43b54 <__malloc_unlock>
   41510:	80800204 	addi	r2,r16,8
   41514:	003eb306 	br	40fe4 <__alt_data_end+0xfffcb484>
   41518:	19c016c4 	addi	r7,r3,91
   4151c:	39cb883a 	add	r5,r7,r7
   41520:	003ec706 	br	41040 <__alt_data_end+0xfffcb4e0>
   41524:	3804d1ba 	srli	r2,r7,6
   41528:	11000e04 	addi	r4,r2,56
   4152c:	210b883a 	add	r5,r4,r4
   41530:	003fbe06 	br	4142c <__alt_data_end+0xfffcb8cc>
   41534:	84ff5d26 	beq	r16,r19,412ac <__alt_data_end+0xfffcb74c>
   41538:	9c000217 	ldw	r16,8(r19)
   4153c:	00bfff04 	movi	r2,-4
   41540:	80c00117 	ldw	r3,4(r16)
   41544:	1886703a 	and	r3,r3,r2
   41548:	003f9706 	br	413a8 <__alt_data_end+0xfffcb848>
   4154c:	52800017 	ldw	r10,0(r10)
   41550:	18ffffc4 	addi	r3,r3,-1
   41554:	50805c1e 	bne	r10,r2,416c8 <_malloc_r+0x798>
   41558:	190000cc 	andi	r4,r3,3
   4155c:	50bffe04 	addi	r2,r10,-8
   41560:	203ffa1e 	bne	r4,zero,4154c <__alt_data_end+0xfffcb9ec>
   41564:	98800117 	ldw	r2,4(r19)
   41568:	0146303a 	nor	r3,zero,r5
   4156c:	1884703a 	and	r2,r3,r2
   41570:	98800115 	stw	r2,4(r19)
   41574:	294b883a 	add	r5,r5,r5
   41578:	117f2e36 	bltu	r2,r5,41234 <__alt_data_end+0xfffcb6d4>
   4157c:	283f2d26 	beq	r5,zero,41234 <__alt_data_end+0xfffcb6d4>
   41580:	1146703a 	and	r3,r2,r5
   41584:	1800521e 	bne	r3,zero,416d0 <_malloc_r+0x7a0>
   41588:	6007883a 	mov	r3,r12
   4158c:	294b883a 	add	r5,r5,r5
   41590:	1148703a 	and	r4,r2,r5
   41594:	18c00104 	addi	r3,r3,4
   41598:	203ffc26 	beq	r4,zero,4158c <__alt_data_end+0xfffcba2c>
   4159c:	003ef006 	br	41160 <__alt_data_end+0xfffcb600>
   415a0:	00805504 	movi	r2,340
   415a4:	10c01336 	bltu	r2,r3,415f4 <_malloc_r+0x6c4>
   415a8:	8806d3fa 	srli	r3,r17,15
   415ac:	19c01dc4 	addi	r7,r3,119
   415b0:	39cb883a 	add	r5,r7,r7
   415b4:	003ea206 	br	41040 <__alt_data_end+0xfffcb4e0>
   415b8:	00c40004 	movi	r3,4096
   415bc:	003f4d06 	br	412f4 <__alt_data_end+0xfffcb794>
   415c0:	00800044 	movi	r2,1
   415c4:	a0800115 	stw	r2,4(r20)
   415c8:	a021883a 	mov	r16,r20
   415cc:	0007883a 	mov	r3,zero
   415d0:	003f7506 	br	413a8 <__alt_data_end+0xfffcb848>
   415d4:	200bd0ba 	srai	r5,r4,2
   415d8:	01800044 	movi	r6,1
   415dc:	41000117 	ldw	r4,4(r8)
   415e0:	314a983a 	sll	r5,r6,r5
   415e4:	100d883a 	mov	r6,r2
   415e8:	2908b03a 	or	r4,r5,r4
   415ec:	41000115 	stw	r4,4(r8)
   415f0:	003f9d06 	br	41468 <__alt_data_end+0xfffcb908>
   415f4:	00815504 	movi	r2,1364
   415f8:	10c01336 	bltu	r2,r3,41648 <_malloc_r+0x718>
   415fc:	8806d4ba 	srli	r3,r17,18
   41600:	19c01f04 	addi	r7,r3,124
   41604:	39cb883a 	add	r5,r7,r7
   41608:	003e8d06 	br	41040 <__alt_data_end+0xfffcb4e0>
   4160c:	ad400404 	addi	r21,r21,16
   41610:	003f1d06 	br	41288 <__alt_data_end+0xfffcb728>
   41614:	01001504 	movi	r4,84
   41618:	20801c36 	bltu	r4,r2,4168c <_malloc_r+0x75c>
   4161c:	3804d33a 	srli	r2,r7,12
   41620:	11001b84 	addi	r4,r2,110
   41624:	210b883a 	add	r5,r4,r4
   41628:	003f8006 	br	4142c <__alt_data_end+0xfffcb8cc>
   4162c:	3083ffcc 	andi	r2,r6,4095
   41630:	103f241e 	bne	r2,zero,412c4 <__alt_data_end+0xfffcb764>
   41634:	99000217 	ldw	r4,8(r19)
   41638:	ad85883a 	add	r2,r21,r22
   4163c:	10800054 	ori	r2,r2,1
   41640:	20800115 	stw	r2,4(r4)
   41644:	003f4a06 	br	41370 <__alt_data_end+0xfffcb810>
   41648:	01403f04 	movi	r5,252
   4164c:	01c01f84 	movi	r7,126
   41650:	003e7b06 	br	41040 <__alt_data_end+0xfffcb4e0>
   41654:	00c00044 	movi	r3,1
   41658:	002b883a 	mov	r21,zero
   4165c:	003f3006 	br	41320 <__alt_data_end+0xfffcb7c0>
   41660:	00800174 	movhi	r2,5
   41664:	10a0ea04 	addi	r2,r2,-31832
   41668:	15000015 	stw	r20,0(r2)
   4166c:	003f1b06 	br	412dc <__alt_data_end+0xfffcb77c>
   41670:	9009883a 	mov	r4,r18
   41674:	81400204 	addi	r5,r16,8
   41678:	00428a80 	call	428a8 <_free_r>
   4167c:	00800174 	movhi	r2,5
   41680:	10a7cd04 	addi	r2,r2,-24780
   41684:	10c00017 	ldw	r3,0(r2)
   41688:	003f3906 	br	41370 <__alt_data_end+0xfffcb810>
   4168c:	01005504 	movi	r4,340
   41690:	20800436 	bltu	r4,r2,416a4 <_malloc_r+0x774>
   41694:	3804d3fa 	srli	r2,r7,15
   41698:	11001dc4 	addi	r4,r2,119
   4169c:	210b883a 	add	r5,r4,r4
   416a0:	003f6206 	br	4142c <__alt_data_end+0xfffcb8cc>
   416a4:	01015504 	movi	r4,1364
   416a8:	20800436 	bltu	r4,r2,416bc <_malloc_r+0x78c>
   416ac:	3804d4ba 	srli	r2,r7,18
   416b0:	11001f04 	addi	r4,r2,124
   416b4:	210b883a 	add	r5,r4,r4
   416b8:	003f5c06 	br	4142c <__alt_data_end+0xfffcb8cc>
   416bc:	01403f04 	movi	r5,252
   416c0:	01001f84 	movi	r4,126
   416c4:	003f5906 	br	4142c <__alt_data_end+0xfffcb8cc>
   416c8:	98800117 	ldw	r2,4(r19)
   416cc:	003fa906 	br	41574 <__alt_data_end+0xfffcba14>
   416d0:	6007883a 	mov	r3,r12
   416d4:	003ea206 	br	41160 <__alt_data_end+0xfffcb600>

000416d8 <memchr>:
   416d8:	208000cc 	andi	r2,r4,3
   416dc:	280f883a 	mov	r7,r5
   416e0:	10003526 	beq	r2,zero,417b8 <memchr+0xe0>
   416e4:	30bfffc4 	addi	r2,r6,-1
   416e8:	30001b26 	beq	r6,zero,41758 <memchr+0x80>
   416ec:	21800003 	ldbu	r6,0(r4)
   416f0:	28c03fcc 	andi	r3,r5,255
   416f4:	30c01a26 	beq	r6,r3,41760 <memchr+0x88>
   416f8:	180d883a 	mov	r6,r3
   416fc:	00000406 	br	41710 <memchr+0x38>
   41700:	10001526 	beq	r2,zero,41758 <memchr+0x80>
   41704:	20c00003 	ldbu	r3,0(r4)
   41708:	10bfffc4 	addi	r2,r2,-1
   4170c:	19801426 	beq	r3,r6,41760 <memchr+0x88>
   41710:	21000044 	addi	r4,r4,1
   41714:	20c000cc 	andi	r3,r4,3
   41718:	183ff91e 	bne	r3,zero,41700 <__alt_data_end+0xfffcbba0>
   4171c:	024000c4 	movi	r9,3
   41720:	48801136 	bltu	r9,r2,41768 <memchr+0x90>
   41724:	10000c26 	beq	r2,zero,41758 <memchr+0x80>
   41728:	20c00003 	ldbu	r3,0(r4)
   4172c:	29403fcc 	andi	r5,r5,255
   41730:	19400b26 	beq	r3,r5,41760 <memchr+0x88>
   41734:	20c00044 	addi	r3,r4,1
   41738:	2085883a 	add	r2,r4,r2
   4173c:	39803fcc 	andi	r6,r7,255
   41740:	00000306 	br	41750 <memchr+0x78>
   41744:	18c00044 	addi	r3,r3,1
   41748:	197fffc3 	ldbu	r5,-1(r3)
   4174c:	29800426 	beq	r5,r6,41760 <memchr+0x88>
   41750:	1809883a 	mov	r4,r3
   41754:	18bffb1e 	bne	r3,r2,41744 <__alt_data_end+0xfffcbbe4>
   41758:	0005883a 	mov	r2,zero
   4175c:	f800283a 	ret
   41760:	2005883a 	mov	r2,r4
   41764:	f800283a 	ret
   41768:	28c03fcc 	andi	r3,r5,255
   4176c:	1810923a 	slli	r8,r3,8
   41770:	02ffbff4 	movhi	r11,65279
   41774:	02a02074 	movhi	r10,32897
   41778:	40c6b03a 	or	r3,r8,r3
   4177c:	1810943a 	slli	r8,r3,16
   41780:	5affbfc4 	addi	r11,r11,-257
   41784:	52a02004 	addi	r10,r10,-32640
   41788:	40d0b03a 	or	r8,r8,r3
   4178c:	20c00017 	ldw	r3,0(r4)
   41790:	40c6f03a 	xor	r3,r8,r3
   41794:	1acd883a 	add	r6,r3,r11
   41798:	00c6303a 	nor	r3,zero,r3
   4179c:	30c6703a 	and	r3,r6,r3
   417a0:	1a86703a 	and	r3,r3,r10
   417a4:	183fdf1e 	bne	r3,zero,41724 <__alt_data_end+0xfffcbbc4>
   417a8:	10bfff04 	addi	r2,r2,-4
   417ac:	21000104 	addi	r4,r4,4
   417b0:	48bff636 	bltu	r9,r2,4178c <__alt_data_end+0xfffcbc2c>
   417b4:	003fdb06 	br	41724 <__alt_data_end+0xfffcbbc4>
   417b8:	3005883a 	mov	r2,r6
   417bc:	003fd706 	br	4171c <__alt_data_end+0xfffcbbbc>

000417c0 <memcpy>:
   417c0:	deffff04 	addi	sp,sp,-4
   417c4:	dc000015 	stw	r16,0(sp)
   417c8:	00c003c4 	movi	r3,15
   417cc:	2005883a 	mov	r2,r4
   417d0:	1980432e 	bgeu	r3,r6,418e0 <memcpy+0x120>
   417d4:	2146b03a 	or	r3,r4,r5
   417d8:	18c000cc 	andi	r3,r3,3
   417dc:	1800421e 	bne	r3,zero,418e8 <memcpy+0x128>
   417e0:	343ffc04 	addi	r16,r6,-16
   417e4:	8020d13a 	srli	r16,r16,4
   417e8:	28c00104 	addi	r3,r5,4
   417ec:	23400104 	addi	r13,r4,4
   417f0:	801e913a 	slli	r15,r16,4
   417f4:	2b000204 	addi	r12,r5,8
   417f8:	22c00204 	addi	r11,r4,8
   417fc:	7bc00504 	addi	r15,r15,20
   41800:	2a800304 	addi	r10,r5,12
   41804:	22400304 	addi	r9,r4,12
   41808:	2bdf883a 	add	r15,r5,r15
   4180c:	2811883a 	mov	r8,r5
   41810:	200f883a 	mov	r7,r4
   41814:	41000017 	ldw	r4,0(r8)
   41818:	39c00404 	addi	r7,r7,16
   4181c:	18c00404 	addi	r3,r3,16
   41820:	393ffc15 	stw	r4,-16(r7)
   41824:	1bbffc17 	ldw	r14,-16(r3)
   41828:	6b400404 	addi	r13,r13,16
   4182c:	5ac00404 	addi	r11,r11,16
   41830:	6bbffc15 	stw	r14,-16(r13)
   41834:	63800017 	ldw	r14,0(r12)
   41838:	4a400404 	addi	r9,r9,16
   4183c:	42000404 	addi	r8,r8,16
   41840:	5bbffc15 	stw	r14,-16(r11)
   41844:	53800017 	ldw	r14,0(r10)
   41848:	63000404 	addi	r12,r12,16
   4184c:	52800404 	addi	r10,r10,16
   41850:	4bbffc15 	stw	r14,-16(r9)
   41854:	1bffef1e 	bne	r3,r15,41814 <__alt_data_end+0xfffcbcb4>
   41858:	81c00044 	addi	r7,r16,1
   4185c:	380e913a 	slli	r7,r7,4
   41860:	310003cc 	andi	r4,r6,15
   41864:	02c000c4 	movi	r11,3
   41868:	11c7883a 	add	r3,r2,r7
   4186c:	29cb883a 	add	r5,r5,r7
   41870:	59001f2e 	bgeu	r11,r4,418f0 <memcpy+0x130>
   41874:	1813883a 	mov	r9,r3
   41878:	2811883a 	mov	r8,r5
   4187c:	200f883a 	mov	r7,r4
   41880:	42800017 	ldw	r10,0(r8)
   41884:	4a400104 	addi	r9,r9,4
   41888:	39ffff04 	addi	r7,r7,-4
   4188c:	4abfff15 	stw	r10,-4(r9)
   41890:	42000104 	addi	r8,r8,4
   41894:	59fffa36 	bltu	r11,r7,41880 <__alt_data_end+0xfffcbd20>
   41898:	213fff04 	addi	r4,r4,-4
   4189c:	2008d0ba 	srli	r4,r4,2
   418a0:	318000cc 	andi	r6,r6,3
   418a4:	21000044 	addi	r4,r4,1
   418a8:	2109883a 	add	r4,r4,r4
   418ac:	2109883a 	add	r4,r4,r4
   418b0:	1907883a 	add	r3,r3,r4
   418b4:	290b883a 	add	r5,r5,r4
   418b8:	30000626 	beq	r6,zero,418d4 <memcpy+0x114>
   418bc:	198d883a 	add	r6,r3,r6
   418c0:	29c00003 	ldbu	r7,0(r5)
   418c4:	18c00044 	addi	r3,r3,1
   418c8:	29400044 	addi	r5,r5,1
   418cc:	19ffffc5 	stb	r7,-1(r3)
   418d0:	19bffb1e 	bne	r3,r6,418c0 <__alt_data_end+0xfffcbd60>
   418d4:	dc000017 	ldw	r16,0(sp)
   418d8:	dec00104 	addi	sp,sp,4
   418dc:	f800283a 	ret
   418e0:	2007883a 	mov	r3,r4
   418e4:	003ff406 	br	418b8 <__alt_data_end+0xfffcbd58>
   418e8:	2007883a 	mov	r3,r4
   418ec:	003ff306 	br	418bc <__alt_data_end+0xfffcbd5c>
   418f0:	200d883a 	mov	r6,r4
   418f4:	003ff006 	br	418b8 <__alt_data_end+0xfffcbd58>

000418f8 <memmove>:
   418f8:	2005883a 	mov	r2,r4
   418fc:	29000b2e 	bgeu	r5,r4,4192c <memmove+0x34>
   41900:	298f883a 	add	r7,r5,r6
   41904:	21c0092e 	bgeu	r4,r7,4192c <memmove+0x34>
   41908:	2187883a 	add	r3,r4,r6
   4190c:	198bc83a 	sub	r5,r3,r6
   41910:	30004b26 	beq	r6,zero,41a40 <memmove+0x148>
   41914:	39ffffc4 	addi	r7,r7,-1
   41918:	39000003 	ldbu	r4,0(r7)
   4191c:	18ffffc4 	addi	r3,r3,-1
   41920:	19000005 	stb	r4,0(r3)
   41924:	197ffb1e 	bne	r3,r5,41914 <__alt_data_end+0xfffcbdb4>
   41928:	f800283a 	ret
   4192c:	00c003c4 	movi	r3,15
   41930:	1980412e 	bgeu	r3,r6,41a38 <memmove+0x140>
   41934:	1146b03a 	or	r3,r2,r5
   41938:	18c000cc 	andi	r3,r3,3
   4193c:	1800411e 	bne	r3,zero,41a44 <memmove+0x14c>
   41940:	33fffc04 	addi	r15,r6,-16
   41944:	781ed13a 	srli	r15,r15,4
   41948:	28c00104 	addi	r3,r5,4
   4194c:	13400104 	addi	r13,r2,4
   41950:	781c913a 	slli	r14,r15,4
   41954:	2b000204 	addi	r12,r5,8
   41958:	12c00204 	addi	r11,r2,8
   4195c:	73800504 	addi	r14,r14,20
   41960:	2a800304 	addi	r10,r5,12
   41964:	12400304 	addi	r9,r2,12
   41968:	2b9d883a 	add	r14,r5,r14
   4196c:	2811883a 	mov	r8,r5
   41970:	100f883a 	mov	r7,r2
   41974:	41000017 	ldw	r4,0(r8)
   41978:	39c00404 	addi	r7,r7,16
   4197c:	18c00404 	addi	r3,r3,16
   41980:	393ffc15 	stw	r4,-16(r7)
   41984:	193ffc17 	ldw	r4,-16(r3)
   41988:	6b400404 	addi	r13,r13,16
   4198c:	5ac00404 	addi	r11,r11,16
   41990:	693ffc15 	stw	r4,-16(r13)
   41994:	61000017 	ldw	r4,0(r12)
   41998:	4a400404 	addi	r9,r9,16
   4199c:	42000404 	addi	r8,r8,16
   419a0:	593ffc15 	stw	r4,-16(r11)
   419a4:	51000017 	ldw	r4,0(r10)
   419a8:	63000404 	addi	r12,r12,16
   419ac:	52800404 	addi	r10,r10,16
   419b0:	493ffc15 	stw	r4,-16(r9)
   419b4:	1bbfef1e 	bne	r3,r14,41974 <__alt_data_end+0xfffcbe14>
   419b8:	79000044 	addi	r4,r15,1
   419bc:	2008913a 	slli	r4,r4,4
   419c0:	328003cc 	andi	r10,r6,15
   419c4:	02c000c4 	movi	r11,3
   419c8:	1107883a 	add	r3,r2,r4
   419cc:	290b883a 	add	r5,r5,r4
   419d0:	5a801e2e 	bgeu	r11,r10,41a4c <memmove+0x154>
   419d4:	1813883a 	mov	r9,r3
   419d8:	2811883a 	mov	r8,r5
   419dc:	500f883a 	mov	r7,r10
   419e0:	41000017 	ldw	r4,0(r8)
   419e4:	4a400104 	addi	r9,r9,4
   419e8:	39ffff04 	addi	r7,r7,-4
   419ec:	493fff15 	stw	r4,-4(r9)
   419f0:	42000104 	addi	r8,r8,4
   419f4:	59fffa36 	bltu	r11,r7,419e0 <__alt_data_end+0xfffcbe80>
   419f8:	513fff04 	addi	r4,r10,-4
   419fc:	2008d0ba 	srli	r4,r4,2
   41a00:	318000cc 	andi	r6,r6,3
   41a04:	21000044 	addi	r4,r4,1
   41a08:	2109883a 	add	r4,r4,r4
   41a0c:	2109883a 	add	r4,r4,r4
   41a10:	1907883a 	add	r3,r3,r4
   41a14:	290b883a 	add	r5,r5,r4
   41a18:	30000926 	beq	r6,zero,41a40 <memmove+0x148>
   41a1c:	198d883a 	add	r6,r3,r6
   41a20:	29c00003 	ldbu	r7,0(r5)
   41a24:	18c00044 	addi	r3,r3,1
   41a28:	29400044 	addi	r5,r5,1
   41a2c:	19ffffc5 	stb	r7,-1(r3)
   41a30:	19bffb1e 	bne	r3,r6,41a20 <__alt_data_end+0xfffcbec0>
   41a34:	f800283a 	ret
   41a38:	1007883a 	mov	r3,r2
   41a3c:	003ff606 	br	41a18 <__alt_data_end+0xfffcbeb8>
   41a40:	f800283a 	ret
   41a44:	1007883a 	mov	r3,r2
   41a48:	003ff406 	br	41a1c <__alt_data_end+0xfffcbebc>
   41a4c:	500d883a 	mov	r6,r10
   41a50:	003ff106 	br	41a18 <__alt_data_end+0xfffcbeb8>

00041a54 <_realloc_r>:
   41a54:	defff604 	addi	sp,sp,-40
   41a58:	dcc00315 	stw	r19,12(sp)
   41a5c:	dc400115 	stw	r17,4(sp)
   41a60:	dfc00915 	stw	ra,36(sp)
   41a64:	df000815 	stw	fp,32(sp)
   41a68:	ddc00715 	stw	r23,28(sp)
   41a6c:	dd800615 	stw	r22,24(sp)
   41a70:	dd400515 	stw	r21,20(sp)
   41a74:	dd000415 	stw	r20,16(sp)
   41a78:	dc800215 	stw	r18,8(sp)
   41a7c:	dc000015 	stw	r16,0(sp)
   41a80:	2827883a 	mov	r19,r5
   41a84:	3023883a 	mov	r17,r6
   41a88:	2800bf26 	beq	r5,zero,41d88 <_realloc_r+0x334>
   41a8c:	2025883a 	mov	r18,r4
   41a90:	0043b340 	call	43b34 <__malloc_lock>
   41a94:	98ffff17 	ldw	r3,-4(r19)
   41a98:	01bfff04 	movi	r6,-4
   41a9c:	890002c4 	addi	r4,r17,11
   41aa0:	01c00584 	movi	r7,22
   41aa4:	9d7ffe04 	addi	r21,r19,-8
   41aa8:	19a0703a 	and	r16,r3,r6
   41aac:	39003f2e 	bgeu	r7,r4,41bac <_realloc_r+0x158>
   41ab0:	053ffe04 	movi	r20,-8
   41ab4:	2528703a 	and	r20,r4,r20
   41ab8:	a00f883a 	mov	r7,r20
   41abc:	a0008216 	blt	r20,zero,41cc8 <_realloc_r+0x274>
   41ac0:	a4408136 	bltu	r20,r17,41cc8 <_realloc_r+0x274>
   41ac4:	81c03c0e 	bge	r16,r7,41bb8 <_realloc_r+0x164>
   41ac8:	07000134 	movhi	fp,4
   41acc:	e71b3304 	addi	fp,fp,27852
   41ad0:	e1000217 	ldw	r4,8(fp)
   41ad4:	ac05883a 	add	r2,r21,r16
   41ad8:	2080bf26 	beq	r4,r2,41dd8 <_realloc_r+0x384>
   41adc:	11000117 	ldw	r4,4(r2)
   41ae0:	023fff84 	movi	r8,-2
   41ae4:	2210703a 	and	r8,r4,r8
   41ae8:	1211883a 	add	r8,r2,r8
   41aec:	41400117 	ldw	r5,4(r8)
   41af0:	2940004c 	andi	r5,r5,1
   41af4:	28004a1e 	bne	r5,zero,41c20 <_realloc_r+0x1cc>
   41af8:	017fff04 	movi	r5,-4
   41afc:	2148703a 	and	r4,r4,r5
   41b00:	2409883a 	add	r4,r4,r16
   41b04:	21c0ad0e 	bge	r4,r7,41dbc <_realloc_r+0x368>
   41b08:	18c0004c 	andi	r3,r3,1
   41b0c:	18007f1e 	bne	r3,zero,41d0c <_realloc_r+0x2b8>
   41b10:	9dfffe17 	ldw	r23,-8(r19)
   41b14:	adefc83a 	sub	r23,r21,r23
   41b18:	bd800117 	ldw	r22,4(r23)
   41b1c:	b14a703a 	and	r5,r22,r5
   41b20:	216d883a 	add	r22,r4,r5
   41b24:	b1c04516 	blt	r22,r7,41c3c <_realloc_r+0x1e8>
   41b28:	10c00317 	ldw	r3,12(r2)
   41b2c:	10800217 	ldw	r2,8(r2)
   41b30:	81bfff04 	addi	r6,r16,-4
   41b34:	bc400204 	addi	r17,r23,8
   41b38:	10c00315 	stw	r3,12(r2)
   41b3c:	18800215 	stw	r2,8(r3)
   41b40:	b9400217 	ldw	r5,8(r23)
   41b44:	b8c00317 	ldw	r3,12(r23)
   41b48:	00800904 	movi	r2,36
   41b4c:	28c00315 	stw	r3,12(r5)
   41b50:	19400215 	stw	r5,8(r3)
   41b54:	1180ef36 	bltu	r2,r6,41f14 <_realloc_r+0x4c0>
   41b58:	008004c4 	movi	r2,19
   41b5c:	1180da2e 	bgeu	r2,r6,41ec8 <_realloc_r+0x474>
   41b60:	98800017 	ldw	r2,0(r19)
   41b64:	b8800215 	stw	r2,8(r23)
   41b68:	98800117 	ldw	r2,4(r19)
   41b6c:	b8800315 	stw	r2,12(r23)
   41b70:	008006c4 	movi	r2,27
   41b74:	1180fc2e 	bgeu	r2,r6,41f68 <_realloc_r+0x514>
   41b78:	98800217 	ldw	r2,8(r19)
   41b7c:	b8800415 	stw	r2,16(r23)
   41b80:	98800317 	ldw	r2,12(r19)
   41b84:	b8800515 	stw	r2,20(r23)
   41b88:	00800904 	movi	r2,36
   41b8c:	3080421e 	bne	r6,r2,41c98 <_realloc_r+0x244>
   41b90:	98800417 	ldw	r2,16(r19)
   41b94:	9cc00604 	addi	r19,r19,24
   41b98:	b8c00804 	addi	r3,r23,32
   41b9c:	b8800615 	stw	r2,24(r23)
   41ba0:	98bfff17 	ldw	r2,-4(r19)
   41ba4:	b8800715 	stw	r2,28(r23)
   41ba8:	00003d06 	br	41ca0 <_realloc_r+0x24c>
   41bac:	01c00404 	movi	r7,16
   41bb0:	3829883a 	mov	r20,r7
   41bb4:	003fc206 	br	41ac0 <__alt_data_end+0xfffcbf60>
   41bb8:	9823883a 	mov	r17,r19
   41bbc:	850fc83a 	sub	r7,r16,r20
   41bc0:	008003c4 	movi	r2,15
   41bc4:	18c0004c 	andi	r3,r3,1
   41bc8:	11c04336 	bltu	r2,r7,41cd8 <_realloc_r+0x284>
   41bcc:	1c06b03a 	or	r3,r3,r16
   41bd0:	a8c00115 	stw	r3,4(r21)
   41bd4:	ac21883a 	add	r16,r21,r16
   41bd8:	80c00117 	ldw	r3,4(r16)
   41bdc:	18c00054 	ori	r3,r3,1
   41be0:	80c00115 	stw	r3,4(r16)
   41be4:	9009883a 	mov	r4,r18
   41be8:	0043b540 	call	43b54 <__malloc_unlock>
   41bec:	8805883a 	mov	r2,r17
   41bf0:	dfc00917 	ldw	ra,36(sp)
   41bf4:	df000817 	ldw	fp,32(sp)
   41bf8:	ddc00717 	ldw	r23,28(sp)
   41bfc:	dd800617 	ldw	r22,24(sp)
   41c00:	dd400517 	ldw	r21,20(sp)
   41c04:	dd000417 	ldw	r20,16(sp)
   41c08:	dcc00317 	ldw	r19,12(sp)
   41c0c:	dc800217 	ldw	r18,8(sp)
   41c10:	dc400117 	ldw	r17,4(sp)
   41c14:	dc000017 	ldw	r16,0(sp)
   41c18:	dec00a04 	addi	sp,sp,40
   41c1c:	f800283a 	ret
   41c20:	18c0004c 	andi	r3,r3,1
   41c24:	1800391e 	bne	r3,zero,41d0c <_realloc_r+0x2b8>
   41c28:	9dfffe17 	ldw	r23,-8(r19)
   41c2c:	00bfff04 	movi	r2,-4
   41c30:	adefc83a 	sub	r23,r21,r23
   41c34:	b9400117 	ldw	r5,4(r23)
   41c38:	288a703a 	and	r5,r5,r2
   41c3c:	2c2d883a 	add	r22,r5,r16
   41c40:	b1c03216 	blt	r22,r7,41d0c <_realloc_r+0x2b8>
   41c44:	b8800317 	ldw	r2,12(r23)
   41c48:	b8c00217 	ldw	r3,8(r23)
   41c4c:	81bfff04 	addi	r6,r16,-4
   41c50:	01000904 	movi	r4,36
   41c54:	18800315 	stw	r2,12(r3)
   41c58:	10c00215 	stw	r3,8(r2)
   41c5c:	bc400204 	addi	r17,r23,8
   41c60:	2180ac36 	bltu	r4,r6,41f14 <_realloc_r+0x4c0>
   41c64:	008004c4 	movi	r2,19
   41c68:	1180972e 	bgeu	r2,r6,41ec8 <_realloc_r+0x474>
   41c6c:	98800017 	ldw	r2,0(r19)
   41c70:	b8800215 	stw	r2,8(r23)
   41c74:	98800117 	ldw	r2,4(r19)
   41c78:	b8800315 	stw	r2,12(r23)
   41c7c:	008006c4 	movi	r2,27
   41c80:	1180b92e 	bgeu	r2,r6,41f68 <_realloc_r+0x514>
   41c84:	98800217 	ldw	r2,8(r19)
   41c88:	b8800415 	stw	r2,16(r23)
   41c8c:	98800317 	ldw	r2,12(r19)
   41c90:	b8800515 	stw	r2,20(r23)
   41c94:	313fbe26 	beq	r6,r4,41b90 <__alt_data_end+0xfffcc030>
   41c98:	b8c00604 	addi	r3,r23,24
   41c9c:	9cc00404 	addi	r19,r19,16
   41ca0:	98800017 	ldw	r2,0(r19)
   41ca4:	b021883a 	mov	r16,r22
   41ca8:	b82b883a 	mov	r21,r23
   41cac:	18800015 	stw	r2,0(r3)
   41cb0:	98800117 	ldw	r2,4(r19)
   41cb4:	18800115 	stw	r2,4(r3)
   41cb8:	98800217 	ldw	r2,8(r19)
   41cbc:	18800215 	stw	r2,8(r3)
   41cc0:	b8c00117 	ldw	r3,4(r23)
   41cc4:	003fbd06 	br	41bbc <__alt_data_end+0xfffcc05c>
   41cc8:	00800304 	movi	r2,12
   41ccc:	90800015 	stw	r2,0(r18)
   41cd0:	0005883a 	mov	r2,zero
   41cd4:	003fc606 	br	41bf0 <__alt_data_end+0xfffcc090>
   41cd8:	1d06b03a 	or	r3,r3,r20
   41cdc:	ad0b883a 	add	r5,r21,r20
   41ce0:	a8c00115 	stw	r3,4(r21)
   41ce4:	38800054 	ori	r2,r7,1
   41ce8:	28800115 	stw	r2,4(r5)
   41cec:	29cf883a 	add	r7,r5,r7
   41cf0:	38800117 	ldw	r2,4(r7)
   41cf4:	9009883a 	mov	r4,r18
   41cf8:	29400204 	addi	r5,r5,8
   41cfc:	10800054 	ori	r2,r2,1
   41d00:	38800115 	stw	r2,4(r7)
   41d04:	00428a80 	call	428a8 <_free_r>
   41d08:	003fb606 	br	41be4 <__alt_data_end+0xfffcc084>
   41d0c:	880b883a 	mov	r5,r17
   41d10:	9009883a 	mov	r4,r18
   41d14:	0040f300 	call	40f30 <_malloc_r>
   41d18:	1023883a 	mov	r17,r2
   41d1c:	1000aa26 	beq	r2,zero,41fc8 <_realloc_r+0x574>
   41d20:	98ffff17 	ldw	r3,-4(r19)
   41d24:	113ffe04 	addi	r4,r2,-8
   41d28:	00bfff84 	movi	r2,-2
   41d2c:	1884703a 	and	r2,r3,r2
   41d30:	a885883a 	add	r2,r21,r2
   41d34:	20808626 	beq	r4,r2,41f50 <_realloc_r+0x4fc>
   41d38:	81bfff04 	addi	r6,r16,-4
   41d3c:	00800904 	movi	r2,36
   41d40:	11807036 	bltu	r2,r6,41f04 <_realloc_r+0x4b0>
   41d44:	00c004c4 	movi	r3,19
   41d48:	19805636 	bltu	r3,r6,41ea4 <_realloc_r+0x450>
   41d4c:	8805883a 	mov	r2,r17
   41d50:	9807883a 	mov	r3,r19
   41d54:	19000017 	ldw	r4,0(r3)
   41d58:	11000015 	stw	r4,0(r2)
   41d5c:	19000117 	ldw	r4,4(r3)
   41d60:	11000115 	stw	r4,4(r2)
   41d64:	18c00217 	ldw	r3,8(r3)
   41d68:	10c00215 	stw	r3,8(r2)
   41d6c:	980b883a 	mov	r5,r19
   41d70:	9009883a 	mov	r4,r18
   41d74:	00428a80 	call	428a8 <_free_r>
   41d78:	9009883a 	mov	r4,r18
   41d7c:	0043b540 	call	43b54 <__malloc_unlock>
   41d80:	8805883a 	mov	r2,r17
   41d84:	003f9a06 	br	41bf0 <__alt_data_end+0xfffcc090>
   41d88:	300b883a 	mov	r5,r6
   41d8c:	dfc00917 	ldw	ra,36(sp)
   41d90:	df000817 	ldw	fp,32(sp)
   41d94:	ddc00717 	ldw	r23,28(sp)
   41d98:	dd800617 	ldw	r22,24(sp)
   41d9c:	dd400517 	ldw	r21,20(sp)
   41da0:	dd000417 	ldw	r20,16(sp)
   41da4:	dcc00317 	ldw	r19,12(sp)
   41da8:	dc800217 	ldw	r18,8(sp)
   41dac:	dc400117 	ldw	r17,4(sp)
   41db0:	dc000017 	ldw	r16,0(sp)
   41db4:	dec00a04 	addi	sp,sp,40
   41db8:	0040f301 	jmpi	40f30 <_malloc_r>
   41dbc:	11400317 	ldw	r5,12(r2)
   41dc0:	10800217 	ldw	r2,8(r2)
   41dc4:	9823883a 	mov	r17,r19
   41dc8:	2021883a 	mov	r16,r4
   41dcc:	11400315 	stw	r5,12(r2)
   41dd0:	28800215 	stw	r2,8(r5)
   41dd4:	003f7906 	br	41bbc <__alt_data_end+0xfffcc05c>
   41dd8:	21000117 	ldw	r4,4(r4)
   41ddc:	00bfff04 	movi	r2,-4
   41de0:	a1800404 	addi	r6,r20,16
   41de4:	2088703a 	and	r4,r4,r2
   41de8:	2409883a 	add	r4,r4,r16
   41dec:	2180380e 	bge	r4,r6,41ed0 <_realloc_r+0x47c>
   41df0:	18c0004c 	andi	r3,r3,1
   41df4:	183fc51e 	bne	r3,zero,41d0c <__alt_data_end+0xfffcc1ac>
   41df8:	9dfffe17 	ldw	r23,-8(r19)
   41dfc:	adefc83a 	sub	r23,r21,r23
   41e00:	b9400117 	ldw	r5,4(r23)
   41e04:	288a703a 	and	r5,r5,r2
   41e08:	216d883a 	add	r22,r4,r5
   41e0c:	b1bf8b16 	blt	r22,r6,41c3c <__alt_data_end+0xfffcc0dc>
   41e10:	b8800317 	ldw	r2,12(r23)
   41e14:	b8c00217 	ldw	r3,8(r23)
   41e18:	81bfff04 	addi	r6,r16,-4
   41e1c:	01000904 	movi	r4,36
   41e20:	18800315 	stw	r2,12(r3)
   41e24:	10c00215 	stw	r3,8(r2)
   41e28:	bc400204 	addi	r17,r23,8
   41e2c:	21805a36 	bltu	r4,r6,41f98 <_realloc_r+0x544>
   41e30:	008004c4 	movi	r2,19
   41e34:	1180562e 	bgeu	r2,r6,41f90 <_realloc_r+0x53c>
   41e38:	98800017 	ldw	r2,0(r19)
   41e3c:	b8800215 	stw	r2,8(r23)
   41e40:	98800117 	ldw	r2,4(r19)
   41e44:	b8800315 	stw	r2,12(r23)
   41e48:	008006c4 	movi	r2,27
   41e4c:	11805636 	bltu	r2,r6,41fa8 <_realloc_r+0x554>
   41e50:	b8800404 	addi	r2,r23,16
   41e54:	9cc00204 	addi	r19,r19,8
   41e58:	98c00017 	ldw	r3,0(r19)
   41e5c:	10c00015 	stw	r3,0(r2)
   41e60:	98c00117 	ldw	r3,4(r19)
   41e64:	10c00115 	stw	r3,4(r2)
   41e68:	98c00217 	ldw	r3,8(r19)
   41e6c:	10c00215 	stw	r3,8(r2)
   41e70:	bd07883a 	add	r3,r23,r20
   41e74:	b505c83a 	sub	r2,r22,r20
   41e78:	e0c00215 	stw	r3,8(fp)
   41e7c:	10800054 	ori	r2,r2,1
   41e80:	18800115 	stw	r2,4(r3)
   41e84:	b8800117 	ldw	r2,4(r23)
   41e88:	9009883a 	mov	r4,r18
   41e8c:	1080004c 	andi	r2,r2,1
   41e90:	a0a8b03a 	or	r20,r20,r2
   41e94:	bd000115 	stw	r20,4(r23)
   41e98:	0043b540 	call	43b54 <__malloc_unlock>
   41e9c:	8805883a 	mov	r2,r17
   41ea0:	003f5306 	br	41bf0 <__alt_data_end+0xfffcc090>
   41ea4:	98c00017 	ldw	r3,0(r19)
   41ea8:	88c00015 	stw	r3,0(r17)
   41eac:	98c00117 	ldw	r3,4(r19)
   41eb0:	88c00115 	stw	r3,4(r17)
   41eb4:	00c006c4 	movi	r3,27
   41eb8:	19801d36 	bltu	r3,r6,41f30 <_realloc_r+0x4dc>
   41ebc:	88800204 	addi	r2,r17,8
   41ec0:	98c00204 	addi	r3,r19,8
   41ec4:	003fa306 	br	41d54 <__alt_data_end+0xfffcc1f4>
   41ec8:	8807883a 	mov	r3,r17
   41ecc:	003f7406 	br	41ca0 <__alt_data_end+0xfffcc140>
   41ed0:	ad2b883a 	add	r21,r21,r20
   41ed4:	2505c83a 	sub	r2,r4,r20
   41ed8:	e5400215 	stw	r21,8(fp)
   41edc:	10800054 	ori	r2,r2,1
   41ee0:	a8800115 	stw	r2,4(r21)
   41ee4:	98bfff17 	ldw	r2,-4(r19)
   41ee8:	9009883a 	mov	r4,r18
   41eec:	1080004c 	andi	r2,r2,1
   41ef0:	a0a8b03a 	or	r20,r20,r2
   41ef4:	9d3fff15 	stw	r20,-4(r19)
   41ef8:	0043b540 	call	43b54 <__malloc_unlock>
   41efc:	9805883a 	mov	r2,r19
   41f00:	003f3b06 	br	41bf0 <__alt_data_end+0xfffcc090>
   41f04:	8809883a 	mov	r4,r17
   41f08:	980b883a 	mov	r5,r19
   41f0c:	00418f80 	call	418f8 <memmove>
   41f10:	003f9606 	br	41d6c <__alt_data_end+0xfffcc20c>
   41f14:	8809883a 	mov	r4,r17
   41f18:	980b883a 	mov	r5,r19
   41f1c:	00418f80 	call	418f8 <memmove>
   41f20:	b8c00117 	ldw	r3,4(r23)
   41f24:	b021883a 	mov	r16,r22
   41f28:	b82b883a 	mov	r21,r23
   41f2c:	003f2306 	br	41bbc <__alt_data_end+0xfffcc05c>
   41f30:	98c00217 	ldw	r3,8(r19)
   41f34:	88c00215 	stw	r3,8(r17)
   41f38:	98c00317 	ldw	r3,12(r19)
   41f3c:	88c00315 	stw	r3,12(r17)
   41f40:	30800c26 	beq	r6,r2,41f74 <_realloc_r+0x520>
   41f44:	88800404 	addi	r2,r17,16
   41f48:	98c00404 	addi	r3,r19,16
   41f4c:	003f8106 	br	41d54 <__alt_data_end+0xfffcc1f4>
   41f50:	893fff17 	ldw	r4,-4(r17)
   41f54:	00bfff04 	movi	r2,-4
   41f58:	9823883a 	mov	r17,r19
   41f5c:	2084703a 	and	r2,r4,r2
   41f60:	80a1883a 	add	r16,r16,r2
   41f64:	003f1506 	br	41bbc <__alt_data_end+0xfffcc05c>
   41f68:	b8c00404 	addi	r3,r23,16
   41f6c:	9cc00204 	addi	r19,r19,8
   41f70:	003f4b06 	br	41ca0 <__alt_data_end+0xfffcc140>
   41f74:	99000417 	ldw	r4,16(r19)
   41f78:	88800604 	addi	r2,r17,24
   41f7c:	98c00604 	addi	r3,r19,24
   41f80:	89000415 	stw	r4,16(r17)
   41f84:	99000517 	ldw	r4,20(r19)
   41f88:	89000515 	stw	r4,20(r17)
   41f8c:	003f7106 	br	41d54 <__alt_data_end+0xfffcc1f4>
   41f90:	8805883a 	mov	r2,r17
   41f94:	003fb006 	br	41e58 <__alt_data_end+0xfffcc2f8>
   41f98:	8809883a 	mov	r4,r17
   41f9c:	980b883a 	mov	r5,r19
   41fa0:	00418f80 	call	418f8 <memmove>
   41fa4:	003fb206 	br	41e70 <__alt_data_end+0xfffcc310>
   41fa8:	98800217 	ldw	r2,8(r19)
   41fac:	b8800415 	stw	r2,16(r23)
   41fb0:	98800317 	ldw	r2,12(r19)
   41fb4:	b8800515 	stw	r2,20(r23)
   41fb8:	31000726 	beq	r6,r4,41fd8 <_realloc_r+0x584>
   41fbc:	b8800604 	addi	r2,r23,24
   41fc0:	9cc00404 	addi	r19,r19,16
   41fc4:	003fa406 	br	41e58 <__alt_data_end+0xfffcc2f8>
   41fc8:	9009883a 	mov	r4,r18
   41fcc:	0043b540 	call	43b54 <__malloc_unlock>
   41fd0:	0005883a 	mov	r2,zero
   41fd4:	003f0606 	br	41bf0 <__alt_data_end+0xfffcc090>
   41fd8:	98c00417 	ldw	r3,16(r19)
   41fdc:	9cc00604 	addi	r19,r19,24
   41fe0:	b8800804 	addi	r2,r23,32
   41fe4:	b8c00615 	stw	r3,24(r23)
   41fe8:	98ffff17 	ldw	r3,-4(r19)
   41fec:	b8c00715 	stw	r3,28(r23)
   41ff0:	003f9906 	br	41e58 <__alt_data_end+0xfffcc2f8>

00041ff4 <_sbrk_r>:
   41ff4:	defffd04 	addi	sp,sp,-12
   41ff8:	dc000015 	stw	r16,0(sp)
   41ffc:	04000174 	movhi	r16,5
   42000:	dc400115 	stw	r17,4(sp)
   42004:	8427c504 	addi	r16,r16,-24812
   42008:	2023883a 	mov	r17,r4
   4200c:	2809883a 	mov	r4,r5
   42010:	dfc00215 	stw	ra,8(sp)
   42014:	80000015 	stw	zero,0(r16)
   42018:	0043d480 	call	43d48 <sbrk>
   4201c:	00ffffc4 	movi	r3,-1
   42020:	10c00526 	beq	r2,r3,42038 <_sbrk_r+0x44>
   42024:	dfc00217 	ldw	ra,8(sp)
   42028:	dc400117 	ldw	r17,4(sp)
   4202c:	dc000017 	ldw	r16,0(sp)
   42030:	dec00304 	addi	sp,sp,12
   42034:	f800283a 	ret
   42038:	80c00017 	ldw	r3,0(r16)
   4203c:	183ff926 	beq	r3,zero,42024 <__alt_data_end+0xfffcc4c4>
   42040:	88c00015 	stw	r3,0(r17)
   42044:	003ff706 	br	42024 <__alt_data_end+0xfffcc4c4>

00042048 <__swsetup_r>:
   42048:	00800174 	movhi	r2,5
   4204c:	defffd04 	addi	sp,sp,-12
   42050:	10a0e904 	addi	r2,r2,-31836
   42054:	dc400115 	stw	r17,4(sp)
   42058:	2023883a 	mov	r17,r4
   4205c:	11000017 	ldw	r4,0(r2)
   42060:	dc000015 	stw	r16,0(sp)
   42064:	dfc00215 	stw	ra,8(sp)
   42068:	2821883a 	mov	r16,r5
   4206c:	20000226 	beq	r4,zero,42078 <__swsetup_r+0x30>
   42070:	20c00e17 	ldw	r3,56(r4)
   42074:	18002e26 	beq	r3,zero,42130 <__swsetup_r+0xe8>
   42078:	8080030b 	ldhu	r2,12(r16)
   4207c:	10c0020c 	andi	r3,r2,8
   42080:	100d883a 	mov	r6,r2
   42084:	18000f26 	beq	r3,zero,420c4 <__swsetup_r+0x7c>
   42088:	80c00417 	ldw	r3,16(r16)
   4208c:	18001526 	beq	r3,zero,420e4 <__swsetup_r+0x9c>
   42090:	1100004c 	andi	r4,r2,1
   42094:	20001c1e 	bne	r4,zero,42108 <__swsetup_r+0xc0>
   42098:	1080008c 	andi	r2,r2,2
   4209c:	1000261e 	bne	r2,zero,42138 <__swsetup_r+0xf0>
   420a0:	80800517 	ldw	r2,20(r16)
   420a4:	80800215 	stw	r2,8(r16)
   420a8:	18001c26 	beq	r3,zero,4211c <__swsetup_r+0xd4>
   420ac:	0005883a 	mov	r2,zero
   420b0:	dfc00217 	ldw	ra,8(sp)
   420b4:	dc400117 	ldw	r17,4(sp)
   420b8:	dc000017 	ldw	r16,0(sp)
   420bc:	dec00304 	addi	sp,sp,12
   420c0:	f800283a 	ret
   420c4:	3080040c 	andi	r2,r6,16
   420c8:	10001726 	beq	r2,zero,42128 <__swsetup_r+0xe0>
   420cc:	3080010c 	andi	r2,r6,4
   420d0:	10001b1e 	bne	r2,zero,42140 <__swsetup_r+0xf8>
   420d4:	80c00417 	ldw	r3,16(r16)
   420d8:	30800214 	ori	r2,r6,8
   420dc:	8080030d 	sth	r2,12(r16)
   420e0:	183feb1e 	bne	r3,zero,42090 <__alt_data_end+0xfffcc530>
   420e4:	1140a00c 	andi	r5,r2,640
   420e8:	01008004 	movi	r4,512
   420ec:	293fe826 	beq	r5,r4,42090 <__alt_data_end+0xfffcc530>
   420f0:	8809883a 	mov	r4,r17
   420f4:	800b883a 	mov	r5,r16
   420f8:	0042d080 	call	42d08 <__smakebuf_r>
   420fc:	8080030b 	ldhu	r2,12(r16)
   42100:	80c00417 	ldw	r3,16(r16)
   42104:	003fe206 	br	42090 <__alt_data_end+0xfffcc530>
   42108:	80800517 	ldw	r2,20(r16)
   4210c:	80000215 	stw	zero,8(r16)
   42110:	0085c83a 	sub	r2,zero,r2
   42114:	80800615 	stw	r2,24(r16)
   42118:	183fe41e 	bne	r3,zero,420ac <__alt_data_end+0xfffcc54c>
   4211c:	8080030b 	ldhu	r2,12(r16)
   42120:	1080200c 	andi	r2,r2,128
   42124:	103fe226 	beq	r2,zero,420b0 <__alt_data_end+0xfffcc550>
   42128:	00bfffc4 	movi	r2,-1
   4212c:	003fe006 	br	420b0 <__alt_data_end+0xfffcc550>
   42130:	00427340 	call	42734 <__sinit>
   42134:	003fd006 	br	42078 <__alt_data_end+0xfffcc518>
   42138:	0005883a 	mov	r2,zero
   4213c:	003fd906 	br	420a4 <__alt_data_end+0xfffcc544>
   42140:	81400c17 	ldw	r5,48(r16)
   42144:	28000626 	beq	r5,zero,42160 <__swsetup_r+0x118>
   42148:	80801004 	addi	r2,r16,64
   4214c:	28800326 	beq	r5,r2,4215c <__swsetup_r+0x114>
   42150:	8809883a 	mov	r4,r17
   42154:	00428a80 	call	428a8 <_free_r>
   42158:	8180030b 	ldhu	r6,12(r16)
   4215c:	80000c15 	stw	zero,48(r16)
   42160:	80c00417 	ldw	r3,16(r16)
   42164:	00bff6c4 	movi	r2,-37
   42168:	118c703a 	and	r6,r2,r6
   4216c:	80000115 	stw	zero,4(r16)
   42170:	80c00015 	stw	r3,0(r16)
   42174:	003fd806 	br	420d8 <__alt_data_end+0xfffcc578>

00042178 <_fflush_r>:
   42178:	defffb04 	addi	sp,sp,-20
   4217c:	dcc00315 	stw	r19,12(sp)
   42180:	dc000015 	stw	r16,0(sp)
   42184:	dfc00415 	stw	ra,16(sp)
   42188:	dc800215 	stw	r18,8(sp)
   4218c:	dc400115 	stw	r17,4(sp)
   42190:	2027883a 	mov	r19,r4
   42194:	2821883a 	mov	r16,r5
   42198:	20000226 	beq	r4,zero,421a4 <_fflush_r+0x2c>
   4219c:	20800e17 	ldw	r2,56(r4)
   421a0:	10005326 	beq	r2,zero,422f0 <_fflush_r+0x178>
   421a4:	8080030b 	ldhu	r2,12(r16)
   421a8:	10ffffcc 	andi	r3,r2,65535
   421ac:	18e0001c 	xori	r3,r3,32768
   421b0:	18e00004 	addi	r3,r3,-32768
   421b4:	18002c26 	beq	r3,zero,42268 <_fflush_r+0xf0>
   421b8:	10c0020c 	andi	r3,r2,8
   421bc:	1800321e 	bne	r3,zero,42288 <_fflush_r+0x110>
   421c0:	80c00117 	ldw	r3,4(r16)
   421c4:	10820014 	ori	r2,r2,2048
   421c8:	8080030d 	sth	r2,12(r16)
   421cc:	00c0570e 	bge	zero,r3,4232c <_fflush_r+0x1b4>
   421d0:	82000a17 	ldw	r8,40(r16)
   421d4:	40002426 	beq	r8,zero,42268 <_fflush_r+0xf0>
   421d8:	9c400017 	ldw	r17,0(r19)
   421dc:	10c4000c 	andi	r3,r2,4096
   421e0:	98000015 	stw	zero,0(r19)
   421e4:	18004626 	beq	r3,zero,42300 <_fflush_r+0x188>
   421e8:	81801417 	ldw	r6,80(r16)
   421ec:	10c0010c 	andi	r3,r2,4
   421f0:	18000626 	beq	r3,zero,4220c <_fflush_r+0x94>
   421f4:	80c00117 	ldw	r3,4(r16)
   421f8:	80800c17 	ldw	r2,48(r16)
   421fc:	30cdc83a 	sub	r6,r6,r3
   42200:	10000226 	beq	r2,zero,4220c <_fflush_r+0x94>
   42204:	80800f17 	ldw	r2,60(r16)
   42208:	308dc83a 	sub	r6,r6,r2
   4220c:	81400717 	ldw	r5,28(r16)
   42210:	9809883a 	mov	r4,r19
   42214:	000f883a 	mov	r7,zero
   42218:	403ee83a 	callr	r8
   4221c:	00ffffc4 	movi	r3,-1
   42220:	10c04526 	beq	r2,r3,42338 <_fflush_r+0x1c0>
   42224:	80c0030b 	ldhu	r3,12(r16)
   42228:	81000417 	ldw	r4,16(r16)
   4222c:	80000115 	stw	zero,4(r16)
   42230:	197dffcc 	andi	r5,r3,63487
   42234:	8140030d 	sth	r5,12(r16)
   42238:	81000015 	stw	r4,0(r16)
   4223c:	18c4000c 	andi	r3,r3,4096
   42240:	18000126 	beq	r3,zero,42248 <_fflush_r+0xd0>
   42244:	80801415 	stw	r2,80(r16)
   42248:	81400c17 	ldw	r5,48(r16)
   4224c:	9c400015 	stw	r17,0(r19)
   42250:	28000526 	beq	r5,zero,42268 <_fflush_r+0xf0>
   42254:	80801004 	addi	r2,r16,64
   42258:	28800226 	beq	r5,r2,42264 <_fflush_r+0xec>
   4225c:	9809883a 	mov	r4,r19
   42260:	00428a80 	call	428a8 <_free_r>
   42264:	80000c15 	stw	zero,48(r16)
   42268:	0005883a 	mov	r2,zero
   4226c:	dfc00417 	ldw	ra,16(sp)
   42270:	dcc00317 	ldw	r19,12(sp)
   42274:	dc800217 	ldw	r18,8(sp)
   42278:	dc400117 	ldw	r17,4(sp)
   4227c:	dc000017 	ldw	r16,0(sp)
   42280:	dec00504 	addi	sp,sp,20
   42284:	f800283a 	ret
   42288:	84800417 	ldw	r18,16(r16)
   4228c:	903ff626 	beq	r18,zero,42268 <__alt_data_end+0xfffcc708>
   42290:	84400017 	ldw	r17,0(r16)
   42294:	108000cc 	andi	r2,r2,3
   42298:	84800015 	stw	r18,0(r16)
   4229c:	8ca3c83a 	sub	r17,r17,r18
   422a0:	10001526 	beq	r2,zero,422f8 <_fflush_r+0x180>
   422a4:	0005883a 	mov	r2,zero
   422a8:	80800215 	stw	r2,8(r16)
   422ac:	04400316 	blt	zero,r17,422bc <_fflush_r+0x144>
   422b0:	003fed06 	br	42268 <__alt_data_end+0xfffcc708>
   422b4:	90a5883a 	add	r18,r18,r2
   422b8:	047feb0e 	bge	zero,r17,42268 <__alt_data_end+0xfffcc708>
   422bc:	80800917 	ldw	r2,36(r16)
   422c0:	81400717 	ldw	r5,28(r16)
   422c4:	880f883a 	mov	r7,r17
   422c8:	900d883a 	mov	r6,r18
   422cc:	9809883a 	mov	r4,r19
   422d0:	103ee83a 	callr	r2
   422d4:	88a3c83a 	sub	r17,r17,r2
   422d8:	00bff616 	blt	zero,r2,422b4 <__alt_data_end+0xfffcc754>
   422dc:	80c0030b 	ldhu	r3,12(r16)
   422e0:	00bfffc4 	movi	r2,-1
   422e4:	18c01014 	ori	r3,r3,64
   422e8:	80c0030d 	sth	r3,12(r16)
   422ec:	003fdf06 	br	4226c <__alt_data_end+0xfffcc70c>
   422f0:	00427340 	call	42734 <__sinit>
   422f4:	003fab06 	br	421a4 <__alt_data_end+0xfffcc644>
   422f8:	80800517 	ldw	r2,20(r16)
   422fc:	003fea06 	br	422a8 <__alt_data_end+0xfffcc748>
   42300:	81400717 	ldw	r5,28(r16)
   42304:	000d883a 	mov	r6,zero
   42308:	9809883a 	mov	r4,r19
   4230c:	01c00044 	movi	r7,1
   42310:	403ee83a 	callr	r8
   42314:	100d883a 	mov	r6,r2
   42318:	00bfffc4 	movi	r2,-1
   4231c:	30801326 	beq	r6,r2,4236c <_fflush_r+0x1f4>
   42320:	8080030b 	ldhu	r2,12(r16)
   42324:	82000a17 	ldw	r8,40(r16)
   42328:	003fb006 	br	421ec <__alt_data_end+0xfffcc68c>
   4232c:	80c00f17 	ldw	r3,60(r16)
   42330:	00ffa716 	blt	zero,r3,421d0 <__alt_data_end+0xfffcc670>
   42334:	003fcc06 	br	42268 <__alt_data_end+0xfffcc708>
   42338:	98c00017 	ldw	r3,0(r19)
   4233c:	183fb926 	beq	r3,zero,42224 <__alt_data_end+0xfffcc6c4>
   42340:	01000744 	movi	r4,29
   42344:	19000226 	beq	r3,r4,42350 <_fflush_r+0x1d8>
   42348:	01000584 	movi	r4,22
   4234c:	1900101e 	bne	r3,r4,42390 <_fflush_r+0x218>
   42350:	8080030b 	ldhu	r2,12(r16)
   42354:	80c00417 	ldw	r3,16(r16)
   42358:	80000115 	stw	zero,4(r16)
   4235c:	10bdffcc 	andi	r2,r2,63487
   42360:	8080030d 	sth	r2,12(r16)
   42364:	80c00015 	stw	r3,0(r16)
   42368:	003fb706 	br	42248 <__alt_data_end+0xfffcc6e8>
   4236c:	98800017 	ldw	r2,0(r19)
   42370:	103feb26 	beq	r2,zero,42320 <__alt_data_end+0xfffcc7c0>
   42374:	00c00744 	movi	r3,29
   42378:	10c00226 	beq	r2,r3,42384 <_fflush_r+0x20c>
   4237c:	00c00584 	movi	r3,22
   42380:	10ffd61e 	bne	r2,r3,422dc <__alt_data_end+0xfffcc77c>
   42384:	9c400015 	stw	r17,0(r19)
   42388:	0005883a 	mov	r2,zero
   4238c:	003fb706 	br	4226c <__alt_data_end+0xfffcc70c>
   42390:	80c0030b 	ldhu	r3,12(r16)
   42394:	18c01014 	ori	r3,r3,64
   42398:	80c0030d 	sth	r3,12(r16)
   4239c:	003fb306 	br	4226c <__alt_data_end+0xfffcc70c>

000423a0 <fflush>:
   423a0:	20000526 	beq	r4,zero,423b8 <fflush+0x18>
   423a4:	00800174 	movhi	r2,5
   423a8:	10a0e904 	addi	r2,r2,-31836
   423ac:	200b883a 	mov	r5,r4
   423b0:	11000017 	ldw	r4,0(r2)
   423b4:	00421781 	jmpi	42178 <_fflush_r>
   423b8:	00800174 	movhi	r2,5
   423bc:	10a0e804 	addi	r2,r2,-31840
   423c0:	11000017 	ldw	r4,0(r2)
   423c4:	01400134 	movhi	r5,4
   423c8:	29485e04 	addi	r5,r5,8568
   423cc:	0042c501 	jmpi	42c50 <_fwalk_reent>

000423d0 <__fp_lock>:
   423d0:	0005883a 	mov	r2,zero
   423d4:	f800283a 	ret

000423d8 <__fp_unlock>:
   423d8:	0005883a 	mov	r2,zero
   423dc:	f800283a 	ret

000423e0 <_cleanup_r>:
   423e0:	01400134 	movhi	r5,4
   423e4:	294cb404 	addi	r5,r5,13008
   423e8:	0042b981 	jmpi	42b98 <_fwalk>

000423ec <__sinit.part.1>:
   423ec:	defff604 	addi	sp,sp,-40
   423f0:	00c00134 	movhi	r3,4
   423f4:	dfc00915 	stw	ra,36(sp)
   423f8:	df000815 	stw	fp,32(sp)
   423fc:	ddc00715 	stw	r23,28(sp)
   42400:	dd800615 	stw	r22,24(sp)
   42404:	dd400515 	stw	r21,20(sp)
   42408:	dd000415 	stw	r20,16(sp)
   4240c:	dcc00315 	stw	r19,12(sp)
   42410:	dc800215 	stw	r18,8(sp)
   42414:	dc400115 	stw	r17,4(sp)
   42418:	dc000015 	stw	r16,0(sp)
   4241c:	18c8f804 	addi	r3,r3,9184
   42420:	24000117 	ldw	r16,4(r4)
   42424:	20c00f15 	stw	r3,60(r4)
   42428:	07000044 	movi	fp,1
   4242c:	00c000c4 	movi	r3,3
   42430:	2080bb04 	addi	r2,r4,748
   42434:	20c0b915 	stw	r3,740(r4)
   42438:	27000e15 	stw	fp,56(r4)
   4243c:	2080ba15 	stw	r2,744(r4)
   42440:	2000b815 	stw	zero,736(r4)
   42444:	05c00204 	movi	r23,8
   42448:	00800104 	movi	r2,4
   4244c:	2025883a 	mov	r18,r4
   42450:	b80d883a 	mov	r6,r23
   42454:	81001704 	addi	r4,r16,92
   42458:	000b883a 	mov	r5,zero
   4245c:	80000015 	stw	zero,0(r16)
   42460:	80000115 	stw	zero,4(r16)
   42464:	80000215 	stw	zero,8(r16)
   42468:	8080030d 	sth	r2,12(r16)
   4246c:	80001915 	stw	zero,100(r16)
   42470:	8000038d 	sth	zero,14(r16)
   42474:	80000415 	stw	zero,16(r16)
   42478:	80000515 	stw	zero,20(r16)
   4247c:	80000615 	stw	zero,24(r16)
   42480:	0042ec00 	call	42ec0 <memset>
   42484:	05800134 	movhi	r22,4
   42488:	94400217 	ldw	r17,8(r18)
   4248c:	05400134 	movhi	r21,4
   42490:	05000134 	movhi	r20,4
   42494:	04c00134 	movhi	r19,4
   42498:	b58bf904 	addi	r22,r22,12260
   4249c:	ad4c1004 	addi	r21,r21,12352
   424a0:	a50c2f04 	addi	r20,r20,12476
   424a4:	9ccc4604 	addi	r19,r19,12568
   424a8:	85800815 	stw	r22,32(r16)
   424ac:	85400915 	stw	r21,36(r16)
   424b0:	85000a15 	stw	r20,40(r16)
   424b4:	84c00b15 	stw	r19,44(r16)
   424b8:	84000715 	stw	r16,28(r16)
   424bc:	00800284 	movi	r2,10
   424c0:	89001704 	addi	r4,r17,92
   424c4:	b80d883a 	mov	r6,r23
   424c8:	000b883a 	mov	r5,zero
   424cc:	88000015 	stw	zero,0(r17)
   424d0:	88000115 	stw	zero,4(r17)
   424d4:	88000215 	stw	zero,8(r17)
   424d8:	8880030d 	sth	r2,12(r17)
   424dc:	88001915 	stw	zero,100(r17)
   424e0:	8f00038d 	sth	fp,14(r17)
   424e4:	88000415 	stw	zero,16(r17)
   424e8:	88000515 	stw	zero,20(r17)
   424ec:	88000615 	stw	zero,24(r17)
   424f0:	0042ec00 	call	42ec0 <memset>
   424f4:	94000317 	ldw	r16,12(r18)
   424f8:	00800484 	movi	r2,18
   424fc:	8c400715 	stw	r17,28(r17)
   42500:	8d800815 	stw	r22,32(r17)
   42504:	8d400915 	stw	r21,36(r17)
   42508:	8d000a15 	stw	r20,40(r17)
   4250c:	8cc00b15 	stw	r19,44(r17)
   42510:	8080030d 	sth	r2,12(r16)
   42514:	00800084 	movi	r2,2
   42518:	80000015 	stw	zero,0(r16)
   4251c:	80000115 	stw	zero,4(r16)
   42520:	80000215 	stw	zero,8(r16)
   42524:	80001915 	stw	zero,100(r16)
   42528:	8080038d 	sth	r2,14(r16)
   4252c:	80000415 	stw	zero,16(r16)
   42530:	80000515 	stw	zero,20(r16)
   42534:	80000615 	stw	zero,24(r16)
   42538:	81001704 	addi	r4,r16,92
   4253c:	000b883a 	mov	r5,zero
   42540:	b80d883a 	mov	r6,r23
   42544:	0042ec00 	call	42ec0 <memset>
   42548:	84000715 	stw	r16,28(r16)
   4254c:	85800815 	stw	r22,32(r16)
   42550:	85400915 	stw	r21,36(r16)
   42554:	85000a15 	stw	r20,40(r16)
   42558:	84c00b15 	stw	r19,44(r16)
   4255c:	dfc00917 	ldw	ra,36(sp)
   42560:	df000817 	ldw	fp,32(sp)
   42564:	ddc00717 	ldw	r23,28(sp)
   42568:	dd800617 	ldw	r22,24(sp)
   4256c:	dd400517 	ldw	r21,20(sp)
   42570:	dd000417 	ldw	r20,16(sp)
   42574:	dcc00317 	ldw	r19,12(sp)
   42578:	dc800217 	ldw	r18,8(sp)
   4257c:	dc400117 	ldw	r17,4(sp)
   42580:	dc000017 	ldw	r16,0(sp)
   42584:	dec00a04 	addi	sp,sp,40
   42588:	f800283a 	ret

0004258c <__sfmoreglue>:
   4258c:	defffc04 	addi	sp,sp,-16
   42590:	dc800215 	stw	r18,8(sp)
   42594:	2825883a 	mov	r18,r5
   42598:	dc000015 	stw	r16,0(sp)
   4259c:	01401a04 	movi	r5,104
   425a0:	2021883a 	mov	r16,r4
   425a4:	9009883a 	mov	r4,r18
   425a8:	dfc00315 	stw	ra,12(sp)
   425ac:	dc400115 	stw	r17,4(sp)
   425b0:	00408840 	call	40884 <__mulsi3>
   425b4:	8009883a 	mov	r4,r16
   425b8:	11400304 	addi	r5,r2,12
   425bc:	1023883a 	mov	r17,r2
   425c0:	0040f300 	call	40f30 <_malloc_r>
   425c4:	1021883a 	mov	r16,r2
   425c8:	10000726 	beq	r2,zero,425e8 <__sfmoreglue+0x5c>
   425cc:	11000304 	addi	r4,r2,12
   425d0:	10000015 	stw	zero,0(r2)
   425d4:	14800115 	stw	r18,4(r2)
   425d8:	11000215 	stw	r4,8(r2)
   425dc:	000b883a 	mov	r5,zero
   425e0:	880d883a 	mov	r6,r17
   425e4:	0042ec00 	call	42ec0 <memset>
   425e8:	8005883a 	mov	r2,r16
   425ec:	dfc00317 	ldw	ra,12(sp)
   425f0:	dc800217 	ldw	r18,8(sp)
   425f4:	dc400117 	ldw	r17,4(sp)
   425f8:	dc000017 	ldw	r16,0(sp)
   425fc:	dec00404 	addi	sp,sp,16
   42600:	f800283a 	ret

00042604 <__sfp>:
   42604:	00800174 	movhi	r2,5
   42608:	defffb04 	addi	sp,sp,-20
   4260c:	10a0e804 	addi	r2,r2,-31840
   42610:	dc800215 	stw	r18,8(sp)
   42614:	14800017 	ldw	r18,0(r2)
   42618:	dcc00315 	stw	r19,12(sp)
   4261c:	dfc00415 	stw	ra,16(sp)
   42620:	90800e17 	ldw	r2,56(r18)
   42624:	dc400115 	stw	r17,4(sp)
   42628:	dc000015 	stw	r16,0(sp)
   4262c:	2027883a 	mov	r19,r4
   42630:	1000021e 	bne	r2,zero,4263c <__sfp+0x38>
   42634:	9009883a 	mov	r4,r18
   42638:	00423ec0 	call	423ec <__sinit.part.1>
   4263c:	9480b804 	addi	r18,r18,736
   42640:	047fffc4 	movi	r17,-1
   42644:	91400117 	ldw	r5,4(r18)
   42648:	94000217 	ldw	r16,8(r18)
   4264c:	297fffc4 	addi	r5,r5,-1
   42650:	28000a16 	blt	r5,zero,4267c <__sfp+0x78>
   42654:	8080030f 	ldh	r2,12(r16)
   42658:	10000c26 	beq	r2,zero,4268c <__sfp+0x88>
   4265c:	80c01d04 	addi	r3,r16,116
   42660:	00000206 	br	4266c <__sfp+0x68>
   42664:	18bfe60f 	ldh	r2,-104(r3)
   42668:	10000826 	beq	r2,zero,4268c <__sfp+0x88>
   4266c:	297fffc4 	addi	r5,r5,-1
   42670:	1c3ffd04 	addi	r16,r3,-12
   42674:	18c01a04 	addi	r3,r3,104
   42678:	2c7ffa1e 	bne	r5,r17,42664 <__alt_data_end+0xfffccb04>
   4267c:	90800017 	ldw	r2,0(r18)
   42680:	10001d26 	beq	r2,zero,426f8 <__sfp+0xf4>
   42684:	1025883a 	mov	r18,r2
   42688:	003fee06 	br	42644 <__alt_data_end+0xfffccae4>
   4268c:	00bfffc4 	movi	r2,-1
   42690:	8080038d 	sth	r2,14(r16)
   42694:	00800044 	movi	r2,1
   42698:	8080030d 	sth	r2,12(r16)
   4269c:	80001915 	stw	zero,100(r16)
   426a0:	80000015 	stw	zero,0(r16)
   426a4:	80000215 	stw	zero,8(r16)
   426a8:	80000115 	stw	zero,4(r16)
   426ac:	80000415 	stw	zero,16(r16)
   426b0:	80000515 	stw	zero,20(r16)
   426b4:	80000615 	stw	zero,24(r16)
   426b8:	81001704 	addi	r4,r16,92
   426bc:	000b883a 	mov	r5,zero
   426c0:	01800204 	movi	r6,8
   426c4:	0042ec00 	call	42ec0 <memset>
   426c8:	8005883a 	mov	r2,r16
   426cc:	80000c15 	stw	zero,48(r16)
   426d0:	80000d15 	stw	zero,52(r16)
   426d4:	80001115 	stw	zero,68(r16)
   426d8:	80001215 	stw	zero,72(r16)
   426dc:	dfc00417 	ldw	ra,16(sp)
   426e0:	dcc00317 	ldw	r19,12(sp)
   426e4:	dc800217 	ldw	r18,8(sp)
   426e8:	dc400117 	ldw	r17,4(sp)
   426ec:	dc000017 	ldw	r16,0(sp)
   426f0:	dec00504 	addi	sp,sp,20
   426f4:	f800283a 	ret
   426f8:	9809883a 	mov	r4,r19
   426fc:	01400104 	movi	r5,4
   42700:	004258c0 	call	4258c <__sfmoreglue>
   42704:	90800015 	stw	r2,0(r18)
   42708:	103fde1e 	bne	r2,zero,42684 <__alt_data_end+0xfffccb24>
   4270c:	00800304 	movi	r2,12
   42710:	98800015 	stw	r2,0(r19)
   42714:	0005883a 	mov	r2,zero
   42718:	003ff006 	br	426dc <__alt_data_end+0xfffccb7c>

0004271c <_cleanup>:
   4271c:	00800174 	movhi	r2,5
   42720:	10a0e804 	addi	r2,r2,-31840
   42724:	11000017 	ldw	r4,0(r2)
   42728:	01400134 	movhi	r5,4
   4272c:	294cb404 	addi	r5,r5,13008
   42730:	0042b981 	jmpi	42b98 <_fwalk>

00042734 <__sinit>:
   42734:	20800e17 	ldw	r2,56(r4)
   42738:	10000126 	beq	r2,zero,42740 <__sinit+0xc>
   4273c:	f800283a 	ret
   42740:	00423ec1 	jmpi	423ec <__sinit.part.1>

00042744 <__sfp_lock_acquire>:
   42744:	f800283a 	ret

00042748 <__sfp_lock_release>:
   42748:	f800283a 	ret

0004274c <__sinit_lock_acquire>:
   4274c:	f800283a 	ret

00042750 <__sinit_lock_release>:
   42750:	f800283a 	ret

00042754 <__fp_lock_all>:
   42754:	00800174 	movhi	r2,5
   42758:	10a0e904 	addi	r2,r2,-31836
   4275c:	11000017 	ldw	r4,0(r2)
   42760:	01400134 	movhi	r5,4
   42764:	2948f404 	addi	r5,r5,9168
   42768:	0042b981 	jmpi	42b98 <_fwalk>

0004276c <__fp_unlock_all>:
   4276c:	00800174 	movhi	r2,5
   42770:	10a0e904 	addi	r2,r2,-31836
   42774:	11000017 	ldw	r4,0(r2)
   42778:	01400134 	movhi	r5,4
   4277c:	2948f604 	addi	r5,r5,9176
   42780:	0042b981 	jmpi	42b98 <_fwalk>

00042784 <_malloc_trim_r>:
   42784:	defffb04 	addi	sp,sp,-20
   42788:	dcc00315 	stw	r19,12(sp)
   4278c:	04c00134 	movhi	r19,4
   42790:	dc800215 	stw	r18,8(sp)
   42794:	dc400115 	stw	r17,4(sp)
   42798:	dc000015 	stw	r16,0(sp)
   4279c:	dfc00415 	stw	ra,16(sp)
   427a0:	2821883a 	mov	r16,r5
   427a4:	9cdb3304 	addi	r19,r19,27852
   427a8:	2025883a 	mov	r18,r4
   427ac:	0043b340 	call	43b34 <__malloc_lock>
   427b0:	98800217 	ldw	r2,8(r19)
   427b4:	14400117 	ldw	r17,4(r2)
   427b8:	00bfff04 	movi	r2,-4
   427bc:	88a2703a 	and	r17,r17,r2
   427c0:	8c21c83a 	sub	r16,r17,r16
   427c4:	8403fbc4 	addi	r16,r16,4079
   427c8:	8020d33a 	srli	r16,r16,12
   427cc:	0083ffc4 	movi	r2,4095
   427d0:	843fffc4 	addi	r16,r16,-1
   427d4:	8020933a 	slli	r16,r16,12
   427d8:	1400060e 	bge	r2,r16,427f4 <_malloc_trim_r+0x70>
   427dc:	9009883a 	mov	r4,r18
   427e0:	000b883a 	mov	r5,zero
   427e4:	0041ff40 	call	41ff4 <_sbrk_r>
   427e8:	98c00217 	ldw	r3,8(r19)
   427ec:	1c47883a 	add	r3,r3,r17
   427f0:	10c00a26 	beq	r2,r3,4281c <_malloc_trim_r+0x98>
   427f4:	9009883a 	mov	r4,r18
   427f8:	0043b540 	call	43b54 <__malloc_unlock>
   427fc:	0005883a 	mov	r2,zero
   42800:	dfc00417 	ldw	ra,16(sp)
   42804:	dcc00317 	ldw	r19,12(sp)
   42808:	dc800217 	ldw	r18,8(sp)
   4280c:	dc400117 	ldw	r17,4(sp)
   42810:	dc000017 	ldw	r16,0(sp)
   42814:	dec00504 	addi	sp,sp,20
   42818:	f800283a 	ret
   4281c:	9009883a 	mov	r4,r18
   42820:	040bc83a 	sub	r5,zero,r16
   42824:	0041ff40 	call	41ff4 <_sbrk_r>
   42828:	00ffffc4 	movi	r3,-1
   4282c:	10c00d26 	beq	r2,r3,42864 <_malloc_trim_r+0xe0>
   42830:	00c00174 	movhi	r3,5
   42834:	18e7cd04 	addi	r3,r3,-24780
   42838:	18800017 	ldw	r2,0(r3)
   4283c:	99000217 	ldw	r4,8(r19)
   42840:	8c23c83a 	sub	r17,r17,r16
   42844:	8c400054 	ori	r17,r17,1
   42848:	1421c83a 	sub	r16,r2,r16
   4284c:	24400115 	stw	r17,4(r4)
   42850:	9009883a 	mov	r4,r18
   42854:	1c000015 	stw	r16,0(r3)
   42858:	0043b540 	call	43b54 <__malloc_unlock>
   4285c:	00800044 	movi	r2,1
   42860:	003fe706 	br	42800 <__alt_data_end+0xfffccca0>
   42864:	9009883a 	mov	r4,r18
   42868:	000b883a 	mov	r5,zero
   4286c:	0041ff40 	call	41ff4 <_sbrk_r>
   42870:	99000217 	ldw	r4,8(r19)
   42874:	014003c4 	movi	r5,15
   42878:	1107c83a 	sub	r3,r2,r4
   4287c:	28ffdd0e 	bge	r5,r3,427f4 <__alt_data_end+0xfffccc94>
   42880:	01400174 	movhi	r5,5
   42884:	2960ea04 	addi	r5,r5,-31832
   42888:	29400017 	ldw	r5,0(r5)
   4288c:	18c00054 	ori	r3,r3,1
   42890:	20c00115 	stw	r3,4(r4)
   42894:	00c00174 	movhi	r3,5
   42898:	1145c83a 	sub	r2,r2,r5
   4289c:	18e7cd04 	addi	r3,r3,-24780
   428a0:	18800015 	stw	r2,0(r3)
   428a4:	003fd306 	br	427f4 <__alt_data_end+0xfffccc94>

000428a8 <_free_r>:
   428a8:	28004c26 	beq	r5,zero,429dc <_free_r+0x134>
   428ac:	defffd04 	addi	sp,sp,-12
   428b0:	dc400115 	stw	r17,4(sp)
   428b4:	dc000015 	stw	r16,0(sp)
   428b8:	2023883a 	mov	r17,r4
   428bc:	2821883a 	mov	r16,r5
   428c0:	dfc00215 	stw	ra,8(sp)
   428c4:	0043b340 	call	43b34 <__malloc_lock>
   428c8:	813fff17 	ldw	r4,-4(r16)
   428cc:	00bfff84 	movi	r2,-2
   428d0:	02400134 	movhi	r9,4
   428d4:	81bffe04 	addi	r6,r16,-8
   428d8:	2084703a 	and	r2,r4,r2
   428dc:	4a5b3304 	addi	r9,r9,27852
   428e0:	308b883a 	add	r5,r6,r2
   428e4:	2a000117 	ldw	r8,4(r5)
   428e8:	49c00217 	ldw	r7,8(r9)
   428ec:	00ffff04 	movi	r3,-4
   428f0:	40c6703a 	and	r3,r8,r3
   428f4:	39405326 	beq	r7,r5,42a44 <_free_r+0x19c>
   428f8:	28c00115 	stw	r3,4(r5)
   428fc:	2100004c 	andi	r4,r4,1
   42900:	2000091e 	bne	r4,zero,42928 <_free_r+0x80>
   42904:	81fffe17 	ldw	r7,-8(r16)
   42908:	4a000204 	addi	r8,r9,8
   4290c:	31cdc83a 	sub	r6,r6,r7
   42910:	31000217 	ldw	r4,8(r6)
   42914:	11c5883a 	add	r2,r2,r7
   42918:	22006126 	beq	r4,r8,42aa0 <_free_r+0x1f8>
   4291c:	31c00317 	ldw	r7,12(r6)
   42920:	21c00315 	stw	r7,12(r4)
   42924:	39000215 	stw	r4,8(r7)
   42928:	28c9883a 	add	r4,r5,r3
   4292c:	21c00117 	ldw	r7,4(r4)
   42930:	39c0004c 	andi	r7,r7,1
   42934:	38000d1e 	bne	r7,zero,4296c <_free_r+0xc4>
   42938:	29000217 	ldw	r4,8(r5)
   4293c:	10c5883a 	add	r2,r2,r3
   42940:	00c00134 	movhi	r3,4
   42944:	18db3504 	addi	r3,r3,27860
   42948:	20c07526 	beq	r4,r3,42b20 <_free_r+0x278>
   4294c:	29c00317 	ldw	r7,12(r5)
   42950:	11400054 	ori	r5,r2,1
   42954:	3087883a 	add	r3,r6,r2
   42958:	21c00315 	stw	r7,12(r4)
   4295c:	39000215 	stw	r4,8(r7)
   42960:	31400115 	stw	r5,4(r6)
   42964:	18800015 	stw	r2,0(r3)
   42968:	00000406 	br	4297c <_free_r+0xd4>
   4296c:	10c00054 	ori	r3,r2,1
   42970:	30c00115 	stw	r3,4(r6)
   42974:	3087883a 	add	r3,r6,r2
   42978:	18800015 	stw	r2,0(r3)
   4297c:	00c07fc4 	movi	r3,511
   42980:	18801736 	bltu	r3,r2,429e0 <_free_r+0x138>
   42984:	1004d0fa 	srli	r2,r2,3
   42988:	01400044 	movi	r5,1
   4298c:	49000117 	ldw	r4,4(r9)
   42990:	1087883a 	add	r3,r2,r2
   42994:	18c7883a 	add	r3,r3,r3
   42998:	1005d0ba 	srai	r2,r2,2
   4299c:	18c7883a 	add	r3,r3,r3
   429a0:	1a47883a 	add	r3,r3,r9
   429a4:	19c00217 	ldw	r7,8(r3)
   429a8:	2884983a 	sll	r2,r5,r2
   429ac:	30c00315 	stw	r3,12(r6)
   429b0:	31c00215 	stw	r7,8(r6)
   429b4:	1104b03a 	or	r2,r2,r4
   429b8:	19800215 	stw	r6,8(r3)
   429bc:	48800115 	stw	r2,4(r9)
   429c0:	39800315 	stw	r6,12(r7)
   429c4:	8809883a 	mov	r4,r17
   429c8:	dfc00217 	ldw	ra,8(sp)
   429cc:	dc400117 	ldw	r17,4(sp)
   429d0:	dc000017 	ldw	r16,0(sp)
   429d4:	dec00304 	addi	sp,sp,12
   429d8:	0043b541 	jmpi	43b54 <__malloc_unlock>
   429dc:	f800283a 	ret
   429e0:	1006d27a 	srli	r3,r2,9
   429e4:	01000104 	movi	r4,4
   429e8:	20c04036 	bltu	r4,r3,42aec <_free_r+0x244>
   429ec:	1006d1ba 	srli	r3,r2,6
   429f0:	19400e04 	addi	r5,r3,56
   429f4:	2947883a 	add	r3,r5,r5
   429f8:	18c7883a 	add	r3,r3,r3
   429fc:	18c7883a 	add	r3,r3,r3
   42a00:	1a49883a 	add	r4,r3,r9
   42a04:	20c00217 	ldw	r3,8(r4)
   42a08:	01c00134 	movhi	r7,4
   42a0c:	39db3304 	addi	r7,r7,27852
   42a10:	19003b26 	beq	r3,r4,42b00 <_free_r+0x258>
   42a14:	01ffff04 	movi	r7,-4
   42a18:	19400117 	ldw	r5,4(r3)
   42a1c:	29ca703a 	and	r5,r5,r7
   42a20:	1140022e 	bgeu	r2,r5,42a2c <_free_r+0x184>
   42a24:	18c00217 	ldw	r3,8(r3)
   42a28:	20fffb1e 	bne	r4,r3,42a18 <__alt_data_end+0xfffcceb8>
   42a2c:	18800317 	ldw	r2,12(r3)
   42a30:	30800315 	stw	r2,12(r6)
   42a34:	30c00215 	stw	r3,8(r6)
   42a38:	11800215 	stw	r6,8(r2)
   42a3c:	19800315 	stw	r6,12(r3)
   42a40:	003fe006 	br	429c4 <__alt_data_end+0xfffcce64>
   42a44:	2100004c 	andi	r4,r4,1
   42a48:	1885883a 	add	r2,r3,r2
   42a4c:	2000071e 	bne	r4,zero,42a6c <_free_r+0x1c4>
   42a50:	817ffe17 	ldw	r5,-8(r16)
   42a54:	314dc83a 	sub	r6,r6,r5
   42a58:	30c00317 	ldw	r3,12(r6)
   42a5c:	31000217 	ldw	r4,8(r6)
   42a60:	1145883a 	add	r2,r2,r5
   42a64:	20c00315 	stw	r3,12(r4)
   42a68:	19000215 	stw	r4,8(r3)
   42a6c:	10c00054 	ori	r3,r2,1
   42a70:	30c00115 	stw	r3,4(r6)
   42a74:	00c00174 	movhi	r3,5
   42a78:	18e0eb04 	addi	r3,r3,-31828
   42a7c:	18c00017 	ldw	r3,0(r3)
   42a80:	49800215 	stw	r6,8(r9)
   42a84:	10ffcf36 	bltu	r2,r3,429c4 <__alt_data_end+0xfffcce64>
   42a88:	00800174 	movhi	r2,5
   42a8c:	10a7c404 	addi	r2,r2,-24816
   42a90:	11400017 	ldw	r5,0(r2)
   42a94:	8809883a 	mov	r4,r17
   42a98:	00427840 	call	42784 <_malloc_trim_r>
   42a9c:	003fc906 	br	429c4 <__alt_data_end+0xfffcce64>
   42aa0:	28c9883a 	add	r4,r5,r3
   42aa4:	21000117 	ldw	r4,4(r4)
   42aa8:	2100004c 	andi	r4,r4,1
   42aac:	20000a1e 	bne	r4,zero,42ad8 <_free_r+0x230>
   42ab0:	29000317 	ldw	r4,12(r5)
   42ab4:	29400217 	ldw	r5,8(r5)
   42ab8:	10c5883a 	add	r2,r2,r3
   42abc:	10c00054 	ori	r3,r2,1
   42ac0:	29000315 	stw	r4,12(r5)
   42ac4:	21400215 	stw	r5,8(r4)
   42ac8:	30c00115 	stw	r3,4(r6)
   42acc:	308d883a 	add	r6,r6,r2
   42ad0:	30800015 	stw	r2,0(r6)
   42ad4:	003fbb06 	br	429c4 <__alt_data_end+0xfffcce64>
   42ad8:	10c00054 	ori	r3,r2,1
   42adc:	30c00115 	stw	r3,4(r6)
   42ae0:	308d883a 	add	r6,r6,r2
   42ae4:	30800015 	stw	r2,0(r6)
   42ae8:	003fb606 	br	429c4 <__alt_data_end+0xfffcce64>
   42aec:	01000504 	movi	r4,20
   42af0:	20c01436 	bltu	r4,r3,42b44 <_free_r+0x29c>
   42af4:	194016c4 	addi	r5,r3,91
   42af8:	2947883a 	add	r3,r5,r5
   42afc:	003fbe06 	br	429f8 <__alt_data_end+0xfffcce98>
   42b00:	280bd0ba 	srai	r5,r5,2
   42b04:	00800044 	movi	r2,1
   42b08:	39000117 	ldw	r4,4(r7)
   42b0c:	114a983a 	sll	r5,r2,r5
   42b10:	1805883a 	mov	r2,r3
   42b14:	2908b03a 	or	r4,r5,r4
   42b18:	39000115 	stw	r4,4(r7)
   42b1c:	003fc406 	br	42a30 <__alt_data_end+0xfffcced0>
   42b20:	49800515 	stw	r6,20(r9)
   42b24:	49800415 	stw	r6,16(r9)
   42b28:	10c00054 	ori	r3,r2,1
   42b2c:	31000315 	stw	r4,12(r6)
   42b30:	31000215 	stw	r4,8(r6)
   42b34:	30c00115 	stw	r3,4(r6)
   42b38:	308d883a 	add	r6,r6,r2
   42b3c:	30800015 	stw	r2,0(r6)
   42b40:	003fa006 	br	429c4 <__alt_data_end+0xfffcce64>
   42b44:	01001504 	movi	r4,84
   42b48:	20c00436 	bltu	r4,r3,42b5c <_free_r+0x2b4>
   42b4c:	1006d33a 	srli	r3,r2,12
   42b50:	19401b84 	addi	r5,r3,110
   42b54:	2947883a 	add	r3,r5,r5
   42b58:	003fa706 	br	429f8 <__alt_data_end+0xfffcce98>
   42b5c:	01005504 	movi	r4,340
   42b60:	20c00436 	bltu	r4,r3,42b74 <_free_r+0x2cc>
   42b64:	1006d3fa 	srli	r3,r2,15
   42b68:	19401dc4 	addi	r5,r3,119
   42b6c:	2947883a 	add	r3,r5,r5
   42b70:	003fa106 	br	429f8 <__alt_data_end+0xfffcce98>
   42b74:	01015504 	movi	r4,1364
   42b78:	20c00436 	bltu	r4,r3,42b8c <_free_r+0x2e4>
   42b7c:	1006d4ba 	srli	r3,r2,18
   42b80:	19401f04 	addi	r5,r3,124
   42b84:	2947883a 	add	r3,r5,r5
   42b88:	003f9b06 	br	429f8 <__alt_data_end+0xfffcce98>
   42b8c:	00c03f04 	movi	r3,252
   42b90:	01401f84 	movi	r5,126
   42b94:	003f9806 	br	429f8 <__alt_data_end+0xfffcce98>

00042b98 <_fwalk>:
   42b98:	defff804 	addi	sp,sp,-32
   42b9c:	dd400515 	stw	r21,20(sp)
   42ba0:	2540b804 	addi	r21,r4,736
   42ba4:	dd800615 	stw	r22,24(sp)
   42ba8:	dd000415 	stw	r20,16(sp)
   42bac:	dfc00715 	stw	ra,28(sp)
   42bb0:	dcc00315 	stw	r19,12(sp)
   42bb4:	dc800215 	stw	r18,8(sp)
   42bb8:	dc400115 	stw	r17,4(sp)
   42bbc:	dc000015 	stw	r16,0(sp)
   42bc0:	2829883a 	mov	r20,r5
   42bc4:	002d883a 	mov	r22,zero
   42bc8:	00427440 	call	42744 <__sfp_lock_acquire>
   42bcc:	a8001426 	beq	r21,zero,42c20 <_fwalk+0x88>
   42bd0:	04ffffc4 	movi	r19,-1
   42bd4:	ac400117 	ldw	r17,4(r21)
   42bd8:	ac800217 	ldw	r18,8(r21)
   42bdc:	8c7fffc4 	addi	r17,r17,-1
   42be0:	88000d16 	blt	r17,zero,42c18 <_fwalk+0x80>
   42be4:	94000304 	addi	r16,r18,12
   42be8:	94800384 	addi	r18,r18,14
   42bec:	80c0000f 	ldh	r3,0(r16)
   42bf0:	8c7fffc4 	addi	r17,r17,-1
   42bf4:	813ffd04 	addi	r4,r16,-12
   42bf8:	18000426 	beq	r3,zero,42c0c <_fwalk+0x74>
   42bfc:	90c0000f 	ldh	r3,0(r18)
   42c00:	1cc00226 	beq	r3,r19,42c0c <_fwalk+0x74>
   42c04:	a03ee83a 	callr	r20
   42c08:	b0acb03a 	or	r22,r22,r2
   42c0c:	84001a04 	addi	r16,r16,104
   42c10:	94801a04 	addi	r18,r18,104
   42c14:	8cfff51e 	bne	r17,r19,42bec <__alt_data_end+0xfffcd08c>
   42c18:	ad400017 	ldw	r21,0(r21)
   42c1c:	a83fed1e 	bne	r21,zero,42bd4 <__alt_data_end+0xfffcd074>
   42c20:	00427480 	call	42748 <__sfp_lock_release>
   42c24:	b005883a 	mov	r2,r22
   42c28:	dfc00717 	ldw	ra,28(sp)
   42c2c:	dd800617 	ldw	r22,24(sp)
   42c30:	dd400517 	ldw	r21,20(sp)
   42c34:	dd000417 	ldw	r20,16(sp)
   42c38:	dcc00317 	ldw	r19,12(sp)
   42c3c:	dc800217 	ldw	r18,8(sp)
   42c40:	dc400117 	ldw	r17,4(sp)
   42c44:	dc000017 	ldw	r16,0(sp)
   42c48:	dec00804 	addi	sp,sp,32
   42c4c:	f800283a 	ret

00042c50 <_fwalk_reent>:
   42c50:	defff804 	addi	sp,sp,-32
   42c54:	dd400515 	stw	r21,20(sp)
   42c58:	2540b804 	addi	r21,r4,736
   42c5c:	dd800615 	stw	r22,24(sp)
   42c60:	dd000415 	stw	r20,16(sp)
   42c64:	dcc00315 	stw	r19,12(sp)
   42c68:	dfc00715 	stw	ra,28(sp)
   42c6c:	dc800215 	stw	r18,8(sp)
   42c70:	dc400115 	stw	r17,4(sp)
   42c74:	dc000015 	stw	r16,0(sp)
   42c78:	2027883a 	mov	r19,r4
   42c7c:	2829883a 	mov	r20,r5
   42c80:	002d883a 	mov	r22,zero
   42c84:	00427440 	call	42744 <__sfp_lock_acquire>
   42c88:	a8001326 	beq	r21,zero,42cd8 <_fwalk_reent+0x88>
   42c8c:	04bfffc4 	movi	r18,-1
   42c90:	ac400117 	ldw	r17,4(r21)
   42c94:	ac000217 	ldw	r16,8(r21)
   42c98:	8c7fffc4 	addi	r17,r17,-1
   42c9c:	88000c16 	blt	r17,zero,42cd0 <_fwalk_reent+0x80>
   42ca0:	84000304 	addi	r16,r16,12
   42ca4:	80c0000f 	ldh	r3,0(r16)
   42ca8:	8c7fffc4 	addi	r17,r17,-1
   42cac:	817ffd04 	addi	r5,r16,-12
   42cb0:	18000526 	beq	r3,zero,42cc8 <_fwalk_reent+0x78>
   42cb4:	80c0008f 	ldh	r3,2(r16)
   42cb8:	9809883a 	mov	r4,r19
   42cbc:	1c800226 	beq	r3,r18,42cc8 <_fwalk_reent+0x78>
   42cc0:	a03ee83a 	callr	r20
   42cc4:	b0acb03a 	or	r22,r22,r2
   42cc8:	84001a04 	addi	r16,r16,104
   42ccc:	8cbff51e 	bne	r17,r18,42ca4 <__alt_data_end+0xfffcd144>
   42cd0:	ad400017 	ldw	r21,0(r21)
   42cd4:	a83fee1e 	bne	r21,zero,42c90 <__alt_data_end+0xfffcd130>
   42cd8:	00427480 	call	42748 <__sfp_lock_release>
   42cdc:	b005883a 	mov	r2,r22
   42ce0:	dfc00717 	ldw	ra,28(sp)
   42ce4:	dd800617 	ldw	r22,24(sp)
   42ce8:	dd400517 	ldw	r21,20(sp)
   42cec:	dd000417 	ldw	r20,16(sp)
   42cf0:	dcc00317 	ldw	r19,12(sp)
   42cf4:	dc800217 	ldw	r18,8(sp)
   42cf8:	dc400117 	ldw	r17,4(sp)
   42cfc:	dc000017 	ldw	r16,0(sp)
   42d00:	dec00804 	addi	sp,sp,32
   42d04:	f800283a 	ret

00042d08 <__smakebuf_r>:
   42d08:	2880030b 	ldhu	r2,12(r5)
   42d0c:	10c0008c 	andi	r3,r2,2
   42d10:	1800401e 	bne	r3,zero,42e14 <__smakebuf_r+0x10c>
   42d14:	deffec04 	addi	sp,sp,-80
   42d18:	dc000f15 	stw	r16,60(sp)
   42d1c:	2821883a 	mov	r16,r5
   42d20:	2940038f 	ldh	r5,14(r5)
   42d24:	dc401015 	stw	r17,64(sp)
   42d28:	dfc01315 	stw	ra,76(sp)
   42d2c:	dcc01215 	stw	r19,72(sp)
   42d30:	dc801115 	stw	r18,68(sp)
   42d34:	2023883a 	mov	r17,r4
   42d38:	28001b16 	blt	r5,zero,42da8 <__smakebuf_r+0xa0>
   42d3c:	d80d883a 	mov	r6,sp
   42d40:	00432e40 	call	432e4 <_fstat_r>
   42d44:	10001716 	blt	r2,zero,42da4 <__smakebuf_r+0x9c>
   42d48:	d8800117 	ldw	r2,4(sp)
   42d4c:	00e00014 	movui	r3,32768
   42d50:	10bc000c 	andi	r2,r2,61440
   42d54:	10c03726 	beq	r2,r3,42e34 <__smakebuf_r+0x12c>
   42d58:	80c0030b 	ldhu	r3,12(r16)
   42d5c:	18c20014 	ori	r3,r3,2048
   42d60:	80c0030d 	sth	r3,12(r16)
   42d64:	00c80004 	movi	r3,8192
   42d68:	10c03c1e 	bne	r2,r3,42e5c <__smakebuf_r+0x154>
   42d6c:	8140038f 	ldh	r5,14(r16)
   42d70:	8809883a 	mov	r4,r17
   42d74:	004333c0 	call	4333c <_isatty_r>
   42d78:	10004e26 	beq	r2,zero,42eb4 <__smakebuf_r+0x1ac>
   42d7c:	8080030b 	ldhu	r2,12(r16)
   42d80:	04c00044 	movi	r19,1
   42d84:	80c010c4 	addi	r3,r16,67
   42d88:	14c4b03a 	or	r2,r2,r19
   42d8c:	8080030d 	sth	r2,12(r16)
   42d90:	80c00015 	stw	r3,0(r16)
   42d94:	80c00415 	stw	r3,16(r16)
   42d98:	84c00515 	stw	r19,20(r16)
   42d9c:	04810004 	movi	r18,1024
   42da0:	00000706 	br	42dc0 <__smakebuf_r+0xb8>
   42da4:	8080030b 	ldhu	r2,12(r16)
   42da8:	10c0200c 	andi	r3,r2,128
   42dac:	18001f1e 	bne	r3,zero,42e2c <__smakebuf_r+0x124>
   42db0:	04810004 	movi	r18,1024
   42db4:	10820014 	ori	r2,r2,2048
   42db8:	8080030d 	sth	r2,12(r16)
   42dbc:	0027883a 	mov	r19,zero
   42dc0:	8809883a 	mov	r4,r17
   42dc4:	900b883a 	mov	r5,r18
   42dc8:	0040f300 	call	40f30 <_malloc_r>
   42dcc:	10002e26 	beq	r2,zero,42e88 <__smakebuf_r+0x180>
   42dd0:	80c0030b 	ldhu	r3,12(r16)
   42dd4:	01000134 	movhi	r4,4
   42dd8:	2108f804 	addi	r4,r4,9184
   42ddc:	89000f15 	stw	r4,60(r17)
   42de0:	18c02014 	ori	r3,r3,128
   42de4:	80c0030d 	sth	r3,12(r16)
   42de8:	80800015 	stw	r2,0(r16)
   42dec:	80800415 	stw	r2,16(r16)
   42df0:	84800515 	stw	r18,20(r16)
   42df4:	98001c1e 	bne	r19,zero,42e68 <__smakebuf_r+0x160>
   42df8:	dfc01317 	ldw	ra,76(sp)
   42dfc:	dcc01217 	ldw	r19,72(sp)
   42e00:	dc801117 	ldw	r18,68(sp)
   42e04:	dc401017 	ldw	r17,64(sp)
   42e08:	dc000f17 	ldw	r16,60(sp)
   42e0c:	dec01404 	addi	sp,sp,80
   42e10:	f800283a 	ret
   42e14:	288010c4 	addi	r2,r5,67
   42e18:	28800015 	stw	r2,0(r5)
   42e1c:	28800415 	stw	r2,16(r5)
   42e20:	00800044 	movi	r2,1
   42e24:	28800515 	stw	r2,20(r5)
   42e28:	f800283a 	ret
   42e2c:	04801004 	movi	r18,64
   42e30:	003fe006 	br	42db4 <__alt_data_end+0xfffcd254>
   42e34:	81000a17 	ldw	r4,40(r16)
   42e38:	00c00134 	movhi	r3,4
   42e3c:	18cc2f04 	addi	r3,r3,12476
   42e40:	20ffc51e 	bne	r4,r3,42d58 <__alt_data_end+0xfffcd1f8>
   42e44:	80c0030b 	ldhu	r3,12(r16)
   42e48:	01010004 	movi	r4,1024
   42e4c:	81001315 	stw	r4,76(r16)
   42e50:	1906b03a 	or	r3,r3,r4
   42e54:	80c0030d 	sth	r3,12(r16)
   42e58:	003fc206 	br	42d64 <__alt_data_end+0xfffcd204>
   42e5c:	0027883a 	mov	r19,zero
   42e60:	04810004 	movi	r18,1024
   42e64:	003fd606 	br	42dc0 <__alt_data_end+0xfffcd260>
   42e68:	8140038f 	ldh	r5,14(r16)
   42e6c:	8809883a 	mov	r4,r17
   42e70:	004333c0 	call	4333c <_isatty_r>
   42e74:	103fe026 	beq	r2,zero,42df8 <__alt_data_end+0xfffcd298>
   42e78:	8080030b 	ldhu	r2,12(r16)
   42e7c:	10800054 	ori	r2,r2,1
   42e80:	8080030d 	sth	r2,12(r16)
   42e84:	003fdc06 	br	42df8 <__alt_data_end+0xfffcd298>
   42e88:	8080030b 	ldhu	r2,12(r16)
   42e8c:	10c0800c 	andi	r3,r2,512
   42e90:	183fd91e 	bne	r3,zero,42df8 <__alt_data_end+0xfffcd298>
   42e94:	10800094 	ori	r2,r2,2
   42e98:	80c010c4 	addi	r3,r16,67
   42e9c:	8080030d 	sth	r2,12(r16)
   42ea0:	00800044 	movi	r2,1
   42ea4:	80c00015 	stw	r3,0(r16)
   42ea8:	80c00415 	stw	r3,16(r16)
   42eac:	80800515 	stw	r2,20(r16)
   42eb0:	003fd106 	br	42df8 <__alt_data_end+0xfffcd298>
   42eb4:	04c00044 	movi	r19,1
   42eb8:	04810004 	movi	r18,1024
   42ebc:	003fc006 	br	42dc0 <__alt_data_end+0xfffcd260>

00042ec0 <memset>:
   42ec0:	20c000cc 	andi	r3,r4,3
   42ec4:	2005883a 	mov	r2,r4
   42ec8:	18004326 	beq	r3,zero,42fd8 <memset+0x118>
   42ecc:	31ffffc4 	addi	r7,r6,-1
   42ed0:	30004026 	beq	r6,zero,42fd4 <memset+0x114>
   42ed4:	2813883a 	mov	r9,r5
   42ed8:	200d883a 	mov	r6,r4
   42edc:	2007883a 	mov	r3,r4
   42ee0:	00000406 	br	42ef4 <memset+0x34>
   42ee4:	3a3fffc4 	addi	r8,r7,-1
   42ee8:	31800044 	addi	r6,r6,1
   42eec:	38003926 	beq	r7,zero,42fd4 <memset+0x114>
   42ef0:	400f883a 	mov	r7,r8
   42ef4:	18c00044 	addi	r3,r3,1
   42ef8:	32400005 	stb	r9,0(r6)
   42efc:	1a0000cc 	andi	r8,r3,3
   42f00:	403ff81e 	bne	r8,zero,42ee4 <__alt_data_end+0xfffcd384>
   42f04:	010000c4 	movi	r4,3
   42f08:	21c02d2e 	bgeu	r4,r7,42fc0 <memset+0x100>
   42f0c:	29803fcc 	andi	r6,r5,255
   42f10:	3008923a 	slli	r4,r6,8
   42f14:	218cb03a 	or	r6,r4,r6
   42f18:	3008943a 	slli	r4,r6,16
   42f1c:	218cb03a 	or	r6,r4,r6
   42f20:	010003c4 	movi	r4,15
   42f24:	21c0182e 	bgeu	r4,r7,42f88 <memset+0xc8>
   42f28:	3b3ffc04 	addi	r12,r7,-16
   42f2c:	6018d13a 	srli	r12,r12,4
   42f30:	1a000104 	addi	r8,r3,4
   42f34:	1ac00204 	addi	r11,r3,8
   42f38:	6008913a 	slli	r4,r12,4
   42f3c:	1a800304 	addi	r10,r3,12
   42f40:	1813883a 	mov	r9,r3
   42f44:	21000504 	addi	r4,r4,20
   42f48:	1909883a 	add	r4,r3,r4
   42f4c:	49800015 	stw	r6,0(r9)
   42f50:	41800015 	stw	r6,0(r8)
   42f54:	59800015 	stw	r6,0(r11)
   42f58:	51800015 	stw	r6,0(r10)
   42f5c:	42000404 	addi	r8,r8,16
   42f60:	4a400404 	addi	r9,r9,16
   42f64:	5ac00404 	addi	r11,r11,16
   42f68:	52800404 	addi	r10,r10,16
   42f6c:	413ff71e 	bne	r8,r4,42f4c <__alt_data_end+0xfffcd3ec>
   42f70:	63000044 	addi	r12,r12,1
   42f74:	6018913a 	slli	r12,r12,4
   42f78:	39c003cc 	andi	r7,r7,15
   42f7c:	010000c4 	movi	r4,3
   42f80:	1b07883a 	add	r3,r3,r12
   42f84:	21c00e2e 	bgeu	r4,r7,42fc0 <memset+0x100>
   42f88:	1813883a 	mov	r9,r3
   42f8c:	3811883a 	mov	r8,r7
   42f90:	010000c4 	movi	r4,3
   42f94:	49800015 	stw	r6,0(r9)
   42f98:	423fff04 	addi	r8,r8,-4
   42f9c:	4a400104 	addi	r9,r9,4
   42fa0:	223ffc36 	bltu	r4,r8,42f94 <__alt_data_end+0xfffcd434>
   42fa4:	393fff04 	addi	r4,r7,-4
   42fa8:	2008d0ba 	srli	r4,r4,2
   42fac:	39c000cc 	andi	r7,r7,3
   42fb0:	21000044 	addi	r4,r4,1
   42fb4:	2109883a 	add	r4,r4,r4
   42fb8:	2109883a 	add	r4,r4,r4
   42fbc:	1907883a 	add	r3,r3,r4
   42fc0:	38000426 	beq	r7,zero,42fd4 <memset+0x114>
   42fc4:	19cf883a 	add	r7,r3,r7
   42fc8:	19400005 	stb	r5,0(r3)
   42fcc:	18c00044 	addi	r3,r3,1
   42fd0:	19fffd1e 	bne	r3,r7,42fc8 <__alt_data_end+0xfffcd468>
   42fd4:	f800283a 	ret
   42fd8:	2007883a 	mov	r3,r4
   42fdc:	300f883a 	mov	r7,r6
   42fe0:	003fc806 	br	42f04 <__alt_data_end+0xfffcd3a4>

00042fe4 <__sread>:
   42fe4:	defffe04 	addi	sp,sp,-8
   42fe8:	dc000015 	stw	r16,0(sp)
   42fec:	2821883a 	mov	r16,r5
   42ff0:	2940038f 	ldh	r5,14(r5)
   42ff4:	dfc00115 	stw	ra,4(sp)
   42ff8:	00433ec0 	call	433ec <_read_r>
   42ffc:	10000716 	blt	r2,zero,4301c <__sread+0x38>
   43000:	80c01417 	ldw	r3,80(r16)
   43004:	1887883a 	add	r3,r3,r2
   43008:	80c01415 	stw	r3,80(r16)
   4300c:	dfc00117 	ldw	ra,4(sp)
   43010:	dc000017 	ldw	r16,0(sp)
   43014:	dec00204 	addi	sp,sp,8
   43018:	f800283a 	ret
   4301c:	80c0030b 	ldhu	r3,12(r16)
   43020:	18fbffcc 	andi	r3,r3,61439
   43024:	80c0030d 	sth	r3,12(r16)
   43028:	dfc00117 	ldw	ra,4(sp)
   4302c:	dc000017 	ldw	r16,0(sp)
   43030:	dec00204 	addi	sp,sp,8
   43034:	f800283a 	ret

00043038 <__seofread>:
   43038:	0005883a 	mov	r2,zero
   4303c:	f800283a 	ret

00043040 <__swrite>:
   43040:	2880030b 	ldhu	r2,12(r5)
   43044:	defffb04 	addi	sp,sp,-20
   43048:	dcc00315 	stw	r19,12(sp)
   4304c:	dc800215 	stw	r18,8(sp)
   43050:	dc400115 	stw	r17,4(sp)
   43054:	dc000015 	stw	r16,0(sp)
   43058:	dfc00415 	stw	ra,16(sp)
   4305c:	10c0400c 	andi	r3,r2,256
   43060:	2821883a 	mov	r16,r5
   43064:	2027883a 	mov	r19,r4
   43068:	3025883a 	mov	r18,r6
   4306c:	3823883a 	mov	r17,r7
   43070:	18000526 	beq	r3,zero,43088 <__swrite+0x48>
   43074:	2940038f 	ldh	r5,14(r5)
   43078:	000d883a 	mov	r6,zero
   4307c:	01c00084 	movi	r7,2
   43080:	00433900 	call	43390 <_lseek_r>
   43084:	8080030b 	ldhu	r2,12(r16)
   43088:	8140038f 	ldh	r5,14(r16)
   4308c:	10bbffcc 	andi	r2,r2,61439
   43090:	9809883a 	mov	r4,r19
   43094:	900d883a 	mov	r6,r18
   43098:	880f883a 	mov	r7,r17
   4309c:	8080030d 	sth	r2,12(r16)
   430a0:	dfc00417 	ldw	ra,16(sp)
   430a4:	dcc00317 	ldw	r19,12(sp)
   430a8:	dc800217 	ldw	r18,8(sp)
   430ac:	dc400117 	ldw	r17,4(sp)
   430b0:	dc000017 	ldw	r16,0(sp)
   430b4:	dec00504 	addi	sp,sp,20
   430b8:	00431201 	jmpi	43120 <_write_r>

000430bc <__sseek>:
   430bc:	defffe04 	addi	sp,sp,-8
   430c0:	dc000015 	stw	r16,0(sp)
   430c4:	2821883a 	mov	r16,r5
   430c8:	2940038f 	ldh	r5,14(r5)
   430cc:	dfc00115 	stw	ra,4(sp)
   430d0:	00433900 	call	43390 <_lseek_r>
   430d4:	00ffffc4 	movi	r3,-1
   430d8:	10c00826 	beq	r2,r3,430fc <__sseek+0x40>
   430dc:	80c0030b 	ldhu	r3,12(r16)
   430e0:	80801415 	stw	r2,80(r16)
   430e4:	18c40014 	ori	r3,r3,4096
   430e8:	80c0030d 	sth	r3,12(r16)
   430ec:	dfc00117 	ldw	ra,4(sp)
   430f0:	dc000017 	ldw	r16,0(sp)
   430f4:	dec00204 	addi	sp,sp,8
   430f8:	f800283a 	ret
   430fc:	80c0030b 	ldhu	r3,12(r16)
   43100:	18fbffcc 	andi	r3,r3,61439
   43104:	80c0030d 	sth	r3,12(r16)
   43108:	dfc00117 	ldw	ra,4(sp)
   4310c:	dc000017 	ldw	r16,0(sp)
   43110:	dec00204 	addi	sp,sp,8
   43114:	f800283a 	ret

00043118 <__sclose>:
   43118:	2940038f 	ldh	r5,14(r5)
   4311c:	004317c1 	jmpi	4317c <_close_r>

00043120 <_write_r>:
   43120:	defffd04 	addi	sp,sp,-12
   43124:	dc000015 	stw	r16,0(sp)
   43128:	04000174 	movhi	r16,5
   4312c:	dc400115 	stw	r17,4(sp)
   43130:	8427c504 	addi	r16,r16,-24812
   43134:	2023883a 	mov	r17,r4
   43138:	2809883a 	mov	r4,r5
   4313c:	300b883a 	mov	r5,r6
   43140:	380d883a 	mov	r6,r7
   43144:	dfc00215 	stw	ra,8(sp)
   43148:	80000015 	stw	zero,0(r16)
   4314c:	0043e780 	call	43e78 <write>
   43150:	00ffffc4 	movi	r3,-1
   43154:	10c00526 	beq	r2,r3,4316c <_write_r+0x4c>
   43158:	dfc00217 	ldw	ra,8(sp)
   4315c:	dc400117 	ldw	r17,4(sp)
   43160:	dc000017 	ldw	r16,0(sp)
   43164:	dec00304 	addi	sp,sp,12
   43168:	f800283a 	ret
   4316c:	80c00017 	ldw	r3,0(r16)
   43170:	183ff926 	beq	r3,zero,43158 <__alt_data_end+0xfffcd5f8>
   43174:	88c00015 	stw	r3,0(r17)
   43178:	003ff706 	br	43158 <__alt_data_end+0xfffcd5f8>

0004317c <_close_r>:
   4317c:	defffd04 	addi	sp,sp,-12
   43180:	dc000015 	stw	r16,0(sp)
   43184:	04000174 	movhi	r16,5
   43188:	dc400115 	stw	r17,4(sp)
   4318c:	8427c504 	addi	r16,r16,-24812
   43190:	2023883a 	mov	r17,r4
   43194:	2809883a 	mov	r4,r5
   43198:	dfc00215 	stw	ra,8(sp)
   4319c:	80000015 	stw	zero,0(r16)
   431a0:	00435a40 	call	435a4 <close>
   431a4:	00ffffc4 	movi	r3,-1
   431a8:	10c00526 	beq	r2,r3,431c0 <_close_r+0x44>
   431ac:	dfc00217 	ldw	ra,8(sp)
   431b0:	dc400117 	ldw	r17,4(sp)
   431b4:	dc000017 	ldw	r16,0(sp)
   431b8:	dec00304 	addi	sp,sp,12
   431bc:	f800283a 	ret
   431c0:	80c00017 	ldw	r3,0(r16)
   431c4:	183ff926 	beq	r3,zero,431ac <__alt_data_end+0xfffcd64c>
   431c8:	88c00015 	stw	r3,0(r17)
   431cc:	003ff706 	br	431ac <__alt_data_end+0xfffcd64c>

000431d0 <_fclose_r>:
   431d0:	28003226 	beq	r5,zero,4329c <_fclose_r+0xcc>
   431d4:	defffc04 	addi	sp,sp,-16
   431d8:	dc400115 	stw	r17,4(sp)
   431dc:	2023883a 	mov	r17,r4
   431e0:	dc000015 	stw	r16,0(sp)
   431e4:	dfc00315 	stw	ra,12(sp)
   431e8:	dc800215 	stw	r18,8(sp)
   431ec:	2821883a 	mov	r16,r5
   431f0:	00427440 	call	42744 <__sfp_lock_acquire>
   431f4:	88000226 	beq	r17,zero,43200 <_fclose_r+0x30>
   431f8:	88800e17 	ldw	r2,56(r17)
   431fc:	10002926 	beq	r2,zero,432a4 <_fclose_r+0xd4>
   43200:	8080030f 	ldh	r2,12(r16)
   43204:	10002226 	beq	r2,zero,43290 <_fclose_r+0xc0>
   43208:	8809883a 	mov	r4,r17
   4320c:	800b883a 	mov	r5,r16
   43210:	00421780 	call	42178 <_fflush_r>
   43214:	1025883a 	mov	r18,r2
   43218:	80800b17 	ldw	r2,44(r16)
   4321c:	10000426 	beq	r2,zero,43230 <_fclose_r+0x60>
   43220:	81400717 	ldw	r5,28(r16)
   43224:	8809883a 	mov	r4,r17
   43228:	103ee83a 	callr	r2
   4322c:	10002616 	blt	r2,zero,432c8 <_fclose_r+0xf8>
   43230:	8080030b 	ldhu	r2,12(r16)
   43234:	1080200c 	andi	r2,r2,128
   43238:	10001f1e 	bne	r2,zero,432b8 <_fclose_r+0xe8>
   4323c:	81400c17 	ldw	r5,48(r16)
   43240:	28000526 	beq	r5,zero,43258 <_fclose_r+0x88>
   43244:	80801004 	addi	r2,r16,64
   43248:	28800226 	beq	r5,r2,43254 <_fclose_r+0x84>
   4324c:	8809883a 	mov	r4,r17
   43250:	00428a80 	call	428a8 <_free_r>
   43254:	80000c15 	stw	zero,48(r16)
   43258:	81401117 	ldw	r5,68(r16)
   4325c:	28000326 	beq	r5,zero,4326c <_fclose_r+0x9c>
   43260:	8809883a 	mov	r4,r17
   43264:	00428a80 	call	428a8 <_free_r>
   43268:	80001115 	stw	zero,68(r16)
   4326c:	8000030d 	sth	zero,12(r16)
   43270:	00427480 	call	42748 <__sfp_lock_release>
   43274:	9005883a 	mov	r2,r18
   43278:	dfc00317 	ldw	ra,12(sp)
   4327c:	dc800217 	ldw	r18,8(sp)
   43280:	dc400117 	ldw	r17,4(sp)
   43284:	dc000017 	ldw	r16,0(sp)
   43288:	dec00404 	addi	sp,sp,16
   4328c:	f800283a 	ret
   43290:	00427480 	call	42748 <__sfp_lock_release>
   43294:	0005883a 	mov	r2,zero
   43298:	003ff706 	br	43278 <__alt_data_end+0xfffcd718>
   4329c:	0005883a 	mov	r2,zero
   432a0:	f800283a 	ret
   432a4:	8809883a 	mov	r4,r17
   432a8:	00427340 	call	42734 <__sinit>
   432ac:	8080030f 	ldh	r2,12(r16)
   432b0:	103fd51e 	bne	r2,zero,43208 <__alt_data_end+0xfffcd6a8>
   432b4:	003ff606 	br	43290 <__alt_data_end+0xfffcd730>
   432b8:	81400417 	ldw	r5,16(r16)
   432bc:	8809883a 	mov	r4,r17
   432c0:	00428a80 	call	428a8 <_free_r>
   432c4:	003fdd06 	br	4323c <__alt_data_end+0xfffcd6dc>
   432c8:	04bfffc4 	movi	r18,-1
   432cc:	003fd806 	br	43230 <__alt_data_end+0xfffcd6d0>

000432d0 <fclose>:
   432d0:	00800174 	movhi	r2,5
   432d4:	10a0e904 	addi	r2,r2,-31836
   432d8:	200b883a 	mov	r5,r4
   432dc:	11000017 	ldw	r4,0(r2)
   432e0:	00431d01 	jmpi	431d0 <_fclose_r>

000432e4 <_fstat_r>:
   432e4:	defffd04 	addi	sp,sp,-12
   432e8:	dc000015 	stw	r16,0(sp)
   432ec:	04000174 	movhi	r16,5
   432f0:	dc400115 	stw	r17,4(sp)
   432f4:	8427c504 	addi	r16,r16,-24812
   432f8:	2023883a 	mov	r17,r4
   432fc:	2809883a 	mov	r4,r5
   43300:	300b883a 	mov	r5,r6
   43304:	dfc00215 	stw	ra,8(sp)
   43308:	80000015 	stw	zero,0(r16)
   4330c:	00436f80 	call	436f8 <fstat>
   43310:	00ffffc4 	movi	r3,-1
   43314:	10c00526 	beq	r2,r3,4332c <_fstat_r+0x48>
   43318:	dfc00217 	ldw	ra,8(sp)
   4331c:	dc400117 	ldw	r17,4(sp)
   43320:	dc000017 	ldw	r16,0(sp)
   43324:	dec00304 	addi	sp,sp,12
   43328:	f800283a 	ret
   4332c:	80c00017 	ldw	r3,0(r16)
   43330:	183ff926 	beq	r3,zero,43318 <__alt_data_end+0xfffcd7b8>
   43334:	88c00015 	stw	r3,0(r17)
   43338:	003ff706 	br	43318 <__alt_data_end+0xfffcd7b8>

0004333c <_isatty_r>:
   4333c:	defffd04 	addi	sp,sp,-12
   43340:	dc000015 	stw	r16,0(sp)
   43344:	04000174 	movhi	r16,5
   43348:	dc400115 	stw	r17,4(sp)
   4334c:	8427c504 	addi	r16,r16,-24812
   43350:	2023883a 	mov	r17,r4
   43354:	2809883a 	mov	r4,r5
   43358:	dfc00215 	stw	ra,8(sp)
   4335c:	80000015 	stw	zero,0(r16)
   43360:	00438000 	call	43800 <isatty>
   43364:	00ffffc4 	movi	r3,-1
   43368:	10c00526 	beq	r2,r3,43380 <_isatty_r+0x44>
   4336c:	dfc00217 	ldw	ra,8(sp)
   43370:	dc400117 	ldw	r17,4(sp)
   43374:	dc000017 	ldw	r16,0(sp)
   43378:	dec00304 	addi	sp,sp,12
   4337c:	f800283a 	ret
   43380:	80c00017 	ldw	r3,0(r16)
   43384:	183ff926 	beq	r3,zero,4336c <__alt_data_end+0xfffcd80c>
   43388:	88c00015 	stw	r3,0(r17)
   4338c:	003ff706 	br	4336c <__alt_data_end+0xfffcd80c>

00043390 <_lseek_r>:
   43390:	defffd04 	addi	sp,sp,-12
   43394:	dc000015 	stw	r16,0(sp)
   43398:	04000174 	movhi	r16,5
   4339c:	dc400115 	stw	r17,4(sp)
   433a0:	8427c504 	addi	r16,r16,-24812
   433a4:	2023883a 	mov	r17,r4
   433a8:	2809883a 	mov	r4,r5
   433ac:	300b883a 	mov	r5,r6
   433b0:	380d883a 	mov	r6,r7
   433b4:	dfc00215 	stw	ra,8(sp)
   433b8:	80000015 	stw	zero,0(r16)
   433bc:	00439e00 	call	439e0 <lseek>
   433c0:	00ffffc4 	movi	r3,-1
   433c4:	10c00526 	beq	r2,r3,433dc <_lseek_r+0x4c>
   433c8:	dfc00217 	ldw	ra,8(sp)
   433cc:	dc400117 	ldw	r17,4(sp)
   433d0:	dc000017 	ldw	r16,0(sp)
   433d4:	dec00304 	addi	sp,sp,12
   433d8:	f800283a 	ret
   433dc:	80c00017 	ldw	r3,0(r16)
   433e0:	183ff926 	beq	r3,zero,433c8 <__alt_data_end+0xfffcd868>
   433e4:	88c00015 	stw	r3,0(r17)
   433e8:	003ff706 	br	433c8 <__alt_data_end+0xfffcd868>

000433ec <_read_r>:
   433ec:	defffd04 	addi	sp,sp,-12
   433f0:	dc000015 	stw	r16,0(sp)
   433f4:	04000174 	movhi	r16,5
   433f8:	dc400115 	stw	r17,4(sp)
   433fc:	8427c504 	addi	r16,r16,-24812
   43400:	2023883a 	mov	r17,r4
   43404:	2809883a 	mov	r4,r5
   43408:	300b883a 	mov	r5,r6
   4340c:	380d883a 	mov	r6,r7
   43410:	dfc00215 	stw	ra,8(sp)
   43414:	80000015 	stw	zero,0(r16)
   43418:	0043bc40 	call	43bc4 <read>
   4341c:	00ffffc4 	movi	r3,-1
   43420:	10c00526 	beq	r2,r3,43438 <_read_r+0x4c>
   43424:	dfc00217 	ldw	ra,8(sp)
   43428:	dc400117 	ldw	r17,4(sp)
   4342c:	dc000017 	ldw	r16,0(sp)
   43430:	dec00304 	addi	sp,sp,12
   43434:	f800283a 	ret
   43438:	80c00017 	ldw	r3,0(r16)
   4343c:	183ff926 	beq	r3,zero,43424 <__alt_data_end+0xfffcd8c4>
   43440:	88c00015 	stw	r3,0(r17)
   43444:	003ff706 	br	43424 <__alt_data_end+0xfffcd8c4>

00043448 <__muldi3>:
   43448:	defff604 	addi	sp,sp,-40
   4344c:	dd800615 	stw	r22,24(sp)
   43450:	dd400515 	stw	r21,20(sp)
   43454:	25bfffcc 	andi	r22,r4,65535
   43458:	357fffcc 	andi	r21,r6,65535
   4345c:	dc400115 	stw	r17,4(sp)
   43460:	2022d43a 	srli	r17,r4,16
   43464:	dcc00315 	stw	r19,12(sp)
   43468:	dc800215 	stw	r18,8(sp)
   4346c:	2027883a 	mov	r19,r4
   43470:	2825883a 	mov	r18,r5
   43474:	a809883a 	mov	r4,r21
   43478:	b00b883a 	mov	r5,r22
   4347c:	dfc00915 	stw	ra,36(sp)
   43480:	df000815 	stw	fp,32(sp)
   43484:	ddc00715 	stw	r23,28(sp)
   43488:	3839883a 	mov	fp,r7
   4348c:	302ed43a 	srli	r23,r6,16
   43490:	dd000415 	stw	r20,16(sp)
   43494:	dc000015 	stw	r16,0(sp)
   43498:	3029883a 	mov	r20,r6
   4349c:	00408840 	call	40884 <__mulsi3>
   434a0:	a809883a 	mov	r4,r21
   434a4:	880b883a 	mov	r5,r17
   434a8:	1021883a 	mov	r16,r2
   434ac:	00408840 	call	40884 <__mulsi3>
   434b0:	880b883a 	mov	r5,r17
   434b4:	b809883a 	mov	r4,r23
   434b8:	102b883a 	mov	r21,r2
   434bc:	00408840 	call	40884 <__mulsi3>
   434c0:	b809883a 	mov	r4,r23
   434c4:	b00b883a 	mov	r5,r22
   434c8:	1023883a 	mov	r17,r2
   434cc:	00408840 	call	40884 <__mulsi3>
   434d0:	8012d43a 	srli	r9,r16,16
   434d4:	a885883a 	add	r2,r21,r2
   434d8:	1251883a 	add	r8,r2,r9
   434dc:	4540022e 	bgeu	r8,r21,434e8 <__muldi3+0xa0>
   434e0:	00800074 	movhi	r2,1
   434e4:	88a3883a 	add	r17,r17,r2
   434e8:	4006d43a 	srli	r3,r8,16
   434ec:	4010943a 	slli	r8,r8,16
   434f0:	9809883a 	mov	r4,r19
   434f4:	e00b883a 	mov	r5,fp
   434f8:	843fffcc 	andi	r16,r16,65535
   434fc:	88e3883a 	add	r17,r17,r3
   43500:	4421883a 	add	r16,r8,r16
   43504:	00408840 	call	40884 <__mulsi3>
   43508:	a009883a 	mov	r4,r20
   4350c:	900b883a 	mov	r5,r18
   43510:	1027883a 	mov	r19,r2
   43514:	00408840 	call	40884 <__mulsi3>
   43518:	9885883a 	add	r2,r19,r2
   4351c:	1447883a 	add	r3,r2,r17
   43520:	8005883a 	mov	r2,r16
   43524:	dfc00917 	ldw	ra,36(sp)
   43528:	df000817 	ldw	fp,32(sp)
   4352c:	ddc00717 	ldw	r23,28(sp)
   43530:	dd800617 	ldw	r22,24(sp)
   43534:	dd400517 	ldw	r21,20(sp)
   43538:	dd000417 	ldw	r20,16(sp)
   4353c:	dcc00317 	ldw	r19,12(sp)
   43540:	dc800217 	ldw	r18,8(sp)
   43544:	dc400117 	ldw	r17,4(sp)
   43548:	dc000017 	ldw	r16,0(sp)
   4354c:	dec00a04 	addi	sp,sp,40
   43550:	f800283a 	ret

00043554 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43554:	defffe04 	addi	sp,sp,-8
   43558:	dfc00115 	stw	ra,4(sp)
   4355c:	df000015 	stw	fp,0(sp)
   43560:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43564:	00800174 	movhi	r2,5
   43568:	10a0f104 	addi	r2,r2,-31804
   4356c:	10800017 	ldw	r2,0(r2)
   43570:	10000526 	beq	r2,zero,43588 <alt_get_errno+0x34>
   43574:	00800174 	movhi	r2,5
   43578:	10a0f104 	addi	r2,r2,-31804
   4357c:	10800017 	ldw	r2,0(r2)
   43580:	103ee83a 	callr	r2
   43584:	00000206 	br	43590 <alt_get_errno+0x3c>
   43588:	00800174 	movhi	r2,5
   4358c:	10a7c504 	addi	r2,r2,-24812
}
   43590:	e037883a 	mov	sp,fp
   43594:	dfc00117 	ldw	ra,4(sp)
   43598:	df000017 	ldw	fp,0(sp)
   4359c:	dec00204 	addi	sp,sp,8
   435a0:	f800283a 	ret

000435a4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   435a4:	defffb04 	addi	sp,sp,-20
   435a8:	dfc00415 	stw	ra,16(sp)
   435ac:	df000315 	stw	fp,12(sp)
   435b0:	df000304 	addi	fp,sp,12
   435b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   435b8:	e0bfff17 	ldw	r2,-4(fp)
   435bc:	10000816 	blt	r2,zero,435e0 <close+0x3c>
   435c0:	e13fff17 	ldw	r4,-4(fp)
   435c4:	01400304 	movi	r5,12
   435c8:	00408840 	call	40884 <__mulsi3>
   435cc:	1007883a 	mov	r3,r2
   435d0:	00800134 	movhi	r2,4
   435d4:	109c3f04 	addi	r2,r2,28924
   435d8:	1885883a 	add	r2,r3,r2
   435dc:	00000106 	br	435e4 <close+0x40>
   435e0:	0005883a 	mov	r2,zero
   435e4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   435e8:	e0bffd17 	ldw	r2,-12(fp)
   435ec:	10001926 	beq	r2,zero,43654 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   435f0:	e0bffd17 	ldw	r2,-12(fp)
   435f4:	10800017 	ldw	r2,0(r2)
   435f8:	10800417 	ldw	r2,16(r2)
   435fc:	10000626 	beq	r2,zero,43618 <close+0x74>
   43600:	e0bffd17 	ldw	r2,-12(fp)
   43604:	10800017 	ldw	r2,0(r2)
   43608:	10800417 	ldw	r2,16(r2)
   4360c:	e13ffd17 	ldw	r4,-12(fp)
   43610:	103ee83a 	callr	r2
   43614:	00000106 	br	4361c <close+0x78>
   43618:	0005883a 	mov	r2,zero
   4361c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43620:	e13fff17 	ldw	r4,-4(fp)
   43624:	0043cc80 	call	43cc8 <alt_release_fd>
    if (rval < 0)
   43628:	e0bffe17 	ldw	r2,-8(fp)
   4362c:	1000070e 	bge	r2,zero,4364c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   43630:	00435540 	call	43554 <alt_get_errno>
   43634:	1007883a 	mov	r3,r2
   43638:	e0bffe17 	ldw	r2,-8(fp)
   4363c:	0085c83a 	sub	r2,zero,r2
   43640:	18800015 	stw	r2,0(r3)
      return -1;
   43644:	00bfffc4 	movi	r2,-1
   43648:	00000706 	br	43668 <close+0xc4>
    }
    return 0;
   4364c:	0005883a 	mov	r2,zero
   43650:	00000506 	br	43668 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43654:	00435540 	call	43554 <alt_get_errno>
   43658:	1007883a 	mov	r3,r2
   4365c:	00801444 	movi	r2,81
   43660:	18800015 	stw	r2,0(r3)
    return -1;
   43664:	00bfffc4 	movi	r2,-1
  }
}
   43668:	e037883a 	mov	sp,fp
   4366c:	dfc00117 	ldw	ra,4(sp)
   43670:	df000017 	ldw	fp,0(sp)
   43674:	dec00204 	addi	sp,sp,8
   43678:	f800283a 	ret

0004367c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4367c:	defffc04 	addi	sp,sp,-16
   43680:	df000315 	stw	fp,12(sp)
   43684:	df000304 	addi	fp,sp,12
   43688:	e13ffd15 	stw	r4,-12(fp)
   4368c:	e17ffe15 	stw	r5,-8(fp)
   43690:	e1bfff15 	stw	r6,-4(fp)
  return len;
   43694:	e0bfff17 	ldw	r2,-4(fp)
}
   43698:	e037883a 	mov	sp,fp
   4369c:	df000017 	ldw	fp,0(sp)
   436a0:	dec00104 	addi	sp,sp,4
   436a4:	f800283a 	ret

000436a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   436a8:	defffe04 	addi	sp,sp,-8
   436ac:	dfc00115 	stw	ra,4(sp)
   436b0:	df000015 	stw	fp,0(sp)
   436b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   436b8:	00800174 	movhi	r2,5
   436bc:	10a0f104 	addi	r2,r2,-31804
   436c0:	10800017 	ldw	r2,0(r2)
   436c4:	10000526 	beq	r2,zero,436dc <alt_get_errno+0x34>
   436c8:	00800174 	movhi	r2,5
   436cc:	10a0f104 	addi	r2,r2,-31804
   436d0:	10800017 	ldw	r2,0(r2)
   436d4:	103ee83a 	callr	r2
   436d8:	00000206 	br	436e4 <alt_get_errno+0x3c>
   436dc:	00800174 	movhi	r2,5
   436e0:	10a7c504 	addi	r2,r2,-24812
}
   436e4:	e037883a 	mov	sp,fp
   436e8:	dfc00117 	ldw	ra,4(sp)
   436ec:	df000017 	ldw	fp,0(sp)
   436f0:	dec00204 	addi	sp,sp,8
   436f4:	f800283a 	ret

000436f8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   436f8:	defffb04 	addi	sp,sp,-20
   436fc:	dfc00415 	stw	ra,16(sp)
   43700:	df000315 	stw	fp,12(sp)
   43704:	df000304 	addi	fp,sp,12
   43708:	e13ffe15 	stw	r4,-8(fp)
   4370c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43710:	e0bffe17 	ldw	r2,-8(fp)
   43714:	10000816 	blt	r2,zero,43738 <fstat+0x40>
   43718:	e13ffe17 	ldw	r4,-8(fp)
   4371c:	01400304 	movi	r5,12
   43720:	00408840 	call	40884 <__mulsi3>
   43724:	1007883a 	mov	r3,r2
   43728:	00800134 	movhi	r2,4
   4372c:	109c3f04 	addi	r2,r2,28924
   43730:	1885883a 	add	r2,r3,r2
   43734:	00000106 	br	4373c <fstat+0x44>
   43738:	0005883a 	mov	r2,zero
   4373c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   43740:	e0bffd17 	ldw	r2,-12(fp)
   43744:	10001026 	beq	r2,zero,43788 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   43748:	e0bffd17 	ldw	r2,-12(fp)
   4374c:	10800017 	ldw	r2,0(r2)
   43750:	10800817 	ldw	r2,32(r2)
   43754:	10000726 	beq	r2,zero,43774 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   43758:	e0bffd17 	ldw	r2,-12(fp)
   4375c:	10800017 	ldw	r2,0(r2)
   43760:	10800817 	ldw	r2,32(r2)
   43764:	e13ffd17 	ldw	r4,-12(fp)
   43768:	e17fff17 	ldw	r5,-4(fp)
   4376c:	103ee83a 	callr	r2
   43770:	00000a06 	br	4379c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43774:	e0bfff17 	ldw	r2,-4(fp)
   43778:	00c80004 	movi	r3,8192
   4377c:	10c00115 	stw	r3,4(r2)
      return 0;
   43780:	0005883a 	mov	r2,zero
   43784:	00000506 	br	4379c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43788:	00436a80 	call	436a8 <alt_get_errno>
   4378c:	1007883a 	mov	r3,r2
   43790:	00801444 	movi	r2,81
   43794:	18800015 	stw	r2,0(r3)
    return -1;
   43798:	00bfffc4 	movi	r2,-1
  }
}
   4379c:	e037883a 	mov	sp,fp
   437a0:	dfc00117 	ldw	ra,4(sp)
   437a4:	df000017 	ldw	fp,0(sp)
   437a8:	dec00204 	addi	sp,sp,8
   437ac:	f800283a 	ret

000437b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   437b0:	defffe04 	addi	sp,sp,-8
   437b4:	dfc00115 	stw	ra,4(sp)
   437b8:	df000015 	stw	fp,0(sp)
   437bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   437c0:	00800174 	movhi	r2,5
   437c4:	10a0f104 	addi	r2,r2,-31804
   437c8:	10800017 	ldw	r2,0(r2)
   437cc:	10000526 	beq	r2,zero,437e4 <alt_get_errno+0x34>
   437d0:	00800174 	movhi	r2,5
   437d4:	10a0f104 	addi	r2,r2,-31804
   437d8:	10800017 	ldw	r2,0(r2)
   437dc:	103ee83a 	callr	r2
   437e0:	00000206 	br	437ec <alt_get_errno+0x3c>
   437e4:	00800174 	movhi	r2,5
   437e8:	10a7c504 	addi	r2,r2,-24812
}
   437ec:	e037883a 	mov	sp,fp
   437f0:	dfc00117 	ldw	ra,4(sp)
   437f4:	df000017 	ldw	fp,0(sp)
   437f8:	dec00204 	addi	sp,sp,8
   437fc:	f800283a 	ret

00043800 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   43800:	deffed04 	addi	sp,sp,-76
   43804:	dfc01215 	stw	ra,72(sp)
   43808:	df001115 	stw	fp,68(sp)
   4380c:	df001104 	addi	fp,sp,68
   43810:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43814:	e0bfff17 	ldw	r2,-4(fp)
   43818:	10000816 	blt	r2,zero,4383c <isatty+0x3c>
   4381c:	e13fff17 	ldw	r4,-4(fp)
   43820:	01400304 	movi	r5,12
   43824:	00408840 	call	40884 <__mulsi3>
   43828:	1007883a 	mov	r3,r2
   4382c:	00800134 	movhi	r2,4
   43830:	109c3f04 	addi	r2,r2,28924
   43834:	1885883a 	add	r2,r3,r2
   43838:	00000106 	br	43840 <isatty+0x40>
   4383c:	0005883a 	mov	r2,zero
   43840:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   43844:	e0bfef17 	ldw	r2,-68(fp)
   43848:	10000e26 	beq	r2,zero,43884 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4384c:	e0bfef17 	ldw	r2,-68(fp)
   43850:	10800017 	ldw	r2,0(r2)
   43854:	10800817 	ldw	r2,32(r2)
   43858:	1000021e 	bne	r2,zero,43864 <isatty+0x64>
    {
      return 1;
   4385c:	00800044 	movi	r2,1
   43860:	00000d06 	br	43898 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43864:	e0bff004 	addi	r2,fp,-64
   43868:	e13fff17 	ldw	r4,-4(fp)
   4386c:	100b883a 	mov	r5,r2
   43870:	00436f80 	call	436f8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43874:	e0bff117 	ldw	r2,-60(fp)
   43878:	10880020 	cmpeqi	r2,r2,8192
   4387c:	10803fcc 	andi	r2,r2,255
   43880:	00000506 	br	43898 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43884:	00437b00 	call	437b0 <alt_get_errno>
   43888:	1007883a 	mov	r3,r2
   4388c:	00801444 	movi	r2,81
   43890:	18800015 	stw	r2,0(r3)
    return 0;
   43894:	0005883a 	mov	r2,zero
  }
}
   43898:	e037883a 	mov	sp,fp
   4389c:	dfc00117 	ldw	ra,4(sp)
   438a0:	df000017 	ldw	fp,0(sp)
   438a4:	dec00204 	addi	sp,sp,8
   438a8:	f800283a 	ret

000438ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   438ac:	defffc04 	addi	sp,sp,-16
   438b0:	df000315 	stw	fp,12(sp)
   438b4:	df000304 	addi	fp,sp,12
   438b8:	e13ffd15 	stw	r4,-12(fp)
   438bc:	e17ffe15 	stw	r5,-8(fp)
   438c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   438c4:	e0fffe17 	ldw	r3,-8(fp)
   438c8:	e0bffd17 	ldw	r2,-12(fp)
   438cc:	18800c26 	beq	r3,r2,43900 <alt_load_section+0x54>
  {
    while( to != end )
   438d0:	00000806 	br	438f4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   438d4:	e0bffe17 	ldw	r2,-8(fp)
   438d8:	10c00104 	addi	r3,r2,4
   438dc:	e0fffe15 	stw	r3,-8(fp)
   438e0:	e0fffd17 	ldw	r3,-12(fp)
   438e4:	19000104 	addi	r4,r3,4
   438e8:	e13ffd15 	stw	r4,-12(fp)
   438ec:	18c00017 	ldw	r3,0(r3)
   438f0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   438f4:	e0fffe17 	ldw	r3,-8(fp)
   438f8:	e0bfff17 	ldw	r2,-4(fp)
   438fc:	18bff51e 	bne	r3,r2,438d4 <__alt_data_end+0xfffcdd74>
    {
      *to++ = *from++;
    }
  }
}
   43900:	e037883a 	mov	sp,fp
   43904:	df000017 	ldw	fp,0(sp)
   43908:	dec00104 	addi	sp,sp,4
   4390c:	f800283a 	ret

00043910 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   43910:	defffe04 	addi	sp,sp,-8
   43914:	dfc00115 	stw	ra,4(sp)
   43918:	df000015 	stw	fp,0(sp)
   4391c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43920:	01000174 	movhi	r4,5
   43924:	2120f604 	addi	r4,r4,-31784
   43928:	01400134 	movhi	r5,4
   4392c:	295a2a04 	addi	r5,r5,26792
   43930:	01800174 	movhi	r6,5
   43934:	31a0f604 	addi	r6,r6,-31784
   43938:	00438ac0 	call	438ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4393c:	01000134 	movhi	r4,4
   43940:	21000804 	addi	r4,r4,32
   43944:	01400134 	movhi	r5,4
   43948:	29400804 	addi	r5,r5,32
   4394c:	01800134 	movhi	r6,4
   43950:	31808b04 	addi	r6,r6,556
   43954:	00438ac0 	call	438ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43958:	01000134 	movhi	r4,4
   4395c:	211a1504 	addi	r4,r4,26708
   43960:	01400134 	movhi	r5,4
   43964:	295a1504 	addi	r5,r5,26708
   43968:	01800134 	movhi	r6,4
   4396c:	319a2a04 	addi	r6,r6,26792
   43970:	00438ac0 	call	438ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43974:	00457300 	call	45730 <alt_dcache_flush_all>
  alt_icache_flush_all();
   43978:	00458f80 	call	458f8 <alt_icache_flush_all>
}
   4397c:	e037883a 	mov	sp,fp
   43980:	dfc00117 	ldw	ra,4(sp)
   43984:	df000017 	ldw	fp,0(sp)
   43988:	dec00204 	addi	sp,sp,8
   4398c:	f800283a 	ret

00043990 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43990:	defffe04 	addi	sp,sp,-8
   43994:	dfc00115 	stw	ra,4(sp)
   43998:	df000015 	stw	fp,0(sp)
   4399c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   439a0:	00800174 	movhi	r2,5
   439a4:	10a0f104 	addi	r2,r2,-31804
   439a8:	10800017 	ldw	r2,0(r2)
   439ac:	10000526 	beq	r2,zero,439c4 <alt_get_errno+0x34>
   439b0:	00800174 	movhi	r2,5
   439b4:	10a0f104 	addi	r2,r2,-31804
   439b8:	10800017 	ldw	r2,0(r2)
   439bc:	103ee83a 	callr	r2
   439c0:	00000206 	br	439cc <alt_get_errno+0x3c>
   439c4:	00800174 	movhi	r2,5
   439c8:	10a7c504 	addi	r2,r2,-24812
}
   439cc:	e037883a 	mov	sp,fp
   439d0:	dfc00117 	ldw	ra,4(sp)
   439d4:	df000017 	ldw	fp,0(sp)
   439d8:	dec00204 	addi	sp,sp,8
   439dc:	f800283a 	ret

000439e0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   439e0:	defff904 	addi	sp,sp,-28
   439e4:	dfc00615 	stw	ra,24(sp)
   439e8:	df000515 	stw	fp,20(sp)
   439ec:	df000504 	addi	fp,sp,20
   439f0:	e13ffd15 	stw	r4,-12(fp)
   439f4:	e17ffe15 	stw	r5,-8(fp)
   439f8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   439fc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43a00:	e0bffd17 	ldw	r2,-12(fp)
   43a04:	10000816 	blt	r2,zero,43a28 <lseek+0x48>
   43a08:	e13ffd17 	ldw	r4,-12(fp)
   43a0c:	01400304 	movi	r5,12
   43a10:	00408840 	call	40884 <__mulsi3>
   43a14:	1007883a 	mov	r3,r2
   43a18:	00800134 	movhi	r2,4
   43a1c:	109c3f04 	addi	r2,r2,28924
   43a20:	1885883a 	add	r2,r3,r2
   43a24:	00000106 	br	43a2c <lseek+0x4c>
   43a28:	0005883a 	mov	r2,zero
   43a2c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   43a30:	e0bffc17 	ldw	r2,-16(fp)
   43a34:	10001026 	beq	r2,zero,43a78 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43a38:	e0bffc17 	ldw	r2,-16(fp)
   43a3c:	10800017 	ldw	r2,0(r2)
   43a40:	10800717 	ldw	r2,28(r2)
   43a44:	10000926 	beq	r2,zero,43a6c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43a48:	e0bffc17 	ldw	r2,-16(fp)
   43a4c:	10800017 	ldw	r2,0(r2)
   43a50:	10800717 	ldw	r2,28(r2)
   43a54:	e13ffc17 	ldw	r4,-16(fp)
   43a58:	e17ffe17 	ldw	r5,-8(fp)
   43a5c:	e1bfff17 	ldw	r6,-4(fp)
   43a60:	103ee83a 	callr	r2
   43a64:	e0bffb15 	stw	r2,-20(fp)
   43a68:	00000506 	br	43a80 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43a6c:	00bfde84 	movi	r2,-134
   43a70:	e0bffb15 	stw	r2,-20(fp)
   43a74:	00000206 	br	43a80 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   43a78:	00bfebc4 	movi	r2,-81
   43a7c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   43a80:	e0bffb17 	ldw	r2,-20(fp)
   43a84:	1000070e 	bge	r2,zero,43aa4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   43a88:	00439900 	call	43990 <alt_get_errno>
   43a8c:	1007883a 	mov	r3,r2
   43a90:	e0bffb17 	ldw	r2,-20(fp)
   43a94:	0085c83a 	sub	r2,zero,r2
   43a98:	18800015 	stw	r2,0(r3)
    rc = -1;
   43a9c:	00bfffc4 	movi	r2,-1
   43aa0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   43aa4:	e0bffb17 	ldw	r2,-20(fp)
}
   43aa8:	e037883a 	mov	sp,fp
   43aac:	dfc00117 	ldw	ra,4(sp)
   43ab0:	df000017 	ldw	fp,0(sp)
   43ab4:	dec00204 	addi	sp,sp,8
   43ab8:	f800283a 	ret

00043abc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43abc:	defffd04 	addi	sp,sp,-12
   43ac0:	dfc00215 	stw	ra,8(sp)
   43ac4:	df000115 	stw	fp,4(sp)
   43ac8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43acc:	0009883a 	mov	r4,zero
   43ad0:	0043fb00 	call	43fb0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   43ad4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   43ad8:	0043fe40 	call	43fe4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   43adc:	01000134 	movhi	r4,4
   43ae0:	211a1f04 	addi	r4,r4,26748
   43ae4:	01400134 	movhi	r5,4
   43ae8:	295a1f04 	addi	r5,r5,26748
   43aec:	01800134 	movhi	r6,4
   43af0:	319a1f04 	addi	r6,r6,26748
   43af4:	0045cc40 	call	45cc4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   43af8:	00458400 	call	45840 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   43afc:	01000134 	movhi	r4,4
   43b00:	21162704 	addi	r4,r4,22684
   43b04:	00464b00 	call	464b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43b08:	d126de17 	ldw	r4,-25736(gp)
   43b0c:	d0e6df17 	ldw	r3,-25732(gp)
   43b10:	d0a6e017 	ldw	r2,-25728(gp)
   43b14:	180b883a 	mov	r5,r3
   43b18:	100d883a 	mov	r6,r2
   43b1c:	00402680 	call	40268 <main>
   43b20:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43b24:	01000044 	movi	r4,1
   43b28:	00435a40 	call	435a4 <close>
  exit (result);
   43b2c:	e13fff17 	ldw	r4,-4(fp)
   43b30:	00464c40 	call	464c4 <exit>

00043b34 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   43b34:	defffe04 	addi	sp,sp,-8
   43b38:	df000115 	stw	fp,4(sp)
   43b3c:	df000104 	addi	fp,sp,4
   43b40:	e13fff15 	stw	r4,-4(fp)
}
   43b44:	e037883a 	mov	sp,fp
   43b48:	df000017 	ldw	fp,0(sp)
   43b4c:	dec00104 	addi	sp,sp,4
   43b50:	f800283a 	ret

00043b54 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   43b54:	defffe04 	addi	sp,sp,-8
   43b58:	df000115 	stw	fp,4(sp)
   43b5c:	df000104 	addi	fp,sp,4
   43b60:	e13fff15 	stw	r4,-4(fp)
}
   43b64:	e037883a 	mov	sp,fp
   43b68:	df000017 	ldw	fp,0(sp)
   43b6c:	dec00104 	addi	sp,sp,4
   43b70:	f800283a 	ret

00043b74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43b74:	defffe04 	addi	sp,sp,-8
   43b78:	dfc00115 	stw	ra,4(sp)
   43b7c:	df000015 	stw	fp,0(sp)
   43b80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43b84:	00800174 	movhi	r2,5
   43b88:	10a0f104 	addi	r2,r2,-31804
   43b8c:	10800017 	ldw	r2,0(r2)
   43b90:	10000526 	beq	r2,zero,43ba8 <alt_get_errno+0x34>
   43b94:	00800174 	movhi	r2,5
   43b98:	10a0f104 	addi	r2,r2,-31804
   43b9c:	10800017 	ldw	r2,0(r2)
   43ba0:	103ee83a 	callr	r2
   43ba4:	00000206 	br	43bb0 <alt_get_errno+0x3c>
   43ba8:	00800174 	movhi	r2,5
   43bac:	10a7c504 	addi	r2,r2,-24812
}
   43bb0:	e037883a 	mov	sp,fp
   43bb4:	dfc00117 	ldw	ra,4(sp)
   43bb8:	df000017 	ldw	fp,0(sp)
   43bbc:	dec00204 	addi	sp,sp,8
   43bc0:	f800283a 	ret

00043bc4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   43bc4:	defff904 	addi	sp,sp,-28
   43bc8:	dfc00615 	stw	ra,24(sp)
   43bcc:	df000515 	stw	fp,20(sp)
   43bd0:	df000504 	addi	fp,sp,20
   43bd4:	e13ffd15 	stw	r4,-12(fp)
   43bd8:	e17ffe15 	stw	r5,-8(fp)
   43bdc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43be0:	e0bffd17 	ldw	r2,-12(fp)
   43be4:	10000816 	blt	r2,zero,43c08 <read+0x44>
   43be8:	e13ffd17 	ldw	r4,-12(fp)
   43bec:	01400304 	movi	r5,12
   43bf0:	00408840 	call	40884 <__mulsi3>
   43bf4:	1007883a 	mov	r3,r2
   43bf8:	00800134 	movhi	r2,4
   43bfc:	109c3f04 	addi	r2,r2,28924
   43c00:	1885883a 	add	r2,r3,r2
   43c04:	00000106 	br	43c0c <read+0x48>
   43c08:	0005883a 	mov	r2,zero
   43c0c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43c10:	e0bffb17 	ldw	r2,-20(fp)
   43c14:	10002226 	beq	r2,zero,43ca0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43c18:	e0bffb17 	ldw	r2,-20(fp)
   43c1c:	10800217 	ldw	r2,8(r2)
   43c20:	108000cc 	andi	r2,r2,3
   43c24:	10800060 	cmpeqi	r2,r2,1
   43c28:	1000181e 	bne	r2,zero,43c8c <read+0xc8>
        (fd->dev->read))
   43c2c:	e0bffb17 	ldw	r2,-20(fp)
   43c30:	10800017 	ldw	r2,0(r2)
   43c34:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43c38:	10001426 	beq	r2,zero,43c8c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43c3c:	e0bffb17 	ldw	r2,-20(fp)
   43c40:	10800017 	ldw	r2,0(r2)
   43c44:	10800517 	ldw	r2,20(r2)
   43c48:	e0ffff17 	ldw	r3,-4(fp)
   43c4c:	e13ffb17 	ldw	r4,-20(fp)
   43c50:	e17ffe17 	ldw	r5,-8(fp)
   43c54:	180d883a 	mov	r6,r3
   43c58:	103ee83a 	callr	r2
   43c5c:	e0bffc15 	stw	r2,-16(fp)
   43c60:	e0bffc17 	ldw	r2,-16(fp)
   43c64:	1000070e 	bge	r2,zero,43c84 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   43c68:	0043b740 	call	43b74 <alt_get_errno>
   43c6c:	1007883a 	mov	r3,r2
   43c70:	e0bffc17 	ldw	r2,-16(fp)
   43c74:	0085c83a 	sub	r2,zero,r2
   43c78:	18800015 	stw	r2,0(r3)
          return -1;
   43c7c:	00bfffc4 	movi	r2,-1
   43c80:	00000c06 	br	43cb4 <read+0xf0>
        }
        return rval;
   43c84:	e0bffc17 	ldw	r2,-16(fp)
   43c88:	00000a06 	br	43cb4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43c8c:	0043b740 	call	43b74 <alt_get_errno>
   43c90:	1007883a 	mov	r3,r2
   43c94:	00800344 	movi	r2,13
   43c98:	18800015 	stw	r2,0(r3)
   43c9c:	00000406 	br	43cb0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43ca0:	0043b740 	call	43b74 <alt_get_errno>
   43ca4:	1007883a 	mov	r3,r2
   43ca8:	00801444 	movi	r2,81
   43cac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43cb0:	00bfffc4 	movi	r2,-1
}
   43cb4:	e037883a 	mov	sp,fp
   43cb8:	dfc00117 	ldw	ra,4(sp)
   43cbc:	df000017 	ldw	fp,0(sp)
   43cc0:	dec00204 	addi	sp,sp,8
   43cc4:	f800283a 	ret

00043cc8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43cc8:	defffc04 	addi	sp,sp,-16
   43ccc:	dfc00315 	stw	ra,12(sp)
   43cd0:	df000215 	stw	fp,8(sp)
   43cd4:	dc000115 	stw	r16,4(sp)
   43cd8:	df000204 	addi	fp,sp,8
   43cdc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   43ce0:	e0bffe17 	ldw	r2,-8(fp)
   43ce4:	108000d0 	cmplti	r2,r2,3
   43ce8:	1000111e 	bne	r2,zero,43d30 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   43cec:	04000134 	movhi	r16,4
   43cf0:	841c3f04 	addi	r16,r16,28924
   43cf4:	e0bffe17 	ldw	r2,-8(fp)
   43cf8:	1009883a 	mov	r4,r2
   43cfc:	01400304 	movi	r5,12
   43d00:	00408840 	call	40884 <__mulsi3>
   43d04:	8085883a 	add	r2,r16,r2
   43d08:	10800204 	addi	r2,r2,8
   43d0c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43d10:	04000134 	movhi	r16,4
   43d14:	841c3f04 	addi	r16,r16,28924
   43d18:	e0bffe17 	ldw	r2,-8(fp)
   43d1c:	1009883a 	mov	r4,r2
   43d20:	01400304 	movi	r5,12
   43d24:	00408840 	call	40884 <__mulsi3>
   43d28:	8085883a 	add	r2,r16,r2
   43d2c:	10000015 	stw	zero,0(r2)
  }
}
   43d30:	e6ffff04 	addi	sp,fp,-4
   43d34:	dfc00217 	ldw	ra,8(sp)
   43d38:	df000117 	ldw	fp,4(sp)
   43d3c:	dc000017 	ldw	r16,0(sp)
   43d40:	dec00304 	addi	sp,sp,12
   43d44:	f800283a 	ret

00043d48 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43d48:	defff904 	addi	sp,sp,-28
   43d4c:	df000615 	stw	fp,24(sp)
   43d50:	df000604 	addi	fp,sp,24
   43d54:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43d58:	0005303a 	rdctl	r2,status
   43d5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43d60:	e0fffc17 	ldw	r3,-16(fp)
   43d64:	00bfff84 	movi	r2,-2
   43d68:	1884703a 	and	r2,r3,r2
   43d6c:	1001703a 	wrctl	status,r2
  
  return context;
   43d70:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43d74:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43d78:	d0a00a17 	ldw	r2,-32728(gp)
   43d7c:	10c000c4 	addi	r3,r2,3
   43d80:	00bfff04 	movi	r2,-4
   43d84:	1884703a 	and	r2,r3,r2
   43d88:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43d8c:	d0e00a17 	ldw	r3,-32728(gp)
   43d90:	e0bfff17 	ldw	r2,-4(fp)
   43d94:	1887883a 	add	r3,r3,r2
   43d98:	008001f4 	movhi	r2,7
   43d9c:	1096d804 	addi	r2,r2,23392
   43da0:	10c0062e 	bgeu	r2,r3,43dbc <sbrk+0x74>
   43da4:	e0bffa17 	ldw	r2,-24(fp)
   43da8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43dac:	e0bffd17 	ldw	r2,-12(fp)
   43db0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43db4:	00bfffc4 	movi	r2,-1
   43db8:	00000b06 	br	43de8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   43dbc:	d0a00a17 	ldw	r2,-32728(gp)
   43dc0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   43dc4:	d0e00a17 	ldw	r3,-32728(gp)
   43dc8:	e0bfff17 	ldw	r2,-4(fp)
   43dcc:	1885883a 	add	r2,r3,r2
   43dd0:	d0a00a15 	stw	r2,-32728(gp)
   43dd4:	e0bffa17 	ldw	r2,-24(fp)
   43dd8:	e0bffe15 	stw	r2,-8(fp)
   43ddc:	e0bffe17 	ldw	r2,-8(fp)
   43de0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43de4:	e0bffb17 	ldw	r2,-20(fp)
} 
   43de8:	e037883a 	mov	sp,fp
   43dec:	df000017 	ldw	fp,0(sp)
   43df0:	dec00104 	addi	sp,sp,4
   43df4:	f800283a 	ret

00043df8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   43df8:	defffd04 	addi	sp,sp,-12
   43dfc:	dfc00215 	stw	ra,8(sp)
   43e00:	df000115 	stw	fp,4(sp)
   43e04:	df000104 	addi	fp,sp,4
   43e08:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   43e0c:	e13fff17 	ldw	r4,-4(fp)
   43e10:	00455d80 	call	455d8 <alt_busy_sleep>
}
   43e14:	e037883a 	mov	sp,fp
   43e18:	dfc00117 	ldw	ra,4(sp)
   43e1c:	df000017 	ldw	fp,0(sp)
   43e20:	dec00204 	addi	sp,sp,8
   43e24:	f800283a 	ret

00043e28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43e28:	defffe04 	addi	sp,sp,-8
   43e2c:	dfc00115 	stw	ra,4(sp)
   43e30:	df000015 	stw	fp,0(sp)
   43e34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43e38:	00800174 	movhi	r2,5
   43e3c:	10a0f104 	addi	r2,r2,-31804
   43e40:	10800017 	ldw	r2,0(r2)
   43e44:	10000526 	beq	r2,zero,43e5c <alt_get_errno+0x34>
   43e48:	00800174 	movhi	r2,5
   43e4c:	10a0f104 	addi	r2,r2,-31804
   43e50:	10800017 	ldw	r2,0(r2)
   43e54:	103ee83a 	callr	r2
   43e58:	00000206 	br	43e64 <alt_get_errno+0x3c>
   43e5c:	00800174 	movhi	r2,5
   43e60:	10a7c504 	addi	r2,r2,-24812
}
   43e64:	e037883a 	mov	sp,fp
   43e68:	dfc00117 	ldw	ra,4(sp)
   43e6c:	df000017 	ldw	fp,0(sp)
   43e70:	dec00204 	addi	sp,sp,8
   43e74:	f800283a 	ret

00043e78 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43e78:	defff904 	addi	sp,sp,-28
   43e7c:	dfc00615 	stw	ra,24(sp)
   43e80:	df000515 	stw	fp,20(sp)
   43e84:	df000504 	addi	fp,sp,20
   43e88:	e13ffd15 	stw	r4,-12(fp)
   43e8c:	e17ffe15 	stw	r5,-8(fp)
   43e90:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43e94:	e0bffd17 	ldw	r2,-12(fp)
   43e98:	10000816 	blt	r2,zero,43ebc <write+0x44>
   43e9c:	e13ffd17 	ldw	r4,-12(fp)
   43ea0:	01400304 	movi	r5,12
   43ea4:	00408840 	call	40884 <__mulsi3>
   43ea8:	1007883a 	mov	r3,r2
   43eac:	00800134 	movhi	r2,4
   43eb0:	109c3f04 	addi	r2,r2,28924
   43eb4:	1885883a 	add	r2,r3,r2
   43eb8:	00000106 	br	43ec0 <write+0x48>
   43ebc:	0005883a 	mov	r2,zero
   43ec0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43ec4:	e0bffb17 	ldw	r2,-20(fp)
   43ec8:	10002126 	beq	r2,zero,43f50 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43ecc:	e0bffb17 	ldw	r2,-20(fp)
   43ed0:	10800217 	ldw	r2,8(r2)
   43ed4:	108000cc 	andi	r2,r2,3
   43ed8:	10001826 	beq	r2,zero,43f3c <write+0xc4>
   43edc:	e0bffb17 	ldw	r2,-20(fp)
   43ee0:	10800017 	ldw	r2,0(r2)
   43ee4:	10800617 	ldw	r2,24(r2)
   43ee8:	10001426 	beq	r2,zero,43f3c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43eec:	e0bffb17 	ldw	r2,-20(fp)
   43ef0:	10800017 	ldw	r2,0(r2)
   43ef4:	10800617 	ldw	r2,24(r2)
   43ef8:	e0ffff17 	ldw	r3,-4(fp)
   43efc:	e13ffb17 	ldw	r4,-20(fp)
   43f00:	e17ffe17 	ldw	r5,-8(fp)
   43f04:	180d883a 	mov	r6,r3
   43f08:	103ee83a 	callr	r2
   43f0c:	e0bffc15 	stw	r2,-16(fp)
   43f10:	e0bffc17 	ldw	r2,-16(fp)
   43f14:	1000070e 	bge	r2,zero,43f34 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   43f18:	0043e280 	call	43e28 <alt_get_errno>
   43f1c:	1007883a 	mov	r3,r2
   43f20:	e0bffc17 	ldw	r2,-16(fp)
   43f24:	0085c83a 	sub	r2,zero,r2
   43f28:	18800015 	stw	r2,0(r3)
        return -1;
   43f2c:	00bfffc4 	movi	r2,-1
   43f30:	00000c06 	br	43f64 <write+0xec>
      }
      return rval;
   43f34:	e0bffc17 	ldw	r2,-16(fp)
   43f38:	00000a06 	br	43f64 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43f3c:	0043e280 	call	43e28 <alt_get_errno>
   43f40:	1007883a 	mov	r3,r2
   43f44:	00800344 	movi	r2,13
   43f48:	18800015 	stw	r2,0(r3)
   43f4c:	00000406 	br	43f60 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43f50:	0043e280 	call	43e28 <alt_get_errno>
   43f54:	1007883a 	mov	r3,r2
   43f58:	00801444 	movi	r2,81
   43f5c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43f60:	00bfffc4 	movi	r2,-1
}
   43f64:	e037883a 	mov	sp,fp
   43f68:	dfc00117 	ldw	ra,4(sp)
   43f6c:	df000017 	ldw	fp,0(sp)
   43f70:	dec00204 	addi	sp,sp,8
   43f74:	f800283a 	ret

00043f78 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43f78:	defffd04 	addi	sp,sp,-12
   43f7c:	dfc00215 	stw	ra,8(sp)
   43f80:	df000115 	stw	fp,4(sp)
   43f84:	df000104 	addi	fp,sp,4
   43f88:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43f8c:	e13fff17 	ldw	r4,-4(fp)
   43f90:	01400174 	movhi	r5,5
   43f94:	2960ee04 	addi	r5,r5,-31816
   43f98:	004579c0 	call	4579c <alt_dev_llist_insert>
}
   43f9c:	e037883a 	mov	sp,fp
   43fa0:	dfc00117 	ldw	ra,4(sp)
   43fa4:	df000017 	ldw	fp,0(sp)
   43fa8:	dec00204 	addi	sp,sp,8
   43fac:	f800283a 	ret

00043fb0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43fb0:	defffd04 	addi	sp,sp,-12
   43fb4:	dfc00215 	stw	ra,8(sp)
   43fb8:	df000115 	stw	fp,4(sp)
   43fbc:	df000104 	addi	fp,sp,4
   43fc0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   43fc4:	004617c0 	call	4617c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43fc8:	00800044 	movi	r2,1
   43fcc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43fd0:	e037883a 	mov	sp,fp
   43fd4:	dfc00117 	ldw	ra,4(sp)
   43fd8:	df000017 	ldw	fp,0(sp)
   43fdc:	dec00204 	addi	sp,sp,8
   43fe0:	f800283a 	ret

00043fe4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43fe4:	defffe04 	addi	sp,sp,-8
   43fe8:	dfc00115 	stw	ra,4(sp)
   43fec:	df000015 	stw	fp,0(sp)
   43ff0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK, sys_clk);
   43ff4:	01000234 	movhi	r4,8
   43ff8:	21040004 	addi	r4,r4,4096
   43ffc:	000b883a 	mov	r5,zero
   44000:	01800044 	movi	r6,1
   44004:	01c0fa04 	movi	r7,1000
   44008:	0044b200 	call	44b20 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4400c:	01000134 	movhi	r4,4
   44010:	211ca904 	addi	r4,r4,29348
   44014:	000b883a 	mov	r5,zero
   44018:	01800084 	movi	r6,2
   4401c:	00441c40 	call	441c4 <altera_avalon_jtag_uart_init>
   44020:	01000134 	movhi	r4,4
   44024:	211c9f04 	addi	r4,r4,29308
   44028:	0043f780 	call	43f78 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
   4402c:	01000174 	movhi	r4,5
   44030:	2120c104 	addi	r4,r4,-31996
   44034:	000b883a 	mov	r5,zero
   44038:	000d883a 	mov	r6,zero
   4403c:	0044cb80 	call	44cb8 <altera_avalon_uart_init>
   44040:	01000174 	movhi	r4,5
   44044:	2120b704 	addi	r4,r4,-32036
   44048:	0043f780 	call	43f78 <alt_dev_reg>
}
   4404c:	e037883a 	mov	sp,fp
   44050:	dfc00117 	ldw	ra,4(sp)
   44054:	df000017 	ldw	fp,0(sp)
   44058:	dec00204 	addi	sp,sp,8
   4405c:	f800283a 	ret

00044060 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   44060:	defffa04 	addi	sp,sp,-24
   44064:	dfc00515 	stw	ra,20(sp)
   44068:	df000415 	stw	fp,16(sp)
   4406c:	df000404 	addi	fp,sp,16
   44070:	e13ffd15 	stw	r4,-12(fp)
   44074:	e17ffe15 	stw	r5,-8(fp)
   44078:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4407c:	e0bffd17 	ldw	r2,-12(fp)
   44080:	10800017 	ldw	r2,0(r2)
   44084:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   44088:	e0bffc17 	ldw	r2,-16(fp)
   4408c:	10c00a04 	addi	r3,r2,40
   44090:	e0bffd17 	ldw	r2,-12(fp)
   44094:	10800217 	ldw	r2,8(r2)
   44098:	1809883a 	mov	r4,r3
   4409c:	e17ffe17 	ldw	r5,-8(fp)
   440a0:	e1bfff17 	ldw	r6,-4(fp)
   440a4:	100f883a 	mov	r7,r2
   440a8:	00446880 	call	44688 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   440ac:	e037883a 	mov	sp,fp
   440b0:	dfc00117 	ldw	ra,4(sp)
   440b4:	df000017 	ldw	fp,0(sp)
   440b8:	dec00204 	addi	sp,sp,8
   440bc:	f800283a 	ret

000440c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   440c0:	defffa04 	addi	sp,sp,-24
   440c4:	dfc00515 	stw	ra,20(sp)
   440c8:	df000415 	stw	fp,16(sp)
   440cc:	df000404 	addi	fp,sp,16
   440d0:	e13ffd15 	stw	r4,-12(fp)
   440d4:	e17ffe15 	stw	r5,-8(fp)
   440d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   440dc:	e0bffd17 	ldw	r2,-12(fp)
   440e0:	10800017 	ldw	r2,0(r2)
   440e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   440e8:	e0bffc17 	ldw	r2,-16(fp)
   440ec:	10c00a04 	addi	r3,r2,40
   440f0:	e0bffd17 	ldw	r2,-12(fp)
   440f4:	10800217 	ldw	r2,8(r2)
   440f8:	1809883a 	mov	r4,r3
   440fc:	e17ffe17 	ldw	r5,-8(fp)
   44100:	e1bfff17 	ldw	r6,-4(fp)
   44104:	100f883a 	mov	r7,r2
   44108:	00448940 	call	44894 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4410c:	e037883a 	mov	sp,fp
   44110:	dfc00117 	ldw	ra,4(sp)
   44114:	df000017 	ldw	fp,0(sp)
   44118:	dec00204 	addi	sp,sp,8
   4411c:	f800283a 	ret

00044120 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   44120:	defffc04 	addi	sp,sp,-16
   44124:	dfc00315 	stw	ra,12(sp)
   44128:	df000215 	stw	fp,8(sp)
   4412c:	df000204 	addi	fp,sp,8
   44130:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44134:	e0bfff17 	ldw	r2,-4(fp)
   44138:	10800017 	ldw	r2,0(r2)
   4413c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   44140:	e0bffe17 	ldw	r2,-8(fp)
   44144:	10c00a04 	addi	r3,r2,40
   44148:	e0bfff17 	ldw	r2,-4(fp)
   4414c:	10800217 	ldw	r2,8(r2)
   44150:	1809883a 	mov	r4,r3
   44154:	100b883a 	mov	r5,r2
   44158:	00445340 	call	44534 <altera_avalon_jtag_uart_close>
}
   4415c:	e037883a 	mov	sp,fp
   44160:	dfc00117 	ldw	ra,4(sp)
   44164:	df000017 	ldw	fp,0(sp)
   44168:	dec00204 	addi	sp,sp,8
   4416c:	f800283a 	ret

00044170 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   44170:	defffa04 	addi	sp,sp,-24
   44174:	dfc00515 	stw	ra,20(sp)
   44178:	df000415 	stw	fp,16(sp)
   4417c:	df000404 	addi	fp,sp,16
   44180:	e13ffd15 	stw	r4,-12(fp)
   44184:	e17ffe15 	stw	r5,-8(fp)
   44188:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4418c:	e0bffd17 	ldw	r2,-12(fp)
   44190:	10800017 	ldw	r2,0(r2)
   44194:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   44198:	e0bffc17 	ldw	r2,-16(fp)
   4419c:	10800a04 	addi	r2,r2,40
   441a0:	1009883a 	mov	r4,r2
   441a4:	e17ffe17 	ldw	r5,-8(fp)
   441a8:	e1bfff17 	ldw	r6,-4(fp)
   441ac:	004459c0 	call	4459c <altera_avalon_jtag_uart_ioctl>
}
   441b0:	e037883a 	mov	sp,fp
   441b4:	dfc00117 	ldw	ra,4(sp)
   441b8:	df000017 	ldw	fp,0(sp)
   441bc:	dec00204 	addi	sp,sp,8
   441c0:	f800283a 	ret

000441c4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   441c4:	defffa04 	addi	sp,sp,-24
   441c8:	dfc00515 	stw	ra,20(sp)
   441cc:	df000415 	stw	fp,16(sp)
   441d0:	df000404 	addi	fp,sp,16
   441d4:	e13ffd15 	stw	r4,-12(fp)
   441d8:	e17ffe15 	stw	r5,-8(fp)
   441dc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   441e0:	e0bffd17 	ldw	r2,-12(fp)
   441e4:	00c00044 	movi	r3,1
   441e8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   441ec:	e0bffd17 	ldw	r2,-12(fp)
   441f0:	10800017 	ldw	r2,0(r2)
   441f4:	10800104 	addi	r2,r2,4
   441f8:	1007883a 	mov	r3,r2
   441fc:	e0bffd17 	ldw	r2,-12(fp)
   44200:	10800817 	ldw	r2,32(r2)
   44204:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   44208:	e0fffe17 	ldw	r3,-8(fp)
   4420c:	e0bfff17 	ldw	r2,-4(fp)
   44210:	d8000015 	stw	zero,0(sp)
   44214:	1809883a 	mov	r4,r3
   44218:	100b883a 	mov	r5,r2
   4421c:	01800134 	movhi	r6,4
   44220:	3190a204 	addi	r6,r6,17032
   44224:	e1fffd17 	ldw	r7,-12(fp)
   44228:	00459140 	call	45914 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4422c:	e0bffd17 	ldw	r2,-12(fp)
   44230:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   44234:	e0bffd17 	ldw	r2,-12(fp)
   44238:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4423c:	00800174 	movhi	r2,5
   44240:	10a7ca04 	addi	r2,r2,-24792
   44244:	10800017 	ldw	r2,0(r2)
   44248:	1809883a 	mov	r4,r3
   4424c:	100b883a 	mov	r5,r2
   44250:	01800134 	movhi	r6,4
   44254:	31912304 	addi	r6,r6,17548
   44258:	e1fffd17 	ldw	r7,-12(fp)
   4425c:	00454980 	call	45498 <alt_alarm_start>
   44260:	1000040e 	bge	r2,zero,44274 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   44264:	e0fffd17 	ldw	r3,-12(fp)
   44268:	00a00034 	movhi	r2,32768
   4426c:	10bfffc4 	addi	r2,r2,-1
   44270:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   44274:	e037883a 	mov	sp,fp
   44278:	dfc00117 	ldw	ra,4(sp)
   4427c:	df000017 	ldw	fp,0(sp)
   44280:	dec00204 	addi	sp,sp,8
   44284:	f800283a 	ret

00044288 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   44288:	defff804 	addi	sp,sp,-32
   4428c:	df000715 	stw	fp,28(sp)
   44290:	df000704 	addi	fp,sp,28
   44294:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   44298:	e0bfff17 	ldw	r2,-4(fp)
   4429c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   442a0:	e0bffb17 	ldw	r2,-20(fp)
   442a4:	10800017 	ldw	r2,0(r2)
   442a8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   442ac:	e0bffc17 	ldw	r2,-16(fp)
   442b0:	10800104 	addi	r2,r2,4
   442b4:	10800037 	ldwio	r2,0(r2)
   442b8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   442bc:	e0bffd17 	ldw	r2,-12(fp)
   442c0:	1080c00c 	andi	r2,r2,768
   442c4:	1000011e 	bne	r2,zero,442cc <altera_avalon_jtag_uart_irq+0x44>
      break;
   442c8:	00006c06 	br	4447c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   442cc:	e0bffd17 	ldw	r2,-12(fp)
   442d0:	1080400c 	andi	r2,r2,256
   442d4:	10003426 	beq	r2,zero,443a8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   442d8:	00800074 	movhi	r2,1
   442dc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   442e0:	e0bffb17 	ldw	r2,-20(fp)
   442e4:	10800a17 	ldw	r2,40(r2)
   442e8:	10800044 	addi	r2,r2,1
   442ec:	1081ffcc 	andi	r2,r2,2047
   442f0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   442f4:	e0bffb17 	ldw	r2,-20(fp)
   442f8:	10c00b17 	ldw	r3,44(r2)
   442fc:	e0bffe17 	ldw	r2,-8(fp)
   44300:	1880011e 	bne	r3,r2,44308 <altera_avalon_jtag_uart_irq+0x80>
          break;
   44304:	00001606 	br	44360 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   44308:	e0bffc17 	ldw	r2,-16(fp)
   4430c:	10800037 	ldwio	r2,0(r2)
   44310:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   44314:	e0bff917 	ldw	r2,-28(fp)
   44318:	10a0000c 	andi	r2,r2,32768
   4431c:	1000011e 	bne	r2,zero,44324 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   44320:	00000f06 	br	44360 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   44324:	e0bffb17 	ldw	r2,-20(fp)
   44328:	10800a17 	ldw	r2,40(r2)
   4432c:	e0fff917 	ldw	r3,-28(fp)
   44330:	1809883a 	mov	r4,r3
   44334:	e0fffb17 	ldw	r3,-20(fp)
   44338:	1885883a 	add	r2,r3,r2
   4433c:	10800e04 	addi	r2,r2,56
   44340:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44344:	e0bffb17 	ldw	r2,-20(fp)
   44348:	10800a17 	ldw	r2,40(r2)
   4434c:	10800044 	addi	r2,r2,1
   44350:	10c1ffcc 	andi	r3,r2,2047
   44354:	e0bffb17 	ldw	r2,-20(fp)
   44358:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4435c:	003fe006 	br	442e0 <__alt_data_end+0xfffce780>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   44360:	e0bff917 	ldw	r2,-28(fp)
   44364:	10bfffec 	andhi	r2,r2,65535
   44368:	10000f26 	beq	r2,zero,443a8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4436c:	e0bffb17 	ldw	r2,-20(fp)
   44370:	10c00817 	ldw	r3,32(r2)
   44374:	00bfff84 	movi	r2,-2
   44378:	1886703a 	and	r3,r3,r2
   4437c:	e0bffb17 	ldw	r2,-20(fp)
   44380:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   44384:	e0bffc17 	ldw	r2,-16(fp)
   44388:	10800104 	addi	r2,r2,4
   4438c:	1007883a 	mov	r3,r2
   44390:	e0bffb17 	ldw	r2,-20(fp)
   44394:	10800817 	ldw	r2,32(r2)
   44398:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4439c:	e0bffc17 	ldw	r2,-16(fp)
   443a0:	10800104 	addi	r2,r2,4
   443a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   443a8:	e0bffd17 	ldw	r2,-12(fp)
   443ac:	1080800c 	andi	r2,r2,512
   443b0:	10003126 	beq	r2,zero,44478 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   443b4:	e0bffd17 	ldw	r2,-12(fp)
   443b8:	1004d43a 	srli	r2,r2,16
   443bc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   443c0:	00001406 	br	44414 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   443c4:	e0bffc17 	ldw	r2,-16(fp)
   443c8:	e0fffb17 	ldw	r3,-20(fp)
   443cc:	18c00d17 	ldw	r3,52(r3)
   443d0:	e13ffb17 	ldw	r4,-20(fp)
   443d4:	20c7883a 	add	r3,r4,r3
   443d8:	18c20e04 	addi	r3,r3,2104
   443dc:	18c00003 	ldbu	r3,0(r3)
   443e0:	18c03fcc 	andi	r3,r3,255
   443e4:	18c0201c 	xori	r3,r3,128
   443e8:	18ffe004 	addi	r3,r3,-128
   443ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   443f0:	e0bffb17 	ldw	r2,-20(fp)
   443f4:	10800d17 	ldw	r2,52(r2)
   443f8:	10800044 	addi	r2,r2,1
   443fc:	10c1ffcc 	andi	r3,r2,2047
   44400:	e0bffb17 	ldw	r2,-20(fp)
   44404:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   44408:	e0bffa17 	ldw	r2,-24(fp)
   4440c:	10bfffc4 	addi	r2,r2,-1
   44410:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   44414:	e0bffa17 	ldw	r2,-24(fp)
   44418:	10000526 	beq	r2,zero,44430 <altera_avalon_jtag_uart_irq+0x1a8>
   4441c:	e0bffb17 	ldw	r2,-20(fp)
   44420:	10c00d17 	ldw	r3,52(r2)
   44424:	e0bffb17 	ldw	r2,-20(fp)
   44428:	10800c17 	ldw	r2,48(r2)
   4442c:	18bfe51e 	bne	r3,r2,443c4 <__alt_data_end+0xfffce864>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   44430:	e0bffa17 	ldw	r2,-24(fp)
   44434:	10001026 	beq	r2,zero,44478 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44438:	e0bffb17 	ldw	r2,-20(fp)
   4443c:	10c00817 	ldw	r3,32(r2)
   44440:	00bfff44 	movi	r2,-3
   44444:	1886703a 	and	r3,r3,r2
   44448:	e0bffb17 	ldw	r2,-20(fp)
   4444c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44450:	e0bffb17 	ldw	r2,-20(fp)
   44454:	10800017 	ldw	r2,0(r2)
   44458:	10800104 	addi	r2,r2,4
   4445c:	1007883a 	mov	r3,r2
   44460:	e0bffb17 	ldw	r2,-20(fp)
   44464:	10800817 	ldw	r2,32(r2)
   44468:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4446c:	e0bffc17 	ldw	r2,-16(fp)
   44470:	10800104 	addi	r2,r2,4
   44474:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   44478:	003f8c06 	br	442ac <__alt_data_end+0xfffce74c>
}
   4447c:	e037883a 	mov	sp,fp
   44480:	df000017 	ldw	fp,0(sp)
   44484:	dec00104 	addi	sp,sp,4
   44488:	f800283a 	ret

0004448c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4448c:	defff804 	addi	sp,sp,-32
   44490:	df000715 	stw	fp,28(sp)
   44494:	df000704 	addi	fp,sp,28
   44498:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4449c:	e0bffb17 	ldw	r2,-20(fp)
   444a0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   444a4:	e0bff917 	ldw	r2,-28(fp)
   444a8:	10800017 	ldw	r2,0(r2)
   444ac:	10800104 	addi	r2,r2,4
   444b0:	10800037 	ldwio	r2,0(r2)
   444b4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   444b8:	e0bffa17 	ldw	r2,-24(fp)
   444bc:	1081000c 	andi	r2,r2,1024
   444c0:	10000b26 	beq	r2,zero,444f0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   444c4:	e0bff917 	ldw	r2,-28(fp)
   444c8:	10800017 	ldw	r2,0(r2)
   444cc:	10800104 	addi	r2,r2,4
   444d0:	1007883a 	mov	r3,r2
   444d4:	e0bff917 	ldw	r2,-28(fp)
   444d8:	10800817 	ldw	r2,32(r2)
   444dc:	10810014 	ori	r2,r2,1024
   444e0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   444e4:	e0bff917 	ldw	r2,-28(fp)
   444e8:	10000915 	stw	zero,36(r2)
   444ec:	00000a06 	br	44518 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   444f0:	e0bff917 	ldw	r2,-28(fp)
   444f4:	10c00917 	ldw	r3,36(r2)
   444f8:	00a00034 	movhi	r2,32768
   444fc:	10bfff04 	addi	r2,r2,-4
   44500:	10c00536 	bltu	r2,r3,44518 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   44504:	e0bff917 	ldw	r2,-28(fp)
   44508:	10800917 	ldw	r2,36(r2)
   4450c:	10c00044 	addi	r3,r2,1
   44510:	e0bff917 	ldw	r2,-28(fp)
   44514:	10c00915 	stw	r3,36(r2)
   44518:	00800174 	movhi	r2,5
   4451c:	10a7ca04 	addi	r2,r2,-24792
   44520:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   44524:	e037883a 	mov	sp,fp
   44528:	df000017 	ldw	fp,0(sp)
   4452c:	dec00104 	addi	sp,sp,4
   44530:	f800283a 	ret

00044534 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   44534:	defffd04 	addi	sp,sp,-12
   44538:	df000215 	stw	fp,8(sp)
   4453c:	df000204 	addi	fp,sp,8
   44540:	e13ffe15 	stw	r4,-8(fp)
   44544:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44548:	00000506 	br	44560 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4454c:	e0bfff17 	ldw	r2,-4(fp)
   44550:	1090000c 	andi	r2,r2,16384
   44554:	10000226 	beq	r2,zero,44560 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   44558:	00bffd44 	movi	r2,-11
   4455c:	00000b06 	br	4458c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44560:	e0bffe17 	ldw	r2,-8(fp)
   44564:	10c00d17 	ldw	r3,52(r2)
   44568:	e0bffe17 	ldw	r2,-8(fp)
   4456c:	10800c17 	ldw	r2,48(r2)
   44570:	18800526 	beq	r3,r2,44588 <altera_avalon_jtag_uart_close+0x54>
   44574:	e0bffe17 	ldw	r2,-8(fp)
   44578:	10c00917 	ldw	r3,36(r2)
   4457c:	e0bffe17 	ldw	r2,-8(fp)
   44580:	10800117 	ldw	r2,4(r2)
   44584:	18bff136 	bltu	r3,r2,4454c <__alt_data_end+0xfffce9ec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44588:	0005883a 	mov	r2,zero
}
   4458c:	e037883a 	mov	sp,fp
   44590:	df000017 	ldw	fp,0(sp)
   44594:	dec00104 	addi	sp,sp,4
   44598:	f800283a 	ret

0004459c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4459c:	defffa04 	addi	sp,sp,-24
   445a0:	df000515 	stw	fp,20(sp)
   445a4:	df000504 	addi	fp,sp,20
   445a8:	e13ffd15 	stw	r4,-12(fp)
   445ac:	e17ffe15 	stw	r5,-8(fp)
   445b0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   445b4:	00bff9c4 	movi	r2,-25
   445b8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   445bc:	e0bffe17 	ldw	r2,-8(fp)
   445c0:	10da8060 	cmpeqi	r3,r2,27137
   445c4:	1800031e 	bne	r3,zero,445d4 <altera_avalon_jtag_uart_ioctl+0x38>
   445c8:	109a80a0 	cmpeqi	r2,r2,27138
   445cc:	1000191e 	bne	r2,zero,44634 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   445d0:	00002806 	br	44674 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   445d4:	e0bffd17 	ldw	r2,-12(fp)
   445d8:	10c00117 	ldw	r3,4(r2)
   445dc:	00a00034 	movhi	r2,32768
   445e0:	10bfffc4 	addi	r2,r2,-1
   445e4:	18801226 	beq	r3,r2,44630 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   445e8:	e0bfff17 	ldw	r2,-4(fp)
   445ec:	10800017 	ldw	r2,0(r2)
   445f0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   445f4:	e0bffc17 	ldw	r2,-16(fp)
   445f8:	10800090 	cmplti	r2,r2,2
   445fc:	1000061e 	bne	r2,zero,44618 <altera_avalon_jtag_uart_ioctl+0x7c>
   44600:	e0fffc17 	ldw	r3,-16(fp)
   44604:	00a00034 	movhi	r2,32768
   44608:	10bfffc4 	addi	r2,r2,-1
   4460c:	18800226 	beq	r3,r2,44618 <altera_avalon_jtag_uart_ioctl+0x7c>
   44610:	e0bffc17 	ldw	r2,-16(fp)
   44614:	00000206 	br	44620 <altera_avalon_jtag_uart_ioctl+0x84>
   44618:	00a00034 	movhi	r2,32768
   4461c:	10bfff84 	addi	r2,r2,-2
   44620:	e0fffd17 	ldw	r3,-12(fp)
   44624:	18800115 	stw	r2,4(r3)
      rc = 0;
   44628:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4462c:	00001106 	br	44674 <altera_avalon_jtag_uart_ioctl+0xd8>
   44630:	00001006 	br	44674 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   44634:	e0bffd17 	ldw	r2,-12(fp)
   44638:	10c00117 	ldw	r3,4(r2)
   4463c:	00a00034 	movhi	r2,32768
   44640:	10bfffc4 	addi	r2,r2,-1
   44644:	18800a26 	beq	r3,r2,44670 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   44648:	e0bffd17 	ldw	r2,-12(fp)
   4464c:	10c00917 	ldw	r3,36(r2)
   44650:	e0bffd17 	ldw	r2,-12(fp)
   44654:	10800117 	ldw	r2,4(r2)
   44658:	1885803a 	cmpltu	r2,r3,r2
   4465c:	10c03fcc 	andi	r3,r2,255
   44660:	e0bfff17 	ldw	r2,-4(fp)
   44664:	10c00015 	stw	r3,0(r2)
      rc = 0;
   44668:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4466c:	00000006 	br	44670 <altera_avalon_jtag_uart_ioctl+0xd4>
   44670:	0001883a 	nop

  default:
    break;
  }

  return rc;
   44674:	e0bffb17 	ldw	r2,-20(fp)
}
   44678:	e037883a 	mov	sp,fp
   4467c:	df000017 	ldw	fp,0(sp)
   44680:	dec00104 	addi	sp,sp,4
   44684:	f800283a 	ret

00044688 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   44688:	defff304 	addi	sp,sp,-52
   4468c:	dfc00c15 	stw	ra,48(sp)
   44690:	df000b15 	stw	fp,44(sp)
   44694:	df000b04 	addi	fp,sp,44
   44698:	e13ffc15 	stw	r4,-16(fp)
   4469c:	e17ffd15 	stw	r5,-12(fp)
   446a0:	e1bffe15 	stw	r6,-8(fp)
   446a4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   446a8:	e0bffd17 	ldw	r2,-12(fp)
   446ac:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   446b0:	00004906 	br	447d8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   446b4:	e0bffc17 	ldw	r2,-16(fp)
   446b8:	10800a17 	ldw	r2,40(r2)
   446bc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   446c0:	e0bffc17 	ldw	r2,-16(fp)
   446c4:	10800b17 	ldw	r2,44(r2)
   446c8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   446cc:	e0fff717 	ldw	r3,-36(fp)
   446d0:	e0bff817 	ldw	r2,-32(fp)
   446d4:	18800536 	bltu	r3,r2,446ec <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   446d8:	e0fff717 	ldw	r3,-36(fp)
   446dc:	e0bff817 	ldw	r2,-32(fp)
   446e0:	1885c83a 	sub	r2,r3,r2
   446e4:	e0bff615 	stw	r2,-40(fp)
   446e8:	00000406 	br	446fc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   446ec:	00c20004 	movi	r3,2048
   446f0:	e0bff817 	ldw	r2,-32(fp)
   446f4:	1885c83a 	sub	r2,r3,r2
   446f8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   446fc:	e0bff617 	ldw	r2,-40(fp)
   44700:	1000011e 	bne	r2,zero,44708 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   44704:	00001d06 	br	4477c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   44708:	e0fffe17 	ldw	r3,-8(fp)
   4470c:	e0bff617 	ldw	r2,-40(fp)
   44710:	1880022e 	bgeu	r3,r2,4471c <altera_avalon_jtag_uart_read+0x94>
        n = space;
   44714:	e0bffe17 	ldw	r2,-8(fp)
   44718:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4471c:	e0bff817 	ldw	r2,-32(fp)
   44720:	10800e04 	addi	r2,r2,56
   44724:	e0fffc17 	ldw	r3,-16(fp)
   44728:	1885883a 	add	r2,r3,r2
   4472c:	e13ff517 	ldw	r4,-44(fp)
   44730:	100b883a 	mov	r5,r2
   44734:	e1bff617 	ldw	r6,-40(fp)
   44738:	00417c00 	call	417c0 <memcpy>
      ptr   += n;
   4473c:	e0fff517 	ldw	r3,-44(fp)
   44740:	e0bff617 	ldw	r2,-40(fp)
   44744:	1885883a 	add	r2,r3,r2
   44748:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4474c:	e0fffe17 	ldw	r3,-8(fp)
   44750:	e0bff617 	ldw	r2,-40(fp)
   44754:	1885c83a 	sub	r2,r3,r2
   44758:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4475c:	e0fff817 	ldw	r3,-32(fp)
   44760:	e0bff617 	ldw	r2,-40(fp)
   44764:	1885883a 	add	r2,r3,r2
   44768:	10c1ffcc 	andi	r3,r2,2047
   4476c:	e0bffc17 	ldw	r2,-16(fp)
   44770:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   44774:	e0bffe17 	ldw	r2,-8(fp)
   44778:	00bfce16 	blt	zero,r2,446b4 <__alt_data_end+0xfffceb54>

    /* If we read any data then return it */
    if (ptr != buffer)
   4477c:	e0fff517 	ldw	r3,-44(fp)
   44780:	e0bffd17 	ldw	r2,-12(fp)
   44784:	18800126 	beq	r3,r2,4478c <altera_avalon_jtag_uart_read+0x104>
      break;
   44788:	00001506 	br	447e0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4478c:	e0bfff17 	ldw	r2,-4(fp)
   44790:	1090000c 	andi	r2,r2,16384
   44794:	10000126 	beq	r2,zero,4479c <altera_avalon_jtag_uart_read+0x114>
      break;
   44798:	00001106 	br	447e0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4479c:	0001883a 	nop
   447a0:	e0bffc17 	ldw	r2,-16(fp)
   447a4:	10c00a17 	ldw	r3,40(r2)
   447a8:	e0bff717 	ldw	r2,-36(fp)
   447ac:	1880051e 	bne	r3,r2,447c4 <altera_avalon_jtag_uart_read+0x13c>
   447b0:	e0bffc17 	ldw	r2,-16(fp)
   447b4:	10c00917 	ldw	r3,36(r2)
   447b8:	e0bffc17 	ldw	r2,-16(fp)
   447bc:	10800117 	ldw	r2,4(r2)
   447c0:	18bff736 	bltu	r3,r2,447a0 <__alt_data_end+0xfffcec40>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   447c4:	e0bffc17 	ldw	r2,-16(fp)
   447c8:	10c00a17 	ldw	r3,40(r2)
   447cc:	e0bff717 	ldw	r2,-36(fp)
   447d0:	1880011e 	bne	r3,r2,447d8 <altera_avalon_jtag_uart_read+0x150>
      break;
   447d4:	00000206 	br	447e0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   447d8:	e0bffe17 	ldw	r2,-8(fp)
   447dc:	00bfb516 	blt	zero,r2,446b4 <__alt_data_end+0xfffceb54>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   447e0:	e0fff517 	ldw	r3,-44(fp)
   447e4:	e0bffd17 	ldw	r2,-12(fp)
   447e8:	18801826 	beq	r3,r2,4484c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   447ec:	0005303a 	rdctl	r2,status
   447f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   447f4:	e0fffa17 	ldw	r3,-24(fp)
   447f8:	00bfff84 	movi	r2,-2
   447fc:	1884703a 	and	r2,r3,r2
   44800:	1001703a 	wrctl	status,r2
  
  return context;
   44804:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   44808:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4480c:	e0bffc17 	ldw	r2,-16(fp)
   44810:	10800817 	ldw	r2,32(r2)
   44814:	10c00054 	ori	r3,r2,1
   44818:	e0bffc17 	ldw	r2,-16(fp)
   4481c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44820:	e0bffc17 	ldw	r2,-16(fp)
   44824:	10800017 	ldw	r2,0(r2)
   44828:	10800104 	addi	r2,r2,4
   4482c:	1007883a 	mov	r3,r2
   44830:	e0bffc17 	ldw	r2,-16(fp)
   44834:	10800817 	ldw	r2,32(r2)
   44838:	18800035 	stwio	r2,0(r3)
   4483c:	e0bff917 	ldw	r2,-28(fp)
   44840:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44844:	e0bffb17 	ldw	r2,-20(fp)
   44848:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4484c:	e0fff517 	ldw	r3,-44(fp)
   44850:	e0bffd17 	ldw	r2,-12(fp)
   44854:	18800426 	beq	r3,r2,44868 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   44858:	e0fff517 	ldw	r3,-44(fp)
   4485c:	e0bffd17 	ldw	r2,-12(fp)
   44860:	1885c83a 	sub	r2,r3,r2
   44864:	00000606 	br	44880 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   44868:	e0bfff17 	ldw	r2,-4(fp)
   4486c:	1090000c 	andi	r2,r2,16384
   44870:	10000226 	beq	r2,zero,4487c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   44874:	00bffd44 	movi	r2,-11
   44878:	00000106 	br	44880 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   4487c:	00bffec4 	movi	r2,-5
}
   44880:	e037883a 	mov	sp,fp
   44884:	dfc00117 	ldw	ra,4(sp)
   44888:	df000017 	ldw	fp,0(sp)
   4488c:	dec00204 	addi	sp,sp,8
   44890:	f800283a 	ret

00044894 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   44894:	defff304 	addi	sp,sp,-52
   44898:	dfc00c15 	stw	ra,48(sp)
   4489c:	df000b15 	stw	fp,44(sp)
   448a0:	df000b04 	addi	fp,sp,44
   448a4:	e13ffc15 	stw	r4,-16(fp)
   448a8:	e17ffd15 	stw	r5,-12(fp)
   448ac:	e1bffe15 	stw	r6,-8(fp)
   448b0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   448b4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   448b8:	e0bffd17 	ldw	r2,-12(fp)
   448bc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   448c0:	00003806 	br	449a4 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   448c4:	e0bffc17 	ldw	r2,-16(fp)
   448c8:	10800c17 	ldw	r2,48(r2)
   448cc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   448d0:	e0bffc17 	ldw	r2,-16(fp)
   448d4:	10800d17 	ldw	r2,52(r2)
   448d8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   448dc:	e0fff817 	ldw	r3,-32(fp)
   448e0:	e0bff517 	ldw	r2,-44(fp)
   448e4:	1880062e 	bgeu	r3,r2,44900 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   448e8:	e0fff517 	ldw	r3,-44(fp)
   448ec:	e0bff817 	ldw	r2,-32(fp)
   448f0:	1885c83a 	sub	r2,r3,r2
   448f4:	10bfffc4 	addi	r2,r2,-1
   448f8:	e0bff615 	stw	r2,-40(fp)
   448fc:	00000b06 	br	4492c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   44900:	e0bff517 	ldw	r2,-44(fp)
   44904:	10000526 	beq	r2,zero,4491c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   44908:	00c20004 	movi	r3,2048
   4490c:	e0bff817 	ldw	r2,-32(fp)
   44910:	1885c83a 	sub	r2,r3,r2
   44914:	e0bff615 	stw	r2,-40(fp)
   44918:	00000406 	br	4492c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4491c:	00c1ffc4 	movi	r3,2047
   44920:	e0bff817 	ldw	r2,-32(fp)
   44924:	1885c83a 	sub	r2,r3,r2
   44928:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4492c:	e0bff617 	ldw	r2,-40(fp)
   44930:	1000011e 	bne	r2,zero,44938 <altera_avalon_jtag_uart_write+0xa4>
        break;
   44934:	00001d06 	br	449ac <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   44938:	e0fffe17 	ldw	r3,-8(fp)
   4493c:	e0bff617 	ldw	r2,-40(fp)
   44940:	1880022e 	bgeu	r3,r2,4494c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   44944:	e0bffe17 	ldw	r2,-8(fp)
   44948:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4494c:	e0bff817 	ldw	r2,-32(fp)
   44950:	10820e04 	addi	r2,r2,2104
   44954:	e0fffc17 	ldw	r3,-16(fp)
   44958:	1885883a 	add	r2,r3,r2
   4495c:	1009883a 	mov	r4,r2
   44960:	e17ffd17 	ldw	r5,-12(fp)
   44964:	e1bff617 	ldw	r6,-40(fp)
   44968:	00417c00 	call	417c0 <memcpy>
      ptr   += n;
   4496c:	e0fffd17 	ldw	r3,-12(fp)
   44970:	e0bff617 	ldw	r2,-40(fp)
   44974:	1885883a 	add	r2,r3,r2
   44978:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4497c:	e0fffe17 	ldw	r3,-8(fp)
   44980:	e0bff617 	ldw	r2,-40(fp)
   44984:	1885c83a 	sub	r2,r3,r2
   44988:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4498c:	e0fff817 	ldw	r3,-32(fp)
   44990:	e0bff617 	ldw	r2,-40(fp)
   44994:	1885883a 	add	r2,r3,r2
   44998:	10c1ffcc 	andi	r3,r2,2047
   4499c:	e0bffc17 	ldw	r2,-16(fp)
   449a0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   449a4:	e0bffe17 	ldw	r2,-8(fp)
   449a8:	00bfc616 	blt	zero,r2,448c4 <__alt_data_end+0xfffced64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   449ac:	0005303a 	rdctl	r2,status
   449b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   449b4:	e0fffa17 	ldw	r3,-24(fp)
   449b8:	00bfff84 	movi	r2,-2
   449bc:	1884703a 	and	r2,r3,r2
   449c0:	1001703a 	wrctl	status,r2
  
  return context;
   449c4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   449c8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   449cc:	e0bffc17 	ldw	r2,-16(fp)
   449d0:	10800817 	ldw	r2,32(r2)
   449d4:	10c00094 	ori	r3,r2,2
   449d8:	e0bffc17 	ldw	r2,-16(fp)
   449dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   449e0:	e0bffc17 	ldw	r2,-16(fp)
   449e4:	10800017 	ldw	r2,0(r2)
   449e8:	10800104 	addi	r2,r2,4
   449ec:	1007883a 	mov	r3,r2
   449f0:	e0bffc17 	ldw	r2,-16(fp)
   449f4:	10800817 	ldw	r2,32(r2)
   449f8:	18800035 	stwio	r2,0(r3)
   449fc:	e0bff917 	ldw	r2,-28(fp)
   44a00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44a04:	e0bffb17 	ldw	r2,-20(fp)
   44a08:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   44a0c:	e0bffe17 	ldw	r2,-8(fp)
   44a10:	0080120e 	bge	zero,r2,44a5c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   44a14:	e0bfff17 	ldw	r2,-4(fp)
   44a18:	1090000c 	andi	r2,r2,16384
   44a1c:	10000126 	beq	r2,zero,44a24 <altera_avalon_jtag_uart_write+0x190>
        break;
   44a20:	00001006 	br	44a64 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   44a24:	0001883a 	nop
   44a28:	e0bffc17 	ldw	r2,-16(fp)
   44a2c:	10c00d17 	ldw	r3,52(r2)
   44a30:	e0bff517 	ldw	r2,-44(fp)
   44a34:	1880051e 	bne	r3,r2,44a4c <altera_avalon_jtag_uart_write+0x1b8>
   44a38:	e0bffc17 	ldw	r2,-16(fp)
   44a3c:	10c00917 	ldw	r3,36(r2)
   44a40:	e0bffc17 	ldw	r2,-16(fp)
   44a44:	10800117 	ldw	r2,4(r2)
   44a48:	18bff736 	bltu	r3,r2,44a28 <__alt_data_end+0xfffceec8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   44a4c:	e0bffc17 	ldw	r2,-16(fp)
   44a50:	10800917 	ldw	r2,36(r2)
   44a54:	10000126 	beq	r2,zero,44a5c <altera_avalon_jtag_uart_write+0x1c8>
         break;
   44a58:	00000206 	br	44a64 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   44a5c:	e0bffe17 	ldw	r2,-8(fp)
   44a60:	00bf9716 	blt	zero,r2,448c0 <__alt_data_end+0xfffced60>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   44a64:	e0fffd17 	ldw	r3,-12(fp)
   44a68:	e0bff717 	ldw	r2,-36(fp)
   44a6c:	18800426 	beq	r3,r2,44a80 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   44a70:	e0fffd17 	ldw	r3,-12(fp)
   44a74:	e0bff717 	ldw	r2,-36(fp)
   44a78:	1885c83a 	sub	r2,r3,r2
   44a7c:	00000606 	br	44a98 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   44a80:	e0bfff17 	ldw	r2,-4(fp)
   44a84:	1090000c 	andi	r2,r2,16384
   44a88:	10000226 	beq	r2,zero,44a94 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   44a8c:	00bffd44 	movi	r2,-11
   44a90:	00000106 	br	44a98 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   44a94:	00bffec4 	movi	r2,-5
}
   44a98:	e037883a 	mov	sp,fp
   44a9c:	dfc00117 	ldw	ra,4(sp)
   44aa0:	df000017 	ldw	fp,0(sp)
   44aa4:	dec00204 	addi	sp,sp,8
   44aa8:	f800283a 	ret

00044aac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   44aac:	defffa04 	addi	sp,sp,-24
   44ab0:	dfc00515 	stw	ra,20(sp)
   44ab4:	df000415 	stw	fp,16(sp)
   44ab8:	df000404 	addi	fp,sp,16
   44abc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   44ac0:	0007883a 	mov	r3,zero
   44ac4:	e0bfff17 	ldw	r2,-4(fp)
   44ac8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   44acc:	e0bfff17 	ldw	r2,-4(fp)
   44ad0:	10800104 	addi	r2,r2,4
   44ad4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44ad8:	0005303a 	rdctl	r2,status
   44adc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44ae0:	e0fffd17 	ldw	r3,-12(fp)
   44ae4:	00bfff84 	movi	r2,-2
   44ae8:	1884703a 	and	r2,r3,r2
   44aec:	1001703a 	wrctl	status,r2
  
  return context;
   44af0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   44af4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   44af8:	00460780 	call	46078 <alt_tick>
   44afc:	e0bffc17 	ldw	r2,-16(fp)
   44b00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44b04:	e0bffe17 	ldw	r2,-8(fp)
   44b08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   44b0c:	e037883a 	mov	sp,fp
   44b10:	dfc00117 	ldw	ra,4(sp)
   44b14:	df000017 	ldw	fp,0(sp)
   44b18:	dec00204 	addi	sp,sp,8
   44b1c:	f800283a 	ret

00044b20 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   44b20:	defff804 	addi	sp,sp,-32
   44b24:	dfc00715 	stw	ra,28(sp)
   44b28:	df000615 	stw	fp,24(sp)
   44b2c:	df000604 	addi	fp,sp,24
   44b30:	e13ffc15 	stw	r4,-16(fp)
   44b34:	e17ffd15 	stw	r5,-12(fp)
   44b38:	e1bffe15 	stw	r6,-8(fp)
   44b3c:	e1ffff15 	stw	r7,-4(fp)
   44b40:	e0bfff17 	ldw	r2,-4(fp)
   44b44:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   44b48:	00800174 	movhi	r2,5
   44b4c:	10a7ca04 	addi	r2,r2,-24792
   44b50:	10800017 	ldw	r2,0(r2)
   44b54:	1000041e 	bne	r2,zero,44b68 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   44b58:	00800174 	movhi	r2,5
   44b5c:	10a7ca04 	addi	r2,r2,-24792
   44b60:	e0fffb17 	ldw	r3,-20(fp)
   44b64:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   44b68:	e0bffc17 	ldw	r2,-16(fp)
   44b6c:	10800104 	addi	r2,r2,4
   44b70:	00c001c4 	movi	r3,7
   44b74:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   44b78:	d8000015 	stw	zero,0(sp)
   44b7c:	e13ffd17 	ldw	r4,-12(fp)
   44b80:	e17ffe17 	ldw	r5,-8(fp)
   44b84:	01800134 	movhi	r6,4
   44b88:	3192ab04 	addi	r6,r6,19116
   44b8c:	e1fffc17 	ldw	r7,-16(fp)
   44b90:	00459140 	call	45914 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   44b94:	e037883a 	mov	sp,fp
   44b98:	dfc00117 	ldw	ra,4(sp)
   44b9c:	df000017 	ldw	fp,0(sp)
   44ba0:	dec00204 	addi	sp,sp,8
   44ba4:	f800283a 	ret

00044ba8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   44ba8:	defffa04 	addi	sp,sp,-24
   44bac:	dfc00515 	stw	ra,20(sp)
   44bb0:	df000415 	stw	fp,16(sp)
   44bb4:	df000404 	addi	fp,sp,16
   44bb8:	e13ffd15 	stw	r4,-12(fp)
   44bbc:	e17ffe15 	stw	r5,-8(fp)
   44bc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   44bc4:	e0bffd17 	ldw	r2,-12(fp)
   44bc8:	10800017 	ldw	r2,0(r2)
   44bcc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   44bd0:	e0bffc17 	ldw	r2,-16(fp)
   44bd4:	10c00a04 	addi	r3,r2,40
   44bd8:	e0bffd17 	ldw	r2,-12(fp)
   44bdc:	10800217 	ldw	r2,8(r2)
   44be0:	1809883a 	mov	r4,r3
   44be4:	e17ffe17 	ldw	r5,-8(fp)
   44be8:	e1bfff17 	ldw	r6,-4(fp)
   44bec:	100f883a 	mov	r7,r2
   44bf0:	00450c00 	call	450c0 <altera_avalon_uart_read>
      fd->fd_flags);
}
   44bf4:	e037883a 	mov	sp,fp
   44bf8:	dfc00117 	ldw	ra,4(sp)
   44bfc:	df000017 	ldw	fp,0(sp)
   44c00:	dec00204 	addi	sp,sp,8
   44c04:	f800283a 	ret

00044c08 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   44c08:	defffa04 	addi	sp,sp,-24
   44c0c:	dfc00515 	stw	ra,20(sp)
   44c10:	df000415 	stw	fp,16(sp)
   44c14:	df000404 	addi	fp,sp,16
   44c18:	e13ffd15 	stw	r4,-12(fp)
   44c1c:	e17ffe15 	stw	r5,-8(fp)
   44c20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   44c24:	e0bffd17 	ldw	r2,-12(fp)
   44c28:	10800017 	ldw	r2,0(r2)
   44c2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   44c30:	e0bffc17 	ldw	r2,-16(fp)
   44c34:	10c00a04 	addi	r3,r2,40
   44c38:	e0bffd17 	ldw	r2,-12(fp)
   44c3c:	10800217 	ldw	r2,8(r2)
   44c40:	1809883a 	mov	r4,r3
   44c44:	e17ffe17 	ldw	r5,-8(fp)
   44c48:	e1bfff17 	ldw	r6,-4(fp)
   44c4c:	100f883a 	mov	r7,r2
   44c50:	00452ec0 	call	452ec <altera_avalon_uart_write>
      fd->fd_flags);
}
   44c54:	e037883a 	mov	sp,fp
   44c58:	dfc00117 	ldw	ra,4(sp)
   44c5c:	df000017 	ldw	fp,0(sp)
   44c60:	dec00204 	addi	sp,sp,8
   44c64:	f800283a 	ret

00044c68 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   44c68:	defffc04 	addi	sp,sp,-16
   44c6c:	dfc00315 	stw	ra,12(sp)
   44c70:	df000215 	stw	fp,8(sp)
   44c74:	df000204 	addi	fp,sp,8
   44c78:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   44c7c:	e0bfff17 	ldw	r2,-4(fp)
   44c80:	10800017 	ldw	r2,0(r2)
   44c84:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   44c88:	e0bffe17 	ldw	r2,-8(fp)
   44c8c:	10c00a04 	addi	r3,r2,40
   44c90:	e0bfff17 	ldw	r2,-4(fp)
   44c94:	10800217 	ldw	r2,8(r2)
   44c98:	1809883a 	mov	r4,r3
   44c9c:	100b883a 	mov	r5,r2
   44ca0:	004501c0 	call	4501c <altera_avalon_uart_close>
}
   44ca4:	e037883a 	mov	sp,fp
   44ca8:	dfc00117 	ldw	ra,4(sp)
   44cac:	df000017 	ldw	fp,0(sp)
   44cb0:	dec00204 	addi	sp,sp,8
   44cb4:	f800283a 	ret

00044cb8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   44cb8:	defff804 	addi	sp,sp,-32
   44cbc:	dfc00715 	stw	ra,28(sp)
   44cc0:	df000615 	stw	fp,24(sp)
   44cc4:	df000604 	addi	fp,sp,24
   44cc8:	e13ffd15 	stw	r4,-12(fp)
   44ccc:	e17ffe15 	stw	r5,-8(fp)
   44cd0:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   44cd4:	e0bffd17 	ldw	r2,-12(fp)
   44cd8:	10800017 	ldw	r2,0(r2)
   44cdc:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   44ce0:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   44ce4:	1000041e 	bne	r2,zero,44cf8 <altera_avalon_uart_init+0x40>
   44ce8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   44cec:	1000021e 	bne	r2,zero,44cf8 <altera_avalon_uart_init+0x40>
   44cf0:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   44cf4:	10000226 	beq	r2,zero,44d00 <altera_avalon_uart_init+0x48>
   44cf8:	00800044 	movi	r2,1
   44cfc:	00000106 	br	44d04 <altera_avalon_uart_init+0x4c>
   44d00:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   44d04:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   44d08:	e0bffc17 	ldw	r2,-16(fp)
   44d0c:	10000f1e 	bne	r2,zero,44d4c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   44d10:	e0bffd17 	ldw	r2,-12(fp)
   44d14:	00c32004 	movi	r3,3200
   44d18:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   44d1c:	e0bffb17 	ldw	r2,-20(fp)
   44d20:	10800304 	addi	r2,r2,12
   44d24:	e0fffd17 	ldw	r3,-12(fp)
   44d28:	18c00117 	ldw	r3,4(r3)
   44d2c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   44d30:	d8000015 	stw	zero,0(sp)
   44d34:	e13ffe17 	ldw	r4,-8(fp)
   44d38:	e17fff17 	ldw	r5,-4(fp)
   44d3c:	01800134 	movhi	r6,4
   44d40:	31935804 	addi	r6,r6,19808
   44d44:	e1fffd17 	ldw	r7,-12(fp)
   44d48:	00459140 	call	45914 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   44d4c:	e037883a 	mov	sp,fp
   44d50:	dfc00117 	ldw	ra,4(sp)
   44d54:	df000017 	ldw	fp,0(sp)
   44d58:	dec00204 	addi	sp,sp,8
   44d5c:	f800283a 	ret

00044d60 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   44d60:	defffa04 	addi	sp,sp,-24
   44d64:	dfc00515 	stw	ra,20(sp)
   44d68:	df000415 	stw	fp,16(sp)
   44d6c:	df000404 	addi	fp,sp,16
   44d70:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   44d74:	e0bfff17 	ldw	r2,-4(fp)
   44d78:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   44d7c:	e0bffc17 	ldw	r2,-16(fp)
   44d80:	10800017 	ldw	r2,0(r2)
   44d84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   44d88:	e0bffd17 	ldw	r2,-12(fp)
   44d8c:	10800204 	addi	r2,r2,8
   44d90:	10800037 	ldwio	r2,0(r2)
   44d94:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   44d98:	e0bffd17 	ldw	r2,-12(fp)
   44d9c:	10800204 	addi	r2,r2,8
   44da0:	0007883a 	mov	r3,zero
   44da4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   44da8:	e0bffd17 	ldw	r2,-12(fp)
   44dac:	10800204 	addi	r2,r2,8
   44db0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   44db4:	e0bffe17 	ldw	r2,-8(fp)
   44db8:	1080200c 	andi	r2,r2,128
   44dbc:	10000326 	beq	r2,zero,44dcc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   44dc0:	e13ffc17 	ldw	r4,-16(fp)
   44dc4:	e17ffe17 	ldw	r5,-8(fp)
   44dc8:	0044df80 	call	44df8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   44dcc:	e0bffe17 	ldw	r2,-8(fp)
   44dd0:	1081100c 	andi	r2,r2,1088
   44dd4:	10000326 	beq	r2,zero,44de4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   44dd8:	e13ffc17 	ldw	r4,-16(fp)
   44ddc:	e17ffe17 	ldw	r5,-8(fp)
   44de0:	0044ed80 	call	44ed8 <altera_avalon_uart_txirq>
  }
  

}
   44de4:	e037883a 	mov	sp,fp
   44de8:	dfc00117 	ldw	ra,4(sp)
   44dec:	df000017 	ldw	fp,0(sp)
   44df0:	dec00204 	addi	sp,sp,8
   44df4:	f800283a 	ret

00044df8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   44df8:	defffc04 	addi	sp,sp,-16
   44dfc:	df000315 	stw	fp,12(sp)
   44e00:	df000304 	addi	fp,sp,12
   44e04:	e13ffe15 	stw	r4,-8(fp)
   44e08:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   44e0c:	e0bfff17 	ldw	r2,-4(fp)
   44e10:	108000cc 	andi	r2,r2,3
   44e14:	10000126 	beq	r2,zero,44e1c <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   44e18:	00002b06 	br	44ec8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   44e1c:	e0bffe17 	ldw	r2,-8(fp)
   44e20:	10800317 	ldw	r2,12(r2)
   44e24:	e0bffe17 	ldw	r2,-8(fp)
   44e28:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   44e2c:	e0bffe17 	ldw	r2,-8(fp)
   44e30:	10800317 	ldw	r2,12(r2)
   44e34:	10800044 	addi	r2,r2,1
   44e38:	10800fcc 	andi	r2,r2,63
   44e3c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   44e40:	e0bffe17 	ldw	r2,-8(fp)
   44e44:	10800317 	ldw	r2,12(r2)
   44e48:	e0fffe17 	ldw	r3,-8(fp)
   44e4c:	18c00017 	ldw	r3,0(r3)
   44e50:	18c00037 	ldwio	r3,0(r3)
   44e54:	1809883a 	mov	r4,r3
   44e58:	e0fffe17 	ldw	r3,-8(fp)
   44e5c:	1885883a 	add	r2,r3,r2
   44e60:	10800704 	addi	r2,r2,28
   44e64:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   44e68:	e0bffe17 	ldw	r2,-8(fp)
   44e6c:	e0fffd17 	ldw	r3,-12(fp)
   44e70:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   44e74:	e0bffe17 	ldw	r2,-8(fp)
   44e78:	10800317 	ldw	r2,12(r2)
   44e7c:	10800044 	addi	r2,r2,1
   44e80:	10800fcc 	andi	r2,r2,63
   44e84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   44e88:	e0bffe17 	ldw	r2,-8(fp)
   44e8c:	10c00217 	ldw	r3,8(r2)
   44e90:	e0bffd17 	ldw	r2,-12(fp)
   44e94:	18800c1e 	bne	r3,r2,44ec8 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   44e98:	e0bffe17 	ldw	r2,-8(fp)
   44e9c:	10c00117 	ldw	r3,4(r2)
   44ea0:	00bfdfc4 	movi	r2,-129
   44ea4:	1886703a 	and	r3,r3,r2
   44ea8:	e0bffe17 	ldw	r2,-8(fp)
   44eac:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   44eb0:	e0bffe17 	ldw	r2,-8(fp)
   44eb4:	10800017 	ldw	r2,0(r2)
   44eb8:	10800304 	addi	r2,r2,12
   44ebc:	e0fffe17 	ldw	r3,-8(fp)
   44ec0:	18c00117 	ldw	r3,4(r3)
   44ec4:	10c00035 	stwio	r3,0(r2)
  }   
}
   44ec8:	e037883a 	mov	sp,fp
   44ecc:	df000017 	ldw	fp,0(sp)
   44ed0:	dec00104 	addi	sp,sp,4
   44ed4:	f800283a 	ret

00044ed8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   44ed8:	defffb04 	addi	sp,sp,-20
   44edc:	df000415 	stw	fp,16(sp)
   44ee0:	df000404 	addi	fp,sp,16
   44ee4:	e13ffc15 	stw	r4,-16(fp)
   44ee8:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   44eec:	e0bffc17 	ldw	r2,-16(fp)
   44ef0:	10c00417 	ldw	r3,16(r2)
   44ef4:	e0bffc17 	ldw	r2,-16(fp)
   44ef8:	10800517 	ldw	r2,20(r2)
   44efc:	18803226 	beq	r3,r2,44fc8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   44f00:	e0bffc17 	ldw	r2,-16(fp)
   44f04:	10800617 	ldw	r2,24(r2)
   44f08:	1080008c 	andi	r2,r2,2
   44f0c:	10000326 	beq	r2,zero,44f1c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   44f10:	e0bffd17 	ldw	r2,-12(fp)
   44f14:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   44f18:	10001d26 	beq	r2,zero,44f90 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   44f1c:	e0bffc17 	ldw	r2,-16(fp)
   44f20:	10800417 	ldw	r2,16(r2)
   44f24:	e0bffc17 	ldw	r2,-16(fp)
   44f28:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   44f2c:	e0bffc17 	ldw	r2,-16(fp)
   44f30:	10800017 	ldw	r2,0(r2)
   44f34:	10800104 	addi	r2,r2,4
   44f38:	e0fffc17 	ldw	r3,-16(fp)
   44f3c:	18c00417 	ldw	r3,16(r3)
   44f40:	e13ffc17 	ldw	r4,-16(fp)
   44f44:	20c7883a 	add	r3,r4,r3
   44f48:	18c01704 	addi	r3,r3,92
   44f4c:	18c00003 	ldbu	r3,0(r3)
   44f50:	18c03fcc 	andi	r3,r3,255
   44f54:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   44f58:	e0bffc17 	ldw	r2,-16(fp)
   44f5c:	10800417 	ldw	r2,16(r2)
   44f60:	10800044 	addi	r2,r2,1
   44f64:	e0fffc17 	ldw	r3,-16(fp)
   44f68:	18800415 	stw	r2,16(r3)
   44f6c:	10c00fcc 	andi	r3,r2,63
   44f70:	e0bffc17 	ldw	r2,-16(fp)
   44f74:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   44f78:	e0bffc17 	ldw	r2,-16(fp)
   44f7c:	10800117 	ldw	r2,4(r2)
   44f80:	10c01014 	ori	r3,r2,64
   44f84:	e0bffc17 	ldw	r2,-16(fp)
   44f88:	10c00115 	stw	r3,4(r2)
   44f8c:	00000e06 	br	44fc8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   44f90:	e0bffc17 	ldw	r2,-16(fp)
   44f94:	10800017 	ldw	r2,0(r2)
   44f98:	10800204 	addi	r2,r2,8
   44f9c:	10800037 	ldwio	r2,0(r2)
   44fa0:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   44fa4:	e0bffd17 	ldw	r2,-12(fp)
   44fa8:	1082000c 	andi	r2,r2,2048
   44fac:	1000061e 	bne	r2,zero,44fc8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   44fb0:	e0bffc17 	ldw	r2,-16(fp)
   44fb4:	10c00117 	ldw	r3,4(r2)
   44fb8:	00bfefc4 	movi	r2,-65
   44fbc:	1886703a 	and	r3,r3,r2
   44fc0:	e0bffc17 	ldw	r2,-16(fp)
   44fc4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   44fc8:	e0bffc17 	ldw	r2,-16(fp)
   44fcc:	10c00417 	ldw	r3,16(r2)
   44fd0:	e0bffc17 	ldw	r2,-16(fp)
   44fd4:	10800517 	ldw	r2,20(r2)
   44fd8:	1880061e 	bne	r3,r2,44ff4 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   44fdc:	e0bffc17 	ldw	r2,-16(fp)
   44fe0:	10c00117 	ldw	r3,4(r2)
   44fe4:	00beefc4 	movi	r2,-1089
   44fe8:	1886703a 	and	r3,r3,r2
   44fec:	e0bffc17 	ldw	r2,-16(fp)
   44ff0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   44ff4:	e0bffc17 	ldw	r2,-16(fp)
   44ff8:	10800017 	ldw	r2,0(r2)
   44ffc:	10800304 	addi	r2,r2,12
   45000:	e0fffc17 	ldw	r3,-16(fp)
   45004:	18c00117 	ldw	r3,4(r3)
   45008:	10c00035 	stwio	r3,0(r2)
}
   4500c:	e037883a 	mov	sp,fp
   45010:	df000017 	ldw	fp,0(sp)
   45014:	dec00104 	addi	sp,sp,4
   45018:	f800283a 	ret

0004501c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   4501c:	defffd04 	addi	sp,sp,-12
   45020:	df000215 	stw	fp,8(sp)
   45024:	df000204 	addi	fp,sp,8
   45028:	e13ffe15 	stw	r4,-8(fp)
   4502c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   45030:	00000506 	br	45048 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   45034:	e0bfff17 	ldw	r2,-4(fp)
   45038:	1090000c 	andi	r2,r2,16384
   4503c:	10000226 	beq	r2,zero,45048 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   45040:	00bffd44 	movi	r2,-11
   45044:	00000606 	br	45060 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   45048:	e0bffe17 	ldw	r2,-8(fp)
   4504c:	10c00417 	ldw	r3,16(r2)
   45050:	e0bffe17 	ldw	r2,-8(fp)
   45054:	10800517 	ldw	r2,20(r2)
   45058:	18bff61e 	bne	r3,r2,45034 <__alt_data_end+0xfffcf4d4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4505c:	0005883a 	mov	r2,zero
}
   45060:	e037883a 	mov	sp,fp
   45064:	df000017 	ldw	fp,0(sp)
   45068:	dec00104 	addi	sp,sp,4
   4506c:	f800283a 	ret

00045070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45070:	defffe04 	addi	sp,sp,-8
   45074:	dfc00115 	stw	ra,4(sp)
   45078:	df000015 	stw	fp,0(sp)
   4507c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45080:	00800174 	movhi	r2,5
   45084:	10a0f104 	addi	r2,r2,-31804
   45088:	10800017 	ldw	r2,0(r2)
   4508c:	10000526 	beq	r2,zero,450a4 <alt_get_errno+0x34>
   45090:	00800174 	movhi	r2,5
   45094:	10a0f104 	addi	r2,r2,-31804
   45098:	10800017 	ldw	r2,0(r2)
   4509c:	103ee83a 	callr	r2
   450a0:	00000206 	br	450ac <alt_get_errno+0x3c>
   450a4:	00800174 	movhi	r2,5
   450a8:	10a7c504 	addi	r2,r2,-24812
}
   450ac:	e037883a 	mov	sp,fp
   450b0:	dfc00117 	ldw	ra,4(sp)
   450b4:	df000017 	ldw	fp,0(sp)
   450b8:	dec00204 	addi	sp,sp,8
   450bc:	f800283a 	ret

000450c0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   450c0:	defff204 	addi	sp,sp,-56
   450c4:	dfc00d15 	stw	ra,52(sp)
   450c8:	df000c15 	stw	fp,48(sp)
   450cc:	df000c04 	addi	fp,sp,48
   450d0:	e13ffc15 	stw	r4,-16(fp)
   450d4:	e17ffd15 	stw	r5,-12(fp)
   450d8:	e1bffe15 	stw	r6,-8(fp)
   450dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   450e0:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   450e4:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   450e8:	e0bfff17 	ldw	r2,-4(fp)
   450ec:	1090000c 	andi	r2,r2,16384
   450f0:	1005003a 	cmpeq	r2,r2,zero
   450f4:	10803fcc 	andi	r2,r2,255
   450f8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   450fc:	00001306 	br	4514c <altera_avalon_uart_read+0x8c>
    {
      count++;
   45100:	e0bff517 	ldw	r2,-44(fp)
   45104:	10800044 	addi	r2,r2,1
   45108:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   4510c:	e0bffd17 	ldw	r2,-12(fp)
   45110:	10c00044 	addi	r3,r2,1
   45114:	e0fffd15 	stw	r3,-12(fp)
   45118:	e0fffc17 	ldw	r3,-16(fp)
   4511c:	18c00217 	ldw	r3,8(r3)
   45120:	e13ffc17 	ldw	r4,-16(fp)
   45124:	20c7883a 	add	r3,r4,r3
   45128:	18c00704 	addi	r3,r3,28
   4512c:	18c00003 	ldbu	r3,0(r3)
   45130:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   45134:	e0bffc17 	ldw	r2,-16(fp)
   45138:	10800217 	ldw	r2,8(r2)
   4513c:	10800044 	addi	r2,r2,1
   45140:	10c00fcc 	andi	r3,r2,63
   45144:	e0bffc17 	ldw	r2,-16(fp)
   45148:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   4514c:	e0fff517 	ldw	r3,-44(fp)
   45150:	e0bffe17 	ldw	r2,-8(fp)
   45154:	1880050e 	bge	r3,r2,4516c <altera_avalon_uart_read+0xac>
   45158:	e0bffc17 	ldw	r2,-16(fp)
   4515c:	10c00217 	ldw	r3,8(r2)
   45160:	e0bffc17 	ldw	r2,-16(fp)
   45164:	10800317 	ldw	r2,12(r2)
   45168:	18bfe51e 	bne	r3,r2,45100 <__alt_data_end+0xfffcf5a0>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   4516c:	e0bff517 	ldw	r2,-44(fp)
   45170:	1000251e 	bne	r2,zero,45208 <altera_avalon_uart_read+0x148>
   45174:	e0bffc17 	ldw	r2,-16(fp)
   45178:	10c00217 	ldw	r3,8(r2)
   4517c:	e0bffc17 	ldw	r2,-16(fp)
   45180:	10800317 	ldw	r2,12(r2)
   45184:	1880201e 	bne	r3,r2,45208 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   45188:	e0bff617 	ldw	r2,-40(fp)
   4518c:	1000071e 	bne	r2,zero,451ac <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   45190:	00450700 	call	45070 <alt_get_errno>
   45194:	1007883a 	mov	r3,r2
   45198:	008002c4 	movi	r2,11
   4519c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   451a0:	00800044 	movi	r2,1
   451a4:	e0bff405 	stb	r2,-48(fp)
        break;
   451a8:	00001b06 	br	45218 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   451ac:	0005303a 	rdctl	r2,status
   451b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   451b4:	e0fff817 	ldw	r3,-32(fp)
   451b8:	00bfff84 	movi	r2,-2
   451bc:	1884703a 	and	r2,r3,r2
   451c0:	1001703a 	wrctl	status,r2
  
  return context;
   451c4:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   451c8:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   451cc:	e0bffc17 	ldw	r2,-16(fp)
   451d0:	10800117 	ldw	r2,4(r2)
   451d4:	10c02014 	ori	r3,r2,128
   451d8:	e0bffc17 	ldw	r2,-16(fp)
   451dc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   451e0:	e0bffc17 	ldw	r2,-16(fp)
   451e4:	10800017 	ldw	r2,0(r2)
   451e8:	10800304 	addi	r2,r2,12
   451ec:	e0fffc17 	ldw	r3,-16(fp)
   451f0:	18c00117 	ldw	r3,4(r3)
   451f4:	10c00035 	stwio	r3,0(r2)
   451f8:	e0bff717 	ldw	r2,-36(fp)
   451fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45200:	e0bff917 	ldw	r2,-28(fp)
   45204:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   45208:	e0bff517 	ldw	r2,-44(fp)
   4520c:	1000021e 	bne	r2,zero,45218 <altera_avalon_uart_read+0x158>
   45210:	e0bffe17 	ldw	r2,-8(fp)
   45214:	103fb91e 	bne	r2,zero,450fc <__alt_data_end+0xfffcf59c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45218:	0005303a 	rdctl	r2,status
   4521c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45220:	e0fffa17 	ldw	r3,-24(fp)
   45224:	00bfff84 	movi	r2,-2
   45228:	1884703a 	and	r2,r3,r2
   4522c:	1001703a 	wrctl	status,r2
  
  return context;
   45230:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   45234:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   45238:	e0bffc17 	ldw	r2,-16(fp)
   4523c:	10800117 	ldw	r2,4(r2)
   45240:	10c02014 	ori	r3,r2,128
   45244:	e0bffc17 	ldw	r2,-16(fp)
   45248:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4524c:	e0bffc17 	ldw	r2,-16(fp)
   45250:	10800017 	ldw	r2,0(r2)
   45254:	10800304 	addi	r2,r2,12
   45258:	e0fffc17 	ldw	r3,-16(fp)
   4525c:	18c00117 	ldw	r3,4(r3)
   45260:	10c00035 	stwio	r3,0(r2)
   45264:	e0bff717 	ldw	r2,-36(fp)
   45268:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4526c:	e0bffb17 	ldw	r2,-20(fp)
   45270:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   45274:	e0bff403 	ldbu	r2,-48(fp)
   45278:	10000226 	beq	r2,zero,45284 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   4527c:	00bffd44 	movi	r2,-11
   45280:	00000106 	br	45288 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   45284:	e0bff517 	ldw	r2,-44(fp)
  }
}
   45288:	e037883a 	mov	sp,fp
   4528c:	dfc00117 	ldw	ra,4(sp)
   45290:	df000017 	ldw	fp,0(sp)
   45294:	dec00204 	addi	sp,sp,8
   45298:	f800283a 	ret

0004529c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4529c:	defffe04 	addi	sp,sp,-8
   452a0:	dfc00115 	stw	ra,4(sp)
   452a4:	df000015 	stw	fp,0(sp)
   452a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   452ac:	00800174 	movhi	r2,5
   452b0:	10a0f104 	addi	r2,r2,-31804
   452b4:	10800017 	ldw	r2,0(r2)
   452b8:	10000526 	beq	r2,zero,452d0 <alt_get_errno+0x34>
   452bc:	00800174 	movhi	r2,5
   452c0:	10a0f104 	addi	r2,r2,-31804
   452c4:	10800017 	ldw	r2,0(r2)
   452c8:	103ee83a 	callr	r2
   452cc:	00000206 	br	452d8 <alt_get_errno+0x3c>
   452d0:	00800174 	movhi	r2,5
   452d4:	10a7c504 	addi	r2,r2,-24812
}
   452d8:	e037883a 	mov	sp,fp
   452dc:	dfc00117 	ldw	ra,4(sp)
   452e0:	df000017 	ldw	fp,0(sp)
   452e4:	dec00204 	addi	sp,sp,8
   452e8:	f800283a 	ret

000452ec <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   452ec:	defff204 	addi	sp,sp,-56
   452f0:	dfc00d15 	stw	ra,52(sp)
   452f4:	df000c15 	stw	fp,48(sp)
   452f8:	df000c04 	addi	fp,sp,48
   452fc:	e13ffc15 	stw	r4,-16(fp)
   45300:	e17ffd15 	stw	r5,-12(fp)
   45304:	e1bffe15 	stw	r6,-8(fp)
   45308:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   4530c:	e0bffe17 	ldw	r2,-8(fp)
   45310:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   45314:	e0bfff17 	ldw	r2,-4(fp)
   45318:	1090000c 	andi	r2,r2,16384
   4531c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   45320:	00003c06 	br	45414 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   45324:	e0bffc17 	ldw	r2,-16(fp)
   45328:	10800517 	ldw	r2,20(r2)
   4532c:	10800044 	addi	r2,r2,1
   45330:	10800fcc 	andi	r2,r2,63
   45334:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   45338:	e0bffc17 	ldw	r2,-16(fp)
   4533c:	10c00417 	ldw	r3,16(r2)
   45340:	e0bff617 	ldw	r2,-40(fp)
   45344:	1880221e 	bne	r3,r2,453d0 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   45348:	e0bff517 	ldw	r2,-44(fp)
   4534c:	10000526 	beq	r2,zero,45364 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   45350:	004529c0 	call	4529c <alt_get_errno>
   45354:	1007883a 	mov	r3,r2
   45358:	008002c4 	movi	r2,11
   4535c:	18800015 	stw	r2,0(r3)
        break;
   45360:	00002e06 	br	4541c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45364:	0005303a 	rdctl	r2,status
   45368:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4536c:	e0fff817 	ldw	r3,-32(fp)
   45370:	00bfff84 	movi	r2,-2
   45374:	1884703a 	and	r2,r3,r2
   45378:	1001703a 	wrctl	status,r2
  
  return context;
   4537c:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   45380:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   45384:	e0bffc17 	ldw	r2,-16(fp)
   45388:	10800117 	ldw	r2,4(r2)
   4538c:	10c11014 	ori	r3,r2,1088
   45390:	e0bffc17 	ldw	r2,-16(fp)
   45394:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   45398:	e0bffc17 	ldw	r2,-16(fp)
   4539c:	10800017 	ldw	r2,0(r2)
   453a0:	10800304 	addi	r2,r2,12
   453a4:	e0fffc17 	ldw	r3,-16(fp)
   453a8:	18c00117 	ldw	r3,4(r3)
   453ac:	10c00035 	stwio	r3,0(r2)
   453b0:	e0bff717 	ldw	r2,-36(fp)
   453b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   453b8:	e0bff917 	ldw	r2,-28(fp)
   453bc:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   453c0:	e0bffc17 	ldw	r2,-16(fp)
   453c4:	10c00417 	ldw	r3,16(r2)
   453c8:	e0bff617 	ldw	r2,-40(fp)
   453cc:	18bffc26 	beq	r3,r2,453c0 <__alt_data_end+0xfffcf860>
      }
    }

    count--;
   453d0:	e0bff417 	ldw	r2,-48(fp)
   453d4:	10bfffc4 	addi	r2,r2,-1
   453d8:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   453dc:	e0bffc17 	ldw	r2,-16(fp)
   453e0:	10c00517 	ldw	r3,20(r2)
   453e4:	e0bffd17 	ldw	r2,-12(fp)
   453e8:	11000044 	addi	r4,r2,1
   453ec:	e13ffd15 	stw	r4,-12(fp)
   453f0:	10800003 	ldbu	r2,0(r2)
   453f4:	1009883a 	mov	r4,r2
   453f8:	e0bffc17 	ldw	r2,-16(fp)
   453fc:	10c5883a 	add	r2,r2,r3
   45400:	10801704 	addi	r2,r2,92
   45404:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   45408:	e0bffc17 	ldw	r2,-16(fp)
   4540c:	e0fff617 	ldw	r3,-40(fp)
   45410:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   45414:	e0bff417 	ldw	r2,-48(fp)
   45418:	103fc21e 	bne	r2,zero,45324 <__alt_data_end+0xfffcf7c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4541c:	0005303a 	rdctl	r2,status
   45420:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45424:	e0fffa17 	ldw	r3,-24(fp)
   45428:	00bfff84 	movi	r2,-2
   4542c:	1884703a 	and	r2,r3,r2
   45430:	1001703a 	wrctl	status,r2
  
  return context;
   45434:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   45438:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4543c:	e0bffc17 	ldw	r2,-16(fp)
   45440:	10800117 	ldw	r2,4(r2)
   45444:	10c11014 	ori	r3,r2,1088
   45448:	e0bffc17 	ldw	r2,-16(fp)
   4544c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   45450:	e0bffc17 	ldw	r2,-16(fp)
   45454:	10800017 	ldw	r2,0(r2)
   45458:	10800304 	addi	r2,r2,12
   4545c:	e0fffc17 	ldw	r3,-16(fp)
   45460:	18c00117 	ldw	r3,4(r3)
   45464:	10c00035 	stwio	r3,0(r2)
   45468:	e0bff717 	ldw	r2,-36(fp)
   4546c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45470:	e0bffb17 	ldw	r2,-20(fp)
   45474:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   45478:	e0fffe17 	ldw	r3,-8(fp)
   4547c:	e0bff417 	ldw	r2,-48(fp)
   45480:	1885c83a 	sub	r2,r3,r2
}
   45484:	e037883a 	mov	sp,fp
   45488:	dfc00117 	ldw	ra,4(sp)
   4548c:	df000017 	ldw	fp,0(sp)
   45490:	dec00204 	addi	sp,sp,8
   45494:	f800283a 	ret

00045498 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   45498:	defff504 	addi	sp,sp,-44
   4549c:	df000a15 	stw	fp,40(sp)
   454a0:	df000a04 	addi	fp,sp,40
   454a4:	e13ffc15 	stw	r4,-16(fp)
   454a8:	e17ffd15 	stw	r5,-12(fp)
   454ac:	e1bffe15 	stw	r6,-8(fp)
   454b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   454b4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   454b8:	00800174 	movhi	r2,5
   454bc:	10a7ca04 	addi	r2,r2,-24792
   454c0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   454c4:	10003f26 	beq	r2,zero,455c4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   454c8:	e0bffc17 	ldw	r2,-16(fp)
   454cc:	10003b26 	beq	r2,zero,455bc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   454d0:	e0bffc17 	ldw	r2,-16(fp)
   454d4:	e0fffe17 	ldw	r3,-8(fp)
   454d8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   454dc:	e0bffc17 	ldw	r2,-16(fp)
   454e0:	e0ffff17 	ldw	r3,-4(fp)
   454e4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   454e8:	0005303a 	rdctl	r2,status
   454ec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   454f0:	e0fff817 	ldw	r3,-32(fp)
   454f4:	00bfff84 	movi	r2,-2
   454f8:	1884703a 	and	r2,r3,r2
   454fc:	1001703a 	wrctl	status,r2
  
  return context;
   45500:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   45504:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   45508:	00800174 	movhi	r2,5
   4550c:	10a7cb04 	addi	r2,r2,-24788
   45510:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   45514:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   45518:	e0fffd17 	ldw	r3,-12(fp)
   4551c:	e0bff617 	ldw	r2,-40(fp)
   45520:	1885883a 	add	r2,r3,r2
   45524:	10c00044 	addi	r3,r2,1
   45528:	e0bffc17 	ldw	r2,-16(fp)
   4552c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   45530:	e0bffc17 	ldw	r2,-16(fp)
   45534:	10c00217 	ldw	r3,8(r2)
   45538:	e0bff617 	ldw	r2,-40(fp)
   4553c:	1880042e 	bgeu	r3,r2,45550 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   45540:	e0bffc17 	ldw	r2,-16(fp)
   45544:	00c00044 	movi	r3,1
   45548:	10c00405 	stb	r3,16(r2)
   4554c:	00000206 	br	45558 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   45550:	e0bffc17 	ldw	r2,-16(fp)
   45554:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   45558:	e0fffc17 	ldw	r3,-16(fp)
   4555c:	00800174 	movhi	r2,5
   45560:	10a0f404 	addi	r2,r2,-31792
   45564:	e0bff915 	stw	r2,-28(fp)
   45568:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4556c:	e0bffa17 	ldw	r2,-24(fp)
   45570:	e0fff917 	ldw	r3,-28(fp)
   45574:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45578:	e0bff917 	ldw	r2,-28(fp)
   4557c:	10c00017 	ldw	r3,0(r2)
   45580:	e0bffa17 	ldw	r2,-24(fp)
   45584:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45588:	e0bff917 	ldw	r2,-28(fp)
   4558c:	10800017 	ldw	r2,0(r2)
   45590:	e0fffa17 	ldw	r3,-24(fp)
   45594:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45598:	e0bff917 	ldw	r2,-28(fp)
   4559c:	e0fffa17 	ldw	r3,-24(fp)
   455a0:	10c00015 	stw	r3,0(r2)
   455a4:	e0bff717 	ldw	r2,-36(fp)
   455a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   455ac:	e0bffb17 	ldw	r2,-20(fp)
   455b0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   455b4:	0005883a 	mov	r2,zero
   455b8:	00000306 	br	455c8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   455bc:	00bffa84 	movi	r2,-22
   455c0:	00000106 	br	455c8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   455c4:	00bfde84 	movi	r2,-134
  }
}
   455c8:	e037883a 	mov	sp,fp
   455cc:	df000017 	ldw	fp,0(sp)
   455d0:	dec00104 	addi	sp,sp,4
   455d4:	f800283a 	ret

000455d8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   455d8:	defffa04 	addi	sp,sp,-24
   455dc:	dfc00515 	stw	ra,20(sp)
   455e0:	df000415 	stw	fp,16(sp)
   455e4:	df000404 	addi	fp,sp,16
   455e8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   455ec:	00800244 	movi	r2,9
   455f0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   455f4:	e13ffd17 	ldw	r4,-12(fp)
   455f8:	014003f4 	movhi	r5,15
   455fc:	29509004 	addi	r5,r5,16960
   45600:	00408840 	call	40884 <__mulsi3>
   45604:	01023c74 	movhi	r4,2289
   45608:	21346004 	addi	r4,r4,-11904
   4560c:	100b883a 	mov	r5,r2
   45610:	00408740 	call	40874 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   45614:	01200034 	movhi	r4,32768
   45618:	213fffc4 	addi	r4,r4,-1
   4561c:	100b883a 	mov	r5,r2
   45620:	00408740 	call	40874 <__udivsi3>
   45624:	e13fff17 	ldw	r4,-4(fp)
   45628:	100b883a 	mov	r5,r2
   4562c:	00408740 	call	40874 <__udivsi3>
   45630:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   45634:	e0bffe17 	ldw	r2,-8(fp)
   45638:	10002a26 	beq	r2,zero,456e4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   4563c:	e03ffc15 	stw	zero,-16(fp)
   45640:	00001706 	br	456a0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   45644:	00a00034 	movhi	r2,32768
   45648:	10bfffc4 	addi	r2,r2,-1
   4564c:	10bfffc4 	addi	r2,r2,-1
   45650:	103ffe1e 	bne	r2,zero,4564c <__alt_data_end+0xfffcfaec>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   45654:	e13ffd17 	ldw	r4,-12(fp)
   45658:	014003f4 	movhi	r5,15
   4565c:	29509004 	addi	r5,r5,16960
   45660:	00408840 	call	40884 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   45664:	01023c74 	movhi	r4,2289
   45668:	21346004 	addi	r4,r4,-11904
   4566c:	100b883a 	mov	r5,r2
   45670:	00408740 	call	40874 <__udivsi3>
   45674:	01200034 	movhi	r4,32768
   45678:	213fffc4 	addi	r4,r4,-1
   4567c:	100b883a 	mov	r5,r2
   45680:	00408740 	call	40874 <__udivsi3>
   45684:	1007883a 	mov	r3,r2
   45688:	e0bfff17 	ldw	r2,-4(fp)
   4568c:	10c5c83a 	sub	r2,r2,r3
   45690:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   45694:	e0bffc17 	ldw	r2,-16(fp)
   45698:	10800044 	addi	r2,r2,1
   4569c:	e0bffc15 	stw	r2,-16(fp)
   456a0:	e0fffc17 	ldw	r3,-16(fp)
   456a4:	e0bffe17 	ldw	r2,-8(fp)
   456a8:	18bfe616 	blt	r3,r2,45644 <__alt_data_end+0xfffcfae4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   456ac:	e13ffd17 	ldw	r4,-12(fp)
   456b0:	014003f4 	movhi	r5,15
   456b4:	29509004 	addi	r5,r5,16960
   456b8:	00408840 	call	40884 <__mulsi3>
   456bc:	01023c74 	movhi	r4,2289
   456c0:	21346004 	addi	r4,r4,-11904
   456c4:	100b883a 	mov	r5,r2
   456c8:	00408740 	call	40874 <__udivsi3>
   456cc:	1009883a 	mov	r4,r2
   456d0:	e17fff17 	ldw	r5,-4(fp)
   456d4:	00408840 	call	40884 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   456d8:	10bfffc4 	addi	r2,r2,-1
   456dc:	103ffe1e 	bne	r2,zero,456d8 <__alt_data_end+0xfffcfb78>
   456e0:	00000d06 	br	45718 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   456e4:	e13ffd17 	ldw	r4,-12(fp)
   456e8:	014003f4 	movhi	r5,15
   456ec:	29509004 	addi	r5,r5,16960
   456f0:	00408840 	call	40884 <__mulsi3>
   456f4:	01023c74 	movhi	r4,2289
   456f8:	21346004 	addi	r4,r4,-11904
   456fc:	100b883a 	mov	r5,r2
   45700:	00408740 	call	40874 <__udivsi3>
   45704:	1009883a 	mov	r4,r2
   45708:	e17fff17 	ldw	r5,-4(fp)
   4570c:	00408840 	call	40884 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   45710:	10bfffc4 	addi	r2,r2,-1
   45714:	00bffe16 	blt	zero,r2,45710 <__alt_data_end+0xfffcfbb0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   45718:	0005883a 	mov	r2,zero
}
   4571c:	e037883a 	mov	sp,fp
   45720:	dfc00117 	ldw	ra,4(sp)
   45724:	df000017 	ldw	fp,0(sp)
   45728:	dec00204 	addi	sp,sp,8
   4572c:	f800283a 	ret

00045730 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   45730:	deffff04 	addi	sp,sp,-4
   45734:	df000015 	stw	fp,0(sp)
   45738:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4573c:	e037883a 	mov	sp,fp
   45740:	df000017 	ldw	fp,0(sp)
   45744:	dec00104 	addi	sp,sp,4
   45748:	f800283a 	ret

0004574c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4574c:	defffe04 	addi	sp,sp,-8
   45750:	dfc00115 	stw	ra,4(sp)
   45754:	df000015 	stw	fp,0(sp)
   45758:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4575c:	00800174 	movhi	r2,5
   45760:	10a0f104 	addi	r2,r2,-31804
   45764:	10800017 	ldw	r2,0(r2)
   45768:	10000526 	beq	r2,zero,45780 <alt_get_errno+0x34>
   4576c:	00800174 	movhi	r2,5
   45770:	10a0f104 	addi	r2,r2,-31804
   45774:	10800017 	ldw	r2,0(r2)
   45778:	103ee83a 	callr	r2
   4577c:	00000206 	br	45788 <alt_get_errno+0x3c>
   45780:	00800174 	movhi	r2,5
   45784:	10a7c504 	addi	r2,r2,-24812
}
   45788:	e037883a 	mov	sp,fp
   4578c:	dfc00117 	ldw	ra,4(sp)
   45790:	df000017 	ldw	fp,0(sp)
   45794:	dec00204 	addi	sp,sp,8
   45798:	f800283a 	ret

0004579c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4579c:	defffa04 	addi	sp,sp,-24
   457a0:	dfc00515 	stw	ra,20(sp)
   457a4:	df000415 	stw	fp,16(sp)
   457a8:	df000404 	addi	fp,sp,16
   457ac:	e13ffe15 	stw	r4,-8(fp)
   457b0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   457b4:	e0bffe17 	ldw	r2,-8(fp)
   457b8:	10000326 	beq	r2,zero,457c8 <alt_dev_llist_insert+0x2c>
   457bc:	e0bffe17 	ldw	r2,-8(fp)
   457c0:	10800217 	ldw	r2,8(r2)
   457c4:	1000061e 	bne	r2,zero,457e0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   457c8:	004574c0 	call	4574c <alt_get_errno>
   457cc:	1007883a 	mov	r3,r2
   457d0:	00800584 	movi	r2,22
   457d4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   457d8:	00bffa84 	movi	r2,-22
   457dc:	00001306 	br	4582c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   457e0:	e0bffe17 	ldw	r2,-8(fp)
   457e4:	e0ffff17 	ldw	r3,-4(fp)
   457e8:	e0fffc15 	stw	r3,-16(fp)
   457ec:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   457f0:	e0bffd17 	ldw	r2,-12(fp)
   457f4:	e0fffc17 	ldw	r3,-16(fp)
   457f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   457fc:	e0bffc17 	ldw	r2,-16(fp)
   45800:	10c00017 	ldw	r3,0(r2)
   45804:	e0bffd17 	ldw	r2,-12(fp)
   45808:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4580c:	e0bffc17 	ldw	r2,-16(fp)
   45810:	10800017 	ldw	r2,0(r2)
   45814:	e0fffd17 	ldw	r3,-12(fp)
   45818:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4581c:	e0bffc17 	ldw	r2,-16(fp)
   45820:	e0fffd17 	ldw	r3,-12(fp)
   45824:	10c00015 	stw	r3,0(r2)

  return 0;  
   45828:	0005883a 	mov	r2,zero
}
   4582c:	e037883a 	mov	sp,fp
   45830:	dfc00117 	ldw	ra,4(sp)
   45834:	df000017 	ldw	fp,0(sp)
   45838:	dec00204 	addi	sp,sp,8
   4583c:	f800283a 	ret

00045840 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   45840:	defffd04 	addi	sp,sp,-12
   45844:	dfc00215 	stw	ra,8(sp)
   45848:	df000115 	stw	fp,4(sp)
   4584c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   45850:	00800134 	movhi	r2,4
   45854:	109a1404 	addi	r2,r2,26704
   45858:	e0bfff15 	stw	r2,-4(fp)
   4585c:	00000606 	br	45878 <_do_ctors+0x38>
        (*ctor) (); 
   45860:	e0bfff17 	ldw	r2,-4(fp)
   45864:	10800017 	ldw	r2,0(r2)
   45868:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4586c:	e0bfff17 	ldw	r2,-4(fp)
   45870:	10bfff04 	addi	r2,r2,-4
   45874:	e0bfff15 	stw	r2,-4(fp)
   45878:	e0ffff17 	ldw	r3,-4(fp)
   4587c:	00800134 	movhi	r2,4
   45880:	109a1504 	addi	r2,r2,26708
   45884:	18bff62e 	bgeu	r3,r2,45860 <__alt_data_end+0xfffcfd00>
        (*ctor) (); 
}
   45888:	e037883a 	mov	sp,fp
   4588c:	dfc00117 	ldw	ra,4(sp)
   45890:	df000017 	ldw	fp,0(sp)
   45894:	dec00204 	addi	sp,sp,8
   45898:	f800283a 	ret

0004589c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4589c:	defffd04 	addi	sp,sp,-12
   458a0:	dfc00215 	stw	ra,8(sp)
   458a4:	df000115 	stw	fp,4(sp)
   458a8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   458ac:	00800134 	movhi	r2,4
   458b0:	109a1404 	addi	r2,r2,26704
   458b4:	e0bfff15 	stw	r2,-4(fp)
   458b8:	00000606 	br	458d4 <_do_dtors+0x38>
        (*dtor) (); 
   458bc:	e0bfff17 	ldw	r2,-4(fp)
   458c0:	10800017 	ldw	r2,0(r2)
   458c4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   458c8:	e0bfff17 	ldw	r2,-4(fp)
   458cc:	10bfff04 	addi	r2,r2,-4
   458d0:	e0bfff15 	stw	r2,-4(fp)
   458d4:	e0ffff17 	ldw	r3,-4(fp)
   458d8:	00800134 	movhi	r2,4
   458dc:	109a1504 	addi	r2,r2,26708
   458e0:	18bff62e 	bgeu	r3,r2,458bc <__alt_data_end+0xfffcfd5c>
        (*dtor) (); 
}
   458e4:	e037883a 	mov	sp,fp
   458e8:	dfc00117 	ldw	ra,4(sp)
   458ec:	df000017 	ldw	fp,0(sp)
   458f0:	dec00204 	addi	sp,sp,8
   458f4:	f800283a 	ret

000458f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   458f8:	deffff04 	addi	sp,sp,-4
   458fc:	df000015 	stw	fp,0(sp)
   45900:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   45904:	e037883a 	mov	sp,fp
   45908:	df000017 	ldw	fp,0(sp)
   4590c:	dec00104 	addi	sp,sp,4
   45910:	f800283a 	ret

00045914 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   45914:	defff904 	addi	sp,sp,-28
   45918:	dfc00615 	stw	ra,24(sp)
   4591c:	df000515 	stw	fp,20(sp)
   45920:	df000504 	addi	fp,sp,20
   45924:	e13ffc15 	stw	r4,-16(fp)
   45928:	e17ffd15 	stw	r5,-12(fp)
   4592c:	e1bffe15 	stw	r6,-8(fp)
   45930:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   45934:	e0800217 	ldw	r2,8(fp)
   45938:	d8800015 	stw	r2,0(sp)
   4593c:	e13ffc17 	ldw	r4,-16(fp)
   45940:	e17ffd17 	ldw	r5,-12(fp)
   45944:	e1bffe17 	ldw	r6,-8(fp)
   45948:	e1ffff17 	ldw	r7,-4(fp)
   4594c:	0045af40 	call	45af4 <alt_iic_isr_register>
}  
   45950:	e037883a 	mov	sp,fp
   45954:	dfc00117 	ldw	ra,4(sp)
   45958:	df000017 	ldw	fp,0(sp)
   4595c:	dec00204 	addi	sp,sp,8
   45960:	f800283a 	ret

00045964 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   45964:	defff904 	addi	sp,sp,-28
   45968:	df000615 	stw	fp,24(sp)
   4596c:	df000604 	addi	fp,sp,24
   45970:	e13ffe15 	stw	r4,-8(fp)
   45974:	e17fff15 	stw	r5,-4(fp)
   45978:	e0bfff17 	ldw	r2,-4(fp)
   4597c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45980:	0005303a 	rdctl	r2,status
   45984:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45988:	e0fffb17 	ldw	r3,-20(fp)
   4598c:	00bfff84 	movi	r2,-2
   45990:	1884703a 	and	r2,r3,r2
   45994:	1001703a 	wrctl	status,r2
  
  return context;
   45998:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4599c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   459a0:	e0bffa17 	ldw	r2,-24(fp)
   459a4:	00c00044 	movi	r3,1
   459a8:	1884983a 	sll	r2,r3,r2
   459ac:	1007883a 	mov	r3,r2
   459b0:	00800174 	movhi	r2,5
   459b4:	10a7c904 	addi	r2,r2,-24796
   459b8:	10800017 	ldw	r2,0(r2)
   459bc:	1886b03a 	or	r3,r3,r2
   459c0:	00800174 	movhi	r2,5
   459c4:	10a7c904 	addi	r2,r2,-24796
   459c8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   459cc:	00800174 	movhi	r2,5
   459d0:	10a7c904 	addi	r2,r2,-24796
   459d4:	10800017 	ldw	r2,0(r2)
   459d8:	100170fa 	wrctl	ienable,r2
   459dc:	e0bffc17 	ldw	r2,-16(fp)
   459e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   459e4:	e0bffd17 	ldw	r2,-12(fp)
   459e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   459ec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   459f0:	0001883a 	nop
}
   459f4:	e037883a 	mov	sp,fp
   459f8:	df000017 	ldw	fp,0(sp)
   459fc:	dec00104 	addi	sp,sp,4
   45a00:	f800283a 	ret

00045a04 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   45a04:	defff904 	addi	sp,sp,-28
   45a08:	df000615 	stw	fp,24(sp)
   45a0c:	df000604 	addi	fp,sp,24
   45a10:	e13ffe15 	stw	r4,-8(fp)
   45a14:	e17fff15 	stw	r5,-4(fp)
   45a18:	e0bfff17 	ldw	r2,-4(fp)
   45a1c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45a20:	0005303a 	rdctl	r2,status
   45a24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45a28:	e0fffb17 	ldw	r3,-20(fp)
   45a2c:	00bfff84 	movi	r2,-2
   45a30:	1884703a 	and	r2,r3,r2
   45a34:	1001703a 	wrctl	status,r2
  
  return context;
   45a38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45a3c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   45a40:	e0bffa17 	ldw	r2,-24(fp)
   45a44:	00c00044 	movi	r3,1
   45a48:	1884983a 	sll	r2,r3,r2
   45a4c:	0084303a 	nor	r2,zero,r2
   45a50:	1007883a 	mov	r3,r2
   45a54:	00800174 	movhi	r2,5
   45a58:	10a7c904 	addi	r2,r2,-24796
   45a5c:	10800017 	ldw	r2,0(r2)
   45a60:	1886703a 	and	r3,r3,r2
   45a64:	00800174 	movhi	r2,5
   45a68:	10a7c904 	addi	r2,r2,-24796
   45a6c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45a70:	00800174 	movhi	r2,5
   45a74:	10a7c904 	addi	r2,r2,-24796
   45a78:	10800017 	ldw	r2,0(r2)
   45a7c:	100170fa 	wrctl	ienable,r2
   45a80:	e0bffc17 	ldw	r2,-16(fp)
   45a84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45a88:	e0bffd17 	ldw	r2,-12(fp)
   45a8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45a90:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   45a94:	0001883a 	nop
}
   45a98:	e037883a 	mov	sp,fp
   45a9c:	df000017 	ldw	fp,0(sp)
   45aa0:	dec00104 	addi	sp,sp,4
   45aa4:	f800283a 	ret

00045aa8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   45aa8:	defffc04 	addi	sp,sp,-16
   45aac:	df000315 	stw	fp,12(sp)
   45ab0:	df000304 	addi	fp,sp,12
   45ab4:	e13ffe15 	stw	r4,-8(fp)
   45ab8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   45abc:	000530fa 	rdctl	r2,ienable
   45ac0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   45ac4:	e0bfff17 	ldw	r2,-4(fp)
   45ac8:	00c00044 	movi	r3,1
   45acc:	1884983a 	sll	r2,r3,r2
   45ad0:	1007883a 	mov	r3,r2
   45ad4:	e0bffd17 	ldw	r2,-12(fp)
   45ad8:	1884703a 	and	r2,r3,r2
   45adc:	1004c03a 	cmpne	r2,r2,zero
   45ae0:	10803fcc 	andi	r2,r2,255
}
   45ae4:	e037883a 	mov	sp,fp
   45ae8:	df000017 	ldw	fp,0(sp)
   45aec:	dec00104 	addi	sp,sp,4
   45af0:	f800283a 	ret

00045af4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   45af4:	defff504 	addi	sp,sp,-44
   45af8:	dfc00a15 	stw	ra,40(sp)
   45afc:	df000915 	stw	fp,36(sp)
   45b00:	df000904 	addi	fp,sp,36
   45b04:	e13ffc15 	stw	r4,-16(fp)
   45b08:	e17ffd15 	stw	r5,-12(fp)
   45b0c:	e1bffe15 	stw	r6,-8(fp)
   45b10:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   45b14:	00bffa84 	movi	r2,-22
   45b18:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   45b1c:	e0bffd17 	ldw	r2,-12(fp)
   45b20:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   45b24:	e0bff817 	ldw	r2,-32(fp)
   45b28:	10800808 	cmpgei	r2,r2,32
   45b2c:	1000271e 	bne	r2,zero,45bcc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45b30:	0005303a 	rdctl	r2,status
   45b34:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45b38:	e0fffa17 	ldw	r3,-24(fp)
   45b3c:	00bfff84 	movi	r2,-2
   45b40:	1884703a 	and	r2,r3,r2
   45b44:	1001703a 	wrctl	status,r2
  
  return context;
   45b48:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   45b4c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   45b50:	00800174 	movhi	r2,5
   45b54:	10a7d704 	addi	r2,r2,-24740
   45b58:	e0fff817 	ldw	r3,-32(fp)
   45b5c:	180690fa 	slli	r3,r3,3
   45b60:	10c5883a 	add	r2,r2,r3
   45b64:	e0fffe17 	ldw	r3,-8(fp)
   45b68:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   45b6c:	00800174 	movhi	r2,5
   45b70:	10a7d704 	addi	r2,r2,-24740
   45b74:	e0fff817 	ldw	r3,-32(fp)
   45b78:	180690fa 	slli	r3,r3,3
   45b7c:	10c5883a 	add	r2,r2,r3
   45b80:	10800104 	addi	r2,r2,4
   45b84:	e0ffff17 	ldw	r3,-4(fp)
   45b88:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   45b8c:	e0bffe17 	ldw	r2,-8(fp)
   45b90:	10000526 	beq	r2,zero,45ba8 <alt_iic_isr_register+0xb4>
   45b94:	e0bff817 	ldw	r2,-32(fp)
   45b98:	e13ffc17 	ldw	r4,-16(fp)
   45b9c:	100b883a 	mov	r5,r2
   45ba0:	00459640 	call	45964 <alt_ic_irq_enable>
   45ba4:	00000406 	br	45bb8 <alt_iic_isr_register+0xc4>
   45ba8:	e0bff817 	ldw	r2,-32(fp)
   45bac:	e13ffc17 	ldw	r4,-16(fp)
   45bb0:	100b883a 	mov	r5,r2
   45bb4:	0045a040 	call	45a04 <alt_ic_irq_disable>
   45bb8:	e0bff715 	stw	r2,-36(fp)
   45bbc:	e0bff917 	ldw	r2,-28(fp)
   45bc0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45bc4:	e0bffb17 	ldw	r2,-20(fp)
   45bc8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   45bcc:	e0bff717 	ldw	r2,-36(fp)
}
   45bd0:	e037883a 	mov	sp,fp
   45bd4:	dfc00117 	ldw	ra,4(sp)
   45bd8:	df000017 	ldw	fp,0(sp)
   45bdc:	dec00204 	addi	sp,sp,8
   45be0:	f800283a 	ret

00045be4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   45be4:	defff804 	addi	sp,sp,-32
   45be8:	dfc00715 	stw	ra,28(sp)
   45bec:	df000615 	stw	fp,24(sp)
   45bf0:	dc000515 	stw	r16,20(sp)
   45bf4:	df000604 	addi	fp,sp,24
   45bf8:	e13ffb15 	stw	r4,-20(fp)
   45bfc:	e17ffc15 	stw	r5,-16(fp)
   45c00:	e1bffd15 	stw	r6,-12(fp)
   45c04:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   45c08:	e13ffc17 	ldw	r4,-16(fp)
   45c0c:	e17ffd17 	ldw	r5,-12(fp)
   45c10:	e1bffe17 	ldw	r6,-8(fp)
   45c14:	0045e800 	call	45e80 <open>
   45c18:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   45c1c:	e0bffa17 	ldw	r2,-24(fp)
   45c20:	10002216 	blt	r2,zero,45cac <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   45c24:	04000134 	movhi	r16,4
   45c28:	841c3f04 	addi	r16,r16,28924
   45c2c:	e0bffa17 	ldw	r2,-24(fp)
   45c30:	1009883a 	mov	r4,r2
   45c34:	01400304 	movi	r5,12
   45c38:	00408840 	call	40884 <__mulsi3>
   45c3c:	8085883a 	add	r2,r16,r2
   45c40:	10c00017 	ldw	r3,0(r2)
   45c44:	e0bffb17 	ldw	r2,-20(fp)
   45c48:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   45c4c:	04000134 	movhi	r16,4
   45c50:	841c3f04 	addi	r16,r16,28924
   45c54:	e0bffa17 	ldw	r2,-24(fp)
   45c58:	1009883a 	mov	r4,r2
   45c5c:	01400304 	movi	r5,12
   45c60:	00408840 	call	40884 <__mulsi3>
   45c64:	8085883a 	add	r2,r16,r2
   45c68:	10800104 	addi	r2,r2,4
   45c6c:	10c00017 	ldw	r3,0(r2)
   45c70:	e0bffb17 	ldw	r2,-20(fp)
   45c74:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   45c78:	04000134 	movhi	r16,4
   45c7c:	841c3f04 	addi	r16,r16,28924
   45c80:	e0bffa17 	ldw	r2,-24(fp)
   45c84:	1009883a 	mov	r4,r2
   45c88:	01400304 	movi	r5,12
   45c8c:	00408840 	call	40884 <__mulsi3>
   45c90:	8085883a 	add	r2,r16,r2
   45c94:	10800204 	addi	r2,r2,8
   45c98:	10c00017 	ldw	r3,0(r2)
   45c9c:	e0bffb17 	ldw	r2,-20(fp)
   45ca0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   45ca4:	e13ffa17 	ldw	r4,-24(fp)
   45ca8:	0043cc80 	call	43cc8 <alt_release_fd>
  }
} 
   45cac:	e6ffff04 	addi	sp,fp,-4
   45cb0:	dfc00217 	ldw	ra,8(sp)
   45cb4:	df000117 	ldw	fp,4(sp)
   45cb8:	dc000017 	ldw	r16,0(sp)
   45cbc:	dec00304 	addi	sp,sp,12
   45cc0:	f800283a 	ret

00045cc4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   45cc4:	defffb04 	addi	sp,sp,-20
   45cc8:	dfc00415 	stw	ra,16(sp)
   45ccc:	df000315 	stw	fp,12(sp)
   45cd0:	df000304 	addi	fp,sp,12
   45cd4:	e13ffd15 	stw	r4,-12(fp)
   45cd8:	e17ffe15 	stw	r5,-8(fp)
   45cdc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   45ce0:	01000134 	movhi	r4,4
   45ce4:	211c4204 	addi	r4,r4,28936
   45ce8:	e17ffd17 	ldw	r5,-12(fp)
   45cec:	01800044 	movi	r6,1
   45cf0:	01c07fc4 	movi	r7,511
   45cf4:	0045be40 	call	45be4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   45cf8:	01000134 	movhi	r4,4
   45cfc:	211c3f04 	addi	r4,r4,28924
   45d00:	e17ffe17 	ldw	r5,-8(fp)
   45d04:	000d883a 	mov	r6,zero
   45d08:	01c07fc4 	movi	r7,511
   45d0c:	0045be40 	call	45be4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   45d10:	01000134 	movhi	r4,4
   45d14:	211c4504 	addi	r4,r4,28948
   45d18:	e17fff17 	ldw	r5,-4(fp)
   45d1c:	01800044 	movi	r6,1
   45d20:	01c07fc4 	movi	r7,511
   45d24:	0045be40 	call	45be4 <alt_open_fd>
}  
   45d28:	e037883a 	mov	sp,fp
   45d2c:	dfc00117 	ldw	ra,4(sp)
   45d30:	df000017 	ldw	fp,0(sp)
   45d34:	dec00204 	addi	sp,sp,8
   45d38:	f800283a 	ret

00045d3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45d3c:	defffe04 	addi	sp,sp,-8
   45d40:	dfc00115 	stw	ra,4(sp)
   45d44:	df000015 	stw	fp,0(sp)
   45d48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45d4c:	00800174 	movhi	r2,5
   45d50:	10a0f104 	addi	r2,r2,-31804
   45d54:	10800017 	ldw	r2,0(r2)
   45d58:	10000526 	beq	r2,zero,45d70 <alt_get_errno+0x34>
   45d5c:	00800174 	movhi	r2,5
   45d60:	10a0f104 	addi	r2,r2,-31804
   45d64:	10800017 	ldw	r2,0(r2)
   45d68:	103ee83a 	callr	r2
   45d6c:	00000206 	br	45d78 <alt_get_errno+0x3c>
   45d70:	00800174 	movhi	r2,5
   45d74:	10a7c504 	addi	r2,r2,-24812
}
   45d78:	e037883a 	mov	sp,fp
   45d7c:	dfc00117 	ldw	ra,4(sp)
   45d80:	df000017 	ldw	fp,0(sp)
   45d84:	dec00204 	addi	sp,sp,8
   45d88:	f800283a 	ret

00045d8c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   45d8c:	defffb04 	addi	sp,sp,-20
   45d90:	dfc00415 	stw	ra,16(sp)
   45d94:	df000315 	stw	fp,12(sp)
   45d98:	dc000215 	stw	r16,8(sp)
   45d9c:	df000304 	addi	fp,sp,12
   45da0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   45da4:	e0bffe17 	ldw	r2,-8(fp)
   45da8:	10800217 	ldw	r2,8(r2)
   45dac:	10d00034 	orhi	r3,r2,16384
   45db0:	e0bffe17 	ldw	r2,-8(fp)
   45db4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45db8:	e03ffd15 	stw	zero,-12(fp)
   45dbc:	00002306 	br	45e4c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45dc0:	04000134 	movhi	r16,4
   45dc4:	841c3f04 	addi	r16,r16,28924
   45dc8:	e0bffd17 	ldw	r2,-12(fp)
   45dcc:	1009883a 	mov	r4,r2
   45dd0:	01400304 	movi	r5,12
   45dd4:	00408840 	call	40884 <__mulsi3>
   45dd8:	8085883a 	add	r2,r16,r2
   45ddc:	10c00017 	ldw	r3,0(r2)
   45de0:	e0bffe17 	ldw	r2,-8(fp)
   45de4:	10800017 	ldw	r2,0(r2)
   45de8:	1880151e 	bne	r3,r2,45e40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45dec:	04000134 	movhi	r16,4
   45df0:	841c3f04 	addi	r16,r16,28924
   45df4:	e0bffd17 	ldw	r2,-12(fp)
   45df8:	1009883a 	mov	r4,r2
   45dfc:	01400304 	movi	r5,12
   45e00:	00408840 	call	40884 <__mulsi3>
   45e04:	8085883a 	add	r2,r16,r2
   45e08:	10800204 	addi	r2,r2,8
   45e0c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45e10:	10000b0e 	bge	r2,zero,45e40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   45e14:	e13ffd17 	ldw	r4,-12(fp)
   45e18:	01400304 	movi	r5,12
   45e1c:	00408840 	call	40884 <__mulsi3>
   45e20:	1007883a 	mov	r3,r2
   45e24:	00800134 	movhi	r2,4
   45e28:	109c3f04 	addi	r2,r2,28924
   45e2c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45e30:	e0bffe17 	ldw	r2,-8(fp)
   45e34:	18800226 	beq	r3,r2,45e40 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   45e38:	00bffcc4 	movi	r2,-13
   45e3c:	00000a06 	br	45e68 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45e40:	e0bffd17 	ldw	r2,-12(fp)
   45e44:	10800044 	addi	r2,r2,1
   45e48:	e0bffd15 	stw	r2,-12(fp)
   45e4c:	00800174 	movhi	r2,5
   45e50:	10a0f004 	addi	r2,r2,-31808
   45e54:	10800017 	ldw	r2,0(r2)
   45e58:	1007883a 	mov	r3,r2
   45e5c:	e0bffd17 	ldw	r2,-12(fp)
   45e60:	18bfd72e 	bgeu	r3,r2,45dc0 <__alt_data_end+0xfffd0260>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   45e64:	0005883a 	mov	r2,zero
}
   45e68:	e6ffff04 	addi	sp,fp,-4
   45e6c:	dfc00217 	ldw	ra,8(sp)
   45e70:	df000117 	ldw	fp,4(sp)
   45e74:	dc000017 	ldw	r16,0(sp)
   45e78:	dec00304 	addi	sp,sp,12
   45e7c:	f800283a 	ret

00045e80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   45e80:	defff604 	addi	sp,sp,-40
   45e84:	dfc00915 	stw	ra,36(sp)
   45e88:	df000815 	stw	fp,32(sp)
   45e8c:	df000804 	addi	fp,sp,32
   45e90:	e13ffd15 	stw	r4,-12(fp)
   45e94:	e17ffe15 	stw	r5,-8(fp)
   45e98:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   45e9c:	00bfffc4 	movi	r2,-1
   45ea0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   45ea4:	00bffb44 	movi	r2,-19
   45ea8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   45eac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   45eb0:	e13ffd17 	ldw	r4,-12(fp)
   45eb4:	01400174 	movhi	r5,5
   45eb8:	2960ee04 	addi	r5,r5,-31816
   45ebc:	004619c0 	call	4619c <alt_find_dev>
   45ec0:	e0bff815 	stw	r2,-32(fp)
   45ec4:	e0bff817 	ldw	r2,-32(fp)
   45ec8:	1000051e 	bne	r2,zero,45ee0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   45ecc:	e13ffd17 	ldw	r4,-12(fp)
   45ed0:	004622c0 	call	4622c <alt_find_file>
   45ed4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   45ed8:	00800044 	movi	r2,1
   45edc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   45ee0:	e0bff817 	ldw	r2,-32(fp)
   45ee4:	10002b26 	beq	r2,zero,45f94 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   45ee8:	e13ff817 	ldw	r4,-32(fp)
   45eec:	00463400 	call	46340 <alt_get_fd>
   45ef0:	e0bff915 	stw	r2,-28(fp)
   45ef4:	e0bff917 	ldw	r2,-28(fp)
   45ef8:	1000030e 	bge	r2,zero,45f08 <open+0x88>
    {
      status = index;
   45efc:	e0bff917 	ldw	r2,-28(fp)
   45f00:	e0bffa15 	stw	r2,-24(fp)
   45f04:	00002506 	br	45f9c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   45f08:	e13ff917 	ldw	r4,-28(fp)
   45f0c:	01400304 	movi	r5,12
   45f10:	00408840 	call	40884 <__mulsi3>
   45f14:	1007883a 	mov	r3,r2
   45f18:	00800134 	movhi	r2,4
   45f1c:	109c3f04 	addi	r2,r2,28924
   45f20:	1885883a 	add	r2,r3,r2
   45f24:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   45f28:	e0fffe17 	ldw	r3,-8(fp)
   45f2c:	00900034 	movhi	r2,16384
   45f30:	10bfffc4 	addi	r2,r2,-1
   45f34:	1886703a 	and	r3,r3,r2
   45f38:	e0bffc17 	ldw	r2,-16(fp)
   45f3c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   45f40:	e0bffb17 	ldw	r2,-20(fp)
   45f44:	1000051e 	bne	r2,zero,45f5c <open+0xdc>
   45f48:	e13ffc17 	ldw	r4,-16(fp)
   45f4c:	0045d8c0 	call	45d8c <alt_file_locked>
   45f50:	e0bffa15 	stw	r2,-24(fp)
   45f54:	e0bffa17 	ldw	r2,-24(fp)
   45f58:	10001016 	blt	r2,zero,45f9c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   45f5c:	e0bff817 	ldw	r2,-32(fp)
   45f60:	10800317 	ldw	r2,12(r2)
   45f64:	10000826 	beq	r2,zero,45f88 <open+0x108>
   45f68:	e0bff817 	ldw	r2,-32(fp)
   45f6c:	10800317 	ldw	r2,12(r2)
   45f70:	e13ffc17 	ldw	r4,-16(fp)
   45f74:	e17ffd17 	ldw	r5,-12(fp)
   45f78:	e1bffe17 	ldw	r6,-8(fp)
   45f7c:	e1ffff17 	ldw	r7,-4(fp)
   45f80:	103ee83a 	callr	r2
   45f84:	00000106 	br	45f8c <open+0x10c>
   45f88:	0005883a 	mov	r2,zero
   45f8c:	e0bffa15 	stw	r2,-24(fp)
   45f90:	00000206 	br	45f9c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   45f94:	00bffb44 	movi	r2,-19
   45f98:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   45f9c:	e0bffa17 	ldw	r2,-24(fp)
   45fa0:	1000090e 	bge	r2,zero,45fc8 <open+0x148>
  {
    alt_release_fd (index);  
   45fa4:	e13ff917 	ldw	r4,-28(fp)
   45fa8:	0043cc80 	call	43cc8 <alt_release_fd>
    ALT_ERRNO = -status;
   45fac:	0045d3c0 	call	45d3c <alt_get_errno>
   45fb0:	1007883a 	mov	r3,r2
   45fb4:	e0bffa17 	ldw	r2,-24(fp)
   45fb8:	0085c83a 	sub	r2,zero,r2
   45fbc:	18800015 	stw	r2,0(r3)
    return -1;
   45fc0:	00bfffc4 	movi	r2,-1
   45fc4:	00000106 	br	45fcc <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   45fc8:	e0bff917 	ldw	r2,-28(fp)
}
   45fcc:	e037883a 	mov	sp,fp
   45fd0:	dfc00117 	ldw	ra,4(sp)
   45fd4:	df000017 	ldw	fp,0(sp)
   45fd8:	dec00204 	addi	sp,sp,8
   45fdc:	f800283a 	ret

00045fe0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   45fe0:	defffa04 	addi	sp,sp,-24
   45fe4:	df000515 	stw	fp,20(sp)
   45fe8:	df000504 	addi	fp,sp,20
   45fec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45ff0:	0005303a 	rdctl	r2,status
   45ff4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45ff8:	e0fffc17 	ldw	r3,-16(fp)
   45ffc:	00bfff84 	movi	r2,-2
   46000:	1884703a 	and	r2,r3,r2
   46004:	1001703a 	wrctl	status,r2
  
  return context;
   46008:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4600c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   46010:	e0bfff17 	ldw	r2,-4(fp)
   46014:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   46018:	e0bffd17 	ldw	r2,-12(fp)
   4601c:	10800017 	ldw	r2,0(r2)
   46020:	e0fffd17 	ldw	r3,-12(fp)
   46024:	18c00117 	ldw	r3,4(r3)
   46028:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4602c:	e0bffd17 	ldw	r2,-12(fp)
   46030:	10800117 	ldw	r2,4(r2)
   46034:	e0fffd17 	ldw	r3,-12(fp)
   46038:	18c00017 	ldw	r3,0(r3)
   4603c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   46040:	e0bffd17 	ldw	r2,-12(fp)
   46044:	e0fffd17 	ldw	r3,-12(fp)
   46048:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4604c:	e0bffd17 	ldw	r2,-12(fp)
   46050:	e0fffd17 	ldw	r3,-12(fp)
   46054:	10c00015 	stw	r3,0(r2)
   46058:	e0bffb17 	ldw	r2,-20(fp)
   4605c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   46060:	e0bffe17 	ldw	r2,-8(fp)
   46064:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   46068:	e037883a 	mov	sp,fp
   4606c:	df000017 	ldw	fp,0(sp)
   46070:	dec00104 	addi	sp,sp,4
   46074:	f800283a 	ret

00046078 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   46078:	defffb04 	addi	sp,sp,-20
   4607c:	dfc00415 	stw	ra,16(sp)
   46080:	df000315 	stw	fp,12(sp)
   46084:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   46088:	d0a00c17 	ldw	r2,-32720(gp)
   4608c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   46090:	d0a6e317 	ldw	r2,-25716(gp)
   46094:	10800044 	addi	r2,r2,1
   46098:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4609c:	00002e06 	br	46158 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   460a0:	e0bffd17 	ldw	r2,-12(fp)
   460a4:	10800017 	ldw	r2,0(r2)
   460a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   460ac:	e0bffd17 	ldw	r2,-12(fp)
   460b0:	10800403 	ldbu	r2,16(r2)
   460b4:	10803fcc 	andi	r2,r2,255
   460b8:	10000426 	beq	r2,zero,460cc <alt_tick+0x54>
   460bc:	d0a6e317 	ldw	r2,-25716(gp)
   460c0:	1000021e 	bne	r2,zero,460cc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   460c4:	e0bffd17 	ldw	r2,-12(fp)
   460c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   460cc:	e0bffd17 	ldw	r2,-12(fp)
   460d0:	10800217 	ldw	r2,8(r2)
   460d4:	d0e6e317 	ldw	r3,-25716(gp)
   460d8:	18801d36 	bltu	r3,r2,46150 <alt_tick+0xd8>
   460dc:	e0bffd17 	ldw	r2,-12(fp)
   460e0:	10800403 	ldbu	r2,16(r2)
   460e4:	10803fcc 	andi	r2,r2,255
   460e8:	1000191e 	bne	r2,zero,46150 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   460ec:	e0bffd17 	ldw	r2,-12(fp)
   460f0:	10800317 	ldw	r2,12(r2)
   460f4:	e0fffd17 	ldw	r3,-12(fp)
   460f8:	18c00517 	ldw	r3,20(r3)
   460fc:	1809883a 	mov	r4,r3
   46100:	103ee83a 	callr	r2
   46104:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   46108:	e0bfff17 	ldw	r2,-4(fp)
   4610c:	1000031e 	bne	r2,zero,4611c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   46110:	e13ffd17 	ldw	r4,-12(fp)
   46114:	0045fe00 	call	45fe0 <alt_alarm_stop>
   46118:	00000d06 	br	46150 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4611c:	e0bffd17 	ldw	r2,-12(fp)
   46120:	10c00217 	ldw	r3,8(r2)
   46124:	e0bfff17 	ldw	r2,-4(fp)
   46128:	1887883a 	add	r3,r3,r2
   4612c:	e0bffd17 	ldw	r2,-12(fp)
   46130:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   46134:	e0bffd17 	ldw	r2,-12(fp)
   46138:	10c00217 	ldw	r3,8(r2)
   4613c:	d0a6e317 	ldw	r2,-25716(gp)
   46140:	1880032e 	bgeu	r3,r2,46150 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   46144:	e0bffd17 	ldw	r2,-12(fp)
   46148:	00c00044 	movi	r3,1
   4614c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   46150:	e0bffe17 	ldw	r2,-8(fp)
   46154:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   46158:	e0fffd17 	ldw	r3,-12(fp)
   4615c:	d0a00c04 	addi	r2,gp,-32720
   46160:	18bfcf1e 	bne	r3,r2,460a0 <__alt_data_end+0xfffd0540>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   46164:	0001883a 	nop
}
   46168:	e037883a 	mov	sp,fp
   4616c:	dfc00117 	ldw	ra,4(sp)
   46170:	df000017 	ldw	fp,0(sp)
   46174:	dec00204 	addi	sp,sp,8
   46178:	f800283a 	ret

0004617c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4617c:	deffff04 	addi	sp,sp,-4
   46180:	df000015 	stw	fp,0(sp)
   46184:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   46188:	000170fa 	wrctl	ienable,zero
}
   4618c:	e037883a 	mov	sp,fp
   46190:	df000017 	ldw	fp,0(sp)
   46194:	dec00104 	addi	sp,sp,4
   46198:	f800283a 	ret

0004619c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4619c:	defffa04 	addi	sp,sp,-24
   461a0:	dfc00515 	stw	ra,20(sp)
   461a4:	df000415 	stw	fp,16(sp)
   461a8:	df000404 	addi	fp,sp,16
   461ac:	e13ffe15 	stw	r4,-8(fp)
   461b0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   461b4:	e0bfff17 	ldw	r2,-4(fp)
   461b8:	10800017 	ldw	r2,0(r2)
   461bc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   461c0:	e13ffe17 	ldw	r4,-8(fp)
   461c4:	00409f40 	call	409f4 <strlen>
   461c8:	10800044 	addi	r2,r2,1
   461cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   461d0:	00000d06 	br	46208 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   461d4:	e0bffc17 	ldw	r2,-16(fp)
   461d8:	10c00217 	ldw	r3,8(r2)
   461dc:	e0bffd17 	ldw	r2,-12(fp)
   461e0:	1809883a 	mov	r4,r3
   461e4:	e17ffe17 	ldw	r5,-8(fp)
   461e8:	100d883a 	mov	r6,r2
   461ec:	00464fc0 	call	464fc <memcmp>
   461f0:	1000021e 	bne	r2,zero,461fc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   461f4:	e0bffc17 	ldw	r2,-16(fp)
   461f8:	00000706 	br	46218 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   461fc:	e0bffc17 	ldw	r2,-16(fp)
   46200:	10800017 	ldw	r2,0(r2)
   46204:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   46208:	e0fffc17 	ldw	r3,-16(fp)
   4620c:	e0bfff17 	ldw	r2,-4(fp)
   46210:	18bff01e 	bne	r3,r2,461d4 <__alt_data_end+0xfffd0674>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   46214:	0005883a 	mov	r2,zero
}
   46218:	e037883a 	mov	sp,fp
   4621c:	dfc00117 	ldw	ra,4(sp)
   46220:	df000017 	ldw	fp,0(sp)
   46224:	dec00204 	addi	sp,sp,8
   46228:	f800283a 	ret

0004622c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4622c:	defffb04 	addi	sp,sp,-20
   46230:	dfc00415 	stw	ra,16(sp)
   46234:	df000315 	stw	fp,12(sp)
   46238:	df000304 	addi	fp,sp,12
   4623c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   46240:	00800174 	movhi	r2,5
   46244:	10a0ec04 	addi	r2,r2,-31824
   46248:	10800017 	ldw	r2,0(r2)
   4624c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   46250:	00003106 	br	46318 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   46254:	e0bffd17 	ldw	r2,-12(fp)
   46258:	10800217 	ldw	r2,8(r2)
   4625c:	1009883a 	mov	r4,r2
   46260:	00409f40 	call	409f4 <strlen>
   46264:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   46268:	e0bffd17 	ldw	r2,-12(fp)
   4626c:	10c00217 	ldw	r3,8(r2)
   46270:	e0bffe17 	ldw	r2,-8(fp)
   46274:	10bfffc4 	addi	r2,r2,-1
   46278:	1885883a 	add	r2,r3,r2
   4627c:	10800003 	ldbu	r2,0(r2)
   46280:	10803fcc 	andi	r2,r2,255
   46284:	1080201c 	xori	r2,r2,128
   46288:	10bfe004 	addi	r2,r2,-128
   4628c:	10800bd8 	cmpnei	r2,r2,47
   46290:	1000031e 	bne	r2,zero,462a0 <alt_find_file+0x74>
    {
      len -= 1;
   46294:	e0bffe17 	ldw	r2,-8(fp)
   46298:	10bfffc4 	addi	r2,r2,-1
   4629c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   462a0:	e0bffe17 	ldw	r2,-8(fp)
   462a4:	e0ffff17 	ldw	r3,-4(fp)
   462a8:	1885883a 	add	r2,r3,r2
   462ac:	10800003 	ldbu	r2,0(r2)
   462b0:	10803fcc 	andi	r2,r2,255
   462b4:	1080201c 	xori	r2,r2,128
   462b8:	10bfe004 	addi	r2,r2,-128
   462bc:	10800be0 	cmpeqi	r2,r2,47
   462c0:	1000081e 	bne	r2,zero,462e4 <alt_find_file+0xb8>
   462c4:	e0bffe17 	ldw	r2,-8(fp)
   462c8:	e0ffff17 	ldw	r3,-4(fp)
   462cc:	1885883a 	add	r2,r3,r2
   462d0:	10800003 	ldbu	r2,0(r2)
   462d4:	10803fcc 	andi	r2,r2,255
   462d8:	1080201c 	xori	r2,r2,128
   462dc:	10bfe004 	addi	r2,r2,-128
   462e0:	10000a1e 	bne	r2,zero,4630c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   462e4:	e0bffd17 	ldw	r2,-12(fp)
   462e8:	10c00217 	ldw	r3,8(r2)
   462ec:	e0bffe17 	ldw	r2,-8(fp)
   462f0:	1809883a 	mov	r4,r3
   462f4:	e17fff17 	ldw	r5,-4(fp)
   462f8:	100d883a 	mov	r6,r2
   462fc:	00464fc0 	call	464fc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   46300:	1000021e 	bne	r2,zero,4630c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   46304:	e0bffd17 	ldw	r2,-12(fp)
   46308:	00000806 	br	4632c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   4630c:	e0bffd17 	ldw	r2,-12(fp)
   46310:	10800017 	ldw	r2,0(r2)
   46314:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   46318:	e0fffd17 	ldw	r3,-12(fp)
   4631c:	00800174 	movhi	r2,5
   46320:	10a0ec04 	addi	r2,r2,-31824
   46324:	18bfcb1e 	bne	r3,r2,46254 <__alt_data_end+0xfffd06f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   46328:	0005883a 	mov	r2,zero
}
   4632c:	e037883a 	mov	sp,fp
   46330:	dfc00117 	ldw	ra,4(sp)
   46334:	df000017 	ldw	fp,0(sp)
   46338:	dec00204 	addi	sp,sp,8
   4633c:	f800283a 	ret

00046340 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   46340:	defffa04 	addi	sp,sp,-24
   46344:	dfc00515 	stw	ra,20(sp)
   46348:	df000415 	stw	fp,16(sp)
   4634c:	dc000315 	stw	r16,12(sp)
   46350:	df000404 	addi	fp,sp,16
   46354:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   46358:	00bffa04 	movi	r2,-24
   4635c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   46360:	e03ffc15 	stw	zero,-16(fp)
   46364:	00002106 	br	463ec <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   46368:	04000134 	movhi	r16,4
   4636c:	841c3f04 	addi	r16,r16,28924
   46370:	e0bffc17 	ldw	r2,-16(fp)
   46374:	1009883a 	mov	r4,r2
   46378:	01400304 	movi	r5,12
   4637c:	00408840 	call	40884 <__mulsi3>
   46380:	8085883a 	add	r2,r16,r2
   46384:	10800017 	ldw	r2,0(r2)
   46388:	1000151e 	bne	r2,zero,463e0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   4638c:	04000134 	movhi	r16,4
   46390:	841c3f04 	addi	r16,r16,28924
   46394:	e0bffc17 	ldw	r2,-16(fp)
   46398:	1009883a 	mov	r4,r2
   4639c:	01400304 	movi	r5,12
   463a0:	00408840 	call	40884 <__mulsi3>
   463a4:	8085883a 	add	r2,r16,r2
   463a8:	e0fffe17 	ldw	r3,-8(fp)
   463ac:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   463b0:	00800174 	movhi	r2,5
   463b4:	10a0f004 	addi	r2,r2,-31808
   463b8:	10c00017 	ldw	r3,0(r2)
   463bc:	e0bffc17 	ldw	r2,-16(fp)
   463c0:	1880040e 	bge	r3,r2,463d4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   463c4:	00800174 	movhi	r2,5
   463c8:	10a0f004 	addi	r2,r2,-31808
   463cc:	e0fffc17 	ldw	r3,-16(fp)
   463d0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   463d4:	e0bffc17 	ldw	r2,-16(fp)
   463d8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   463dc:	00000606 	br	463f8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   463e0:	e0bffc17 	ldw	r2,-16(fp)
   463e4:	10800044 	addi	r2,r2,1
   463e8:	e0bffc15 	stw	r2,-16(fp)
   463ec:	e0bffc17 	ldw	r2,-16(fp)
   463f0:	10800810 	cmplti	r2,r2,32
   463f4:	103fdc1e 	bne	r2,zero,46368 <__alt_data_end+0xfffd0808>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   463f8:	e0bffd17 	ldw	r2,-12(fp)
}
   463fc:	e6ffff04 	addi	sp,fp,-4
   46400:	dfc00217 	ldw	ra,8(sp)
   46404:	df000117 	ldw	fp,4(sp)
   46408:	dc000017 	ldw	r16,0(sp)
   4640c:	dec00304 	addi	sp,sp,12
   46410:	f800283a 	ret

00046414 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   46414:	defffe04 	addi	sp,sp,-8
   46418:	df000115 	stw	fp,4(sp)
   4641c:	df000104 	addi	fp,sp,4
   46420:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   46424:	e0bfff17 	ldw	r2,-4(fp)
   46428:	10bffe84 	addi	r2,r2,-6
   4642c:	10c00428 	cmpgeui	r3,r2,16
   46430:	18001a1e 	bne	r3,zero,4649c <alt_exception_cause_generated_bad_addr+0x88>
   46434:	100690ba 	slli	r3,r2,2
   46438:	00800134 	movhi	r2,4
   4643c:	10991304 	addi	r2,r2,25676
   46440:	1885883a 	add	r2,r3,r2
   46444:	10800017 	ldw	r2,0(r2)
   46448:	1000683a 	jmp	r2
   4644c:	0004648c 	andi	zero,zero,4498
   46450:	0004648c 	andi	zero,zero,4498
   46454:	0004649c 	xori	zero,zero,4498
   46458:	0004649c 	xori	zero,zero,4498
   4645c:	0004649c 	xori	zero,zero,4498
   46460:	0004648c 	andi	zero,zero,4498
   46464:	00046494 	movui	zero,4498
   46468:	0004649c 	xori	zero,zero,4498
   4646c:	0004648c 	andi	zero,zero,4498
   46470:	0004648c 	andi	zero,zero,4498
   46474:	0004649c 	xori	zero,zero,4498
   46478:	0004648c 	andi	zero,zero,4498
   4647c:	00046494 	movui	zero,4498
   46480:	0004649c 	xori	zero,zero,4498
   46484:	0004649c 	xori	zero,zero,4498
   46488:	0004648c 	andi	zero,zero,4498
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   4648c:	00800044 	movi	r2,1
   46490:	00000306 	br	464a0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   46494:	0005883a 	mov	r2,zero
   46498:	00000106 	br	464a0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   4649c:	0005883a 	mov	r2,zero
  }
}
   464a0:	e037883a 	mov	sp,fp
   464a4:	df000017 	ldw	fp,0(sp)
   464a8:	dec00104 	addi	sp,sp,4
   464ac:	f800283a 	ret

000464b0 <atexit>:
   464b0:	200b883a 	mov	r5,r4
   464b4:	000d883a 	mov	r6,zero
   464b8:	0009883a 	mov	r4,zero
   464bc:	000f883a 	mov	r7,zero
   464c0:	00465781 	jmpi	46578 <__register_exitproc>

000464c4 <exit>:
   464c4:	defffe04 	addi	sp,sp,-8
   464c8:	000b883a 	mov	r5,zero
   464cc:	dc000015 	stw	r16,0(sp)
   464d0:	dfc00115 	stw	ra,4(sp)
   464d4:	2021883a 	mov	r16,r4
   464d8:	004668c0 	call	4668c <__call_exitprocs>
   464dc:	00800174 	movhi	r2,5
   464e0:	10a0e804 	addi	r2,r2,-31840
   464e4:	11000017 	ldw	r4,0(r2)
   464e8:	20800f17 	ldw	r2,60(r4)
   464ec:	10000126 	beq	r2,zero,464f4 <exit+0x30>
   464f0:	103ee83a 	callr	r2
   464f4:	8009883a 	mov	r4,r16
   464f8:	00468200 	call	46820 <_exit>

000464fc <memcmp>:
   464fc:	01c000c4 	movi	r7,3
   46500:	3980192e 	bgeu	r7,r6,46568 <memcmp+0x6c>
   46504:	2144b03a 	or	r2,r4,r5
   46508:	11c4703a 	and	r2,r2,r7
   4650c:	10000f26 	beq	r2,zero,4654c <memcmp+0x50>
   46510:	20800003 	ldbu	r2,0(r4)
   46514:	28c00003 	ldbu	r3,0(r5)
   46518:	10c0151e 	bne	r2,r3,46570 <memcmp+0x74>
   4651c:	31bfff84 	addi	r6,r6,-2
   46520:	01ffffc4 	movi	r7,-1
   46524:	00000406 	br	46538 <memcmp+0x3c>
   46528:	20800003 	ldbu	r2,0(r4)
   4652c:	28c00003 	ldbu	r3,0(r5)
   46530:	31bfffc4 	addi	r6,r6,-1
   46534:	10c00e1e 	bne	r2,r3,46570 <memcmp+0x74>
   46538:	21000044 	addi	r4,r4,1
   4653c:	29400044 	addi	r5,r5,1
   46540:	31fff91e 	bne	r6,r7,46528 <__alt_data_end+0xfffd09c8>
   46544:	0005883a 	mov	r2,zero
   46548:	f800283a 	ret
   4654c:	20c00017 	ldw	r3,0(r4)
   46550:	28800017 	ldw	r2,0(r5)
   46554:	1880041e 	bne	r3,r2,46568 <memcmp+0x6c>
   46558:	31bfff04 	addi	r6,r6,-4
   4655c:	21000104 	addi	r4,r4,4
   46560:	29400104 	addi	r5,r5,4
   46564:	39bff936 	bltu	r7,r6,4654c <__alt_data_end+0xfffd09ec>
   46568:	303fe91e 	bne	r6,zero,46510 <__alt_data_end+0xfffd09b0>
   4656c:	003ff506 	br	46544 <__alt_data_end+0xfffd09e4>
   46570:	10c5c83a 	sub	r2,r2,r3
   46574:	f800283a 	ret

00046578 <__register_exitproc>:
   46578:	00800174 	movhi	r2,5
   4657c:	defffa04 	addi	sp,sp,-24
   46580:	10a0e804 	addi	r2,r2,-31840
   46584:	dc000315 	stw	r16,12(sp)
   46588:	14000017 	ldw	r16,0(r2)
   4658c:	dc400415 	stw	r17,16(sp)
   46590:	dfc00515 	stw	ra,20(sp)
   46594:	80805217 	ldw	r2,328(r16)
   46598:	2023883a 	mov	r17,r4
   4659c:	10003626 	beq	r2,zero,46678 <__register_exitproc+0x100>
   465a0:	10c00117 	ldw	r3,4(r2)
   465a4:	010007c4 	movi	r4,31
   465a8:	20c00e16 	blt	r4,r3,465e4 <__register_exitproc+0x6c>
   465ac:	1a400044 	addi	r9,r3,1
   465b0:	8800211e 	bne	r17,zero,46638 <__register_exitproc+0xc0>
   465b4:	18c00084 	addi	r3,r3,2
   465b8:	18c7883a 	add	r3,r3,r3
   465bc:	18c7883a 	add	r3,r3,r3
   465c0:	12400115 	stw	r9,4(r2)
   465c4:	10c7883a 	add	r3,r2,r3
   465c8:	19400015 	stw	r5,0(r3)
   465cc:	0005883a 	mov	r2,zero
   465d0:	dfc00517 	ldw	ra,20(sp)
   465d4:	dc400417 	ldw	r17,16(sp)
   465d8:	dc000317 	ldw	r16,12(sp)
   465dc:	dec00604 	addi	sp,sp,24
   465e0:	f800283a 	ret
   465e4:	00800034 	movhi	r2,0
   465e8:	10800004 	addi	r2,r2,0
   465ec:	10002526 	beq	r2,zero,46684 <__register_exitproc+0x10c>
   465f0:	01006404 	movi	r4,400
   465f4:	d9400015 	stw	r5,0(sp)
   465f8:	d9800115 	stw	r6,4(sp)
   465fc:	d9c00215 	stw	r7,8(sp)
   46600:	00000000 	call	0 <__reset-0x40000>
   46604:	d9400017 	ldw	r5,0(sp)
   46608:	d9800117 	ldw	r6,4(sp)
   4660c:	d9c00217 	ldw	r7,8(sp)
   46610:	10001c26 	beq	r2,zero,46684 <__register_exitproc+0x10c>
   46614:	80c05217 	ldw	r3,328(r16)
   46618:	10000115 	stw	zero,4(r2)
   4661c:	02400044 	movi	r9,1
   46620:	10c00015 	stw	r3,0(r2)
   46624:	80805215 	stw	r2,328(r16)
   46628:	10006215 	stw	zero,392(r2)
   4662c:	10006315 	stw	zero,396(r2)
   46630:	0007883a 	mov	r3,zero
   46634:	883fdf26 	beq	r17,zero,465b4 <__alt_data_end+0xfffd0a54>
   46638:	18d1883a 	add	r8,r3,r3
   4663c:	4211883a 	add	r8,r8,r8
   46640:	1211883a 	add	r8,r2,r8
   46644:	41802215 	stw	r6,136(r8)
   46648:	01000044 	movi	r4,1
   4664c:	11806217 	ldw	r6,392(r2)
   46650:	20c8983a 	sll	r4,r4,r3
   46654:	310cb03a 	or	r6,r6,r4
   46658:	11806215 	stw	r6,392(r2)
   4665c:	41c04215 	stw	r7,264(r8)
   46660:	01800084 	movi	r6,2
   46664:	89bfd31e 	bne	r17,r6,465b4 <__alt_data_end+0xfffd0a54>
   46668:	11806317 	ldw	r6,396(r2)
   4666c:	3108b03a 	or	r4,r6,r4
   46670:	11006315 	stw	r4,396(r2)
   46674:	003fcf06 	br	465b4 <__alt_data_end+0xfffd0a54>
   46678:	80805304 	addi	r2,r16,332
   4667c:	80805215 	stw	r2,328(r16)
   46680:	003fc706 	br	465a0 <__alt_data_end+0xfffd0a40>
   46684:	00bfffc4 	movi	r2,-1
   46688:	003fd106 	br	465d0 <__alt_data_end+0xfffd0a70>

0004668c <__call_exitprocs>:
   4668c:	00800174 	movhi	r2,5
   46690:	10a0e804 	addi	r2,r2,-31840
   46694:	10800017 	ldw	r2,0(r2)
   46698:	defff404 	addi	sp,sp,-48
   4669c:	dd800815 	stw	r22,32(sp)
   466a0:	d8800015 	stw	r2,0(sp)
   466a4:	10805204 	addi	r2,r2,328
   466a8:	dd000615 	stw	r20,24(sp)
   466ac:	dc800415 	stw	r18,16(sp)
   466b0:	dfc00b15 	stw	ra,44(sp)
   466b4:	df000a15 	stw	fp,40(sp)
   466b8:	ddc00915 	stw	r23,36(sp)
   466bc:	dd400715 	stw	r21,28(sp)
   466c0:	dcc00515 	stw	r19,20(sp)
   466c4:	dc400315 	stw	r17,12(sp)
   466c8:	dc000215 	stw	r16,8(sp)
   466cc:	2025883a 	mov	r18,r4
   466d0:	2829883a 	mov	r20,r5
   466d4:	d8800115 	stw	r2,4(sp)
   466d8:	05bfffc4 	movi	r22,-1
   466dc:	d8800017 	ldw	r2,0(sp)
   466e0:	14c05217 	ldw	r19,328(r2)
   466e4:	98001d26 	beq	r19,zero,4675c <__call_exitprocs+0xd0>
   466e8:	dd400117 	ldw	r21,4(sp)
   466ec:	98800117 	ldw	r2,4(r19)
   466f0:	173fffc4 	addi	fp,r2,-1
   466f4:	e0000d16 	blt	fp,zero,4672c <__call_exitprocs+0xa0>
   466f8:	14000044 	addi	r16,r2,1
   466fc:	8421883a 	add	r16,r16,r16
   46700:	8421883a 	add	r16,r16,r16
   46704:	84402004 	addi	r17,r16,128
   46708:	9c63883a 	add	r17,r19,r17
   4670c:	9c21883a 	add	r16,r19,r16
   46710:	a0001e26 	beq	r20,zero,4678c <__call_exitprocs+0x100>
   46714:	80804017 	ldw	r2,256(r16)
   46718:	15001c26 	beq	r2,r20,4678c <__call_exitprocs+0x100>
   4671c:	e73fffc4 	addi	fp,fp,-1
   46720:	843fff04 	addi	r16,r16,-4
   46724:	8c7fff04 	addi	r17,r17,-4
   46728:	e5bff91e 	bne	fp,r22,46710 <__alt_data_end+0xfffd0bb0>
   4672c:	00800034 	movhi	r2,0
   46730:	10800004 	addi	r2,r2,0
   46734:	10000926 	beq	r2,zero,4675c <__call_exitprocs+0xd0>
   46738:	98800117 	ldw	r2,4(r19)
   4673c:	1000311e 	bne	r2,zero,46804 <__call_exitprocs+0x178>
   46740:	98800017 	ldw	r2,0(r19)
   46744:	10003426 	beq	r2,zero,46818 <__call_exitprocs+0x18c>
   46748:	9809883a 	mov	r4,r19
   4674c:	a8800015 	stw	r2,0(r21)
   46750:	00000000 	call	0 <__reset-0x40000>
   46754:	acc00017 	ldw	r19,0(r21)
   46758:	983fe41e 	bne	r19,zero,466ec <__alt_data_end+0xfffd0b8c>
   4675c:	dfc00b17 	ldw	ra,44(sp)
   46760:	df000a17 	ldw	fp,40(sp)
   46764:	ddc00917 	ldw	r23,36(sp)
   46768:	dd800817 	ldw	r22,32(sp)
   4676c:	dd400717 	ldw	r21,28(sp)
   46770:	dd000617 	ldw	r20,24(sp)
   46774:	dcc00517 	ldw	r19,20(sp)
   46778:	dc800417 	ldw	r18,16(sp)
   4677c:	dc400317 	ldw	r17,12(sp)
   46780:	dc000217 	ldw	r16,8(sp)
   46784:	dec00c04 	addi	sp,sp,48
   46788:	f800283a 	ret
   4678c:	98800117 	ldw	r2,4(r19)
   46790:	80c00017 	ldw	r3,0(r16)
   46794:	10bfffc4 	addi	r2,r2,-1
   46798:	17001526 	beq	r2,fp,467f0 <__call_exitprocs+0x164>
   4679c:	80000015 	stw	zero,0(r16)
   467a0:	183fde26 	beq	r3,zero,4671c <__alt_data_end+0xfffd0bbc>
   467a4:	00800044 	movi	r2,1
   467a8:	1708983a 	sll	r4,r2,fp
   467ac:	98806217 	ldw	r2,392(r19)
   467b0:	9dc00117 	ldw	r23,4(r19)
   467b4:	2084703a 	and	r2,r4,r2
   467b8:	1000061e 	bne	r2,zero,467d4 <__call_exitprocs+0x148>
   467bc:	183ee83a 	callr	r3
   467c0:	98800117 	ldw	r2,4(r19)
   467c4:	15ffc51e 	bne	r2,r23,466dc <__alt_data_end+0xfffd0b7c>
   467c8:	a8800017 	ldw	r2,0(r21)
   467cc:	14ffd326 	beq	r2,r19,4671c <__alt_data_end+0xfffd0bbc>
   467d0:	003fc206 	br	466dc <__alt_data_end+0xfffd0b7c>
   467d4:	98806317 	ldw	r2,396(r19)
   467d8:	2084703a 	and	r2,r4,r2
   467dc:	1000061e 	bne	r2,zero,467f8 <__call_exitprocs+0x16c>
   467e0:	89400017 	ldw	r5,0(r17)
   467e4:	9009883a 	mov	r4,r18
   467e8:	183ee83a 	callr	r3
   467ec:	003ff406 	br	467c0 <__alt_data_end+0xfffd0c60>
   467f0:	9f000115 	stw	fp,4(r19)
   467f4:	003fea06 	br	467a0 <__alt_data_end+0xfffd0c40>
   467f8:	89000017 	ldw	r4,0(r17)
   467fc:	183ee83a 	callr	r3
   46800:	003fef06 	br	467c0 <__alt_data_end+0xfffd0c60>
   46804:	98800017 	ldw	r2,0(r19)
   46808:	982b883a 	mov	r21,r19
   4680c:	1027883a 	mov	r19,r2
   46810:	983fb61e 	bne	r19,zero,466ec <__alt_data_end+0xfffd0b8c>
   46814:	003fd106 	br	4675c <__alt_data_end+0xfffd0bfc>
   46818:	0005883a 	mov	r2,zero
   4681c:	003ffa06 	br	46808 <__alt_data_end+0xfffd0ca8>

00046820 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   46820:	defffd04 	addi	sp,sp,-12
   46824:	df000215 	stw	fp,8(sp)
   46828:	df000204 	addi	fp,sp,8
   4682c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   46830:	0001883a 	nop
   46834:	e0bfff17 	ldw	r2,-4(fp)
   46838:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   4683c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   46840:	10000226 	beq	r2,zero,4684c <_exit+0x2c>
    ALT_SIM_FAIL();
   46844:	002af070 	cmpltui	zero,zero,43969
   46848:	00000106 	br	46850 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   4684c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   46850:	003fff06 	br	46850 <__alt_data_end+0xfffd0cf0>
