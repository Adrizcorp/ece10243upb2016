
UCOS_practica.elf:     file format elf32-littlenios2
UCOS_practica.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0004022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000f344 memsz 0x0000f344 flags r-x
    LOAD off    0x00010364 vaddr 0x0004f364 paddr 0x00050f28 align 2**12
         filesz 0x00001bc4 memsz 0x00001bc4 flags rw-
    LOAD off    0x00012aec vaddr 0x00052aec paddr 0x00052aec align 2**12
         filesz 0x00000000 memsz 0x000093dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000efbc  0004022c  0004022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000017c  0004f1e8  0004f1e8  000101e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc4  0004f364  00050f28  00010364  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000093dc  00052aec  00052aec  00012aec  2**2
                  ALLOC, SMALL_DATA
  6 .RAM_jesus    00000000  0005bec8  0005bec8  00011f28  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00011f28  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b80  00000000  00000000  00011f50  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00022295  00000000  00000000  00012ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000081ed  00000000  00000000  00034d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000097ab  00000000  00000000  0003cf52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002878  00000000  00000000  00046700  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003bbf  00000000  00000000  00048f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000486a  00000000  00000000  0004cb37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000513a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000340  00000000  00000000  000513b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000557d6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000557dc  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000557df  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000557e0  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000557e1  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000557ea  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000557f3  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  000557fc  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000006b  00000000  00000000  00055809  2**0
                  CONTENTS, READONLY
 26 .jdi          00003b78  00000000  00000000  00055874  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000717e6  00000000  00000000  000593ec  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
0004022c l    d  .text	00000000 .text
0004f1e8 l    d  .rodata	00000000 .rodata
0004f364 l    d  .rwdata	00000000 .rwdata
00052aec l    d  .bss	00000000 .bss
0005bec8 l    d  .RAM_jesus	00000000 .RAM_jesus
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../UCOS_practica_bsp//obj/HAL/src/crt0.o
00040264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0004f364 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00042460 l     F .text	00000008 __fp_lock
00042468 l     F .text	00000008 __fp_unlock
0004247c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00043500 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00043628 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00043654 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004375c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043858 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004393c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00043b3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00050e9c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00043dc0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00050ea0 l     O .rwdata	00000004 lockid
00052b0c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00050ea4 l     O .rwdata	00000004 lockid
00052b14 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000457fc l     F .text	00000044 OS_InitMisc
00045840 l     F .text	00000068 OS_InitRdyList
000459a0 l     F .text	000000e0 OS_InitTCBList
00045720 l     F .text	000000dc OS_InitEventList
000458a8 l     F .text	0000007c OS_InitTaskIdle
00045924 l     F .text	0000007c OS_InitTaskStat
00045c00 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000479f4 l     F .text	00000110 OS_FlagTaskRdy
0004774c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004bec4 l     F .text	00000038 alt_dev_reg
0004fd38 l     O .rwdata	0000106c jtag_uart
00050da4 l     O .rwdata	000000d0 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004c258 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0004c4fc l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004ccd4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0004d03c l     F .text	00000098 altera_avalon_uart_irq
0004d0d4 l     F .text	00000138 altera_avalon_uart_rxirq
0004d20c l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0004d404 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0004d6bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004daa0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004df38 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004e090 l     F .text	00000050 alt_get_errno
0004e0e0 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0004f080 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00052b78 g     O .bss	00000004 alt_instruction_exception_handler
00050ef2 g     O .rwdata	00000002 OSTaskNameSize
000433cc g     F .text	00000054 _isatty_r
00043a68 g     F .text	000000d4 alt_main
000409b8 g     F .text	000000b8 _puts_r
0005bdc8 g     O .bss	00000100 alt_irq
00043420 g     F .text	0000005c _lseek_r
00048258 g     F .text	000000dc OS_MemInit
00050f28 g       *ABS*	00000000 __flash_rwdata_start
0004be60 g     F .text	00000064 OSTimeSet
00044478 g     F .text	00000610 OSEventPendMulti
0005bec8 g       *ABS*	00000000 __alt_heap_start
0004e8b4 g     F .text	00000020 OSTaskCreateHook
00052ba4 g     O .bss	00002000 task1_stk
00050eca g     O .rwdata	00000002 OSMboxEn
00044adc g     F .text	0000007c OSIntEnter
0004314c g     F .text	0000005c __sseek
000427c4 g     F .text	00000010 __sinit
00050eda g     O .rwdata	00000002 OSQEn
0004261c g     F .text	00000078 __sfmoreglue
0004414c g     F .text	000000d0 __malloc_unlock
0004e910 g     F .text	0000001c OSTaskStatHook
00052b1c g     O .bss	00000001 OSLockNesting
00050f18 g     O .rwdata	00000002 OSDataSize
00052b1d g     O .bss	00000001 OSRunning
00041988 g     F .text	0000015c memmove
0004e948 g     F .text	0000001c OSInitHookBegin
00050f10 g     O .rwdata	00000002 OSTmrSize
000427ac g     F .text	00000018 _cleanup
00052b20 g     O .bss	00000004 OSIdleCtr
0004e4d0 g     F .text	00000020 altera_nios2_gen2_irq_init
0004e59c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00045f28 g     F .text	000002d4 OS_TCBInit
00040000 g     F .entry	0000000c __reset
00050f16 g     O .rwdata	00000002 OSTmrWheelTblSize
00040020 g       *ABS*	00000000 __flash_exceptions_start
00050eb6 g     O .rwdata	00000002 OSEventSize
00052b24 g     O .bss	00000001 OSPrioHighRdy
00043374 g     F .text	00000058 _fstat_r
0004e8d4 g     F .text	00000020 OSTaskDelHook
00052af8 g     O .bss	00000004 errno
000430c8 g     F .text	00000008 __seofread
0004e57c g       .text	00000000 OSStartHighRdy
0004a748 g     F .text	000001ec OSTaskCreateExt
00047298 g     F .text	00000068 OSFlagPendGetFlagsRdy
00050ef6 g     O .rwdata	00000002 OSTaskStatStkSize
00046388 g     F .text	00000308 OSFlagAccept
00048938 g     F .text	000000b8 OSQFlush
00048334 g     F .text	00000140 OSQAccept
00052b04 g     O .bss	00000004 alt_argv
00058e74 g       *ABS*	00000000 _gp
0004a58c g     F .text	000001bc OSTaskCreate
0004a04c g     F .text	00000540 OSTaskChangePrio
00052b18 g     O .bss	00000004 alt_heapsem
00040630 g     F .text	00000054 play_tone1
000461fc g     F .text	0000018c OSDebugInit
0004a934 g     F .text	000003e0 OSTaskDel
0004fbb8 g     O .rwdata	00000180 alt_fd_list
00058ba4 g     O .bss	00000370 OSFlagTbl
0004550c g     F .text	000000b4 OS_EventTaskRemove
0004e9bc g     F .text	00000090 alt_find_dev
00041850 g     F .text	00000138 memcpy
00050ee0 g     O .rwdata	00000002 OSRdyTblSize
00042470 g     F .text	0000000c _cleanup_r
0004e018 g     F .text	00000078 alt_io_redirect
0004f1e8 g       *ABS*	00000000 __DTOR_END__
00040a70 g     F .text	00000014 puts
0004ec74 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0004421c g     F .text	00000120 OSEventNameGet
00050ec4 g     O .rwdata	00000002 OSFlagMax
00044b58 g     F .text	000000f4 OSIntExit
00050efe g     O .rwdata	00000002 OSTCBSize
00052b25 g     O .bss	00000001 OSPrioCur
0004c760 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0004f19c g     F .text	00000008 .hidden __udivsi3
000437ac g     F .text	000000ac isatty
00050ee4 g     O .rwdata	00000002 OSStkWidth
00050ed8 g     O .rwdata	00000002 OSPtrSize
00050eb8 g     O .rwdata	00000002 OSEventTblSize
0004e4f0 g       .text	00000000 OSCtxSw
00052af4 g     O .bss	00000004 __malloc_top_pad
00052b28 g     O .bss	00000004 OSTCBList
00052afc g     O .bss	00000004 alt_fd_list_lock
00040b1c g     F .text	000004a4 __sfvwrite_r
00058f14 g     O .bss	00000c30 OSMemTbl
00052b2c g     O .bss	00000001 OSTickStepState
00042084 g     F .text	00000054 _sbrk_r
00050edc g     O .rwdata	00000002 OSQMax
00059b44 g     O .bss	00000800 OSTaskStatStk
00047e88 g     F .text	000000f8 OSMemNameGet
00050ebc g     O .rwdata	00000002 OSFlagEn
0004347c g     F .text	0000005c _read_r
00050f02 g     O .rwdata	00000002 OSTimeTickHookEn
00048e58 g     F .text	00000168 OSQPost
00047b04 g     F .text	000000a0 OS_FlagUnlink
00050e94 g     O .rwdata	00000004 alt_max_fd
00045ad0 g     F .text	00000064 OS_MemCopy
00045b34 g     F .text	000000cc OS_Sched
00043260 g     F .text	00000100 _fclose_r
00047d98 g     F .text	000000f0 OSMemGet
0004b014 g     F .text	000001c0 OSTaskNameSet
00042430 g     F .text	00000030 fflush
00052af0 g     O .bss	00000004 __malloc_max_sbrked_mem
00052b30 g     O .bss	00000004 OSCtxSwCtr
0004e92c g     F .text	0000001c OSTimeTickHook
00050ec6 g     O .rwdata	00000002 OSFlagNameSize
000455c0 g     F .text	000000fc OS_EventTaskRemoveMulti
000453c0 g     F .text	0000014c OS_EventTaskWaitMulti
00050ede g     O .rwdata	00000002 OSQSize
0004398c g     F .text	000000dc lseek
0004995c g     F .text	00000268 OSSemPend
00050e74 g     O .rwdata	00000004 _global_impure_ptr
00041ae4 g     F .text	000005a0 _realloc_r
00050ec8 g     O .rwdata	00000002 OSLowestPrio
0005bec8 g       *ABS*	00000000 __bss_end
0004de48 g     F .text	000000f0 alt_iic_isr_register
0004e99c g     F .text	00000020 OSTCBInitHook
00050f0e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0004e3cc g     F .text	00000104 alt_tick
00050eb0 g     O .rwdata	00000002 OSEventEn
00050f0a g     O .rwdata	00000002 OSTmrCfgNameSize
0004cee0 g     F .text	0000015c altera_avalon_uart_init
000427e4 g     F .text	00000018 __fp_lock_all
0004ddfc g     F .text	0000004c alt_ic_irq_enabled
00047910 g     F .text	000000e4 OS_FlagInit
0004e334 g     F .text	00000098 alt_alarm_stop
00050eec g     O .rwdata	00000002 OSTaskIdleStkSize
00052b6c g     O .bss	00000004 alt_irq_active
00049544 g     F .text	000000b0 OSSemAccept
00048098 g     F .text	000000d8 OSMemPut
00047ba4 g     F .text	000001f4 OSMemCreate
00052b34 g     O .bss	00000004 OSIdleCtrMax
000400fc g     F .exceptions	000000d0 alt_irq_handler
0004fb90 g     O .rwdata	00000028 alt_dev_null
00050f00 g     O .rwdata	00000002 OSTicksPerSec
0004e4f0 g       .text	00000000 OSIntCtxSw
0004da84 g     F .text	0000001c alt_dcache_flush_all
00052b38 g     O .bss	00000004 OSTCBFreeList
00050f28 g       *ABS*	00000000 __ram_rwdata_end
00049bc4 g     F .text	0000016c OSSemPendAbort
00050e8c g     O .rwdata	00000008 alt_dev_list
00043e10 g     F .text	00000100 write
00050f04 g     O .rwdata	00000002 OSVersionNbr
0004f364 g       *ABS*	00000000 __ram_rodata_end
000436a4 g     F .text	000000b8 fstat
00050eac g     O .rwdata	00000004 OSEndiannessTest
0004f1a4 g     F .text	00000008 .hidden __umodsi3
00050ebe g     O .rwdata	00000002 OSFlagGrpSize
0005bec8 g       *ABS*	00000000 end
0004d70c g     F .text	00000238 altera_avalon_uart_write
0004c10c g     F .text	0000014c altera_avalon_jtag_uart_init
00045d94 g     F .text	000000cc OS_TaskStat
000401cc g     F .exceptions	00000060 alt_instruction_exception_entry
000402fc g     F .text	00000054 play_tone
0004f1e8 g       *ABS*	00000000 __CTOR_LIST__
00075b60 g       *ABS*	00000000 __alt_stack_pointer
0004cd48 g     F .text	00000088 alt_avalon_timer_sc_init
0004ce30 g     F .text	00000060 altera_avalon_uart_write_fd
0004ce90 g     F .text	00000050 altera_avalon_uart_close_fd
0004ca14 g     F .text	000002c0 altera_avalon_jtag_uart_write
000427d4 g     F .text	00000004 __sfp_lock_acquire
00041768 g     F .text	000000e8 memchr
00045a80 g     F .text	00000050 OS_MemClr
0004e5c0 g     F .text	000002f4 OSTaskStkInit
00040268 g     F .text	00000094 task1
00042938 g     F .text	000002f0 _free_r
0004511c g     F .text	00000198 OS_EventTaskRdy
0004eeec g     F .text	00000194 __call_exitprocs
00052b3c g     O .bss	00000001 OSCPUUsage
00050e7c g     O .rwdata	00000004 __malloc_sbrk_base
0004022c g     F .text	0000003c _start
00040350 g     F .text	000002e0 task2
00052b70 g     O .bss	00000004 _alt_tick_rate
000489f0 g     F .text	000002fc OSQPend
0004b940 g     F .text	00000148 OSTimeDly
00052b74 g     O .bss	00000004 _alt_nticks
00043b8c g     F .text	00000104 read
0004bf30 g     F .text	00000078 alt_sys_init
0004edd8 g     F .text	00000114 __register_exitproc
00052b3d g     O .bss	00000001 OSTaskCtr
0004ba88 g     F .text	00000184 OSTimeDlyHMSM
0004c60c g     F .text	00000068 altera_avalon_jtag_uart_close
000434d8 g     F .text	00000028 .hidden __mulsi3
0004f364 g       *ABS*	00000000 __ram_rwdata_start
0004f1e8 g       *ABS*	00000000 __ram_rodata_start
00052b7c g     O .bss	00000028 __malloc_current_mallinfo
00050eb2 g     O .rwdata	00000002 OSEventMax
00049d30 g     F .text	00000110 OSSemPost
00044cd4 g     F .text	000000d8 OSSchedUnlock
0004bfa8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004eb60 g     F .text	00000114 alt_get_fd
00052b40 g     O .bss	00000004 OSMemFreeList
00044e18 g     F .text	000000ac OSStatInit
00047688 g     F .text	000000c4 OSFlagQuery
00050ee8 g     O .rwdata	00000002 OSTaskCreateExtEn
0004320c g     F .text	00000054 _close_r
0004ed5c g     F .text	0000007c memcmp
00045100 g     F .text	0000001c OS_Dummy
0004c068 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0005bec8 g       *ABS*	00000000 __alt_stack_base
0004c0b8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00040684 g     F .text	00000264 leds_task
000420d8 g     F .text	00000130 __swsetup_r
0005a344 g     O .bss	000001e0 OSQTbl
00042694 g     F .text	00000118 __sfp
0004f788 g     O .rwdata	00000408 __malloc_av_
000427e0 g     F .text	00000004 __sinit_lock_release
00052b44 g     O .bss	00000004 OSTCBHighRdy
00043074 g     F .text	00000054 __sread
00052b48 g     O .bss	00000004 OSQFreeList
0004ea4c g     F .text	00000114 alt_find_file
0004daf0 g     F .text	000000a4 alt_dev_llist_insert
0004402c g     F .text	00000120 __malloc_lock
00043d10 g     F .text	000000b0 sbrk
0004433c g     F .text	0000013c OSEventNameSet
00042208 g     F .text	00000228 _fflush_r
00052b4c g     O .bss	00000001 OSRdyGrp
00052aec g       *ABS*	00000000 __bss_start
00042f50 g     F .text	00000124 memset
000408e8 g     F .text	000000d0 main
00052b08 g     O .bss	00000004 alt_envp
00052aec g     O .bss	00000004 __malloc_max_total_mem
0004c008 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004f224 g     O .rodata	00000100 OSUnMapTbl
00040000 g       *ABS*	00000000 __alt_mem_RAM_jesus
00050ee2 g     O .rwdata	00000002 OSSemEn
00047300 g     F .text	00000388 OSFlagPost
000431a8 g     F .text	00000008 __sclose
00075b60 g       *ABS*	00000000 __alt_heap_limit
00043360 g     F .text	00000014 fclose
000452b4 g     F .text	0000010c OS_EventTaskWait
00054ba4 g     O .bss	00002000 task2_stk
00045e60 g     F .text	000000c8 OS_TaskStatStkChk
0004ad14 g     F .text	00000158 OSTaskDelReq
00040fc0 g     F .text	000007a8 _malloc_r
00050e98 g     O .rwdata	00000004 alt_errno
00044dac g     F .text	0000006c OSStart
00043fd0 g     F .text	0000005c __env_unlock
00042c28 g     F .text	000000b8 _fwalk
0004b1d4 g     F .text	000001f8 OSTaskResume
00048170 g     F .text	000000e8 OSMemQuery
00050ef4 g     O .rwdata	00000002 OSTaskStatEn
00050ece g     O .rwdata	00000002 OSMemMax
00048fc0 g     F .text	00000170 OSQPostFront
0004f0ec g     F .text	00000054 .hidden __divsi3
00052b4d g     O .bss	00000003 OSRdyTbl
00050ea8 g     O .rwdata	00000002 OSDebugEn
00042814 g     F .text	00000124 _malloc_trim_r
0004f1e8 g       *ABS*	00000000 __CTOR_END__
00050ec0 g     O .rwdata	00000002 OSFlagNodeSize
00050f08 g     O .rwdata	00000002 OSTmrCfgMax
00048474 g     F .text	000001fc OSQCreate
0004ae6c g     F .text	000001a8 OSTaskNameGet
0004f1e8 g       *ABS*	00000000 __flash_rodata_start
00049130 g     F .text	0000020c OSQPostOpt
00044ec4 g     F .text	0000021c OSTimeTick
00050ef0 g     O .rwdata	00000002 OSTaskMax
0004f1e8 g       *ABS*	00000000 __DTOR_LIST__
000495f4 g     F .text	00000100 OSSemCreate
00050f14 g     O .rwdata	00000002 OSTmrWheelSize
00050eea g     O .rwdata	00000002 OSTaskDelEn
00049e40 g     F .text	00000110 OSSemQuery
00048670 g     F .text	000002c8 OSQDel
00048cec g     F .text	0000016c OSQPendAbort
0004befc g     F .text	00000034 alt_irq_init
00043c90 g     F .text	00000080 alt_release_fd
0004ed10 g     F .text	00000014 atexit
000431b0 g     F .text	0000005c _write_r
00044c4c g     F .text	00000088 OSSchedLock
00046690 g     F .text	00000128 OSFlagCreate
00050e78 g     O .rwdata	00000004 _impure_ptr
00052b00 g     O .bss	00000004 alt_argc
0004dbf0 g     F .text	0000005c _do_dtors
00050eba g     O .rwdata	00000002 OSEventMultiEn
000467b8 g     F .text	00000270 OSFlagDel
00052b50 g     O .bss	00000004 OSEventFreeList
00040020 g       .exceptions	00000000 alt_irq_entry
00046ca8 g     F .text	000005f0 OSFlagPend
00050f06 g     O .rwdata	00000002 OSTmrEn
000427fc g     F .text	00000018 __fp_unlock_all
00050e84 g     O .rwdata	00000008 alt_fs_list
00045c70 g     F .text	00000074 OS_StrCopy
00050ed0 g     O .rwdata	00000002 OSMemNameSize
0004e964 g     F .text	0000001c OSInitHookEnd
00040020 g       *ABS*	00000000 __ram_exceptions_start
00050efc g     O .rwdata	00000002 OSTCBPrioTblMax
00050ef8 g     O .rwdata	00000002 OSTaskStatStkChkEn
0004dc68 g     F .text	00000050 alt_ic_isr_register
00050ecc g     O .rwdata	00000002 OSMemEn
00050ed6 g     O .rwdata	00000002 OSMutexEn
00050f28 g       *ABS*	00000000 _edata
0004cdd0 g     F .text	00000060 altera_avalon_uart_read_fd
0005bec8 g       *ABS*	00000000 _end
00052b54 g     O .bss	00000001 OSIntNesting
0004022c g       *ABS*	00000000 __ram_exceptions_end
0004c674 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0004bc0c g     F .text	000001f0 OSTimeDlyResume
00046b58 g     F .text	00000150 OSFlagNameSet
0004b3cc g     F .text	000001c8 OSTaskStkChk
0004dd58 g     F .text	000000a4 alt_ic_irq_disable
00050ed2 g     O .rwdata	00000002 OSMemSize
000430d0 g     F .text	0000007c __swrite
00050e80 g     O .rwdata	00000004 __malloc_trim_threshold
00052b58 g     O .bss	00000004 OSTCBCur
0004ed24 g     F .text	00000038 exit
00050ed4 g     O .rwdata	00000002 OSMemTblSize
00042ce0 g     F .text	000000b8 _fwalk_reent
0004f140 g     F .text	0000005c .hidden __modsi3
00075b60 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000427d8 g     F .text	00000004 __sfp_lock_release
00056ba4 g     O .bss	00002000 leds_stk
00044a88 g     F .text	00000054 OSInit
0004b7a8 g     F .text	0000012c OSTaskQuery
00049498 g     F .text	000000ac OS_QInit
00045ce4 g     F .text	00000054 OS_StrLen
00047f80 g     F .text	00000118 OSMemNameSet
00050eee g     O .rwdata	00000002 OSTaskProfileEn
00052b5c g     O .bss	00000004 OSTime
0004d3b0 g     F .text	00000054 altera_avalon_uart_close
0005a524 g     O .bss	00000800 OSTaskIdleStk
0004f1ac g     F .text	0000003c _exit
0004d944 g     F .text	00000140 alt_alarm_start
00046a28 g     F .text	00000130 OSFlagNameGet
0004bdfc g     F .text	00000064 OSTimeGet
00042d98 g     F .text	000001b8 __smakebuf_r
00040a84 g     F .text	00000098 strlen
0004e8f4 g     F .text	0000001c OSTaskSwHook
0004e1d4 g     F .text	00000160 open
0005ad24 g     O .bss	00000b40 OSEventTbl
0005b864 g     O .bss	00000510 OSTCBTbl
00049f50 g     F .text	000000fc OSSemSet
0004dc4c g     F .text	0000001c alt_icache_flush_all
00050f1c g     O .rwdata	00000004 alt_priority_mask
000496f4 g     F .text	00000268 OSSemDel
00052b60 g     O .bss	00000004 OSFlagFreeList
0004dcb8 g     F .text	000000a0 alt_ic_irq_enable
00050eb4 g     O .rwdata	00000002 OSEventNameSize
00052b64 g     O .bss	00000001 OSStatRdy
0005bd74 g     O .bss	00000054 OSTCBPrioTbl
0004d454 g     F .text	00000268 altera_avalon_uart_read
00043f10 g     F .text	000000c0 __env_lock
00050efa g     O .rwdata	00000002 OSTaskSwHookEn
00050f20 g     O .rwdata	00000008 alt_alarm_list
00050ec2 g     O .rwdata	00000002 OSFlagWidth
0004db94 g     F .text	0000005c _do_ctors
00043550 g     F .text	000000d8 close
00052b10 g     O .bss	00000004 alt_envsem
00052b68 g     O .bss	00000004 OSIdleCtrRun
000450e0 g     F .text	00000020 OSVersion
00050f0c g     O .rwdata	00000002 OSTmrCfgWheelSize
000438bc g     F .text	00000080 alt_load
0004b8d4 g     F .text	0000006c OS_TaskStkClr
00050ee6 g     O .rwdata	00000002 OSTaskCreateEn
000456bc g     F .text	00000064 OS_EventWaitListInit
0004e980 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
000427dc g     F .text	00000004 __sinit_lock_acquire
0004b594 g     F .text	00000214 OSTaskSuspend
00045d38 g     F .text	0000005c OS_TaskIdle
00050f12 g     O .rwdata	00000002 OSTmrTblSize
0004933c g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408b14 	ori	at,at,556
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401cc0 	call	401cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0044adc0 	call	44adc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001b4 	movhi	r2,6
   40140:	10af7204 	addi	r2,r2,-16952
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001b4 	movhi	r2,6
   40158:	10af7204 	addi	r2,r2,-16952
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffca5cc>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffca5c0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0044b580 	call	44b58 <OSIntExit>
}
   401b8:	e037883a 	mov	sp,fp
   401bc:	dfc00117 	ldw	ra,4(sp)
   401c0:	df000017 	ldw	fp,0(sp)
   401c4:	dec00204 	addi	sp,sp,8
   401c8:	f800283a 	ret

000401cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401cc:	defffb04 	addi	sp,sp,-20
   401d0:	dfc00415 	stw	ra,16(sp)
   401d4:	df000315 	stw	fp,12(sp)
   401d8:	df000304 	addi	fp,sp,12
   401dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e0:	00bfffc4 	movi	r2,-1
   401e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401ec:	d0a74117 	ldw	r2,-25340(gp)
   401f0:	10000726 	beq	r2,zero,40210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f4:	d0a74117 	ldw	r2,-25340(gp)
   401f8:	e0fffd17 	ldw	r3,-12(fp)
   401fc:	1809883a 	mov	r4,r3
   40200:	e17fff17 	ldw	r5,-4(fp)
   40204:	e1bffe17 	ldw	r6,-8(fp)
   40208:	103ee83a 	callr	r2
   4020c:	00000206 	br	40218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40214:	0005883a 	mov	r2,zero
}
   40218:	e037883a 	mov	sp,fp
   4021c:	dfc00117 	ldw	ra,4(sp)
   40220:	df000017 	ldw	fp,0(sp)
   40224:	dec00204 	addi	sp,sp,8
   40228:	f800283a 	ret

Disassembly of section .text:

0004022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   4022c:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40230:	ded6d814 	ori	sp,sp,23392
    movhi gp, %hi(_gp)
   40234:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40238:	d6a39d14 	ori	gp,gp,36468
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   4023c:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40240:	108abb14 	ori	r2,r2,10988

    movhi r3, %hi(__bss_end)
   40244:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   40248:	18efb214 	ori	r3,r3,48840

    beq r2, r3, 1f
   4024c:	10c00326 	beq	r2,r3,4025c <_start+0x30>

0:
    stw zero, (r2)
   40250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40258:	10fffd36 	bltu	r2,r3,40250 <__alt_data_end+0xfffca6f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   4025c:	00438bc0 	call	438bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40260:	0043a680 	call	43a68 <alt_main>

00040264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40264:	003fff06 	br	40264 <__alt_data_end+0xfffca704>

00040268 <task1>:
	IOWR(DIV_FREQ1_BASE,0,silence);
	OSTimeDlyHMSM(0, 0, 0, 10);
}
/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
   40268:	defffc04 	addi	sp,sp,-16
   4026c:	dc800215 	stw	r18,8(sp)
   40270:	dc400115 	stw	r17,4(sp)
   40274:	dc000015 	stw	r16,0(sp)
   40278:	dfc00315 	stw	ra,12(sp)
	unsigned char counter=0;
   4027c:	0021883a 	mov	r16,zero
	  while (1)
	  {
		  int est= IORD(SW_BASE,0);
   40280:	04842404 	movi	r18,4240
			counter++;
			OSTimeDlyHMSM(0, 0, 0, 100);
		  }
		  else{
			printf("Hola led --\n");
			IOWR(LEDS_BASE,0,counter);
   40284:	04442004 	movi	r17,4224
void task1(void* pdata)
{
	unsigned char counter=0;
	  while (1)
	  {
		  int est= IORD(SW_BASE,0);
   40288:	90800037 	ldwio	r2,0(r18)
		//  counter= IORD(LEDS_BASE,0);
		  if(est==0){
			printf("Hola led ++\n");
   4028c:	01000174 	movhi	r4,5
   40290:	213c7a04 	addi	r4,r4,-3608
	unsigned char counter=0;
	  while (1)
	  {
		  int est= IORD(SW_BASE,0);
		//  counter= IORD(LEDS_BASE,0);
		  if(est==0){
   40294:	10000d1e 	bne	r2,zero,402cc <task1+0x64>
			printf("Hola led ++\n");
   40298:	0040a700 	call	40a70 <puts>
			IOWR(LEDS_BASE,0,counter);
   4029c:	80803fcc 	andi	r2,r16,255
   402a0:	88800035 	stwio	r2,0(r17)
			counter++;
			OSTimeDlyHMSM(0, 0, 0, 100);
   402a4:	0009883a 	mov	r4,zero
   402a8:	000b883a 	mov	r5,zero
   402ac:	000d883a 	mov	r6,zero
   402b0:	01c01904 	movi	r7,100
		  int est= IORD(SW_BASE,0);
		//  counter= IORD(LEDS_BASE,0);
		  if(est==0){
			printf("Hola led ++\n");
			IOWR(LEDS_BASE,0,counter);
			counter++;
   402b4:	84000044 	addi	r16,r16,1
			OSTimeDlyHMSM(0, 0, 0, 100);
   402b8:	004ba880 	call	4ba88 <OSTimeDlyHMSM>
void task1(void* pdata)
{
	unsigned char counter=0;
	  while (1)
	  {
		  int est= IORD(SW_BASE,0);
   402bc:	90800037 	ldwio	r2,0(r18)
		//  counter= IORD(LEDS_BASE,0);
		  if(est==0){
			printf("Hola led ++\n");
   402c0:	01000174 	movhi	r4,5
   402c4:	213c7a04 	addi	r4,r4,-3608
	unsigned char counter=0;
	  while (1)
	  {
		  int est= IORD(SW_BASE,0);
		//  counter= IORD(LEDS_BASE,0);
		  if(est==0){
   402c8:	103ff326 	beq	r2,zero,40298 <__alt_data_end+0xfffca738>
			IOWR(LEDS_BASE,0,counter);
			counter++;
			OSTimeDlyHMSM(0, 0, 0, 100);
		  }
		  else{
			printf("Hola led --\n");
   402cc:	01000174 	movhi	r4,5
   402d0:	213c7d04 	addi	r4,r4,-3596
   402d4:	0040a700 	call	40a70 <puts>
			IOWR(LEDS_BASE,0,counter);
   402d8:	80803fcc 	andi	r2,r16,255
   402dc:	88800035 	stwio	r2,0(r17)
			counter--;
			OSTimeDlyHMSM(0, 0, 0, 100);
   402e0:	0009883a 	mov	r4,zero
   402e4:	000b883a 	mov	r5,zero
   402e8:	000d883a 	mov	r6,zero
   402ec:	01c01904 	movi	r7,100
			OSTimeDlyHMSM(0, 0, 0, 100);
		  }
		  else{
			printf("Hola led --\n");
			IOWR(LEDS_BASE,0,counter);
			counter--;
   402f0:	843fffc4 	addi	r16,r16,-1
			OSTimeDlyHMSM(0, 0, 0, 100);
   402f4:	004ba880 	call	4ba88 <OSTimeDlyHMSM>
   402f8:	003fe306 	br	40288 <__alt_data_end+0xfffca728>

000402fc <play_tone>:

#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2
#define LEDS_PRIORITY       3

void play_tone(int nota, int time_ms){
   402fc:	defffe04 	addi	sp,sp,-8
   40300:	dc000015 	stw	r16,0(sp)
   40304:	dfc00115 	stw	ra,4(sp)
	IOWR(DIV_FREQ_BASE,0,nota);
   40308:	04041c04 	movi	r16,4208
   4030c:	81000035 	stwio	r4,0(r16)
	OSTimeDlyHMSM(0, 0, 0, time_ms*2);
   40310:	294f883a 	add	r7,r5,r5
   40314:	0009883a 	mov	r4,zero
   40318:	000b883a 	mov	r5,zero
   4031c:	000d883a 	mov	r6,zero
   40320:	39ffffcc 	andi	r7,r7,65535
   40324:	004ba880 	call	4ba88 <OSTimeDlyHMSM>
	IOWR(DIV_FREQ_BASE,0,silence);
   40328:	00800044 	movi	r2,1
   4032c:	80800035 	stwio	r2,0(r16)
	OSTimeDlyHMSM(0, 0, 0, 10);
   40330:	0009883a 	mov	r4,zero
   40334:	000b883a 	mov	r5,zero
   40338:	000d883a 	mov	r6,zero
   4033c:	01c00284 	movi	r7,10
}
   40340:	dfc00117 	ldw	ra,4(sp)
   40344:	dc000017 	ldw	r16,0(sp)
   40348:	dec00204 	addi	sp,sp,8

void play_tone(int nota, int time_ms){
	IOWR(DIV_FREQ_BASE,0,nota);
	OSTimeDlyHMSM(0, 0, 0, time_ms*2);
	IOWR(DIV_FREQ_BASE,0,silence);
	OSTimeDlyHMSM(0, 0, 0, 10);
   4034c:	004ba881 	jmpi	4ba88 <OSTimeDlyHMSM>

00040350 <task2>:
		  }
	  }
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
   40350:	deffff04 	addi	sp,sp,-4
   40354:	dfc00015 	stw	ra,0(sp)

		  while (1)
		  {


			  play_tone(b4,400);
   40358:	01316ed4 	movui	r4,50619
   4035c:	01406404 	movi	r5,400
   40360:	00402fc0 	call	402fc <play_tone>

			    play_tone(c5,200);
   40364:	012ea854 	movui	r4,47777
   40368:	01403204 	movi	r5,200
   4036c:	00402fc0 	call	402fc <play_tone>

			    play_tone(d5,200);
   40370:	01299154 	movui	r4,42565
   40374:	01403204 	movi	r5,200
   40378:	00402fc0 	call	402fc <play_tone>

			    play_tone(d5,200);
   4037c:	01299154 	movui	r4,42565
   40380:	01403204 	movi	r5,200
   40384:	00402fc0 	call	402fc <play_tone>

			    play_tone(c5,200);
   40388:	012ea854 	movui	r4,47777
   4038c:	01403204 	movi	r5,200
   40390:	00402fc0 	call	402fc <play_tone>

			    play_tone(b4,200);
   40394:	01316ed4 	movui	r4,50619
   40398:	01403204 	movi	r5,200
   4039c:	00402fc0 	call	402fc <play_tone>

			    play_tone(a4,200);
   403a0:	01377c54 	movui	r4,56817
   403a4:	01403204 	movi	r5,200
   403a8:	00402fc0 	call	402fc <play_tone>

			    play_tone(g4,200);
   403ac:	013e47d4 	movui	r4,63775
   403b0:	01403204 	movi	r5,200
   403b4:	00402fc0 	call	402fc <play_tone>

			    play_tone(g4,200);
   403b8:	013e47d4 	movui	r4,63775
   403bc:	01403204 	movi	r5,200
   403c0:	00402fc0 	call	402fc <play_tone>

			    play_tone(a4,200);
   403c4:	01377c54 	movui	r4,56817
   403c8:	01403204 	movi	r5,200
   403cc:	00402fc0 	call	402fc <play_tone>

			    play_tone(b4,200);
   403d0:	01316ed4 	movui	r4,50619
   403d4:	01403204 	movi	r5,200
   403d8:	00402fc0 	call	402fc <play_tone>

			    play_tone(b4,300);
   403dc:	01316ed4 	movui	r4,50619
   403e0:	01404b04 	movi	r5,300
   403e4:	00402fc0 	call	402fc <play_tone>

			    play_tone(a4,100);
   403e8:	01377c54 	movui	r4,56817
   403ec:	01401904 	movi	r5,100
   403f0:	00402fc0 	call	402fc <play_tone>

			    play_tone(a4,400);
   403f4:	01377c54 	movui	r4,56817
   403f8:	01406404 	movi	r5,400
   403fc:	00402fc0 	call	402fc <play_tone>

			    play_tone(b4,400);
   40400:	01316ed4 	movui	r4,50619
   40404:	01406404 	movi	r5,400
   40408:	00402fc0 	call	402fc <play_tone>

			    play_tone(c5,200);
   4040c:	012ea854 	movui	r4,47777
   40410:	01403204 	movi	r5,200
   40414:	00402fc0 	call	402fc <play_tone>

			    play_tone(d5,200);
   40418:	01299154 	movui	r4,42565
   4041c:	01403204 	movi	r5,200
   40420:	00402fc0 	call	402fc <play_tone>

			    play_tone(d5,200);
   40424:	01299154 	movui	r4,42565
   40428:	01403204 	movi	r5,200
   4042c:	00402fc0 	call	402fc <play_tone>

			    play_tone(c5,200);
   40430:	012ea854 	movui	r4,47777
   40434:	01403204 	movi	r5,200
   40438:	00402fc0 	call	402fc <play_tone>

			    play_tone(b4,200);
   4043c:	01316ed4 	movui	r4,50619
   40440:	01403204 	movi	r5,200
   40444:	00402fc0 	call	402fc <play_tone>

			    play_tone(a4,200);
   40448:	01377c54 	movui	r4,56817
   4044c:	01403204 	movi	r5,200
   40450:	00402fc0 	call	402fc <play_tone>

			    play_tone(g4,200);
   40454:	013e47d4 	movui	r4,63775
   40458:	01403204 	movi	r5,200
   4045c:	00402fc0 	call	402fc <play_tone>

			    play_tone(g4,200);
   40460:	013e47d4 	movui	r4,63775
   40464:	01403204 	movi	r5,200
   40468:	00402fc0 	call	402fc <play_tone>

			    play_tone(a4,200);
   4046c:	01377c54 	movui	r4,56817
   40470:	01403204 	movi	r5,200
   40474:	00402fc0 	call	402fc <play_tone>

			    play_tone(b4,200);
   40478:	01316ed4 	movui	r4,50619
   4047c:	01403204 	movi	r5,200
   40480:	00402fc0 	call	402fc <play_tone>

			    play_tone(a4,300);
   40484:	01377c54 	movui	r4,56817
   40488:	01404b04 	movi	r5,300
   4048c:	00402fc0 	call	402fc <play_tone>

			    play_tone(g4,100);
   40490:	013e47d4 	movui	r4,63775
   40494:	01401904 	movi	r5,100
   40498:	00402fc0 	call	402fc <play_tone>

			    play_tone(g4,400);
   4049c:	013e47d4 	movui	r4,63775
   404a0:	01406404 	movi	r5,400
   404a4:	00402fc0 	call	402fc <play_tone>
			    play_tone(silence,200);
   404a8:	01000044 	movi	r4,1
   404ac:	01403204 	movi	r5,200
   404b0:	00402fc0 	call	402fc <play_tone>
			    play_tone(a4,400);
   404b4:	01377c54 	movui	r4,56817
   404b8:	01406404 	movi	r5,400
   404bc:	00402fc0 	call	402fc <play_tone>
			    play_tone(b4,200);
   404c0:	01316ed4 	movui	r4,50619
   404c4:	01403204 	movi	r5,200
   404c8:	00402fc0 	call	402fc <play_tone>
			    play_tone(g4,200);
   404cc:	013e47d4 	movui	r4,63775
   404d0:	01403204 	movi	r5,200
   404d4:	00402fc0 	call	402fc <play_tone>
			    play_tone(a4,200);
   404d8:	01377c54 	movui	r4,56817
   404dc:	01403204 	movi	r5,200
   404e0:	00402fc0 	call	402fc <play_tone>
			    play_tone(b4,100);
   404e4:	01316ed4 	movui	r4,50619
   404e8:	01401904 	movi	r5,100
   404ec:	00402fc0 	call	402fc <play_tone>
			    play_tone(c5,100);
   404f0:	012ea854 	movui	r4,47777
   404f4:	01401904 	movi	r5,100
   404f8:	00402fc0 	call	402fc <play_tone>
			    play_tone(b4,200);
   404fc:	01316ed4 	movui	r4,50619
   40500:	01403204 	movi	r5,200
   40504:	00402fc0 	call	402fc <play_tone>
			    play_tone(g4,200);
   40508:	013e47d4 	movui	r4,63775
   4050c:	01403204 	movi	r5,200
   40510:	00402fc0 	call	402fc <play_tone>
			    play_tone(a4,200);
   40514:	01377c54 	movui	r4,56817
   40518:	01403204 	movi	r5,200
   4051c:	00402fc0 	call	402fc <play_tone>
			    play_tone(b4,100);
   40520:	01316ed4 	movui	r4,50619
   40524:	01401904 	movi	r5,100
   40528:	00402fc0 	call	402fc <play_tone>
			    play_tone(c5,100);
   4052c:	012ea854 	movui	r4,47777
   40530:	01401904 	movi	r5,100
   40534:	00402fc0 	call	402fc <play_tone>
			    play_tone(b4,200);
   40538:	01316ed4 	movui	r4,50619
   4053c:	01403204 	movi	r5,200
   40540:	00402fc0 	call	402fc <play_tone>
			    play_tone(a4,200);
   40544:	01377c54 	movui	r4,56817
   40548:	01403204 	movi	r5,200
   4054c:	00402fc0 	call	402fc <play_tone>
			    play_tone(g4,200);
   40550:	013e47d4 	movui	r4,63775
   40554:	01403204 	movi	r5,200
   40558:	00402fc0 	call	402fc <play_tone>
			    play_tone(a4,200);
   4055c:	01377c54 	movui	r4,56817
   40560:	01403204 	movi	r5,200
   40564:	00402fc0 	call	402fc <play_tone>
			    play_tone(d4,400);
   40568:	01000074 	movhi	r4,1
   4056c:	21132244 	addi	r4,r4,19593
   40570:	01406404 	movi	r5,400
   40574:	00402fc0 	call	402fc <play_tone>
			    play_tone(b4,400);
   40578:	01316ed4 	movui	r4,50619
   4057c:	01406404 	movi	r5,400
   40580:	00402fc0 	call	402fc <play_tone>
			    play_tone(c5,200);
   40584:	012ea854 	movui	r4,47777
   40588:	01403204 	movi	r5,200
   4058c:	00402fc0 	call	402fc <play_tone>
			    play_tone(d5,200);
   40590:	01299154 	movui	r4,42565
   40594:	01403204 	movi	r5,200
   40598:	00402fc0 	call	402fc <play_tone>
			    play_tone(d5,200);
   4059c:	01299154 	movui	r4,42565
   405a0:	01403204 	movi	r5,200
   405a4:	00402fc0 	call	402fc <play_tone>
			    play_tone(c5,200);
   405a8:	012ea854 	movui	r4,47777
   405ac:	01403204 	movi	r5,200
   405b0:	00402fc0 	call	402fc <play_tone>
			    play_tone(b4,200);
   405b4:	01316ed4 	movui	r4,50619
   405b8:	01403204 	movi	r5,200
   405bc:	00402fc0 	call	402fc <play_tone>
			    play_tone(a4,200);
   405c0:	01377c54 	movui	r4,56817
   405c4:	01403204 	movi	r5,200
   405c8:	00402fc0 	call	402fc <play_tone>
			    play_tone(g4,200);
   405cc:	013e47d4 	movui	r4,63775
   405d0:	01403204 	movi	r5,200
   405d4:	00402fc0 	call	402fc <play_tone>
			    play_tone(g4,200);
   405d8:	013e47d4 	movui	r4,63775
   405dc:	01403204 	movi	r5,200
   405e0:	00402fc0 	call	402fc <play_tone>
			    play_tone(a4,200);
   405e4:	01377c54 	movui	r4,56817
   405e8:	01403204 	movi	r5,200
   405ec:	00402fc0 	call	402fc <play_tone>
			    play_tone(b4,200);
   405f0:	01316ed4 	movui	r4,50619
   405f4:	01403204 	movi	r5,200
   405f8:	00402fc0 	call	402fc <play_tone>
			    play_tone(a4,300);
   405fc:	01377c54 	movui	r4,56817
   40600:	01404b04 	movi	r5,300
   40604:	00402fc0 	call	402fc <play_tone>
			    play_tone(g4,100);
   40608:	013e47d4 	movui	r4,63775
   4060c:	01401904 	movi	r5,100
   40610:	00402fc0 	call	402fc <play_tone>
			    play_tone(g4,400);
   40614:	013e47d4 	movui	r4,63775
   40618:	01406404 	movi	r5,400
   4061c:	00402fc0 	call	402fc <play_tone>
			    play_tone(silence,400);
   40620:	01000044 	movi	r4,1
   40624:	01406404 	movi	r5,400
   40628:	00402fc0 	call	402fc <play_tone>

		  }
   4062c:	003f4a06 	br	40358 <__alt_data_end+0xfffca7f8>

00040630 <play_tone1>:
	IOWR(DIV_FREQ_BASE,0,nota);
	OSTimeDlyHMSM(0, 0, 0, time_ms*2);
	IOWR(DIV_FREQ_BASE,0,silence);
	OSTimeDlyHMSM(0, 0, 0, 10);
}
void play_tone1(int nota, int time_ms){
   40630:	defffe04 	addi	sp,sp,-8
   40634:	dc000015 	stw	r16,0(sp)
   40638:	dfc00115 	stw	ra,4(sp)
	IOWR(DIV_FREQ1_BASE,0,nota);
   4063c:	04041804 	movi	r16,4192
   40640:	81000035 	stwio	r4,0(r16)
	OSTimeDlyHMSM(0, 0, 0, time_ms*2);
   40644:	294f883a 	add	r7,r5,r5
   40648:	0009883a 	mov	r4,zero
   4064c:	000b883a 	mov	r5,zero
   40650:	000d883a 	mov	r6,zero
   40654:	39ffffcc 	andi	r7,r7,65535
   40658:	004ba880 	call	4ba88 <OSTimeDlyHMSM>
	IOWR(DIV_FREQ1_BASE,0,silence);
   4065c:	00800044 	movi	r2,1
   40660:	80800035 	stwio	r2,0(r16)
	OSTimeDlyHMSM(0, 0, 0, 10);
   40664:	0009883a 	mov	r4,zero
   40668:	000b883a 	mov	r5,zero
   4066c:	000d883a 	mov	r6,zero
   40670:	01c00284 	movi	r7,10
}
   40674:	dfc00117 	ldw	ra,4(sp)
   40678:	dc000017 	ldw	r16,0(sp)
   4067c:	dec00204 	addi	sp,sp,8
}
void play_tone1(int nota, int time_ms){
	IOWR(DIV_FREQ1_BASE,0,nota);
	OSTimeDlyHMSM(0, 0, 0, time_ms*2);
	IOWR(DIV_FREQ1_BASE,0,silence);
	OSTimeDlyHMSM(0, 0, 0, 10);
   40680:	004ba881 	jmpi	4ba88 <OSTimeDlyHMSM>

00040684 <leds_task>:
			    play_tone(silence,400);

		  }
}
void leds_task(void* pdata)
{
   40684:	deffff04 	addi	sp,sp,-4
   40688:	dfc00015 	stw	ra,0(sp)

  while (1)
  {
	    play_tone1(c4,400);
   4068c:	01000074 	movhi	r4,1
   40690:	211d5344 	addi	r4,r4,30029
   40694:	01406404 	movi	r5,400
   40698:	00406300 	call	40630 <play_tone1>
		play_tone1(f4,200);
   4069c:	01000074 	movhi	r4,1
   406a0:	2105e844 	addi	r4,r4,6049
   406a4:	01403204 	movi	r5,200
   406a8:	00406300 	call	40630 <play_tone1>
		play_tone1(f4,200);
   406ac:	01000074 	movhi	r4,1
   406b0:	2105e844 	addi	r4,r4,6049
   406b4:	01403204 	movi	r5,200
   406b8:	00406300 	call	40630 <play_tone1>
		play_tone1(f4,600);
   406bc:	01000074 	movhi	r4,1
   406c0:	2105e844 	addi	r4,r4,6049
   406c4:	01409604 	movi	r5,600
   406c8:	00406300 	call	40630 <play_tone1>
		play_tone1(g4,400);
   406cc:	013e47d4 	movui	r4,63775
   406d0:	01406404 	movi	r5,400
   406d4:	00406300 	call	40630 <play_tone1>
		play_tone1(a4,200);
   406d8:	01377c54 	movui	r4,56817
   406dc:	01403204 	movi	r5,200
   406e0:	00406300 	call	40630 <play_tone1>
		play_tone1(a4,200);
   406e4:	01377c54 	movui	r4,56817
   406e8:	01403204 	movi	r5,200
   406ec:	00406300 	call	40630 <play_tone1>
		play_tone1(a4,600);
   406f0:	01377c54 	movui	r4,56817
   406f4:	01409604 	movi	r5,600
   406f8:	00406300 	call	40630 <play_tone1>
		play_tone1(a4,200);
   406fc:	01377c54 	movui	r4,56817
   40700:	01403204 	movi	r5,200
   40704:	00406300 	call	40630 <play_tone1>
		play_tone1(g4,200);
   40708:	013e47d4 	movui	r4,63775
   4070c:	01403204 	movi	r5,200
   40710:	00406300 	call	40630 <play_tone1>
		play_tone1(a4,200);
   40714:	01377c54 	movui	r4,56817
   40718:	01403204 	movi	r5,200
   4071c:	00406300 	call	40630 <play_tone1>
		play_tone1(b4,600);
   40720:	01316ed4 	movui	r4,50619
   40724:	01409604 	movi	r5,600
   40728:	00406300 	call	40630 <play_tone1>
		play_tone1(e4,400);
   4072c:	01000074 	movhi	r4,1
   40730:	210a1084 	addi	r4,r4,10306
   40734:	01406404 	movi	r5,400
   40738:	00406300 	call	40630 <play_tone1>
		play_tone1(g4,400);
   4073c:	013e47d4 	movui	r4,63775
   40740:	01406404 	movi	r5,400
   40744:	00406300 	call	40630 <play_tone1>
		play_tone1(f4,1000);
   40748:	01000074 	movhi	r4,1
   4074c:	2105e844 	addi	r4,r4,6049
   40750:	0140fa04 	movi	r5,1000
   40754:	00406300 	call	40630 <play_tone1>
		play_tone1(c4,400);
   40758:	01000074 	movhi	r4,1
   4075c:	211d5344 	addi	r4,r4,30029
   40760:	01406404 	movi	r5,400
   40764:	00406300 	call	40630 <play_tone1>
		play_tone1(f4,200);
   40768:	01000074 	movhi	r4,1
   4076c:	2105e844 	addi	r4,r4,6049
   40770:	01403204 	movi	r5,200
   40774:	00406300 	call	40630 <play_tone1>
		play_tone1(f4,200);
   40778:	01000074 	movhi	r4,1
   4077c:	2105e844 	addi	r4,r4,6049
   40780:	01403204 	movi	r5,200
   40784:	00406300 	call	40630 <play_tone1>
		play_tone1(f4,600);
   40788:	01000074 	movhi	r4,1
   4078c:	2105e844 	addi	r4,r4,6049
   40790:	01409604 	movi	r5,600
   40794:	00406300 	call	40630 <play_tone1>
		play_tone1(g4,400);
   40798:	013e47d4 	movui	r4,63775
   4079c:	01406404 	movi	r5,400
   407a0:	00406300 	call	40630 <play_tone1>
		play_tone1(a4,200);
   407a4:	01377c54 	movui	r4,56817
   407a8:	01403204 	movi	r5,200
   407ac:	00406300 	call	40630 <play_tone1>
		play_tone1(a4,200);
   407b0:	01377c54 	movui	r4,56817
   407b4:	01403204 	movi	r5,200
   407b8:	00406300 	call	40630 <play_tone1>
		play_tone1(a4,600);
   407bc:	01377c54 	movui	r4,56817
   407c0:	01409604 	movi	r5,600
   407c4:	00406300 	call	40630 <play_tone1>
		play_tone1(a4,200);
   407c8:	01377c54 	movui	r4,56817
   407cc:	01403204 	movi	r5,200
   407d0:	00406300 	call	40630 <play_tone1>
		play_tone1(g4,200);
   407d4:	013e47d4 	movui	r4,63775
   407d8:	01403204 	movi	r5,200
   407dc:	00406300 	call	40630 <play_tone1>
		play_tone1(a4,200);
   407e0:	01377c54 	movui	r4,56817
   407e4:	01403204 	movi	r5,200
   407e8:	00406300 	call	40630 <play_tone1>
		play_tone1(b4,600);
   407ec:	01316ed4 	movui	r4,50619
   407f0:	01409604 	movi	r5,600
   407f4:	00406300 	call	40630 <play_tone1>
		play_tone1(e4,400);
   407f8:	01000074 	movhi	r4,1
   407fc:	210a1084 	addi	r4,r4,10306
   40800:	01406404 	movi	r5,400
   40804:	00406300 	call	40630 <play_tone1>
		play_tone1(g4,400);
   40808:	013e47d4 	movui	r4,63775
   4080c:	01406404 	movi	r5,400
   40810:	00406300 	call	40630 <play_tone1>
		play_tone1(f4,1000);
   40814:	01000074 	movhi	r4,1
   40818:	2105e844 	addi	r4,r4,6049
   4081c:	0140fa04 	movi	r5,1000
   40820:	00406300 	call	40630 <play_tone1>
		//
		play_tone1(c5,200);
   40824:	012ea854 	movui	r4,47777
   40828:	01403204 	movi	r5,200
   4082c:	00406300 	call	40630 <play_tone1>
		play_tone1(c5,200);
   40830:	012ea854 	movui	r4,47777
   40834:	01403204 	movi	r5,200
   40838:	00406300 	call	40630 <play_tone1>
		play_tone1(a4,200);
   4083c:	01377c54 	movui	r4,56817
   40840:	01403204 	movi	r5,200
   40844:	00406300 	call	40630 <play_tone1>
		play_tone1(d5,400);
   40848:	01299154 	movui	r4,42565
   4084c:	01406404 	movi	r5,400
   40850:	00406300 	call	40630 <play_tone1>
		play_tone1(c5,200);
   40854:	012ea854 	movui	r4,47777
   40858:	01403204 	movi	r5,200
   4085c:	00406300 	call	40630 <play_tone1>
		play_tone1(c5,200);
   40860:	012ea854 	movui	r4,47777
   40864:	01403204 	movi	r5,200
   40868:	00406300 	call	40630 <play_tone1>
		play_tone1(b4,200);
   4086c:	01316ed4 	movui	r4,50619
   40870:	01403204 	movi	r5,200
   40874:	00406300 	call	40630 <play_tone1>
		play_tone1(b4,400);
   40878:	01316ed4 	movui	r4,50619
   4087c:	01406404 	movi	r5,400
   40880:	00406300 	call	40630 <play_tone1>
		play_tone1(b4,200);
   40884:	01316ed4 	movui	r4,50619
   40888:	01403204 	movi	r5,200
   4088c:	00406300 	call	40630 <play_tone1>
		play_tone1(b4,200);
   40890:	01316ed4 	movui	r4,50619
   40894:	01403204 	movi	r5,200
   40898:	00406300 	call	40630 <play_tone1>
		play_tone1(g4,200);
   4089c:	013e47d4 	movui	r4,63775
   408a0:	01403204 	movi	r5,200
   408a4:	00406300 	call	40630 <play_tone1>
		play_tone1(c5,400);
   408a8:	012ea854 	movui	r4,47777
   408ac:	01406404 	movi	r5,400
   408b0:	00406300 	call	40630 <play_tone1>
		play_tone1(b4,200);
   408b4:	01316ed4 	movui	r4,50619
   408b8:	01403204 	movi	r5,200
   408bc:	00406300 	call	40630 <play_tone1>
		play_tone1(b4,200);
   408c0:	01316ed4 	movui	r4,50619
   408c4:	01403204 	movi	r5,200
   408c8:	00406300 	call	40630 <play_tone1>
		play_tone1(a4,200);
   408cc:	01377c54 	movui	r4,56817
   408d0:	01403204 	movi	r5,200
   408d4:	00406300 	call	40630 <play_tone1>
		play_tone1(a4,400);
   408d8:	01377c54 	movui	r4,56817
   408dc:	01406404 	movi	r5,400
   408e0:	00406300 	call	40630 <play_tone1>
  }
   408e4:	003f6906 	br	4068c <__alt_data_end+0xfffcab2c>

000408e8 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
  
  OSTaskCreateExt(task1,
   408e8:	01800174 	movhi	r6,5
		play_tone1(a4,400);
  }
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
   408ec:	defff904 	addi	sp,sp,-28
  
  OSTaskCreateExt(task1,
   408f0:	3192e804 	addi	r6,r6,19360
   408f4:	30f80104 	addi	r3,r6,-8188
		play_tone1(a4,400);
  }
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
   408f8:	dc000515 	stw	r16,20(sp)
  
  OSTaskCreateExt(task1,
   408fc:	00800044 	movi	r2,1
   40900:	04020004 	movi	r16,2048
   40904:	01000134 	movhi	r4,4
   40908:	d8c00115 	stw	r3,4(sp)
   4090c:	21009a04 	addi	r4,r4,616
   40910:	000b883a 	mov	r5,zero
   40914:	100f883a 	mov	r7,r2
   40918:	d8800015 	stw	r2,0(sp)
   4091c:	dc000215 	stw	r16,8(sp)
   40920:	d8000315 	stw	zero,12(sp)
   40924:	d8000415 	stw	zero,16(sp)
		play_tone1(a4,400);
  }
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
   40928:	dfc00615 	stw	ra,24(sp)
  
  OSTaskCreateExt(task1,
   4092c:	004a7480 	call	4a748 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
   40930:	01800174 	movhi	r6,5
   40934:	319ae804 	addi	r6,r6,27552
   40938:	30f80104 	addi	r3,r6,-8188
   4093c:	00800084 	movi	r2,2
   40940:	01000134 	movhi	r4,4
   40944:	d8c00115 	stw	r3,4(sp)
   40948:	2100d404 	addi	r4,r4,848
   4094c:	000b883a 	mov	r5,zero
   40950:	100f883a 	mov	r7,r2
   40954:	d8800015 	stw	r2,0(sp)
   40958:	dc000215 	stw	r16,8(sp)
   4095c:	d8000315 	stw	zero,12(sp)
   40960:	d8000415 	stw	zero,16(sp)
   40964:	004a7480 	call	4a748 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSTaskCreateExt(leds_task,
   40968:	018001b4 	movhi	r6,6
   4096c:	31a2e804 	addi	r6,r6,-29792
   40970:	30f80104 	addi	r3,r6,-8188
   40974:	008000c4 	movi	r2,3
   40978:	01000134 	movhi	r4,4
   4097c:	2101a104 	addi	r4,r4,1668
   40980:	000b883a 	mov	r5,zero
   40984:	100f883a 	mov	r7,r2
   40988:	d8c00115 	stw	r3,4(sp)
   4098c:	d8800015 	stw	r2,0(sp)
   40990:	dc000215 	stw	r16,8(sp)
   40994:	d8000315 	stw	zero,12(sp)
   40998:	d8000415 	stw	zero,16(sp)
   4099c:	004a7480 	call	4a748 <OSTaskCreateExt>
                   LEDS_PRIORITY,
                   leds_stk,
                   TASK_STACKSIZE,
                   NULL,
                   0);
  OSStart();
   409a0:	0044dac0 	call	44dac <OSStart>
  return 0;
}
   409a4:	0005883a 	mov	r2,zero
   409a8:	dfc00617 	ldw	ra,24(sp)
   409ac:	dc000517 	ldw	r16,20(sp)
   409b0:	dec00704 	addi	sp,sp,28
   409b4:	f800283a 	ret

000409b8 <_puts_r>:
   409b8:	defff604 	addi	sp,sp,-40
   409bc:	dc000715 	stw	r16,28(sp)
   409c0:	2021883a 	mov	r16,r4
   409c4:	2809883a 	mov	r4,r5
   409c8:	dc400815 	stw	r17,32(sp)
   409cc:	dfc00915 	stw	ra,36(sp)
   409d0:	2823883a 	mov	r17,r5
   409d4:	0040a840 	call	40a84 <strlen>
   409d8:	00c00174 	movhi	r3,5
   409dc:	18c39e04 	addi	r3,r3,3704
   409e0:	18c00017 	ldw	r3,0(r3)
   409e4:	11000044 	addi	r4,r2,1
   409e8:	d8800115 	stw	r2,4(sp)
   409ec:	18c00217 	ldw	r3,8(r3)
   409f0:	01400174 	movhi	r5,5
   409f4:	297c8004 	addi	r5,r5,-3584
   409f8:	1880030b 	ldhu	r2,12(r3)
   409fc:	d9400215 	stw	r5,8(sp)
   40a00:	d9000615 	stw	r4,24(sp)
   40a04:	01400044 	movi	r5,1
   40a08:	01000084 	movi	r4,2
   40a0c:	d9000515 	stw	r4,20(sp)
   40a10:	dc400015 	stw	r17,0(sp)
   40a14:	d9400315 	stw	r5,12(sp)
   40a18:	dec00415 	stw	sp,16(sp)
   40a1c:	1108000c 	andi	r4,r2,8192
   40a20:	2000061e 	bne	r4,zero,40a3c <_puts_r+0x84>
   40a24:	19401917 	ldw	r5,100(r3)
   40a28:	0137ffc4 	movi	r4,-8193
   40a2c:	10880014 	ori	r2,r2,8192
   40a30:	2908703a 	and	r4,r5,r4
   40a34:	1880030d 	sth	r2,12(r3)
   40a38:	19001915 	stw	r4,100(r3)
   40a3c:	81400217 	ldw	r5,8(r16)
   40a40:	8009883a 	mov	r4,r16
   40a44:	d9800404 	addi	r6,sp,16
   40a48:	0040b1c0 	call	40b1c <__sfvwrite_r>
   40a4c:	1000061e 	bne	r2,zero,40a68 <_puts_r+0xb0>
   40a50:	00800284 	movi	r2,10
   40a54:	dfc00917 	ldw	ra,36(sp)
   40a58:	dc400817 	ldw	r17,32(sp)
   40a5c:	dc000717 	ldw	r16,28(sp)
   40a60:	dec00a04 	addi	sp,sp,40
   40a64:	f800283a 	ret
   40a68:	00bfffc4 	movi	r2,-1
   40a6c:	003ff906 	br	40a54 <__alt_data_end+0xfffcaef4>

00040a70 <puts>:
   40a70:	00800174 	movhi	r2,5
   40a74:	10839e04 	addi	r2,r2,3704
   40a78:	200b883a 	mov	r5,r4
   40a7c:	11000017 	ldw	r4,0(r2)
   40a80:	00409b81 	jmpi	409b8 <_puts_r>

00040a84 <strlen>:
   40a84:	208000cc 	andi	r2,r4,3
   40a88:	10002026 	beq	r2,zero,40b0c <strlen+0x88>
   40a8c:	20800007 	ldb	r2,0(r4)
   40a90:	10002026 	beq	r2,zero,40b14 <strlen+0x90>
   40a94:	2005883a 	mov	r2,r4
   40a98:	00000206 	br	40aa4 <strlen+0x20>
   40a9c:	10c00007 	ldb	r3,0(r2)
   40aa0:	18001826 	beq	r3,zero,40b04 <strlen+0x80>
   40aa4:	10800044 	addi	r2,r2,1
   40aa8:	10c000cc 	andi	r3,r2,3
   40aac:	183ffb1e 	bne	r3,zero,40a9c <__alt_data_end+0xfffcaf3c>
   40ab0:	10c00017 	ldw	r3,0(r2)
   40ab4:	01ffbff4 	movhi	r7,65279
   40ab8:	39ffbfc4 	addi	r7,r7,-257
   40abc:	00ca303a 	nor	r5,zero,r3
   40ac0:	01a02074 	movhi	r6,32897
   40ac4:	19c7883a 	add	r3,r3,r7
   40ac8:	31a02004 	addi	r6,r6,-32640
   40acc:	1946703a 	and	r3,r3,r5
   40ad0:	1986703a 	and	r3,r3,r6
   40ad4:	1800091e 	bne	r3,zero,40afc <strlen+0x78>
   40ad8:	10800104 	addi	r2,r2,4
   40adc:	10c00017 	ldw	r3,0(r2)
   40ae0:	19cb883a 	add	r5,r3,r7
   40ae4:	00c6303a 	nor	r3,zero,r3
   40ae8:	28c6703a 	and	r3,r5,r3
   40aec:	1986703a 	and	r3,r3,r6
   40af0:	183ff926 	beq	r3,zero,40ad8 <__alt_data_end+0xfffcaf78>
   40af4:	00000106 	br	40afc <strlen+0x78>
   40af8:	10800044 	addi	r2,r2,1
   40afc:	10c00007 	ldb	r3,0(r2)
   40b00:	183ffd1e 	bne	r3,zero,40af8 <__alt_data_end+0xfffcaf98>
   40b04:	1105c83a 	sub	r2,r2,r4
   40b08:	f800283a 	ret
   40b0c:	2005883a 	mov	r2,r4
   40b10:	003fe706 	br	40ab0 <__alt_data_end+0xfffcaf50>
   40b14:	0005883a 	mov	r2,zero
   40b18:	f800283a 	ret

00040b1c <__sfvwrite_r>:
   40b1c:	30800217 	ldw	r2,8(r6)
   40b20:	10004526 	beq	r2,zero,40c38 <__sfvwrite_r+0x11c>
   40b24:	28c0030b 	ldhu	r3,12(r5)
   40b28:	defff404 	addi	sp,sp,-48
   40b2c:	dd400715 	stw	r21,28(sp)
   40b30:	dcc00515 	stw	r19,20(sp)
   40b34:	dc000215 	stw	r16,8(sp)
   40b38:	dfc00b15 	stw	ra,44(sp)
   40b3c:	df000a15 	stw	fp,40(sp)
   40b40:	ddc00915 	stw	r23,36(sp)
   40b44:	dd800815 	stw	r22,32(sp)
   40b48:	dd000615 	stw	r20,24(sp)
   40b4c:	dc800415 	stw	r18,16(sp)
   40b50:	dc400315 	stw	r17,12(sp)
   40b54:	1880020c 	andi	r2,r3,8
   40b58:	2821883a 	mov	r16,r5
   40b5c:	202b883a 	mov	r21,r4
   40b60:	3027883a 	mov	r19,r6
   40b64:	10002526 	beq	r2,zero,40bfc <__sfvwrite_r+0xe0>
   40b68:	28800417 	ldw	r2,16(r5)
   40b6c:	10002326 	beq	r2,zero,40bfc <__sfvwrite_r+0xe0>
   40b70:	1880008c 	andi	r2,r3,2
   40b74:	9c400017 	ldw	r17,0(r19)
   40b78:	10003126 	beq	r2,zero,40c40 <__sfvwrite_r+0x124>
   40b7c:	0029883a 	mov	r20,zero
   40b80:	0025883a 	mov	r18,zero
   40b84:	05810004 	movi	r22,1024
   40b88:	a00d883a 	mov	r6,r20
   40b8c:	a809883a 	mov	r4,r21
   40b90:	90002526 	beq	r18,zero,40c28 <__sfvwrite_r+0x10c>
   40b94:	900f883a 	mov	r7,r18
   40b98:	81400717 	ldw	r5,28(r16)
   40b9c:	b480012e 	bgeu	r22,r18,40ba4 <__sfvwrite_r+0x88>
   40ba0:	01c10004 	movi	r7,1024
   40ba4:	80800917 	ldw	r2,36(r16)
   40ba8:	103ee83a 	callr	r2
   40bac:	0080510e 	bge	zero,r2,40cf4 <__sfvwrite_r+0x1d8>
   40bb0:	98c00217 	ldw	r3,8(r19)
   40bb4:	a0a9883a 	add	r20,r20,r2
   40bb8:	90a5c83a 	sub	r18,r18,r2
   40bbc:	1885c83a 	sub	r2,r3,r2
   40bc0:	98800215 	stw	r2,8(r19)
   40bc4:	103ff01e 	bne	r2,zero,40b88 <__alt_data_end+0xfffcb028>
   40bc8:	0005883a 	mov	r2,zero
   40bcc:	dfc00b17 	ldw	ra,44(sp)
   40bd0:	df000a17 	ldw	fp,40(sp)
   40bd4:	ddc00917 	ldw	r23,36(sp)
   40bd8:	dd800817 	ldw	r22,32(sp)
   40bdc:	dd400717 	ldw	r21,28(sp)
   40be0:	dd000617 	ldw	r20,24(sp)
   40be4:	dcc00517 	ldw	r19,20(sp)
   40be8:	dc800417 	ldw	r18,16(sp)
   40bec:	dc400317 	ldw	r17,12(sp)
   40bf0:	dc000217 	ldw	r16,8(sp)
   40bf4:	dec00c04 	addi	sp,sp,48
   40bf8:	f800283a 	ret
   40bfc:	a809883a 	mov	r4,r21
   40c00:	800b883a 	mov	r5,r16
   40c04:	00420d80 	call	420d8 <__swsetup_r>
   40c08:	80c0030b 	ldhu	r3,12(r16)
   40c0c:	103fd826 	beq	r2,zero,40b70 <__alt_data_end+0xfffcb010>
   40c10:	18c01014 	ori	r3,r3,64
   40c14:	80c0030d 	sth	r3,12(r16)
   40c18:	00c00244 	movi	r3,9
   40c1c:	00bfffc4 	movi	r2,-1
   40c20:	a8c00015 	stw	r3,0(r21)
   40c24:	003fe906 	br	40bcc <__alt_data_end+0xfffcb06c>
   40c28:	8d000017 	ldw	r20,0(r17)
   40c2c:	8c800117 	ldw	r18,4(r17)
   40c30:	8c400204 	addi	r17,r17,8
   40c34:	003fd406 	br	40b88 <__alt_data_end+0xfffcb028>
   40c38:	0005883a 	mov	r2,zero
   40c3c:	f800283a 	ret
   40c40:	1880004c 	andi	r2,r3,1
   40c44:	1000301e 	bne	r2,zero,40d08 <__sfvwrite_r+0x1ec>
   40c48:	002f883a 	mov	r23,zero
   40c4c:	0025883a 	mov	r18,zero
   40c50:	90001c26 	beq	r18,zero,40cc4 <__sfvwrite_r+0x1a8>
   40c54:	1880800c 	andi	r2,r3,512
   40c58:	85000217 	ldw	r20,8(r16)
   40c5c:	10006c26 	beq	r2,zero,40e10 <__sfvwrite_r+0x2f4>
   40c60:	a02d883a 	mov	r22,r20
   40c64:	95008536 	bltu	r18,r20,40e7c <__sfvwrite_r+0x360>
   40c68:	1881200c 	andi	r2,r3,1152
   40c6c:	10009d1e 	bne	r2,zero,40ee4 <__sfvwrite_r+0x3c8>
   40c70:	81000017 	ldw	r4,0(r16)
   40c74:	a039883a 	mov	fp,r20
   40c78:	9029883a 	mov	r20,r18
   40c7c:	b80b883a 	mov	r5,r23
   40c80:	b00d883a 	mov	r6,r22
   40c84:	00419880 	call	41988 <memmove>
   40c88:	80c00217 	ldw	r3,8(r16)
   40c8c:	81000017 	ldw	r4,0(r16)
   40c90:	9005883a 	mov	r2,r18
   40c94:	1f39c83a 	sub	fp,r3,fp
   40c98:	258f883a 	add	r7,r4,r22
   40c9c:	87000215 	stw	fp,8(r16)
   40ca0:	81c00015 	stw	r7,0(r16)
   40ca4:	98c00217 	ldw	r3,8(r19)
   40ca8:	b8af883a 	add	r23,r23,r2
   40cac:	90a5c83a 	sub	r18,r18,r2
   40cb0:	1d05c83a 	sub	r2,r3,r20
   40cb4:	98800215 	stw	r2,8(r19)
   40cb8:	103fc326 	beq	r2,zero,40bc8 <__alt_data_end+0xfffcb068>
   40cbc:	80c0030b 	ldhu	r3,12(r16)
   40cc0:	903fe41e 	bne	r18,zero,40c54 <__alt_data_end+0xfffcb0f4>
   40cc4:	8dc00017 	ldw	r23,0(r17)
   40cc8:	8c800117 	ldw	r18,4(r17)
   40ccc:	8c400204 	addi	r17,r17,8
   40cd0:	003fdf06 	br	40c50 <__alt_data_end+0xfffcb0f0>
   40cd4:	0041ae40 	call	41ae4 <_realloc_r>
   40cd8:	102d883a 	mov	r22,r2
   40cdc:	1000a01e 	bne	r2,zero,40f60 <__sfvwrite_r+0x444>
   40ce0:	81400417 	ldw	r5,16(r16)
   40ce4:	a809883a 	mov	r4,r21
   40ce8:	00429380 	call	42938 <_free_r>
   40cec:	00800304 	movi	r2,12
   40cf0:	a8800015 	stw	r2,0(r21)
   40cf4:	80c0030b 	ldhu	r3,12(r16)
   40cf8:	00bfffc4 	movi	r2,-1
   40cfc:	18c01014 	ori	r3,r3,64
   40d00:	80c0030d 	sth	r3,12(r16)
   40d04:	003fb106 	br	40bcc <__alt_data_end+0xfffcb06c>
   40d08:	0029883a 	mov	r20,zero
   40d0c:	0011883a 	mov	r8,zero
   40d10:	0039883a 	mov	fp,zero
   40d14:	0025883a 	mov	r18,zero
   40d18:	90001f26 	beq	r18,zero,40d98 <__sfvwrite_r+0x27c>
   40d1c:	40006826 	beq	r8,zero,40ec0 <__sfvwrite_r+0x3a4>
   40d20:	a02f883a 	mov	r23,r20
   40d24:	9500012e 	bgeu	r18,r20,40d2c <__sfvwrite_r+0x210>
   40d28:	902f883a 	mov	r23,r18
   40d2c:	81000017 	ldw	r4,0(r16)
   40d30:	80800417 	ldw	r2,16(r16)
   40d34:	b82d883a 	mov	r22,r23
   40d38:	81800217 	ldw	r6,8(r16)
   40d3c:	81c00517 	ldw	r7,20(r16)
   40d40:	1100022e 	bgeu	r2,r4,40d4c <__sfvwrite_r+0x230>
   40d44:	31c7883a 	add	r3,r6,r7
   40d48:	1dc01816 	blt	r3,r23,40dac <__sfvwrite_r+0x290>
   40d4c:	b9c03f16 	blt	r23,r7,40e4c <__sfvwrite_r+0x330>
   40d50:	80800917 	ldw	r2,36(r16)
   40d54:	81400717 	ldw	r5,28(r16)
   40d58:	a809883a 	mov	r4,r21
   40d5c:	da000115 	stw	r8,4(sp)
   40d60:	e00d883a 	mov	r6,fp
   40d64:	103ee83a 	callr	r2
   40d68:	102d883a 	mov	r22,r2
   40d6c:	da000117 	ldw	r8,4(sp)
   40d70:	00bfe00e 	bge	zero,r2,40cf4 <__alt_data_end+0xfffcb194>
   40d74:	a5a9c83a 	sub	r20,r20,r22
   40d78:	a0001f26 	beq	r20,zero,40df8 <__sfvwrite_r+0x2dc>
   40d7c:	98800217 	ldw	r2,8(r19)
   40d80:	e5b9883a 	add	fp,fp,r22
   40d84:	95a5c83a 	sub	r18,r18,r22
   40d88:	15adc83a 	sub	r22,r2,r22
   40d8c:	9d800215 	stw	r22,8(r19)
   40d90:	b03f8d26 	beq	r22,zero,40bc8 <__alt_data_end+0xfffcb068>
   40d94:	903fe11e 	bne	r18,zero,40d1c <__alt_data_end+0xfffcb1bc>
   40d98:	8f000017 	ldw	fp,0(r17)
   40d9c:	8c800117 	ldw	r18,4(r17)
   40da0:	0011883a 	mov	r8,zero
   40da4:	8c400204 	addi	r17,r17,8
   40da8:	003fdb06 	br	40d18 <__alt_data_end+0xfffcb1b8>
   40dac:	180d883a 	mov	r6,r3
   40db0:	e00b883a 	mov	r5,fp
   40db4:	da000115 	stw	r8,4(sp)
   40db8:	d8c00015 	stw	r3,0(sp)
   40dbc:	00419880 	call	41988 <memmove>
   40dc0:	d8c00017 	ldw	r3,0(sp)
   40dc4:	80800017 	ldw	r2,0(r16)
   40dc8:	a809883a 	mov	r4,r21
   40dcc:	800b883a 	mov	r5,r16
   40dd0:	10c5883a 	add	r2,r2,r3
   40dd4:	80800015 	stw	r2,0(r16)
   40dd8:	d8c00015 	stw	r3,0(sp)
   40ddc:	00422080 	call	42208 <_fflush_r>
   40de0:	d8c00017 	ldw	r3,0(sp)
   40de4:	da000117 	ldw	r8,4(sp)
   40de8:	103fc21e 	bne	r2,zero,40cf4 <__alt_data_end+0xfffcb194>
   40dec:	182d883a 	mov	r22,r3
   40df0:	a5a9c83a 	sub	r20,r20,r22
   40df4:	a03fe11e 	bne	r20,zero,40d7c <__alt_data_end+0xfffcb21c>
   40df8:	a809883a 	mov	r4,r21
   40dfc:	800b883a 	mov	r5,r16
   40e00:	00422080 	call	42208 <_fflush_r>
   40e04:	103fbb1e 	bne	r2,zero,40cf4 <__alt_data_end+0xfffcb194>
   40e08:	0011883a 	mov	r8,zero
   40e0c:	003fdb06 	br	40d7c <__alt_data_end+0xfffcb21c>
   40e10:	81000017 	ldw	r4,0(r16)
   40e14:	80800417 	ldw	r2,16(r16)
   40e18:	1100012e 	bgeu	r2,r4,40e20 <__sfvwrite_r+0x304>
   40e1c:	a4805a36 	bltu	r20,r18,40f88 <__sfvwrite_r+0x46c>
   40e20:	81c00517 	ldw	r7,20(r16)
   40e24:	91c01a36 	bltu	r18,r7,40e90 <__sfvwrite_r+0x374>
   40e28:	80800917 	ldw	r2,36(r16)
   40e2c:	81400717 	ldw	r5,28(r16)
   40e30:	a809883a 	mov	r4,r21
   40e34:	b80d883a 	mov	r6,r23
   40e38:	103ee83a 	callr	r2
   40e3c:	1029883a 	mov	r20,r2
   40e40:	00bfac0e 	bge	zero,r2,40cf4 <__alt_data_end+0xfffcb194>
   40e44:	a005883a 	mov	r2,r20
   40e48:	003f9606 	br	40ca4 <__alt_data_end+0xfffcb144>
   40e4c:	b80d883a 	mov	r6,r23
   40e50:	e00b883a 	mov	r5,fp
   40e54:	da000115 	stw	r8,4(sp)
   40e58:	00419880 	call	41988 <memmove>
   40e5c:	80800217 	ldw	r2,8(r16)
   40e60:	80c00017 	ldw	r3,0(r16)
   40e64:	da000117 	ldw	r8,4(sp)
   40e68:	15c5c83a 	sub	r2,r2,r23
   40e6c:	1def883a 	add	r23,r3,r23
   40e70:	80800215 	stw	r2,8(r16)
   40e74:	85c00015 	stw	r23,0(r16)
   40e78:	003fbe06 	br	40d74 <__alt_data_end+0xfffcb214>
   40e7c:	81000017 	ldw	r4,0(r16)
   40e80:	9039883a 	mov	fp,r18
   40e84:	9029883a 	mov	r20,r18
   40e88:	902d883a 	mov	r22,r18
   40e8c:	003f7b06 	br	40c7c <__alt_data_end+0xfffcb11c>
   40e90:	b80b883a 	mov	r5,r23
   40e94:	900d883a 	mov	r6,r18
   40e98:	00419880 	call	41988 <memmove>
   40e9c:	80c00217 	ldw	r3,8(r16)
   40ea0:	80800017 	ldw	r2,0(r16)
   40ea4:	9029883a 	mov	r20,r18
   40ea8:	1c87c83a 	sub	r3,r3,r18
   40eac:	1485883a 	add	r2,r2,r18
   40eb0:	80800015 	stw	r2,0(r16)
   40eb4:	80c00215 	stw	r3,8(r16)
   40eb8:	9005883a 	mov	r2,r18
   40ebc:	003f7906 	br	40ca4 <__alt_data_end+0xfffcb144>
   40ec0:	e009883a 	mov	r4,fp
   40ec4:	01400284 	movi	r5,10
   40ec8:	900d883a 	mov	r6,r18
   40ecc:	00417680 	call	41768 <memchr>
   40ed0:	10003826 	beq	r2,zero,40fb4 <__sfvwrite_r+0x498>
   40ed4:	10800044 	addi	r2,r2,1
   40ed8:	1729c83a 	sub	r20,r2,fp
   40edc:	02000044 	movi	r8,1
   40ee0:	003f8f06 	br	40d20 <__alt_data_end+0xfffcb1c0>
   40ee4:	80800517 	ldw	r2,20(r16)
   40ee8:	81400417 	ldw	r5,16(r16)
   40eec:	87000017 	ldw	fp,0(r16)
   40ef0:	10a9883a 	add	r20,r2,r2
   40ef4:	a085883a 	add	r2,r20,r2
   40ef8:	1028d7fa 	srli	r20,r2,31
   40efc:	e179c83a 	sub	fp,fp,r5
   40f00:	e1000044 	addi	r4,fp,1
   40f04:	a085883a 	add	r2,r20,r2
   40f08:	1029d07a 	srai	r20,r2,1
   40f0c:	2485883a 	add	r2,r4,r18
   40f10:	a00d883a 	mov	r6,r20
   40f14:	a080022e 	bgeu	r20,r2,40f20 <__sfvwrite_r+0x404>
   40f18:	1029883a 	mov	r20,r2
   40f1c:	100d883a 	mov	r6,r2
   40f20:	18c1000c 	andi	r3,r3,1024
   40f24:	a809883a 	mov	r4,r21
   40f28:	183f6a26 	beq	r3,zero,40cd4 <__alt_data_end+0xfffcb174>
   40f2c:	300b883a 	mov	r5,r6
   40f30:	0040fc00 	call	40fc0 <_malloc_r>
   40f34:	102d883a 	mov	r22,r2
   40f38:	103f6c26 	beq	r2,zero,40cec <__alt_data_end+0xfffcb18c>
   40f3c:	81400417 	ldw	r5,16(r16)
   40f40:	1009883a 	mov	r4,r2
   40f44:	e00d883a 	mov	r6,fp
   40f48:	00418500 	call	41850 <memcpy>
   40f4c:	8080030b 	ldhu	r2,12(r16)
   40f50:	00fedfc4 	movi	r3,-1153
   40f54:	10c4703a 	and	r2,r2,r3
   40f58:	10802014 	ori	r2,r2,128
   40f5c:	8080030d 	sth	r2,12(r16)
   40f60:	b709883a 	add	r4,r22,fp
   40f64:	a707c83a 	sub	r3,r20,fp
   40f68:	85800415 	stw	r22,16(r16)
   40f6c:	85000515 	stw	r20,20(r16)
   40f70:	81000015 	stw	r4,0(r16)
   40f74:	9039883a 	mov	fp,r18
   40f78:	80c00215 	stw	r3,8(r16)
   40f7c:	9029883a 	mov	r20,r18
   40f80:	902d883a 	mov	r22,r18
   40f84:	003f3d06 	br	40c7c <__alt_data_end+0xfffcb11c>
   40f88:	b80b883a 	mov	r5,r23
   40f8c:	a00d883a 	mov	r6,r20
   40f90:	00419880 	call	41988 <memmove>
   40f94:	80800017 	ldw	r2,0(r16)
   40f98:	a809883a 	mov	r4,r21
   40f9c:	800b883a 	mov	r5,r16
   40fa0:	1505883a 	add	r2,r2,r20
   40fa4:	80800015 	stw	r2,0(r16)
   40fa8:	00422080 	call	42208 <_fflush_r>
   40fac:	103fa526 	beq	r2,zero,40e44 <__alt_data_end+0xfffcb2e4>
   40fb0:	003f5006 	br	40cf4 <__alt_data_end+0xfffcb194>
   40fb4:	95000044 	addi	r20,r18,1
   40fb8:	02000044 	movi	r8,1
   40fbc:	003f5806 	br	40d20 <__alt_data_end+0xfffcb1c0>

00040fc0 <_malloc_r>:
   40fc0:	defff504 	addi	sp,sp,-44
   40fc4:	dc800315 	stw	r18,12(sp)
   40fc8:	dfc00a15 	stw	ra,40(sp)
   40fcc:	df000915 	stw	fp,36(sp)
   40fd0:	ddc00815 	stw	r23,32(sp)
   40fd4:	dd800715 	stw	r22,28(sp)
   40fd8:	dd400615 	stw	r21,24(sp)
   40fdc:	dd000515 	stw	r20,20(sp)
   40fe0:	dcc00415 	stw	r19,16(sp)
   40fe4:	dc400215 	stw	r17,8(sp)
   40fe8:	dc000115 	stw	r16,4(sp)
   40fec:	288002c4 	addi	r2,r5,11
   40ff0:	00c00584 	movi	r3,22
   40ff4:	2025883a 	mov	r18,r4
   40ff8:	18802a2e 	bgeu	r3,r2,410a4 <_malloc_r+0xe4>
   40ffc:	047ffe04 	movi	r17,-8
   41000:	1462703a 	and	r17,r2,r17
   41004:	88009e16 	blt	r17,zero,41280 <_malloc_r+0x2c0>
   41008:	89409d36 	bltu	r17,r5,41280 <_malloc_r+0x2c0>
   4100c:	004402c0 	call	4402c <__malloc_lock>
   41010:	00807dc4 	movi	r2,503
   41014:	14402736 	bltu	r2,r17,410b4 <_malloc_r+0xf4>
   41018:	8806d0fa 	srli	r3,r17,3
   4101c:	04c00174 	movhi	r19,5
   41020:	9cfde204 	addi	r19,r19,-2168
   41024:	18c5883a 	add	r2,r3,r3
   41028:	1085883a 	add	r2,r2,r2
   4102c:	1085883a 	add	r2,r2,r2
   41030:	9885883a 	add	r2,r19,r2
   41034:	14000317 	ldw	r16,12(r2)
   41038:	80814a26 	beq	r16,r2,41564 <_malloc_r+0x5a4>
   4103c:	80c00117 	ldw	r3,4(r16)
   41040:	81000317 	ldw	r4,12(r16)
   41044:	00bfff04 	movi	r2,-4
   41048:	1884703a 	and	r2,r3,r2
   4104c:	81400217 	ldw	r5,8(r16)
   41050:	8085883a 	add	r2,r16,r2
   41054:	10c00117 	ldw	r3,4(r2)
   41058:	29000315 	stw	r4,12(r5)
   4105c:	21400215 	stw	r5,8(r4)
   41060:	18c00054 	ori	r3,r3,1
   41064:	10c00115 	stw	r3,4(r2)
   41068:	9009883a 	mov	r4,r18
   4106c:	004414c0 	call	4414c <__malloc_unlock>
   41070:	80800204 	addi	r2,r16,8
   41074:	dfc00a17 	ldw	ra,40(sp)
   41078:	df000917 	ldw	fp,36(sp)
   4107c:	ddc00817 	ldw	r23,32(sp)
   41080:	dd800717 	ldw	r22,28(sp)
   41084:	dd400617 	ldw	r21,24(sp)
   41088:	dd000517 	ldw	r20,20(sp)
   4108c:	dcc00417 	ldw	r19,16(sp)
   41090:	dc800317 	ldw	r18,12(sp)
   41094:	dc400217 	ldw	r17,8(sp)
   41098:	dc000117 	ldw	r16,4(sp)
   4109c:	dec00b04 	addi	sp,sp,44
   410a0:	f800283a 	ret
   410a4:	04400404 	movi	r17,16
   410a8:	89407536 	bltu	r17,r5,41280 <_malloc_r+0x2c0>
   410ac:	004402c0 	call	4402c <__malloc_lock>
   410b0:	003fd906 	br	41018 <__alt_data_end+0xfffcb4b8>
   410b4:	8806d27a 	srli	r3,r17,9
   410b8:	18007526 	beq	r3,zero,41290 <_malloc_r+0x2d0>
   410bc:	00800104 	movi	r2,4
   410c0:	10c0ef36 	bltu	r2,r3,41480 <_malloc_r+0x4c0>
   410c4:	8806d1ba 	srli	r3,r17,6
   410c8:	19c00e04 	addi	r7,r3,56
   410cc:	39cb883a 	add	r5,r7,r7
   410d0:	04c00174 	movhi	r19,5
   410d4:	294b883a 	add	r5,r5,r5
   410d8:	9cfde204 	addi	r19,r19,-2168
   410dc:	294b883a 	add	r5,r5,r5
   410e0:	994b883a 	add	r5,r19,r5
   410e4:	2c000317 	ldw	r16,12(r5)
   410e8:	2c000e26 	beq	r5,r16,41124 <_malloc_r+0x164>
   410ec:	80800117 	ldw	r2,4(r16)
   410f0:	01bfff04 	movi	r6,-4
   410f4:	010003c4 	movi	r4,15
   410f8:	1184703a 	and	r2,r2,r6
   410fc:	1447c83a 	sub	r3,r2,r17
   41100:	20c00716 	blt	r4,r3,41120 <_malloc_r+0x160>
   41104:	1800650e 	bge	r3,zero,4129c <_malloc_r+0x2dc>
   41108:	84000317 	ldw	r16,12(r16)
   4110c:	2c000526 	beq	r5,r16,41124 <_malloc_r+0x164>
   41110:	80800117 	ldw	r2,4(r16)
   41114:	1184703a 	and	r2,r2,r6
   41118:	1447c83a 	sub	r3,r2,r17
   4111c:	20fff90e 	bge	r4,r3,41104 <__alt_data_end+0xfffcb5a4>
   41120:	39ffffc4 	addi	r7,r7,-1
   41124:	38c00044 	addi	r3,r7,1
   41128:	01800174 	movhi	r6,5
   4112c:	9c000417 	ldw	r16,16(r19)
   41130:	31bde204 	addi	r6,r6,-2168
   41134:	32400204 	addi	r9,r6,8
   41138:	82410326 	beq	r16,r9,41548 <_malloc_r+0x588>
   4113c:	81000117 	ldw	r4,4(r16)
   41140:	00bfff04 	movi	r2,-4
   41144:	208e703a 	and	r7,r4,r2
   41148:	3c45c83a 	sub	r2,r7,r17
   4114c:	010003c4 	movi	r4,15
   41150:	2080ee16 	blt	r4,r2,4150c <_malloc_r+0x54c>
   41154:	32400515 	stw	r9,20(r6)
   41158:	32400415 	stw	r9,16(r6)
   4115c:	1000510e 	bge	r2,zero,412a4 <_malloc_r+0x2e4>
   41160:	00807fc4 	movi	r2,511
   41164:	11c0ce36 	bltu	r2,r7,414a0 <_malloc_r+0x4e0>
   41168:	3808d0fa 	srli	r4,r7,3
   4116c:	01c00044 	movi	r7,1
   41170:	30800117 	ldw	r2,4(r6)
   41174:	210b883a 	add	r5,r4,r4
   41178:	294b883a 	add	r5,r5,r5
   4117c:	2009d0ba 	srai	r4,r4,2
   41180:	294b883a 	add	r5,r5,r5
   41184:	298b883a 	add	r5,r5,r6
   41188:	2a000217 	ldw	r8,8(r5)
   4118c:	3908983a 	sll	r4,r7,r4
   41190:	81400315 	stw	r5,12(r16)
   41194:	82000215 	stw	r8,8(r16)
   41198:	2088b03a 	or	r4,r4,r2
   4119c:	2c000215 	stw	r16,8(r5)
   411a0:	31000115 	stw	r4,4(r6)
   411a4:	44000315 	stw	r16,12(r8)
   411a8:	1805d0ba 	srai	r2,r3,2
   411ac:	01400044 	movi	r5,1
   411b0:	288a983a 	sll	r5,r5,r2
   411b4:	21404336 	bltu	r4,r5,412c4 <_malloc_r+0x304>
   411b8:	2144703a 	and	r2,r4,r5
   411bc:	10000a1e 	bne	r2,zero,411e8 <_malloc_r+0x228>
   411c0:	00bfff04 	movi	r2,-4
   411c4:	294b883a 	add	r5,r5,r5
   411c8:	1886703a 	and	r3,r3,r2
   411cc:	2144703a 	and	r2,r4,r5
   411d0:	18c00104 	addi	r3,r3,4
   411d4:	1000041e 	bne	r2,zero,411e8 <_malloc_r+0x228>
   411d8:	294b883a 	add	r5,r5,r5
   411dc:	2144703a 	and	r2,r4,r5
   411e0:	18c00104 	addi	r3,r3,4
   411e4:	103ffc26 	beq	r2,zero,411d8 <__alt_data_end+0xfffcb678>
   411e8:	023fff04 	movi	r8,-4
   411ec:	01c003c4 	movi	r7,15
   411f0:	18c5883a 	add	r2,r3,r3
   411f4:	1085883a 	add	r2,r2,r2
   411f8:	1085883a 	add	r2,r2,r2
   411fc:	9895883a 	add	r10,r19,r2
   41200:	52c00304 	addi	r11,r10,12
   41204:	1819883a 	mov	r12,r3
   41208:	5c000017 	ldw	r16,0(r11)
   4120c:	59bffd04 	addi	r6,r11,-12
   41210:	8180041e 	bne	r16,r6,41224 <_malloc_r+0x264>
   41214:	0000ce06 	br	41550 <_malloc_r+0x590>
   41218:	2000d70e 	bge	r4,zero,41578 <_malloc_r+0x5b8>
   4121c:	84000317 	ldw	r16,12(r16)
   41220:	8180cb26 	beq	r16,r6,41550 <_malloc_r+0x590>
   41224:	80800117 	ldw	r2,4(r16)
   41228:	1204703a 	and	r2,r2,r8
   4122c:	1449c83a 	sub	r4,r2,r17
   41230:	393ff90e 	bge	r7,r4,41218 <__alt_data_end+0xfffcb6b8>
   41234:	80800317 	ldw	r2,12(r16)
   41238:	80c00217 	ldw	r3,8(r16)
   4123c:	89400054 	ori	r5,r17,1
   41240:	81400115 	stw	r5,4(r16)
   41244:	18800315 	stw	r2,12(r3)
   41248:	10c00215 	stw	r3,8(r2)
   4124c:	8463883a 	add	r17,r16,r17
   41250:	9c400515 	stw	r17,20(r19)
   41254:	9c400415 	stw	r17,16(r19)
   41258:	20800054 	ori	r2,r4,1
   4125c:	88800115 	stw	r2,4(r17)
   41260:	8a400315 	stw	r9,12(r17)
   41264:	8a400215 	stw	r9,8(r17)
   41268:	8923883a 	add	r17,r17,r4
   4126c:	89000015 	stw	r4,0(r17)
   41270:	9009883a 	mov	r4,r18
   41274:	004414c0 	call	4414c <__malloc_unlock>
   41278:	80800204 	addi	r2,r16,8
   4127c:	003f7d06 	br	41074 <__alt_data_end+0xfffcb514>
   41280:	00800304 	movi	r2,12
   41284:	90800015 	stw	r2,0(r18)
   41288:	0005883a 	mov	r2,zero
   4128c:	003f7906 	br	41074 <__alt_data_end+0xfffcb514>
   41290:	01401f84 	movi	r5,126
   41294:	01c00fc4 	movi	r7,63
   41298:	003f8d06 	br	410d0 <__alt_data_end+0xfffcb570>
   4129c:	81000317 	ldw	r4,12(r16)
   412a0:	003f6a06 	br	4104c <__alt_data_end+0xfffcb4ec>
   412a4:	81c5883a 	add	r2,r16,r7
   412a8:	10c00117 	ldw	r3,4(r2)
   412ac:	9009883a 	mov	r4,r18
   412b0:	18c00054 	ori	r3,r3,1
   412b4:	10c00115 	stw	r3,4(r2)
   412b8:	004414c0 	call	4414c <__malloc_unlock>
   412bc:	80800204 	addi	r2,r16,8
   412c0:	003f6c06 	br	41074 <__alt_data_end+0xfffcb514>
   412c4:	9c000217 	ldw	r16,8(r19)
   412c8:	00bfff04 	movi	r2,-4
   412cc:	85800117 	ldw	r22,4(r16)
   412d0:	b0ac703a 	and	r22,r22,r2
   412d4:	b4400336 	bltu	r22,r17,412e4 <_malloc_r+0x324>
   412d8:	b445c83a 	sub	r2,r22,r17
   412dc:	00c003c4 	movi	r3,15
   412e0:	18805d16 	blt	r3,r2,41458 <_malloc_r+0x498>
   412e4:	05c00174 	movhi	r23,5
   412e8:	00800174 	movhi	r2,5
   412ec:	bdc39f04 	addi	r23,r23,3708
   412f0:	108abd04 	addi	r2,r2,10996
   412f4:	15400017 	ldw	r21,0(r2)
   412f8:	b9000017 	ldw	r4,0(r23)
   412fc:	00ffffc4 	movi	r3,-1
   41300:	858d883a 	add	r6,r16,r22
   41304:	8d6b883a 	add	r21,r17,r21
   41308:	20c0e426 	beq	r4,r3,4169c <_malloc_r+0x6dc>
   4130c:	ad4403c4 	addi	r21,r21,4111
   41310:	00fc0004 	movi	r3,-4096
   41314:	a8ea703a 	and	r21,r21,r3
   41318:	9009883a 	mov	r4,r18
   4131c:	a80b883a 	mov	r5,r21
   41320:	d9800015 	stw	r6,0(sp)
   41324:	00420840 	call	42084 <_sbrk_r>
   41328:	00ffffc4 	movi	r3,-1
   4132c:	1029883a 	mov	r20,r2
   41330:	d9800017 	ldw	r6,0(sp)
   41334:	10c0a426 	beq	r2,r3,415c8 <_malloc_r+0x608>
   41338:	1180a236 	bltu	r2,r6,415c4 <_malloc_r+0x604>
   4133c:	07000174 	movhi	fp,5
   41340:	e70adf04 	addi	fp,fp,11132
   41344:	e0c00017 	ldw	r3,0(fp)
   41348:	a8c7883a 	add	r3,r21,r3
   4134c:	e0c00015 	stw	r3,0(fp)
   41350:	3500da26 	beq	r6,r20,416bc <_malloc_r+0x6fc>
   41354:	b9000017 	ldw	r4,0(r23)
   41358:	00bfffc4 	movi	r2,-1
   4135c:	2080e426 	beq	r4,r2,416f0 <_malloc_r+0x730>
   41360:	a185c83a 	sub	r2,r20,r6
   41364:	1885883a 	add	r2,r3,r2
   41368:	e0800015 	stw	r2,0(fp)
   4136c:	a0c001cc 	andi	r3,r20,7
   41370:	1800b526 	beq	r3,zero,41648 <_malloc_r+0x688>
   41374:	a0e9c83a 	sub	r20,r20,r3
   41378:	00840204 	movi	r2,4104
   4137c:	a5000204 	addi	r20,r20,8
   41380:	10c7c83a 	sub	r3,r2,r3
   41384:	a545883a 	add	r2,r20,r21
   41388:	1083ffcc 	andi	r2,r2,4095
   4138c:	18abc83a 	sub	r21,r3,r2
   41390:	9009883a 	mov	r4,r18
   41394:	a80b883a 	mov	r5,r21
   41398:	00420840 	call	42084 <_sbrk_r>
   4139c:	00ffffc4 	movi	r3,-1
   413a0:	10c0d026 	beq	r2,r3,416e4 <_malloc_r+0x724>
   413a4:	1507c83a 	sub	r3,r2,r20
   413a8:	a8c7883a 	add	r3,r21,r3
   413ac:	18c00054 	ori	r3,r3,1
   413b0:	e0800017 	ldw	r2,0(fp)
   413b4:	9d000215 	stw	r20,8(r19)
   413b8:	a0c00115 	stw	r3,4(r20)
   413bc:	a887883a 	add	r3,r21,r2
   413c0:	e0c00015 	stw	r3,0(fp)
   413c4:	84c00e26 	beq	r16,r19,41400 <_malloc_r+0x440>
   413c8:	018003c4 	movi	r6,15
   413cc:	3580a02e 	bgeu	r6,r22,41650 <_malloc_r+0x690>
   413d0:	81400117 	ldw	r5,4(r16)
   413d4:	013ffe04 	movi	r4,-8
   413d8:	b0bffd04 	addi	r2,r22,-12
   413dc:	1104703a 	and	r2,r2,r4
   413e0:	2900004c 	andi	r4,r5,1
   413e4:	1108b03a 	or	r4,r2,r4
   413e8:	81000115 	stw	r4,4(r16)
   413ec:	01400144 	movi	r5,5
   413f0:	8089883a 	add	r4,r16,r2
   413f4:	21400115 	stw	r5,4(r4)
   413f8:	21400215 	stw	r5,8(r4)
   413fc:	3080c036 	bltu	r6,r2,41700 <_malloc_r+0x740>
   41400:	00800174 	movhi	r2,5
   41404:	108abc04 	addi	r2,r2,10992
   41408:	11000017 	ldw	r4,0(r2)
   4140c:	20c0012e 	bgeu	r4,r3,41414 <_malloc_r+0x454>
   41410:	10c00015 	stw	r3,0(r2)
   41414:	00800174 	movhi	r2,5
   41418:	108abb04 	addi	r2,r2,10988
   4141c:	11000017 	ldw	r4,0(r2)
   41420:	9c000217 	ldw	r16,8(r19)
   41424:	20c0012e 	bgeu	r4,r3,4142c <_malloc_r+0x46c>
   41428:	10c00015 	stw	r3,0(r2)
   4142c:	80c00117 	ldw	r3,4(r16)
   41430:	00bfff04 	movi	r2,-4
   41434:	1886703a 	and	r3,r3,r2
   41438:	1c45c83a 	sub	r2,r3,r17
   4143c:	1c400236 	bltu	r3,r17,41448 <_malloc_r+0x488>
   41440:	00c003c4 	movi	r3,15
   41444:	18800416 	blt	r3,r2,41458 <_malloc_r+0x498>
   41448:	9009883a 	mov	r4,r18
   4144c:	004414c0 	call	4414c <__malloc_unlock>
   41450:	0005883a 	mov	r2,zero
   41454:	003f0706 	br	41074 <__alt_data_end+0xfffcb514>
   41458:	88c00054 	ori	r3,r17,1
   4145c:	80c00115 	stw	r3,4(r16)
   41460:	8463883a 	add	r17,r16,r17
   41464:	10800054 	ori	r2,r2,1
   41468:	9c400215 	stw	r17,8(r19)
   4146c:	88800115 	stw	r2,4(r17)
   41470:	9009883a 	mov	r4,r18
   41474:	004414c0 	call	4414c <__malloc_unlock>
   41478:	80800204 	addi	r2,r16,8
   4147c:	003efd06 	br	41074 <__alt_data_end+0xfffcb514>
   41480:	00800504 	movi	r2,20
   41484:	10c0482e 	bgeu	r2,r3,415a8 <_malloc_r+0x5e8>
   41488:	00801504 	movi	r2,84
   4148c:	10c06836 	bltu	r2,r3,41630 <_malloc_r+0x670>
   41490:	8806d33a 	srli	r3,r17,12
   41494:	19c01b84 	addi	r7,r3,110
   41498:	39cb883a 	add	r5,r7,r7
   4149c:	003f0c06 	br	410d0 <__alt_data_end+0xfffcb570>
   414a0:	3804d27a 	srli	r2,r7,9
   414a4:	01000104 	movi	r4,4
   414a8:	2080422e 	bgeu	r4,r2,415b4 <_malloc_r+0x5f4>
   414ac:	01000504 	movi	r4,20
   414b0:	20807c36 	bltu	r4,r2,416a4 <_malloc_r+0x6e4>
   414b4:	110016c4 	addi	r4,r2,91
   414b8:	210b883a 	add	r5,r4,r4
   414bc:	294b883a 	add	r5,r5,r5
   414c0:	294b883a 	add	r5,r5,r5
   414c4:	994b883a 	add	r5,r19,r5
   414c8:	28800217 	ldw	r2,8(r5)
   414cc:	02000174 	movhi	r8,5
   414d0:	423de204 	addi	r8,r8,-2168
   414d4:	11406326 	beq	r2,r5,41664 <_malloc_r+0x6a4>
   414d8:	01bfff04 	movi	r6,-4
   414dc:	11000117 	ldw	r4,4(r2)
   414e0:	2188703a 	and	r4,r4,r6
   414e4:	3900022e 	bgeu	r7,r4,414f0 <_malloc_r+0x530>
   414e8:	10800217 	ldw	r2,8(r2)
   414ec:	28bffb1e 	bne	r5,r2,414dc <__alt_data_end+0xfffcb97c>
   414f0:	11800317 	ldw	r6,12(r2)
   414f4:	99000117 	ldw	r4,4(r19)
   414f8:	81800315 	stw	r6,12(r16)
   414fc:	80800215 	stw	r2,8(r16)
   41500:	34000215 	stw	r16,8(r6)
   41504:	14000315 	stw	r16,12(r2)
   41508:	003f2706 	br	411a8 <__alt_data_end+0xfffcb648>
   4150c:	88c00054 	ori	r3,r17,1
   41510:	80c00115 	stw	r3,4(r16)
   41514:	8463883a 	add	r17,r16,r17
   41518:	34400515 	stw	r17,20(r6)
   4151c:	34400415 	stw	r17,16(r6)
   41520:	10c00054 	ori	r3,r2,1
   41524:	8a400315 	stw	r9,12(r17)
   41528:	8a400215 	stw	r9,8(r17)
   4152c:	88c00115 	stw	r3,4(r17)
   41530:	88a3883a 	add	r17,r17,r2
   41534:	88800015 	stw	r2,0(r17)
   41538:	9009883a 	mov	r4,r18
   4153c:	004414c0 	call	4414c <__malloc_unlock>
   41540:	80800204 	addi	r2,r16,8
   41544:	003ecb06 	br	41074 <__alt_data_end+0xfffcb514>
   41548:	31000117 	ldw	r4,4(r6)
   4154c:	003f1606 	br	411a8 <__alt_data_end+0xfffcb648>
   41550:	63000044 	addi	r12,r12,1
   41554:	608000cc 	andi	r2,r12,3
   41558:	5ac00204 	addi	r11,r11,8
   4155c:	103f2a1e 	bne	r2,zero,41208 <__alt_data_end+0xfffcb6a8>
   41560:	00002106 	br	415e8 <_malloc_r+0x628>
   41564:	80800204 	addi	r2,r16,8
   41568:	84000517 	ldw	r16,20(r16)
   4156c:	143eb31e 	bne	r2,r16,4103c <__alt_data_end+0xfffcb4dc>
   41570:	18c00084 	addi	r3,r3,2
   41574:	003eec06 	br	41128 <__alt_data_end+0xfffcb5c8>
   41578:	8085883a 	add	r2,r16,r2
   4157c:	10c00117 	ldw	r3,4(r2)
   41580:	81000317 	ldw	r4,12(r16)
   41584:	81400217 	ldw	r5,8(r16)
   41588:	18c00054 	ori	r3,r3,1
   4158c:	10c00115 	stw	r3,4(r2)
   41590:	29000315 	stw	r4,12(r5)
   41594:	21400215 	stw	r5,8(r4)
   41598:	9009883a 	mov	r4,r18
   4159c:	004414c0 	call	4414c <__malloc_unlock>
   415a0:	80800204 	addi	r2,r16,8
   415a4:	003eb306 	br	41074 <__alt_data_end+0xfffcb514>
   415a8:	19c016c4 	addi	r7,r3,91
   415ac:	39cb883a 	add	r5,r7,r7
   415b0:	003ec706 	br	410d0 <__alt_data_end+0xfffcb570>
   415b4:	3804d1ba 	srli	r2,r7,6
   415b8:	11000e04 	addi	r4,r2,56
   415bc:	210b883a 	add	r5,r4,r4
   415c0:	003fbe06 	br	414bc <__alt_data_end+0xfffcb95c>
   415c4:	84ff5d26 	beq	r16,r19,4133c <__alt_data_end+0xfffcb7dc>
   415c8:	9c000217 	ldw	r16,8(r19)
   415cc:	00bfff04 	movi	r2,-4
   415d0:	80c00117 	ldw	r3,4(r16)
   415d4:	1886703a 	and	r3,r3,r2
   415d8:	003f9706 	br	41438 <__alt_data_end+0xfffcb8d8>
   415dc:	52800017 	ldw	r10,0(r10)
   415e0:	18ffffc4 	addi	r3,r3,-1
   415e4:	50805c1e 	bne	r10,r2,41758 <_malloc_r+0x798>
   415e8:	190000cc 	andi	r4,r3,3
   415ec:	50bffe04 	addi	r2,r10,-8
   415f0:	203ffa1e 	bne	r4,zero,415dc <__alt_data_end+0xfffcba7c>
   415f4:	98800117 	ldw	r2,4(r19)
   415f8:	0146303a 	nor	r3,zero,r5
   415fc:	1884703a 	and	r2,r3,r2
   41600:	98800115 	stw	r2,4(r19)
   41604:	294b883a 	add	r5,r5,r5
   41608:	117f2e36 	bltu	r2,r5,412c4 <__alt_data_end+0xfffcb764>
   4160c:	283f2d26 	beq	r5,zero,412c4 <__alt_data_end+0xfffcb764>
   41610:	1146703a 	and	r3,r2,r5
   41614:	1800521e 	bne	r3,zero,41760 <_malloc_r+0x7a0>
   41618:	6007883a 	mov	r3,r12
   4161c:	294b883a 	add	r5,r5,r5
   41620:	1148703a 	and	r4,r2,r5
   41624:	18c00104 	addi	r3,r3,4
   41628:	203ffc26 	beq	r4,zero,4161c <__alt_data_end+0xfffcbabc>
   4162c:	003ef006 	br	411f0 <__alt_data_end+0xfffcb690>
   41630:	00805504 	movi	r2,340
   41634:	10c01336 	bltu	r2,r3,41684 <_malloc_r+0x6c4>
   41638:	8806d3fa 	srli	r3,r17,15
   4163c:	19c01dc4 	addi	r7,r3,119
   41640:	39cb883a 	add	r5,r7,r7
   41644:	003ea206 	br	410d0 <__alt_data_end+0xfffcb570>
   41648:	00c40004 	movi	r3,4096
   4164c:	003f4d06 	br	41384 <__alt_data_end+0xfffcb824>
   41650:	00800044 	movi	r2,1
   41654:	a0800115 	stw	r2,4(r20)
   41658:	a021883a 	mov	r16,r20
   4165c:	0007883a 	mov	r3,zero
   41660:	003f7506 	br	41438 <__alt_data_end+0xfffcb8d8>
   41664:	200bd0ba 	srai	r5,r4,2
   41668:	01800044 	movi	r6,1
   4166c:	41000117 	ldw	r4,4(r8)
   41670:	314a983a 	sll	r5,r6,r5
   41674:	100d883a 	mov	r6,r2
   41678:	2908b03a 	or	r4,r5,r4
   4167c:	41000115 	stw	r4,4(r8)
   41680:	003f9d06 	br	414f8 <__alt_data_end+0xfffcb998>
   41684:	00815504 	movi	r2,1364
   41688:	10c01336 	bltu	r2,r3,416d8 <_malloc_r+0x718>
   4168c:	8806d4ba 	srli	r3,r17,18
   41690:	19c01f04 	addi	r7,r3,124
   41694:	39cb883a 	add	r5,r7,r7
   41698:	003e8d06 	br	410d0 <__alt_data_end+0xfffcb570>
   4169c:	ad400404 	addi	r21,r21,16
   416a0:	003f1d06 	br	41318 <__alt_data_end+0xfffcb7b8>
   416a4:	01001504 	movi	r4,84
   416a8:	20801c36 	bltu	r4,r2,4171c <_malloc_r+0x75c>
   416ac:	3804d33a 	srli	r2,r7,12
   416b0:	11001b84 	addi	r4,r2,110
   416b4:	210b883a 	add	r5,r4,r4
   416b8:	003f8006 	br	414bc <__alt_data_end+0xfffcb95c>
   416bc:	3083ffcc 	andi	r2,r6,4095
   416c0:	103f241e 	bne	r2,zero,41354 <__alt_data_end+0xfffcb7f4>
   416c4:	99000217 	ldw	r4,8(r19)
   416c8:	ad85883a 	add	r2,r21,r22
   416cc:	10800054 	ori	r2,r2,1
   416d0:	20800115 	stw	r2,4(r4)
   416d4:	003f4a06 	br	41400 <__alt_data_end+0xfffcb8a0>
   416d8:	01403f04 	movi	r5,252
   416dc:	01c01f84 	movi	r7,126
   416e0:	003e7b06 	br	410d0 <__alt_data_end+0xfffcb570>
   416e4:	00c00044 	movi	r3,1
   416e8:	002b883a 	mov	r21,zero
   416ec:	003f3006 	br	413b0 <__alt_data_end+0xfffcb850>
   416f0:	00800174 	movhi	r2,5
   416f4:	10839f04 	addi	r2,r2,3708
   416f8:	15000015 	stw	r20,0(r2)
   416fc:	003f1b06 	br	4136c <__alt_data_end+0xfffcb80c>
   41700:	9009883a 	mov	r4,r18
   41704:	81400204 	addi	r5,r16,8
   41708:	00429380 	call	42938 <_free_r>
   4170c:	00800174 	movhi	r2,5
   41710:	108adf04 	addi	r2,r2,11132
   41714:	10c00017 	ldw	r3,0(r2)
   41718:	003f3906 	br	41400 <__alt_data_end+0xfffcb8a0>
   4171c:	01005504 	movi	r4,340
   41720:	20800436 	bltu	r4,r2,41734 <_malloc_r+0x774>
   41724:	3804d3fa 	srli	r2,r7,15
   41728:	11001dc4 	addi	r4,r2,119
   4172c:	210b883a 	add	r5,r4,r4
   41730:	003f6206 	br	414bc <__alt_data_end+0xfffcb95c>
   41734:	01015504 	movi	r4,1364
   41738:	20800436 	bltu	r4,r2,4174c <_malloc_r+0x78c>
   4173c:	3804d4ba 	srli	r2,r7,18
   41740:	11001f04 	addi	r4,r2,124
   41744:	210b883a 	add	r5,r4,r4
   41748:	003f5c06 	br	414bc <__alt_data_end+0xfffcb95c>
   4174c:	01403f04 	movi	r5,252
   41750:	01001f84 	movi	r4,126
   41754:	003f5906 	br	414bc <__alt_data_end+0xfffcb95c>
   41758:	98800117 	ldw	r2,4(r19)
   4175c:	003fa906 	br	41604 <__alt_data_end+0xfffcbaa4>
   41760:	6007883a 	mov	r3,r12
   41764:	003ea206 	br	411f0 <__alt_data_end+0xfffcb690>

00041768 <memchr>:
   41768:	208000cc 	andi	r2,r4,3
   4176c:	280f883a 	mov	r7,r5
   41770:	10003526 	beq	r2,zero,41848 <memchr+0xe0>
   41774:	30bfffc4 	addi	r2,r6,-1
   41778:	30001b26 	beq	r6,zero,417e8 <memchr+0x80>
   4177c:	21800003 	ldbu	r6,0(r4)
   41780:	28c03fcc 	andi	r3,r5,255
   41784:	30c01a26 	beq	r6,r3,417f0 <memchr+0x88>
   41788:	180d883a 	mov	r6,r3
   4178c:	00000406 	br	417a0 <memchr+0x38>
   41790:	10001526 	beq	r2,zero,417e8 <memchr+0x80>
   41794:	20c00003 	ldbu	r3,0(r4)
   41798:	10bfffc4 	addi	r2,r2,-1
   4179c:	19801426 	beq	r3,r6,417f0 <memchr+0x88>
   417a0:	21000044 	addi	r4,r4,1
   417a4:	20c000cc 	andi	r3,r4,3
   417a8:	183ff91e 	bne	r3,zero,41790 <__alt_data_end+0xfffcbc30>
   417ac:	024000c4 	movi	r9,3
   417b0:	48801136 	bltu	r9,r2,417f8 <memchr+0x90>
   417b4:	10000c26 	beq	r2,zero,417e8 <memchr+0x80>
   417b8:	20c00003 	ldbu	r3,0(r4)
   417bc:	29403fcc 	andi	r5,r5,255
   417c0:	19400b26 	beq	r3,r5,417f0 <memchr+0x88>
   417c4:	20c00044 	addi	r3,r4,1
   417c8:	2085883a 	add	r2,r4,r2
   417cc:	39803fcc 	andi	r6,r7,255
   417d0:	00000306 	br	417e0 <memchr+0x78>
   417d4:	18c00044 	addi	r3,r3,1
   417d8:	197fffc3 	ldbu	r5,-1(r3)
   417dc:	29800426 	beq	r5,r6,417f0 <memchr+0x88>
   417e0:	1809883a 	mov	r4,r3
   417e4:	18bffb1e 	bne	r3,r2,417d4 <__alt_data_end+0xfffcbc74>
   417e8:	0005883a 	mov	r2,zero
   417ec:	f800283a 	ret
   417f0:	2005883a 	mov	r2,r4
   417f4:	f800283a 	ret
   417f8:	28c03fcc 	andi	r3,r5,255
   417fc:	1810923a 	slli	r8,r3,8
   41800:	02ffbff4 	movhi	r11,65279
   41804:	02a02074 	movhi	r10,32897
   41808:	40c6b03a 	or	r3,r8,r3
   4180c:	1810943a 	slli	r8,r3,16
   41810:	5affbfc4 	addi	r11,r11,-257
   41814:	52a02004 	addi	r10,r10,-32640
   41818:	40d0b03a 	or	r8,r8,r3
   4181c:	20c00017 	ldw	r3,0(r4)
   41820:	40c6f03a 	xor	r3,r8,r3
   41824:	1acd883a 	add	r6,r3,r11
   41828:	00c6303a 	nor	r3,zero,r3
   4182c:	30c6703a 	and	r3,r6,r3
   41830:	1a86703a 	and	r3,r3,r10
   41834:	183fdf1e 	bne	r3,zero,417b4 <__alt_data_end+0xfffcbc54>
   41838:	10bfff04 	addi	r2,r2,-4
   4183c:	21000104 	addi	r4,r4,4
   41840:	48bff636 	bltu	r9,r2,4181c <__alt_data_end+0xfffcbcbc>
   41844:	003fdb06 	br	417b4 <__alt_data_end+0xfffcbc54>
   41848:	3005883a 	mov	r2,r6
   4184c:	003fd706 	br	417ac <__alt_data_end+0xfffcbc4c>

00041850 <memcpy>:
   41850:	deffff04 	addi	sp,sp,-4
   41854:	dc000015 	stw	r16,0(sp)
   41858:	00c003c4 	movi	r3,15
   4185c:	2005883a 	mov	r2,r4
   41860:	1980432e 	bgeu	r3,r6,41970 <memcpy+0x120>
   41864:	2146b03a 	or	r3,r4,r5
   41868:	18c000cc 	andi	r3,r3,3
   4186c:	1800421e 	bne	r3,zero,41978 <memcpy+0x128>
   41870:	343ffc04 	addi	r16,r6,-16
   41874:	8020d13a 	srli	r16,r16,4
   41878:	28c00104 	addi	r3,r5,4
   4187c:	23400104 	addi	r13,r4,4
   41880:	801e913a 	slli	r15,r16,4
   41884:	2b000204 	addi	r12,r5,8
   41888:	22c00204 	addi	r11,r4,8
   4188c:	7bc00504 	addi	r15,r15,20
   41890:	2a800304 	addi	r10,r5,12
   41894:	22400304 	addi	r9,r4,12
   41898:	2bdf883a 	add	r15,r5,r15
   4189c:	2811883a 	mov	r8,r5
   418a0:	200f883a 	mov	r7,r4
   418a4:	41000017 	ldw	r4,0(r8)
   418a8:	39c00404 	addi	r7,r7,16
   418ac:	18c00404 	addi	r3,r3,16
   418b0:	393ffc15 	stw	r4,-16(r7)
   418b4:	1bbffc17 	ldw	r14,-16(r3)
   418b8:	6b400404 	addi	r13,r13,16
   418bc:	5ac00404 	addi	r11,r11,16
   418c0:	6bbffc15 	stw	r14,-16(r13)
   418c4:	63800017 	ldw	r14,0(r12)
   418c8:	4a400404 	addi	r9,r9,16
   418cc:	42000404 	addi	r8,r8,16
   418d0:	5bbffc15 	stw	r14,-16(r11)
   418d4:	53800017 	ldw	r14,0(r10)
   418d8:	63000404 	addi	r12,r12,16
   418dc:	52800404 	addi	r10,r10,16
   418e0:	4bbffc15 	stw	r14,-16(r9)
   418e4:	1bffef1e 	bne	r3,r15,418a4 <__alt_data_end+0xfffcbd44>
   418e8:	81c00044 	addi	r7,r16,1
   418ec:	380e913a 	slli	r7,r7,4
   418f0:	310003cc 	andi	r4,r6,15
   418f4:	02c000c4 	movi	r11,3
   418f8:	11c7883a 	add	r3,r2,r7
   418fc:	29cb883a 	add	r5,r5,r7
   41900:	59001f2e 	bgeu	r11,r4,41980 <memcpy+0x130>
   41904:	1813883a 	mov	r9,r3
   41908:	2811883a 	mov	r8,r5
   4190c:	200f883a 	mov	r7,r4
   41910:	42800017 	ldw	r10,0(r8)
   41914:	4a400104 	addi	r9,r9,4
   41918:	39ffff04 	addi	r7,r7,-4
   4191c:	4abfff15 	stw	r10,-4(r9)
   41920:	42000104 	addi	r8,r8,4
   41924:	59fffa36 	bltu	r11,r7,41910 <__alt_data_end+0xfffcbdb0>
   41928:	213fff04 	addi	r4,r4,-4
   4192c:	2008d0ba 	srli	r4,r4,2
   41930:	318000cc 	andi	r6,r6,3
   41934:	21000044 	addi	r4,r4,1
   41938:	2109883a 	add	r4,r4,r4
   4193c:	2109883a 	add	r4,r4,r4
   41940:	1907883a 	add	r3,r3,r4
   41944:	290b883a 	add	r5,r5,r4
   41948:	30000626 	beq	r6,zero,41964 <memcpy+0x114>
   4194c:	198d883a 	add	r6,r3,r6
   41950:	29c00003 	ldbu	r7,0(r5)
   41954:	18c00044 	addi	r3,r3,1
   41958:	29400044 	addi	r5,r5,1
   4195c:	19ffffc5 	stb	r7,-1(r3)
   41960:	19bffb1e 	bne	r3,r6,41950 <__alt_data_end+0xfffcbdf0>
   41964:	dc000017 	ldw	r16,0(sp)
   41968:	dec00104 	addi	sp,sp,4
   4196c:	f800283a 	ret
   41970:	2007883a 	mov	r3,r4
   41974:	003ff406 	br	41948 <__alt_data_end+0xfffcbde8>
   41978:	2007883a 	mov	r3,r4
   4197c:	003ff306 	br	4194c <__alt_data_end+0xfffcbdec>
   41980:	200d883a 	mov	r6,r4
   41984:	003ff006 	br	41948 <__alt_data_end+0xfffcbde8>

00041988 <memmove>:
   41988:	2005883a 	mov	r2,r4
   4198c:	29000b2e 	bgeu	r5,r4,419bc <memmove+0x34>
   41990:	298f883a 	add	r7,r5,r6
   41994:	21c0092e 	bgeu	r4,r7,419bc <memmove+0x34>
   41998:	2187883a 	add	r3,r4,r6
   4199c:	198bc83a 	sub	r5,r3,r6
   419a0:	30004b26 	beq	r6,zero,41ad0 <memmove+0x148>
   419a4:	39ffffc4 	addi	r7,r7,-1
   419a8:	39000003 	ldbu	r4,0(r7)
   419ac:	18ffffc4 	addi	r3,r3,-1
   419b0:	19000005 	stb	r4,0(r3)
   419b4:	197ffb1e 	bne	r3,r5,419a4 <__alt_data_end+0xfffcbe44>
   419b8:	f800283a 	ret
   419bc:	00c003c4 	movi	r3,15
   419c0:	1980412e 	bgeu	r3,r6,41ac8 <memmove+0x140>
   419c4:	1146b03a 	or	r3,r2,r5
   419c8:	18c000cc 	andi	r3,r3,3
   419cc:	1800411e 	bne	r3,zero,41ad4 <memmove+0x14c>
   419d0:	33fffc04 	addi	r15,r6,-16
   419d4:	781ed13a 	srli	r15,r15,4
   419d8:	28c00104 	addi	r3,r5,4
   419dc:	13400104 	addi	r13,r2,4
   419e0:	781c913a 	slli	r14,r15,4
   419e4:	2b000204 	addi	r12,r5,8
   419e8:	12c00204 	addi	r11,r2,8
   419ec:	73800504 	addi	r14,r14,20
   419f0:	2a800304 	addi	r10,r5,12
   419f4:	12400304 	addi	r9,r2,12
   419f8:	2b9d883a 	add	r14,r5,r14
   419fc:	2811883a 	mov	r8,r5
   41a00:	100f883a 	mov	r7,r2
   41a04:	41000017 	ldw	r4,0(r8)
   41a08:	39c00404 	addi	r7,r7,16
   41a0c:	18c00404 	addi	r3,r3,16
   41a10:	393ffc15 	stw	r4,-16(r7)
   41a14:	193ffc17 	ldw	r4,-16(r3)
   41a18:	6b400404 	addi	r13,r13,16
   41a1c:	5ac00404 	addi	r11,r11,16
   41a20:	693ffc15 	stw	r4,-16(r13)
   41a24:	61000017 	ldw	r4,0(r12)
   41a28:	4a400404 	addi	r9,r9,16
   41a2c:	42000404 	addi	r8,r8,16
   41a30:	593ffc15 	stw	r4,-16(r11)
   41a34:	51000017 	ldw	r4,0(r10)
   41a38:	63000404 	addi	r12,r12,16
   41a3c:	52800404 	addi	r10,r10,16
   41a40:	493ffc15 	stw	r4,-16(r9)
   41a44:	1bbfef1e 	bne	r3,r14,41a04 <__alt_data_end+0xfffcbea4>
   41a48:	79000044 	addi	r4,r15,1
   41a4c:	2008913a 	slli	r4,r4,4
   41a50:	328003cc 	andi	r10,r6,15
   41a54:	02c000c4 	movi	r11,3
   41a58:	1107883a 	add	r3,r2,r4
   41a5c:	290b883a 	add	r5,r5,r4
   41a60:	5a801e2e 	bgeu	r11,r10,41adc <memmove+0x154>
   41a64:	1813883a 	mov	r9,r3
   41a68:	2811883a 	mov	r8,r5
   41a6c:	500f883a 	mov	r7,r10
   41a70:	41000017 	ldw	r4,0(r8)
   41a74:	4a400104 	addi	r9,r9,4
   41a78:	39ffff04 	addi	r7,r7,-4
   41a7c:	493fff15 	stw	r4,-4(r9)
   41a80:	42000104 	addi	r8,r8,4
   41a84:	59fffa36 	bltu	r11,r7,41a70 <__alt_data_end+0xfffcbf10>
   41a88:	513fff04 	addi	r4,r10,-4
   41a8c:	2008d0ba 	srli	r4,r4,2
   41a90:	318000cc 	andi	r6,r6,3
   41a94:	21000044 	addi	r4,r4,1
   41a98:	2109883a 	add	r4,r4,r4
   41a9c:	2109883a 	add	r4,r4,r4
   41aa0:	1907883a 	add	r3,r3,r4
   41aa4:	290b883a 	add	r5,r5,r4
   41aa8:	30000926 	beq	r6,zero,41ad0 <memmove+0x148>
   41aac:	198d883a 	add	r6,r3,r6
   41ab0:	29c00003 	ldbu	r7,0(r5)
   41ab4:	18c00044 	addi	r3,r3,1
   41ab8:	29400044 	addi	r5,r5,1
   41abc:	19ffffc5 	stb	r7,-1(r3)
   41ac0:	19bffb1e 	bne	r3,r6,41ab0 <__alt_data_end+0xfffcbf50>
   41ac4:	f800283a 	ret
   41ac8:	1007883a 	mov	r3,r2
   41acc:	003ff606 	br	41aa8 <__alt_data_end+0xfffcbf48>
   41ad0:	f800283a 	ret
   41ad4:	1007883a 	mov	r3,r2
   41ad8:	003ff406 	br	41aac <__alt_data_end+0xfffcbf4c>
   41adc:	500d883a 	mov	r6,r10
   41ae0:	003ff106 	br	41aa8 <__alt_data_end+0xfffcbf48>

00041ae4 <_realloc_r>:
   41ae4:	defff604 	addi	sp,sp,-40
   41ae8:	dcc00315 	stw	r19,12(sp)
   41aec:	dc400115 	stw	r17,4(sp)
   41af0:	dfc00915 	stw	ra,36(sp)
   41af4:	df000815 	stw	fp,32(sp)
   41af8:	ddc00715 	stw	r23,28(sp)
   41afc:	dd800615 	stw	r22,24(sp)
   41b00:	dd400515 	stw	r21,20(sp)
   41b04:	dd000415 	stw	r20,16(sp)
   41b08:	dc800215 	stw	r18,8(sp)
   41b0c:	dc000015 	stw	r16,0(sp)
   41b10:	2827883a 	mov	r19,r5
   41b14:	3023883a 	mov	r17,r6
   41b18:	2800bf26 	beq	r5,zero,41e18 <_realloc_r+0x334>
   41b1c:	2025883a 	mov	r18,r4
   41b20:	004402c0 	call	4402c <__malloc_lock>
   41b24:	98ffff17 	ldw	r3,-4(r19)
   41b28:	01bfff04 	movi	r6,-4
   41b2c:	890002c4 	addi	r4,r17,11
   41b30:	01c00584 	movi	r7,22
   41b34:	9d7ffe04 	addi	r21,r19,-8
   41b38:	19a0703a 	and	r16,r3,r6
   41b3c:	39003f2e 	bgeu	r7,r4,41c3c <_realloc_r+0x158>
   41b40:	053ffe04 	movi	r20,-8
   41b44:	2528703a 	and	r20,r4,r20
   41b48:	a00f883a 	mov	r7,r20
   41b4c:	a0008216 	blt	r20,zero,41d58 <_realloc_r+0x274>
   41b50:	a4408136 	bltu	r20,r17,41d58 <_realloc_r+0x274>
   41b54:	81c03c0e 	bge	r16,r7,41c48 <_realloc_r+0x164>
   41b58:	07000174 	movhi	fp,5
   41b5c:	e73de204 	addi	fp,fp,-2168
   41b60:	e1000217 	ldw	r4,8(fp)
   41b64:	ac05883a 	add	r2,r21,r16
   41b68:	2080bf26 	beq	r4,r2,41e68 <_realloc_r+0x384>
   41b6c:	11000117 	ldw	r4,4(r2)
   41b70:	023fff84 	movi	r8,-2
   41b74:	2210703a 	and	r8,r4,r8
   41b78:	1211883a 	add	r8,r2,r8
   41b7c:	41400117 	ldw	r5,4(r8)
   41b80:	2940004c 	andi	r5,r5,1
   41b84:	28004a1e 	bne	r5,zero,41cb0 <_realloc_r+0x1cc>
   41b88:	017fff04 	movi	r5,-4
   41b8c:	2148703a 	and	r4,r4,r5
   41b90:	2409883a 	add	r4,r4,r16
   41b94:	21c0ad0e 	bge	r4,r7,41e4c <_realloc_r+0x368>
   41b98:	18c0004c 	andi	r3,r3,1
   41b9c:	18007f1e 	bne	r3,zero,41d9c <_realloc_r+0x2b8>
   41ba0:	9dfffe17 	ldw	r23,-8(r19)
   41ba4:	adefc83a 	sub	r23,r21,r23
   41ba8:	bd800117 	ldw	r22,4(r23)
   41bac:	b14a703a 	and	r5,r22,r5
   41bb0:	216d883a 	add	r22,r4,r5
   41bb4:	b1c04516 	blt	r22,r7,41ccc <_realloc_r+0x1e8>
   41bb8:	10c00317 	ldw	r3,12(r2)
   41bbc:	10800217 	ldw	r2,8(r2)
   41bc0:	81bfff04 	addi	r6,r16,-4
   41bc4:	bc400204 	addi	r17,r23,8
   41bc8:	10c00315 	stw	r3,12(r2)
   41bcc:	18800215 	stw	r2,8(r3)
   41bd0:	b9400217 	ldw	r5,8(r23)
   41bd4:	b8c00317 	ldw	r3,12(r23)
   41bd8:	00800904 	movi	r2,36
   41bdc:	28c00315 	stw	r3,12(r5)
   41be0:	19400215 	stw	r5,8(r3)
   41be4:	1180ef36 	bltu	r2,r6,41fa4 <_realloc_r+0x4c0>
   41be8:	008004c4 	movi	r2,19
   41bec:	1180da2e 	bgeu	r2,r6,41f58 <_realloc_r+0x474>
   41bf0:	98800017 	ldw	r2,0(r19)
   41bf4:	b8800215 	stw	r2,8(r23)
   41bf8:	98800117 	ldw	r2,4(r19)
   41bfc:	b8800315 	stw	r2,12(r23)
   41c00:	008006c4 	movi	r2,27
   41c04:	1180fc2e 	bgeu	r2,r6,41ff8 <_realloc_r+0x514>
   41c08:	98800217 	ldw	r2,8(r19)
   41c0c:	b8800415 	stw	r2,16(r23)
   41c10:	98800317 	ldw	r2,12(r19)
   41c14:	b8800515 	stw	r2,20(r23)
   41c18:	00800904 	movi	r2,36
   41c1c:	3080421e 	bne	r6,r2,41d28 <_realloc_r+0x244>
   41c20:	98800417 	ldw	r2,16(r19)
   41c24:	9cc00604 	addi	r19,r19,24
   41c28:	b8c00804 	addi	r3,r23,32
   41c2c:	b8800615 	stw	r2,24(r23)
   41c30:	98bfff17 	ldw	r2,-4(r19)
   41c34:	b8800715 	stw	r2,28(r23)
   41c38:	00003d06 	br	41d30 <_realloc_r+0x24c>
   41c3c:	01c00404 	movi	r7,16
   41c40:	3829883a 	mov	r20,r7
   41c44:	003fc206 	br	41b50 <__alt_data_end+0xfffcbff0>
   41c48:	9823883a 	mov	r17,r19
   41c4c:	850fc83a 	sub	r7,r16,r20
   41c50:	008003c4 	movi	r2,15
   41c54:	18c0004c 	andi	r3,r3,1
   41c58:	11c04336 	bltu	r2,r7,41d68 <_realloc_r+0x284>
   41c5c:	1c06b03a 	or	r3,r3,r16
   41c60:	a8c00115 	stw	r3,4(r21)
   41c64:	ac21883a 	add	r16,r21,r16
   41c68:	80c00117 	ldw	r3,4(r16)
   41c6c:	18c00054 	ori	r3,r3,1
   41c70:	80c00115 	stw	r3,4(r16)
   41c74:	9009883a 	mov	r4,r18
   41c78:	004414c0 	call	4414c <__malloc_unlock>
   41c7c:	8805883a 	mov	r2,r17
   41c80:	dfc00917 	ldw	ra,36(sp)
   41c84:	df000817 	ldw	fp,32(sp)
   41c88:	ddc00717 	ldw	r23,28(sp)
   41c8c:	dd800617 	ldw	r22,24(sp)
   41c90:	dd400517 	ldw	r21,20(sp)
   41c94:	dd000417 	ldw	r20,16(sp)
   41c98:	dcc00317 	ldw	r19,12(sp)
   41c9c:	dc800217 	ldw	r18,8(sp)
   41ca0:	dc400117 	ldw	r17,4(sp)
   41ca4:	dc000017 	ldw	r16,0(sp)
   41ca8:	dec00a04 	addi	sp,sp,40
   41cac:	f800283a 	ret
   41cb0:	18c0004c 	andi	r3,r3,1
   41cb4:	1800391e 	bne	r3,zero,41d9c <_realloc_r+0x2b8>
   41cb8:	9dfffe17 	ldw	r23,-8(r19)
   41cbc:	00bfff04 	movi	r2,-4
   41cc0:	adefc83a 	sub	r23,r21,r23
   41cc4:	b9400117 	ldw	r5,4(r23)
   41cc8:	288a703a 	and	r5,r5,r2
   41ccc:	2c2d883a 	add	r22,r5,r16
   41cd0:	b1c03216 	blt	r22,r7,41d9c <_realloc_r+0x2b8>
   41cd4:	b8800317 	ldw	r2,12(r23)
   41cd8:	b8c00217 	ldw	r3,8(r23)
   41cdc:	81bfff04 	addi	r6,r16,-4
   41ce0:	01000904 	movi	r4,36
   41ce4:	18800315 	stw	r2,12(r3)
   41ce8:	10c00215 	stw	r3,8(r2)
   41cec:	bc400204 	addi	r17,r23,8
   41cf0:	2180ac36 	bltu	r4,r6,41fa4 <_realloc_r+0x4c0>
   41cf4:	008004c4 	movi	r2,19
   41cf8:	1180972e 	bgeu	r2,r6,41f58 <_realloc_r+0x474>
   41cfc:	98800017 	ldw	r2,0(r19)
   41d00:	b8800215 	stw	r2,8(r23)
   41d04:	98800117 	ldw	r2,4(r19)
   41d08:	b8800315 	stw	r2,12(r23)
   41d0c:	008006c4 	movi	r2,27
   41d10:	1180b92e 	bgeu	r2,r6,41ff8 <_realloc_r+0x514>
   41d14:	98800217 	ldw	r2,8(r19)
   41d18:	b8800415 	stw	r2,16(r23)
   41d1c:	98800317 	ldw	r2,12(r19)
   41d20:	b8800515 	stw	r2,20(r23)
   41d24:	313fbe26 	beq	r6,r4,41c20 <__alt_data_end+0xfffcc0c0>
   41d28:	b8c00604 	addi	r3,r23,24
   41d2c:	9cc00404 	addi	r19,r19,16
   41d30:	98800017 	ldw	r2,0(r19)
   41d34:	b021883a 	mov	r16,r22
   41d38:	b82b883a 	mov	r21,r23
   41d3c:	18800015 	stw	r2,0(r3)
   41d40:	98800117 	ldw	r2,4(r19)
   41d44:	18800115 	stw	r2,4(r3)
   41d48:	98800217 	ldw	r2,8(r19)
   41d4c:	18800215 	stw	r2,8(r3)
   41d50:	b8c00117 	ldw	r3,4(r23)
   41d54:	003fbd06 	br	41c4c <__alt_data_end+0xfffcc0ec>
   41d58:	00800304 	movi	r2,12
   41d5c:	90800015 	stw	r2,0(r18)
   41d60:	0005883a 	mov	r2,zero
   41d64:	003fc606 	br	41c80 <__alt_data_end+0xfffcc120>
   41d68:	1d06b03a 	or	r3,r3,r20
   41d6c:	ad0b883a 	add	r5,r21,r20
   41d70:	a8c00115 	stw	r3,4(r21)
   41d74:	38800054 	ori	r2,r7,1
   41d78:	28800115 	stw	r2,4(r5)
   41d7c:	29cf883a 	add	r7,r5,r7
   41d80:	38800117 	ldw	r2,4(r7)
   41d84:	9009883a 	mov	r4,r18
   41d88:	29400204 	addi	r5,r5,8
   41d8c:	10800054 	ori	r2,r2,1
   41d90:	38800115 	stw	r2,4(r7)
   41d94:	00429380 	call	42938 <_free_r>
   41d98:	003fb606 	br	41c74 <__alt_data_end+0xfffcc114>
   41d9c:	880b883a 	mov	r5,r17
   41da0:	9009883a 	mov	r4,r18
   41da4:	0040fc00 	call	40fc0 <_malloc_r>
   41da8:	1023883a 	mov	r17,r2
   41dac:	1000aa26 	beq	r2,zero,42058 <_realloc_r+0x574>
   41db0:	98ffff17 	ldw	r3,-4(r19)
   41db4:	113ffe04 	addi	r4,r2,-8
   41db8:	00bfff84 	movi	r2,-2
   41dbc:	1884703a 	and	r2,r3,r2
   41dc0:	a885883a 	add	r2,r21,r2
   41dc4:	20808626 	beq	r4,r2,41fe0 <_realloc_r+0x4fc>
   41dc8:	81bfff04 	addi	r6,r16,-4
   41dcc:	00800904 	movi	r2,36
   41dd0:	11807036 	bltu	r2,r6,41f94 <_realloc_r+0x4b0>
   41dd4:	00c004c4 	movi	r3,19
   41dd8:	19805636 	bltu	r3,r6,41f34 <_realloc_r+0x450>
   41ddc:	8805883a 	mov	r2,r17
   41de0:	9807883a 	mov	r3,r19
   41de4:	19000017 	ldw	r4,0(r3)
   41de8:	11000015 	stw	r4,0(r2)
   41dec:	19000117 	ldw	r4,4(r3)
   41df0:	11000115 	stw	r4,4(r2)
   41df4:	18c00217 	ldw	r3,8(r3)
   41df8:	10c00215 	stw	r3,8(r2)
   41dfc:	980b883a 	mov	r5,r19
   41e00:	9009883a 	mov	r4,r18
   41e04:	00429380 	call	42938 <_free_r>
   41e08:	9009883a 	mov	r4,r18
   41e0c:	004414c0 	call	4414c <__malloc_unlock>
   41e10:	8805883a 	mov	r2,r17
   41e14:	003f9a06 	br	41c80 <__alt_data_end+0xfffcc120>
   41e18:	300b883a 	mov	r5,r6
   41e1c:	dfc00917 	ldw	ra,36(sp)
   41e20:	df000817 	ldw	fp,32(sp)
   41e24:	ddc00717 	ldw	r23,28(sp)
   41e28:	dd800617 	ldw	r22,24(sp)
   41e2c:	dd400517 	ldw	r21,20(sp)
   41e30:	dd000417 	ldw	r20,16(sp)
   41e34:	dcc00317 	ldw	r19,12(sp)
   41e38:	dc800217 	ldw	r18,8(sp)
   41e3c:	dc400117 	ldw	r17,4(sp)
   41e40:	dc000017 	ldw	r16,0(sp)
   41e44:	dec00a04 	addi	sp,sp,40
   41e48:	0040fc01 	jmpi	40fc0 <_malloc_r>
   41e4c:	11400317 	ldw	r5,12(r2)
   41e50:	10800217 	ldw	r2,8(r2)
   41e54:	9823883a 	mov	r17,r19
   41e58:	2021883a 	mov	r16,r4
   41e5c:	11400315 	stw	r5,12(r2)
   41e60:	28800215 	stw	r2,8(r5)
   41e64:	003f7906 	br	41c4c <__alt_data_end+0xfffcc0ec>
   41e68:	21000117 	ldw	r4,4(r4)
   41e6c:	00bfff04 	movi	r2,-4
   41e70:	a1800404 	addi	r6,r20,16
   41e74:	2088703a 	and	r4,r4,r2
   41e78:	2409883a 	add	r4,r4,r16
   41e7c:	2180380e 	bge	r4,r6,41f60 <_realloc_r+0x47c>
   41e80:	18c0004c 	andi	r3,r3,1
   41e84:	183fc51e 	bne	r3,zero,41d9c <__alt_data_end+0xfffcc23c>
   41e88:	9dfffe17 	ldw	r23,-8(r19)
   41e8c:	adefc83a 	sub	r23,r21,r23
   41e90:	b9400117 	ldw	r5,4(r23)
   41e94:	288a703a 	and	r5,r5,r2
   41e98:	216d883a 	add	r22,r4,r5
   41e9c:	b1bf8b16 	blt	r22,r6,41ccc <__alt_data_end+0xfffcc16c>
   41ea0:	b8800317 	ldw	r2,12(r23)
   41ea4:	b8c00217 	ldw	r3,8(r23)
   41ea8:	81bfff04 	addi	r6,r16,-4
   41eac:	01000904 	movi	r4,36
   41eb0:	18800315 	stw	r2,12(r3)
   41eb4:	10c00215 	stw	r3,8(r2)
   41eb8:	bc400204 	addi	r17,r23,8
   41ebc:	21805a36 	bltu	r4,r6,42028 <_realloc_r+0x544>
   41ec0:	008004c4 	movi	r2,19
   41ec4:	1180562e 	bgeu	r2,r6,42020 <_realloc_r+0x53c>
   41ec8:	98800017 	ldw	r2,0(r19)
   41ecc:	b8800215 	stw	r2,8(r23)
   41ed0:	98800117 	ldw	r2,4(r19)
   41ed4:	b8800315 	stw	r2,12(r23)
   41ed8:	008006c4 	movi	r2,27
   41edc:	11805636 	bltu	r2,r6,42038 <_realloc_r+0x554>
   41ee0:	b8800404 	addi	r2,r23,16
   41ee4:	9cc00204 	addi	r19,r19,8
   41ee8:	98c00017 	ldw	r3,0(r19)
   41eec:	10c00015 	stw	r3,0(r2)
   41ef0:	98c00117 	ldw	r3,4(r19)
   41ef4:	10c00115 	stw	r3,4(r2)
   41ef8:	98c00217 	ldw	r3,8(r19)
   41efc:	10c00215 	stw	r3,8(r2)
   41f00:	bd07883a 	add	r3,r23,r20
   41f04:	b505c83a 	sub	r2,r22,r20
   41f08:	e0c00215 	stw	r3,8(fp)
   41f0c:	10800054 	ori	r2,r2,1
   41f10:	18800115 	stw	r2,4(r3)
   41f14:	b8800117 	ldw	r2,4(r23)
   41f18:	9009883a 	mov	r4,r18
   41f1c:	1080004c 	andi	r2,r2,1
   41f20:	a0a8b03a 	or	r20,r20,r2
   41f24:	bd000115 	stw	r20,4(r23)
   41f28:	004414c0 	call	4414c <__malloc_unlock>
   41f2c:	8805883a 	mov	r2,r17
   41f30:	003f5306 	br	41c80 <__alt_data_end+0xfffcc120>
   41f34:	98c00017 	ldw	r3,0(r19)
   41f38:	88c00015 	stw	r3,0(r17)
   41f3c:	98c00117 	ldw	r3,4(r19)
   41f40:	88c00115 	stw	r3,4(r17)
   41f44:	00c006c4 	movi	r3,27
   41f48:	19801d36 	bltu	r3,r6,41fc0 <_realloc_r+0x4dc>
   41f4c:	88800204 	addi	r2,r17,8
   41f50:	98c00204 	addi	r3,r19,8
   41f54:	003fa306 	br	41de4 <__alt_data_end+0xfffcc284>
   41f58:	8807883a 	mov	r3,r17
   41f5c:	003f7406 	br	41d30 <__alt_data_end+0xfffcc1d0>
   41f60:	ad2b883a 	add	r21,r21,r20
   41f64:	2505c83a 	sub	r2,r4,r20
   41f68:	e5400215 	stw	r21,8(fp)
   41f6c:	10800054 	ori	r2,r2,1
   41f70:	a8800115 	stw	r2,4(r21)
   41f74:	98bfff17 	ldw	r2,-4(r19)
   41f78:	9009883a 	mov	r4,r18
   41f7c:	1080004c 	andi	r2,r2,1
   41f80:	a0a8b03a 	or	r20,r20,r2
   41f84:	9d3fff15 	stw	r20,-4(r19)
   41f88:	004414c0 	call	4414c <__malloc_unlock>
   41f8c:	9805883a 	mov	r2,r19
   41f90:	003f3b06 	br	41c80 <__alt_data_end+0xfffcc120>
   41f94:	8809883a 	mov	r4,r17
   41f98:	980b883a 	mov	r5,r19
   41f9c:	00419880 	call	41988 <memmove>
   41fa0:	003f9606 	br	41dfc <__alt_data_end+0xfffcc29c>
   41fa4:	8809883a 	mov	r4,r17
   41fa8:	980b883a 	mov	r5,r19
   41fac:	00419880 	call	41988 <memmove>
   41fb0:	b8c00117 	ldw	r3,4(r23)
   41fb4:	b021883a 	mov	r16,r22
   41fb8:	b82b883a 	mov	r21,r23
   41fbc:	003f2306 	br	41c4c <__alt_data_end+0xfffcc0ec>
   41fc0:	98c00217 	ldw	r3,8(r19)
   41fc4:	88c00215 	stw	r3,8(r17)
   41fc8:	98c00317 	ldw	r3,12(r19)
   41fcc:	88c00315 	stw	r3,12(r17)
   41fd0:	30800c26 	beq	r6,r2,42004 <_realloc_r+0x520>
   41fd4:	88800404 	addi	r2,r17,16
   41fd8:	98c00404 	addi	r3,r19,16
   41fdc:	003f8106 	br	41de4 <__alt_data_end+0xfffcc284>
   41fe0:	893fff17 	ldw	r4,-4(r17)
   41fe4:	00bfff04 	movi	r2,-4
   41fe8:	9823883a 	mov	r17,r19
   41fec:	2084703a 	and	r2,r4,r2
   41ff0:	80a1883a 	add	r16,r16,r2
   41ff4:	003f1506 	br	41c4c <__alt_data_end+0xfffcc0ec>
   41ff8:	b8c00404 	addi	r3,r23,16
   41ffc:	9cc00204 	addi	r19,r19,8
   42000:	003f4b06 	br	41d30 <__alt_data_end+0xfffcc1d0>
   42004:	99000417 	ldw	r4,16(r19)
   42008:	88800604 	addi	r2,r17,24
   4200c:	98c00604 	addi	r3,r19,24
   42010:	89000415 	stw	r4,16(r17)
   42014:	99000517 	ldw	r4,20(r19)
   42018:	89000515 	stw	r4,20(r17)
   4201c:	003f7106 	br	41de4 <__alt_data_end+0xfffcc284>
   42020:	8805883a 	mov	r2,r17
   42024:	003fb006 	br	41ee8 <__alt_data_end+0xfffcc388>
   42028:	8809883a 	mov	r4,r17
   4202c:	980b883a 	mov	r5,r19
   42030:	00419880 	call	41988 <memmove>
   42034:	003fb206 	br	41f00 <__alt_data_end+0xfffcc3a0>
   42038:	98800217 	ldw	r2,8(r19)
   4203c:	b8800415 	stw	r2,16(r23)
   42040:	98800317 	ldw	r2,12(r19)
   42044:	b8800515 	stw	r2,20(r23)
   42048:	31000726 	beq	r6,r4,42068 <_realloc_r+0x584>
   4204c:	b8800604 	addi	r2,r23,24
   42050:	9cc00404 	addi	r19,r19,16
   42054:	003fa406 	br	41ee8 <__alt_data_end+0xfffcc388>
   42058:	9009883a 	mov	r4,r18
   4205c:	004414c0 	call	4414c <__malloc_unlock>
   42060:	0005883a 	mov	r2,zero
   42064:	003f0606 	br	41c80 <__alt_data_end+0xfffcc120>
   42068:	98c00417 	ldw	r3,16(r19)
   4206c:	9cc00604 	addi	r19,r19,24
   42070:	b8800804 	addi	r2,r23,32
   42074:	b8c00615 	stw	r3,24(r23)
   42078:	98ffff17 	ldw	r3,-4(r19)
   4207c:	b8c00715 	stw	r3,28(r23)
   42080:	003f9906 	br	41ee8 <__alt_data_end+0xfffcc388>

00042084 <_sbrk_r>:
   42084:	defffd04 	addi	sp,sp,-12
   42088:	dc000015 	stw	r16,0(sp)
   4208c:	04000174 	movhi	r16,5
   42090:	dc400115 	stw	r17,4(sp)
   42094:	840abe04 	addi	r16,r16,11000
   42098:	2023883a 	mov	r17,r4
   4209c:	2809883a 	mov	r4,r5
   420a0:	dfc00215 	stw	ra,8(sp)
   420a4:	80000015 	stw	zero,0(r16)
   420a8:	0043d100 	call	43d10 <sbrk>
   420ac:	00ffffc4 	movi	r3,-1
   420b0:	10c00526 	beq	r2,r3,420c8 <_sbrk_r+0x44>
   420b4:	dfc00217 	ldw	ra,8(sp)
   420b8:	dc400117 	ldw	r17,4(sp)
   420bc:	dc000017 	ldw	r16,0(sp)
   420c0:	dec00304 	addi	sp,sp,12
   420c4:	f800283a 	ret
   420c8:	80c00017 	ldw	r3,0(r16)
   420cc:	183ff926 	beq	r3,zero,420b4 <__alt_data_end+0xfffcc554>
   420d0:	88c00015 	stw	r3,0(r17)
   420d4:	003ff706 	br	420b4 <__alt_data_end+0xfffcc554>

000420d8 <__swsetup_r>:
   420d8:	00800174 	movhi	r2,5
   420dc:	defffd04 	addi	sp,sp,-12
   420e0:	10839e04 	addi	r2,r2,3704
   420e4:	dc400115 	stw	r17,4(sp)
   420e8:	2023883a 	mov	r17,r4
   420ec:	11000017 	ldw	r4,0(r2)
   420f0:	dc000015 	stw	r16,0(sp)
   420f4:	dfc00215 	stw	ra,8(sp)
   420f8:	2821883a 	mov	r16,r5
   420fc:	20000226 	beq	r4,zero,42108 <__swsetup_r+0x30>
   42100:	20c00e17 	ldw	r3,56(r4)
   42104:	18002e26 	beq	r3,zero,421c0 <__swsetup_r+0xe8>
   42108:	8080030b 	ldhu	r2,12(r16)
   4210c:	10c0020c 	andi	r3,r2,8
   42110:	100d883a 	mov	r6,r2
   42114:	18000f26 	beq	r3,zero,42154 <__swsetup_r+0x7c>
   42118:	80c00417 	ldw	r3,16(r16)
   4211c:	18001526 	beq	r3,zero,42174 <__swsetup_r+0x9c>
   42120:	1100004c 	andi	r4,r2,1
   42124:	20001c1e 	bne	r4,zero,42198 <__swsetup_r+0xc0>
   42128:	1080008c 	andi	r2,r2,2
   4212c:	1000261e 	bne	r2,zero,421c8 <__swsetup_r+0xf0>
   42130:	80800517 	ldw	r2,20(r16)
   42134:	80800215 	stw	r2,8(r16)
   42138:	18001c26 	beq	r3,zero,421ac <__swsetup_r+0xd4>
   4213c:	0005883a 	mov	r2,zero
   42140:	dfc00217 	ldw	ra,8(sp)
   42144:	dc400117 	ldw	r17,4(sp)
   42148:	dc000017 	ldw	r16,0(sp)
   4214c:	dec00304 	addi	sp,sp,12
   42150:	f800283a 	ret
   42154:	3080040c 	andi	r2,r6,16
   42158:	10001726 	beq	r2,zero,421b8 <__swsetup_r+0xe0>
   4215c:	3080010c 	andi	r2,r6,4
   42160:	10001b1e 	bne	r2,zero,421d0 <__swsetup_r+0xf8>
   42164:	80c00417 	ldw	r3,16(r16)
   42168:	30800214 	ori	r2,r6,8
   4216c:	8080030d 	sth	r2,12(r16)
   42170:	183feb1e 	bne	r3,zero,42120 <__alt_data_end+0xfffcc5c0>
   42174:	1140a00c 	andi	r5,r2,640
   42178:	01008004 	movi	r4,512
   4217c:	293fe826 	beq	r5,r4,42120 <__alt_data_end+0xfffcc5c0>
   42180:	8809883a 	mov	r4,r17
   42184:	800b883a 	mov	r5,r16
   42188:	0042d980 	call	42d98 <__smakebuf_r>
   4218c:	8080030b 	ldhu	r2,12(r16)
   42190:	80c00417 	ldw	r3,16(r16)
   42194:	003fe206 	br	42120 <__alt_data_end+0xfffcc5c0>
   42198:	80800517 	ldw	r2,20(r16)
   4219c:	80000215 	stw	zero,8(r16)
   421a0:	0085c83a 	sub	r2,zero,r2
   421a4:	80800615 	stw	r2,24(r16)
   421a8:	183fe41e 	bne	r3,zero,4213c <__alt_data_end+0xfffcc5dc>
   421ac:	8080030b 	ldhu	r2,12(r16)
   421b0:	1080200c 	andi	r2,r2,128
   421b4:	103fe226 	beq	r2,zero,42140 <__alt_data_end+0xfffcc5e0>
   421b8:	00bfffc4 	movi	r2,-1
   421bc:	003fe006 	br	42140 <__alt_data_end+0xfffcc5e0>
   421c0:	00427c40 	call	427c4 <__sinit>
   421c4:	003fd006 	br	42108 <__alt_data_end+0xfffcc5a8>
   421c8:	0005883a 	mov	r2,zero
   421cc:	003fd906 	br	42134 <__alt_data_end+0xfffcc5d4>
   421d0:	81400c17 	ldw	r5,48(r16)
   421d4:	28000626 	beq	r5,zero,421f0 <__swsetup_r+0x118>
   421d8:	80801004 	addi	r2,r16,64
   421dc:	28800326 	beq	r5,r2,421ec <__swsetup_r+0x114>
   421e0:	8809883a 	mov	r4,r17
   421e4:	00429380 	call	42938 <_free_r>
   421e8:	8180030b 	ldhu	r6,12(r16)
   421ec:	80000c15 	stw	zero,48(r16)
   421f0:	80c00417 	ldw	r3,16(r16)
   421f4:	00bff6c4 	movi	r2,-37
   421f8:	118c703a 	and	r6,r2,r6
   421fc:	80000115 	stw	zero,4(r16)
   42200:	80c00015 	stw	r3,0(r16)
   42204:	003fd806 	br	42168 <__alt_data_end+0xfffcc608>

00042208 <_fflush_r>:
   42208:	defffb04 	addi	sp,sp,-20
   4220c:	dcc00315 	stw	r19,12(sp)
   42210:	dc000015 	stw	r16,0(sp)
   42214:	dfc00415 	stw	ra,16(sp)
   42218:	dc800215 	stw	r18,8(sp)
   4221c:	dc400115 	stw	r17,4(sp)
   42220:	2027883a 	mov	r19,r4
   42224:	2821883a 	mov	r16,r5
   42228:	20000226 	beq	r4,zero,42234 <_fflush_r+0x2c>
   4222c:	20800e17 	ldw	r2,56(r4)
   42230:	10005326 	beq	r2,zero,42380 <_fflush_r+0x178>
   42234:	8080030b 	ldhu	r2,12(r16)
   42238:	10ffffcc 	andi	r3,r2,65535
   4223c:	18e0001c 	xori	r3,r3,32768
   42240:	18e00004 	addi	r3,r3,-32768
   42244:	18002c26 	beq	r3,zero,422f8 <_fflush_r+0xf0>
   42248:	10c0020c 	andi	r3,r2,8
   4224c:	1800321e 	bne	r3,zero,42318 <_fflush_r+0x110>
   42250:	80c00117 	ldw	r3,4(r16)
   42254:	10820014 	ori	r2,r2,2048
   42258:	8080030d 	sth	r2,12(r16)
   4225c:	00c0570e 	bge	zero,r3,423bc <_fflush_r+0x1b4>
   42260:	82000a17 	ldw	r8,40(r16)
   42264:	40002426 	beq	r8,zero,422f8 <_fflush_r+0xf0>
   42268:	9c400017 	ldw	r17,0(r19)
   4226c:	10c4000c 	andi	r3,r2,4096
   42270:	98000015 	stw	zero,0(r19)
   42274:	18004626 	beq	r3,zero,42390 <_fflush_r+0x188>
   42278:	81801417 	ldw	r6,80(r16)
   4227c:	10c0010c 	andi	r3,r2,4
   42280:	18000626 	beq	r3,zero,4229c <_fflush_r+0x94>
   42284:	80c00117 	ldw	r3,4(r16)
   42288:	80800c17 	ldw	r2,48(r16)
   4228c:	30cdc83a 	sub	r6,r6,r3
   42290:	10000226 	beq	r2,zero,4229c <_fflush_r+0x94>
   42294:	80800f17 	ldw	r2,60(r16)
   42298:	308dc83a 	sub	r6,r6,r2
   4229c:	81400717 	ldw	r5,28(r16)
   422a0:	9809883a 	mov	r4,r19
   422a4:	000f883a 	mov	r7,zero
   422a8:	403ee83a 	callr	r8
   422ac:	00ffffc4 	movi	r3,-1
   422b0:	10c04526 	beq	r2,r3,423c8 <_fflush_r+0x1c0>
   422b4:	80c0030b 	ldhu	r3,12(r16)
   422b8:	81000417 	ldw	r4,16(r16)
   422bc:	80000115 	stw	zero,4(r16)
   422c0:	197dffcc 	andi	r5,r3,63487
   422c4:	8140030d 	sth	r5,12(r16)
   422c8:	81000015 	stw	r4,0(r16)
   422cc:	18c4000c 	andi	r3,r3,4096
   422d0:	18000126 	beq	r3,zero,422d8 <_fflush_r+0xd0>
   422d4:	80801415 	stw	r2,80(r16)
   422d8:	81400c17 	ldw	r5,48(r16)
   422dc:	9c400015 	stw	r17,0(r19)
   422e0:	28000526 	beq	r5,zero,422f8 <_fflush_r+0xf0>
   422e4:	80801004 	addi	r2,r16,64
   422e8:	28800226 	beq	r5,r2,422f4 <_fflush_r+0xec>
   422ec:	9809883a 	mov	r4,r19
   422f0:	00429380 	call	42938 <_free_r>
   422f4:	80000c15 	stw	zero,48(r16)
   422f8:	0005883a 	mov	r2,zero
   422fc:	dfc00417 	ldw	ra,16(sp)
   42300:	dcc00317 	ldw	r19,12(sp)
   42304:	dc800217 	ldw	r18,8(sp)
   42308:	dc400117 	ldw	r17,4(sp)
   4230c:	dc000017 	ldw	r16,0(sp)
   42310:	dec00504 	addi	sp,sp,20
   42314:	f800283a 	ret
   42318:	84800417 	ldw	r18,16(r16)
   4231c:	903ff626 	beq	r18,zero,422f8 <__alt_data_end+0xfffcc798>
   42320:	84400017 	ldw	r17,0(r16)
   42324:	108000cc 	andi	r2,r2,3
   42328:	84800015 	stw	r18,0(r16)
   4232c:	8ca3c83a 	sub	r17,r17,r18
   42330:	10001526 	beq	r2,zero,42388 <_fflush_r+0x180>
   42334:	0005883a 	mov	r2,zero
   42338:	80800215 	stw	r2,8(r16)
   4233c:	04400316 	blt	zero,r17,4234c <_fflush_r+0x144>
   42340:	003fed06 	br	422f8 <__alt_data_end+0xfffcc798>
   42344:	90a5883a 	add	r18,r18,r2
   42348:	047feb0e 	bge	zero,r17,422f8 <__alt_data_end+0xfffcc798>
   4234c:	80800917 	ldw	r2,36(r16)
   42350:	81400717 	ldw	r5,28(r16)
   42354:	880f883a 	mov	r7,r17
   42358:	900d883a 	mov	r6,r18
   4235c:	9809883a 	mov	r4,r19
   42360:	103ee83a 	callr	r2
   42364:	88a3c83a 	sub	r17,r17,r2
   42368:	00bff616 	blt	zero,r2,42344 <__alt_data_end+0xfffcc7e4>
   4236c:	80c0030b 	ldhu	r3,12(r16)
   42370:	00bfffc4 	movi	r2,-1
   42374:	18c01014 	ori	r3,r3,64
   42378:	80c0030d 	sth	r3,12(r16)
   4237c:	003fdf06 	br	422fc <__alt_data_end+0xfffcc79c>
   42380:	00427c40 	call	427c4 <__sinit>
   42384:	003fab06 	br	42234 <__alt_data_end+0xfffcc6d4>
   42388:	80800517 	ldw	r2,20(r16)
   4238c:	003fea06 	br	42338 <__alt_data_end+0xfffcc7d8>
   42390:	81400717 	ldw	r5,28(r16)
   42394:	000d883a 	mov	r6,zero
   42398:	9809883a 	mov	r4,r19
   4239c:	01c00044 	movi	r7,1
   423a0:	403ee83a 	callr	r8
   423a4:	100d883a 	mov	r6,r2
   423a8:	00bfffc4 	movi	r2,-1
   423ac:	30801326 	beq	r6,r2,423fc <_fflush_r+0x1f4>
   423b0:	8080030b 	ldhu	r2,12(r16)
   423b4:	82000a17 	ldw	r8,40(r16)
   423b8:	003fb006 	br	4227c <__alt_data_end+0xfffcc71c>
   423bc:	80c00f17 	ldw	r3,60(r16)
   423c0:	00ffa716 	blt	zero,r3,42260 <__alt_data_end+0xfffcc700>
   423c4:	003fcc06 	br	422f8 <__alt_data_end+0xfffcc798>
   423c8:	98c00017 	ldw	r3,0(r19)
   423cc:	183fb926 	beq	r3,zero,422b4 <__alt_data_end+0xfffcc754>
   423d0:	01000744 	movi	r4,29
   423d4:	19000226 	beq	r3,r4,423e0 <_fflush_r+0x1d8>
   423d8:	01000584 	movi	r4,22
   423dc:	1900101e 	bne	r3,r4,42420 <_fflush_r+0x218>
   423e0:	8080030b 	ldhu	r2,12(r16)
   423e4:	80c00417 	ldw	r3,16(r16)
   423e8:	80000115 	stw	zero,4(r16)
   423ec:	10bdffcc 	andi	r2,r2,63487
   423f0:	8080030d 	sth	r2,12(r16)
   423f4:	80c00015 	stw	r3,0(r16)
   423f8:	003fb706 	br	422d8 <__alt_data_end+0xfffcc778>
   423fc:	98800017 	ldw	r2,0(r19)
   42400:	103feb26 	beq	r2,zero,423b0 <__alt_data_end+0xfffcc850>
   42404:	00c00744 	movi	r3,29
   42408:	10c00226 	beq	r2,r3,42414 <_fflush_r+0x20c>
   4240c:	00c00584 	movi	r3,22
   42410:	10ffd61e 	bne	r2,r3,4236c <__alt_data_end+0xfffcc80c>
   42414:	9c400015 	stw	r17,0(r19)
   42418:	0005883a 	mov	r2,zero
   4241c:	003fb706 	br	422fc <__alt_data_end+0xfffcc79c>
   42420:	80c0030b 	ldhu	r3,12(r16)
   42424:	18c01014 	ori	r3,r3,64
   42428:	80c0030d 	sth	r3,12(r16)
   4242c:	003fb306 	br	422fc <__alt_data_end+0xfffcc79c>

00042430 <fflush>:
   42430:	20000526 	beq	r4,zero,42448 <fflush+0x18>
   42434:	00800174 	movhi	r2,5
   42438:	10839e04 	addi	r2,r2,3704
   4243c:	200b883a 	mov	r5,r4
   42440:	11000017 	ldw	r4,0(r2)
   42444:	00422081 	jmpi	42208 <_fflush_r>
   42448:	00800174 	movhi	r2,5
   4244c:	10839d04 	addi	r2,r2,3700
   42450:	11000017 	ldw	r4,0(r2)
   42454:	01400134 	movhi	r5,4
   42458:	29488204 	addi	r5,r5,8712
   4245c:	0042ce01 	jmpi	42ce0 <_fwalk_reent>

00042460 <__fp_lock>:
   42460:	0005883a 	mov	r2,zero
   42464:	f800283a 	ret

00042468 <__fp_unlock>:
   42468:	0005883a 	mov	r2,zero
   4246c:	f800283a 	ret

00042470 <_cleanup_r>:
   42470:	01400134 	movhi	r5,4
   42474:	294cd804 	addi	r5,r5,13152
   42478:	0042c281 	jmpi	42c28 <_fwalk>

0004247c <__sinit.part.1>:
   4247c:	defff604 	addi	sp,sp,-40
   42480:	00c00134 	movhi	r3,4
   42484:	dfc00915 	stw	ra,36(sp)
   42488:	df000815 	stw	fp,32(sp)
   4248c:	ddc00715 	stw	r23,28(sp)
   42490:	dd800615 	stw	r22,24(sp)
   42494:	dd400515 	stw	r21,20(sp)
   42498:	dd000415 	stw	r20,16(sp)
   4249c:	dcc00315 	stw	r19,12(sp)
   424a0:	dc800215 	stw	r18,8(sp)
   424a4:	dc400115 	stw	r17,4(sp)
   424a8:	dc000015 	stw	r16,0(sp)
   424ac:	18c91c04 	addi	r3,r3,9328
   424b0:	24000117 	ldw	r16,4(r4)
   424b4:	20c00f15 	stw	r3,60(r4)
   424b8:	07000044 	movi	fp,1
   424bc:	00c000c4 	movi	r3,3
   424c0:	2080bb04 	addi	r2,r4,748
   424c4:	20c0b915 	stw	r3,740(r4)
   424c8:	27000e15 	stw	fp,56(r4)
   424cc:	2080ba15 	stw	r2,744(r4)
   424d0:	2000b815 	stw	zero,736(r4)
   424d4:	05c00204 	movi	r23,8
   424d8:	00800104 	movi	r2,4
   424dc:	2025883a 	mov	r18,r4
   424e0:	b80d883a 	mov	r6,r23
   424e4:	81001704 	addi	r4,r16,92
   424e8:	000b883a 	mov	r5,zero
   424ec:	80000015 	stw	zero,0(r16)
   424f0:	80000115 	stw	zero,4(r16)
   424f4:	80000215 	stw	zero,8(r16)
   424f8:	8080030d 	sth	r2,12(r16)
   424fc:	80001915 	stw	zero,100(r16)
   42500:	8000038d 	sth	zero,14(r16)
   42504:	80000415 	stw	zero,16(r16)
   42508:	80000515 	stw	zero,20(r16)
   4250c:	80000615 	stw	zero,24(r16)
   42510:	0042f500 	call	42f50 <memset>
   42514:	05800134 	movhi	r22,4
   42518:	94400217 	ldw	r17,8(r18)
   4251c:	05400134 	movhi	r21,4
   42520:	05000134 	movhi	r20,4
   42524:	04c00134 	movhi	r19,4
   42528:	b58c1d04 	addi	r22,r22,12404
   4252c:	ad4c3404 	addi	r21,r21,12496
   42530:	a50c5304 	addi	r20,r20,12620
   42534:	9ccc6a04 	addi	r19,r19,12712
   42538:	85800815 	stw	r22,32(r16)
   4253c:	85400915 	stw	r21,36(r16)
   42540:	85000a15 	stw	r20,40(r16)
   42544:	84c00b15 	stw	r19,44(r16)
   42548:	84000715 	stw	r16,28(r16)
   4254c:	00800284 	movi	r2,10
   42550:	89001704 	addi	r4,r17,92
   42554:	b80d883a 	mov	r6,r23
   42558:	000b883a 	mov	r5,zero
   4255c:	88000015 	stw	zero,0(r17)
   42560:	88000115 	stw	zero,4(r17)
   42564:	88000215 	stw	zero,8(r17)
   42568:	8880030d 	sth	r2,12(r17)
   4256c:	88001915 	stw	zero,100(r17)
   42570:	8f00038d 	sth	fp,14(r17)
   42574:	88000415 	stw	zero,16(r17)
   42578:	88000515 	stw	zero,20(r17)
   4257c:	88000615 	stw	zero,24(r17)
   42580:	0042f500 	call	42f50 <memset>
   42584:	94000317 	ldw	r16,12(r18)
   42588:	00800484 	movi	r2,18
   4258c:	8c400715 	stw	r17,28(r17)
   42590:	8d800815 	stw	r22,32(r17)
   42594:	8d400915 	stw	r21,36(r17)
   42598:	8d000a15 	stw	r20,40(r17)
   4259c:	8cc00b15 	stw	r19,44(r17)
   425a0:	8080030d 	sth	r2,12(r16)
   425a4:	00800084 	movi	r2,2
   425a8:	80000015 	stw	zero,0(r16)
   425ac:	80000115 	stw	zero,4(r16)
   425b0:	80000215 	stw	zero,8(r16)
   425b4:	80001915 	stw	zero,100(r16)
   425b8:	8080038d 	sth	r2,14(r16)
   425bc:	80000415 	stw	zero,16(r16)
   425c0:	80000515 	stw	zero,20(r16)
   425c4:	80000615 	stw	zero,24(r16)
   425c8:	81001704 	addi	r4,r16,92
   425cc:	000b883a 	mov	r5,zero
   425d0:	b80d883a 	mov	r6,r23
   425d4:	0042f500 	call	42f50 <memset>
   425d8:	84000715 	stw	r16,28(r16)
   425dc:	85800815 	stw	r22,32(r16)
   425e0:	85400915 	stw	r21,36(r16)
   425e4:	85000a15 	stw	r20,40(r16)
   425e8:	84c00b15 	stw	r19,44(r16)
   425ec:	dfc00917 	ldw	ra,36(sp)
   425f0:	df000817 	ldw	fp,32(sp)
   425f4:	ddc00717 	ldw	r23,28(sp)
   425f8:	dd800617 	ldw	r22,24(sp)
   425fc:	dd400517 	ldw	r21,20(sp)
   42600:	dd000417 	ldw	r20,16(sp)
   42604:	dcc00317 	ldw	r19,12(sp)
   42608:	dc800217 	ldw	r18,8(sp)
   4260c:	dc400117 	ldw	r17,4(sp)
   42610:	dc000017 	ldw	r16,0(sp)
   42614:	dec00a04 	addi	sp,sp,40
   42618:	f800283a 	ret

0004261c <__sfmoreglue>:
   4261c:	defffc04 	addi	sp,sp,-16
   42620:	dc800215 	stw	r18,8(sp)
   42624:	2825883a 	mov	r18,r5
   42628:	dc000015 	stw	r16,0(sp)
   4262c:	01401a04 	movi	r5,104
   42630:	2021883a 	mov	r16,r4
   42634:	9009883a 	mov	r4,r18
   42638:	dfc00315 	stw	ra,12(sp)
   4263c:	dc400115 	stw	r17,4(sp)
   42640:	00434d80 	call	434d8 <__mulsi3>
   42644:	8009883a 	mov	r4,r16
   42648:	11400304 	addi	r5,r2,12
   4264c:	1023883a 	mov	r17,r2
   42650:	0040fc00 	call	40fc0 <_malloc_r>
   42654:	1021883a 	mov	r16,r2
   42658:	10000726 	beq	r2,zero,42678 <__sfmoreglue+0x5c>
   4265c:	11000304 	addi	r4,r2,12
   42660:	10000015 	stw	zero,0(r2)
   42664:	14800115 	stw	r18,4(r2)
   42668:	11000215 	stw	r4,8(r2)
   4266c:	000b883a 	mov	r5,zero
   42670:	880d883a 	mov	r6,r17
   42674:	0042f500 	call	42f50 <memset>
   42678:	8005883a 	mov	r2,r16
   4267c:	dfc00317 	ldw	ra,12(sp)
   42680:	dc800217 	ldw	r18,8(sp)
   42684:	dc400117 	ldw	r17,4(sp)
   42688:	dc000017 	ldw	r16,0(sp)
   4268c:	dec00404 	addi	sp,sp,16
   42690:	f800283a 	ret

00042694 <__sfp>:
   42694:	00800174 	movhi	r2,5
   42698:	defffb04 	addi	sp,sp,-20
   4269c:	10839d04 	addi	r2,r2,3700
   426a0:	dc800215 	stw	r18,8(sp)
   426a4:	14800017 	ldw	r18,0(r2)
   426a8:	dcc00315 	stw	r19,12(sp)
   426ac:	dfc00415 	stw	ra,16(sp)
   426b0:	90800e17 	ldw	r2,56(r18)
   426b4:	dc400115 	stw	r17,4(sp)
   426b8:	dc000015 	stw	r16,0(sp)
   426bc:	2027883a 	mov	r19,r4
   426c0:	1000021e 	bne	r2,zero,426cc <__sfp+0x38>
   426c4:	9009883a 	mov	r4,r18
   426c8:	004247c0 	call	4247c <__sinit.part.1>
   426cc:	9480b804 	addi	r18,r18,736
   426d0:	047fffc4 	movi	r17,-1
   426d4:	91400117 	ldw	r5,4(r18)
   426d8:	94000217 	ldw	r16,8(r18)
   426dc:	297fffc4 	addi	r5,r5,-1
   426e0:	28000a16 	blt	r5,zero,4270c <__sfp+0x78>
   426e4:	8080030f 	ldh	r2,12(r16)
   426e8:	10000c26 	beq	r2,zero,4271c <__sfp+0x88>
   426ec:	80c01d04 	addi	r3,r16,116
   426f0:	00000206 	br	426fc <__sfp+0x68>
   426f4:	18bfe60f 	ldh	r2,-104(r3)
   426f8:	10000826 	beq	r2,zero,4271c <__sfp+0x88>
   426fc:	297fffc4 	addi	r5,r5,-1
   42700:	1c3ffd04 	addi	r16,r3,-12
   42704:	18c01a04 	addi	r3,r3,104
   42708:	2c7ffa1e 	bne	r5,r17,426f4 <__alt_data_end+0xfffccb94>
   4270c:	90800017 	ldw	r2,0(r18)
   42710:	10001d26 	beq	r2,zero,42788 <__sfp+0xf4>
   42714:	1025883a 	mov	r18,r2
   42718:	003fee06 	br	426d4 <__alt_data_end+0xfffccb74>
   4271c:	00bfffc4 	movi	r2,-1
   42720:	8080038d 	sth	r2,14(r16)
   42724:	00800044 	movi	r2,1
   42728:	8080030d 	sth	r2,12(r16)
   4272c:	80001915 	stw	zero,100(r16)
   42730:	80000015 	stw	zero,0(r16)
   42734:	80000215 	stw	zero,8(r16)
   42738:	80000115 	stw	zero,4(r16)
   4273c:	80000415 	stw	zero,16(r16)
   42740:	80000515 	stw	zero,20(r16)
   42744:	80000615 	stw	zero,24(r16)
   42748:	81001704 	addi	r4,r16,92
   4274c:	000b883a 	mov	r5,zero
   42750:	01800204 	movi	r6,8
   42754:	0042f500 	call	42f50 <memset>
   42758:	8005883a 	mov	r2,r16
   4275c:	80000c15 	stw	zero,48(r16)
   42760:	80000d15 	stw	zero,52(r16)
   42764:	80001115 	stw	zero,68(r16)
   42768:	80001215 	stw	zero,72(r16)
   4276c:	dfc00417 	ldw	ra,16(sp)
   42770:	dcc00317 	ldw	r19,12(sp)
   42774:	dc800217 	ldw	r18,8(sp)
   42778:	dc400117 	ldw	r17,4(sp)
   4277c:	dc000017 	ldw	r16,0(sp)
   42780:	dec00504 	addi	sp,sp,20
   42784:	f800283a 	ret
   42788:	9809883a 	mov	r4,r19
   4278c:	01400104 	movi	r5,4
   42790:	004261c0 	call	4261c <__sfmoreglue>
   42794:	90800015 	stw	r2,0(r18)
   42798:	103fde1e 	bne	r2,zero,42714 <__alt_data_end+0xfffccbb4>
   4279c:	00800304 	movi	r2,12
   427a0:	98800015 	stw	r2,0(r19)
   427a4:	0005883a 	mov	r2,zero
   427a8:	003ff006 	br	4276c <__alt_data_end+0xfffccc0c>

000427ac <_cleanup>:
   427ac:	00800174 	movhi	r2,5
   427b0:	10839d04 	addi	r2,r2,3700
   427b4:	11000017 	ldw	r4,0(r2)
   427b8:	01400134 	movhi	r5,4
   427bc:	294cd804 	addi	r5,r5,13152
   427c0:	0042c281 	jmpi	42c28 <_fwalk>

000427c4 <__sinit>:
   427c4:	20800e17 	ldw	r2,56(r4)
   427c8:	10000126 	beq	r2,zero,427d0 <__sinit+0xc>
   427cc:	f800283a 	ret
   427d0:	004247c1 	jmpi	4247c <__sinit.part.1>

000427d4 <__sfp_lock_acquire>:
   427d4:	f800283a 	ret

000427d8 <__sfp_lock_release>:
   427d8:	f800283a 	ret

000427dc <__sinit_lock_acquire>:
   427dc:	f800283a 	ret

000427e0 <__sinit_lock_release>:
   427e0:	f800283a 	ret

000427e4 <__fp_lock_all>:
   427e4:	00800174 	movhi	r2,5
   427e8:	10839e04 	addi	r2,r2,3704
   427ec:	11000017 	ldw	r4,0(r2)
   427f0:	01400134 	movhi	r5,4
   427f4:	29491804 	addi	r5,r5,9312
   427f8:	0042c281 	jmpi	42c28 <_fwalk>

000427fc <__fp_unlock_all>:
   427fc:	00800174 	movhi	r2,5
   42800:	10839e04 	addi	r2,r2,3704
   42804:	11000017 	ldw	r4,0(r2)
   42808:	01400134 	movhi	r5,4
   4280c:	29491a04 	addi	r5,r5,9320
   42810:	0042c281 	jmpi	42c28 <_fwalk>

00042814 <_malloc_trim_r>:
   42814:	defffb04 	addi	sp,sp,-20
   42818:	dcc00315 	stw	r19,12(sp)
   4281c:	04c00174 	movhi	r19,5
   42820:	dc800215 	stw	r18,8(sp)
   42824:	dc400115 	stw	r17,4(sp)
   42828:	dc000015 	stw	r16,0(sp)
   4282c:	dfc00415 	stw	ra,16(sp)
   42830:	2821883a 	mov	r16,r5
   42834:	9cfde204 	addi	r19,r19,-2168
   42838:	2025883a 	mov	r18,r4
   4283c:	004402c0 	call	4402c <__malloc_lock>
   42840:	98800217 	ldw	r2,8(r19)
   42844:	14400117 	ldw	r17,4(r2)
   42848:	00bfff04 	movi	r2,-4
   4284c:	88a2703a 	and	r17,r17,r2
   42850:	8c21c83a 	sub	r16,r17,r16
   42854:	8403fbc4 	addi	r16,r16,4079
   42858:	8020d33a 	srli	r16,r16,12
   4285c:	0083ffc4 	movi	r2,4095
   42860:	843fffc4 	addi	r16,r16,-1
   42864:	8020933a 	slli	r16,r16,12
   42868:	1400060e 	bge	r2,r16,42884 <_malloc_trim_r+0x70>
   4286c:	9009883a 	mov	r4,r18
   42870:	000b883a 	mov	r5,zero
   42874:	00420840 	call	42084 <_sbrk_r>
   42878:	98c00217 	ldw	r3,8(r19)
   4287c:	1c47883a 	add	r3,r3,r17
   42880:	10c00a26 	beq	r2,r3,428ac <_malloc_trim_r+0x98>
   42884:	9009883a 	mov	r4,r18
   42888:	004414c0 	call	4414c <__malloc_unlock>
   4288c:	0005883a 	mov	r2,zero
   42890:	dfc00417 	ldw	ra,16(sp)
   42894:	dcc00317 	ldw	r19,12(sp)
   42898:	dc800217 	ldw	r18,8(sp)
   4289c:	dc400117 	ldw	r17,4(sp)
   428a0:	dc000017 	ldw	r16,0(sp)
   428a4:	dec00504 	addi	sp,sp,20
   428a8:	f800283a 	ret
   428ac:	9009883a 	mov	r4,r18
   428b0:	040bc83a 	sub	r5,zero,r16
   428b4:	00420840 	call	42084 <_sbrk_r>
   428b8:	00ffffc4 	movi	r3,-1
   428bc:	10c00d26 	beq	r2,r3,428f4 <_malloc_trim_r+0xe0>
   428c0:	00c00174 	movhi	r3,5
   428c4:	18cadf04 	addi	r3,r3,11132
   428c8:	18800017 	ldw	r2,0(r3)
   428cc:	99000217 	ldw	r4,8(r19)
   428d0:	8c23c83a 	sub	r17,r17,r16
   428d4:	8c400054 	ori	r17,r17,1
   428d8:	1421c83a 	sub	r16,r2,r16
   428dc:	24400115 	stw	r17,4(r4)
   428e0:	9009883a 	mov	r4,r18
   428e4:	1c000015 	stw	r16,0(r3)
   428e8:	004414c0 	call	4414c <__malloc_unlock>
   428ec:	00800044 	movi	r2,1
   428f0:	003fe706 	br	42890 <__alt_data_end+0xfffccd30>
   428f4:	9009883a 	mov	r4,r18
   428f8:	000b883a 	mov	r5,zero
   428fc:	00420840 	call	42084 <_sbrk_r>
   42900:	99000217 	ldw	r4,8(r19)
   42904:	014003c4 	movi	r5,15
   42908:	1107c83a 	sub	r3,r2,r4
   4290c:	28ffdd0e 	bge	r5,r3,42884 <__alt_data_end+0xfffccd24>
   42910:	01400174 	movhi	r5,5
   42914:	29439f04 	addi	r5,r5,3708
   42918:	29400017 	ldw	r5,0(r5)
   4291c:	18c00054 	ori	r3,r3,1
   42920:	20c00115 	stw	r3,4(r4)
   42924:	00c00174 	movhi	r3,5
   42928:	1145c83a 	sub	r2,r2,r5
   4292c:	18cadf04 	addi	r3,r3,11132
   42930:	18800015 	stw	r2,0(r3)
   42934:	003fd306 	br	42884 <__alt_data_end+0xfffccd24>

00042938 <_free_r>:
   42938:	28004c26 	beq	r5,zero,42a6c <_free_r+0x134>
   4293c:	defffd04 	addi	sp,sp,-12
   42940:	dc400115 	stw	r17,4(sp)
   42944:	dc000015 	stw	r16,0(sp)
   42948:	2023883a 	mov	r17,r4
   4294c:	2821883a 	mov	r16,r5
   42950:	dfc00215 	stw	ra,8(sp)
   42954:	004402c0 	call	4402c <__malloc_lock>
   42958:	813fff17 	ldw	r4,-4(r16)
   4295c:	00bfff84 	movi	r2,-2
   42960:	02400174 	movhi	r9,5
   42964:	81bffe04 	addi	r6,r16,-8
   42968:	2084703a 	and	r2,r4,r2
   4296c:	4a7de204 	addi	r9,r9,-2168
   42970:	308b883a 	add	r5,r6,r2
   42974:	2a000117 	ldw	r8,4(r5)
   42978:	49c00217 	ldw	r7,8(r9)
   4297c:	00ffff04 	movi	r3,-4
   42980:	40c6703a 	and	r3,r8,r3
   42984:	39405326 	beq	r7,r5,42ad4 <_free_r+0x19c>
   42988:	28c00115 	stw	r3,4(r5)
   4298c:	2100004c 	andi	r4,r4,1
   42990:	2000091e 	bne	r4,zero,429b8 <_free_r+0x80>
   42994:	81fffe17 	ldw	r7,-8(r16)
   42998:	4a000204 	addi	r8,r9,8
   4299c:	31cdc83a 	sub	r6,r6,r7
   429a0:	31000217 	ldw	r4,8(r6)
   429a4:	11c5883a 	add	r2,r2,r7
   429a8:	22006126 	beq	r4,r8,42b30 <_free_r+0x1f8>
   429ac:	31c00317 	ldw	r7,12(r6)
   429b0:	21c00315 	stw	r7,12(r4)
   429b4:	39000215 	stw	r4,8(r7)
   429b8:	28c9883a 	add	r4,r5,r3
   429bc:	21c00117 	ldw	r7,4(r4)
   429c0:	39c0004c 	andi	r7,r7,1
   429c4:	38000d1e 	bne	r7,zero,429fc <_free_r+0xc4>
   429c8:	29000217 	ldw	r4,8(r5)
   429cc:	10c5883a 	add	r2,r2,r3
   429d0:	00c00174 	movhi	r3,5
   429d4:	18fde404 	addi	r3,r3,-2160
   429d8:	20c07526 	beq	r4,r3,42bb0 <_free_r+0x278>
   429dc:	29c00317 	ldw	r7,12(r5)
   429e0:	11400054 	ori	r5,r2,1
   429e4:	3087883a 	add	r3,r6,r2
   429e8:	21c00315 	stw	r7,12(r4)
   429ec:	39000215 	stw	r4,8(r7)
   429f0:	31400115 	stw	r5,4(r6)
   429f4:	18800015 	stw	r2,0(r3)
   429f8:	00000406 	br	42a0c <_free_r+0xd4>
   429fc:	10c00054 	ori	r3,r2,1
   42a00:	30c00115 	stw	r3,4(r6)
   42a04:	3087883a 	add	r3,r6,r2
   42a08:	18800015 	stw	r2,0(r3)
   42a0c:	00c07fc4 	movi	r3,511
   42a10:	18801736 	bltu	r3,r2,42a70 <_free_r+0x138>
   42a14:	1004d0fa 	srli	r2,r2,3
   42a18:	01400044 	movi	r5,1
   42a1c:	49000117 	ldw	r4,4(r9)
   42a20:	1087883a 	add	r3,r2,r2
   42a24:	18c7883a 	add	r3,r3,r3
   42a28:	1005d0ba 	srai	r2,r2,2
   42a2c:	18c7883a 	add	r3,r3,r3
   42a30:	1a47883a 	add	r3,r3,r9
   42a34:	19c00217 	ldw	r7,8(r3)
   42a38:	2884983a 	sll	r2,r5,r2
   42a3c:	30c00315 	stw	r3,12(r6)
   42a40:	31c00215 	stw	r7,8(r6)
   42a44:	1104b03a 	or	r2,r2,r4
   42a48:	19800215 	stw	r6,8(r3)
   42a4c:	48800115 	stw	r2,4(r9)
   42a50:	39800315 	stw	r6,12(r7)
   42a54:	8809883a 	mov	r4,r17
   42a58:	dfc00217 	ldw	ra,8(sp)
   42a5c:	dc400117 	ldw	r17,4(sp)
   42a60:	dc000017 	ldw	r16,0(sp)
   42a64:	dec00304 	addi	sp,sp,12
   42a68:	004414c1 	jmpi	4414c <__malloc_unlock>
   42a6c:	f800283a 	ret
   42a70:	1006d27a 	srli	r3,r2,9
   42a74:	01000104 	movi	r4,4
   42a78:	20c04036 	bltu	r4,r3,42b7c <_free_r+0x244>
   42a7c:	1006d1ba 	srli	r3,r2,6
   42a80:	19400e04 	addi	r5,r3,56
   42a84:	2947883a 	add	r3,r5,r5
   42a88:	18c7883a 	add	r3,r3,r3
   42a8c:	18c7883a 	add	r3,r3,r3
   42a90:	1a49883a 	add	r4,r3,r9
   42a94:	20c00217 	ldw	r3,8(r4)
   42a98:	01c00174 	movhi	r7,5
   42a9c:	39fde204 	addi	r7,r7,-2168
   42aa0:	19003b26 	beq	r3,r4,42b90 <_free_r+0x258>
   42aa4:	01ffff04 	movi	r7,-4
   42aa8:	19400117 	ldw	r5,4(r3)
   42aac:	29ca703a 	and	r5,r5,r7
   42ab0:	1140022e 	bgeu	r2,r5,42abc <_free_r+0x184>
   42ab4:	18c00217 	ldw	r3,8(r3)
   42ab8:	20fffb1e 	bne	r4,r3,42aa8 <__alt_data_end+0xfffccf48>
   42abc:	18800317 	ldw	r2,12(r3)
   42ac0:	30800315 	stw	r2,12(r6)
   42ac4:	30c00215 	stw	r3,8(r6)
   42ac8:	11800215 	stw	r6,8(r2)
   42acc:	19800315 	stw	r6,12(r3)
   42ad0:	003fe006 	br	42a54 <__alt_data_end+0xfffccef4>
   42ad4:	2100004c 	andi	r4,r4,1
   42ad8:	1885883a 	add	r2,r3,r2
   42adc:	2000071e 	bne	r4,zero,42afc <_free_r+0x1c4>
   42ae0:	817ffe17 	ldw	r5,-8(r16)
   42ae4:	314dc83a 	sub	r6,r6,r5
   42ae8:	30c00317 	ldw	r3,12(r6)
   42aec:	31000217 	ldw	r4,8(r6)
   42af0:	1145883a 	add	r2,r2,r5
   42af4:	20c00315 	stw	r3,12(r4)
   42af8:	19000215 	stw	r4,8(r3)
   42afc:	10c00054 	ori	r3,r2,1
   42b00:	30c00115 	stw	r3,4(r6)
   42b04:	00c00174 	movhi	r3,5
   42b08:	18c3a004 	addi	r3,r3,3712
   42b0c:	18c00017 	ldw	r3,0(r3)
   42b10:	49800215 	stw	r6,8(r9)
   42b14:	10ffcf36 	bltu	r2,r3,42a54 <__alt_data_end+0xfffccef4>
   42b18:	00800174 	movhi	r2,5
   42b1c:	108abd04 	addi	r2,r2,10996
   42b20:	11400017 	ldw	r5,0(r2)
   42b24:	8809883a 	mov	r4,r17
   42b28:	00428140 	call	42814 <_malloc_trim_r>
   42b2c:	003fc906 	br	42a54 <__alt_data_end+0xfffccef4>
   42b30:	28c9883a 	add	r4,r5,r3
   42b34:	21000117 	ldw	r4,4(r4)
   42b38:	2100004c 	andi	r4,r4,1
   42b3c:	20000a1e 	bne	r4,zero,42b68 <_free_r+0x230>
   42b40:	29000317 	ldw	r4,12(r5)
   42b44:	29400217 	ldw	r5,8(r5)
   42b48:	10c5883a 	add	r2,r2,r3
   42b4c:	10c00054 	ori	r3,r2,1
   42b50:	29000315 	stw	r4,12(r5)
   42b54:	21400215 	stw	r5,8(r4)
   42b58:	30c00115 	stw	r3,4(r6)
   42b5c:	308d883a 	add	r6,r6,r2
   42b60:	30800015 	stw	r2,0(r6)
   42b64:	003fbb06 	br	42a54 <__alt_data_end+0xfffccef4>
   42b68:	10c00054 	ori	r3,r2,1
   42b6c:	30c00115 	stw	r3,4(r6)
   42b70:	308d883a 	add	r6,r6,r2
   42b74:	30800015 	stw	r2,0(r6)
   42b78:	003fb606 	br	42a54 <__alt_data_end+0xfffccef4>
   42b7c:	01000504 	movi	r4,20
   42b80:	20c01436 	bltu	r4,r3,42bd4 <_free_r+0x29c>
   42b84:	194016c4 	addi	r5,r3,91
   42b88:	2947883a 	add	r3,r5,r5
   42b8c:	003fbe06 	br	42a88 <__alt_data_end+0xfffccf28>
   42b90:	280bd0ba 	srai	r5,r5,2
   42b94:	00800044 	movi	r2,1
   42b98:	39000117 	ldw	r4,4(r7)
   42b9c:	114a983a 	sll	r5,r2,r5
   42ba0:	1805883a 	mov	r2,r3
   42ba4:	2908b03a 	or	r4,r5,r4
   42ba8:	39000115 	stw	r4,4(r7)
   42bac:	003fc406 	br	42ac0 <__alt_data_end+0xfffccf60>
   42bb0:	49800515 	stw	r6,20(r9)
   42bb4:	49800415 	stw	r6,16(r9)
   42bb8:	10c00054 	ori	r3,r2,1
   42bbc:	31000315 	stw	r4,12(r6)
   42bc0:	31000215 	stw	r4,8(r6)
   42bc4:	30c00115 	stw	r3,4(r6)
   42bc8:	308d883a 	add	r6,r6,r2
   42bcc:	30800015 	stw	r2,0(r6)
   42bd0:	003fa006 	br	42a54 <__alt_data_end+0xfffccef4>
   42bd4:	01001504 	movi	r4,84
   42bd8:	20c00436 	bltu	r4,r3,42bec <_free_r+0x2b4>
   42bdc:	1006d33a 	srli	r3,r2,12
   42be0:	19401b84 	addi	r5,r3,110
   42be4:	2947883a 	add	r3,r5,r5
   42be8:	003fa706 	br	42a88 <__alt_data_end+0xfffccf28>
   42bec:	01005504 	movi	r4,340
   42bf0:	20c00436 	bltu	r4,r3,42c04 <_free_r+0x2cc>
   42bf4:	1006d3fa 	srli	r3,r2,15
   42bf8:	19401dc4 	addi	r5,r3,119
   42bfc:	2947883a 	add	r3,r5,r5
   42c00:	003fa106 	br	42a88 <__alt_data_end+0xfffccf28>
   42c04:	01015504 	movi	r4,1364
   42c08:	20c00436 	bltu	r4,r3,42c1c <_free_r+0x2e4>
   42c0c:	1006d4ba 	srli	r3,r2,18
   42c10:	19401f04 	addi	r5,r3,124
   42c14:	2947883a 	add	r3,r5,r5
   42c18:	003f9b06 	br	42a88 <__alt_data_end+0xfffccf28>
   42c1c:	00c03f04 	movi	r3,252
   42c20:	01401f84 	movi	r5,126
   42c24:	003f9806 	br	42a88 <__alt_data_end+0xfffccf28>

00042c28 <_fwalk>:
   42c28:	defff804 	addi	sp,sp,-32
   42c2c:	dd400515 	stw	r21,20(sp)
   42c30:	2540b804 	addi	r21,r4,736
   42c34:	dd800615 	stw	r22,24(sp)
   42c38:	dd000415 	stw	r20,16(sp)
   42c3c:	dfc00715 	stw	ra,28(sp)
   42c40:	dcc00315 	stw	r19,12(sp)
   42c44:	dc800215 	stw	r18,8(sp)
   42c48:	dc400115 	stw	r17,4(sp)
   42c4c:	dc000015 	stw	r16,0(sp)
   42c50:	2829883a 	mov	r20,r5
   42c54:	002d883a 	mov	r22,zero
   42c58:	00427d40 	call	427d4 <__sfp_lock_acquire>
   42c5c:	a8001426 	beq	r21,zero,42cb0 <_fwalk+0x88>
   42c60:	04ffffc4 	movi	r19,-1
   42c64:	ac400117 	ldw	r17,4(r21)
   42c68:	ac800217 	ldw	r18,8(r21)
   42c6c:	8c7fffc4 	addi	r17,r17,-1
   42c70:	88000d16 	blt	r17,zero,42ca8 <_fwalk+0x80>
   42c74:	94000304 	addi	r16,r18,12
   42c78:	94800384 	addi	r18,r18,14
   42c7c:	80c0000f 	ldh	r3,0(r16)
   42c80:	8c7fffc4 	addi	r17,r17,-1
   42c84:	813ffd04 	addi	r4,r16,-12
   42c88:	18000426 	beq	r3,zero,42c9c <_fwalk+0x74>
   42c8c:	90c0000f 	ldh	r3,0(r18)
   42c90:	1cc00226 	beq	r3,r19,42c9c <_fwalk+0x74>
   42c94:	a03ee83a 	callr	r20
   42c98:	b0acb03a 	or	r22,r22,r2
   42c9c:	84001a04 	addi	r16,r16,104
   42ca0:	94801a04 	addi	r18,r18,104
   42ca4:	8cfff51e 	bne	r17,r19,42c7c <__alt_data_end+0xfffcd11c>
   42ca8:	ad400017 	ldw	r21,0(r21)
   42cac:	a83fed1e 	bne	r21,zero,42c64 <__alt_data_end+0xfffcd104>
   42cb0:	00427d80 	call	427d8 <__sfp_lock_release>
   42cb4:	b005883a 	mov	r2,r22
   42cb8:	dfc00717 	ldw	ra,28(sp)
   42cbc:	dd800617 	ldw	r22,24(sp)
   42cc0:	dd400517 	ldw	r21,20(sp)
   42cc4:	dd000417 	ldw	r20,16(sp)
   42cc8:	dcc00317 	ldw	r19,12(sp)
   42ccc:	dc800217 	ldw	r18,8(sp)
   42cd0:	dc400117 	ldw	r17,4(sp)
   42cd4:	dc000017 	ldw	r16,0(sp)
   42cd8:	dec00804 	addi	sp,sp,32
   42cdc:	f800283a 	ret

00042ce0 <_fwalk_reent>:
   42ce0:	defff804 	addi	sp,sp,-32
   42ce4:	dd400515 	stw	r21,20(sp)
   42ce8:	2540b804 	addi	r21,r4,736
   42cec:	dd800615 	stw	r22,24(sp)
   42cf0:	dd000415 	stw	r20,16(sp)
   42cf4:	dcc00315 	stw	r19,12(sp)
   42cf8:	dfc00715 	stw	ra,28(sp)
   42cfc:	dc800215 	stw	r18,8(sp)
   42d00:	dc400115 	stw	r17,4(sp)
   42d04:	dc000015 	stw	r16,0(sp)
   42d08:	2027883a 	mov	r19,r4
   42d0c:	2829883a 	mov	r20,r5
   42d10:	002d883a 	mov	r22,zero
   42d14:	00427d40 	call	427d4 <__sfp_lock_acquire>
   42d18:	a8001326 	beq	r21,zero,42d68 <_fwalk_reent+0x88>
   42d1c:	04bfffc4 	movi	r18,-1
   42d20:	ac400117 	ldw	r17,4(r21)
   42d24:	ac000217 	ldw	r16,8(r21)
   42d28:	8c7fffc4 	addi	r17,r17,-1
   42d2c:	88000c16 	blt	r17,zero,42d60 <_fwalk_reent+0x80>
   42d30:	84000304 	addi	r16,r16,12
   42d34:	80c0000f 	ldh	r3,0(r16)
   42d38:	8c7fffc4 	addi	r17,r17,-1
   42d3c:	817ffd04 	addi	r5,r16,-12
   42d40:	18000526 	beq	r3,zero,42d58 <_fwalk_reent+0x78>
   42d44:	80c0008f 	ldh	r3,2(r16)
   42d48:	9809883a 	mov	r4,r19
   42d4c:	1c800226 	beq	r3,r18,42d58 <_fwalk_reent+0x78>
   42d50:	a03ee83a 	callr	r20
   42d54:	b0acb03a 	or	r22,r22,r2
   42d58:	84001a04 	addi	r16,r16,104
   42d5c:	8cbff51e 	bne	r17,r18,42d34 <__alt_data_end+0xfffcd1d4>
   42d60:	ad400017 	ldw	r21,0(r21)
   42d64:	a83fee1e 	bne	r21,zero,42d20 <__alt_data_end+0xfffcd1c0>
   42d68:	00427d80 	call	427d8 <__sfp_lock_release>
   42d6c:	b005883a 	mov	r2,r22
   42d70:	dfc00717 	ldw	ra,28(sp)
   42d74:	dd800617 	ldw	r22,24(sp)
   42d78:	dd400517 	ldw	r21,20(sp)
   42d7c:	dd000417 	ldw	r20,16(sp)
   42d80:	dcc00317 	ldw	r19,12(sp)
   42d84:	dc800217 	ldw	r18,8(sp)
   42d88:	dc400117 	ldw	r17,4(sp)
   42d8c:	dc000017 	ldw	r16,0(sp)
   42d90:	dec00804 	addi	sp,sp,32
   42d94:	f800283a 	ret

00042d98 <__smakebuf_r>:
   42d98:	2880030b 	ldhu	r2,12(r5)
   42d9c:	10c0008c 	andi	r3,r2,2
   42da0:	1800401e 	bne	r3,zero,42ea4 <__smakebuf_r+0x10c>
   42da4:	deffec04 	addi	sp,sp,-80
   42da8:	dc000f15 	stw	r16,60(sp)
   42dac:	2821883a 	mov	r16,r5
   42db0:	2940038f 	ldh	r5,14(r5)
   42db4:	dc401015 	stw	r17,64(sp)
   42db8:	dfc01315 	stw	ra,76(sp)
   42dbc:	dcc01215 	stw	r19,72(sp)
   42dc0:	dc801115 	stw	r18,68(sp)
   42dc4:	2023883a 	mov	r17,r4
   42dc8:	28001b16 	blt	r5,zero,42e38 <__smakebuf_r+0xa0>
   42dcc:	d80d883a 	mov	r6,sp
   42dd0:	00433740 	call	43374 <_fstat_r>
   42dd4:	10001716 	blt	r2,zero,42e34 <__smakebuf_r+0x9c>
   42dd8:	d8800117 	ldw	r2,4(sp)
   42ddc:	00e00014 	movui	r3,32768
   42de0:	10bc000c 	andi	r2,r2,61440
   42de4:	10c03726 	beq	r2,r3,42ec4 <__smakebuf_r+0x12c>
   42de8:	80c0030b 	ldhu	r3,12(r16)
   42dec:	18c20014 	ori	r3,r3,2048
   42df0:	80c0030d 	sth	r3,12(r16)
   42df4:	00c80004 	movi	r3,8192
   42df8:	10c03c1e 	bne	r2,r3,42eec <__smakebuf_r+0x154>
   42dfc:	8140038f 	ldh	r5,14(r16)
   42e00:	8809883a 	mov	r4,r17
   42e04:	00433cc0 	call	433cc <_isatty_r>
   42e08:	10004e26 	beq	r2,zero,42f44 <__smakebuf_r+0x1ac>
   42e0c:	8080030b 	ldhu	r2,12(r16)
   42e10:	04c00044 	movi	r19,1
   42e14:	80c010c4 	addi	r3,r16,67
   42e18:	14c4b03a 	or	r2,r2,r19
   42e1c:	8080030d 	sth	r2,12(r16)
   42e20:	80c00015 	stw	r3,0(r16)
   42e24:	80c00415 	stw	r3,16(r16)
   42e28:	84c00515 	stw	r19,20(r16)
   42e2c:	04810004 	movi	r18,1024
   42e30:	00000706 	br	42e50 <__smakebuf_r+0xb8>
   42e34:	8080030b 	ldhu	r2,12(r16)
   42e38:	10c0200c 	andi	r3,r2,128
   42e3c:	18001f1e 	bne	r3,zero,42ebc <__smakebuf_r+0x124>
   42e40:	04810004 	movi	r18,1024
   42e44:	10820014 	ori	r2,r2,2048
   42e48:	8080030d 	sth	r2,12(r16)
   42e4c:	0027883a 	mov	r19,zero
   42e50:	8809883a 	mov	r4,r17
   42e54:	900b883a 	mov	r5,r18
   42e58:	0040fc00 	call	40fc0 <_malloc_r>
   42e5c:	10002e26 	beq	r2,zero,42f18 <__smakebuf_r+0x180>
   42e60:	80c0030b 	ldhu	r3,12(r16)
   42e64:	01000134 	movhi	r4,4
   42e68:	21091c04 	addi	r4,r4,9328
   42e6c:	89000f15 	stw	r4,60(r17)
   42e70:	18c02014 	ori	r3,r3,128
   42e74:	80c0030d 	sth	r3,12(r16)
   42e78:	80800015 	stw	r2,0(r16)
   42e7c:	80800415 	stw	r2,16(r16)
   42e80:	84800515 	stw	r18,20(r16)
   42e84:	98001c1e 	bne	r19,zero,42ef8 <__smakebuf_r+0x160>
   42e88:	dfc01317 	ldw	ra,76(sp)
   42e8c:	dcc01217 	ldw	r19,72(sp)
   42e90:	dc801117 	ldw	r18,68(sp)
   42e94:	dc401017 	ldw	r17,64(sp)
   42e98:	dc000f17 	ldw	r16,60(sp)
   42e9c:	dec01404 	addi	sp,sp,80
   42ea0:	f800283a 	ret
   42ea4:	288010c4 	addi	r2,r5,67
   42ea8:	28800015 	stw	r2,0(r5)
   42eac:	28800415 	stw	r2,16(r5)
   42eb0:	00800044 	movi	r2,1
   42eb4:	28800515 	stw	r2,20(r5)
   42eb8:	f800283a 	ret
   42ebc:	04801004 	movi	r18,64
   42ec0:	003fe006 	br	42e44 <__alt_data_end+0xfffcd2e4>
   42ec4:	81000a17 	ldw	r4,40(r16)
   42ec8:	00c00134 	movhi	r3,4
   42ecc:	18cc5304 	addi	r3,r3,12620
   42ed0:	20ffc51e 	bne	r4,r3,42de8 <__alt_data_end+0xfffcd288>
   42ed4:	80c0030b 	ldhu	r3,12(r16)
   42ed8:	01010004 	movi	r4,1024
   42edc:	81001315 	stw	r4,76(r16)
   42ee0:	1906b03a 	or	r3,r3,r4
   42ee4:	80c0030d 	sth	r3,12(r16)
   42ee8:	003fc206 	br	42df4 <__alt_data_end+0xfffcd294>
   42eec:	0027883a 	mov	r19,zero
   42ef0:	04810004 	movi	r18,1024
   42ef4:	003fd606 	br	42e50 <__alt_data_end+0xfffcd2f0>
   42ef8:	8140038f 	ldh	r5,14(r16)
   42efc:	8809883a 	mov	r4,r17
   42f00:	00433cc0 	call	433cc <_isatty_r>
   42f04:	103fe026 	beq	r2,zero,42e88 <__alt_data_end+0xfffcd328>
   42f08:	8080030b 	ldhu	r2,12(r16)
   42f0c:	10800054 	ori	r2,r2,1
   42f10:	8080030d 	sth	r2,12(r16)
   42f14:	003fdc06 	br	42e88 <__alt_data_end+0xfffcd328>
   42f18:	8080030b 	ldhu	r2,12(r16)
   42f1c:	10c0800c 	andi	r3,r2,512
   42f20:	183fd91e 	bne	r3,zero,42e88 <__alt_data_end+0xfffcd328>
   42f24:	10800094 	ori	r2,r2,2
   42f28:	80c010c4 	addi	r3,r16,67
   42f2c:	8080030d 	sth	r2,12(r16)
   42f30:	00800044 	movi	r2,1
   42f34:	80c00015 	stw	r3,0(r16)
   42f38:	80c00415 	stw	r3,16(r16)
   42f3c:	80800515 	stw	r2,20(r16)
   42f40:	003fd106 	br	42e88 <__alt_data_end+0xfffcd328>
   42f44:	04c00044 	movi	r19,1
   42f48:	04810004 	movi	r18,1024
   42f4c:	003fc006 	br	42e50 <__alt_data_end+0xfffcd2f0>

00042f50 <memset>:
   42f50:	20c000cc 	andi	r3,r4,3
   42f54:	2005883a 	mov	r2,r4
   42f58:	18004326 	beq	r3,zero,43068 <memset+0x118>
   42f5c:	31ffffc4 	addi	r7,r6,-1
   42f60:	30004026 	beq	r6,zero,43064 <memset+0x114>
   42f64:	2813883a 	mov	r9,r5
   42f68:	200d883a 	mov	r6,r4
   42f6c:	2007883a 	mov	r3,r4
   42f70:	00000406 	br	42f84 <memset+0x34>
   42f74:	3a3fffc4 	addi	r8,r7,-1
   42f78:	31800044 	addi	r6,r6,1
   42f7c:	38003926 	beq	r7,zero,43064 <memset+0x114>
   42f80:	400f883a 	mov	r7,r8
   42f84:	18c00044 	addi	r3,r3,1
   42f88:	32400005 	stb	r9,0(r6)
   42f8c:	1a0000cc 	andi	r8,r3,3
   42f90:	403ff81e 	bne	r8,zero,42f74 <__alt_data_end+0xfffcd414>
   42f94:	010000c4 	movi	r4,3
   42f98:	21c02d2e 	bgeu	r4,r7,43050 <memset+0x100>
   42f9c:	29803fcc 	andi	r6,r5,255
   42fa0:	3008923a 	slli	r4,r6,8
   42fa4:	218cb03a 	or	r6,r4,r6
   42fa8:	3008943a 	slli	r4,r6,16
   42fac:	218cb03a 	or	r6,r4,r6
   42fb0:	010003c4 	movi	r4,15
   42fb4:	21c0182e 	bgeu	r4,r7,43018 <memset+0xc8>
   42fb8:	3b3ffc04 	addi	r12,r7,-16
   42fbc:	6018d13a 	srli	r12,r12,4
   42fc0:	1a000104 	addi	r8,r3,4
   42fc4:	1ac00204 	addi	r11,r3,8
   42fc8:	6008913a 	slli	r4,r12,4
   42fcc:	1a800304 	addi	r10,r3,12
   42fd0:	1813883a 	mov	r9,r3
   42fd4:	21000504 	addi	r4,r4,20
   42fd8:	1909883a 	add	r4,r3,r4
   42fdc:	49800015 	stw	r6,0(r9)
   42fe0:	41800015 	stw	r6,0(r8)
   42fe4:	59800015 	stw	r6,0(r11)
   42fe8:	51800015 	stw	r6,0(r10)
   42fec:	42000404 	addi	r8,r8,16
   42ff0:	4a400404 	addi	r9,r9,16
   42ff4:	5ac00404 	addi	r11,r11,16
   42ff8:	52800404 	addi	r10,r10,16
   42ffc:	413ff71e 	bne	r8,r4,42fdc <__alt_data_end+0xfffcd47c>
   43000:	63000044 	addi	r12,r12,1
   43004:	6018913a 	slli	r12,r12,4
   43008:	39c003cc 	andi	r7,r7,15
   4300c:	010000c4 	movi	r4,3
   43010:	1b07883a 	add	r3,r3,r12
   43014:	21c00e2e 	bgeu	r4,r7,43050 <memset+0x100>
   43018:	1813883a 	mov	r9,r3
   4301c:	3811883a 	mov	r8,r7
   43020:	010000c4 	movi	r4,3
   43024:	49800015 	stw	r6,0(r9)
   43028:	423fff04 	addi	r8,r8,-4
   4302c:	4a400104 	addi	r9,r9,4
   43030:	223ffc36 	bltu	r4,r8,43024 <__alt_data_end+0xfffcd4c4>
   43034:	393fff04 	addi	r4,r7,-4
   43038:	2008d0ba 	srli	r4,r4,2
   4303c:	39c000cc 	andi	r7,r7,3
   43040:	21000044 	addi	r4,r4,1
   43044:	2109883a 	add	r4,r4,r4
   43048:	2109883a 	add	r4,r4,r4
   4304c:	1907883a 	add	r3,r3,r4
   43050:	38000426 	beq	r7,zero,43064 <memset+0x114>
   43054:	19cf883a 	add	r7,r3,r7
   43058:	19400005 	stb	r5,0(r3)
   4305c:	18c00044 	addi	r3,r3,1
   43060:	19fffd1e 	bne	r3,r7,43058 <__alt_data_end+0xfffcd4f8>
   43064:	f800283a 	ret
   43068:	2007883a 	mov	r3,r4
   4306c:	300f883a 	mov	r7,r6
   43070:	003fc806 	br	42f94 <__alt_data_end+0xfffcd434>

00043074 <__sread>:
   43074:	defffe04 	addi	sp,sp,-8
   43078:	dc000015 	stw	r16,0(sp)
   4307c:	2821883a 	mov	r16,r5
   43080:	2940038f 	ldh	r5,14(r5)
   43084:	dfc00115 	stw	ra,4(sp)
   43088:	004347c0 	call	4347c <_read_r>
   4308c:	10000716 	blt	r2,zero,430ac <__sread+0x38>
   43090:	80c01417 	ldw	r3,80(r16)
   43094:	1887883a 	add	r3,r3,r2
   43098:	80c01415 	stw	r3,80(r16)
   4309c:	dfc00117 	ldw	ra,4(sp)
   430a0:	dc000017 	ldw	r16,0(sp)
   430a4:	dec00204 	addi	sp,sp,8
   430a8:	f800283a 	ret
   430ac:	80c0030b 	ldhu	r3,12(r16)
   430b0:	18fbffcc 	andi	r3,r3,61439
   430b4:	80c0030d 	sth	r3,12(r16)
   430b8:	dfc00117 	ldw	ra,4(sp)
   430bc:	dc000017 	ldw	r16,0(sp)
   430c0:	dec00204 	addi	sp,sp,8
   430c4:	f800283a 	ret

000430c8 <__seofread>:
   430c8:	0005883a 	mov	r2,zero
   430cc:	f800283a 	ret

000430d0 <__swrite>:
   430d0:	2880030b 	ldhu	r2,12(r5)
   430d4:	defffb04 	addi	sp,sp,-20
   430d8:	dcc00315 	stw	r19,12(sp)
   430dc:	dc800215 	stw	r18,8(sp)
   430e0:	dc400115 	stw	r17,4(sp)
   430e4:	dc000015 	stw	r16,0(sp)
   430e8:	dfc00415 	stw	ra,16(sp)
   430ec:	10c0400c 	andi	r3,r2,256
   430f0:	2821883a 	mov	r16,r5
   430f4:	2027883a 	mov	r19,r4
   430f8:	3025883a 	mov	r18,r6
   430fc:	3823883a 	mov	r17,r7
   43100:	18000526 	beq	r3,zero,43118 <__swrite+0x48>
   43104:	2940038f 	ldh	r5,14(r5)
   43108:	000d883a 	mov	r6,zero
   4310c:	01c00084 	movi	r7,2
   43110:	00434200 	call	43420 <_lseek_r>
   43114:	8080030b 	ldhu	r2,12(r16)
   43118:	8140038f 	ldh	r5,14(r16)
   4311c:	10bbffcc 	andi	r2,r2,61439
   43120:	9809883a 	mov	r4,r19
   43124:	900d883a 	mov	r6,r18
   43128:	880f883a 	mov	r7,r17
   4312c:	8080030d 	sth	r2,12(r16)
   43130:	dfc00417 	ldw	ra,16(sp)
   43134:	dcc00317 	ldw	r19,12(sp)
   43138:	dc800217 	ldw	r18,8(sp)
   4313c:	dc400117 	ldw	r17,4(sp)
   43140:	dc000017 	ldw	r16,0(sp)
   43144:	dec00504 	addi	sp,sp,20
   43148:	00431b01 	jmpi	431b0 <_write_r>

0004314c <__sseek>:
   4314c:	defffe04 	addi	sp,sp,-8
   43150:	dc000015 	stw	r16,0(sp)
   43154:	2821883a 	mov	r16,r5
   43158:	2940038f 	ldh	r5,14(r5)
   4315c:	dfc00115 	stw	ra,4(sp)
   43160:	00434200 	call	43420 <_lseek_r>
   43164:	00ffffc4 	movi	r3,-1
   43168:	10c00826 	beq	r2,r3,4318c <__sseek+0x40>
   4316c:	80c0030b 	ldhu	r3,12(r16)
   43170:	80801415 	stw	r2,80(r16)
   43174:	18c40014 	ori	r3,r3,4096
   43178:	80c0030d 	sth	r3,12(r16)
   4317c:	dfc00117 	ldw	ra,4(sp)
   43180:	dc000017 	ldw	r16,0(sp)
   43184:	dec00204 	addi	sp,sp,8
   43188:	f800283a 	ret
   4318c:	80c0030b 	ldhu	r3,12(r16)
   43190:	18fbffcc 	andi	r3,r3,61439
   43194:	80c0030d 	sth	r3,12(r16)
   43198:	dfc00117 	ldw	ra,4(sp)
   4319c:	dc000017 	ldw	r16,0(sp)
   431a0:	dec00204 	addi	sp,sp,8
   431a4:	f800283a 	ret

000431a8 <__sclose>:
   431a8:	2940038f 	ldh	r5,14(r5)
   431ac:	004320c1 	jmpi	4320c <_close_r>

000431b0 <_write_r>:
   431b0:	defffd04 	addi	sp,sp,-12
   431b4:	dc000015 	stw	r16,0(sp)
   431b8:	04000174 	movhi	r16,5
   431bc:	dc400115 	stw	r17,4(sp)
   431c0:	840abe04 	addi	r16,r16,11000
   431c4:	2023883a 	mov	r17,r4
   431c8:	2809883a 	mov	r4,r5
   431cc:	300b883a 	mov	r5,r6
   431d0:	380d883a 	mov	r6,r7
   431d4:	dfc00215 	stw	ra,8(sp)
   431d8:	80000015 	stw	zero,0(r16)
   431dc:	0043e100 	call	43e10 <write>
   431e0:	00ffffc4 	movi	r3,-1
   431e4:	10c00526 	beq	r2,r3,431fc <_write_r+0x4c>
   431e8:	dfc00217 	ldw	ra,8(sp)
   431ec:	dc400117 	ldw	r17,4(sp)
   431f0:	dc000017 	ldw	r16,0(sp)
   431f4:	dec00304 	addi	sp,sp,12
   431f8:	f800283a 	ret
   431fc:	80c00017 	ldw	r3,0(r16)
   43200:	183ff926 	beq	r3,zero,431e8 <__alt_data_end+0xfffcd688>
   43204:	88c00015 	stw	r3,0(r17)
   43208:	003ff706 	br	431e8 <__alt_data_end+0xfffcd688>

0004320c <_close_r>:
   4320c:	defffd04 	addi	sp,sp,-12
   43210:	dc000015 	stw	r16,0(sp)
   43214:	04000174 	movhi	r16,5
   43218:	dc400115 	stw	r17,4(sp)
   4321c:	840abe04 	addi	r16,r16,11000
   43220:	2023883a 	mov	r17,r4
   43224:	2809883a 	mov	r4,r5
   43228:	dfc00215 	stw	ra,8(sp)
   4322c:	80000015 	stw	zero,0(r16)
   43230:	00435500 	call	43550 <close>
   43234:	00ffffc4 	movi	r3,-1
   43238:	10c00526 	beq	r2,r3,43250 <_close_r+0x44>
   4323c:	dfc00217 	ldw	ra,8(sp)
   43240:	dc400117 	ldw	r17,4(sp)
   43244:	dc000017 	ldw	r16,0(sp)
   43248:	dec00304 	addi	sp,sp,12
   4324c:	f800283a 	ret
   43250:	80c00017 	ldw	r3,0(r16)
   43254:	183ff926 	beq	r3,zero,4323c <__alt_data_end+0xfffcd6dc>
   43258:	88c00015 	stw	r3,0(r17)
   4325c:	003ff706 	br	4323c <__alt_data_end+0xfffcd6dc>

00043260 <_fclose_r>:
   43260:	28003226 	beq	r5,zero,4332c <_fclose_r+0xcc>
   43264:	defffc04 	addi	sp,sp,-16
   43268:	dc400115 	stw	r17,4(sp)
   4326c:	2023883a 	mov	r17,r4
   43270:	dc000015 	stw	r16,0(sp)
   43274:	dfc00315 	stw	ra,12(sp)
   43278:	dc800215 	stw	r18,8(sp)
   4327c:	2821883a 	mov	r16,r5
   43280:	00427d40 	call	427d4 <__sfp_lock_acquire>
   43284:	88000226 	beq	r17,zero,43290 <_fclose_r+0x30>
   43288:	88800e17 	ldw	r2,56(r17)
   4328c:	10002926 	beq	r2,zero,43334 <_fclose_r+0xd4>
   43290:	8080030f 	ldh	r2,12(r16)
   43294:	10002226 	beq	r2,zero,43320 <_fclose_r+0xc0>
   43298:	8809883a 	mov	r4,r17
   4329c:	800b883a 	mov	r5,r16
   432a0:	00422080 	call	42208 <_fflush_r>
   432a4:	1025883a 	mov	r18,r2
   432a8:	80800b17 	ldw	r2,44(r16)
   432ac:	10000426 	beq	r2,zero,432c0 <_fclose_r+0x60>
   432b0:	81400717 	ldw	r5,28(r16)
   432b4:	8809883a 	mov	r4,r17
   432b8:	103ee83a 	callr	r2
   432bc:	10002616 	blt	r2,zero,43358 <_fclose_r+0xf8>
   432c0:	8080030b 	ldhu	r2,12(r16)
   432c4:	1080200c 	andi	r2,r2,128
   432c8:	10001f1e 	bne	r2,zero,43348 <_fclose_r+0xe8>
   432cc:	81400c17 	ldw	r5,48(r16)
   432d0:	28000526 	beq	r5,zero,432e8 <_fclose_r+0x88>
   432d4:	80801004 	addi	r2,r16,64
   432d8:	28800226 	beq	r5,r2,432e4 <_fclose_r+0x84>
   432dc:	8809883a 	mov	r4,r17
   432e0:	00429380 	call	42938 <_free_r>
   432e4:	80000c15 	stw	zero,48(r16)
   432e8:	81401117 	ldw	r5,68(r16)
   432ec:	28000326 	beq	r5,zero,432fc <_fclose_r+0x9c>
   432f0:	8809883a 	mov	r4,r17
   432f4:	00429380 	call	42938 <_free_r>
   432f8:	80001115 	stw	zero,68(r16)
   432fc:	8000030d 	sth	zero,12(r16)
   43300:	00427d80 	call	427d8 <__sfp_lock_release>
   43304:	9005883a 	mov	r2,r18
   43308:	dfc00317 	ldw	ra,12(sp)
   4330c:	dc800217 	ldw	r18,8(sp)
   43310:	dc400117 	ldw	r17,4(sp)
   43314:	dc000017 	ldw	r16,0(sp)
   43318:	dec00404 	addi	sp,sp,16
   4331c:	f800283a 	ret
   43320:	00427d80 	call	427d8 <__sfp_lock_release>
   43324:	0005883a 	mov	r2,zero
   43328:	003ff706 	br	43308 <__alt_data_end+0xfffcd7a8>
   4332c:	0005883a 	mov	r2,zero
   43330:	f800283a 	ret
   43334:	8809883a 	mov	r4,r17
   43338:	00427c40 	call	427c4 <__sinit>
   4333c:	8080030f 	ldh	r2,12(r16)
   43340:	103fd51e 	bne	r2,zero,43298 <__alt_data_end+0xfffcd738>
   43344:	003ff606 	br	43320 <__alt_data_end+0xfffcd7c0>
   43348:	81400417 	ldw	r5,16(r16)
   4334c:	8809883a 	mov	r4,r17
   43350:	00429380 	call	42938 <_free_r>
   43354:	003fdd06 	br	432cc <__alt_data_end+0xfffcd76c>
   43358:	04bfffc4 	movi	r18,-1
   4335c:	003fd806 	br	432c0 <__alt_data_end+0xfffcd760>

00043360 <fclose>:
   43360:	00800174 	movhi	r2,5
   43364:	10839e04 	addi	r2,r2,3704
   43368:	200b883a 	mov	r5,r4
   4336c:	11000017 	ldw	r4,0(r2)
   43370:	00432601 	jmpi	43260 <_fclose_r>

00043374 <_fstat_r>:
   43374:	defffd04 	addi	sp,sp,-12
   43378:	dc000015 	stw	r16,0(sp)
   4337c:	04000174 	movhi	r16,5
   43380:	dc400115 	stw	r17,4(sp)
   43384:	840abe04 	addi	r16,r16,11000
   43388:	2023883a 	mov	r17,r4
   4338c:	2809883a 	mov	r4,r5
   43390:	300b883a 	mov	r5,r6
   43394:	dfc00215 	stw	ra,8(sp)
   43398:	80000015 	stw	zero,0(r16)
   4339c:	00436a40 	call	436a4 <fstat>
   433a0:	00ffffc4 	movi	r3,-1
   433a4:	10c00526 	beq	r2,r3,433bc <_fstat_r+0x48>
   433a8:	dfc00217 	ldw	ra,8(sp)
   433ac:	dc400117 	ldw	r17,4(sp)
   433b0:	dc000017 	ldw	r16,0(sp)
   433b4:	dec00304 	addi	sp,sp,12
   433b8:	f800283a 	ret
   433bc:	80c00017 	ldw	r3,0(r16)
   433c0:	183ff926 	beq	r3,zero,433a8 <__alt_data_end+0xfffcd848>
   433c4:	88c00015 	stw	r3,0(r17)
   433c8:	003ff706 	br	433a8 <__alt_data_end+0xfffcd848>

000433cc <_isatty_r>:
   433cc:	defffd04 	addi	sp,sp,-12
   433d0:	dc000015 	stw	r16,0(sp)
   433d4:	04000174 	movhi	r16,5
   433d8:	dc400115 	stw	r17,4(sp)
   433dc:	840abe04 	addi	r16,r16,11000
   433e0:	2023883a 	mov	r17,r4
   433e4:	2809883a 	mov	r4,r5
   433e8:	dfc00215 	stw	ra,8(sp)
   433ec:	80000015 	stw	zero,0(r16)
   433f0:	00437ac0 	call	437ac <isatty>
   433f4:	00ffffc4 	movi	r3,-1
   433f8:	10c00526 	beq	r2,r3,43410 <_isatty_r+0x44>
   433fc:	dfc00217 	ldw	ra,8(sp)
   43400:	dc400117 	ldw	r17,4(sp)
   43404:	dc000017 	ldw	r16,0(sp)
   43408:	dec00304 	addi	sp,sp,12
   4340c:	f800283a 	ret
   43410:	80c00017 	ldw	r3,0(r16)
   43414:	183ff926 	beq	r3,zero,433fc <__alt_data_end+0xfffcd89c>
   43418:	88c00015 	stw	r3,0(r17)
   4341c:	003ff706 	br	433fc <__alt_data_end+0xfffcd89c>

00043420 <_lseek_r>:
   43420:	defffd04 	addi	sp,sp,-12
   43424:	dc000015 	stw	r16,0(sp)
   43428:	04000174 	movhi	r16,5
   4342c:	dc400115 	stw	r17,4(sp)
   43430:	840abe04 	addi	r16,r16,11000
   43434:	2023883a 	mov	r17,r4
   43438:	2809883a 	mov	r4,r5
   4343c:	300b883a 	mov	r5,r6
   43440:	380d883a 	mov	r6,r7
   43444:	dfc00215 	stw	ra,8(sp)
   43448:	80000015 	stw	zero,0(r16)
   4344c:	004398c0 	call	4398c <lseek>
   43450:	00ffffc4 	movi	r3,-1
   43454:	10c00526 	beq	r2,r3,4346c <_lseek_r+0x4c>
   43458:	dfc00217 	ldw	ra,8(sp)
   4345c:	dc400117 	ldw	r17,4(sp)
   43460:	dc000017 	ldw	r16,0(sp)
   43464:	dec00304 	addi	sp,sp,12
   43468:	f800283a 	ret
   4346c:	80c00017 	ldw	r3,0(r16)
   43470:	183ff926 	beq	r3,zero,43458 <__alt_data_end+0xfffcd8f8>
   43474:	88c00015 	stw	r3,0(r17)
   43478:	003ff706 	br	43458 <__alt_data_end+0xfffcd8f8>

0004347c <_read_r>:
   4347c:	defffd04 	addi	sp,sp,-12
   43480:	dc000015 	stw	r16,0(sp)
   43484:	04000174 	movhi	r16,5
   43488:	dc400115 	stw	r17,4(sp)
   4348c:	840abe04 	addi	r16,r16,11000
   43490:	2023883a 	mov	r17,r4
   43494:	2809883a 	mov	r4,r5
   43498:	300b883a 	mov	r5,r6
   4349c:	380d883a 	mov	r6,r7
   434a0:	dfc00215 	stw	ra,8(sp)
   434a4:	80000015 	stw	zero,0(r16)
   434a8:	0043b8c0 	call	43b8c <read>
   434ac:	00ffffc4 	movi	r3,-1
   434b0:	10c00526 	beq	r2,r3,434c8 <_read_r+0x4c>
   434b4:	dfc00217 	ldw	ra,8(sp)
   434b8:	dc400117 	ldw	r17,4(sp)
   434bc:	dc000017 	ldw	r16,0(sp)
   434c0:	dec00304 	addi	sp,sp,12
   434c4:	f800283a 	ret
   434c8:	80c00017 	ldw	r3,0(r16)
   434cc:	183ff926 	beq	r3,zero,434b4 <__alt_data_end+0xfffcd954>
   434d0:	88c00015 	stw	r3,0(r17)
   434d4:	003ff706 	br	434b4 <__alt_data_end+0xfffcd954>

000434d8 <__mulsi3>:
   434d8:	0005883a 	mov	r2,zero
   434dc:	20000726 	beq	r4,zero,434fc <__mulsi3+0x24>
   434e0:	20c0004c 	andi	r3,r4,1
   434e4:	2008d07a 	srli	r4,r4,1
   434e8:	18000126 	beq	r3,zero,434f0 <__mulsi3+0x18>
   434ec:	1145883a 	add	r2,r2,r5
   434f0:	294b883a 	add	r5,r5,r5
   434f4:	203ffa1e 	bne	r4,zero,434e0 <__alt_data_end+0xfffcd980>
   434f8:	f800283a 	ret
   434fc:	f800283a 	ret

00043500 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43500:	defffe04 	addi	sp,sp,-8
   43504:	dfc00115 	stw	ra,4(sp)
   43508:	df000015 	stw	fp,0(sp)
   4350c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43510:	00800174 	movhi	r2,5
   43514:	1083a604 	addi	r2,r2,3736
   43518:	10800017 	ldw	r2,0(r2)
   4351c:	10000526 	beq	r2,zero,43534 <alt_get_errno+0x34>
   43520:	00800174 	movhi	r2,5
   43524:	1083a604 	addi	r2,r2,3736
   43528:	10800017 	ldw	r2,0(r2)
   4352c:	103ee83a 	callr	r2
   43530:	00000206 	br	4353c <alt_get_errno+0x3c>
   43534:	00800174 	movhi	r2,5
   43538:	108abe04 	addi	r2,r2,11000
}
   4353c:	e037883a 	mov	sp,fp
   43540:	dfc00117 	ldw	ra,4(sp)
   43544:	df000017 	ldw	fp,0(sp)
   43548:	dec00204 	addi	sp,sp,8
   4354c:	f800283a 	ret

00043550 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   43550:	defffb04 	addi	sp,sp,-20
   43554:	dfc00415 	stw	ra,16(sp)
   43558:	df000315 	stw	fp,12(sp)
   4355c:	df000304 	addi	fp,sp,12
   43560:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   43564:	e0bfff17 	ldw	r2,-4(fp)
   43568:	10000816 	blt	r2,zero,4358c <close+0x3c>
   4356c:	e13fff17 	ldw	r4,-4(fp)
   43570:	01400304 	movi	r5,12
   43574:	00434d80 	call	434d8 <__mulsi3>
   43578:	1007883a 	mov	r3,r2
   4357c:	00800174 	movhi	r2,5
   43580:	10beee04 	addi	r2,r2,-1096
   43584:	1885883a 	add	r2,r3,r2
   43588:	00000106 	br	43590 <close+0x40>
   4358c:	0005883a 	mov	r2,zero
   43590:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   43594:	e0bffd17 	ldw	r2,-12(fp)
   43598:	10001926 	beq	r2,zero,43600 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4359c:	e0bffd17 	ldw	r2,-12(fp)
   435a0:	10800017 	ldw	r2,0(r2)
   435a4:	10800417 	ldw	r2,16(r2)
   435a8:	10000626 	beq	r2,zero,435c4 <close+0x74>
   435ac:	e0bffd17 	ldw	r2,-12(fp)
   435b0:	10800017 	ldw	r2,0(r2)
   435b4:	10800417 	ldw	r2,16(r2)
   435b8:	e13ffd17 	ldw	r4,-12(fp)
   435bc:	103ee83a 	callr	r2
   435c0:	00000106 	br	435c8 <close+0x78>
   435c4:	0005883a 	mov	r2,zero
   435c8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   435cc:	e13fff17 	ldw	r4,-4(fp)
   435d0:	0043c900 	call	43c90 <alt_release_fd>
    if (rval < 0)
   435d4:	e0bffe17 	ldw	r2,-8(fp)
   435d8:	1000070e 	bge	r2,zero,435f8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   435dc:	00435000 	call	43500 <alt_get_errno>
   435e0:	1007883a 	mov	r3,r2
   435e4:	e0bffe17 	ldw	r2,-8(fp)
   435e8:	0085c83a 	sub	r2,zero,r2
   435ec:	18800015 	stw	r2,0(r3)
      return -1;
   435f0:	00bfffc4 	movi	r2,-1
   435f4:	00000706 	br	43614 <close+0xc4>
    }
    return 0;
   435f8:	0005883a 	mov	r2,zero
   435fc:	00000506 	br	43614 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43600:	00435000 	call	43500 <alt_get_errno>
   43604:	1007883a 	mov	r3,r2
   43608:	00801444 	movi	r2,81
   4360c:	18800015 	stw	r2,0(r3)
    return -1;
   43610:	00bfffc4 	movi	r2,-1
  }
}
   43614:	e037883a 	mov	sp,fp
   43618:	dfc00117 	ldw	ra,4(sp)
   4361c:	df000017 	ldw	fp,0(sp)
   43620:	dec00204 	addi	sp,sp,8
   43624:	f800283a 	ret

00043628 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   43628:	defffc04 	addi	sp,sp,-16
   4362c:	df000315 	stw	fp,12(sp)
   43630:	df000304 	addi	fp,sp,12
   43634:	e13ffd15 	stw	r4,-12(fp)
   43638:	e17ffe15 	stw	r5,-8(fp)
   4363c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   43640:	e0bfff17 	ldw	r2,-4(fp)
}
   43644:	e037883a 	mov	sp,fp
   43648:	df000017 	ldw	fp,0(sp)
   4364c:	dec00104 	addi	sp,sp,4
   43650:	f800283a 	ret

00043654 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43654:	defffe04 	addi	sp,sp,-8
   43658:	dfc00115 	stw	ra,4(sp)
   4365c:	df000015 	stw	fp,0(sp)
   43660:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43664:	00800174 	movhi	r2,5
   43668:	1083a604 	addi	r2,r2,3736
   4366c:	10800017 	ldw	r2,0(r2)
   43670:	10000526 	beq	r2,zero,43688 <alt_get_errno+0x34>
   43674:	00800174 	movhi	r2,5
   43678:	1083a604 	addi	r2,r2,3736
   4367c:	10800017 	ldw	r2,0(r2)
   43680:	103ee83a 	callr	r2
   43684:	00000206 	br	43690 <alt_get_errno+0x3c>
   43688:	00800174 	movhi	r2,5
   4368c:	108abe04 	addi	r2,r2,11000
}
   43690:	e037883a 	mov	sp,fp
   43694:	dfc00117 	ldw	ra,4(sp)
   43698:	df000017 	ldw	fp,0(sp)
   4369c:	dec00204 	addi	sp,sp,8
   436a0:	f800283a 	ret

000436a4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   436a4:	defffb04 	addi	sp,sp,-20
   436a8:	dfc00415 	stw	ra,16(sp)
   436ac:	df000315 	stw	fp,12(sp)
   436b0:	df000304 	addi	fp,sp,12
   436b4:	e13ffe15 	stw	r4,-8(fp)
   436b8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   436bc:	e0bffe17 	ldw	r2,-8(fp)
   436c0:	10000816 	blt	r2,zero,436e4 <fstat+0x40>
   436c4:	e13ffe17 	ldw	r4,-8(fp)
   436c8:	01400304 	movi	r5,12
   436cc:	00434d80 	call	434d8 <__mulsi3>
   436d0:	1007883a 	mov	r3,r2
   436d4:	00800174 	movhi	r2,5
   436d8:	10beee04 	addi	r2,r2,-1096
   436dc:	1885883a 	add	r2,r3,r2
   436e0:	00000106 	br	436e8 <fstat+0x44>
   436e4:	0005883a 	mov	r2,zero
   436e8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   436ec:	e0bffd17 	ldw	r2,-12(fp)
   436f0:	10001026 	beq	r2,zero,43734 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   436f4:	e0bffd17 	ldw	r2,-12(fp)
   436f8:	10800017 	ldw	r2,0(r2)
   436fc:	10800817 	ldw	r2,32(r2)
   43700:	10000726 	beq	r2,zero,43720 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   43704:	e0bffd17 	ldw	r2,-12(fp)
   43708:	10800017 	ldw	r2,0(r2)
   4370c:	10800817 	ldw	r2,32(r2)
   43710:	e13ffd17 	ldw	r4,-12(fp)
   43714:	e17fff17 	ldw	r5,-4(fp)
   43718:	103ee83a 	callr	r2
   4371c:	00000a06 	br	43748 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43720:	e0bfff17 	ldw	r2,-4(fp)
   43724:	00c80004 	movi	r3,8192
   43728:	10c00115 	stw	r3,4(r2)
      return 0;
   4372c:	0005883a 	mov	r2,zero
   43730:	00000506 	br	43748 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43734:	00436540 	call	43654 <alt_get_errno>
   43738:	1007883a 	mov	r3,r2
   4373c:	00801444 	movi	r2,81
   43740:	18800015 	stw	r2,0(r3)
    return -1;
   43744:	00bfffc4 	movi	r2,-1
  }
}
   43748:	e037883a 	mov	sp,fp
   4374c:	dfc00117 	ldw	ra,4(sp)
   43750:	df000017 	ldw	fp,0(sp)
   43754:	dec00204 	addi	sp,sp,8
   43758:	f800283a 	ret

0004375c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4375c:	defffe04 	addi	sp,sp,-8
   43760:	dfc00115 	stw	ra,4(sp)
   43764:	df000015 	stw	fp,0(sp)
   43768:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4376c:	00800174 	movhi	r2,5
   43770:	1083a604 	addi	r2,r2,3736
   43774:	10800017 	ldw	r2,0(r2)
   43778:	10000526 	beq	r2,zero,43790 <alt_get_errno+0x34>
   4377c:	00800174 	movhi	r2,5
   43780:	1083a604 	addi	r2,r2,3736
   43784:	10800017 	ldw	r2,0(r2)
   43788:	103ee83a 	callr	r2
   4378c:	00000206 	br	43798 <alt_get_errno+0x3c>
   43790:	00800174 	movhi	r2,5
   43794:	108abe04 	addi	r2,r2,11000
}
   43798:	e037883a 	mov	sp,fp
   4379c:	dfc00117 	ldw	ra,4(sp)
   437a0:	df000017 	ldw	fp,0(sp)
   437a4:	dec00204 	addi	sp,sp,8
   437a8:	f800283a 	ret

000437ac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   437ac:	deffed04 	addi	sp,sp,-76
   437b0:	dfc01215 	stw	ra,72(sp)
   437b4:	df001115 	stw	fp,68(sp)
   437b8:	df001104 	addi	fp,sp,68
   437bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   437c0:	e0bfff17 	ldw	r2,-4(fp)
   437c4:	10000816 	blt	r2,zero,437e8 <isatty+0x3c>
   437c8:	e13fff17 	ldw	r4,-4(fp)
   437cc:	01400304 	movi	r5,12
   437d0:	00434d80 	call	434d8 <__mulsi3>
   437d4:	1007883a 	mov	r3,r2
   437d8:	00800174 	movhi	r2,5
   437dc:	10beee04 	addi	r2,r2,-1096
   437e0:	1885883a 	add	r2,r3,r2
   437e4:	00000106 	br	437ec <isatty+0x40>
   437e8:	0005883a 	mov	r2,zero
   437ec:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   437f0:	e0bfef17 	ldw	r2,-68(fp)
   437f4:	10000e26 	beq	r2,zero,43830 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   437f8:	e0bfef17 	ldw	r2,-68(fp)
   437fc:	10800017 	ldw	r2,0(r2)
   43800:	10800817 	ldw	r2,32(r2)
   43804:	1000021e 	bne	r2,zero,43810 <isatty+0x64>
    {
      return 1;
   43808:	00800044 	movi	r2,1
   4380c:	00000d06 	br	43844 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43810:	e0bff004 	addi	r2,fp,-64
   43814:	e13fff17 	ldw	r4,-4(fp)
   43818:	100b883a 	mov	r5,r2
   4381c:	00436a40 	call	436a4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43820:	e0bff117 	ldw	r2,-60(fp)
   43824:	10880020 	cmpeqi	r2,r2,8192
   43828:	10803fcc 	andi	r2,r2,255
   4382c:	00000506 	br	43844 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43830:	004375c0 	call	4375c <alt_get_errno>
   43834:	1007883a 	mov	r3,r2
   43838:	00801444 	movi	r2,81
   4383c:	18800015 	stw	r2,0(r3)
    return 0;
   43840:	0005883a 	mov	r2,zero
  }
}
   43844:	e037883a 	mov	sp,fp
   43848:	dfc00117 	ldw	ra,4(sp)
   4384c:	df000017 	ldw	fp,0(sp)
   43850:	dec00204 	addi	sp,sp,8
   43854:	f800283a 	ret

00043858 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43858:	defffc04 	addi	sp,sp,-16
   4385c:	df000315 	stw	fp,12(sp)
   43860:	df000304 	addi	fp,sp,12
   43864:	e13ffd15 	stw	r4,-12(fp)
   43868:	e17ffe15 	stw	r5,-8(fp)
   4386c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   43870:	e0fffe17 	ldw	r3,-8(fp)
   43874:	e0bffd17 	ldw	r2,-12(fp)
   43878:	18800c26 	beq	r3,r2,438ac <alt_load_section+0x54>
  {
    while( to != end )
   4387c:	00000806 	br	438a0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   43880:	e0bffe17 	ldw	r2,-8(fp)
   43884:	10c00104 	addi	r3,r2,4
   43888:	e0fffe15 	stw	r3,-8(fp)
   4388c:	e0fffd17 	ldw	r3,-12(fp)
   43890:	19000104 	addi	r4,r3,4
   43894:	e13ffd15 	stw	r4,-12(fp)
   43898:	18c00017 	ldw	r3,0(r3)
   4389c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   438a0:	e0fffe17 	ldw	r3,-8(fp)
   438a4:	e0bfff17 	ldw	r2,-4(fp)
   438a8:	18bff51e 	bne	r3,r2,43880 <__alt_data_end+0xfffcdd20>
    {
      *to++ = *from++;
    }
  }
}
   438ac:	e037883a 	mov	sp,fp
   438b0:	df000017 	ldw	fp,0(sp)
   438b4:	dec00104 	addi	sp,sp,4
   438b8:	f800283a 	ret

000438bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   438bc:	defffe04 	addi	sp,sp,-8
   438c0:	dfc00115 	stw	ra,4(sp)
   438c4:	df000015 	stw	fp,0(sp)
   438c8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   438cc:	01000174 	movhi	r4,5
   438d0:	2103ca04 	addi	r4,r4,3880
   438d4:	01400174 	movhi	r5,5
   438d8:	297cd904 	addi	r5,r5,-3228
   438dc:	01800174 	movhi	r6,5
   438e0:	3183ca04 	addi	r6,r6,3880
   438e4:	00438580 	call	43858 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   438e8:	01000134 	movhi	r4,4
   438ec:	21000804 	addi	r4,r4,32
   438f0:	01400134 	movhi	r5,4
   438f4:	29400804 	addi	r5,r5,32
   438f8:	01800134 	movhi	r6,4
   438fc:	31808b04 	addi	r6,r6,556
   43900:	00438580 	call	43858 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43904:	01000174 	movhi	r4,5
   43908:	213c7a04 	addi	r4,r4,-3608
   4390c:	01400174 	movhi	r5,5
   43910:	297c7a04 	addi	r5,r5,-3608
   43914:	01800174 	movhi	r6,5
   43918:	31bcd904 	addi	r6,r6,-3228
   4391c:	00438580 	call	43858 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43920:	004da840 	call	4da84 <alt_dcache_flush_all>
  alt_icache_flush_all();
   43924:	004dc4c0 	call	4dc4c <alt_icache_flush_all>
}
   43928:	e037883a 	mov	sp,fp
   4392c:	dfc00117 	ldw	ra,4(sp)
   43930:	df000017 	ldw	fp,0(sp)
   43934:	dec00204 	addi	sp,sp,8
   43938:	f800283a 	ret

0004393c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4393c:	defffe04 	addi	sp,sp,-8
   43940:	dfc00115 	stw	ra,4(sp)
   43944:	df000015 	stw	fp,0(sp)
   43948:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4394c:	00800174 	movhi	r2,5
   43950:	1083a604 	addi	r2,r2,3736
   43954:	10800017 	ldw	r2,0(r2)
   43958:	10000526 	beq	r2,zero,43970 <alt_get_errno+0x34>
   4395c:	00800174 	movhi	r2,5
   43960:	1083a604 	addi	r2,r2,3736
   43964:	10800017 	ldw	r2,0(r2)
   43968:	103ee83a 	callr	r2
   4396c:	00000206 	br	43978 <alt_get_errno+0x3c>
   43970:	00800174 	movhi	r2,5
   43974:	108abe04 	addi	r2,r2,11000
}
   43978:	e037883a 	mov	sp,fp
   4397c:	dfc00117 	ldw	ra,4(sp)
   43980:	df000017 	ldw	fp,0(sp)
   43984:	dec00204 	addi	sp,sp,8
   43988:	f800283a 	ret

0004398c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4398c:	defff904 	addi	sp,sp,-28
   43990:	dfc00615 	stw	ra,24(sp)
   43994:	df000515 	stw	fp,20(sp)
   43998:	df000504 	addi	fp,sp,20
   4399c:	e13ffd15 	stw	r4,-12(fp)
   439a0:	e17ffe15 	stw	r5,-8(fp)
   439a4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   439a8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   439ac:	e0bffd17 	ldw	r2,-12(fp)
   439b0:	10000816 	blt	r2,zero,439d4 <lseek+0x48>
   439b4:	e13ffd17 	ldw	r4,-12(fp)
   439b8:	01400304 	movi	r5,12
   439bc:	00434d80 	call	434d8 <__mulsi3>
   439c0:	1007883a 	mov	r3,r2
   439c4:	00800174 	movhi	r2,5
   439c8:	10beee04 	addi	r2,r2,-1096
   439cc:	1885883a 	add	r2,r3,r2
   439d0:	00000106 	br	439d8 <lseek+0x4c>
   439d4:	0005883a 	mov	r2,zero
   439d8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   439dc:	e0bffc17 	ldw	r2,-16(fp)
   439e0:	10001026 	beq	r2,zero,43a24 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   439e4:	e0bffc17 	ldw	r2,-16(fp)
   439e8:	10800017 	ldw	r2,0(r2)
   439ec:	10800717 	ldw	r2,28(r2)
   439f0:	10000926 	beq	r2,zero,43a18 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   439f4:	e0bffc17 	ldw	r2,-16(fp)
   439f8:	10800017 	ldw	r2,0(r2)
   439fc:	10800717 	ldw	r2,28(r2)
   43a00:	e13ffc17 	ldw	r4,-16(fp)
   43a04:	e17ffe17 	ldw	r5,-8(fp)
   43a08:	e1bfff17 	ldw	r6,-4(fp)
   43a0c:	103ee83a 	callr	r2
   43a10:	e0bffb15 	stw	r2,-20(fp)
   43a14:	00000506 	br	43a2c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43a18:	00bfde84 	movi	r2,-134
   43a1c:	e0bffb15 	stw	r2,-20(fp)
   43a20:	00000206 	br	43a2c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   43a24:	00bfebc4 	movi	r2,-81
   43a28:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   43a2c:	e0bffb17 	ldw	r2,-20(fp)
   43a30:	1000070e 	bge	r2,zero,43a50 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   43a34:	004393c0 	call	4393c <alt_get_errno>
   43a38:	1007883a 	mov	r3,r2
   43a3c:	e0bffb17 	ldw	r2,-20(fp)
   43a40:	0085c83a 	sub	r2,zero,r2
   43a44:	18800015 	stw	r2,0(r3)
    rc = -1;
   43a48:	00bfffc4 	movi	r2,-1
   43a4c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   43a50:	e0bffb17 	ldw	r2,-20(fp)
}
   43a54:	e037883a 	mov	sp,fp
   43a58:	dfc00117 	ldw	ra,4(sp)
   43a5c:	df000017 	ldw	fp,0(sp)
   43a60:	dec00204 	addi	sp,sp,8
   43a64:	f800283a 	ret

00043a68 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43a68:	defff904 	addi	sp,sp,-28
   43a6c:	dfc00615 	stw	ra,24(sp)
   43a70:	df000515 	stw	fp,20(sp)
   43a74:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43a78:	0009883a 	mov	r4,zero
   43a7c:	004befc0 	call	4befc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   43a80:	0044a880 	call	44a88 <OSInit>
   43a84:	01000044 	movi	r4,1
   43a88:	00495f40 	call	495f4 <OSSemCreate>
   43a8c:	1007883a 	mov	r3,r2
   43a90:	00800174 	movhi	r2,5
   43a94:	108ac404 	addi	r2,r2,11024
   43a98:	10c00015 	stw	r3,0(r2)
   43a9c:	01000044 	movi	r4,1
   43aa0:	00495f40 	call	495f4 <OSSemCreate>
   43aa4:	1007883a 	mov	r3,r2
   43aa8:	00800174 	movhi	r2,5
   43aac:	108ac604 	addi	r2,r2,11032
   43ab0:	10c00015 	stw	r3,0(r2)
   43ab4:	00800174 	movhi	r2,5
   43ab8:	108abf04 	addi	r2,r2,11004
   43abc:	e0bffc15 	stw	r2,-16(fp)
   43ac0:	00800044 	movi	r2,1
   43ac4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   43ac8:	e0bffd0b 	ldhu	r2,-12(fp)
   43acc:	1009883a 	mov	r4,r2
   43ad0:	00495f40 	call	495f4 <OSSemCreate>
   43ad4:	1007883a 	mov	r3,r2
   43ad8:	e0bffc17 	ldw	r2,-16(fp)
   43adc:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   43ae0:	004bf300 	call	4bf30 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   43ae4:	01000174 	movhi	r4,5
   43ae8:	213c8504 	addi	r4,r4,-3564
   43aec:	01400174 	movhi	r5,5
   43af0:	297c8504 	addi	r5,r5,-3564
   43af4:	01800174 	movhi	r6,5
   43af8:	31bc8504 	addi	r6,r6,-3564
   43afc:	004e0180 	call	4e018 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   43b00:	004db940 	call	4db94 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   43b04:	01000174 	movhi	r4,5
   43b08:	2136fc04 	addi	r4,r4,-9232
   43b0c:	004ed100 	call	4ed10 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43b10:	d1272317 	ldw	r4,-25460(gp)
   43b14:	d0e72417 	ldw	r3,-25456(gp)
   43b18:	d0a72517 	ldw	r2,-25452(gp)
   43b1c:	180b883a 	mov	r5,r3
   43b20:	100d883a 	mov	r6,r2
   43b24:	00408e80 	call	408e8 <main>
   43b28:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   43b2c:	01000044 	movi	r4,1
   43b30:	00435500 	call	43550 <close>
  exit (result);
   43b34:	e13ffb17 	ldw	r4,-20(fp)
   43b38:	004ed240 	call	4ed24 <exit>

00043b3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43b3c:	defffe04 	addi	sp,sp,-8
   43b40:	dfc00115 	stw	ra,4(sp)
   43b44:	df000015 	stw	fp,0(sp)
   43b48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43b4c:	00800174 	movhi	r2,5
   43b50:	1083a604 	addi	r2,r2,3736
   43b54:	10800017 	ldw	r2,0(r2)
   43b58:	10000526 	beq	r2,zero,43b70 <alt_get_errno+0x34>
   43b5c:	00800174 	movhi	r2,5
   43b60:	1083a604 	addi	r2,r2,3736
   43b64:	10800017 	ldw	r2,0(r2)
   43b68:	103ee83a 	callr	r2
   43b6c:	00000206 	br	43b78 <alt_get_errno+0x3c>
   43b70:	00800174 	movhi	r2,5
   43b74:	108abe04 	addi	r2,r2,11000
}
   43b78:	e037883a 	mov	sp,fp
   43b7c:	dfc00117 	ldw	ra,4(sp)
   43b80:	df000017 	ldw	fp,0(sp)
   43b84:	dec00204 	addi	sp,sp,8
   43b88:	f800283a 	ret

00043b8c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   43b8c:	defff904 	addi	sp,sp,-28
   43b90:	dfc00615 	stw	ra,24(sp)
   43b94:	df000515 	stw	fp,20(sp)
   43b98:	df000504 	addi	fp,sp,20
   43b9c:	e13ffd15 	stw	r4,-12(fp)
   43ba0:	e17ffe15 	stw	r5,-8(fp)
   43ba4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43ba8:	e0bffd17 	ldw	r2,-12(fp)
   43bac:	10000816 	blt	r2,zero,43bd0 <read+0x44>
   43bb0:	e13ffd17 	ldw	r4,-12(fp)
   43bb4:	01400304 	movi	r5,12
   43bb8:	00434d80 	call	434d8 <__mulsi3>
   43bbc:	1007883a 	mov	r3,r2
   43bc0:	00800174 	movhi	r2,5
   43bc4:	10beee04 	addi	r2,r2,-1096
   43bc8:	1885883a 	add	r2,r3,r2
   43bcc:	00000106 	br	43bd4 <read+0x48>
   43bd0:	0005883a 	mov	r2,zero
   43bd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43bd8:	e0bffb17 	ldw	r2,-20(fp)
   43bdc:	10002226 	beq	r2,zero,43c68 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43be0:	e0bffb17 	ldw	r2,-20(fp)
   43be4:	10800217 	ldw	r2,8(r2)
   43be8:	108000cc 	andi	r2,r2,3
   43bec:	10800060 	cmpeqi	r2,r2,1
   43bf0:	1000181e 	bne	r2,zero,43c54 <read+0xc8>
        (fd->dev->read))
   43bf4:	e0bffb17 	ldw	r2,-20(fp)
   43bf8:	10800017 	ldw	r2,0(r2)
   43bfc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43c00:	10001426 	beq	r2,zero,43c54 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43c04:	e0bffb17 	ldw	r2,-20(fp)
   43c08:	10800017 	ldw	r2,0(r2)
   43c0c:	10800517 	ldw	r2,20(r2)
   43c10:	e0ffff17 	ldw	r3,-4(fp)
   43c14:	e13ffb17 	ldw	r4,-20(fp)
   43c18:	e17ffe17 	ldw	r5,-8(fp)
   43c1c:	180d883a 	mov	r6,r3
   43c20:	103ee83a 	callr	r2
   43c24:	e0bffc15 	stw	r2,-16(fp)
   43c28:	e0bffc17 	ldw	r2,-16(fp)
   43c2c:	1000070e 	bge	r2,zero,43c4c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   43c30:	0043b3c0 	call	43b3c <alt_get_errno>
   43c34:	1007883a 	mov	r3,r2
   43c38:	e0bffc17 	ldw	r2,-16(fp)
   43c3c:	0085c83a 	sub	r2,zero,r2
   43c40:	18800015 	stw	r2,0(r3)
          return -1;
   43c44:	00bfffc4 	movi	r2,-1
   43c48:	00000c06 	br	43c7c <read+0xf0>
        }
        return rval;
   43c4c:	e0bffc17 	ldw	r2,-16(fp)
   43c50:	00000a06 	br	43c7c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43c54:	0043b3c0 	call	43b3c <alt_get_errno>
   43c58:	1007883a 	mov	r3,r2
   43c5c:	00800344 	movi	r2,13
   43c60:	18800015 	stw	r2,0(r3)
   43c64:	00000406 	br	43c78 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43c68:	0043b3c0 	call	43b3c <alt_get_errno>
   43c6c:	1007883a 	mov	r3,r2
   43c70:	00801444 	movi	r2,81
   43c74:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43c78:	00bfffc4 	movi	r2,-1
}
   43c7c:	e037883a 	mov	sp,fp
   43c80:	dfc00117 	ldw	ra,4(sp)
   43c84:	df000017 	ldw	fp,0(sp)
   43c88:	dec00204 	addi	sp,sp,8
   43c8c:	f800283a 	ret

00043c90 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43c90:	defffc04 	addi	sp,sp,-16
   43c94:	dfc00315 	stw	ra,12(sp)
   43c98:	df000215 	stw	fp,8(sp)
   43c9c:	dc000115 	stw	r16,4(sp)
   43ca0:	df000204 	addi	fp,sp,8
   43ca4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   43ca8:	e0bffe17 	ldw	r2,-8(fp)
   43cac:	108000d0 	cmplti	r2,r2,3
   43cb0:	1000111e 	bne	r2,zero,43cf8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   43cb4:	04000174 	movhi	r16,5
   43cb8:	843eee04 	addi	r16,r16,-1096
   43cbc:	e0bffe17 	ldw	r2,-8(fp)
   43cc0:	1009883a 	mov	r4,r2
   43cc4:	01400304 	movi	r5,12
   43cc8:	00434d80 	call	434d8 <__mulsi3>
   43ccc:	8085883a 	add	r2,r16,r2
   43cd0:	10800204 	addi	r2,r2,8
   43cd4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43cd8:	04000174 	movhi	r16,5
   43cdc:	843eee04 	addi	r16,r16,-1096
   43ce0:	e0bffe17 	ldw	r2,-8(fp)
   43ce4:	1009883a 	mov	r4,r2
   43ce8:	01400304 	movi	r5,12
   43cec:	00434d80 	call	434d8 <__mulsi3>
   43cf0:	8085883a 	add	r2,r16,r2
   43cf4:	10000015 	stw	zero,0(r2)
  }
}
   43cf8:	e6ffff04 	addi	sp,fp,-4
   43cfc:	dfc00217 	ldw	ra,8(sp)
   43d00:	df000117 	ldw	fp,4(sp)
   43d04:	dc000017 	ldw	r16,0(sp)
   43d08:	dec00304 	addi	sp,sp,12
   43d0c:	f800283a 	ret

00043d10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43d10:	defff904 	addi	sp,sp,-28
   43d14:	df000615 	stw	fp,24(sp)
   43d18:	df000604 	addi	fp,sp,24
   43d1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43d20:	0005303a 	rdctl	r2,status
   43d24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43d28:	e0fffc17 	ldw	r3,-16(fp)
   43d2c:	00bfff84 	movi	r2,-2
   43d30:	1884703a 	and	r2,r3,r2
   43d34:	1001703a 	wrctl	status,r2
  
  return context;
   43d38:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43d3c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43d40:	d0a00a17 	ldw	r2,-32728(gp)
   43d44:	10c000c4 	addi	r3,r2,3
   43d48:	00bfff04 	movi	r2,-4
   43d4c:	1884703a 	and	r2,r3,r2
   43d50:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43d54:	d0e00a17 	ldw	r3,-32728(gp)
   43d58:	e0bfff17 	ldw	r2,-4(fp)
   43d5c:	1887883a 	add	r3,r3,r2
   43d60:	008001f4 	movhi	r2,7
   43d64:	1096d804 	addi	r2,r2,23392
   43d68:	10c0062e 	bgeu	r2,r3,43d84 <sbrk+0x74>
   43d6c:	e0bffa17 	ldw	r2,-24(fp)
   43d70:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43d74:	e0bffd17 	ldw	r2,-12(fp)
   43d78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43d7c:	00bfffc4 	movi	r2,-1
   43d80:	00000b06 	br	43db0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   43d84:	d0a00a17 	ldw	r2,-32728(gp)
   43d88:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   43d8c:	d0e00a17 	ldw	r3,-32728(gp)
   43d90:	e0bfff17 	ldw	r2,-4(fp)
   43d94:	1885883a 	add	r2,r3,r2
   43d98:	d0a00a15 	stw	r2,-32728(gp)
   43d9c:	e0bffa17 	ldw	r2,-24(fp)
   43da0:	e0bffe15 	stw	r2,-8(fp)
   43da4:	e0bffe17 	ldw	r2,-8(fp)
   43da8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43dac:	e0bffb17 	ldw	r2,-20(fp)
} 
   43db0:	e037883a 	mov	sp,fp
   43db4:	df000017 	ldw	fp,0(sp)
   43db8:	dec00104 	addi	sp,sp,4
   43dbc:	f800283a 	ret

00043dc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43dc0:	defffe04 	addi	sp,sp,-8
   43dc4:	dfc00115 	stw	ra,4(sp)
   43dc8:	df000015 	stw	fp,0(sp)
   43dcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43dd0:	00800174 	movhi	r2,5
   43dd4:	1083a604 	addi	r2,r2,3736
   43dd8:	10800017 	ldw	r2,0(r2)
   43ddc:	10000526 	beq	r2,zero,43df4 <alt_get_errno+0x34>
   43de0:	00800174 	movhi	r2,5
   43de4:	1083a604 	addi	r2,r2,3736
   43de8:	10800017 	ldw	r2,0(r2)
   43dec:	103ee83a 	callr	r2
   43df0:	00000206 	br	43dfc <alt_get_errno+0x3c>
   43df4:	00800174 	movhi	r2,5
   43df8:	108abe04 	addi	r2,r2,11000
}
   43dfc:	e037883a 	mov	sp,fp
   43e00:	dfc00117 	ldw	ra,4(sp)
   43e04:	df000017 	ldw	fp,0(sp)
   43e08:	dec00204 	addi	sp,sp,8
   43e0c:	f800283a 	ret

00043e10 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43e10:	defff904 	addi	sp,sp,-28
   43e14:	dfc00615 	stw	ra,24(sp)
   43e18:	df000515 	stw	fp,20(sp)
   43e1c:	df000504 	addi	fp,sp,20
   43e20:	e13ffd15 	stw	r4,-12(fp)
   43e24:	e17ffe15 	stw	r5,-8(fp)
   43e28:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43e2c:	e0bffd17 	ldw	r2,-12(fp)
   43e30:	10000816 	blt	r2,zero,43e54 <write+0x44>
   43e34:	e13ffd17 	ldw	r4,-12(fp)
   43e38:	01400304 	movi	r5,12
   43e3c:	00434d80 	call	434d8 <__mulsi3>
   43e40:	1007883a 	mov	r3,r2
   43e44:	00800174 	movhi	r2,5
   43e48:	10beee04 	addi	r2,r2,-1096
   43e4c:	1885883a 	add	r2,r3,r2
   43e50:	00000106 	br	43e58 <write+0x48>
   43e54:	0005883a 	mov	r2,zero
   43e58:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43e5c:	e0bffb17 	ldw	r2,-20(fp)
   43e60:	10002126 	beq	r2,zero,43ee8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43e64:	e0bffb17 	ldw	r2,-20(fp)
   43e68:	10800217 	ldw	r2,8(r2)
   43e6c:	108000cc 	andi	r2,r2,3
   43e70:	10001826 	beq	r2,zero,43ed4 <write+0xc4>
   43e74:	e0bffb17 	ldw	r2,-20(fp)
   43e78:	10800017 	ldw	r2,0(r2)
   43e7c:	10800617 	ldw	r2,24(r2)
   43e80:	10001426 	beq	r2,zero,43ed4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43e84:	e0bffb17 	ldw	r2,-20(fp)
   43e88:	10800017 	ldw	r2,0(r2)
   43e8c:	10800617 	ldw	r2,24(r2)
   43e90:	e0ffff17 	ldw	r3,-4(fp)
   43e94:	e13ffb17 	ldw	r4,-20(fp)
   43e98:	e17ffe17 	ldw	r5,-8(fp)
   43e9c:	180d883a 	mov	r6,r3
   43ea0:	103ee83a 	callr	r2
   43ea4:	e0bffc15 	stw	r2,-16(fp)
   43ea8:	e0bffc17 	ldw	r2,-16(fp)
   43eac:	1000070e 	bge	r2,zero,43ecc <write+0xbc>
      {
        ALT_ERRNO = -rval;
   43eb0:	0043dc00 	call	43dc0 <alt_get_errno>
   43eb4:	1007883a 	mov	r3,r2
   43eb8:	e0bffc17 	ldw	r2,-16(fp)
   43ebc:	0085c83a 	sub	r2,zero,r2
   43ec0:	18800015 	stw	r2,0(r3)
        return -1;
   43ec4:	00bfffc4 	movi	r2,-1
   43ec8:	00000c06 	br	43efc <write+0xec>
      }
      return rval;
   43ecc:	e0bffc17 	ldw	r2,-16(fp)
   43ed0:	00000a06 	br	43efc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43ed4:	0043dc00 	call	43dc0 <alt_get_errno>
   43ed8:	1007883a 	mov	r3,r2
   43edc:	00800344 	movi	r2,13
   43ee0:	18800015 	stw	r2,0(r3)
   43ee4:	00000406 	br	43ef8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43ee8:	0043dc00 	call	43dc0 <alt_get_errno>
   43eec:	1007883a 	mov	r3,r2
   43ef0:	00801444 	movi	r2,81
   43ef4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43ef8:	00bfffc4 	movi	r2,-1
}
   43efc:	e037883a 	mov	sp,fp
   43f00:	dfc00117 	ldw	ra,4(sp)
   43f04:	df000017 	ldw	fp,0(sp)
   43f08:	dec00204 	addi	sp,sp,8
   43f0c:	f800283a 	ret

00043f10 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   43f10:	deffdf04 	addi	sp,sp,-132
   43f14:	dfc02015 	stw	ra,128(sp)
   43f18:	df001f15 	stw	fp,124(sp)
   43f1c:	df001f04 	addi	fp,sp,124
   43f20:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   43f24:	e0bfe204 	addi	r2,fp,-120
   43f28:	01003fc4 	movi	r4,255
   43f2c:	100b883a 	mov	r5,r2
   43f30:	004b7a80 	call	4b7a8 <OSTaskQuery>
   43f34:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   43f38:	e0bffe83 	ldbu	r2,-6(fp)
   43f3c:	10803fcc 	andi	r2,r2,255
   43f40:	10000126 	beq	r2,zero,43f48 <__env_lock+0x38>
    return;
   43f44:	00001d06 	br	43fbc <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   43f48:	e0bfee83 	ldbu	r2,-70(fp)
   43f4c:	10803fcc 	andi	r2,r2,255
   43f50:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   43f54:	d0e72717 	ldw	r3,-25444(gp)
   43f58:	e0bffd04 	addi	r2,fp,-12
   43f5c:	1809883a 	mov	r4,r3
   43f60:	100b883a 	mov	r5,r2
   43f64:	0049e400 	call	49e40 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   43f68:	e0bffe43 	ldbu	r2,-7(fp)
   43f6c:	10803fcc 	andi	r2,r2,255
   43f70:	10000726 	beq	r2,zero,43f90 <__env_lock+0x80>
   43f74:	d0a00b17 	ldw	r2,-32724(gp)
   43f78:	e0ffe117 	ldw	r3,-124(fp)
   43f7c:	1880041e 	bne	r3,r2,43f90 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   43f80:	d0a72617 	ldw	r2,-25448(gp)
   43f84:	10800044 	addi	r2,r2,1
   43f88:	d0a72615 	stw	r2,-25448(gp)
   43f8c:	00000a06 	br	43fb8 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   43f90:	d0e72717 	ldw	r3,-25444(gp)
   43f94:	e0bffe84 	addi	r2,fp,-6
   43f98:	1809883a 	mov	r4,r3
   43f9c:	000b883a 	mov	r5,zero
   43fa0:	100d883a 	mov	r6,r2
   43fa4:	004995c0 	call	4995c <OSSemPend>
    locks  = 1;
   43fa8:	00800044 	movi	r2,1
   43fac:	d0a72615 	stw	r2,-25448(gp)
    lockid = id;
   43fb0:	e0bfe117 	ldw	r2,-124(fp)
   43fb4:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   43fb8:	0001883a 	nop
}
   43fbc:	e037883a 	mov	sp,fp
   43fc0:	dfc00117 	ldw	ra,4(sp)
   43fc4:	df000017 	ldw	fp,0(sp)
   43fc8:	dec00204 	addi	sp,sp,8
   43fcc:	f800283a 	ret

00043fd0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   43fd0:	defffd04 	addi	sp,sp,-12
   43fd4:	dfc00215 	stw	ra,8(sp)
   43fd8:	df000115 	stw	fp,4(sp)
   43fdc:	df000104 	addi	fp,sp,4
   43fe0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   43fe4:	d0a72617 	ldw	r2,-25448(gp)
   43fe8:	1000011e 	bne	r2,zero,43ff0 <__env_unlock+0x20>
    return;
   43fec:	00000a06 	br	44018 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   43ff0:	d0a72617 	ldw	r2,-25448(gp)
   43ff4:	10bfffc4 	addi	r2,r2,-1
   43ff8:	d0a72615 	stw	r2,-25448(gp)
   43ffc:	d0a72617 	ldw	r2,-25448(gp)
   44000:	1000051e 	bne	r2,zero,44018 <__env_unlock+0x48>
  {
    lockid = -1;
   44004:	00bfffc4 	movi	r2,-1
   44008:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
   4400c:	d0a72717 	ldw	r2,-25444(gp)
   44010:	1009883a 	mov	r4,r2
   44014:	0049d300 	call	49d30 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   44018:	e037883a 	mov	sp,fp
   4401c:	dfc00117 	ldw	ra,4(sp)
   44020:	df000017 	ldw	fp,0(sp)
   44024:	dec00204 	addi	sp,sp,8
   44028:	f800283a 	ret

0004402c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   4402c:	deffdb04 	addi	sp,sp,-148
   44030:	dfc02415 	stw	ra,144(sp)
   44034:	df002315 	stw	fp,140(sp)
   44038:	df002304 	addi	fp,sp,140
   4403c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   44040:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   44044:	00800174 	movhi	r2,5
   44048:	108ac744 	addi	r2,r2,11037
   4404c:	10800003 	ldbu	r2,0(r2)
   44050:	10803fcc 	andi	r2,r2,255
   44054:	10800060 	cmpeqi	r2,r2,1
   44058:	1000011e 	bne	r2,zero,44060 <__malloc_lock+0x34>
      return;
   4405c:	00003606 	br	44138 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   44060:	e0bfe204 	addi	r2,fp,-120
   44064:	01003fc4 	movi	r4,255
   44068:	100b883a 	mov	r5,r2
   4406c:	004b7a80 	call	4b7a8 <OSTaskQuery>
   44070:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   44074:	e0bffe83 	ldbu	r2,-6(fp)
   44078:	10803fcc 	andi	r2,r2,255
   4407c:	10000126 	beq	r2,zero,44084 <__malloc_lock+0x58>
    return;
   44080:	00002d06 	br	44138 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   44084:	e0bfee83 	ldbu	r2,-70(fp)
   44088:	10803fcc 	andi	r2,r2,255
   4408c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   44090:	d0e72917 	ldw	r3,-25436(gp)
   44094:	e0bffd04 	addi	r2,fp,-12
   44098:	1809883a 	mov	r4,r3
   4409c:	100b883a 	mov	r5,r2
   440a0:	0049e400 	call	49e40 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   440a4:	0005303a 	rdctl	r2,status
   440a8:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   440ac:	e0ffdf17 	ldw	r3,-132(fp)
   440b0:	00bfff84 	movi	r2,-2
   440b4:	1884703a 	and	r2,r3,r2
   440b8:	1001703a 	wrctl	status,r2
  
  return context;
   440bc:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   440c0:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   440c4:	e0bffd0b 	ldhu	r2,-12(fp)
   440c8:	10bfffcc 	andi	r2,r2,65535
   440cc:	10000b1e 	bne	r2,zero,440fc <__malloc_lock+0xd0>
   440d0:	d0a00c17 	ldw	r2,-32720(gp)
   440d4:	e0ffde17 	ldw	r3,-136(fp)
   440d8:	1880081e 	bne	r3,r2,440fc <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   440dc:	d0a72817 	ldw	r2,-25440(gp)
   440e0:	10800044 	addi	r2,r2,1
   440e4:	d0a72815 	stw	r2,-25440(gp)
   440e8:	e0bfdd17 	ldw	r2,-140(fp)
   440ec:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   440f0:	e0bfe017 	ldw	r2,-128(fp)
   440f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   440f8:	00000e06 	br	44134 <__malloc_lock+0x108>
   440fc:	e0bfdd17 	ldw	r2,-140(fp)
   44100:	e0bfe115 	stw	r2,-124(fp)
   44104:	e0bfe117 	ldw	r2,-124(fp)
   44108:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   4410c:	d0e72917 	ldw	r3,-25436(gp)
   44110:	e0bffe84 	addi	r2,fp,-6
   44114:	1809883a 	mov	r4,r3
   44118:	000b883a 	mov	r5,zero
   4411c:	100d883a 	mov	r6,r2
   44120:	004995c0 	call	4995c <OSSemPend>
    locks  = 1;
   44124:	00800044 	movi	r2,1
   44128:	d0a72815 	stw	r2,-25440(gp)
    lockid = id;
   4412c:	e0bfde17 	ldw	r2,-136(fp)
   44130:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   44134:	0001883a 	nop
}
   44138:	e037883a 	mov	sp,fp
   4413c:	dfc00117 	ldw	ra,4(sp)
   44140:	df000017 	ldw	fp,0(sp)
   44144:	dec00204 	addi	sp,sp,8
   44148:	f800283a 	ret

0004414c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4414c:	defff804 	addi	sp,sp,-32
   44150:	dfc00715 	stw	ra,28(sp)
   44154:	df000615 	stw	fp,24(sp)
   44158:	df000604 	addi	fp,sp,24
   4415c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   44160:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   44164:	00800174 	movhi	r2,5
   44168:	108ac744 	addi	r2,r2,11037
   4416c:	10800003 	ldbu	r2,0(r2)
   44170:	10803fcc 	andi	r2,r2,255
   44174:	10800060 	cmpeqi	r2,r2,1
   44178:	1000011e 	bne	r2,zero,44180 <__malloc_unlock+0x34>
      return;
   4417c:	00002206 	br	44208 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44180:	0005303a 	rdctl	r2,status
   44184:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44188:	e0fffb17 	ldw	r3,-20(fp)
   4418c:	00bfff84 	movi	r2,-2
   44190:	1884703a 	and	r2,r3,r2
   44194:	1001703a 	wrctl	status,r2
  
  return context;
   44198:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   4419c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   441a0:	d0a72817 	ldw	r2,-25440(gp)
   441a4:	1000051e 	bne	r2,zero,441bc <__malloc_unlock+0x70>
   441a8:	e0bffa17 	ldw	r2,-24(fp)
   441ac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   441b0:	e0bffc17 	ldw	r2,-16(fp)
   441b4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   441b8:	00001306 	br	44208 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   441bc:	d0a72817 	ldw	r2,-25440(gp)
   441c0:	10bfffc4 	addi	r2,r2,-1
   441c4:	d0a72815 	stw	r2,-25440(gp)
   441c8:	d0a72817 	ldw	r2,-25440(gp)
   441cc:	10000a1e 	bne	r2,zero,441f8 <__malloc_unlock+0xac>
  {
    lockid = -1;
   441d0:	00bfffc4 	movi	r2,-1
   441d4:	d0a00c15 	stw	r2,-32720(gp)
   441d8:	e0bffa17 	ldw	r2,-24(fp)
   441dc:	e0bffd15 	stw	r2,-12(fp)
   441e0:	e0bffd17 	ldw	r2,-12(fp)
   441e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   441e8:	d0a72917 	ldw	r2,-25436(gp)
   441ec:	1009883a 	mov	r4,r2
   441f0:	0049d300 	call	49d30 <OSSemPost>
   441f4:	00000406 	br	44208 <__malloc_unlock+0xbc>
   441f8:	e0bffa17 	ldw	r2,-24(fp)
   441fc:	e0bffe15 	stw	r2,-8(fp)
   44200:	e0bffe17 	ldw	r2,-8(fp)
   44204:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   44208:	e037883a 	mov	sp,fp
   4420c:	dfc00117 	ldw	ra,4(sp)
   44210:	df000017 	ldw	fp,0(sp)
   44214:	dec00204 	addi	sp,sp,8
   44218:	f800283a 	ret

0004421c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   4421c:	defff704 	addi	sp,sp,-36
   44220:	dfc00815 	stw	ra,32(sp)
   44224:	df000715 	stw	fp,28(sp)
   44228:	df000704 	addi	fp,sp,28
   4422c:	e13ffd15 	stw	r4,-12(fp)
   44230:	e17ffe15 	stw	r5,-8(fp)
   44234:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   44238:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   4423c:	e0bfff17 	ldw	r2,-4(fp)
   44240:	1000021e 	bne	r2,zero,4424c <OSEventNameGet+0x30>
        return (0);
   44244:	0005883a 	mov	r2,zero
   44248:	00003706 	br	44328 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   4424c:	e0bffd17 	ldw	r2,-12(fp)
   44250:	1000051e 	bne	r2,zero,44268 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   44254:	e0bfff17 	ldw	r2,-4(fp)
   44258:	00c00104 	movi	r3,4
   4425c:	10c00005 	stb	r3,0(r2)
        return (0);
   44260:	0005883a 	mov	r2,zero
   44264:	00003006 	br	44328 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   44268:	e0bffe17 	ldw	r2,-8(fp)
   4426c:	1000051e 	bne	r2,zero,44284 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   44270:	e0bfff17 	ldw	r2,-4(fp)
   44274:	00c00304 	movi	r3,12
   44278:	10c00005 	stb	r3,0(r2)
        return (0);
   4427c:	0005883a 	mov	r2,zero
   44280:	00002906 	br	44328 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   44284:	d0a73803 	ldbu	r2,-25376(gp)
   44288:	10803fcc 	andi	r2,r2,255
   4428c:	10000526 	beq	r2,zero,442a4 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   44290:	e0bfff17 	ldw	r2,-4(fp)
   44294:	00c00444 	movi	r3,17
   44298:	10c00005 	stb	r3,0(r2)
        return (0);
   4429c:	0005883a 	mov	r2,zero
   442a0:	00002106 	br	44328 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   442a4:	e0bffd17 	ldw	r2,-12(fp)
   442a8:	10800003 	ldbu	r2,0(r2)
   442ac:	10803fcc 	andi	r2,r2,255
   442b0:	10bfffc4 	addi	r2,r2,-1
   442b4:	10800128 	cmpgeui	r2,r2,4
   442b8:	10000526 	beq	r2,zero,442d0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   442bc:	e0bfff17 	ldw	r2,-4(fp)
   442c0:	00c00044 	movi	r3,1
   442c4:	10c00005 	stb	r3,0(r2)
             return (0);
   442c8:	0005883a 	mov	r2,zero
   442cc:	00001606 	br	44328 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   442d0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   442d4:	0005303a 	rdctl	r2,status
   442d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   442dc:	e0fffb17 	ldw	r3,-20(fp)
   442e0:	00bfff84 	movi	r2,-2
   442e4:	1884703a 	and	r2,r3,r2
   442e8:	1001703a 	wrctl	status,r2
  
  return context;
   442ec:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   442f0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   442f4:	e0bffd17 	ldw	r2,-12(fp)
   442f8:	10800384 	addi	r2,r2,14
   442fc:	e13ffe17 	ldw	r4,-8(fp)
   44300:	100b883a 	mov	r5,r2
   44304:	0045c700 	call	45c70 <OS_StrCopy>
   44308:	e0bffa05 	stb	r2,-24(fp)
   4430c:	e0bff917 	ldw	r2,-28(fp)
   44310:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44314:	e0bffc17 	ldw	r2,-16(fp)
   44318:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   4431c:	e0bfff17 	ldw	r2,-4(fp)
   44320:	10000005 	stb	zero,0(r2)
    return (len);
   44324:	e0bffa03 	ldbu	r2,-24(fp)
}
   44328:	e037883a 	mov	sp,fp
   4432c:	dfc00117 	ldw	ra,4(sp)
   44330:	df000017 	ldw	fp,0(sp)
   44334:	dec00204 	addi	sp,sp,8
   44338:	f800283a 	ret

0004433c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   4433c:	defff604 	addi	sp,sp,-40
   44340:	dfc00915 	stw	ra,36(sp)
   44344:	df000815 	stw	fp,32(sp)
   44348:	df000804 	addi	fp,sp,32
   4434c:	e13ffd15 	stw	r4,-12(fp)
   44350:	e17ffe15 	stw	r5,-8(fp)
   44354:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   44358:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   4435c:	e0bfff17 	ldw	r2,-4(fp)
   44360:	1000011e 	bne	r2,zero,44368 <OSEventNameSet+0x2c>
        return;
   44364:	00003f06 	br	44464 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   44368:	e0bffd17 	ldw	r2,-12(fp)
   4436c:	1000041e 	bne	r2,zero,44380 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   44370:	e0bfff17 	ldw	r2,-4(fp)
   44374:	00c00104 	movi	r3,4
   44378:	10c00005 	stb	r3,0(r2)
        return;
   4437c:	00003906 	br	44464 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   44380:	e0bffe17 	ldw	r2,-8(fp)
   44384:	1000041e 	bne	r2,zero,44398 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   44388:	e0bfff17 	ldw	r2,-4(fp)
   4438c:	00c00304 	movi	r3,12
   44390:	10c00005 	stb	r3,0(r2)
        return;
   44394:	00003306 	br	44464 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   44398:	d0a73803 	ldbu	r2,-25376(gp)
   4439c:	10803fcc 	andi	r2,r2,255
   443a0:	10000426 	beq	r2,zero,443b4 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   443a4:	e0bfff17 	ldw	r2,-4(fp)
   443a8:	00c00484 	movi	r3,18
   443ac:	10c00005 	stb	r3,0(r2)
        return;
   443b0:	00002c06 	br	44464 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   443b4:	e0bffd17 	ldw	r2,-12(fp)
   443b8:	10800003 	ldbu	r2,0(r2)
   443bc:	10803fcc 	andi	r2,r2,255
   443c0:	10bfffc4 	addi	r2,r2,-1
   443c4:	10800128 	cmpgeui	r2,r2,4
   443c8:	10000426 	beq	r2,zero,443dc <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   443cc:	e0bfff17 	ldw	r2,-4(fp)
   443d0:	00c00044 	movi	r3,1
   443d4:	10c00005 	stb	r3,0(r2)
             return;
   443d8:	00002206 	br	44464 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   443dc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   443e0:	0005303a 	rdctl	r2,status
   443e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   443e8:	e0fffa17 	ldw	r3,-24(fp)
   443ec:	00bfff84 	movi	r2,-2
   443f0:	1884703a 	and	r2,r3,r2
   443f4:	1001703a 	wrctl	status,r2
  
  return context;
   443f8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   443fc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   44400:	e13ffe17 	ldw	r4,-8(fp)
   44404:	0045ce40 	call	45ce4 <OS_StrLen>
   44408:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   4440c:	e0bff903 	ldbu	r2,-28(fp)
   44410:	10800830 	cmpltui	r2,r2,32
   44414:	1000081e 	bne	r2,zero,44438 <OSEventNameSet+0xfc>
   44418:	e0bff817 	ldw	r2,-32(fp)
   4441c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44420:	e0bffb17 	ldw	r2,-20(fp)
   44424:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   44428:	e0bfff17 	ldw	r2,-4(fp)
   4442c:	00c002c4 	movi	r3,11
   44430:	10c00005 	stb	r3,0(r2)
        return;
   44434:	00000b06 	br	44464 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   44438:	e0bffd17 	ldw	r2,-12(fp)
   4443c:	10800384 	addi	r2,r2,14
   44440:	1009883a 	mov	r4,r2
   44444:	e17ffe17 	ldw	r5,-8(fp)
   44448:	0045c700 	call	45c70 <OS_StrCopy>
   4444c:	e0bff817 	ldw	r2,-32(fp)
   44450:	e0bffc15 	stw	r2,-16(fp)
   44454:	e0bffc17 	ldw	r2,-16(fp)
   44458:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   4445c:	e0bfff17 	ldw	r2,-4(fp)
   44460:	10000005 	stb	zero,0(r2)
}
   44464:	e037883a 	mov	sp,fp
   44468:	dfc00117 	ldw	ra,4(sp)
   4446c:	df000017 	ldw	fp,0(sp)
   44470:	dec00204 	addi	sp,sp,8
   44474:	f800283a 	ret

00044478 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   44478:	deffed04 	addi	sp,sp,-76
   4447c:	dfc01215 	stw	ra,72(sp)
   44480:	df001115 	stw	fp,68(sp)
   44484:	df001104 	addi	fp,sp,68
   44488:	e13ffc15 	stw	r4,-16(fp)
   4448c:	e17ffd15 	stw	r5,-12(fp)
   44490:	e1bffe15 	stw	r6,-8(fp)
   44494:	3805883a 	mov	r2,r7
   44498:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   4449c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   444a0:	e0800217 	ldw	r2,8(fp)
   444a4:	1000021e 	bne	r2,zero,444b0 <OSEventPendMulti+0x38>
        return (0);
   444a8:	0005883a 	mov	r2,zero
   444ac:	00017106 	br	44a74 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   444b0:	e0bffc17 	ldw	r2,-16(fp)
   444b4:	1000051e 	bne	r2,zero,444cc <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   444b8:	e0800217 	ldw	r2,8(fp)
   444bc:	00c00104 	movi	r3,4
   444c0:	10c00005 	stb	r3,0(r2)
        return (0);
   444c4:	0005883a 	mov	r2,zero
   444c8:	00016a06 	br	44a74 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   444cc:	e0bffd17 	ldw	r2,-12(fp)
   444d0:	1000051e 	bne	r2,zero,444e8 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   444d4:	e0800217 	ldw	r2,8(fp)
   444d8:	00c00104 	movi	r3,4
   444dc:	10c00005 	stb	r3,0(r2)
        return (0);
   444e0:	0005883a 	mov	r2,zero
   444e4:	00016306 	br	44a74 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   444e8:	e0bffe17 	ldw	r2,-8(fp)
   444ec:	1000051e 	bne	r2,zero,44504 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   444f0:	e0800217 	ldw	r2,8(fp)
   444f4:	00c00104 	movi	r3,4
   444f8:	10c00005 	stb	r3,0(r2)
        return (0);
   444fc:	0005883a 	mov	r2,zero
   44500:	00015c06 	br	44a74 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   44504:	e0bffd17 	ldw	r2,-12(fp)
   44508:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   4450c:	e0bffc17 	ldw	r2,-16(fp)
   44510:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   44514:	e0bfef17 	ldw	r2,-68(fp)
   44518:	10800017 	ldw	r2,0(r2)
   4451c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   44520:	00001906 	br	44588 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   44524:	e0bff017 	ldw	r2,-64(fp)
   44528:	10800003 	ldbu	r2,0(r2)
   4452c:	10803fcc 	andi	r2,r2,255
   44530:	10c000a0 	cmpeqi	r3,r2,2
   44534:	1800091e 	bne	r3,zero,4455c <OSEventPendMulti+0xe4>
   44538:	10c000e0 	cmpeqi	r3,r2,3
   4453c:	1800091e 	bne	r3,zero,44564 <OSEventPendMulti+0xec>
   44540:	10800060 	cmpeqi	r2,r2,1
   44544:	1000091e 	bne	r2,zero,4456c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   44548:	e0800217 	ldw	r2,8(fp)
   4454c:	00c00044 	movi	r3,1
   44550:	10c00005 	stb	r3,0(r2)
                 return (0);
   44554:	0005883a 	mov	r2,zero
   44558:	00014606 	br	44a74 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   4455c:	0001883a 	nop
   44560:	00000306 	br	44570 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   44564:	0001883a 	nop
   44568:	00000106 	br	44570 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   4456c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   44570:	e0bfef17 	ldw	r2,-68(fp)
   44574:	10800104 	addi	r2,r2,4
   44578:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   4457c:	e0bfef17 	ldw	r2,-68(fp)
   44580:	10800017 	ldw	r2,0(r2)
   44584:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   44588:	e0bff017 	ldw	r2,-64(fp)
   4458c:	103fe51e 	bne	r2,zero,44524 <__alt_data_end+0xfffce9c4>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   44590:	d0a73803 	ldbu	r2,-25376(gp)
   44594:	10803fcc 	andi	r2,r2,255
   44598:	10000526 	beq	r2,zero,445b0 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   4459c:	e0800217 	ldw	r2,8(fp)
   445a0:	00c00084 	movi	r3,2
   445a4:	10c00005 	stb	r3,0(r2)
        return (0);
   445a8:	0005883a 	mov	r2,zero
   445ac:	00013106 	br	44a74 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   445b0:	d0a72a03 	ldbu	r2,-25432(gp)
   445b4:	10803fcc 	andi	r2,r2,255
   445b8:	10000526 	beq	r2,zero,445d0 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   445bc:	e0800217 	ldw	r2,8(fp)
   445c0:	00c00344 	movi	r3,13
   445c4:	10c00005 	stb	r3,0(r2)
        return (0);
   445c8:	0005883a 	mov	r2,zero
   445cc:	00012906 	br	44a74 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   445d0:	0005303a 	rdctl	r2,status
   445d4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   445d8:	e0fff517 	ldw	r3,-44(fp)
   445dc:	00bfff84 	movi	r2,-2
   445e0:	1884703a 	and	r2,r3,r2
   445e4:	1001703a 	wrctl	status,r2
  
  return context;
   445e8:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   445ec:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   445f0:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   445f4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   445f8:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   445fc:	e0bffc17 	ldw	r2,-16(fp)
   44600:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   44604:	e0bfef17 	ldw	r2,-68(fp)
   44608:	10800017 	ldw	r2,0(r2)
   4460c:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   44610:	00008106 	br	44818 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   44614:	e0bff017 	ldw	r2,-64(fp)
   44618:	10800003 	ldbu	r2,0(r2)
   4461c:	10803fcc 	andi	r2,r2,255
   44620:	10c000a0 	cmpeqi	r3,r2,2
   44624:	18003c1e 	bne	r3,zero,44718 <OSEventPendMulti+0x2a0>
   44628:	10c000e0 	cmpeqi	r3,r2,3
   4462c:	1800031e 	bne	r3,zero,4463c <OSEventPendMulti+0x1c4>
   44630:	10800060 	cmpeqi	r2,r2,1
   44634:	10001e1e 	bne	r2,zero,446b0 <OSEventPendMulti+0x238>
   44638:	00006606 	br	447d4 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   4463c:	e0bff017 	ldw	r2,-64(fp)
   44640:	1080020b 	ldhu	r2,8(r2)
   44644:	10bfffcc 	andi	r2,r2,65535
   44648:	10001526 	beq	r2,zero,446a0 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   4464c:	e0bff017 	ldw	r2,-64(fp)
   44650:	1080020b 	ldhu	r2,8(r2)
   44654:	10bfffc4 	addi	r2,r2,-1
   44658:	1007883a 	mov	r3,r2
   4465c:	e0bff017 	ldw	r2,-64(fp)
   44660:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   44664:	e0bffd17 	ldw	r2,-12(fp)
   44668:	10c00104 	addi	r3,r2,4
   4466c:	e0fffd15 	stw	r3,-12(fp)
   44670:	e0fff017 	ldw	r3,-64(fp)
   44674:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   44678:	00800044 	movi	r2,1
   4467c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   44680:	e0bffe17 	ldw	r2,-8(fp)
   44684:	10c00104 	addi	r3,r2,4
   44688:	e0fffe15 	stw	r3,-8(fp)
   4468c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   44690:	e0bff18b 	ldhu	r2,-58(fp)
   44694:	10800044 	addi	r2,r2,1
   44698:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   4469c:	00005806 	br	44800 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   446a0:	e0bff203 	ldbu	r2,-56(fp)
   446a4:	10800054 	ori	r2,r2,1
   446a8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   446ac:	00005406 	br	44800 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   446b0:	e0bff017 	ldw	r2,-64(fp)
   446b4:	10800117 	ldw	r2,4(r2)
   446b8:	10001326 	beq	r2,zero,44708 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   446bc:	e0bffe17 	ldw	r2,-8(fp)
   446c0:	10c00104 	addi	r3,r2,4
   446c4:	e0fffe15 	stw	r3,-8(fp)
   446c8:	e0fff017 	ldw	r3,-64(fp)
   446cc:	18c00117 	ldw	r3,4(r3)
   446d0:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   446d4:	e0bff017 	ldw	r2,-64(fp)
   446d8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   446dc:	e0bffd17 	ldw	r2,-12(fp)
   446e0:	10c00104 	addi	r3,r2,4
   446e4:	e0fffd15 	stw	r3,-12(fp)
   446e8:	e0fff017 	ldw	r3,-64(fp)
   446ec:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   446f0:	00800044 	movi	r2,1
   446f4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   446f8:	e0bff18b 	ldhu	r2,-58(fp)
   446fc:	10800044 	addi	r2,r2,1
   44700:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   44704:	00003e06 	br	44800 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   44708:	e0bff203 	ldbu	r2,-56(fp)
   4470c:	10800094 	ori	r2,r2,2
   44710:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   44714:	00003a06 	br	44800 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   44718:	e0bff017 	ldw	r2,-64(fp)
   4471c:	10800117 	ldw	r2,4(r2)
   44720:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   44724:	e0bff417 	ldw	r2,-48(fp)
   44728:	1080058b 	ldhu	r2,22(r2)
   4472c:	10bfffcc 	andi	r2,r2,65535
   44730:	10002426 	beq	r2,zero,447c4 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   44734:	e0bffe17 	ldw	r2,-8(fp)
   44738:	10c00104 	addi	r3,r2,4
   4473c:	e0fffe15 	stw	r3,-8(fp)
   44740:	e0fff417 	ldw	r3,-48(fp)
   44744:	18c00417 	ldw	r3,16(r3)
   44748:	19400104 	addi	r5,r3,4
   4474c:	e13ff417 	ldw	r4,-48(fp)
   44750:	21400415 	stw	r5,16(r4)
   44754:	18c00017 	ldw	r3,0(r3)
   44758:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   4475c:	e0bff417 	ldw	r2,-48(fp)
   44760:	10c00417 	ldw	r3,16(r2)
   44764:	e0bff417 	ldw	r2,-48(fp)
   44768:	10800217 	ldw	r2,8(r2)
   4476c:	1880041e 	bne	r3,r2,44780 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   44770:	e0bff417 	ldw	r2,-48(fp)
   44774:	10c00117 	ldw	r3,4(r2)
   44778:	e0bff417 	ldw	r2,-48(fp)
   4477c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   44780:	e0bff417 	ldw	r2,-48(fp)
   44784:	1080058b 	ldhu	r2,22(r2)
   44788:	10bfffc4 	addi	r2,r2,-1
   4478c:	1007883a 	mov	r3,r2
   44790:	e0bff417 	ldw	r2,-48(fp)
   44794:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   44798:	e0bffd17 	ldw	r2,-12(fp)
   4479c:	10c00104 	addi	r3,r2,4
   447a0:	e0fffd15 	stw	r3,-12(fp)
   447a4:	e0fff017 	ldw	r3,-64(fp)
   447a8:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   447ac:	00800044 	movi	r2,1
   447b0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   447b4:	e0bff18b 	ldhu	r2,-58(fp)
   447b8:	10800044 	addi	r2,r2,1
   447bc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   447c0:	00000f06 	br	44800 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   447c4:	e0bff203 	ldbu	r2,-56(fp)
   447c8:	10800114 	ori	r2,r2,4
   447cc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   447d0:	00000b06 	br	44800 <OSEventPendMulti+0x388>
   447d4:	e0bff317 	ldw	r2,-52(fp)
   447d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   447dc:	e0bff617 	ldw	r2,-40(fp)
   447e0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   447e4:	e0bffd17 	ldw	r2,-12(fp)
   447e8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   447ec:	e0800217 	ldw	r2,8(fp)
   447f0:	00c00044 	movi	r3,1
   447f4:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   447f8:	e0bff18b 	ldhu	r2,-58(fp)
   447fc:	00009d06 	br	44a74 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   44800:	e0bfef17 	ldw	r2,-68(fp)
   44804:	10800104 	addi	r2,r2,4
   44808:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   4480c:	e0bfef17 	ldw	r2,-68(fp)
   44810:	10800017 	ldw	r2,0(r2)
   44814:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   44818:	e0bff017 	ldw	r2,-64(fp)
   4481c:	103f7d1e 	bne	r2,zero,44614 <__alt_data_end+0xfffceab4>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   44820:	e0bff103 	ldbu	r2,-60(fp)
   44824:	10800058 	cmpnei	r2,r2,1
   44828:	10000a1e 	bne	r2,zero,44854 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   4482c:	e0bffd17 	ldw	r2,-12(fp)
   44830:	10000015 	stw	zero,0(r2)
   44834:	e0bff317 	ldw	r2,-52(fp)
   44838:	e0bff715 	stw	r2,-36(fp)
   4483c:	e0bff717 	ldw	r2,-36(fp)
   44840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   44844:	e0800217 	ldw	r2,8(fp)
   44848:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   4484c:	e0bff18b 	ldhu	r2,-58(fp)
   44850:	00008806 	br	44a74 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   44854:	d0a73917 	ldw	r2,-25372(gp)
   44858:	d0e73917 	ldw	r3,-25372(gp)
   4485c:	19000c03 	ldbu	r4,48(r3)
   44860:	e0fff203 	ldbu	r3,-56(fp)
   44864:	20c6b03a 	or	r3,r4,r3
   44868:	1809883a 	mov	r4,r3
   4486c:	00ffe004 	movi	r3,-128
   44870:	20c6b03a 	or	r3,r4,r3
   44874:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   44878:	d0a73917 	ldw	r2,-25372(gp)
   4487c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   44880:	d0a73917 	ldw	r2,-25372(gp)
   44884:	e0ffff0b 	ldhu	r3,-4(fp)
   44888:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   4488c:	e13ffc17 	ldw	r4,-16(fp)
   44890:	00453c00 	call	453c0 <OS_EventTaskWaitMulti>
   44894:	e0bff317 	ldw	r2,-52(fp)
   44898:	e0bff815 	stw	r2,-32(fp)
   4489c:	e0bff817 	ldw	r2,-32(fp)
   448a0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   448a4:	0045b340 	call	45b34 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   448a8:	0005303a 	rdctl	r2,status
   448ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   448b0:	e0fff917 	ldw	r3,-28(fp)
   448b4:	00bfff84 	movi	r2,-2
   448b8:	1884703a 	and	r2,r3,r2
   448bc:	1001703a 	wrctl	status,r2
  
  return context;
   448c0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   448c4:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   448c8:	d0a73917 	ldw	r2,-25372(gp)
   448cc:	10800c43 	ldbu	r2,49(r2)
   448d0:	10803fcc 	andi	r2,r2,255
   448d4:	10000226 	beq	r2,zero,448e0 <OSEventPendMulti+0x468>
   448d8:	108000a0 	cmpeqi	r2,r2,2
   448dc:	10001826 	beq	r2,zero,44940 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   448e0:	d0a73917 	ldw	r2,-25372(gp)
   448e4:	10800717 	ldw	r2,28(r2)
   448e8:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   448ec:	e0bff017 	ldw	r2,-64(fp)
   448f0:	10000b26 	beq	r2,zero,44920 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   448f4:	e0bffd17 	ldw	r2,-12(fp)
   448f8:	10c00104 	addi	r3,r2,4
   448fc:	e0fffd15 	stw	r3,-12(fp)
   44900:	e0fff017 	ldw	r3,-64(fp)
   44904:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   44908:	e0bffd17 	ldw	r2,-12(fp)
   4490c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   44910:	e0bff18b 	ldhu	r2,-58(fp)
   44914:	10800044 	addi	r2,r2,1
   44918:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   4491c:	00000d06 	br	44954 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   44920:	d0a73917 	ldw	r2,-25372(gp)
   44924:	00c00044 	movi	r3,1
   44928:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   4492c:	d0a73917 	ldw	r2,-25372(gp)
   44930:	1009883a 	mov	r4,r2
   44934:	e17ffc17 	ldw	r5,-16(fp)
   44938:	00455c00 	call	455c0 <OS_EventTaskRemoveMulti>
             }
			 break;
   4493c:	00000506 	br	44954 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   44940:	d0a73917 	ldw	r2,-25372(gp)
   44944:	1009883a 	mov	r4,r2
   44948:	e17ffc17 	ldw	r5,-16(fp)
   4494c:	00455c00 	call	455c0 <OS_EventTaskRemoveMulti>
             break;
   44950:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   44954:	d0a73917 	ldw	r2,-25372(gp)
   44958:	10800c43 	ldbu	r2,49(r2)
   4495c:	10803fcc 	andi	r2,r2,255
   44960:	10000326 	beq	r2,zero,44970 <OSEventPendMulti+0x4f8>
   44964:	108000a0 	cmpeqi	r2,r2,2
   44968:	1000231e 	bne	r2,zero,449f8 <OSEventPendMulti+0x580>
   4496c:	00002a06 	br	44a18 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   44970:	e0bff017 	ldw	r2,-64(fp)
   44974:	10800003 	ldbu	r2,0(r2)
   44978:	10803fcc 	andi	r2,r2,255
   4497c:	0080100e 	bge	zero,r2,449c0 <OSEventPendMulti+0x548>
   44980:	10c000d0 	cmplti	r3,r2,3
   44984:	1800071e 	bne	r3,zero,449a4 <OSEventPendMulti+0x52c>
   44988:	108000e0 	cmpeqi	r2,r2,3
   4498c:	10000c26 	beq	r2,zero,449c0 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   44990:	e0bffe17 	ldw	r2,-8(fp)
   44994:	10c00104 	addi	r3,r2,4
   44998:	e0fffe15 	stw	r3,-8(fp)
   4499c:	10000015 	stw	zero,0(r2)
                      break;
   449a0:	00001206 	br	449ec <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   449a4:	e0bffe17 	ldw	r2,-8(fp)
   449a8:	10c00104 	addi	r3,r2,4
   449ac:	e0fffe15 	stw	r3,-8(fp)
   449b0:	d0e73917 	ldw	r3,-25372(gp)
   449b4:	18c00917 	ldw	r3,36(r3)
   449b8:	10c00015 	stw	r3,0(r2)
                      break;
   449bc:	00000b06 	br	449ec <OSEventPendMulti+0x574>
   449c0:	e0bff317 	ldw	r2,-52(fp)
   449c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   449c8:	e0bffa17 	ldw	r2,-24(fp)
   449cc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   449d0:	e0bffd17 	ldw	r2,-12(fp)
   449d4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   449d8:	e0800217 	ldw	r2,8(fp)
   449dc:	00c00044 	movi	r3,1
   449e0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   449e4:	e0bff18b 	ldhu	r2,-58(fp)
   449e8:	00002206 	br	44a74 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   449ec:	e0800217 	ldw	r2,8(fp)
   449f0:	10000005 	stb	zero,0(r2)
             break;
   449f4:	00001006 	br	44a38 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   449f8:	e0bffe17 	ldw	r2,-8(fp)
   449fc:	10c00104 	addi	r3,r2,4
   44a00:	e0fffe15 	stw	r3,-8(fp)
   44a04:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   44a08:	e0800217 	ldw	r2,8(fp)
   44a0c:	00c00384 	movi	r3,14
   44a10:	10c00005 	stb	r3,0(r2)
             break;
   44a14:	00000806 	br	44a38 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   44a18:	e0bffe17 	ldw	r2,-8(fp)
   44a1c:	10c00104 	addi	r3,r2,4
   44a20:	e0fffe15 	stw	r3,-8(fp)
   44a24:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   44a28:	e0800217 	ldw	r2,8(fp)
   44a2c:	00c00284 	movi	r3,10
   44a30:	10c00005 	stb	r3,0(r2)
             break;
   44a34:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   44a38:	d0a73917 	ldw	r2,-25372(gp)
   44a3c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   44a40:	d0a73917 	ldw	r2,-25372(gp)
   44a44:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   44a48:	d0a73917 	ldw	r2,-25372(gp)
   44a4c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   44a50:	d0a73917 	ldw	r2,-25372(gp)
   44a54:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   44a58:	d0a73917 	ldw	r2,-25372(gp)
   44a5c:	10000915 	stw	zero,36(r2)
   44a60:	e0bff317 	ldw	r2,-52(fp)
   44a64:	e0bffb15 	stw	r2,-20(fp)
   44a68:	e0bffb17 	ldw	r2,-20(fp)
   44a6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   44a70:	e0bff18b 	ldhu	r2,-58(fp)
}
   44a74:	e037883a 	mov	sp,fp
   44a78:	dfc00117 	ldw	ra,4(sp)
   44a7c:	df000017 	ldw	fp,0(sp)
   44a80:	dec00204 	addi	sp,sp,8
   44a84:	f800283a 	ret

00044a88 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   44a88:	defffe04 	addi	sp,sp,-8
   44a8c:	dfc00115 	stw	ra,4(sp)
   44a90:	df000015 	stw	fp,0(sp)
   44a94:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   44a98:	004e9480 	call	4e948 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   44a9c:	00457fc0 	call	457fc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   44aa0:	00458400 	call	45840 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   44aa4:	00459a00 	call	459a0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   44aa8:	00457200 	call	45720 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   44aac:	00479100 	call	47910 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   44ab0:	00482580 	call	48258 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   44ab4:	00494980 	call	49498 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   44ab8:	00458a80 	call	458a8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   44abc:	00459240 	call	45924 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   44ac0:	004e9640 	call	4e964 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   44ac4:	00461fc0 	call	461fc <OSDebugInit>
#endif
}
   44ac8:	e037883a 	mov	sp,fp
   44acc:	dfc00117 	ldw	ra,4(sp)
   44ad0:	df000017 	ldw	fp,0(sp)
   44ad4:	dec00204 	addi	sp,sp,8
   44ad8:	f800283a 	ret

00044adc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   44adc:	defffc04 	addi	sp,sp,-16
   44ae0:	df000315 	stw	fp,12(sp)
   44ae4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   44ae8:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   44aec:	d0a72a43 	ldbu	r2,-25431(gp)
   44af0:	10803fcc 	andi	r2,r2,255
   44af4:	10800058 	cmpnei	r2,r2,1
   44af8:	1000131e 	bne	r2,zero,44b48 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44afc:	0005303a 	rdctl	r2,status
   44b00:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44b04:	e0fffe17 	ldw	r3,-8(fp)
   44b08:	00bfff84 	movi	r2,-2
   44b0c:	1884703a 	and	r2,r3,r2
   44b10:	1001703a 	wrctl	status,r2
  
  return context;
   44b14:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   44b18:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   44b1c:	d0a73803 	ldbu	r2,-25376(gp)
   44b20:	10803fcc 	andi	r2,r2,255
   44b24:	10803fe0 	cmpeqi	r2,r2,255
   44b28:	1000031e 	bne	r2,zero,44b38 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   44b2c:	d0a73803 	ldbu	r2,-25376(gp)
   44b30:	10800044 	addi	r2,r2,1
   44b34:	d0a73805 	stb	r2,-25376(gp)
   44b38:	e0bffd17 	ldw	r2,-12(fp)
   44b3c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44b40:	e0bfff17 	ldw	r2,-4(fp)
   44b44:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   44b48:	e037883a 	mov	sp,fp
   44b4c:	df000017 	ldw	fp,0(sp)
   44b50:	dec00104 	addi	sp,sp,4
   44b54:	f800283a 	ret

00044b58 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   44b58:	defffb04 	addi	sp,sp,-20
   44b5c:	dfc00415 	stw	ra,16(sp)
   44b60:	df000315 	stw	fp,12(sp)
   44b64:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   44b68:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   44b6c:	d0a72a43 	ldbu	r2,-25431(gp)
   44b70:	10803fcc 	andi	r2,r2,255
   44b74:	10800058 	cmpnei	r2,r2,1
   44b78:	10002f1e 	bne	r2,zero,44c38 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44b7c:	0005303a 	rdctl	r2,status
   44b80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44b84:	e0fffe17 	ldw	r3,-8(fp)
   44b88:	00bfff84 	movi	r2,-2
   44b8c:	1884703a 	and	r2,r3,r2
   44b90:	1001703a 	wrctl	status,r2
  
  return context;
   44b94:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   44b98:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   44b9c:	d0a73803 	ldbu	r2,-25376(gp)
   44ba0:	10803fcc 	andi	r2,r2,255
   44ba4:	10000326 	beq	r2,zero,44bb4 <OSIntExit+0x5c>
            OSIntNesting--;
   44ba8:	d0a73803 	ldbu	r2,-25376(gp)
   44bac:	10bfffc4 	addi	r2,r2,-1
   44bb0:	d0a73805 	stb	r2,-25376(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   44bb4:	d0a73803 	ldbu	r2,-25376(gp)
   44bb8:	10803fcc 	andi	r2,r2,255
   44bbc:	10001a1e 	bne	r2,zero,44c28 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   44bc0:	d0a72a03 	ldbu	r2,-25432(gp)
   44bc4:	10803fcc 	andi	r2,r2,255
   44bc8:	1000171e 	bne	r2,zero,44c28 <OSIntExit+0xd0>
                OS_SchedNew();
   44bcc:	0045c000 	call	45c00 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   44bd0:	d0e72c03 	ldbu	r3,-25424(gp)
   44bd4:	d0a72c43 	ldbu	r2,-25423(gp)
   44bd8:	18c03fcc 	andi	r3,r3,255
   44bdc:	10803fcc 	andi	r2,r2,255
   44be0:	18801126 	beq	r3,r2,44c28 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   44be4:	d0a72c03 	ldbu	r2,-25424(gp)
   44be8:	10c03fcc 	andi	r3,r2,255
   44bec:	008001b4 	movhi	r2,6
   44bf0:	10af5d04 	addi	r2,r2,-17036
   44bf4:	18c7883a 	add	r3,r3,r3
   44bf8:	18c7883a 	add	r3,r3,r3
   44bfc:	10c5883a 	add	r2,r2,r3
   44c00:	10800017 	ldw	r2,0(r2)
   44c04:	d0a73415 	stw	r2,-25392(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   44c08:	d0a73417 	ldw	r2,-25392(gp)
   44c0c:	10c00e17 	ldw	r3,56(r2)
   44c10:	18c00044 	addi	r3,r3,1
   44c14:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   44c18:	d0a72f17 	ldw	r2,-25412(gp)
   44c1c:	10800044 	addi	r2,r2,1
   44c20:	d0a72f15 	stw	r2,-25412(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   44c24:	004e4f00 	call	4e4f0 <OSCtxSw>
   44c28:	e0bffd17 	ldw	r2,-12(fp)
   44c2c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44c30:	e0bfff17 	ldw	r2,-4(fp)
   44c34:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   44c38:	e037883a 	mov	sp,fp
   44c3c:	dfc00117 	ldw	ra,4(sp)
   44c40:	df000017 	ldw	fp,0(sp)
   44c44:	dec00204 	addi	sp,sp,8
   44c48:	f800283a 	ret

00044c4c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   44c4c:	defffc04 	addi	sp,sp,-16
   44c50:	df000315 	stw	fp,12(sp)
   44c54:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   44c58:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   44c5c:	d0a72a43 	ldbu	r2,-25431(gp)
   44c60:	10803fcc 	andi	r2,r2,255
   44c64:	10800058 	cmpnei	r2,r2,1
   44c68:	1000161e 	bne	r2,zero,44cc4 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44c6c:	0005303a 	rdctl	r2,status
   44c70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44c74:	e0fffe17 	ldw	r3,-8(fp)
   44c78:	00bfff84 	movi	r2,-2
   44c7c:	1884703a 	and	r2,r3,r2
   44c80:	1001703a 	wrctl	status,r2
  
  return context;
   44c84:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   44c88:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   44c8c:	d0a73803 	ldbu	r2,-25376(gp)
   44c90:	10803fcc 	andi	r2,r2,255
   44c94:	1000071e 	bne	r2,zero,44cb4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   44c98:	d0a72a03 	ldbu	r2,-25432(gp)
   44c9c:	10803fcc 	andi	r2,r2,255
   44ca0:	10803fe0 	cmpeqi	r2,r2,255
   44ca4:	1000031e 	bne	r2,zero,44cb4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   44ca8:	d0a72a03 	ldbu	r2,-25432(gp)
   44cac:	10800044 	addi	r2,r2,1
   44cb0:	d0a72a05 	stb	r2,-25432(gp)
   44cb4:	e0bffd17 	ldw	r2,-12(fp)
   44cb8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44cbc:	e0bfff17 	ldw	r2,-4(fp)
   44cc0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   44cc4:	e037883a 	mov	sp,fp
   44cc8:	df000017 	ldw	fp,0(sp)
   44ccc:	dec00104 	addi	sp,sp,4
   44cd0:	f800283a 	ret

00044cd4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   44cd4:	defff804 	addi	sp,sp,-32
   44cd8:	dfc00715 	stw	ra,28(sp)
   44cdc:	df000615 	stw	fp,24(sp)
   44ce0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   44ce4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   44ce8:	d0a72a43 	ldbu	r2,-25431(gp)
   44cec:	10803fcc 	andi	r2,r2,255
   44cf0:	10800058 	cmpnei	r2,r2,1
   44cf4:	1000281e 	bne	r2,zero,44d98 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44cf8:	0005303a 	rdctl	r2,status
   44cfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44d00:	e0fffb17 	ldw	r3,-20(fp)
   44d04:	00bfff84 	movi	r2,-2
   44d08:	1884703a 	and	r2,r3,r2
   44d0c:	1001703a 	wrctl	status,r2
  
  return context;
   44d10:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   44d14:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   44d18:	d0a72a03 	ldbu	r2,-25432(gp)
   44d1c:	10803fcc 	andi	r2,r2,255
   44d20:	10001926 	beq	r2,zero,44d88 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   44d24:	d0a72a03 	ldbu	r2,-25432(gp)
   44d28:	10bfffc4 	addi	r2,r2,-1
   44d2c:	d0a72a05 	stb	r2,-25432(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   44d30:	d0a72a03 	ldbu	r2,-25432(gp)
   44d34:	10803fcc 	andi	r2,r2,255
   44d38:	10000e1e 	bne	r2,zero,44d74 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   44d3c:	d0a73803 	ldbu	r2,-25376(gp)
   44d40:	10803fcc 	andi	r2,r2,255
   44d44:	1000061e 	bne	r2,zero,44d60 <OSSchedUnlock+0x8c>
   44d48:	e0bffa17 	ldw	r2,-24(fp)
   44d4c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44d50:	e0bffc17 	ldw	r2,-16(fp)
   44d54:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   44d58:	0045b340 	call	45b34 <OS_Sched>
   44d5c:	00000e06 	br	44d98 <OSSchedUnlock+0xc4>
   44d60:	e0bffa17 	ldw	r2,-24(fp)
   44d64:	e0bffd15 	stw	r2,-12(fp)
   44d68:	e0bffd17 	ldw	r2,-12(fp)
   44d6c:	1001703a 	wrctl	status,r2
   44d70:	00000906 	br	44d98 <OSSchedUnlock+0xc4>
   44d74:	e0bffa17 	ldw	r2,-24(fp)
   44d78:	e0bffe15 	stw	r2,-8(fp)
   44d7c:	e0bffe17 	ldw	r2,-8(fp)
   44d80:	1001703a 	wrctl	status,r2
   44d84:	00000406 	br	44d98 <OSSchedUnlock+0xc4>
   44d88:	e0bffa17 	ldw	r2,-24(fp)
   44d8c:	e0bfff15 	stw	r2,-4(fp)
   44d90:	e0bfff17 	ldw	r2,-4(fp)
   44d94:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   44d98:	e037883a 	mov	sp,fp
   44d9c:	dfc00117 	ldw	ra,4(sp)
   44da0:	df000017 	ldw	fp,0(sp)
   44da4:	dec00204 	addi	sp,sp,8
   44da8:	f800283a 	ret

00044dac <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   44dac:	defffe04 	addi	sp,sp,-8
   44db0:	dfc00115 	stw	ra,4(sp)
   44db4:	df000015 	stw	fp,0(sp)
   44db8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   44dbc:	d0a72a43 	ldbu	r2,-25431(gp)
   44dc0:	10803fcc 	andi	r2,r2,255
   44dc4:	10000f1e 	bne	r2,zero,44e04 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   44dc8:	0045c000 	call	45c00 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   44dcc:	d0a72c03 	ldbu	r2,-25424(gp)
   44dd0:	d0a72c45 	stb	r2,-25423(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   44dd4:	d0a72c03 	ldbu	r2,-25424(gp)
   44dd8:	10c03fcc 	andi	r3,r2,255
   44ddc:	008001b4 	movhi	r2,6
   44de0:	10af5d04 	addi	r2,r2,-17036
   44de4:	18c7883a 	add	r3,r3,r3
   44de8:	18c7883a 	add	r3,r3,r3
   44dec:	10c5883a 	add	r2,r2,r3
   44df0:	10800017 	ldw	r2,0(r2)
   44df4:	d0a73415 	stw	r2,-25392(gp)
        OSTCBCur      = OSTCBHighRdy;
   44df8:	d0a73417 	ldw	r2,-25392(gp)
   44dfc:	d0a73915 	stw	r2,-25372(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   44e00:	004e57c0 	call	4e57c <OSStartHighRdy>
    }
}
   44e04:	e037883a 	mov	sp,fp
   44e08:	dfc00117 	ldw	ra,4(sp)
   44e0c:	df000017 	ldw	fp,0(sp)
   44e10:	dec00204 	addi	sp,sp,8
   44e14:	f800283a 	ret

00044e18 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   44e18:	defff904 	addi	sp,sp,-28
   44e1c:	dfc00615 	stw	ra,24(sp)
   44e20:	df000515 	stw	fp,20(sp)
   44e24:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   44e28:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   44e2c:	01000084 	movi	r4,2
   44e30:	004b9400 	call	4b940 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44e34:	0005303a 	rdctl	r2,status
   44e38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44e3c:	e0fffc17 	ldw	r3,-16(fp)
   44e40:	00bfff84 	movi	r2,-2
   44e44:	1884703a 	and	r2,r3,r2
   44e48:	1001703a 	wrctl	status,r2
  
  return context;
   44e4c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   44e50:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   44e54:	d0272b15 	stw	zero,-25428(gp)
   44e58:	e0bffb17 	ldw	r2,-20(fp)
   44e5c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44e60:	e0bffd17 	ldw	r2,-12(fp)
   44e64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   44e68:	01001904 	movi	r4,100
   44e6c:	004b9400 	call	4b940 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44e70:	0005303a 	rdctl	r2,status
   44e74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44e78:	e0fffe17 	ldw	r3,-8(fp)
   44e7c:	00bfff84 	movi	r2,-2
   44e80:	1884703a 	and	r2,r3,r2
   44e84:	1001703a 	wrctl	status,r2
  
  return context;
   44e88:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   44e8c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   44e90:	d0a72b17 	ldw	r2,-25428(gp)
   44e94:	d0a73015 	stw	r2,-25408(gp)
    OSStatRdy    = OS_TRUE;
   44e98:	00800044 	movi	r2,1
   44e9c:	d0a73c05 	stb	r2,-25360(gp)
   44ea0:	e0bffb17 	ldw	r2,-20(fp)
   44ea4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44ea8:	e0bfff17 	ldw	r2,-4(fp)
   44eac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   44eb0:	e037883a 	mov	sp,fp
   44eb4:	dfc00117 	ldw	ra,4(sp)
   44eb8:	df000017 	ldw	fp,0(sp)
   44ebc:	dec00204 	addi	sp,sp,8
   44ec0:	f800283a 	ret

00044ec4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   44ec4:	defff704 	addi	sp,sp,-36
   44ec8:	dfc00815 	stw	ra,32(sp)
   44ecc:	df000715 	stw	fp,28(sp)
   44ed0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   44ed4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   44ed8:	004e92c0 	call	4e92c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44edc:	0005303a 	rdctl	r2,status
   44ee0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44ee4:	e0fffc17 	ldw	r3,-16(fp)
   44ee8:	00bfff84 	movi	r2,-2
   44eec:	1884703a 	and	r2,r3,r2
   44ef0:	1001703a 	wrctl	status,r2
  
  return context;
   44ef4:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   44ef8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   44efc:	d0a73a17 	ldw	r2,-25368(gp)
   44f00:	10800044 	addi	r2,r2,1
   44f04:	d0a73a15 	stw	r2,-25368(gp)
   44f08:	e0bffb17 	ldw	r2,-20(fp)
   44f0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44f10:	e0bffd17 	ldw	r2,-12(fp)
   44f14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   44f18:	d0a72a43 	ldbu	r2,-25431(gp)
   44f1c:	10803fcc 	andi	r2,r2,255
   44f20:	10800058 	cmpnei	r2,r2,1
   44f24:	1000691e 	bne	r2,zero,450cc <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   44f28:	d0a72e03 	ldbu	r2,-25416(gp)
   44f2c:	10803fcc 	andi	r2,r2,255
   44f30:	10c00060 	cmpeqi	r3,r2,1
   44f34:	1800061e 	bne	r3,zero,44f50 <OSTimeTick+0x8c>
   44f38:	10c000a0 	cmpeqi	r3,r2,2
   44f3c:	1800061e 	bne	r3,zero,44f58 <OSTimeTick+0x94>
   44f40:	10000a1e 	bne	r2,zero,44f6c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   44f44:	00800044 	movi	r2,1
   44f48:	e0bffa05 	stb	r2,-24(fp)
                 break;
   44f4c:	00000b06 	br	44f7c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   44f50:	e03ffa05 	stb	zero,-24(fp)
                 break;
   44f54:	00000906 	br	44f7c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   44f58:	00800044 	movi	r2,1
   44f5c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   44f60:	00800044 	movi	r2,1
   44f64:	d0a72e05 	stb	r2,-25416(gp)
                 break;
   44f68:	00000406 	br	44f7c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   44f6c:	00800044 	movi	r2,1
   44f70:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   44f74:	d0272e05 	stb	zero,-25416(gp)
                 break;
   44f78:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   44f7c:	e0bffa03 	ldbu	r2,-24(fp)
   44f80:	1000011e 	bne	r2,zero,44f88 <OSTimeTick+0xc4>
            return;
   44f84:	00005106 	br	450cc <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   44f88:	d0a72d17 	ldw	r2,-25420(gp)
   44f8c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   44f90:	00004906 	br	450b8 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44f94:	0005303a 	rdctl	r2,status
   44f98:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44f9c:	e0fffe17 	ldw	r3,-8(fp)
   44fa0:	00bfff84 	movi	r2,-2
   44fa4:	1884703a 	and	r2,r3,r2
   44fa8:	1001703a 	wrctl	status,r2
  
  return context;
   44fac:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   44fb0:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   44fb4:	e0bff917 	ldw	r2,-28(fp)
   44fb8:	10800b8b 	ldhu	r2,46(r2)
   44fbc:	10bfffcc 	andi	r2,r2,65535
   44fc0:	10003626 	beq	r2,zero,4509c <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   44fc4:	e0bff917 	ldw	r2,-28(fp)
   44fc8:	10800b8b 	ldhu	r2,46(r2)
   44fcc:	10bfffc4 	addi	r2,r2,-1
   44fd0:	1007883a 	mov	r3,r2
   44fd4:	e0bff917 	ldw	r2,-28(fp)
   44fd8:	10c00b8d 	sth	r3,46(r2)
   44fdc:	e0bff917 	ldw	r2,-28(fp)
   44fe0:	10800b8b 	ldhu	r2,46(r2)
   44fe4:	10bfffcc 	andi	r2,r2,65535
   44fe8:	10002c1e 	bne	r2,zero,4509c <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   44fec:	e0bff917 	ldw	r2,-28(fp)
   44ff0:	10800c03 	ldbu	r2,48(r2)
   44ff4:	10803fcc 	andi	r2,r2,255
   44ff8:	10800dcc 	andi	r2,r2,55
   44ffc:	10000b26 	beq	r2,zero,4502c <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   45000:	e0bff917 	ldw	r2,-28(fp)
   45004:	10c00c03 	ldbu	r3,48(r2)
   45008:	00bff204 	movi	r2,-56
   4500c:	1884703a 	and	r2,r3,r2
   45010:	1007883a 	mov	r3,r2
   45014:	e0bff917 	ldw	r2,-28(fp)
   45018:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   4501c:	e0bff917 	ldw	r2,-28(fp)
   45020:	00c00044 	movi	r3,1
   45024:	10c00c45 	stb	r3,49(r2)
   45028:	00000206 	br	45034 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   4502c:	e0bff917 	ldw	r2,-28(fp)
   45030:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   45034:	e0bff917 	ldw	r2,-28(fp)
   45038:	10800c03 	ldbu	r2,48(r2)
   4503c:	10803fcc 	andi	r2,r2,255
   45040:	1080020c 	andi	r2,r2,8
   45044:	1000151e 	bne	r2,zero,4509c <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   45048:	e0bff917 	ldw	r2,-28(fp)
   4504c:	10c00d83 	ldbu	r3,54(r2)
   45050:	d0a73603 	ldbu	r2,-25384(gp)
   45054:	1884b03a 	or	r2,r3,r2
   45058:	d0a73605 	stb	r2,-25384(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   4505c:	e0bff917 	ldw	r2,-28(fp)
   45060:	10800d03 	ldbu	r2,52(r2)
   45064:	10c03fcc 	andi	r3,r2,255
   45068:	e0bff917 	ldw	r2,-28(fp)
   4506c:	10800d03 	ldbu	r2,52(r2)
   45070:	11003fcc 	andi	r4,r2,255
   45074:	d0a73644 	addi	r2,gp,-25383
   45078:	2085883a 	add	r2,r4,r2
   4507c:	11000003 	ldbu	r4,0(r2)
   45080:	e0bff917 	ldw	r2,-28(fp)
   45084:	10800d43 	ldbu	r2,53(r2)
   45088:	2084b03a 	or	r2,r4,r2
   4508c:	1009883a 	mov	r4,r2
   45090:	d0a73644 	addi	r2,gp,-25383
   45094:	1885883a 	add	r2,r3,r2
   45098:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   4509c:	e0bff917 	ldw	r2,-28(fp)
   450a0:	10800517 	ldw	r2,20(r2)
   450a4:	e0bff915 	stw	r2,-28(fp)
   450a8:	e0bffb17 	ldw	r2,-20(fp)
   450ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   450b0:	e0bfff17 	ldw	r2,-4(fp)
   450b4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   450b8:	e0bff917 	ldw	r2,-28(fp)
   450bc:	10800c83 	ldbu	r2,50(r2)
   450c0:	10803fcc 	andi	r2,r2,255
   450c4:	10800518 	cmpnei	r2,r2,20
   450c8:	103fb21e 	bne	r2,zero,44f94 <__alt_data_end+0xfffcf434>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   450cc:	e037883a 	mov	sp,fp
   450d0:	dfc00117 	ldw	ra,4(sp)
   450d4:	df000017 	ldw	fp,0(sp)
   450d8:	dec00204 	addi	sp,sp,8
   450dc:	f800283a 	ret

000450e0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   450e0:	deffff04 	addi	sp,sp,-4
   450e4:	df000015 	stw	fp,0(sp)
   450e8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   450ec:	00804784 	movi	r2,286
}
   450f0:	e037883a 	mov	sp,fp
   450f4:	df000017 	ldw	fp,0(sp)
   450f8:	dec00104 	addi	sp,sp,4
   450fc:	f800283a 	ret

00045100 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   45100:	deffff04 	addi	sp,sp,-4
   45104:	df000015 	stw	fp,0(sp)
   45108:	d839883a 	mov	fp,sp
}
   4510c:	e037883a 	mov	sp,fp
   45110:	df000017 	ldw	fp,0(sp)
   45114:	dec00104 	addi	sp,sp,4
   45118:	f800283a 	ret

0004511c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   4511c:	defff804 	addi	sp,sp,-32
   45120:	dfc00715 	stw	ra,28(sp)
   45124:	df000615 	stw	fp,24(sp)
   45128:	df000604 	addi	fp,sp,24
   4512c:	e13ffc15 	stw	r4,-16(fp)
   45130:	e17ffd15 	stw	r5,-12(fp)
   45134:	3007883a 	mov	r3,r6
   45138:	3805883a 	mov	r2,r7
   4513c:	e0fffe05 	stb	r3,-8(fp)
   45140:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   45144:	e0bffc17 	ldw	r2,-16(fp)
   45148:	10800283 	ldbu	r2,10(r2)
   4514c:	10c03fcc 	andi	r3,r2,255
   45150:	00800174 	movhi	r2,5
   45154:	10bc8904 	addi	r2,r2,-3548
   45158:	10c5883a 	add	r2,r2,r3
   4515c:	10800003 	ldbu	r2,0(r2)
   45160:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   45164:	e0bffa03 	ldbu	r2,-24(fp)
   45168:	e0fffc17 	ldw	r3,-16(fp)
   4516c:	1885883a 	add	r2,r3,r2
   45170:	10800204 	addi	r2,r2,8
   45174:	108000c3 	ldbu	r2,3(r2)
   45178:	10c03fcc 	andi	r3,r2,255
   4517c:	00800174 	movhi	r2,5
   45180:	10bc8904 	addi	r2,r2,-3548
   45184:	10c5883a 	add	r2,r2,r3
   45188:	10800003 	ldbu	r2,0(r2)
   4518c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   45190:	e0bffa03 	ldbu	r2,-24(fp)
   45194:	100490fa 	slli	r2,r2,3
   45198:	1007883a 	mov	r3,r2
   4519c:	e0bffa43 	ldbu	r2,-23(fp)
   451a0:	1885883a 	add	r2,r3,r2
   451a4:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   451a8:	e0fffa83 	ldbu	r3,-22(fp)
   451ac:	008001b4 	movhi	r2,6
   451b0:	10af5d04 	addi	r2,r2,-17036
   451b4:	18c7883a 	add	r3,r3,r3
   451b8:	18c7883a 	add	r3,r3,r3
   451bc:	10c5883a 	add	r2,r2,r3
   451c0:	10800017 	ldw	r2,0(r2)
   451c4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   451c8:	e0bffb17 	ldw	r2,-20(fp)
   451cc:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   451d0:	e0bffb17 	ldw	r2,-20(fp)
   451d4:	e0fffd17 	ldw	r3,-12(fp)
   451d8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   451dc:	e0bffb17 	ldw	r2,-20(fp)
   451e0:	10800c03 	ldbu	r2,48(r2)
   451e4:	1007883a 	mov	r3,r2
   451e8:	e0bffe03 	ldbu	r2,-8(fp)
   451ec:	0084303a 	nor	r2,zero,r2
   451f0:	1884703a 	and	r2,r3,r2
   451f4:	1007883a 	mov	r3,r2
   451f8:	e0bffb17 	ldw	r2,-20(fp)
   451fc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   45200:	e0bffb17 	ldw	r2,-20(fp)
   45204:	e0ffff03 	ldbu	r3,-4(fp)
   45208:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   4520c:	e0bffb17 	ldw	r2,-20(fp)
   45210:	10800c03 	ldbu	r2,48(r2)
   45214:	10803fcc 	andi	r2,r2,255
   45218:	1080020c 	andi	r2,r2,8
   4521c:	1000111e 	bne	r2,zero,45264 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   45220:	e0bffb17 	ldw	r2,-20(fp)
   45224:	10c00d83 	ldbu	r3,54(r2)
   45228:	d0a73603 	ldbu	r2,-25384(gp)
   4522c:	1884b03a 	or	r2,r3,r2
   45230:	d0a73605 	stb	r2,-25384(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   45234:	e0fffa03 	ldbu	r3,-24(fp)
   45238:	e13ffa03 	ldbu	r4,-24(fp)
   4523c:	d0a73644 	addi	r2,gp,-25383
   45240:	2085883a 	add	r2,r4,r2
   45244:	11000003 	ldbu	r4,0(r2)
   45248:	e0bffb17 	ldw	r2,-20(fp)
   4524c:	10800d43 	ldbu	r2,53(r2)
   45250:	2084b03a 	or	r2,r4,r2
   45254:	1009883a 	mov	r4,r2
   45258:	d0a73644 	addi	r2,gp,-25383
   4525c:	1885883a 	add	r2,r3,r2
   45260:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   45264:	e13ffb17 	ldw	r4,-20(fp)
   45268:	e17ffc17 	ldw	r5,-16(fp)
   4526c:	004550c0 	call	4550c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   45270:	e0bffb17 	ldw	r2,-20(fp)
   45274:	10800817 	ldw	r2,32(r2)
   45278:	10000826 	beq	r2,zero,4529c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   4527c:	e0bffb17 	ldw	r2,-20(fp)
   45280:	10800817 	ldw	r2,32(r2)
   45284:	e13ffb17 	ldw	r4,-20(fp)
   45288:	100b883a 	mov	r5,r2
   4528c:	00455c00 	call	455c0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   45290:	e0bffb17 	ldw	r2,-20(fp)
   45294:	e0fffc17 	ldw	r3,-16(fp)
   45298:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   4529c:	e0bffa83 	ldbu	r2,-22(fp)
}
   452a0:	e037883a 	mov	sp,fp
   452a4:	dfc00117 	ldw	ra,4(sp)
   452a8:	df000017 	ldw	fp,0(sp)
   452ac:	dec00204 	addi	sp,sp,8
   452b0:	f800283a 	ret

000452b4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   452b4:	defffd04 	addi	sp,sp,-12
   452b8:	df000215 	stw	fp,8(sp)
   452bc:	df000204 	addi	fp,sp,8
   452c0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   452c4:	d0a73917 	ldw	r2,-25372(gp)
   452c8:	e0ffff17 	ldw	r3,-4(fp)
   452cc:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   452d0:	d0a73917 	ldw	r2,-25372(gp)
   452d4:	10800d03 	ldbu	r2,52(r2)
   452d8:	10803fcc 	andi	r2,r2,255
   452dc:	d0e73917 	ldw	r3,-25372(gp)
   452e0:	18c00d03 	ldbu	r3,52(r3)
   452e4:	18c03fcc 	andi	r3,r3,255
   452e8:	e13fff17 	ldw	r4,-4(fp)
   452ec:	20c7883a 	add	r3,r4,r3
   452f0:	18c00204 	addi	r3,r3,8
   452f4:	190000c3 	ldbu	r4,3(r3)
   452f8:	d0e73917 	ldw	r3,-25372(gp)
   452fc:	18c00d43 	ldbu	r3,53(r3)
   45300:	20c6b03a 	or	r3,r4,r3
   45304:	1809883a 	mov	r4,r3
   45308:	e0ffff17 	ldw	r3,-4(fp)
   4530c:	1885883a 	add	r2,r3,r2
   45310:	10800204 	addi	r2,r2,8
   45314:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   45318:	e0bfff17 	ldw	r2,-4(fp)
   4531c:	10c00283 	ldbu	r3,10(r2)
   45320:	d0a73917 	ldw	r2,-25372(gp)
   45324:	10800d83 	ldbu	r2,54(r2)
   45328:	1884b03a 	or	r2,r3,r2
   4532c:	1007883a 	mov	r3,r2
   45330:	e0bfff17 	ldw	r2,-4(fp)
   45334:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   45338:	d0a73917 	ldw	r2,-25372(gp)
   4533c:	10800d03 	ldbu	r2,52(r2)
   45340:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   45344:	e0fffe03 	ldbu	r3,-8(fp)
   45348:	e13ffe03 	ldbu	r4,-8(fp)
   4534c:	d0a73644 	addi	r2,gp,-25383
   45350:	2085883a 	add	r2,r4,r2
   45354:	10800003 	ldbu	r2,0(r2)
   45358:	1009883a 	mov	r4,r2
   4535c:	d0a73917 	ldw	r2,-25372(gp)
   45360:	10800d43 	ldbu	r2,53(r2)
   45364:	0084303a 	nor	r2,zero,r2
   45368:	2084703a 	and	r2,r4,r2
   4536c:	1009883a 	mov	r4,r2
   45370:	d0a73644 	addi	r2,gp,-25383
   45374:	1885883a 	add	r2,r3,r2
   45378:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   4537c:	e0fffe03 	ldbu	r3,-8(fp)
   45380:	d0a73644 	addi	r2,gp,-25383
   45384:	1885883a 	add	r2,r3,r2
   45388:	10800003 	ldbu	r2,0(r2)
   4538c:	10803fcc 	andi	r2,r2,255
   45390:	1000071e 	bne	r2,zero,453b0 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   45394:	d0a73917 	ldw	r2,-25372(gp)
   45398:	10800d83 	ldbu	r2,54(r2)
   4539c:	0084303a 	nor	r2,zero,r2
   453a0:	1007883a 	mov	r3,r2
   453a4:	d0a73603 	ldbu	r2,-25384(gp)
   453a8:	1884703a 	and	r2,r3,r2
   453ac:	d0a73605 	stb	r2,-25384(gp)
    }
}
   453b0:	e037883a 	mov	sp,fp
   453b4:	df000017 	ldw	fp,0(sp)
   453b8:	dec00104 	addi	sp,sp,4
   453bc:	f800283a 	ret

000453c0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   453c0:	defffb04 	addi	sp,sp,-20
   453c4:	df000415 	stw	fp,16(sp)
   453c8:	df000404 	addi	fp,sp,16
   453cc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   453d0:	d0a73917 	ldw	r2,-25372(gp)
   453d4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   453d8:	d0a73917 	ldw	r2,-25372(gp)
   453dc:	e0ffff17 	ldw	r3,-4(fp)
   453e0:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   453e4:	e0bfff17 	ldw	r2,-4(fp)
   453e8:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   453ec:	e0bffc17 	ldw	r2,-16(fp)
   453f0:	10800017 	ldw	r2,0(r2)
   453f4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   453f8:	00002006 	br	4547c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   453fc:	d0a73917 	ldw	r2,-25372(gp)
   45400:	10800d03 	ldbu	r2,52(r2)
   45404:	10803fcc 	andi	r2,r2,255
   45408:	d0e73917 	ldw	r3,-25372(gp)
   4540c:	18c00d03 	ldbu	r3,52(r3)
   45410:	18c03fcc 	andi	r3,r3,255
   45414:	e13ffd17 	ldw	r4,-12(fp)
   45418:	20c7883a 	add	r3,r4,r3
   4541c:	18c00204 	addi	r3,r3,8
   45420:	190000c3 	ldbu	r4,3(r3)
   45424:	d0e73917 	ldw	r3,-25372(gp)
   45428:	18c00d43 	ldbu	r3,53(r3)
   4542c:	20c6b03a 	or	r3,r4,r3
   45430:	1809883a 	mov	r4,r3
   45434:	e0fffd17 	ldw	r3,-12(fp)
   45438:	1885883a 	add	r2,r3,r2
   4543c:	10800204 	addi	r2,r2,8
   45440:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   45444:	e0bffd17 	ldw	r2,-12(fp)
   45448:	10c00283 	ldbu	r3,10(r2)
   4544c:	d0a73917 	ldw	r2,-25372(gp)
   45450:	10800d83 	ldbu	r2,54(r2)
   45454:	1884b03a 	or	r2,r3,r2
   45458:	1007883a 	mov	r3,r2
   4545c:	e0bffd17 	ldw	r2,-12(fp)
   45460:	10c00285 	stb	r3,10(r2)
        pevents++;
   45464:	e0bffc17 	ldw	r2,-16(fp)
   45468:	10800104 	addi	r2,r2,4
   4546c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   45470:	e0bffc17 	ldw	r2,-16(fp)
   45474:	10800017 	ldw	r2,0(r2)
   45478:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   4547c:	e0bffd17 	ldw	r2,-12(fp)
   45480:	103fde1e 	bne	r2,zero,453fc <__alt_data_end+0xfffcf89c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   45484:	d0a73917 	ldw	r2,-25372(gp)
   45488:	10800d03 	ldbu	r2,52(r2)
   4548c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   45490:	e0fffe03 	ldbu	r3,-8(fp)
   45494:	e13ffe03 	ldbu	r4,-8(fp)
   45498:	d0a73644 	addi	r2,gp,-25383
   4549c:	2085883a 	add	r2,r4,r2
   454a0:	10800003 	ldbu	r2,0(r2)
   454a4:	1009883a 	mov	r4,r2
   454a8:	d0a73917 	ldw	r2,-25372(gp)
   454ac:	10800d43 	ldbu	r2,53(r2)
   454b0:	0084303a 	nor	r2,zero,r2
   454b4:	2084703a 	and	r2,r4,r2
   454b8:	1009883a 	mov	r4,r2
   454bc:	d0a73644 	addi	r2,gp,-25383
   454c0:	1885883a 	add	r2,r3,r2
   454c4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   454c8:	e0fffe03 	ldbu	r3,-8(fp)
   454cc:	d0a73644 	addi	r2,gp,-25383
   454d0:	1885883a 	add	r2,r3,r2
   454d4:	10800003 	ldbu	r2,0(r2)
   454d8:	10803fcc 	andi	r2,r2,255
   454dc:	1000071e 	bne	r2,zero,454fc <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   454e0:	d0a73917 	ldw	r2,-25372(gp)
   454e4:	10800d83 	ldbu	r2,54(r2)
   454e8:	0084303a 	nor	r2,zero,r2
   454ec:	1007883a 	mov	r3,r2
   454f0:	d0a73603 	ldbu	r2,-25384(gp)
   454f4:	1884703a 	and	r2,r3,r2
   454f8:	d0a73605 	stb	r2,-25384(gp)
    }
}
   454fc:	e037883a 	mov	sp,fp
   45500:	df000017 	ldw	fp,0(sp)
   45504:	dec00104 	addi	sp,sp,4
   45508:	f800283a 	ret

0004550c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   4550c:	defffc04 	addi	sp,sp,-16
   45510:	df000315 	stw	fp,12(sp)
   45514:	df000304 	addi	fp,sp,12
   45518:	e13ffe15 	stw	r4,-8(fp)
   4551c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   45520:	e0bffe17 	ldw	r2,-8(fp)
   45524:	10800d03 	ldbu	r2,52(r2)
   45528:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   4552c:	e0bffd03 	ldbu	r2,-12(fp)
   45530:	e0fffd03 	ldbu	r3,-12(fp)
   45534:	e13fff17 	ldw	r4,-4(fp)
   45538:	20c7883a 	add	r3,r4,r3
   4553c:	18c00204 	addi	r3,r3,8
   45540:	18c000c3 	ldbu	r3,3(r3)
   45544:	1809883a 	mov	r4,r3
   45548:	e0fffe17 	ldw	r3,-8(fp)
   4554c:	18c00d43 	ldbu	r3,53(r3)
   45550:	00c6303a 	nor	r3,zero,r3
   45554:	20c6703a 	and	r3,r4,r3
   45558:	1809883a 	mov	r4,r3
   4555c:	e0ffff17 	ldw	r3,-4(fp)
   45560:	1885883a 	add	r2,r3,r2
   45564:	10800204 	addi	r2,r2,8
   45568:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   4556c:	e0bffd03 	ldbu	r2,-12(fp)
   45570:	e0ffff17 	ldw	r3,-4(fp)
   45574:	1885883a 	add	r2,r3,r2
   45578:	10800204 	addi	r2,r2,8
   4557c:	108000c3 	ldbu	r2,3(r2)
   45580:	10803fcc 	andi	r2,r2,255
   45584:	10000a1e 	bne	r2,zero,455b0 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   45588:	e0bfff17 	ldw	r2,-4(fp)
   4558c:	10800283 	ldbu	r2,10(r2)
   45590:	1007883a 	mov	r3,r2
   45594:	e0bffe17 	ldw	r2,-8(fp)
   45598:	10800d83 	ldbu	r2,54(r2)
   4559c:	0084303a 	nor	r2,zero,r2
   455a0:	1884703a 	and	r2,r3,r2
   455a4:	1007883a 	mov	r3,r2
   455a8:	e0bfff17 	ldw	r2,-4(fp)
   455ac:	10c00285 	stb	r3,10(r2)
    }
}
   455b0:	e037883a 	mov	sp,fp
   455b4:	df000017 	ldw	fp,0(sp)
   455b8:	dec00104 	addi	sp,sp,4
   455bc:	f800283a 	ret

000455c0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   455c0:	defffa04 	addi	sp,sp,-24
   455c4:	df000515 	stw	fp,20(sp)
   455c8:	df000504 	addi	fp,sp,20
   455cc:	e13ffe15 	stw	r4,-8(fp)
   455d0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   455d4:	e0bffe17 	ldw	r2,-8(fp)
   455d8:	10800d03 	ldbu	r2,52(r2)
   455dc:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   455e0:	e0bffe17 	ldw	r2,-8(fp)
   455e4:	10800d83 	ldbu	r2,54(r2)
   455e8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   455ec:	e0bffe17 	ldw	r2,-8(fp)
   455f0:	10800d43 	ldbu	r2,53(r2)
   455f4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   455f8:	e0bfff17 	ldw	r2,-4(fp)
   455fc:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   45600:	e0bffb17 	ldw	r2,-20(fp)
   45604:	10800017 	ldw	r2,0(r2)
   45608:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   4560c:	00002506 	br	456a4 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   45610:	e0bffd03 	ldbu	r2,-12(fp)
   45614:	e0fffd03 	ldbu	r3,-12(fp)
   45618:	e13ffc17 	ldw	r4,-16(fp)
   4561c:	20c7883a 	add	r3,r4,r3
   45620:	18c00204 	addi	r3,r3,8
   45624:	18c000c3 	ldbu	r3,3(r3)
   45628:	1809883a 	mov	r4,r3
   4562c:	e0fffd83 	ldbu	r3,-10(fp)
   45630:	00c6303a 	nor	r3,zero,r3
   45634:	20c6703a 	and	r3,r4,r3
   45638:	1809883a 	mov	r4,r3
   4563c:	e0fffc17 	ldw	r3,-16(fp)
   45640:	1885883a 	add	r2,r3,r2
   45644:	10800204 	addi	r2,r2,8
   45648:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   4564c:	e0bffd03 	ldbu	r2,-12(fp)
   45650:	e0fffc17 	ldw	r3,-16(fp)
   45654:	1885883a 	add	r2,r3,r2
   45658:	10800204 	addi	r2,r2,8
   4565c:	108000c3 	ldbu	r2,3(r2)
   45660:	10803fcc 	andi	r2,r2,255
   45664:	1000091e 	bne	r2,zero,4568c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   45668:	e0bffc17 	ldw	r2,-16(fp)
   4566c:	10800283 	ldbu	r2,10(r2)
   45670:	1007883a 	mov	r3,r2
   45674:	e0bffd43 	ldbu	r2,-11(fp)
   45678:	0084303a 	nor	r2,zero,r2
   4567c:	1884703a 	and	r2,r3,r2
   45680:	1007883a 	mov	r3,r2
   45684:	e0bffc17 	ldw	r2,-16(fp)
   45688:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   4568c:	e0bffb17 	ldw	r2,-20(fp)
   45690:	10800104 	addi	r2,r2,4
   45694:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   45698:	e0bffb17 	ldw	r2,-20(fp)
   4569c:	10800017 	ldw	r2,0(r2)
   456a0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   456a4:	e0bffc17 	ldw	r2,-16(fp)
   456a8:	103fd91e 	bne	r2,zero,45610 <__alt_data_end+0xfffcfab0>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   456ac:	e037883a 	mov	sp,fp
   456b0:	df000017 	ldw	fp,0(sp)
   456b4:	dec00104 	addi	sp,sp,4
   456b8:	f800283a 	ret

000456bc <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   456bc:	defffc04 	addi	sp,sp,-16
   456c0:	df000315 	stw	fp,12(sp)
   456c4:	df000304 	addi	fp,sp,12
   456c8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   456cc:	e0bfff17 	ldw	r2,-4(fp)
   456d0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   456d4:	e0bfff17 	ldw	r2,-4(fp)
   456d8:	108002c4 	addi	r2,r2,11
   456dc:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   456e0:	e03ffe05 	stb	zero,-8(fp)
   456e4:	00000706 	br	45704 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   456e8:	e0bffd17 	ldw	r2,-12(fp)
   456ec:	10c00044 	addi	r3,r2,1
   456f0:	e0fffd15 	stw	r3,-12(fp)
   456f4:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   456f8:	e0bffe03 	ldbu	r2,-8(fp)
   456fc:	10800044 	addi	r2,r2,1
   45700:	e0bffe05 	stb	r2,-8(fp)
   45704:	e0bffe03 	ldbu	r2,-8(fp)
   45708:	108000f0 	cmpltui	r2,r2,3
   4570c:	103ff61e 	bne	r2,zero,456e8 <__alt_data_end+0xfffcfb88>
        *ptbl++ = 0;
    }
}
   45710:	e037883a 	mov	sp,fp
   45714:	df000017 	ldw	fp,0(sp)
   45718:	dec00104 	addi	sp,sp,4
   4571c:	f800283a 	ret

00045720 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   45720:	defffb04 	addi	sp,sp,-20
   45724:	dfc00415 	stw	ra,16(sp)
   45728:	df000315 	stw	fp,12(sp)
   4572c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   45730:	010001b4 	movhi	r4,6
   45734:	212b4904 	addi	r4,r4,-21212
   45738:	0142d004 	movi	r5,2880
   4573c:	0045a800 	call	45a80 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   45740:	008001b4 	movhi	r2,6
   45744:	10ab4904 	addi	r2,r2,-21212
   45748:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   4574c:	008001b4 	movhi	r2,6
   45750:	10ab5504 	addi	r2,r2,-21164
   45754:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   45758:	e03ffd0d 	sth	zero,-12(fp)
   4575c:	00001306 	br	457ac <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   45760:	e0bffe17 	ldw	r2,-8(fp)
   45764:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   45768:	e0bffe17 	ldw	r2,-8(fp)
   4576c:	e0ffff17 	ldw	r3,-4(fp)
   45770:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   45774:	e0bffe17 	ldw	r2,-8(fp)
   45778:	00c00fc4 	movi	r3,63
   4577c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   45780:	e0bffe17 	ldw	r2,-8(fp)
   45784:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   45788:	e0bffe17 	ldw	r2,-8(fp)
   4578c:	10800c04 	addi	r2,r2,48
   45790:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   45794:	e0bfff17 	ldw	r2,-4(fp)
   45798:	10800c04 	addi	r2,r2,48
   4579c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   457a0:	e0bffd0b 	ldhu	r2,-12(fp)
   457a4:	10800044 	addi	r2,r2,1
   457a8:	e0bffd0d 	sth	r2,-12(fp)
   457ac:	e0bffd0b 	ldhu	r2,-12(fp)
   457b0:	10800ef0 	cmpltui	r2,r2,59
   457b4:	103fea1e 	bne	r2,zero,45760 <__alt_data_end+0xfffcfc00>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   457b8:	e0bffe17 	ldw	r2,-8(fp)
   457bc:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   457c0:	e0bffe17 	ldw	r2,-8(fp)
   457c4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   457c8:	e0bffe17 	ldw	r2,-8(fp)
   457cc:	00c00fc4 	movi	r3,63
   457d0:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   457d4:	e0bffe17 	ldw	r2,-8(fp)
   457d8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   457dc:	008001b4 	movhi	r2,6
   457e0:	10ab4904 	addi	r2,r2,-21212
   457e4:	d0a73715 	stw	r2,-25380(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   457e8:	e037883a 	mov	sp,fp
   457ec:	dfc00117 	ldw	ra,4(sp)
   457f0:	df000017 	ldw	fp,0(sp)
   457f4:	dec00204 	addi	sp,sp,8
   457f8:	f800283a 	ret

000457fc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   457fc:	deffff04 	addi	sp,sp,-4
   45800:	df000015 	stw	fp,0(sp)
   45804:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   45808:	d0273a15 	stw	zero,-25368(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   4580c:	d0273805 	stb	zero,-25376(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   45810:	d0272a05 	stb	zero,-25432(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   45814:	d0273245 	stb	zero,-25399(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   45818:	d0272a45 	stb	zero,-25431(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   4581c:	d0272f15 	stw	zero,-25412(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   45820:	d0272b15 	stw	zero,-25428(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   45824:	d0273d15 	stw	zero,-25356(gp)
    OSIdleCtrMax  = 0L;
   45828:	d0273015 	stw	zero,-25408(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   4582c:	d0273c05 	stb	zero,-25360(gp)
#endif
}
   45830:	e037883a 	mov	sp,fp
   45834:	df000017 	ldw	fp,0(sp)
   45838:	dec00104 	addi	sp,sp,4
   4583c:	f800283a 	ret

00045840 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   45840:	defffd04 	addi	sp,sp,-12
   45844:	df000215 	stw	fp,8(sp)
   45848:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   4584c:	d0273605 	stb	zero,-25384(gp)
    prdytbl       = &OSRdyTbl[0];
   45850:	d0a73644 	addi	r2,gp,-25383
   45854:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   45858:	e03ffe05 	stb	zero,-8(fp)
   4585c:	00000706 	br	4587c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   45860:	e0bfff17 	ldw	r2,-4(fp)
   45864:	10c00044 	addi	r3,r2,1
   45868:	e0ffff15 	stw	r3,-4(fp)
   4586c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   45870:	e0bffe03 	ldbu	r2,-8(fp)
   45874:	10800044 	addi	r2,r2,1
   45878:	e0bffe05 	stb	r2,-8(fp)
   4587c:	e0bffe03 	ldbu	r2,-8(fp)
   45880:	108000f0 	cmpltui	r2,r2,3
   45884:	103ff61e 	bne	r2,zero,45860 <__alt_data_end+0xfffcfd00>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   45888:	d0272c45 	stb	zero,-25423(gp)
    OSPrioHighRdy = 0;
   4588c:	d0272c05 	stb	zero,-25424(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   45890:	d0273415 	stw	zero,-25392(gp)
    OSTCBCur      = (OS_TCB *)0;
   45894:	d0273915 	stw	zero,-25372(gp)
}
   45898:	e037883a 	mov	sp,fp
   4589c:	df000017 	ldw	fp,0(sp)
   458a0:	dec00104 	addi	sp,sp,4
   458a4:	f800283a 	ret

000458a8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   458a8:	defff804 	addi	sp,sp,-32
   458ac:	dfc00715 	stw	ra,28(sp)
   458b0:	df000615 	stw	fp,24(sp)
   458b4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   458b8:	00bfffd4 	movui	r2,65535
   458bc:	d8800015 	stw	r2,0(sp)
   458c0:	008001b4 	movhi	r2,6
   458c4:	10a94904 	addi	r2,r2,-23260
   458c8:	d8800115 	stw	r2,4(sp)
   458cc:	00808004 	movi	r2,512
   458d0:	d8800215 	stw	r2,8(sp)
   458d4:	d8000315 	stw	zero,12(sp)
   458d8:	008000c4 	movi	r2,3
   458dc:	d8800415 	stw	r2,16(sp)
   458e0:	01000134 	movhi	r4,4
   458e4:	21174e04 	addi	r4,r4,23864
   458e8:	000b883a 	mov	r5,zero
   458ec:	018001b4 	movhi	r6,6
   458f0:	31ab4804 	addi	r6,r6,-21216
   458f4:	01c00504 	movi	r7,20
   458f8:	004a7480 	call	4a748 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   458fc:	01000504 	movi	r4,20
   45900:	01400174 	movhi	r5,5
   45904:	297cc904 	addi	r5,r5,-3292
   45908:	e1bfff04 	addi	r6,fp,-4
   4590c:	004b0140 	call	4b014 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   45910:	e037883a 	mov	sp,fp
   45914:	dfc00117 	ldw	ra,4(sp)
   45918:	df000017 	ldw	fp,0(sp)
   4591c:	dec00204 	addi	sp,sp,8
   45920:	f800283a 	ret

00045924 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   45924:	defff804 	addi	sp,sp,-32
   45928:	dfc00715 	stw	ra,28(sp)
   4592c:	df000615 	stw	fp,24(sp)
   45930:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   45934:	00bfff94 	movui	r2,65534
   45938:	d8800015 	stw	r2,0(sp)
   4593c:	008001b4 	movhi	r2,6
   45940:	10a6d104 	addi	r2,r2,-25788
   45944:	d8800115 	stw	r2,4(sp)
   45948:	00808004 	movi	r2,512
   4594c:	d8800215 	stw	r2,8(sp)
   45950:	d8000315 	stw	zero,12(sp)
   45954:	008000c4 	movi	r2,3
   45958:	d8800415 	stw	r2,16(sp)
   4595c:	01000134 	movhi	r4,4
   45960:	21176504 	addi	r4,r4,23956
   45964:	000b883a 	mov	r5,zero
   45968:	018001b4 	movhi	r6,6
   4596c:	31a8d004 	addi	r6,r6,-23744
   45970:	01c004c4 	movi	r7,19
   45974:	004a7480 	call	4a748 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   45978:	010004c4 	movi	r4,19
   4597c:	01400174 	movhi	r5,5
   45980:	297ccd04 	addi	r5,r5,-3276
   45984:	e1bfff04 	addi	r6,fp,-4
   45988:	004b0140 	call	4b014 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   4598c:	e037883a 	mov	sp,fp
   45990:	dfc00117 	ldw	ra,4(sp)
   45994:	df000017 	ldw	fp,0(sp)
   45998:	dec00204 	addi	sp,sp,8
   4599c:	f800283a 	ret

000459a0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   459a0:	defffb04 	addi	sp,sp,-20
   459a4:	dfc00415 	stw	ra,16(sp)
   459a8:	df000315 	stw	fp,12(sp)
   459ac:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   459b0:	010001b4 	movhi	r4,6
   459b4:	212e1904 	addi	r4,r4,-18332
   459b8:	01414404 	movi	r5,1296
   459bc:	0045a800 	call	45a80 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   459c0:	010001b4 	movhi	r4,6
   459c4:	212f5d04 	addi	r4,r4,-17036
   459c8:	01401504 	movi	r5,84
   459cc:	0045a800 	call	45a80 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   459d0:	008001b4 	movhi	r2,6
   459d4:	10ae1904 	addi	r2,r2,-18332
   459d8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   459dc:	008001b4 	movhi	r2,6
   459e0:	10ae3404 	addi	r2,r2,-18224
   459e4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   459e8:	e03ffd05 	stb	zero,-12(fp)
   459ec:	00001106 	br	45a34 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   459f0:	e0bffe17 	ldw	r2,-8(fp)
   459f4:	e0ffff17 	ldw	r3,-4(fp)
   459f8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   459fc:	e0bffe17 	ldw	r2,-8(fp)
   45a00:	00c00fc4 	movi	r3,63
   45a04:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   45a08:	e0bffe17 	ldw	r2,-8(fp)
   45a0c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   45a10:	e0bffe17 	ldw	r2,-8(fp)
   45a14:	10801b04 	addi	r2,r2,108
   45a18:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   45a1c:	e0bfff17 	ldw	r2,-4(fp)
   45a20:	10801b04 	addi	r2,r2,108
   45a24:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   45a28:	e0bffd03 	ldbu	r2,-12(fp)
   45a2c:	10800044 	addi	r2,r2,1
   45a30:	e0bffd05 	stb	r2,-12(fp)
   45a34:	e0bffd03 	ldbu	r2,-12(fp)
   45a38:	108002f0 	cmpltui	r2,r2,11
   45a3c:	103fec1e 	bne	r2,zero,459f0 <__alt_data_end+0xfffcfe90>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   45a40:	e0bffe17 	ldw	r2,-8(fp)
   45a44:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   45a48:	e0bffe17 	ldw	r2,-8(fp)
   45a4c:	00c00fc4 	movi	r3,63
   45a50:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   45a54:	e0bffe17 	ldw	r2,-8(fp)
   45a58:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   45a5c:	d0272d15 	stw	zero,-25420(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   45a60:	008001b4 	movhi	r2,6
   45a64:	10ae1904 	addi	r2,r2,-18332
   45a68:	d0a73115 	stw	r2,-25404(gp)
}
   45a6c:	e037883a 	mov	sp,fp
   45a70:	dfc00117 	ldw	ra,4(sp)
   45a74:	df000017 	ldw	fp,0(sp)
   45a78:	dec00204 	addi	sp,sp,8
   45a7c:	f800283a 	ret

00045a80 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   45a80:	defffd04 	addi	sp,sp,-12
   45a84:	df000215 	stw	fp,8(sp)
   45a88:	df000204 	addi	fp,sp,8
   45a8c:	e13ffe15 	stw	r4,-8(fp)
   45a90:	2805883a 	mov	r2,r5
   45a94:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   45a98:	00000706 	br	45ab8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   45a9c:	e0bffe17 	ldw	r2,-8(fp)
   45aa0:	10c00044 	addi	r3,r2,1
   45aa4:	e0fffe15 	stw	r3,-8(fp)
   45aa8:	10000005 	stb	zero,0(r2)
        size--;
   45aac:	e0bfff0b 	ldhu	r2,-4(fp)
   45ab0:	10bfffc4 	addi	r2,r2,-1
   45ab4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   45ab8:	e0bfff0b 	ldhu	r2,-4(fp)
   45abc:	103ff71e 	bne	r2,zero,45a9c <__alt_data_end+0xfffcff3c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   45ac0:	e037883a 	mov	sp,fp
   45ac4:	df000017 	ldw	fp,0(sp)
   45ac8:	dec00104 	addi	sp,sp,4
   45acc:	f800283a 	ret

00045ad0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   45ad0:	defffc04 	addi	sp,sp,-16
   45ad4:	df000315 	stw	fp,12(sp)
   45ad8:	df000304 	addi	fp,sp,12
   45adc:	e13ffd15 	stw	r4,-12(fp)
   45ae0:	e17ffe15 	stw	r5,-8(fp)
   45ae4:	3005883a 	mov	r2,r6
   45ae8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   45aec:	00000b06 	br	45b1c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   45af0:	e0bffd17 	ldw	r2,-12(fp)
   45af4:	10c00044 	addi	r3,r2,1
   45af8:	e0fffd15 	stw	r3,-12(fp)
   45afc:	e0fffe17 	ldw	r3,-8(fp)
   45b00:	19000044 	addi	r4,r3,1
   45b04:	e13ffe15 	stw	r4,-8(fp)
   45b08:	18c00003 	ldbu	r3,0(r3)
   45b0c:	10c00005 	stb	r3,0(r2)
        size--;
   45b10:	e0bfff0b 	ldhu	r2,-4(fp)
   45b14:	10bfffc4 	addi	r2,r2,-1
   45b18:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   45b1c:	e0bfff0b 	ldhu	r2,-4(fp)
   45b20:	103ff31e 	bne	r2,zero,45af0 <__alt_data_end+0xfffcff90>
        *pdest++ = *psrc++;
        size--;
    }
}
   45b24:	e037883a 	mov	sp,fp
   45b28:	df000017 	ldw	fp,0(sp)
   45b2c:	dec00104 	addi	sp,sp,4
   45b30:	f800283a 	ret

00045b34 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   45b34:	defffb04 	addi	sp,sp,-20
   45b38:	dfc00415 	stw	ra,16(sp)
   45b3c:	df000315 	stw	fp,12(sp)
   45b40:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   45b44:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45b48:	0005303a 	rdctl	r2,status
   45b4c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45b50:	e0fffe17 	ldw	r3,-8(fp)
   45b54:	00bfff84 	movi	r2,-2
   45b58:	1884703a 	and	r2,r3,r2
   45b5c:	1001703a 	wrctl	status,r2
  
  return context;
   45b60:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   45b64:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   45b68:	d0a73803 	ldbu	r2,-25376(gp)
   45b6c:	10803fcc 	andi	r2,r2,255
   45b70:	10001a1e 	bne	r2,zero,45bdc <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   45b74:	d0a72a03 	ldbu	r2,-25432(gp)
   45b78:	10803fcc 	andi	r2,r2,255
   45b7c:	1000171e 	bne	r2,zero,45bdc <OS_Sched+0xa8>
            OS_SchedNew();
   45b80:	0045c000 	call	45c00 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   45b84:	d0e72c03 	ldbu	r3,-25424(gp)
   45b88:	d0a72c43 	ldbu	r2,-25423(gp)
   45b8c:	18c03fcc 	andi	r3,r3,255
   45b90:	10803fcc 	andi	r2,r2,255
   45b94:	18801126 	beq	r3,r2,45bdc <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   45b98:	d0a72c03 	ldbu	r2,-25424(gp)
   45b9c:	10c03fcc 	andi	r3,r2,255
   45ba0:	008001b4 	movhi	r2,6
   45ba4:	10af5d04 	addi	r2,r2,-17036
   45ba8:	18c7883a 	add	r3,r3,r3
   45bac:	18c7883a 	add	r3,r3,r3
   45bb0:	10c5883a 	add	r2,r2,r3
   45bb4:	10800017 	ldw	r2,0(r2)
   45bb8:	d0a73415 	stw	r2,-25392(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   45bbc:	d0a73417 	ldw	r2,-25392(gp)
   45bc0:	10c00e17 	ldw	r3,56(r2)
   45bc4:	18c00044 	addi	r3,r3,1
   45bc8:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   45bcc:	d0a72f17 	ldw	r2,-25412(gp)
   45bd0:	10800044 	addi	r2,r2,1
   45bd4:	d0a72f15 	stw	r2,-25412(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   45bd8:	004e4f00 	call	4e4f0 <OSCtxSw>
   45bdc:	e0bffd17 	ldw	r2,-12(fp)
   45be0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45be4:	e0bfff17 	ldw	r2,-4(fp)
   45be8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   45bec:	e037883a 	mov	sp,fp
   45bf0:	dfc00117 	ldw	ra,4(sp)
   45bf4:	df000017 	ldw	fp,0(sp)
   45bf8:	dec00204 	addi	sp,sp,8
   45bfc:	f800283a 	ret

00045c00 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   45c00:	defffe04 	addi	sp,sp,-8
   45c04:	df000115 	stw	fp,4(sp)
   45c08:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   45c0c:	d0a73603 	ldbu	r2,-25384(gp)
   45c10:	10c03fcc 	andi	r3,r2,255
   45c14:	00800174 	movhi	r2,5
   45c18:	10bc8904 	addi	r2,r2,-3548
   45c1c:	10c5883a 	add	r2,r2,r3
   45c20:	10800003 	ldbu	r2,0(r2)
   45c24:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   45c28:	e0bfff03 	ldbu	r2,-4(fp)
   45c2c:	100490fa 	slli	r2,r2,3
   45c30:	1009883a 	mov	r4,r2
   45c34:	e0ffff03 	ldbu	r3,-4(fp)
   45c38:	d0a73644 	addi	r2,gp,-25383
   45c3c:	1885883a 	add	r2,r3,r2
   45c40:	10800003 	ldbu	r2,0(r2)
   45c44:	10c03fcc 	andi	r3,r2,255
   45c48:	00800174 	movhi	r2,5
   45c4c:	10bc8904 	addi	r2,r2,-3548
   45c50:	10c5883a 	add	r2,r2,r3
   45c54:	10800003 	ldbu	r2,0(r2)
   45c58:	2085883a 	add	r2,r4,r2
   45c5c:	d0a72c05 	stb	r2,-25424(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   45c60:	e037883a 	mov	sp,fp
   45c64:	df000017 	ldw	fp,0(sp)
   45c68:	dec00104 	addi	sp,sp,4
   45c6c:	f800283a 	ret

00045c70 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   45c70:	defffc04 	addi	sp,sp,-16
   45c74:	df000315 	stw	fp,12(sp)
   45c78:	df000304 	addi	fp,sp,12
   45c7c:	e13ffe15 	stw	r4,-8(fp)
   45c80:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   45c84:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   45c88:	00000b06 	br	45cb8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   45c8c:	e0bffe17 	ldw	r2,-8(fp)
   45c90:	10c00044 	addi	r3,r2,1
   45c94:	e0fffe15 	stw	r3,-8(fp)
   45c98:	e0ffff17 	ldw	r3,-4(fp)
   45c9c:	19000044 	addi	r4,r3,1
   45ca0:	e13fff15 	stw	r4,-4(fp)
   45ca4:	18c00003 	ldbu	r3,0(r3)
   45ca8:	10c00005 	stb	r3,0(r2)
        len++;
   45cac:	e0bffd03 	ldbu	r2,-12(fp)
   45cb0:	10800044 	addi	r2,r2,1
   45cb4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   45cb8:	e0bfff17 	ldw	r2,-4(fp)
   45cbc:	10800003 	ldbu	r2,0(r2)
   45cc0:	10803fcc 	andi	r2,r2,255
   45cc4:	103ff11e 	bne	r2,zero,45c8c <__alt_data_end+0xfffd012c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   45cc8:	e0bffe17 	ldw	r2,-8(fp)
   45ccc:	10000005 	stb	zero,0(r2)
    return (len);
   45cd0:	e0bffd03 	ldbu	r2,-12(fp)
}
   45cd4:	e037883a 	mov	sp,fp
   45cd8:	df000017 	ldw	fp,0(sp)
   45cdc:	dec00104 	addi	sp,sp,4
   45ce0:	f800283a 	ret

00045ce4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   45ce4:	defffd04 	addi	sp,sp,-12
   45ce8:	df000215 	stw	fp,8(sp)
   45cec:	df000204 	addi	fp,sp,8
   45cf0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   45cf4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   45cf8:	00000606 	br	45d14 <OS_StrLen+0x30>
        psrc++;
   45cfc:	e0bfff17 	ldw	r2,-4(fp)
   45d00:	10800044 	addi	r2,r2,1
   45d04:	e0bfff15 	stw	r2,-4(fp)
        len++;
   45d08:	e0bffe03 	ldbu	r2,-8(fp)
   45d0c:	10800044 	addi	r2,r2,1
   45d10:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   45d14:	e0bfff17 	ldw	r2,-4(fp)
   45d18:	10800003 	ldbu	r2,0(r2)
   45d1c:	10803fcc 	andi	r2,r2,255
   45d20:	103ff61e 	bne	r2,zero,45cfc <__alt_data_end+0xfffd019c>
        psrc++;
        len++;
    }
    return (len);
   45d24:	e0bffe03 	ldbu	r2,-8(fp)
}
   45d28:	e037883a 	mov	sp,fp
   45d2c:	df000017 	ldw	fp,0(sp)
   45d30:	dec00104 	addi	sp,sp,4
   45d34:	f800283a 	ret

00045d38 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   45d38:	defffa04 	addi	sp,sp,-24
   45d3c:	dfc00515 	stw	ra,20(sp)
   45d40:	df000415 	stw	fp,16(sp)
   45d44:	df000404 	addi	fp,sp,16
   45d48:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   45d4c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45d50:	0005303a 	rdctl	r2,status
   45d54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45d58:	e0fffd17 	ldw	r3,-12(fp)
   45d5c:	00bfff84 	movi	r2,-2
   45d60:	1884703a 	and	r2,r3,r2
   45d64:	1001703a 	wrctl	status,r2
  
  return context;
   45d68:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   45d6c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   45d70:	d0a72b17 	ldw	r2,-25428(gp)
   45d74:	10800044 	addi	r2,r2,1
   45d78:	d0a72b15 	stw	r2,-25428(gp)
   45d7c:	e0bffc17 	ldw	r2,-16(fp)
   45d80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45d84:	e0bffe17 	ldw	r2,-8(fp)
   45d88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   45d8c:	004e9800 	call	4e980 <OSTaskIdleHook>
    }
   45d90:	003fef06 	br	45d50 <__alt_data_end+0xfffd01f0>

00045d94 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   45d94:	defffa04 	addi	sp,sp,-24
   45d98:	dfc00515 	stw	ra,20(sp)
   45d9c:	df000415 	stw	fp,16(sp)
   45da0:	df000404 	addi	fp,sp,16
   45da4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   45da8:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   45dac:	00000206 	br	45db8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   45db0:	01003204 	movi	r4,200
   45db4:	004b9400 	call	4b940 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   45db8:	d0a73c03 	ldbu	r2,-25360(gp)
   45dbc:	10803fcc 	andi	r2,r2,255
   45dc0:	103ffb26 	beq	r2,zero,45db0 <__alt_data_end+0xfffd0250>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   45dc4:	d0a73017 	ldw	r2,-25408(gp)
   45dc8:	1009883a 	mov	r4,r2
   45dcc:	01401904 	movi	r5,100
   45dd0:	004f19c0 	call	4f19c <__udivsi3>
   45dd4:	d0a73015 	stw	r2,-25408(gp)
    if (OSIdleCtrMax == 0L) {
   45dd8:	d0a73017 	ldw	r2,-25408(gp)
   45ddc:	1000031e 	bne	r2,zero,45dec <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   45de0:	d0273205 	stb	zero,-25400(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   45de4:	01003fc4 	movi	r4,255
   45de8:	004b5940 	call	4b594 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45dec:	0005303a 	rdctl	r2,status
   45df0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45df4:	e0fffd17 	ldw	r3,-12(fp)
   45df8:	00bfff84 	movi	r2,-2
   45dfc:	1884703a 	and	r2,r3,r2
   45e00:	1001703a 	wrctl	status,r2
  
  return context;
   45e04:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   45e08:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   45e0c:	d0a72b17 	ldw	r2,-25428(gp)
   45e10:	d0a73d15 	stw	r2,-25356(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   45e14:	d0272b15 	stw	zero,-25428(gp)
   45e18:	e0bffc17 	ldw	r2,-16(fp)
   45e1c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45e20:	e0bffe17 	ldw	r2,-8(fp)
   45e24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   45e28:	d0e73d17 	ldw	r3,-25356(gp)
   45e2c:	d0a73017 	ldw	r2,-25408(gp)
   45e30:	1809883a 	mov	r4,r3
   45e34:	100b883a 	mov	r5,r2
   45e38:	004f19c0 	call	4f19c <__udivsi3>
   45e3c:	1007883a 	mov	r3,r2
   45e40:	00801904 	movi	r2,100
   45e44:	10c5c83a 	sub	r2,r2,r3
   45e48:	d0a73205 	stb	r2,-25400(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   45e4c:	004e9100 	call	4e910 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   45e50:	0045e600 	call	45e60 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   45e54:	01001904 	movi	r4,100
   45e58:	004b9400 	call	4b940 <OSTimeDly>
    }
   45e5c:	003fe306 	br	45dec <__alt_data_end+0xfffd028c>

00045e60 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   45e60:	defffa04 	addi	sp,sp,-24
   45e64:	dfc00515 	stw	ra,20(sp)
   45e68:	df000415 	stw	fp,16(sp)
   45e6c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   45e70:	e03ffc05 	stb	zero,-16(fp)
   45e74:	00002406 	br	45f08 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   45e78:	e0fffc03 	ldbu	r3,-16(fp)
   45e7c:	e0bffe04 	addi	r2,fp,-8
   45e80:	1809883a 	mov	r4,r3
   45e84:	100b883a 	mov	r5,r2
   45e88:	004b3cc0 	call	4b3cc <OSTaskStkChk>
   45e8c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   45e90:	e0bffc43 	ldbu	r2,-15(fp)
   45e94:	1000191e 	bne	r2,zero,45efc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   45e98:	e0fffc03 	ldbu	r3,-16(fp)
   45e9c:	008001b4 	movhi	r2,6
   45ea0:	10af5d04 	addi	r2,r2,-17036
   45ea4:	18c7883a 	add	r3,r3,r3
   45ea8:	18c7883a 	add	r3,r3,r3
   45eac:	10c5883a 	add	r2,r2,r3
   45eb0:	10800017 	ldw	r2,0(r2)
   45eb4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   45eb8:	e0bffd17 	ldw	r2,-12(fp)
   45ebc:	10000f26 	beq	r2,zero,45efc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   45ec0:	e0bffd17 	ldw	r2,-12(fp)
   45ec4:	10800060 	cmpeqi	r2,r2,1
   45ec8:	10000c1e 	bne	r2,zero,45efc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   45ecc:	e0bffd17 	ldw	r2,-12(fp)
   45ed0:	10c00217 	ldw	r3,8(r2)
   45ed4:	e0bffd17 	ldw	r2,-12(fp)
   45ed8:	10800317 	ldw	r2,12(r2)
   45edc:	1085883a 	add	r2,r2,r2
   45ee0:	1085883a 	add	r2,r2,r2
   45ee4:	1887883a 	add	r3,r3,r2
   45ee8:	e0bffd17 	ldw	r2,-12(fp)
   45eec:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   45ef0:	e0ffff17 	ldw	r3,-4(fp)
   45ef4:	e0bffd17 	ldw	r2,-12(fp)
   45ef8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   45efc:	e0bffc03 	ldbu	r2,-16(fp)
   45f00:	10800044 	addi	r2,r2,1
   45f04:	e0bffc05 	stb	r2,-16(fp)
   45f08:	e0bffc03 	ldbu	r2,-16(fp)
   45f0c:	10800570 	cmpltui	r2,r2,21
   45f10:	103fd91e 	bne	r2,zero,45e78 <__alt_data_end+0xfffd0318>
#endif
                }
            }
        }
    }
}
   45f14:	e037883a 	mov	sp,fp
   45f18:	dfc00117 	ldw	ra,4(sp)
   45f1c:	df000017 	ldw	fp,0(sp)
   45f20:	dec00204 	addi	sp,sp,8
   45f24:	f800283a 	ret

00045f28 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   45f28:	defff204 	addi	sp,sp,-56
   45f2c:	dfc00d15 	stw	ra,52(sp)
   45f30:	df000c15 	stw	fp,48(sp)
   45f34:	df000c04 	addi	fp,sp,48
   45f38:	e17ffc15 	stw	r5,-16(fp)
   45f3c:	e1bffd15 	stw	r6,-12(fp)
   45f40:	3807883a 	mov	r3,r7
   45f44:	e0800417 	ldw	r2,16(fp)
   45f48:	e13ffb05 	stb	r4,-20(fp)
   45f4c:	e0fffe0d 	sth	r3,-8(fp)
   45f50:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   45f54:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45f58:	0005303a 	rdctl	r2,status
   45f5c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45f60:	e0fff617 	ldw	r3,-40(fp)
   45f64:	00bfff84 	movi	r2,-2
   45f68:	1884703a 	and	r2,r3,r2
   45f6c:	1001703a 	wrctl	status,r2
  
  return context;
   45f70:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   45f74:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   45f78:	d0a73117 	ldw	r2,-25404(gp)
   45f7c:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   45f80:	e0bff517 	ldw	r2,-44(fp)
   45f84:	10009326 	beq	r2,zero,461d4 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   45f88:	e0bff517 	ldw	r2,-44(fp)
   45f8c:	10800517 	ldw	r2,20(r2)
   45f90:	d0a73115 	stw	r2,-25404(gp)
   45f94:	e0bff417 	ldw	r2,-48(fp)
   45f98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45f9c:	e0bff717 	ldw	r2,-36(fp)
   45fa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   45fa4:	e0bff517 	ldw	r2,-44(fp)
   45fa8:	e0fffc17 	ldw	r3,-16(fp)
   45fac:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   45fb0:	e0bff517 	ldw	r2,-44(fp)
   45fb4:	e0fffb03 	ldbu	r3,-20(fp)
   45fb8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   45fbc:	e0bff517 	ldw	r2,-44(fp)
   45fc0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   45fc4:	e0bff517 	ldw	r2,-44(fp)
   45fc8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   45fcc:	e0bff517 	ldw	r2,-44(fp)
   45fd0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   45fd4:	e0bff517 	ldw	r2,-44(fp)
   45fd8:	e0c00317 	ldw	r3,12(fp)
   45fdc:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   45fe0:	e0bff517 	ldw	r2,-44(fp)
   45fe4:	e0c00217 	ldw	r3,8(fp)
   45fe8:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   45fec:	e0bff517 	ldw	r2,-44(fp)
   45ff0:	e0fffd17 	ldw	r3,-12(fp)
   45ff4:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   45ff8:	e0bff517 	ldw	r2,-44(fp)
   45ffc:	e0ffff0b 	ldhu	r3,-4(fp)
   46000:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   46004:	e0bff517 	ldw	r2,-44(fp)
   46008:	e0fffe0b 	ldhu	r3,-8(fp)
   4600c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   46010:	e0bff517 	ldw	r2,-44(fp)
   46014:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   46018:	e0bffb03 	ldbu	r2,-20(fp)
   4601c:	1004d0fa 	srli	r2,r2,3
   46020:	1007883a 	mov	r3,r2
   46024:	e0bff517 	ldw	r2,-44(fp)
   46028:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   4602c:	e0bffb03 	ldbu	r2,-20(fp)
   46030:	108001cc 	andi	r2,r2,7
   46034:	1007883a 	mov	r3,r2
   46038:	e0bff517 	ldw	r2,-44(fp)
   4603c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   46040:	e0bff517 	ldw	r2,-44(fp)
   46044:	10800d03 	ldbu	r2,52(r2)
   46048:	10803fcc 	andi	r2,r2,255
   4604c:	00c00044 	movi	r3,1
   46050:	1884983a 	sll	r2,r3,r2
   46054:	1007883a 	mov	r3,r2
   46058:	e0bff517 	ldw	r2,-44(fp)
   4605c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   46060:	e0bff517 	ldw	r2,-44(fp)
   46064:	10800cc3 	ldbu	r2,51(r2)
   46068:	10803fcc 	andi	r2,r2,255
   4606c:	00c00044 	movi	r3,1
   46070:	1884983a 	sll	r2,r3,r2
   46074:	1007883a 	mov	r3,r2
   46078:	e0bff517 	ldw	r2,-44(fp)
   4607c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   46080:	e0bff517 	ldw	r2,-44(fp)
   46084:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   46088:	e0bff517 	ldw	r2,-44(fp)
   4608c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   46090:	e0bff517 	ldw	r2,-44(fp)
   46094:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   46098:	e0bff517 	ldw	r2,-44(fp)
   4609c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   460a0:	e0bff517 	ldw	r2,-44(fp)
   460a4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   460a8:	e0bff517 	ldw	r2,-44(fp)
   460ac:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   460b0:	e0bff517 	ldw	r2,-44(fp)
   460b4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   460b8:	e0bff517 	ldw	r2,-44(fp)
   460bc:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   460c0:	e0bff517 	ldw	r2,-44(fp)
   460c4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   460c8:	e0bff517 	ldw	r2,-44(fp)
   460cc:	00c00fc4 	movi	r3,63
   460d0:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   460d4:	e0bff517 	ldw	r2,-44(fp)
   460d8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   460dc:	e13ff517 	ldw	r4,-44(fp)
   460e0:	004e99c0 	call	4e99c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   460e4:	e13ff517 	ldw	r4,-44(fp)
   460e8:	004e8b40 	call	4e8b4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   460ec:	0005303a 	rdctl	r2,status
   460f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   460f4:	e0fff817 	ldw	r3,-32(fp)
   460f8:	00bfff84 	movi	r2,-2
   460fc:	1884703a 	and	r2,r3,r2
   46100:	1001703a 	wrctl	status,r2
  
  return context;
   46104:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   46108:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   4610c:	e0fffb03 	ldbu	r3,-20(fp)
   46110:	008001b4 	movhi	r2,6
   46114:	10af5d04 	addi	r2,r2,-17036
   46118:	18c7883a 	add	r3,r3,r3
   4611c:	18c7883a 	add	r3,r3,r3
   46120:	10c5883a 	add	r2,r2,r3
   46124:	e0fff517 	ldw	r3,-44(fp)
   46128:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   4612c:	d0e72d17 	ldw	r3,-25420(gp)
   46130:	e0bff517 	ldw	r2,-44(fp)
   46134:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   46138:	e0bff517 	ldw	r2,-44(fp)
   4613c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   46140:	d0a72d17 	ldw	r2,-25420(gp)
   46144:	10000326 	beq	r2,zero,46154 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   46148:	d0a72d17 	ldw	r2,-25420(gp)
   4614c:	e0fff517 	ldw	r3,-44(fp)
   46150:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   46154:	e0bff517 	ldw	r2,-44(fp)
   46158:	d0a72d15 	stw	r2,-25420(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   4615c:	e0bff517 	ldw	r2,-44(fp)
   46160:	10c00d83 	ldbu	r3,54(r2)
   46164:	d0a73603 	ldbu	r2,-25384(gp)
   46168:	1884b03a 	or	r2,r3,r2
   4616c:	d0a73605 	stb	r2,-25384(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   46170:	e0bff517 	ldw	r2,-44(fp)
   46174:	10800d03 	ldbu	r2,52(r2)
   46178:	10c03fcc 	andi	r3,r2,255
   4617c:	e0bff517 	ldw	r2,-44(fp)
   46180:	10800d03 	ldbu	r2,52(r2)
   46184:	11003fcc 	andi	r4,r2,255
   46188:	d0a73644 	addi	r2,gp,-25383
   4618c:	2085883a 	add	r2,r4,r2
   46190:	11000003 	ldbu	r4,0(r2)
   46194:	e0bff517 	ldw	r2,-44(fp)
   46198:	10800d43 	ldbu	r2,53(r2)
   4619c:	2084b03a 	or	r2,r4,r2
   461a0:	1009883a 	mov	r4,r2
   461a4:	d0a73644 	addi	r2,gp,-25383
   461a8:	1885883a 	add	r2,r3,r2
   461ac:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   461b0:	d0a73243 	ldbu	r2,-25399(gp)
   461b4:	10800044 	addi	r2,r2,1
   461b8:	d0a73245 	stb	r2,-25399(gp)
   461bc:	e0bff417 	ldw	r2,-48(fp)
   461c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   461c4:	e0bff917 	ldw	r2,-28(fp)
   461c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   461cc:	0005883a 	mov	r2,zero
   461d0:	00000506 	br	461e8 <OS_TCBInit+0x2c0>
   461d4:	e0bff417 	ldw	r2,-48(fp)
   461d8:	e0bffa15 	stw	r2,-24(fp)
   461dc:	e0bffa17 	ldw	r2,-24(fp)
   461e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   461e4:	00801084 	movi	r2,66
}
   461e8:	e037883a 	mov	sp,fp
   461ec:	dfc00117 	ldw	ra,4(sp)
   461f0:	df000017 	ldw	fp,0(sp)
   461f4:	dec00204 	addi	sp,sp,8
   461f8:	f800283a 	ret

000461fc <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   461fc:	defffe04 	addi	sp,sp,-8
   46200:	df000115 	stw	fp,4(sp)
   46204:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   46208:	d0a00d04 	addi	r2,gp,-32716
   4620c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   46210:	d0a00e04 	addi	r2,gp,-32712
   46214:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   46218:	d0a00f84 	addi	r2,gp,-32706
   4621c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   46220:	d0a01004 	addi	r2,gp,-32704
   46224:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   46228:	d0a00f04 	addi	r2,gp,-32708
   4622c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   46230:	d0a01084 	addi	r2,gp,-32702
   46234:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   46238:	d0a01104 	addi	r2,gp,-32700
   4623c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   46240:	d0a01184 	addi	r2,gp,-32698
   46244:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   46248:	d0a01204 	addi	r2,gp,-32696
   4624c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   46250:	d0a01284 	addi	r2,gp,-32694
   46254:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   46258:	d0a01304 	addi	r2,gp,-32692
   4625c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   46260:	d0a01384 	addi	r2,gp,-32690
   46264:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   46268:	d0a01404 	addi	r2,gp,-32688
   4626c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   46270:	d0a01484 	addi	r2,gp,-32686
   46274:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   46278:	d0a01504 	addi	r2,gp,-32684
   4627c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   46280:	d0a01584 	addi	r2,gp,-32682
   46284:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   46288:	d0a01604 	addi	r2,gp,-32680
   4628c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   46290:	d0a01684 	addi	r2,gp,-32678
   46294:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   46298:	d0a01704 	addi	r2,gp,-32676
   4629c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   462a0:	d0a01784 	addi	r2,gp,-32674
   462a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   462a8:	d0a01804 	addi	r2,gp,-32672
   462ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   462b0:	d0a01884 	addi	r2,gp,-32670
   462b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   462b8:	d0a01904 	addi	r2,gp,-32668
   462bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   462c0:	d0a01984 	addi	r2,gp,-32666
   462c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   462c8:	d0a01a04 	addi	r2,gp,-32664
   462cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   462d0:	d0a01a84 	addi	r2,gp,-32662
   462d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   462d8:	d0a01b04 	addi	r2,gp,-32660
   462dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   462e0:	d0a01b84 	addi	r2,gp,-32658
   462e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   462e8:	d0a01c04 	addi	r2,gp,-32656
   462ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   462f0:	d0a01c84 	addi	r2,gp,-32654
   462f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   462f8:	d0a01d04 	addi	r2,gp,-32652
   462fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   46300:	d0a01d84 	addi	r2,gp,-32650
   46304:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   46308:	d0a01e04 	addi	r2,gp,-32648
   4630c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   46310:	d0a01e84 	addi	r2,gp,-32646
   46314:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   46318:	d0a01f04 	addi	r2,gp,-32644
   4631c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   46320:	d0a01f84 	addi	r2,gp,-32642
   46324:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   46328:	d0a02004 	addi	r2,gp,-32640
   4632c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   46330:	d0a02084 	addi	r2,gp,-32638
   46334:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   46338:	d0a02104 	addi	r2,gp,-32636
   4633c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   46340:	d0a02184 	addi	r2,gp,-32634
   46344:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   46348:	d0a02204 	addi	r2,gp,-32632
   4634c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   46350:	d0a02284 	addi	r2,gp,-32630
   46354:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   46358:	d0a02304 	addi	r2,gp,-32628
   4635c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   46360:	d0a02384 	addi	r2,gp,-32626
   46364:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   46368:	d0a02404 	addi	r2,gp,-32624
   4636c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   46370:	d0a02904 	addi	r2,gp,-32604
   46374:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   46378:	e037883a 	mov	sp,fp
   4637c:	df000017 	ldw	fp,0(sp)
   46380:	dec00104 	addi	sp,sp,4
   46384:	f800283a 	ret

00046388 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   46388:	defff204 	addi	sp,sp,-56
   4638c:	df000d15 	stw	fp,52(sp)
   46390:	df000d04 	addi	fp,sp,52
   46394:	e13ffc15 	stw	r4,-16(fp)
   46398:	2807883a 	mov	r3,r5
   4639c:	3005883a 	mov	r2,r6
   463a0:	e1ffff15 	stw	r7,-4(fp)
   463a4:	e0fffd0d 	sth	r3,-12(fp)
   463a8:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   463ac:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   463b0:	e0bfff17 	ldw	r2,-4(fp)
   463b4:	1000021e 	bne	r2,zero,463c0 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   463b8:	0005883a 	mov	r2,zero
   463bc:	0000b006 	br	46680 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   463c0:	e0bffc17 	ldw	r2,-16(fp)
   463c4:	1000051e 	bne	r2,zero,463dc <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   463c8:	e0bfff17 	ldw	r2,-4(fp)
   463cc:	00c01b84 	movi	r3,110
   463d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   463d4:	0005883a 	mov	r2,zero
   463d8:	0000a906 	br	46680 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   463dc:	e0bffc17 	ldw	r2,-16(fp)
   463e0:	10800003 	ldbu	r2,0(r2)
   463e4:	10803fcc 	andi	r2,r2,255
   463e8:	10800160 	cmpeqi	r2,r2,5
   463ec:	1000051e 	bne	r2,zero,46404 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   463f0:	e0bfff17 	ldw	r2,-4(fp)
   463f4:	00c00044 	movi	r3,1
   463f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   463fc:	0005883a 	mov	r2,zero
   46400:	00009f06 	br	46680 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   46404:	e0fffe03 	ldbu	r3,-8(fp)
   46408:	00bfe004 	movi	r2,-128
   4640c:	1884703a 	and	r2,r3,r2
   46410:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   46414:	e0bff503 	ldbu	r2,-44(fp)
   46418:	10000626 	beq	r2,zero,46434 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   4641c:	e0bffe03 	ldbu	r2,-8(fp)
   46420:	10801fcc 	andi	r2,r2,127
   46424:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   46428:	00800044 	movi	r2,1
   4642c:	e0bff385 	stb	r2,-50(fp)
   46430:	00000106 	br	46438 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   46434:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   46438:	e0bfff17 	ldw	r2,-4(fp)
   4643c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46440:	0005303a 	rdctl	r2,status
   46444:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46448:	e0fff617 	ldw	r3,-40(fp)
   4644c:	00bfff84 	movi	r2,-2
   46450:	1884703a 	and	r2,r3,r2
   46454:	1001703a 	wrctl	status,r2
  
  return context;
   46458:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   4645c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   46460:	e0bffe03 	ldbu	r2,-8(fp)
   46464:	10c00060 	cmpeqi	r3,r2,1
   46468:	18005f1e 	bne	r3,zero,465e8 <OSFlagAccept+0x260>
   4646c:	10c00088 	cmpgei	r3,r2,2
   46470:	1800021e 	bne	r3,zero,4647c <OSFlagAccept+0xf4>
   46474:	10003f26 	beq	r2,zero,46574 <OSFlagAccept+0x1ec>
   46478:	00007706 	br	46658 <OSFlagAccept+0x2d0>
   4647c:	10c000a0 	cmpeqi	r3,r2,2
   46480:	1800031e 	bne	r3,zero,46490 <OSFlagAccept+0x108>
   46484:	108000e0 	cmpeqi	r2,r2,3
   46488:	10001e1e 	bne	r2,zero,46504 <OSFlagAccept+0x17c>
   4648c:	00007206 	br	46658 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   46490:	e0bffc17 	ldw	r2,-16(fp)
   46494:	10c0020b 	ldhu	r3,8(r2)
   46498:	e0bffd0b 	ldhu	r2,-12(fp)
   4649c:	1884703a 	and	r2,r3,r2
   464a0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   464a4:	e0fff30b 	ldhu	r3,-52(fp)
   464a8:	e0bffd0b 	ldhu	r2,-12(fp)
   464ac:	18800d1e 	bne	r3,r2,464e4 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   464b0:	e0bff383 	ldbu	r2,-50(fp)
   464b4:	10800058 	cmpnei	r2,r2,1
   464b8:	10000d1e 	bne	r2,zero,464f0 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   464bc:	e0bffc17 	ldw	r2,-16(fp)
   464c0:	1080020b 	ldhu	r2,8(r2)
   464c4:	1007883a 	mov	r3,r2
   464c8:	e0bff30b 	ldhu	r2,-52(fp)
   464cc:	0084303a 	nor	r2,zero,r2
   464d0:	1884703a 	and	r2,r3,r2
   464d4:	1007883a 	mov	r3,r2
   464d8:	e0bffc17 	ldw	r2,-16(fp)
   464dc:	10c0020d 	sth	r3,8(r2)
   464e0:	00000306 	br	464f0 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   464e4:	e0bfff17 	ldw	r2,-4(fp)
   464e8:	00c01c04 	movi	r3,112
   464ec:	10c00005 	stb	r3,0(r2)
   464f0:	e0bff417 	ldw	r2,-48(fp)
   464f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   464f8:	e0bff717 	ldw	r2,-36(fp)
   464fc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   46500:	00005e06 	br	4667c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   46504:	e0bffc17 	ldw	r2,-16(fp)
   46508:	10c0020b 	ldhu	r3,8(r2)
   4650c:	e0bffd0b 	ldhu	r2,-12(fp)
   46510:	1884703a 	and	r2,r3,r2
   46514:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   46518:	e0bff30b 	ldhu	r2,-52(fp)
   4651c:	10000d26 	beq	r2,zero,46554 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   46520:	e0bff383 	ldbu	r2,-50(fp)
   46524:	10800058 	cmpnei	r2,r2,1
   46528:	10000d1e 	bne	r2,zero,46560 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   4652c:	e0bffc17 	ldw	r2,-16(fp)
   46530:	1080020b 	ldhu	r2,8(r2)
   46534:	1007883a 	mov	r3,r2
   46538:	e0bff30b 	ldhu	r2,-52(fp)
   4653c:	0084303a 	nor	r2,zero,r2
   46540:	1884703a 	and	r2,r3,r2
   46544:	1007883a 	mov	r3,r2
   46548:	e0bffc17 	ldw	r2,-16(fp)
   4654c:	10c0020d 	sth	r3,8(r2)
   46550:	00000306 	br	46560 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   46554:	e0bfff17 	ldw	r2,-4(fp)
   46558:	00c01c04 	movi	r3,112
   4655c:	10c00005 	stb	r3,0(r2)
   46560:	e0bff417 	ldw	r2,-48(fp)
   46564:	e0bff815 	stw	r2,-32(fp)
   46568:	e0bff817 	ldw	r2,-32(fp)
   4656c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   46570:	00004206 	br	4667c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   46574:	e0bffc17 	ldw	r2,-16(fp)
   46578:	1080020b 	ldhu	r2,8(r2)
   4657c:	0084303a 	nor	r2,zero,r2
   46580:	1007883a 	mov	r3,r2
   46584:	e0bffd0b 	ldhu	r2,-12(fp)
   46588:	1884703a 	and	r2,r3,r2
   4658c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   46590:	e0fff30b 	ldhu	r3,-52(fp)
   46594:	e0bffd0b 	ldhu	r2,-12(fp)
   46598:	18800b1e 	bne	r3,r2,465c8 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   4659c:	e0bff383 	ldbu	r2,-50(fp)
   465a0:	10800058 	cmpnei	r2,r2,1
   465a4:	10000b1e 	bne	r2,zero,465d4 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   465a8:	e0bffc17 	ldw	r2,-16(fp)
   465ac:	10c0020b 	ldhu	r3,8(r2)
   465b0:	e0bff30b 	ldhu	r2,-52(fp)
   465b4:	1884b03a 	or	r2,r3,r2
   465b8:	1007883a 	mov	r3,r2
   465bc:	e0bffc17 	ldw	r2,-16(fp)
   465c0:	10c0020d 	sth	r3,8(r2)
   465c4:	00000306 	br	465d4 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   465c8:	e0bfff17 	ldw	r2,-4(fp)
   465cc:	00c01c04 	movi	r3,112
   465d0:	10c00005 	stb	r3,0(r2)
   465d4:	e0bff417 	ldw	r2,-48(fp)
   465d8:	e0bff915 	stw	r2,-28(fp)
   465dc:	e0bff917 	ldw	r2,-28(fp)
   465e0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   465e4:	00002506 	br	4667c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   465e8:	e0bffc17 	ldw	r2,-16(fp)
   465ec:	1080020b 	ldhu	r2,8(r2)
   465f0:	0084303a 	nor	r2,zero,r2
   465f4:	1007883a 	mov	r3,r2
   465f8:	e0bffd0b 	ldhu	r2,-12(fp)
   465fc:	1884703a 	and	r2,r3,r2
   46600:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   46604:	e0bff30b 	ldhu	r2,-52(fp)
   46608:	10000b26 	beq	r2,zero,46638 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   4660c:	e0bff383 	ldbu	r2,-50(fp)
   46610:	10800058 	cmpnei	r2,r2,1
   46614:	10000b1e 	bne	r2,zero,46644 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   46618:	e0bffc17 	ldw	r2,-16(fp)
   4661c:	10c0020b 	ldhu	r3,8(r2)
   46620:	e0bff30b 	ldhu	r2,-52(fp)
   46624:	1884b03a 	or	r2,r3,r2
   46628:	1007883a 	mov	r3,r2
   4662c:	e0bffc17 	ldw	r2,-16(fp)
   46630:	10c0020d 	sth	r3,8(r2)
   46634:	00000306 	br	46644 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   46638:	e0bfff17 	ldw	r2,-4(fp)
   4663c:	00c01c04 	movi	r3,112
   46640:	10c00005 	stb	r3,0(r2)
   46644:	e0bff417 	ldw	r2,-48(fp)
   46648:	e0bffa15 	stw	r2,-24(fp)
   4664c:	e0bffa17 	ldw	r2,-24(fp)
   46650:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   46654:	00000906 	br	4667c <OSFlagAccept+0x2f4>
   46658:	e0bff417 	ldw	r2,-48(fp)
   4665c:	e0bffb15 	stw	r2,-20(fp)
   46660:	e0bffb17 	ldw	r2,-20(fp)
   46664:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   46668:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   4666c:	e0bfff17 	ldw	r2,-4(fp)
   46670:	00c01bc4 	movi	r3,111
   46674:	10c00005 	stb	r3,0(r2)
             break;
   46678:	0001883a 	nop
    }
    return (flags_rdy);
   4667c:	e0bff30b 	ldhu	r2,-52(fp)
}
   46680:	e037883a 	mov	sp,fp
   46684:	df000017 	ldw	fp,0(sp)
   46688:	dec00104 	addi	sp,sp,4
   4668c:	f800283a 	ret

00046690 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   46690:	defff804 	addi	sp,sp,-32
   46694:	df000715 	stw	fp,28(sp)
   46698:	df000704 	addi	fp,sp,28
   4669c:	2005883a 	mov	r2,r4
   466a0:	e17fff15 	stw	r5,-4(fp)
   466a4:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   466a8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   466ac:	e0bfff17 	ldw	r2,-4(fp)
   466b0:	1000021e 	bne	r2,zero,466bc <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   466b4:	0005883a 	mov	r2,zero
   466b8:	00003b06 	br	467a8 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   466bc:	00800174 	movhi	r2,5
   466c0:	108ad504 	addi	r2,r2,11092
   466c4:	10800003 	ldbu	r2,0(r2)
   466c8:	10803fcc 	andi	r2,r2,255
   466cc:	10000526 	beq	r2,zero,466e4 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   466d0:	e0bfff17 	ldw	r2,-4(fp)
   466d4:	00c00404 	movi	r3,16
   466d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   466dc:	0005883a 	mov	r2,zero
   466e0:	00003106 	br	467a8 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   466e4:	0005303a 	rdctl	r2,status
   466e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   466ec:	e0fffb17 	ldw	r3,-20(fp)
   466f0:	00bfff84 	movi	r2,-2
   466f4:	1884703a 	and	r2,r3,r2
   466f8:	1001703a 	wrctl	status,r2
  
  return context;
   466fc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   46700:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   46704:	00800174 	movhi	r2,5
   46708:	108ad804 	addi	r2,r2,11104
   4670c:	10800017 	ldw	r2,0(r2)
   46710:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   46714:	e0bffa17 	ldw	r2,-24(fp)
   46718:	10001b26 	beq	r2,zero,46788 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   4671c:	00800174 	movhi	r2,5
   46720:	108ad804 	addi	r2,r2,11104
   46724:	10800017 	ldw	r2,0(r2)
   46728:	10c00117 	ldw	r3,4(r2)
   4672c:	00800174 	movhi	r2,5
   46730:	108ad804 	addi	r2,r2,11104
   46734:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   46738:	e0bffa17 	ldw	r2,-24(fp)
   4673c:	00c00144 	movi	r3,5
   46740:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   46744:	e0bffa17 	ldw	r2,-24(fp)
   46748:	e0fffe0b 	ldhu	r3,-8(fp)
   4674c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   46750:	e0bffa17 	ldw	r2,-24(fp)
   46754:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   46758:	e0bffa17 	ldw	r2,-24(fp)
   4675c:	00c00fc4 	movi	r3,63
   46760:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   46764:	e0bffa17 	ldw	r2,-24(fp)
   46768:	100002c5 	stb	zero,11(r2)
   4676c:	e0bff917 	ldw	r2,-28(fp)
   46770:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   46774:	e0bffc17 	ldw	r2,-16(fp)
   46778:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   4677c:	e0bfff17 	ldw	r2,-4(fp)
   46780:	10000005 	stb	zero,0(r2)
   46784:	00000706 	br	467a4 <OSFlagCreate+0x114>
   46788:	e0bff917 	ldw	r2,-28(fp)
   4678c:	e0bffd15 	stw	r2,-12(fp)
   46790:	e0bffd17 	ldw	r2,-12(fp)
   46794:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   46798:	e0bfff17 	ldw	r2,-4(fp)
   4679c:	00c01c84 	movi	r3,114
   467a0:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   467a4:	e0bffa17 	ldw	r2,-24(fp)
}
   467a8:	e037883a 	mov	sp,fp
   467ac:	df000017 	ldw	fp,0(sp)
   467b0:	dec00104 	addi	sp,sp,4
   467b4:	f800283a 	ret

000467b8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   467b8:	defff204 	addi	sp,sp,-56
   467bc:	dfc00d15 	stw	ra,52(sp)
   467c0:	df000c15 	stw	fp,48(sp)
   467c4:	df000c04 	addi	fp,sp,48
   467c8:	e13ffd15 	stw	r4,-12(fp)
   467cc:	2805883a 	mov	r2,r5
   467d0:	e1bfff15 	stw	r6,-4(fp)
   467d4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   467d8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   467dc:	e0bfff17 	ldw	r2,-4(fp)
   467e0:	1000021e 	bne	r2,zero,467ec <OSFlagDel+0x34>
        return (pgrp);
   467e4:	e0bffd17 	ldw	r2,-12(fp)
   467e8:	00008a06 	br	46a14 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   467ec:	e0bffd17 	ldw	r2,-12(fp)
   467f0:	1000051e 	bne	r2,zero,46808 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   467f4:	e0bfff17 	ldw	r2,-4(fp)
   467f8:	00c01b84 	movi	r3,110
   467fc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   46800:	e0bffd17 	ldw	r2,-12(fp)
   46804:	00008306 	br	46a14 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   46808:	00800174 	movhi	r2,5
   4680c:	108ad504 	addi	r2,r2,11092
   46810:	10800003 	ldbu	r2,0(r2)
   46814:	10803fcc 	andi	r2,r2,255
   46818:	10000526 	beq	r2,zero,46830 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   4681c:	e0bfff17 	ldw	r2,-4(fp)
   46820:	00c003c4 	movi	r3,15
   46824:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   46828:	e0bffd17 	ldw	r2,-12(fp)
   4682c:	00007906 	br	46a14 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   46830:	e0bffd17 	ldw	r2,-12(fp)
   46834:	10800003 	ldbu	r2,0(r2)
   46838:	10803fcc 	andi	r2,r2,255
   4683c:	10800160 	cmpeqi	r2,r2,5
   46840:	1000051e 	bne	r2,zero,46858 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   46844:	e0bfff17 	ldw	r2,-4(fp)
   46848:	00c00044 	movi	r3,1
   4684c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   46850:	e0bffd17 	ldw	r2,-12(fp)
   46854:	00006f06 	br	46a14 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46858:	0005303a 	rdctl	r2,status
   4685c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46860:	e0fff817 	ldw	r3,-32(fp)
   46864:	00bfff84 	movi	r2,-2
   46868:	1884703a 	and	r2,r3,r2
   4686c:	1001703a 	wrctl	status,r2
  
  return context;
   46870:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   46874:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   46878:	e0bffd17 	ldw	r2,-12(fp)
   4687c:	10800117 	ldw	r2,4(r2)
   46880:	10000326 	beq	r2,zero,46890 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   46884:	00800044 	movi	r2,1
   46888:	e0bff405 	stb	r2,-48(fp)
   4688c:	00000106 	br	46894 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   46890:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   46894:	e0bffe03 	ldbu	r2,-8(fp)
   46898:	10000326 	beq	r2,zero,468a8 <OSFlagDel+0xf0>
   4689c:	10800060 	cmpeqi	r2,r2,1
   468a0:	1000271e 	bne	r2,zero,46940 <OSFlagDel+0x188>
   468a4:	00005006 	br	469e8 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   468a8:	e0bff403 	ldbu	r2,-48(fp)
   468ac:	10001a1e 	bne	r2,zero,46918 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   468b0:	e0bffd17 	ldw	r2,-12(fp)
   468b4:	00c00fc4 	movi	r3,63
   468b8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   468bc:	e0bffd17 	ldw	r2,-12(fp)
   468c0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   468c4:	e0bffd17 	ldw	r2,-12(fp)
   468c8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   468cc:	00800174 	movhi	r2,5
   468d0:	108ad804 	addi	r2,r2,11104
   468d4:	10c00017 	ldw	r3,0(r2)
   468d8:	e0bffd17 	ldw	r2,-12(fp)
   468dc:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   468e0:	e0bffd17 	ldw	r2,-12(fp)
   468e4:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   468e8:	00800174 	movhi	r2,5
   468ec:	108ad804 	addi	r2,r2,11104
   468f0:	e0fffd17 	ldw	r3,-12(fp)
   468f4:	10c00015 	stw	r3,0(r2)
   468f8:	e0bff717 	ldw	r2,-36(fp)
   468fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   46900:	e0bff917 	ldw	r2,-28(fp)
   46904:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   46908:	e0bfff17 	ldw	r2,-4(fp)
   4690c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   46910:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   46914:	00003e06 	br	46a10 <OSFlagDel+0x258>
   46918:	e0bff717 	ldw	r2,-36(fp)
   4691c:	e0bffa15 	stw	r2,-24(fp)
   46920:	e0bffa17 	ldw	r2,-24(fp)
   46924:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   46928:	e0bfff17 	ldw	r2,-4(fp)
   4692c:	00c01244 	movi	r3,73
   46930:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   46934:	e0bffd17 	ldw	r2,-12(fp)
   46938:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   4693c:	00003406 	br	46a10 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   46940:	e0bffd17 	ldw	r2,-12(fp)
   46944:	10800117 	ldw	r2,4(r2)
   46948:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   4694c:	00000606 	br	46968 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   46950:	e13ff517 	ldw	r4,-44(fp)
   46954:	000b883a 	mov	r5,zero
   46958:	00479f40 	call	479f4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   4695c:	e0bff517 	ldw	r2,-44(fp)
   46960:	10800017 	ldw	r2,0(r2)
   46964:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   46968:	e0bff517 	ldw	r2,-44(fp)
   4696c:	103ff81e 	bne	r2,zero,46950 <__alt_data_end+0xfffd0df0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   46970:	e0bffd17 	ldw	r2,-12(fp)
   46974:	00c00fc4 	movi	r3,63
   46978:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   4697c:	e0bffd17 	ldw	r2,-12(fp)
   46980:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   46984:	e0bffd17 	ldw	r2,-12(fp)
   46988:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   4698c:	00800174 	movhi	r2,5
   46990:	108ad804 	addi	r2,r2,11104
   46994:	10c00017 	ldw	r3,0(r2)
   46998:	e0bffd17 	ldw	r2,-12(fp)
   4699c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   469a0:	e0bffd17 	ldw	r2,-12(fp)
   469a4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   469a8:	00800174 	movhi	r2,5
   469ac:	108ad804 	addi	r2,r2,11104
   469b0:	e0fffd17 	ldw	r3,-12(fp)
   469b4:	10c00015 	stw	r3,0(r2)
   469b8:	e0bff717 	ldw	r2,-36(fp)
   469bc:	e0bffb15 	stw	r2,-20(fp)
   469c0:	e0bffb17 	ldw	r2,-20(fp)
   469c4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   469c8:	e0bff403 	ldbu	r2,-48(fp)
   469cc:	10800058 	cmpnei	r2,r2,1
   469d0:	1000011e 	bne	r2,zero,469d8 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   469d4:	0045b340 	call	45b34 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   469d8:	e0bfff17 	ldw	r2,-4(fp)
   469dc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   469e0:	e03ff615 	stw	zero,-40(fp)
             break;
   469e4:	00000a06 	br	46a10 <OSFlagDel+0x258>
   469e8:	e0bff717 	ldw	r2,-36(fp)
   469ec:	e0bffc15 	stw	r2,-16(fp)
   469f0:	e0bffc17 	ldw	r2,-16(fp)
   469f4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   469f8:	e0bfff17 	ldw	r2,-4(fp)
   469fc:	00c001c4 	movi	r3,7
   46a00:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   46a04:	e0bffd17 	ldw	r2,-12(fp)
   46a08:	e0bff615 	stw	r2,-40(fp)
             break;
   46a0c:	0001883a 	nop
    }
    return (pgrp_return);
   46a10:	e0bff617 	ldw	r2,-40(fp)
}
   46a14:	e037883a 	mov	sp,fp
   46a18:	dfc00117 	ldw	ra,4(sp)
   46a1c:	df000017 	ldw	fp,0(sp)
   46a20:	dec00204 	addi	sp,sp,8
   46a24:	f800283a 	ret

00046a28 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   46a28:	defff604 	addi	sp,sp,-40
   46a2c:	dfc00915 	stw	ra,36(sp)
   46a30:	df000815 	stw	fp,32(sp)
   46a34:	df000804 	addi	fp,sp,32
   46a38:	e13ffd15 	stw	r4,-12(fp)
   46a3c:	e17ffe15 	stw	r5,-8(fp)
   46a40:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   46a44:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   46a48:	e0bfff17 	ldw	r2,-4(fp)
   46a4c:	1000021e 	bne	r2,zero,46a58 <OSFlagNameGet+0x30>
        return (0);
   46a50:	0005883a 	mov	r2,zero
   46a54:	00003b06 	br	46b44 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   46a58:	e0bffd17 	ldw	r2,-12(fp)
   46a5c:	1000051e 	bne	r2,zero,46a74 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   46a60:	e0bfff17 	ldw	r2,-4(fp)
   46a64:	00c01b84 	movi	r3,110
   46a68:	10c00005 	stb	r3,0(r2)
        return (0);
   46a6c:	0005883a 	mov	r2,zero
   46a70:	00003406 	br	46b44 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   46a74:	e0bffe17 	ldw	r2,-8(fp)
   46a78:	1000051e 	bne	r2,zero,46a90 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   46a7c:	e0bfff17 	ldw	r2,-4(fp)
   46a80:	00c00304 	movi	r3,12
   46a84:	10c00005 	stb	r3,0(r2)
        return (0);
   46a88:	0005883a 	mov	r2,zero
   46a8c:	00002d06 	br	46b44 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   46a90:	00800174 	movhi	r2,5
   46a94:	108ad504 	addi	r2,r2,11092
   46a98:	10800003 	ldbu	r2,0(r2)
   46a9c:	10803fcc 	andi	r2,r2,255
   46aa0:	10000526 	beq	r2,zero,46ab8 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   46aa4:	e0bfff17 	ldw	r2,-4(fp)
   46aa8:	00c00444 	movi	r3,17
   46aac:	10c00005 	stb	r3,0(r2)
        return (0);
   46ab0:	0005883a 	mov	r2,zero
   46ab4:	00002306 	br	46b44 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46ab8:	0005303a 	rdctl	r2,status
   46abc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46ac0:	e0fffa17 	ldw	r3,-24(fp)
   46ac4:	00bfff84 	movi	r2,-2
   46ac8:	1884703a 	and	r2,r3,r2
   46acc:	1001703a 	wrctl	status,r2
  
  return context;
   46ad0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   46ad4:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   46ad8:	e0bffd17 	ldw	r2,-12(fp)
   46adc:	10800003 	ldbu	r2,0(r2)
   46ae0:	10803fcc 	andi	r2,r2,255
   46ae4:	10800160 	cmpeqi	r2,r2,5
   46ae8:	1000091e 	bne	r2,zero,46b10 <OSFlagNameGet+0xe8>
   46aec:	e0bff817 	ldw	r2,-32(fp)
   46af0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   46af4:	e0bffb17 	ldw	r2,-20(fp)
   46af8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   46afc:	e0bfff17 	ldw	r2,-4(fp)
   46b00:	00c00044 	movi	r3,1
   46b04:	10c00005 	stb	r3,0(r2)
        return (0);
   46b08:	0005883a 	mov	r2,zero
   46b0c:	00000d06 	br	46b44 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   46b10:	e0bffd17 	ldw	r2,-12(fp)
   46b14:	10800284 	addi	r2,r2,10
   46b18:	e13ffe17 	ldw	r4,-8(fp)
   46b1c:	100b883a 	mov	r5,r2
   46b20:	0045c700 	call	45c70 <OS_StrCopy>
   46b24:	e0bff905 	stb	r2,-28(fp)
   46b28:	e0bff817 	ldw	r2,-32(fp)
   46b2c:	e0bffc15 	stw	r2,-16(fp)
   46b30:	e0bffc17 	ldw	r2,-16(fp)
   46b34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   46b38:	e0bfff17 	ldw	r2,-4(fp)
   46b3c:	10000005 	stb	zero,0(r2)
    return (len);
   46b40:	e0bff903 	ldbu	r2,-28(fp)
}
   46b44:	e037883a 	mov	sp,fp
   46b48:	dfc00117 	ldw	ra,4(sp)
   46b4c:	df000017 	ldw	fp,0(sp)
   46b50:	dec00204 	addi	sp,sp,8
   46b54:	f800283a 	ret

00046b58 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   46b58:	defff504 	addi	sp,sp,-44
   46b5c:	dfc00a15 	stw	ra,40(sp)
   46b60:	df000915 	stw	fp,36(sp)
   46b64:	df000904 	addi	fp,sp,36
   46b68:	e13ffd15 	stw	r4,-12(fp)
   46b6c:	e17ffe15 	stw	r5,-8(fp)
   46b70:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   46b74:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   46b78:	e0bfff17 	ldw	r2,-4(fp)
   46b7c:	1000011e 	bne	r2,zero,46b84 <OSFlagNameSet+0x2c>
        return;
   46b80:	00004406 	br	46c94 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   46b84:	e0bffd17 	ldw	r2,-12(fp)
   46b88:	1000041e 	bne	r2,zero,46b9c <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   46b8c:	e0bfff17 	ldw	r2,-4(fp)
   46b90:	00c01b84 	movi	r3,110
   46b94:	10c00005 	stb	r3,0(r2)
        return;
   46b98:	00003e06 	br	46c94 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   46b9c:	e0bffe17 	ldw	r2,-8(fp)
   46ba0:	1000041e 	bne	r2,zero,46bb4 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   46ba4:	e0bfff17 	ldw	r2,-4(fp)
   46ba8:	00c00304 	movi	r3,12
   46bac:	10c00005 	stb	r3,0(r2)
        return;
   46bb0:	00003806 	br	46c94 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   46bb4:	00800174 	movhi	r2,5
   46bb8:	108ad504 	addi	r2,r2,11092
   46bbc:	10800003 	ldbu	r2,0(r2)
   46bc0:	10803fcc 	andi	r2,r2,255
   46bc4:	10000426 	beq	r2,zero,46bd8 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   46bc8:	e0bfff17 	ldw	r2,-4(fp)
   46bcc:	00c00484 	movi	r3,18
   46bd0:	10c00005 	stb	r3,0(r2)
        return;
   46bd4:	00002f06 	br	46c94 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46bd8:	0005303a 	rdctl	r2,status
   46bdc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46be0:	e0fff917 	ldw	r3,-28(fp)
   46be4:	00bfff84 	movi	r2,-2
   46be8:	1884703a 	and	r2,r3,r2
   46bec:	1001703a 	wrctl	status,r2
  
  return context;
   46bf0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   46bf4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   46bf8:	e0bffd17 	ldw	r2,-12(fp)
   46bfc:	10800003 	ldbu	r2,0(r2)
   46c00:	10803fcc 	andi	r2,r2,255
   46c04:	10800160 	cmpeqi	r2,r2,5
   46c08:	1000081e 	bne	r2,zero,46c2c <OSFlagNameSet+0xd4>
   46c0c:	e0bff717 	ldw	r2,-36(fp)
   46c10:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   46c14:	e0bffa17 	ldw	r2,-24(fp)
   46c18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   46c1c:	e0bfff17 	ldw	r2,-4(fp)
   46c20:	00c00044 	movi	r3,1
   46c24:	10c00005 	stb	r3,0(r2)
        return;
   46c28:	00001a06 	br	46c94 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   46c2c:	e13ffe17 	ldw	r4,-8(fp)
   46c30:	0045ce40 	call	45ce4 <OS_StrLen>
   46c34:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   46c38:	e0bff803 	ldbu	r2,-32(fp)
   46c3c:	10800830 	cmpltui	r2,r2,32
   46c40:	1000081e 	bne	r2,zero,46c64 <OSFlagNameSet+0x10c>
   46c44:	e0bff717 	ldw	r2,-36(fp)
   46c48:	e0bffb15 	stw	r2,-20(fp)
   46c4c:	e0bffb17 	ldw	r2,-20(fp)
   46c50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   46c54:	e0bfff17 	ldw	r2,-4(fp)
   46c58:	00c01cc4 	movi	r3,115
   46c5c:	10c00005 	stb	r3,0(r2)
        return;
   46c60:	00000c06 	br	46c94 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   46c64:	e0bffd17 	ldw	r2,-12(fp)
   46c68:	10800284 	addi	r2,r2,10
   46c6c:	1009883a 	mov	r4,r2
   46c70:	e17ffe17 	ldw	r5,-8(fp)
   46c74:	0045c700 	call	45c70 <OS_StrCopy>
   46c78:	e0bff717 	ldw	r2,-36(fp)
   46c7c:	e0bffc15 	stw	r2,-16(fp)
   46c80:	e0bffc17 	ldw	r2,-16(fp)
   46c84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   46c88:	e0bfff17 	ldw	r2,-4(fp)
   46c8c:	10000005 	stb	zero,0(r2)
    return;
   46c90:	0001883a 	nop
}
   46c94:	e037883a 	mov	sp,fp
   46c98:	dfc00117 	ldw	ra,4(sp)
   46c9c:	df000017 	ldw	fp,0(sp)
   46ca0:	dec00204 	addi	sp,sp,8
   46ca4:	f800283a 	ret

00046ca8 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   46ca8:	deffe204 	addi	sp,sp,-120
   46cac:	dfc01d15 	stw	ra,116(sp)
   46cb0:	df001c15 	stw	fp,112(sp)
   46cb4:	df001c04 	addi	fp,sp,112
   46cb8:	e13ffc15 	stw	r4,-16(fp)
   46cbc:	2809883a 	mov	r4,r5
   46cc0:	3007883a 	mov	r3,r6
   46cc4:	3805883a 	mov	r2,r7
   46cc8:	e13ffd0d 	sth	r4,-12(fp)
   46ccc:	e0fffe05 	stb	r3,-8(fp)
   46cd0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   46cd4:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   46cd8:	e0800217 	ldw	r2,8(fp)
   46cdc:	1000021e 	bne	r2,zero,46ce8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   46ce0:	0005883a 	mov	r2,zero
   46ce4:	00016706 	br	47284 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   46ce8:	e0bffc17 	ldw	r2,-16(fp)
   46cec:	1000051e 	bne	r2,zero,46d04 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   46cf0:	e0800217 	ldw	r2,8(fp)
   46cf4:	00c01b84 	movi	r3,110
   46cf8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   46cfc:	0005883a 	mov	r2,zero
   46d00:	00016006 	br	47284 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   46d04:	00800174 	movhi	r2,5
   46d08:	108ad504 	addi	r2,r2,11092
   46d0c:	10800003 	ldbu	r2,0(r2)
   46d10:	10803fcc 	andi	r2,r2,255
   46d14:	10000526 	beq	r2,zero,46d2c <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   46d18:	e0800217 	ldw	r2,8(fp)
   46d1c:	00c00084 	movi	r3,2
   46d20:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   46d24:	0005883a 	mov	r2,zero
   46d28:	00015606 	br	47284 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   46d2c:	00800174 	movhi	r2,5
   46d30:	108ac704 	addi	r2,r2,11036
   46d34:	10800003 	ldbu	r2,0(r2)
   46d38:	10803fcc 	andi	r2,r2,255
   46d3c:	10000526 	beq	r2,zero,46d54 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   46d40:	e0800217 	ldw	r2,8(fp)
   46d44:	00c00344 	movi	r3,13
   46d48:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   46d4c:	0005883a 	mov	r2,zero
   46d50:	00014c06 	br	47284 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   46d54:	e0bffc17 	ldw	r2,-16(fp)
   46d58:	10800003 	ldbu	r2,0(r2)
   46d5c:	10803fcc 	andi	r2,r2,255
   46d60:	10800160 	cmpeqi	r2,r2,5
   46d64:	1000051e 	bne	r2,zero,46d7c <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   46d68:	e0800217 	ldw	r2,8(fp)
   46d6c:	00c00044 	movi	r3,1
   46d70:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   46d74:	0005883a 	mov	r2,zero
   46d78:	00014206 	br	47284 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   46d7c:	e0fffe03 	ldbu	r3,-8(fp)
   46d80:	00bfe004 	movi	r2,-128
   46d84:	1884703a 	and	r2,r3,r2
   46d88:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   46d8c:	e0bfe703 	ldbu	r2,-100(fp)
   46d90:	10000626 	beq	r2,zero,46dac <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   46d94:	e0bffe03 	ldbu	r2,-8(fp)
   46d98:	10801fcc 	andi	r2,r2,127
   46d9c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   46da0:	00800044 	movi	r2,1
   46da4:	e0bfe505 	stb	r2,-108(fp)
   46da8:	00000106 	br	46db0 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   46dac:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46db0:	0005303a 	rdctl	r2,status
   46db4:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46db8:	e0ffe917 	ldw	r3,-92(fp)
   46dbc:	00bfff84 	movi	r2,-2
   46dc0:	1884703a 	and	r2,r3,r2
   46dc4:	1001703a 	wrctl	status,r2
  
  return context;
   46dc8:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   46dcc:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   46dd0:	e0bffe03 	ldbu	r2,-8(fp)
   46dd4:	10c00060 	cmpeqi	r3,r2,1
   46dd8:	1800921e 	bne	r3,zero,47024 <OSFlagPend+0x37c>
   46ddc:	10c00088 	cmpgei	r3,r2,2
   46de0:	1800021e 	bne	r3,zero,46dec <OSFlagPend+0x144>
   46de4:	10006126 	beq	r2,zero,46f6c <OSFlagPend+0x2c4>
   46de8:	0000bb06 	br	470d8 <OSFlagPend+0x430>
   46dec:	10c000a0 	cmpeqi	r3,r2,2
   46df0:	1800031e 	bne	r3,zero,46e00 <OSFlagPend+0x158>
   46df4:	108000e0 	cmpeqi	r2,r2,3
   46df8:	10002f1e 	bne	r2,zero,46eb8 <OSFlagPend+0x210>
   46dfc:	0000b606 	br	470d8 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   46e00:	e0bffc17 	ldw	r2,-16(fp)
   46e04:	10c0020b 	ldhu	r3,8(r2)
   46e08:	e0bffd0b 	ldhu	r2,-12(fp)
   46e0c:	1884703a 	and	r2,r3,r2
   46e10:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   46e14:	e0ffe78b 	ldhu	r3,-98(fp)
   46e18:	e0bffd0b 	ldhu	r2,-12(fp)
   46e1c:	1880191e 	bne	r3,r2,46e84 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   46e20:	e0bfe503 	ldbu	r2,-108(fp)
   46e24:	10800058 	cmpnei	r2,r2,1
   46e28:	1000091e 	bne	r2,zero,46e50 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   46e2c:	e0bffc17 	ldw	r2,-16(fp)
   46e30:	1080020b 	ldhu	r2,8(r2)
   46e34:	1007883a 	mov	r3,r2
   46e38:	e0bfe78b 	ldhu	r2,-98(fp)
   46e3c:	0084303a 	nor	r2,zero,r2
   46e40:	1884703a 	and	r2,r3,r2
   46e44:	1007883a 	mov	r3,r2
   46e48:	e0bffc17 	ldw	r2,-16(fp)
   46e4c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   46e50:	00800174 	movhi	r2,5
   46e54:	108ad604 	addi	r2,r2,11096
   46e58:	10800017 	ldw	r2,0(r2)
   46e5c:	e0ffe78b 	ldhu	r3,-98(fp)
   46e60:	10c00b0d 	sth	r3,44(r2)
   46e64:	e0bfe617 	ldw	r2,-104(fp)
   46e68:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   46e6c:	e0bfea17 	ldw	r2,-88(fp)
   46e70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   46e74:	e0800217 	ldw	r2,8(fp)
   46e78:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   46e7c:	e0bfe78b 	ldhu	r2,-98(fp)
   46e80:	00010006 	br	47284 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   46e84:	e1bffd0b 	ldhu	r6,-12(fp)
   46e88:	e0fffe03 	ldbu	r3,-8(fp)
   46e8c:	e0bfff0b 	ldhu	r2,-4(fp)
   46e90:	e17ff704 	addi	r5,fp,-36
   46e94:	d8800015 	stw	r2,0(sp)
   46e98:	e13ffc17 	ldw	r4,-16(fp)
   46e9c:	180f883a 	mov	r7,r3
   46ea0:	004774c0 	call	4774c <OS_FlagBlock>
   46ea4:	e0bfe617 	ldw	r2,-104(fp)
   46ea8:	e0bfeb15 	stw	r2,-84(fp)
   46eac:	e0bfeb17 	ldw	r2,-84(fp)
   46eb0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   46eb4:	00009206 	br	47100 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   46eb8:	e0bffc17 	ldw	r2,-16(fp)
   46ebc:	10c0020b 	ldhu	r3,8(r2)
   46ec0:	e0bffd0b 	ldhu	r2,-12(fp)
   46ec4:	1884703a 	and	r2,r3,r2
   46ec8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   46ecc:	e0bfe78b 	ldhu	r2,-98(fp)
   46ed0:	10001926 	beq	r2,zero,46f38 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   46ed4:	e0bfe503 	ldbu	r2,-108(fp)
   46ed8:	10800058 	cmpnei	r2,r2,1
   46edc:	1000091e 	bne	r2,zero,46f04 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   46ee0:	e0bffc17 	ldw	r2,-16(fp)
   46ee4:	1080020b 	ldhu	r2,8(r2)
   46ee8:	1007883a 	mov	r3,r2
   46eec:	e0bfe78b 	ldhu	r2,-98(fp)
   46ef0:	0084303a 	nor	r2,zero,r2
   46ef4:	1884703a 	and	r2,r3,r2
   46ef8:	1007883a 	mov	r3,r2
   46efc:	e0bffc17 	ldw	r2,-16(fp)
   46f00:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   46f04:	00800174 	movhi	r2,5
   46f08:	108ad604 	addi	r2,r2,11096
   46f0c:	10800017 	ldw	r2,0(r2)
   46f10:	e0ffe78b 	ldhu	r3,-98(fp)
   46f14:	10c00b0d 	sth	r3,44(r2)
   46f18:	e0bfe617 	ldw	r2,-104(fp)
   46f1c:	e0bfec15 	stw	r2,-80(fp)
   46f20:	e0bfec17 	ldw	r2,-80(fp)
   46f24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   46f28:	e0800217 	ldw	r2,8(fp)
   46f2c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   46f30:	e0bfe78b 	ldhu	r2,-98(fp)
   46f34:	0000d306 	br	47284 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   46f38:	e1bffd0b 	ldhu	r6,-12(fp)
   46f3c:	e0fffe03 	ldbu	r3,-8(fp)
   46f40:	e0bfff0b 	ldhu	r2,-4(fp)
   46f44:	e17ff704 	addi	r5,fp,-36
   46f48:	d8800015 	stw	r2,0(sp)
   46f4c:	e13ffc17 	ldw	r4,-16(fp)
   46f50:	180f883a 	mov	r7,r3
   46f54:	004774c0 	call	4774c <OS_FlagBlock>
   46f58:	e0bfe617 	ldw	r2,-104(fp)
   46f5c:	e0bfed15 	stw	r2,-76(fp)
   46f60:	e0bfed17 	ldw	r2,-76(fp)
   46f64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   46f68:	00006506 	br	47100 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   46f6c:	e0bffc17 	ldw	r2,-16(fp)
   46f70:	1080020b 	ldhu	r2,8(r2)
   46f74:	0084303a 	nor	r2,zero,r2
   46f78:	1007883a 	mov	r3,r2
   46f7c:	e0bffd0b 	ldhu	r2,-12(fp)
   46f80:	1884703a 	and	r2,r3,r2
   46f84:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   46f88:	e0ffe78b 	ldhu	r3,-98(fp)
   46f8c:	e0bffd0b 	ldhu	r2,-12(fp)
   46f90:	1880171e 	bne	r3,r2,46ff0 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   46f94:	e0bfe503 	ldbu	r2,-108(fp)
   46f98:	10800058 	cmpnei	r2,r2,1
   46f9c:	1000071e 	bne	r2,zero,46fbc <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   46fa0:	e0bffc17 	ldw	r2,-16(fp)
   46fa4:	10c0020b 	ldhu	r3,8(r2)
   46fa8:	e0bfe78b 	ldhu	r2,-98(fp)
   46fac:	1884b03a 	or	r2,r3,r2
   46fb0:	1007883a 	mov	r3,r2
   46fb4:	e0bffc17 	ldw	r2,-16(fp)
   46fb8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   46fbc:	00800174 	movhi	r2,5
   46fc0:	108ad604 	addi	r2,r2,11096
   46fc4:	10800017 	ldw	r2,0(r2)
   46fc8:	e0ffe78b 	ldhu	r3,-98(fp)
   46fcc:	10c00b0d 	sth	r3,44(r2)
   46fd0:	e0bfe617 	ldw	r2,-104(fp)
   46fd4:	e0bfee15 	stw	r2,-72(fp)
   46fd8:	e0bfee17 	ldw	r2,-72(fp)
   46fdc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   46fe0:	e0800217 	ldw	r2,8(fp)
   46fe4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   46fe8:	e0bfe78b 	ldhu	r2,-98(fp)
   46fec:	0000a506 	br	47284 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   46ff0:	e1bffd0b 	ldhu	r6,-12(fp)
   46ff4:	e0fffe03 	ldbu	r3,-8(fp)
   46ff8:	e0bfff0b 	ldhu	r2,-4(fp)
   46ffc:	e17ff704 	addi	r5,fp,-36
   47000:	d8800015 	stw	r2,0(sp)
   47004:	e13ffc17 	ldw	r4,-16(fp)
   47008:	180f883a 	mov	r7,r3
   4700c:	004774c0 	call	4774c <OS_FlagBlock>
   47010:	e0bfe617 	ldw	r2,-104(fp)
   47014:	e0bfef15 	stw	r2,-68(fp)
   47018:	e0bfef17 	ldw	r2,-68(fp)
   4701c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   47020:	00003706 	br	47100 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   47024:	e0bffc17 	ldw	r2,-16(fp)
   47028:	1080020b 	ldhu	r2,8(r2)
   4702c:	0084303a 	nor	r2,zero,r2
   47030:	1007883a 	mov	r3,r2
   47034:	e0bffd0b 	ldhu	r2,-12(fp)
   47038:	1884703a 	and	r2,r3,r2
   4703c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   47040:	e0bfe78b 	ldhu	r2,-98(fp)
   47044:	10001726 	beq	r2,zero,470a4 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   47048:	e0bfe503 	ldbu	r2,-108(fp)
   4704c:	10800058 	cmpnei	r2,r2,1
   47050:	1000071e 	bne	r2,zero,47070 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   47054:	e0bffc17 	ldw	r2,-16(fp)
   47058:	10c0020b 	ldhu	r3,8(r2)
   4705c:	e0bfe78b 	ldhu	r2,-98(fp)
   47060:	1884b03a 	or	r2,r3,r2
   47064:	1007883a 	mov	r3,r2
   47068:	e0bffc17 	ldw	r2,-16(fp)
   4706c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   47070:	00800174 	movhi	r2,5
   47074:	108ad604 	addi	r2,r2,11096
   47078:	10800017 	ldw	r2,0(r2)
   4707c:	e0ffe78b 	ldhu	r3,-98(fp)
   47080:	10c00b0d 	sth	r3,44(r2)
   47084:	e0bfe617 	ldw	r2,-104(fp)
   47088:	e0bff015 	stw	r2,-64(fp)
   4708c:	e0bff017 	ldw	r2,-64(fp)
   47090:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   47094:	e0800217 	ldw	r2,8(fp)
   47098:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   4709c:	e0bfe78b 	ldhu	r2,-98(fp)
   470a0:	00007806 	br	47284 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   470a4:	e1bffd0b 	ldhu	r6,-12(fp)
   470a8:	e0fffe03 	ldbu	r3,-8(fp)
   470ac:	e0bfff0b 	ldhu	r2,-4(fp)
   470b0:	e17ff704 	addi	r5,fp,-36
   470b4:	d8800015 	stw	r2,0(sp)
   470b8:	e13ffc17 	ldw	r4,-16(fp)
   470bc:	180f883a 	mov	r7,r3
   470c0:	004774c0 	call	4774c <OS_FlagBlock>
   470c4:	e0bfe617 	ldw	r2,-104(fp)
   470c8:	e0bff115 	stw	r2,-60(fp)
   470cc:	e0bff117 	ldw	r2,-60(fp)
   470d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   470d4:	00000a06 	br	47100 <OSFlagPend+0x458>
   470d8:	e0bfe617 	ldw	r2,-104(fp)
   470dc:	e0bff215 	stw	r2,-56(fp)
   470e0:	e0bff217 	ldw	r2,-56(fp)
   470e4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   470e8:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   470ec:	e0800217 	ldw	r2,8(fp)
   470f0:	00c01bc4 	movi	r3,111
   470f4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   470f8:	e0bfe78b 	ldhu	r2,-98(fp)
   470fc:	00006106 	br	47284 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   47100:	0045b340 	call	45b34 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   47104:	0005303a 	rdctl	r2,status
   47108:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4710c:	e0fff317 	ldw	r3,-52(fp)
   47110:	00bfff84 	movi	r2,-2
   47114:	1884703a 	and	r2,r3,r2
   47118:	1001703a 	wrctl	status,r2
  
  return context;
   4711c:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   47120:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   47124:	00800174 	movhi	r2,5
   47128:	108ad604 	addi	r2,r2,11096
   4712c:	10800017 	ldw	r2,0(r2)
   47130:	10800c43 	ldbu	r2,49(r2)
   47134:	10803fcc 	andi	r2,r2,255
   47138:	10002226 	beq	r2,zero,471c4 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   4713c:	00800174 	movhi	r2,5
   47140:	108ad604 	addi	r2,r2,11096
   47144:	10800017 	ldw	r2,0(r2)
   47148:	10800c43 	ldbu	r2,49(r2)
   4714c:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   47150:	00800174 	movhi	r2,5
   47154:	108ad604 	addi	r2,r2,11096
   47158:	10800017 	ldw	r2,0(r2)
   4715c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   47160:	e0bff704 	addi	r2,fp,-36
   47164:	1009883a 	mov	r4,r2
   47168:	0047b040 	call	47b04 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   4716c:	00800174 	movhi	r2,5
   47170:	108ad604 	addi	r2,r2,11096
   47174:	10800017 	ldw	r2,0(r2)
   47178:	10000c05 	stb	zero,48(r2)
   4717c:	e0bfe617 	ldw	r2,-104(fp)
   47180:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   47184:	e0bff417 	ldw	r2,-48(fp)
   47188:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   4718c:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   47190:	e0bfe803 	ldbu	r2,-96(fp)
   47194:	108000a0 	cmpeqi	r2,r2,2
   47198:	10000426 	beq	r2,zero,471ac <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   4719c:	e0800217 	ldw	r2,8(fp)
   471a0:	00c00384 	movi	r3,14
   471a4:	10c00005 	stb	r3,0(r2)
                 break;
   471a8:	00000406 	br	471bc <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   471ac:	e0800217 	ldw	r2,8(fp)
   471b0:	00c00284 	movi	r3,10
   471b4:	10c00005 	stb	r3,0(r2)
                 break;
   471b8:	0001883a 	nop
        }
        return (flags_rdy);
   471bc:	e0bfe78b 	ldhu	r2,-98(fp)
   471c0:	00003006 	br	47284 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   471c4:	00800174 	movhi	r2,5
   471c8:	108ad604 	addi	r2,r2,11096
   471cc:	10800017 	ldw	r2,0(r2)
   471d0:	10800b0b 	ldhu	r2,44(r2)
   471d4:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   471d8:	e0bfe503 	ldbu	r2,-108(fp)
   471dc:	10800058 	cmpnei	r2,r2,1
   471e0:	1000211e 	bne	r2,zero,47268 <OSFlagPend+0x5c0>
        switch (wait_type) {
   471e4:	e0bffe03 	ldbu	r2,-8(fp)
   471e8:	10001616 	blt	r2,zero,47244 <OSFlagPend+0x59c>
   471ec:	10c00090 	cmplti	r3,r2,2
   471f0:	18000c1e 	bne	r3,zero,47224 <OSFlagPend+0x57c>
   471f4:	10800108 	cmpgei	r2,r2,4
   471f8:	1000121e 	bne	r2,zero,47244 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   471fc:	e0bffc17 	ldw	r2,-16(fp)
   47200:	1080020b 	ldhu	r2,8(r2)
   47204:	1007883a 	mov	r3,r2
   47208:	e0bfe78b 	ldhu	r2,-98(fp)
   4720c:	0084303a 	nor	r2,zero,r2
   47210:	1884703a 	and	r2,r3,r2
   47214:	1007883a 	mov	r3,r2
   47218:	e0bffc17 	ldw	r2,-16(fp)
   4721c:	10c0020d 	sth	r3,8(r2)
                 break;
   47220:	00001106 	br	47268 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   47224:	e0bffc17 	ldw	r2,-16(fp)
   47228:	10c0020b 	ldhu	r3,8(r2)
   4722c:	e0bfe78b 	ldhu	r2,-98(fp)
   47230:	1884b03a 	or	r2,r3,r2
   47234:	1007883a 	mov	r3,r2
   47238:	e0bffc17 	ldw	r2,-16(fp)
   4723c:	10c0020d 	sth	r3,8(r2)
                 break;
   47240:	00000906 	br	47268 <OSFlagPend+0x5c0>
   47244:	e0bfe617 	ldw	r2,-104(fp)
   47248:	e0bff515 	stw	r2,-44(fp)
   4724c:	e0bff517 	ldw	r2,-44(fp)
   47250:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   47254:	e0800217 	ldw	r2,8(fp)
   47258:	00c01bc4 	movi	r3,111
   4725c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   47260:	0005883a 	mov	r2,zero
   47264:	00000706 	br	47284 <OSFlagPend+0x5dc>
   47268:	e0bfe617 	ldw	r2,-104(fp)
   4726c:	e0bff615 	stw	r2,-40(fp)
   47270:	e0bff617 	ldw	r2,-40(fp)
   47274:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   47278:	e0800217 	ldw	r2,8(fp)
   4727c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   47280:	e0bfe78b 	ldhu	r2,-98(fp)
}
   47284:	e037883a 	mov	sp,fp
   47288:	dfc00117 	ldw	ra,4(sp)
   4728c:	df000017 	ldw	fp,0(sp)
   47290:	dec00204 	addi	sp,sp,8
   47294:	f800283a 	ret

00047298 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   47298:	defffb04 	addi	sp,sp,-20
   4729c:	df000415 	stw	fp,16(sp)
   472a0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   472a4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   472a8:	0005303a 	rdctl	r2,status
   472ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   472b0:	e0fffe17 	ldw	r3,-8(fp)
   472b4:	00bfff84 	movi	r2,-2
   472b8:	1884703a 	and	r2,r3,r2
   472bc:	1001703a 	wrctl	status,r2
  
  return context;
   472c0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   472c4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   472c8:	00800174 	movhi	r2,5
   472cc:	108ad604 	addi	r2,r2,11096
   472d0:	10800017 	ldw	r2,0(r2)
   472d4:	10800b0b 	ldhu	r2,44(r2)
   472d8:	e0bffd0d 	sth	r2,-12(fp)
   472dc:	e0bffc17 	ldw	r2,-16(fp)
   472e0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   472e4:	e0bfff17 	ldw	r2,-4(fp)
   472e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   472ec:	e0bffd0b 	ldhu	r2,-12(fp)
}
   472f0:	e037883a 	mov	sp,fp
   472f4:	df000017 	ldw	fp,0(sp)
   472f8:	dec00104 	addi	sp,sp,4
   472fc:	f800283a 	ret

00047300 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   47300:	deffef04 	addi	sp,sp,-68
   47304:	dfc01015 	stw	ra,64(sp)
   47308:	df000f15 	stw	fp,60(sp)
   4730c:	df000f04 	addi	fp,sp,60
   47310:	e13ffc15 	stw	r4,-16(fp)
   47314:	2807883a 	mov	r3,r5
   47318:	3005883a 	mov	r2,r6
   4731c:	e1ffff15 	stw	r7,-4(fp)
   47320:	e0fffd0d 	sth	r3,-12(fp)
   47324:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   47328:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   4732c:	e0bfff17 	ldw	r2,-4(fp)
   47330:	1000021e 	bne	r2,zero,4733c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   47334:	0005883a 	mov	r2,zero
   47338:	0000ce06 	br	47674 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   4733c:	e0bffc17 	ldw	r2,-16(fp)
   47340:	1000051e 	bne	r2,zero,47358 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   47344:	e0bfff17 	ldw	r2,-4(fp)
   47348:	00c01b84 	movi	r3,110
   4734c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   47350:	0005883a 	mov	r2,zero
   47354:	0000c706 	br	47674 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   47358:	e0bffc17 	ldw	r2,-16(fp)
   4735c:	10800003 	ldbu	r2,0(r2)
   47360:	10803fcc 	andi	r2,r2,255
   47364:	10800160 	cmpeqi	r2,r2,5
   47368:	1000051e 	bne	r2,zero,47380 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   4736c:	e0bfff17 	ldw	r2,-4(fp)
   47370:	00c00044 	movi	r3,1
   47374:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   47378:	0005883a 	mov	r2,zero
   4737c:	0000bd06 	br	47674 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   47380:	0005303a 	rdctl	r2,status
   47384:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   47388:	e0fff617 	ldw	r3,-40(fp)
   4738c:	00bfff84 	movi	r2,-2
   47390:	1884703a 	and	r2,r3,r2
   47394:	1001703a 	wrctl	status,r2
  
  return context;
   47398:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   4739c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   473a0:	e0bffe03 	ldbu	r2,-8(fp)
   473a4:	10000326 	beq	r2,zero,473b4 <OSFlagPost+0xb4>
   473a8:	10800060 	cmpeqi	r2,r2,1
   473ac:	10000b1e 	bne	r2,zero,473dc <OSFlagPost+0xdc>
   473b0:	00001206 	br	473fc <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   473b4:	e0bffc17 	ldw	r2,-16(fp)
   473b8:	1080020b 	ldhu	r2,8(r2)
   473bc:	1007883a 	mov	r3,r2
   473c0:	e0bffd0b 	ldhu	r2,-12(fp)
   473c4:	0084303a 	nor	r2,zero,r2
   473c8:	1884703a 	and	r2,r3,r2
   473cc:	1007883a 	mov	r3,r2
   473d0:	e0bffc17 	ldw	r2,-16(fp)
   473d4:	10c0020d 	sth	r3,8(r2)
             break;
   473d8:	00001106 	br	47420 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   473dc:	e0bffc17 	ldw	r2,-16(fp)
   473e0:	10c0020b 	ldhu	r3,8(r2)
   473e4:	e0bffd0b 	ldhu	r2,-12(fp)
   473e8:	1884b03a 	or	r2,r3,r2
   473ec:	1007883a 	mov	r3,r2
   473f0:	e0bffc17 	ldw	r2,-16(fp)
   473f4:	10c0020d 	sth	r3,8(r2)
             break;
   473f8:	00000906 	br	47420 <OSFlagPost+0x120>
   473fc:	e0bff317 	ldw	r2,-52(fp)
   47400:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   47404:	e0bff717 	ldw	r2,-36(fp)
   47408:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   4740c:	e0bfff17 	ldw	r2,-4(fp)
   47410:	00c01c44 	movi	r3,113
   47414:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   47418:	0005883a 	mov	r2,zero
   4741c:	00009506 	br	47674 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   47420:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   47424:	e0bffc17 	ldw	r2,-16(fp)
   47428:	10800117 	ldw	r2,4(r2)
   4742c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   47430:	00007406 	br	47604 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   47434:	e0bff117 	ldw	r2,-60(fp)
   47438:	10800483 	ldbu	r2,18(r2)
   4743c:	10803fcc 	andi	r2,r2,255
   47440:	10c00060 	cmpeqi	r3,r2,1
   47444:	18004d1e 	bne	r3,zero,4757c <OSFlagPost+0x27c>
   47448:	10c00088 	cmpgei	r3,r2,2
   4744c:	1800021e 	bne	r3,zero,47458 <OSFlagPost+0x158>
   47450:	10003126 	beq	r2,zero,47518 <OSFlagPost+0x218>
   47454:	00005f06 	br	475d4 <OSFlagPost+0x2d4>
   47458:	10c000a0 	cmpeqi	r3,r2,2
   4745c:	1800031e 	bne	r3,zero,4746c <OSFlagPost+0x16c>
   47460:	108000e0 	cmpeqi	r2,r2,3
   47464:	1000181e 	bne	r2,zero,474c8 <OSFlagPost+0x1c8>
   47468:	00005a06 	br	475d4 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   4746c:	e0bffc17 	ldw	r2,-16(fp)
   47470:	10c0020b 	ldhu	r3,8(r2)
   47474:	e0bff117 	ldw	r2,-60(fp)
   47478:	1080040b 	ldhu	r2,16(r2)
   4747c:	1884703a 	and	r2,r3,r2
   47480:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   47484:	e0bff117 	ldw	r2,-60(fp)
   47488:	1080040b 	ldhu	r2,16(r2)
   4748c:	10ffffcc 	andi	r3,r2,65535
   47490:	e0bff40b 	ldhu	r2,-48(fp)
   47494:	18800b1e 	bne	r3,r2,474c4 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   47498:	e0bff40b 	ldhu	r2,-48(fp)
   4749c:	e13ff117 	ldw	r4,-60(fp)
   474a0:	100b883a 	mov	r5,r2
   474a4:	00479f40 	call	479f4 <OS_FlagTaskRdy>
   474a8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   474ac:	e0bff483 	ldbu	r2,-46(fp)
   474b0:	10800058 	cmpnei	r2,r2,1
   474b4:	1000031e 	bne	r2,zero,474c4 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   474b8:	00800044 	movi	r2,1
   474bc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   474c0:	00004d06 	br	475f8 <OSFlagPost+0x2f8>
   474c4:	00004c06 	br	475f8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   474c8:	e0bffc17 	ldw	r2,-16(fp)
   474cc:	10c0020b 	ldhu	r3,8(r2)
   474d0:	e0bff117 	ldw	r2,-60(fp)
   474d4:	1080040b 	ldhu	r2,16(r2)
   474d8:	1884703a 	and	r2,r3,r2
   474dc:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   474e0:	e0bff40b 	ldhu	r2,-48(fp)
   474e4:	10000b26 	beq	r2,zero,47514 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   474e8:	e0bff40b 	ldhu	r2,-48(fp)
   474ec:	e13ff117 	ldw	r4,-60(fp)
   474f0:	100b883a 	mov	r5,r2
   474f4:	00479f40 	call	479f4 <OS_FlagTaskRdy>
   474f8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   474fc:	e0bff483 	ldbu	r2,-46(fp)
   47500:	10800058 	cmpnei	r2,r2,1
   47504:	1000031e 	bne	r2,zero,47514 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   47508:	00800044 	movi	r2,1
   4750c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   47510:	00003906 	br	475f8 <OSFlagPost+0x2f8>
   47514:	00003806 	br	475f8 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   47518:	e0bffc17 	ldw	r2,-16(fp)
   4751c:	1080020b 	ldhu	r2,8(r2)
   47520:	0084303a 	nor	r2,zero,r2
   47524:	1007883a 	mov	r3,r2
   47528:	e0bff117 	ldw	r2,-60(fp)
   4752c:	1080040b 	ldhu	r2,16(r2)
   47530:	1884703a 	and	r2,r3,r2
   47534:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   47538:	e0bff117 	ldw	r2,-60(fp)
   4753c:	1080040b 	ldhu	r2,16(r2)
   47540:	10ffffcc 	andi	r3,r2,65535
   47544:	e0bff40b 	ldhu	r2,-48(fp)
   47548:	18800b1e 	bne	r3,r2,47578 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   4754c:	e0bff40b 	ldhu	r2,-48(fp)
   47550:	e13ff117 	ldw	r4,-60(fp)
   47554:	100b883a 	mov	r5,r2
   47558:	00479f40 	call	479f4 <OS_FlagTaskRdy>
   4755c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   47560:	e0bff483 	ldbu	r2,-46(fp)
   47564:	10800058 	cmpnei	r2,r2,1
   47568:	1000031e 	bne	r2,zero,47578 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   4756c:	00800044 	movi	r2,1
   47570:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   47574:	00002006 	br	475f8 <OSFlagPost+0x2f8>
   47578:	00001f06 	br	475f8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   4757c:	e0bffc17 	ldw	r2,-16(fp)
   47580:	1080020b 	ldhu	r2,8(r2)
   47584:	0084303a 	nor	r2,zero,r2
   47588:	1007883a 	mov	r3,r2
   4758c:	e0bff117 	ldw	r2,-60(fp)
   47590:	1080040b 	ldhu	r2,16(r2)
   47594:	1884703a 	and	r2,r3,r2
   47598:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   4759c:	e0bff40b 	ldhu	r2,-48(fp)
   475a0:	10000b26 	beq	r2,zero,475d0 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   475a4:	e0bff40b 	ldhu	r2,-48(fp)
   475a8:	e13ff117 	ldw	r4,-60(fp)
   475ac:	100b883a 	mov	r5,r2
   475b0:	00479f40 	call	479f4 <OS_FlagTaskRdy>
   475b4:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   475b8:	e0bff483 	ldbu	r2,-46(fp)
   475bc:	10800058 	cmpnei	r2,r2,1
   475c0:	1000031e 	bne	r2,zero,475d0 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   475c4:	00800044 	movi	r2,1
   475c8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   475cc:	00000a06 	br	475f8 <OSFlagPost+0x2f8>
   475d0:	00000906 	br	475f8 <OSFlagPost+0x2f8>
   475d4:	e0bff317 	ldw	r2,-52(fp)
   475d8:	e0bff815 	stw	r2,-32(fp)
   475dc:	e0bff817 	ldw	r2,-32(fp)
   475e0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   475e4:	e0bfff17 	ldw	r2,-4(fp)
   475e8:	00c01bc4 	movi	r3,111
   475ec:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   475f0:	0005883a 	mov	r2,zero
   475f4:	00001f06 	br	47674 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   475f8:	e0bff117 	ldw	r2,-60(fp)
   475fc:	10800017 	ldw	r2,0(r2)
   47600:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   47604:	e0bff117 	ldw	r2,-60(fp)
   47608:	103f8a1e 	bne	r2,zero,47434 <__alt_data_end+0xfffd18d4>
   4760c:	e0bff317 	ldw	r2,-52(fp)
   47610:	e0bff915 	stw	r2,-28(fp)
   47614:	e0bff917 	ldw	r2,-28(fp)
   47618:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   4761c:	e0bff203 	ldbu	r2,-56(fp)
   47620:	10800058 	cmpnei	r2,r2,1
   47624:	1000011e 	bne	r2,zero,4762c <OSFlagPost+0x32c>
        OS_Sched();
   47628:	0045b340 	call	45b34 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4762c:	0005303a 	rdctl	r2,status
   47630:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   47634:	e0fffa17 	ldw	r3,-24(fp)
   47638:	00bfff84 	movi	r2,-2
   4763c:	1884703a 	and	r2,r3,r2
   47640:	1001703a 	wrctl	status,r2
  
  return context;
   47644:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   47648:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   4764c:	e0bffc17 	ldw	r2,-16(fp)
   47650:	1080020b 	ldhu	r2,8(r2)
   47654:	e0bff50d 	sth	r2,-44(fp)
   47658:	e0bff317 	ldw	r2,-52(fp)
   4765c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   47660:	e0bffb17 	ldw	r2,-20(fp)
   47664:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   47668:	e0bfff17 	ldw	r2,-4(fp)
   4766c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   47670:	e0bff50b 	ldhu	r2,-44(fp)
}
   47674:	e037883a 	mov	sp,fp
   47678:	dfc00117 	ldw	ra,4(sp)
   4767c:	df000017 	ldw	fp,0(sp)
   47680:	dec00204 	addi	sp,sp,8
   47684:	f800283a 	ret

00047688 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   47688:	defff904 	addi	sp,sp,-28
   4768c:	df000615 	stw	fp,24(sp)
   47690:	df000604 	addi	fp,sp,24
   47694:	e13ffe15 	stw	r4,-8(fp)
   47698:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   4769c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   476a0:	e0bfff17 	ldw	r2,-4(fp)
   476a4:	1000021e 	bne	r2,zero,476b0 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   476a8:	0005883a 	mov	r2,zero
   476ac:	00002306 	br	4773c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   476b0:	e0bffe17 	ldw	r2,-8(fp)
   476b4:	1000051e 	bne	r2,zero,476cc <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   476b8:	e0bfff17 	ldw	r2,-4(fp)
   476bc:	00c01b84 	movi	r3,110
   476c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   476c4:	0005883a 	mov	r2,zero
   476c8:	00001c06 	br	4773c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   476cc:	e0bffe17 	ldw	r2,-8(fp)
   476d0:	10800003 	ldbu	r2,0(r2)
   476d4:	10803fcc 	andi	r2,r2,255
   476d8:	10800160 	cmpeqi	r2,r2,5
   476dc:	1000051e 	bne	r2,zero,476f4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   476e0:	e0bfff17 	ldw	r2,-4(fp)
   476e4:	00c00044 	movi	r3,1
   476e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   476ec:	0005883a 	mov	r2,zero
   476f0:	00001206 	br	4773c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   476f4:	0005303a 	rdctl	r2,status
   476f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   476fc:	e0fffc17 	ldw	r3,-16(fp)
   47700:	00bfff84 	movi	r2,-2
   47704:	1884703a 	and	r2,r3,r2
   47708:	1001703a 	wrctl	status,r2
  
  return context;
   4770c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   47710:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   47714:	e0bffe17 	ldw	r2,-8(fp)
   47718:	1080020b 	ldhu	r2,8(r2)
   4771c:	e0bffb0d 	sth	r2,-20(fp)
   47720:	e0bffa17 	ldw	r2,-24(fp)
   47724:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   47728:	e0bffd17 	ldw	r2,-12(fp)
   4772c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   47730:	e0bfff17 	ldw	r2,-4(fp)
   47734:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   47738:	e0bffb0b 	ldhu	r2,-20(fp)
}
   4773c:	e037883a 	mov	sp,fp
   47740:	df000017 	ldw	fp,0(sp)
   47744:	dec00104 	addi	sp,sp,4
   47748:	f800283a 	ret

0004774c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   4774c:	defff804 	addi	sp,sp,-32
   47750:	df000715 	stw	fp,28(sp)
   47754:	df000704 	addi	fp,sp,28
   47758:	e13ffb15 	stw	r4,-20(fp)
   4775c:	e17ffc15 	stw	r5,-16(fp)
   47760:	3009883a 	mov	r4,r6
   47764:	3807883a 	mov	r3,r7
   47768:	e0800117 	ldw	r2,4(fp)
   4776c:	e13ffd0d 	sth	r4,-12(fp)
   47770:	e0fffe05 	stb	r3,-8(fp)
   47774:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   47778:	00800174 	movhi	r2,5
   4777c:	108ad604 	addi	r2,r2,11096
   47780:	10c00017 	ldw	r3,0(r2)
   47784:	00800174 	movhi	r2,5
   47788:	108ad604 	addi	r2,r2,11096
   4778c:	10800017 	ldw	r2,0(r2)
   47790:	10800c03 	ldbu	r2,48(r2)
   47794:	10800814 	ori	r2,r2,32
   47798:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   4779c:	00800174 	movhi	r2,5
   477a0:	108ad604 	addi	r2,r2,11096
   477a4:	10800017 	ldw	r2,0(r2)
   477a8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   477ac:	00800174 	movhi	r2,5
   477b0:	108ad604 	addi	r2,r2,11096
   477b4:	10800017 	ldw	r2,0(r2)
   477b8:	e0ffff0b 	ldhu	r3,-4(fp)
   477bc:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   477c0:	00800174 	movhi	r2,5
   477c4:	108ad604 	addi	r2,r2,11096
   477c8:	10800017 	ldw	r2,0(r2)
   477cc:	e0fffc17 	ldw	r3,-16(fp)
   477d0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   477d4:	e0bffc17 	ldw	r2,-16(fp)
   477d8:	e0fffd0b 	ldhu	r3,-12(fp)
   477dc:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   477e0:	e0bffc17 	ldw	r2,-16(fp)
   477e4:	e0fffe03 	ldbu	r3,-8(fp)
   477e8:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   477ec:	00800174 	movhi	r2,5
   477f0:	108ad604 	addi	r2,r2,11096
   477f4:	10c00017 	ldw	r3,0(r2)
   477f8:	e0bffc17 	ldw	r2,-16(fp)
   477fc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   47800:	e0bffb17 	ldw	r2,-20(fp)
   47804:	10c00117 	ldw	r3,4(r2)
   47808:	e0bffc17 	ldw	r2,-16(fp)
   4780c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   47810:	e0bffc17 	ldw	r2,-16(fp)
   47814:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   47818:	e0bffc17 	ldw	r2,-16(fp)
   4781c:	e0fffb17 	ldw	r3,-20(fp)
   47820:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   47824:	e0bffb17 	ldw	r2,-20(fp)
   47828:	10800117 	ldw	r2,4(r2)
   4782c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   47830:	e0bff917 	ldw	r2,-28(fp)
   47834:	10000326 	beq	r2,zero,47844 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   47838:	e0bff917 	ldw	r2,-28(fp)
   4783c:	e0fffc17 	ldw	r3,-16(fp)
   47840:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   47844:	e0bffb17 	ldw	r2,-20(fp)
   47848:	e0fffc17 	ldw	r3,-16(fp)
   4784c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   47850:	00800174 	movhi	r2,5
   47854:	108ad604 	addi	r2,r2,11096
   47858:	10800017 	ldw	r2,0(r2)
   4785c:	10800d03 	ldbu	r2,52(r2)
   47860:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   47864:	e0fffa03 	ldbu	r3,-24(fp)
   47868:	e13ffa03 	ldbu	r4,-24(fp)
   4786c:	00800174 	movhi	r2,5
   47870:	108ad344 	addi	r2,r2,11085
   47874:	1105883a 	add	r2,r2,r4
   47878:	10800003 	ldbu	r2,0(r2)
   4787c:	1009883a 	mov	r4,r2
   47880:	00800174 	movhi	r2,5
   47884:	108ad604 	addi	r2,r2,11096
   47888:	10800017 	ldw	r2,0(r2)
   4788c:	10800d43 	ldbu	r2,53(r2)
   47890:	0084303a 	nor	r2,zero,r2
   47894:	2084703a 	and	r2,r4,r2
   47898:	1009883a 	mov	r4,r2
   4789c:	00800174 	movhi	r2,5
   478a0:	108ad344 	addi	r2,r2,11085
   478a4:	10c5883a 	add	r2,r2,r3
   478a8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   478ac:	e0fffa03 	ldbu	r3,-24(fp)
   478b0:	00800174 	movhi	r2,5
   478b4:	108ad344 	addi	r2,r2,11085
   478b8:	10c5883a 	add	r2,r2,r3
   478bc:	10800003 	ldbu	r2,0(r2)
   478c0:	10803fcc 	andi	r2,r2,255
   478c4:	10000e1e 	bne	r2,zero,47900 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   478c8:	00800174 	movhi	r2,5
   478cc:	108ad604 	addi	r2,r2,11096
   478d0:	10800017 	ldw	r2,0(r2)
   478d4:	10800d83 	ldbu	r2,54(r2)
   478d8:	0084303a 	nor	r2,zero,r2
   478dc:	1007883a 	mov	r3,r2
   478e0:	00800174 	movhi	r2,5
   478e4:	108ad304 	addi	r2,r2,11084
   478e8:	10800003 	ldbu	r2,0(r2)
   478ec:	1884703a 	and	r2,r3,r2
   478f0:	1007883a 	mov	r3,r2
   478f4:	00800174 	movhi	r2,5
   478f8:	108ad304 	addi	r2,r2,11084
   478fc:	10c00005 	stb	r3,0(r2)
    }
}
   47900:	e037883a 	mov	sp,fp
   47904:	df000017 	ldw	fp,0(sp)
   47908:	dec00104 	addi	sp,sp,4
   4790c:	f800283a 	ret

00047910 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   47910:	defffb04 	addi	sp,sp,-20
   47914:	dfc00415 	stw	ra,16(sp)
   47918:	df000315 	stw	fp,12(sp)
   4791c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   47920:	010001b4 	movhi	r4,6
   47924:	2122e904 	addi	r4,r4,-29788
   47928:	0140dc04 	movi	r5,880
   4792c:	0045a800 	call	45a80 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   47930:	008001b4 	movhi	r2,6
   47934:	10a2e904 	addi	r2,r2,-29788
   47938:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   4793c:	008001b4 	movhi	r2,6
   47940:	10a2f404 	addi	r2,r2,-29744
   47944:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   47948:	e03ffd0d 	sth	zero,-12(fp)
   4794c:	00001306 	br	4799c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   47950:	e0bffe17 	ldw	r2,-8(fp)
   47954:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   47958:	e0bffe17 	ldw	r2,-8(fp)
   4795c:	e0ffff17 	ldw	r3,-4(fp)
   47960:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   47964:	e0bffe17 	ldw	r2,-8(fp)
   47968:	00c00fc4 	movi	r3,63
   4796c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   47970:	e0bffe17 	ldw	r2,-8(fp)
   47974:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   47978:	e0bffe17 	ldw	r2,-8(fp)
   4797c:	10800b04 	addi	r2,r2,44
   47980:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   47984:	e0bfff17 	ldw	r2,-4(fp)
   47988:	10800b04 	addi	r2,r2,44
   4798c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   47990:	e0bffd0b 	ldhu	r2,-12(fp)
   47994:	10800044 	addi	r2,r2,1
   47998:	e0bffd0d 	sth	r2,-12(fp)
   4799c:	e0bffd0b 	ldhu	r2,-12(fp)
   479a0:	108004f0 	cmpltui	r2,r2,19
   479a4:	103fea1e 	bne	r2,zero,47950 <__alt_data_end+0xfffd1df0>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   479a8:	e0bffe17 	ldw	r2,-8(fp)
   479ac:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   479b0:	e0bffe17 	ldw	r2,-8(fp)
   479b4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   479b8:	e0bffe17 	ldw	r2,-8(fp)
   479bc:	00c00fc4 	movi	r3,63
   479c0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   479c4:	e0bffe17 	ldw	r2,-8(fp)
   479c8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   479cc:	00800174 	movhi	r2,5
   479d0:	108ad804 	addi	r2,r2,11104
   479d4:	00c001b4 	movhi	r3,6
   479d8:	18e2e904 	addi	r3,r3,-29788
   479dc:	10c00015 	stw	r3,0(r2)
#endif
}
   479e0:	e037883a 	mov	sp,fp
   479e4:	dfc00117 	ldw	ra,4(sp)
   479e8:	df000017 	ldw	fp,0(sp)
   479ec:	dec00204 	addi	sp,sp,8
   479f0:	f800283a 	ret

000479f4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   479f4:	defffa04 	addi	sp,sp,-24
   479f8:	dfc00515 	stw	ra,20(sp)
   479fc:	df000415 	stw	fp,16(sp)
   47a00:	df000404 	addi	fp,sp,16
   47a04:	e13ffe15 	stw	r4,-8(fp)
   47a08:	2805883a 	mov	r2,r5
   47a0c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   47a10:	e0bffe17 	ldw	r2,-8(fp)
   47a14:	10800217 	ldw	r2,8(r2)
   47a18:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   47a1c:	e0bffd17 	ldw	r2,-12(fp)
   47a20:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   47a24:	e0bffd17 	ldw	r2,-12(fp)
   47a28:	e0ffff0b 	ldhu	r3,-4(fp)
   47a2c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   47a30:	e0bffd17 	ldw	r2,-12(fp)
   47a34:	10c00c03 	ldbu	r3,48(r2)
   47a38:	00bff7c4 	movi	r2,-33
   47a3c:	1884703a 	and	r2,r3,r2
   47a40:	1007883a 	mov	r3,r2
   47a44:	e0bffd17 	ldw	r2,-12(fp)
   47a48:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   47a4c:	e0bffd17 	ldw	r2,-12(fp)
   47a50:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   47a54:	e0bffd17 	ldw	r2,-12(fp)
   47a58:	10800c03 	ldbu	r2,48(r2)
   47a5c:	10803fcc 	andi	r2,r2,255
   47a60:	10001f1e 	bne	r2,zero,47ae0 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   47a64:	e0bffd17 	ldw	r2,-12(fp)
   47a68:	10c00d83 	ldbu	r3,54(r2)
   47a6c:	00800174 	movhi	r2,5
   47a70:	108ad304 	addi	r2,r2,11084
   47a74:	10800003 	ldbu	r2,0(r2)
   47a78:	1884b03a 	or	r2,r3,r2
   47a7c:	1007883a 	mov	r3,r2
   47a80:	00800174 	movhi	r2,5
   47a84:	108ad304 	addi	r2,r2,11084
   47a88:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   47a8c:	e0bffd17 	ldw	r2,-12(fp)
   47a90:	10800d03 	ldbu	r2,52(r2)
   47a94:	10c03fcc 	andi	r3,r2,255
   47a98:	e0bffd17 	ldw	r2,-12(fp)
   47a9c:	10800d03 	ldbu	r2,52(r2)
   47aa0:	11003fcc 	andi	r4,r2,255
   47aa4:	00800174 	movhi	r2,5
   47aa8:	108ad344 	addi	r2,r2,11085
   47aac:	1105883a 	add	r2,r2,r4
   47ab0:	11000003 	ldbu	r4,0(r2)
   47ab4:	e0bffd17 	ldw	r2,-12(fp)
   47ab8:	10800d43 	ldbu	r2,53(r2)
   47abc:	2084b03a 	or	r2,r4,r2
   47ac0:	1009883a 	mov	r4,r2
   47ac4:	00800174 	movhi	r2,5
   47ac8:	108ad344 	addi	r2,r2,11085
   47acc:	10c5883a 	add	r2,r2,r3
   47ad0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   47ad4:	00800044 	movi	r2,1
   47ad8:	e0bffc05 	stb	r2,-16(fp)
   47adc:	00000106 	br	47ae4 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   47ae0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   47ae4:	e13ffe17 	ldw	r4,-8(fp)
   47ae8:	0047b040 	call	47b04 <OS_FlagUnlink>
    return (sched);
   47aec:	e0bffc03 	ldbu	r2,-16(fp)
}
   47af0:	e037883a 	mov	sp,fp
   47af4:	dfc00117 	ldw	ra,4(sp)
   47af8:	df000017 	ldw	fp,0(sp)
   47afc:	dec00204 	addi	sp,sp,8
   47b00:	f800283a 	ret

00047b04 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   47b04:	defffa04 	addi	sp,sp,-24
   47b08:	df000515 	stw	fp,20(sp)
   47b0c:	df000504 	addi	fp,sp,20
   47b10:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   47b14:	e0bfff17 	ldw	r2,-4(fp)
   47b18:	10800117 	ldw	r2,4(r2)
   47b1c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   47b20:	e0bfff17 	ldw	r2,-4(fp)
   47b24:	10800017 	ldw	r2,0(r2)
   47b28:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   47b2c:	e0bffb17 	ldw	r2,-20(fp)
   47b30:	10000b1e 	bne	r2,zero,47b60 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   47b34:	e0bfff17 	ldw	r2,-4(fp)
   47b38:	10800317 	ldw	r2,12(r2)
   47b3c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   47b40:	e0bffd17 	ldw	r2,-12(fp)
   47b44:	e0fffc17 	ldw	r3,-16(fp)
   47b48:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   47b4c:	e0bffc17 	ldw	r2,-16(fp)
   47b50:	10000b26 	beq	r2,zero,47b80 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   47b54:	e0bffc17 	ldw	r2,-16(fp)
   47b58:	10000115 	stw	zero,4(r2)
   47b5c:	00000806 	br	47b80 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   47b60:	e0bffb17 	ldw	r2,-20(fp)
   47b64:	e0fffc17 	ldw	r3,-16(fp)
   47b68:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   47b6c:	e0bffc17 	ldw	r2,-16(fp)
   47b70:	10000326 	beq	r2,zero,47b80 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   47b74:	e0bffc17 	ldw	r2,-16(fp)
   47b78:	e0fffb17 	ldw	r3,-20(fp)
   47b7c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   47b80:	e0bfff17 	ldw	r2,-4(fp)
   47b84:	10800217 	ldw	r2,8(r2)
   47b88:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   47b8c:	e0bffe17 	ldw	r2,-8(fp)
   47b90:	10000a15 	stw	zero,40(r2)
#endif
}
   47b94:	e037883a 	mov	sp,fp
   47b98:	df000017 	ldw	fp,0(sp)
   47b9c:	dec00104 	addi	sp,sp,4
   47ba0:	f800283a 	ret

00047ba4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   47ba4:	defff404 	addi	sp,sp,-48
   47ba8:	df000b15 	stw	fp,44(sp)
   47bac:	df000b04 	addi	fp,sp,44
   47bb0:	e13ffc15 	stw	r4,-16(fp)
   47bb4:	e17ffd15 	stw	r5,-12(fp)
   47bb8:	e1bffe15 	stw	r6,-8(fp)
   47bbc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   47bc0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   47bc4:	e0bfff17 	ldw	r2,-4(fp)
   47bc8:	1000021e 	bne	r2,zero,47bd4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   47bcc:	0005883a 	mov	r2,zero
   47bd0:	00006d06 	br	47d88 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   47bd4:	e0bffc17 	ldw	r2,-16(fp)
   47bd8:	1000051e 	bne	r2,zero,47bf0 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   47bdc:	e0bfff17 	ldw	r2,-4(fp)
   47be0:	00c01884 	movi	r3,98
   47be4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   47be8:	0005883a 	mov	r2,zero
   47bec:	00006606 	br	47d88 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   47bf0:	e0bffc17 	ldw	r2,-16(fp)
   47bf4:	108000cc 	andi	r2,r2,3
   47bf8:	10000526 	beq	r2,zero,47c10 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   47bfc:	e0bfff17 	ldw	r2,-4(fp)
   47c00:	00c01884 	movi	r3,98
   47c04:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   47c08:	0005883a 	mov	r2,zero
   47c0c:	00005e06 	br	47d88 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   47c10:	e0bffd17 	ldw	r2,-12(fp)
   47c14:	108000a8 	cmpgeui	r2,r2,2
   47c18:	1000051e 	bne	r2,zero,47c30 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   47c1c:	e0bfff17 	ldw	r2,-4(fp)
   47c20:	00c016c4 	movi	r3,91
   47c24:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   47c28:	0005883a 	mov	r2,zero
   47c2c:	00005606 	br	47d88 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   47c30:	e0bffe17 	ldw	r2,-8(fp)
   47c34:	10800128 	cmpgeui	r2,r2,4
   47c38:	1000051e 	bne	r2,zero,47c50 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   47c3c:	e0bfff17 	ldw	r2,-4(fp)
   47c40:	00c01704 	movi	r3,92
   47c44:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   47c48:	0005883a 	mov	r2,zero
   47c4c:	00004e06 	br	47d88 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   47c50:	0005303a 	rdctl	r2,status
   47c54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   47c58:	e0fffa17 	ldw	r3,-24(fp)
   47c5c:	00bfff84 	movi	r2,-2
   47c60:	1884703a 	and	r2,r3,r2
   47c64:	1001703a 	wrctl	status,r2
  
  return context;
   47c68:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   47c6c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   47c70:	00800174 	movhi	r2,5
   47c74:	108ad004 	addi	r2,r2,11072
   47c78:	10800017 	ldw	r2,0(r2)
   47c7c:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   47c80:	00800174 	movhi	r2,5
   47c84:	108ad004 	addi	r2,r2,11072
   47c88:	10800017 	ldw	r2,0(r2)
   47c8c:	10000726 	beq	r2,zero,47cac <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   47c90:	00800174 	movhi	r2,5
   47c94:	108ad004 	addi	r2,r2,11072
   47c98:	10800017 	ldw	r2,0(r2)
   47c9c:	10c00117 	ldw	r3,4(r2)
   47ca0:	00800174 	movhi	r2,5
   47ca4:	108ad004 	addi	r2,r2,11072
   47ca8:	10c00015 	stw	r3,0(r2)
   47cac:	e0bff817 	ldw	r2,-32(fp)
   47cb0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   47cb4:	e0bffb17 	ldw	r2,-20(fp)
   47cb8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   47cbc:	e0bff917 	ldw	r2,-28(fp)
   47cc0:	1000051e 	bne	r2,zero,47cd8 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   47cc4:	e0bfff17 	ldw	r2,-4(fp)
   47cc8:	00c01684 	movi	r3,90
   47ccc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   47cd0:	0005883a 	mov	r2,zero
   47cd4:	00002c06 	br	47d88 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   47cd8:	e0bffc17 	ldw	r2,-16(fp)
   47cdc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   47ce0:	e0fffc17 	ldw	r3,-16(fp)
   47ce4:	e0bffe17 	ldw	r2,-8(fp)
   47ce8:	1885883a 	add	r2,r3,r2
   47cec:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   47cf0:	e03ff715 	stw	zero,-36(fp)
   47cf4:	00000c06 	br	47d28 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   47cf8:	e0bff617 	ldw	r2,-40(fp)
   47cfc:	e0fff517 	ldw	r3,-44(fp)
   47d00:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   47d04:	e0bff517 	ldw	r2,-44(fp)
   47d08:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   47d0c:	e0fff517 	ldw	r3,-44(fp)
   47d10:	e0bffe17 	ldw	r2,-8(fp)
   47d14:	1885883a 	add	r2,r3,r2
   47d18:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   47d1c:	e0bff717 	ldw	r2,-36(fp)
   47d20:	10800044 	addi	r2,r2,1
   47d24:	e0bff715 	stw	r2,-36(fp)
   47d28:	e0bffd17 	ldw	r2,-12(fp)
   47d2c:	10bfffc4 	addi	r2,r2,-1
   47d30:	e0fff717 	ldw	r3,-36(fp)
   47d34:	18bff036 	bltu	r3,r2,47cf8 <__alt_data_end+0xfffd2198>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   47d38:	e0bff617 	ldw	r2,-40(fp)
   47d3c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   47d40:	e0bff917 	ldw	r2,-28(fp)
   47d44:	e0fffc17 	ldw	r3,-16(fp)
   47d48:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   47d4c:	e0bff917 	ldw	r2,-28(fp)
   47d50:	e0fffc17 	ldw	r3,-16(fp)
   47d54:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   47d58:	e0bff917 	ldw	r2,-28(fp)
   47d5c:	e0fffd17 	ldw	r3,-12(fp)
   47d60:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   47d64:	e0bff917 	ldw	r2,-28(fp)
   47d68:	e0fffd17 	ldw	r3,-12(fp)
   47d6c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   47d70:	e0bff917 	ldw	r2,-28(fp)
   47d74:	e0fffe17 	ldw	r3,-8(fp)
   47d78:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   47d7c:	e0bfff17 	ldw	r2,-4(fp)
   47d80:	10000005 	stb	zero,0(r2)
    return (pmem);
   47d84:	e0bff917 	ldw	r2,-28(fp)
}
   47d88:	e037883a 	mov	sp,fp
   47d8c:	df000017 	ldw	fp,0(sp)
   47d90:	dec00104 	addi	sp,sp,4
   47d94:	f800283a 	ret

00047d98 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   47d98:	defff804 	addi	sp,sp,-32
   47d9c:	df000715 	stw	fp,28(sp)
   47da0:	df000704 	addi	fp,sp,28
   47da4:	e13ffe15 	stw	r4,-8(fp)
   47da8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   47dac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   47db0:	e0bfff17 	ldw	r2,-4(fp)
   47db4:	1000021e 	bne	r2,zero,47dc0 <OSMemGet+0x28>
        return ((void *)0);
   47db8:	0005883a 	mov	r2,zero
   47dbc:	00002e06 	br	47e78 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   47dc0:	e0bffe17 	ldw	r2,-8(fp)
   47dc4:	1000051e 	bne	r2,zero,47ddc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   47dc8:	e0bfff17 	ldw	r2,-4(fp)
   47dcc:	00c01804 	movi	r3,96
   47dd0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   47dd4:	0005883a 	mov	r2,zero
   47dd8:	00002706 	br	47e78 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   47ddc:	0005303a 	rdctl	r2,status
   47de0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   47de4:	e0fffb17 	ldw	r3,-20(fp)
   47de8:	00bfff84 	movi	r2,-2
   47dec:	1884703a 	and	r2,r3,r2
   47df0:	1001703a 	wrctl	status,r2
  
  return context;
   47df4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   47df8:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   47dfc:	e0bffe17 	ldw	r2,-8(fp)
   47e00:	10800417 	ldw	r2,16(r2)
   47e04:	10001426 	beq	r2,zero,47e58 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   47e08:	e0bffe17 	ldw	r2,-8(fp)
   47e0c:	10800117 	ldw	r2,4(r2)
   47e10:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   47e14:	e0bffa17 	ldw	r2,-24(fp)
   47e18:	10c00017 	ldw	r3,0(r2)
   47e1c:	e0bffe17 	ldw	r2,-8(fp)
   47e20:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   47e24:	e0bffe17 	ldw	r2,-8(fp)
   47e28:	10800417 	ldw	r2,16(r2)
   47e2c:	10ffffc4 	addi	r3,r2,-1
   47e30:	e0bffe17 	ldw	r2,-8(fp)
   47e34:	10c00415 	stw	r3,16(r2)
   47e38:	e0bff917 	ldw	r2,-28(fp)
   47e3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   47e40:	e0bffc17 	ldw	r2,-16(fp)
   47e44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   47e48:	e0bfff17 	ldw	r2,-4(fp)
   47e4c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   47e50:	e0bffa17 	ldw	r2,-24(fp)
   47e54:	00000806 	br	47e78 <OSMemGet+0xe0>
   47e58:	e0bff917 	ldw	r2,-28(fp)
   47e5c:	e0bffd15 	stw	r2,-12(fp)
   47e60:	e0bffd17 	ldw	r2,-12(fp)
   47e64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   47e68:	e0bfff17 	ldw	r2,-4(fp)
   47e6c:	00c01744 	movi	r3,93
   47e70:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   47e74:	0005883a 	mov	r2,zero
}
   47e78:	e037883a 	mov	sp,fp
   47e7c:	df000017 	ldw	fp,0(sp)
   47e80:	dec00104 	addi	sp,sp,4
   47e84:	f800283a 	ret

00047e88 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   47e88:	defff704 	addi	sp,sp,-36
   47e8c:	dfc00815 	stw	ra,32(sp)
   47e90:	df000715 	stw	fp,28(sp)
   47e94:	df000704 	addi	fp,sp,28
   47e98:	e13ffd15 	stw	r4,-12(fp)
   47e9c:	e17ffe15 	stw	r5,-8(fp)
   47ea0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   47ea4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   47ea8:	e0bfff17 	ldw	r2,-4(fp)
   47eac:	1000021e 	bne	r2,zero,47eb8 <OSMemNameGet+0x30>
        return (0);
   47eb0:	0005883a 	mov	r2,zero
   47eb4:	00002d06 	br	47f6c <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   47eb8:	e0bffd17 	ldw	r2,-12(fp)
   47ebc:	1000051e 	bne	r2,zero,47ed4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   47ec0:	e0bfff17 	ldw	r2,-4(fp)
   47ec4:	00c01804 	movi	r3,96
   47ec8:	10c00005 	stb	r3,0(r2)
        return (0);
   47ecc:	0005883a 	mov	r2,zero
   47ed0:	00002606 	br	47f6c <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   47ed4:	e0bffe17 	ldw	r2,-8(fp)
   47ed8:	1000051e 	bne	r2,zero,47ef0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   47edc:	e0bfff17 	ldw	r2,-4(fp)
   47ee0:	00c00304 	movi	r3,12
   47ee4:	10c00005 	stb	r3,0(r2)
        return (0);
   47ee8:	0005883a 	mov	r2,zero
   47eec:	00001f06 	br	47f6c <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   47ef0:	00800174 	movhi	r2,5
   47ef4:	108ad504 	addi	r2,r2,11092
   47ef8:	10800003 	ldbu	r2,0(r2)
   47efc:	10803fcc 	andi	r2,r2,255
   47f00:	10000526 	beq	r2,zero,47f18 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   47f04:	e0bfff17 	ldw	r2,-4(fp)
   47f08:	00c00444 	movi	r3,17
   47f0c:	10c00005 	stb	r3,0(r2)
        return (0);
   47f10:	0005883a 	mov	r2,zero
   47f14:	00001506 	br	47f6c <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   47f18:	0005303a 	rdctl	r2,status
   47f1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   47f20:	e0fffb17 	ldw	r3,-20(fp)
   47f24:	00bfff84 	movi	r2,-2
   47f28:	1884703a 	and	r2,r3,r2
   47f2c:	1001703a 	wrctl	status,r2
  
  return context;
   47f30:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   47f34:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   47f38:	e0bffd17 	ldw	r2,-12(fp)
   47f3c:	10800504 	addi	r2,r2,20
   47f40:	e13ffe17 	ldw	r4,-8(fp)
   47f44:	100b883a 	mov	r5,r2
   47f48:	0045c700 	call	45c70 <OS_StrCopy>
   47f4c:	e0bffa05 	stb	r2,-24(fp)
   47f50:	e0bff917 	ldw	r2,-28(fp)
   47f54:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   47f58:	e0bffc17 	ldw	r2,-16(fp)
   47f5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   47f60:	e0bfff17 	ldw	r2,-4(fp)
   47f64:	10000005 	stb	zero,0(r2)
    return (len);
   47f68:	e0bffa03 	ldbu	r2,-24(fp)
}
   47f6c:	e037883a 	mov	sp,fp
   47f70:	dfc00117 	ldw	ra,4(sp)
   47f74:	df000017 	ldw	fp,0(sp)
   47f78:	dec00204 	addi	sp,sp,8
   47f7c:	f800283a 	ret

00047f80 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   47f80:	defff604 	addi	sp,sp,-40
   47f84:	dfc00915 	stw	ra,36(sp)
   47f88:	df000815 	stw	fp,32(sp)
   47f8c:	df000804 	addi	fp,sp,32
   47f90:	e13ffd15 	stw	r4,-12(fp)
   47f94:	e17ffe15 	stw	r5,-8(fp)
   47f98:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   47f9c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   47fa0:	e0bfff17 	ldw	r2,-4(fp)
   47fa4:	1000011e 	bne	r2,zero,47fac <OSMemNameSet+0x2c>
        return;
   47fa8:	00003606 	br	48084 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   47fac:	e0bffd17 	ldw	r2,-12(fp)
   47fb0:	1000041e 	bne	r2,zero,47fc4 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   47fb4:	e0bfff17 	ldw	r2,-4(fp)
   47fb8:	00c01804 	movi	r3,96
   47fbc:	10c00005 	stb	r3,0(r2)
        return;
   47fc0:	00003006 	br	48084 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   47fc4:	e0bffe17 	ldw	r2,-8(fp)
   47fc8:	1000041e 	bne	r2,zero,47fdc <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   47fcc:	e0bfff17 	ldw	r2,-4(fp)
   47fd0:	00c00304 	movi	r3,12
   47fd4:	10c00005 	stb	r3,0(r2)
        return;
   47fd8:	00002a06 	br	48084 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   47fdc:	00800174 	movhi	r2,5
   47fe0:	108ad504 	addi	r2,r2,11092
   47fe4:	10800003 	ldbu	r2,0(r2)
   47fe8:	10803fcc 	andi	r2,r2,255
   47fec:	10000426 	beq	r2,zero,48000 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   47ff0:	e0bfff17 	ldw	r2,-4(fp)
   47ff4:	00c00484 	movi	r3,18
   47ff8:	10c00005 	stb	r3,0(r2)
        return;
   47ffc:	00002106 	br	48084 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48000:	0005303a 	rdctl	r2,status
   48004:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48008:	e0fffa17 	ldw	r3,-24(fp)
   4800c:	00bfff84 	movi	r2,-2
   48010:	1884703a 	and	r2,r3,r2
   48014:	1001703a 	wrctl	status,r2
  
  return context;
   48018:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   4801c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   48020:	e13ffe17 	ldw	r4,-8(fp)
   48024:	0045ce40 	call	45ce4 <OS_StrLen>
   48028:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   4802c:	e0bff903 	ldbu	r2,-28(fp)
   48030:	10800830 	cmpltui	r2,r2,32
   48034:	1000081e 	bne	r2,zero,48058 <OSMemNameSet+0xd8>
   48038:	e0bff817 	ldw	r2,-32(fp)
   4803c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48040:	e0bffb17 	ldw	r2,-20(fp)
   48044:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   48048:	e0bfff17 	ldw	r2,-4(fp)
   4804c:	00c018c4 	movi	r3,99
   48050:	10c00005 	stb	r3,0(r2)
        return;
   48054:	00000b06 	br	48084 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   48058:	e0bffd17 	ldw	r2,-12(fp)
   4805c:	10800504 	addi	r2,r2,20
   48060:	1009883a 	mov	r4,r2
   48064:	e17ffe17 	ldw	r5,-8(fp)
   48068:	0045c700 	call	45c70 <OS_StrCopy>
   4806c:	e0bff817 	ldw	r2,-32(fp)
   48070:	e0bffc15 	stw	r2,-16(fp)
   48074:	e0bffc17 	ldw	r2,-16(fp)
   48078:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   4807c:	e0bfff17 	ldw	r2,-4(fp)
   48080:	10000005 	stb	zero,0(r2)
}
   48084:	e037883a 	mov	sp,fp
   48088:	dfc00117 	ldw	ra,4(sp)
   4808c:	df000017 	ldw	fp,0(sp)
   48090:	dec00204 	addi	sp,sp,8
   48094:	f800283a 	ret

00048098 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   48098:	defff904 	addi	sp,sp,-28
   4809c:	df000615 	stw	fp,24(sp)
   480a0:	df000604 	addi	fp,sp,24
   480a4:	e13ffe15 	stw	r4,-8(fp)
   480a8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   480ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   480b0:	e0bffe17 	ldw	r2,-8(fp)
   480b4:	1000021e 	bne	r2,zero,480c0 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   480b8:	00801804 	movi	r2,96
   480bc:	00002806 	br	48160 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   480c0:	e0bfff17 	ldw	r2,-4(fp)
   480c4:	1000021e 	bne	r2,zero,480d0 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   480c8:	008017c4 	movi	r2,95
   480cc:	00002406 	br	48160 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   480d0:	0005303a 	rdctl	r2,status
   480d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   480d8:	e0fffb17 	ldw	r3,-20(fp)
   480dc:	00bfff84 	movi	r2,-2
   480e0:	1884703a 	and	r2,r3,r2
   480e4:	1001703a 	wrctl	status,r2
  
  return context;
   480e8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   480ec:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   480f0:	e0bffe17 	ldw	r2,-8(fp)
   480f4:	10c00417 	ldw	r3,16(r2)
   480f8:	e0bffe17 	ldw	r2,-8(fp)
   480fc:	10800317 	ldw	r2,12(r2)
   48100:	18800636 	bltu	r3,r2,4811c <OSMemPut+0x84>
   48104:	e0bffa17 	ldw	r2,-24(fp)
   48108:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4810c:	e0bffc17 	ldw	r2,-16(fp)
   48110:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   48114:	00801784 	movi	r2,94
   48118:	00001106 	br	48160 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   4811c:	e0bffe17 	ldw	r2,-8(fp)
   48120:	10c00117 	ldw	r3,4(r2)
   48124:	e0bfff17 	ldw	r2,-4(fp)
   48128:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   4812c:	e0bffe17 	ldw	r2,-8(fp)
   48130:	e0ffff17 	ldw	r3,-4(fp)
   48134:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   48138:	e0bffe17 	ldw	r2,-8(fp)
   4813c:	10800417 	ldw	r2,16(r2)
   48140:	10c00044 	addi	r3,r2,1
   48144:	e0bffe17 	ldw	r2,-8(fp)
   48148:	10c00415 	stw	r3,16(r2)
   4814c:	e0bffa17 	ldw	r2,-24(fp)
   48150:	e0bffd15 	stw	r2,-12(fp)
   48154:	e0bffd17 	ldw	r2,-12(fp)
   48158:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   4815c:	0005883a 	mov	r2,zero
}
   48160:	e037883a 	mov	sp,fp
   48164:	df000017 	ldw	fp,0(sp)
   48168:	dec00104 	addi	sp,sp,4
   4816c:	f800283a 	ret

00048170 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   48170:	defffa04 	addi	sp,sp,-24
   48174:	df000515 	stw	fp,20(sp)
   48178:	df000504 	addi	fp,sp,20
   4817c:	e13ffe15 	stw	r4,-8(fp)
   48180:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   48184:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   48188:	e0bffe17 	ldw	r2,-8(fp)
   4818c:	1000021e 	bne	r2,zero,48198 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   48190:	00801804 	movi	r2,96
   48194:	00002c06 	br	48248 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   48198:	e0bfff17 	ldw	r2,-4(fp)
   4819c:	1000021e 	bne	r2,zero,481a8 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   481a0:	00801844 	movi	r2,97
   481a4:	00002806 	br	48248 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   481a8:	0005303a 	rdctl	r2,status
   481ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   481b0:	e0fffc17 	ldw	r3,-16(fp)
   481b4:	00bfff84 	movi	r2,-2
   481b8:	1884703a 	and	r2,r3,r2
   481bc:	1001703a 	wrctl	status,r2
  
  return context;
   481c0:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   481c4:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   481c8:	e0bffe17 	ldw	r2,-8(fp)
   481cc:	10c00017 	ldw	r3,0(r2)
   481d0:	e0bfff17 	ldw	r2,-4(fp)
   481d4:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   481d8:	e0bffe17 	ldw	r2,-8(fp)
   481dc:	10c00117 	ldw	r3,4(r2)
   481e0:	e0bfff17 	ldw	r2,-4(fp)
   481e4:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   481e8:	e0bffe17 	ldw	r2,-8(fp)
   481ec:	10c00217 	ldw	r3,8(r2)
   481f0:	e0bfff17 	ldw	r2,-4(fp)
   481f4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   481f8:	e0bffe17 	ldw	r2,-8(fp)
   481fc:	10c00317 	ldw	r3,12(r2)
   48200:	e0bfff17 	ldw	r2,-4(fp)
   48204:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   48208:	e0bffe17 	ldw	r2,-8(fp)
   4820c:	10c00417 	ldw	r3,16(r2)
   48210:	e0bfff17 	ldw	r2,-4(fp)
   48214:	10c00415 	stw	r3,16(r2)
   48218:	e0bffb17 	ldw	r2,-20(fp)
   4821c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48220:	e0bffd17 	ldw	r2,-12(fp)
   48224:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   48228:	e0bfff17 	ldw	r2,-4(fp)
   4822c:	10c00317 	ldw	r3,12(r2)
   48230:	e0bfff17 	ldw	r2,-4(fp)
   48234:	10800417 	ldw	r2,16(r2)
   48238:	1887c83a 	sub	r3,r3,r2
   4823c:	e0bfff17 	ldw	r2,-4(fp)
   48240:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   48244:	0005883a 	mov	r2,zero
}
   48248:	e037883a 	mov	sp,fp
   4824c:	df000017 	ldw	fp,0(sp)
   48250:	dec00104 	addi	sp,sp,4
   48254:	f800283a 	ret

00048258 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   48258:	defffc04 	addi	sp,sp,-16
   4825c:	dfc00315 	stw	ra,12(sp)
   48260:	df000215 	stw	fp,8(sp)
   48264:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   48268:	010001b4 	movhi	r4,6
   4826c:	2123c504 	addi	r4,r4,-28908
   48270:	01430c04 	movi	r5,3120
   48274:	0045a800 	call	45a80 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   48278:	008001b4 	movhi	r2,6
   4827c:	10a3c504 	addi	r2,r2,-28908
   48280:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   48284:	e03fff0d 	sth	zero,-4(fp)
   48288:	00001606 	br	482e4 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   4828c:	e0bfff0b 	ldhu	r2,-4(fp)
   48290:	10800044 	addi	r2,r2,1
   48294:	1009883a 	mov	r4,r2
   48298:	01400d04 	movi	r5,52
   4829c:	00434d80 	call	434d8 <__mulsi3>
   482a0:	1007883a 	mov	r3,r2
   482a4:	008001b4 	movhi	r2,6
   482a8:	10a3c504 	addi	r2,r2,-28908
   482ac:	1887883a 	add	r3,r3,r2
   482b0:	e0bffe17 	ldw	r2,-8(fp)
   482b4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   482b8:	e0bffe17 	ldw	r2,-8(fp)
   482bc:	00c00fc4 	movi	r3,63
   482c0:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   482c4:	e0bffe17 	ldw	r2,-8(fp)
   482c8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   482cc:	e0bffe17 	ldw	r2,-8(fp)
   482d0:	10800d04 	addi	r2,r2,52
   482d4:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   482d8:	e0bfff0b 	ldhu	r2,-4(fp)
   482dc:	10800044 	addi	r2,r2,1
   482e0:	e0bfff0d 	sth	r2,-4(fp)
   482e4:	e0bfff0b 	ldhu	r2,-4(fp)
   482e8:	10800ef0 	cmpltui	r2,r2,59
   482ec:	103fe71e 	bne	r2,zero,4828c <__alt_data_end+0xfffd272c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   482f0:	e0bffe17 	ldw	r2,-8(fp)
   482f4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   482f8:	e0bffe17 	ldw	r2,-8(fp)
   482fc:	00c00fc4 	movi	r3,63
   48300:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   48304:	e0bffe17 	ldw	r2,-8(fp)
   48308:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   4830c:	00800174 	movhi	r2,5
   48310:	108ad004 	addi	r2,r2,11072
   48314:	00c001b4 	movhi	r3,6
   48318:	18e3c504 	addi	r3,r3,-28908
   4831c:	10c00015 	stw	r3,0(r2)
#endif
}
   48320:	e037883a 	mov	sp,fp
   48324:	dfc00117 	ldw	ra,4(sp)
   48328:	df000017 	ldw	fp,0(sp)
   4832c:	dec00204 	addi	sp,sp,8
   48330:	f800283a 	ret

00048334 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   48334:	defff804 	addi	sp,sp,-32
   48338:	df000715 	stw	fp,28(sp)
   4833c:	df000704 	addi	fp,sp,28
   48340:	e13ffe15 	stw	r4,-8(fp)
   48344:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   48348:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   4834c:	e0bfff17 	ldw	r2,-4(fp)
   48350:	1000021e 	bne	r2,zero,4835c <OSQAccept+0x28>
        return ((void *)0);
   48354:	0005883a 	mov	r2,zero
   48358:	00004206 	br	48464 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   4835c:	e0bffe17 	ldw	r2,-8(fp)
   48360:	1000051e 	bne	r2,zero,48378 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   48364:	e0bfff17 	ldw	r2,-4(fp)
   48368:	00c00104 	movi	r3,4
   4836c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   48370:	0005883a 	mov	r2,zero
   48374:	00003b06 	br	48464 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   48378:	e0bffe17 	ldw	r2,-8(fp)
   4837c:	10800003 	ldbu	r2,0(r2)
   48380:	10803fcc 	andi	r2,r2,255
   48384:	108000a0 	cmpeqi	r2,r2,2
   48388:	1000051e 	bne	r2,zero,483a0 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   4838c:	e0bfff17 	ldw	r2,-4(fp)
   48390:	00c00044 	movi	r3,1
   48394:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   48398:	0005883a 	mov	r2,zero
   4839c:	00003106 	br	48464 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   483a0:	0005303a 	rdctl	r2,status
   483a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   483a8:	e0fffc17 	ldw	r3,-16(fp)
   483ac:	00bfff84 	movi	r2,-2
   483b0:	1884703a 	and	r2,r3,r2
   483b4:	1001703a 	wrctl	status,r2
  
  return context;
   483b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   483bc:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   483c0:	e0bffe17 	ldw	r2,-8(fp)
   483c4:	10800117 	ldw	r2,4(r2)
   483c8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   483cc:	e0bffb17 	ldw	r2,-20(fp)
   483d0:	1080058b 	ldhu	r2,22(r2)
   483d4:	10bfffcc 	andi	r2,r2,65535
   483d8:	10001926 	beq	r2,zero,48440 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   483dc:	e0bffb17 	ldw	r2,-20(fp)
   483e0:	10800417 	ldw	r2,16(r2)
   483e4:	11000104 	addi	r4,r2,4
   483e8:	e0fffb17 	ldw	r3,-20(fp)
   483ec:	19000415 	stw	r4,16(r3)
   483f0:	10800017 	ldw	r2,0(r2)
   483f4:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   483f8:	e0bffb17 	ldw	r2,-20(fp)
   483fc:	1080058b 	ldhu	r2,22(r2)
   48400:	10bfffc4 	addi	r2,r2,-1
   48404:	1007883a 	mov	r3,r2
   48408:	e0bffb17 	ldw	r2,-20(fp)
   4840c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   48410:	e0bffb17 	ldw	r2,-20(fp)
   48414:	10c00417 	ldw	r3,16(r2)
   48418:	e0bffb17 	ldw	r2,-20(fp)
   4841c:	10800217 	ldw	r2,8(r2)
   48420:	1880041e 	bne	r3,r2,48434 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   48424:	e0bffb17 	ldw	r2,-20(fp)
   48428:	10c00117 	ldw	r3,4(r2)
   4842c:	e0bffb17 	ldw	r2,-20(fp)
   48430:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   48434:	e0bfff17 	ldw	r2,-4(fp)
   48438:	10000005 	stb	zero,0(r2)
   4843c:	00000406 	br	48450 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   48440:	e0bfff17 	ldw	r2,-4(fp)
   48444:	00c007c4 	movi	r3,31
   48448:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   4844c:	e03ff915 	stw	zero,-28(fp)
   48450:	e0bffa17 	ldw	r2,-24(fp)
   48454:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48458:	e0bffd17 	ldw	r2,-12(fp)
   4845c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   48460:	e0bff917 	ldw	r2,-28(fp)
}
   48464:	e037883a 	mov	sp,fp
   48468:	df000017 	ldw	fp,0(sp)
   4846c:	dec00104 	addi	sp,sp,4
   48470:	f800283a 	ret

00048474 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   48474:	defff404 	addi	sp,sp,-48
   48478:	dfc00b15 	stw	ra,44(sp)
   4847c:	df000a15 	stw	fp,40(sp)
   48480:	df000a04 	addi	fp,sp,40
   48484:	e13ffe15 	stw	r4,-8(fp)
   48488:	2805883a 	mov	r2,r5
   4848c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   48490:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   48494:	00800174 	movhi	r2,5
   48498:	108ad504 	addi	r2,r2,11092
   4849c:	10800003 	ldbu	r2,0(r2)
   484a0:	10803fcc 	andi	r2,r2,255
   484a4:	10000226 	beq	r2,zero,484b0 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   484a8:	0005883a 	mov	r2,zero
   484ac:	00006b06 	br	4865c <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   484b0:	0005303a 	rdctl	r2,status
   484b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   484b8:	e0fff917 	ldw	r3,-28(fp)
   484bc:	00bfff84 	movi	r2,-2
   484c0:	1884703a 	and	r2,r3,r2
   484c4:	1001703a 	wrctl	status,r2
  
  return context;
   484c8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   484cc:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   484d0:	00800174 	movhi	r2,5
   484d4:	108ad404 	addi	r2,r2,11088
   484d8:	10800017 	ldw	r2,0(r2)
   484dc:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   484e0:	00800174 	movhi	r2,5
   484e4:	108ad404 	addi	r2,r2,11088
   484e8:	10800017 	ldw	r2,0(r2)
   484ec:	10000726 	beq	r2,zero,4850c <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   484f0:	00800174 	movhi	r2,5
   484f4:	108ad404 	addi	r2,r2,11088
   484f8:	10800017 	ldw	r2,0(r2)
   484fc:	10c00117 	ldw	r3,4(r2)
   48500:	00800174 	movhi	r2,5
   48504:	108ad404 	addi	r2,r2,11088
   48508:	10c00015 	stw	r3,0(r2)
   4850c:	e0bff717 	ldw	r2,-36(fp)
   48510:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48514:	e0bffa17 	ldw	r2,-24(fp)
   48518:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   4851c:	e0bff617 	ldw	r2,-40(fp)
   48520:	10004d26 	beq	r2,zero,48658 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48524:	0005303a 	rdctl	r2,status
   48528:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4852c:	e0fffb17 	ldw	r3,-20(fp)
   48530:	00bfff84 	movi	r2,-2
   48534:	1884703a 	and	r2,r3,r2
   48538:	1001703a 	wrctl	status,r2
  
  return context;
   4853c:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   48540:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   48544:	00800174 	movhi	r2,5
   48548:	108ad204 	addi	r2,r2,11080
   4854c:	10800017 	ldw	r2,0(r2)
   48550:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   48554:	e0bff817 	ldw	r2,-32(fp)
   48558:	10003126 	beq	r2,zero,48620 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   4855c:	00800174 	movhi	r2,5
   48560:	108ad204 	addi	r2,r2,11080
   48564:	10800017 	ldw	r2,0(r2)
   48568:	10c00017 	ldw	r3,0(r2)
   4856c:	00800174 	movhi	r2,5
   48570:	108ad204 	addi	r2,r2,11080
   48574:	10c00015 	stw	r3,0(r2)
   48578:	e0bff717 	ldw	r2,-36(fp)
   4857c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48580:	e0bffc17 	ldw	r2,-16(fp)
   48584:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   48588:	e0bff817 	ldw	r2,-32(fp)
   4858c:	e0fffe17 	ldw	r3,-8(fp)
   48590:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   48594:	e0bfff0b 	ldhu	r2,-4(fp)
   48598:	1085883a 	add	r2,r2,r2
   4859c:	1085883a 	add	r2,r2,r2
   485a0:	1007883a 	mov	r3,r2
   485a4:	e0bffe17 	ldw	r2,-8(fp)
   485a8:	10c7883a 	add	r3,r2,r3
   485ac:	e0bff817 	ldw	r2,-32(fp)
   485b0:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   485b4:	e0bff817 	ldw	r2,-32(fp)
   485b8:	e0fffe17 	ldw	r3,-8(fp)
   485bc:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   485c0:	e0bff817 	ldw	r2,-32(fp)
   485c4:	e0fffe17 	ldw	r3,-8(fp)
   485c8:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   485cc:	e0bff817 	ldw	r2,-32(fp)
   485d0:	e0ffff0b 	ldhu	r3,-4(fp)
   485d4:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   485d8:	e0bff817 	ldw	r2,-32(fp)
   485dc:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   485e0:	e0bff617 	ldw	r2,-40(fp)
   485e4:	00c00084 	movi	r3,2
   485e8:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   485ec:	e0bff617 	ldw	r2,-40(fp)
   485f0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   485f4:	e0bff617 	ldw	r2,-40(fp)
   485f8:	e0fff817 	ldw	r3,-32(fp)
   485fc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   48600:	e0bff617 	ldw	r2,-40(fp)
   48604:	00c00fc4 	movi	r3,63
   48608:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   4860c:	e0bff617 	ldw	r2,-40(fp)
   48610:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   48614:	e13ff617 	ldw	r4,-40(fp)
   48618:	00456bc0 	call	456bc <OS_EventWaitListInit>
   4861c:	00000e06 	br	48658 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   48620:	00800174 	movhi	r2,5
   48624:	108ad404 	addi	r2,r2,11088
   48628:	10c00017 	ldw	r3,0(r2)
   4862c:	e0bff617 	ldw	r2,-40(fp)
   48630:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   48634:	00800174 	movhi	r2,5
   48638:	108ad404 	addi	r2,r2,11088
   4863c:	e0fff617 	ldw	r3,-40(fp)
   48640:	10c00015 	stw	r3,0(r2)
   48644:	e0bff717 	ldw	r2,-36(fp)
   48648:	e0bffd15 	stw	r2,-12(fp)
   4864c:	e0bffd17 	ldw	r2,-12(fp)
   48650:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   48654:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   48658:	e0bff617 	ldw	r2,-40(fp)
}
   4865c:	e037883a 	mov	sp,fp
   48660:	dfc00117 	ldw	ra,4(sp)
   48664:	df000017 	ldw	fp,0(sp)
   48668:	dec00204 	addi	sp,sp,8
   4866c:	f800283a 	ret

00048670 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   48670:	defff204 	addi	sp,sp,-56
   48674:	dfc00d15 	stw	ra,52(sp)
   48678:	df000c15 	stw	fp,48(sp)
   4867c:	df000c04 	addi	fp,sp,48
   48680:	e13ffd15 	stw	r4,-12(fp)
   48684:	2805883a 	mov	r2,r5
   48688:	e1bfff15 	stw	r6,-4(fp)
   4868c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   48690:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   48694:	e0bfff17 	ldw	r2,-4(fp)
   48698:	1000021e 	bne	r2,zero,486a4 <OSQDel+0x34>
        return (pevent);
   4869c:	e0bffd17 	ldw	r2,-12(fp)
   486a0:	0000a006 	br	48924 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   486a4:	e0bffd17 	ldw	r2,-12(fp)
   486a8:	1000051e 	bne	r2,zero,486c0 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   486ac:	e0bfff17 	ldw	r2,-4(fp)
   486b0:	00c00104 	movi	r3,4
   486b4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   486b8:	e0bffd17 	ldw	r2,-12(fp)
   486bc:	00009906 	br	48924 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   486c0:	e0bffd17 	ldw	r2,-12(fp)
   486c4:	10800003 	ldbu	r2,0(r2)
   486c8:	10803fcc 	andi	r2,r2,255
   486cc:	108000a0 	cmpeqi	r2,r2,2
   486d0:	1000051e 	bne	r2,zero,486e8 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   486d4:	e0bfff17 	ldw	r2,-4(fp)
   486d8:	00c00044 	movi	r3,1
   486dc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   486e0:	e0bffd17 	ldw	r2,-12(fp)
   486e4:	00008f06 	br	48924 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   486e8:	00800174 	movhi	r2,5
   486ec:	108ad504 	addi	r2,r2,11092
   486f0:	10800003 	ldbu	r2,0(r2)
   486f4:	10803fcc 	andi	r2,r2,255
   486f8:	10000526 	beq	r2,zero,48710 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   486fc:	e0bfff17 	ldw	r2,-4(fp)
   48700:	00c003c4 	movi	r3,15
   48704:	10c00005 	stb	r3,0(r2)
        return (pevent);
   48708:	e0bffd17 	ldw	r2,-12(fp)
   4870c:	00008506 	br	48924 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48710:	0005303a 	rdctl	r2,status
   48714:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48718:	e0fff817 	ldw	r3,-32(fp)
   4871c:	00bfff84 	movi	r2,-2
   48720:	1884703a 	and	r2,r3,r2
   48724:	1001703a 	wrctl	status,r2
  
  return context;
   48728:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   4872c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   48730:	e0bffd17 	ldw	r2,-12(fp)
   48734:	10800283 	ldbu	r2,10(r2)
   48738:	10803fcc 	andi	r2,r2,255
   4873c:	10000326 	beq	r2,zero,4874c <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   48740:	00800044 	movi	r2,1
   48744:	e0bff405 	stb	r2,-48(fp)
   48748:	00000106 	br	48750 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   4874c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   48750:	e0bffe03 	ldbu	r2,-8(fp)
   48754:	10000326 	beq	r2,zero,48764 <OSQDel+0xf4>
   48758:	10800060 	cmpeqi	r2,r2,1
   4875c:	1000381e 	bne	r2,zero,48840 <OSQDel+0x1d0>
   48760:	00006506 	br	488f8 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   48764:	e0bff403 	ldbu	r2,-48(fp)
   48768:	1000261e 	bne	r2,zero,48804 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   4876c:	e0bffd17 	ldw	r2,-12(fp)
   48770:	00c00fc4 	movi	r3,63
   48774:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   48778:	e0bffd17 	ldw	r2,-12(fp)
   4877c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   48780:	e0bffd17 	ldw	r2,-12(fp)
   48784:	10800117 	ldw	r2,4(r2)
   48788:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   4878c:	00800174 	movhi	r2,5
   48790:	108ad204 	addi	r2,r2,11080
   48794:	10c00017 	ldw	r3,0(r2)
   48798:	e0bff717 	ldw	r2,-36(fp)
   4879c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   487a0:	00800174 	movhi	r2,5
   487a4:	108ad204 	addi	r2,r2,11080
   487a8:	e0fff717 	ldw	r3,-36(fp)
   487ac:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   487b0:	e0bffd17 	ldw	r2,-12(fp)
   487b4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   487b8:	00800174 	movhi	r2,5
   487bc:	108ad404 	addi	r2,r2,11088
   487c0:	10c00017 	ldw	r3,0(r2)
   487c4:	e0bffd17 	ldw	r2,-12(fp)
   487c8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   487cc:	e0bffd17 	ldw	r2,-12(fp)
   487d0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   487d4:	00800174 	movhi	r2,5
   487d8:	108ad404 	addi	r2,r2,11088
   487dc:	e0fffd17 	ldw	r3,-12(fp)
   487e0:	10c00015 	stw	r3,0(r2)
   487e4:	e0bff617 	ldw	r2,-40(fp)
   487e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   487ec:	e0bff917 	ldw	r2,-28(fp)
   487f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   487f4:	e0bfff17 	ldw	r2,-4(fp)
   487f8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   487fc:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   48800:	00004706 	br	48920 <OSQDel+0x2b0>
   48804:	e0bff617 	ldw	r2,-40(fp)
   48808:	e0bffa15 	stw	r2,-24(fp)
   4880c:	e0bffa17 	ldw	r2,-24(fp)
   48810:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   48814:	e0bfff17 	ldw	r2,-4(fp)
   48818:	00c01244 	movi	r3,73
   4881c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   48820:	e0bffd17 	ldw	r2,-12(fp)
   48824:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   48828:	00003d06 	br	48920 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   4882c:	e13ffd17 	ldw	r4,-12(fp)
   48830:	000b883a 	mov	r5,zero
   48834:	01800104 	movi	r6,4
   48838:	000f883a 	mov	r7,zero
   4883c:	004511c0 	call	4511c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   48840:	e0bffd17 	ldw	r2,-12(fp)
   48844:	10800283 	ldbu	r2,10(r2)
   48848:	10803fcc 	andi	r2,r2,255
   4884c:	103ff71e 	bne	r2,zero,4882c <__alt_data_end+0xfffd2ccc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   48850:	e0bffd17 	ldw	r2,-12(fp)
   48854:	00c00fc4 	movi	r3,63
   48858:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   4885c:	e0bffd17 	ldw	r2,-12(fp)
   48860:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   48864:	e0bffd17 	ldw	r2,-12(fp)
   48868:	10800117 	ldw	r2,4(r2)
   4886c:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   48870:	00800174 	movhi	r2,5
   48874:	108ad204 	addi	r2,r2,11080
   48878:	10c00017 	ldw	r3,0(r2)
   4887c:	e0bff717 	ldw	r2,-36(fp)
   48880:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   48884:	00800174 	movhi	r2,5
   48888:	108ad204 	addi	r2,r2,11080
   4888c:	e0fff717 	ldw	r3,-36(fp)
   48890:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   48894:	e0bffd17 	ldw	r2,-12(fp)
   48898:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   4889c:	00800174 	movhi	r2,5
   488a0:	108ad404 	addi	r2,r2,11088
   488a4:	10c00017 	ldw	r3,0(r2)
   488a8:	e0bffd17 	ldw	r2,-12(fp)
   488ac:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   488b0:	e0bffd17 	ldw	r2,-12(fp)
   488b4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   488b8:	00800174 	movhi	r2,5
   488bc:	108ad404 	addi	r2,r2,11088
   488c0:	e0fffd17 	ldw	r3,-12(fp)
   488c4:	10c00015 	stw	r3,0(r2)
   488c8:	e0bff617 	ldw	r2,-40(fp)
   488cc:	e0bffb15 	stw	r2,-20(fp)
   488d0:	e0bffb17 	ldw	r2,-20(fp)
   488d4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   488d8:	e0bff403 	ldbu	r2,-48(fp)
   488dc:	10800058 	cmpnei	r2,r2,1
   488e0:	1000011e 	bne	r2,zero,488e8 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   488e4:	0045b340 	call	45b34 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   488e8:	e0bfff17 	ldw	r2,-4(fp)
   488ec:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   488f0:	e03ff515 	stw	zero,-44(fp)
             break;
   488f4:	00000a06 	br	48920 <OSQDel+0x2b0>
   488f8:	e0bff617 	ldw	r2,-40(fp)
   488fc:	e0bffc15 	stw	r2,-16(fp)
   48900:	e0bffc17 	ldw	r2,-16(fp)
   48904:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   48908:	e0bfff17 	ldw	r2,-4(fp)
   4890c:	00c001c4 	movi	r3,7
   48910:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   48914:	e0bffd17 	ldw	r2,-12(fp)
   48918:	e0bff515 	stw	r2,-44(fp)
             break;
   4891c:	0001883a 	nop
    }
    return (pevent_return);
   48920:	e0bff517 	ldw	r2,-44(fp)
}
   48924:	e037883a 	mov	sp,fp
   48928:	dfc00117 	ldw	ra,4(sp)
   4892c:	df000017 	ldw	fp,0(sp)
   48930:	dec00204 	addi	sp,sp,8
   48934:	f800283a 	ret

00048938 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   48938:	defffa04 	addi	sp,sp,-24
   4893c:	df000515 	stw	fp,20(sp)
   48940:	df000504 	addi	fp,sp,20
   48944:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   48948:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   4894c:	e0bfff17 	ldw	r2,-4(fp)
   48950:	1000021e 	bne	r2,zero,4895c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   48954:	00800104 	movi	r2,4
   48958:	00002106 	br	489e0 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   4895c:	e0bfff17 	ldw	r2,-4(fp)
   48960:	10800003 	ldbu	r2,0(r2)
   48964:	10803fcc 	andi	r2,r2,255
   48968:	108000a0 	cmpeqi	r2,r2,2
   4896c:	1000021e 	bne	r2,zero,48978 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   48970:	00800044 	movi	r2,1
   48974:	00001a06 	br	489e0 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48978:	0005303a 	rdctl	r2,status
   4897c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48980:	e0fffd17 	ldw	r3,-12(fp)
   48984:	00bfff84 	movi	r2,-2
   48988:	1884703a 	and	r2,r3,r2
   4898c:	1001703a 	wrctl	status,r2
  
  return context;
   48990:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   48994:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   48998:	e0bfff17 	ldw	r2,-4(fp)
   4899c:	10800117 	ldw	r2,4(r2)
   489a0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   489a4:	e0bffc17 	ldw	r2,-16(fp)
   489a8:	10c00117 	ldw	r3,4(r2)
   489ac:	e0bffc17 	ldw	r2,-16(fp)
   489b0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   489b4:	e0bffc17 	ldw	r2,-16(fp)
   489b8:	10c00117 	ldw	r3,4(r2)
   489bc:	e0bffc17 	ldw	r2,-16(fp)
   489c0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   489c4:	e0bffc17 	ldw	r2,-16(fp)
   489c8:	1000058d 	sth	zero,22(r2)
   489cc:	e0bffb17 	ldw	r2,-20(fp)
   489d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   489d4:	e0bffe17 	ldw	r2,-8(fp)
   489d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   489dc:	0005883a 	mov	r2,zero
}
   489e0:	e037883a 	mov	sp,fp
   489e4:	df000017 	ldw	fp,0(sp)
   489e8:	dec00104 	addi	sp,sp,4
   489ec:	f800283a 	ret

000489f0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   489f0:	defff304 	addi	sp,sp,-52
   489f4:	dfc00c15 	stw	ra,48(sp)
   489f8:	df000b15 	stw	fp,44(sp)
   489fc:	df000b04 	addi	fp,sp,44
   48a00:	e13ffd15 	stw	r4,-12(fp)
   48a04:	2805883a 	mov	r2,r5
   48a08:	e1bfff15 	stw	r6,-4(fp)
   48a0c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   48a10:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   48a14:	e0bfff17 	ldw	r2,-4(fp)
   48a18:	1000021e 	bne	r2,zero,48a24 <OSQPend+0x34>
        return ((void *)0);
   48a1c:	0005883a 	mov	r2,zero
   48a20:	0000ad06 	br	48cd8 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   48a24:	e0bffd17 	ldw	r2,-12(fp)
   48a28:	1000051e 	bne	r2,zero,48a40 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   48a2c:	e0bfff17 	ldw	r2,-4(fp)
   48a30:	00c00104 	movi	r3,4
   48a34:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   48a38:	0005883a 	mov	r2,zero
   48a3c:	0000a606 	br	48cd8 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   48a40:	e0bffd17 	ldw	r2,-12(fp)
   48a44:	10800003 	ldbu	r2,0(r2)
   48a48:	10803fcc 	andi	r2,r2,255
   48a4c:	108000a0 	cmpeqi	r2,r2,2
   48a50:	1000051e 	bne	r2,zero,48a68 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   48a54:	e0bfff17 	ldw	r2,-4(fp)
   48a58:	00c00044 	movi	r3,1
   48a5c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   48a60:	0005883a 	mov	r2,zero
   48a64:	00009c06 	br	48cd8 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   48a68:	00800174 	movhi	r2,5
   48a6c:	108ad504 	addi	r2,r2,11092
   48a70:	10800003 	ldbu	r2,0(r2)
   48a74:	10803fcc 	andi	r2,r2,255
   48a78:	10000526 	beq	r2,zero,48a90 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   48a7c:	e0bfff17 	ldw	r2,-4(fp)
   48a80:	00c00084 	movi	r3,2
   48a84:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   48a88:	0005883a 	mov	r2,zero
   48a8c:	00009206 	br	48cd8 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   48a90:	00800174 	movhi	r2,5
   48a94:	108ac704 	addi	r2,r2,11036
   48a98:	10800003 	ldbu	r2,0(r2)
   48a9c:	10803fcc 	andi	r2,r2,255
   48aa0:	10000526 	beq	r2,zero,48ab8 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   48aa4:	e0bfff17 	ldw	r2,-4(fp)
   48aa8:	00c00344 	movi	r3,13
   48aac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   48ab0:	0005883a 	mov	r2,zero
   48ab4:	00008806 	br	48cd8 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48ab8:	0005303a 	rdctl	r2,status
   48abc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48ac0:	e0fff817 	ldw	r3,-32(fp)
   48ac4:	00bfff84 	movi	r2,-2
   48ac8:	1884703a 	and	r2,r3,r2
   48acc:	1001703a 	wrctl	status,r2
  
  return context;
   48ad0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   48ad4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   48ad8:	e0bffd17 	ldw	r2,-12(fp)
   48adc:	10800117 	ldw	r2,4(r2)
   48ae0:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   48ae4:	e0bff717 	ldw	r2,-36(fp)
   48ae8:	1080058b 	ldhu	r2,22(r2)
   48aec:	10bfffcc 	andi	r2,r2,65535
   48af0:	10001e26 	beq	r2,zero,48b6c <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   48af4:	e0bff717 	ldw	r2,-36(fp)
   48af8:	10800417 	ldw	r2,16(r2)
   48afc:	11000104 	addi	r4,r2,4
   48b00:	e0fff717 	ldw	r3,-36(fp)
   48b04:	19000415 	stw	r4,16(r3)
   48b08:	10800017 	ldw	r2,0(r2)
   48b0c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   48b10:	e0bff717 	ldw	r2,-36(fp)
   48b14:	1080058b 	ldhu	r2,22(r2)
   48b18:	10bfffc4 	addi	r2,r2,-1
   48b1c:	1007883a 	mov	r3,r2
   48b20:	e0bff717 	ldw	r2,-36(fp)
   48b24:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   48b28:	e0bff717 	ldw	r2,-36(fp)
   48b2c:	10c00417 	ldw	r3,16(r2)
   48b30:	e0bff717 	ldw	r2,-36(fp)
   48b34:	10800217 	ldw	r2,8(r2)
   48b38:	1880041e 	bne	r3,r2,48b4c <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   48b3c:	e0bff717 	ldw	r2,-36(fp)
   48b40:	10c00117 	ldw	r3,4(r2)
   48b44:	e0bff717 	ldw	r2,-36(fp)
   48b48:	10c00415 	stw	r3,16(r2)
   48b4c:	e0bff617 	ldw	r2,-40(fp)
   48b50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48b54:	e0bff917 	ldw	r2,-28(fp)
   48b58:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   48b5c:	e0bfff17 	ldw	r2,-4(fp)
   48b60:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   48b64:	e0bff517 	ldw	r2,-44(fp)
   48b68:	00005b06 	br	48cd8 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   48b6c:	00800174 	movhi	r2,5
   48b70:	108ad604 	addi	r2,r2,11096
   48b74:	10c00017 	ldw	r3,0(r2)
   48b78:	00800174 	movhi	r2,5
   48b7c:	108ad604 	addi	r2,r2,11096
   48b80:	10800017 	ldw	r2,0(r2)
   48b84:	10800c03 	ldbu	r2,48(r2)
   48b88:	10800114 	ori	r2,r2,4
   48b8c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   48b90:	00800174 	movhi	r2,5
   48b94:	108ad604 	addi	r2,r2,11096
   48b98:	10800017 	ldw	r2,0(r2)
   48b9c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   48ba0:	00800174 	movhi	r2,5
   48ba4:	108ad604 	addi	r2,r2,11096
   48ba8:	10800017 	ldw	r2,0(r2)
   48bac:	e0fffe0b 	ldhu	r3,-8(fp)
   48bb0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   48bb4:	e13ffd17 	ldw	r4,-12(fp)
   48bb8:	00452b40 	call	452b4 <OS_EventTaskWait>
   48bbc:	e0bff617 	ldw	r2,-40(fp)
   48bc0:	e0bffa15 	stw	r2,-24(fp)
   48bc4:	e0bffa17 	ldw	r2,-24(fp)
   48bc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   48bcc:	0045b340 	call	45b34 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48bd0:	0005303a 	rdctl	r2,status
   48bd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48bd8:	e0fffb17 	ldw	r3,-20(fp)
   48bdc:	00bfff84 	movi	r2,-2
   48be0:	1884703a 	and	r2,r3,r2
   48be4:	1001703a 	wrctl	status,r2
  
  return context;
   48be8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   48bec:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   48bf0:	00800174 	movhi	r2,5
   48bf4:	108ad604 	addi	r2,r2,11096
   48bf8:	10800017 	ldw	r2,0(r2)
   48bfc:	10800c43 	ldbu	r2,49(r2)
   48c00:	10803fcc 	andi	r2,r2,255
   48c04:	10000326 	beq	r2,zero,48c14 <OSQPend+0x224>
   48c08:	108000a0 	cmpeqi	r2,r2,2
   48c0c:	1000091e 	bne	r2,zero,48c34 <OSQPend+0x244>
   48c10:	00000d06 	br	48c48 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   48c14:	00800174 	movhi	r2,5
   48c18:	108ad604 	addi	r2,r2,11096
   48c1c:	10800017 	ldw	r2,0(r2)
   48c20:	10800917 	ldw	r2,36(r2)
   48c24:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   48c28:	e0bfff17 	ldw	r2,-4(fp)
   48c2c:	10000005 	stb	zero,0(r2)
             break;
   48c30:	00001006 	br	48c74 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   48c34:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   48c38:	e0bfff17 	ldw	r2,-4(fp)
   48c3c:	00c00384 	movi	r3,14
   48c40:	10c00005 	stb	r3,0(r2)
             break;
   48c44:	00000b06 	br	48c74 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   48c48:	00800174 	movhi	r2,5
   48c4c:	108ad604 	addi	r2,r2,11096
   48c50:	10800017 	ldw	r2,0(r2)
   48c54:	1009883a 	mov	r4,r2
   48c58:	e17ffd17 	ldw	r5,-12(fp)
   48c5c:	004550c0 	call	4550c <OS_EventTaskRemove>
             pmsg = (void *)0;
   48c60:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   48c64:	e0bfff17 	ldw	r2,-4(fp)
   48c68:	00c00284 	movi	r3,10
   48c6c:	10c00005 	stb	r3,0(r2)
             break;
   48c70:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   48c74:	00800174 	movhi	r2,5
   48c78:	108ad604 	addi	r2,r2,11096
   48c7c:	10800017 	ldw	r2,0(r2)
   48c80:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   48c84:	00800174 	movhi	r2,5
   48c88:	108ad604 	addi	r2,r2,11096
   48c8c:	10800017 	ldw	r2,0(r2)
   48c90:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   48c94:	00800174 	movhi	r2,5
   48c98:	108ad604 	addi	r2,r2,11096
   48c9c:	10800017 	ldw	r2,0(r2)
   48ca0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   48ca4:	00800174 	movhi	r2,5
   48ca8:	108ad604 	addi	r2,r2,11096
   48cac:	10800017 	ldw	r2,0(r2)
   48cb0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   48cb4:	00800174 	movhi	r2,5
   48cb8:	108ad604 	addi	r2,r2,11096
   48cbc:	10800017 	ldw	r2,0(r2)
   48cc0:	10000915 	stw	zero,36(r2)
   48cc4:	e0bff617 	ldw	r2,-40(fp)
   48cc8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48ccc:	e0bffc17 	ldw	r2,-16(fp)
   48cd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   48cd4:	e0bff517 	ldw	r2,-44(fp)
}
   48cd8:	e037883a 	mov	sp,fp
   48cdc:	dfc00117 	ldw	ra,4(sp)
   48ce0:	df000017 	ldw	fp,0(sp)
   48ce4:	dec00204 	addi	sp,sp,8
   48ce8:	f800283a 	ret

00048cec <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   48cec:	defff604 	addi	sp,sp,-40
   48cf0:	dfc00915 	stw	ra,36(sp)
   48cf4:	df000815 	stw	fp,32(sp)
   48cf8:	df000804 	addi	fp,sp,32
   48cfc:	e13ffd15 	stw	r4,-12(fp)
   48d00:	2805883a 	mov	r2,r5
   48d04:	e1bfff15 	stw	r6,-4(fp)
   48d08:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   48d0c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   48d10:	e0bfff17 	ldw	r2,-4(fp)
   48d14:	1000021e 	bne	r2,zero,48d20 <OSQPendAbort+0x34>
        return (0);
   48d18:	0005883a 	mov	r2,zero
   48d1c:	00004906 	br	48e44 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   48d20:	e0bffd17 	ldw	r2,-12(fp)
   48d24:	1000051e 	bne	r2,zero,48d3c <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   48d28:	e0bfff17 	ldw	r2,-4(fp)
   48d2c:	00c00104 	movi	r3,4
   48d30:	10c00005 	stb	r3,0(r2)
        return (0);
   48d34:	0005883a 	mov	r2,zero
   48d38:	00004206 	br	48e44 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   48d3c:	e0bffd17 	ldw	r2,-12(fp)
   48d40:	10800003 	ldbu	r2,0(r2)
   48d44:	10803fcc 	andi	r2,r2,255
   48d48:	108000a0 	cmpeqi	r2,r2,2
   48d4c:	1000051e 	bne	r2,zero,48d64 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   48d50:	e0bfff17 	ldw	r2,-4(fp)
   48d54:	00c00044 	movi	r3,1
   48d58:	10c00005 	stb	r3,0(r2)
        return (0);
   48d5c:	0005883a 	mov	r2,zero
   48d60:	00003806 	br	48e44 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48d64:	0005303a 	rdctl	r2,status
   48d68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48d6c:	e0fffa17 	ldw	r3,-24(fp)
   48d70:	00bfff84 	movi	r2,-2
   48d74:	1884703a 	and	r2,r3,r2
   48d78:	1001703a 	wrctl	status,r2
  
  return context;
   48d7c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   48d80:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   48d84:	e0bffd17 	ldw	r2,-12(fp)
   48d88:	10800283 	ldbu	r2,10(r2)
   48d8c:	10803fcc 	andi	r2,r2,255
   48d90:	10002526 	beq	r2,zero,48e28 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   48d94:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   48d98:	e0bffe03 	ldbu	r2,-8(fp)
   48d9c:	10800060 	cmpeqi	r2,r2,1
   48da0:	10000e26 	beq	r2,zero,48ddc <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   48da4:	00000806 	br	48dc8 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   48da8:	e13ffd17 	ldw	r4,-12(fp)
   48dac:	000b883a 	mov	r5,zero
   48db0:	01800104 	movi	r6,4
   48db4:	01c00084 	movi	r7,2
   48db8:	004511c0 	call	4511c <OS_EventTaskRdy>
                     nbr_tasks++;
   48dbc:	e0bff803 	ldbu	r2,-32(fp)
   48dc0:	10800044 	addi	r2,r2,1
   48dc4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   48dc8:	e0bffd17 	ldw	r2,-12(fp)
   48dcc:	10800283 	ldbu	r2,10(r2)
   48dd0:	10803fcc 	andi	r2,r2,255
   48dd4:	103ff41e 	bne	r2,zero,48da8 <__alt_data_end+0xfffd3248>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   48dd8:	00000906 	br	48e00 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   48ddc:	e13ffd17 	ldw	r4,-12(fp)
   48de0:	000b883a 	mov	r5,zero
   48de4:	01800104 	movi	r6,4
   48de8:	01c00084 	movi	r7,2
   48dec:	004511c0 	call	4511c <OS_EventTaskRdy>
                 nbr_tasks++;
   48df0:	e0bff803 	ldbu	r2,-32(fp)
   48df4:	10800044 	addi	r2,r2,1
   48df8:	e0bff805 	stb	r2,-32(fp)
                 break;
   48dfc:	0001883a 	nop
   48e00:	e0bff917 	ldw	r2,-28(fp)
   48e04:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48e08:	e0bffb17 	ldw	r2,-20(fp)
   48e0c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   48e10:	0045b340 	call	45b34 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   48e14:	e0bfff17 	ldw	r2,-4(fp)
   48e18:	00c00384 	movi	r3,14
   48e1c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   48e20:	e0bff803 	ldbu	r2,-32(fp)
   48e24:	00000706 	br	48e44 <OSQPendAbort+0x158>
   48e28:	e0bff917 	ldw	r2,-28(fp)
   48e2c:	e0bffc15 	stw	r2,-16(fp)
   48e30:	e0bffc17 	ldw	r2,-16(fp)
   48e34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   48e38:	e0bfff17 	ldw	r2,-4(fp)
   48e3c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   48e40:	0005883a 	mov	r2,zero
}
   48e44:	e037883a 	mov	sp,fp
   48e48:	dfc00117 	ldw	ra,4(sp)
   48e4c:	df000017 	ldw	fp,0(sp)
   48e50:	dec00204 	addi	sp,sp,8
   48e54:	f800283a 	ret

00048e58 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   48e58:	defff604 	addi	sp,sp,-40
   48e5c:	dfc00915 	stw	ra,36(sp)
   48e60:	df000815 	stw	fp,32(sp)
   48e64:	df000804 	addi	fp,sp,32
   48e68:	e13ffe15 	stw	r4,-8(fp)
   48e6c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   48e70:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   48e74:	e0bffe17 	ldw	r2,-8(fp)
   48e78:	1000021e 	bne	r2,zero,48e84 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   48e7c:	00800104 	movi	r2,4
   48e80:	00004a06 	br	48fac <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   48e84:	e0bffe17 	ldw	r2,-8(fp)
   48e88:	10800003 	ldbu	r2,0(r2)
   48e8c:	10803fcc 	andi	r2,r2,255
   48e90:	108000a0 	cmpeqi	r2,r2,2
   48e94:	1000021e 	bne	r2,zero,48ea0 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   48e98:	00800044 	movi	r2,1
   48e9c:	00004306 	br	48fac <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48ea0:	0005303a 	rdctl	r2,status
   48ea4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48ea8:	e0fffa17 	ldw	r3,-24(fp)
   48eac:	00bfff84 	movi	r2,-2
   48eb0:	1884703a 	and	r2,r3,r2
   48eb4:	1001703a 	wrctl	status,r2
  
  return context;
   48eb8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   48ebc:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   48ec0:	e0bffe17 	ldw	r2,-8(fp)
   48ec4:	10800283 	ldbu	r2,10(r2)
   48ec8:	10803fcc 	andi	r2,r2,255
   48ecc:	10000c26 	beq	r2,zero,48f00 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   48ed0:	e13ffe17 	ldw	r4,-8(fp)
   48ed4:	e17fff17 	ldw	r5,-4(fp)
   48ed8:	01800104 	movi	r6,4
   48edc:	000f883a 	mov	r7,zero
   48ee0:	004511c0 	call	4511c <OS_EventTaskRdy>
   48ee4:	e0bff817 	ldw	r2,-32(fp)
   48ee8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48eec:	e0bffb17 	ldw	r2,-20(fp)
   48ef0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   48ef4:	0045b340 	call	45b34 <OS_Sched>
        return (OS_ERR_NONE);
   48ef8:	0005883a 	mov	r2,zero
   48efc:	00002b06 	br	48fac <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   48f00:	e0bffe17 	ldw	r2,-8(fp)
   48f04:	10800117 	ldw	r2,4(r2)
   48f08:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   48f0c:	e0bff917 	ldw	r2,-28(fp)
   48f10:	10c0058b 	ldhu	r3,22(r2)
   48f14:	e0bff917 	ldw	r2,-28(fp)
   48f18:	1080050b 	ldhu	r2,20(r2)
   48f1c:	18ffffcc 	andi	r3,r3,65535
   48f20:	10bfffcc 	andi	r2,r2,65535
   48f24:	18800636 	bltu	r3,r2,48f40 <OSQPost+0xe8>
   48f28:	e0bff817 	ldw	r2,-32(fp)
   48f2c:	e0bffc15 	stw	r2,-16(fp)
   48f30:	e0bffc17 	ldw	r2,-16(fp)
   48f34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   48f38:	00800784 	movi	r2,30
   48f3c:	00001b06 	br	48fac <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   48f40:	e0bff917 	ldw	r2,-28(fp)
   48f44:	10800317 	ldw	r2,12(r2)
   48f48:	11000104 	addi	r4,r2,4
   48f4c:	e0fff917 	ldw	r3,-28(fp)
   48f50:	19000315 	stw	r4,12(r3)
   48f54:	e0ffff17 	ldw	r3,-4(fp)
   48f58:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   48f5c:	e0bff917 	ldw	r2,-28(fp)
   48f60:	1080058b 	ldhu	r2,22(r2)
   48f64:	10800044 	addi	r2,r2,1
   48f68:	1007883a 	mov	r3,r2
   48f6c:	e0bff917 	ldw	r2,-28(fp)
   48f70:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   48f74:	e0bff917 	ldw	r2,-28(fp)
   48f78:	10c00317 	ldw	r3,12(r2)
   48f7c:	e0bff917 	ldw	r2,-28(fp)
   48f80:	10800217 	ldw	r2,8(r2)
   48f84:	1880041e 	bne	r3,r2,48f98 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   48f88:	e0bff917 	ldw	r2,-28(fp)
   48f8c:	10c00117 	ldw	r3,4(r2)
   48f90:	e0bff917 	ldw	r2,-28(fp)
   48f94:	10c00315 	stw	r3,12(r2)
   48f98:	e0bff817 	ldw	r2,-32(fp)
   48f9c:	e0bffd15 	stw	r2,-12(fp)
   48fa0:	e0bffd17 	ldw	r2,-12(fp)
   48fa4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   48fa8:	0005883a 	mov	r2,zero
}
   48fac:	e037883a 	mov	sp,fp
   48fb0:	dfc00117 	ldw	ra,4(sp)
   48fb4:	df000017 	ldw	fp,0(sp)
   48fb8:	dec00204 	addi	sp,sp,8
   48fbc:	f800283a 	ret

00048fc0 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   48fc0:	defff604 	addi	sp,sp,-40
   48fc4:	dfc00915 	stw	ra,36(sp)
   48fc8:	df000815 	stw	fp,32(sp)
   48fcc:	df000804 	addi	fp,sp,32
   48fd0:	e13ffe15 	stw	r4,-8(fp)
   48fd4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   48fd8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   48fdc:	e0bffe17 	ldw	r2,-8(fp)
   48fe0:	1000021e 	bne	r2,zero,48fec <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   48fe4:	00800104 	movi	r2,4
   48fe8:	00004c06 	br	4911c <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   48fec:	e0bffe17 	ldw	r2,-8(fp)
   48ff0:	10800003 	ldbu	r2,0(r2)
   48ff4:	10803fcc 	andi	r2,r2,255
   48ff8:	108000a0 	cmpeqi	r2,r2,2
   48ffc:	1000021e 	bne	r2,zero,49008 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   49000:	00800044 	movi	r2,1
   49004:	00004506 	br	4911c <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49008:	0005303a 	rdctl	r2,status
   4900c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49010:	e0fffa17 	ldw	r3,-24(fp)
   49014:	00bfff84 	movi	r2,-2
   49018:	1884703a 	and	r2,r3,r2
   4901c:	1001703a 	wrctl	status,r2
  
  return context;
   49020:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   49024:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   49028:	e0bffe17 	ldw	r2,-8(fp)
   4902c:	10800283 	ldbu	r2,10(r2)
   49030:	10803fcc 	andi	r2,r2,255
   49034:	10000c26 	beq	r2,zero,49068 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   49038:	e13ffe17 	ldw	r4,-8(fp)
   4903c:	e17fff17 	ldw	r5,-4(fp)
   49040:	01800104 	movi	r6,4
   49044:	000f883a 	mov	r7,zero
   49048:	004511c0 	call	4511c <OS_EventTaskRdy>
   4904c:	e0bff817 	ldw	r2,-32(fp)
   49050:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49054:	e0bffb17 	ldw	r2,-20(fp)
   49058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   4905c:	0045b340 	call	45b34 <OS_Sched>
        return (OS_ERR_NONE);
   49060:	0005883a 	mov	r2,zero
   49064:	00002d06 	br	4911c <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   49068:	e0bffe17 	ldw	r2,-8(fp)
   4906c:	10800117 	ldw	r2,4(r2)
   49070:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   49074:	e0bff917 	ldw	r2,-28(fp)
   49078:	10c0058b 	ldhu	r3,22(r2)
   4907c:	e0bff917 	ldw	r2,-28(fp)
   49080:	1080050b 	ldhu	r2,20(r2)
   49084:	18ffffcc 	andi	r3,r3,65535
   49088:	10bfffcc 	andi	r2,r2,65535
   4908c:	18800636 	bltu	r3,r2,490a8 <OSQPostFront+0xe8>
   49090:	e0bff817 	ldw	r2,-32(fp)
   49094:	e0bffc15 	stw	r2,-16(fp)
   49098:	e0bffc17 	ldw	r2,-16(fp)
   4909c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   490a0:	00800784 	movi	r2,30
   490a4:	00001d06 	br	4911c <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   490a8:	e0bff917 	ldw	r2,-28(fp)
   490ac:	10c00417 	ldw	r3,16(r2)
   490b0:	e0bff917 	ldw	r2,-28(fp)
   490b4:	10800117 	ldw	r2,4(r2)
   490b8:	1880041e 	bne	r3,r2,490cc <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   490bc:	e0bff917 	ldw	r2,-28(fp)
   490c0:	10c00217 	ldw	r3,8(r2)
   490c4:	e0bff917 	ldw	r2,-28(fp)
   490c8:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   490cc:	e0bff917 	ldw	r2,-28(fp)
   490d0:	10800417 	ldw	r2,16(r2)
   490d4:	10ffff04 	addi	r3,r2,-4
   490d8:	e0bff917 	ldw	r2,-28(fp)
   490dc:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   490e0:	e0bff917 	ldw	r2,-28(fp)
   490e4:	10800417 	ldw	r2,16(r2)
   490e8:	e0ffff17 	ldw	r3,-4(fp)
   490ec:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   490f0:	e0bff917 	ldw	r2,-28(fp)
   490f4:	1080058b 	ldhu	r2,22(r2)
   490f8:	10800044 	addi	r2,r2,1
   490fc:	1007883a 	mov	r3,r2
   49100:	e0bff917 	ldw	r2,-28(fp)
   49104:	10c0058d 	sth	r3,22(r2)
   49108:	e0bff817 	ldw	r2,-32(fp)
   4910c:	e0bffd15 	stw	r2,-12(fp)
   49110:	e0bffd17 	ldw	r2,-12(fp)
   49114:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   49118:	0005883a 	mov	r2,zero
}
   4911c:	e037883a 	mov	sp,fp
   49120:	dfc00117 	ldw	ra,4(sp)
   49124:	df000017 	ldw	fp,0(sp)
   49128:	dec00204 	addi	sp,sp,8
   4912c:	f800283a 	ret

00049130 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   49130:	defff504 	addi	sp,sp,-44
   49134:	dfc00a15 	stw	ra,40(sp)
   49138:	df000915 	stw	fp,36(sp)
   4913c:	df000904 	addi	fp,sp,36
   49140:	e13ffd15 	stw	r4,-12(fp)
   49144:	e17ffe15 	stw	r5,-8(fp)
   49148:	3005883a 	mov	r2,r6
   4914c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   49150:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   49154:	e0bffd17 	ldw	r2,-12(fp)
   49158:	1000021e 	bne	r2,zero,49164 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   4915c:	00800104 	movi	r2,4
   49160:	00007106 	br	49328 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   49164:	e0bffd17 	ldw	r2,-12(fp)
   49168:	10800003 	ldbu	r2,0(r2)
   4916c:	10803fcc 	andi	r2,r2,255
   49170:	108000a0 	cmpeqi	r2,r2,2
   49174:	1000021e 	bne	r2,zero,49180 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   49178:	00800044 	movi	r2,1
   4917c:	00006a06 	br	49328 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49180:	0005303a 	rdctl	r2,status
   49184:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49188:	e0fff917 	ldw	r3,-28(fp)
   4918c:	00bfff84 	movi	r2,-2
   49190:	1884703a 	and	r2,r3,r2
   49194:	1001703a 	wrctl	status,r2
  
  return context;
   49198:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   4919c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   491a0:	e0bffd17 	ldw	r2,-12(fp)
   491a4:	10800283 	ldbu	r2,10(r2)
   491a8:	10803fcc 	andi	r2,r2,255
   491ac:	10001d26 	beq	r2,zero,49224 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   491b0:	e0bfff03 	ldbu	r2,-4(fp)
   491b4:	1080004c 	andi	r2,r2,1
   491b8:	10000b26 	beq	r2,zero,491e8 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   491bc:	00000506 	br	491d4 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   491c0:	e13ffd17 	ldw	r4,-12(fp)
   491c4:	e17ffe17 	ldw	r5,-8(fp)
   491c8:	01800104 	movi	r6,4
   491cc:	000f883a 	mov	r7,zero
   491d0:	004511c0 	call	4511c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   491d4:	e0bffd17 	ldw	r2,-12(fp)
   491d8:	10800283 	ldbu	r2,10(r2)
   491dc:	10803fcc 	andi	r2,r2,255
   491e0:	103ff71e 	bne	r2,zero,491c0 <__alt_data_end+0xfffd3660>
   491e4:	00000506 	br	491fc <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   491e8:	e13ffd17 	ldw	r4,-12(fp)
   491ec:	e17ffe17 	ldw	r5,-8(fp)
   491f0:	01800104 	movi	r6,4
   491f4:	000f883a 	mov	r7,zero
   491f8:	004511c0 	call	4511c <OS_EventTaskRdy>
   491fc:	e0bff717 	ldw	r2,-36(fp)
   49200:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49204:	e0bffa17 	ldw	r2,-24(fp)
   49208:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   4920c:	e0bfff03 	ldbu	r2,-4(fp)
   49210:	1080010c 	andi	r2,r2,4
   49214:	1000011e 	bne	r2,zero,4921c <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   49218:	0045b340 	call	45b34 <OS_Sched>
        }
        return (OS_ERR_NONE);
   4921c:	0005883a 	mov	r2,zero
   49220:	00004106 	br	49328 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   49224:	e0bffd17 	ldw	r2,-12(fp)
   49228:	10800117 	ldw	r2,4(r2)
   4922c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   49230:	e0bff817 	ldw	r2,-32(fp)
   49234:	10c0058b 	ldhu	r3,22(r2)
   49238:	e0bff817 	ldw	r2,-32(fp)
   4923c:	1080050b 	ldhu	r2,20(r2)
   49240:	18ffffcc 	andi	r3,r3,65535
   49244:	10bfffcc 	andi	r2,r2,65535
   49248:	18800636 	bltu	r3,r2,49264 <OSQPostOpt+0x134>
   4924c:	e0bff717 	ldw	r2,-36(fp)
   49250:	e0bffb15 	stw	r2,-20(fp)
   49254:	e0bffb17 	ldw	r2,-20(fp)
   49258:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   4925c:	00800784 	movi	r2,30
   49260:	00003106 	br	49328 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   49264:	e0bfff03 	ldbu	r2,-4(fp)
   49268:	1080008c 	andi	r2,r2,2
   4926c:	10001326 	beq	r2,zero,492bc <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   49270:	e0bff817 	ldw	r2,-32(fp)
   49274:	10c00417 	ldw	r3,16(r2)
   49278:	e0bff817 	ldw	r2,-32(fp)
   4927c:	10800117 	ldw	r2,4(r2)
   49280:	1880041e 	bne	r3,r2,49294 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   49284:	e0bff817 	ldw	r2,-32(fp)
   49288:	10c00217 	ldw	r3,8(r2)
   4928c:	e0bff817 	ldw	r2,-32(fp)
   49290:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   49294:	e0bff817 	ldw	r2,-32(fp)
   49298:	10800417 	ldw	r2,16(r2)
   4929c:	10ffff04 	addi	r3,r2,-4
   492a0:	e0bff817 	ldw	r2,-32(fp)
   492a4:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   492a8:	e0bff817 	ldw	r2,-32(fp)
   492ac:	10800417 	ldw	r2,16(r2)
   492b0:	e0fffe17 	ldw	r3,-8(fp)
   492b4:	10c00015 	stw	r3,0(r2)
   492b8:	00001006 	br	492fc <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   492bc:	e0bff817 	ldw	r2,-32(fp)
   492c0:	10800317 	ldw	r2,12(r2)
   492c4:	11000104 	addi	r4,r2,4
   492c8:	e0fff817 	ldw	r3,-32(fp)
   492cc:	19000315 	stw	r4,12(r3)
   492d0:	e0fffe17 	ldw	r3,-8(fp)
   492d4:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   492d8:	e0bff817 	ldw	r2,-32(fp)
   492dc:	10c00317 	ldw	r3,12(r2)
   492e0:	e0bff817 	ldw	r2,-32(fp)
   492e4:	10800217 	ldw	r2,8(r2)
   492e8:	1880041e 	bne	r3,r2,492fc <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   492ec:	e0bff817 	ldw	r2,-32(fp)
   492f0:	10c00117 	ldw	r3,4(r2)
   492f4:	e0bff817 	ldw	r2,-32(fp)
   492f8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   492fc:	e0bff817 	ldw	r2,-32(fp)
   49300:	1080058b 	ldhu	r2,22(r2)
   49304:	10800044 	addi	r2,r2,1
   49308:	1007883a 	mov	r3,r2
   4930c:	e0bff817 	ldw	r2,-32(fp)
   49310:	10c0058d 	sth	r3,22(r2)
   49314:	e0bff717 	ldw	r2,-36(fp)
   49318:	e0bffc15 	stw	r2,-16(fp)
   4931c:	e0bffc17 	ldw	r2,-16(fp)
   49320:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   49324:	0005883a 	mov	r2,zero
}
   49328:	e037883a 	mov	sp,fp
   4932c:	dfc00117 	ldw	ra,4(sp)
   49330:	df000017 	ldw	fp,0(sp)
   49334:	dec00204 	addi	sp,sp,8
   49338:	f800283a 	ret

0004933c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   4933c:	defff604 	addi	sp,sp,-40
   49340:	df000915 	stw	fp,36(sp)
   49344:	df000904 	addi	fp,sp,36
   49348:	e13ffe15 	stw	r4,-8(fp)
   4934c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   49350:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   49354:	e0bffe17 	ldw	r2,-8(fp)
   49358:	1000021e 	bne	r2,zero,49364 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   4935c:	00800104 	movi	r2,4
   49360:	00004906 	br	49488 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   49364:	e0bfff17 	ldw	r2,-4(fp)
   49368:	1000021e 	bne	r2,zero,49374 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   4936c:	00800244 	movi	r2,9
   49370:	00004506 	br	49488 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   49374:	e0bffe17 	ldw	r2,-8(fp)
   49378:	10800003 	ldbu	r2,0(r2)
   4937c:	10803fcc 	andi	r2,r2,255
   49380:	108000a0 	cmpeqi	r2,r2,2
   49384:	1000021e 	bne	r2,zero,49390 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   49388:	00800044 	movi	r2,1
   4938c:	00003e06 	br	49488 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49390:	0005303a 	rdctl	r2,status
   49394:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49398:	e0fffc17 	ldw	r3,-16(fp)
   4939c:	00bfff84 	movi	r2,-2
   493a0:	1884703a 	and	r2,r3,r2
   493a4:	1001703a 	wrctl	status,r2
  
  return context;
   493a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   493ac:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   493b0:	e0bffe17 	ldw	r2,-8(fp)
   493b4:	10c00283 	ldbu	r3,10(r2)
   493b8:	e0bfff17 	ldw	r2,-4(fp)
   493bc:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   493c0:	e0bffe17 	ldw	r2,-8(fp)
   493c4:	108002c4 	addi	r2,r2,11
   493c8:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   493cc:	e0bfff17 	ldw	r2,-4(fp)
   493d0:	10800204 	addi	r2,r2,8
   493d4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   493d8:	e03ff705 	stb	zero,-36(fp)
   493dc:	00000b06 	br	4940c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   493e0:	e0bff917 	ldw	r2,-28(fp)
   493e4:	10c00044 	addi	r3,r2,1
   493e8:	e0fff915 	stw	r3,-28(fp)
   493ec:	e0fff817 	ldw	r3,-32(fp)
   493f0:	19000044 	addi	r4,r3,1
   493f4:	e13ff815 	stw	r4,-32(fp)
   493f8:	18c00003 	ldbu	r3,0(r3)
   493fc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   49400:	e0bff703 	ldbu	r2,-36(fp)
   49404:	10800044 	addi	r2,r2,1
   49408:	e0bff705 	stb	r2,-36(fp)
   4940c:	e0bff703 	ldbu	r2,-36(fp)
   49410:	108000f0 	cmpltui	r2,r2,3
   49414:	103ff21e 	bne	r2,zero,493e0 <__alt_data_end+0xfffd3880>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   49418:	e0bffe17 	ldw	r2,-8(fp)
   4941c:	10800117 	ldw	r2,4(r2)
   49420:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   49424:	e0bffb17 	ldw	r2,-20(fp)
   49428:	1080058b 	ldhu	r2,22(r2)
   4942c:	10bfffcc 	andi	r2,r2,65535
   49430:	10000626 	beq	r2,zero,4944c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   49434:	e0bffb17 	ldw	r2,-20(fp)
   49438:	10800417 	ldw	r2,16(r2)
   4943c:	10c00017 	ldw	r3,0(r2)
   49440:	e0bfff17 	ldw	r2,-4(fp)
   49444:	10c00015 	stw	r3,0(r2)
   49448:	00000206 	br	49454 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   4944c:	e0bfff17 	ldw	r2,-4(fp)
   49450:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   49454:	e0bffb17 	ldw	r2,-20(fp)
   49458:	10c0058b 	ldhu	r3,22(r2)
   4945c:	e0bfff17 	ldw	r2,-4(fp)
   49460:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   49464:	e0bffb17 	ldw	r2,-20(fp)
   49468:	10c0050b 	ldhu	r3,20(r2)
   4946c:	e0bfff17 	ldw	r2,-4(fp)
   49470:	10c0018d 	sth	r3,6(r2)
   49474:	e0bffa17 	ldw	r2,-24(fp)
   49478:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4947c:	e0bffd17 	ldw	r2,-12(fp)
   49480:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   49484:	0005883a 	mov	r2,zero
}
   49488:	e037883a 	mov	sp,fp
   4948c:	df000017 	ldw	fp,0(sp)
   49490:	dec00104 	addi	sp,sp,4
   49494:	f800283a 	ret

00049498 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   49498:	defffb04 	addi	sp,sp,-20
   4949c:	dfc00415 	stw	ra,16(sp)
   494a0:	df000315 	stw	fp,12(sp)
   494a4:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   494a8:	010001b4 	movhi	r4,6
   494ac:	2128d104 	addi	r4,r4,-23740
   494b0:	01407804 	movi	r5,480
   494b4:	0045a800 	call	45a80 <OS_MemClr>
    pq1 = &OSQTbl[0];
   494b8:	008001b4 	movhi	r2,6
   494bc:	10a8d104 	addi	r2,r2,-23740
   494c0:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   494c4:	008001b4 	movhi	r2,6
   494c8:	10a8d704 	addi	r2,r2,-23716
   494cc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   494d0:	e03ffd0d 	sth	zero,-12(fp)
   494d4:	00000c06 	br	49508 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   494d8:	e0bffe17 	ldw	r2,-8(fp)
   494dc:	e0ffff17 	ldw	r3,-4(fp)
   494e0:	10c00015 	stw	r3,0(r2)
        pq1++;
   494e4:	e0bffe17 	ldw	r2,-8(fp)
   494e8:	10800604 	addi	r2,r2,24
   494ec:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   494f0:	e0bfff17 	ldw	r2,-4(fp)
   494f4:	10800604 	addi	r2,r2,24
   494f8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   494fc:	e0bffd0b 	ldhu	r2,-12(fp)
   49500:	10800044 	addi	r2,r2,1
   49504:	e0bffd0d 	sth	r2,-12(fp)
   49508:	e0bffd0b 	ldhu	r2,-12(fp)
   4950c:	108004f0 	cmpltui	r2,r2,19
   49510:	103ff11e 	bne	r2,zero,494d8 <__alt_data_end+0xfffd3978>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   49514:	e0bffe17 	ldw	r2,-8(fp)
   49518:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   4951c:	00800174 	movhi	r2,5
   49520:	108ad204 	addi	r2,r2,11080
   49524:	00c001b4 	movhi	r3,6
   49528:	18e8d104 	addi	r3,r3,-23740
   4952c:	10c00015 	stw	r3,0(r2)
#endif
}
   49530:	e037883a 	mov	sp,fp
   49534:	dfc00117 	ldw	ra,4(sp)
   49538:	df000017 	ldw	fp,0(sp)
   4953c:	dec00204 	addi	sp,sp,8
   49540:	f800283a 	ret

00049544 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   49544:	defffa04 	addi	sp,sp,-24
   49548:	df000515 	stw	fp,20(sp)
   4954c:	df000504 	addi	fp,sp,20
   49550:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   49554:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   49558:	e0bfff17 	ldw	r2,-4(fp)
   4955c:	1000021e 	bne	r2,zero,49568 <OSSemAccept+0x24>
        return (0);
   49560:	0005883a 	mov	r2,zero
   49564:	00001f06 	br	495e4 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   49568:	e0bfff17 	ldw	r2,-4(fp)
   4956c:	10800003 	ldbu	r2,0(r2)
   49570:	10803fcc 	andi	r2,r2,255
   49574:	108000e0 	cmpeqi	r2,r2,3
   49578:	1000021e 	bne	r2,zero,49584 <OSSemAccept+0x40>
        return (0);
   4957c:	0005883a 	mov	r2,zero
   49580:	00001806 	br	495e4 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49584:	0005303a 	rdctl	r2,status
   49588:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4958c:	e0fffd17 	ldw	r3,-12(fp)
   49590:	00bfff84 	movi	r2,-2
   49594:	1884703a 	and	r2,r3,r2
   49598:	1001703a 	wrctl	status,r2
  
  return context;
   4959c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   495a0:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   495a4:	e0bfff17 	ldw	r2,-4(fp)
   495a8:	1080020b 	ldhu	r2,8(r2)
   495ac:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   495b0:	e0bffc0b 	ldhu	r2,-16(fp)
   495b4:	10000626 	beq	r2,zero,495d0 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   495b8:	e0bfff17 	ldw	r2,-4(fp)
   495bc:	1080020b 	ldhu	r2,8(r2)
   495c0:	10bfffc4 	addi	r2,r2,-1
   495c4:	1007883a 	mov	r3,r2
   495c8:	e0bfff17 	ldw	r2,-4(fp)
   495cc:	10c0020d 	sth	r3,8(r2)
   495d0:	e0bffb17 	ldw	r2,-20(fp)
   495d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   495d8:	e0bffe17 	ldw	r2,-8(fp)
   495dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   495e0:	e0bffc0b 	ldhu	r2,-16(fp)
}
   495e4:	e037883a 	mov	sp,fp
   495e8:	df000017 	ldw	fp,0(sp)
   495ec:	dec00104 	addi	sp,sp,4
   495f0:	f800283a 	ret

000495f4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   495f4:	defff904 	addi	sp,sp,-28
   495f8:	dfc00615 	stw	ra,24(sp)
   495fc:	df000515 	stw	fp,20(sp)
   49600:	df000504 	addi	fp,sp,20
   49604:	2005883a 	mov	r2,r4
   49608:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   4960c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   49610:	00800174 	movhi	r2,5
   49614:	108ad504 	addi	r2,r2,11092
   49618:	10800003 	ldbu	r2,0(r2)
   4961c:	10803fcc 	andi	r2,r2,255
   49620:	10000226 	beq	r2,zero,4962c <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   49624:	0005883a 	mov	r2,zero
   49628:	00002d06 	br	496e0 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4962c:	0005303a 	rdctl	r2,status
   49630:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49634:	e0fffd17 	ldw	r3,-12(fp)
   49638:	00bfff84 	movi	r2,-2
   4963c:	1884703a 	and	r2,r3,r2
   49640:	1001703a 	wrctl	status,r2
  
  return context;
   49644:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   49648:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   4964c:	00800174 	movhi	r2,5
   49650:	108ad404 	addi	r2,r2,11088
   49654:	10800017 	ldw	r2,0(r2)
   49658:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   4965c:	00800174 	movhi	r2,5
   49660:	108ad404 	addi	r2,r2,11088
   49664:	10800017 	ldw	r2,0(r2)
   49668:	10000726 	beq	r2,zero,49688 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   4966c:	00800174 	movhi	r2,5
   49670:	108ad404 	addi	r2,r2,11088
   49674:	10800017 	ldw	r2,0(r2)
   49678:	10c00117 	ldw	r3,4(r2)
   4967c:	00800174 	movhi	r2,5
   49680:	108ad404 	addi	r2,r2,11088
   49684:	10c00015 	stw	r3,0(r2)
   49688:	e0bffb17 	ldw	r2,-20(fp)
   4968c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49690:	e0bffe17 	ldw	r2,-8(fp)
   49694:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   49698:	e0bffc17 	ldw	r2,-16(fp)
   4969c:	10000f26 	beq	r2,zero,496dc <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   496a0:	e0bffc17 	ldw	r2,-16(fp)
   496a4:	00c000c4 	movi	r3,3
   496a8:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   496ac:	e0bffc17 	ldw	r2,-16(fp)
   496b0:	e0ffff0b 	ldhu	r3,-4(fp)
   496b4:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   496b8:	e0bffc17 	ldw	r2,-16(fp)
   496bc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   496c0:	e0bffc17 	ldw	r2,-16(fp)
   496c4:	00c00fc4 	movi	r3,63
   496c8:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   496cc:	e0bffc17 	ldw	r2,-16(fp)
   496d0:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   496d4:	e13ffc17 	ldw	r4,-16(fp)
   496d8:	00456bc0 	call	456bc <OS_EventWaitListInit>
    }
    return (pevent);
   496dc:	e0bffc17 	ldw	r2,-16(fp)
}
   496e0:	e037883a 	mov	sp,fp
   496e4:	dfc00117 	ldw	ra,4(sp)
   496e8:	df000017 	ldw	fp,0(sp)
   496ec:	dec00204 	addi	sp,sp,8
   496f0:	f800283a 	ret

000496f4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   496f4:	defff304 	addi	sp,sp,-52
   496f8:	dfc00c15 	stw	ra,48(sp)
   496fc:	df000b15 	stw	fp,44(sp)
   49700:	df000b04 	addi	fp,sp,44
   49704:	e13ffd15 	stw	r4,-12(fp)
   49708:	2805883a 	mov	r2,r5
   4970c:	e1bfff15 	stw	r6,-4(fp)
   49710:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   49714:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   49718:	e0bfff17 	ldw	r2,-4(fp)
   4971c:	1000021e 	bne	r2,zero,49728 <OSSemDel+0x34>
        return (pevent);
   49720:	e0bffd17 	ldw	r2,-12(fp)
   49724:	00008806 	br	49948 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   49728:	e0bffd17 	ldw	r2,-12(fp)
   4972c:	1000051e 	bne	r2,zero,49744 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   49730:	e0bfff17 	ldw	r2,-4(fp)
   49734:	00c00104 	movi	r3,4
   49738:	10c00005 	stb	r3,0(r2)
        return (pevent);
   4973c:	e0bffd17 	ldw	r2,-12(fp)
   49740:	00008106 	br	49948 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   49744:	e0bffd17 	ldw	r2,-12(fp)
   49748:	10800003 	ldbu	r2,0(r2)
   4974c:	10803fcc 	andi	r2,r2,255
   49750:	108000e0 	cmpeqi	r2,r2,3
   49754:	1000051e 	bne	r2,zero,4976c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   49758:	e0bfff17 	ldw	r2,-4(fp)
   4975c:	00c00044 	movi	r3,1
   49760:	10c00005 	stb	r3,0(r2)
        return (pevent);
   49764:	e0bffd17 	ldw	r2,-12(fp)
   49768:	00007706 	br	49948 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   4976c:	00800174 	movhi	r2,5
   49770:	108ad504 	addi	r2,r2,11092
   49774:	10800003 	ldbu	r2,0(r2)
   49778:	10803fcc 	andi	r2,r2,255
   4977c:	10000526 	beq	r2,zero,49794 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   49780:	e0bfff17 	ldw	r2,-4(fp)
   49784:	00c003c4 	movi	r3,15
   49788:	10c00005 	stb	r3,0(r2)
        return (pevent);
   4978c:	e0bffd17 	ldw	r2,-12(fp)
   49790:	00006d06 	br	49948 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49794:	0005303a 	rdctl	r2,status
   49798:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4979c:	e0fff817 	ldw	r3,-32(fp)
   497a0:	00bfff84 	movi	r2,-2
   497a4:	1884703a 	and	r2,r3,r2
   497a8:	1001703a 	wrctl	status,r2
  
  return context;
   497ac:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   497b0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   497b4:	e0bffd17 	ldw	r2,-12(fp)
   497b8:	10800283 	ldbu	r2,10(r2)
   497bc:	10803fcc 	andi	r2,r2,255
   497c0:	10000326 	beq	r2,zero,497d0 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   497c4:	00800044 	movi	r2,1
   497c8:	e0bff505 	stb	r2,-44(fp)
   497cc:	00000106 	br	497d4 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   497d0:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   497d4:	e0bffe03 	ldbu	r2,-8(fp)
   497d8:	10000326 	beq	r2,zero,497e8 <OSSemDel+0xf4>
   497dc:	10800060 	cmpeqi	r2,r2,1
   497e0:	10002c1e 	bne	r2,zero,49894 <OSSemDel+0x1a0>
   497e4:	00004d06 	br	4991c <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   497e8:	e0bff503 	ldbu	r2,-44(fp)
   497ec:	10001a1e 	bne	r2,zero,49858 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   497f0:	e0bffd17 	ldw	r2,-12(fp)
   497f4:	00c00fc4 	movi	r3,63
   497f8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   497fc:	e0bffd17 	ldw	r2,-12(fp)
   49800:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   49804:	e0bffd17 	ldw	r2,-12(fp)
   49808:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   4980c:	00800174 	movhi	r2,5
   49810:	108ad404 	addi	r2,r2,11088
   49814:	10c00017 	ldw	r3,0(r2)
   49818:	e0bffd17 	ldw	r2,-12(fp)
   4981c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   49820:	e0bffd17 	ldw	r2,-12(fp)
   49824:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   49828:	00800174 	movhi	r2,5
   4982c:	108ad404 	addi	r2,r2,11088
   49830:	e0fffd17 	ldw	r3,-12(fp)
   49834:	10c00015 	stw	r3,0(r2)
   49838:	e0bff717 	ldw	r2,-36(fp)
   4983c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49840:	e0bff917 	ldw	r2,-28(fp)
   49844:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   49848:	e0bfff17 	ldw	r2,-4(fp)
   4984c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   49850:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   49854:	00003b06 	br	49944 <OSSemDel+0x250>
   49858:	e0bff717 	ldw	r2,-36(fp)
   4985c:	e0bffa15 	stw	r2,-24(fp)
   49860:	e0bffa17 	ldw	r2,-24(fp)
   49864:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   49868:	e0bfff17 	ldw	r2,-4(fp)
   4986c:	00c01244 	movi	r3,73
   49870:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   49874:	e0bffd17 	ldw	r2,-12(fp)
   49878:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   4987c:	00003106 	br	49944 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   49880:	e13ffd17 	ldw	r4,-12(fp)
   49884:	000b883a 	mov	r5,zero
   49888:	01800044 	movi	r6,1
   4988c:	000f883a 	mov	r7,zero
   49890:	004511c0 	call	4511c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   49894:	e0bffd17 	ldw	r2,-12(fp)
   49898:	10800283 	ldbu	r2,10(r2)
   4989c:	10803fcc 	andi	r2,r2,255
   498a0:	103ff71e 	bne	r2,zero,49880 <__alt_data_end+0xfffd3d20>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   498a4:	e0bffd17 	ldw	r2,-12(fp)
   498a8:	00c00fc4 	movi	r3,63
   498ac:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   498b0:	e0bffd17 	ldw	r2,-12(fp)
   498b4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   498b8:	e0bffd17 	ldw	r2,-12(fp)
   498bc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   498c0:	00800174 	movhi	r2,5
   498c4:	108ad404 	addi	r2,r2,11088
   498c8:	10c00017 	ldw	r3,0(r2)
   498cc:	e0bffd17 	ldw	r2,-12(fp)
   498d0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   498d4:	e0bffd17 	ldw	r2,-12(fp)
   498d8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   498dc:	00800174 	movhi	r2,5
   498e0:	108ad404 	addi	r2,r2,11088
   498e4:	e0fffd17 	ldw	r3,-12(fp)
   498e8:	10c00015 	stw	r3,0(r2)
   498ec:	e0bff717 	ldw	r2,-36(fp)
   498f0:	e0bffb15 	stw	r2,-20(fp)
   498f4:	e0bffb17 	ldw	r2,-20(fp)
   498f8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   498fc:	e0bff503 	ldbu	r2,-44(fp)
   49900:	10800058 	cmpnei	r2,r2,1
   49904:	1000011e 	bne	r2,zero,4990c <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   49908:	0045b340 	call	45b34 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   4990c:	e0bfff17 	ldw	r2,-4(fp)
   49910:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   49914:	e03ff615 	stw	zero,-40(fp)
             break;
   49918:	00000a06 	br	49944 <OSSemDel+0x250>
   4991c:	e0bff717 	ldw	r2,-36(fp)
   49920:	e0bffc15 	stw	r2,-16(fp)
   49924:	e0bffc17 	ldw	r2,-16(fp)
   49928:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   4992c:	e0bfff17 	ldw	r2,-4(fp)
   49930:	00c001c4 	movi	r3,7
   49934:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   49938:	e0bffd17 	ldw	r2,-12(fp)
   4993c:	e0bff615 	stw	r2,-40(fp)
             break;
   49940:	0001883a 	nop
    }
    return (pevent_return);
   49944:	e0bff617 	ldw	r2,-40(fp)
}
   49948:	e037883a 	mov	sp,fp
   4994c:	dfc00117 	ldw	ra,4(sp)
   49950:	df000017 	ldw	fp,0(sp)
   49954:	dec00204 	addi	sp,sp,8
   49958:	f800283a 	ret

0004995c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   4995c:	defff504 	addi	sp,sp,-44
   49960:	dfc00a15 	stw	ra,40(sp)
   49964:	df000915 	stw	fp,36(sp)
   49968:	df000904 	addi	fp,sp,36
   4996c:	e13ffd15 	stw	r4,-12(fp)
   49970:	2805883a 	mov	r2,r5
   49974:	e1bfff15 	stw	r6,-4(fp)
   49978:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   4997c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   49980:	e0bfff17 	ldw	r2,-4(fp)
   49984:	1000011e 	bne	r2,zero,4998c <OSSemPend+0x30>
        return;
   49988:	00008906 	br	49bb0 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   4998c:	e0bffd17 	ldw	r2,-12(fp)
   49990:	1000041e 	bne	r2,zero,499a4 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   49994:	e0bfff17 	ldw	r2,-4(fp)
   49998:	00c00104 	movi	r3,4
   4999c:	10c00005 	stb	r3,0(r2)
        return;
   499a0:	00008306 	br	49bb0 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   499a4:	e0bffd17 	ldw	r2,-12(fp)
   499a8:	10800003 	ldbu	r2,0(r2)
   499ac:	10803fcc 	andi	r2,r2,255
   499b0:	108000e0 	cmpeqi	r2,r2,3
   499b4:	1000041e 	bne	r2,zero,499c8 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   499b8:	e0bfff17 	ldw	r2,-4(fp)
   499bc:	00c00044 	movi	r3,1
   499c0:	10c00005 	stb	r3,0(r2)
        return;
   499c4:	00007a06 	br	49bb0 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   499c8:	00800174 	movhi	r2,5
   499cc:	108ad504 	addi	r2,r2,11092
   499d0:	10800003 	ldbu	r2,0(r2)
   499d4:	10803fcc 	andi	r2,r2,255
   499d8:	10000426 	beq	r2,zero,499ec <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   499dc:	e0bfff17 	ldw	r2,-4(fp)
   499e0:	00c00084 	movi	r3,2
   499e4:	10c00005 	stb	r3,0(r2)
        return;
   499e8:	00007106 	br	49bb0 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   499ec:	00800174 	movhi	r2,5
   499f0:	108ac704 	addi	r2,r2,11036
   499f4:	10800003 	ldbu	r2,0(r2)
   499f8:	10803fcc 	andi	r2,r2,255
   499fc:	10000426 	beq	r2,zero,49a10 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   49a00:	e0bfff17 	ldw	r2,-4(fp)
   49a04:	00c00344 	movi	r3,13
   49a08:	10c00005 	stb	r3,0(r2)
        return;
   49a0c:	00006806 	br	49bb0 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49a10:	0005303a 	rdctl	r2,status
   49a14:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49a18:	e0fff817 	ldw	r3,-32(fp)
   49a1c:	00bfff84 	movi	r2,-2
   49a20:	1884703a 	and	r2,r3,r2
   49a24:	1001703a 	wrctl	status,r2
  
  return context;
   49a28:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   49a2c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   49a30:	e0bffd17 	ldw	r2,-12(fp)
   49a34:	1080020b 	ldhu	r2,8(r2)
   49a38:	10bfffcc 	andi	r2,r2,65535
   49a3c:	10000d26 	beq	r2,zero,49a74 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   49a40:	e0bffd17 	ldw	r2,-12(fp)
   49a44:	1080020b 	ldhu	r2,8(r2)
   49a48:	10bfffc4 	addi	r2,r2,-1
   49a4c:	1007883a 	mov	r3,r2
   49a50:	e0bffd17 	ldw	r2,-12(fp)
   49a54:	10c0020d 	sth	r3,8(r2)
   49a58:	e0bff717 	ldw	r2,-36(fp)
   49a5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49a60:	e0bff917 	ldw	r2,-28(fp)
   49a64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   49a68:	e0bfff17 	ldw	r2,-4(fp)
   49a6c:	10000005 	stb	zero,0(r2)
        return;
   49a70:	00004f06 	br	49bb0 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   49a74:	00800174 	movhi	r2,5
   49a78:	108ad604 	addi	r2,r2,11096
   49a7c:	10c00017 	ldw	r3,0(r2)
   49a80:	00800174 	movhi	r2,5
   49a84:	108ad604 	addi	r2,r2,11096
   49a88:	10800017 	ldw	r2,0(r2)
   49a8c:	10800c03 	ldbu	r2,48(r2)
   49a90:	10800054 	ori	r2,r2,1
   49a94:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   49a98:	00800174 	movhi	r2,5
   49a9c:	108ad604 	addi	r2,r2,11096
   49aa0:	10800017 	ldw	r2,0(r2)
   49aa4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   49aa8:	00800174 	movhi	r2,5
   49aac:	108ad604 	addi	r2,r2,11096
   49ab0:	10800017 	ldw	r2,0(r2)
   49ab4:	e0fffe0b 	ldhu	r3,-8(fp)
   49ab8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   49abc:	e13ffd17 	ldw	r4,-12(fp)
   49ac0:	00452b40 	call	452b4 <OS_EventTaskWait>
   49ac4:	e0bff717 	ldw	r2,-36(fp)
   49ac8:	e0bffa15 	stw	r2,-24(fp)
   49acc:	e0bffa17 	ldw	r2,-24(fp)
   49ad0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   49ad4:	0045b340 	call	45b34 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49ad8:	0005303a 	rdctl	r2,status
   49adc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49ae0:	e0fffb17 	ldw	r3,-20(fp)
   49ae4:	00bfff84 	movi	r2,-2
   49ae8:	1884703a 	and	r2,r3,r2
   49aec:	1001703a 	wrctl	status,r2
  
  return context;
   49af0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   49af4:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   49af8:	00800174 	movhi	r2,5
   49afc:	108ad604 	addi	r2,r2,11096
   49b00:	10800017 	ldw	r2,0(r2)
   49b04:	10800c43 	ldbu	r2,49(r2)
   49b08:	10803fcc 	andi	r2,r2,255
   49b0c:	10000326 	beq	r2,zero,49b1c <OSSemPend+0x1c0>
   49b10:	108000a0 	cmpeqi	r2,r2,2
   49b14:	1000041e 	bne	r2,zero,49b28 <OSSemPend+0x1cc>
   49b18:	00000706 	br	49b38 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   49b1c:	e0bfff17 	ldw	r2,-4(fp)
   49b20:	10000005 	stb	zero,0(r2)
             break;
   49b24:	00000e06 	br	49b60 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   49b28:	e0bfff17 	ldw	r2,-4(fp)
   49b2c:	00c00384 	movi	r3,14
   49b30:	10c00005 	stb	r3,0(r2)
             break;
   49b34:	00000a06 	br	49b60 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   49b38:	00800174 	movhi	r2,5
   49b3c:	108ad604 	addi	r2,r2,11096
   49b40:	10800017 	ldw	r2,0(r2)
   49b44:	1009883a 	mov	r4,r2
   49b48:	e17ffd17 	ldw	r5,-12(fp)
   49b4c:	004550c0 	call	4550c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   49b50:	e0bfff17 	ldw	r2,-4(fp)
   49b54:	00c00284 	movi	r3,10
   49b58:	10c00005 	stb	r3,0(r2)
             break;
   49b5c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   49b60:	00800174 	movhi	r2,5
   49b64:	108ad604 	addi	r2,r2,11096
   49b68:	10800017 	ldw	r2,0(r2)
   49b6c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   49b70:	00800174 	movhi	r2,5
   49b74:	108ad604 	addi	r2,r2,11096
   49b78:	10800017 	ldw	r2,0(r2)
   49b7c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   49b80:	00800174 	movhi	r2,5
   49b84:	108ad604 	addi	r2,r2,11096
   49b88:	10800017 	ldw	r2,0(r2)
   49b8c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   49b90:	00800174 	movhi	r2,5
   49b94:	108ad604 	addi	r2,r2,11096
   49b98:	10800017 	ldw	r2,0(r2)
   49b9c:	10000815 	stw	zero,32(r2)
   49ba0:	e0bff717 	ldw	r2,-36(fp)
   49ba4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49ba8:	e0bffc17 	ldw	r2,-16(fp)
   49bac:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   49bb0:	e037883a 	mov	sp,fp
   49bb4:	dfc00117 	ldw	ra,4(sp)
   49bb8:	df000017 	ldw	fp,0(sp)
   49bbc:	dec00204 	addi	sp,sp,8
   49bc0:	f800283a 	ret

00049bc4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   49bc4:	defff604 	addi	sp,sp,-40
   49bc8:	dfc00915 	stw	ra,36(sp)
   49bcc:	df000815 	stw	fp,32(sp)
   49bd0:	df000804 	addi	fp,sp,32
   49bd4:	e13ffd15 	stw	r4,-12(fp)
   49bd8:	2805883a 	mov	r2,r5
   49bdc:	e1bfff15 	stw	r6,-4(fp)
   49be0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   49be4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   49be8:	e0bfff17 	ldw	r2,-4(fp)
   49bec:	1000021e 	bne	r2,zero,49bf8 <OSSemPendAbort+0x34>
        return (0);
   49bf0:	0005883a 	mov	r2,zero
   49bf4:	00004906 	br	49d1c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   49bf8:	e0bffd17 	ldw	r2,-12(fp)
   49bfc:	1000051e 	bne	r2,zero,49c14 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   49c00:	e0bfff17 	ldw	r2,-4(fp)
   49c04:	00c00104 	movi	r3,4
   49c08:	10c00005 	stb	r3,0(r2)
        return (0);
   49c0c:	0005883a 	mov	r2,zero
   49c10:	00004206 	br	49d1c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   49c14:	e0bffd17 	ldw	r2,-12(fp)
   49c18:	10800003 	ldbu	r2,0(r2)
   49c1c:	10803fcc 	andi	r2,r2,255
   49c20:	108000e0 	cmpeqi	r2,r2,3
   49c24:	1000051e 	bne	r2,zero,49c3c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   49c28:	e0bfff17 	ldw	r2,-4(fp)
   49c2c:	00c00044 	movi	r3,1
   49c30:	10c00005 	stb	r3,0(r2)
        return (0);
   49c34:	0005883a 	mov	r2,zero
   49c38:	00003806 	br	49d1c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49c3c:	0005303a 	rdctl	r2,status
   49c40:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49c44:	e0fffa17 	ldw	r3,-24(fp)
   49c48:	00bfff84 	movi	r2,-2
   49c4c:	1884703a 	and	r2,r3,r2
   49c50:	1001703a 	wrctl	status,r2
  
  return context;
   49c54:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   49c58:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   49c5c:	e0bffd17 	ldw	r2,-12(fp)
   49c60:	10800283 	ldbu	r2,10(r2)
   49c64:	10803fcc 	andi	r2,r2,255
   49c68:	10002526 	beq	r2,zero,49d00 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   49c6c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   49c70:	e0bffe03 	ldbu	r2,-8(fp)
   49c74:	10800060 	cmpeqi	r2,r2,1
   49c78:	10000e26 	beq	r2,zero,49cb4 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   49c7c:	00000806 	br	49ca0 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   49c80:	e13ffd17 	ldw	r4,-12(fp)
   49c84:	000b883a 	mov	r5,zero
   49c88:	01800044 	movi	r6,1
   49c8c:	01c00084 	movi	r7,2
   49c90:	004511c0 	call	4511c <OS_EventTaskRdy>
                     nbr_tasks++;
   49c94:	e0bff803 	ldbu	r2,-32(fp)
   49c98:	10800044 	addi	r2,r2,1
   49c9c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   49ca0:	e0bffd17 	ldw	r2,-12(fp)
   49ca4:	10800283 	ldbu	r2,10(r2)
   49ca8:	10803fcc 	andi	r2,r2,255
   49cac:	103ff41e 	bne	r2,zero,49c80 <__alt_data_end+0xfffd4120>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   49cb0:	00000906 	br	49cd8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   49cb4:	e13ffd17 	ldw	r4,-12(fp)
   49cb8:	000b883a 	mov	r5,zero
   49cbc:	01800044 	movi	r6,1
   49cc0:	01c00084 	movi	r7,2
   49cc4:	004511c0 	call	4511c <OS_EventTaskRdy>
                 nbr_tasks++;
   49cc8:	e0bff803 	ldbu	r2,-32(fp)
   49ccc:	10800044 	addi	r2,r2,1
   49cd0:	e0bff805 	stb	r2,-32(fp)
                 break;
   49cd4:	0001883a 	nop
   49cd8:	e0bff917 	ldw	r2,-28(fp)
   49cdc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49ce0:	e0bffb17 	ldw	r2,-20(fp)
   49ce4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   49ce8:	0045b340 	call	45b34 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   49cec:	e0bfff17 	ldw	r2,-4(fp)
   49cf0:	00c00384 	movi	r3,14
   49cf4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   49cf8:	e0bff803 	ldbu	r2,-32(fp)
   49cfc:	00000706 	br	49d1c <OSSemPendAbort+0x158>
   49d00:	e0bff917 	ldw	r2,-28(fp)
   49d04:	e0bffc15 	stw	r2,-16(fp)
   49d08:	e0bffc17 	ldw	r2,-16(fp)
   49d0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   49d10:	e0bfff17 	ldw	r2,-4(fp)
   49d14:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   49d18:	0005883a 	mov	r2,zero
}
   49d1c:	e037883a 	mov	sp,fp
   49d20:	dfc00117 	ldw	ra,4(sp)
   49d24:	df000017 	ldw	fp,0(sp)
   49d28:	dec00204 	addi	sp,sp,8
   49d2c:	f800283a 	ret

00049d30 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   49d30:	defff804 	addi	sp,sp,-32
   49d34:	dfc00715 	stw	ra,28(sp)
   49d38:	df000615 	stw	fp,24(sp)
   49d3c:	df000604 	addi	fp,sp,24
   49d40:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   49d44:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   49d48:	e0bfff17 	ldw	r2,-4(fp)
   49d4c:	1000021e 	bne	r2,zero,49d58 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   49d50:	00800104 	movi	r2,4
   49d54:	00003506 	br	49e2c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   49d58:	e0bfff17 	ldw	r2,-4(fp)
   49d5c:	10800003 	ldbu	r2,0(r2)
   49d60:	10803fcc 	andi	r2,r2,255
   49d64:	108000e0 	cmpeqi	r2,r2,3
   49d68:	1000021e 	bne	r2,zero,49d74 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   49d6c:	00800044 	movi	r2,1
   49d70:	00002e06 	br	49e2c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49d74:	0005303a 	rdctl	r2,status
   49d78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49d7c:	e0fffb17 	ldw	r3,-20(fp)
   49d80:	00bfff84 	movi	r2,-2
   49d84:	1884703a 	and	r2,r3,r2
   49d88:	1001703a 	wrctl	status,r2
  
  return context;
   49d8c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   49d90:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   49d94:	e0bfff17 	ldw	r2,-4(fp)
   49d98:	10800283 	ldbu	r2,10(r2)
   49d9c:	10803fcc 	andi	r2,r2,255
   49da0:	10000c26 	beq	r2,zero,49dd4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   49da4:	e13fff17 	ldw	r4,-4(fp)
   49da8:	000b883a 	mov	r5,zero
   49dac:	01800044 	movi	r6,1
   49db0:	000f883a 	mov	r7,zero
   49db4:	004511c0 	call	4511c <OS_EventTaskRdy>
   49db8:	e0bffa17 	ldw	r2,-24(fp)
   49dbc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49dc0:	e0bffc17 	ldw	r2,-16(fp)
   49dc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   49dc8:	0045b340 	call	45b34 <OS_Sched>
        return (OS_ERR_NONE);
   49dcc:	0005883a 	mov	r2,zero
   49dd0:	00001606 	br	49e2c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   49dd4:	e0bfff17 	ldw	r2,-4(fp)
   49dd8:	1080020b 	ldhu	r2,8(r2)
   49ddc:	10ffffcc 	andi	r3,r2,65535
   49de0:	00bfffd4 	movui	r2,65535
   49de4:	18800c26 	beq	r3,r2,49e18 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   49de8:	e0bfff17 	ldw	r2,-4(fp)
   49dec:	1080020b 	ldhu	r2,8(r2)
   49df0:	10800044 	addi	r2,r2,1
   49df4:	1007883a 	mov	r3,r2
   49df8:	e0bfff17 	ldw	r2,-4(fp)
   49dfc:	10c0020d 	sth	r3,8(r2)
   49e00:	e0bffa17 	ldw	r2,-24(fp)
   49e04:	e0bffd15 	stw	r2,-12(fp)
   49e08:	e0bffd17 	ldw	r2,-12(fp)
   49e0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   49e10:	0005883a 	mov	r2,zero
   49e14:	00000506 	br	49e2c <OSSemPost+0xfc>
   49e18:	e0bffa17 	ldw	r2,-24(fp)
   49e1c:	e0bffe15 	stw	r2,-8(fp)
   49e20:	e0bffe17 	ldw	r2,-8(fp)
   49e24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   49e28:	00800c84 	movi	r2,50
}
   49e2c:	e037883a 	mov	sp,fp
   49e30:	dfc00117 	ldw	ra,4(sp)
   49e34:	df000017 	ldw	fp,0(sp)
   49e38:	dec00204 	addi	sp,sp,8
   49e3c:	f800283a 	ret

00049e40 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   49e40:	defff704 	addi	sp,sp,-36
   49e44:	df000815 	stw	fp,32(sp)
   49e48:	df000804 	addi	fp,sp,32
   49e4c:	e13ffe15 	stw	r4,-8(fp)
   49e50:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   49e54:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   49e58:	e0bffe17 	ldw	r2,-8(fp)
   49e5c:	1000021e 	bne	r2,zero,49e68 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   49e60:	00800104 	movi	r2,4
   49e64:	00003606 	br	49f40 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   49e68:	e0bfff17 	ldw	r2,-4(fp)
   49e6c:	1000021e 	bne	r2,zero,49e78 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   49e70:	00800244 	movi	r2,9
   49e74:	00003206 	br	49f40 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   49e78:	e0bffe17 	ldw	r2,-8(fp)
   49e7c:	10800003 	ldbu	r2,0(r2)
   49e80:	10803fcc 	andi	r2,r2,255
   49e84:	108000e0 	cmpeqi	r2,r2,3
   49e88:	1000021e 	bne	r2,zero,49e94 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   49e8c:	00800044 	movi	r2,1
   49e90:	00002b06 	br	49f40 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49e94:	0005303a 	rdctl	r2,status
   49e98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49e9c:	e0fffc17 	ldw	r3,-16(fp)
   49ea0:	00bfff84 	movi	r2,-2
   49ea4:	1884703a 	and	r2,r3,r2
   49ea8:	1001703a 	wrctl	status,r2
  
  return context;
   49eac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   49eb0:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   49eb4:	e0bffe17 	ldw	r2,-8(fp)
   49eb8:	10c00283 	ldbu	r3,10(r2)
   49ebc:	e0bfff17 	ldw	r2,-4(fp)
   49ec0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   49ec4:	e0bffe17 	ldw	r2,-8(fp)
   49ec8:	108002c4 	addi	r2,r2,11
   49ecc:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   49ed0:	e0bfff17 	ldw	r2,-4(fp)
   49ed4:	10800084 	addi	r2,r2,2
   49ed8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   49edc:	e03ffa05 	stb	zero,-24(fp)
   49ee0:	00000b06 	br	49f10 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   49ee4:	e0bff917 	ldw	r2,-28(fp)
   49ee8:	10c00044 	addi	r3,r2,1
   49eec:	e0fff915 	stw	r3,-28(fp)
   49ef0:	e0fff817 	ldw	r3,-32(fp)
   49ef4:	19000044 	addi	r4,r3,1
   49ef8:	e13ff815 	stw	r4,-32(fp)
   49efc:	18c00003 	ldbu	r3,0(r3)
   49f00:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   49f04:	e0bffa03 	ldbu	r2,-24(fp)
   49f08:	10800044 	addi	r2,r2,1
   49f0c:	e0bffa05 	stb	r2,-24(fp)
   49f10:	e0bffa03 	ldbu	r2,-24(fp)
   49f14:	108000f0 	cmpltui	r2,r2,3
   49f18:	103ff21e 	bne	r2,zero,49ee4 <__alt_data_end+0xfffd4384>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   49f1c:	e0bffe17 	ldw	r2,-8(fp)
   49f20:	10c0020b 	ldhu	r3,8(r2)
   49f24:	e0bfff17 	ldw	r2,-4(fp)
   49f28:	10c0000d 	sth	r3,0(r2)
   49f2c:	e0bffb17 	ldw	r2,-20(fp)
   49f30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49f34:	e0bffd17 	ldw	r2,-12(fp)
   49f38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   49f3c:	0005883a 	mov	r2,zero
}
   49f40:	e037883a 	mov	sp,fp
   49f44:	df000017 	ldw	fp,0(sp)
   49f48:	dec00104 	addi	sp,sp,4
   49f4c:	f800283a 	ret

00049f50 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   49f50:	defff904 	addi	sp,sp,-28
   49f54:	df000615 	stw	fp,24(sp)
   49f58:	df000604 	addi	fp,sp,24
   49f5c:	e13ffd15 	stw	r4,-12(fp)
   49f60:	2805883a 	mov	r2,r5
   49f64:	e1bfff15 	stw	r6,-4(fp)
   49f68:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   49f6c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   49f70:	e0bfff17 	ldw	r2,-4(fp)
   49f74:	1000011e 	bne	r2,zero,49f7c <OSSemSet+0x2c>
        return;
   49f78:	00003006 	br	4a03c <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   49f7c:	e0bffd17 	ldw	r2,-12(fp)
   49f80:	1000041e 	bne	r2,zero,49f94 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   49f84:	e0bfff17 	ldw	r2,-4(fp)
   49f88:	00c00104 	movi	r3,4
   49f8c:	10c00005 	stb	r3,0(r2)
        return;
   49f90:	00002a06 	br	4a03c <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   49f94:	e0bffd17 	ldw	r2,-12(fp)
   49f98:	10800003 	ldbu	r2,0(r2)
   49f9c:	10803fcc 	andi	r2,r2,255
   49fa0:	108000e0 	cmpeqi	r2,r2,3
   49fa4:	1000041e 	bne	r2,zero,49fb8 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   49fa8:	e0bfff17 	ldw	r2,-4(fp)
   49fac:	00c00044 	movi	r3,1
   49fb0:	10c00005 	stb	r3,0(r2)
        return;
   49fb4:	00002106 	br	4a03c <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49fb8:	0005303a 	rdctl	r2,status
   49fbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49fc0:	e0fffb17 	ldw	r3,-20(fp)
   49fc4:	00bfff84 	movi	r2,-2
   49fc8:	1884703a 	and	r2,r3,r2
   49fcc:	1001703a 	wrctl	status,r2
  
  return context;
   49fd0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   49fd4:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   49fd8:	e0bfff17 	ldw	r2,-4(fp)
   49fdc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   49fe0:	e0bffd17 	ldw	r2,-12(fp)
   49fe4:	1080020b 	ldhu	r2,8(r2)
   49fe8:	10bfffcc 	andi	r2,r2,65535
   49fec:	10000426 	beq	r2,zero,4a000 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   49ff0:	e0bffd17 	ldw	r2,-12(fp)
   49ff4:	e0fffe0b 	ldhu	r3,-8(fp)
   49ff8:	10c0020d 	sth	r3,8(r2)
   49ffc:	00000b06 	br	4a02c <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   4a000:	e0bffd17 	ldw	r2,-12(fp)
   4a004:	10800283 	ldbu	r2,10(r2)
   4a008:	10803fcc 	andi	r2,r2,255
   4a00c:	1000041e 	bne	r2,zero,4a020 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   4a010:	e0bffd17 	ldw	r2,-12(fp)
   4a014:	e0fffe0b 	ldhu	r3,-8(fp)
   4a018:	10c0020d 	sth	r3,8(r2)
   4a01c:	00000306 	br	4a02c <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   4a020:	e0bfff17 	ldw	r2,-4(fp)
   4a024:	00c01244 	movi	r3,73
   4a028:	10c00005 	stb	r3,0(r2)
   4a02c:	e0bffa17 	ldw	r2,-24(fp)
   4a030:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a034:	e0bffc17 	ldw	r2,-16(fp)
   4a038:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   4a03c:	e037883a 	mov	sp,fp
   4a040:	df000017 	ldw	fp,0(sp)
   4a044:	dec00104 	addi	sp,sp,4
   4a048:	f800283a 	ret

0004a04c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   4a04c:	defff104 	addi	sp,sp,-60
   4a050:	dfc00e15 	stw	ra,56(sp)
   4a054:	df000d15 	stw	fp,52(sp)
   4a058:	df000d04 	addi	fp,sp,52
   4a05c:	2007883a 	mov	r3,r4
   4a060:	2805883a 	mov	r2,r5
   4a064:	e0fffe05 	stb	r3,-8(fp)
   4a068:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   4a06c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   4a070:	e0bffe03 	ldbu	r2,-8(fp)
   4a074:	10800530 	cmpltui	r2,r2,20
   4a078:	1000051e 	bne	r2,zero,4a090 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   4a07c:	e0bffe03 	ldbu	r2,-8(fp)
   4a080:	10803fe0 	cmpeqi	r2,r2,255
   4a084:	1000021e 	bne	r2,zero,4a090 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   4a088:	00800a84 	movi	r2,42
   4a08c:	00013a06 	br	4a578 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   4a090:	e0bfff03 	ldbu	r2,-4(fp)
   4a094:	10800530 	cmpltui	r2,r2,20
   4a098:	1000021e 	bne	r2,zero,4a0a4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   4a09c:	00800a84 	movi	r2,42
   4a0a0:	00013506 	br	4a578 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a0a4:	0005303a 	rdctl	r2,status
   4a0a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a0ac:	e0fff917 	ldw	r3,-28(fp)
   4a0b0:	00bfff84 	movi	r2,-2
   4a0b4:	1884703a 	and	r2,r3,r2
   4a0b8:	1001703a 	wrctl	status,r2
  
  return context;
   4a0bc:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   4a0c0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   4a0c4:	e0ffff03 	ldbu	r3,-4(fp)
   4a0c8:	008001b4 	movhi	r2,6
   4a0cc:	10af5d04 	addi	r2,r2,-17036
   4a0d0:	18c7883a 	add	r3,r3,r3
   4a0d4:	18c7883a 	add	r3,r3,r3
   4a0d8:	10c5883a 	add	r2,r2,r3
   4a0dc:	10800017 	ldw	r2,0(r2)
   4a0e0:	10000626 	beq	r2,zero,4a0fc <OSTaskChangePrio+0xb0>
   4a0e4:	e0bff517 	ldw	r2,-44(fp)
   4a0e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a0ec:	e0bffa17 	ldw	r2,-24(fp)
   4a0f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   4a0f4:	00800a04 	movi	r2,40
   4a0f8:	00011f06 	br	4a578 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   4a0fc:	e0bffe03 	ldbu	r2,-8(fp)
   4a100:	10803fd8 	cmpnei	r2,r2,255
   4a104:	1000051e 	bne	r2,zero,4a11c <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   4a108:	00800174 	movhi	r2,5
   4a10c:	108ad604 	addi	r2,r2,11096
   4a110:	10800017 	ldw	r2,0(r2)
   4a114:	10800c83 	ldbu	r2,50(r2)
   4a118:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   4a11c:	e0fffe03 	ldbu	r3,-8(fp)
   4a120:	008001b4 	movhi	r2,6
   4a124:	10af5d04 	addi	r2,r2,-17036
   4a128:	18c7883a 	add	r3,r3,r3
   4a12c:	18c7883a 	add	r3,r3,r3
   4a130:	10c5883a 	add	r2,r2,r3
   4a134:	10800017 	ldw	r2,0(r2)
   4a138:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   4a13c:	e0bff617 	ldw	r2,-40(fp)
   4a140:	1000061e 	bne	r2,zero,4a15c <OSTaskChangePrio+0x110>
   4a144:	e0bff517 	ldw	r2,-44(fp)
   4a148:	e0bffb15 	stw	r2,-20(fp)
   4a14c:	e0bffb17 	ldw	r2,-20(fp)
   4a150:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   4a154:	00800a44 	movi	r2,41
   4a158:	00010706 	br	4a578 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   4a15c:	e0bff617 	ldw	r2,-40(fp)
   4a160:	10800058 	cmpnei	r2,r2,1
   4a164:	1000061e 	bne	r2,zero,4a180 <OSTaskChangePrio+0x134>
   4a168:	e0bff517 	ldw	r2,-44(fp)
   4a16c:	e0bffc15 	stw	r2,-16(fp)
   4a170:	e0bffc17 	ldw	r2,-16(fp)
   4a174:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   4a178:	008010c4 	movi	r2,67
   4a17c:	0000fe06 	br	4a578 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   4a180:	e0bfff03 	ldbu	r2,-4(fp)
   4a184:	1004d0fa 	srli	r2,r2,3
   4a188:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   4a18c:	e0bfff03 	ldbu	r2,-4(fp)
   4a190:	108001cc 	andi	r2,r2,7
   4a194:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   4a198:	e0bff703 	ldbu	r2,-36(fp)
   4a19c:	00c00044 	movi	r3,1
   4a1a0:	1884983a 	sll	r2,r3,r2
   4a1a4:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   4a1a8:	e0bff743 	ldbu	r2,-35(fp)
   4a1ac:	00c00044 	movi	r3,1
   4a1b0:	1884983a 	sll	r2,r3,r2
   4a1b4:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   4a1b8:	e0fffe03 	ldbu	r3,-8(fp)
   4a1bc:	008001b4 	movhi	r2,6
   4a1c0:	10af5d04 	addi	r2,r2,-17036
   4a1c4:	18c7883a 	add	r3,r3,r3
   4a1c8:	18c7883a 	add	r3,r3,r3
   4a1cc:	10c5883a 	add	r2,r2,r3
   4a1d0:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   4a1d4:	e0ffff03 	ldbu	r3,-4(fp)
   4a1d8:	008001b4 	movhi	r2,6
   4a1dc:	10af5d04 	addi	r2,r2,-17036
   4a1e0:	18c7883a 	add	r3,r3,r3
   4a1e4:	18c7883a 	add	r3,r3,r3
   4a1e8:	10c5883a 	add	r2,r2,r3
   4a1ec:	e0fff617 	ldw	r3,-40(fp)
   4a1f0:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   4a1f4:	e0bff617 	ldw	r2,-40(fp)
   4a1f8:	10800d03 	ldbu	r2,52(r2)
   4a1fc:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   4a200:	e0bff617 	ldw	r2,-40(fp)
   4a204:	10800d83 	ldbu	r2,54(r2)
   4a208:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   4a20c:	e0bff617 	ldw	r2,-40(fp)
   4a210:	10800d43 	ldbu	r2,53(r2)
   4a214:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   4a218:	e0fff803 	ldbu	r3,-32(fp)
   4a21c:	00800174 	movhi	r2,5
   4a220:	108ad344 	addi	r2,r2,11085
   4a224:	10c5883a 	add	r2,r2,r3
   4a228:	10c00003 	ldbu	r3,0(r2)
   4a22c:	e0bff883 	ldbu	r2,-30(fp)
   4a230:	1884703a 	and	r2,r3,r2
   4a234:	10803fcc 	andi	r2,r2,255
   4a238:	10003726 	beq	r2,zero,4a318 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   4a23c:	e0fff803 	ldbu	r3,-32(fp)
   4a240:	e13ff803 	ldbu	r4,-32(fp)
   4a244:	00800174 	movhi	r2,5
   4a248:	108ad344 	addi	r2,r2,11085
   4a24c:	1105883a 	add	r2,r2,r4
   4a250:	10800003 	ldbu	r2,0(r2)
   4a254:	1009883a 	mov	r4,r2
   4a258:	e0bff883 	ldbu	r2,-30(fp)
   4a25c:	0084303a 	nor	r2,zero,r2
   4a260:	2084703a 	and	r2,r4,r2
   4a264:	1009883a 	mov	r4,r2
   4a268:	00800174 	movhi	r2,5
   4a26c:	108ad344 	addi	r2,r2,11085
   4a270:	10c5883a 	add	r2,r2,r3
   4a274:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   4a278:	e0fff803 	ldbu	r3,-32(fp)
   4a27c:	00800174 	movhi	r2,5
   4a280:	108ad344 	addi	r2,r2,11085
   4a284:	10c5883a 	add	r2,r2,r3
   4a288:	10800003 	ldbu	r2,0(r2)
   4a28c:	10803fcc 	andi	r2,r2,255
   4a290:	10000b1e 	bne	r2,zero,4a2c0 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   4a294:	e0bff843 	ldbu	r2,-31(fp)
   4a298:	0084303a 	nor	r2,zero,r2
   4a29c:	1007883a 	mov	r3,r2
   4a2a0:	00800174 	movhi	r2,5
   4a2a4:	108ad304 	addi	r2,r2,11084
   4a2a8:	10800003 	ldbu	r2,0(r2)
   4a2ac:	1884703a 	and	r2,r3,r2
   4a2b0:	1007883a 	mov	r3,r2
   4a2b4:	00800174 	movhi	r2,5
   4a2b8:	108ad304 	addi	r2,r2,11084
   4a2bc:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   4a2c0:	00800174 	movhi	r2,5
   4a2c4:	108ad304 	addi	r2,r2,11084
   4a2c8:	10c00003 	ldbu	r3,0(r2)
   4a2cc:	e0bff783 	ldbu	r2,-34(fp)
   4a2d0:	1884b03a 	or	r2,r3,r2
   4a2d4:	1007883a 	mov	r3,r2
   4a2d8:	00800174 	movhi	r2,5
   4a2dc:	108ad304 	addi	r2,r2,11084
   4a2e0:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   4a2e4:	e0fff703 	ldbu	r3,-36(fp)
   4a2e8:	e13ff703 	ldbu	r4,-36(fp)
   4a2ec:	00800174 	movhi	r2,5
   4a2f0:	108ad344 	addi	r2,r2,11085
   4a2f4:	1105883a 	add	r2,r2,r4
   4a2f8:	11000003 	ldbu	r4,0(r2)
   4a2fc:	e0bff7c3 	ldbu	r2,-33(fp)
   4a300:	2084b03a 	or	r2,r4,r2
   4a304:	1009883a 	mov	r4,r2
   4a308:	00800174 	movhi	r2,5
   4a30c:	108ad344 	addi	r2,r2,11085
   4a310:	10c5883a 	add	r2,r2,r3
   4a314:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   4a318:	e0bff617 	ldw	r2,-40(fp)
   4a31c:	10800717 	ldw	r2,28(r2)
   4a320:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   4a324:	e0bff317 	ldw	r2,-52(fp)
   4a328:	10003326 	beq	r2,zero,4a3f8 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   4a32c:	e0bff803 	ldbu	r2,-32(fp)
   4a330:	e0fff803 	ldbu	r3,-32(fp)
   4a334:	e13ff317 	ldw	r4,-52(fp)
   4a338:	20c7883a 	add	r3,r4,r3
   4a33c:	18c00204 	addi	r3,r3,8
   4a340:	18c000c3 	ldbu	r3,3(r3)
   4a344:	1809883a 	mov	r4,r3
   4a348:	e0fff883 	ldbu	r3,-30(fp)
   4a34c:	00c6303a 	nor	r3,zero,r3
   4a350:	20c6703a 	and	r3,r4,r3
   4a354:	1809883a 	mov	r4,r3
   4a358:	e0fff317 	ldw	r3,-52(fp)
   4a35c:	1885883a 	add	r2,r3,r2
   4a360:	10800204 	addi	r2,r2,8
   4a364:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   4a368:	e0bff803 	ldbu	r2,-32(fp)
   4a36c:	e0fff317 	ldw	r3,-52(fp)
   4a370:	1885883a 	add	r2,r3,r2
   4a374:	10800204 	addi	r2,r2,8
   4a378:	108000c3 	ldbu	r2,3(r2)
   4a37c:	10803fcc 	andi	r2,r2,255
   4a380:	1000091e 	bne	r2,zero,4a3a8 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   4a384:	e0bff317 	ldw	r2,-52(fp)
   4a388:	10800283 	ldbu	r2,10(r2)
   4a38c:	1007883a 	mov	r3,r2
   4a390:	e0bff843 	ldbu	r2,-31(fp)
   4a394:	0084303a 	nor	r2,zero,r2
   4a398:	1884703a 	and	r2,r3,r2
   4a39c:	1007883a 	mov	r3,r2
   4a3a0:	e0bff317 	ldw	r2,-52(fp)
   4a3a4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   4a3a8:	e0bff317 	ldw	r2,-52(fp)
   4a3ac:	10c00283 	ldbu	r3,10(r2)
   4a3b0:	e0bff783 	ldbu	r2,-34(fp)
   4a3b4:	1884b03a 	or	r2,r3,r2
   4a3b8:	1007883a 	mov	r3,r2
   4a3bc:	e0bff317 	ldw	r2,-52(fp)
   4a3c0:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   4a3c4:	e0bff703 	ldbu	r2,-36(fp)
   4a3c8:	e0fff703 	ldbu	r3,-36(fp)
   4a3cc:	e13ff317 	ldw	r4,-52(fp)
   4a3d0:	20c7883a 	add	r3,r4,r3
   4a3d4:	18c00204 	addi	r3,r3,8
   4a3d8:	190000c3 	ldbu	r4,3(r3)
   4a3dc:	e0fff7c3 	ldbu	r3,-33(fp)
   4a3e0:	20c6b03a 	or	r3,r4,r3
   4a3e4:	1809883a 	mov	r4,r3
   4a3e8:	e0fff317 	ldw	r3,-52(fp)
   4a3ec:	1885883a 	add	r2,r3,r2
   4a3f0:	10800204 	addi	r2,r2,8
   4a3f4:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   4a3f8:	e0bff617 	ldw	r2,-40(fp)
   4a3fc:	10800817 	ldw	r2,32(r2)
   4a400:	10004226 	beq	r2,zero,4a50c <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   4a404:	e0bff617 	ldw	r2,-40(fp)
   4a408:	10800817 	ldw	r2,32(r2)
   4a40c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   4a410:	e0bff417 	ldw	r2,-48(fp)
   4a414:	10800017 	ldw	r2,0(r2)
   4a418:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   4a41c:	00003906 	br	4a504 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   4a420:	e0bff803 	ldbu	r2,-32(fp)
   4a424:	e0fff803 	ldbu	r3,-32(fp)
   4a428:	e13ff317 	ldw	r4,-52(fp)
   4a42c:	20c7883a 	add	r3,r4,r3
   4a430:	18c00204 	addi	r3,r3,8
   4a434:	18c000c3 	ldbu	r3,3(r3)
   4a438:	1809883a 	mov	r4,r3
   4a43c:	e0fff883 	ldbu	r3,-30(fp)
   4a440:	00c6303a 	nor	r3,zero,r3
   4a444:	20c6703a 	and	r3,r4,r3
   4a448:	1809883a 	mov	r4,r3
   4a44c:	e0fff317 	ldw	r3,-52(fp)
   4a450:	1885883a 	add	r2,r3,r2
   4a454:	10800204 	addi	r2,r2,8
   4a458:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   4a45c:	e0bff803 	ldbu	r2,-32(fp)
   4a460:	e0fff317 	ldw	r3,-52(fp)
   4a464:	1885883a 	add	r2,r3,r2
   4a468:	10800204 	addi	r2,r2,8
   4a46c:	108000c3 	ldbu	r2,3(r2)
   4a470:	10803fcc 	andi	r2,r2,255
   4a474:	1000091e 	bne	r2,zero,4a49c <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   4a478:	e0bff317 	ldw	r2,-52(fp)
   4a47c:	10800283 	ldbu	r2,10(r2)
   4a480:	1007883a 	mov	r3,r2
   4a484:	e0bff843 	ldbu	r2,-31(fp)
   4a488:	0084303a 	nor	r2,zero,r2
   4a48c:	1884703a 	and	r2,r3,r2
   4a490:	1007883a 	mov	r3,r2
   4a494:	e0bff317 	ldw	r2,-52(fp)
   4a498:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   4a49c:	e0bff317 	ldw	r2,-52(fp)
   4a4a0:	10c00283 	ldbu	r3,10(r2)
   4a4a4:	e0bff783 	ldbu	r2,-34(fp)
   4a4a8:	1884b03a 	or	r2,r3,r2
   4a4ac:	1007883a 	mov	r3,r2
   4a4b0:	e0bff317 	ldw	r2,-52(fp)
   4a4b4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   4a4b8:	e0bff703 	ldbu	r2,-36(fp)
   4a4bc:	e0fff703 	ldbu	r3,-36(fp)
   4a4c0:	e13ff317 	ldw	r4,-52(fp)
   4a4c4:	20c7883a 	add	r3,r4,r3
   4a4c8:	18c00204 	addi	r3,r3,8
   4a4cc:	190000c3 	ldbu	r4,3(r3)
   4a4d0:	e0fff7c3 	ldbu	r3,-33(fp)
   4a4d4:	20c6b03a 	or	r3,r4,r3
   4a4d8:	1809883a 	mov	r4,r3
   4a4dc:	e0fff317 	ldw	r3,-52(fp)
   4a4e0:	1885883a 	add	r2,r3,r2
   4a4e4:	10800204 	addi	r2,r2,8
   4a4e8:	110000c5 	stb	r4,3(r2)
            pevents++;
   4a4ec:	e0bff417 	ldw	r2,-48(fp)
   4a4f0:	10800104 	addi	r2,r2,4
   4a4f4:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   4a4f8:	e0bff417 	ldw	r2,-48(fp)
   4a4fc:	10800017 	ldw	r2,0(r2)
   4a500:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   4a504:	e0bff317 	ldw	r2,-52(fp)
   4a508:	103fc51e 	bne	r2,zero,4a420 <__alt_data_end+0xfffd48c0>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   4a50c:	e0bff617 	ldw	r2,-40(fp)
   4a510:	e0ffff03 	ldbu	r3,-4(fp)
   4a514:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   4a518:	e0bff617 	ldw	r2,-40(fp)
   4a51c:	e0fff703 	ldbu	r3,-36(fp)
   4a520:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   4a524:	e0bff617 	ldw	r2,-40(fp)
   4a528:	e0fff743 	ldbu	r3,-35(fp)
   4a52c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   4a530:	e0bff617 	ldw	r2,-40(fp)
   4a534:	e0fff783 	ldbu	r3,-34(fp)
   4a538:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   4a53c:	e0bff617 	ldw	r2,-40(fp)
   4a540:	e0fff7c3 	ldbu	r3,-33(fp)
   4a544:	10c00d45 	stb	r3,53(r2)
   4a548:	e0bff517 	ldw	r2,-44(fp)
   4a54c:	e0bffd15 	stw	r2,-12(fp)
   4a550:	e0bffd17 	ldw	r2,-12(fp)
   4a554:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   4a558:	00800174 	movhi	r2,5
   4a55c:	108ac744 	addi	r2,r2,11037
   4a560:	10800003 	ldbu	r2,0(r2)
   4a564:	10803fcc 	andi	r2,r2,255
   4a568:	10800058 	cmpnei	r2,r2,1
   4a56c:	1000011e 	bne	r2,zero,4a574 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   4a570:	0045b340 	call	45b34 <OS_Sched>
    }
    return (OS_ERR_NONE);
   4a574:	0005883a 	mov	r2,zero
}
   4a578:	e037883a 	mov	sp,fp
   4a57c:	dfc00117 	ldw	ra,4(sp)
   4a580:	df000017 	ldw	fp,0(sp)
   4a584:	dec00204 	addi	sp,sp,8
   4a588:	f800283a 	ret

0004a58c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   4a58c:	deffee04 	addi	sp,sp,-72
   4a590:	dfc01115 	stw	ra,68(sp)
   4a594:	df001015 	stw	fp,64(sp)
   4a598:	df001004 	addi	fp,sp,64
   4a59c:	e13ffc15 	stw	r4,-16(fp)
   4a5a0:	e17ffd15 	stw	r5,-12(fp)
   4a5a4:	e1bffe15 	stw	r6,-8(fp)
   4a5a8:	3805883a 	mov	r2,r7
   4a5ac:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   4a5b0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   4a5b4:	e0bfff03 	ldbu	r2,-4(fp)
   4a5b8:	10800570 	cmpltui	r2,r2,21
   4a5bc:	1000021e 	bne	r2,zero,4a5c8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   4a5c0:	00800a84 	movi	r2,42
   4a5c4:	00005b06 	br	4a734 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a5c8:	0005303a 	rdctl	r2,status
   4a5cc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a5d0:	e0fff617 	ldw	r3,-40(fp)
   4a5d4:	00bfff84 	movi	r2,-2
   4a5d8:	1884703a 	and	r2,r3,r2
   4a5dc:	1001703a 	wrctl	status,r2
  
  return context;
   4a5e0:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   4a5e4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   4a5e8:	00800174 	movhi	r2,5
   4a5ec:	108ad504 	addi	r2,r2,11092
   4a5f0:	10800003 	ldbu	r2,0(r2)
   4a5f4:	10803fcc 	andi	r2,r2,255
   4a5f8:	10000626 	beq	r2,zero,4a614 <OSTaskCreate+0x88>
   4a5fc:	e0bff317 	ldw	r2,-52(fp)
   4a600:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a604:	e0bff717 	ldw	r2,-36(fp)
   4a608:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   4a60c:	00800f04 	movi	r2,60
   4a610:	00004806 	br	4a734 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   4a614:	e0ffff03 	ldbu	r3,-4(fp)
   4a618:	008001b4 	movhi	r2,6
   4a61c:	10af5d04 	addi	r2,r2,-17036
   4a620:	18c7883a 	add	r3,r3,r3
   4a624:	18c7883a 	add	r3,r3,r3
   4a628:	10c5883a 	add	r2,r2,r3
   4a62c:	10800017 	ldw	r2,0(r2)
   4a630:	10003b1e 	bne	r2,zero,4a720 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   4a634:	e0ffff03 	ldbu	r3,-4(fp)
   4a638:	008001b4 	movhi	r2,6
   4a63c:	10af5d04 	addi	r2,r2,-17036
   4a640:	18c7883a 	add	r3,r3,r3
   4a644:	18c7883a 	add	r3,r3,r3
   4a648:	10c5883a 	add	r2,r2,r3
   4a64c:	00c00044 	movi	r3,1
   4a650:	10c00015 	stw	r3,0(r2)
   4a654:	e0bff317 	ldw	r2,-52(fp)
   4a658:	e0bff815 	stw	r2,-32(fp)
   4a65c:	e0bff817 	ldw	r2,-32(fp)
   4a660:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   4a664:	e13ffc17 	ldw	r4,-16(fp)
   4a668:	e17ffd17 	ldw	r5,-12(fp)
   4a66c:	e1bffe17 	ldw	r6,-8(fp)
   4a670:	000f883a 	mov	r7,zero
   4a674:	004e5c00 	call	4e5c0 <OSTaskStkInit>
   4a678:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   4a67c:	e0bfff03 	ldbu	r2,-4(fp)
   4a680:	d8000015 	stw	zero,0(sp)
   4a684:	d8000115 	stw	zero,4(sp)
   4a688:	d8000215 	stw	zero,8(sp)
   4a68c:	1009883a 	mov	r4,r2
   4a690:	e17ff417 	ldw	r5,-48(fp)
   4a694:	000d883a 	mov	r6,zero
   4a698:	000f883a 	mov	r7,zero
   4a69c:	0045f280 	call	45f28 <OS_TCBInit>
   4a6a0:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   4a6a4:	e0bff503 	ldbu	r2,-44(fp)
   4a6a8:	1000081e 	bne	r2,zero,4a6cc <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   4a6ac:	00800174 	movhi	r2,5
   4a6b0:	108ac744 	addi	r2,r2,11037
   4a6b4:	10800003 	ldbu	r2,0(r2)
   4a6b8:	10803fcc 	andi	r2,r2,255
   4a6bc:	10800058 	cmpnei	r2,r2,1
   4a6c0:	1000151e 	bne	r2,zero,4a718 <OSTaskCreate+0x18c>
                OS_Sched();
   4a6c4:	0045b340 	call	45b34 <OS_Sched>
   4a6c8:	00001306 	br	4a718 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a6cc:	0005303a 	rdctl	r2,status
   4a6d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a6d4:	e0fff917 	ldw	r3,-28(fp)
   4a6d8:	00bfff84 	movi	r2,-2
   4a6dc:	1884703a 	and	r2,r3,r2
   4a6e0:	1001703a 	wrctl	status,r2
  
  return context;
   4a6e4:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   4a6e8:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   4a6ec:	e0ffff03 	ldbu	r3,-4(fp)
   4a6f0:	008001b4 	movhi	r2,6
   4a6f4:	10af5d04 	addi	r2,r2,-17036
   4a6f8:	18c7883a 	add	r3,r3,r3
   4a6fc:	18c7883a 	add	r3,r3,r3
   4a700:	10c5883a 	add	r2,r2,r3
   4a704:	10000015 	stw	zero,0(r2)
   4a708:	e0bff317 	ldw	r2,-52(fp)
   4a70c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a710:	e0bffa17 	ldw	r2,-24(fp)
   4a714:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   4a718:	e0bff503 	ldbu	r2,-44(fp)
   4a71c:	00000506 	br	4a734 <OSTaskCreate+0x1a8>
   4a720:	e0bff317 	ldw	r2,-52(fp)
   4a724:	e0bffb15 	stw	r2,-20(fp)
   4a728:	e0bffb17 	ldw	r2,-20(fp)
   4a72c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   4a730:	00800a04 	movi	r2,40
}
   4a734:	e037883a 	mov	sp,fp
   4a738:	dfc00117 	ldw	ra,4(sp)
   4a73c:	df000017 	ldw	fp,0(sp)
   4a740:	dec00204 	addi	sp,sp,8
   4a744:	f800283a 	ret

0004a748 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   4a748:	deffec04 	addi	sp,sp,-80
   4a74c:	dfc01315 	stw	ra,76(sp)
   4a750:	df001215 	stw	fp,72(sp)
   4a754:	df001204 	addi	fp,sp,72
   4a758:	e13ffa15 	stw	r4,-24(fp)
   4a75c:	e17ffb15 	stw	r5,-20(fp)
   4a760:	e1bffc15 	stw	r6,-16(fp)
   4a764:	3809883a 	mov	r4,r7
   4a768:	e0c00217 	ldw	r3,8(fp)
   4a76c:	e0800617 	ldw	r2,24(fp)
   4a770:	e13ffd05 	stb	r4,-12(fp)
   4a774:	e0fffe0d 	sth	r3,-8(fp)
   4a778:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   4a77c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   4a780:	e0bffd03 	ldbu	r2,-12(fp)
   4a784:	10800570 	cmpltui	r2,r2,21
   4a788:	1000021e 	bne	r2,zero,4a794 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   4a78c:	00800a84 	movi	r2,42
   4a790:	00006306 	br	4a920 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a794:	0005303a 	rdctl	r2,status
   4a798:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a79c:	e0fff417 	ldw	r3,-48(fp)
   4a7a0:	00bfff84 	movi	r2,-2
   4a7a4:	1884703a 	and	r2,r3,r2
   4a7a8:	1001703a 	wrctl	status,r2
  
  return context;
   4a7ac:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   4a7b0:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   4a7b4:	00800174 	movhi	r2,5
   4a7b8:	108ad504 	addi	r2,r2,11092
   4a7bc:	10800003 	ldbu	r2,0(r2)
   4a7c0:	10803fcc 	andi	r2,r2,255
   4a7c4:	10000626 	beq	r2,zero,4a7e0 <OSTaskCreateExt+0x98>
   4a7c8:	e0bff117 	ldw	r2,-60(fp)
   4a7cc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a7d0:	e0bff517 	ldw	r2,-44(fp)
   4a7d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   4a7d8:	00800f04 	movi	r2,60
   4a7dc:	00005006 	br	4a920 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   4a7e0:	e0fffd03 	ldbu	r3,-12(fp)
   4a7e4:	008001b4 	movhi	r2,6
   4a7e8:	10af5d04 	addi	r2,r2,-17036
   4a7ec:	18c7883a 	add	r3,r3,r3
   4a7f0:	18c7883a 	add	r3,r3,r3
   4a7f4:	10c5883a 	add	r2,r2,r3
   4a7f8:	10800017 	ldw	r2,0(r2)
   4a7fc:	1000431e 	bne	r2,zero,4a90c <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   4a800:	e0fffd03 	ldbu	r3,-12(fp)
   4a804:	008001b4 	movhi	r2,6
   4a808:	10af5d04 	addi	r2,r2,-17036
   4a80c:	18c7883a 	add	r3,r3,r3
   4a810:	18c7883a 	add	r3,r3,r3
   4a814:	10c5883a 	add	r2,r2,r3
   4a818:	00c00044 	movi	r3,1
   4a81c:	10c00015 	stw	r3,0(r2)
   4a820:	e0bff117 	ldw	r2,-60(fp)
   4a824:	e0bff615 	stw	r2,-40(fp)
   4a828:	e0bff617 	ldw	r2,-40(fp)
   4a82c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   4a830:	e0bfff0b 	ldhu	r2,-4(fp)
   4a834:	e1000317 	ldw	r4,12(fp)
   4a838:	e1400417 	ldw	r5,16(fp)
   4a83c:	100d883a 	mov	r6,r2
   4a840:	004b8d40 	call	4b8d4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   4a844:	e0bfff0b 	ldhu	r2,-4(fp)
   4a848:	e13ffa17 	ldw	r4,-24(fp)
   4a84c:	e17ffb17 	ldw	r5,-20(fp)
   4a850:	e1bffc17 	ldw	r6,-16(fp)
   4a854:	100f883a 	mov	r7,r2
   4a858:	004e5c00 	call	4e5c0 <OSTaskStkInit>
   4a85c:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   4a860:	e13ffd03 	ldbu	r4,-12(fp)
   4a864:	e1fffe0b 	ldhu	r7,-8(fp)
   4a868:	e0bfff0b 	ldhu	r2,-4(fp)
   4a86c:	e0c00417 	ldw	r3,16(fp)
   4a870:	d8c00015 	stw	r3,0(sp)
   4a874:	e0c00517 	ldw	r3,20(fp)
   4a878:	d8c00115 	stw	r3,4(sp)
   4a87c:	d8800215 	stw	r2,8(sp)
   4a880:	e17ff217 	ldw	r5,-56(fp)
   4a884:	e1800317 	ldw	r6,12(fp)
   4a888:	0045f280 	call	45f28 <OS_TCBInit>
   4a88c:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   4a890:	e0bff303 	ldbu	r2,-52(fp)
   4a894:	1000081e 	bne	r2,zero,4a8b8 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   4a898:	00800174 	movhi	r2,5
   4a89c:	108ac744 	addi	r2,r2,11037
   4a8a0:	10800003 	ldbu	r2,0(r2)
   4a8a4:	10803fcc 	andi	r2,r2,255
   4a8a8:	10800058 	cmpnei	r2,r2,1
   4a8ac:	1000151e 	bne	r2,zero,4a904 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   4a8b0:	0045b340 	call	45b34 <OS_Sched>
   4a8b4:	00001306 	br	4a904 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a8b8:	0005303a 	rdctl	r2,status
   4a8bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a8c0:	e0fff717 	ldw	r3,-36(fp)
   4a8c4:	00bfff84 	movi	r2,-2
   4a8c8:	1884703a 	and	r2,r3,r2
   4a8cc:	1001703a 	wrctl	status,r2
  
  return context;
   4a8d0:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   4a8d4:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   4a8d8:	e0fffd03 	ldbu	r3,-12(fp)
   4a8dc:	008001b4 	movhi	r2,6
   4a8e0:	10af5d04 	addi	r2,r2,-17036
   4a8e4:	18c7883a 	add	r3,r3,r3
   4a8e8:	18c7883a 	add	r3,r3,r3
   4a8ec:	10c5883a 	add	r2,r2,r3
   4a8f0:	10000015 	stw	zero,0(r2)
   4a8f4:	e0bff117 	ldw	r2,-60(fp)
   4a8f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a8fc:	e0bff817 	ldw	r2,-32(fp)
   4a900:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   4a904:	e0bff303 	ldbu	r2,-52(fp)
   4a908:	00000506 	br	4a920 <OSTaskCreateExt+0x1d8>
   4a90c:	e0bff117 	ldw	r2,-60(fp)
   4a910:	e0bff915 	stw	r2,-28(fp)
   4a914:	e0bff917 	ldw	r2,-28(fp)
   4a918:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   4a91c:	00800a04 	movi	r2,40
}
   4a920:	e037883a 	mov	sp,fp
   4a924:	dfc00117 	ldw	ra,4(sp)
   4a928:	df000017 	ldw	fp,0(sp)
   4a92c:	dec00204 	addi	sp,sp,8
   4a930:	f800283a 	ret

0004a934 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   4a934:	defff404 	addi	sp,sp,-48
   4a938:	dfc00b15 	stw	ra,44(sp)
   4a93c:	df000a15 	stw	fp,40(sp)
   4a940:	df000a04 	addi	fp,sp,40
   4a944:	2005883a 	mov	r2,r4
   4a948:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   4a94c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   4a950:	00800174 	movhi	r2,5
   4a954:	108ad504 	addi	r2,r2,11092
   4a958:	10800003 	ldbu	r2,0(r2)
   4a95c:	10803fcc 	andi	r2,r2,255
   4a960:	10000226 	beq	r2,zero,4a96c <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   4a964:	00801004 	movi	r2,64
   4a968:	0000e506 	br	4ad00 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   4a96c:	e0bfff03 	ldbu	r2,-4(fp)
   4a970:	10800518 	cmpnei	r2,r2,20
   4a974:	1000021e 	bne	r2,zero,4a980 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   4a978:	00800f84 	movi	r2,62
   4a97c:	0000e006 	br	4ad00 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   4a980:	e0bfff03 	ldbu	r2,-4(fp)
   4a984:	10800530 	cmpltui	r2,r2,20
   4a988:	1000051e 	bne	r2,zero,4a9a0 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   4a98c:	e0bfff03 	ldbu	r2,-4(fp)
   4a990:	10803fe0 	cmpeqi	r2,r2,255
   4a994:	1000021e 	bne	r2,zero,4a9a0 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   4a998:	00800a84 	movi	r2,42
   4a99c:	0000d806 	br	4ad00 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a9a0:	0005303a 	rdctl	r2,status
   4a9a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a9a8:	e0fff917 	ldw	r3,-28(fp)
   4a9ac:	00bfff84 	movi	r2,-2
   4a9b0:	1884703a 	and	r2,r3,r2
   4a9b4:	1001703a 	wrctl	status,r2
  
  return context;
   4a9b8:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   4a9bc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   4a9c0:	e0bfff03 	ldbu	r2,-4(fp)
   4a9c4:	10803fd8 	cmpnei	r2,r2,255
   4a9c8:	1000051e 	bne	r2,zero,4a9e0 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   4a9cc:	00800174 	movhi	r2,5
   4a9d0:	108ad604 	addi	r2,r2,11096
   4a9d4:	10800017 	ldw	r2,0(r2)
   4a9d8:	10800c83 	ldbu	r2,50(r2)
   4a9dc:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   4a9e0:	e0ffff03 	ldbu	r3,-4(fp)
   4a9e4:	008001b4 	movhi	r2,6
   4a9e8:	10af5d04 	addi	r2,r2,-17036
   4a9ec:	18c7883a 	add	r3,r3,r3
   4a9f0:	18c7883a 	add	r3,r3,r3
   4a9f4:	10c5883a 	add	r2,r2,r3
   4a9f8:	10800017 	ldw	r2,0(r2)
   4a9fc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   4aa00:	e0bff717 	ldw	r2,-36(fp)
   4aa04:	1000061e 	bne	r2,zero,4aa20 <OSTaskDel+0xec>
   4aa08:	e0bff617 	ldw	r2,-40(fp)
   4aa0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4aa10:	e0bffa17 	ldw	r2,-24(fp)
   4aa14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   4aa18:	008010c4 	movi	r2,67
   4aa1c:	0000b806 	br	4ad00 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   4aa20:	e0bff717 	ldw	r2,-36(fp)
   4aa24:	10800058 	cmpnei	r2,r2,1
   4aa28:	1000061e 	bne	r2,zero,4aa44 <OSTaskDel+0x110>
   4aa2c:	e0bff617 	ldw	r2,-40(fp)
   4aa30:	e0bffb15 	stw	r2,-20(fp)
   4aa34:	e0bffb17 	ldw	r2,-20(fp)
   4aa38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   4aa3c:	00800f44 	movi	r2,61
   4aa40:	0000af06 	br	4ad00 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   4aa44:	e0bff717 	ldw	r2,-36(fp)
   4aa48:	10800d03 	ldbu	r2,52(r2)
   4aa4c:	10c03fcc 	andi	r3,r2,255
   4aa50:	e0bff717 	ldw	r2,-36(fp)
   4aa54:	10800d03 	ldbu	r2,52(r2)
   4aa58:	11003fcc 	andi	r4,r2,255
   4aa5c:	00800174 	movhi	r2,5
   4aa60:	108ad344 	addi	r2,r2,11085
   4aa64:	1105883a 	add	r2,r2,r4
   4aa68:	10800003 	ldbu	r2,0(r2)
   4aa6c:	1009883a 	mov	r4,r2
   4aa70:	e0bff717 	ldw	r2,-36(fp)
   4aa74:	10800d43 	ldbu	r2,53(r2)
   4aa78:	0084303a 	nor	r2,zero,r2
   4aa7c:	2084703a 	and	r2,r4,r2
   4aa80:	1009883a 	mov	r4,r2
   4aa84:	00800174 	movhi	r2,5
   4aa88:	108ad344 	addi	r2,r2,11085
   4aa8c:	10c5883a 	add	r2,r2,r3
   4aa90:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   4aa94:	e0bff717 	ldw	r2,-36(fp)
   4aa98:	10800d03 	ldbu	r2,52(r2)
   4aa9c:	10c03fcc 	andi	r3,r2,255
   4aaa0:	00800174 	movhi	r2,5
   4aaa4:	108ad344 	addi	r2,r2,11085
   4aaa8:	10c5883a 	add	r2,r2,r3
   4aaac:	10800003 	ldbu	r2,0(r2)
   4aab0:	10803fcc 	andi	r2,r2,255
   4aab4:	10000c1e 	bne	r2,zero,4aae8 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   4aab8:	e0bff717 	ldw	r2,-36(fp)
   4aabc:	10800d83 	ldbu	r2,54(r2)
   4aac0:	0084303a 	nor	r2,zero,r2
   4aac4:	1007883a 	mov	r3,r2
   4aac8:	00800174 	movhi	r2,5
   4aacc:	108ad304 	addi	r2,r2,11084
   4aad0:	10800003 	ldbu	r2,0(r2)
   4aad4:	1884703a 	and	r2,r3,r2
   4aad8:	1007883a 	mov	r3,r2
   4aadc:	00800174 	movhi	r2,5
   4aae0:	108ad304 	addi	r2,r2,11084
   4aae4:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   4aae8:	e0bff717 	ldw	r2,-36(fp)
   4aaec:	10800717 	ldw	r2,28(r2)
   4aaf0:	10000526 	beq	r2,zero,4ab08 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   4aaf4:	e0bff717 	ldw	r2,-36(fp)
   4aaf8:	10800717 	ldw	r2,28(r2)
   4aafc:	e13ff717 	ldw	r4,-36(fp)
   4ab00:	100b883a 	mov	r5,r2
   4ab04:	004550c0 	call	4550c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   4ab08:	e0bff717 	ldw	r2,-36(fp)
   4ab0c:	10800817 	ldw	r2,32(r2)
   4ab10:	10000526 	beq	r2,zero,4ab28 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   4ab14:	e0bff717 	ldw	r2,-36(fp)
   4ab18:	10800817 	ldw	r2,32(r2)
   4ab1c:	e13ff717 	ldw	r4,-36(fp)
   4ab20:	100b883a 	mov	r5,r2
   4ab24:	00455c00 	call	455c0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   4ab28:	e0bff717 	ldw	r2,-36(fp)
   4ab2c:	10800a17 	ldw	r2,40(r2)
   4ab30:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   4ab34:	e0bff817 	ldw	r2,-32(fp)
   4ab38:	10000226 	beq	r2,zero,4ab44 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   4ab3c:	e13ff817 	ldw	r4,-32(fp)
   4ab40:	0047b040 	call	47b04 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   4ab44:	e0bff717 	ldw	r2,-36(fp)
   4ab48:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   4ab4c:	e0bff717 	ldw	r2,-36(fp)
   4ab50:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   4ab54:	e0bff717 	ldw	r2,-36(fp)
   4ab58:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   4ab5c:	00800174 	movhi	r2,5
   4ab60:	108ac704 	addi	r2,r2,11036
   4ab64:	10800003 	ldbu	r2,0(r2)
   4ab68:	10803fcc 	andi	r2,r2,255
   4ab6c:	10803fe0 	cmpeqi	r2,r2,255
   4ab70:	1000081e 	bne	r2,zero,4ab94 <OSTaskDel+0x260>
        OSLockNesting++;
   4ab74:	00800174 	movhi	r2,5
   4ab78:	108ac704 	addi	r2,r2,11036
   4ab7c:	10800003 	ldbu	r2,0(r2)
   4ab80:	10800044 	addi	r2,r2,1
   4ab84:	1007883a 	mov	r3,r2
   4ab88:	00800174 	movhi	r2,5
   4ab8c:	108ac704 	addi	r2,r2,11036
   4ab90:	10c00005 	stb	r3,0(r2)
   4ab94:	e0bff617 	ldw	r2,-40(fp)
   4ab98:	e0bffc15 	stw	r2,-16(fp)
   4ab9c:	e0bffc17 	ldw	r2,-16(fp)
   4aba0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   4aba4:	00451000 	call	45100 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4aba8:	0005303a 	rdctl	r2,status
   4abac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4abb0:	e0fffd17 	ldw	r3,-12(fp)
   4abb4:	00bfff84 	movi	r2,-2
   4abb8:	1884703a 	and	r2,r3,r2
   4abbc:	1001703a 	wrctl	status,r2
  
  return context;
   4abc0:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   4abc4:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   4abc8:	00800174 	movhi	r2,5
   4abcc:	108ac704 	addi	r2,r2,11036
   4abd0:	10800003 	ldbu	r2,0(r2)
   4abd4:	10803fcc 	andi	r2,r2,255
   4abd8:	10000826 	beq	r2,zero,4abfc <OSTaskDel+0x2c8>
        OSLockNesting--;
   4abdc:	00800174 	movhi	r2,5
   4abe0:	108ac704 	addi	r2,r2,11036
   4abe4:	10800003 	ldbu	r2,0(r2)
   4abe8:	10bfffc4 	addi	r2,r2,-1
   4abec:	1007883a 	mov	r3,r2
   4abf0:	00800174 	movhi	r2,5
   4abf4:	108ac704 	addi	r2,r2,11036
   4abf8:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   4abfc:	e13ff717 	ldw	r4,-36(fp)
   4ac00:	004e8d40 	call	4e8d4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   4ac04:	00800174 	movhi	r2,5
   4ac08:	108acf44 	addi	r2,r2,11069
   4ac0c:	10800003 	ldbu	r2,0(r2)
   4ac10:	10bfffc4 	addi	r2,r2,-1
   4ac14:	1007883a 	mov	r3,r2
   4ac18:	00800174 	movhi	r2,5
   4ac1c:	108acf44 	addi	r2,r2,11069
   4ac20:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   4ac24:	e0ffff03 	ldbu	r3,-4(fp)
   4ac28:	008001b4 	movhi	r2,6
   4ac2c:	10af5d04 	addi	r2,r2,-17036
   4ac30:	18c7883a 	add	r3,r3,r3
   4ac34:	18c7883a 	add	r3,r3,r3
   4ac38:	10c5883a 	add	r2,r2,r3
   4ac3c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   4ac40:	e0bff717 	ldw	r2,-36(fp)
   4ac44:	10800617 	ldw	r2,24(r2)
   4ac48:	1000091e 	bne	r2,zero,4ac70 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   4ac4c:	e0bff717 	ldw	r2,-36(fp)
   4ac50:	10800517 	ldw	r2,20(r2)
   4ac54:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   4ac58:	e0bff717 	ldw	r2,-36(fp)
   4ac5c:	10c00517 	ldw	r3,20(r2)
   4ac60:	00800174 	movhi	r2,5
   4ac64:	108aca04 	addi	r2,r2,11048
   4ac68:	10c00015 	stw	r3,0(r2)
   4ac6c:	00000a06 	br	4ac98 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   4ac70:	e0bff717 	ldw	r2,-36(fp)
   4ac74:	10800617 	ldw	r2,24(r2)
   4ac78:	e0fff717 	ldw	r3,-36(fp)
   4ac7c:	18c00517 	ldw	r3,20(r3)
   4ac80:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   4ac84:	e0bff717 	ldw	r2,-36(fp)
   4ac88:	10800517 	ldw	r2,20(r2)
   4ac8c:	e0fff717 	ldw	r3,-36(fp)
   4ac90:	18c00617 	ldw	r3,24(r3)
   4ac94:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   4ac98:	00800174 	movhi	r2,5
   4ac9c:	108ace04 	addi	r2,r2,11064
   4aca0:	10c00017 	ldw	r3,0(r2)
   4aca4:	e0bff717 	ldw	r2,-36(fp)
   4aca8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   4acac:	00800174 	movhi	r2,5
   4acb0:	108ace04 	addi	r2,r2,11064
   4acb4:	e0fff717 	ldw	r3,-36(fp)
   4acb8:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   4acbc:	e0bff717 	ldw	r2,-36(fp)
   4acc0:	00c00fc4 	movi	r3,63
   4acc4:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   4acc8:	e0bff717 	ldw	r2,-36(fp)
   4accc:	10001345 	stb	zero,77(r2)
   4acd0:	e0bff617 	ldw	r2,-40(fp)
   4acd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4acd8:	e0bffe17 	ldw	r2,-8(fp)
   4acdc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   4ace0:	00800174 	movhi	r2,5
   4ace4:	108ac744 	addi	r2,r2,11037
   4ace8:	10800003 	ldbu	r2,0(r2)
   4acec:	10803fcc 	andi	r2,r2,255
   4acf0:	10800058 	cmpnei	r2,r2,1
   4acf4:	1000011e 	bne	r2,zero,4acfc <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   4acf8:	0045b340 	call	45b34 <OS_Sched>
    }
    return (OS_ERR_NONE);
   4acfc:	0005883a 	mov	r2,zero
}
   4ad00:	e037883a 	mov	sp,fp
   4ad04:	dfc00117 	ldw	ra,4(sp)
   4ad08:	df000017 	ldw	fp,0(sp)
   4ad0c:	dec00204 	addi	sp,sp,8
   4ad10:	f800283a 	ret

0004ad14 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   4ad14:	defff504 	addi	sp,sp,-44
   4ad18:	df000a15 	stw	fp,40(sp)
   4ad1c:	df000a04 	addi	fp,sp,40
   4ad20:	2005883a 	mov	r2,r4
   4ad24:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4ad28:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   4ad2c:	e0bfff03 	ldbu	r2,-4(fp)
   4ad30:	10800518 	cmpnei	r2,r2,20
   4ad34:	1000021e 	bne	r2,zero,4ad40 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   4ad38:	00800f84 	movi	r2,62
   4ad3c:	00004706 	br	4ae5c <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   4ad40:	e0bfff03 	ldbu	r2,-4(fp)
   4ad44:	10800530 	cmpltui	r2,r2,20
   4ad48:	1000051e 	bne	r2,zero,4ad60 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   4ad4c:	e0bfff03 	ldbu	r2,-4(fp)
   4ad50:	10803fe0 	cmpeqi	r2,r2,255
   4ad54:	1000021e 	bne	r2,zero,4ad60 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   4ad58:	00800a84 	movi	r2,42
   4ad5c:	00003f06 	br	4ae5c <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   4ad60:	e0bfff03 	ldbu	r2,-4(fp)
   4ad64:	10803fd8 	cmpnei	r2,r2,255
   4ad68:	1000131e 	bne	r2,zero,4adb8 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ad6c:	0005303a 	rdctl	r2,status
   4ad70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ad74:	e0fff917 	ldw	r3,-28(fp)
   4ad78:	00bfff84 	movi	r2,-2
   4ad7c:	1884703a 	and	r2,r3,r2
   4ad80:	1001703a 	wrctl	status,r2
  
  return context;
   4ad84:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   4ad88:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   4ad8c:	00800174 	movhi	r2,5
   4ad90:	108ad604 	addi	r2,r2,11096
   4ad94:	10800017 	ldw	r2,0(r2)
   4ad98:	10800dc3 	ldbu	r2,55(r2)
   4ad9c:	e0bff705 	stb	r2,-36(fp)
   4ada0:	e0bff617 	ldw	r2,-40(fp)
   4ada4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ada8:	e0bffa17 	ldw	r2,-24(fp)
   4adac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   4adb0:	e0bff703 	ldbu	r2,-36(fp)
   4adb4:	00002906 	br	4ae5c <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4adb8:	0005303a 	rdctl	r2,status
   4adbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4adc0:	e0fffb17 	ldw	r3,-20(fp)
   4adc4:	00bfff84 	movi	r2,-2
   4adc8:	1884703a 	and	r2,r3,r2
   4adcc:	1001703a 	wrctl	status,r2
  
  return context;
   4add0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   4add4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   4add8:	e0ffff03 	ldbu	r3,-4(fp)
   4addc:	008001b4 	movhi	r2,6
   4ade0:	10af5d04 	addi	r2,r2,-17036
   4ade4:	18c7883a 	add	r3,r3,r3
   4ade8:	18c7883a 	add	r3,r3,r3
   4adec:	10c5883a 	add	r2,r2,r3
   4adf0:	10800017 	ldw	r2,0(r2)
   4adf4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   4adf8:	e0bff817 	ldw	r2,-32(fp)
   4adfc:	1000061e 	bne	r2,zero,4ae18 <OSTaskDelReq+0x104>
   4ae00:	e0bff617 	ldw	r2,-40(fp)
   4ae04:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ae08:	e0bffc17 	ldw	r2,-16(fp)
   4ae0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   4ae10:	008010c4 	movi	r2,67
   4ae14:	00001106 	br	4ae5c <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   4ae18:	e0bff817 	ldw	r2,-32(fp)
   4ae1c:	10800058 	cmpnei	r2,r2,1
   4ae20:	1000061e 	bne	r2,zero,4ae3c <OSTaskDelReq+0x128>
   4ae24:	e0bff617 	ldw	r2,-40(fp)
   4ae28:	e0bffd15 	stw	r2,-12(fp)
   4ae2c:	e0bffd17 	ldw	r2,-12(fp)
   4ae30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   4ae34:	00800f44 	movi	r2,61
   4ae38:	00000806 	br	4ae5c <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   4ae3c:	e0bff817 	ldw	r2,-32(fp)
   4ae40:	00c00fc4 	movi	r3,63
   4ae44:	10c00dc5 	stb	r3,55(r2)
   4ae48:	e0bff617 	ldw	r2,-40(fp)
   4ae4c:	e0bffe15 	stw	r2,-8(fp)
   4ae50:	e0bffe17 	ldw	r2,-8(fp)
   4ae54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   4ae58:	0005883a 	mov	r2,zero
}
   4ae5c:	e037883a 	mov	sp,fp
   4ae60:	df000017 	ldw	fp,0(sp)
   4ae64:	dec00104 	addi	sp,sp,4
   4ae68:	f800283a 	ret

0004ae6c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   4ae6c:	defff404 	addi	sp,sp,-48
   4ae70:	dfc00b15 	stw	ra,44(sp)
   4ae74:	df000a15 	stw	fp,40(sp)
   4ae78:	df000a04 	addi	fp,sp,40
   4ae7c:	2005883a 	mov	r2,r4
   4ae80:	e17ffe15 	stw	r5,-8(fp)
   4ae84:	e1bfff15 	stw	r6,-4(fp)
   4ae88:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   4ae8c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   4ae90:	e0bfff17 	ldw	r2,-4(fp)
   4ae94:	1000021e 	bne	r2,zero,4aea0 <OSTaskNameGet+0x34>
        return (0);
   4ae98:	0005883a 	mov	r2,zero
   4ae9c:	00005806 	br	4b000 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   4aea0:	e0bffd03 	ldbu	r2,-12(fp)
   4aea4:	10800570 	cmpltui	r2,r2,21
   4aea8:	1000081e 	bne	r2,zero,4aecc <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   4aeac:	e0bffd03 	ldbu	r2,-12(fp)
   4aeb0:	10803fe0 	cmpeqi	r2,r2,255
   4aeb4:	1000051e 	bne	r2,zero,4aecc <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   4aeb8:	e0bfff17 	ldw	r2,-4(fp)
   4aebc:	00c00a84 	movi	r3,42
   4aec0:	10c00005 	stb	r3,0(r2)
            return (0);
   4aec4:	0005883a 	mov	r2,zero
   4aec8:	00004d06 	br	4b000 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   4aecc:	e0bffe17 	ldw	r2,-8(fp)
   4aed0:	1000051e 	bne	r2,zero,4aee8 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   4aed4:	e0bfff17 	ldw	r2,-4(fp)
   4aed8:	00c00304 	movi	r3,12
   4aedc:	10c00005 	stb	r3,0(r2)
        return (0);
   4aee0:	0005883a 	mov	r2,zero
   4aee4:	00004606 	br	4b000 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   4aee8:	00800174 	movhi	r2,5
   4aeec:	108ad504 	addi	r2,r2,11092
   4aef0:	10800003 	ldbu	r2,0(r2)
   4aef4:	10803fcc 	andi	r2,r2,255
   4aef8:	10000526 	beq	r2,zero,4af10 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   4aefc:	e0bfff17 	ldw	r2,-4(fp)
   4af00:	00c00444 	movi	r3,17
   4af04:	10c00005 	stb	r3,0(r2)
        return (0);
   4af08:	0005883a 	mov	r2,zero
   4af0c:	00003c06 	br	4b000 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4af10:	0005303a 	rdctl	r2,status
   4af14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4af18:	e0fff917 	ldw	r3,-28(fp)
   4af1c:	00bfff84 	movi	r2,-2
   4af20:	1884703a 	and	r2,r3,r2
   4af24:	1001703a 	wrctl	status,r2
  
  return context;
   4af28:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   4af2c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   4af30:	e0bffd03 	ldbu	r2,-12(fp)
   4af34:	10803fd8 	cmpnei	r2,r2,255
   4af38:	1000051e 	bne	r2,zero,4af50 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   4af3c:	00800174 	movhi	r2,5
   4af40:	108ad604 	addi	r2,r2,11096
   4af44:	10800017 	ldw	r2,0(r2)
   4af48:	10800c83 	ldbu	r2,50(r2)
   4af4c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   4af50:	e0fffd03 	ldbu	r3,-12(fp)
   4af54:	008001b4 	movhi	r2,6
   4af58:	10af5d04 	addi	r2,r2,-17036
   4af5c:	18c7883a 	add	r3,r3,r3
   4af60:	18c7883a 	add	r3,r3,r3
   4af64:	10c5883a 	add	r2,r2,r3
   4af68:	10800017 	ldw	r2,0(r2)
   4af6c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   4af70:	e0bff717 	ldw	r2,-36(fp)
   4af74:	1000091e 	bne	r2,zero,4af9c <OSTaskNameGet+0x130>
   4af78:	e0bff617 	ldw	r2,-40(fp)
   4af7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4af80:	e0bffa17 	ldw	r2,-24(fp)
   4af84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   4af88:	e0bfff17 	ldw	r2,-4(fp)
   4af8c:	00c010c4 	movi	r3,67
   4af90:	10c00005 	stb	r3,0(r2)
        return (0);
   4af94:	0005883a 	mov	r2,zero
   4af98:	00001906 	br	4b000 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   4af9c:	e0bff717 	ldw	r2,-36(fp)
   4afa0:	10800058 	cmpnei	r2,r2,1
   4afa4:	1000091e 	bne	r2,zero,4afcc <OSTaskNameGet+0x160>
   4afa8:	e0bff617 	ldw	r2,-40(fp)
   4afac:	e0bffb15 	stw	r2,-20(fp)
   4afb0:	e0bffb17 	ldw	r2,-20(fp)
   4afb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   4afb8:	e0bfff17 	ldw	r2,-4(fp)
   4afbc:	00c010c4 	movi	r3,67
   4afc0:	10c00005 	stb	r3,0(r2)
        return (0);
   4afc4:	0005883a 	mov	r2,zero
   4afc8:	00000d06 	br	4b000 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   4afcc:	e0bff717 	ldw	r2,-36(fp)
   4afd0:	10801304 	addi	r2,r2,76
   4afd4:	e13ffe17 	ldw	r4,-8(fp)
   4afd8:	100b883a 	mov	r5,r2
   4afdc:	0045c700 	call	45c70 <OS_StrCopy>
   4afe0:	e0bff805 	stb	r2,-32(fp)
   4afe4:	e0bff617 	ldw	r2,-40(fp)
   4afe8:	e0bffc15 	stw	r2,-16(fp)
   4afec:	e0bffc17 	ldw	r2,-16(fp)
   4aff0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   4aff4:	e0bfff17 	ldw	r2,-4(fp)
   4aff8:	10000005 	stb	zero,0(r2)
    return (len);
   4affc:	e0bff803 	ldbu	r2,-32(fp)
}
   4b000:	e037883a 	mov	sp,fp
   4b004:	dfc00117 	ldw	ra,4(sp)
   4b008:	df000017 	ldw	fp,0(sp)
   4b00c:	dec00204 	addi	sp,sp,8
   4b010:	f800283a 	ret

0004b014 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   4b014:	defff304 	addi	sp,sp,-52
   4b018:	dfc00c15 	stw	ra,48(sp)
   4b01c:	df000b15 	stw	fp,44(sp)
   4b020:	df000b04 	addi	fp,sp,44
   4b024:	2005883a 	mov	r2,r4
   4b028:	e17ffe15 	stw	r5,-8(fp)
   4b02c:	e1bfff15 	stw	r6,-4(fp)
   4b030:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   4b034:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   4b038:	e0bfff17 	ldw	r2,-4(fp)
   4b03c:	1000011e 	bne	r2,zero,4b044 <OSTaskNameSet+0x30>
        return;
   4b040:	00005f06 	br	4b1c0 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   4b044:	e0bffd03 	ldbu	r2,-12(fp)
   4b048:	10800570 	cmpltui	r2,r2,21
   4b04c:	1000071e 	bne	r2,zero,4b06c <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   4b050:	e0bffd03 	ldbu	r2,-12(fp)
   4b054:	10803fe0 	cmpeqi	r2,r2,255
   4b058:	1000041e 	bne	r2,zero,4b06c <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   4b05c:	e0bfff17 	ldw	r2,-4(fp)
   4b060:	00c00a84 	movi	r3,42
   4b064:	10c00005 	stb	r3,0(r2)
            return;
   4b068:	00005506 	br	4b1c0 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   4b06c:	e0bffe17 	ldw	r2,-8(fp)
   4b070:	1000041e 	bne	r2,zero,4b084 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   4b074:	e0bfff17 	ldw	r2,-4(fp)
   4b078:	00c00304 	movi	r3,12
   4b07c:	10c00005 	stb	r3,0(r2)
        return;
   4b080:	00004f06 	br	4b1c0 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   4b084:	00800174 	movhi	r2,5
   4b088:	108ad504 	addi	r2,r2,11092
   4b08c:	10800003 	ldbu	r2,0(r2)
   4b090:	10803fcc 	andi	r2,r2,255
   4b094:	10000426 	beq	r2,zero,4b0a8 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   4b098:	e0bfff17 	ldw	r2,-4(fp)
   4b09c:	00c00484 	movi	r3,18
   4b0a0:	10c00005 	stb	r3,0(r2)
        return;
   4b0a4:	00004606 	br	4b1c0 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b0a8:	0005303a 	rdctl	r2,status
   4b0ac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b0b0:	e0fff817 	ldw	r3,-32(fp)
   4b0b4:	00bfff84 	movi	r2,-2
   4b0b8:	1884703a 	and	r2,r3,r2
   4b0bc:	1001703a 	wrctl	status,r2
  
  return context;
   4b0c0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   4b0c4:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   4b0c8:	e0bffd03 	ldbu	r2,-12(fp)
   4b0cc:	10803fd8 	cmpnei	r2,r2,255
   4b0d0:	1000051e 	bne	r2,zero,4b0e8 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   4b0d4:	00800174 	movhi	r2,5
   4b0d8:	108ad604 	addi	r2,r2,11096
   4b0dc:	10800017 	ldw	r2,0(r2)
   4b0e0:	10800c83 	ldbu	r2,50(r2)
   4b0e4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   4b0e8:	e0fffd03 	ldbu	r3,-12(fp)
   4b0ec:	008001b4 	movhi	r2,6
   4b0f0:	10af5d04 	addi	r2,r2,-17036
   4b0f4:	18c7883a 	add	r3,r3,r3
   4b0f8:	18c7883a 	add	r3,r3,r3
   4b0fc:	10c5883a 	add	r2,r2,r3
   4b100:	10800017 	ldw	r2,0(r2)
   4b104:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   4b108:	e0bff617 	ldw	r2,-40(fp)
   4b10c:	1000081e 	bne	r2,zero,4b130 <OSTaskNameSet+0x11c>
   4b110:	e0bff517 	ldw	r2,-44(fp)
   4b114:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b118:	e0bff917 	ldw	r2,-28(fp)
   4b11c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   4b120:	e0bfff17 	ldw	r2,-4(fp)
   4b124:	00c010c4 	movi	r3,67
   4b128:	10c00005 	stb	r3,0(r2)
        return;
   4b12c:	00002406 	br	4b1c0 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   4b130:	e0bff617 	ldw	r2,-40(fp)
   4b134:	10800058 	cmpnei	r2,r2,1
   4b138:	1000081e 	bne	r2,zero,4b15c <OSTaskNameSet+0x148>
   4b13c:	e0bff517 	ldw	r2,-44(fp)
   4b140:	e0bffa15 	stw	r2,-24(fp)
   4b144:	e0bffa17 	ldw	r2,-24(fp)
   4b148:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   4b14c:	e0bfff17 	ldw	r2,-4(fp)
   4b150:	00c010c4 	movi	r3,67
   4b154:	10c00005 	stb	r3,0(r2)
        return;
   4b158:	00001906 	br	4b1c0 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   4b15c:	e13ffe17 	ldw	r4,-8(fp)
   4b160:	0045ce40 	call	45ce4 <OS_StrLen>
   4b164:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   4b168:	e0bff703 	ldbu	r2,-36(fp)
   4b16c:	10800830 	cmpltui	r2,r2,32
   4b170:	1000081e 	bne	r2,zero,4b194 <OSTaskNameSet+0x180>
   4b174:	e0bff517 	ldw	r2,-44(fp)
   4b178:	e0bffb15 	stw	r2,-20(fp)
   4b17c:	e0bffb17 	ldw	r2,-20(fp)
   4b180:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   4b184:	e0bfff17 	ldw	r2,-4(fp)
   4b188:	00c01044 	movi	r3,65
   4b18c:	10c00005 	stb	r3,0(r2)
        return;
   4b190:	00000b06 	br	4b1c0 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   4b194:	e0bff617 	ldw	r2,-40(fp)
   4b198:	10801304 	addi	r2,r2,76
   4b19c:	1009883a 	mov	r4,r2
   4b1a0:	e17ffe17 	ldw	r5,-8(fp)
   4b1a4:	0045c700 	call	45c70 <OS_StrCopy>
   4b1a8:	e0bff517 	ldw	r2,-44(fp)
   4b1ac:	e0bffc15 	stw	r2,-16(fp)
   4b1b0:	e0bffc17 	ldw	r2,-16(fp)
   4b1b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   4b1b8:	e0bfff17 	ldw	r2,-4(fp)
   4b1bc:	10000005 	stb	zero,0(r2)
}
   4b1c0:	e037883a 	mov	sp,fp
   4b1c4:	dfc00117 	ldw	ra,4(sp)
   4b1c8:	df000017 	ldw	fp,0(sp)
   4b1cc:	dec00204 	addi	sp,sp,8
   4b1d0:	f800283a 	ret

0004b1d4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   4b1d4:	defff404 	addi	sp,sp,-48
   4b1d8:	dfc00b15 	stw	ra,44(sp)
   4b1dc:	df000a15 	stw	fp,40(sp)
   4b1e0:	df000a04 	addi	fp,sp,40
   4b1e4:	2005883a 	mov	r2,r4
   4b1e8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   4b1ec:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   4b1f0:	e0bfff03 	ldbu	r2,-4(fp)
   4b1f4:	10800530 	cmpltui	r2,r2,20
   4b1f8:	1000021e 	bne	r2,zero,4b204 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   4b1fc:	00800a84 	movi	r2,42
   4b200:	00006d06 	br	4b3b8 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b204:	0005303a 	rdctl	r2,status
   4b208:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b20c:	e0fff817 	ldw	r3,-32(fp)
   4b210:	00bfff84 	movi	r2,-2
   4b214:	1884703a 	and	r2,r3,r2
   4b218:	1001703a 	wrctl	status,r2
  
  return context;
   4b21c:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   4b220:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   4b224:	e0ffff03 	ldbu	r3,-4(fp)
   4b228:	008001b4 	movhi	r2,6
   4b22c:	10af5d04 	addi	r2,r2,-17036
   4b230:	18c7883a 	add	r3,r3,r3
   4b234:	18c7883a 	add	r3,r3,r3
   4b238:	10c5883a 	add	r2,r2,r3
   4b23c:	10800017 	ldw	r2,0(r2)
   4b240:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   4b244:	e0bff717 	ldw	r2,-36(fp)
   4b248:	1000061e 	bne	r2,zero,4b264 <OSTaskResume+0x90>
   4b24c:	e0bff617 	ldw	r2,-40(fp)
   4b250:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b254:	e0bff917 	ldw	r2,-28(fp)
   4b258:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   4b25c:	00801184 	movi	r2,70
   4b260:	00005506 	br	4b3b8 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   4b264:	e0bff717 	ldw	r2,-36(fp)
   4b268:	10800058 	cmpnei	r2,r2,1
   4b26c:	1000061e 	bne	r2,zero,4b288 <OSTaskResume+0xb4>
   4b270:	e0bff617 	ldw	r2,-40(fp)
   4b274:	e0bffa15 	stw	r2,-24(fp)
   4b278:	e0bffa17 	ldw	r2,-24(fp)
   4b27c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   4b280:	008010c4 	movi	r2,67
   4b284:	00004c06 	br	4b3b8 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   4b288:	e0bff717 	ldw	r2,-36(fp)
   4b28c:	10800c03 	ldbu	r2,48(r2)
   4b290:	10803fcc 	andi	r2,r2,255
   4b294:	1080020c 	andi	r2,r2,8
   4b298:	10004226 	beq	r2,zero,4b3a4 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   4b29c:	e0bff717 	ldw	r2,-36(fp)
   4b2a0:	10c00c03 	ldbu	r3,48(r2)
   4b2a4:	00bffdc4 	movi	r2,-9
   4b2a8:	1884703a 	and	r2,r3,r2
   4b2ac:	1007883a 	mov	r3,r2
   4b2b0:	e0bff717 	ldw	r2,-36(fp)
   4b2b4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   4b2b8:	e0bff717 	ldw	r2,-36(fp)
   4b2bc:	10800c03 	ldbu	r2,48(r2)
   4b2c0:	10803fcc 	andi	r2,r2,255
   4b2c4:	1000311e 	bne	r2,zero,4b38c <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   4b2c8:	e0bff717 	ldw	r2,-36(fp)
   4b2cc:	10800b8b 	ldhu	r2,46(r2)
   4b2d0:	10bfffcc 	andi	r2,r2,65535
   4b2d4:	1000281e 	bne	r2,zero,4b378 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   4b2d8:	e0bff717 	ldw	r2,-36(fp)
   4b2dc:	10c00d83 	ldbu	r3,54(r2)
   4b2e0:	00800174 	movhi	r2,5
   4b2e4:	108ad304 	addi	r2,r2,11084
   4b2e8:	10800003 	ldbu	r2,0(r2)
   4b2ec:	1884b03a 	or	r2,r3,r2
   4b2f0:	1007883a 	mov	r3,r2
   4b2f4:	00800174 	movhi	r2,5
   4b2f8:	108ad304 	addi	r2,r2,11084
   4b2fc:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   4b300:	e0bff717 	ldw	r2,-36(fp)
   4b304:	10800d03 	ldbu	r2,52(r2)
   4b308:	10c03fcc 	andi	r3,r2,255
   4b30c:	e0bff717 	ldw	r2,-36(fp)
   4b310:	10800d03 	ldbu	r2,52(r2)
   4b314:	11003fcc 	andi	r4,r2,255
   4b318:	00800174 	movhi	r2,5
   4b31c:	108ad344 	addi	r2,r2,11085
   4b320:	1105883a 	add	r2,r2,r4
   4b324:	11000003 	ldbu	r4,0(r2)
   4b328:	e0bff717 	ldw	r2,-36(fp)
   4b32c:	10800d43 	ldbu	r2,53(r2)
   4b330:	2084b03a 	or	r2,r4,r2
   4b334:	1009883a 	mov	r4,r2
   4b338:	00800174 	movhi	r2,5
   4b33c:	108ad344 	addi	r2,r2,11085
   4b340:	10c5883a 	add	r2,r2,r3
   4b344:	11000005 	stb	r4,0(r2)
   4b348:	e0bff617 	ldw	r2,-40(fp)
   4b34c:	e0bffb15 	stw	r2,-20(fp)
   4b350:	e0bffb17 	ldw	r2,-20(fp)
   4b354:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   4b358:	00800174 	movhi	r2,5
   4b35c:	108ac744 	addi	r2,r2,11037
   4b360:	10800003 	ldbu	r2,0(r2)
   4b364:	10803fcc 	andi	r2,r2,255
   4b368:	10800058 	cmpnei	r2,r2,1
   4b36c:	10000b1e 	bne	r2,zero,4b39c <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   4b370:	0045b340 	call	45b34 <OS_Sched>
   4b374:	00000906 	br	4b39c <OSTaskResume+0x1c8>
   4b378:	e0bff617 	ldw	r2,-40(fp)
   4b37c:	e0bffc15 	stw	r2,-16(fp)
   4b380:	e0bffc17 	ldw	r2,-16(fp)
   4b384:	1001703a 	wrctl	status,r2
   4b388:	00000406 	br	4b39c <OSTaskResume+0x1c8>
   4b38c:	e0bff617 	ldw	r2,-40(fp)
   4b390:	e0bffd15 	stw	r2,-12(fp)
   4b394:	e0bffd17 	ldw	r2,-12(fp)
   4b398:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   4b39c:	0005883a 	mov	r2,zero
   4b3a0:	00000506 	br	4b3b8 <OSTaskResume+0x1e4>
   4b3a4:	e0bff617 	ldw	r2,-40(fp)
   4b3a8:	e0bffe15 	stw	r2,-8(fp)
   4b3ac:	e0bffe17 	ldw	r2,-8(fp)
   4b3b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   4b3b4:	00801104 	movi	r2,68
}
   4b3b8:	e037883a 	mov	sp,fp
   4b3bc:	dfc00117 	ldw	ra,4(sp)
   4b3c0:	df000017 	ldw	fp,0(sp)
   4b3c4:	dec00204 	addi	sp,sp,8
   4b3c8:	f800283a 	ret

0004b3cc <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   4b3cc:	defff304 	addi	sp,sp,-52
   4b3d0:	df000c15 	stw	fp,48(sp)
   4b3d4:	df000c04 	addi	fp,sp,48
   4b3d8:	2005883a 	mov	r2,r4
   4b3dc:	e17fff15 	stw	r5,-4(fp)
   4b3e0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   4b3e4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   4b3e8:	e0bffe03 	ldbu	r2,-8(fp)
   4b3ec:	10800570 	cmpltui	r2,r2,21
   4b3f0:	1000051e 	bne	r2,zero,4b408 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   4b3f4:	e0bffe03 	ldbu	r2,-8(fp)
   4b3f8:	10803fe0 	cmpeqi	r2,r2,255
   4b3fc:	1000021e 	bne	r2,zero,4b408 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   4b400:	00800a84 	movi	r2,42
   4b404:	00005f06 	br	4b584 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   4b408:	e0bfff17 	ldw	r2,-4(fp)
   4b40c:	1000021e 	bne	r2,zero,4b418 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   4b410:	00800244 	movi	r2,9
   4b414:	00005b06 	br	4b584 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   4b418:	e0bfff17 	ldw	r2,-4(fp)
   4b41c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   4b420:	e0bfff17 	ldw	r2,-4(fp)
   4b424:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b428:	0005303a 	rdctl	r2,status
   4b42c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b430:	e0fff917 	ldw	r3,-28(fp)
   4b434:	00bfff84 	movi	r2,-2
   4b438:	1884703a 	and	r2,r3,r2
   4b43c:	1001703a 	wrctl	status,r2
  
  return context;
   4b440:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   4b444:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   4b448:	e0bffe03 	ldbu	r2,-8(fp)
   4b44c:	10803fd8 	cmpnei	r2,r2,255
   4b450:	1000051e 	bne	r2,zero,4b468 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   4b454:	00800174 	movhi	r2,5
   4b458:	108ad604 	addi	r2,r2,11096
   4b45c:	10800017 	ldw	r2,0(r2)
   4b460:	10800c83 	ldbu	r2,50(r2)
   4b464:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   4b468:	e0fffe03 	ldbu	r3,-8(fp)
   4b46c:	008001b4 	movhi	r2,6
   4b470:	10af5d04 	addi	r2,r2,-17036
   4b474:	18c7883a 	add	r3,r3,r3
   4b478:	18c7883a 	add	r3,r3,r3
   4b47c:	10c5883a 	add	r2,r2,r3
   4b480:	10800017 	ldw	r2,0(r2)
   4b484:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   4b488:	e0bff717 	ldw	r2,-36(fp)
   4b48c:	1000061e 	bne	r2,zero,4b4a8 <OSTaskStkChk+0xdc>
   4b490:	e0bff617 	ldw	r2,-40(fp)
   4b494:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b498:	e0bffa17 	ldw	r2,-24(fp)
   4b49c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   4b4a0:	008010c4 	movi	r2,67
   4b4a4:	00003706 	br	4b584 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   4b4a8:	e0bff717 	ldw	r2,-36(fp)
   4b4ac:	10800058 	cmpnei	r2,r2,1
   4b4b0:	1000061e 	bne	r2,zero,4b4cc <OSTaskStkChk+0x100>
   4b4b4:	e0bff617 	ldw	r2,-40(fp)
   4b4b8:	e0bffb15 	stw	r2,-20(fp)
   4b4bc:	e0bffb17 	ldw	r2,-20(fp)
   4b4c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   4b4c4:	008010c4 	movi	r2,67
   4b4c8:	00002e06 	br	4b584 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   4b4cc:	e0bff717 	ldw	r2,-36(fp)
   4b4d0:	1080040b 	ldhu	r2,16(r2)
   4b4d4:	10bfffcc 	andi	r2,r2,65535
   4b4d8:	1080004c 	andi	r2,r2,1
   4b4dc:	1000061e 	bne	r2,zero,4b4f8 <OSTaskStkChk+0x12c>
   4b4e0:	e0bff617 	ldw	r2,-40(fp)
   4b4e4:	e0bffc15 	stw	r2,-16(fp)
   4b4e8:	e0bffc17 	ldw	r2,-16(fp)
   4b4ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   4b4f0:	00801144 	movi	r2,69
   4b4f4:	00002306 	br	4b584 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   4b4f8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   4b4fc:	e0bff717 	ldw	r2,-36(fp)
   4b500:	10800317 	ldw	r2,12(r2)
   4b504:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   4b508:	e0bff717 	ldw	r2,-36(fp)
   4b50c:	10800217 	ldw	r2,8(r2)
   4b510:	e0bff415 	stw	r2,-48(fp)
   4b514:	e0bff617 	ldw	r2,-40(fp)
   4b518:	e0bffd15 	stw	r2,-12(fp)
   4b51c:	e0bffd17 	ldw	r2,-12(fp)
   4b520:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   4b524:	00000306 	br	4b534 <OSTaskStkChk+0x168>
        nfree++;
   4b528:	e0bff517 	ldw	r2,-44(fp)
   4b52c:	10800044 	addi	r2,r2,1
   4b530:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   4b534:	e0bff417 	ldw	r2,-48(fp)
   4b538:	10c00104 	addi	r3,r2,4
   4b53c:	e0fff415 	stw	r3,-48(fp)
   4b540:	10800017 	ldw	r2,0(r2)
   4b544:	103ff826 	beq	r2,zero,4b528 <__alt_data_end+0xfffd59c8>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   4b548:	e0bff517 	ldw	r2,-44(fp)
   4b54c:	1085883a 	add	r2,r2,r2
   4b550:	1085883a 	add	r2,r2,r2
   4b554:	1007883a 	mov	r3,r2
   4b558:	e0bfff17 	ldw	r2,-4(fp)
   4b55c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   4b560:	e0fff817 	ldw	r3,-32(fp)
   4b564:	e0bff517 	ldw	r2,-44(fp)
   4b568:	1885c83a 	sub	r2,r3,r2
   4b56c:	1085883a 	add	r2,r2,r2
   4b570:	1085883a 	add	r2,r2,r2
   4b574:	1007883a 	mov	r3,r2
   4b578:	e0bfff17 	ldw	r2,-4(fp)
   4b57c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   4b580:	0005883a 	mov	r2,zero
}
   4b584:	e037883a 	mov	sp,fp
   4b588:	df000017 	ldw	fp,0(sp)
   4b58c:	dec00104 	addi	sp,sp,4
   4b590:	f800283a 	ret

0004b594 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   4b594:	defff504 	addi	sp,sp,-44
   4b598:	dfc00a15 	stw	ra,40(sp)
   4b59c:	df000915 	stw	fp,36(sp)
   4b5a0:	df000904 	addi	fp,sp,36
   4b5a4:	2005883a 	mov	r2,r4
   4b5a8:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4b5ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   4b5b0:	e0bfff03 	ldbu	r2,-4(fp)
   4b5b4:	10800518 	cmpnei	r2,r2,20
   4b5b8:	1000021e 	bne	r2,zero,4b5c4 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   4b5bc:	008011c4 	movi	r2,71
   4b5c0:	00007406 	br	4b794 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   4b5c4:	e0bfff03 	ldbu	r2,-4(fp)
   4b5c8:	10800530 	cmpltui	r2,r2,20
   4b5cc:	1000051e 	bne	r2,zero,4b5e4 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   4b5d0:	e0bfff03 	ldbu	r2,-4(fp)
   4b5d4:	10803fe0 	cmpeqi	r2,r2,255
   4b5d8:	1000021e 	bne	r2,zero,4b5e4 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   4b5dc:	00800a84 	movi	r2,42
   4b5e0:	00006c06 	br	4b794 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b5e4:	0005303a 	rdctl	r2,status
   4b5e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b5ec:	e0fffb17 	ldw	r3,-20(fp)
   4b5f0:	00bfff84 	movi	r2,-2
   4b5f4:	1884703a 	and	r2,r3,r2
   4b5f8:	1001703a 	wrctl	status,r2
  
  return context;
   4b5fc:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   4b600:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   4b604:	e0bfff03 	ldbu	r2,-4(fp)
   4b608:	10803fd8 	cmpnei	r2,r2,255
   4b60c:	1000081e 	bne	r2,zero,4b630 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   4b610:	00800174 	movhi	r2,5
   4b614:	108ad604 	addi	r2,r2,11096
   4b618:	10800017 	ldw	r2,0(r2)
   4b61c:	10800c83 	ldbu	r2,50(r2)
   4b620:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   4b624:	00800044 	movi	r2,1
   4b628:	e0bff705 	stb	r2,-36(fp)
   4b62c:	00000b06 	br	4b65c <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   4b630:	00800174 	movhi	r2,5
   4b634:	108ad604 	addi	r2,r2,11096
   4b638:	10800017 	ldw	r2,0(r2)
   4b63c:	10800c83 	ldbu	r2,50(r2)
   4b640:	10c03fcc 	andi	r3,r2,255
   4b644:	e0bfff03 	ldbu	r2,-4(fp)
   4b648:	1880031e 	bne	r3,r2,4b658 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   4b64c:	00800044 	movi	r2,1
   4b650:	e0bff705 	stb	r2,-36(fp)
   4b654:	00000106 	br	4b65c <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   4b658:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   4b65c:	e0ffff03 	ldbu	r3,-4(fp)
   4b660:	008001b4 	movhi	r2,6
   4b664:	10af5d04 	addi	r2,r2,-17036
   4b668:	18c7883a 	add	r3,r3,r3
   4b66c:	18c7883a 	add	r3,r3,r3
   4b670:	10c5883a 	add	r2,r2,r3
   4b674:	10800017 	ldw	r2,0(r2)
   4b678:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   4b67c:	e0bff917 	ldw	r2,-28(fp)
   4b680:	1000061e 	bne	r2,zero,4b69c <OSTaskSuspend+0x108>
   4b684:	e0bff817 	ldw	r2,-32(fp)
   4b688:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b68c:	e0bffc17 	ldw	r2,-16(fp)
   4b690:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   4b694:	00801204 	movi	r2,72
   4b698:	00003e06 	br	4b794 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   4b69c:	e0bff917 	ldw	r2,-28(fp)
   4b6a0:	10800058 	cmpnei	r2,r2,1
   4b6a4:	1000061e 	bne	r2,zero,4b6c0 <OSTaskSuspend+0x12c>
   4b6a8:	e0bff817 	ldw	r2,-32(fp)
   4b6ac:	e0bffd15 	stw	r2,-12(fp)
   4b6b0:	e0bffd17 	ldw	r2,-12(fp)
   4b6b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   4b6b8:	008010c4 	movi	r2,67
   4b6bc:	00003506 	br	4b794 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   4b6c0:	e0bff917 	ldw	r2,-28(fp)
   4b6c4:	10800d03 	ldbu	r2,52(r2)
   4b6c8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   4b6cc:	e0fffa03 	ldbu	r3,-24(fp)
   4b6d0:	e13ffa03 	ldbu	r4,-24(fp)
   4b6d4:	00800174 	movhi	r2,5
   4b6d8:	108ad344 	addi	r2,r2,11085
   4b6dc:	1105883a 	add	r2,r2,r4
   4b6e0:	10800003 	ldbu	r2,0(r2)
   4b6e4:	1009883a 	mov	r4,r2
   4b6e8:	e0bff917 	ldw	r2,-28(fp)
   4b6ec:	10800d43 	ldbu	r2,53(r2)
   4b6f0:	0084303a 	nor	r2,zero,r2
   4b6f4:	2084703a 	and	r2,r4,r2
   4b6f8:	1009883a 	mov	r4,r2
   4b6fc:	00800174 	movhi	r2,5
   4b700:	108ad344 	addi	r2,r2,11085
   4b704:	10c5883a 	add	r2,r2,r3
   4b708:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   4b70c:	e0fffa03 	ldbu	r3,-24(fp)
   4b710:	00800174 	movhi	r2,5
   4b714:	108ad344 	addi	r2,r2,11085
   4b718:	10c5883a 	add	r2,r2,r3
   4b71c:	10800003 	ldbu	r2,0(r2)
   4b720:	10803fcc 	andi	r2,r2,255
   4b724:	10000c1e 	bne	r2,zero,4b758 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   4b728:	e0bff917 	ldw	r2,-28(fp)
   4b72c:	10800d83 	ldbu	r2,54(r2)
   4b730:	0084303a 	nor	r2,zero,r2
   4b734:	1007883a 	mov	r3,r2
   4b738:	00800174 	movhi	r2,5
   4b73c:	108ad304 	addi	r2,r2,11084
   4b740:	10800003 	ldbu	r2,0(r2)
   4b744:	1884703a 	and	r2,r3,r2
   4b748:	1007883a 	mov	r3,r2
   4b74c:	00800174 	movhi	r2,5
   4b750:	108ad304 	addi	r2,r2,11084
   4b754:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   4b758:	e0bff917 	ldw	r2,-28(fp)
   4b75c:	10800c03 	ldbu	r2,48(r2)
   4b760:	10800214 	ori	r2,r2,8
   4b764:	1007883a 	mov	r3,r2
   4b768:	e0bff917 	ldw	r2,-28(fp)
   4b76c:	10c00c05 	stb	r3,48(r2)
   4b770:	e0bff817 	ldw	r2,-32(fp)
   4b774:	e0bffe15 	stw	r2,-8(fp)
   4b778:	e0bffe17 	ldw	r2,-8(fp)
   4b77c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   4b780:	e0bff703 	ldbu	r2,-36(fp)
   4b784:	10800058 	cmpnei	r2,r2,1
   4b788:	1000011e 	bne	r2,zero,4b790 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   4b78c:	0045b340 	call	45b34 <OS_Sched>
    }
    return (OS_ERR_NONE);
   4b790:	0005883a 	mov	r2,zero
}
   4b794:	e037883a 	mov	sp,fp
   4b798:	dfc00117 	ldw	ra,4(sp)
   4b79c:	df000017 	ldw	fp,0(sp)
   4b7a0:	dec00204 	addi	sp,sp,8
   4b7a4:	f800283a 	ret

0004b7a8 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   4b7a8:	defff604 	addi	sp,sp,-40
   4b7ac:	dfc00915 	stw	ra,36(sp)
   4b7b0:	df000815 	stw	fp,32(sp)
   4b7b4:	df000804 	addi	fp,sp,32
   4b7b8:	2005883a 	mov	r2,r4
   4b7bc:	e17fff15 	stw	r5,-4(fp)
   4b7c0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4b7c4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   4b7c8:	e0bffe03 	ldbu	r2,-8(fp)
   4b7cc:	10800570 	cmpltui	r2,r2,21
   4b7d0:	1000051e 	bne	r2,zero,4b7e8 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   4b7d4:	e0bffe03 	ldbu	r2,-8(fp)
   4b7d8:	10803fe0 	cmpeqi	r2,r2,255
   4b7dc:	1000021e 	bne	r2,zero,4b7e8 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   4b7e0:	00800a84 	movi	r2,42
   4b7e4:	00003606 	br	4b8c0 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   4b7e8:	e0bfff17 	ldw	r2,-4(fp)
   4b7ec:	1000021e 	bne	r2,zero,4b7f8 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   4b7f0:	00800244 	movi	r2,9
   4b7f4:	00003206 	br	4b8c0 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b7f8:	0005303a 	rdctl	r2,status
   4b7fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b800:	e0fffa17 	ldw	r3,-24(fp)
   4b804:	00bfff84 	movi	r2,-2
   4b808:	1884703a 	and	r2,r3,r2
   4b80c:	1001703a 	wrctl	status,r2
  
  return context;
   4b810:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   4b814:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   4b818:	e0bffe03 	ldbu	r2,-8(fp)
   4b81c:	10803fd8 	cmpnei	r2,r2,255
   4b820:	1000051e 	bne	r2,zero,4b838 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   4b824:	00800174 	movhi	r2,5
   4b828:	108ad604 	addi	r2,r2,11096
   4b82c:	10800017 	ldw	r2,0(r2)
   4b830:	10800c83 	ldbu	r2,50(r2)
   4b834:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   4b838:	e0fffe03 	ldbu	r3,-8(fp)
   4b83c:	008001b4 	movhi	r2,6
   4b840:	10af5d04 	addi	r2,r2,-17036
   4b844:	18c7883a 	add	r3,r3,r3
   4b848:	18c7883a 	add	r3,r3,r3
   4b84c:	10c5883a 	add	r2,r2,r3
   4b850:	10800017 	ldw	r2,0(r2)
   4b854:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   4b858:	e0bff917 	ldw	r2,-28(fp)
   4b85c:	1000061e 	bne	r2,zero,4b878 <OSTaskQuery+0xd0>
   4b860:	e0bff817 	ldw	r2,-32(fp)
   4b864:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b868:	e0bffb17 	ldw	r2,-20(fp)
   4b86c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   4b870:	00800a44 	movi	r2,41
   4b874:	00001206 	br	4b8c0 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   4b878:	e0bff917 	ldw	r2,-28(fp)
   4b87c:	10800058 	cmpnei	r2,r2,1
   4b880:	1000061e 	bne	r2,zero,4b89c <OSTaskQuery+0xf4>
   4b884:	e0bff817 	ldw	r2,-32(fp)
   4b888:	e0bffc15 	stw	r2,-16(fp)
   4b88c:	e0bffc17 	ldw	r2,-16(fp)
   4b890:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   4b894:	008010c4 	movi	r2,67
   4b898:	00000906 	br	4b8c0 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   4b89c:	e13fff17 	ldw	r4,-4(fp)
   4b8a0:	e17ff917 	ldw	r5,-28(fp)
   4b8a4:	01801b04 	movi	r6,108
   4b8a8:	0045ad00 	call	45ad0 <OS_MemCopy>
   4b8ac:	e0bff817 	ldw	r2,-32(fp)
   4b8b0:	e0bffd15 	stw	r2,-12(fp)
   4b8b4:	e0bffd17 	ldw	r2,-12(fp)
   4b8b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   4b8bc:	0005883a 	mov	r2,zero
}
   4b8c0:	e037883a 	mov	sp,fp
   4b8c4:	dfc00117 	ldw	ra,4(sp)
   4b8c8:	df000017 	ldw	fp,0(sp)
   4b8cc:	dec00204 	addi	sp,sp,8
   4b8d0:	f800283a 	ret

0004b8d4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   4b8d4:	defffc04 	addi	sp,sp,-16
   4b8d8:	df000315 	stw	fp,12(sp)
   4b8dc:	df000304 	addi	fp,sp,12
   4b8e0:	e13ffd15 	stw	r4,-12(fp)
   4b8e4:	e17ffe15 	stw	r5,-8(fp)
   4b8e8:	3005883a 	mov	r2,r6
   4b8ec:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   4b8f0:	e0bfff0b 	ldhu	r2,-4(fp)
   4b8f4:	1080004c 	andi	r2,r2,1
   4b8f8:	10000d26 	beq	r2,zero,4b930 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   4b8fc:	e0bfff0b 	ldhu	r2,-4(fp)
   4b900:	1080008c 	andi	r2,r2,2
   4b904:	10000a26 	beq	r2,zero,4b930 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   4b908:	00000706 	br	4b928 <OS_TaskStkClr+0x54>
                size--;
   4b90c:	e0bffe17 	ldw	r2,-8(fp)
   4b910:	10bfffc4 	addi	r2,r2,-1
   4b914:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   4b918:	e0bffd17 	ldw	r2,-12(fp)
   4b91c:	10c00104 	addi	r3,r2,4
   4b920:	e0fffd15 	stw	r3,-12(fp)
   4b924:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   4b928:	e0bffe17 	ldw	r2,-8(fp)
   4b92c:	103ff71e 	bne	r2,zero,4b90c <__alt_data_end+0xfffd5dac>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   4b930:	e037883a 	mov	sp,fp
   4b934:	df000017 	ldw	fp,0(sp)
   4b938:	dec00104 	addi	sp,sp,4
   4b93c:	f800283a 	ret

0004b940 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   4b940:	defff904 	addi	sp,sp,-28
   4b944:	dfc00615 	stw	ra,24(sp)
   4b948:	df000515 	stw	fp,20(sp)
   4b94c:	df000504 	addi	fp,sp,20
   4b950:	2005883a 	mov	r2,r4
   4b954:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4b958:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   4b95c:	00800174 	movhi	r2,5
   4b960:	108ad504 	addi	r2,r2,11092
   4b964:	10800003 	ldbu	r2,0(r2)
   4b968:	10803fcc 	andi	r2,r2,255
   4b96c:	10000126 	beq	r2,zero,4b974 <OSTimeDly+0x34>
        return;
   4b970:	00004006 	br	4ba74 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   4b974:	e0bfff0b 	ldhu	r2,-4(fp)
   4b978:	10003e26 	beq	r2,zero,4ba74 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b97c:	0005303a 	rdctl	r2,status
   4b980:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b984:	e0fffd17 	ldw	r3,-12(fp)
   4b988:	00bfff84 	movi	r2,-2
   4b98c:	1884703a 	and	r2,r3,r2
   4b990:	1001703a 	wrctl	status,r2
  
  return context;
   4b994:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   4b998:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   4b99c:	00800174 	movhi	r2,5
   4b9a0:	108ad604 	addi	r2,r2,11096
   4b9a4:	10800017 	ldw	r2,0(r2)
   4b9a8:	10800d03 	ldbu	r2,52(r2)
   4b9ac:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   4b9b0:	e0fffc03 	ldbu	r3,-16(fp)
   4b9b4:	e13ffc03 	ldbu	r4,-16(fp)
   4b9b8:	00800174 	movhi	r2,5
   4b9bc:	108ad344 	addi	r2,r2,11085
   4b9c0:	1105883a 	add	r2,r2,r4
   4b9c4:	10800003 	ldbu	r2,0(r2)
   4b9c8:	1009883a 	mov	r4,r2
   4b9cc:	00800174 	movhi	r2,5
   4b9d0:	108ad604 	addi	r2,r2,11096
   4b9d4:	10800017 	ldw	r2,0(r2)
   4b9d8:	10800d43 	ldbu	r2,53(r2)
   4b9dc:	0084303a 	nor	r2,zero,r2
   4b9e0:	2084703a 	and	r2,r4,r2
   4b9e4:	1009883a 	mov	r4,r2
   4b9e8:	00800174 	movhi	r2,5
   4b9ec:	108ad344 	addi	r2,r2,11085
   4b9f0:	10c5883a 	add	r2,r2,r3
   4b9f4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   4b9f8:	e0fffc03 	ldbu	r3,-16(fp)
   4b9fc:	00800174 	movhi	r2,5
   4ba00:	108ad344 	addi	r2,r2,11085
   4ba04:	10c5883a 	add	r2,r2,r3
   4ba08:	10800003 	ldbu	r2,0(r2)
   4ba0c:	10803fcc 	andi	r2,r2,255
   4ba10:	10000e1e 	bne	r2,zero,4ba4c <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   4ba14:	00800174 	movhi	r2,5
   4ba18:	108ad604 	addi	r2,r2,11096
   4ba1c:	10800017 	ldw	r2,0(r2)
   4ba20:	10800d83 	ldbu	r2,54(r2)
   4ba24:	0084303a 	nor	r2,zero,r2
   4ba28:	1007883a 	mov	r3,r2
   4ba2c:	00800174 	movhi	r2,5
   4ba30:	108ad304 	addi	r2,r2,11084
   4ba34:	10800003 	ldbu	r2,0(r2)
   4ba38:	1884703a 	and	r2,r3,r2
   4ba3c:	1007883a 	mov	r3,r2
   4ba40:	00800174 	movhi	r2,5
   4ba44:	108ad304 	addi	r2,r2,11084
   4ba48:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   4ba4c:	00800174 	movhi	r2,5
   4ba50:	108ad604 	addi	r2,r2,11096
   4ba54:	10800017 	ldw	r2,0(r2)
   4ba58:	e0ffff0b 	ldhu	r3,-4(fp)
   4ba5c:	10c00b8d 	sth	r3,46(r2)
   4ba60:	e0bffb17 	ldw	r2,-20(fp)
   4ba64:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ba68:	e0bffe17 	ldw	r2,-8(fp)
   4ba6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   4ba70:	0045b340 	call	45b34 <OS_Sched>
    }
}
   4ba74:	e037883a 	mov	sp,fp
   4ba78:	dfc00117 	ldw	ra,4(sp)
   4ba7c:	df000017 	ldw	fp,0(sp)
   4ba80:	dec00204 	addi	sp,sp,8
   4ba84:	f800283a 	ret

0004ba88 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   4ba88:	defff704 	addi	sp,sp,-36
   4ba8c:	dfc00815 	stw	ra,32(sp)
   4ba90:	df000715 	stw	fp,28(sp)
   4ba94:	dc000615 	stw	r16,24(sp)
   4ba98:	df000704 	addi	fp,sp,28
   4ba9c:	2011883a 	mov	r8,r4
   4baa0:	2809883a 	mov	r4,r5
   4baa4:	3007883a 	mov	r3,r6
   4baa8:	3805883a 	mov	r2,r7
   4baac:	e23ffb05 	stb	r8,-20(fp)
   4bab0:	e13ffc05 	stb	r4,-16(fp)
   4bab4:	e0fffd05 	stb	r3,-12(fp)
   4bab8:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   4babc:	00800174 	movhi	r2,5
   4bac0:	108ad504 	addi	r2,r2,11092
   4bac4:	10800003 	ldbu	r2,0(r2)
   4bac8:	10803fcc 	andi	r2,r2,255
   4bacc:	10000226 	beq	r2,zero,4bad8 <OSTimeDlyHMSM+0x50>
        return (OS_ERR_TIME_DLY_ISR);
   4bad0:	00801544 	movi	r2,85
   4bad4:	00004706 	br	4bbf4 <OSTimeDlyHMSM+0x16c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   4bad8:	e0bffb03 	ldbu	r2,-20(fp)
   4badc:	1000081e 	bne	r2,zero,4bb00 <OSTimeDlyHMSM+0x78>
        if (minutes == 0) {
   4bae0:	e0bffc03 	ldbu	r2,-16(fp)
   4bae4:	1000061e 	bne	r2,zero,4bb00 <OSTimeDlyHMSM+0x78>
            if (seconds == 0) {
   4bae8:	e0bffd03 	ldbu	r2,-12(fp)
   4baec:	1000041e 	bne	r2,zero,4bb00 <OSTimeDlyHMSM+0x78>
                if (ms == 0) {
   4baf0:	e0bffe0b 	ldhu	r2,-8(fp)
   4baf4:	1000021e 	bne	r2,zero,4bb00 <OSTimeDlyHMSM+0x78>
                    return (OS_ERR_TIME_ZERO_DLY);
   4baf8:	00801504 	movi	r2,84
   4bafc:	00003d06 	br	4bbf4 <OSTimeDlyHMSM+0x16c>
                }
            }
        }
    }
    if (minutes > 59) {
   4bb00:	e0bffc03 	ldbu	r2,-16(fp)
   4bb04:	10800f30 	cmpltui	r2,r2,60
   4bb08:	1000021e 	bne	r2,zero,4bb14 <OSTimeDlyHMSM+0x8c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   4bb0c:	00801444 	movi	r2,81
   4bb10:	00003806 	br	4bbf4 <OSTimeDlyHMSM+0x16c>
    }
    if (seconds > 59) {
   4bb14:	e0bffd03 	ldbu	r2,-12(fp)
   4bb18:	10800f30 	cmpltui	r2,r2,60
   4bb1c:	1000021e 	bne	r2,zero,4bb28 <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_SECONDS);
   4bb20:	00801484 	movi	r2,82
   4bb24:	00003306 	br	4bbf4 <OSTimeDlyHMSM+0x16c>
    }
    if (ms > 999) {
   4bb28:	e0bffe0b 	ldhu	r2,-8(fp)
   4bb2c:	1080fa30 	cmpltui	r2,r2,1000
   4bb30:	1000021e 	bne	r2,zero,4bb3c <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_MS);
   4bb34:	008014c4 	movi	r2,83
   4bb38:	00002e06 	br	4bbf4 <OSTimeDlyHMSM+0x16c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   4bb3c:	e0bffb03 	ldbu	r2,-20(fp)
   4bb40:	1009883a 	mov	r4,r2
   4bb44:	01438404 	movi	r5,3600
   4bb48:	00434d80 	call	434d8 <__mulsi3>
   4bb4c:	1021883a 	mov	r16,r2
   4bb50:	e0bffc03 	ldbu	r2,-16(fp)
   4bb54:	1009883a 	mov	r4,r2
   4bb58:	01400f04 	movi	r5,60
   4bb5c:	00434d80 	call	434d8 <__mulsi3>
   4bb60:	8087883a 	add	r3,r16,r2
   4bb64:	e0bffd03 	ldbu	r2,-12(fp)
   4bb68:	1885883a 	add	r2,r3,r2
   4bb6c:	1009883a 	mov	r4,r2
   4bb70:	0140fa04 	movi	r5,1000
   4bb74:	00434d80 	call	434d8 <__mulsi3>
   4bb78:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   4bb7c:	e0bffe0b 	ldhu	r2,-8(fp)
   4bb80:	1009883a 	mov	r4,r2
   4bb84:	0140fa04 	movi	r5,1000
   4bb88:	00434d80 	call	434d8 <__mulsi3>
   4bb8c:	1009883a 	mov	r4,r2
   4bb90:	0140fa04 	movi	r5,1000
   4bb94:	004f19c0 	call	4f19c <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   4bb98:	8085883a 	add	r2,r16,r2
   4bb9c:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   4bba0:	e0bffa17 	ldw	r2,-24(fp)
   4bba4:	1004d43a 	srli	r2,r2,16
   4bba8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   4bbac:	e0bffa17 	ldw	r2,-24(fp)
   4bbb0:	10bfffcc 	andi	r2,r2,65535
   4bbb4:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   4bbb8:	e0bffa17 	ldw	r2,-24(fp)
   4bbbc:	10bfffcc 	andi	r2,r2,65535
   4bbc0:	1009883a 	mov	r4,r2
   4bbc4:	004b9400 	call	4b940 <OSTimeDly>
    while (loops > 0) {
   4bbc8:	00000706 	br	4bbe8 <OSTimeDlyHMSM+0x160>
        OSTimeDly((INT16U)32768u);
   4bbcc:	01200014 	movui	r4,32768
   4bbd0:	004b9400 	call	4b940 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   4bbd4:	01200014 	movui	r4,32768
   4bbd8:	004b9400 	call	4b940 <OSTimeDly>
        loops--;
   4bbdc:	e0bff90b 	ldhu	r2,-28(fp)
   4bbe0:	10bfffc4 	addi	r2,r2,-1
   4bbe4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   4bbe8:	e0bff90b 	ldhu	r2,-28(fp)
   4bbec:	103ff71e 	bne	r2,zero,4bbcc <__alt_data_end+0xfffd606c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   4bbf0:	0005883a 	mov	r2,zero
}
   4bbf4:	e6ffff04 	addi	sp,fp,-4
   4bbf8:	dfc00217 	ldw	ra,8(sp)
   4bbfc:	df000117 	ldw	fp,4(sp)
   4bc00:	dc000017 	ldw	r16,0(sp)
   4bc04:	dec00304 	addi	sp,sp,12
   4bc08:	f800283a 	ret

0004bc0c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   4bc0c:	defff504 	addi	sp,sp,-44
   4bc10:	dfc00a15 	stw	ra,40(sp)
   4bc14:	df000915 	stw	fp,36(sp)
   4bc18:	df000904 	addi	fp,sp,36
   4bc1c:	2005883a 	mov	r2,r4
   4bc20:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   4bc24:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   4bc28:	e0bfff03 	ldbu	r2,-4(fp)
   4bc2c:	10800530 	cmpltui	r2,r2,20
   4bc30:	1000021e 	bne	r2,zero,4bc3c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   4bc34:	00800a84 	movi	r2,42
   4bc38:	00006b06 	br	4bde8 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bc3c:	0005303a 	rdctl	r2,status
   4bc40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bc44:	e0fff917 	ldw	r3,-28(fp)
   4bc48:	00bfff84 	movi	r2,-2
   4bc4c:	1884703a 	and	r2,r3,r2
   4bc50:	1001703a 	wrctl	status,r2
  
  return context;
   4bc54:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   4bc58:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   4bc5c:	e0ffff03 	ldbu	r3,-4(fp)
   4bc60:	008001b4 	movhi	r2,6
   4bc64:	10af5d04 	addi	r2,r2,-17036
   4bc68:	18c7883a 	add	r3,r3,r3
   4bc6c:	18c7883a 	add	r3,r3,r3
   4bc70:	10c5883a 	add	r2,r2,r3
   4bc74:	10800017 	ldw	r2,0(r2)
   4bc78:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   4bc7c:	e0bff817 	ldw	r2,-32(fp)
   4bc80:	1000061e 	bne	r2,zero,4bc9c <OSTimeDlyResume+0x90>
   4bc84:	e0bff717 	ldw	r2,-36(fp)
   4bc88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bc8c:	e0bffa17 	ldw	r2,-24(fp)
   4bc90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   4bc94:	008010c4 	movi	r2,67
   4bc98:	00005306 	br	4bde8 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   4bc9c:	e0bff817 	ldw	r2,-32(fp)
   4bca0:	10800058 	cmpnei	r2,r2,1
   4bca4:	1000061e 	bne	r2,zero,4bcc0 <OSTimeDlyResume+0xb4>
   4bca8:	e0bff717 	ldw	r2,-36(fp)
   4bcac:	e0bffb15 	stw	r2,-20(fp)
   4bcb0:	e0bffb17 	ldw	r2,-20(fp)
   4bcb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   4bcb8:	008010c4 	movi	r2,67
   4bcbc:	00004a06 	br	4bde8 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   4bcc0:	e0bff817 	ldw	r2,-32(fp)
   4bcc4:	10800b8b 	ldhu	r2,46(r2)
   4bcc8:	10bfffcc 	andi	r2,r2,65535
   4bccc:	1000061e 	bne	r2,zero,4bce8 <OSTimeDlyResume+0xdc>
   4bcd0:	e0bff717 	ldw	r2,-36(fp)
   4bcd4:	e0bffc15 	stw	r2,-16(fp)
   4bcd8:	e0bffc17 	ldw	r2,-16(fp)
   4bcdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   4bce0:	00801404 	movi	r2,80
   4bce4:	00004006 	br	4bde8 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   4bce8:	e0bff817 	ldw	r2,-32(fp)
   4bcec:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   4bcf0:	e0bff817 	ldw	r2,-32(fp)
   4bcf4:	10800c03 	ldbu	r2,48(r2)
   4bcf8:	10803fcc 	andi	r2,r2,255
   4bcfc:	10800dcc 	andi	r2,r2,55
   4bd00:	10000b26 	beq	r2,zero,4bd30 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   4bd04:	e0bff817 	ldw	r2,-32(fp)
   4bd08:	10c00c03 	ldbu	r3,48(r2)
   4bd0c:	00bff204 	movi	r2,-56
   4bd10:	1884703a 	and	r2,r3,r2
   4bd14:	1007883a 	mov	r3,r2
   4bd18:	e0bff817 	ldw	r2,-32(fp)
   4bd1c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   4bd20:	e0bff817 	ldw	r2,-32(fp)
   4bd24:	00c00044 	movi	r3,1
   4bd28:	10c00c45 	stb	r3,49(r2)
   4bd2c:	00000206 	br	4bd38 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   4bd30:	e0bff817 	ldw	r2,-32(fp)
   4bd34:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   4bd38:	e0bff817 	ldw	r2,-32(fp)
   4bd3c:	10800c03 	ldbu	r2,48(r2)
   4bd40:	10803fcc 	andi	r2,r2,255
   4bd44:	1080020c 	andi	r2,r2,8
   4bd48:	1000221e 	bne	r2,zero,4bdd4 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   4bd4c:	e0bff817 	ldw	r2,-32(fp)
   4bd50:	10c00d83 	ldbu	r3,54(r2)
   4bd54:	00800174 	movhi	r2,5
   4bd58:	108ad304 	addi	r2,r2,11084
   4bd5c:	10800003 	ldbu	r2,0(r2)
   4bd60:	1884b03a 	or	r2,r3,r2
   4bd64:	1007883a 	mov	r3,r2
   4bd68:	00800174 	movhi	r2,5
   4bd6c:	108ad304 	addi	r2,r2,11084
   4bd70:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   4bd74:	e0bff817 	ldw	r2,-32(fp)
   4bd78:	10800d03 	ldbu	r2,52(r2)
   4bd7c:	10c03fcc 	andi	r3,r2,255
   4bd80:	e0bff817 	ldw	r2,-32(fp)
   4bd84:	10800d03 	ldbu	r2,52(r2)
   4bd88:	11003fcc 	andi	r4,r2,255
   4bd8c:	00800174 	movhi	r2,5
   4bd90:	108ad344 	addi	r2,r2,11085
   4bd94:	1105883a 	add	r2,r2,r4
   4bd98:	11000003 	ldbu	r4,0(r2)
   4bd9c:	e0bff817 	ldw	r2,-32(fp)
   4bda0:	10800d43 	ldbu	r2,53(r2)
   4bda4:	2084b03a 	or	r2,r4,r2
   4bda8:	1009883a 	mov	r4,r2
   4bdac:	00800174 	movhi	r2,5
   4bdb0:	108ad344 	addi	r2,r2,11085
   4bdb4:	10c5883a 	add	r2,r2,r3
   4bdb8:	11000005 	stb	r4,0(r2)
   4bdbc:	e0bff717 	ldw	r2,-36(fp)
   4bdc0:	e0bffd15 	stw	r2,-12(fp)
   4bdc4:	e0bffd17 	ldw	r2,-12(fp)
   4bdc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   4bdcc:	0045b340 	call	45b34 <OS_Sched>
   4bdd0:	00000406 	br	4bde4 <OSTimeDlyResume+0x1d8>
   4bdd4:	e0bff717 	ldw	r2,-36(fp)
   4bdd8:	e0bffe15 	stw	r2,-8(fp)
   4bddc:	e0bffe17 	ldw	r2,-8(fp)
   4bde0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   4bde4:	0005883a 	mov	r2,zero
}
   4bde8:	e037883a 	mov	sp,fp
   4bdec:	dfc00117 	ldw	ra,4(sp)
   4bdf0:	df000017 	ldw	fp,0(sp)
   4bdf4:	dec00204 	addi	sp,sp,8
   4bdf8:	f800283a 	ret

0004bdfc <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   4bdfc:	defffb04 	addi	sp,sp,-20
   4be00:	df000415 	stw	fp,16(sp)
   4be04:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4be08:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4be0c:	0005303a 	rdctl	r2,status
   4be10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4be14:	e0fffe17 	ldw	r3,-8(fp)
   4be18:	00bfff84 	movi	r2,-2
   4be1c:	1884703a 	and	r2,r3,r2
   4be20:	1001703a 	wrctl	status,r2
  
  return context;
   4be24:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   4be28:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   4be2c:	00800174 	movhi	r2,5
   4be30:	108ad704 	addi	r2,r2,11100
   4be34:	10800017 	ldw	r2,0(r2)
   4be38:	e0bffd15 	stw	r2,-12(fp)
   4be3c:	e0bffc17 	ldw	r2,-16(fp)
   4be40:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4be44:	e0bfff17 	ldw	r2,-4(fp)
   4be48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   4be4c:	e0bffd17 	ldw	r2,-12(fp)
}
   4be50:	e037883a 	mov	sp,fp
   4be54:	df000017 	ldw	fp,0(sp)
   4be58:	dec00104 	addi	sp,sp,4
   4be5c:	f800283a 	ret

0004be60 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   4be60:	defffb04 	addi	sp,sp,-20
   4be64:	df000415 	stw	fp,16(sp)
   4be68:	df000404 	addi	fp,sp,16
   4be6c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4be70:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4be74:	0005303a 	rdctl	r2,status
   4be78:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4be7c:	e0fffd17 	ldw	r3,-12(fp)
   4be80:	00bfff84 	movi	r2,-2
   4be84:	1884703a 	and	r2,r3,r2
   4be88:	1001703a 	wrctl	status,r2
  
  return context;
   4be8c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   4be90:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   4be94:	00800174 	movhi	r2,5
   4be98:	108ad704 	addi	r2,r2,11100
   4be9c:	e0ffff17 	ldw	r3,-4(fp)
   4bea0:	10c00015 	stw	r3,0(r2)
   4bea4:	e0bffc17 	ldw	r2,-16(fp)
   4bea8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4beac:	e0bffe17 	ldw	r2,-8(fp)
   4beb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   4beb4:	e037883a 	mov	sp,fp
   4beb8:	df000017 	ldw	fp,0(sp)
   4bebc:	dec00104 	addi	sp,sp,4
   4bec0:	f800283a 	ret

0004bec4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4bec4:	defffd04 	addi	sp,sp,-12
   4bec8:	dfc00215 	stw	ra,8(sp)
   4becc:	df000115 	stw	fp,4(sp)
   4bed0:	df000104 	addi	fp,sp,4
   4bed4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4bed8:	e13fff17 	ldw	r4,-4(fp)
   4bedc:	01400174 	movhi	r5,5
   4bee0:	2943a304 	addi	r5,r5,3724
   4bee4:	004daf00 	call	4daf0 <alt_dev_llist_insert>
}
   4bee8:	e037883a 	mov	sp,fp
   4beec:	dfc00117 	ldw	ra,4(sp)
   4bef0:	df000017 	ldw	fp,0(sp)
   4bef4:	dec00204 	addi	sp,sp,8
   4bef8:	f800283a 	ret

0004befc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4befc:	defffd04 	addi	sp,sp,-12
   4bf00:	dfc00215 	stw	ra,8(sp)
   4bf04:	df000115 	stw	fp,4(sp)
   4bf08:	df000104 	addi	fp,sp,4
   4bf0c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   4bf10:	004e4d00 	call	4e4d0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4bf14:	00800044 	movi	r2,1
   4bf18:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4bf1c:	e037883a 	mov	sp,fp
   4bf20:	dfc00117 	ldw	ra,4(sp)
   4bf24:	df000017 	ldw	fp,0(sp)
   4bf28:	dec00204 	addi	sp,sp,8
   4bf2c:	f800283a 	ret

0004bf30 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4bf30:	defffe04 	addi	sp,sp,-8
   4bf34:	dfc00115 	stw	ra,4(sp)
   4bf38:	df000015 	stw	fp,0(sp)
   4bf3c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK, sys_clk);
   4bf40:	01040004 	movi	r4,4096
   4bf44:	000b883a 	mov	r5,zero
   4bf48:	01800084 	movi	r6,2
   4bf4c:	01c0fa04 	movi	r7,1000
   4bf50:	004cd480 	call	4cd48 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4bf54:	01000174 	movhi	r4,5
   4bf58:	213f5804 	addi	r4,r4,-672
   4bf5c:	000b883a 	mov	r5,zero
   4bf60:	018000c4 	movi	r6,3
   4bf64:	004c10c0 	call	4c10c <altera_avalon_jtag_uart_init>
   4bf68:	01000174 	movhi	r4,5
   4bf6c:	213f4e04 	addi	r4,r4,-712
   4bf70:	004bec40 	call	4bec4 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
   4bf74:	01000174 	movhi	r4,5
   4bf78:	21037304 	addi	r4,r4,3532
   4bf7c:	000b883a 	mov	r5,zero
   4bf80:	01800044 	movi	r6,1
   4bf84:	004cee00 	call	4cee0 <altera_avalon_uart_init>
   4bf88:	01000174 	movhi	r4,5
   4bf8c:	21036904 	addi	r4,r4,3492
   4bf90:	004bec40 	call	4bec4 <alt_dev_reg>
}
   4bf94:	e037883a 	mov	sp,fp
   4bf98:	dfc00117 	ldw	ra,4(sp)
   4bf9c:	df000017 	ldw	fp,0(sp)
   4bfa0:	dec00204 	addi	sp,sp,8
   4bfa4:	f800283a 	ret

0004bfa8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4bfa8:	defffa04 	addi	sp,sp,-24
   4bfac:	dfc00515 	stw	ra,20(sp)
   4bfb0:	df000415 	stw	fp,16(sp)
   4bfb4:	df000404 	addi	fp,sp,16
   4bfb8:	e13ffd15 	stw	r4,-12(fp)
   4bfbc:	e17ffe15 	stw	r5,-8(fp)
   4bfc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4bfc4:	e0bffd17 	ldw	r2,-12(fp)
   4bfc8:	10800017 	ldw	r2,0(r2)
   4bfcc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4bfd0:	e0bffc17 	ldw	r2,-16(fp)
   4bfd4:	10c00a04 	addi	r3,r2,40
   4bfd8:	e0bffd17 	ldw	r2,-12(fp)
   4bfdc:	10800217 	ldw	r2,8(r2)
   4bfe0:	1809883a 	mov	r4,r3
   4bfe4:	e17ffe17 	ldw	r5,-8(fp)
   4bfe8:	e1bfff17 	ldw	r6,-4(fp)
   4bfec:	100f883a 	mov	r7,r2
   4bff0:	004c7600 	call	4c760 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4bff4:	e037883a 	mov	sp,fp
   4bff8:	dfc00117 	ldw	ra,4(sp)
   4bffc:	df000017 	ldw	fp,0(sp)
   4c000:	dec00204 	addi	sp,sp,8
   4c004:	f800283a 	ret

0004c008 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4c008:	defffa04 	addi	sp,sp,-24
   4c00c:	dfc00515 	stw	ra,20(sp)
   4c010:	df000415 	stw	fp,16(sp)
   4c014:	df000404 	addi	fp,sp,16
   4c018:	e13ffd15 	stw	r4,-12(fp)
   4c01c:	e17ffe15 	stw	r5,-8(fp)
   4c020:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4c024:	e0bffd17 	ldw	r2,-12(fp)
   4c028:	10800017 	ldw	r2,0(r2)
   4c02c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4c030:	e0bffc17 	ldw	r2,-16(fp)
   4c034:	10c00a04 	addi	r3,r2,40
   4c038:	e0bffd17 	ldw	r2,-12(fp)
   4c03c:	10800217 	ldw	r2,8(r2)
   4c040:	1809883a 	mov	r4,r3
   4c044:	e17ffe17 	ldw	r5,-8(fp)
   4c048:	e1bfff17 	ldw	r6,-4(fp)
   4c04c:	100f883a 	mov	r7,r2
   4c050:	004ca140 	call	4ca14 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4c054:	e037883a 	mov	sp,fp
   4c058:	dfc00117 	ldw	ra,4(sp)
   4c05c:	df000017 	ldw	fp,0(sp)
   4c060:	dec00204 	addi	sp,sp,8
   4c064:	f800283a 	ret

0004c068 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4c068:	defffc04 	addi	sp,sp,-16
   4c06c:	dfc00315 	stw	ra,12(sp)
   4c070:	df000215 	stw	fp,8(sp)
   4c074:	df000204 	addi	fp,sp,8
   4c078:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4c07c:	e0bfff17 	ldw	r2,-4(fp)
   4c080:	10800017 	ldw	r2,0(r2)
   4c084:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4c088:	e0bffe17 	ldw	r2,-8(fp)
   4c08c:	10c00a04 	addi	r3,r2,40
   4c090:	e0bfff17 	ldw	r2,-4(fp)
   4c094:	10800217 	ldw	r2,8(r2)
   4c098:	1809883a 	mov	r4,r3
   4c09c:	100b883a 	mov	r5,r2
   4c0a0:	004c60c0 	call	4c60c <altera_avalon_jtag_uart_close>
}
   4c0a4:	e037883a 	mov	sp,fp
   4c0a8:	dfc00117 	ldw	ra,4(sp)
   4c0ac:	df000017 	ldw	fp,0(sp)
   4c0b0:	dec00204 	addi	sp,sp,8
   4c0b4:	f800283a 	ret

0004c0b8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4c0b8:	defffa04 	addi	sp,sp,-24
   4c0bc:	dfc00515 	stw	ra,20(sp)
   4c0c0:	df000415 	stw	fp,16(sp)
   4c0c4:	df000404 	addi	fp,sp,16
   4c0c8:	e13ffd15 	stw	r4,-12(fp)
   4c0cc:	e17ffe15 	stw	r5,-8(fp)
   4c0d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4c0d4:	e0bffd17 	ldw	r2,-12(fp)
   4c0d8:	10800017 	ldw	r2,0(r2)
   4c0dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4c0e0:	e0bffc17 	ldw	r2,-16(fp)
   4c0e4:	10800a04 	addi	r2,r2,40
   4c0e8:	1009883a 	mov	r4,r2
   4c0ec:	e17ffe17 	ldw	r5,-8(fp)
   4c0f0:	e1bfff17 	ldw	r6,-4(fp)
   4c0f4:	004c6740 	call	4c674 <altera_avalon_jtag_uart_ioctl>
}
   4c0f8:	e037883a 	mov	sp,fp
   4c0fc:	dfc00117 	ldw	ra,4(sp)
   4c100:	df000017 	ldw	fp,0(sp)
   4c104:	dec00204 	addi	sp,sp,8
   4c108:	f800283a 	ret

0004c10c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4c10c:	defff004 	addi	sp,sp,-64
   4c110:	dfc00f15 	stw	ra,60(sp)
   4c114:	df000e15 	stw	fp,56(sp)
   4c118:	df000e04 	addi	fp,sp,56
   4c11c:	e13ff915 	stw	r4,-28(fp)
   4c120:	e17ffa15 	stw	r5,-24(fp)
   4c124:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   4c128:	e0bff917 	ldw	r2,-28(fp)
   4c12c:	10800c04 	addi	r2,r2,48
   4c130:	e0bff315 	stw	r2,-52(fp)
   4c134:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   4c138:	e0fff40b 	ldhu	r3,-48(fp)
   4c13c:	e0bff884 	addi	r2,fp,-30
   4c140:	1809883a 	mov	r4,r3
   4c144:	100b883a 	mov	r5,r2
   4c148:	00466900 	call	46690 <OSFlagCreate>
   4c14c:	1007883a 	mov	r3,r2
   4c150:	e0bff317 	ldw	r2,-52(fp)
   4c154:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   4c158:	e0bff917 	ldw	r2,-28(fp)
   4c15c:	10800a04 	addi	r2,r2,40
   4c160:	e0bff515 	stw	r2,-44(fp)
   4c164:	00800044 	movi	r2,1
   4c168:	e0bff60d 	sth	r2,-40(fp)
   4c16c:	e0bff60b 	ldhu	r2,-40(fp)
   4c170:	1009883a 	mov	r4,r2
   4c174:	00495f40 	call	495f4 <OSSemCreate>
   4c178:	1007883a 	mov	r3,r2
   4c17c:	e0bff517 	ldw	r2,-44(fp)
   4c180:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   4c184:	e0bff917 	ldw	r2,-28(fp)
   4c188:	10800b04 	addi	r2,r2,44
   4c18c:	e0bff715 	stw	r2,-36(fp)
   4c190:	00800044 	movi	r2,1
   4c194:	e0bff80d 	sth	r2,-32(fp)
   4c198:	e0bff80b 	ldhu	r2,-32(fp)
   4c19c:	1009883a 	mov	r4,r2
   4c1a0:	00495f40 	call	495f4 <OSSemCreate>
   4c1a4:	1007883a 	mov	r3,r2
   4c1a8:	e0bff717 	ldw	r2,-36(fp)
   4c1ac:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4c1b0:	e0bff917 	ldw	r2,-28(fp)
   4c1b4:	00c00044 	movi	r3,1
   4c1b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4c1bc:	e0bff917 	ldw	r2,-28(fp)
   4c1c0:	10800017 	ldw	r2,0(r2)
   4c1c4:	10800104 	addi	r2,r2,4
   4c1c8:	1007883a 	mov	r3,r2
   4c1cc:	e0bff917 	ldw	r2,-28(fp)
   4c1d0:	10800817 	ldw	r2,32(r2)
   4c1d4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4c1d8:	e0fffa17 	ldw	r3,-24(fp)
   4c1dc:	e0bffb17 	ldw	r2,-20(fp)
   4c1e0:	d8000015 	stw	zero,0(sp)
   4c1e4:	1809883a 	mov	r4,r3
   4c1e8:	100b883a 	mov	r5,r2
   4c1ec:	01800174 	movhi	r6,5
   4c1f0:	31b09604 	addi	r6,r6,-15784
   4c1f4:	e1fff917 	ldw	r7,-28(fp)
   4c1f8:	004dc680 	call	4dc68 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4c1fc:	e0bff917 	ldw	r2,-28(fp)
   4c200:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4c204:	e0bff917 	ldw	r2,-28(fp)
   4c208:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4c20c:	00800174 	movhi	r2,5
   4c210:	108adc04 	addi	r2,r2,11120
   4c214:	10800017 	ldw	r2,0(r2)
   4c218:	1809883a 	mov	r4,r3
   4c21c:	100b883a 	mov	r5,r2
   4c220:	01800174 	movhi	r6,5
   4c224:	31b13f04 	addi	r6,r6,-15108
   4c228:	e1fff917 	ldw	r7,-28(fp)
   4c22c:	004d9440 	call	4d944 <alt_alarm_start>
   4c230:	1000040e 	bge	r2,zero,4c244 <altera_avalon_jtag_uart_init+0x138>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4c234:	e0fff917 	ldw	r3,-28(fp)
   4c238:	00a00034 	movhi	r2,32768
   4c23c:	10bfffc4 	addi	r2,r2,-1
   4c240:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4c244:	e037883a 	mov	sp,fp
   4c248:	dfc00117 	ldw	ra,4(sp)
   4c24c:	df000017 	ldw	fp,0(sp)
   4c250:	dec00204 	addi	sp,sp,8
   4c254:	f800283a 	ret

0004c258 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4c258:	defff204 	addi	sp,sp,-56
   4c25c:	dfc00d15 	stw	ra,52(sp)
   4c260:	df000c15 	stw	fp,48(sp)
   4c264:	df000c04 	addi	fp,sp,48
   4c268:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4c26c:	e0bfff17 	ldw	r2,-4(fp)
   4c270:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   4c274:	e0bff617 	ldw	r2,-40(fp)
   4c278:	10800017 	ldw	r2,0(r2)
   4c27c:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4c280:	e0bff717 	ldw	r2,-36(fp)
   4c284:	10800104 	addi	r2,r2,4
   4c288:	10800037 	ldwio	r2,0(r2)
   4c28c:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4c290:	e0bff817 	ldw	r2,-32(fp)
   4c294:	1080c00c 	andi	r2,r2,768
   4c298:	1000011e 	bne	r2,zero,4c2a0 <altera_avalon_jtag_uart_irq+0x48>
      break;
   4c29c:	00009206 	br	4c4e8 <altera_avalon_jtag_uart_irq+0x290>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4c2a0:	e0bff817 	ldw	r2,-32(fp)
   4c2a4:	1080400c 	andi	r2,r2,256
   4c2a8:	10004726 	beq	r2,zero,4c3c8 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4c2ac:	00800074 	movhi	r2,1
   4c2b0:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c2b4:	e0bff617 	ldw	r2,-40(fp)
   4c2b8:	10800d17 	ldw	r2,52(r2)
   4c2bc:	10800044 	addi	r2,r2,1
   4c2c0:	1081ffcc 	andi	r2,r2,2047
   4c2c4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   4c2c8:	e0bff617 	ldw	r2,-40(fp)
   4c2cc:	10c00e17 	ldw	r3,56(r2)
   4c2d0:	e0bff917 	ldw	r2,-28(fp)
   4c2d4:	1880011e 	bne	r3,r2,4c2dc <altera_avalon_jtag_uart_irq+0x84>
          break;
   4c2d8:	00002906 	br	4c380 <altera_avalon_jtag_uart_irq+0x128>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4c2dc:	e0bff717 	ldw	r2,-36(fp)
   4c2e0:	10800037 	ldwio	r2,0(r2)
   4c2e4:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4c2e8:	e0bff417 	ldw	r2,-48(fp)
   4c2ec:	10a0000c 	andi	r2,r2,32768
   4c2f0:	1000011e 	bne	r2,zero,4c2f8 <altera_avalon_jtag_uart_irq+0xa0>
          break;
   4c2f4:	00002206 	br	4c380 <altera_avalon_jtag_uart_irq+0x128>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4c2f8:	e0bff617 	ldw	r2,-40(fp)
   4c2fc:	10800d17 	ldw	r2,52(r2)
   4c300:	e0fff417 	ldw	r3,-48(fp)
   4c304:	1809883a 	mov	r4,r3
   4c308:	e0fff617 	ldw	r3,-40(fp)
   4c30c:	1885883a 	add	r2,r3,r2
   4c310:	10801104 	addi	r2,r2,68
   4c314:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c318:	e0bff617 	ldw	r2,-40(fp)
   4c31c:	10800d17 	ldw	r2,52(r2)
   4c320:	10800044 	addi	r2,r2,1
   4c324:	10c1ffcc 	andi	r3,r2,2047
   4c328:	e0bff617 	ldw	r2,-40(fp)
   4c32c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   4c330:	e0bff617 	ldw	r2,-40(fp)
   4c334:	10800c17 	ldw	r2,48(r2)
   4c338:	e0bffa15 	stw	r2,-24(fp)
   4c33c:	00800044 	movi	r2,1
   4c340:	e0bffb0d 	sth	r2,-20(fp)
   4c344:	00800044 	movi	r2,1
   4c348:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   4c34c:	00800174 	movhi	r2,5
   4c350:	108ac744 	addi	r2,r2,11037
   4c354:	10800003 	ldbu	r2,0(r2)
   4c358:	10803fcc 	andi	r2,r2,255
   4c35c:	103fd526 	beq	r2,zero,4c2b4 <__alt_data_end+0xfffd6754>
  {
    OSFlagPost (group, flags, opt, &err);
   4c360:	e17ffb0b 	ldhu	r5,-20(fp)
   4c364:	e0fffb83 	ldbu	r3,-18(fp)
   4c368:	e0bffdc4 	addi	r2,fp,-9
   4c36c:	e13ffa17 	ldw	r4,-24(fp)
   4c370:	180d883a 	mov	r6,r3
   4c374:	100f883a 	mov	r7,r2
   4c378:	00473000 	call	47300 <OSFlagPost>
      }
   4c37c:	003fcd06 	br	4c2b4 <__alt_data_end+0xfffd6754>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4c380:	e0bff417 	ldw	r2,-48(fp)
   4c384:	10bfffec 	andhi	r2,r2,65535
   4c388:	10000f26 	beq	r2,zero,4c3c8 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4c38c:	e0bff617 	ldw	r2,-40(fp)
   4c390:	10c00817 	ldw	r3,32(r2)
   4c394:	00bfff84 	movi	r2,-2
   4c398:	1886703a 	and	r3,r3,r2
   4c39c:	e0bff617 	ldw	r2,-40(fp)
   4c3a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4c3a4:	e0bff717 	ldw	r2,-36(fp)
   4c3a8:	10800104 	addi	r2,r2,4
   4c3ac:	1007883a 	mov	r3,r2
   4c3b0:	e0bff617 	ldw	r2,-40(fp)
   4c3b4:	10800817 	ldw	r2,32(r2)
   4c3b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4c3bc:	e0bff717 	ldw	r2,-36(fp)
   4c3c0:	10800104 	addi	r2,r2,4
   4c3c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4c3c8:	e0bff817 	ldw	r2,-32(fp)
   4c3cc:	1080800c 	andi	r2,r2,512
   4c3d0:	10004426 	beq	r2,zero,4c4e4 <altera_avalon_jtag_uart_irq+0x28c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4c3d4:	e0bff817 	ldw	r2,-32(fp)
   4c3d8:	1004d43a 	srli	r2,r2,16
   4c3dc:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4c3e0:	00002706 	br	4c480 <altera_avalon_jtag_uart_irq+0x228>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4c3e4:	e0bff717 	ldw	r2,-36(fp)
   4c3e8:	e0fff617 	ldw	r3,-40(fp)
   4c3ec:	18c01017 	ldw	r3,64(r3)
   4c3f0:	e13ff617 	ldw	r4,-40(fp)
   4c3f4:	20c7883a 	add	r3,r4,r3
   4c3f8:	18c21104 	addi	r3,r3,2116
   4c3fc:	18c00003 	ldbu	r3,0(r3)
   4c400:	18c03fcc 	andi	r3,r3,255
   4c404:	18c0201c 	xori	r3,r3,128
   4c408:	18ffe004 	addi	r3,r3,-128
   4c40c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c410:	e0bff617 	ldw	r2,-40(fp)
   4c414:	10801017 	ldw	r2,64(r2)
   4c418:	10800044 	addi	r2,r2,1
   4c41c:	10c1ffcc 	andi	r3,r2,2047
   4c420:	e0bff617 	ldw	r2,-40(fp)
   4c424:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   4c428:	e0bff617 	ldw	r2,-40(fp)
   4c42c:	10800c17 	ldw	r2,48(r2)
   4c430:	e0bffc15 	stw	r2,-16(fp)
   4c434:	00800084 	movi	r2,2
   4c438:	e0bffd0d 	sth	r2,-12(fp)
   4c43c:	00800044 	movi	r2,1
   4c440:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   4c444:	00800174 	movhi	r2,5
   4c448:	108ac744 	addi	r2,r2,11037
   4c44c:	10800003 	ldbu	r2,0(r2)
   4c450:	10803fcc 	andi	r2,r2,255
   4c454:	10000726 	beq	r2,zero,4c474 <altera_avalon_jtag_uart_irq+0x21c>
  {
    OSFlagPost (group, flags, opt, &err);
   4c458:	e17ffd0b 	ldhu	r5,-12(fp)
   4c45c:	e0fffd83 	ldbu	r3,-10(fp)
   4c460:	e0bffe04 	addi	r2,fp,-8
   4c464:	e13ffc17 	ldw	r4,-16(fp)
   4c468:	180d883a 	mov	r6,r3
   4c46c:	100f883a 	mov	r7,r2
   4c470:	00473000 	call	47300 <OSFlagPost>

        space--;
   4c474:	e0bff517 	ldw	r2,-44(fp)
   4c478:	10bfffc4 	addi	r2,r2,-1
   4c47c:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4c480:	e0bff517 	ldw	r2,-44(fp)
   4c484:	10000526 	beq	r2,zero,4c49c <altera_avalon_jtag_uart_irq+0x244>
   4c488:	e0bff617 	ldw	r2,-40(fp)
   4c48c:	10c01017 	ldw	r3,64(r2)
   4c490:	e0bff617 	ldw	r2,-40(fp)
   4c494:	10800f17 	ldw	r2,60(r2)
   4c498:	18bfd21e 	bne	r3,r2,4c3e4 <__alt_data_end+0xfffd6884>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4c49c:	e0bff517 	ldw	r2,-44(fp)
   4c4a0:	10001026 	beq	r2,zero,4c4e4 <altera_avalon_jtag_uart_irq+0x28c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4c4a4:	e0bff617 	ldw	r2,-40(fp)
   4c4a8:	10c00817 	ldw	r3,32(r2)
   4c4ac:	00bfff44 	movi	r2,-3
   4c4b0:	1886703a 	and	r3,r3,r2
   4c4b4:	e0bff617 	ldw	r2,-40(fp)
   4c4b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4c4bc:	e0bff617 	ldw	r2,-40(fp)
   4c4c0:	10800017 	ldw	r2,0(r2)
   4c4c4:	10800104 	addi	r2,r2,4
   4c4c8:	1007883a 	mov	r3,r2
   4c4cc:	e0bff617 	ldw	r2,-40(fp)
   4c4d0:	10800817 	ldw	r2,32(r2)
   4c4d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4c4d8:	e0bff717 	ldw	r2,-36(fp)
   4c4dc:	10800104 	addi	r2,r2,4
   4c4e0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4c4e4:	003f6606 	br	4c280 <__alt_data_end+0xfffd6720>
}
   4c4e8:	e037883a 	mov	sp,fp
   4c4ec:	dfc00117 	ldw	ra,4(sp)
   4c4f0:	df000017 	ldw	fp,0(sp)
   4c4f4:	dec00204 	addi	sp,sp,8
   4c4f8:	f800283a 	ret

0004c4fc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4c4fc:	defff904 	addi	sp,sp,-28
   4c500:	dfc00615 	stw	ra,24(sp)
   4c504:	df000515 	stw	fp,20(sp)
   4c508:	df000504 	addi	fp,sp,20
   4c50c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4c510:	e0bfff17 	ldw	r2,-4(fp)
   4c514:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4c518:	e0bffb17 	ldw	r2,-20(fp)
   4c51c:	10800017 	ldw	r2,0(r2)
   4c520:	10800104 	addi	r2,r2,4
   4c524:	10800037 	ldwio	r2,0(r2)
   4c528:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4c52c:	e0bffc17 	ldw	r2,-16(fp)
   4c530:	1081000c 	andi	r2,r2,1024
   4c534:	10000b26 	beq	r2,zero,4c564 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4c538:	e0bffb17 	ldw	r2,-20(fp)
   4c53c:	10800017 	ldw	r2,0(r2)
   4c540:	10800104 	addi	r2,r2,4
   4c544:	1007883a 	mov	r3,r2
   4c548:	e0bffb17 	ldw	r2,-20(fp)
   4c54c:	10800817 	ldw	r2,32(r2)
   4c550:	10810014 	ori	r2,r2,1024
   4c554:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4c558:	e0bffb17 	ldw	r2,-20(fp)
   4c55c:	10000915 	stw	zero,36(r2)
   4c560:	00002206 	br	4c5ec <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4c564:	e0bffb17 	ldw	r2,-20(fp)
   4c568:	10c00917 	ldw	r3,36(r2)
   4c56c:	00a00034 	movhi	r2,32768
   4c570:	10bfff04 	addi	r2,r2,-4
   4c574:	10c01d36 	bltu	r2,r3,4c5ec <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   4c578:	e0bffb17 	ldw	r2,-20(fp)
   4c57c:	10800917 	ldw	r2,36(r2)
   4c580:	10c00044 	addi	r3,r2,1
   4c584:	e0bffb17 	ldw	r2,-20(fp)
   4c588:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   4c58c:	e0bffb17 	ldw	r2,-20(fp)
   4c590:	10c00917 	ldw	r3,36(r2)
   4c594:	e0bffb17 	ldw	r2,-20(fp)
   4c598:	10800117 	ldw	r2,4(r2)
   4c59c:	18801336 	bltu	r3,r2,4c5ec <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   4c5a0:	e0bffb17 	ldw	r2,-20(fp)
   4c5a4:	10800c17 	ldw	r2,48(r2)
   4c5a8:	e0bffd15 	stw	r2,-12(fp)
   4c5ac:	00800104 	movi	r2,4
   4c5b0:	e0bffe0d 	sth	r2,-8(fp)
   4c5b4:	00800044 	movi	r2,1
   4c5b8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   4c5bc:	00800174 	movhi	r2,5
   4c5c0:	108ac744 	addi	r2,r2,11037
   4c5c4:	10800003 	ldbu	r2,0(r2)
   4c5c8:	10803fcc 	andi	r2,r2,255
   4c5cc:	10000726 	beq	r2,zero,4c5ec <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   4c5d0:	e17ffe0b 	ldhu	r5,-8(fp)
   4c5d4:	e0fffe83 	ldbu	r3,-6(fp)
   4c5d8:	e0bffec4 	addi	r2,fp,-5
   4c5dc:	e13ffd17 	ldw	r4,-12(fp)
   4c5e0:	180d883a 	mov	r6,r3
   4c5e4:	100f883a 	mov	r7,r2
   4c5e8:	00473000 	call	47300 <OSFlagPost>
   4c5ec:	00800174 	movhi	r2,5
   4c5f0:	108adc04 	addi	r2,r2,11120
   4c5f4:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   4c5f8:	e037883a 	mov	sp,fp
   4c5fc:	dfc00117 	ldw	ra,4(sp)
   4c600:	df000017 	ldw	fp,0(sp)
   4c604:	dec00204 	addi	sp,sp,8
   4c608:	f800283a 	ret

0004c60c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4c60c:	defffd04 	addi	sp,sp,-12
   4c610:	df000215 	stw	fp,8(sp)
   4c614:	df000204 	addi	fp,sp,8
   4c618:	e13ffe15 	stw	r4,-8(fp)
   4c61c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4c620:	00000506 	br	4c638 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4c624:	e0bfff17 	ldw	r2,-4(fp)
   4c628:	1090000c 	andi	r2,r2,16384
   4c62c:	10000226 	beq	r2,zero,4c638 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4c630:	00bffd44 	movi	r2,-11
   4c634:	00000b06 	br	4c664 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4c638:	e0bffe17 	ldw	r2,-8(fp)
   4c63c:	10c01017 	ldw	r3,64(r2)
   4c640:	e0bffe17 	ldw	r2,-8(fp)
   4c644:	10800f17 	ldw	r2,60(r2)
   4c648:	18800526 	beq	r3,r2,4c660 <altera_avalon_jtag_uart_close+0x54>
   4c64c:	e0bffe17 	ldw	r2,-8(fp)
   4c650:	10c00917 	ldw	r3,36(r2)
   4c654:	e0bffe17 	ldw	r2,-8(fp)
   4c658:	10800117 	ldw	r2,4(r2)
   4c65c:	18bff136 	bltu	r3,r2,4c624 <__alt_data_end+0xfffd6ac4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4c660:	0005883a 	mov	r2,zero
}
   4c664:	e037883a 	mov	sp,fp
   4c668:	df000017 	ldw	fp,0(sp)
   4c66c:	dec00104 	addi	sp,sp,4
   4c670:	f800283a 	ret

0004c674 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4c674:	defffa04 	addi	sp,sp,-24
   4c678:	df000515 	stw	fp,20(sp)
   4c67c:	df000504 	addi	fp,sp,20
   4c680:	e13ffd15 	stw	r4,-12(fp)
   4c684:	e17ffe15 	stw	r5,-8(fp)
   4c688:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4c68c:	00bff9c4 	movi	r2,-25
   4c690:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4c694:	e0bffe17 	ldw	r2,-8(fp)
   4c698:	10da8060 	cmpeqi	r3,r2,27137
   4c69c:	1800031e 	bne	r3,zero,4c6ac <altera_avalon_jtag_uart_ioctl+0x38>
   4c6a0:	109a80a0 	cmpeqi	r2,r2,27138
   4c6a4:	1000191e 	bne	r2,zero,4c70c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   4c6a8:	00002806 	br	4c74c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4c6ac:	e0bffd17 	ldw	r2,-12(fp)
   4c6b0:	10c00117 	ldw	r3,4(r2)
   4c6b4:	00a00034 	movhi	r2,32768
   4c6b8:	10bfffc4 	addi	r2,r2,-1
   4c6bc:	18801226 	beq	r3,r2,4c708 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   4c6c0:	e0bfff17 	ldw	r2,-4(fp)
   4c6c4:	10800017 	ldw	r2,0(r2)
   4c6c8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4c6cc:	e0bffc17 	ldw	r2,-16(fp)
   4c6d0:	10800090 	cmplti	r2,r2,2
   4c6d4:	1000061e 	bne	r2,zero,4c6f0 <altera_avalon_jtag_uart_ioctl+0x7c>
   4c6d8:	e0fffc17 	ldw	r3,-16(fp)
   4c6dc:	00a00034 	movhi	r2,32768
   4c6e0:	10bfffc4 	addi	r2,r2,-1
   4c6e4:	18800226 	beq	r3,r2,4c6f0 <altera_avalon_jtag_uart_ioctl+0x7c>
   4c6e8:	e0bffc17 	ldw	r2,-16(fp)
   4c6ec:	00000206 	br	4c6f8 <altera_avalon_jtag_uart_ioctl+0x84>
   4c6f0:	00a00034 	movhi	r2,32768
   4c6f4:	10bfff84 	addi	r2,r2,-2
   4c6f8:	e0fffd17 	ldw	r3,-12(fp)
   4c6fc:	18800115 	stw	r2,4(r3)
      rc = 0;
   4c700:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4c704:	00001106 	br	4c74c <altera_avalon_jtag_uart_ioctl+0xd8>
   4c708:	00001006 	br	4c74c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4c70c:	e0bffd17 	ldw	r2,-12(fp)
   4c710:	10c00117 	ldw	r3,4(r2)
   4c714:	00a00034 	movhi	r2,32768
   4c718:	10bfffc4 	addi	r2,r2,-1
   4c71c:	18800a26 	beq	r3,r2,4c748 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4c720:	e0bffd17 	ldw	r2,-12(fp)
   4c724:	10c00917 	ldw	r3,36(r2)
   4c728:	e0bffd17 	ldw	r2,-12(fp)
   4c72c:	10800117 	ldw	r2,4(r2)
   4c730:	1885803a 	cmpltu	r2,r3,r2
   4c734:	10c03fcc 	andi	r3,r2,255
   4c738:	e0bfff17 	ldw	r2,-4(fp)
   4c73c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4c740:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4c744:	00000006 	br	4c748 <altera_avalon_jtag_uart_ioctl+0xd4>
   4c748:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4c74c:	e0bffb17 	ldw	r2,-20(fp)
}
   4c750:	e037883a 	mov	sp,fp
   4c754:	df000017 	ldw	fp,0(sp)
   4c758:	dec00104 	addi	sp,sp,4
   4c75c:	f800283a 	ret

0004c760 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4c760:	deffec04 	addi	sp,sp,-80
   4c764:	dfc01315 	stw	ra,76(sp)
   4c768:	df001215 	stw	fp,72(sp)
   4c76c:	df001204 	addi	fp,sp,72
   4c770:	e13ffc15 	stw	r4,-16(fp)
   4c774:	e17ffd15 	stw	r5,-12(fp)
   4c778:	e1bffe15 	stw	r6,-8(fp)
   4c77c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4c780:	e0bffd17 	ldw	r2,-12(fp)
   4c784:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   4c788:	e0bffc17 	ldw	r2,-16(fp)
   4c78c:	10800a17 	ldw	r2,40(r2)
   4c790:	e0bff415 	stw	r2,-48(fp)
   4c794:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   4c798:	e0fff50b 	ldhu	r3,-44(fp)
   4c79c:	e0bffb04 	addi	r2,fp,-20
   4c7a0:	e13ff417 	ldw	r4,-48(fp)
   4c7a4:	180b883a 	mov	r5,r3
   4c7a8:	100d883a 	mov	r6,r2
   4c7ac:	004995c0 	call	4995c <OSSemPend>

  while (space > 0)
   4c7b0:	00006506 	br	4c948 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4c7b4:	e0bffc17 	ldw	r2,-16(fp)
   4c7b8:	10800d17 	ldw	r2,52(r2)
   4c7bc:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   4c7c0:	e0bffc17 	ldw	r2,-16(fp)
   4c7c4:	10800e17 	ldw	r2,56(r2)
   4c7c8:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   4c7cc:	e0fff117 	ldw	r3,-60(fp)
   4c7d0:	e0bff217 	ldw	r2,-56(fp)
   4c7d4:	18800536 	bltu	r3,r2,4c7ec <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   4c7d8:	e0fff117 	ldw	r3,-60(fp)
   4c7dc:	e0bff217 	ldw	r2,-56(fp)
   4c7e0:	1885c83a 	sub	r2,r3,r2
   4c7e4:	e0bff015 	stw	r2,-64(fp)
   4c7e8:	00000406 	br	4c7fc <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4c7ec:	00c20004 	movi	r3,2048
   4c7f0:	e0bff217 	ldw	r2,-56(fp)
   4c7f4:	1885c83a 	sub	r2,r3,r2
   4c7f8:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   4c7fc:	e0bff017 	ldw	r2,-64(fp)
   4c800:	1000011e 	bne	r2,zero,4c808 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   4c804:	00001d06 	br	4c87c <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   4c808:	e0fffe17 	ldw	r3,-8(fp)
   4c80c:	e0bff017 	ldw	r2,-64(fp)
   4c810:	1880022e 	bgeu	r3,r2,4c81c <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   4c814:	e0bffe17 	ldw	r2,-8(fp)
   4c818:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4c81c:	e0bff217 	ldw	r2,-56(fp)
   4c820:	10801104 	addi	r2,r2,68
   4c824:	e0fffc17 	ldw	r3,-16(fp)
   4c828:	1885883a 	add	r2,r3,r2
   4c82c:	e13fef17 	ldw	r4,-68(fp)
   4c830:	100b883a 	mov	r5,r2
   4c834:	e1bff017 	ldw	r6,-64(fp)
   4c838:	00418500 	call	41850 <memcpy>
      ptr   += n;
   4c83c:	e0ffef17 	ldw	r3,-68(fp)
   4c840:	e0bff017 	ldw	r2,-64(fp)
   4c844:	1885883a 	add	r2,r3,r2
   4c848:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   4c84c:	e0fffe17 	ldw	r3,-8(fp)
   4c850:	e0bff017 	ldw	r2,-64(fp)
   4c854:	1885c83a 	sub	r2,r3,r2
   4c858:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c85c:	e0fff217 	ldw	r3,-56(fp)
   4c860:	e0bff017 	ldw	r2,-64(fp)
   4c864:	1885883a 	add	r2,r3,r2
   4c868:	10c1ffcc 	andi	r3,r2,2047
   4c86c:	e0bffc17 	ldw	r2,-16(fp)
   4c870:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   4c874:	e0bffe17 	ldw	r2,-8(fp)
   4c878:	00bfce16 	blt	zero,r2,4c7b4 <__alt_data_end+0xfffd6c54>

    /* If we read any data then return it */
    if (ptr != buffer)
   4c87c:	e0ffef17 	ldw	r3,-68(fp)
   4c880:	e0bffd17 	ldw	r2,-12(fp)
   4c884:	18800126 	beq	r3,r2,4c88c <altera_avalon_jtag_uart_read+0x12c>
      break;
   4c888:	00003106 	br	4c950 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4c88c:	e0bfff17 	ldw	r2,-4(fp)
   4c890:	1090000c 	andi	r2,r2,16384
   4c894:	10000126 	beq	r2,zero,4c89c <altera_avalon_jtag_uart_read+0x13c>
      break;
   4c898:	00002d06 	br	4c950 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   4c89c:	00800174 	movhi	r2,5
   4c8a0:	108ac744 	addi	r2,r2,11037
   4c8a4:	10800003 	ldbu	r2,0(r2)
   4c8a8:	10803fcc 	andi	r2,r2,255
   4c8ac:	10800058 	cmpnei	r2,r2,1
   4c8b0:	1000161e 	bne	r2,zero,4c90c <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   4c8b4:	e0bffc17 	ldw	r2,-16(fp)
   4c8b8:	10800c17 	ldw	r2,48(r2)
   4c8bc:	e0bff615 	stw	r2,-40(fp)
   4c8c0:	00800144 	movi	r2,5
   4c8c4:	e0bff70d 	sth	r2,-36(fp)
   4c8c8:	00bfe0c4 	movi	r2,-125
   4c8cc:	e0bff785 	stb	r2,-34(fp)
   4c8d0:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   4c8d4:	00800174 	movhi	r2,5
   4c8d8:	108ac744 	addi	r2,r2,11037
   4c8dc:	10800003 	ldbu	r2,0(r2)
   4c8e0:	10803fcc 	andi	r2,r2,255
   4c8e4:	10001326 	beq	r2,zero,4c934 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   4c8e8:	e17ff70b 	ldhu	r5,-36(fp)
   4c8ec:	e1bff783 	ldbu	r6,-34(fp)
   4c8f0:	e0fff80b 	ldhu	r3,-32(fp)
   4c8f4:	e0bffb44 	addi	r2,fp,-19
   4c8f8:	d8800015 	stw	r2,0(sp)
   4c8fc:	e13ff617 	ldw	r4,-40(fp)
   4c900:	180f883a 	mov	r7,r3
   4c904:	0046ca80 	call	46ca8 <OSFlagPend>
   4c908:	00000a06 	br	4c934 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4c90c:	0001883a 	nop
   4c910:	e0bffc17 	ldw	r2,-16(fp)
   4c914:	10c00d17 	ldw	r3,52(r2)
   4c918:	e0bff117 	ldw	r2,-60(fp)
   4c91c:	1880051e 	bne	r3,r2,4c934 <altera_avalon_jtag_uart_read+0x1d4>
   4c920:	e0bffc17 	ldw	r2,-16(fp)
   4c924:	10c00917 	ldw	r3,36(r2)
   4c928:	e0bffc17 	ldw	r2,-16(fp)
   4c92c:	10800117 	ldw	r2,4(r2)
   4c930:	18bff736 	bltu	r3,r2,4c910 <__alt_data_end+0xfffd6db0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4c934:	e0bffc17 	ldw	r2,-16(fp)
   4c938:	10c00d17 	ldw	r3,52(r2)
   4c93c:	e0bff117 	ldw	r2,-60(fp)
   4c940:	1880011e 	bne	r3,r2,4c948 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   4c944:	00000206 	br	4c950 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4c948:	e0bffe17 	ldw	r2,-8(fp)
   4c94c:	00bf9916 	blt	zero,r2,4c7b4 <__alt_data_end+0xfffd6c54>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   4c950:	e0bffc17 	ldw	r2,-16(fp)
   4c954:	10800a17 	ldw	r2,40(r2)
   4c958:	1009883a 	mov	r4,r2
   4c95c:	0049d300 	call	49d30 <OSSemPost>

  if (ptr != buffer)
   4c960:	e0ffef17 	ldw	r3,-68(fp)
   4c964:	e0bffd17 	ldw	r2,-12(fp)
   4c968:	18801826 	beq	r3,r2,4c9cc <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c96c:	0005303a 	rdctl	r2,status
   4c970:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c974:	e0fff917 	ldw	r3,-28(fp)
   4c978:	00bfff84 	movi	r2,-2
   4c97c:	1884703a 	and	r2,r3,r2
   4c980:	1001703a 	wrctl	status,r2
  
  return context;
   4c984:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4c988:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4c98c:	e0bffc17 	ldw	r2,-16(fp)
   4c990:	10800817 	ldw	r2,32(r2)
   4c994:	10c00054 	ori	r3,r2,1
   4c998:	e0bffc17 	ldw	r2,-16(fp)
   4c99c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4c9a0:	e0bffc17 	ldw	r2,-16(fp)
   4c9a4:	10800017 	ldw	r2,0(r2)
   4c9a8:	10800104 	addi	r2,r2,4
   4c9ac:	1007883a 	mov	r3,r2
   4c9b0:	e0bffc17 	ldw	r2,-16(fp)
   4c9b4:	10800817 	ldw	r2,32(r2)
   4c9b8:	18800035 	stwio	r2,0(r3)
   4c9bc:	e0bff317 	ldw	r2,-52(fp)
   4c9c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c9c4:	e0bffa17 	ldw	r2,-24(fp)
   4c9c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4c9cc:	e0ffef17 	ldw	r3,-68(fp)
   4c9d0:	e0bffd17 	ldw	r2,-12(fp)
   4c9d4:	18800426 	beq	r3,r2,4c9e8 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   4c9d8:	e0ffef17 	ldw	r3,-68(fp)
   4c9dc:	e0bffd17 	ldw	r2,-12(fp)
   4c9e0:	1885c83a 	sub	r2,r3,r2
   4c9e4:	00000606 	br	4ca00 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   4c9e8:	e0bfff17 	ldw	r2,-4(fp)
   4c9ec:	1090000c 	andi	r2,r2,16384
   4c9f0:	10000226 	beq	r2,zero,4c9fc <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   4c9f4:	00bffd44 	movi	r2,-11
   4c9f8:	00000106 	br	4ca00 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   4c9fc:	00bffec4 	movi	r2,-5
}
   4ca00:	e037883a 	mov	sp,fp
   4ca04:	dfc00117 	ldw	ra,4(sp)
   4ca08:	df000017 	ldw	fp,0(sp)
   4ca0c:	dec00204 	addi	sp,sp,8
   4ca10:	f800283a 	ret

0004ca14 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4ca14:	deffed04 	addi	sp,sp,-76
   4ca18:	dfc01215 	stw	ra,72(sp)
   4ca1c:	df001115 	stw	fp,68(sp)
   4ca20:	df001104 	addi	fp,sp,68
   4ca24:	e13ffc15 	stw	r4,-16(fp)
   4ca28:	e17ffd15 	stw	r5,-12(fp)
   4ca2c:	e1bffe15 	stw	r6,-8(fp)
   4ca30:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4ca34:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4ca38:	e0bffd17 	ldw	r2,-12(fp)
   4ca3c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   4ca40:	e0bffc17 	ldw	r2,-16(fp)
   4ca44:	10800b17 	ldw	r2,44(r2)
   4ca48:	e0bff515 	stw	r2,-44(fp)
   4ca4c:	e03ff60d 	sth	zero,-40(fp)
   4ca50:	e0fff60b 	ldhu	r3,-40(fp)
   4ca54:	e0bffbc4 	addi	r2,fp,-17
   4ca58:	e13ff517 	ldw	r4,-44(fp)
   4ca5c:	180b883a 	mov	r5,r3
   4ca60:	100d883a 	mov	r6,r2
   4ca64:	004995c0 	call	4995c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4ca68:	00003806 	br	4cb4c <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4ca6c:	e0bffc17 	ldw	r2,-16(fp)
   4ca70:	10800f17 	ldw	r2,60(r2)
   4ca74:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   4ca78:	e0bffc17 	ldw	r2,-16(fp)
   4ca7c:	10801017 	ldw	r2,64(r2)
   4ca80:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   4ca84:	e0fff317 	ldw	r3,-52(fp)
   4ca88:	e0bff017 	ldw	r2,-64(fp)
   4ca8c:	1880062e 	bgeu	r3,r2,4caa8 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   4ca90:	e0fff017 	ldw	r3,-64(fp)
   4ca94:	e0bff317 	ldw	r2,-52(fp)
   4ca98:	1885c83a 	sub	r2,r3,r2
   4ca9c:	10bfffc4 	addi	r2,r2,-1
   4caa0:	e0bff115 	stw	r2,-60(fp)
   4caa4:	00000b06 	br	4cad4 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   4caa8:	e0bff017 	ldw	r2,-64(fp)
   4caac:	10000526 	beq	r2,zero,4cac4 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4cab0:	00c20004 	movi	r3,2048
   4cab4:	e0bff317 	ldw	r2,-52(fp)
   4cab8:	1885c83a 	sub	r2,r3,r2
   4cabc:	e0bff115 	stw	r2,-60(fp)
   4cac0:	00000406 	br	4cad4 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4cac4:	00c1ffc4 	movi	r3,2047
   4cac8:	e0bff317 	ldw	r2,-52(fp)
   4cacc:	1885c83a 	sub	r2,r3,r2
   4cad0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   4cad4:	e0bff117 	ldw	r2,-60(fp)
   4cad8:	1000011e 	bne	r2,zero,4cae0 <altera_avalon_jtag_uart_write+0xcc>
        break;
   4cadc:	00001d06 	br	4cb54 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   4cae0:	e0fffe17 	ldw	r3,-8(fp)
   4cae4:	e0bff117 	ldw	r2,-60(fp)
   4cae8:	1880022e 	bgeu	r3,r2,4caf4 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   4caec:	e0bffe17 	ldw	r2,-8(fp)
   4caf0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4caf4:	e0bff317 	ldw	r2,-52(fp)
   4caf8:	10821104 	addi	r2,r2,2116
   4cafc:	e0fffc17 	ldw	r3,-16(fp)
   4cb00:	1885883a 	add	r2,r3,r2
   4cb04:	1009883a 	mov	r4,r2
   4cb08:	e17ffd17 	ldw	r5,-12(fp)
   4cb0c:	e1bff117 	ldw	r6,-60(fp)
   4cb10:	00418500 	call	41850 <memcpy>
      ptr   += n;
   4cb14:	e0fffd17 	ldw	r3,-12(fp)
   4cb18:	e0bff117 	ldw	r2,-60(fp)
   4cb1c:	1885883a 	add	r2,r3,r2
   4cb20:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4cb24:	e0fffe17 	ldw	r3,-8(fp)
   4cb28:	e0bff117 	ldw	r2,-60(fp)
   4cb2c:	1885c83a 	sub	r2,r3,r2
   4cb30:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4cb34:	e0fff317 	ldw	r3,-52(fp)
   4cb38:	e0bff117 	ldw	r2,-60(fp)
   4cb3c:	1885883a 	add	r2,r3,r2
   4cb40:	10c1ffcc 	andi	r3,r2,2047
   4cb44:	e0bffc17 	ldw	r2,-16(fp)
   4cb48:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4cb4c:	e0bffe17 	ldw	r2,-8(fp)
   4cb50:	00bfc616 	blt	zero,r2,4ca6c <__alt_data_end+0xfffd6f0c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4cb54:	0005303a 	rdctl	r2,status
   4cb58:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4cb5c:	e0fff717 	ldw	r3,-36(fp)
   4cb60:	00bfff84 	movi	r2,-2
   4cb64:	1884703a 	and	r2,r3,r2
   4cb68:	1001703a 	wrctl	status,r2
  
  return context;
   4cb6c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4cb70:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4cb74:	e0bffc17 	ldw	r2,-16(fp)
   4cb78:	10800817 	ldw	r2,32(r2)
   4cb7c:	10c00094 	ori	r3,r2,2
   4cb80:	e0bffc17 	ldw	r2,-16(fp)
   4cb84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4cb88:	e0bffc17 	ldw	r2,-16(fp)
   4cb8c:	10800017 	ldw	r2,0(r2)
   4cb90:	10800104 	addi	r2,r2,4
   4cb94:	1007883a 	mov	r3,r2
   4cb98:	e0bffc17 	ldw	r2,-16(fp)
   4cb9c:	10800817 	ldw	r2,32(r2)
   4cba0:	18800035 	stwio	r2,0(r3)
   4cba4:	e0bff417 	ldw	r2,-48(fp)
   4cba8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4cbac:	e0bff817 	ldw	r2,-32(fp)
   4cbb0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4cbb4:	e0bffe17 	ldw	r2,-8(fp)
   4cbb8:	00802e0e 	bge	zero,r2,4cc74 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   4cbbc:	e0bfff17 	ldw	r2,-4(fp)
   4cbc0:	1090000c 	andi	r2,r2,16384
   4cbc4:	10000126 	beq	r2,zero,4cbcc <altera_avalon_jtag_uart_write+0x1b8>
        break;
   4cbc8:	00002c06 	br	4cc7c <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   4cbcc:	00800174 	movhi	r2,5
   4cbd0:	108ac744 	addi	r2,r2,11037
   4cbd4:	10800003 	ldbu	r2,0(r2)
   4cbd8:	10803fcc 	andi	r2,r2,255
   4cbdc:	10800058 	cmpnei	r2,r2,1
   4cbe0:	1000161e 	bne	r2,zero,4cc3c <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   4cbe4:	e0bffc17 	ldw	r2,-16(fp)
   4cbe8:	10800c17 	ldw	r2,48(r2)
   4cbec:	e0bff915 	stw	r2,-28(fp)
   4cbf0:	00800184 	movi	r2,6
   4cbf4:	e0bffa0d 	sth	r2,-24(fp)
   4cbf8:	00bfe0c4 	movi	r2,-125
   4cbfc:	e0bffa85 	stb	r2,-22(fp)
   4cc00:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   4cc04:	00800174 	movhi	r2,5
   4cc08:	108ac744 	addi	r2,r2,11037
   4cc0c:	10800003 	ldbu	r2,0(r2)
   4cc10:	10803fcc 	andi	r2,r2,255
   4cc14:	10001326 	beq	r2,zero,4cc64 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   4cc18:	e17ffa0b 	ldhu	r5,-24(fp)
   4cc1c:	e1bffa83 	ldbu	r6,-22(fp)
   4cc20:	e0fffb0b 	ldhu	r3,-20(fp)
   4cc24:	e0bffb84 	addi	r2,fp,-18
   4cc28:	d8800015 	stw	r2,0(sp)
   4cc2c:	e13ff917 	ldw	r4,-28(fp)
   4cc30:	180f883a 	mov	r7,r3
   4cc34:	0046ca80 	call	46ca8 <OSFlagPend>
   4cc38:	00000a06 	br	4cc64 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4cc3c:	0001883a 	nop
   4cc40:	e0bffc17 	ldw	r2,-16(fp)
   4cc44:	10c01017 	ldw	r3,64(r2)
   4cc48:	e0bff017 	ldw	r2,-64(fp)
   4cc4c:	1880051e 	bne	r3,r2,4cc64 <altera_avalon_jtag_uart_write+0x250>
   4cc50:	e0bffc17 	ldw	r2,-16(fp)
   4cc54:	10c00917 	ldw	r3,36(r2)
   4cc58:	e0bffc17 	ldw	r2,-16(fp)
   4cc5c:	10800117 	ldw	r2,4(r2)
   4cc60:	18bff736 	bltu	r3,r2,4cc40 <__alt_data_end+0xfffd70e0>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   4cc64:	e0bffc17 	ldw	r2,-16(fp)
   4cc68:	10800917 	ldw	r2,36(r2)
   4cc6c:	10000126 	beq	r2,zero,4cc74 <altera_avalon_jtag_uart_write+0x260>
         break;
   4cc70:	00000206 	br	4cc7c <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   4cc74:	e0bffe17 	ldw	r2,-8(fp)
   4cc78:	00bf7b16 	blt	zero,r2,4ca68 <__alt_data_end+0xfffd6f08>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   4cc7c:	e0bffc17 	ldw	r2,-16(fp)
   4cc80:	10800b17 	ldw	r2,44(r2)
   4cc84:	1009883a 	mov	r4,r2
   4cc88:	0049d300 	call	49d30 <OSSemPost>

  if (ptr != start)
   4cc8c:	e0fffd17 	ldw	r3,-12(fp)
   4cc90:	e0bff217 	ldw	r2,-56(fp)
   4cc94:	18800426 	beq	r3,r2,4cca8 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   4cc98:	e0fffd17 	ldw	r3,-12(fp)
   4cc9c:	e0bff217 	ldw	r2,-56(fp)
   4cca0:	1885c83a 	sub	r2,r3,r2
   4cca4:	00000606 	br	4ccc0 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   4cca8:	e0bfff17 	ldw	r2,-4(fp)
   4ccac:	1090000c 	andi	r2,r2,16384
   4ccb0:	10000226 	beq	r2,zero,4ccbc <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   4ccb4:	00bffd44 	movi	r2,-11
   4ccb8:	00000106 	br	4ccc0 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4ccbc:	00bffec4 	movi	r2,-5
}
   4ccc0:	e037883a 	mov	sp,fp
   4ccc4:	dfc00117 	ldw	ra,4(sp)
   4ccc8:	df000017 	ldw	fp,0(sp)
   4cccc:	dec00204 	addi	sp,sp,8
   4ccd0:	f800283a 	ret

0004ccd4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4ccd4:	defffa04 	addi	sp,sp,-24
   4ccd8:	dfc00515 	stw	ra,20(sp)
   4ccdc:	df000415 	stw	fp,16(sp)
   4cce0:	df000404 	addi	fp,sp,16
   4cce4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4cce8:	0007883a 	mov	r3,zero
   4ccec:	e0bfff17 	ldw	r2,-4(fp)
   4ccf0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4ccf4:	e0bfff17 	ldw	r2,-4(fp)
   4ccf8:	10800104 	addi	r2,r2,4
   4ccfc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4cd00:	0005303a 	rdctl	r2,status
   4cd04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4cd08:	e0fffd17 	ldw	r3,-12(fp)
   4cd0c:	00bfff84 	movi	r2,-2
   4cd10:	1884703a 	and	r2,r3,r2
   4cd14:	1001703a 	wrctl	status,r2
  
  return context;
   4cd18:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4cd1c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4cd20:	004e3cc0 	call	4e3cc <alt_tick>
   4cd24:	e0bffc17 	ldw	r2,-16(fp)
   4cd28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4cd2c:	e0bffe17 	ldw	r2,-8(fp)
   4cd30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4cd34:	e037883a 	mov	sp,fp
   4cd38:	dfc00117 	ldw	ra,4(sp)
   4cd3c:	df000017 	ldw	fp,0(sp)
   4cd40:	dec00204 	addi	sp,sp,8
   4cd44:	f800283a 	ret

0004cd48 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4cd48:	defff804 	addi	sp,sp,-32
   4cd4c:	dfc00715 	stw	ra,28(sp)
   4cd50:	df000615 	stw	fp,24(sp)
   4cd54:	df000604 	addi	fp,sp,24
   4cd58:	e13ffc15 	stw	r4,-16(fp)
   4cd5c:	e17ffd15 	stw	r5,-12(fp)
   4cd60:	e1bffe15 	stw	r6,-8(fp)
   4cd64:	e1ffff15 	stw	r7,-4(fp)
   4cd68:	e0bfff17 	ldw	r2,-4(fp)
   4cd6c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4cd70:	00800174 	movhi	r2,5
   4cd74:	108adc04 	addi	r2,r2,11120
   4cd78:	10800017 	ldw	r2,0(r2)
   4cd7c:	1000041e 	bne	r2,zero,4cd90 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   4cd80:	00800174 	movhi	r2,5
   4cd84:	108adc04 	addi	r2,r2,11120
   4cd88:	e0fffb17 	ldw	r3,-20(fp)
   4cd8c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4cd90:	e0bffc17 	ldw	r2,-16(fp)
   4cd94:	10800104 	addi	r2,r2,4
   4cd98:	00c001c4 	movi	r3,7
   4cd9c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4cda0:	d8000015 	stw	zero,0(sp)
   4cda4:	e13ffd17 	ldw	r4,-12(fp)
   4cda8:	e17ffe17 	ldw	r5,-8(fp)
   4cdac:	01800174 	movhi	r6,5
   4cdb0:	31b33504 	addi	r6,r6,-13100
   4cdb4:	e1fffc17 	ldw	r7,-16(fp)
   4cdb8:	004dc680 	call	4dc68 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4cdbc:	e037883a 	mov	sp,fp
   4cdc0:	dfc00117 	ldw	ra,4(sp)
   4cdc4:	df000017 	ldw	fp,0(sp)
   4cdc8:	dec00204 	addi	sp,sp,8
   4cdcc:	f800283a 	ret

0004cdd0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4cdd0:	defffa04 	addi	sp,sp,-24
   4cdd4:	dfc00515 	stw	ra,20(sp)
   4cdd8:	df000415 	stw	fp,16(sp)
   4cddc:	df000404 	addi	fp,sp,16
   4cde0:	e13ffd15 	stw	r4,-12(fp)
   4cde4:	e17ffe15 	stw	r5,-8(fp)
   4cde8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4cdec:	e0bffd17 	ldw	r2,-12(fp)
   4cdf0:	10800017 	ldw	r2,0(r2)
   4cdf4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   4cdf8:	e0bffc17 	ldw	r2,-16(fp)
   4cdfc:	10c00a04 	addi	r3,r2,40
   4ce00:	e0bffd17 	ldw	r2,-12(fp)
   4ce04:	10800217 	ldw	r2,8(r2)
   4ce08:	1809883a 	mov	r4,r3
   4ce0c:	e17ffe17 	ldw	r5,-8(fp)
   4ce10:	e1bfff17 	ldw	r6,-4(fp)
   4ce14:	100f883a 	mov	r7,r2
   4ce18:	004d4540 	call	4d454 <altera_avalon_uart_read>
      fd->fd_flags);
}
   4ce1c:	e037883a 	mov	sp,fp
   4ce20:	dfc00117 	ldw	ra,4(sp)
   4ce24:	df000017 	ldw	fp,0(sp)
   4ce28:	dec00204 	addi	sp,sp,8
   4ce2c:	f800283a 	ret

0004ce30 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4ce30:	defffa04 	addi	sp,sp,-24
   4ce34:	dfc00515 	stw	ra,20(sp)
   4ce38:	df000415 	stw	fp,16(sp)
   4ce3c:	df000404 	addi	fp,sp,16
   4ce40:	e13ffd15 	stw	r4,-12(fp)
   4ce44:	e17ffe15 	stw	r5,-8(fp)
   4ce48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4ce4c:	e0bffd17 	ldw	r2,-12(fp)
   4ce50:	10800017 	ldw	r2,0(r2)
   4ce54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   4ce58:	e0bffc17 	ldw	r2,-16(fp)
   4ce5c:	10c00a04 	addi	r3,r2,40
   4ce60:	e0bffd17 	ldw	r2,-12(fp)
   4ce64:	10800217 	ldw	r2,8(r2)
   4ce68:	1809883a 	mov	r4,r3
   4ce6c:	e17ffe17 	ldw	r5,-8(fp)
   4ce70:	e1bfff17 	ldw	r6,-4(fp)
   4ce74:	100f883a 	mov	r7,r2
   4ce78:	004d70c0 	call	4d70c <altera_avalon_uart_write>
      fd->fd_flags);
}
   4ce7c:	e037883a 	mov	sp,fp
   4ce80:	dfc00117 	ldw	ra,4(sp)
   4ce84:	df000017 	ldw	fp,0(sp)
   4ce88:	dec00204 	addi	sp,sp,8
   4ce8c:	f800283a 	ret

0004ce90 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   4ce90:	defffc04 	addi	sp,sp,-16
   4ce94:	dfc00315 	stw	ra,12(sp)
   4ce98:	df000215 	stw	fp,8(sp)
   4ce9c:	df000204 	addi	fp,sp,8
   4cea0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4cea4:	e0bfff17 	ldw	r2,-4(fp)
   4cea8:	10800017 	ldw	r2,0(r2)
   4ceac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   4ceb0:	e0bffe17 	ldw	r2,-8(fp)
   4ceb4:	10c00a04 	addi	r3,r2,40
   4ceb8:	e0bfff17 	ldw	r2,-4(fp)
   4cebc:	10800217 	ldw	r2,8(r2)
   4cec0:	1809883a 	mov	r4,r3
   4cec4:	100b883a 	mov	r5,r2
   4cec8:	004d3b00 	call	4d3b0 <altera_avalon_uart_close>
}
   4cecc:	e037883a 	mov	sp,fp
   4ced0:	dfc00117 	ldw	ra,4(sp)
   4ced4:	df000017 	ldw	fp,0(sp)
   4ced8:	dec00204 	addi	sp,sp,8
   4cedc:	f800283a 	ret

0004cee0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   4cee0:	defff204 	addi	sp,sp,-56
   4cee4:	dfc00d15 	stw	ra,52(sp)
   4cee8:	df000c15 	stw	fp,48(sp)
   4ceec:	df000c04 	addi	fp,sp,48
   4cef0:	e13ffd15 	stw	r4,-12(fp)
   4cef4:	e17ffe15 	stw	r5,-8(fp)
   4cef8:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   4cefc:	e0bffd17 	ldw	r2,-12(fp)
   4cf00:	10800017 	ldw	r2,0(r2)
   4cf04:	e0bff515 	stw	r2,-44(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   4cf08:	e0bffd17 	ldw	r2,-12(fp)
   4cf0c:	10800704 	addi	r2,r2,28
   4cf10:	e0bff715 	stw	r2,-36(fp)
   4cf14:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   4cf18:	e0fff80b 	ldhu	r3,-32(fp)
   4cf1c:	e0bffc84 	addi	r2,fp,-14
   4cf20:	1809883a 	mov	r4,r3
   4cf24:	100b883a 	mov	r5,r2
   4cf28:	00466900 	call	46690 <OSFlagCreate>
   4cf2c:	1007883a 	mov	r3,r2
   4cf30:	e0bff717 	ldw	r2,-36(fp)
   4cf34:	10c00015 	stw	r3,0(r2)
  return err;
   4cf38:	e0bffc83 	ldbu	r2,-14(fp)
   4cf3c:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   4cf40:	1000241e 	bne	r2,zero,4cfd4 <altera_avalon_uart_init+0xf4>
   4cf44:	e0bffd17 	ldw	r2,-12(fp)
   4cf48:	10800804 	addi	r2,r2,32
   4cf4c:	e0bff915 	stw	r2,-28(fp)
   4cf50:	00800044 	movi	r2,1
   4cf54:	e0bffa0d 	sth	r2,-24(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   4cf58:	e0bffa0b 	ldhu	r2,-24(fp)
   4cf5c:	1009883a 	mov	r4,r2
   4cf60:	00495f40 	call	495f4 <OSSemCreate>
   4cf64:	1007883a 	mov	r3,r2
   4cf68:	e0bff917 	ldw	r2,-28(fp)
   4cf6c:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
   4cf70:	e0bff917 	ldw	r2,-28(fp)
   4cf74:	10800017 	ldw	r2,0(r2)
   4cf78:	10000226 	beq	r2,zero,4cf84 <altera_avalon_uart_init+0xa4>
   4cf7c:	0005883a 	mov	r2,zero
   4cf80:	00000106 	br	4cf88 <altera_avalon_uart_init+0xa8>
   4cf84:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   4cf88:	1000121e 	bne	r2,zero,4cfd4 <altera_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
   4cf8c:	e0bffd17 	ldw	r2,-12(fp)
   4cf90:	10800904 	addi	r2,r2,36
   4cf94:	e0bffb15 	stw	r2,-20(fp)
   4cf98:	00800044 	movi	r2,1
   4cf9c:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   4cfa0:	e0bffc0b 	ldhu	r2,-16(fp)
   4cfa4:	1009883a 	mov	r4,r2
   4cfa8:	00495f40 	call	495f4 <OSSemCreate>
   4cfac:	1007883a 	mov	r3,r2
   4cfb0:	e0bffb17 	ldw	r2,-20(fp)
   4cfb4:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
   4cfb8:	e0bffb17 	ldw	r2,-20(fp)
   4cfbc:	10800017 	ldw	r2,0(r2)
   4cfc0:	10000226 	beq	r2,zero,4cfcc <altera_avalon_uart_init+0xec>
   4cfc4:	0005883a 	mov	r2,zero
   4cfc8:	00000106 	br	4cfd0 <altera_avalon_uart_init+0xf0>
   4cfcc:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   4cfd0:	10000226 	beq	r2,zero,4cfdc <altera_avalon_uart_init+0xfc>
   4cfd4:	00800044 	movi	r2,1
   4cfd8:	00000106 	br	4cfe0 <altera_avalon_uart_init+0x100>
   4cfdc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   4cfe0:	e0bff615 	stw	r2,-40(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   4cfe4:	e0bff617 	ldw	r2,-40(fp)
   4cfe8:	10000f1e 	bne	r2,zero,4d028 <altera_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   4cfec:	e0bffd17 	ldw	r2,-12(fp)
   4cff0:	00c32004 	movi	r3,3200
   4cff4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   4cff8:	e0bff517 	ldw	r2,-44(fp)
   4cffc:	10800304 	addi	r2,r2,12
   4d000:	e0fffd17 	ldw	r3,-12(fp)
   4d004:	18c00117 	ldw	r3,4(r3)
   4d008:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   4d00c:	d8000015 	stw	zero,0(sp)
   4d010:	e13ffe17 	ldw	r4,-8(fp)
   4d014:	e17fff17 	ldw	r5,-4(fp)
   4d018:	01800174 	movhi	r6,5
   4d01c:	31b40f04 	addi	r6,r6,-12228
   4d020:	e1fffd17 	ldw	r7,-12(fp)
   4d024:	004dc680 	call	4dc68 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   4d028:	e037883a 	mov	sp,fp
   4d02c:	dfc00117 	ldw	ra,4(sp)
   4d030:	df000017 	ldw	fp,0(sp)
   4d034:	dec00204 	addi	sp,sp,8
   4d038:	f800283a 	ret

0004d03c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   4d03c:	defffa04 	addi	sp,sp,-24
   4d040:	dfc00515 	stw	ra,20(sp)
   4d044:	df000415 	stw	fp,16(sp)
   4d048:	df000404 	addi	fp,sp,16
   4d04c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   4d050:	e0bfff17 	ldw	r2,-4(fp)
   4d054:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   4d058:	e0bffc17 	ldw	r2,-16(fp)
   4d05c:	10800017 	ldw	r2,0(r2)
   4d060:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   4d064:	e0bffd17 	ldw	r2,-12(fp)
   4d068:	10800204 	addi	r2,r2,8
   4d06c:	10800037 	ldwio	r2,0(r2)
   4d070:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   4d074:	e0bffd17 	ldw	r2,-12(fp)
   4d078:	10800204 	addi	r2,r2,8
   4d07c:	0007883a 	mov	r3,zero
   4d080:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   4d084:	e0bffd17 	ldw	r2,-12(fp)
   4d088:	10800204 	addi	r2,r2,8
   4d08c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   4d090:	e0bffe17 	ldw	r2,-8(fp)
   4d094:	1080200c 	andi	r2,r2,128
   4d098:	10000326 	beq	r2,zero,4d0a8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   4d09c:	e13ffc17 	ldw	r4,-16(fp)
   4d0a0:	e17ffe17 	ldw	r5,-8(fp)
   4d0a4:	004d0d40 	call	4d0d4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   4d0a8:	e0bffe17 	ldw	r2,-8(fp)
   4d0ac:	1081100c 	andi	r2,r2,1088
   4d0b0:	10000326 	beq	r2,zero,4d0c0 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   4d0b4:	e13ffc17 	ldw	r4,-16(fp)
   4d0b8:	e17ffe17 	ldw	r5,-8(fp)
   4d0bc:	004d20c0 	call	4d20c <altera_avalon_uart_txirq>
  }
  

}
   4d0c0:	e037883a 	mov	sp,fp
   4d0c4:	dfc00117 	ldw	ra,4(sp)
   4d0c8:	df000017 	ldw	fp,0(sp)
   4d0cc:	dec00204 	addi	sp,sp,8
   4d0d0:	f800283a 	ret

0004d0d4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   4d0d4:	defff904 	addi	sp,sp,-28
   4d0d8:	dfc00615 	stw	ra,24(sp)
   4d0dc:	df000515 	stw	fp,20(sp)
   4d0e0:	df000504 	addi	fp,sp,20
   4d0e4:	e13ffe15 	stw	r4,-8(fp)
   4d0e8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   4d0ec:	e0bfff17 	ldw	r2,-4(fp)
   4d0f0:	108000cc 	andi	r2,r2,3
   4d0f4:	10000126 	beq	r2,zero,4d0fc <altera_avalon_uart_rxirq+0x28>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   4d0f8:	00003f06 	br	4d1f8 <altera_avalon_uart_rxirq+0x124>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   4d0fc:	e0bffe17 	ldw	r2,-8(fp)
   4d100:	10c00317 	ldw	r3,12(r2)
   4d104:	e0bffe17 	ldw	r2,-8(fp)
   4d108:	10800217 	ldw	r2,8(r2)
   4d10c:	1880131e 	bne	r3,r2,4d15c <altera_avalon_uart_rxirq+0x88>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
   4d110:	e0bffe17 	ldw	r2,-8(fp)
   4d114:	10800717 	ldw	r2,28(r2)
   4d118:	e0bffc15 	stw	r2,-16(fp)
   4d11c:	00800044 	movi	r2,1
   4d120:	e0bffd0d 	sth	r2,-12(fp)
   4d124:	00800044 	movi	r2,1
   4d128:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   4d12c:	00800174 	movhi	r2,5
   4d130:	108ac744 	addi	r2,r2,11037
   4d134:	10800003 	ldbu	r2,0(r2)
   4d138:	10803fcc 	andi	r2,r2,255
   4d13c:	10000726 	beq	r2,zero,4d15c <altera_avalon_uart_rxirq+0x88>
  {
    OSFlagPost (group, flags, opt, &err);
   4d140:	e17ffd0b 	ldhu	r5,-12(fp)
   4d144:	e0fffd83 	ldbu	r3,-10(fp)
   4d148:	e0bffdc4 	addi	r2,fp,-9
   4d14c:	e13ffc17 	ldw	r4,-16(fp)
   4d150:	180d883a 	mov	r6,r3
   4d154:	100f883a 	mov	r7,r2
   4d158:	00473000 	call	47300 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4d15c:	e0bffe17 	ldw	r2,-8(fp)
   4d160:	10800317 	ldw	r2,12(r2)
   4d164:	10800044 	addi	r2,r2,1
   4d168:	10800fcc 	andi	r2,r2,63
   4d16c:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   4d170:	e0bffe17 	ldw	r2,-8(fp)
   4d174:	10800317 	ldw	r2,12(r2)
   4d178:	e0fffe17 	ldw	r3,-8(fp)
   4d17c:	18c00017 	ldw	r3,0(r3)
   4d180:	18c00037 	ldwio	r3,0(r3)
   4d184:	1809883a 	mov	r4,r3
   4d188:	e0fffe17 	ldw	r3,-8(fp)
   4d18c:	1885883a 	add	r2,r3,r2
   4d190:	10800a04 	addi	r2,r2,40
   4d194:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   4d198:	e0bffe17 	ldw	r2,-8(fp)
   4d19c:	e0fffb17 	ldw	r3,-20(fp)
   4d1a0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4d1a4:	e0bffe17 	ldw	r2,-8(fp)
   4d1a8:	10800317 	ldw	r2,12(r2)
   4d1ac:	10800044 	addi	r2,r2,1
   4d1b0:	10800fcc 	andi	r2,r2,63
   4d1b4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   4d1b8:	e0bffe17 	ldw	r2,-8(fp)
   4d1bc:	10c00217 	ldw	r3,8(r2)
   4d1c0:	e0bffb17 	ldw	r2,-20(fp)
   4d1c4:	18800c1e 	bne	r3,r2,4d1f8 <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4d1c8:	e0bffe17 	ldw	r2,-8(fp)
   4d1cc:	10c00117 	ldw	r3,4(r2)
   4d1d0:	00bfdfc4 	movi	r2,-129
   4d1d4:	1886703a 	and	r3,r3,r2
   4d1d8:	e0bffe17 	ldw	r2,-8(fp)
   4d1dc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   4d1e0:	e0bffe17 	ldw	r2,-8(fp)
   4d1e4:	10800017 	ldw	r2,0(r2)
   4d1e8:	10800304 	addi	r2,r2,12
   4d1ec:	e0fffe17 	ldw	r3,-8(fp)
   4d1f0:	18c00117 	ldw	r3,4(r3)
   4d1f4:	10c00035 	stwio	r3,0(r2)
  }   
}
   4d1f8:	e037883a 	mov	sp,fp
   4d1fc:	dfc00117 	ldw	ra,4(sp)
   4d200:	df000017 	ldw	fp,0(sp)
   4d204:	dec00204 	addi	sp,sp,8
   4d208:	f800283a 	ret

0004d20c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   4d20c:	defffa04 	addi	sp,sp,-24
   4d210:	dfc00515 	stw	ra,20(sp)
   4d214:	df000415 	stw	fp,16(sp)
   4d218:	df000404 	addi	fp,sp,16
   4d21c:	e13ffe15 	stw	r4,-8(fp)
   4d220:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   4d224:	e0bffe17 	ldw	r2,-8(fp)
   4d228:	10c00417 	ldw	r3,16(r2)
   4d22c:	e0bffe17 	ldw	r2,-8(fp)
   4d230:	10800517 	ldw	r2,20(r2)
   4d234:	18804826 	beq	r3,r2,4d358 <altera_avalon_uart_txirq+0x14c>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   4d238:	e0bffe17 	ldw	r2,-8(fp)
   4d23c:	10800617 	ldw	r2,24(r2)
   4d240:	1080008c 	andi	r2,r2,2
   4d244:	10000326 	beq	r2,zero,4d254 <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   4d248:	e0bfff17 	ldw	r2,-4(fp)
   4d24c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   4d250:	10003326 	beq	r2,zero,4d320 <altera_avalon_uart_txirq+0x114>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   4d254:	e0bffe17 	ldw	r2,-8(fp)
   4d258:	10c00417 	ldw	r3,16(r2)
   4d25c:	e0bffe17 	ldw	r2,-8(fp)
   4d260:	10800517 	ldw	r2,20(r2)
   4d264:	10800044 	addi	r2,r2,1
   4d268:	10800fcc 	andi	r2,r2,63
   4d26c:	1880131e 	bne	r3,r2,4d2bc <altera_avalon_uart_txirq+0xb0>
      { 
        ALT_FLAG_POST (sp->events, 
   4d270:	e0bffe17 	ldw	r2,-8(fp)
   4d274:	10800717 	ldw	r2,28(r2)
   4d278:	e0bffc15 	stw	r2,-16(fp)
   4d27c:	00800084 	movi	r2,2
   4d280:	e0bffd0d 	sth	r2,-12(fp)
   4d284:	00800044 	movi	r2,1
   4d288:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   4d28c:	00800174 	movhi	r2,5
   4d290:	108ac744 	addi	r2,r2,11037
   4d294:	10800003 	ldbu	r2,0(r2)
   4d298:	10803fcc 	andi	r2,r2,255
   4d29c:	10000726 	beq	r2,zero,4d2bc <altera_avalon_uart_txirq+0xb0>
  {
    OSFlagPost (group, flags, opt, &err);
   4d2a0:	e17ffd0b 	ldhu	r5,-12(fp)
   4d2a4:	e0fffd83 	ldbu	r3,-10(fp)
   4d2a8:	e0bffdc4 	addi	r2,fp,-9
   4d2ac:	e13ffc17 	ldw	r4,-16(fp)
   4d2b0:	180d883a 	mov	r6,r3
   4d2b4:	100f883a 	mov	r7,r2
   4d2b8:	00473000 	call	47300 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   4d2bc:	e0bffe17 	ldw	r2,-8(fp)
   4d2c0:	10800017 	ldw	r2,0(r2)
   4d2c4:	10800104 	addi	r2,r2,4
   4d2c8:	e0fffe17 	ldw	r3,-8(fp)
   4d2cc:	18c00417 	ldw	r3,16(r3)
   4d2d0:	e13ffe17 	ldw	r4,-8(fp)
   4d2d4:	20c7883a 	add	r3,r4,r3
   4d2d8:	18c01a04 	addi	r3,r3,104
   4d2dc:	18c00003 	ldbu	r3,0(r3)
   4d2e0:	18c03fcc 	andi	r3,r3,255
   4d2e4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   4d2e8:	e0bffe17 	ldw	r2,-8(fp)
   4d2ec:	10800417 	ldw	r2,16(r2)
   4d2f0:	10800044 	addi	r2,r2,1
   4d2f4:	e0fffe17 	ldw	r3,-8(fp)
   4d2f8:	18800415 	stw	r2,16(r3)
   4d2fc:	10c00fcc 	andi	r3,r2,63
   4d300:	e0bffe17 	ldw	r2,-8(fp)
   4d304:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   4d308:	e0bffe17 	ldw	r2,-8(fp)
   4d30c:	10800117 	ldw	r2,4(r2)
   4d310:	10c01014 	ori	r3,r2,64
   4d314:	e0bffe17 	ldw	r2,-8(fp)
   4d318:	10c00115 	stw	r3,4(r2)
   4d31c:	00000e06 	br	4d358 <altera_avalon_uart_txirq+0x14c>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   4d320:	e0bffe17 	ldw	r2,-8(fp)
   4d324:	10800017 	ldw	r2,0(r2)
   4d328:	10800204 	addi	r2,r2,8
   4d32c:	10800037 	ldwio	r2,0(r2)
   4d330:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   4d334:	e0bfff17 	ldw	r2,-4(fp)
   4d338:	1082000c 	andi	r2,r2,2048
   4d33c:	1000061e 	bne	r2,zero,4d358 <altera_avalon_uart_txirq+0x14c>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   4d340:	e0bffe17 	ldw	r2,-8(fp)
   4d344:	10c00117 	ldw	r3,4(r2)
   4d348:	00bfefc4 	movi	r2,-65
   4d34c:	1886703a 	and	r3,r3,r2
   4d350:	e0bffe17 	ldw	r2,-8(fp)
   4d354:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   4d358:	e0bffe17 	ldw	r2,-8(fp)
   4d35c:	10c00417 	ldw	r3,16(r2)
   4d360:	e0bffe17 	ldw	r2,-8(fp)
   4d364:	10800517 	ldw	r2,20(r2)
   4d368:	1880061e 	bne	r3,r2,4d384 <altera_avalon_uart_txirq+0x178>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4d36c:	e0bffe17 	ldw	r2,-8(fp)
   4d370:	10c00117 	ldw	r3,4(r2)
   4d374:	00beefc4 	movi	r2,-1089
   4d378:	1886703a 	and	r3,r3,r2
   4d37c:	e0bffe17 	ldw	r2,-8(fp)
   4d380:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4d384:	e0bffe17 	ldw	r2,-8(fp)
   4d388:	10800017 	ldw	r2,0(r2)
   4d38c:	10800304 	addi	r2,r2,12
   4d390:	e0fffe17 	ldw	r3,-8(fp)
   4d394:	18c00117 	ldw	r3,4(r3)
   4d398:	10c00035 	stwio	r3,0(r2)
}
   4d39c:	e037883a 	mov	sp,fp
   4d3a0:	dfc00117 	ldw	ra,4(sp)
   4d3a4:	df000017 	ldw	fp,0(sp)
   4d3a8:	dec00204 	addi	sp,sp,8
   4d3ac:	f800283a 	ret

0004d3b0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   4d3b0:	defffd04 	addi	sp,sp,-12
   4d3b4:	df000215 	stw	fp,8(sp)
   4d3b8:	df000204 	addi	fp,sp,8
   4d3bc:	e13ffe15 	stw	r4,-8(fp)
   4d3c0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   4d3c4:	00000506 	br	4d3dc <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4d3c8:	e0bfff17 	ldw	r2,-4(fp)
   4d3cc:	1090000c 	andi	r2,r2,16384
   4d3d0:	10000226 	beq	r2,zero,4d3dc <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4d3d4:	00bffd44 	movi	r2,-11
   4d3d8:	00000606 	br	4d3f4 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   4d3dc:	e0bffe17 	ldw	r2,-8(fp)
   4d3e0:	10c00417 	ldw	r3,16(r2)
   4d3e4:	e0bffe17 	ldw	r2,-8(fp)
   4d3e8:	10800517 	ldw	r2,20(r2)
   4d3ec:	18bff61e 	bne	r3,r2,4d3c8 <__alt_data_end+0xfffd7868>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4d3f0:	0005883a 	mov	r2,zero
}
   4d3f4:	e037883a 	mov	sp,fp
   4d3f8:	df000017 	ldw	fp,0(sp)
   4d3fc:	dec00104 	addi	sp,sp,4
   4d400:	f800283a 	ret

0004d404 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d404:	defffe04 	addi	sp,sp,-8
   4d408:	dfc00115 	stw	ra,4(sp)
   4d40c:	df000015 	stw	fp,0(sp)
   4d410:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d414:	00800174 	movhi	r2,5
   4d418:	1083a604 	addi	r2,r2,3736
   4d41c:	10800017 	ldw	r2,0(r2)
   4d420:	10000526 	beq	r2,zero,4d438 <alt_get_errno+0x34>
   4d424:	00800174 	movhi	r2,5
   4d428:	1083a604 	addi	r2,r2,3736
   4d42c:	10800017 	ldw	r2,0(r2)
   4d430:	103ee83a 	callr	r2
   4d434:	00000206 	br	4d440 <alt_get_errno+0x3c>
   4d438:	00800174 	movhi	r2,5
   4d43c:	108abe04 	addi	r2,r2,11000
}
   4d440:	e037883a 	mov	sp,fp
   4d444:	dfc00117 	ldw	ra,4(sp)
   4d448:	df000017 	ldw	fp,0(sp)
   4d44c:	dec00204 	addi	sp,sp,8
   4d450:	f800283a 	ret

0004d454 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   4d454:	deffeb04 	addi	sp,sp,-84
   4d458:	dfc01415 	stw	ra,80(sp)
   4d45c:	df001315 	stw	fp,76(sp)
   4d460:	df001304 	addi	fp,sp,76
   4d464:	e13ffc15 	stw	r4,-16(fp)
   4d468:	e17ffd15 	stw	r5,-12(fp)
   4d46c:	e1bffe15 	stw	r6,-8(fp)
   4d470:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   4d474:	e03fee05 	stb	zero,-72(fp)
  int             count = 0;
   4d478:	e03fef15 	stw	zero,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   4d47c:	e0bfff17 	ldw	r2,-4(fp)
   4d480:	1090000c 	andi	r2,r2,16384
   4d484:	1005003a 	cmpeq	r2,r2,zero
   4d488:	10803fcc 	andi	r2,r2,255
   4d48c:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
   4d490:	e0bffc17 	ldw	r2,-16(fp)
   4d494:	10800817 	ldw	r2,32(r2)
   4d498:	e0bff215 	stw	r2,-56(fp)
   4d49c:	e03ff30d 	sth	zero,-52(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   4d4a0:	e0fff30b 	ldhu	r3,-52(fp)
   4d4a4:	e0bffb44 	addi	r2,fp,-19
   4d4a8:	e13ff217 	ldw	r4,-56(fp)
   4d4ac:	180b883a 	mov	r5,r3
   4d4b0:	100d883a 	mov	r6,r2
   4d4b4:	004995c0 	call	4995c <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   4d4b8:	00001306 	br	4d508 <altera_avalon_uart_read+0xb4>
    {
      count++;
   4d4bc:	e0bfef17 	ldw	r2,-68(fp)
   4d4c0:	10800044 	addi	r2,r2,1
   4d4c4:	e0bfef15 	stw	r2,-68(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   4d4c8:	e0bffd17 	ldw	r2,-12(fp)
   4d4cc:	10c00044 	addi	r3,r2,1
   4d4d0:	e0fffd15 	stw	r3,-12(fp)
   4d4d4:	e0fffc17 	ldw	r3,-16(fp)
   4d4d8:	18c00217 	ldw	r3,8(r3)
   4d4dc:	e13ffc17 	ldw	r4,-16(fp)
   4d4e0:	20c7883a 	add	r3,r4,r3
   4d4e4:	18c00a04 	addi	r3,r3,40
   4d4e8:	18c00003 	ldbu	r3,0(r3)
   4d4ec:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   4d4f0:	e0bffc17 	ldw	r2,-16(fp)
   4d4f4:	10800217 	ldw	r2,8(r2)
   4d4f8:	10800044 	addi	r2,r2,1
   4d4fc:	10c00fcc 	andi	r3,r2,63
   4d500:	e0bffc17 	ldw	r2,-16(fp)
   4d504:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   4d508:	e0ffef17 	ldw	r3,-68(fp)
   4d50c:	e0bffe17 	ldw	r2,-8(fp)
   4d510:	1880050e 	bge	r3,r2,4d528 <altera_avalon_uart_read+0xd4>
   4d514:	e0bffc17 	ldw	r2,-16(fp)
   4d518:	10c00217 	ldw	r3,8(r2)
   4d51c:	e0bffc17 	ldw	r2,-16(fp)
   4d520:	10800317 	ldw	r2,12(r2)
   4d524:	18bfe51e 	bne	r3,r2,4d4bc <__alt_data_end+0xfffd795c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   4d528:	e0bfef17 	ldw	r2,-68(fp)
   4d52c:	10003a1e 	bne	r2,zero,4d618 <altera_avalon_uart_read+0x1c4>
   4d530:	e0bffc17 	ldw	r2,-16(fp)
   4d534:	10c00217 	ldw	r3,8(r2)
   4d538:	e0bffc17 	ldw	r2,-16(fp)
   4d53c:	10800317 	ldw	r2,12(r2)
   4d540:	1880351e 	bne	r3,r2,4d618 <altera_avalon_uart_read+0x1c4>
    {
      if (!block)
   4d544:	e0bff017 	ldw	r2,-64(fp)
   4d548:	1000071e 	bne	r2,zero,4d568 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   4d54c:	004d4040 	call	4d404 <alt_get_errno>
   4d550:	1007883a 	mov	r3,r2
   4d554:	008002c4 	movi	r2,11
   4d558:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   4d55c:	00800044 	movi	r2,1
   4d560:	e0bfee05 	stb	r2,-72(fp)
        break;
   4d564:	00003006 	br	4d628 <altera_avalon_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d568:	0005303a 	rdctl	r2,status
   4d56c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d570:	e0fff417 	ldw	r3,-48(fp)
   4d574:	00bfff84 	movi	r2,-2
   4d578:	1884703a 	and	r2,r3,r2
   4d57c:	1001703a 	wrctl	status,r2
  
  return context;
   4d580:	e0bff417 	ldw	r2,-48(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   4d584:	e0bff115 	stw	r2,-60(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4d588:	e0bffc17 	ldw	r2,-16(fp)
   4d58c:	10800117 	ldw	r2,4(r2)
   4d590:	10c02014 	ori	r3,r2,128
   4d594:	e0bffc17 	ldw	r2,-16(fp)
   4d598:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4d59c:	e0bffc17 	ldw	r2,-16(fp)
   4d5a0:	10800017 	ldw	r2,0(r2)
   4d5a4:	10800304 	addi	r2,r2,12
   4d5a8:	e0fffc17 	ldw	r3,-16(fp)
   4d5ac:	18c00117 	ldw	r3,4(r3)
   4d5b0:	10c00035 	stwio	r3,0(r2)
   4d5b4:	e0bff117 	ldw	r2,-60(fp)
   4d5b8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d5bc:	e0bff517 	ldw	r2,-44(fp)
   4d5c0:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
   4d5c4:	e0bffc17 	ldw	r2,-16(fp)
   4d5c8:	10800717 	ldw	r2,28(r2)
   4d5cc:	e0bff615 	stw	r2,-40(fp)
   4d5d0:	00800044 	movi	r2,1
   4d5d4:	e0bff70d 	sth	r2,-36(fp)
   4d5d8:	00bfe0c4 	movi	r2,-125
   4d5dc:	e0bff785 	stb	r2,-34(fp)
   4d5e0:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   4d5e4:	00800174 	movhi	r2,5
   4d5e8:	108ac744 	addi	r2,r2,11037
   4d5ec:	10800003 	ldbu	r2,0(r2)
   4d5f0:	10803fcc 	andi	r2,r2,255
   4d5f4:	10000826 	beq	r2,zero,4d618 <altera_avalon_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   4d5f8:	e17ff70b 	ldhu	r5,-36(fp)
   4d5fc:	e1bff783 	ldbu	r6,-34(fp)
   4d600:	e0fff80b 	ldhu	r3,-32(fp)
   4d604:	e0bffb04 	addi	r2,fp,-20
   4d608:	d8800015 	stw	r2,0(sp)
   4d60c:	e13ff617 	ldw	r4,-40(fp)
   4d610:	180f883a 	mov	r7,r3
   4d614:	0046ca80 	call	46ca8 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   4d618:	e0bfef17 	ldw	r2,-68(fp)
   4d61c:	1000021e 	bne	r2,zero,4d628 <altera_avalon_uart_read+0x1d4>
   4d620:	e0bffe17 	ldw	r2,-8(fp)
   4d624:	103fa41e 	bne	r2,zero,4d4b8 <__alt_data_end+0xfffd7958>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   4d628:	e0bffc17 	ldw	r2,-16(fp)
   4d62c:	10800817 	ldw	r2,32(r2)
   4d630:	1009883a 	mov	r4,r2
   4d634:	0049d300 	call	49d30 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d638:	0005303a 	rdctl	r2,status
   4d63c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d640:	e0fff917 	ldw	r3,-28(fp)
   4d644:	00bfff84 	movi	r2,-2
   4d648:	1884703a 	and	r2,r3,r2
   4d64c:	1001703a 	wrctl	status,r2
  
  return context;
   4d650:	e0bff917 	ldw	r2,-28(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   4d654:	e0bff115 	stw	r2,-60(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4d658:	e0bffc17 	ldw	r2,-16(fp)
   4d65c:	10800117 	ldw	r2,4(r2)
   4d660:	10c02014 	ori	r3,r2,128
   4d664:	e0bffc17 	ldw	r2,-16(fp)
   4d668:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4d66c:	e0bffc17 	ldw	r2,-16(fp)
   4d670:	10800017 	ldw	r2,0(r2)
   4d674:	10800304 	addi	r2,r2,12
   4d678:	e0fffc17 	ldw	r3,-16(fp)
   4d67c:	18c00117 	ldw	r3,4(r3)
   4d680:	10c00035 	stwio	r3,0(r2)
   4d684:	e0bff117 	ldw	r2,-60(fp)
   4d688:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d68c:	e0bffa17 	ldw	r2,-24(fp)
   4d690:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   4d694:	e0bfee03 	ldbu	r2,-72(fp)
   4d698:	10000226 	beq	r2,zero,4d6a4 <altera_avalon_uart_read+0x250>
    return -EWOULDBLOCK;
   4d69c:	00bffd44 	movi	r2,-11
   4d6a0:	00000106 	br	4d6a8 <altera_avalon_uart_read+0x254>
  }
  else {
    return count;
   4d6a4:	e0bfef17 	ldw	r2,-68(fp)
  }
}
   4d6a8:	e037883a 	mov	sp,fp
   4d6ac:	dfc00117 	ldw	ra,4(sp)
   4d6b0:	df000017 	ldw	fp,0(sp)
   4d6b4:	dec00204 	addi	sp,sp,8
   4d6b8:	f800283a 	ret

0004d6bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d6bc:	defffe04 	addi	sp,sp,-8
   4d6c0:	dfc00115 	stw	ra,4(sp)
   4d6c4:	df000015 	stw	fp,0(sp)
   4d6c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d6cc:	00800174 	movhi	r2,5
   4d6d0:	1083a604 	addi	r2,r2,3736
   4d6d4:	10800017 	ldw	r2,0(r2)
   4d6d8:	10000526 	beq	r2,zero,4d6f0 <alt_get_errno+0x34>
   4d6dc:	00800174 	movhi	r2,5
   4d6e0:	1083a604 	addi	r2,r2,3736
   4d6e4:	10800017 	ldw	r2,0(r2)
   4d6e8:	103ee83a 	callr	r2
   4d6ec:	00000206 	br	4d6f8 <alt_get_errno+0x3c>
   4d6f0:	00800174 	movhi	r2,5
   4d6f4:	108abe04 	addi	r2,r2,11000
}
   4d6f8:	e037883a 	mov	sp,fp
   4d6fc:	dfc00117 	ldw	ra,4(sp)
   4d700:	df000017 	ldw	fp,0(sp)
   4d704:	dec00204 	addi	sp,sp,8
   4d708:	f800283a 	ret

0004d70c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   4d70c:	deffeb04 	addi	sp,sp,-84
   4d710:	dfc01415 	stw	ra,80(sp)
   4d714:	df001315 	stw	fp,76(sp)
   4d718:	df001304 	addi	fp,sp,76
   4d71c:	e13ffc15 	stw	r4,-16(fp)
   4d720:	e17ffd15 	stw	r5,-12(fp)
   4d724:	e1bffe15 	stw	r6,-8(fp)
   4d728:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   4d72c:	e0bffe17 	ldw	r2,-8(fp)
   4d730:	e0bfee15 	stw	r2,-72(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   4d734:	e0bfff17 	ldw	r2,-4(fp)
   4d738:	1090000c 	andi	r2,r2,16384
   4d73c:	e0bfef15 	stw	r2,-68(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
   4d740:	e0bffc17 	ldw	r2,-16(fp)
   4d744:	10800917 	ldw	r2,36(r2)
   4d748:	e0bff215 	stw	r2,-56(fp)
   4d74c:	e03ff30d 	sth	zero,-52(fp)
   4d750:	e0fff30b 	ldhu	r3,-52(fp)
   4d754:	e0bffb44 	addi	r2,fp,-19
   4d758:	e13ff217 	ldw	r4,-56(fp)
   4d75c:	180b883a 	mov	r5,r3
   4d760:	100d883a 	mov	r6,r2
   4d764:	004995c0 	call	4995c <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   4d768:	00005106 	br	4d8b0 <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4d76c:	e0bffc17 	ldw	r2,-16(fp)
   4d770:	10800517 	ldw	r2,20(r2)
   4d774:	10800044 	addi	r2,r2,1
   4d778:	10800fcc 	andi	r2,r2,63
   4d77c:	e0bff015 	stw	r2,-64(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   4d780:	e0bffc17 	ldw	r2,-16(fp)
   4d784:	10c00417 	ldw	r3,16(r2)
   4d788:	e0bff017 	ldw	r2,-64(fp)
   4d78c:	1880371e 	bne	r3,r2,4d86c <altera_avalon_uart_write+0x160>
    {
      if (no_block)
   4d790:	e0bfef17 	ldw	r2,-68(fp)
   4d794:	10000526 	beq	r2,zero,4d7ac <altera_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   4d798:	004d6bc0 	call	4d6bc <alt_get_errno>
   4d79c:	1007883a 	mov	r3,r2
   4d7a0:	008002c4 	movi	r2,11
   4d7a4:	18800015 	stw	r2,0(r3)
        break;
   4d7a8:	00004306 	br	4d8b8 <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d7ac:	0005303a 	rdctl	r2,status
   4d7b0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d7b4:	e0fff417 	ldw	r3,-48(fp)
   4d7b8:	00bfff84 	movi	r2,-2
   4d7bc:	1884703a 	and	r2,r3,r2
   4d7c0:	1001703a 	wrctl	status,r2
  
  return context;
   4d7c4:	e0bff417 	ldw	r2,-48(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   4d7c8:	e0bff115 	stw	r2,-60(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4d7cc:	e0bffc17 	ldw	r2,-16(fp)
   4d7d0:	10800117 	ldw	r2,4(r2)
   4d7d4:	10c11014 	ori	r3,r2,1088
   4d7d8:	e0bffc17 	ldw	r2,-16(fp)
   4d7dc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4d7e0:	e0bffc17 	ldw	r2,-16(fp)
   4d7e4:	10800017 	ldw	r2,0(r2)
   4d7e8:	10800304 	addi	r2,r2,12
   4d7ec:	e0fffc17 	ldw	r3,-16(fp)
   4d7f0:	18c00117 	ldw	r3,4(r3)
   4d7f4:	10c00035 	stwio	r3,0(r2)
   4d7f8:	e0bff117 	ldw	r2,-60(fp)
   4d7fc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d800:	e0bff517 	ldw	r2,-44(fp)
   4d804:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
   4d808:	e0bffc17 	ldw	r2,-16(fp)
   4d80c:	10800717 	ldw	r2,28(r2)
   4d810:	e0bff615 	stw	r2,-40(fp)
   4d814:	00800084 	movi	r2,2
   4d818:	e0bff70d 	sth	r2,-36(fp)
   4d81c:	00bfe0c4 	movi	r2,-125
   4d820:	e0bff785 	stb	r2,-34(fp)
   4d824:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   4d828:	00800174 	movhi	r2,5
   4d82c:	108ac744 	addi	r2,r2,11037
   4d830:	10800003 	ldbu	r2,0(r2)
   4d834:	10803fcc 	andi	r2,r2,255
   4d838:	10000826 	beq	r2,zero,4d85c <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   4d83c:	e17ff70b 	ldhu	r5,-36(fp)
   4d840:	e1bff783 	ldbu	r6,-34(fp)
   4d844:	e0fff80b 	ldhu	r3,-32(fp)
   4d848:	e0bffb04 	addi	r2,fp,-20
   4d84c:	d8800015 	stw	r2,0(sp)
   4d850:	e13ff617 	ldw	r4,-40(fp)
   4d854:	180f883a 	mov	r7,r3
   4d858:	0046ca80 	call	46ca8 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   4d85c:	e0bffc17 	ldw	r2,-16(fp)
   4d860:	10c00417 	ldw	r3,16(r2)
   4d864:	e0bff017 	ldw	r2,-64(fp)
   4d868:	18bfe726 	beq	r3,r2,4d808 <__alt_data_end+0xfffd7ca8>
      }
    }

    count--;
   4d86c:	e0bfee17 	ldw	r2,-72(fp)
   4d870:	10bfffc4 	addi	r2,r2,-1
   4d874:	e0bfee15 	stw	r2,-72(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   4d878:	e0bffc17 	ldw	r2,-16(fp)
   4d87c:	10c00517 	ldw	r3,20(r2)
   4d880:	e0bffd17 	ldw	r2,-12(fp)
   4d884:	11000044 	addi	r4,r2,1
   4d888:	e13ffd15 	stw	r4,-12(fp)
   4d88c:	10800003 	ldbu	r2,0(r2)
   4d890:	1009883a 	mov	r4,r2
   4d894:	e0bffc17 	ldw	r2,-16(fp)
   4d898:	10c5883a 	add	r2,r2,r3
   4d89c:	10801a04 	addi	r2,r2,104
   4d8a0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   4d8a4:	e0bffc17 	ldw	r2,-16(fp)
   4d8a8:	e0fff017 	ldw	r3,-64(fp)
   4d8ac:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   4d8b0:	e0bfee17 	ldw	r2,-72(fp)
   4d8b4:	103fad1e 	bne	r2,zero,4d76c <__alt_data_end+0xfffd7c0c>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
   4d8b8:	e0bffc17 	ldw	r2,-16(fp)
   4d8bc:	10800917 	ldw	r2,36(r2)
   4d8c0:	1009883a 	mov	r4,r2
   4d8c4:	0049d300 	call	49d30 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d8c8:	0005303a 	rdctl	r2,status
   4d8cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d8d0:	e0fff917 	ldw	r3,-28(fp)
   4d8d4:	00bfff84 	movi	r2,-2
   4d8d8:	1884703a 	and	r2,r3,r2
   4d8dc:	1001703a 	wrctl	status,r2
  
  return context;
   4d8e0:	e0bff917 	ldw	r2,-28(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   4d8e4:	e0bff115 	stw	r2,-60(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4d8e8:	e0bffc17 	ldw	r2,-16(fp)
   4d8ec:	10800117 	ldw	r2,4(r2)
   4d8f0:	10c11014 	ori	r3,r2,1088
   4d8f4:	e0bffc17 	ldw	r2,-16(fp)
   4d8f8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4d8fc:	e0bffc17 	ldw	r2,-16(fp)
   4d900:	10800017 	ldw	r2,0(r2)
   4d904:	10800304 	addi	r2,r2,12
   4d908:	e0fffc17 	ldw	r3,-16(fp)
   4d90c:	18c00117 	ldw	r3,4(r3)
   4d910:	10c00035 	stwio	r3,0(r2)
   4d914:	e0bff117 	ldw	r2,-60(fp)
   4d918:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d91c:	e0bffa17 	ldw	r2,-24(fp)
   4d920:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   4d924:	e0fffe17 	ldw	r3,-8(fp)
   4d928:	e0bfee17 	ldw	r2,-72(fp)
   4d92c:	1885c83a 	sub	r2,r3,r2
}
   4d930:	e037883a 	mov	sp,fp
   4d934:	dfc00117 	ldw	ra,4(sp)
   4d938:	df000017 	ldw	fp,0(sp)
   4d93c:	dec00204 	addi	sp,sp,8
   4d940:	f800283a 	ret

0004d944 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4d944:	defff504 	addi	sp,sp,-44
   4d948:	df000a15 	stw	fp,40(sp)
   4d94c:	df000a04 	addi	fp,sp,40
   4d950:	e13ffc15 	stw	r4,-16(fp)
   4d954:	e17ffd15 	stw	r5,-12(fp)
   4d958:	e1bffe15 	stw	r6,-8(fp)
   4d95c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4d960:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4d964:	00800174 	movhi	r2,5
   4d968:	108adc04 	addi	r2,r2,11120
   4d96c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4d970:	10003f26 	beq	r2,zero,4da70 <alt_alarm_start+0x12c>
  {
    if (alarm)
   4d974:	e0bffc17 	ldw	r2,-16(fp)
   4d978:	10003b26 	beq	r2,zero,4da68 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   4d97c:	e0bffc17 	ldw	r2,-16(fp)
   4d980:	e0fffe17 	ldw	r3,-8(fp)
   4d984:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4d988:	e0bffc17 	ldw	r2,-16(fp)
   4d98c:	e0ffff17 	ldw	r3,-4(fp)
   4d990:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d994:	0005303a 	rdctl	r2,status
   4d998:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d99c:	e0fff817 	ldw	r3,-32(fp)
   4d9a0:	00bfff84 	movi	r2,-2
   4d9a4:	1884703a 	and	r2,r3,r2
   4d9a8:	1001703a 	wrctl	status,r2
  
  return context;
   4d9ac:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4d9b0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4d9b4:	00800174 	movhi	r2,5
   4d9b8:	108add04 	addi	r2,r2,11124
   4d9bc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4d9c0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4d9c4:	e0fffd17 	ldw	r3,-12(fp)
   4d9c8:	e0bff617 	ldw	r2,-40(fp)
   4d9cc:	1885883a 	add	r2,r3,r2
   4d9d0:	10c00044 	addi	r3,r2,1
   4d9d4:	e0bffc17 	ldw	r2,-16(fp)
   4d9d8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4d9dc:	e0bffc17 	ldw	r2,-16(fp)
   4d9e0:	10c00217 	ldw	r3,8(r2)
   4d9e4:	e0bff617 	ldw	r2,-40(fp)
   4d9e8:	1880042e 	bgeu	r3,r2,4d9fc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   4d9ec:	e0bffc17 	ldw	r2,-16(fp)
   4d9f0:	00c00044 	movi	r3,1
   4d9f4:	10c00405 	stb	r3,16(r2)
   4d9f8:	00000206 	br	4da04 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   4d9fc:	e0bffc17 	ldw	r2,-16(fp)
   4da00:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4da04:	e0fffc17 	ldw	r3,-16(fp)
   4da08:	00800174 	movhi	r2,5
   4da0c:	1083c804 	addi	r2,r2,3872
   4da10:	e0bff915 	stw	r2,-28(fp)
   4da14:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4da18:	e0bffa17 	ldw	r2,-24(fp)
   4da1c:	e0fff917 	ldw	r3,-28(fp)
   4da20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4da24:	e0bff917 	ldw	r2,-28(fp)
   4da28:	10c00017 	ldw	r3,0(r2)
   4da2c:	e0bffa17 	ldw	r2,-24(fp)
   4da30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4da34:	e0bff917 	ldw	r2,-28(fp)
   4da38:	10800017 	ldw	r2,0(r2)
   4da3c:	e0fffa17 	ldw	r3,-24(fp)
   4da40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4da44:	e0bff917 	ldw	r2,-28(fp)
   4da48:	e0fffa17 	ldw	r3,-24(fp)
   4da4c:	10c00015 	stw	r3,0(r2)
   4da50:	e0bff717 	ldw	r2,-36(fp)
   4da54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4da58:	e0bffb17 	ldw	r2,-20(fp)
   4da5c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4da60:	0005883a 	mov	r2,zero
   4da64:	00000306 	br	4da74 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   4da68:	00bffa84 	movi	r2,-22
   4da6c:	00000106 	br	4da74 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4da70:	00bfde84 	movi	r2,-134
  }
}
   4da74:	e037883a 	mov	sp,fp
   4da78:	df000017 	ldw	fp,0(sp)
   4da7c:	dec00104 	addi	sp,sp,4
   4da80:	f800283a 	ret

0004da84 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4da84:	deffff04 	addi	sp,sp,-4
   4da88:	df000015 	stw	fp,0(sp)
   4da8c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4da90:	e037883a 	mov	sp,fp
   4da94:	df000017 	ldw	fp,0(sp)
   4da98:	dec00104 	addi	sp,sp,4
   4da9c:	f800283a 	ret

0004daa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4daa0:	defffe04 	addi	sp,sp,-8
   4daa4:	dfc00115 	stw	ra,4(sp)
   4daa8:	df000015 	stw	fp,0(sp)
   4daac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4dab0:	00800174 	movhi	r2,5
   4dab4:	1083a604 	addi	r2,r2,3736
   4dab8:	10800017 	ldw	r2,0(r2)
   4dabc:	10000526 	beq	r2,zero,4dad4 <alt_get_errno+0x34>
   4dac0:	00800174 	movhi	r2,5
   4dac4:	1083a604 	addi	r2,r2,3736
   4dac8:	10800017 	ldw	r2,0(r2)
   4dacc:	103ee83a 	callr	r2
   4dad0:	00000206 	br	4dadc <alt_get_errno+0x3c>
   4dad4:	00800174 	movhi	r2,5
   4dad8:	108abe04 	addi	r2,r2,11000
}
   4dadc:	e037883a 	mov	sp,fp
   4dae0:	dfc00117 	ldw	ra,4(sp)
   4dae4:	df000017 	ldw	fp,0(sp)
   4dae8:	dec00204 	addi	sp,sp,8
   4daec:	f800283a 	ret

0004daf0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4daf0:	defffa04 	addi	sp,sp,-24
   4daf4:	dfc00515 	stw	ra,20(sp)
   4daf8:	df000415 	stw	fp,16(sp)
   4dafc:	df000404 	addi	fp,sp,16
   4db00:	e13ffe15 	stw	r4,-8(fp)
   4db04:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4db08:	e0bffe17 	ldw	r2,-8(fp)
   4db0c:	10000326 	beq	r2,zero,4db1c <alt_dev_llist_insert+0x2c>
   4db10:	e0bffe17 	ldw	r2,-8(fp)
   4db14:	10800217 	ldw	r2,8(r2)
   4db18:	1000061e 	bne	r2,zero,4db34 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   4db1c:	004daa00 	call	4daa0 <alt_get_errno>
   4db20:	1007883a 	mov	r3,r2
   4db24:	00800584 	movi	r2,22
   4db28:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4db2c:	00bffa84 	movi	r2,-22
   4db30:	00001306 	br	4db80 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4db34:	e0bffe17 	ldw	r2,-8(fp)
   4db38:	e0ffff17 	ldw	r3,-4(fp)
   4db3c:	e0fffc15 	stw	r3,-16(fp)
   4db40:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4db44:	e0bffd17 	ldw	r2,-12(fp)
   4db48:	e0fffc17 	ldw	r3,-16(fp)
   4db4c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4db50:	e0bffc17 	ldw	r2,-16(fp)
   4db54:	10c00017 	ldw	r3,0(r2)
   4db58:	e0bffd17 	ldw	r2,-12(fp)
   4db5c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4db60:	e0bffc17 	ldw	r2,-16(fp)
   4db64:	10800017 	ldw	r2,0(r2)
   4db68:	e0fffd17 	ldw	r3,-12(fp)
   4db6c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4db70:	e0bffc17 	ldw	r2,-16(fp)
   4db74:	e0fffd17 	ldw	r3,-12(fp)
   4db78:	10c00015 	stw	r3,0(r2)

  return 0;  
   4db7c:	0005883a 	mov	r2,zero
}
   4db80:	e037883a 	mov	sp,fp
   4db84:	dfc00117 	ldw	ra,4(sp)
   4db88:	df000017 	ldw	fp,0(sp)
   4db8c:	dec00204 	addi	sp,sp,8
   4db90:	f800283a 	ret

0004db94 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4db94:	defffd04 	addi	sp,sp,-12
   4db98:	dfc00215 	stw	ra,8(sp)
   4db9c:	df000115 	stw	fp,4(sp)
   4dba0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4dba4:	00800174 	movhi	r2,5
   4dba8:	10bc7904 	addi	r2,r2,-3612
   4dbac:	e0bfff15 	stw	r2,-4(fp)
   4dbb0:	00000606 	br	4dbcc <_do_ctors+0x38>
        (*ctor) (); 
   4dbb4:	e0bfff17 	ldw	r2,-4(fp)
   4dbb8:	10800017 	ldw	r2,0(r2)
   4dbbc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4dbc0:	e0bfff17 	ldw	r2,-4(fp)
   4dbc4:	10bfff04 	addi	r2,r2,-4
   4dbc8:	e0bfff15 	stw	r2,-4(fp)
   4dbcc:	e0ffff17 	ldw	r3,-4(fp)
   4dbd0:	00800174 	movhi	r2,5
   4dbd4:	10bc7a04 	addi	r2,r2,-3608
   4dbd8:	18bff62e 	bgeu	r3,r2,4dbb4 <__alt_data_end+0xfffd8054>
        (*ctor) (); 
}
   4dbdc:	e037883a 	mov	sp,fp
   4dbe0:	dfc00117 	ldw	ra,4(sp)
   4dbe4:	df000017 	ldw	fp,0(sp)
   4dbe8:	dec00204 	addi	sp,sp,8
   4dbec:	f800283a 	ret

0004dbf0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4dbf0:	defffd04 	addi	sp,sp,-12
   4dbf4:	dfc00215 	stw	ra,8(sp)
   4dbf8:	df000115 	stw	fp,4(sp)
   4dbfc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4dc00:	00800174 	movhi	r2,5
   4dc04:	10bc7904 	addi	r2,r2,-3612
   4dc08:	e0bfff15 	stw	r2,-4(fp)
   4dc0c:	00000606 	br	4dc28 <_do_dtors+0x38>
        (*dtor) (); 
   4dc10:	e0bfff17 	ldw	r2,-4(fp)
   4dc14:	10800017 	ldw	r2,0(r2)
   4dc18:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4dc1c:	e0bfff17 	ldw	r2,-4(fp)
   4dc20:	10bfff04 	addi	r2,r2,-4
   4dc24:	e0bfff15 	stw	r2,-4(fp)
   4dc28:	e0ffff17 	ldw	r3,-4(fp)
   4dc2c:	00800174 	movhi	r2,5
   4dc30:	10bc7a04 	addi	r2,r2,-3608
   4dc34:	18bff62e 	bgeu	r3,r2,4dc10 <__alt_data_end+0xfffd80b0>
        (*dtor) (); 
}
   4dc38:	e037883a 	mov	sp,fp
   4dc3c:	dfc00117 	ldw	ra,4(sp)
   4dc40:	df000017 	ldw	fp,0(sp)
   4dc44:	dec00204 	addi	sp,sp,8
   4dc48:	f800283a 	ret

0004dc4c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4dc4c:	deffff04 	addi	sp,sp,-4
   4dc50:	df000015 	stw	fp,0(sp)
   4dc54:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   4dc58:	e037883a 	mov	sp,fp
   4dc5c:	df000017 	ldw	fp,0(sp)
   4dc60:	dec00104 	addi	sp,sp,4
   4dc64:	f800283a 	ret

0004dc68 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4dc68:	defff904 	addi	sp,sp,-28
   4dc6c:	dfc00615 	stw	ra,24(sp)
   4dc70:	df000515 	stw	fp,20(sp)
   4dc74:	df000504 	addi	fp,sp,20
   4dc78:	e13ffc15 	stw	r4,-16(fp)
   4dc7c:	e17ffd15 	stw	r5,-12(fp)
   4dc80:	e1bffe15 	stw	r6,-8(fp)
   4dc84:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4dc88:	e0800217 	ldw	r2,8(fp)
   4dc8c:	d8800015 	stw	r2,0(sp)
   4dc90:	e13ffc17 	ldw	r4,-16(fp)
   4dc94:	e17ffd17 	ldw	r5,-12(fp)
   4dc98:	e1bffe17 	ldw	r6,-8(fp)
   4dc9c:	e1ffff17 	ldw	r7,-4(fp)
   4dca0:	004de480 	call	4de48 <alt_iic_isr_register>
}  
   4dca4:	e037883a 	mov	sp,fp
   4dca8:	dfc00117 	ldw	ra,4(sp)
   4dcac:	df000017 	ldw	fp,0(sp)
   4dcb0:	dec00204 	addi	sp,sp,8
   4dcb4:	f800283a 	ret

0004dcb8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4dcb8:	defff904 	addi	sp,sp,-28
   4dcbc:	df000615 	stw	fp,24(sp)
   4dcc0:	df000604 	addi	fp,sp,24
   4dcc4:	e13ffe15 	stw	r4,-8(fp)
   4dcc8:	e17fff15 	stw	r5,-4(fp)
   4dccc:	e0bfff17 	ldw	r2,-4(fp)
   4dcd0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4dcd4:	0005303a 	rdctl	r2,status
   4dcd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4dcdc:	e0fffb17 	ldw	r3,-20(fp)
   4dce0:	00bfff84 	movi	r2,-2
   4dce4:	1884703a 	and	r2,r3,r2
   4dce8:	1001703a 	wrctl	status,r2
  
  return context;
   4dcec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4dcf0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4dcf4:	e0bffa17 	ldw	r2,-24(fp)
   4dcf8:	00c00044 	movi	r3,1
   4dcfc:	1884983a 	sll	r2,r3,r2
   4dd00:	1007883a 	mov	r3,r2
   4dd04:	00800174 	movhi	r2,5
   4dd08:	108adb04 	addi	r2,r2,11116
   4dd0c:	10800017 	ldw	r2,0(r2)
   4dd10:	1886b03a 	or	r3,r3,r2
   4dd14:	00800174 	movhi	r2,5
   4dd18:	108adb04 	addi	r2,r2,11116
   4dd1c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4dd20:	00800174 	movhi	r2,5
   4dd24:	108adb04 	addi	r2,r2,11116
   4dd28:	10800017 	ldw	r2,0(r2)
   4dd2c:	100170fa 	wrctl	ienable,r2
   4dd30:	e0bffc17 	ldw	r2,-16(fp)
   4dd34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4dd38:	e0bffd17 	ldw	r2,-12(fp)
   4dd3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4dd40:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4dd44:	0001883a 	nop
}
   4dd48:	e037883a 	mov	sp,fp
   4dd4c:	df000017 	ldw	fp,0(sp)
   4dd50:	dec00104 	addi	sp,sp,4
   4dd54:	f800283a 	ret

0004dd58 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4dd58:	defff904 	addi	sp,sp,-28
   4dd5c:	df000615 	stw	fp,24(sp)
   4dd60:	df000604 	addi	fp,sp,24
   4dd64:	e13ffe15 	stw	r4,-8(fp)
   4dd68:	e17fff15 	stw	r5,-4(fp)
   4dd6c:	e0bfff17 	ldw	r2,-4(fp)
   4dd70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4dd74:	0005303a 	rdctl	r2,status
   4dd78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4dd7c:	e0fffb17 	ldw	r3,-20(fp)
   4dd80:	00bfff84 	movi	r2,-2
   4dd84:	1884703a 	and	r2,r3,r2
   4dd88:	1001703a 	wrctl	status,r2
  
  return context;
   4dd8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4dd90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4dd94:	e0bffa17 	ldw	r2,-24(fp)
   4dd98:	00c00044 	movi	r3,1
   4dd9c:	1884983a 	sll	r2,r3,r2
   4dda0:	0084303a 	nor	r2,zero,r2
   4dda4:	1007883a 	mov	r3,r2
   4dda8:	00800174 	movhi	r2,5
   4ddac:	108adb04 	addi	r2,r2,11116
   4ddb0:	10800017 	ldw	r2,0(r2)
   4ddb4:	1886703a 	and	r3,r3,r2
   4ddb8:	00800174 	movhi	r2,5
   4ddbc:	108adb04 	addi	r2,r2,11116
   4ddc0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4ddc4:	00800174 	movhi	r2,5
   4ddc8:	108adb04 	addi	r2,r2,11116
   4ddcc:	10800017 	ldw	r2,0(r2)
   4ddd0:	100170fa 	wrctl	ienable,r2
   4ddd4:	e0bffc17 	ldw	r2,-16(fp)
   4ddd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4dddc:	e0bffd17 	ldw	r2,-12(fp)
   4dde0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4dde4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   4dde8:	0001883a 	nop
}
   4ddec:	e037883a 	mov	sp,fp
   4ddf0:	df000017 	ldw	fp,0(sp)
   4ddf4:	dec00104 	addi	sp,sp,4
   4ddf8:	f800283a 	ret

0004ddfc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4ddfc:	defffc04 	addi	sp,sp,-16
   4de00:	df000315 	stw	fp,12(sp)
   4de04:	df000304 	addi	fp,sp,12
   4de08:	e13ffe15 	stw	r4,-8(fp)
   4de0c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4de10:	000530fa 	rdctl	r2,ienable
   4de14:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4de18:	e0bfff17 	ldw	r2,-4(fp)
   4de1c:	00c00044 	movi	r3,1
   4de20:	1884983a 	sll	r2,r3,r2
   4de24:	1007883a 	mov	r3,r2
   4de28:	e0bffd17 	ldw	r2,-12(fp)
   4de2c:	1884703a 	and	r2,r3,r2
   4de30:	1004c03a 	cmpne	r2,r2,zero
   4de34:	10803fcc 	andi	r2,r2,255
}
   4de38:	e037883a 	mov	sp,fp
   4de3c:	df000017 	ldw	fp,0(sp)
   4de40:	dec00104 	addi	sp,sp,4
   4de44:	f800283a 	ret

0004de48 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4de48:	defff504 	addi	sp,sp,-44
   4de4c:	dfc00a15 	stw	ra,40(sp)
   4de50:	df000915 	stw	fp,36(sp)
   4de54:	df000904 	addi	fp,sp,36
   4de58:	e13ffc15 	stw	r4,-16(fp)
   4de5c:	e17ffd15 	stw	r5,-12(fp)
   4de60:	e1bffe15 	stw	r6,-8(fp)
   4de64:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4de68:	00bffa84 	movi	r2,-22
   4de6c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4de70:	e0bffd17 	ldw	r2,-12(fp)
   4de74:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4de78:	e0bff817 	ldw	r2,-32(fp)
   4de7c:	10800808 	cmpgei	r2,r2,32
   4de80:	1000271e 	bne	r2,zero,4df20 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4de84:	0005303a 	rdctl	r2,status
   4de88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4de8c:	e0fffa17 	ldw	r3,-24(fp)
   4de90:	00bfff84 	movi	r2,-2
   4de94:	1884703a 	and	r2,r3,r2
   4de98:	1001703a 	wrctl	status,r2
  
  return context;
   4de9c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4dea0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   4dea4:	008001b4 	movhi	r2,6
   4dea8:	10af7204 	addi	r2,r2,-16952
   4deac:	e0fff817 	ldw	r3,-32(fp)
   4deb0:	180690fa 	slli	r3,r3,3
   4deb4:	10c5883a 	add	r2,r2,r3
   4deb8:	e0fffe17 	ldw	r3,-8(fp)
   4debc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4dec0:	008001b4 	movhi	r2,6
   4dec4:	10af7204 	addi	r2,r2,-16952
   4dec8:	e0fff817 	ldw	r3,-32(fp)
   4decc:	180690fa 	slli	r3,r3,3
   4ded0:	10c5883a 	add	r2,r2,r3
   4ded4:	10800104 	addi	r2,r2,4
   4ded8:	e0ffff17 	ldw	r3,-4(fp)
   4dedc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4dee0:	e0bffe17 	ldw	r2,-8(fp)
   4dee4:	10000526 	beq	r2,zero,4defc <alt_iic_isr_register+0xb4>
   4dee8:	e0bff817 	ldw	r2,-32(fp)
   4deec:	e13ffc17 	ldw	r4,-16(fp)
   4def0:	100b883a 	mov	r5,r2
   4def4:	004dcb80 	call	4dcb8 <alt_ic_irq_enable>
   4def8:	00000406 	br	4df0c <alt_iic_isr_register+0xc4>
   4defc:	e0bff817 	ldw	r2,-32(fp)
   4df00:	e13ffc17 	ldw	r4,-16(fp)
   4df04:	100b883a 	mov	r5,r2
   4df08:	004dd580 	call	4dd58 <alt_ic_irq_disable>
   4df0c:	e0bff715 	stw	r2,-36(fp)
   4df10:	e0bff917 	ldw	r2,-28(fp)
   4df14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4df18:	e0bffb17 	ldw	r2,-20(fp)
   4df1c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4df20:	e0bff717 	ldw	r2,-36(fp)
}
   4df24:	e037883a 	mov	sp,fp
   4df28:	dfc00117 	ldw	ra,4(sp)
   4df2c:	df000017 	ldw	fp,0(sp)
   4df30:	dec00204 	addi	sp,sp,8
   4df34:	f800283a 	ret

0004df38 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4df38:	defff804 	addi	sp,sp,-32
   4df3c:	dfc00715 	stw	ra,28(sp)
   4df40:	df000615 	stw	fp,24(sp)
   4df44:	dc000515 	stw	r16,20(sp)
   4df48:	df000604 	addi	fp,sp,24
   4df4c:	e13ffb15 	stw	r4,-20(fp)
   4df50:	e17ffc15 	stw	r5,-16(fp)
   4df54:	e1bffd15 	stw	r6,-12(fp)
   4df58:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   4df5c:	e13ffc17 	ldw	r4,-16(fp)
   4df60:	e17ffd17 	ldw	r5,-12(fp)
   4df64:	e1bffe17 	ldw	r6,-8(fp)
   4df68:	004e1d40 	call	4e1d4 <open>
   4df6c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   4df70:	e0bffa17 	ldw	r2,-24(fp)
   4df74:	10002216 	blt	r2,zero,4e000 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   4df78:	04000174 	movhi	r16,5
   4df7c:	843eee04 	addi	r16,r16,-1096
   4df80:	e0bffa17 	ldw	r2,-24(fp)
   4df84:	1009883a 	mov	r4,r2
   4df88:	01400304 	movi	r5,12
   4df8c:	00434d80 	call	434d8 <__mulsi3>
   4df90:	8085883a 	add	r2,r16,r2
   4df94:	10c00017 	ldw	r3,0(r2)
   4df98:	e0bffb17 	ldw	r2,-20(fp)
   4df9c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4dfa0:	04000174 	movhi	r16,5
   4dfa4:	843eee04 	addi	r16,r16,-1096
   4dfa8:	e0bffa17 	ldw	r2,-24(fp)
   4dfac:	1009883a 	mov	r4,r2
   4dfb0:	01400304 	movi	r5,12
   4dfb4:	00434d80 	call	434d8 <__mulsi3>
   4dfb8:	8085883a 	add	r2,r16,r2
   4dfbc:	10800104 	addi	r2,r2,4
   4dfc0:	10c00017 	ldw	r3,0(r2)
   4dfc4:	e0bffb17 	ldw	r2,-20(fp)
   4dfc8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4dfcc:	04000174 	movhi	r16,5
   4dfd0:	843eee04 	addi	r16,r16,-1096
   4dfd4:	e0bffa17 	ldw	r2,-24(fp)
   4dfd8:	1009883a 	mov	r4,r2
   4dfdc:	01400304 	movi	r5,12
   4dfe0:	00434d80 	call	434d8 <__mulsi3>
   4dfe4:	8085883a 	add	r2,r16,r2
   4dfe8:	10800204 	addi	r2,r2,8
   4dfec:	10c00017 	ldw	r3,0(r2)
   4dff0:	e0bffb17 	ldw	r2,-20(fp)
   4dff4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4dff8:	e13ffa17 	ldw	r4,-24(fp)
   4dffc:	0043c900 	call	43c90 <alt_release_fd>
  }
} 
   4e000:	e6ffff04 	addi	sp,fp,-4
   4e004:	dfc00217 	ldw	ra,8(sp)
   4e008:	df000117 	ldw	fp,4(sp)
   4e00c:	dc000017 	ldw	r16,0(sp)
   4e010:	dec00304 	addi	sp,sp,12
   4e014:	f800283a 	ret

0004e018 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4e018:	defffb04 	addi	sp,sp,-20
   4e01c:	dfc00415 	stw	ra,16(sp)
   4e020:	df000315 	stw	fp,12(sp)
   4e024:	df000304 	addi	fp,sp,12
   4e028:	e13ffd15 	stw	r4,-12(fp)
   4e02c:	e17ffe15 	stw	r5,-8(fp)
   4e030:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4e034:	01000174 	movhi	r4,5
   4e038:	213ef104 	addi	r4,r4,-1084
   4e03c:	e17ffd17 	ldw	r5,-12(fp)
   4e040:	01800044 	movi	r6,1
   4e044:	01c07fc4 	movi	r7,511
   4e048:	004df380 	call	4df38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4e04c:	01000174 	movhi	r4,5
   4e050:	213eee04 	addi	r4,r4,-1096
   4e054:	e17ffe17 	ldw	r5,-8(fp)
   4e058:	000d883a 	mov	r6,zero
   4e05c:	01c07fc4 	movi	r7,511
   4e060:	004df380 	call	4df38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4e064:	01000174 	movhi	r4,5
   4e068:	213ef404 	addi	r4,r4,-1072
   4e06c:	e17fff17 	ldw	r5,-4(fp)
   4e070:	01800044 	movi	r6,1
   4e074:	01c07fc4 	movi	r7,511
   4e078:	004df380 	call	4df38 <alt_open_fd>
}  
   4e07c:	e037883a 	mov	sp,fp
   4e080:	dfc00117 	ldw	ra,4(sp)
   4e084:	df000017 	ldw	fp,0(sp)
   4e088:	dec00204 	addi	sp,sp,8
   4e08c:	f800283a 	ret

0004e090 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e090:	defffe04 	addi	sp,sp,-8
   4e094:	dfc00115 	stw	ra,4(sp)
   4e098:	df000015 	stw	fp,0(sp)
   4e09c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e0a0:	00800174 	movhi	r2,5
   4e0a4:	1083a604 	addi	r2,r2,3736
   4e0a8:	10800017 	ldw	r2,0(r2)
   4e0ac:	10000526 	beq	r2,zero,4e0c4 <alt_get_errno+0x34>
   4e0b0:	00800174 	movhi	r2,5
   4e0b4:	1083a604 	addi	r2,r2,3736
   4e0b8:	10800017 	ldw	r2,0(r2)
   4e0bc:	103ee83a 	callr	r2
   4e0c0:	00000206 	br	4e0cc <alt_get_errno+0x3c>
   4e0c4:	00800174 	movhi	r2,5
   4e0c8:	108abe04 	addi	r2,r2,11000
}
   4e0cc:	e037883a 	mov	sp,fp
   4e0d0:	dfc00117 	ldw	ra,4(sp)
   4e0d4:	df000017 	ldw	fp,0(sp)
   4e0d8:	dec00204 	addi	sp,sp,8
   4e0dc:	f800283a 	ret

0004e0e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4e0e0:	defffb04 	addi	sp,sp,-20
   4e0e4:	dfc00415 	stw	ra,16(sp)
   4e0e8:	df000315 	stw	fp,12(sp)
   4e0ec:	dc000215 	stw	r16,8(sp)
   4e0f0:	df000304 	addi	fp,sp,12
   4e0f4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4e0f8:	e0bffe17 	ldw	r2,-8(fp)
   4e0fc:	10800217 	ldw	r2,8(r2)
   4e100:	10d00034 	orhi	r3,r2,16384
   4e104:	e0bffe17 	ldw	r2,-8(fp)
   4e108:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4e10c:	e03ffd15 	stw	zero,-12(fp)
   4e110:	00002306 	br	4e1a0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4e114:	04000174 	movhi	r16,5
   4e118:	843eee04 	addi	r16,r16,-1096
   4e11c:	e0bffd17 	ldw	r2,-12(fp)
   4e120:	1009883a 	mov	r4,r2
   4e124:	01400304 	movi	r5,12
   4e128:	00434d80 	call	434d8 <__mulsi3>
   4e12c:	8085883a 	add	r2,r16,r2
   4e130:	10c00017 	ldw	r3,0(r2)
   4e134:	e0bffe17 	ldw	r2,-8(fp)
   4e138:	10800017 	ldw	r2,0(r2)
   4e13c:	1880151e 	bne	r3,r2,4e194 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4e140:	04000174 	movhi	r16,5
   4e144:	843eee04 	addi	r16,r16,-1096
   4e148:	e0bffd17 	ldw	r2,-12(fp)
   4e14c:	1009883a 	mov	r4,r2
   4e150:	01400304 	movi	r5,12
   4e154:	00434d80 	call	434d8 <__mulsi3>
   4e158:	8085883a 	add	r2,r16,r2
   4e15c:	10800204 	addi	r2,r2,8
   4e160:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4e164:	10000b0e 	bge	r2,zero,4e194 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4e168:	e13ffd17 	ldw	r4,-12(fp)
   4e16c:	01400304 	movi	r5,12
   4e170:	00434d80 	call	434d8 <__mulsi3>
   4e174:	1007883a 	mov	r3,r2
   4e178:	00800174 	movhi	r2,5
   4e17c:	10beee04 	addi	r2,r2,-1096
   4e180:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4e184:	e0bffe17 	ldw	r2,-8(fp)
   4e188:	18800226 	beq	r3,r2,4e194 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4e18c:	00bffcc4 	movi	r2,-13
   4e190:	00000a06 	br	4e1bc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4e194:	e0bffd17 	ldw	r2,-12(fp)
   4e198:	10800044 	addi	r2,r2,1
   4e19c:	e0bffd15 	stw	r2,-12(fp)
   4e1a0:	00800174 	movhi	r2,5
   4e1a4:	1083a504 	addi	r2,r2,3732
   4e1a8:	10800017 	ldw	r2,0(r2)
   4e1ac:	1007883a 	mov	r3,r2
   4e1b0:	e0bffd17 	ldw	r2,-12(fp)
   4e1b4:	18bfd72e 	bgeu	r3,r2,4e114 <__alt_data_end+0xfffd85b4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4e1b8:	0005883a 	mov	r2,zero
}
   4e1bc:	e6ffff04 	addi	sp,fp,-4
   4e1c0:	dfc00217 	ldw	ra,8(sp)
   4e1c4:	df000117 	ldw	fp,4(sp)
   4e1c8:	dc000017 	ldw	r16,0(sp)
   4e1cc:	dec00304 	addi	sp,sp,12
   4e1d0:	f800283a 	ret

0004e1d4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4e1d4:	defff604 	addi	sp,sp,-40
   4e1d8:	dfc00915 	stw	ra,36(sp)
   4e1dc:	df000815 	stw	fp,32(sp)
   4e1e0:	df000804 	addi	fp,sp,32
   4e1e4:	e13ffd15 	stw	r4,-12(fp)
   4e1e8:	e17ffe15 	stw	r5,-8(fp)
   4e1ec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4e1f0:	00bfffc4 	movi	r2,-1
   4e1f4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4e1f8:	00bffb44 	movi	r2,-19
   4e1fc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4e200:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4e204:	e13ffd17 	ldw	r4,-12(fp)
   4e208:	01400174 	movhi	r5,5
   4e20c:	2943a304 	addi	r5,r5,3724
   4e210:	004e9bc0 	call	4e9bc <alt_find_dev>
   4e214:	e0bff815 	stw	r2,-32(fp)
   4e218:	e0bff817 	ldw	r2,-32(fp)
   4e21c:	1000051e 	bne	r2,zero,4e234 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4e220:	e13ffd17 	ldw	r4,-12(fp)
   4e224:	004ea4c0 	call	4ea4c <alt_find_file>
   4e228:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4e22c:	00800044 	movi	r2,1
   4e230:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4e234:	e0bff817 	ldw	r2,-32(fp)
   4e238:	10002b26 	beq	r2,zero,4e2e8 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4e23c:	e13ff817 	ldw	r4,-32(fp)
   4e240:	004eb600 	call	4eb60 <alt_get_fd>
   4e244:	e0bff915 	stw	r2,-28(fp)
   4e248:	e0bff917 	ldw	r2,-28(fp)
   4e24c:	1000030e 	bge	r2,zero,4e25c <open+0x88>
    {
      status = index;
   4e250:	e0bff917 	ldw	r2,-28(fp)
   4e254:	e0bffa15 	stw	r2,-24(fp)
   4e258:	00002506 	br	4e2f0 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   4e25c:	e13ff917 	ldw	r4,-28(fp)
   4e260:	01400304 	movi	r5,12
   4e264:	00434d80 	call	434d8 <__mulsi3>
   4e268:	1007883a 	mov	r3,r2
   4e26c:	00800174 	movhi	r2,5
   4e270:	10beee04 	addi	r2,r2,-1096
   4e274:	1885883a 	add	r2,r3,r2
   4e278:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4e27c:	e0fffe17 	ldw	r3,-8(fp)
   4e280:	00900034 	movhi	r2,16384
   4e284:	10bfffc4 	addi	r2,r2,-1
   4e288:	1886703a 	and	r3,r3,r2
   4e28c:	e0bffc17 	ldw	r2,-16(fp)
   4e290:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4e294:	e0bffb17 	ldw	r2,-20(fp)
   4e298:	1000051e 	bne	r2,zero,4e2b0 <open+0xdc>
   4e29c:	e13ffc17 	ldw	r4,-16(fp)
   4e2a0:	004e0e00 	call	4e0e0 <alt_file_locked>
   4e2a4:	e0bffa15 	stw	r2,-24(fp)
   4e2a8:	e0bffa17 	ldw	r2,-24(fp)
   4e2ac:	10001016 	blt	r2,zero,4e2f0 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4e2b0:	e0bff817 	ldw	r2,-32(fp)
   4e2b4:	10800317 	ldw	r2,12(r2)
   4e2b8:	10000826 	beq	r2,zero,4e2dc <open+0x108>
   4e2bc:	e0bff817 	ldw	r2,-32(fp)
   4e2c0:	10800317 	ldw	r2,12(r2)
   4e2c4:	e13ffc17 	ldw	r4,-16(fp)
   4e2c8:	e17ffd17 	ldw	r5,-12(fp)
   4e2cc:	e1bffe17 	ldw	r6,-8(fp)
   4e2d0:	e1ffff17 	ldw	r7,-4(fp)
   4e2d4:	103ee83a 	callr	r2
   4e2d8:	00000106 	br	4e2e0 <open+0x10c>
   4e2dc:	0005883a 	mov	r2,zero
   4e2e0:	e0bffa15 	stw	r2,-24(fp)
   4e2e4:	00000206 	br	4e2f0 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4e2e8:	00bffb44 	movi	r2,-19
   4e2ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4e2f0:	e0bffa17 	ldw	r2,-24(fp)
   4e2f4:	1000090e 	bge	r2,zero,4e31c <open+0x148>
  {
    alt_release_fd (index);  
   4e2f8:	e13ff917 	ldw	r4,-28(fp)
   4e2fc:	0043c900 	call	43c90 <alt_release_fd>
    ALT_ERRNO = -status;
   4e300:	004e0900 	call	4e090 <alt_get_errno>
   4e304:	1007883a 	mov	r3,r2
   4e308:	e0bffa17 	ldw	r2,-24(fp)
   4e30c:	0085c83a 	sub	r2,zero,r2
   4e310:	18800015 	stw	r2,0(r3)
    return -1;
   4e314:	00bfffc4 	movi	r2,-1
   4e318:	00000106 	br	4e320 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   4e31c:	e0bff917 	ldw	r2,-28(fp)
}
   4e320:	e037883a 	mov	sp,fp
   4e324:	dfc00117 	ldw	ra,4(sp)
   4e328:	df000017 	ldw	fp,0(sp)
   4e32c:	dec00204 	addi	sp,sp,8
   4e330:	f800283a 	ret

0004e334 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4e334:	defffa04 	addi	sp,sp,-24
   4e338:	df000515 	stw	fp,20(sp)
   4e33c:	df000504 	addi	fp,sp,20
   4e340:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e344:	0005303a 	rdctl	r2,status
   4e348:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e34c:	e0fffc17 	ldw	r3,-16(fp)
   4e350:	00bfff84 	movi	r2,-2
   4e354:	1884703a 	and	r2,r3,r2
   4e358:	1001703a 	wrctl	status,r2
  
  return context;
   4e35c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4e360:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4e364:	e0bfff17 	ldw	r2,-4(fp)
   4e368:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4e36c:	e0bffd17 	ldw	r2,-12(fp)
   4e370:	10800017 	ldw	r2,0(r2)
   4e374:	e0fffd17 	ldw	r3,-12(fp)
   4e378:	18c00117 	ldw	r3,4(r3)
   4e37c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4e380:	e0bffd17 	ldw	r2,-12(fp)
   4e384:	10800117 	ldw	r2,4(r2)
   4e388:	e0fffd17 	ldw	r3,-12(fp)
   4e38c:	18c00017 	ldw	r3,0(r3)
   4e390:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4e394:	e0bffd17 	ldw	r2,-12(fp)
   4e398:	e0fffd17 	ldw	r3,-12(fp)
   4e39c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4e3a0:	e0bffd17 	ldw	r2,-12(fp)
   4e3a4:	e0fffd17 	ldw	r3,-12(fp)
   4e3a8:	10c00015 	stw	r3,0(r2)
   4e3ac:	e0bffb17 	ldw	r2,-20(fp)
   4e3b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e3b4:	e0bffe17 	ldw	r2,-8(fp)
   4e3b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4e3bc:	e037883a 	mov	sp,fp
   4e3c0:	df000017 	ldw	fp,0(sp)
   4e3c4:	dec00104 	addi	sp,sp,4
   4e3c8:	f800283a 	ret

0004e3cc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4e3cc:	defffb04 	addi	sp,sp,-20
   4e3d0:	dfc00415 	stw	ra,16(sp)
   4e3d4:	df000315 	stw	fp,12(sp)
   4e3d8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4e3dc:	d0a02b17 	ldw	r2,-32596(gp)
   4e3e0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4e3e4:	d0a74017 	ldw	r2,-25344(gp)
   4e3e8:	10800044 	addi	r2,r2,1
   4e3ec:	d0a74015 	stw	r2,-25344(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4e3f0:	00002e06 	br	4e4ac <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4e3f4:	e0bffd17 	ldw	r2,-12(fp)
   4e3f8:	10800017 	ldw	r2,0(r2)
   4e3fc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4e400:	e0bffd17 	ldw	r2,-12(fp)
   4e404:	10800403 	ldbu	r2,16(r2)
   4e408:	10803fcc 	andi	r2,r2,255
   4e40c:	10000426 	beq	r2,zero,4e420 <alt_tick+0x54>
   4e410:	d0a74017 	ldw	r2,-25344(gp)
   4e414:	1000021e 	bne	r2,zero,4e420 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4e418:	e0bffd17 	ldw	r2,-12(fp)
   4e41c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4e420:	e0bffd17 	ldw	r2,-12(fp)
   4e424:	10800217 	ldw	r2,8(r2)
   4e428:	d0e74017 	ldw	r3,-25344(gp)
   4e42c:	18801d36 	bltu	r3,r2,4e4a4 <alt_tick+0xd8>
   4e430:	e0bffd17 	ldw	r2,-12(fp)
   4e434:	10800403 	ldbu	r2,16(r2)
   4e438:	10803fcc 	andi	r2,r2,255
   4e43c:	1000191e 	bne	r2,zero,4e4a4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4e440:	e0bffd17 	ldw	r2,-12(fp)
   4e444:	10800317 	ldw	r2,12(r2)
   4e448:	e0fffd17 	ldw	r3,-12(fp)
   4e44c:	18c00517 	ldw	r3,20(r3)
   4e450:	1809883a 	mov	r4,r3
   4e454:	103ee83a 	callr	r2
   4e458:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4e45c:	e0bfff17 	ldw	r2,-4(fp)
   4e460:	1000031e 	bne	r2,zero,4e470 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4e464:	e13ffd17 	ldw	r4,-12(fp)
   4e468:	004e3340 	call	4e334 <alt_alarm_stop>
   4e46c:	00000d06 	br	4e4a4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4e470:	e0bffd17 	ldw	r2,-12(fp)
   4e474:	10c00217 	ldw	r3,8(r2)
   4e478:	e0bfff17 	ldw	r2,-4(fp)
   4e47c:	1887883a 	add	r3,r3,r2
   4e480:	e0bffd17 	ldw	r2,-12(fp)
   4e484:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4e488:	e0bffd17 	ldw	r2,-12(fp)
   4e48c:	10c00217 	ldw	r3,8(r2)
   4e490:	d0a74017 	ldw	r2,-25344(gp)
   4e494:	1880032e 	bgeu	r3,r2,4e4a4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4e498:	e0bffd17 	ldw	r2,-12(fp)
   4e49c:	00c00044 	movi	r3,1
   4e4a0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4e4a4:	e0bffe17 	ldw	r2,-8(fp)
   4e4a8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4e4ac:	e0fffd17 	ldw	r3,-12(fp)
   4e4b0:	d0a02b04 	addi	r2,gp,-32596
   4e4b4:	18bfcf1e 	bne	r3,r2,4e3f4 <__alt_data_end+0xfffd8894>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4e4b8:	0044ec40 	call	44ec4 <OSTimeTick>
}
   4e4bc:	e037883a 	mov	sp,fp
   4e4c0:	dfc00117 	ldw	ra,4(sp)
   4e4c4:	df000017 	ldw	fp,0(sp)
   4e4c8:	dec00204 	addi	sp,sp,8
   4e4cc:	f800283a 	ret

0004e4d0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4e4d0:	deffff04 	addi	sp,sp,-4
   4e4d4:	df000015 	stw	fp,0(sp)
   4e4d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4e4dc:	000170fa 	wrctl	ienable,zero
}
   4e4e0:	e037883a 	mov	sp,fp
   4e4e4:	df000017 	ldw	fp,0(sp)
   4e4e8:	dec00104 	addi	sp,sp,4
   4e4ec:	f800283a 	ret

0004e4f0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   4e4f0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   4e4f4:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   4e4f8:	d1273917 	ldw	r4,-25372(gp)

      stw ra,  0(sp)
   4e4fc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   4e500:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   4e504:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   4e508:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   4e50c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   4e510:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   4e514:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   4e518:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   4e51c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   4e520:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   4e524:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   4e528:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   4e52c:	004e8f40 	call	4e8f4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   4e530:	d1273417 	ldw	r4,-25392(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   4e534:	d1672c07 	ldb	r5,-25424(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   4e538:	d1273915 	stw	r4,-25372(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   4e53c:	d1672c45 	stb	r5,-25423(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   4e540:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   4e544:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   4e548:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   4e54c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   4e550:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   4e554:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   4e558:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   4e55c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   4e560:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   4e564:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   4e568:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   4e56c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   4e570:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   4e574:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   4e578:	f800283a 	ret

0004e57c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   4e57c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   4e580:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   4e584:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   4e588:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   4e58c:	004e8f40 	call	4e8f4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   4e590:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   4e594:	d4a72a45 	stb	r18,-25431(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   4e598:	003fe506 	br	4e530 <__alt_data_end+0xfffd89d0>

0004e59c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   4e59c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   4e5a0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   4e5a4:	10800054 	ori	r2,r2,1
      wrctl status, r2
   4e5a8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   4e5ac:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   4e5b0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   4e5b4:	dec00204 	addi	sp,sp,8

      callr r2
   4e5b8:	103ee83a 	callr	r2

      nop
   4e5bc:	0001883a 	nop

0004e5c0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   4e5c0:	defff704 	addi	sp,sp,-36
   4e5c4:	dfc00815 	stw	ra,32(sp)
   4e5c8:	df000715 	stw	fp,28(sp)
   4e5cc:	df000704 	addi	fp,sp,28
   4e5d0:	e13ffc15 	stw	r4,-16(fp)
   4e5d4:	e17ffd15 	stw	r5,-12(fp)
   4e5d8:	e1bffe15 	stw	r6,-8(fp)
   4e5dc:	3805883a 	mov	r2,r7
   4e5e0:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   4e5e4:	e0fffe17 	ldw	r3,-8(fp)
   4e5e8:	00bfff04 	movi	r2,-4
   4e5ec:	1884703a 	and	r2,r3,r2
   4e5f0:	10bef704 	addi	r2,r2,-1060
   4e5f4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   4e5f8:	e0bff917 	ldw	r2,-28(fp)
   4e5fc:	10000015 	stw	zero,0(r2)
   4e600:	e0bff917 	ldw	r2,-28(fp)
   4e604:	10c0bb04 	addi	r3,r2,748
   4e608:	e0bff917 	ldw	r2,-28(fp)
   4e60c:	10c00115 	stw	r3,4(r2)
   4e610:	e0bff917 	ldw	r2,-28(fp)
   4e614:	10c0d504 	addi	r3,r2,852
   4e618:	e0bff917 	ldw	r2,-28(fp)
   4e61c:	10c00215 	stw	r3,8(r2)
   4e620:	e0bff917 	ldw	r2,-28(fp)
   4e624:	10c0ef04 	addi	r3,r2,956
   4e628:	e0bff917 	ldw	r2,-28(fp)
   4e62c:	10c00315 	stw	r3,12(r2)
   4e630:	e0bff917 	ldw	r2,-28(fp)
   4e634:	10000415 	stw	zero,16(r2)
   4e638:	e0bff917 	ldw	r2,-28(fp)
   4e63c:	10800504 	addi	r2,r2,20
   4e640:	1009883a 	mov	r4,r2
   4e644:	000b883a 	mov	r5,zero
   4e648:	01800644 	movi	r6,25
   4e64c:	0042f500 	call	42f50 <memset>
   4e650:	e0bff917 	ldw	r2,-28(fp)
   4e654:	10000c15 	stw	zero,48(r2)
   4e658:	e0fff917 	ldw	r3,-28(fp)
   4e65c:	00800174 	movhi	r2,5
   4e660:	10bcd804 	addi	r2,r2,-3232
   4e664:	18800d15 	stw	r2,52(r3)
   4e668:	e0bff917 	ldw	r2,-28(fp)
   4e66c:	10000e15 	stw	zero,56(r2)
   4e670:	e0bff917 	ldw	r2,-28(fp)
   4e674:	10000f15 	stw	zero,60(r2)
   4e678:	e0bff917 	ldw	r2,-28(fp)
   4e67c:	10001015 	stw	zero,64(r2)
   4e680:	e0bff917 	ldw	r2,-28(fp)
   4e684:	10001115 	stw	zero,68(r2)
   4e688:	e0bff917 	ldw	r2,-28(fp)
   4e68c:	10001215 	stw	zero,72(r2)
   4e690:	e0bff917 	ldw	r2,-28(fp)
   4e694:	10001315 	stw	zero,76(r2)
   4e698:	e0bff917 	ldw	r2,-28(fp)
   4e69c:	10001415 	stw	zero,80(r2)
   4e6a0:	e0bff917 	ldw	r2,-28(fp)
   4e6a4:	10001515 	stw	zero,84(r2)
   4e6a8:	e0bff917 	ldw	r2,-28(fp)
   4e6ac:	10001615 	stw	zero,88(r2)
   4e6b0:	e0bff917 	ldw	r2,-28(fp)
   4e6b4:	10001715 	stw	zero,92(r2)
   4e6b8:	e0bff917 	ldw	r2,-28(fp)
   4e6bc:	10001805 	stb	zero,96(r2)
   4e6c0:	e0bff917 	ldw	r2,-28(fp)
   4e6c4:	10801f04 	addi	r2,r2,124
   4e6c8:	1009883a 	mov	r4,r2
   4e6cc:	000b883a 	mov	r5,zero
   4e6d0:	01800904 	movi	r6,36
   4e6d4:	0042f500 	call	42f50 <memset>
   4e6d8:	e0bff917 	ldw	r2,-28(fp)
   4e6dc:	10002815 	stw	zero,160(r2)
   4e6e0:	e0bff917 	ldw	r2,-28(fp)
   4e6e4:	00c00044 	movi	r3,1
   4e6e8:	10c02915 	stw	r3,164(r2)
   4e6ec:	10002a15 	stw	zero,168(r2)
   4e6f0:	e0bff917 	ldw	r2,-28(fp)
   4e6f4:	00ccc384 	movi	r3,13070
   4e6f8:	10c02b0d 	sth	r3,172(r2)
   4e6fc:	e0bff917 	ldw	r2,-28(fp)
   4e700:	00eaf344 	movi	r3,-21555
   4e704:	10c02b8d 	sth	r3,174(r2)
   4e708:	e0bff917 	ldw	r2,-28(fp)
   4e70c:	00c48d04 	movi	r3,4660
   4e710:	10c02c0d 	sth	r3,176(r2)
   4e714:	e0bff917 	ldw	r2,-28(fp)
   4e718:	00f99b44 	movi	r3,-6547
   4e71c:	10c02c8d 	sth	r3,178(r2)
   4e720:	e0bff917 	ldw	r2,-28(fp)
   4e724:	00f7bb04 	movi	r3,-8468
   4e728:	10c02d0d 	sth	r3,180(r2)
   4e72c:	e0bff917 	ldw	r2,-28(fp)
   4e730:	00c00144 	movi	r3,5
   4e734:	10c02d8d 	sth	r3,182(r2)
   4e738:	e0bff917 	ldw	r2,-28(fp)
   4e73c:	00c002c4 	movi	r3,11
   4e740:	10c02e0d 	sth	r3,184(r2)
   4e744:	e0bff917 	ldw	r2,-28(fp)
   4e748:	10002f15 	stw	zero,188(r2)
   4e74c:	e0bff917 	ldw	r2,-28(fp)
   4e750:	10003015 	stw	zero,192(r2)
   4e754:	e0bff917 	ldw	r2,-28(fp)
   4e758:	10003115 	stw	zero,196(r2)
   4e75c:	e0bff917 	ldw	r2,-28(fp)
   4e760:	10003215 	stw	zero,200(r2)
   4e764:	e0bff917 	ldw	r2,-28(fp)
   4e768:	10003315 	stw	zero,204(r2)
   4e76c:	e0bff917 	ldw	r2,-28(fp)
   4e770:	10003415 	stw	zero,208(r2)
   4e774:	e0bff917 	ldw	r2,-28(fp)
   4e778:	10003e15 	stw	zero,248(r2)
   4e77c:	e0bff917 	ldw	r2,-28(fp)
   4e780:	10003f15 	stw	zero,252(r2)
   4e784:	e0bff917 	ldw	r2,-28(fp)
   4e788:	10004015 	stw	zero,256(r2)
   4e78c:	e0bff917 	ldw	r2,-28(fp)
   4e790:	10004115 	stw	zero,260(r2)
   4e794:	e0bff917 	ldw	r2,-28(fp)
   4e798:	10004215 	stw	zero,264(r2)
   4e79c:	e0bff917 	ldw	r2,-28(fp)
   4e7a0:	10004315 	stw	zero,268(r2)
   4e7a4:	e0bff917 	ldw	r2,-28(fp)
   4e7a8:	10004415 	stw	zero,272(r2)
   4e7ac:	e0bff917 	ldw	r2,-28(fp)
   4e7b0:	10004515 	stw	zero,276(r2)
   4e7b4:	e0bff917 	ldw	r2,-28(fp)
   4e7b8:	10004615 	stw	zero,280(r2)
   4e7bc:	e0bff917 	ldw	r2,-28(fp)
   4e7c0:	10004715 	stw	zero,284(r2)
   4e7c4:	e0bff917 	ldw	r2,-28(fp)
   4e7c8:	10003505 	stb	zero,212(r2)
   4e7cc:	e0bff917 	ldw	r2,-28(fp)
   4e7d0:	10003705 	stb	zero,220(r2)
   4e7d4:	e0bff917 	ldw	r2,-28(fp)
   4e7d8:	10003d15 	stw	zero,244(r2)
   4e7dc:	e0bff917 	ldw	r2,-28(fp)
   4e7e0:	10005215 	stw	zero,328(r2)
   4e7e4:	e0bff917 	ldw	r2,-28(fp)
   4e7e8:	10005315 	stw	zero,332(r2)
   4e7ec:	e0bff917 	ldw	r2,-28(fp)
   4e7f0:	10005415 	stw	zero,336(r2)
   4e7f4:	e0bff917 	ldw	r2,-28(fp)
   4e7f8:	10005515 	stw	zero,340(r2)
   4e7fc:	e0bff917 	ldw	r2,-28(fp)
   4e800:	1000b515 	stw	zero,724(r2)
   4e804:	e0bff917 	ldw	r2,-28(fp)
   4e808:	10007515 	stw	zero,468(r2)
   4e80c:	e0bff917 	ldw	r2,-28(fp)
   4e810:	1000b715 	stw	zero,732(r2)
   4e814:	e0bff917 	ldw	r2,-28(fp)
   4e818:	1000b815 	stw	zero,736(r2)
   4e81c:	e0bff917 	ldw	r2,-28(fp)
   4e820:	1000b915 	stw	zero,740(r2)
   4e824:	e0bff917 	ldw	r2,-28(fp)
   4e828:	1000ba15 	stw	zero,744(r2)
   4e82c:	e0bff917 	ldw	r2,-28(fp)
   4e830:	1080bb04 	addi	r2,r2,748
   4e834:	1009883a 	mov	r4,r2
   4e838:	000b883a 	mov	r5,zero
   4e83c:	01804e04 	movi	r6,312
   4e840:	0042f500 	call	42f50 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   4e844:	e0bff917 	ldw	r2,-28(fp)
   4e848:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   4e84c:	e0bffa17 	ldw	r2,-24(fp)
   4e850:	10bff304 	addi	r2,r2,-52
   4e854:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   4e858:	e0bffb17 	ldw	r2,-20(fp)
   4e85c:	10800c04 	addi	r2,r2,48
   4e860:	e0fffc17 	ldw	r3,-16(fp)
   4e864:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   4e868:	e0bffb17 	ldw	r2,-20(fp)
   4e86c:	10800b04 	addi	r2,r2,44
   4e870:	e0fffd17 	ldw	r3,-12(fp)
   4e874:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   4e878:	e0bffb17 	ldw	r2,-20(fp)
   4e87c:	10800a04 	addi	r2,r2,40
   4e880:	e0fff917 	ldw	r3,-28(fp)
   4e884:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   4e888:	00800174 	movhi	r2,5
   4e88c:	10b96704 	addi	r2,r2,-6756
   4e890:	10c00104 	addi	r3,r2,4
   4e894:	e0bffb17 	ldw	r2,-20(fp)
   4e898:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   4e89c:	e0bffb17 	ldw	r2,-20(fp)
}
   4e8a0:	e037883a 	mov	sp,fp
   4e8a4:	dfc00117 	ldw	ra,4(sp)
   4e8a8:	df000017 	ldw	fp,0(sp)
   4e8ac:	dec00204 	addi	sp,sp,8
   4e8b0:	f800283a 	ret

0004e8b4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   4e8b4:	defffe04 	addi	sp,sp,-8
   4e8b8:	df000115 	stw	fp,4(sp)
   4e8bc:	df000104 	addi	fp,sp,4
   4e8c0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   4e8c4:	e037883a 	mov	sp,fp
   4e8c8:	df000017 	ldw	fp,0(sp)
   4e8cc:	dec00104 	addi	sp,sp,4
   4e8d0:	f800283a 	ret

0004e8d4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   4e8d4:	defffe04 	addi	sp,sp,-8
   4e8d8:	df000115 	stw	fp,4(sp)
   4e8dc:	df000104 	addi	fp,sp,4
   4e8e0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   4e8e4:	e037883a 	mov	sp,fp
   4e8e8:	df000017 	ldw	fp,0(sp)
   4e8ec:	dec00104 	addi	sp,sp,4
   4e8f0:	f800283a 	ret

0004e8f4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   4e8f4:	deffff04 	addi	sp,sp,-4
   4e8f8:	df000015 	stw	fp,0(sp)
   4e8fc:	d839883a 	mov	fp,sp
}
   4e900:	e037883a 	mov	sp,fp
   4e904:	df000017 	ldw	fp,0(sp)
   4e908:	dec00104 	addi	sp,sp,4
   4e90c:	f800283a 	ret

0004e910 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   4e910:	deffff04 	addi	sp,sp,-4
   4e914:	df000015 	stw	fp,0(sp)
   4e918:	d839883a 	mov	fp,sp
}
   4e91c:	e037883a 	mov	sp,fp
   4e920:	df000017 	ldw	fp,0(sp)
   4e924:	dec00104 	addi	sp,sp,4
   4e928:	f800283a 	ret

0004e92c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   4e92c:	deffff04 	addi	sp,sp,-4
   4e930:	df000015 	stw	fp,0(sp)
   4e934:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   4e938:	e037883a 	mov	sp,fp
   4e93c:	df000017 	ldw	fp,0(sp)
   4e940:	dec00104 	addi	sp,sp,4
   4e944:	f800283a 	ret

0004e948 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   4e948:	deffff04 	addi	sp,sp,-4
   4e94c:	df000015 	stw	fp,0(sp)
   4e950:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   4e954:	e037883a 	mov	sp,fp
   4e958:	df000017 	ldw	fp,0(sp)
   4e95c:	dec00104 	addi	sp,sp,4
   4e960:	f800283a 	ret

0004e964 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   4e964:	deffff04 	addi	sp,sp,-4
   4e968:	df000015 	stw	fp,0(sp)
   4e96c:	d839883a 	mov	fp,sp
}
   4e970:	e037883a 	mov	sp,fp
   4e974:	df000017 	ldw	fp,0(sp)
   4e978:	dec00104 	addi	sp,sp,4
   4e97c:	f800283a 	ret

0004e980 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   4e980:	deffff04 	addi	sp,sp,-4
   4e984:	df000015 	stw	fp,0(sp)
   4e988:	d839883a 	mov	fp,sp
}
   4e98c:	e037883a 	mov	sp,fp
   4e990:	df000017 	ldw	fp,0(sp)
   4e994:	dec00104 	addi	sp,sp,4
   4e998:	f800283a 	ret

0004e99c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   4e99c:	defffe04 	addi	sp,sp,-8
   4e9a0:	df000115 	stw	fp,4(sp)
   4e9a4:	df000104 	addi	fp,sp,4
   4e9a8:	e13fff15 	stw	r4,-4(fp)
}
   4e9ac:	e037883a 	mov	sp,fp
   4e9b0:	df000017 	ldw	fp,0(sp)
   4e9b4:	dec00104 	addi	sp,sp,4
   4e9b8:	f800283a 	ret

0004e9bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4e9bc:	defffa04 	addi	sp,sp,-24
   4e9c0:	dfc00515 	stw	ra,20(sp)
   4e9c4:	df000415 	stw	fp,16(sp)
   4e9c8:	df000404 	addi	fp,sp,16
   4e9cc:	e13ffe15 	stw	r4,-8(fp)
   4e9d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4e9d4:	e0bfff17 	ldw	r2,-4(fp)
   4e9d8:	10800017 	ldw	r2,0(r2)
   4e9dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4e9e0:	e13ffe17 	ldw	r4,-8(fp)
   4e9e4:	0040a840 	call	40a84 <strlen>
   4e9e8:	10800044 	addi	r2,r2,1
   4e9ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4e9f0:	00000d06 	br	4ea28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4e9f4:	e0bffc17 	ldw	r2,-16(fp)
   4e9f8:	10c00217 	ldw	r3,8(r2)
   4e9fc:	e0bffd17 	ldw	r2,-12(fp)
   4ea00:	1809883a 	mov	r4,r3
   4ea04:	e17ffe17 	ldw	r5,-8(fp)
   4ea08:	100d883a 	mov	r6,r2
   4ea0c:	004ed5c0 	call	4ed5c <memcmp>
   4ea10:	1000021e 	bne	r2,zero,4ea1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4ea14:	e0bffc17 	ldw	r2,-16(fp)
   4ea18:	00000706 	br	4ea38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4ea1c:	e0bffc17 	ldw	r2,-16(fp)
   4ea20:	10800017 	ldw	r2,0(r2)
   4ea24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4ea28:	e0fffc17 	ldw	r3,-16(fp)
   4ea2c:	e0bfff17 	ldw	r2,-4(fp)
   4ea30:	18bff01e 	bne	r3,r2,4e9f4 <__alt_data_end+0xfffd8e94>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4ea34:	0005883a 	mov	r2,zero
}
   4ea38:	e037883a 	mov	sp,fp
   4ea3c:	dfc00117 	ldw	ra,4(sp)
   4ea40:	df000017 	ldw	fp,0(sp)
   4ea44:	dec00204 	addi	sp,sp,8
   4ea48:	f800283a 	ret

0004ea4c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4ea4c:	defffb04 	addi	sp,sp,-20
   4ea50:	dfc00415 	stw	ra,16(sp)
   4ea54:	df000315 	stw	fp,12(sp)
   4ea58:	df000304 	addi	fp,sp,12
   4ea5c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4ea60:	00800174 	movhi	r2,5
   4ea64:	1083a104 	addi	r2,r2,3716
   4ea68:	10800017 	ldw	r2,0(r2)
   4ea6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4ea70:	00003106 	br	4eb38 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   4ea74:	e0bffd17 	ldw	r2,-12(fp)
   4ea78:	10800217 	ldw	r2,8(r2)
   4ea7c:	1009883a 	mov	r4,r2
   4ea80:	0040a840 	call	40a84 <strlen>
   4ea84:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4ea88:	e0bffd17 	ldw	r2,-12(fp)
   4ea8c:	10c00217 	ldw	r3,8(r2)
   4ea90:	e0bffe17 	ldw	r2,-8(fp)
   4ea94:	10bfffc4 	addi	r2,r2,-1
   4ea98:	1885883a 	add	r2,r3,r2
   4ea9c:	10800003 	ldbu	r2,0(r2)
   4eaa0:	10803fcc 	andi	r2,r2,255
   4eaa4:	1080201c 	xori	r2,r2,128
   4eaa8:	10bfe004 	addi	r2,r2,-128
   4eaac:	10800bd8 	cmpnei	r2,r2,47
   4eab0:	1000031e 	bne	r2,zero,4eac0 <alt_find_file+0x74>
    {
      len -= 1;
   4eab4:	e0bffe17 	ldw	r2,-8(fp)
   4eab8:	10bfffc4 	addi	r2,r2,-1
   4eabc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4eac0:	e0bffe17 	ldw	r2,-8(fp)
   4eac4:	e0ffff17 	ldw	r3,-4(fp)
   4eac8:	1885883a 	add	r2,r3,r2
   4eacc:	10800003 	ldbu	r2,0(r2)
   4ead0:	10803fcc 	andi	r2,r2,255
   4ead4:	1080201c 	xori	r2,r2,128
   4ead8:	10bfe004 	addi	r2,r2,-128
   4eadc:	10800be0 	cmpeqi	r2,r2,47
   4eae0:	1000081e 	bne	r2,zero,4eb04 <alt_find_file+0xb8>
   4eae4:	e0bffe17 	ldw	r2,-8(fp)
   4eae8:	e0ffff17 	ldw	r3,-4(fp)
   4eaec:	1885883a 	add	r2,r3,r2
   4eaf0:	10800003 	ldbu	r2,0(r2)
   4eaf4:	10803fcc 	andi	r2,r2,255
   4eaf8:	1080201c 	xori	r2,r2,128
   4eafc:	10bfe004 	addi	r2,r2,-128
   4eb00:	10000a1e 	bne	r2,zero,4eb2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4eb04:	e0bffd17 	ldw	r2,-12(fp)
   4eb08:	10c00217 	ldw	r3,8(r2)
   4eb0c:	e0bffe17 	ldw	r2,-8(fp)
   4eb10:	1809883a 	mov	r4,r3
   4eb14:	e17fff17 	ldw	r5,-4(fp)
   4eb18:	100d883a 	mov	r6,r2
   4eb1c:	004ed5c0 	call	4ed5c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4eb20:	1000021e 	bne	r2,zero,4eb2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4eb24:	e0bffd17 	ldw	r2,-12(fp)
   4eb28:	00000806 	br	4eb4c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   4eb2c:	e0bffd17 	ldw	r2,-12(fp)
   4eb30:	10800017 	ldw	r2,0(r2)
   4eb34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4eb38:	e0fffd17 	ldw	r3,-12(fp)
   4eb3c:	00800174 	movhi	r2,5
   4eb40:	1083a104 	addi	r2,r2,3716
   4eb44:	18bfcb1e 	bne	r3,r2,4ea74 <__alt_data_end+0xfffd8f14>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4eb48:	0005883a 	mov	r2,zero
}
   4eb4c:	e037883a 	mov	sp,fp
   4eb50:	dfc00117 	ldw	ra,4(sp)
   4eb54:	df000017 	ldw	fp,0(sp)
   4eb58:	dec00204 	addi	sp,sp,8
   4eb5c:	f800283a 	ret

0004eb60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4eb60:	defff804 	addi	sp,sp,-32
   4eb64:	dfc00715 	stw	ra,28(sp)
   4eb68:	df000615 	stw	fp,24(sp)
   4eb6c:	dc000515 	stw	r16,20(sp)
   4eb70:	df000604 	addi	fp,sp,24
   4eb74:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   4eb78:	00bffa04 	movi	r2,-24
   4eb7c:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   4eb80:	00800174 	movhi	r2,5
   4eb84:	108abf04 	addi	r2,r2,11004
   4eb88:	10800017 	ldw	r2,0(r2)
   4eb8c:	e0bffc15 	stw	r2,-16(fp)
   4eb90:	e03ffd0d 	sth	zero,-12(fp)
   4eb94:	e0fffd0b 	ldhu	r3,-12(fp)
   4eb98:	e0bffd84 	addi	r2,fp,-10
   4eb9c:	e13ffc17 	ldw	r4,-16(fp)
   4eba0:	180b883a 	mov	r5,r3
   4eba4:	100d883a 	mov	r6,r2
   4eba8:	004995c0 	call	4995c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4ebac:	e03ffa15 	stw	zero,-24(fp)
   4ebb0:	00002106 	br	4ec38 <alt_get_fd+0xd8>
  {
    if (!alt_fd_list[i].dev)
   4ebb4:	04000174 	movhi	r16,5
   4ebb8:	843eee04 	addi	r16,r16,-1096
   4ebbc:	e0bffa17 	ldw	r2,-24(fp)
   4ebc0:	1009883a 	mov	r4,r2
   4ebc4:	01400304 	movi	r5,12
   4ebc8:	00434d80 	call	434d8 <__mulsi3>
   4ebcc:	8085883a 	add	r2,r16,r2
   4ebd0:	10800017 	ldw	r2,0(r2)
   4ebd4:	1000151e 	bne	r2,zero,4ec2c <alt_get_fd+0xcc>
    {
      alt_fd_list[i].dev = dev;
   4ebd8:	04000174 	movhi	r16,5
   4ebdc:	843eee04 	addi	r16,r16,-1096
   4ebe0:	e0bffa17 	ldw	r2,-24(fp)
   4ebe4:	1009883a 	mov	r4,r2
   4ebe8:	01400304 	movi	r5,12
   4ebec:	00434d80 	call	434d8 <__mulsi3>
   4ebf0:	8085883a 	add	r2,r16,r2
   4ebf4:	e0fffe17 	ldw	r3,-8(fp)
   4ebf8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4ebfc:	00800174 	movhi	r2,5
   4ec00:	1083a504 	addi	r2,r2,3732
   4ec04:	10c00017 	ldw	r3,0(r2)
   4ec08:	e0bffa17 	ldw	r2,-24(fp)
   4ec0c:	1880040e 	bge	r3,r2,4ec20 <alt_get_fd+0xc0>
      {
        alt_max_fd = i;
   4ec10:	00800174 	movhi	r2,5
   4ec14:	1083a504 	addi	r2,r2,3732
   4ec18:	e0fffa17 	ldw	r3,-24(fp)
   4ec1c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4ec20:	e0bffa17 	ldw	r2,-24(fp)
   4ec24:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
   4ec28:	00000606 	br	4ec44 <alt_get_fd+0xe4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4ec2c:	e0bffa17 	ldw	r2,-24(fp)
   4ec30:	10800044 	addi	r2,r2,1
   4ec34:	e0bffa15 	stw	r2,-24(fp)
   4ec38:	e0bffa17 	ldw	r2,-24(fp)
   4ec3c:	10800810 	cmplti	r2,r2,32
   4ec40:	103fdc1e 	bne	r2,zero,4ebb4 <__alt_data_end+0xfffd9054>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   4ec44:	00800174 	movhi	r2,5
   4ec48:	108abf04 	addi	r2,r2,11004
   4ec4c:	10800017 	ldw	r2,0(r2)
   4ec50:	1009883a 	mov	r4,r2
   4ec54:	0049d300 	call	49d30 <OSSemPost>

  return rc;
   4ec58:	e0bffb17 	ldw	r2,-20(fp)
}
   4ec5c:	e6ffff04 	addi	sp,fp,-4
   4ec60:	dfc00217 	ldw	ra,8(sp)
   4ec64:	df000117 	ldw	fp,4(sp)
   4ec68:	dc000017 	ldw	r16,0(sp)
   4ec6c:	dec00304 	addi	sp,sp,12
   4ec70:	f800283a 	ret

0004ec74 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4ec74:	defffe04 	addi	sp,sp,-8
   4ec78:	df000115 	stw	fp,4(sp)
   4ec7c:	df000104 	addi	fp,sp,4
   4ec80:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4ec84:	e0bfff17 	ldw	r2,-4(fp)
   4ec88:	10bffe84 	addi	r2,r2,-6
   4ec8c:	10c00428 	cmpgeui	r3,r2,16
   4ec90:	18001a1e 	bne	r3,zero,4ecfc <alt_exception_cause_generated_bad_addr+0x88>
   4ec94:	100690ba 	slli	r3,r2,2
   4ec98:	00800174 	movhi	r2,5
   4ec9c:	10bb2b04 	addi	r2,r2,-4948
   4eca0:	1885883a 	add	r2,r3,r2
   4eca4:	10800017 	ldw	r2,0(r2)
   4eca8:	1000683a 	jmp	r2
   4ecac:	0004ecec 	andhi	zero,zero,5043
   4ecb0:	0004ecec 	andhi	zero,zero,5043
   4ecb4:	0004ecfc 	xorhi	zero,zero,5043
   4ecb8:	0004ecfc 	xorhi	zero,zero,5043
   4ecbc:	0004ecfc 	xorhi	zero,zero,5043
   4ecc0:	0004ecec 	andhi	zero,zero,5043
   4ecc4:	0004ecf4 	movhi	zero,5043
   4ecc8:	0004ecfc 	xorhi	zero,zero,5043
   4eccc:	0004ecec 	andhi	zero,zero,5043
   4ecd0:	0004ecec 	andhi	zero,zero,5043
   4ecd4:	0004ecfc 	xorhi	zero,zero,5043
   4ecd8:	0004ecec 	andhi	zero,zero,5043
   4ecdc:	0004ecf4 	movhi	zero,5043
   4ece0:	0004ecfc 	xorhi	zero,zero,5043
   4ece4:	0004ecfc 	xorhi	zero,zero,5043
   4ece8:	0004ecec 	andhi	zero,zero,5043
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   4ecec:	00800044 	movi	r2,1
   4ecf0:	00000306 	br	4ed00 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   4ecf4:	0005883a 	mov	r2,zero
   4ecf8:	00000106 	br	4ed00 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   4ecfc:	0005883a 	mov	r2,zero
  }
}
   4ed00:	e037883a 	mov	sp,fp
   4ed04:	df000017 	ldw	fp,0(sp)
   4ed08:	dec00104 	addi	sp,sp,4
   4ed0c:	f800283a 	ret

0004ed10 <atexit>:
   4ed10:	200b883a 	mov	r5,r4
   4ed14:	000d883a 	mov	r6,zero
   4ed18:	0009883a 	mov	r4,zero
   4ed1c:	000f883a 	mov	r7,zero
   4ed20:	004edd81 	jmpi	4edd8 <__register_exitproc>

0004ed24 <exit>:
   4ed24:	defffe04 	addi	sp,sp,-8
   4ed28:	000b883a 	mov	r5,zero
   4ed2c:	dc000015 	stw	r16,0(sp)
   4ed30:	dfc00115 	stw	ra,4(sp)
   4ed34:	2021883a 	mov	r16,r4
   4ed38:	004eeec0 	call	4eeec <__call_exitprocs>
   4ed3c:	00800174 	movhi	r2,5
   4ed40:	10839d04 	addi	r2,r2,3700
   4ed44:	11000017 	ldw	r4,0(r2)
   4ed48:	20800f17 	ldw	r2,60(r4)
   4ed4c:	10000126 	beq	r2,zero,4ed54 <exit+0x30>
   4ed50:	103ee83a 	callr	r2
   4ed54:	8009883a 	mov	r4,r16
   4ed58:	004f1ac0 	call	4f1ac <_exit>

0004ed5c <memcmp>:
   4ed5c:	01c000c4 	movi	r7,3
   4ed60:	3980192e 	bgeu	r7,r6,4edc8 <memcmp+0x6c>
   4ed64:	2144b03a 	or	r2,r4,r5
   4ed68:	11c4703a 	and	r2,r2,r7
   4ed6c:	10000f26 	beq	r2,zero,4edac <memcmp+0x50>
   4ed70:	20800003 	ldbu	r2,0(r4)
   4ed74:	28c00003 	ldbu	r3,0(r5)
   4ed78:	10c0151e 	bne	r2,r3,4edd0 <memcmp+0x74>
   4ed7c:	31bfff84 	addi	r6,r6,-2
   4ed80:	01ffffc4 	movi	r7,-1
   4ed84:	00000406 	br	4ed98 <memcmp+0x3c>
   4ed88:	20800003 	ldbu	r2,0(r4)
   4ed8c:	28c00003 	ldbu	r3,0(r5)
   4ed90:	31bfffc4 	addi	r6,r6,-1
   4ed94:	10c00e1e 	bne	r2,r3,4edd0 <memcmp+0x74>
   4ed98:	21000044 	addi	r4,r4,1
   4ed9c:	29400044 	addi	r5,r5,1
   4eda0:	31fff91e 	bne	r6,r7,4ed88 <__alt_data_end+0xfffd9228>
   4eda4:	0005883a 	mov	r2,zero
   4eda8:	f800283a 	ret
   4edac:	20c00017 	ldw	r3,0(r4)
   4edb0:	28800017 	ldw	r2,0(r5)
   4edb4:	1880041e 	bne	r3,r2,4edc8 <memcmp+0x6c>
   4edb8:	31bfff04 	addi	r6,r6,-4
   4edbc:	21000104 	addi	r4,r4,4
   4edc0:	29400104 	addi	r5,r5,4
   4edc4:	39bff936 	bltu	r7,r6,4edac <__alt_data_end+0xfffd924c>
   4edc8:	303fe91e 	bne	r6,zero,4ed70 <__alt_data_end+0xfffd9210>
   4edcc:	003ff506 	br	4eda4 <__alt_data_end+0xfffd9244>
   4edd0:	10c5c83a 	sub	r2,r2,r3
   4edd4:	f800283a 	ret

0004edd8 <__register_exitproc>:
   4edd8:	00800174 	movhi	r2,5
   4eddc:	defffa04 	addi	sp,sp,-24
   4ede0:	10839d04 	addi	r2,r2,3700
   4ede4:	dc000315 	stw	r16,12(sp)
   4ede8:	14000017 	ldw	r16,0(r2)
   4edec:	dc400415 	stw	r17,16(sp)
   4edf0:	dfc00515 	stw	ra,20(sp)
   4edf4:	80805217 	ldw	r2,328(r16)
   4edf8:	2023883a 	mov	r17,r4
   4edfc:	10003626 	beq	r2,zero,4eed8 <__register_exitproc+0x100>
   4ee00:	10c00117 	ldw	r3,4(r2)
   4ee04:	010007c4 	movi	r4,31
   4ee08:	20c00e16 	blt	r4,r3,4ee44 <__register_exitproc+0x6c>
   4ee0c:	1a400044 	addi	r9,r3,1
   4ee10:	8800211e 	bne	r17,zero,4ee98 <__register_exitproc+0xc0>
   4ee14:	18c00084 	addi	r3,r3,2
   4ee18:	18c7883a 	add	r3,r3,r3
   4ee1c:	18c7883a 	add	r3,r3,r3
   4ee20:	12400115 	stw	r9,4(r2)
   4ee24:	10c7883a 	add	r3,r2,r3
   4ee28:	19400015 	stw	r5,0(r3)
   4ee2c:	0005883a 	mov	r2,zero
   4ee30:	dfc00517 	ldw	ra,20(sp)
   4ee34:	dc400417 	ldw	r17,16(sp)
   4ee38:	dc000317 	ldw	r16,12(sp)
   4ee3c:	dec00604 	addi	sp,sp,24
   4ee40:	f800283a 	ret
   4ee44:	00800034 	movhi	r2,0
   4ee48:	10800004 	addi	r2,r2,0
   4ee4c:	10002526 	beq	r2,zero,4eee4 <__register_exitproc+0x10c>
   4ee50:	01006404 	movi	r4,400
   4ee54:	d9400015 	stw	r5,0(sp)
   4ee58:	d9800115 	stw	r6,4(sp)
   4ee5c:	d9c00215 	stw	r7,8(sp)
   4ee60:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   4ee64:	d9400017 	ldw	r5,0(sp)
   4ee68:	d9800117 	ldw	r6,4(sp)
   4ee6c:	d9c00217 	ldw	r7,8(sp)
   4ee70:	10001c26 	beq	r2,zero,4eee4 <__register_exitproc+0x10c>
   4ee74:	80c05217 	ldw	r3,328(r16)
   4ee78:	10000115 	stw	zero,4(r2)
   4ee7c:	02400044 	movi	r9,1
   4ee80:	10c00015 	stw	r3,0(r2)
   4ee84:	80805215 	stw	r2,328(r16)
   4ee88:	10006215 	stw	zero,392(r2)
   4ee8c:	10006315 	stw	zero,396(r2)
   4ee90:	0007883a 	mov	r3,zero
   4ee94:	883fdf26 	beq	r17,zero,4ee14 <__alt_data_end+0xfffd92b4>
   4ee98:	18d1883a 	add	r8,r3,r3
   4ee9c:	4211883a 	add	r8,r8,r8
   4eea0:	1211883a 	add	r8,r2,r8
   4eea4:	41802215 	stw	r6,136(r8)
   4eea8:	01000044 	movi	r4,1
   4eeac:	11806217 	ldw	r6,392(r2)
   4eeb0:	20c8983a 	sll	r4,r4,r3
   4eeb4:	310cb03a 	or	r6,r6,r4
   4eeb8:	11806215 	stw	r6,392(r2)
   4eebc:	41c04215 	stw	r7,264(r8)
   4eec0:	01800084 	movi	r6,2
   4eec4:	89bfd31e 	bne	r17,r6,4ee14 <__alt_data_end+0xfffd92b4>
   4eec8:	11806317 	ldw	r6,396(r2)
   4eecc:	3108b03a 	or	r4,r6,r4
   4eed0:	11006315 	stw	r4,396(r2)
   4eed4:	003fcf06 	br	4ee14 <__alt_data_end+0xfffd92b4>
   4eed8:	80805304 	addi	r2,r16,332
   4eedc:	80805215 	stw	r2,328(r16)
   4eee0:	003fc706 	br	4ee00 <__alt_data_end+0xfffd92a0>
   4eee4:	00bfffc4 	movi	r2,-1
   4eee8:	003fd106 	br	4ee30 <__alt_data_end+0xfffd92d0>

0004eeec <__call_exitprocs>:
   4eeec:	00800174 	movhi	r2,5
   4eef0:	10839d04 	addi	r2,r2,3700
   4eef4:	10800017 	ldw	r2,0(r2)
   4eef8:	defff404 	addi	sp,sp,-48
   4eefc:	dd800815 	stw	r22,32(sp)
   4ef00:	d8800015 	stw	r2,0(sp)
   4ef04:	10805204 	addi	r2,r2,328
   4ef08:	dd000615 	stw	r20,24(sp)
   4ef0c:	dc800415 	stw	r18,16(sp)
   4ef10:	dfc00b15 	stw	ra,44(sp)
   4ef14:	df000a15 	stw	fp,40(sp)
   4ef18:	ddc00915 	stw	r23,36(sp)
   4ef1c:	dd400715 	stw	r21,28(sp)
   4ef20:	dcc00515 	stw	r19,20(sp)
   4ef24:	dc400315 	stw	r17,12(sp)
   4ef28:	dc000215 	stw	r16,8(sp)
   4ef2c:	2025883a 	mov	r18,r4
   4ef30:	2829883a 	mov	r20,r5
   4ef34:	d8800115 	stw	r2,4(sp)
   4ef38:	05bfffc4 	movi	r22,-1
   4ef3c:	d8800017 	ldw	r2,0(sp)
   4ef40:	14c05217 	ldw	r19,328(r2)
   4ef44:	98001d26 	beq	r19,zero,4efbc <__call_exitprocs+0xd0>
   4ef48:	dd400117 	ldw	r21,4(sp)
   4ef4c:	98800117 	ldw	r2,4(r19)
   4ef50:	173fffc4 	addi	fp,r2,-1
   4ef54:	e0000d16 	blt	fp,zero,4ef8c <__call_exitprocs+0xa0>
   4ef58:	14000044 	addi	r16,r2,1
   4ef5c:	8421883a 	add	r16,r16,r16
   4ef60:	8421883a 	add	r16,r16,r16
   4ef64:	84402004 	addi	r17,r16,128
   4ef68:	9c63883a 	add	r17,r19,r17
   4ef6c:	9c21883a 	add	r16,r19,r16
   4ef70:	a0001e26 	beq	r20,zero,4efec <__call_exitprocs+0x100>
   4ef74:	80804017 	ldw	r2,256(r16)
   4ef78:	15001c26 	beq	r2,r20,4efec <__call_exitprocs+0x100>
   4ef7c:	e73fffc4 	addi	fp,fp,-1
   4ef80:	843fff04 	addi	r16,r16,-4
   4ef84:	8c7fff04 	addi	r17,r17,-4
   4ef88:	e5bff91e 	bne	fp,r22,4ef70 <__alt_data_end+0xfffd9410>
   4ef8c:	00800034 	movhi	r2,0
   4ef90:	10800004 	addi	r2,r2,0
   4ef94:	10000926 	beq	r2,zero,4efbc <__call_exitprocs+0xd0>
   4ef98:	98800117 	ldw	r2,4(r19)
   4ef9c:	1000311e 	bne	r2,zero,4f064 <__call_exitprocs+0x178>
   4efa0:	98800017 	ldw	r2,0(r19)
   4efa4:	10003426 	beq	r2,zero,4f078 <__call_exitprocs+0x18c>
   4efa8:	9809883a 	mov	r4,r19
   4efac:	a8800015 	stw	r2,0(r21)
   4efb0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   4efb4:	acc00017 	ldw	r19,0(r21)
   4efb8:	983fe41e 	bne	r19,zero,4ef4c <__alt_data_end+0xfffd93ec>
   4efbc:	dfc00b17 	ldw	ra,44(sp)
   4efc0:	df000a17 	ldw	fp,40(sp)
   4efc4:	ddc00917 	ldw	r23,36(sp)
   4efc8:	dd800817 	ldw	r22,32(sp)
   4efcc:	dd400717 	ldw	r21,28(sp)
   4efd0:	dd000617 	ldw	r20,24(sp)
   4efd4:	dcc00517 	ldw	r19,20(sp)
   4efd8:	dc800417 	ldw	r18,16(sp)
   4efdc:	dc400317 	ldw	r17,12(sp)
   4efe0:	dc000217 	ldw	r16,8(sp)
   4efe4:	dec00c04 	addi	sp,sp,48
   4efe8:	f800283a 	ret
   4efec:	98800117 	ldw	r2,4(r19)
   4eff0:	80c00017 	ldw	r3,0(r16)
   4eff4:	10bfffc4 	addi	r2,r2,-1
   4eff8:	17001526 	beq	r2,fp,4f050 <__call_exitprocs+0x164>
   4effc:	80000015 	stw	zero,0(r16)
   4f000:	183fde26 	beq	r3,zero,4ef7c <__alt_data_end+0xfffd941c>
   4f004:	00800044 	movi	r2,1
   4f008:	1708983a 	sll	r4,r2,fp
   4f00c:	98806217 	ldw	r2,392(r19)
   4f010:	9dc00117 	ldw	r23,4(r19)
   4f014:	2084703a 	and	r2,r4,r2
   4f018:	1000061e 	bne	r2,zero,4f034 <__call_exitprocs+0x148>
   4f01c:	183ee83a 	callr	r3
   4f020:	98800117 	ldw	r2,4(r19)
   4f024:	15ffc51e 	bne	r2,r23,4ef3c <__alt_data_end+0xfffd93dc>
   4f028:	a8800017 	ldw	r2,0(r21)
   4f02c:	14ffd326 	beq	r2,r19,4ef7c <__alt_data_end+0xfffd941c>
   4f030:	003fc206 	br	4ef3c <__alt_data_end+0xfffd93dc>
   4f034:	98806317 	ldw	r2,396(r19)
   4f038:	2084703a 	and	r2,r4,r2
   4f03c:	1000061e 	bne	r2,zero,4f058 <__call_exitprocs+0x16c>
   4f040:	89400017 	ldw	r5,0(r17)
   4f044:	9009883a 	mov	r4,r18
   4f048:	183ee83a 	callr	r3
   4f04c:	003ff406 	br	4f020 <__alt_data_end+0xfffd94c0>
   4f050:	9f000115 	stw	fp,4(r19)
   4f054:	003fea06 	br	4f000 <__alt_data_end+0xfffd94a0>
   4f058:	89000017 	ldw	r4,0(r17)
   4f05c:	183ee83a 	callr	r3
   4f060:	003fef06 	br	4f020 <__alt_data_end+0xfffd94c0>
   4f064:	98800017 	ldw	r2,0(r19)
   4f068:	982b883a 	mov	r21,r19
   4f06c:	1027883a 	mov	r19,r2
   4f070:	983fb61e 	bne	r19,zero,4ef4c <__alt_data_end+0xfffd93ec>
   4f074:	003fd106 	br	4efbc <__alt_data_end+0xfffd945c>
   4f078:	0005883a 	mov	r2,zero
   4f07c:	003ffa06 	br	4f068 <__alt_data_end+0xfffd9508>

0004f080 <udivmodsi4>:
   4f080:	2900182e 	bgeu	r5,r4,4f0e4 <udivmodsi4+0x64>
   4f084:	28001716 	blt	r5,zero,4f0e4 <udivmodsi4+0x64>
   4f088:	00800804 	movi	r2,32
   4f08c:	00c00044 	movi	r3,1
   4f090:	00000206 	br	4f09c <udivmodsi4+0x1c>
   4f094:	10001126 	beq	r2,zero,4f0dc <udivmodsi4+0x5c>
   4f098:	28000516 	blt	r5,zero,4f0b0 <udivmodsi4+0x30>
   4f09c:	294b883a 	add	r5,r5,r5
   4f0a0:	10bfffc4 	addi	r2,r2,-1
   4f0a4:	18c7883a 	add	r3,r3,r3
   4f0a8:	293ffa36 	bltu	r5,r4,4f094 <__alt_data_end+0xfffd9534>
   4f0ac:	18000b26 	beq	r3,zero,4f0dc <udivmodsi4+0x5c>
   4f0b0:	0005883a 	mov	r2,zero
   4f0b4:	21400236 	bltu	r4,r5,4f0c0 <udivmodsi4+0x40>
   4f0b8:	2149c83a 	sub	r4,r4,r5
   4f0bc:	10c4b03a 	or	r2,r2,r3
   4f0c0:	1806d07a 	srli	r3,r3,1
   4f0c4:	280ad07a 	srli	r5,r5,1
   4f0c8:	183ffa1e 	bne	r3,zero,4f0b4 <__alt_data_end+0xfffd9554>
   4f0cc:	3000011e 	bne	r6,zero,4f0d4 <udivmodsi4+0x54>
   4f0d0:	f800283a 	ret
   4f0d4:	2005883a 	mov	r2,r4
   4f0d8:	f800283a 	ret
   4f0dc:	0005883a 	mov	r2,zero
   4f0e0:	003ffa06 	br	4f0cc <__alt_data_end+0xfffd956c>
   4f0e4:	00c00044 	movi	r3,1
   4f0e8:	003ff106 	br	4f0b0 <__alt_data_end+0xfffd9550>

0004f0ec <__divsi3>:
   4f0ec:	defffe04 	addi	sp,sp,-8
   4f0f0:	dfc00115 	stw	ra,4(sp)
   4f0f4:	dc000015 	stw	r16,0(sp)
   4f0f8:	20000b16 	blt	r4,zero,4f128 <__divsi3+0x3c>
   4f0fc:	0021883a 	mov	r16,zero
   4f100:	28000c16 	blt	r5,zero,4f134 <__divsi3+0x48>
   4f104:	000d883a 	mov	r6,zero
   4f108:	004f0800 	call	4f080 <udivmodsi4>
   4f10c:	0407c83a 	sub	r3,zero,r16
   4f110:	1884f03a 	xor	r2,r3,r2
   4f114:	1405883a 	add	r2,r2,r16
   4f118:	dfc00117 	ldw	ra,4(sp)
   4f11c:	dc000017 	ldw	r16,0(sp)
   4f120:	dec00204 	addi	sp,sp,8
   4f124:	f800283a 	ret
   4f128:	0109c83a 	sub	r4,zero,r4
   4f12c:	04000044 	movi	r16,1
   4f130:	283ff40e 	bge	r5,zero,4f104 <__alt_data_end+0xfffd95a4>
   4f134:	014bc83a 	sub	r5,zero,r5
   4f138:	8400005c 	xori	r16,r16,1
   4f13c:	003ff106 	br	4f104 <__alt_data_end+0xfffd95a4>

0004f140 <__modsi3>:
   4f140:	defffd04 	addi	sp,sp,-12
   4f144:	dfc00215 	stw	ra,8(sp)
   4f148:	dc400115 	stw	r17,4(sp)
   4f14c:	dc000015 	stw	r16,0(sp)
   4f150:	20000c16 	blt	r4,zero,4f184 <__modsi3+0x44>
   4f154:	0023883a 	mov	r17,zero
   4f158:	0021883a 	mov	r16,zero
   4f15c:	28000d16 	blt	r5,zero,4f194 <__modsi3+0x54>
   4f160:	01800044 	movi	r6,1
   4f164:	004f0800 	call	4f080 <udivmodsi4>
   4f168:	1404f03a 	xor	r2,r2,r16
   4f16c:	8885883a 	add	r2,r17,r2
   4f170:	dfc00217 	ldw	ra,8(sp)
   4f174:	dc400117 	ldw	r17,4(sp)
   4f178:	dc000017 	ldw	r16,0(sp)
   4f17c:	dec00304 	addi	sp,sp,12
   4f180:	f800283a 	ret
   4f184:	0109c83a 	sub	r4,zero,r4
   4f188:	04400044 	movi	r17,1
   4f18c:	043fffc4 	movi	r16,-1
   4f190:	283ff30e 	bge	r5,zero,4f160 <__alt_data_end+0xfffd9600>
   4f194:	014bc83a 	sub	r5,zero,r5
   4f198:	003ff106 	br	4f160 <__alt_data_end+0xfffd9600>

0004f19c <__udivsi3>:
   4f19c:	000d883a 	mov	r6,zero
   4f1a0:	004f0801 	jmpi	4f080 <udivmodsi4>

0004f1a4 <__umodsi3>:
   4f1a4:	01800044 	movi	r6,1
   4f1a8:	004f0801 	jmpi	4f080 <udivmodsi4>

0004f1ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4f1ac:	defffd04 	addi	sp,sp,-12
   4f1b0:	df000215 	stw	fp,8(sp)
   4f1b4:	df000204 	addi	fp,sp,8
   4f1b8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4f1bc:	00800174 	movhi	r2,5
   4f1c0:	108ac744 	addi	r2,r2,11037
   4f1c4:	10000005 	stb	zero,0(r2)
   4f1c8:	e0bfff17 	ldw	r2,-4(fp)
   4f1cc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   4f1d0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4f1d4:	10000226 	beq	r2,zero,4f1e0 <_exit+0x34>
    ALT_SIM_FAIL();
   4f1d8:	002af070 	cmpltui	zero,zero,43969
   4f1dc:	00000106 	br	4f1e4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   4f1e0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4f1e4:	003fff06 	br	4f1e4 <__alt_data_end+0xfffd9684>
