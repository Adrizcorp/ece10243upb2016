
practica_guitarra.elf:     file format elf32-littlenios2
practica_guitarra.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0004022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00006600 memsz 0x00006600 flags r-x
    LOAD off    0x00007620 vaddr 0x00046620 paddr 0x00048150 align 2**12
         filesz 0x00001b30 memsz 0x00001b30 flags rw-
    LOAD off    0x00009c80 vaddr 0x00049c80 paddr 0x00049c80 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000063a0  0004022c  0004022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000054  000465cc  000465cc  000075cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b30  00046620  00048150  00007620  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00049c80  00049c80  00009c80  2**2
                  ALLOC, SMALL_DATA
  6 .RAM_jesus    00000000  00049dd4  00049dd4  00009150  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009150  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ab8  00000000  00000000  00009178  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00018027  00000000  00000000  00009c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006974  00000000  00000000  00021c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007216  00000000  00000000  000285cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000196c  00000000  00000000  0002f7e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002b8b  00000000  00000000  00031150  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000487e  00000000  00000000  00033cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0003855c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000360  00000000  00000000  000385a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003b269  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003b26c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003b26f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003b270  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003b271  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003b27a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003b283  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  0003b28c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000042  00000000  00000000  0003b299  2**0
                  CONTENTS, READONLY
 26 .jdi          00003b78  00000000  00000000  0003b2db  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007db43  00000000  00000000  0003ee53  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
0004022c l    d  .text	00000000 .text
000465cc l    d  .rodata	00000000 .rodata
00046620 l    d  .rwdata	00000000 .rwdata
00049c80 l    d  .bss	00000000 .bss
00049dd4 l    d  .RAM_jesus	00000000 .RAM_jesus
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../practica_guitarra_bsp//obj/HAL/src/crt0.o
00040264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 karplus.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000404d0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00046620 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00042148 l     F .text	00000008 __fp_lock
00042150 l     F .text	00000008 __fp_unlock
00042164 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000432cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000433f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00043420 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00043528 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043624 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043708 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000438ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00048140 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00043ba0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043cf0 l     F .text	00000038 alt_dev_reg
00046ff4 l     O .rwdata	00001060 jtag_uart
00048054 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00044000 l     F .text	00000204 altera_avalon_jtag_uart_irq
00044204 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00044824 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00044ad8 l     F .text	00000098 altera_avalon_uart_irq
00044b70 l     F .text	000000e0 altera_avalon_uart_rxirq
00044c50 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00044de8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00045014 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000454c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004595c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00045ab4 l     F .text	00000050 alt_get_errno
00045b04 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00049ca8 g     O .bss	00000004 alt_instruction_exception_handler
000430b4 g     F .text	00000054 _isatty_r
00043834 g     F .text	00000078 alt_main
00040624 g     F .text	000000b8 _puts_r
00049cd4 g     O .bss	00000100 alt_irq
00043108 g     F .text	0000005c _lseek_r
00048150 g       *ABS*	00000000 __flash_rwdata_start
00049dd4 g       *ABS*	00000000 __alt_heap_start
00042e34 g     F .text	0000005c __sseek
000424ac g     F .text	00000010 __sinit
00042304 g     F .text	00000078 __sfmoreglue
000438cc g     F .text	00000020 __malloc_unlock
00041670 g     F .text	0000015c memmove
00042494 g     F .text	00000018 _cleanup
00045ef4 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004305c g     F .text	00000058 _fstat_r
00049c8c g     O .bss	00000004 errno
00042db0 g     F .text	00000008 __seofread
00049c94 g     O .bss	00000004 alt_argv
00050118 g       *ABS*	00000000 _gp
00043b70 g     F .text	00000030 usleep
00046e74 g     O .rwdata	00000180 alt_fd_list
00045f14 g     F .text	00000090 alt_find_dev
00041538 g     F .text	00000138 memcpy
00042158 g     F .text	0000000c _cleanup_r
00045a3c g     F .text	00000078 alt_io_redirect
000465cc g       *ABS*	00000000 __DTOR_END__
000406dc g     F .text	00000014 puts
0004618c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00044400 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000405ec g     F .text	00000008 .hidden __udivsi3
00043578 g     F .text	000000ac isatty
00049c88 g     O .bss	00000004 __malloc_top_pad
00040804 g     F .text	000004a4 __sfvwrite_r
00041d6c g     F .text	00000054 _sbrk_r
00043164 g     F .text	0000005c _read_r
00048138 g     O .rwdata	00000004 alt_max_fd
00042f48 g     F .text	00000100 _fclose_r
00042118 g     F .text	00000030 fflush
00049c84 g     O .bss	00000004 __malloc_max_sbrked_mem
00043758 g     F .text	000000dc lseek
00048118 g     O .rwdata	00000004 _global_impure_ptr
000417cc g     F .text	000005a0 _realloc_r
00049dd4 g       *ABS*	00000000 __bss_end
0004586c g     F .text	000000f0 alt_iic_isr_register
00045df0 g     F .text	00000104 alt_tick
00044a30 g     F .text	000000a8 altera_avalon_uart_init
000424cc g     F .text	00000018 __fp_lock_all
00045820 g     F .text	0000004c alt_ic_irq_enabled
00045d58 g     F .text	00000098 alt_alarm_stop
00049c9c g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d0 alt_irq_handler
00046e4c g     O .rwdata	00000028 alt_dev_null
000454a8 g     F .text	0000001c alt_dcache_flush_all
00048150 g       *ABS*	00000000 __ram_rwdata_end
00048130 g     O .rwdata	00000008 alt_dev_list
00043bf0 g     F .text	00000100 write
00046620 g       *ABS*	00000000 __ram_rodata_end
00043470 g     F .text	000000b8 fstat
000405f4 g     F .text	00000008 .hidden __umodsi3
00049dd4 g       *ABS*	00000000 end
00045064 g     F .text	000001ac altera_avalon_uart_write
00043f3c g     F .text	000000c4 altera_avalon_jtag_uart_init
000401cc g     F .exceptions	00000060 alt_instruction_exception_entry
000403a8 g     F .text	00000064 play_tone
000465cc g       *ABS*	00000000 __CTOR_LIST__
00075b60 g       *ABS*	00000000 __alt_stack_pointer
00044898 g     F .text	00000088 alt_avalon_timer_sc_init
00044980 g     F .text	00000060 altera_avalon_uart_write_fd
000449e0 g     F .text	00000050 altera_avalon_uart_close_fd
0004460c g     F .text	00000218 altera_avalon_jtag_uart_write
000424bc g     F .text	00000004 __sfp_lock_acquire
00041450 g     F .text	000000e8 memchr
00042620 g     F .text	000002f0 _free_r
000402dc g     F .text	000000cc inject_noise
00046404 g     F .text	00000194 __call_exitprocs
00048120 g     O .rwdata	00000004 __malloc_sbrk_base
0004022c g     F .text	0000003c _start
00049ca0 g     O .bss	00000004 _alt_tick_rate
00040708 g     F .text	00000064 rand
00049ca4 g     O .bss	00000004 _alt_nticks
0004393c g     F .text	00000104 read
00043d5c g     F .text	0000007c alt_sys_init
000462f0 g     F .text	00000114 __register_exitproc
000442ac g     F .text	00000068 altera_avalon_jtag_uart_close
000405fc g     F .text	00000028 .hidden __mulsi3
00046620 g       *ABS*	00000000 __ram_rwdata_start
000465cc g       *ABS*	00000000 __ram_rodata_start
00049cac g     O .bss	00000028 __malloc_current_mallinfo
00043dd8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000460b8 g     F .text	000000d4 alt_get_fd
00045350 g     F .text	00000158 alt_busy_sleep
00042ef4 g     F .text	00000054 _close_r
00046274 g     F .text	0000007c memcmp
00043e98 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00049dd4 g       *ABS*	00000000 __alt_stack_base
00043ee8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00041dc0 g     F .text	00000130 __swsetup_r
0004237c g     F .text	00000118 __sfp
00046a44 g     O .rwdata	00000408 __malloc_av_
000424c8 g     F .text	00000004 __sinit_lock_release
00042d5c g     F .text	00000054 __sread
00045fa4 g     F .text	00000114 alt_find_file
00045514 g     F .text	000000a4 alt_dev_llist_insert
000438ac g     F .text	00000020 __malloc_lock
00043ac0 g     F .text	000000b0 sbrk
00041ef0 g     F .text	00000228 _fflush_r
00049c80 g       *ABS*	00000000 __bss_start
00042c38 g     F .text	00000124 memset
00040268 g     F .text	00000074 main
00049c98 g     O .bss	00000004 alt_envp
00049c80 g     O .bss	00000004 __malloc_max_total_mem
00043e38 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000406f0 g     F .text	00000018 srand
00040000 g       *ABS*	00000000 __alt_mem_RAM_jesus
00042e90 g     F .text	00000008 __sclose
00075b60 g       *ABS*	00000000 __alt_heap_limit
00043048 g     F .text	00000014 fclose
00040ca8 g     F .text	000007a8 _malloc_r
0004813c g     O .rwdata	00000004 alt_errno
00042910 g     F .text	000000b8 _fwalk
0004053c g     F .text	00000054 .hidden __divsi3
000424fc g     F .text	00000124 _malloc_trim_r
000465cc g       *ABS*	00000000 __CTOR_END__
000465cc g       *ABS*	00000000 __flash_rodata_start
000465cc g       *ABS*	00000000 __DTOR_LIST__
00043d28 g     F .text	00000034 alt_irq_init
00043a40 g     F .text	00000080 alt_release_fd
00046228 g     F .text	00000014 atexit
00042e98 g     F .text	0000005c _write_r
0004811c g     O .rwdata	00000004 _impure_ptr
00049c90 g     O .bss	00000004 alt_argc
00045614 g     F .text	0000005c _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
000424e4 g     F .text	00000018 __fp_unlock_all
00048128 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004568c g     F .text	00000050 alt_ic_isr_register
00048150 g       *ABS*	00000000 _edata
00044920 g     F .text	00000060 altera_avalon_uart_read_fd
00049dd4 g       *ABS*	00000000 _end
0004022c g       *ABS*	00000000 __ram_exceptions_end
00044314 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0004577c g     F .text	000000a4 alt_ic_irq_disable
00042db8 g     F .text	0000007c __swrite
00048124 g     O .rwdata	00000004 __malloc_trim_threshold
00040464 g     F .text	0000006c init_karplus
0004623c g     F .text	00000038 exit
000429c8 g     F .text	000000b8 _fwalk_reent
00040590 g     F .text	0000005c .hidden __modsi3
00075b60 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000424c0 g     F .text	00000004 __sfp_lock_release
00044d94 g     F .text	00000054 altera_avalon_uart_close
00046598 g     F .text	00000034 _exit
00045210 g     F .text	00000140 alt_alarm_start
0004040c g     F .text	00000058 set_karplus_frequency
000431c0 g     F .text	0000010c .hidden __muldi3
00042a80 g     F .text	000001b8 __smakebuf_r
0004076c g     F .text	00000098 strlen
00045bf8 g     F .text	00000160 open
00045670 g     F .text	0000001c alt_icache_flush_all
00048144 g     O .rwdata	00000004 alt_priority_mask
000456dc g     F .text	000000a0 alt_ic_irq_enable
00044e38 g     F .text	000001dc altera_avalon_uart_read
00048148 g     O .rwdata	00000008 alt_alarm_list
000455b8 g     F .text	0000005c _do_ctors
0004331c g     F .text	000000d8 close
00043688 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
000424c4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408b14 	ori	at,at,556
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401cc0 	call	401cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10a73504 	addi	r2,r2,-25388
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10a73504 	addi	r2,r2,-25388
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffca5cc>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffca5c0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	e037883a 	mov	sp,fp
   401bc:	dfc00117 	ldw	ra,4(sp)
   401c0:	df000017 	ldw	fp,0(sp)
   401c4:	dec00204 	addi	sp,sp,8
   401c8:	f800283a 	ret

000401cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401cc:	defffb04 	addi	sp,sp,-20
   401d0:	dfc00415 	stw	ra,16(sp)
   401d4:	df000315 	stw	fp,12(sp)
   401d8:	df000304 	addi	fp,sp,12
   401dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e0:	00bfffc4 	movi	r2,-1
   401e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401ec:	d0a6e417 	ldw	r2,-25712(gp)
   401f0:	10000726 	beq	r2,zero,40210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f4:	d0a6e417 	ldw	r2,-25712(gp)
   401f8:	e0fffd17 	ldw	r3,-12(fp)
   401fc:	1809883a 	mov	r4,r3
   40200:	e17fff17 	ldw	r5,-4(fp)
   40204:	e1bffe17 	ldw	r6,-8(fp)
   40208:	103ee83a 	callr	r2
   4020c:	00000206 	br	40218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40214:	0005883a 	mov	r2,zero
}
   40218:	e037883a 	mov	sp,fp
   4021c:	dfc00117 	ldw	ra,4(sp)
   40220:	df000017 	ldw	fp,0(sp)
   40224:	dec00204 	addi	sp,sp,8
   40228:	f800283a 	ret

Disassembly of section .text:

0004022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   4022c:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40230:	ded6d814 	ori	sp,sp,23392
    movhi gp, %hi(_gp)
   40234:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40238:	d6804614 	ori	gp,gp,280
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   4023c:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40240:	10a72014 	ori	r2,r2,40064

    movhi r3, %hi(__bss_end)
   40244:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40248:	18e77514 	ori	r3,r3,40404

    beq r2, r3, 1f
   4024c:	10c00326 	beq	r2,r3,4025c <_start+0x30>

0:
    stw zero, (r2)
   40250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40258:	10fffd36 	bltu	r2,r3,40250 <__alt_data_end+0xfffca6f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   4025c:	00436880 	call	43688 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40260:	00438340 	call	43834 <alt_main>

00040264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40264:	003fff06 	br	40264 <__alt_data_end+0xfffca704>

00040268 <main>:
 *
 */
#include "./karplus/karplus.h"

int main()
{
   40268:	defffe04 	addi	sp,sp,-8
   4026c:	dfc00115 	stw	ra,4(sp)
   40270:	df000015 	stw	fp,0(sp)
   40274:	d839883a 	mov	fp,sp

	printf("Hello from Nios II!\n");
   40278:	01000134 	movhi	r4,4
   4027c:	21197304 	addi	r4,r4,26060
   40280:	00406dc0 	call	406dc <puts>
	init_karplus();
   40284:	00404640 	call	40464 <init_karplus>
	set_karplus_frequency(48000);
   40288:	012ee014 	movui	r4,48000
   4028c:	004040c0 	call	4040c <set_karplus_frequency>
	while(1)
	{
		play_tone(113,3000);
   40290:	01001c44 	movi	r4,113
   40294:	0142ee04 	movi	r5,3000
   40298:	00403a80 	call	403a8 <play_tone>
		play_tone(124,3000);
   4029c:	01001f04 	movi	r4,124
   402a0:	0142ee04 	movi	r5,3000
   402a4:	00403a80 	call	403a8 <play_tone>
		play_tone(156,3000);
   402a8:	01002704 	movi	r4,156
   402ac:	0142ee04 	movi	r5,3000
   402b0:	00403a80 	call	403a8 <play_tone>
		play_tone(209,3000);
   402b4:	01003444 	movi	r4,209
   402b8:	0142ee04 	movi	r5,3000
   402bc:	00403a80 	call	403a8 <play_tone>
		play_tone(279,3000);
   402c0:	010045c4 	movi	r4,279
   402c4:	0142ee04 	movi	r5,3000
   402c8:	00403a80 	call	403a8 <play_tone>
		play_tone(372,3000);
   402cc:	01005d04 	movi	r4,372
   402d0:	0142ee04 	movi	r5,3000
   402d4:	00403a80 	call	403a8 <play_tone>
	}
   402d8:	003fed06 	br	40290 <__alt_data_end+0xfffca730>

000402dc <inject_noise>:
 *      Author: Holguer
 */

#include "karplus.h"

void inject_noise(){
   402dc:	defffc04 	addi	sp,sp,-16
   402e0:	dfc00315 	stw	ra,12(sp)
   402e4:	df000215 	stw	fp,8(sp)
   402e8:	df000204 	addi	fp,sp,8
	int i;
	int noise;
	IOWR(NOISE_EN_BASE,0,1);
   402ec:	00c00044 	movi	r3,1
   402f0:	00800234 	movhi	r2,8
   402f4:	10841804 	addi	r2,r2,4192
   402f8:	10c00035 	stwio	r3,0(r2)
	for(i=0;i<700;i++)
   402fc:	e03ffe15 	stw	zero,-8(fp)
   40300:	00001906 	br	40368 <inject_noise+0x8c>
	{
		noise=rand()*255;
   40304:	00407080 	call	40708 <rand>
   40308:	1009883a 	mov	r4,r2
   4030c:	01403fc4 	movi	r5,255
   40310:	00405fc0 	call	405fc <__mulsi3>
   40314:	e0bfff15 	stw	r2,-4(fp)
		IOWR(NOISE_BASE,0,noise & 0x7fff);
   40318:	e0bfff17 	ldw	r2,-4(fp)
   4031c:	10dfffcc 	andi	r3,r2,32767
   40320:	00800234 	movhi	r2,8
   40324:	10841c04 	addi	r2,r2,4208
   40328:	10c00035 	stwio	r3,0(r2)
		IOWR(NOISE_PULSE_BASE,0,0);
   4032c:	0007883a 	mov	r3,zero
   40330:	00800234 	movhi	r2,8
   40334:	10841004 	addi	r2,r2,4160
   40338:	10c00035 	stwio	r3,0(r2)
		usleep(1);
   4033c:	01000044 	movi	r4,1
   40340:	0043b700 	call	43b70 <usleep>
		IOWR(NOISE_PULSE_BASE,0,1);
   40344:	00c00044 	movi	r3,1
   40348:	00800234 	movhi	r2,8
   4034c:	10841004 	addi	r2,r2,4160
   40350:	10c00035 	stwio	r3,0(r2)
		usleep(1);
   40354:	01000044 	movi	r4,1
   40358:	0043b700 	call	43b70 <usleep>

void inject_noise(){
	int i;
	int noise;
	IOWR(NOISE_EN_BASE,0,1);
	for(i=0;i<700;i++)
   4035c:	e0bffe17 	ldw	r2,-8(fp)
   40360:	10800044 	addi	r2,r2,1
   40364:	e0bffe15 	stw	r2,-8(fp)
   40368:	e0bffe17 	ldw	r2,-8(fp)
   4036c:	1080af10 	cmplti	r2,r2,700
   40370:	103fe41e 	bne	r2,zero,40304 <__alt_data_end+0xfffca7a4>
		IOWR(NOISE_PULSE_BASE,0,0);
		usleep(1);
		IOWR(NOISE_PULSE_BASE,0,1);
		usleep(1);
	}
	IOWR(NOISE_PULSE_BASE,0,0);
   40374:	0007883a 	mov	r3,zero
   40378:	00800234 	movhi	r2,8
   4037c:	10841004 	addi	r2,r2,4160
   40380:	10c00035 	stwio	r3,0(r2)
	IOWR(NOISE_EN_BASE,0,0);
   40384:	0007883a 	mov	r3,zero
   40388:	00800234 	movhi	r2,8
   4038c:	10841804 	addi	r2,r2,4192
   40390:	10c00035 	stwio	r3,0(r2)
}
   40394:	e037883a 	mov	sp,fp
   40398:	dfc00117 	ldw	ra,4(sp)
   4039c:	df000017 	ldw	fp,0(sp)
   403a0:	dec00204 	addi	sp,sp,8
   403a4:	f800283a 	ret

000403a8 <play_tone>:
void play_tone(int nota,int time_ms){
   403a8:	defffc04 	addi	sp,sp,-16
   403ac:	dfc00315 	stw	ra,12(sp)
   403b0:	df000215 	stw	fp,8(sp)
   403b4:	df000204 	addi	fp,sp,8
   403b8:	e13ffe15 	stw	r4,-8(fp)
   403bc:	e17fff15 	stw	r5,-4(fp)
	IOWR(NOISE_EN_BASE,0,1);
   403c0:	00c00044 	movi	r3,1
   403c4:	00800234 	movhi	r2,8
   403c8:	10841804 	addi	r2,r2,4192
   403cc:	10c00035 	stwio	r3,0(r2)
	IOWR(SEL_NOTA_BASE,0,nota);
   403d0:	00800234 	movhi	r2,8
   403d4:	10841404 	addi	r2,r2,4176
   403d8:	e0fffe17 	ldw	r3,-8(fp)
   403dc:	10c00035 	stwio	r3,0(r2)
	inject_noise();
   403e0:	00402dc0 	call	402dc <inject_noise>
	usleep(time_ms*1000);
   403e4:	e13fff17 	ldw	r4,-4(fp)
   403e8:	0140fa04 	movi	r5,1000
   403ec:	00405fc0 	call	405fc <__mulsi3>
   403f0:	1009883a 	mov	r4,r2
   403f4:	0043b700 	call	43b70 <usleep>
}
   403f8:	e037883a 	mov	sp,fp
   403fc:	dfc00117 	ldw	ra,4(sp)
   40400:	df000017 	ldw	fp,0(sp)
   40404:	dec00204 	addi	sp,sp,8
   40408:	f800283a 	ret

0004040c <set_karplus_frequency>:
void set_karplus_frequency(int frecuencia){
   4040c:	defffc04 	addi	sp,sp,-16
   40410:	dfc00315 	stw	ra,12(sp)
   40414:	df000215 	stw	fp,8(sp)
   40418:	df000204 	addi	fp,sp,8
   4041c:	e13fff15 	stw	r4,-4(fp)
	int in_freq=(50000000/(2*frecuencia))-1;
   40420:	e0bfff17 	ldw	r2,-4(fp)
   40424:	1085883a 	add	r2,r2,r2
   40428:	0100bef4 	movhi	r4,763
   4042c:	213c2004 	addi	r4,r4,-3968
   40430:	100b883a 	mov	r5,r2
   40434:	004053c0 	call	4053c <__divsi3>
   40438:	10bfffc4 	addi	r2,r2,-1
   4043c:	e0bffe15 	stw	r2,-8(fp)
	IOWR(DIV_FREQ_BASE,0,in_freq);
   40440:	00800234 	movhi	r2,8
   40444:	10842004 	addi	r2,r2,4224
   40448:	e0fffe17 	ldw	r3,-8(fp)
   4044c:	10c00035 	stwio	r3,0(r2)
}
   40450:	e037883a 	mov	sp,fp
   40454:	dfc00117 	ldw	ra,4(sp)
   40458:	df000017 	ldw	fp,0(sp)
   4045c:	dec00204 	addi	sp,sp,8
   40460:	f800283a 	ret

00040464 <init_karplus>:

void init_karplus(){
   40464:	defffe04 	addi	sp,sp,-8
   40468:	dfc00115 	stw	ra,4(sp)
   4046c:	df000015 	stw	fp,0(sp)
   40470:	d839883a 	mov	fp,sp
	IOWR(NOISE_BASE,0,0);
   40474:	0007883a 	mov	r3,zero
   40478:	00800234 	movhi	r2,8
   4047c:	10841c04 	addi	r2,r2,4208
   40480:	10c00035 	stwio	r3,0(r2)
	IOWR(NOISE_EN_BASE,0,0);
   40484:	0007883a 	mov	r3,zero
   40488:	00800234 	movhi	r2,8
   4048c:	10841804 	addi	r2,r2,4192
   40490:	10c00035 	stwio	r3,0(r2)
	IOWR(SEL_NOTA_BASE,0,0);
   40494:	0007883a 	mov	r3,zero
   40498:	00800234 	movhi	r2,8
   4049c:	10841404 	addi	r2,r2,4176
   404a0:	10c00035 	stwio	r3,0(r2)
	IOWR(NOISE_PULSE_BASE,0,0);
   404a4:	0007883a 	mov	r3,zero
   404a8:	00800234 	movhi	r2,8
   404ac:	10841004 	addi	r2,r2,4160
   404b0:	10c00035 	stwio	r3,0(r2)

	set_karplus_frequency(44100);
   404b4:	012b1114 	movui	r4,44100
   404b8:	004040c0 	call	4040c <set_karplus_frequency>
}
   404bc:	e037883a 	mov	sp,fp
   404c0:	dfc00117 	ldw	ra,4(sp)
   404c4:	df000017 	ldw	fp,0(sp)
   404c8:	dec00204 	addi	sp,sp,8
   404cc:	f800283a 	ret

000404d0 <udivmodsi4>:
   404d0:	2900182e 	bgeu	r5,r4,40534 <udivmodsi4+0x64>
   404d4:	28001716 	blt	r5,zero,40534 <udivmodsi4+0x64>
   404d8:	00800804 	movi	r2,32
   404dc:	00c00044 	movi	r3,1
   404e0:	00000206 	br	404ec <udivmodsi4+0x1c>
   404e4:	10001126 	beq	r2,zero,4052c <udivmodsi4+0x5c>
   404e8:	28000516 	blt	r5,zero,40500 <udivmodsi4+0x30>
   404ec:	294b883a 	add	r5,r5,r5
   404f0:	10bfffc4 	addi	r2,r2,-1
   404f4:	18c7883a 	add	r3,r3,r3
   404f8:	293ffa36 	bltu	r5,r4,404e4 <__alt_data_end+0xfffca984>
   404fc:	18000b26 	beq	r3,zero,4052c <udivmodsi4+0x5c>
   40500:	0005883a 	mov	r2,zero
   40504:	21400236 	bltu	r4,r5,40510 <udivmodsi4+0x40>
   40508:	2149c83a 	sub	r4,r4,r5
   4050c:	10c4b03a 	or	r2,r2,r3
   40510:	1806d07a 	srli	r3,r3,1
   40514:	280ad07a 	srli	r5,r5,1
   40518:	183ffa1e 	bne	r3,zero,40504 <__alt_data_end+0xfffca9a4>
   4051c:	3000011e 	bne	r6,zero,40524 <udivmodsi4+0x54>
   40520:	f800283a 	ret
   40524:	2005883a 	mov	r2,r4
   40528:	f800283a 	ret
   4052c:	0005883a 	mov	r2,zero
   40530:	003ffa06 	br	4051c <__alt_data_end+0xfffca9bc>
   40534:	00c00044 	movi	r3,1
   40538:	003ff106 	br	40500 <__alt_data_end+0xfffca9a0>

0004053c <__divsi3>:
   4053c:	defffe04 	addi	sp,sp,-8
   40540:	dfc00115 	stw	ra,4(sp)
   40544:	dc000015 	stw	r16,0(sp)
   40548:	20000b16 	blt	r4,zero,40578 <__divsi3+0x3c>
   4054c:	0021883a 	mov	r16,zero
   40550:	28000c16 	blt	r5,zero,40584 <__divsi3+0x48>
   40554:	000d883a 	mov	r6,zero
   40558:	00404d00 	call	404d0 <udivmodsi4>
   4055c:	0407c83a 	sub	r3,zero,r16
   40560:	1884f03a 	xor	r2,r3,r2
   40564:	1405883a 	add	r2,r2,r16
   40568:	dfc00117 	ldw	ra,4(sp)
   4056c:	dc000017 	ldw	r16,0(sp)
   40570:	dec00204 	addi	sp,sp,8
   40574:	f800283a 	ret
   40578:	0109c83a 	sub	r4,zero,r4
   4057c:	04000044 	movi	r16,1
   40580:	283ff40e 	bge	r5,zero,40554 <__alt_data_end+0xfffca9f4>
   40584:	014bc83a 	sub	r5,zero,r5
   40588:	8400005c 	xori	r16,r16,1
   4058c:	003ff106 	br	40554 <__alt_data_end+0xfffca9f4>

00040590 <__modsi3>:
   40590:	defffd04 	addi	sp,sp,-12
   40594:	dfc00215 	stw	ra,8(sp)
   40598:	dc400115 	stw	r17,4(sp)
   4059c:	dc000015 	stw	r16,0(sp)
   405a0:	20000c16 	blt	r4,zero,405d4 <__modsi3+0x44>
   405a4:	0023883a 	mov	r17,zero
   405a8:	0021883a 	mov	r16,zero
   405ac:	28000d16 	blt	r5,zero,405e4 <__modsi3+0x54>
   405b0:	01800044 	movi	r6,1
   405b4:	00404d00 	call	404d0 <udivmodsi4>
   405b8:	1404f03a 	xor	r2,r2,r16
   405bc:	8885883a 	add	r2,r17,r2
   405c0:	dfc00217 	ldw	ra,8(sp)
   405c4:	dc400117 	ldw	r17,4(sp)
   405c8:	dc000017 	ldw	r16,0(sp)
   405cc:	dec00304 	addi	sp,sp,12
   405d0:	f800283a 	ret
   405d4:	0109c83a 	sub	r4,zero,r4
   405d8:	04400044 	movi	r17,1
   405dc:	043fffc4 	movi	r16,-1
   405e0:	283ff30e 	bge	r5,zero,405b0 <__alt_data_end+0xfffcaa50>
   405e4:	014bc83a 	sub	r5,zero,r5
   405e8:	003ff106 	br	405b0 <__alt_data_end+0xfffcaa50>

000405ec <__udivsi3>:
   405ec:	000d883a 	mov	r6,zero
   405f0:	00404d01 	jmpi	404d0 <udivmodsi4>

000405f4 <__umodsi3>:
   405f4:	01800044 	movi	r6,1
   405f8:	00404d01 	jmpi	404d0 <udivmodsi4>

000405fc <__mulsi3>:
   405fc:	0005883a 	mov	r2,zero
   40600:	20000726 	beq	r4,zero,40620 <__mulsi3+0x24>
   40604:	20c0004c 	andi	r3,r4,1
   40608:	2008d07a 	srli	r4,r4,1
   4060c:	18000126 	beq	r3,zero,40614 <__mulsi3+0x18>
   40610:	1145883a 	add	r2,r2,r5
   40614:	294b883a 	add	r5,r5,r5
   40618:	203ffa1e 	bne	r4,zero,40604 <__alt_data_end+0xfffcaaa4>
   4061c:	f800283a 	ret
   40620:	f800283a 	ret

00040624 <_puts_r>:
   40624:	defff604 	addi	sp,sp,-40
   40628:	dc000715 	stw	r16,28(sp)
   4062c:	2021883a 	mov	r16,r4
   40630:	2809883a 	mov	r4,r5
   40634:	dc400815 	stw	r17,32(sp)
   40638:	dfc00915 	stw	ra,36(sp)
   4063c:	2823883a 	mov	r17,r5
   40640:	004076c0 	call	4076c <strlen>
   40644:	00c00174 	movhi	r3,5
   40648:	18e04704 	addi	r3,r3,-32484
   4064c:	18c00017 	ldw	r3,0(r3)
   40650:	11000044 	addi	r4,r2,1
   40654:	d8800115 	stw	r2,4(sp)
   40658:	18c00217 	ldw	r3,8(r3)
   4065c:	01400134 	movhi	r5,4
   40660:	29597804 	addi	r5,r5,26080
   40664:	1880030b 	ldhu	r2,12(r3)
   40668:	d9400215 	stw	r5,8(sp)
   4066c:	d9000615 	stw	r4,24(sp)
   40670:	01400044 	movi	r5,1
   40674:	01000084 	movi	r4,2
   40678:	d9000515 	stw	r4,20(sp)
   4067c:	dc400015 	stw	r17,0(sp)
   40680:	d9400315 	stw	r5,12(sp)
   40684:	dec00415 	stw	sp,16(sp)
   40688:	1108000c 	andi	r4,r2,8192
   4068c:	2000061e 	bne	r4,zero,406a8 <_puts_r+0x84>
   40690:	19401917 	ldw	r5,100(r3)
   40694:	0137ffc4 	movi	r4,-8193
   40698:	10880014 	ori	r2,r2,8192
   4069c:	2908703a 	and	r4,r5,r4
   406a0:	1880030d 	sth	r2,12(r3)
   406a4:	19001915 	stw	r4,100(r3)
   406a8:	81400217 	ldw	r5,8(r16)
   406ac:	8009883a 	mov	r4,r16
   406b0:	d9800404 	addi	r6,sp,16
   406b4:	00408040 	call	40804 <__sfvwrite_r>
   406b8:	1000061e 	bne	r2,zero,406d4 <_puts_r+0xb0>
   406bc:	00800284 	movi	r2,10
   406c0:	dfc00917 	ldw	ra,36(sp)
   406c4:	dc400817 	ldw	r17,32(sp)
   406c8:	dc000717 	ldw	r16,28(sp)
   406cc:	dec00a04 	addi	sp,sp,40
   406d0:	f800283a 	ret
   406d4:	00bfffc4 	movi	r2,-1
   406d8:	003ff906 	br	406c0 <__alt_data_end+0xfffcab60>

000406dc <puts>:
   406dc:	00800174 	movhi	r2,5
   406e0:	10a04704 	addi	r2,r2,-32484
   406e4:	200b883a 	mov	r5,r4
   406e8:	11000017 	ldw	r4,0(r2)
   406ec:	00406241 	jmpi	40624 <_puts_r>

000406f0 <srand>:
   406f0:	00800174 	movhi	r2,5
   406f4:	10a04704 	addi	r2,r2,-32484
   406f8:	10800017 	ldw	r2,0(r2)
   406fc:	11002915 	stw	r4,164(r2)
   40700:	10002a15 	stw	zero,168(r2)
   40704:	f800283a 	ret

00040708 <rand>:
   40708:	00800174 	movhi	r2,5
   4070c:	defffe04 	addi	sp,sp,-8
   40710:	10a04704 	addi	r2,r2,-32484
   40714:	dc000015 	stw	r16,0(sp)
   40718:	14000017 	ldw	r16,0(r2)
   4071c:	dfc00115 	stw	ra,4(sp)
   40720:	01932574 	movhi	r6,19605
   40724:	81002917 	ldw	r4,164(r16)
   40728:	81402a17 	ldw	r5,168(r16)
   4072c:	01d614b4 	movhi	r7,22610
   40730:	319fcb44 	addi	r6,r6,32557
   40734:	39fd0b44 	addi	r7,r7,-3027
   40738:	00431c00 	call	431c0 <__muldi3>
   4073c:	11000044 	addi	r4,r2,1
   40740:	2085803a 	cmpltu	r2,r4,r2
   40744:	10c7883a 	add	r3,r2,r3
   40748:	00a00034 	movhi	r2,32768
   4074c:	10bfffc4 	addi	r2,r2,-1
   40750:	1884703a 	and	r2,r3,r2
   40754:	81002915 	stw	r4,164(r16)
   40758:	80c02a15 	stw	r3,168(r16)
   4075c:	dfc00117 	ldw	ra,4(sp)
   40760:	dc000017 	ldw	r16,0(sp)
   40764:	dec00204 	addi	sp,sp,8
   40768:	f800283a 	ret

0004076c <strlen>:
   4076c:	208000cc 	andi	r2,r4,3
   40770:	10002026 	beq	r2,zero,407f4 <strlen+0x88>
   40774:	20800007 	ldb	r2,0(r4)
   40778:	10002026 	beq	r2,zero,407fc <strlen+0x90>
   4077c:	2005883a 	mov	r2,r4
   40780:	00000206 	br	4078c <strlen+0x20>
   40784:	10c00007 	ldb	r3,0(r2)
   40788:	18001826 	beq	r3,zero,407ec <strlen+0x80>
   4078c:	10800044 	addi	r2,r2,1
   40790:	10c000cc 	andi	r3,r2,3
   40794:	183ffb1e 	bne	r3,zero,40784 <__alt_data_end+0xfffcac24>
   40798:	10c00017 	ldw	r3,0(r2)
   4079c:	01ffbff4 	movhi	r7,65279
   407a0:	39ffbfc4 	addi	r7,r7,-257
   407a4:	00ca303a 	nor	r5,zero,r3
   407a8:	01a02074 	movhi	r6,32897
   407ac:	19c7883a 	add	r3,r3,r7
   407b0:	31a02004 	addi	r6,r6,-32640
   407b4:	1946703a 	and	r3,r3,r5
   407b8:	1986703a 	and	r3,r3,r6
   407bc:	1800091e 	bne	r3,zero,407e4 <strlen+0x78>
   407c0:	10800104 	addi	r2,r2,4
   407c4:	10c00017 	ldw	r3,0(r2)
   407c8:	19cb883a 	add	r5,r3,r7
   407cc:	00c6303a 	nor	r3,zero,r3
   407d0:	28c6703a 	and	r3,r5,r3
   407d4:	1986703a 	and	r3,r3,r6
   407d8:	183ff926 	beq	r3,zero,407c0 <__alt_data_end+0xfffcac60>
   407dc:	00000106 	br	407e4 <strlen+0x78>
   407e0:	10800044 	addi	r2,r2,1
   407e4:	10c00007 	ldb	r3,0(r2)
   407e8:	183ffd1e 	bne	r3,zero,407e0 <__alt_data_end+0xfffcac80>
   407ec:	1105c83a 	sub	r2,r2,r4
   407f0:	f800283a 	ret
   407f4:	2005883a 	mov	r2,r4
   407f8:	003fe706 	br	40798 <__alt_data_end+0xfffcac38>
   407fc:	0005883a 	mov	r2,zero
   40800:	f800283a 	ret

00040804 <__sfvwrite_r>:
   40804:	30800217 	ldw	r2,8(r6)
   40808:	10004526 	beq	r2,zero,40920 <__sfvwrite_r+0x11c>
   4080c:	28c0030b 	ldhu	r3,12(r5)
   40810:	defff404 	addi	sp,sp,-48
   40814:	dd400715 	stw	r21,28(sp)
   40818:	dcc00515 	stw	r19,20(sp)
   4081c:	dc000215 	stw	r16,8(sp)
   40820:	dfc00b15 	stw	ra,44(sp)
   40824:	df000a15 	stw	fp,40(sp)
   40828:	ddc00915 	stw	r23,36(sp)
   4082c:	dd800815 	stw	r22,32(sp)
   40830:	dd000615 	stw	r20,24(sp)
   40834:	dc800415 	stw	r18,16(sp)
   40838:	dc400315 	stw	r17,12(sp)
   4083c:	1880020c 	andi	r2,r3,8
   40840:	2821883a 	mov	r16,r5
   40844:	202b883a 	mov	r21,r4
   40848:	3027883a 	mov	r19,r6
   4084c:	10002526 	beq	r2,zero,408e4 <__sfvwrite_r+0xe0>
   40850:	28800417 	ldw	r2,16(r5)
   40854:	10002326 	beq	r2,zero,408e4 <__sfvwrite_r+0xe0>
   40858:	1880008c 	andi	r2,r3,2
   4085c:	9c400017 	ldw	r17,0(r19)
   40860:	10003126 	beq	r2,zero,40928 <__sfvwrite_r+0x124>
   40864:	0029883a 	mov	r20,zero
   40868:	0025883a 	mov	r18,zero
   4086c:	05810004 	movi	r22,1024
   40870:	a00d883a 	mov	r6,r20
   40874:	a809883a 	mov	r4,r21
   40878:	90002526 	beq	r18,zero,40910 <__sfvwrite_r+0x10c>
   4087c:	900f883a 	mov	r7,r18
   40880:	81400717 	ldw	r5,28(r16)
   40884:	b480012e 	bgeu	r22,r18,4088c <__sfvwrite_r+0x88>
   40888:	01c10004 	movi	r7,1024
   4088c:	80800917 	ldw	r2,36(r16)
   40890:	103ee83a 	callr	r2
   40894:	0080510e 	bge	zero,r2,409dc <__sfvwrite_r+0x1d8>
   40898:	98c00217 	ldw	r3,8(r19)
   4089c:	a0a9883a 	add	r20,r20,r2
   408a0:	90a5c83a 	sub	r18,r18,r2
   408a4:	1885c83a 	sub	r2,r3,r2
   408a8:	98800215 	stw	r2,8(r19)
   408ac:	103ff01e 	bne	r2,zero,40870 <__alt_data_end+0xfffcad10>
   408b0:	0005883a 	mov	r2,zero
   408b4:	dfc00b17 	ldw	ra,44(sp)
   408b8:	df000a17 	ldw	fp,40(sp)
   408bc:	ddc00917 	ldw	r23,36(sp)
   408c0:	dd800817 	ldw	r22,32(sp)
   408c4:	dd400717 	ldw	r21,28(sp)
   408c8:	dd000617 	ldw	r20,24(sp)
   408cc:	dcc00517 	ldw	r19,20(sp)
   408d0:	dc800417 	ldw	r18,16(sp)
   408d4:	dc400317 	ldw	r17,12(sp)
   408d8:	dc000217 	ldw	r16,8(sp)
   408dc:	dec00c04 	addi	sp,sp,48
   408e0:	f800283a 	ret
   408e4:	a809883a 	mov	r4,r21
   408e8:	800b883a 	mov	r5,r16
   408ec:	0041dc00 	call	41dc0 <__swsetup_r>
   408f0:	80c0030b 	ldhu	r3,12(r16)
   408f4:	103fd826 	beq	r2,zero,40858 <__alt_data_end+0xfffcacf8>
   408f8:	18c01014 	ori	r3,r3,64
   408fc:	80c0030d 	sth	r3,12(r16)
   40900:	00c00244 	movi	r3,9
   40904:	00bfffc4 	movi	r2,-1
   40908:	a8c00015 	stw	r3,0(r21)
   4090c:	003fe906 	br	408b4 <__alt_data_end+0xfffcad54>
   40910:	8d000017 	ldw	r20,0(r17)
   40914:	8c800117 	ldw	r18,4(r17)
   40918:	8c400204 	addi	r17,r17,8
   4091c:	003fd406 	br	40870 <__alt_data_end+0xfffcad10>
   40920:	0005883a 	mov	r2,zero
   40924:	f800283a 	ret
   40928:	1880004c 	andi	r2,r3,1
   4092c:	1000301e 	bne	r2,zero,409f0 <__sfvwrite_r+0x1ec>
   40930:	002f883a 	mov	r23,zero
   40934:	0025883a 	mov	r18,zero
   40938:	90001c26 	beq	r18,zero,409ac <__sfvwrite_r+0x1a8>
   4093c:	1880800c 	andi	r2,r3,512
   40940:	85000217 	ldw	r20,8(r16)
   40944:	10006c26 	beq	r2,zero,40af8 <__sfvwrite_r+0x2f4>
   40948:	a02d883a 	mov	r22,r20
   4094c:	95008536 	bltu	r18,r20,40b64 <__sfvwrite_r+0x360>
   40950:	1881200c 	andi	r2,r3,1152
   40954:	10009d1e 	bne	r2,zero,40bcc <__sfvwrite_r+0x3c8>
   40958:	81000017 	ldw	r4,0(r16)
   4095c:	a039883a 	mov	fp,r20
   40960:	9029883a 	mov	r20,r18
   40964:	b80b883a 	mov	r5,r23
   40968:	b00d883a 	mov	r6,r22
   4096c:	00416700 	call	41670 <memmove>
   40970:	80c00217 	ldw	r3,8(r16)
   40974:	81000017 	ldw	r4,0(r16)
   40978:	9005883a 	mov	r2,r18
   4097c:	1f39c83a 	sub	fp,r3,fp
   40980:	258f883a 	add	r7,r4,r22
   40984:	87000215 	stw	fp,8(r16)
   40988:	81c00015 	stw	r7,0(r16)
   4098c:	98c00217 	ldw	r3,8(r19)
   40990:	b8af883a 	add	r23,r23,r2
   40994:	90a5c83a 	sub	r18,r18,r2
   40998:	1d05c83a 	sub	r2,r3,r20
   4099c:	98800215 	stw	r2,8(r19)
   409a0:	103fc326 	beq	r2,zero,408b0 <__alt_data_end+0xfffcad50>
   409a4:	80c0030b 	ldhu	r3,12(r16)
   409a8:	903fe41e 	bne	r18,zero,4093c <__alt_data_end+0xfffcaddc>
   409ac:	8dc00017 	ldw	r23,0(r17)
   409b0:	8c800117 	ldw	r18,4(r17)
   409b4:	8c400204 	addi	r17,r17,8
   409b8:	003fdf06 	br	40938 <__alt_data_end+0xfffcadd8>
   409bc:	00417cc0 	call	417cc <_realloc_r>
   409c0:	102d883a 	mov	r22,r2
   409c4:	1000a01e 	bne	r2,zero,40c48 <__sfvwrite_r+0x444>
   409c8:	81400417 	ldw	r5,16(r16)
   409cc:	a809883a 	mov	r4,r21
   409d0:	00426200 	call	42620 <_free_r>
   409d4:	00800304 	movi	r2,12
   409d8:	a8800015 	stw	r2,0(r21)
   409dc:	80c0030b 	ldhu	r3,12(r16)
   409e0:	00bfffc4 	movi	r2,-1
   409e4:	18c01014 	ori	r3,r3,64
   409e8:	80c0030d 	sth	r3,12(r16)
   409ec:	003fb106 	br	408b4 <__alt_data_end+0xfffcad54>
   409f0:	0029883a 	mov	r20,zero
   409f4:	0011883a 	mov	r8,zero
   409f8:	0039883a 	mov	fp,zero
   409fc:	0025883a 	mov	r18,zero
   40a00:	90001f26 	beq	r18,zero,40a80 <__sfvwrite_r+0x27c>
   40a04:	40006826 	beq	r8,zero,40ba8 <__sfvwrite_r+0x3a4>
   40a08:	a02f883a 	mov	r23,r20
   40a0c:	9500012e 	bgeu	r18,r20,40a14 <__sfvwrite_r+0x210>
   40a10:	902f883a 	mov	r23,r18
   40a14:	81000017 	ldw	r4,0(r16)
   40a18:	80800417 	ldw	r2,16(r16)
   40a1c:	b82d883a 	mov	r22,r23
   40a20:	81800217 	ldw	r6,8(r16)
   40a24:	81c00517 	ldw	r7,20(r16)
   40a28:	1100022e 	bgeu	r2,r4,40a34 <__sfvwrite_r+0x230>
   40a2c:	31c7883a 	add	r3,r6,r7
   40a30:	1dc01816 	blt	r3,r23,40a94 <__sfvwrite_r+0x290>
   40a34:	b9c03f16 	blt	r23,r7,40b34 <__sfvwrite_r+0x330>
   40a38:	80800917 	ldw	r2,36(r16)
   40a3c:	81400717 	ldw	r5,28(r16)
   40a40:	a809883a 	mov	r4,r21
   40a44:	da000115 	stw	r8,4(sp)
   40a48:	e00d883a 	mov	r6,fp
   40a4c:	103ee83a 	callr	r2
   40a50:	102d883a 	mov	r22,r2
   40a54:	da000117 	ldw	r8,4(sp)
   40a58:	00bfe00e 	bge	zero,r2,409dc <__alt_data_end+0xfffcae7c>
   40a5c:	a5a9c83a 	sub	r20,r20,r22
   40a60:	a0001f26 	beq	r20,zero,40ae0 <__sfvwrite_r+0x2dc>
   40a64:	98800217 	ldw	r2,8(r19)
   40a68:	e5b9883a 	add	fp,fp,r22
   40a6c:	95a5c83a 	sub	r18,r18,r22
   40a70:	15adc83a 	sub	r22,r2,r22
   40a74:	9d800215 	stw	r22,8(r19)
   40a78:	b03f8d26 	beq	r22,zero,408b0 <__alt_data_end+0xfffcad50>
   40a7c:	903fe11e 	bne	r18,zero,40a04 <__alt_data_end+0xfffcaea4>
   40a80:	8f000017 	ldw	fp,0(r17)
   40a84:	8c800117 	ldw	r18,4(r17)
   40a88:	0011883a 	mov	r8,zero
   40a8c:	8c400204 	addi	r17,r17,8
   40a90:	003fdb06 	br	40a00 <__alt_data_end+0xfffcaea0>
   40a94:	180d883a 	mov	r6,r3
   40a98:	e00b883a 	mov	r5,fp
   40a9c:	da000115 	stw	r8,4(sp)
   40aa0:	d8c00015 	stw	r3,0(sp)
   40aa4:	00416700 	call	41670 <memmove>
   40aa8:	d8c00017 	ldw	r3,0(sp)
   40aac:	80800017 	ldw	r2,0(r16)
   40ab0:	a809883a 	mov	r4,r21
   40ab4:	800b883a 	mov	r5,r16
   40ab8:	10c5883a 	add	r2,r2,r3
   40abc:	80800015 	stw	r2,0(r16)
   40ac0:	d8c00015 	stw	r3,0(sp)
   40ac4:	0041ef00 	call	41ef0 <_fflush_r>
   40ac8:	d8c00017 	ldw	r3,0(sp)
   40acc:	da000117 	ldw	r8,4(sp)
   40ad0:	103fc21e 	bne	r2,zero,409dc <__alt_data_end+0xfffcae7c>
   40ad4:	182d883a 	mov	r22,r3
   40ad8:	a5a9c83a 	sub	r20,r20,r22
   40adc:	a03fe11e 	bne	r20,zero,40a64 <__alt_data_end+0xfffcaf04>
   40ae0:	a809883a 	mov	r4,r21
   40ae4:	800b883a 	mov	r5,r16
   40ae8:	0041ef00 	call	41ef0 <_fflush_r>
   40aec:	103fbb1e 	bne	r2,zero,409dc <__alt_data_end+0xfffcae7c>
   40af0:	0011883a 	mov	r8,zero
   40af4:	003fdb06 	br	40a64 <__alt_data_end+0xfffcaf04>
   40af8:	81000017 	ldw	r4,0(r16)
   40afc:	80800417 	ldw	r2,16(r16)
   40b00:	1100012e 	bgeu	r2,r4,40b08 <__sfvwrite_r+0x304>
   40b04:	a4805a36 	bltu	r20,r18,40c70 <__sfvwrite_r+0x46c>
   40b08:	81c00517 	ldw	r7,20(r16)
   40b0c:	91c01a36 	bltu	r18,r7,40b78 <__sfvwrite_r+0x374>
   40b10:	80800917 	ldw	r2,36(r16)
   40b14:	81400717 	ldw	r5,28(r16)
   40b18:	a809883a 	mov	r4,r21
   40b1c:	b80d883a 	mov	r6,r23
   40b20:	103ee83a 	callr	r2
   40b24:	1029883a 	mov	r20,r2
   40b28:	00bfac0e 	bge	zero,r2,409dc <__alt_data_end+0xfffcae7c>
   40b2c:	a005883a 	mov	r2,r20
   40b30:	003f9606 	br	4098c <__alt_data_end+0xfffcae2c>
   40b34:	b80d883a 	mov	r6,r23
   40b38:	e00b883a 	mov	r5,fp
   40b3c:	da000115 	stw	r8,4(sp)
   40b40:	00416700 	call	41670 <memmove>
   40b44:	80800217 	ldw	r2,8(r16)
   40b48:	80c00017 	ldw	r3,0(r16)
   40b4c:	da000117 	ldw	r8,4(sp)
   40b50:	15c5c83a 	sub	r2,r2,r23
   40b54:	1def883a 	add	r23,r3,r23
   40b58:	80800215 	stw	r2,8(r16)
   40b5c:	85c00015 	stw	r23,0(r16)
   40b60:	003fbe06 	br	40a5c <__alt_data_end+0xfffcaefc>
   40b64:	81000017 	ldw	r4,0(r16)
   40b68:	9039883a 	mov	fp,r18
   40b6c:	9029883a 	mov	r20,r18
   40b70:	902d883a 	mov	r22,r18
   40b74:	003f7b06 	br	40964 <__alt_data_end+0xfffcae04>
   40b78:	b80b883a 	mov	r5,r23
   40b7c:	900d883a 	mov	r6,r18
   40b80:	00416700 	call	41670 <memmove>
   40b84:	80c00217 	ldw	r3,8(r16)
   40b88:	80800017 	ldw	r2,0(r16)
   40b8c:	9029883a 	mov	r20,r18
   40b90:	1c87c83a 	sub	r3,r3,r18
   40b94:	1485883a 	add	r2,r2,r18
   40b98:	80800015 	stw	r2,0(r16)
   40b9c:	80c00215 	stw	r3,8(r16)
   40ba0:	9005883a 	mov	r2,r18
   40ba4:	003f7906 	br	4098c <__alt_data_end+0xfffcae2c>
   40ba8:	e009883a 	mov	r4,fp
   40bac:	01400284 	movi	r5,10
   40bb0:	900d883a 	mov	r6,r18
   40bb4:	00414500 	call	41450 <memchr>
   40bb8:	10003826 	beq	r2,zero,40c9c <__sfvwrite_r+0x498>
   40bbc:	10800044 	addi	r2,r2,1
   40bc0:	1729c83a 	sub	r20,r2,fp
   40bc4:	02000044 	movi	r8,1
   40bc8:	003f8f06 	br	40a08 <__alt_data_end+0xfffcaea8>
   40bcc:	80800517 	ldw	r2,20(r16)
   40bd0:	81400417 	ldw	r5,16(r16)
   40bd4:	87000017 	ldw	fp,0(r16)
   40bd8:	10a9883a 	add	r20,r2,r2
   40bdc:	a085883a 	add	r2,r20,r2
   40be0:	1028d7fa 	srli	r20,r2,31
   40be4:	e179c83a 	sub	fp,fp,r5
   40be8:	e1000044 	addi	r4,fp,1
   40bec:	a085883a 	add	r2,r20,r2
   40bf0:	1029d07a 	srai	r20,r2,1
   40bf4:	2485883a 	add	r2,r4,r18
   40bf8:	a00d883a 	mov	r6,r20
   40bfc:	a080022e 	bgeu	r20,r2,40c08 <__sfvwrite_r+0x404>
   40c00:	1029883a 	mov	r20,r2
   40c04:	100d883a 	mov	r6,r2
   40c08:	18c1000c 	andi	r3,r3,1024
   40c0c:	a809883a 	mov	r4,r21
   40c10:	183f6a26 	beq	r3,zero,409bc <__alt_data_end+0xfffcae5c>
   40c14:	300b883a 	mov	r5,r6
   40c18:	0040ca80 	call	40ca8 <_malloc_r>
   40c1c:	102d883a 	mov	r22,r2
   40c20:	103f6c26 	beq	r2,zero,409d4 <__alt_data_end+0xfffcae74>
   40c24:	81400417 	ldw	r5,16(r16)
   40c28:	1009883a 	mov	r4,r2
   40c2c:	e00d883a 	mov	r6,fp
   40c30:	00415380 	call	41538 <memcpy>
   40c34:	8080030b 	ldhu	r2,12(r16)
   40c38:	00fedfc4 	movi	r3,-1153
   40c3c:	10c4703a 	and	r2,r2,r3
   40c40:	10802014 	ori	r2,r2,128
   40c44:	8080030d 	sth	r2,12(r16)
   40c48:	b709883a 	add	r4,r22,fp
   40c4c:	a707c83a 	sub	r3,r20,fp
   40c50:	85800415 	stw	r22,16(r16)
   40c54:	85000515 	stw	r20,20(r16)
   40c58:	81000015 	stw	r4,0(r16)
   40c5c:	9039883a 	mov	fp,r18
   40c60:	80c00215 	stw	r3,8(r16)
   40c64:	9029883a 	mov	r20,r18
   40c68:	902d883a 	mov	r22,r18
   40c6c:	003f3d06 	br	40964 <__alt_data_end+0xfffcae04>
   40c70:	b80b883a 	mov	r5,r23
   40c74:	a00d883a 	mov	r6,r20
   40c78:	00416700 	call	41670 <memmove>
   40c7c:	80800017 	ldw	r2,0(r16)
   40c80:	a809883a 	mov	r4,r21
   40c84:	800b883a 	mov	r5,r16
   40c88:	1505883a 	add	r2,r2,r20
   40c8c:	80800015 	stw	r2,0(r16)
   40c90:	0041ef00 	call	41ef0 <_fflush_r>
   40c94:	103fa526 	beq	r2,zero,40b2c <__alt_data_end+0xfffcafcc>
   40c98:	003f5006 	br	409dc <__alt_data_end+0xfffcae7c>
   40c9c:	95000044 	addi	r20,r18,1
   40ca0:	02000044 	movi	r8,1
   40ca4:	003f5806 	br	40a08 <__alt_data_end+0xfffcaea8>

00040ca8 <_malloc_r>:
   40ca8:	defff504 	addi	sp,sp,-44
   40cac:	dc800315 	stw	r18,12(sp)
   40cb0:	dfc00a15 	stw	ra,40(sp)
   40cb4:	df000915 	stw	fp,36(sp)
   40cb8:	ddc00815 	stw	r23,32(sp)
   40cbc:	dd800715 	stw	r22,28(sp)
   40cc0:	dd400615 	stw	r21,24(sp)
   40cc4:	dd000515 	stw	r20,20(sp)
   40cc8:	dcc00415 	stw	r19,16(sp)
   40ccc:	dc400215 	stw	r17,8(sp)
   40cd0:	dc000115 	stw	r16,4(sp)
   40cd4:	288002c4 	addi	r2,r5,11
   40cd8:	00c00584 	movi	r3,22
   40cdc:	2025883a 	mov	r18,r4
   40ce0:	18802a2e 	bgeu	r3,r2,40d8c <_malloc_r+0xe4>
   40ce4:	047ffe04 	movi	r17,-8
   40ce8:	1462703a 	and	r17,r2,r17
   40cec:	88009e16 	blt	r17,zero,40f68 <_malloc_r+0x2c0>
   40cf0:	89409d36 	bltu	r17,r5,40f68 <_malloc_r+0x2c0>
   40cf4:	00438ac0 	call	438ac <__malloc_lock>
   40cf8:	00807dc4 	movi	r2,503
   40cfc:	14402736 	bltu	r2,r17,40d9c <_malloc_r+0xf4>
   40d00:	8806d0fa 	srli	r3,r17,3
   40d04:	04c00134 	movhi	r19,4
   40d08:	9cda9104 	addi	r19,r19,27204
   40d0c:	18c5883a 	add	r2,r3,r3
   40d10:	1085883a 	add	r2,r2,r2
   40d14:	1085883a 	add	r2,r2,r2
   40d18:	9885883a 	add	r2,r19,r2
   40d1c:	14000317 	ldw	r16,12(r2)
   40d20:	80814a26 	beq	r16,r2,4124c <_malloc_r+0x5a4>
   40d24:	80c00117 	ldw	r3,4(r16)
   40d28:	81000317 	ldw	r4,12(r16)
   40d2c:	00bfff04 	movi	r2,-4
   40d30:	1884703a 	and	r2,r3,r2
   40d34:	81400217 	ldw	r5,8(r16)
   40d38:	8085883a 	add	r2,r16,r2
   40d3c:	10c00117 	ldw	r3,4(r2)
   40d40:	29000315 	stw	r4,12(r5)
   40d44:	21400215 	stw	r5,8(r4)
   40d48:	18c00054 	ori	r3,r3,1
   40d4c:	10c00115 	stw	r3,4(r2)
   40d50:	9009883a 	mov	r4,r18
   40d54:	00438cc0 	call	438cc <__malloc_unlock>
   40d58:	80800204 	addi	r2,r16,8
   40d5c:	dfc00a17 	ldw	ra,40(sp)
   40d60:	df000917 	ldw	fp,36(sp)
   40d64:	ddc00817 	ldw	r23,32(sp)
   40d68:	dd800717 	ldw	r22,28(sp)
   40d6c:	dd400617 	ldw	r21,24(sp)
   40d70:	dd000517 	ldw	r20,20(sp)
   40d74:	dcc00417 	ldw	r19,16(sp)
   40d78:	dc800317 	ldw	r18,12(sp)
   40d7c:	dc400217 	ldw	r17,8(sp)
   40d80:	dc000117 	ldw	r16,4(sp)
   40d84:	dec00b04 	addi	sp,sp,44
   40d88:	f800283a 	ret
   40d8c:	04400404 	movi	r17,16
   40d90:	89407536 	bltu	r17,r5,40f68 <_malloc_r+0x2c0>
   40d94:	00438ac0 	call	438ac <__malloc_lock>
   40d98:	003fd906 	br	40d00 <__alt_data_end+0xfffcb1a0>
   40d9c:	8806d27a 	srli	r3,r17,9
   40da0:	18007526 	beq	r3,zero,40f78 <_malloc_r+0x2d0>
   40da4:	00800104 	movi	r2,4
   40da8:	10c0ef36 	bltu	r2,r3,41168 <_malloc_r+0x4c0>
   40dac:	8806d1ba 	srli	r3,r17,6
   40db0:	19c00e04 	addi	r7,r3,56
   40db4:	39cb883a 	add	r5,r7,r7
   40db8:	04c00134 	movhi	r19,4
   40dbc:	294b883a 	add	r5,r5,r5
   40dc0:	9cda9104 	addi	r19,r19,27204
   40dc4:	294b883a 	add	r5,r5,r5
   40dc8:	994b883a 	add	r5,r19,r5
   40dcc:	2c000317 	ldw	r16,12(r5)
   40dd0:	2c000e26 	beq	r5,r16,40e0c <_malloc_r+0x164>
   40dd4:	80800117 	ldw	r2,4(r16)
   40dd8:	01bfff04 	movi	r6,-4
   40ddc:	010003c4 	movi	r4,15
   40de0:	1184703a 	and	r2,r2,r6
   40de4:	1447c83a 	sub	r3,r2,r17
   40de8:	20c00716 	blt	r4,r3,40e08 <_malloc_r+0x160>
   40dec:	1800650e 	bge	r3,zero,40f84 <_malloc_r+0x2dc>
   40df0:	84000317 	ldw	r16,12(r16)
   40df4:	2c000526 	beq	r5,r16,40e0c <_malloc_r+0x164>
   40df8:	80800117 	ldw	r2,4(r16)
   40dfc:	1184703a 	and	r2,r2,r6
   40e00:	1447c83a 	sub	r3,r2,r17
   40e04:	20fff90e 	bge	r4,r3,40dec <__alt_data_end+0xfffcb28c>
   40e08:	39ffffc4 	addi	r7,r7,-1
   40e0c:	38c00044 	addi	r3,r7,1
   40e10:	01800134 	movhi	r6,4
   40e14:	9c000417 	ldw	r16,16(r19)
   40e18:	319a9104 	addi	r6,r6,27204
   40e1c:	32400204 	addi	r9,r6,8
   40e20:	82410326 	beq	r16,r9,41230 <_malloc_r+0x588>
   40e24:	81000117 	ldw	r4,4(r16)
   40e28:	00bfff04 	movi	r2,-4
   40e2c:	208e703a 	and	r7,r4,r2
   40e30:	3c45c83a 	sub	r2,r7,r17
   40e34:	010003c4 	movi	r4,15
   40e38:	2080ee16 	blt	r4,r2,411f4 <_malloc_r+0x54c>
   40e3c:	32400515 	stw	r9,20(r6)
   40e40:	32400415 	stw	r9,16(r6)
   40e44:	1000510e 	bge	r2,zero,40f8c <_malloc_r+0x2e4>
   40e48:	00807fc4 	movi	r2,511
   40e4c:	11c0ce36 	bltu	r2,r7,41188 <_malloc_r+0x4e0>
   40e50:	3808d0fa 	srli	r4,r7,3
   40e54:	01c00044 	movi	r7,1
   40e58:	30800117 	ldw	r2,4(r6)
   40e5c:	210b883a 	add	r5,r4,r4
   40e60:	294b883a 	add	r5,r5,r5
   40e64:	2009d0ba 	srai	r4,r4,2
   40e68:	294b883a 	add	r5,r5,r5
   40e6c:	298b883a 	add	r5,r5,r6
   40e70:	2a000217 	ldw	r8,8(r5)
   40e74:	3908983a 	sll	r4,r7,r4
   40e78:	81400315 	stw	r5,12(r16)
   40e7c:	82000215 	stw	r8,8(r16)
   40e80:	2088b03a 	or	r4,r4,r2
   40e84:	2c000215 	stw	r16,8(r5)
   40e88:	31000115 	stw	r4,4(r6)
   40e8c:	44000315 	stw	r16,12(r8)
   40e90:	1805d0ba 	srai	r2,r3,2
   40e94:	01400044 	movi	r5,1
   40e98:	288a983a 	sll	r5,r5,r2
   40e9c:	21404336 	bltu	r4,r5,40fac <_malloc_r+0x304>
   40ea0:	2144703a 	and	r2,r4,r5
   40ea4:	10000a1e 	bne	r2,zero,40ed0 <_malloc_r+0x228>
   40ea8:	00bfff04 	movi	r2,-4
   40eac:	294b883a 	add	r5,r5,r5
   40eb0:	1886703a 	and	r3,r3,r2
   40eb4:	2144703a 	and	r2,r4,r5
   40eb8:	18c00104 	addi	r3,r3,4
   40ebc:	1000041e 	bne	r2,zero,40ed0 <_malloc_r+0x228>
   40ec0:	294b883a 	add	r5,r5,r5
   40ec4:	2144703a 	and	r2,r4,r5
   40ec8:	18c00104 	addi	r3,r3,4
   40ecc:	103ffc26 	beq	r2,zero,40ec0 <__alt_data_end+0xfffcb360>
   40ed0:	023fff04 	movi	r8,-4
   40ed4:	01c003c4 	movi	r7,15
   40ed8:	18c5883a 	add	r2,r3,r3
   40edc:	1085883a 	add	r2,r2,r2
   40ee0:	1085883a 	add	r2,r2,r2
   40ee4:	9895883a 	add	r10,r19,r2
   40ee8:	52c00304 	addi	r11,r10,12
   40eec:	1819883a 	mov	r12,r3
   40ef0:	5c000017 	ldw	r16,0(r11)
   40ef4:	59bffd04 	addi	r6,r11,-12
   40ef8:	8180041e 	bne	r16,r6,40f0c <_malloc_r+0x264>
   40efc:	0000ce06 	br	41238 <_malloc_r+0x590>
   40f00:	2000d70e 	bge	r4,zero,41260 <_malloc_r+0x5b8>
   40f04:	84000317 	ldw	r16,12(r16)
   40f08:	8180cb26 	beq	r16,r6,41238 <_malloc_r+0x590>
   40f0c:	80800117 	ldw	r2,4(r16)
   40f10:	1204703a 	and	r2,r2,r8
   40f14:	1449c83a 	sub	r4,r2,r17
   40f18:	393ff90e 	bge	r7,r4,40f00 <__alt_data_end+0xfffcb3a0>
   40f1c:	80800317 	ldw	r2,12(r16)
   40f20:	80c00217 	ldw	r3,8(r16)
   40f24:	89400054 	ori	r5,r17,1
   40f28:	81400115 	stw	r5,4(r16)
   40f2c:	18800315 	stw	r2,12(r3)
   40f30:	10c00215 	stw	r3,8(r2)
   40f34:	8463883a 	add	r17,r16,r17
   40f38:	9c400515 	stw	r17,20(r19)
   40f3c:	9c400415 	stw	r17,16(r19)
   40f40:	20800054 	ori	r2,r4,1
   40f44:	88800115 	stw	r2,4(r17)
   40f48:	8a400315 	stw	r9,12(r17)
   40f4c:	8a400215 	stw	r9,8(r17)
   40f50:	8923883a 	add	r17,r17,r4
   40f54:	89000015 	stw	r4,0(r17)
   40f58:	9009883a 	mov	r4,r18
   40f5c:	00438cc0 	call	438cc <__malloc_unlock>
   40f60:	80800204 	addi	r2,r16,8
   40f64:	003f7d06 	br	40d5c <__alt_data_end+0xfffcb1fc>
   40f68:	00800304 	movi	r2,12
   40f6c:	90800015 	stw	r2,0(r18)
   40f70:	0005883a 	mov	r2,zero
   40f74:	003f7906 	br	40d5c <__alt_data_end+0xfffcb1fc>
   40f78:	01401f84 	movi	r5,126
   40f7c:	01c00fc4 	movi	r7,63
   40f80:	003f8d06 	br	40db8 <__alt_data_end+0xfffcb258>
   40f84:	81000317 	ldw	r4,12(r16)
   40f88:	003f6a06 	br	40d34 <__alt_data_end+0xfffcb1d4>
   40f8c:	81c5883a 	add	r2,r16,r7
   40f90:	10c00117 	ldw	r3,4(r2)
   40f94:	9009883a 	mov	r4,r18
   40f98:	18c00054 	ori	r3,r3,1
   40f9c:	10c00115 	stw	r3,4(r2)
   40fa0:	00438cc0 	call	438cc <__malloc_unlock>
   40fa4:	80800204 	addi	r2,r16,8
   40fa8:	003f6c06 	br	40d5c <__alt_data_end+0xfffcb1fc>
   40fac:	9c000217 	ldw	r16,8(r19)
   40fb0:	00bfff04 	movi	r2,-4
   40fb4:	85800117 	ldw	r22,4(r16)
   40fb8:	b0ac703a 	and	r22,r22,r2
   40fbc:	b4400336 	bltu	r22,r17,40fcc <_malloc_r+0x324>
   40fc0:	b445c83a 	sub	r2,r22,r17
   40fc4:	00c003c4 	movi	r3,15
   40fc8:	18805d16 	blt	r3,r2,41140 <_malloc_r+0x498>
   40fcc:	05c00174 	movhi	r23,5
   40fd0:	00800174 	movhi	r2,5
   40fd4:	bde04804 	addi	r23,r23,-32480
   40fd8:	10a72204 	addi	r2,r2,-25464
   40fdc:	15400017 	ldw	r21,0(r2)
   40fe0:	b9000017 	ldw	r4,0(r23)
   40fe4:	00ffffc4 	movi	r3,-1
   40fe8:	858d883a 	add	r6,r16,r22
   40fec:	8d6b883a 	add	r21,r17,r21
   40ff0:	20c0e426 	beq	r4,r3,41384 <_malloc_r+0x6dc>
   40ff4:	ad4403c4 	addi	r21,r21,4111
   40ff8:	00fc0004 	movi	r3,-4096
   40ffc:	a8ea703a 	and	r21,r21,r3
   41000:	9009883a 	mov	r4,r18
   41004:	a80b883a 	mov	r5,r21
   41008:	d9800015 	stw	r6,0(sp)
   4100c:	0041d6c0 	call	41d6c <_sbrk_r>
   41010:	00ffffc4 	movi	r3,-1
   41014:	1029883a 	mov	r20,r2
   41018:	d9800017 	ldw	r6,0(sp)
   4101c:	10c0a426 	beq	r2,r3,412b0 <_malloc_r+0x608>
   41020:	1180a236 	bltu	r2,r6,412ac <_malloc_r+0x604>
   41024:	07000174 	movhi	fp,5
   41028:	e7272b04 	addi	fp,fp,-25428
   4102c:	e0c00017 	ldw	r3,0(fp)
   41030:	a8c7883a 	add	r3,r21,r3
   41034:	e0c00015 	stw	r3,0(fp)
   41038:	3500da26 	beq	r6,r20,413a4 <_malloc_r+0x6fc>
   4103c:	b9000017 	ldw	r4,0(r23)
   41040:	00bfffc4 	movi	r2,-1
   41044:	2080e426 	beq	r4,r2,413d8 <_malloc_r+0x730>
   41048:	a185c83a 	sub	r2,r20,r6
   4104c:	1885883a 	add	r2,r3,r2
   41050:	e0800015 	stw	r2,0(fp)
   41054:	a0c001cc 	andi	r3,r20,7
   41058:	1800b526 	beq	r3,zero,41330 <_malloc_r+0x688>
   4105c:	a0e9c83a 	sub	r20,r20,r3
   41060:	00840204 	movi	r2,4104
   41064:	a5000204 	addi	r20,r20,8
   41068:	10c7c83a 	sub	r3,r2,r3
   4106c:	a545883a 	add	r2,r20,r21
   41070:	1083ffcc 	andi	r2,r2,4095
   41074:	18abc83a 	sub	r21,r3,r2
   41078:	9009883a 	mov	r4,r18
   4107c:	a80b883a 	mov	r5,r21
   41080:	0041d6c0 	call	41d6c <_sbrk_r>
   41084:	00ffffc4 	movi	r3,-1
   41088:	10c0d026 	beq	r2,r3,413cc <_malloc_r+0x724>
   4108c:	1507c83a 	sub	r3,r2,r20
   41090:	a8c7883a 	add	r3,r21,r3
   41094:	18c00054 	ori	r3,r3,1
   41098:	e0800017 	ldw	r2,0(fp)
   4109c:	9d000215 	stw	r20,8(r19)
   410a0:	a0c00115 	stw	r3,4(r20)
   410a4:	a887883a 	add	r3,r21,r2
   410a8:	e0c00015 	stw	r3,0(fp)
   410ac:	84c00e26 	beq	r16,r19,410e8 <_malloc_r+0x440>
   410b0:	018003c4 	movi	r6,15
   410b4:	3580a02e 	bgeu	r6,r22,41338 <_malloc_r+0x690>
   410b8:	81400117 	ldw	r5,4(r16)
   410bc:	013ffe04 	movi	r4,-8
   410c0:	b0bffd04 	addi	r2,r22,-12
   410c4:	1104703a 	and	r2,r2,r4
   410c8:	2900004c 	andi	r4,r5,1
   410cc:	1108b03a 	or	r4,r2,r4
   410d0:	81000115 	stw	r4,4(r16)
   410d4:	01400144 	movi	r5,5
   410d8:	8089883a 	add	r4,r16,r2
   410dc:	21400115 	stw	r5,4(r4)
   410e0:	21400215 	stw	r5,8(r4)
   410e4:	3080c036 	bltu	r6,r2,413e8 <_malloc_r+0x740>
   410e8:	00800174 	movhi	r2,5
   410ec:	10a72104 	addi	r2,r2,-25468
   410f0:	11000017 	ldw	r4,0(r2)
   410f4:	20c0012e 	bgeu	r4,r3,410fc <_malloc_r+0x454>
   410f8:	10c00015 	stw	r3,0(r2)
   410fc:	00800174 	movhi	r2,5
   41100:	10a72004 	addi	r2,r2,-25472
   41104:	11000017 	ldw	r4,0(r2)
   41108:	9c000217 	ldw	r16,8(r19)
   4110c:	20c0012e 	bgeu	r4,r3,41114 <_malloc_r+0x46c>
   41110:	10c00015 	stw	r3,0(r2)
   41114:	80c00117 	ldw	r3,4(r16)
   41118:	00bfff04 	movi	r2,-4
   4111c:	1886703a 	and	r3,r3,r2
   41120:	1c45c83a 	sub	r2,r3,r17
   41124:	1c400236 	bltu	r3,r17,41130 <_malloc_r+0x488>
   41128:	00c003c4 	movi	r3,15
   4112c:	18800416 	blt	r3,r2,41140 <_malloc_r+0x498>
   41130:	9009883a 	mov	r4,r18
   41134:	00438cc0 	call	438cc <__malloc_unlock>
   41138:	0005883a 	mov	r2,zero
   4113c:	003f0706 	br	40d5c <__alt_data_end+0xfffcb1fc>
   41140:	88c00054 	ori	r3,r17,1
   41144:	80c00115 	stw	r3,4(r16)
   41148:	8463883a 	add	r17,r16,r17
   4114c:	10800054 	ori	r2,r2,1
   41150:	9c400215 	stw	r17,8(r19)
   41154:	88800115 	stw	r2,4(r17)
   41158:	9009883a 	mov	r4,r18
   4115c:	00438cc0 	call	438cc <__malloc_unlock>
   41160:	80800204 	addi	r2,r16,8
   41164:	003efd06 	br	40d5c <__alt_data_end+0xfffcb1fc>
   41168:	00800504 	movi	r2,20
   4116c:	10c0482e 	bgeu	r2,r3,41290 <_malloc_r+0x5e8>
   41170:	00801504 	movi	r2,84
   41174:	10c06836 	bltu	r2,r3,41318 <_malloc_r+0x670>
   41178:	8806d33a 	srli	r3,r17,12
   4117c:	19c01b84 	addi	r7,r3,110
   41180:	39cb883a 	add	r5,r7,r7
   41184:	003f0c06 	br	40db8 <__alt_data_end+0xfffcb258>
   41188:	3804d27a 	srli	r2,r7,9
   4118c:	01000104 	movi	r4,4
   41190:	2080422e 	bgeu	r4,r2,4129c <_malloc_r+0x5f4>
   41194:	01000504 	movi	r4,20
   41198:	20807c36 	bltu	r4,r2,4138c <_malloc_r+0x6e4>
   4119c:	110016c4 	addi	r4,r2,91
   411a0:	210b883a 	add	r5,r4,r4
   411a4:	294b883a 	add	r5,r5,r5
   411a8:	294b883a 	add	r5,r5,r5
   411ac:	994b883a 	add	r5,r19,r5
   411b0:	28800217 	ldw	r2,8(r5)
   411b4:	02000134 	movhi	r8,4
   411b8:	421a9104 	addi	r8,r8,27204
   411bc:	11406326 	beq	r2,r5,4134c <_malloc_r+0x6a4>
   411c0:	01bfff04 	movi	r6,-4
   411c4:	11000117 	ldw	r4,4(r2)
   411c8:	2188703a 	and	r4,r4,r6
   411cc:	3900022e 	bgeu	r7,r4,411d8 <_malloc_r+0x530>
   411d0:	10800217 	ldw	r2,8(r2)
   411d4:	28bffb1e 	bne	r5,r2,411c4 <__alt_data_end+0xfffcb664>
   411d8:	11800317 	ldw	r6,12(r2)
   411dc:	99000117 	ldw	r4,4(r19)
   411e0:	81800315 	stw	r6,12(r16)
   411e4:	80800215 	stw	r2,8(r16)
   411e8:	34000215 	stw	r16,8(r6)
   411ec:	14000315 	stw	r16,12(r2)
   411f0:	003f2706 	br	40e90 <__alt_data_end+0xfffcb330>
   411f4:	88c00054 	ori	r3,r17,1
   411f8:	80c00115 	stw	r3,4(r16)
   411fc:	8463883a 	add	r17,r16,r17
   41200:	34400515 	stw	r17,20(r6)
   41204:	34400415 	stw	r17,16(r6)
   41208:	10c00054 	ori	r3,r2,1
   4120c:	8a400315 	stw	r9,12(r17)
   41210:	8a400215 	stw	r9,8(r17)
   41214:	88c00115 	stw	r3,4(r17)
   41218:	88a3883a 	add	r17,r17,r2
   4121c:	88800015 	stw	r2,0(r17)
   41220:	9009883a 	mov	r4,r18
   41224:	00438cc0 	call	438cc <__malloc_unlock>
   41228:	80800204 	addi	r2,r16,8
   4122c:	003ecb06 	br	40d5c <__alt_data_end+0xfffcb1fc>
   41230:	31000117 	ldw	r4,4(r6)
   41234:	003f1606 	br	40e90 <__alt_data_end+0xfffcb330>
   41238:	63000044 	addi	r12,r12,1
   4123c:	608000cc 	andi	r2,r12,3
   41240:	5ac00204 	addi	r11,r11,8
   41244:	103f2a1e 	bne	r2,zero,40ef0 <__alt_data_end+0xfffcb390>
   41248:	00002106 	br	412d0 <_malloc_r+0x628>
   4124c:	80800204 	addi	r2,r16,8
   41250:	84000517 	ldw	r16,20(r16)
   41254:	143eb31e 	bne	r2,r16,40d24 <__alt_data_end+0xfffcb1c4>
   41258:	18c00084 	addi	r3,r3,2
   4125c:	003eec06 	br	40e10 <__alt_data_end+0xfffcb2b0>
   41260:	8085883a 	add	r2,r16,r2
   41264:	10c00117 	ldw	r3,4(r2)
   41268:	81000317 	ldw	r4,12(r16)
   4126c:	81400217 	ldw	r5,8(r16)
   41270:	18c00054 	ori	r3,r3,1
   41274:	10c00115 	stw	r3,4(r2)
   41278:	29000315 	stw	r4,12(r5)
   4127c:	21400215 	stw	r5,8(r4)
   41280:	9009883a 	mov	r4,r18
   41284:	00438cc0 	call	438cc <__malloc_unlock>
   41288:	80800204 	addi	r2,r16,8
   4128c:	003eb306 	br	40d5c <__alt_data_end+0xfffcb1fc>
   41290:	19c016c4 	addi	r7,r3,91
   41294:	39cb883a 	add	r5,r7,r7
   41298:	003ec706 	br	40db8 <__alt_data_end+0xfffcb258>
   4129c:	3804d1ba 	srli	r2,r7,6
   412a0:	11000e04 	addi	r4,r2,56
   412a4:	210b883a 	add	r5,r4,r4
   412a8:	003fbe06 	br	411a4 <__alt_data_end+0xfffcb644>
   412ac:	84ff5d26 	beq	r16,r19,41024 <__alt_data_end+0xfffcb4c4>
   412b0:	9c000217 	ldw	r16,8(r19)
   412b4:	00bfff04 	movi	r2,-4
   412b8:	80c00117 	ldw	r3,4(r16)
   412bc:	1886703a 	and	r3,r3,r2
   412c0:	003f9706 	br	41120 <__alt_data_end+0xfffcb5c0>
   412c4:	52800017 	ldw	r10,0(r10)
   412c8:	18ffffc4 	addi	r3,r3,-1
   412cc:	50805c1e 	bne	r10,r2,41440 <_malloc_r+0x798>
   412d0:	190000cc 	andi	r4,r3,3
   412d4:	50bffe04 	addi	r2,r10,-8
   412d8:	203ffa1e 	bne	r4,zero,412c4 <__alt_data_end+0xfffcb764>
   412dc:	98800117 	ldw	r2,4(r19)
   412e0:	0146303a 	nor	r3,zero,r5
   412e4:	1884703a 	and	r2,r3,r2
   412e8:	98800115 	stw	r2,4(r19)
   412ec:	294b883a 	add	r5,r5,r5
   412f0:	117f2e36 	bltu	r2,r5,40fac <__alt_data_end+0xfffcb44c>
   412f4:	283f2d26 	beq	r5,zero,40fac <__alt_data_end+0xfffcb44c>
   412f8:	1146703a 	and	r3,r2,r5
   412fc:	1800521e 	bne	r3,zero,41448 <_malloc_r+0x7a0>
   41300:	6007883a 	mov	r3,r12
   41304:	294b883a 	add	r5,r5,r5
   41308:	1148703a 	and	r4,r2,r5
   4130c:	18c00104 	addi	r3,r3,4
   41310:	203ffc26 	beq	r4,zero,41304 <__alt_data_end+0xfffcb7a4>
   41314:	003ef006 	br	40ed8 <__alt_data_end+0xfffcb378>
   41318:	00805504 	movi	r2,340
   4131c:	10c01336 	bltu	r2,r3,4136c <_malloc_r+0x6c4>
   41320:	8806d3fa 	srli	r3,r17,15
   41324:	19c01dc4 	addi	r7,r3,119
   41328:	39cb883a 	add	r5,r7,r7
   4132c:	003ea206 	br	40db8 <__alt_data_end+0xfffcb258>
   41330:	00c40004 	movi	r3,4096
   41334:	003f4d06 	br	4106c <__alt_data_end+0xfffcb50c>
   41338:	00800044 	movi	r2,1
   4133c:	a0800115 	stw	r2,4(r20)
   41340:	a021883a 	mov	r16,r20
   41344:	0007883a 	mov	r3,zero
   41348:	003f7506 	br	41120 <__alt_data_end+0xfffcb5c0>
   4134c:	200bd0ba 	srai	r5,r4,2
   41350:	01800044 	movi	r6,1
   41354:	41000117 	ldw	r4,4(r8)
   41358:	314a983a 	sll	r5,r6,r5
   4135c:	100d883a 	mov	r6,r2
   41360:	2908b03a 	or	r4,r5,r4
   41364:	41000115 	stw	r4,4(r8)
   41368:	003f9d06 	br	411e0 <__alt_data_end+0xfffcb680>
   4136c:	00815504 	movi	r2,1364
   41370:	10c01336 	bltu	r2,r3,413c0 <_malloc_r+0x718>
   41374:	8806d4ba 	srli	r3,r17,18
   41378:	19c01f04 	addi	r7,r3,124
   4137c:	39cb883a 	add	r5,r7,r7
   41380:	003e8d06 	br	40db8 <__alt_data_end+0xfffcb258>
   41384:	ad400404 	addi	r21,r21,16
   41388:	003f1d06 	br	41000 <__alt_data_end+0xfffcb4a0>
   4138c:	01001504 	movi	r4,84
   41390:	20801c36 	bltu	r4,r2,41404 <_malloc_r+0x75c>
   41394:	3804d33a 	srli	r2,r7,12
   41398:	11001b84 	addi	r4,r2,110
   4139c:	210b883a 	add	r5,r4,r4
   413a0:	003f8006 	br	411a4 <__alt_data_end+0xfffcb644>
   413a4:	3083ffcc 	andi	r2,r6,4095
   413a8:	103f241e 	bne	r2,zero,4103c <__alt_data_end+0xfffcb4dc>
   413ac:	99000217 	ldw	r4,8(r19)
   413b0:	ad85883a 	add	r2,r21,r22
   413b4:	10800054 	ori	r2,r2,1
   413b8:	20800115 	stw	r2,4(r4)
   413bc:	003f4a06 	br	410e8 <__alt_data_end+0xfffcb588>
   413c0:	01403f04 	movi	r5,252
   413c4:	01c01f84 	movi	r7,126
   413c8:	003e7b06 	br	40db8 <__alt_data_end+0xfffcb258>
   413cc:	00c00044 	movi	r3,1
   413d0:	002b883a 	mov	r21,zero
   413d4:	003f3006 	br	41098 <__alt_data_end+0xfffcb538>
   413d8:	00800174 	movhi	r2,5
   413dc:	10a04804 	addi	r2,r2,-32480
   413e0:	15000015 	stw	r20,0(r2)
   413e4:	003f1b06 	br	41054 <__alt_data_end+0xfffcb4f4>
   413e8:	9009883a 	mov	r4,r18
   413ec:	81400204 	addi	r5,r16,8
   413f0:	00426200 	call	42620 <_free_r>
   413f4:	00800174 	movhi	r2,5
   413f8:	10a72b04 	addi	r2,r2,-25428
   413fc:	10c00017 	ldw	r3,0(r2)
   41400:	003f3906 	br	410e8 <__alt_data_end+0xfffcb588>
   41404:	01005504 	movi	r4,340
   41408:	20800436 	bltu	r4,r2,4141c <_malloc_r+0x774>
   4140c:	3804d3fa 	srli	r2,r7,15
   41410:	11001dc4 	addi	r4,r2,119
   41414:	210b883a 	add	r5,r4,r4
   41418:	003f6206 	br	411a4 <__alt_data_end+0xfffcb644>
   4141c:	01015504 	movi	r4,1364
   41420:	20800436 	bltu	r4,r2,41434 <_malloc_r+0x78c>
   41424:	3804d4ba 	srli	r2,r7,18
   41428:	11001f04 	addi	r4,r2,124
   4142c:	210b883a 	add	r5,r4,r4
   41430:	003f5c06 	br	411a4 <__alt_data_end+0xfffcb644>
   41434:	01403f04 	movi	r5,252
   41438:	01001f84 	movi	r4,126
   4143c:	003f5906 	br	411a4 <__alt_data_end+0xfffcb644>
   41440:	98800117 	ldw	r2,4(r19)
   41444:	003fa906 	br	412ec <__alt_data_end+0xfffcb78c>
   41448:	6007883a 	mov	r3,r12
   4144c:	003ea206 	br	40ed8 <__alt_data_end+0xfffcb378>

00041450 <memchr>:
   41450:	208000cc 	andi	r2,r4,3
   41454:	280f883a 	mov	r7,r5
   41458:	10003526 	beq	r2,zero,41530 <memchr+0xe0>
   4145c:	30bfffc4 	addi	r2,r6,-1
   41460:	30001b26 	beq	r6,zero,414d0 <memchr+0x80>
   41464:	21800003 	ldbu	r6,0(r4)
   41468:	28c03fcc 	andi	r3,r5,255
   4146c:	30c01a26 	beq	r6,r3,414d8 <memchr+0x88>
   41470:	180d883a 	mov	r6,r3
   41474:	00000406 	br	41488 <memchr+0x38>
   41478:	10001526 	beq	r2,zero,414d0 <memchr+0x80>
   4147c:	20c00003 	ldbu	r3,0(r4)
   41480:	10bfffc4 	addi	r2,r2,-1
   41484:	19801426 	beq	r3,r6,414d8 <memchr+0x88>
   41488:	21000044 	addi	r4,r4,1
   4148c:	20c000cc 	andi	r3,r4,3
   41490:	183ff91e 	bne	r3,zero,41478 <__alt_data_end+0xfffcb918>
   41494:	024000c4 	movi	r9,3
   41498:	48801136 	bltu	r9,r2,414e0 <memchr+0x90>
   4149c:	10000c26 	beq	r2,zero,414d0 <memchr+0x80>
   414a0:	20c00003 	ldbu	r3,0(r4)
   414a4:	29403fcc 	andi	r5,r5,255
   414a8:	19400b26 	beq	r3,r5,414d8 <memchr+0x88>
   414ac:	20c00044 	addi	r3,r4,1
   414b0:	2085883a 	add	r2,r4,r2
   414b4:	39803fcc 	andi	r6,r7,255
   414b8:	00000306 	br	414c8 <memchr+0x78>
   414bc:	18c00044 	addi	r3,r3,1
   414c0:	197fffc3 	ldbu	r5,-1(r3)
   414c4:	29800426 	beq	r5,r6,414d8 <memchr+0x88>
   414c8:	1809883a 	mov	r4,r3
   414cc:	18bffb1e 	bne	r3,r2,414bc <__alt_data_end+0xfffcb95c>
   414d0:	0005883a 	mov	r2,zero
   414d4:	f800283a 	ret
   414d8:	2005883a 	mov	r2,r4
   414dc:	f800283a 	ret
   414e0:	28c03fcc 	andi	r3,r5,255
   414e4:	1810923a 	slli	r8,r3,8
   414e8:	02ffbff4 	movhi	r11,65279
   414ec:	02a02074 	movhi	r10,32897
   414f0:	40c6b03a 	or	r3,r8,r3
   414f4:	1810943a 	slli	r8,r3,16
   414f8:	5affbfc4 	addi	r11,r11,-257
   414fc:	52a02004 	addi	r10,r10,-32640
   41500:	40d0b03a 	or	r8,r8,r3
   41504:	20c00017 	ldw	r3,0(r4)
   41508:	40c6f03a 	xor	r3,r8,r3
   4150c:	1acd883a 	add	r6,r3,r11
   41510:	00c6303a 	nor	r3,zero,r3
   41514:	30c6703a 	and	r3,r6,r3
   41518:	1a86703a 	and	r3,r3,r10
   4151c:	183fdf1e 	bne	r3,zero,4149c <__alt_data_end+0xfffcb93c>
   41520:	10bfff04 	addi	r2,r2,-4
   41524:	21000104 	addi	r4,r4,4
   41528:	48bff636 	bltu	r9,r2,41504 <__alt_data_end+0xfffcb9a4>
   4152c:	003fdb06 	br	4149c <__alt_data_end+0xfffcb93c>
   41530:	3005883a 	mov	r2,r6
   41534:	003fd706 	br	41494 <__alt_data_end+0xfffcb934>

00041538 <memcpy>:
   41538:	deffff04 	addi	sp,sp,-4
   4153c:	dc000015 	stw	r16,0(sp)
   41540:	00c003c4 	movi	r3,15
   41544:	2005883a 	mov	r2,r4
   41548:	1980432e 	bgeu	r3,r6,41658 <memcpy+0x120>
   4154c:	2146b03a 	or	r3,r4,r5
   41550:	18c000cc 	andi	r3,r3,3
   41554:	1800421e 	bne	r3,zero,41660 <memcpy+0x128>
   41558:	343ffc04 	addi	r16,r6,-16
   4155c:	8020d13a 	srli	r16,r16,4
   41560:	28c00104 	addi	r3,r5,4
   41564:	23400104 	addi	r13,r4,4
   41568:	801e913a 	slli	r15,r16,4
   4156c:	2b000204 	addi	r12,r5,8
   41570:	22c00204 	addi	r11,r4,8
   41574:	7bc00504 	addi	r15,r15,20
   41578:	2a800304 	addi	r10,r5,12
   4157c:	22400304 	addi	r9,r4,12
   41580:	2bdf883a 	add	r15,r5,r15
   41584:	2811883a 	mov	r8,r5
   41588:	200f883a 	mov	r7,r4
   4158c:	41000017 	ldw	r4,0(r8)
   41590:	39c00404 	addi	r7,r7,16
   41594:	18c00404 	addi	r3,r3,16
   41598:	393ffc15 	stw	r4,-16(r7)
   4159c:	1bbffc17 	ldw	r14,-16(r3)
   415a0:	6b400404 	addi	r13,r13,16
   415a4:	5ac00404 	addi	r11,r11,16
   415a8:	6bbffc15 	stw	r14,-16(r13)
   415ac:	63800017 	ldw	r14,0(r12)
   415b0:	4a400404 	addi	r9,r9,16
   415b4:	42000404 	addi	r8,r8,16
   415b8:	5bbffc15 	stw	r14,-16(r11)
   415bc:	53800017 	ldw	r14,0(r10)
   415c0:	63000404 	addi	r12,r12,16
   415c4:	52800404 	addi	r10,r10,16
   415c8:	4bbffc15 	stw	r14,-16(r9)
   415cc:	1bffef1e 	bne	r3,r15,4158c <__alt_data_end+0xfffcba2c>
   415d0:	81c00044 	addi	r7,r16,1
   415d4:	380e913a 	slli	r7,r7,4
   415d8:	310003cc 	andi	r4,r6,15
   415dc:	02c000c4 	movi	r11,3
   415e0:	11c7883a 	add	r3,r2,r7
   415e4:	29cb883a 	add	r5,r5,r7
   415e8:	59001f2e 	bgeu	r11,r4,41668 <memcpy+0x130>
   415ec:	1813883a 	mov	r9,r3
   415f0:	2811883a 	mov	r8,r5
   415f4:	200f883a 	mov	r7,r4
   415f8:	42800017 	ldw	r10,0(r8)
   415fc:	4a400104 	addi	r9,r9,4
   41600:	39ffff04 	addi	r7,r7,-4
   41604:	4abfff15 	stw	r10,-4(r9)
   41608:	42000104 	addi	r8,r8,4
   4160c:	59fffa36 	bltu	r11,r7,415f8 <__alt_data_end+0xfffcba98>
   41610:	213fff04 	addi	r4,r4,-4
   41614:	2008d0ba 	srli	r4,r4,2
   41618:	318000cc 	andi	r6,r6,3
   4161c:	21000044 	addi	r4,r4,1
   41620:	2109883a 	add	r4,r4,r4
   41624:	2109883a 	add	r4,r4,r4
   41628:	1907883a 	add	r3,r3,r4
   4162c:	290b883a 	add	r5,r5,r4
   41630:	30000626 	beq	r6,zero,4164c <memcpy+0x114>
   41634:	198d883a 	add	r6,r3,r6
   41638:	29c00003 	ldbu	r7,0(r5)
   4163c:	18c00044 	addi	r3,r3,1
   41640:	29400044 	addi	r5,r5,1
   41644:	19ffffc5 	stb	r7,-1(r3)
   41648:	19bffb1e 	bne	r3,r6,41638 <__alt_data_end+0xfffcbad8>
   4164c:	dc000017 	ldw	r16,0(sp)
   41650:	dec00104 	addi	sp,sp,4
   41654:	f800283a 	ret
   41658:	2007883a 	mov	r3,r4
   4165c:	003ff406 	br	41630 <__alt_data_end+0xfffcbad0>
   41660:	2007883a 	mov	r3,r4
   41664:	003ff306 	br	41634 <__alt_data_end+0xfffcbad4>
   41668:	200d883a 	mov	r6,r4
   4166c:	003ff006 	br	41630 <__alt_data_end+0xfffcbad0>

00041670 <memmove>:
   41670:	2005883a 	mov	r2,r4
   41674:	29000b2e 	bgeu	r5,r4,416a4 <memmove+0x34>
   41678:	298f883a 	add	r7,r5,r6
   4167c:	21c0092e 	bgeu	r4,r7,416a4 <memmove+0x34>
   41680:	2187883a 	add	r3,r4,r6
   41684:	198bc83a 	sub	r5,r3,r6
   41688:	30004b26 	beq	r6,zero,417b8 <memmove+0x148>
   4168c:	39ffffc4 	addi	r7,r7,-1
   41690:	39000003 	ldbu	r4,0(r7)
   41694:	18ffffc4 	addi	r3,r3,-1
   41698:	19000005 	stb	r4,0(r3)
   4169c:	197ffb1e 	bne	r3,r5,4168c <__alt_data_end+0xfffcbb2c>
   416a0:	f800283a 	ret
   416a4:	00c003c4 	movi	r3,15
   416a8:	1980412e 	bgeu	r3,r6,417b0 <memmove+0x140>
   416ac:	1146b03a 	or	r3,r2,r5
   416b0:	18c000cc 	andi	r3,r3,3
   416b4:	1800411e 	bne	r3,zero,417bc <memmove+0x14c>
   416b8:	33fffc04 	addi	r15,r6,-16
   416bc:	781ed13a 	srli	r15,r15,4
   416c0:	28c00104 	addi	r3,r5,4
   416c4:	13400104 	addi	r13,r2,4
   416c8:	781c913a 	slli	r14,r15,4
   416cc:	2b000204 	addi	r12,r5,8
   416d0:	12c00204 	addi	r11,r2,8
   416d4:	73800504 	addi	r14,r14,20
   416d8:	2a800304 	addi	r10,r5,12
   416dc:	12400304 	addi	r9,r2,12
   416e0:	2b9d883a 	add	r14,r5,r14
   416e4:	2811883a 	mov	r8,r5
   416e8:	100f883a 	mov	r7,r2
   416ec:	41000017 	ldw	r4,0(r8)
   416f0:	39c00404 	addi	r7,r7,16
   416f4:	18c00404 	addi	r3,r3,16
   416f8:	393ffc15 	stw	r4,-16(r7)
   416fc:	193ffc17 	ldw	r4,-16(r3)
   41700:	6b400404 	addi	r13,r13,16
   41704:	5ac00404 	addi	r11,r11,16
   41708:	693ffc15 	stw	r4,-16(r13)
   4170c:	61000017 	ldw	r4,0(r12)
   41710:	4a400404 	addi	r9,r9,16
   41714:	42000404 	addi	r8,r8,16
   41718:	593ffc15 	stw	r4,-16(r11)
   4171c:	51000017 	ldw	r4,0(r10)
   41720:	63000404 	addi	r12,r12,16
   41724:	52800404 	addi	r10,r10,16
   41728:	493ffc15 	stw	r4,-16(r9)
   4172c:	1bbfef1e 	bne	r3,r14,416ec <__alt_data_end+0xfffcbb8c>
   41730:	79000044 	addi	r4,r15,1
   41734:	2008913a 	slli	r4,r4,4
   41738:	328003cc 	andi	r10,r6,15
   4173c:	02c000c4 	movi	r11,3
   41740:	1107883a 	add	r3,r2,r4
   41744:	290b883a 	add	r5,r5,r4
   41748:	5a801e2e 	bgeu	r11,r10,417c4 <memmove+0x154>
   4174c:	1813883a 	mov	r9,r3
   41750:	2811883a 	mov	r8,r5
   41754:	500f883a 	mov	r7,r10
   41758:	41000017 	ldw	r4,0(r8)
   4175c:	4a400104 	addi	r9,r9,4
   41760:	39ffff04 	addi	r7,r7,-4
   41764:	493fff15 	stw	r4,-4(r9)
   41768:	42000104 	addi	r8,r8,4
   4176c:	59fffa36 	bltu	r11,r7,41758 <__alt_data_end+0xfffcbbf8>
   41770:	513fff04 	addi	r4,r10,-4
   41774:	2008d0ba 	srli	r4,r4,2
   41778:	318000cc 	andi	r6,r6,3
   4177c:	21000044 	addi	r4,r4,1
   41780:	2109883a 	add	r4,r4,r4
   41784:	2109883a 	add	r4,r4,r4
   41788:	1907883a 	add	r3,r3,r4
   4178c:	290b883a 	add	r5,r5,r4
   41790:	30000926 	beq	r6,zero,417b8 <memmove+0x148>
   41794:	198d883a 	add	r6,r3,r6
   41798:	29c00003 	ldbu	r7,0(r5)
   4179c:	18c00044 	addi	r3,r3,1
   417a0:	29400044 	addi	r5,r5,1
   417a4:	19ffffc5 	stb	r7,-1(r3)
   417a8:	19bffb1e 	bne	r3,r6,41798 <__alt_data_end+0xfffcbc38>
   417ac:	f800283a 	ret
   417b0:	1007883a 	mov	r3,r2
   417b4:	003ff606 	br	41790 <__alt_data_end+0xfffcbc30>
   417b8:	f800283a 	ret
   417bc:	1007883a 	mov	r3,r2
   417c0:	003ff406 	br	41794 <__alt_data_end+0xfffcbc34>
   417c4:	500d883a 	mov	r6,r10
   417c8:	003ff106 	br	41790 <__alt_data_end+0xfffcbc30>

000417cc <_realloc_r>:
   417cc:	defff604 	addi	sp,sp,-40
   417d0:	dcc00315 	stw	r19,12(sp)
   417d4:	dc400115 	stw	r17,4(sp)
   417d8:	dfc00915 	stw	ra,36(sp)
   417dc:	df000815 	stw	fp,32(sp)
   417e0:	ddc00715 	stw	r23,28(sp)
   417e4:	dd800615 	stw	r22,24(sp)
   417e8:	dd400515 	stw	r21,20(sp)
   417ec:	dd000415 	stw	r20,16(sp)
   417f0:	dc800215 	stw	r18,8(sp)
   417f4:	dc000015 	stw	r16,0(sp)
   417f8:	2827883a 	mov	r19,r5
   417fc:	3023883a 	mov	r17,r6
   41800:	2800bf26 	beq	r5,zero,41b00 <_realloc_r+0x334>
   41804:	2025883a 	mov	r18,r4
   41808:	00438ac0 	call	438ac <__malloc_lock>
   4180c:	98ffff17 	ldw	r3,-4(r19)
   41810:	01bfff04 	movi	r6,-4
   41814:	890002c4 	addi	r4,r17,11
   41818:	01c00584 	movi	r7,22
   4181c:	9d7ffe04 	addi	r21,r19,-8
   41820:	19a0703a 	and	r16,r3,r6
   41824:	39003f2e 	bgeu	r7,r4,41924 <_realloc_r+0x158>
   41828:	053ffe04 	movi	r20,-8
   4182c:	2528703a 	and	r20,r4,r20
   41830:	a00f883a 	mov	r7,r20
   41834:	a0008216 	blt	r20,zero,41a40 <_realloc_r+0x274>
   41838:	a4408136 	bltu	r20,r17,41a40 <_realloc_r+0x274>
   4183c:	81c03c0e 	bge	r16,r7,41930 <_realloc_r+0x164>
   41840:	07000134 	movhi	fp,4
   41844:	e71a9104 	addi	fp,fp,27204
   41848:	e1000217 	ldw	r4,8(fp)
   4184c:	ac05883a 	add	r2,r21,r16
   41850:	2080bf26 	beq	r4,r2,41b50 <_realloc_r+0x384>
   41854:	11000117 	ldw	r4,4(r2)
   41858:	023fff84 	movi	r8,-2
   4185c:	2210703a 	and	r8,r4,r8
   41860:	1211883a 	add	r8,r2,r8
   41864:	41400117 	ldw	r5,4(r8)
   41868:	2940004c 	andi	r5,r5,1
   4186c:	28004a1e 	bne	r5,zero,41998 <_realloc_r+0x1cc>
   41870:	017fff04 	movi	r5,-4
   41874:	2148703a 	and	r4,r4,r5
   41878:	2409883a 	add	r4,r4,r16
   4187c:	21c0ad0e 	bge	r4,r7,41b34 <_realloc_r+0x368>
   41880:	18c0004c 	andi	r3,r3,1
   41884:	18007f1e 	bne	r3,zero,41a84 <_realloc_r+0x2b8>
   41888:	9dfffe17 	ldw	r23,-8(r19)
   4188c:	adefc83a 	sub	r23,r21,r23
   41890:	bd800117 	ldw	r22,4(r23)
   41894:	b14a703a 	and	r5,r22,r5
   41898:	216d883a 	add	r22,r4,r5
   4189c:	b1c04516 	blt	r22,r7,419b4 <_realloc_r+0x1e8>
   418a0:	10c00317 	ldw	r3,12(r2)
   418a4:	10800217 	ldw	r2,8(r2)
   418a8:	81bfff04 	addi	r6,r16,-4
   418ac:	bc400204 	addi	r17,r23,8
   418b0:	10c00315 	stw	r3,12(r2)
   418b4:	18800215 	stw	r2,8(r3)
   418b8:	b9400217 	ldw	r5,8(r23)
   418bc:	b8c00317 	ldw	r3,12(r23)
   418c0:	00800904 	movi	r2,36
   418c4:	28c00315 	stw	r3,12(r5)
   418c8:	19400215 	stw	r5,8(r3)
   418cc:	1180ef36 	bltu	r2,r6,41c8c <_realloc_r+0x4c0>
   418d0:	008004c4 	movi	r2,19
   418d4:	1180da2e 	bgeu	r2,r6,41c40 <_realloc_r+0x474>
   418d8:	98800017 	ldw	r2,0(r19)
   418dc:	b8800215 	stw	r2,8(r23)
   418e0:	98800117 	ldw	r2,4(r19)
   418e4:	b8800315 	stw	r2,12(r23)
   418e8:	008006c4 	movi	r2,27
   418ec:	1180fc2e 	bgeu	r2,r6,41ce0 <_realloc_r+0x514>
   418f0:	98800217 	ldw	r2,8(r19)
   418f4:	b8800415 	stw	r2,16(r23)
   418f8:	98800317 	ldw	r2,12(r19)
   418fc:	b8800515 	stw	r2,20(r23)
   41900:	00800904 	movi	r2,36
   41904:	3080421e 	bne	r6,r2,41a10 <_realloc_r+0x244>
   41908:	98800417 	ldw	r2,16(r19)
   4190c:	9cc00604 	addi	r19,r19,24
   41910:	b8c00804 	addi	r3,r23,32
   41914:	b8800615 	stw	r2,24(r23)
   41918:	98bfff17 	ldw	r2,-4(r19)
   4191c:	b8800715 	stw	r2,28(r23)
   41920:	00003d06 	br	41a18 <_realloc_r+0x24c>
   41924:	01c00404 	movi	r7,16
   41928:	3829883a 	mov	r20,r7
   4192c:	003fc206 	br	41838 <__alt_data_end+0xfffcbcd8>
   41930:	9823883a 	mov	r17,r19
   41934:	850fc83a 	sub	r7,r16,r20
   41938:	008003c4 	movi	r2,15
   4193c:	18c0004c 	andi	r3,r3,1
   41940:	11c04336 	bltu	r2,r7,41a50 <_realloc_r+0x284>
   41944:	1c06b03a 	or	r3,r3,r16
   41948:	a8c00115 	stw	r3,4(r21)
   4194c:	ac21883a 	add	r16,r21,r16
   41950:	80c00117 	ldw	r3,4(r16)
   41954:	18c00054 	ori	r3,r3,1
   41958:	80c00115 	stw	r3,4(r16)
   4195c:	9009883a 	mov	r4,r18
   41960:	00438cc0 	call	438cc <__malloc_unlock>
   41964:	8805883a 	mov	r2,r17
   41968:	dfc00917 	ldw	ra,36(sp)
   4196c:	df000817 	ldw	fp,32(sp)
   41970:	ddc00717 	ldw	r23,28(sp)
   41974:	dd800617 	ldw	r22,24(sp)
   41978:	dd400517 	ldw	r21,20(sp)
   4197c:	dd000417 	ldw	r20,16(sp)
   41980:	dcc00317 	ldw	r19,12(sp)
   41984:	dc800217 	ldw	r18,8(sp)
   41988:	dc400117 	ldw	r17,4(sp)
   4198c:	dc000017 	ldw	r16,0(sp)
   41990:	dec00a04 	addi	sp,sp,40
   41994:	f800283a 	ret
   41998:	18c0004c 	andi	r3,r3,1
   4199c:	1800391e 	bne	r3,zero,41a84 <_realloc_r+0x2b8>
   419a0:	9dfffe17 	ldw	r23,-8(r19)
   419a4:	00bfff04 	movi	r2,-4
   419a8:	adefc83a 	sub	r23,r21,r23
   419ac:	b9400117 	ldw	r5,4(r23)
   419b0:	288a703a 	and	r5,r5,r2
   419b4:	2c2d883a 	add	r22,r5,r16
   419b8:	b1c03216 	blt	r22,r7,41a84 <_realloc_r+0x2b8>
   419bc:	b8800317 	ldw	r2,12(r23)
   419c0:	b8c00217 	ldw	r3,8(r23)
   419c4:	81bfff04 	addi	r6,r16,-4
   419c8:	01000904 	movi	r4,36
   419cc:	18800315 	stw	r2,12(r3)
   419d0:	10c00215 	stw	r3,8(r2)
   419d4:	bc400204 	addi	r17,r23,8
   419d8:	2180ac36 	bltu	r4,r6,41c8c <_realloc_r+0x4c0>
   419dc:	008004c4 	movi	r2,19
   419e0:	1180972e 	bgeu	r2,r6,41c40 <_realloc_r+0x474>
   419e4:	98800017 	ldw	r2,0(r19)
   419e8:	b8800215 	stw	r2,8(r23)
   419ec:	98800117 	ldw	r2,4(r19)
   419f0:	b8800315 	stw	r2,12(r23)
   419f4:	008006c4 	movi	r2,27
   419f8:	1180b92e 	bgeu	r2,r6,41ce0 <_realloc_r+0x514>
   419fc:	98800217 	ldw	r2,8(r19)
   41a00:	b8800415 	stw	r2,16(r23)
   41a04:	98800317 	ldw	r2,12(r19)
   41a08:	b8800515 	stw	r2,20(r23)
   41a0c:	313fbe26 	beq	r6,r4,41908 <__alt_data_end+0xfffcbda8>
   41a10:	b8c00604 	addi	r3,r23,24
   41a14:	9cc00404 	addi	r19,r19,16
   41a18:	98800017 	ldw	r2,0(r19)
   41a1c:	b021883a 	mov	r16,r22
   41a20:	b82b883a 	mov	r21,r23
   41a24:	18800015 	stw	r2,0(r3)
   41a28:	98800117 	ldw	r2,4(r19)
   41a2c:	18800115 	stw	r2,4(r3)
   41a30:	98800217 	ldw	r2,8(r19)
   41a34:	18800215 	stw	r2,8(r3)
   41a38:	b8c00117 	ldw	r3,4(r23)
   41a3c:	003fbd06 	br	41934 <__alt_data_end+0xfffcbdd4>
   41a40:	00800304 	movi	r2,12
   41a44:	90800015 	stw	r2,0(r18)
   41a48:	0005883a 	mov	r2,zero
   41a4c:	003fc606 	br	41968 <__alt_data_end+0xfffcbe08>
   41a50:	1d06b03a 	or	r3,r3,r20
   41a54:	ad0b883a 	add	r5,r21,r20
   41a58:	a8c00115 	stw	r3,4(r21)
   41a5c:	38800054 	ori	r2,r7,1
   41a60:	28800115 	stw	r2,4(r5)
   41a64:	29cf883a 	add	r7,r5,r7
   41a68:	38800117 	ldw	r2,4(r7)
   41a6c:	9009883a 	mov	r4,r18
   41a70:	29400204 	addi	r5,r5,8
   41a74:	10800054 	ori	r2,r2,1
   41a78:	38800115 	stw	r2,4(r7)
   41a7c:	00426200 	call	42620 <_free_r>
   41a80:	003fb606 	br	4195c <__alt_data_end+0xfffcbdfc>
   41a84:	880b883a 	mov	r5,r17
   41a88:	9009883a 	mov	r4,r18
   41a8c:	0040ca80 	call	40ca8 <_malloc_r>
   41a90:	1023883a 	mov	r17,r2
   41a94:	1000aa26 	beq	r2,zero,41d40 <_realloc_r+0x574>
   41a98:	98ffff17 	ldw	r3,-4(r19)
   41a9c:	113ffe04 	addi	r4,r2,-8
   41aa0:	00bfff84 	movi	r2,-2
   41aa4:	1884703a 	and	r2,r3,r2
   41aa8:	a885883a 	add	r2,r21,r2
   41aac:	20808626 	beq	r4,r2,41cc8 <_realloc_r+0x4fc>
   41ab0:	81bfff04 	addi	r6,r16,-4
   41ab4:	00800904 	movi	r2,36
   41ab8:	11807036 	bltu	r2,r6,41c7c <_realloc_r+0x4b0>
   41abc:	00c004c4 	movi	r3,19
   41ac0:	19805636 	bltu	r3,r6,41c1c <_realloc_r+0x450>
   41ac4:	8805883a 	mov	r2,r17
   41ac8:	9807883a 	mov	r3,r19
   41acc:	19000017 	ldw	r4,0(r3)
   41ad0:	11000015 	stw	r4,0(r2)
   41ad4:	19000117 	ldw	r4,4(r3)
   41ad8:	11000115 	stw	r4,4(r2)
   41adc:	18c00217 	ldw	r3,8(r3)
   41ae0:	10c00215 	stw	r3,8(r2)
   41ae4:	980b883a 	mov	r5,r19
   41ae8:	9009883a 	mov	r4,r18
   41aec:	00426200 	call	42620 <_free_r>
   41af0:	9009883a 	mov	r4,r18
   41af4:	00438cc0 	call	438cc <__malloc_unlock>
   41af8:	8805883a 	mov	r2,r17
   41afc:	003f9a06 	br	41968 <__alt_data_end+0xfffcbe08>
   41b00:	300b883a 	mov	r5,r6
   41b04:	dfc00917 	ldw	ra,36(sp)
   41b08:	df000817 	ldw	fp,32(sp)
   41b0c:	ddc00717 	ldw	r23,28(sp)
   41b10:	dd800617 	ldw	r22,24(sp)
   41b14:	dd400517 	ldw	r21,20(sp)
   41b18:	dd000417 	ldw	r20,16(sp)
   41b1c:	dcc00317 	ldw	r19,12(sp)
   41b20:	dc800217 	ldw	r18,8(sp)
   41b24:	dc400117 	ldw	r17,4(sp)
   41b28:	dc000017 	ldw	r16,0(sp)
   41b2c:	dec00a04 	addi	sp,sp,40
   41b30:	0040ca81 	jmpi	40ca8 <_malloc_r>
   41b34:	11400317 	ldw	r5,12(r2)
   41b38:	10800217 	ldw	r2,8(r2)
   41b3c:	9823883a 	mov	r17,r19
   41b40:	2021883a 	mov	r16,r4
   41b44:	11400315 	stw	r5,12(r2)
   41b48:	28800215 	stw	r2,8(r5)
   41b4c:	003f7906 	br	41934 <__alt_data_end+0xfffcbdd4>
   41b50:	21000117 	ldw	r4,4(r4)
   41b54:	00bfff04 	movi	r2,-4
   41b58:	a1800404 	addi	r6,r20,16
   41b5c:	2088703a 	and	r4,r4,r2
   41b60:	2409883a 	add	r4,r4,r16
   41b64:	2180380e 	bge	r4,r6,41c48 <_realloc_r+0x47c>
   41b68:	18c0004c 	andi	r3,r3,1
   41b6c:	183fc51e 	bne	r3,zero,41a84 <__alt_data_end+0xfffcbf24>
   41b70:	9dfffe17 	ldw	r23,-8(r19)
   41b74:	adefc83a 	sub	r23,r21,r23
   41b78:	b9400117 	ldw	r5,4(r23)
   41b7c:	288a703a 	and	r5,r5,r2
   41b80:	216d883a 	add	r22,r4,r5
   41b84:	b1bf8b16 	blt	r22,r6,419b4 <__alt_data_end+0xfffcbe54>
   41b88:	b8800317 	ldw	r2,12(r23)
   41b8c:	b8c00217 	ldw	r3,8(r23)
   41b90:	81bfff04 	addi	r6,r16,-4
   41b94:	01000904 	movi	r4,36
   41b98:	18800315 	stw	r2,12(r3)
   41b9c:	10c00215 	stw	r3,8(r2)
   41ba0:	bc400204 	addi	r17,r23,8
   41ba4:	21805a36 	bltu	r4,r6,41d10 <_realloc_r+0x544>
   41ba8:	008004c4 	movi	r2,19
   41bac:	1180562e 	bgeu	r2,r6,41d08 <_realloc_r+0x53c>
   41bb0:	98800017 	ldw	r2,0(r19)
   41bb4:	b8800215 	stw	r2,8(r23)
   41bb8:	98800117 	ldw	r2,4(r19)
   41bbc:	b8800315 	stw	r2,12(r23)
   41bc0:	008006c4 	movi	r2,27
   41bc4:	11805636 	bltu	r2,r6,41d20 <_realloc_r+0x554>
   41bc8:	b8800404 	addi	r2,r23,16
   41bcc:	9cc00204 	addi	r19,r19,8
   41bd0:	98c00017 	ldw	r3,0(r19)
   41bd4:	10c00015 	stw	r3,0(r2)
   41bd8:	98c00117 	ldw	r3,4(r19)
   41bdc:	10c00115 	stw	r3,4(r2)
   41be0:	98c00217 	ldw	r3,8(r19)
   41be4:	10c00215 	stw	r3,8(r2)
   41be8:	bd07883a 	add	r3,r23,r20
   41bec:	b505c83a 	sub	r2,r22,r20
   41bf0:	e0c00215 	stw	r3,8(fp)
   41bf4:	10800054 	ori	r2,r2,1
   41bf8:	18800115 	stw	r2,4(r3)
   41bfc:	b8800117 	ldw	r2,4(r23)
   41c00:	9009883a 	mov	r4,r18
   41c04:	1080004c 	andi	r2,r2,1
   41c08:	a0a8b03a 	or	r20,r20,r2
   41c0c:	bd000115 	stw	r20,4(r23)
   41c10:	00438cc0 	call	438cc <__malloc_unlock>
   41c14:	8805883a 	mov	r2,r17
   41c18:	003f5306 	br	41968 <__alt_data_end+0xfffcbe08>
   41c1c:	98c00017 	ldw	r3,0(r19)
   41c20:	88c00015 	stw	r3,0(r17)
   41c24:	98c00117 	ldw	r3,4(r19)
   41c28:	88c00115 	stw	r3,4(r17)
   41c2c:	00c006c4 	movi	r3,27
   41c30:	19801d36 	bltu	r3,r6,41ca8 <_realloc_r+0x4dc>
   41c34:	88800204 	addi	r2,r17,8
   41c38:	98c00204 	addi	r3,r19,8
   41c3c:	003fa306 	br	41acc <__alt_data_end+0xfffcbf6c>
   41c40:	8807883a 	mov	r3,r17
   41c44:	003f7406 	br	41a18 <__alt_data_end+0xfffcbeb8>
   41c48:	ad2b883a 	add	r21,r21,r20
   41c4c:	2505c83a 	sub	r2,r4,r20
   41c50:	e5400215 	stw	r21,8(fp)
   41c54:	10800054 	ori	r2,r2,1
   41c58:	a8800115 	stw	r2,4(r21)
   41c5c:	98bfff17 	ldw	r2,-4(r19)
   41c60:	9009883a 	mov	r4,r18
   41c64:	1080004c 	andi	r2,r2,1
   41c68:	a0a8b03a 	or	r20,r20,r2
   41c6c:	9d3fff15 	stw	r20,-4(r19)
   41c70:	00438cc0 	call	438cc <__malloc_unlock>
   41c74:	9805883a 	mov	r2,r19
   41c78:	003f3b06 	br	41968 <__alt_data_end+0xfffcbe08>
   41c7c:	8809883a 	mov	r4,r17
   41c80:	980b883a 	mov	r5,r19
   41c84:	00416700 	call	41670 <memmove>
   41c88:	003f9606 	br	41ae4 <__alt_data_end+0xfffcbf84>
   41c8c:	8809883a 	mov	r4,r17
   41c90:	980b883a 	mov	r5,r19
   41c94:	00416700 	call	41670 <memmove>
   41c98:	b8c00117 	ldw	r3,4(r23)
   41c9c:	b021883a 	mov	r16,r22
   41ca0:	b82b883a 	mov	r21,r23
   41ca4:	003f2306 	br	41934 <__alt_data_end+0xfffcbdd4>
   41ca8:	98c00217 	ldw	r3,8(r19)
   41cac:	88c00215 	stw	r3,8(r17)
   41cb0:	98c00317 	ldw	r3,12(r19)
   41cb4:	88c00315 	stw	r3,12(r17)
   41cb8:	30800c26 	beq	r6,r2,41cec <_realloc_r+0x520>
   41cbc:	88800404 	addi	r2,r17,16
   41cc0:	98c00404 	addi	r3,r19,16
   41cc4:	003f8106 	br	41acc <__alt_data_end+0xfffcbf6c>
   41cc8:	893fff17 	ldw	r4,-4(r17)
   41ccc:	00bfff04 	movi	r2,-4
   41cd0:	9823883a 	mov	r17,r19
   41cd4:	2084703a 	and	r2,r4,r2
   41cd8:	80a1883a 	add	r16,r16,r2
   41cdc:	003f1506 	br	41934 <__alt_data_end+0xfffcbdd4>
   41ce0:	b8c00404 	addi	r3,r23,16
   41ce4:	9cc00204 	addi	r19,r19,8
   41ce8:	003f4b06 	br	41a18 <__alt_data_end+0xfffcbeb8>
   41cec:	99000417 	ldw	r4,16(r19)
   41cf0:	88800604 	addi	r2,r17,24
   41cf4:	98c00604 	addi	r3,r19,24
   41cf8:	89000415 	stw	r4,16(r17)
   41cfc:	99000517 	ldw	r4,20(r19)
   41d00:	89000515 	stw	r4,20(r17)
   41d04:	003f7106 	br	41acc <__alt_data_end+0xfffcbf6c>
   41d08:	8805883a 	mov	r2,r17
   41d0c:	003fb006 	br	41bd0 <__alt_data_end+0xfffcc070>
   41d10:	8809883a 	mov	r4,r17
   41d14:	980b883a 	mov	r5,r19
   41d18:	00416700 	call	41670 <memmove>
   41d1c:	003fb206 	br	41be8 <__alt_data_end+0xfffcc088>
   41d20:	98800217 	ldw	r2,8(r19)
   41d24:	b8800415 	stw	r2,16(r23)
   41d28:	98800317 	ldw	r2,12(r19)
   41d2c:	b8800515 	stw	r2,20(r23)
   41d30:	31000726 	beq	r6,r4,41d50 <_realloc_r+0x584>
   41d34:	b8800604 	addi	r2,r23,24
   41d38:	9cc00404 	addi	r19,r19,16
   41d3c:	003fa406 	br	41bd0 <__alt_data_end+0xfffcc070>
   41d40:	9009883a 	mov	r4,r18
   41d44:	00438cc0 	call	438cc <__malloc_unlock>
   41d48:	0005883a 	mov	r2,zero
   41d4c:	003f0606 	br	41968 <__alt_data_end+0xfffcbe08>
   41d50:	98c00417 	ldw	r3,16(r19)
   41d54:	9cc00604 	addi	r19,r19,24
   41d58:	b8800804 	addi	r2,r23,32
   41d5c:	b8c00615 	stw	r3,24(r23)
   41d60:	98ffff17 	ldw	r3,-4(r19)
   41d64:	b8c00715 	stw	r3,28(r23)
   41d68:	003f9906 	br	41bd0 <__alt_data_end+0xfffcc070>

00041d6c <_sbrk_r>:
   41d6c:	defffd04 	addi	sp,sp,-12
   41d70:	dc000015 	stw	r16,0(sp)
   41d74:	04000174 	movhi	r16,5
   41d78:	dc400115 	stw	r17,4(sp)
   41d7c:	84272304 	addi	r16,r16,-25460
   41d80:	2023883a 	mov	r17,r4
   41d84:	2809883a 	mov	r4,r5
   41d88:	dfc00215 	stw	ra,8(sp)
   41d8c:	80000015 	stw	zero,0(r16)
   41d90:	0043ac00 	call	43ac0 <sbrk>
   41d94:	00ffffc4 	movi	r3,-1
   41d98:	10c00526 	beq	r2,r3,41db0 <_sbrk_r+0x44>
   41d9c:	dfc00217 	ldw	ra,8(sp)
   41da0:	dc400117 	ldw	r17,4(sp)
   41da4:	dc000017 	ldw	r16,0(sp)
   41da8:	dec00304 	addi	sp,sp,12
   41dac:	f800283a 	ret
   41db0:	80c00017 	ldw	r3,0(r16)
   41db4:	183ff926 	beq	r3,zero,41d9c <__alt_data_end+0xfffcc23c>
   41db8:	88c00015 	stw	r3,0(r17)
   41dbc:	003ff706 	br	41d9c <__alt_data_end+0xfffcc23c>

00041dc0 <__swsetup_r>:
   41dc0:	00800174 	movhi	r2,5
   41dc4:	defffd04 	addi	sp,sp,-12
   41dc8:	10a04704 	addi	r2,r2,-32484
   41dcc:	dc400115 	stw	r17,4(sp)
   41dd0:	2023883a 	mov	r17,r4
   41dd4:	11000017 	ldw	r4,0(r2)
   41dd8:	dc000015 	stw	r16,0(sp)
   41ddc:	dfc00215 	stw	ra,8(sp)
   41de0:	2821883a 	mov	r16,r5
   41de4:	20000226 	beq	r4,zero,41df0 <__swsetup_r+0x30>
   41de8:	20c00e17 	ldw	r3,56(r4)
   41dec:	18002e26 	beq	r3,zero,41ea8 <__swsetup_r+0xe8>
   41df0:	8080030b 	ldhu	r2,12(r16)
   41df4:	10c0020c 	andi	r3,r2,8
   41df8:	100d883a 	mov	r6,r2
   41dfc:	18000f26 	beq	r3,zero,41e3c <__swsetup_r+0x7c>
   41e00:	80c00417 	ldw	r3,16(r16)
   41e04:	18001526 	beq	r3,zero,41e5c <__swsetup_r+0x9c>
   41e08:	1100004c 	andi	r4,r2,1
   41e0c:	20001c1e 	bne	r4,zero,41e80 <__swsetup_r+0xc0>
   41e10:	1080008c 	andi	r2,r2,2
   41e14:	1000261e 	bne	r2,zero,41eb0 <__swsetup_r+0xf0>
   41e18:	80800517 	ldw	r2,20(r16)
   41e1c:	80800215 	stw	r2,8(r16)
   41e20:	18001c26 	beq	r3,zero,41e94 <__swsetup_r+0xd4>
   41e24:	0005883a 	mov	r2,zero
   41e28:	dfc00217 	ldw	ra,8(sp)
   41e2c:	dc400117 	ldw	r17,4(sp)
   41e30:	dc000017 	ldw	r16,0(sp)
   41e34:	dec00304 	addi	sp,sp,12
   41e38:	f800283a 	ret
   41e3c:	3080040c 	andi	r2,r6,16
   41e40:	10001726 	beq	r2,zero,41ea0 <__swsetup_r+0xe0>
   41e44:	3080010c 	andi	r2,r6,4
   41e48:	10001b1e 	bne	r2,zero,41eb8 <__swsetup_r+0xf8>
   41e4c:	80c00417 	ldw	r3,16(r16)
   41e50:	30800214 	ori	r2,r6,8
   41e54:	8080030d 	sth	r2,12(r16)
   41e58:	183feb1e 	bne	r3,zero,41e08 <__alt_data_end+0xfffcc2a8>
   41e5c:	1140a00c 	andi	r5,r2,640
   41e60:	01008004 	movi	r4,512
   41e64:	293fe826 	beq	r5,r4,41e08 <__alt_data_end+0xfffcc2a8>
   41e68:	8809883a 	mov	r4,r17
   41e6c:	800b883a 	mov	r5,r16
   41e70:	0042a800 	call	42a80 <__smakebuf_r>
   41e74:	8080030b 	ldhu	r2,12(r16)
   41e78:	80c00417 	ldw	r3,16(r16)
   41e7c:	003fe206 	br	41e08 <__alt_data_end+0xfffcc2a8>
   41e80:	80800517 	ldw	r2,20(r16)
   41e84:	80000215 	stw	zero,8(r16)
   41e88:	0085c83a 	sub	r2,zero,r2
   41e8c:	80800615 	stw	r2,24(r16)
   41e90:	183fe41e 	bne	r3,zero,41e24 <__alt_data_end+0xfffcc2c4>
   41e94:	8080030b 	ldhu	r2,12(r16)
   41e98:	1080200c 	andi	r2,r2,128
   41e9c:	103fe226 	beq	r2,zero,41e28 <__alt_data_end+0xfffcc2c8>
   41ea0:	00bfffc4 	movi	r2,-1
   41ea4:	003fe006 	br	41e28 <__alt_data_end+0xfffcc2c8>
   41ea8:	00424ac0 	call	424ac <__sinit>
   41eac:	003fd006 	br	41df0 <__alt_data_end+0xfffcc290>
   41eb0:	0005883a 	mov	r2,zero
   41eb4:	003fd906 	br	41e1c <__alt_data_end+0xfffcc2bc>
   41eb8:	81400c17 	ldw	r5,48(r16)
   41ebc:	28000626 	beq	r5,zero,41ed8 <__swsetup_r+0x118>
   41ec0:	80801004 	addi	r2,r16,64
   41ec4:	28800326 	beq	r5,r2,41ed4 <__swsetup_r+0x114>
   41ec8:	8809883a 	mov	r4,r17
   41ecc:	00426200 	call	42620 <_free_r>
   41ed0:	8180030b 	ldhu	r6,12(r16)
   41ed4:	80000c15 	stw	zero,48(r16)
   41ed8:	80c00417 	ldw	r3,16(r16)
   41edc:	00bff6c4 	movi	r2,-37
   41ee0:	118c703a 	and	r6,r2,r6
   41ee4:	80000115 	stw	zero,4(r16)
   41ee8:	80c00015 	stw	r3,0(r16)
   41eec:	003fd806 	br	41e50 <__alt_data_end+0xfffcc2f0>

00041ef0 <_fflush_r>:
   41ef0:	defffb04 	addi	sp,sp,-20
   41ef4:	dcc00315 	stw	r19,12(sp)
   41ef8:	dc000015 	stw	r16,0(sp)
   41efc:	dfc00415 	stw	ra,16(sp)
   41f00:	dc800215 	stw	r18,8(sp)
   41f04:	dc400115 	stw	r17,4(sp)
   41f08:	2027883a 	mov	r19,r4
   41f0c:	2821883a 	mov	r16,r5
   41f10:	20000226 	beq	r4,zero,41f1c <_fflush_r+0x2c>
   41f14:	20800e17 	ldw	r2,56(r4)
   41f18:	10005326 	beq	r2,zero,42068 <_fflush_r+0x178>
   41f1c:	8080030b 	ldhu	r2,12(r16)
   41f20:	10ffffcc 	andi	r3,r2,65535
   41f24:	18e0001c 	xori	r3,r3,32768
   41f28:	18e00004 	addi	r3,r3,-32768
   41f2c:	18002c26 	beq	r3,zero,41fe0 <_fflush_r+0xf0>
   41f30:	10c0020c 	andi	r3,r2,8
   41f34:	1800321e 	bne	r3,zero,42000 <_fflush_r+0x110>
   41f38:	80c00117 	ldw	r3,4(r16)
   41f3c:	10820014 	ori	r2,r2,2048
   41f40:	8080030d 	sth	r2,12(r16)
   41f44:	00c0570e 	bge	zero,r3,420a4 <_fflush_r+0x1b4>
   41f48:	82000a17 	ldw	r8,40(r16)
   41f4c:	40002426 	beq	r8,zero,41fe0 <_fflush_r+0xf0>
   41f50:	9c400017 	ldw	r17,0(r19)
   41f54:	10c4000c 	andi	r3,r2,4096
   41f58:	98000015 	stw	zero,0(r19)
   41f5c:	18004626 	beq	r3,zero,42078 <_fflush_r+0x188>
   41f60:	81801417 	ldw	r6,80(r16)
   41f64:	10c0010c 	andi	r3,r2,4
   41f68:	18000626 	beq	r3,zero,41f84 <_fflush_r+0x94>
   41f6c:	80c00117 	ldw	r3,4(r16)
   41f70:	80800c17 	ldw	r2,48(r16)
   41f74:	30cdc83a 	sub	r6,r6,r3
   41f78:	10000226 	beq	r2,zero,41f84 <_fflush_r+0x94>
   41f7c:	80800f17 	ldw	r2,60(r16)
   41f80:	308dc83a 	sub	r6,r6,r2
   41f84:	81400717 	ldw	r5,28(r16)
   41f88:	9809883a 	mov	r4,r19
   41f8c:	000f883a 	mov	r7,zero
   41f90:	403ee83a 	callr	r8
   41f94:	00ffffc4 	movi	r3,-1
   41f98:	10c04526 	beq	r2,r3,420b0 <_fflush_r+0x1c0>
   41f9c:	80c0030b 	ldhu	r3,12(r16)
   41fa0:	81000417 	ldw	r4,16(r16)
   41fa4:	80000115 	stw	zero,4(r16)
   41fa8:	197dffcc 	andi	r5,r3,63487
   41fac:	8140030d 	sth	r5,12(r16)
   41fb0:	81000015 	stw	r4,0(r16)
   41fb4:	18c4000c 	andi	r3,r3,4096
   41fb8:	18000126 	beq	r3,zero,41fc0 <_fflush_r+0xd0>
   41fbc:	80801415 	stw	r2,80(r16)
   41fc0:	81400c17 	ldw	r5,48(r16)
   41fc4:	9c400015 	stw	r17,0(r19)
   41fc8:	28000526 	beq	r5,zero,41fe0 <_fflush_r+0xf0>
   41fcc:	80801004 	addi	r2,r16,64
   41fd0:	28800226 	beq	r5,r2,41fdc <_fflush_r+0xec>
   41fd4:	9809883a 	mov	r4,r19
   41fd8:	00426200 	call	42620 <_free_r>
   41fdc:	80000c15 	stw	zero,48(r16)
   41fe0:	0005883a 	mov	r2,zero
   41fe4:	dfc00417 	ldw	ra,16(sp)
   41fe8:	dcc00317 	ldw	r19,12(sp)
   41fec:	dc800217 	ldw	r18,8(sp)
   41ff0:	dc400117 	ldw	r17,4(sp)
   41ff4:	dc000017 	ldw	r16,0(sp)
   41ff8:	dec00504 	addi	sp,sp,20
   41ffc:	f800283a 	ret
   42000:	84800417 	ldw	r18,16(r16)
   42004:	903ff626 	beq	r18,zero,41fe0 <__alt_data_end+0xfffcc480>
   42008:	84400017 	ldw	r17,0(r16)
   4200c:	108000cc 	andi	r2,r2,3
   42010:	84800015 	stw	r18,0(r16)
   42014:	8ca3c83a 	sub	r17,r17,r18
   42018:	10001526 	beq	r2,zero,42070 <_fflush_r+0x180>
   4201c:	0005883a 	mov	r2,zero
   42020:	80800215 	stw	r2,8(r16)
   42024:	04400316 	blt	zero,r17,42034 <_fflush_r+0x144>
   42028:	003fed06 	br	41fe0 <__alt_data_end+0xfffcc480>
   4202c:	90a5883a 	add	r18,r18,r2
   42030:	047feb0e 	bge	zero,r17,41fe0 <__alt_data_end+0xfffcc480>
   42034:	80800917 	ldw	r2,36(r16)
   42038:	81400717 	ldw	r5,28(r16)
   4203c:	880f883a 	mov	r7,r17
   42040:	900d883a 	mov	r6,r18
   42044:	9809883a 	mov	r4,r19
   42048:	103ee83a 	callr	r2
   4204c:	88a3c83a 	sub	r17,r17,r2
   42050:	00bff616 	blt	zero,r2,4202c <__alt_data_end+0xfffcc4cc>
   42054:	80c0030b 	ldhu	r3,12(r16)
   42058:	00bfffc4 	movi	r2,-1
   4205c:	18c01014 	ori	r3,r3,64
   42060:	80c0030d 	sth	r3,12(r16)
   42064:	003fdf06 	br	41fe4 <__alt_data_end+0xfffcc484>
   42068:	00424ac0 	call	424ac <__sinit>
   4206c:	003fab06 	br	41f1c <__alt_data_end+0xfffcc3bc>
   42070:	80800517 	ldw	r2,20(r16)
   42074:	003fea06 	br	42020 <__alt_data_end+0xfffcc4c0>
   42078:	81400717 	ldw	r5,28(r16)
   4207c:	000d883a 	mov	r6,zero
   42080:	9809883a 	mov	r4,r19
   42084:	01c00044 	movi	r7,1
   42088:	403ee83a 	callr	r8
   4208c:	100d883a 	mov	r6,r2
   42090:	00bfffc4 	movi	r2,-1
   42094:	30801326 	beq	r6,r2,420e4 <_fflush_r+0x1f4>
   42098:	8080030b 	ldhu	r2,12(r16)
   4209c:	82000a17 	ldw	r8,40(r16)
   420a0:	003fb006 	br	41f64 <__alt_data_end+0xfffcc404>
   420a4:	80c00f17 	ldw	r3,60(r16)
   420a8:	00ffa716 	blt	zero,r3,41f48 <__alt_data_end+0xfffcc3e8>
   420ac:	003fcc06 	br	41fe0 <__alt_data_end+0xfffcc480>
   420b0:	98c00017 	ldw	r3,0(r19)
   420b4:	183fb926 	beq	r3,zero,41f9c <__alt_data_end+0xfffcc43c>
   420b8:	01000744 	movi	r4,29
   420bc:	19000226 	beq	r3,r4,420c8 <_fflush_r+0x1d8>
   420c0:	01000584 	movi	r4,22
   420c4:	1900101e 	bne	r3,r4,42108 <_fflush_r+0x218>
   420c8:	8080030b 	ldhu	r2,12(r16)
   420cc:	80c00417 	ldw	r3,16(r16)
   420d0:	80000115 	stw	zero,4(r16)
   420d4:	10bdffcc 	andi	r2,r2,63487
   420d8:	8080030d 	sth	r2,12(r16)
   420dc:	80c00015 	stw	r3,0(r16)
   420e0:	003fb706 	br	41fc0 <__alt_data_end+0xfffcc460>
   420e4:	98800017 	ldw	r2,0(r19)
   420e8:	103feb26 	beq	r2,zero,42098 <__alt_data_end+0xfffcc538>
   420ec:	00c00744 	movi	r3,29
   420f0:	10c00226 	beq	r2,r3,420fc <_fflush_r+0x20c>
   420f4:	00c00584 	movi	r3,22
   420f8:	10ffd61e 	bne	r2,r3,42054 <__alt_data_end+0xfffcc4f4>
   420fc:	9c400015 	stw	r17,0(r19)
   42100:	0005883a 	mov	r2,zero
   42104:	003fb706 	br	41fe4 <__alt_data_end+0xfffcc484>
   42108:	80c0030b 	ldhu	r3,12(r16)
   4210c:	18c01014 	ori	r3,r3,64
   42110:	80c0030d 	sth	r3,12(r16)
   42114:	003fb306 	br	41fe4 <__alt_data_end+0xfffcc484>

00042118 <fflush>:
   42118:	20000526 	beq	r4,zero,42130 <fflush+0x18>
   4211c:	00800174 	movhi	r2,5
   42120:	10a04704 	addi	r2,r2,-32484
   42124:	200b883a 	mov	r5,r4
   42128:	11000017 	ldw	r4,0(r2)
   4212c:	0041ef01 	jmpi	41ef0 <_fflush_r>
   42130:	00800174 	movhi	r2,5
   42134:	10a04604 	addi	r2,r2,-32488
   42138:	11000017 	ldw	r4,0(r2)
   4213c:	01400134 	movhi	r5,4
   42140:	2947bc04 	addi	r5,r5,7920
   42144:	00429c81 	jmpi	429c8 <_fwalk_reent>

00042148 <__fp_lock>:
   42148:	0005883a 	mov	r2,zero
   4214c:	f800283a 	ret

00042150 <__fp_unlock>:
   42150:	0005883a 	mov	r2,zero
   42154:	f800283a 	ret

00042158 <_cleanup_r>:
   42158:	01400134 	movhi	r5,4
   4215c:	294c1204 	addi	r5,r5,12360
   42160:	00429101 	jmpi	42910 <_fwalk>

00042164 <__sinit.part.1>:
   42164:	defff604 	addi	sp,sp,-40
   42168:	00c00134 	movhi	r3,4
   4216c:	dfc00915 	stw	ra,36(sp)
   42170:	df000815 	stw	fp,32(sp)
   42174:	ddc00715 	stw	r23,28(sp)
   42178:	dd800615 	stw	r22,24(sp)
   4217c:	dd400515 	stw	r21,20(sp)
   42180:	dd000415 	stw	r20,16(sp)
   42184:	dcc00315 	stw	r19,12(sp)
   42188:	dc800215 	stw	r18,8(sp)
   4218c:	dc400115 	stw	r17,4(sp)
   42190:	dc000015 	stw	r16,0(sp)
   42194:	18c85604 	addi	r3,r3,8536
   42198:	24000117 	ldw	r16,4(r4)
   4219c:	20c00f15 	stw	r3,60(r4)
   421a0:	07000044 	movi	fp,1
   421a4:	00c000c4 	movi	r3,3
   421a8:	2080bb04 	addi	r2,r4,748
   421ac:	20c0b915 	stw	r3,740(r4)
   421b0:	27000e15 	stw	fp,56(r4)
   421b4:	2080ba15 	stw	r2,744(r4)
   421b8:	2000b815 	stw	zero,736(r4)
   421bc:	05c00204 	movi	r23,8
   421c0:	00800104 	movi	r2,4
   421c4:	2025883a 	mov	r18,r4
   421c8:	b80d883a 	mov	r6,r23
   421cc:	81001704 	addi	r4,r16,92
   421d0:	000b883a 	mov	r5,zero
   421d4:	80000015 	stw	zero,0(r16)
   421d8:	80000115 	stw	zero,4(r16)
   421dc:	80000215 	stw	zero,8(r16)
   421e0:	8080030d 	sth	r2,12(r16)
   421e4:	80001915 	stw	zero,100(r16)
   421e8:	8000038d 	sth	zero,14(r16)
   421ec:	80000415 	stw	zero,16(r16)
   421f0:	80000515 	stw	zero,20(r16)
   421f4:	80000615 	stw	zero,24(r16)
   421f8:	0042c380 	call	42c38 <memset>
   421fc:	05800134 	movhi	r22,4
   42200:	94400217 	ldw	r17,8(r18)
   42204:	05400134 	movhi	r21,4
   42208:	05000134 	movhi	r20,4
   4220c:	04c00134 	movhi	r19,4
   42210:	b58b5704 	addi	r22,r22,11612
   42214:	ad4b6e04 	addi	r21,r21,11704
   42218:	a50b8d04 	addi	r20,r20,11828
   4221c:	9ccba404 	addi	r19,r19,11920
   42220:	85800815 	stw	r22,32(r16)
   42224:	85400915 	stw	r21,36(r16)
   42228:	85000a15 	stw	r20,40(r16)
   4222c:	84c00b15 	stw	r19,44(r16)
   42230:	84000715 	stw	r16,28(r16)
   42234:	00800284 	movi	r2,10
   42238:	89001704 	addi	r4,r17,92
   4223c:	b80d883a 	mov	r6,r23
   42240:	000b883a 	mov	r5,zero
   42244:	88000015 	stw	zero,0(r17)
   42248:	88000115 	stw	zero,4(r17)
   4224c:	88000215 	stw	zero,8(r17)
   42250:	8880030d 	sth	r2,12(r17)
   42254:	88001915 	stw	zero,100(r17)
   42258:	8f00038d 	sth	fp,14(r17)
   4225c:	88000415 	stw	zero,16(r17)
   42260:	88000515 	stw	zero,20(r17)
   42264:	88000615 	stw	zero,24(r17)
   42268:	0042c380 	call	42c38 <memset>
   4226c:	94000317 	ldw	r16,12(r18)
   42270:	00800484 	movi	r2,18
   42274:	8c400715 	stw	r17,28(r17)
   42278:	8d800815 	stw	r22,32(r17)
   4227c:	8d400915 	stw	r21,36(r17)
   42280:	8d000a15 	stw	r20,40(r17)
   42284:	8cc00b15 	stw	r19,44(r17)
   42288:	8080030d 	sth	r2,12(r16)
   4228c:	00800084 	movi	r2,2
   42290:	80000015 	stw	zero,0(r16)
   42294:	80000115 	stw	zero,4(r16)
   42298:	80000215 	stw	zero,8(r16)
   4229c:	80001915 	stw	zero,100(r16)
   422a0:	8080038d 	sth	r2,14(r16)
   422a4:	80000415 	stw	zero,16(r16)
   422a8:	80000515 	stw	zero,20(r16)
   422ac:	80000615 	stw	zero,24(r16)
   422b0:	81001704 	addi	r4,r16,92
   422b4:	000b883a 	mov	r5,zero
   422b8:	b80d883a 	mov	r6,r23
   422bc:	0042c380 	call	42c38 <memset>
   422c0:	84000715 	stw	r16,28(r16)
   422c4:	85800815 	stw	r22,32(r16)
   422c8:	85400915 	stw	r21,36(r16)
   422cc:	85000a15 	stw	r20,40(r16)
   422d0:	84c00b15 	stw	r19,44(r16)
   422d4:	dfc00917 	ldw	ra,36(sp)
   422d8:	df000817 	ldw	fp,32(sp)
   422dc:	ddc00717 	ldw	r23,28(sp)
   422e0:	dd800617 	ldw	r22,24(sp)
   422e4:	dd400517 	ldw	r21,20(sp)
   422e8:	dd000417 	ldw	r20,16(sp)
   422ec:	dcc00317 	ldw	r19,12(sp)
   422f0:	dc800217 	ldw	r18,8(sp)
   422f4:	dc400117 	ldw	r17,4(sp)
   422f8:	dc000017 	ldw	r16,0(sp)
   422fc:	dec00a04 	addi	sp,sp,40
   42300:	f800283a 	ret

00042304 <__sfmoreglue>:
   42304:	defffc04 	addi	sp,sp,-16
   42308:	dc800215 	stw	r18,8(sp)
   4230c:	2825883a 	mov	r18,r5
   42310:	dc000015 	stw	r16,0(sp)
   42314:	01401a04 	movi	r5,104
   42318:	2021883a 	mov	r16,r4
   4231c:	9009883a 	mov	r4,r18
   42320:	dfc00315 	stw	ra,12(sp)
   42324:	dc400115 	stw	r17,4(sp)
   42328:	00405fc0 	call	405fc <__mulsi3>
   4232c:	8009883a 	mov	r4,r16
   42330:	11400304 	addi	r5,r2,12
   42334:	1023883a 	mov	r17,r2
   42338:	0040ca80 	call	40ca8 <_malloc_r>
   4233c:	1021883a 	mov	r16,r2
   42340:	10000726 	beq	r2,zero,42360 <__sfmoreglue+0x5c>
   42344:	11000304 	addi	r4,r2,12
   42348:	10000015 	stw	zero,0(r2)
   4234c:	14800115 	stw	r18,4(r2)
   42350:	11000215 	stw	r4,8(r2)
   42354:	000b883a 	mov	r5,zero
   42358:	880d883a 	mov	r6,r17
   4235c:	0042c380 	call	42c38 <memset>
   42360:	8005883a 	mov	r2,r16
   42364:	dfc00317 	ldw	ra,12(sp)
   42368:	dc800217 	ldw	r18,8(sp)
   4236c:	dc400117 	ldw	r17,4(sp)
   42370:	dc000017 	ldw	r16,0(sp)
   42374:	dec00404 	addi	sp,sp,16
   42378:	f800283a 	ret

0004237c <__sfp>:
   4237c:	00800174 	movhi	r2,5
   42380:	defffb04 	addi	sp,sp,-20
   42384:	10a04604 	addi	r2,r2,-32488
   42388:	dc800215 	stw	r18,8(sp)
   4238c:	14800017 	ldw	r18,0(r2)
   42390:	dcc00315 	stw	r19,12(sp)
   42394:	dfc00415 	stw	ra,16(sp)
   42398:	90800e17 	ldw	r2,56(r18)
   4239c:	dc400115 	stw	r17,4(sp)
   423a0:	dc000015 	stw	r16,0(sp)
   423a4:	2027883a 	mov	r19,r4
   423a8:	1000021e 	bne	r2,zero,423b4 <__sfp+0x38>
   423ac:	9009883a 	mov	r4,r18
   423b0:	00421640 	call	42164 <__sinit.part.1>
   423b4:	9480b804 	addi	r18,r18,736
   423b8:	047fffc4 	movi	r17,-1
   423bc:	91400117 	ldw	r5,4(r18)
   423c0:	94000217 	ldw	r16,8(r18)
   423c4:	297fffc4 	addi	r5,r5,-1
   423c8:	28000a16 	blt	r5,zero,423f4 <__sfp+0x78>
   423cc:	8080030f 	ldh	r2,12(r16)
   423d0:	10000c26 	beq	r2,zero,42404 <__sfp+0x88>
   423d4:	80c01d04 	addi	r3,r16,116
   423d8:	00000206 	br	423e4 <__sfp+0x68>
   423dc:	18bfe60f 	ldh	r2,-104(r3)
   423e0:	10000826 	beq	r2,zero,42404 <__sfp+0x88>
   423e4:	297fffc4 	addi	r5,r5,-1
   423e8:	1c3ffd04 	addi	r16,r3,-12
   423ec:	18c01a04 	addi	r3,r3,104
   423f0:	2c7ffa1e 	bne	r5,r17,423dc <__alt_data_end+0xfffcc87c>
   423f4:	90800017 	ldw	r2,0(r18)
   423f8:	10001d26 	beq	r2,zero,42470 <__sfp+0xf4>
   423fc:	1025883a 	mov	r18,r2
   42400:	003fee06 	br	423bc <__alt_data_end+0xfffcc85c>
   42404:	00bfffc4 	movi	r2,-1
   42408:	8080038d 	sth	r2,14(r16)
   4240c:	00800044 	movi	r2,1
   42410:	8080030d 	sth	r2,12(r16)
   42414:	80001915 	stw	zero,100(r16)
   42418:	80000015 	stw	zero,0(r16)
   4241c:	80000215 	stw	zero,8(r16)
   42420:	80000115 	stw	zero,4(r16)
   42424:	80000415 	stw	zero,16(r16)
   42428:	80000515 	stw	zero,20(r16)
   4242c:	80000615 	stw	zero,24(r16)
   42430:	81001704 	addi	r4,r16,92
   42434:	000b883a 	mov	r5,zero
   42438:	01800204 	movi	r6,8
   4243c:	0042c380 	call	42c38 <memset>
   42440:	8005883a 	mov	r2,r16
   42444:	80000c15 	stw	zero,48(r16)
   42448:	80000d15 	stw	zero,52(r16)
   4244c:	80001115 	stw	zero,68(r16)
   42450:	80001215 	stw	zero,72(r16)
   42454:	dfc00417 	ldw	ra,16(sp)
   42458:	dcc00317 	ldw	r19,12(sp)
   4245c:	dc800217 	ldw	r18,8(sp)
   42460:	dc400117 	ldw	r17,4(sp)
   42464:	dc000017 	ldw	r16,0(sp)
   42468:	dec00504 	addi	sp,sp,20
   4246c:	f800283a 	ret
   42470:	9809883a 	mov	r4,r19
   42474:	01400104 	movi	r5,4
   42478:	00423040 	call	42304 <__sfmoreglue>
   4247c:	90800015 	stw	r2,0(r18)
   42480:	103fde1e 	bne	r2,zero,423fc <__alt_data_end+0xfffcc89c>
   42484:	00800304 	movi	r2,12
   42488:	98800015 	stw	r2,0(r19)
   4248c:	0005883a 	mov	r2,zero
   42490:	003ff006 	br	42454 <__alt_data_end+0xfffcc8f4>

00042494 <_cleanup>:
   42494:	00800174 	movhi	r2,5
   42498:	10a04604 	addi	r2,r2,-32488
   4249c:	11000017 	ldw	r4,0(r2)
   424a0:	01400134 	movhi	r5,4
   424a4:	294c1204 	addi	r5,r5,12360
   424a8:	00429101 	jmpi	42910 <_fwalk>

000424ac <__sinit>:
   424ac:	20800e17 	ldw	r2,56(r4)
   424b0:	10000126 	beq	r2,zero,424b8 <__sinit+0xc>
   424b4:	f800283a 	ret
   424b8:	00421641 	jmpi	42164 <__sinit.part.1>

000424bc <__sfp_lock_acquire>:
   424bc:	f800283a 	ret

000424c0 <__sfp_lock_release>:
   424c0:	f800283a 	ret

000424c4 <__sinit_lock_acquire>:
   424c4:	f800283a 	ret

000424c8 <__sinit_lock_release>:
   424c8:	f800283a 	ret

000424cc <__fp_lock_all>:
   424cc:	00800174 	movhi	r2,5
   424d0:	10a04704 	addi	r2,r2,-32484
   424d4:	11000017 	ldw	r4,0(r2)
   424d8:	01400134 	movhi	r5,4
   424dc:	29485204 	addi	r5,r5,8520
   424e0:	00429101 	jmpi	42910 <_fwalk>

000424e4 <__fp_unlock_all>:
   424e4:	00800174 	movhi	r2,5
   424e8:	10a04704 	addi	r2,r2,-32484
   424ec:	11000017 	ldw	r4,0(r2)
   424f0:	01400134 	movhi	r5,4
   424f4:	29485404 	addi	r5,r5,8528
   424f8:	00429101 	jmpi	42910 <_fwalk>

000424fc <_malloc_trim_r>:
   424fc:	defffb04 	addi	sp,sp,-20
   42500:	dcc00315 	stw	r19,12(sp)
   42504:	04c00134 	movhi	r19,4
   42508:	dc800215 	stw	r18,8(sp)
   4250c:	dc400115 	stw	r17,4(sp)
   42510:	dc000015 	stw	r16,0(sp)
   42514:	dfc00415 	stw	ra,16(sp)
   42518:	2821883a 	mov	r16,r5
   4251c:	9cda9104 	addi	r19,r19,27204
   42520:	2025883a 	mov	r18,r4
   42524:	00438ac0 	call	438ac <__malloc_lock>
   42528:	98800217 	ldw	r2,8(r19)
   4252c:	14400117 	ldw	r17,4(r2)
   42530:	00bfff04 	movi	r2,-4
   42534:	88a2703a 	and	r17,r17,r2
   42538:	8c21c83a 	sub	r16,r17,r16
   4253c:	8403fbc4 	addi	r16,r16,4079
   42540:	8020d33a 	srli	r16,r16,12
   42544:	0083ffc4 	movi	r2,4095
   42548:	843fffc4 	addi	r16,r16,-1
   4254c:	8020933a 	slli	r16,r16,12
   42550:	1400060e 	bge	r2,r16,4256c <_malloc_trim_r+0x70>
   42554:	9009883a 	mov	r4,r18
   42558:	000b883a 	mov	r5,zero
   4255c:	0041d6c0 	call	41d6c <_sbrk_r>
   42560:	98c00217 	ldw	r3,8(r19)
   42564:	1c47883a 	add	r3,r3,r17
   42568:	10c00a26 	beq	r2,r3,42594 <_malloc_trim_r+0x98>
   4256c:	9009883a 	mov	r4,r18
   42570:	00438cc0 	call	438cc <__malloc_unlock>
   42574:	0005883a 	mov	r2,zero
   42578:	dfc00417 	ldw	ra,16(sp)
   4257c:	dcc00317 	ldw	r19,12(sp)
   42580:	dc800217 	ldw	r18,8(sp)
   42584:	dc400117 	ldw	r17,4(sp)
   42588:	dc000017 	ldw	r16,0(sp)
   4258c:	dec00504 	addi	sp,sp,20
   42590:	f800283a 	ret
   42594:	9009883a 	mov	r4,r18
   42598:	040bc83a 	sub	r5,zero,r16
   4259c:	0041d6c0 	call	41d6c <_sbrk_r>
   425a0:	00ffffc4 	movi	r3,-1
   425a4:	10c00d26 	beq	r2,r3,425dc <_malloc_trim_r+0xe0>
   425a8:	00c00174 	movhi	r3,5
   425ac:	18e72b04 	addi	r3,r3,-25428
   425b0:	18800017 	ldw	r2,0(r3)
   425b4:	99000217 	ldw	r4,8(r19)
   425b8:	8c23c83a 	sub	r17,r17,r16
   425bc:	8c400054 	ori	r17,r17,1
   425c0:	1421c83a 	sub	r16,r2,r16
   425c4:	24400115 	stw	r17,4(r4)
   425c8:	9009883a 	mov	r4,r18
   425cc:	1c000015 	stw	r16,0(r3)
   425d0:	00438cc0 	call	438cc <__malloc_unlock>
   425d4:	00800044 	movi	r2,1
   425d8:	003fe706 	br	42578 <__alt_data_end+0xfffcca18>
   425dc:	9009883a 	mov	r4,r18
   425e0:	000b883a 	mov	r5,zero
   425e4:	0041d6c0 	call	41d6c <_sbrk_r>
   425e8:	99000217 	ldw	r4,8(r19)
   425ec:	014003c4 	movi	r5,15
   425f0:	1107c83a 	sub	r3,r2,r4
   425f4:	28ffdd0e 	bge	r5,r3,4256c <__alt_data_end+0xfffcca0c>
   425f8:	01400174 	movhi	r5,5
   425fc:	29604804 	addi	r5,r5,-32480
   42600:	29400017 	ldw	r5,0(r5)
   42604:	18c00054 	ori	r3,r3,1
   42608:	20c00115 	stw	r3,4(r4)
   4260c:	00c00174 	movhi	r3,5
   42610:	1145c83a 	sub	r2,r2,r5
   42614:	18e72b04 	addi	r3,r3,-25428
   42618:	18800015 	stw	r2,0(r3)
   4261c:	003fd306 	br	4256c <__alt_data_end+0xfffcca0c>

00042620 <_free_r>:
   42620:	28004c26 	beq	r5,zero,42754 <_free_r+0x134>
   42624:	defffd04 	addi	sp,sp,-12
   42628:	dc400115 	stw	r17,4(sp)
   4262c:	dc000015 	stw	r16,0(sp)
   42630:	2023883a 	mov	r17,r4
   42634:	2821883a 	mov	r16,r5
   42638:	dfc00215 	stw	ra,8(sp)
   4263c:	00438ac0 	call	438ac <__malloc_lock>
   42640:	813fff17 	ldw	r4,-4(r16)
   42644:	00bfff84 	movi	r2,-2
   42648:	02400134 	movhi	r9,4
   4264c:	81bffe04 	addi	r6,r16,-8
   42650:	2084703a 	and	r2,r4,r2
   42654:	4a5a9104 	addi	r9,r9,27204
   42658:	308b883a 	add	r5,r6,r2
   4265c:	2a000117 	ldw	r8,4(r5)
   42660:	49c00217 	ldw	r7,8(r9)
   42664:	00ffff04 	movi	r3,-4
   42668:	40c6703a 	and	r3,r8,r3
   4266c:	39405326 	beq	r7,r5,427bc <_free_r+0x19c>
   42670:	28c00115 	stw	r3,4(r5)
   42674:	2100004c 	andi	r4,r4,1
   42678:	2000091e 	bne	r4,zero,426a0 <_free_r+0x80>
   4267c:	81fffe17 	ldw	r7,-8(r16)
   42680:	4a000204 	addi	r8,r9,8
   42684:	31cdc83a 	sub	r6,r6,r7
   42688:	31000217 	ldw	r4,8(r6)
   4268c:	11c5883a 	add	r2,r2,r7
   42690:	22006126 	beq	r4,r8,42818 <_free_r+0x1f8>
   42694:	31c00317 	ldw	r7,12(r6)
   42698:	21c00315 	stw	r7,12(r4)
   4269c:	39000215 	stw	r4,8(r7)
   426a0:	28c9883a 	add	r4,r5,r3
   426a4:	21c00117 	ldw	r7,4(r4)
   426a8:	39c0004c 	andi	r7,r7,1
   426ac:	38000d1e 	bne	r7,zero,426e4 <_free_r+0xc4>
   426b0:	29000217 	ldw	r4,8(r5)
   426b4:	10c5883a 	add	r2,r2,r3
   426b8:	00c00134 	movhi	r3,4
   426bc:	18da9304 	addi	r3,r3,27212
   426c0:	20c07526 	beq	r4,r3,42898 <_free_r+0x278>
   426c4:	29c00317 	ldw	r7,12(r5)
   426c8:	11400054 	ori	r5,r2,1
   426cc:	3087883a 	add	r3,r6,r2
   426d0:	21c00315 	stw	r7,12(r4)
   426d4:	39000215 	stw	r4,8(r7)
   426d8:	31400115 	stw	r5,4(r6)
   426dc:	18800015 	stw	r2,0(r3)
   426e0:	00000406 	br	426f4 <_free_r+0xd4>
   426e4:	10c00054 	ori	r3,r2,1
   426e8:	30c00115 	stw	r3,4(r6)
   426ec:	3087883a 	add	r3,r6,r2
   426f0:	18800015 	stw	r2,0(r3)
   426f4:	00c07fc4 	movi	r3,511
   426f8:	18801736 	bltu	r3,r2,42758 <_free_r+0x138>
   426fc:	1004d0fa 	srli	r2,r2,3
   42700:	01400044 	movi	r5,1
   42704:	49000117 	ldw	r4,4(r9)
   42708:	1087883a 	add	r3,r2,r2
   4270c:	18c7883a 	add	r3,r3,r3
   42710:	1005d0ba 	srai	r2,r2,2
   42714:	18c7883a 	add	r3,r3,r3
   42718:	1a47883a 	add	r3,r3,r9
   4271c:	19c00217 	ldw	r7,8(r3)
   42720:	2884983a 	sll	r2,r5,r2
   42724:	30c00315 	stw	r3,12(r6)
   42728:	31c00215 	stw	r7,8(r6)
   4272c:	1104b03a 	or	r2,r2,r4
   42730:	19800215 	stw	r6,8(r3)
   42734:	48800115 	stw	r2,4(r9)
   42738:	39800315 	stw	r6,12(r7)
   4273c:	8809883a 	mov	r4,r17
   42740:	dfc00217 	ldw	ra,8(sp)
   42744:	dc400117 	ldw	r17,4(sp)
   42748:	dc000017 	ldw	r16,0(sp)
   4274c:	dec00304 	addi	sp,sp,12
   42750:	00438cc1 	jmpi	438cc <__malloc_unlock>
   42754:	f800283a 	ret
   42758:	1006d27a 	srli	r3,r2,9
   4275c:	01000104 	movi	r4,4
   42760:	20c04036 	bltu	r4,r3,42864 <_free_r+0x244>
   42764:	1006d1ba 	srli	r3,r2,6
   42768:	19400e04 	addi	r5,r3,56
   4276c:	2947883a 	add	r3,r5,r5
   42770:	18c7883a 	add	r3,r3,r3
   42774:	18c7883a 	add	r3,r3,r3
   42778:	1a49883a 	add	r4,r3,r9
   4277c:	20c00217 	ldw	r3,8(r4)
   42780:	01c00134 	movhi	r7,4
   42784:	39da9104 	addi	r7,r7,27204
   42788:	19003b26 	beq	r3,r4,42878 <_free_r+0x258>
   4278c:	01ffff04 	movi	r7,-4
   42790:	19400117 	ldw	r5,4(r3)
   42794:	29ca703a 	and	r5,r5,r7
   42798:	1140022e 	bgeu	r2,r5,427a4 <_free_r+0x184>
   4279c:	18c00217 	ldw	r3,8(r3)
   427a0:	20fffb1e 	bne	r4,r3,42790 <__alt_data_end+0xfffccc30>
   427a4:	18800317 	ldw	r2,12(r3)
   427a8:	30800315 	stw	r2,12(r6)
   427ac:	30c00215 	stw	r3,8(r6)
   427b0:	11800215 	stw	r6,8(r2)
   427b4:	19800315 	stw	r6,12(r3)
   427b8:	003fe006 	br	4273c <__alt_data_end+0xfffccbdc>
   427bc:	2100004c 	andi	r4,r4,1
   427c0:	1885883a 	add	r2,r3,r2
   427c4:	2000071e 	bne	r4,zero,427e4 <_free_r+0x1c4>
   427c8:	817ffe17 	ldw	r5,-8(r16)
   427cc:	314dc83a 	sub	r6,r6,r5
   427d0:	30c00317 	ldw	r3,12(r6)
   427d4:	31000217 	ldw	r4,8(r6)
   427d8:	1145883a 	add	r2,r2,r5
   427dc:	20c00315 	stw	r3,12(r4)
   427e0:	19000215 	stw	r4,8(r3)
   427e4:	10c00054 	ori	r3,r2,1
   427e8:	30c00115 	stw	r3,4(r6)
   427ec:	00c00174 	movhi	r3,5
   427f0:	18e04904 	addi	r3,r3,-32476
   427f4:	18c00017 	ldw	r3,0(r3)
   427f8:	49800215 	stw	r6,8(r9)
   427fc:	10ffcf36 	bltu	r2,r3,4273c <__alt_data_end+0xfffccbdc>
   42800:	00800174 	movhi	r2,5
   42804:	10a72204 	addi	r2,r2,-25464
   42808:	11400017 	ldw	r5,0(r2)
   4280c:	8809883a 	mov	r4,r17
   42810:	00424fc0 	call	424fc <_malloc_trim_r>
   42814:	003fc906 	br	4273c <__alt_data_end+0xfffccbdc>
   42818:	28c9883a 	add	r4,r5,r3
   4281c:	21000117 	ldw	r4,4(r4)
   42820:	2100004c 	andi	r4,r4,1
   42824:	20000a1e 	bne	r4,zero,42850 <_free_r+0x230>
   42828:	29000317 	ldw	r4,12(r5)
   4282c:	29400217 	ldw	r5,8(r5)
   42830:	10c5883a 	add	r2,r2,r3
   42834:	10c00054 	ori	r3,r2,1
   42838:	29000315 	stw	r4,12(r5)
   4283c:	21400215 	stw	r5,8(r4)
   42840:	30c00115 	stw	r3,4(r6)
   42844:	308d883a 	add	r6,r6,r2
   42848:	30800015 	stw	r2,0(r6)
   4284c:	003fbb06 	br	4273c <__alt_data_end+0xfffccbdc>
   42850:	10c00054 	ori	r3,r2,1
   42854:	30c00115 	stw	r3,4(r6)
   42858:	308d883a 	add	r6,r6,r2
   4285c:	30800015 	stw	r2,0(r6)
   42860:	003fb606 	br	4273c <__alt_data_end+0xfffccbdc>
   42864:	01000504 	movi	r4,20
   42868:	20c01436 	bltu	r4,r3,428bc <_free_r+0x29c>
   4286c:	194016c4 	addi	r5,r3,91
   42870:	2947883a 	add	r3,r5,r5
   42874:	003fbe06 	br	42770 <__alt_data_end+0xfffccc10>
   42878:	280bd0ba 	srai	r5,r5,2
   4287c:	00800044 	movi	r2,1
   42880:	39000117 	ldw	r4,4(r7)
   42884:	114a983a 	sll	r5,r2,r5
   42888:	1805883a 	mov	r2,r3
   4288c:	2908b03a 	or	r4,r5,r4
   42890:	39000115 	stw	r4,4(r7)
   42894:	003fc406 	br	427a8 <__alt_data_end+0xfffccc48>
   42898:	49800515 	stw	r6,20(r9)
   4289c:	49800415 	stw	r6,16(r9)
   428a0:	10c00054 	ori	r3,r2,1
   428a4:	31000315 	stw	r4,12(r6)
   428a8:	31000215 	stw	r4,8(r6)
   428ac:	30c00115 	stw	r3,4(r6)
   428b0:	308d883a 	add	r6,r6,r2
   428b4:	30800015 	stw	r2,0(r6)
   428b8:	003fa006 	br	4273c <__alt_data_end+0xfffccbdc>
   428bc:	01001504 	movi	r4,84
   428c0:	20c00436 	bltu	r4,r3,428d4 <_free_r+0x2b4>
   428c4:	1006d33a 	srli	r3,r2,12
   428c8:	19401b84 	addi	r5,r3,110
   428cc:	2947883a 	add	r3,r5,r5
   428d0:	003fa706 	br	42770 <__alt_data_end+0xfffccc10>
   428d4:	01005504 	movi	r4,340
   428d8:	20c00436 	bltu	r4,r3,428ec <_free_r+0x2cc>
   428dc:	1006d3fa 	srli	r3,r2,15
   428e0:	19401dc4 	addi	r5,r3,119
   428e4:	2947883a 	add	r3,r5,r5
   428e8:	003fa106 	br	42770 <__alt_data_end+0xfffccc10>
   428ec:	01015504 	movi	r4,1364
   428f0:	20c00436 	bltu	r4,r3,42904 <_free_r+0x2e4>
   428f4:	1006d4ba 	srli	r3,r2,18
   428f8:	19401f04 	addi	r5,r3,124
   428fc:	2947883a 	add	r3,r5,r5
   42900:	003f9b06 	br	42770 <__alt_data_end+0xfffccc10>
   42904:	00c03f04 	movi	r3,252
   42908:	01401f84 	movi	r5,126
   4290c:	003f9806 	br	42770 <__alt_data_end+0xfffccc10>

00042910 <_fwalk>:
   42910:	defff804 	addi	sp,sp,-32
   42914:	dd400515 	stw	r21,20(sp)
   42918:	2540b804 	addi	r21,r4,736
   4291c:	dd800615 	stw	r22,24(sp)
   42920:	dd000415 	stw	r20,16(sp)
   42924:	dfc00715 	stw	ra,28(sp)
   42928:	dcc00315 	stw	r19,12(sp)
   4292c:	dc800215 	stw	r18,8(sp)
   42930:	dc400115 	stw	r17,4(sp)
   42934:	dc000015 	stw	r16,0(sp)
   42938:	2829883a 	mov	r20,r5
   4293c:	002d883a 	mov	r22,zero
   42940:	00424bc0 	call	424bc <__sfp_lock_acquire>
   42944:	a8001426 	beq	r21,zero,42998 <_fwalk+0x88>
   42948:	04ffffc4 	movi	r19,-1
   4294c:	ac400117 	ldw	r17,4(r21)
   42950:	ac800217 	ldw	r18,8(r21)
   42954:	8c7fffc4 	addi	r17,r17,-1
   42958:	88000d16 	blt	r17,zero,42990 <_fwalk+0x80>
   4295c:	94000304 	addi	r16,r18,12
   42960:	94800384 	addi	r18,r18,14
   42964:	80c0000f 	ldh	r3,0(r16)
   42968:	8c7fffc4 	addi	r17,r17,-1
   4296c:	813ffd04 	addi	r4,r16,-12
   42970:	18000426 	beq	r3,zero,42984 <_fwalk+0x74>
   42974:	90c0000f 	ldh	r3,0(r18)
   42978:	1cc00226 	beq	r3,r19,42984 <_fwalk+0x74>
   4297c:	a03ee83a 	callr	r20
   42980:	b0acb03a 	or	r22,r22,r2
   42984:	84001a04 	addi	r16,r16,104
   42988:	94801a04 	addi	r18,r18,104
   4298c:	8cfff51e 	bne	r17,r19,42964 <__alt_data_end+0xfffcce04>
   42990:	ad400017 	ldw	r21,0(r21)
   42994:	a83fed1e 	bne	r21,zero,4294c <__alt_data_end+0xfffccdec>
   42998:	00424c00 	call	424c0 <__sfp_lock_release>
   4299c:	b005883a 	mov	r2,r22
   429a0:	dfc00717 	ldw	ra,28(sp)
   429a4:	dd800617 	ldw	r22,24(sp)
   429a8:	dd400517 	ldw	r21,20(sp)
   429ac:	dd000417 	ldw	r20,16(sp)
   429b0:	dcc00317 	ldw	r19,12(sp)
   429b4:	dc800217 	ldw	r18,8(sp)
   429b8:	dc400117 	ldw	r17,4(sp)
   429bc:	dc000017 	ldw	r16,0(sp)
   429c0:	dec00804 	addi	sp,sp,32
   429c4:	f800283a 	ret

000429c8 <_fwalk_reent>:
   429c8:	defff804 	addi	sp,sp,-32
   429cc:	dd400515 	stw	r21,20(sp)
   429d0:	2540b804 	addi	r21,r4,736
   429d4:	dd800615 	stw	r22,24(sp)
   429d8:	dd000415 	stw	r20,16(sp)
   429dc:	dcc00315 	stw	r19,12(sp)
   429e0:	dfc00715 	stw	ra,28(sp)
   429e4:	dc800215 	stw	r18,8(sp)
   429e8:	dc400115 	stw	r17,4(sp)
   429ec:	dc000015 	stw	r16,0(sp)
   429f0:	2027883a 	mov	r19,r4
   429f4:	2829883a 	mov	r20,r5
   429f8:	002d883a 	mov	r22,zero
   429fc:	00424bc0 	call	424bc <__sfp_lock_acquire>
   42a00:	a8001326 	beq	r21,zero,42a50 <_fwalk_reent+0x88>
   42a04:	04bfffc4 	movi	r18,-1
   42a08:	ac400117 	ldw	r17,4(r21)
   42a0c:	ac000217 	ldw	r16,8(r21)
   42a10:	8c7fffc4 	addi	r17,r17,-1
   42a14:	88000c16 	blt	r17,zero,42a48 <_fwalk_reent+0x80>
   42a18:	84000304 	addi	r16,r16,12
   42a1c:	80c0000f 	ldh	r3,0(r16)
   42a20:	8c7fffc4 	addi	r17,r17,-1
   42a24:	817ffd04 	addi	r5,r16,-12
   42a28:	18000526 	beq	r3,zero,42a40 <_fwalk_reent+0x78>
   42a2c:	80c0008f 	ldh	r3,2(r16)
   42a30:	9809883a 	mov	r4,r19
   42a34:	1c800226 	beq	r3,r18,42a40 <_fwalk_reent+0x78>
   42a38:	a03ee83a 	callr	r20
   42a3c:	b0acb03a 	or	r22,r22,r2
   42a40:	84001a04 	addi	r16,r16,104
   42a44:	8cbff51e 	bne	r17,r18,42a1c <__alt_data_end+0xfffccebc>
   42a48:	ad400017 	ldw	r21,0(r21)
   42a4c:	a83fee1e 	bne	r21,zero,42a08 <__alt_data_end+0xfffccea8>
   42a50:	00424c00 	call	424c0 <__sfp_lock_release>
   42a54:	b005883a 	mov	r2,r22
   42a58:	dfc00717 	ldw	ra,28(sp)
   42a5c:	dd800617 	ldw	r22,24(sp)
   42a60:	dd400517 	ldw	r21,20(sp)
   42a64:	dd000417 	ldw	r20,16(sp)
   42a68:	dcc00317 	ldw	r19,12(sp)
   42a6c:	dc800217 	ldw	r18,8(sp)
   42a70:	dc400117 	ldw	r17,4(sp)
   42a74:	dc000017 	ldw	r16,0(sp)
   42a78:	dec00804 	addi	sp,sp,32
   42a7c:	f800283a 	ret

00042a80 <__smakebuf_r>:
   42a80:	2880030b 	ldhu	r2,12(r5)
   42a84:	10c0008c 	andi	r3,r2,2
   42a88:	1800401e 	bne	r3,zero,42b8c <__smakebuf_r+0x10c>
   42a8c:	deffec04 	addi	sp,sp,-80
   42a90:	dc000f15 	stw	r16,60(sp)
   42a94:	2821883a 	mov	r16,r5
   42a98:	2940038f 	ldh	r5,14(r5)
   42a9c:	dc401015 	stw	r17,64(sp)
   42aa0:	dfc01315 	stw	ra,76(sp)
   42aa4:	dcc01215 	stw	r19,72(sp)
   42aa8:	dc801115 	stw	r18,68(sp)
   42aac:	2023883a 	mov	r17,r4
   42ab0:	28001b16 	blt	r5,zero,42b20 <__smakebuf_r+0xa0>
   42ab4:	d80d883a 	mov	r6,sp
   42ab8:	004305c0 	call	4305c <_fstat_r>
   42abc:	10001716 	blt	r2,zero,42b1c <__smakebuf_r+0x9c>
   42ac0:	d8800117 	ldw	r2,4(sp)
   42ac4:	00e00014 	movui	r3,32768
   42ac8:	10bc000c 	andi	r2,r2,61440
   42acc:	10c03726 	beq	r2,r3,42bac <__smakebuf_r+0x12c>
   42ad0:	80c0030b 	ldhu	r3,12(r16)
   42ad4:	18c20014 	ori	r3,r3,2048
   42ad8:	80c0030d 	sth	r3,12(r16)
   42adc:	00c80004 	movi	r3,8192
   42ae0:	10c03c1e 	bne	r2,r3,42bd4 <__smakebuf_r+0x154>
   42ae4:	8140038f 	ldh	r5,14(r16)
   42ae8:	8809883a 	mov	r4,r17
   42aec:	00430b40 	call	430b4 <_isatty_r>
   42af0:	10004e26 	beq	r2,zero,42c2c <__smakebuf_r+0x1ac>
   42af4:	8080030b 	ldhu	r2,12(r16)
   42af8:	04c00044 	movi	r19,1
   42afc:	80c010c4 	addi	r3,r16,67
   42b00:	14c4b03a 	or	r2,r2,r19
   42b04:	8080030d 	sth	r2,12(r16)
   42b08:	80c00015 	stw	r3,0(r16)
   42b0c:	80c00415 	stw	r3,16(r16)
   42b10:	84c00515 	stw	r19,20(r16)
   42b14:	04810004 	movi	r18,1024
   42b18:	00000706 	br	42b38 <__smakebuf_r+0xb8>
   42b1c:	8080030b 	ldhu	r2,12(r16)
   42b20:	10c0200c 	andi	r3,r2,128
   42b24:	18001f1e 	bne	r3,zero,42ba4 <__smakebuf_r+0x124>
   42b28:	04810004 	movi	r18,1024
   42b2c:	10820014 	ori	r2,r2,2048
   42b30:	8080030d 	sth	r2,12(r16)
   42b34:	0027883a 	mov	r19,zero
   42b38:	8809883a 	mov	r4,r17
   42b3c:	900b883a 	mov	r5,r18
   42b40:	0040ca80 	call	40ca8 <_malloc_r>
   42b44:	10002e26 	beq	r2,zero,42c00 <__smakebuf_r+0x180>
   42b48:	80c0030b 	ldhu	r3,12(r16)
   42b4c:	01000134 	movhi	r4,4
   42b50:	21085604 	addi	r4,r4,8536
   42b54:	89000f15 	stw	r4,60(r17)
   42b58:	18c02014 	ori	r3,r3,128
   42b5c:	80c0030d 	sth	r3,12(r16)
   42b60:	80800015 	stw	r2,0(r16)
   42b64:	80800415 	stw	r2,16(r16)
   42b68:	84800515 	stw	r18,20(r16)
   42b6c:	98001c1e 	bne	r19,zero,42be0 <__smakebuf_r+0x160>
   42b70:	dfc01317 	ldw	ra,76(sp)
   42b74:	dcc01217 	ldw	r19,72(sp)
   42b78:	dc801117 	ldw	r18,68(sp)
   42b7c:	dc401017 	ldw	r17,64(sp)
   42b80:	dc000f17 	ldw	r16,60(sp)
   42b84:	dec01404 	addi	sp,sp,80
   42b88:	f800283a 	ret
   42b8c:	288010c4 	addi	r2,r5,67
   42b90:	28800015 	stw	r2,0(r5)
   42b94:	28800415 	stw	r2,16(r5)
   42b98:	00800044 	movi	r2,1
   42b9c:	28800515 	stw	r2,20(r5)
   42ba0:	f800283a 	ret
   42ba4:	04801004 	movi	r18,64
   42ba8:	003fe006 	br	42b2c <__alt_data_end+0xfffccfcc>
   42bac:	81000a17 	ldw	r4,40(r16)
   42bb0:	00c00134 	movhi	r3,4
   42bb4:	18cb8d04 	addi	r3,r3,11828
   42bb8:	20ffc51e 	bne	r4,r3,42ad0 <__alt_data_end+0xfffccf70>
   42bbc:	80c0030b 	ldhu	r3,12(r16)
   42bc0:	01010004 	movi	r4,1024
   42bc4:	81001315 	stw	r4,76(r16)
   42bc8:	1906b03a 	or	r3,r3,r4
   42bcc:	80c0030d 	sth	r3,12(r16)
   42bd0:	003fc206 	br	42adc <__alt_data_end+0xfffccf7c>
   42bd4:	0027883a 	mov	r19,zero
   42bd8:	04810004 	movi	r18,1024
   42bdc:	003fd606 	br	42b38 <__alt_data_end+0xfffccfd8>
   42be0:	8140038f 	ldh	r5,14(r16)
   42be4:	8809883a 	mov	r4,r17
   42be8:	00430b40 	call	430b4 <_isatty_r>
   42bec:	103fe026 	beq	r2,zero,42b70 <__alt_data_end+0xfffcd010>
   42bf0:	8080030b 	ldhu	r2,12(r16)
   42bf4:	10800054 	ori	r2,r2,1
   42bf8:	8080030d 	sth	r2,12(r16)
   42bfc:	003fdc06 	br	42b70 <__alt_data_end+0xfffcd010>
   42c00:	8080030b 	ldhu	r2,12(r16)
   42c04:	10c0800c 	andi	r3,r2,512
   42c08:	183fd91e 	bne	r3,zero,42b70 <__alt_data_end+0xfffcd010>
   42c0c:	10800094 	ori	r2,r2,2
   42c10:	80c010c4 	addi	r3,r16,67
   42c14:	8080030d 	sth	r2,12(r16)
   42c18:	00800044 	movi	r2,1
   42c1c:	80c00015 	stw	r3,0(r16)
   42c20:	80c00415 	stw	r3,16(r16)
   42c24:	80800515 	stw	r2,20(r16)
   42c28:	003fd106 	br	42b70 <__alt_data_end+0xfffcd010>
   42c2c:	04c00044 	movi	r19,1
   42c30:	04810004 	movi	r18,1024
   42c34:	003fc006 	br	42b38 <__alt_data_end+0xfffccfd8>

00042c38 <memset>:
   42c38:	20c000cc 	andi	r3,r4,3
   42c3c:	2005883a 	mov	r2,r4
   42c40:	18004326 	beq	r3,zero,42d50 <memset+0x118>
   42c44:	31ffffc4 	addi	r7,r6,-1
   42c48:	30004026 	beq	r6,zero,42d4c <memset+0x114>
   42c4c:	2813883a 	mov	r9,r5
   42c50:	200d883a 	mov	r6,r4
   42c54:	2007883a 	mov	r3,r4
   42c58:	00000406 	br	42c6c <memset+0x34>
   42c5c:	3a3fffc4 	addi	r8,r7,-1
   42c60:	31800044 	addi	r6,r6,1
   42c64:	38003926 	beq	r7,zero,42d4c <memset+0x114>
   42c68:	400f883a 	mov	r7,r8
   42c6c:	18c00044 	addi	r3,r3,1
   42c70:	32400005 	stb	r9,0(r6)
   42c74:	1a0000cc 	andi	r8,r3,3
   42c78:	403ff81e 	bne	r8,zero,42c5c <__alt_data_end+0xfffcd0fc>
   42c7c:	010000c4 	movi	r4,3
   42c80:	21c02d2e 	bgeu	r4,r7,42d38 <memset+0x100>
   42c84:	29803fcc 	andi	r6,r5,255
   42c88:	3008923a 	slli	r4,r6,8
   42c8c:	218cb03a 	or	r6,r4,r6
   42c90:	3008943a 	slli	r4,r6,16
   42c94:	218cb03a 	or	r6,r4,r6
   42c98:	010003c4 	movi	r4,15
   42c9c:	21c0182e 	bgeu	r4,r7,42d00 <memset+0xc8>
   42ca0:	3b3ffc04 	addi	r12,r7,-16
   42ca4:	6018d13a 	srli	r12,r12,4
   42ca8:	1a000104 	addi	r8,r3,4
   42cac:	1ac00204 	addi	r11,r3,8
   42cb0:	6008913a 	slli	r4,r12,4
   42cb4:	1a800304 	addi	r10,r3,12
   42cb8:	1813883a 	mov	r9,r3
   42cbc:	21000504 	addi	r4,r4,20
   42cc0:	1909883a 	add	r4,r3,r4
   42cc4:	49800015 	stw	r6,0(r9)
   42cc8:	41800015 	stw	r6,0(r8)
   42ccc:	59800015 	stw	r6,0(r11)
   42cd0:	51800015 	stw	r6,0(r10)
   42cd4:	42000404 	addi	r8,r8,16
   42cd8:	4a400404 	addi	r9,r9,16
   42cdc:	5ac00404 	addi	r11,r11,16
   42ce0:	52800404 	addi	r10,r10,16
   42ce4:	413ff71e 	bne	r8,r4,42cc4 <__alt_data_end+0xfffcd164>
   42ce8:	63000044 	addi	r12,r12,1
   42cec:	6018913a 	slli	r12,r12,4
   42cf0:	39c003cc 	andi	r7,r7,15
   42cf4:	010000c4 	movi	r4,3
   42cf8:	1b07883a 	add	r3,r3,r12
   42cfc:	21c00e2e 	bgeu	r4,r7,42d38 <memset+0x100>
   42d00:	1813883a 	mov	r9,r3
   42d04:	3811883a 	mov	r8,r7
   42d08:	010000c4 	movi	r4,3
   42d0c:	49800015 	stw	r6,0(r9)
   42d10:	423fff04 	addi	r8,r8,-4
   42d14:	4a400104 	addi	r9,r9,4
   42d18:	223ffc36 	bltu	r4,r8,42d0c <__alt_data_end+0xfffcd1ac>
   42d1c:	393fff04 	addi	r4,r7,-4
   42d20:	2008d0ba 	srli	r4,r4,2
   42d24:	39c000cc 	andi	r7,r7,3
   42d28:	21000044 	addi	r4,r4,1
   42d2c:	2109883a 	add	r4,r4,r4
   42d30:	2109883a 	add	r4,r4,r4
   42d34:	1907883a 	add	r3,r3,r4
   42d38:	38000426 	beq	r7,zero,42d4c <memset+0x114>
   42d3c:	19cf883a 	add	r7,r3,r7
   42d40:	19400005 	stb	r5,0(r3)
   42d44:	18c00044 	addi	r3,r3,1
   42d48:	19fffd1e 	bne	r3,r7,42d40 <__alt_data_end+0xfffcd1e0>
   42d4c:	f800283a 	ret
   42d50:	2007883a 	mov	r3,r4
   42d54:	300f883a 	mov	r7,r6
   42d58:	003fc806 	br	42c7c <__alt_data_end+0xfffcd11c>

00042d5c <__sread>:
   42d5c:	defffe04 	addi	sp,sp,-8
   42d60:	dc000015 	stw	r16,0(sp)
   42d64:	2821883a 	mov	r16,r5
   42d68:	2940038f 	ldh	r5,14(r5)
   42d6c:	dfc00115 	stw	ra,4(sp)
   42d70:	00431640 	call	43164 <_read_r>
   42d74:	10000716 	blt	r2,zero,42d94 <__sread+0x38>
   42d78:	80c01417 	ldw	r3,80(r16)
   42d7c:	1887883a 	add	r3,r3,r2
   42d80:	80c01415 	stw	r3,80(r16)
   42d84:	dfc00117 	ldw	ra,4(sp)
   42d88:	dc000017 	ldw	r16,0(sp)
   42d8c:	dec00204 	addi	sp,sp,8
   42d90:	f800283a 	ret
   42d94:	80c0030b 	ldhu	r3,12(r16)
   42d98:	18fbffcc 	andi	r3,r3,61439
   42d9c:	80c0030d 	sth	r3,12(r16)
   42da0:	dfc00117 	ldw	ra,4(sp)
   42da4:	dc000017 	ldw	r16,0(sp)
   42da8:	dec00204 	addi	sp,sp,8
   42dac:	f800283a 	ret

00042db0 <__seofread>:
   42db0:	0005883a 	mov	r2,zero
   42db4:	f800283a 	ret

00042db8 <__swrite>:
   42db8:	2880030b 	ldhu	r2,12(r5)
   42dbc:	defffb04 	addi	sp,sp,-20
   42dc0:	dcc00315 	stw	r19,12(sp)
   42dc4:	dc800215 	stw	r18,8(sp)
   42dc8:	dc400115 	stw	r17,4(sp)
   42dcc:	dc000015 	stw	r16,0(sp)
   42dd0:	dfc00415 	stw	ra,16(sp)
   42dd4:	10c0400c 	andi	r3,r2,256
   42dd8:	2821883a 	mov	r16,r5
   42ddc:	2027883a 	mov	r19,r4
   42de0:	3025883a 	mov	r18,r6
   42de4:	3823883a 	mov	r17,r7
   42de8:	18000526 	beq	r3,zero,42e00 <__swrite+0x48>
   42dec:	2940038f 	ldh	r5,14(r5)
   42df0:	000d883a 	mov	r6,zero
   42df4:	01c00084 	movi	r7,2
   42df8:	00431080 	call	43108 <_lseek_r>
   42dfc:	8080030b 	ldhu	r2,12(r16)
   42e00:	8140038f 	ldh	r5,14(r16)
   42e04:	10bbffcc 	andi	r2,r2,61439
   42e08:	9809883a 	mov	r4,r19
   42e0c:	900d883a 	mov	r6,r18
   42e10:	880f883a 	mov	r7,r17
   42e14:	8080030d 	sth	r2,12(r16)
   42e18:	dfc00417 	ldw	ra,16(sp)
   42e1c:	dcc00317 	ldw	r19,12(sp)
   42e20:	dc800217 	ldw	r18,8(sp)
   42e24:	dc400117 	ldw	r17,4(sp)
   42e28:	dc000017 	ldw	r16,0(sp)
   42e2c:	dec00504 	addi	sp,sp,20
   42e30:	0042e981 	jmpi	42e98 <_write_r>

00042e34 <__sseek>:
   42e34:	defffe04 	addi	sp,sp,-8
   42e38:	dc000015 	stw	r16,0(sp)
   42e3c:	2821883a 	mov	r16,r5
   42e40:	2940038f 	ldh	r5,14(r5)
   42e44:	dfc00115 	stw	ra,4(sp)
   42e48:	00431080 	call	43108 <_lseek_r>
   42e4c:	00ffffc4 	movi	r3,-1
   42e50:	10c00826 	beq	r2,r3,42e74 <__sseek+0x40>
   42e54:	80c0030b 	ldhu	r3,12(r16)
   42e58:	80801415 	stw	r2,80(r16)
   42e5c:	18c40014 	ori	r3,r3,4096
   42e60:	80c0030d 	sth	r3,12(r16)
   42e64:	dfc00117 	ldw	ra,4(sp)
   42e68:	dc000017 	ldw	r16,0(sp)
   42e6c:	dec00204 	addi	sp,sp,8
   42e70:	f800283a 	ret
   42e74:	80c0030b 	ldhu	r3,12(r16)
   42e78:	18fbffcc 	andi	r3,r3,61439
   42e7c:	80c0030d 	sth	r3,12(r16)
   42e80:	dfc00117 	ldw	ra,4(sp)
   42e84:	dc000017 	ldw	r16,0(sp)
   42e88:	dec00204 	addi	sp,sp,8
   42e8c:	f800283a 	ret

00042e90 <__sclose>:
   42e90:	2940038f 	ldh	r5,14(r5)
   42e94:	0042ef41 	jmpi	42ef4 <_close_r>

00042e98 <_write_r>:
   42e98:	defffd04 	addi	sp,sp,-12
   42e9c:	dc000015 	stw	r16,0(sp)
   42ea0:	04000174 	movhi	r16,5
   42ea4:	dc400115 	stw	r17,4(sp)
   42ea8:	84272304 	addi	r16,r16,-25460
   42eac:	2023883a 	mov	r17,r4
   42eb0:	2809883a 	mov	r4,r5
   42eb4:	300b883a 	mov	r5,r6
   42eb8:	380d883a 	mov	r6,r7
   42ebc:	dfc00215 	stw	ra,8(sp)
   42ec0:	80000015 	stw	zero,0(r16)
   42ec4:	0043bf00 	call	43bf0 <write>
   42ec8:	00ffffc4 	movi	r3,-1
   42ecc:	10c00526 	beq	r2,r3,42ee4 <_write_r+0x4c>
   42ed0:	dfc00217 	ldw	ra,8(sp)
   42ed4:	dc400117 	ldw	r17,4(sp)
   42ed8:	dc000017 	ldw	r16,0(sp)
   42edc:	dec00304 	addi	sp,sp,12
   42ee0:	f800283a 	ret
   42ee4:	80c00017 	ldw	r3,0(r16)
   42ee8:	183ff926 	beq	r3,zero,42ed0 <__alt_data_end+0xfffcd370>
   42eec:	88c00015 	stw	r3,0(r17)
   42ef0:	003ff706 	br	42ed0 <__alt_data_end+0xfffcd370>

00042ef4 <_close_r>:
   42ef4:	defffd04 	addi	sp,sp,-12
   42ef8:	dc000015 	stw	r16,0(sp)
   42efc:	04000174 	movhi	r16,5
   42f00:	dc400115 	stw	r17,4(sp)
   42f04:	84272304 	addi	r16,r16,-25460
   42f08:	2023883a 	mov	r17,r4
   42f0c:	2809883a 	mov	r4,r5
   42f10:	dfc00215 	stw	ra,8(sp)
   42f14:	80000015 	stw	zero,0(r16)
   42f18:	004331c0 	call	4331c <close>
   42f1c:	00ffffc4 	movi	r3,-1
   42f20:	10c00526 	beq	r2,r3,42f38 <_close_r+0x44>
   42f24:	dfc00217 	ldw	ra,8(sp)
   42f28:	dc400117 	ldw	r17,4(sp)
   42f2c:	dc000017 	ldw	r16,0(sp)
   42f30:	dec00304 	addi	sp,sp,12
   42f34:	f800283a 	ret
   42f38:	80c00017 	ldw	r3,0(r16)
   42f3c:	183ff926 	beq	r3,zero,42f24 <__alt_data_end+0xfffcd3c4>
   42f40:	88c00015 	stw	r3,0(r17)
   42f44:	003ff706 	br	42f24 <__alt_data_end+0xfffcd3c4>

00042f48 <_fclose_r>:
   42f48:	28003226 	beq	r5,zero,43014 <_fclose_r+0xcc>
   42f4c:	defffc04 	addi	sp,sp,-16
   42f50:	dc400115 	stw	r17,4(sp)
   42f54:	2023883a 	mov	r17,r4
   42f58:	dc000015 	stw	r16,0(sp)
   42f5c:	dfc00315 	stw	ra,12(sp)
   42f60:	dc800215 	stw	r18,8(sp)
   42f64:	2821883a 	mov	r16,r5
   42f68:	00424bc0 	call	424bc <__sfp_lock_acquire>
   42f6c:	88000226 	beq	r17,zero,42f78 <_fclose_r+0x30>
   42f70:	88800e17 	ldw	r2,56(r17)
   42f74:	10002926 	beq	r2,zero,4301c <_fclose_r+0xd4>
   42f78:	8080030f 	ldh	r2,12(r16)
   42f7c:	10002226 	beq	r2,zero,43008 <_fclose_r+0xc0>
   42f80:	8809883a 	mov	r4,r17
   42f84:	800b883a 	mov	r5,r16
   42f88:	0041ef00 	call	41ef0 <_fflush_r>
   42f8c:	1025883a 	mov	r18,r2
   42f90:	80800b17 	ldw	r2,44(r16)
   42f94:	10000426 	beq	r2,zero,42fa8 <_fclose_r+0x60>
   42f98:	81400717 	ldw	r5,28(r16)
   42f9c:	8809883a 	mov	r4,r17
   42fa0:	103ee83a 	callr	r2
   42fa4:	10002616 	blt	r2,zero,43040 <_fclose_r+0xf8>
   42fa8:	8080030b 	ldhu	r2,12(r16)
   42fac:	1080200c 	andi	r2,r2,128
   42fb0:	10001f1e 	bne	r2,zero,43030 <_fclose_r+0xe8>
   42fb4:	81400c17 	ldw	r5,48(r16)
   42fb8:	28000526 	beq	r5,zero,42fd0 <_fclose_r+0x88>
   42fbc:	80801004 	addi	r2,r16,64
   42fc0:	28800226 	beq	r5,r2,42fcc <_fclose_r+0x84>
   42fc4:	8809883a 	mov	r4,r17
   42fc8:	00426200 	call	42620 <_free_r>
   42fcc:	80000c15 	stw	zero,48(r16)
   42fd0:	81401117 	ldw	r5,68(r16)
   42fd4:	28000326 	beq	r5,zero,42fe4 <_fclose_r+0x9c>
   42fd8:	8809883a 	mov	r4,r17
   42fdc:	00426200 	call	42620 <_free_r>
   42fe0:	80001115 	stw	zero,68(r16)
   42fe4:	8000030d 	sth	zero,12(r16)
   42fe8:	00424c00 	call	424c0 <__sfp_lock_release>
   42fec:	9005883a 	mov	r2,r18
   42ff0:	dfc00317 	ldw	ra,12(sp)
   42ff4:	dc800217 	ldw	r18,8(sp)
   42ff8:	dc400117 	ldw	r17,4(sp)
   42ffc:	dc000017 	ldw	r16,0(sp)
   43000:	dec00404 	addi	sp,sp,16
   43004:	f800283a 	ret
   43008:	00424c00 	call	424c0 <__sfp_lock_release>
   4300c:	0005883a 	mov	r2,zero
   43010:	003ff706 	br	42ff0 <__alt_data_end+0xfffcd490>
   43014:	0005883a 	mov	r2,zero
   43018:	f800283a 	ret
   4301c:	8809883a 	mov	r4,r17
   43020:	00424ac0 	call	424ac <__sinit>
   43024:	8080030f 	ldh	r2,12(r16)
   43028:	103fd51e 	bne	r2,zero,42f80 <__alt_data_end+0xfffcd420>
   4302c:	003ff606 	br	43008 <__alt_data_end+0xfffcd4a8>
   43030:	81400417 	ldw	r5,16(r16)
   43034:	8809883a 	mov	r4,r17
   43038:	00426200 	call	42620 <_free_r>
   4303c:	003fdd06 	br	42fb4 <__alt_data_end+0xfffcd454>
   43040:	04bfffc4 	movi	r18,-1
   43044:	003fd806 	br	42fa8 <__alt_data_end+0xfffcd448>

00043048 <fclose>:
   43048:	00800174 	movhi	r2,5
   4304c:	10a04704 	addi	r2,r2,-32484
   43050:	200b883a 	mov	r5,r4
   43054:	11000017 	ldw	r4,0(r2)
   43058:	0042f481 	jmpi	42f48 <_fclose_r>

0004305c <_fstat_r>:
   4305c:	defffd04 	addi	sp,sp,-12
   43060:	dc000015 	stw	r16,0(sp)
   43064:	04000174 	movhi	r16,5
   43068:	dc400115 	stw	r17,4(sp)
   4306c:	84272304 	addi	r16,r16,-25460
   43070:	2023883a 	mov	r17,r4
   43074:	2809883a 	mov	r4,r5
   43078:	300b883a 	mov	r5,r6
   4307c:	dfc00215 	stw	ra,8(sp)
   43080:	80000015 	stw	zero,0(r16)
   43084:	00434700 	call	43470 <fstat>
   43088:	00ffffc4 	movi	r3,-1
   4308c:	10c00526 	beq	r2,r3,430a4 <_fstat_r+0x48>
   43090:	dfc00217 	ldw	ra,8(sp)
   43094:	dc400117 	ldw	r17,4(sp)
   43098:	dc000017 	ldw	r16,0(sp)
   4309c:	dec00304 	addi	sp,sp,12
   430a0:	f800283a 	ret
   430a4:	80c00017 	ldw	r3,0(r16)
   430a8:	183ff926 	beq	r3,zero,43090 <__alt_data_end+0xfffcd530>
   430ac:	88c00015 	stw	r3,0(r17)
   430b0:	003ff706 	br	43090 <__alt_data_end+0xfffcd530>

000430b4 <_isatty_r>:
   430b4:	defffd04 	addi	sp,sp,-12
   430b8:	dc000015 	stw	r16,0(sp)
   430bc:	04000174 	movhi	r16,5
   430c0:	dc400115 	stw	r17,4(sp)
   430c4:	84272304 	addi	r16,r16,-25460
   430c8:	2023883a 	mov	r17,r4
   430cc:	2809883a 	mov	r4,r5
   430d0:	dfc00215 	stw	ra,8(sp)
   430d4:	80000015 	stw	zero,0(r16)
   430d8:	00435780 	call	43578 <isatty>
   430dc:	00ffffc4 	movi	r3,-1
   430e0:	10c00526 	beq	r2,r3,430f8 <_isatty_r+0x44>
   430e4:	dfc00217 	ldw	ra,8(sp)
   430e8:	dc400117 	ldw	r17,4(sp)
   430ec:	dc000017 	ldw	r16,0(sp)
   430f0:	dec00304 	addi	sp,sp,12
   430f4:	f800283a 	ret
   430f8:	80c00017 	ldw	r3,0(r16)
   430fc:	183ff926 	beq	r3,zero,430e4 <__alt_data_end+0xfffcd584>
   43100:	88c00015 	stw	r3,0(r17)
   43104:	003ff706 	br	430e4 <__alt_data_end+0xfffcd584>

00043108 <_lseek_r>:
   43108:	defffd04 	addi	sp,sp,-12
   4310c:	dc000015 	stw	r16,0(sp)
   43110:	04000174 	movhi	r16,5
   43114:	dc400115 	stw	r17,4(sp)
   43118:	84272304 	addi	r16,r16,-25460
   4311c:	2023883a 	mov	r17,r4
   43120:	2809883a 	mov	r4,r5
   43124:	300b883a 	mov	r5,r6
   43128:	380d883a 	mov	r6,r7
   4312c:	dfc00215 	stw	ra,8(sp)
   43130:	80000015 	stw	zero,0(r16)
   43134:	00437580 	call	43758 <lseek>
   43138:	00ffffc4 	movi	r3,-1
   4313c:	10c00526 	beq	r2,r3,43154 <_lseek_r+0x4c>
   43140:	dfc00217 	ldw	ra,8(sp)
   43144:	dc400117 	ldw	r17,4(sp)
   43148:	dc000017 	ldw	r16,0(sp)
   4314c:	dec00304 	addi	sp,sp,12
   43150:	f800283a 	ret
   43154:	80c00017 	ldw	r3,0(r16)
   43158:	183ff926 	beq	r3,zero,43140 <__alt_data_end+0xfffcd5e0>
   4315c:	88c00015 	stw	r3,0(r17)
   43160:	003ff706 	br	43140 <__alt_data_end+0xfffcd5e0>

00043164 <_read_r>:
   43164:	defffd04 	addi	sp,sp,-12
   43168:	dc000015 	stw	r16,0(sp)
   4316c:	04000174 	movhi	r16,5
   43170:	dc400115 	stw	r17,4(sp)
   43174:	84272304 	addi	r16,r16,-25460
   43178:	2023883a 	mov	r17,r4
   4317c:	2809883a 	mov	r4,r5
   43180:	300b883a 	mov	r5,r6
   43184:	380d883a 	mov	r6,r7
   43188:	dfc00215 	stw	ra,8(sp)
   4318c:	80000015 	stw	zero,0(r16)
   43190:	004393c0 	call	4393c <read>
   43194:	00ffffc4 	movi	r3,-1
   43198:	10c00526 	beq	r2,r3,431b0 <_read_r+0x4c>
   4319c:	dfc00217 	ldw	ra,8(sp)
   431a0:	dc400117 	ldw	r17,4(sp)
   431a4:	dc000017 	ldw	r16,0(sp)
   431a8:	dec00304 	addi	sp,sp,12
   431ac:	f800283a 	ret
   431b0:	80c00017 	ldw	r3,0(r16)
   431b4:	183ff926 	beq	r3,zero,4319c <__alt_data_end+0xfffcd63c>
   431b8:	88c00015 	stw	r3,0(r17)
   431bc:	003ff706 	br	4319c <__alt_data_end+0xfffcd63c>

000431c0 <__muldi3>:
   431c0:	defff604 	addi	sp,sp,-40
   431c4:	dd800615 	stw	r22,24(sp)
   431c8:	dd400515 	stw	r21,20(sp)
   431cc:	25bfffcc 	andi	r22,r4,65535
   431d0:	357fffcc 	andi	r21,r6,65535
   431d4:	dc400115 	stw	r17,4(sp)
   431d8:	2022d43a 	srli	r17,r4,16
   431dc:	dcc00315 	stw	r19,12(sp)
   431e0:	dc800215 	stw	r18,8(sp)
   431e4:	2027883a 	mov	r19,r4
   431e8:	2825883a 	mov	r18,r5
   431ec:	a809883a 	mov	r4,r21
   431f0:	b00b883a 	mov	r5,r22
   431f4:	dfc00915 	stw	ra,36(sp)
   431f8:	df000815 	stw	fp,32(sp)
   431fc:	ddc00715 	stw	r23,28(sp)
   43200:	3839883a 	mov	fp,r7
   43204:	302ed43a 	srli	r23,r6,16
   43208:	dd000415 	stw	r20,16(sp)
   4320c:	dc000015 	stw	r16,0(sp)
   43210:	3029883a 	mov	r20,r6
   43214:	00405fc0 	call	405fc <__mulsi3>
   43218:	a809883a 	mov	r4,r21
   4321c:	880b883a 	mov	r5,r17
   43220:	1021883a 	mov	r16,r2
   43224:	00405fc0 	call	405fc <__mulsi3>
   43228:	880b883a 	mov	r5,r17
   4322c:	b809883a 	mov	r4,r23
   43230:	102b883a 	mov	r21,r2
   43234:	00405fc0 	call	405fc <__mulsi3>
   43238:	b809883a 	mov	r4,r23
   4323c:	b00b883a 	mov	r5,r22
   43240:	1023883a 	mov	r17,r2
   43244:	00405fc0 	call	405fc <__mulsi3>
   43248:	8012d43a 	srli	r9,r16,16
   4324c:	a885883a 	add	r2,r21,r2
   43250:	1251883a 	add	r8,r2,r9
   43254:	4540022e 	bgeu	r8,r21,43260 <__muldi3+0xa0>
   43258:	00800074 	movhi	r2,1
   4325c:	88a3883a 	add	r17,r17,r2
   43260:	4006d43a 	srli	r3,r8,16
   43264:	4010943a 	slli	r8,r8,16
   43268:	9809883a 	mov	r4,r19
   4326c:	e00b883a 	mov	r5,fp
   43270:	843fffcc 	andi	r16,r16,65535
   43274:	88e3883a 	add	r17,r17,r3
   43278:	4421883a 	add	r16,r8,r16
   4327c:	00405fc0 	call	405fc <__mulsi3>
   43280:	a009883a 	mov	r4,r20
   43284:	900b883a 	mov	r5,r18
   43288:	1027883a 	mov	r19,r2
   4328c:	00405fc0 	call	405fc <__mulsi3>
   43290:	9885883a 	add	r2,r19,r2
   43294:	1447883a 	add	r3,r2,r17
   43298:	8005883a 	mov	r2,r16
   4329c:	dfc00917 	ldw	ra,36(sp)
   432a0:	df000817 	ldw	fp,32(sp)
   432a4:	ddc00717 	ldw	r23,28(sp)
   432a8:	dd800617 	ldw	r22,24(sp)
   432ac:	dd400517 	ldw	r21,20(sp)
   432b0:	dd000417 	ldw	r20,16(sp)
   432b4:	dcc00317 	ldw	r19,12(sp)
   432b8:	dc800217 	ldw	r18,8(sp)
   432bc:	dc400117 	ldw	r17,4(sp)
   432c0:	dc000017 	ldw	r16,0(sp)
   432c4:	dec00a04 	addi	sp,sp,40
   432c8:	f800283a 	ret

000432cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   432cc:	defffe04 	addi	sp,sp,-8
   432d0:	dfc00115 	stw	ra,4(sp)
   432d4:	df000015 	stw	fp,0(sp)
   432d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   432dc:	00800174 	movhi	r2,5
   432e0:	10a04f04 	addi	r2,r2,-32452
   432e4:	10800017 	ldw	r2,0(r2)
   432e8:	10000526 	beq	r2,zero,43300 <alt_get_errno+0x34>
   432ec:	00800174 	movhi	r2,5
   432f0:	10a04f04 	addi	r2,r2,-32452
   432f4:	10800017 	ldw	r2,0(r2)
   432f8:	103ee83a 	callr	r2
   432fc:	00000206 	br	43308 <alt_get_errno+0x3c>
   43300:	00800174 	movhi	r2,5
   43304:	10a72304 	addi	r2,r2,-25460
}
   43308:	e037883a 	mov	sp,fp
   4330c:	dfc00117 	ldw	ra,4(sp)
   43310:	df000017 	ldw	fp,0(sp)
   43314:	dec00204 	addi	sp,sp,8
   43318:	f800283a 	ret

0004331c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4331c:	defffb04 	addi	sp,sp,-20
   43320:	dfc00415 	stw	ra,16(sp)
   43324:	df000315 	stw	fp,12(sp)
   43328:	df000304 	addi	fp,sp,12
   4332c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   43330:	e0bfff17 	ldw	r2,-4(fp)
   43334:	10000816 	blt	r2,zero,43358 <close+0x3c>
   43338:	e13fff17 	ldw	r4,-4(fp)
   4333c:	01400304 	movi	r5,12
   43340:	00405fc0 	call	405fc <__mulsi3>
   43344:	1007883a 	mov	r3,r2
   43348:	00800134 	movhi	r2,4
   4334c:	109b9d04 	addi	r2,r2,28276
   43350:	1885883a 	add	r2,r3,r2
   43354:	00000106 	br	4335c <close+0x40>
   43358:	0005883a 	mov	r2,zero
   4335c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   43360:	e0bffd17 	ldw	r2,-12(fp)
   43364:	10001926 	beq	r2,zero,433cc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   43368:	e0bffd17 	ldw	r2,-12(fp)
   4336c:	10800017 	ldw	r2,0(r2)
   43370:	10800417 	ldw	r2,16(r2)
   43374:	10000626 	beq	r2,zero,43390 <close+0x74>
   43378:	e0bffd17 	ldw	r2,-12(fp)
   4337c:	10800017 	ldw	r2,0(r2)
   43380:	10800417 	ldw	r2,16(r2)
   43384:	e13ffd17 	ldw	r4,-12(fp)
   43388:	103ee83a 	callr	r2
   4338c:	00000106 	br	43394 <close+0x78>
   43390:	0005883a 	mov	r2,zero
   43394:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43398:	e13fff17 	ldw	r4,-4(fp)
   4339c:	0043a400 	call	43a40 <alt_release_fd>
    if (rval < 0)
   433a0:	e0bffe17 	ldw	r2,-8(fp)
   433a4:	1000070e 	bge	r2,zero,433c4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   433a8:	00432cc0 	call	432cc <alt_get_errno>
   433ac:	1007883a 	mov	r3,r2
   433b0:	e0bffe17 	ldw	r2,-8(fp)
   433b4:	0085c83a 	sub	r2,zero,r2
   433b8:	18800015 	stw	r2,0(r3)
      return -1;
   433bc:	00bfffc4 	movi	r2,-1
   433c0:	00000706 	br	433e0 <close+0xc4>
    }
    return 0;
   433c4:	0005883a 	mov	r2,zero
   433c8:	00000506 	br	433e0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   433cc:	00432cc0 	call	432cc <alt_get_errno>
   433d0:	1007883a 	mov	r3,r2
   433d4:	00801444 	movi	r2,81
   433d8:	18800015 	stw	r2,0(r3)
    return -1;
   433dc:	00bfffc4 	movi	r2,-1
  }
}
   433e0:	e037883a 	mov	sp,fp
   433e4:	dfc00117 	ldw	ra,4(sp)
   433e8:	df000017 	ldw	fp,0(sp)
   433ec:	dec00204 	addi	sp,sp,8
   433f0:	f800283a 	ret

000433f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   433f4:	defffc04 	addi	sp,sp,-16
   433f8:	df000315 	stw	fp,12(sp)
   433fc:	df000304 	addi	fp,sp,12
   43400:	e13ffd15 	stw	r4,-12(fp)
   43404:	e17ffe15 	stw	r5,-8(fp)
   43408:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4340c:	e0bfff17 	ldw	r2,-4(fp)
}
   43410:	e037883a 	mov	sp,fp
   43414:	df000017 	ldw	fp,0(sp)
   43418:	dec00104 	addi	sp,sp,4
   4341c:	f800283a 	ret

00043420 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43420:	defffe04 	addi	sp,sp,-8
   43424:	dfc00115 	stw	ra,4(sp)
   43428:	df000015 	stw	fp,0(sp)
   4342c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43430:	00800174 	movhi	r2,5
   43434:	10a04f04 	addi	r2,r2,-32452
   43438:	10800017 	ldw	r2,0(r2)
   4343c:	10000526 	beq	r2,zero,43454 <alt_get_errno+0x34>
   43440:	00800174 	movhi	r2,5
   43444:	10a04f04 	addi	r2,r2,-32452
   43448:	10800017 	ldw	r2,0(r2)
   4344c:	103ee83a 	callr	r2
   43450:	00000206 	br	4345c <alt_get_errno+0x3c>
   43454:	00800174 	movhi	r2,5
   43458:	10a72304 	addi	r2,r2,-25460
}
   4345c:	e037883a 	mov	sp,fp
   43460:	dfc00117 	ldw	ra,4(sp)
   43464:	df000017 	ldw	fp,0(sp)
   43468:	dec00204 	addi	sp,sp,8
   4346c:	f800283a 	ret

00043470 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   43470:	defffb04 	addi	sp,sp,-20
   43474:	dfc00415 	stw	ra,16(sp)
   43478:	df000315 	stw	fp,12(sp)
   4347c:	df000304 	addi	fp,sp,12
   43480:	e13ffe15 	stw	r4,-8(fp)
   43484:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43488:	e0bffe17 	ldw	r2,-8(fp)
   4348c:	10000816 	blt	r2,zero,434b0 <fstat+0x40>
   43490:	e13ffe17 	ldw	r4,-8(fp)
   43494:	01400304 	movi	r5,12
   43498:	00405fc0 	call	405fc <__mulsi3>
   4349c:	1007883a 	mov	r3,r2
   434a0:	00800134 	movhi	r2,4
   434a4:	109b9d04 	addi	r2,r2,28276
   434a8:	1885883a 	add	r2,r3,r2
   434ac:	00000106 	br	434b4 <fstat+0x44>
   434b0:	0005883a 	mov	r2,zero
   434b4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   434b8:	e0bffd17 	ldw	r2,-12(fp)
   434bc:	10001026 	beq	r2,zero,43500 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   434c0:	e0bffd17 	ldw	r2,-12(fp)
   434c4:	10800017 	ldw	r2,0(r2)
   434c8:	10800817 	ldw	r2,32(r2)
   434cc:	10000726 	beq	r2,zero,434ec <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   434d0:	e0bffd17 	ldw	r2,-12(fp)
   434d4:	10800017 	ldw	r2,0(r2)
   434d8:	10800817 	ldw	r2,32(r2)
   434dc:	e13ffd17 	ldw	r4,-12(fp)
   434e0:	e17fff17 	ldw	r5,-4(fp)
   434e4:	103ee83a 	callr	r2
   434e8:	00000a06 	br	43514 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   434ec:	e0bfff17 	ldw	r2,-4(fp)
   434f0:	00c80004 	movi	r3,8192
   434f4:	10c00115 	stw	r3,4(r2)
      return 0;
   434f8:	0005883a 	mov	r2,zero
   434fc:	00000506 	br	43514 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43500:	00434200 	call	43420 <alt_get_errno>
   43504:	1007883a 	mov	r3,r2
   43508:	00801444 	movi	r2,81
   4350c:	18800015 	stw	r2,0(r3)
    return -1;
   43510:	00bfffc4 	movi	r2,-1
  }
}
   43514:	e037883a 	mov	sp,fp
   43518:	dfc00117 	ldw	ra,4(sp)
   4351c:	df000017 	ldw	fp,0(sp)
   43520:	dec00204 	addi	sp,sp,8
   43524:	f800283a 	ret

00043528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43528:	defffe04 	addi	sp,sp,-8
   4352c:	dfc00115 	stw	ra,4(sp)
   43530:	df000015 	stw	fp,0(sp)
   43534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43538:	00800174 	movhi	r2,5
   4353c:	10a04f04 	addi	r2,r2,-32452
   43540:	10800017 	ldw	r2,0(r2)
   43544:	10000526 	beq	r2,zero,4355c <alt_get_errno+0x34>
   43548:	00800174 	movhi	r2,5
   4354c:	10a04f04 	addi	r2,r2,-32452
   43550:	10800017 	ldw	r2,0(r2)
   43554:	103ee83a 	callr	r2
   43558:	00000206 	br	43564 <alt_get_errno+0x3c>
   4355c:	00800174 	movhi	r2,5
   43560:	10a72304 	addi	r2,r2,-25460
}
   43564:	e037883a 	mov	sp,fp
   43568:	dfc00117 	ldw	ra,4(sp)
   4356c:	df000017 	ldw	fp,0(sp)
   43570:	dec00204 	addi	sp,sp,8
   43574:	f800283a 	ret

00043578 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   43578:	deffed04 	addi	sp,sp,-76
   4357c:	dfc01215 	stw	ra,72(sp)
   43580:	df001115 	stw	fp,68(sp)
   43584:	df001104 	addi	fp,sp,68
   43588:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4358c:	e0bfff17 	ldw	r2,-4(fp)
   43590:	10000816 	blt	r2,zero,435b4 <isatty+0x3c>
   43594:	e13fff17 	ldw	r4,-4(fp)
   43598:	01400304 	movi	r5,12
   4359c:	00405fc0 	call	405fc <__mulsi3>
   435a0:	1007883a 	mov	r3,r2
   435a4:	00800134 	movhi	r2,4
   435a8:	109b9d04 	addi	r2,r2,28276
   435ac:	1885883a 	add	r2,r3,r2
   435b0:	00000106 	br	435b8 <isatty+0x40>
   435b4:	0005883a 	mov	r2,zero
   435b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   435bc:	e0bfef17 	ldw	r2,-68(fp)
   435c0:	10000e26 	beq	r2,zero,435fc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   435c4:	e0bfef17 	ldw	r2,-68(fp)
   435c8:	10800017 	ldw	r2,0(r2)
   435cc:	10800817 	ldw	r2,32(r2)
   435d0:	1000021e 	bne	r2,zero,435dc <isatty+0x64>
    {
      return 1;
   435d4:	00800044 	movi	r2,1
   435d8:	00000d06 	br	43610 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   435dc:	e0bff004 	addi	r2,fp,-64
   435e0:	e13fff17 	ldw	r4,-4(fp)
   435e4:	100b883a 	mov	r5,r2
   435e8:	00434700 	call	43470 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   435ec:	e0bff117 	ldw	r2,-60(fp)
   435f0:	10880020 	cmpeqi	r2,r2,8192
   435f4:	10803fcc 	andi	r2,r2,255
   435f8:	00000506 	br	43610 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   435fc:	00435280 	call	43528 <alt_get_errno>
   43600:	1007883a 	mov	r3,r2
   43604:	00801444 	movi	r2,81
   43608:	18800015 	stw	r2,0(r3)
    return 0;
   4360c:	0005883a 	mov	r2,zero
  }
}
   43610:	e037883a 	mov	sp,fp
   43614:	dfc00117 	ldw	ra,4(sp)
   43618:	df000017 	ldw	fp,0(sp)
   4361c:	dec00204 	addi	sp,sp,8
   43620:	f800283a 	ret

00043624 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43624:	defffc04 	addi	sp,sp,-16
   43628:	df000315 	stw	fp,12(sp)
   4362c:	df000304 	addi	fp,sp,12
   43630:	e13ffd15 	stw	r4,-12(fp)
   43634:	e17ffe15 	stw	r5,-8(fp)
   43638:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4363c:	e0fffe17 	ldw	r3,-8(fp)
   43640:	e0bffd17 	ldw	r2,-12(fp)
   43644:	18800c26 	beq	r3,r2,43678 <alt_load_section+0x54>
  {
    while( to != end )
   43648:	00000806 	br	4366c <alt_load_section+0x48>
    {
      *to++ = *from++;
   4364c:	e0bffe17 	ldw	r2,-8(fp)
   43650:	10c00104 	addi	r3,r2,4
   43654:	e0fffe15 	stw	r3,-8(fp)
   43658:	e0fffd17 	ldw	r3,-12(fp)
   4365c:	19000104 	addi	r4,r3,4
   43660:	e13ffd15 	stw	r4,-12(fp)
   43664:	18c00017 	ldw	r3,0(r3)
   43668:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4366c:	e0fffe17 	ldw	r3,-8(fp)
   43670:	e0bfff17 	ldw	r2,-4(fp)
   43674:	18bff51e 	bne	r3,r2,4364c <__alt_data_end+0xfffcdaec>
    {
      *to++ = *from++;
    }
  }
}
   43678:	e037883a 	mov	sp,fp
   4367c:	df000017 	ldw	fp,0(sp)
   43680:	dec00104 	addi	sp,sp,4
   43684:	f800283a 	ret

00043688 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   43688:	defffe04 	addi	sp,sp,-8
   4368c:	dfc00115 	stw	ra,4(sp)
   43690:	df000015 	stw	fp,0(sp)
   43694:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43698:	01000174 	movhi	r4,5
   4369c:	21205404 	addi	r4,r4,-32432
   436a0:	01400134 	movhi	r5,4
   436a4:	29598804 	addi	r5,r5,26144
   436a8:	01800174 	movhi	r6,5
   436ac:	31a05404 	addi	r6,r6,-32432
   436b0:	00436240 	call	43624 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   436b4:	01000134 	movhi	r4,4
   436b8:	21000804 	addi	r4,r4,32
   436bc:	01400134 	movhi	r5,4
   436c0:	29400804 	addi	r5,r5,32
   436c4:	01800134 	movhi	r6,4
   436c8:	31808b04 	addi	r6,r6,556
   436cc:	00436240 	call	43624 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   436d0:	01000134 	movhi	r4,4
   436d4:	21197304 	addi	r4,r4,26060
   436d8:	01400134 	movhi	r5,4
   436dc:	29597304 	addi	r5,r5,26060
   436e0:	01800134 	movhi	r6,4
   436e4:	31998804 	addi	r6,r6,26144
   436e8:	00436240 	call	43624 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   436ec:	00454a80 	call	454a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   436f0:	00456700 	call	45670 <alt_icache_flush_all>
}
   436f4:	e037883a 	mov	sp,fp
   436f8:	dfc00117 	ldw	ra,4(sp)
   436fc:	df000017 	ldw	fp,0(sp)
   43700:	dec00204 	addi	sp,sp,8
   43704:	f800283a 	ret

00043708 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43708:	defffe04 	addi	sp,sp,-8
   4370c:	dfc00115 	stw	ra,4(sp)
   43710:	df000015 	stw	fp,0(sp)
   43714:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43718:	00800174 	movhi	r2,5
   4371c:	10a04f04 	addi	r2,r2,-32452
   43720:	10800017 	ldw	r2,0(r2)
   43724:	10000526 	beq	r2,zero,4373c <alt_get_errno+0x34>
   43728:	00800174 	movhi	r2,5
   4372c:	10a04f04 	addi	r2,r2,-32452
   43730:	10800017 	ldw	r2,0(r2)
   43734:	103ee83a 	callr	r2
   43738:	00000206 	br	43744 <alt_get_errno+0x3c>
   4373c:	00800174 	movhi	r2,5
   43740:	10a72304 	addi	r2,r2,-25460
}
   43744:	e037883a 	mov	sp,fp
   43748:	dfc00117 	ldw	ra,4(sp)
   4374c:	df000017 	ldw	fp,0(sp)
   43750:	dec00204 	addi	sp,sp,8
   43754:	f800283a 	ret

00043758 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   43758:	defff904 	addi	sp,sp,-28
   4375c:	dfc00615 	stw	ra,24(sp)
   43760:	df000515 	stw	fp,20(sp)
   43764:	df000504 	addi	fp,sp,20
   43768:	e13ffd15 	stw	r4,-12(fp)
   4376c:	e17ffe15 	stw	r5,-8(fp)
   43770:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   43774:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43778:	e0bffd17 	ldw	r2,-12(fp)
   4377c:	10000816 	blt	r2,zero,437a0 <lseek+0x48>
   43780:	e13ffd17 	ldw	r4,-12(fp)
   43784:	01400304 	movi	r5,12
   43788:	00405fc0 	call	405fc <__mulsi3>
   4378c:	1007883a 	mov	r3,r2
   43790:	00800134 	movhi	r2,4
   43794:	109b9d04 	addi	r2,r2,28276
   43798:	1885883a 	add	r2,r3,r2
   4379c:	00000106 	br	437a4 <lseek+0x4c>
   437a0:	0005883a 	mov	r2,zero
   437a4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   437a8:	e0bffc17 	ldw	r2,-16(fp)
   437ac:	10001026 	beq	r2,zero,437f0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   437b0:	e0bffc17 	ldw	r2,-16(fp)
   437b4:	10800017 	ldw	r2,0(r2)
   437b8:	10800717 	ldw	r2,28(r2)
   437bc:	10000926 	beq	r2,zero,437e4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   437c0:	e0bffc17 	ldw	r2,-16(fp)
   437c4:	10800017 	ldw	r2,0(r2)
   437c8:	10800717 	ldw	r2,28(r2)
   437cc:	e13ffc17 	ldw	r4,-16(fp)
   437d0:	e17ffe17 	ldw	r5,-8(fp)
   437d4:	e1bfff17 	ldw	r6,-4(fp)
   437d8:	103ee83a 	callr	r2
   437dc:	e0bffb15 	stw	r2,-20(fp)
   437e0:	00000506 	br	437f8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   437e4:	00bfde84 	movi	r2,-134
   437e8:	e0bffb15 	stw	r2,-20(fp)
   437ec:	00000206 	br	437f8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   437f0:	00bfebc4 	movi	r2,-81
   437f4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   437f8:	e0bffb17 	ldw	r2,-20(fp)
   437fc:	1000070e 	bge	r2,zero,4381c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   43800:	00437080 	call	43708 <alt_get_errno>
   43804:	1007883a 	mov	r3,r2
   43808:	e0bffb17 	ldw	r2,-20(fp)
   4380c:	0085c83a 	sub	r2,zero,r2
   43810:	18800015 	stw	r2,0(r3)
    rc = -1;
   43814:	00bfffc4 	movi	r2,-1
   43818:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4381c:	e0bffb17 	ldw	r2,-20(fp)
}
   43820:	e037883a 	mov	sp,fp
   43824:	dfc00117 	ldw	ra,4(sp)
   43828:	df000017 	ldw	fp,0(sp)
   4382c:	dec00204 	addi	sp,sp,8
   43830:	f800283a 	ret

00043834 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43834:	defffd04 	addi	sp,sp,-12
   43838:	dfc00215 	stw	ra,8(sp)
   4383c:	df000115 	stw	fp,4(sp)
   43840:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43844:	0009883a 	mov	r4,zero
   43848:	0043d280 	call	43d28 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4384c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   43850:	0043d5c0 	call	43d5c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   43854:	01000134 	movhi	r4,4
   43858:	21197d04 	addi	r4,r4,26100
   4385c:	01400134 	movhi	r5,4
   43860:	29597d04 	addi	r5,r5,26100
   43864:	01800134 	movhi	r6,4
   43868:	31997d04 	addi	r6,r6,26100
   4386c:	0045a3c0 	call	45a3c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   43870:	00455b80 	call	455b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   43874:	01000134 	movhi	r4,4
   43878:	21158504 	addi	r4,r4,22036
   4387c:	00462280 	call	46228 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43880:	d126de17 	ldw	r4,-25736(gp)
   43884:	d0e6df17 	ldw	r3,-25732(gp)
   43888:	d0a6e017 	ldw	r2,-25728(gp)
   4388c:	180b883a 	mov	r5,r3
   43890:	100d883a 	mov	r6,r2
   43894:	00402680 	call	40268 <main>
   43898:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4389c:	01000044 	movi	r4,1
   438a0:	004331c0 	call	4331c <close>
  exit (result);
   438a4:	e13fff17 	ldw	r4,-4(fp)
   438a8:	004623c0 	call	4623c <exit>

000438ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   438ac:	defffe04 	addi	sp,sp,-8
   438b0:	df000115 	stw	fp,4(sp)
   438b4:	df000104 	addi	fp,sp,4
   438b8:	e13fff15 	stw	r4,-4(fp)
}
   438bc:	e037883a 	mov	sp,fp
   438c0:	df000017 	ldw	fp,0(sp)
   438c4:	dec00104 	addi	sp,sp,4
   438c8:	f800283a 	ret

000438cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   438cc:	defffe04 	addi	sp,sp,-8
   438d0:	df000115 	stw	fp,4(sp)
   438d4:	df000104 	addi	fp,sp,4
   438d8:	e13fff15 	stw	r4,-4(fp)
}
   438dc:	e037883a 	mov	sp,fp
   438e0:	df000017 	ldw	fp,0(sp)
   438e4:	dec00104 	addi	sp,sp,4
   438e8:	f800283a 	ret

000438ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   438ec:	defffe04 	addi	sp,sp,-8
   438f0:	dfc00115 	stw	ra,4(sp)
   438f4:	df000015 	stw	fp,0(sp)
   438f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   438fc:	00800174 	movhi	r2,5
   43900:	10a04f04 	addi	r2,r2,-32452
   43904:	10800017 	ldw	r2,0(r2)
   43908:	10000526 	beq	r2,zero,43920 <alt_get_errno+0x34>
   4390c:	00800174 	movhi	r2,5
   43910:	10a04f04 	addi	r2,r2,-32452
   43914:	10800017 	ldw	r2,0(r2)
   43918:	103ee83a 	callr	r2
   4391c:	00000206 	br	43928 <alt_get_errno+0x3c>
   43920:	00800174 	movhi	r2,5
   43924:	10a72304 	addi	r2,r2,-25460
}
   43928:	e037883a 	mov	sp,fp
   4392c:	dfc00117 	ldw	ra,4(sp)
   43930:	df000017 	ldw	fp,0(sp)
   43934:	dec00204 	addi	sp,sp,8
   43938:	f800283a 	ret

0004393c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4393c:	defff904 	addi	sp,sp,-28
   43940:	dfc00615 	stw	ra,24(sp)
   43944:	df000515 	stw	fp,20(sp)
   43948:	df000504 	addi	fp,sp,20
   4394c:	e13ffd15 	stw	r4,-12(fp)
   43950:	e17ffe15 	stw	r5,-8(fp)
   43954:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43958:	e0bffd17 	ldw	r2,-12(fp)
   4395c:	10000816 	blt	r2,zero,43980 <read+0x44>
   43960:	e13ffd17 	ldw	r4,-12(fp)
   43964:	01400304 	movi	r5,12
   43968:	00405fc0 	call	405fc <__mulsi3>
   4396c:	1007883a 	mov	r3,r2
   43970:	00800134 	movhi	r2,4
   43974:	109b9d04 	addi	r2,r2,28276
   43978:	1885883a 	add	r2,r3,r2
   4397c:	00000106 	br	43984 <read+0x48>
   43980:	0005883a 	mov	r2,zero
   43984:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43988:	e0bffb17 	ldw	r2,-20(fp)
   4398c:	10002226 	beq	r2,zero,43a18 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43990:	e0bffb17 	ldw	r2,-20(fp)
   43994:	10800217 	ldw	r2,8(r2)
   43998:	108000cc 	andi	r2,r2,3
   4399c:	10800060 	cmpeqi	r2,r2,1
   439a0:	1000181e 	bne	r2,zero,43a04 <read+0xc8>
        (fd->dev->read))
   439a4:	e0bffb17 	ldw	r2,-20(fp)
   439a8:	10800017 	ldw	r2,0(r2)
   439ac:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   439b0:	10001426 	beq	r2,zero,43a04 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   439b4:	e0bffb17 	ldw	r2,-20(fp)
   439b8:	10800017 	ldw	r2,0(r2)
   439bc:	10800517 	ldw	r2,20(r2)
   439c0:	e0ffff17 	ldw	r3,-4(fp)
   439c4:	e13ffb17 	ldw	r4,-20(fp)
   439c8:	e17ffe17 	ldw	r5,-8(fp)
   439cc:	180d883a 	mov	r6,r3
   439d0:	103ee83a 	callr	r2
   439d4:	e0bffc15 	stw	r2,-16(fp)
   439d8:	e0bffc17 	ldw	r2,-16(fp)
   439dc:	1000070e 	bge	r2,zero,439fc <read+0xc0>
        {
          ALT_ERRNO = -rval;
   439e0:	00438ec0 	call	438ec <alt_get_errno>
   439e4:	1007883a 	mov	r3,r2
   439e8:	e0bffc17 	ldw	r2,-16(fp)
   439ec:	0085c83a 	sub	r2,zero,r2
   439f0:	18800015 	stw	r2,0(r3)
          return -1;
   439f4:	00bfffc4 	movi	r2,-1
   439f8:	00000c06 	br	43a2c <read+0xf0>
        }
        return rval;
   439fc:	e0bffc17 	ldw	r2,-16(fp)
   43a00:	00000a06 	br	43a2c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43a04:	00438ec0 	call	438ec <alt_get_errno>
   43a08:	1007883a 	mov	r3,r2
   43a0c:	00800344 	movi	r2,13
   43a10:	18800015 	stw	r2,0(r3)
   43a14:	00000406 	br	43a28 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43a18:	00438ec0 	call	438ec <alt_get_errno>
   43a1c:	1007883a 	mov	r3,r2
   43a20:	00801444 	movi	r2,81
   43a24:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43a28:	00bfffc4 	movi	r2,-1
}
   43a2c:	e037883a 	mov	sp,fp
   43a30:	dfc00117 	ldw	ra,4(sp)
   43a34:	df000017 	ldw	fp,0(sp)
   43a38:	dec00204 	addi	sp,sp,8
   43a3c:	f800283a 	ret

00043a40 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43a40:	defffc04 	addi	sp,sp,-16
   43a44:	dfc00315 	stw	ra,12(sp)
   43a48:	df000215 	stw	fp,8(sp)
   43a4c:	dc000115 	stw	r16,4(sp)
   43a50:	df000204 	addi	fp,sp,8
   43a54:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   43a58:	e0bffe17 	ldw	r2,-8(fp)
   43a5c:	108000d0 	cmplti	r2,r2,3
   43a60:	1000111e 	bne	r2,zero,43aa8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   43a64:	04000134 	movhi	r16,4
   43a68:	841b9d04 	addi	r16,r16,28276
   43a6c:	e0bffe17 	ldw	r2,-8(fp)
   43a70:	1009883a 	mov	r4,r2
   43a74:	01400304 	movi	r5,12
   43a78:	00405fc0 	call	405fc <__mulsi3>
   43a7c:	8085883a 	add	r2,r16,r2
   43a80:	10800204 	addi	r2,r2,8
   43a84:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43a88:	04000134 	movhi	r16,4
   43a8c:	841b9d04 	addi	r16,r16,28276
   43a90:	e0bffe17 	ldw	r2,-8(fp)
   43a94:	1009883a 	mov	r4,r2
   43a98:	01400304 	movi	r5,12
   43a9c:	00405fc0 	call	405fc <__mulsi3>
   43aa0:	8085883a 	add	r2,r16,r2
   43aa4:	10000015 	stw	zero,0(r2)
  }
}
   43aa8:	e6ffff04 	addi	sp,fp,-4
   43aac:	dfc00217 	ldw	ra,8(sp)
   43ab0:	df000117 	ldw	fp,4(sp)
   43ab4:	dc000017 	ldw	r16,0(sp)
   43ab8:	dec00304 	addi	sp,sp,12
   43abc:	f800283a 	ret

00043ac0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43ac0:	defff904 	addi	sp,sp,-28
   43ac4:	df000615 	stw	fp,24(sp)
   43ac8:	df000604 	addi	fp,sp,24
   43acc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43ad0:	0005303a 	rdctl	r2,status
   43ad4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43ad8:	e0fffc17 	ldw	r3,-16(fp)
   43adc:	00bfff84 	movi	r2,-2
   43ae0:	1884703a 	and	r2,r3,r2
   43ae4:	1001703a 	wrctl	status,r2
  
  return context;
   43ae8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43aec:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43af0:	d0a00a17 	ldw	r2,-32728(gp)
   43af4:	10c000c4 	addi	r3,r2,3
   43af8:	00bfff04 	movi	r2,-4
   43afc:	1884703a 	and	r2,r3,r2
   43b00:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43b04:	d0e00a17 	ldw	r3,-32728(gp)
   43b08:	e0bfff17 	ldw	r2,-4(fp)
   43b0c:	1887883a 	add	r3,r3,r2
   43b10:	008001f4 	movhi	r2,7
   43b14:	1096d804 	addi	r2,r2,23392
   43b18:	10c0062e 	bgeu	r2,r3,43b34 <sbrk+0x74>
   43b1c:	e0bffa17 	ldw	r2,-24(fp)
   43b20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43b24:	e0bffd17 	ldw	r2,-12(fp)
   43b28:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43b2c:	00bfffc4 	movi	r2,-1
   43b30:	00000b06 	br	43b60 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   43b34:	d0a00a17 	ldw	r2,-32728(gp)
   43b38:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   43b3c:	d0e00a17 	ldw	r3,-32728(gp)
   43b40:	e0bfff17 	ldw	r2,-4(fp)
   43b44:	1885883a 	add	r2,r3,r2
   43b48:	d0a00a15 	stw	r2,-32728(gp)
   43b4c:	e0bffa17 	ldw	r2,-24(fp)
   43b50:	e0bffe15 	stw	r2,-8(fp)
   43b54:	e0bffe17 	ldw	r2,-8(fp)
   43b58:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43b5c:	e0bffb17 	ldw	r2,-20(fp)
} 
   43b60:	e037883a 	mov	sp,fp
   43b64:	df000017 	ldw	fp,0(sp)
   43b68:	dec00104 	addi	sp,sp,4
   43b6c:	f800283a 	ret

00043b70 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   43b70:	defffd04 	addi	sp,sp,-12
   43b74:	dfc00215 	stw	ra,8(sp)
   43b78:	df000115 	stw	fp,4(sp)
   43b7c:	df000104 	addi	fp,sp,4
   43b80:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   43b84:	e13fff17 	ldw	r4,-4(fp)
   43b88:	00453500 	call	45350 <alt_busy_sleep>
}
   43b8c:	e037883a 	mov	sp,fp
   43b90:	dfc00117 	ldw	ra,4(sp)
   43b94:	df000017 	ldw	fp,0(sp)
   43b98:	dec00204 	addi	sp,sp,8
   43b9c:	f800283a 	ret

00043ba0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43ba0:	defffe04 	addi	sp,sp,-8
   43ba4:	dfc00115 	stw	ra,4(sp)
   43ba8:	df000015 	stw	fp,0(sp)
   43bac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43bb0:	00800174 	movhi	r2,5
   43bb4:	10a04f04 	addi	r2,r2,-32452
   43bb8:	10800017 	ldw	r2,0(r2)
   43bbc:	10000526 	beq	r2,zero,43bd4 <alt_get_errno+0x34>
   43bc0:	00800174 	movhi	r2,5
   43bc4:	10a04f04 	addi	r2,r2,-32452
   43bc8:	10800017 	ldw	r2,0(r2)
   43bcc:	103ee83a 	callr	r2
   43bd0:	00000206 	br	43bdc <alt_get_errno+0x3c>
   43bd4:	00800174 	movhi	r2,5
   43bd8:	10a72304 	addi	r2,r2,-25460
}
   43bdc:	e037883a 	mov	sp,fp
   43be0:	dfc00117 	ldw	ra,4(sp)
   43be4:	df000017 	ldw	fp,0(sp)
   43be8:	dec00204 	addi	sp,sp,8
   43bec:	f800283a 	ret

00043bf0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43bf0:	defff904 	addi	sp,sp,-28
   43bf4:	dfc00615 	stw	ra,24(sp)
   43bf8:	df000515 	stw	fp,20(sp)
   43bfc:	df000504 	addi	fp,sp,20
   43c00:	e13ffd15 	stw	r4,-12(fp)
   43c04:	e17ffe15 	stw	r5,-8(fp)
   43c08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43c0c:	e0bffd17 	ldw	r2,-12(fp)
   43c10:	10000816 	blt	r2,zero,43c34 <write+0x44>
   43c14:	e13ffd17 	ldw	r4,-12(fp)
   43c18:	01400304 	movi	r5,12
   43c1c:	00405fc0 	call	405fc <__mulsi3>
   43c20:	1007883a 	mov	r3,r2
   43c24:	00800134 	movhi	r2,4
   43c28:	109b9d04 	addi	r2,r2,28276
   43c2c:	1885883a 	add	r2,r3,r2
   43c30:	00000106 	br	43c38 <write+0x48>
   43c34:	0005883a 	mov	r2,zero
   43c38:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43c3c:	e0bffb17 	ldw	r2,-20(fp)
   43c40:	10002126 	beq	r2,zero,43cc8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43c44:	e0bffb17 	ldw	r2,-20(fp)
   43c48:	10800217 	ldw	r2,8(r2)
   43c4c:	108000cc 	andi	r2,r2,3
   43c50:	10001826 	beq	r2,zero,43cb4 <write+0xc4>
   43c54:	e0bffb17 	ldw	r2,-20(fp)
   43c58:	10800017 	ldw	r2,0(r2)
   43c5c:	10800617 	ldw	r2,24(r2)
   43c60:	10001426 	beq	r2,zero,43cb4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43c64:	e0bffb17 	ldw	r2,-20(fp)
   43c68:	10800017 	ldw	r2,0(r2)
   43c6c:	10800617 	ldw	r2,24(r2)
   43c70:	e0ffff17 	ldw	r3,-4(fp)
   43c74:	e13ffb17 	ldw	r4,-20(fp)
   43c78:	e17ffe17 	ldw	r5,-8(fp)
   43c7c:	180d883a 	mov	r6,r3
   43c80:	103ee83a 	callr	r2
   43c84:	e0bffc15 	stw	r2,-16(fp)
   43c88:	e0bffc17 	ldw	r2,-16(fp)
   43c8c:	1000070e 	bge	r2,zero,43cac <write+0xbc>
      {
        ALT_ERRNO = -rval;
   43c90:	0043ba00 	call	43ba0 <alt_get_errno>
   43c94:	1007883a 	mov	r3,r2
   43c98:	e0bffc17 	ldw	r2,-16(fp)
   43c9c:	0085c83a 	sub	r2,zero,r2
   43ca0:	18800015 	stw	r2,0(r3)
        return -1;
   43ca4:	00bfffc4 	movi	r2,-1
   43ca8:	00000c06 	br	43cdc <write+0xec>
      }
      return rval;
   43cac:	e0bffc17 	ldw	r2,-16(fp)
   43cb0:	00000a06 	br	43cdc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43cb4:	0043ba00 	call	43ba0 <alt_get_errno>
   43cb8:	1007883a 	mov	r3,r2
   43cbc:	00800344 	movi	r2,13
   43cc0:	18800015 	stw	r2,0(r3)
   43cc4:	00000406 	br	43cd8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43cc8:	0043ba00 	call	43ba0 <alt_get_errno>
   43ccc:	1007883a 	mov	r3,r2
   43cd0:	00801444 	movi	r2,81
   43cd4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43cd8:	00bfffc4 	movi	r2,-1
}
   43cdc:	e037883a 	mov	sp,fp
   43ce0:	dfc00117 	ldw	ra,4(sp)
   43ce4:	df000017 	ldw	fp,0(sp)
   43ce8:	dec00204 	addi	sp,sp,8
   43cec:	f800283a 	ret

00043cf0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43cf0:	defffd04 	addi	sp,sp,-12
   43cf4:	dfc00215 	stw	ra,8(sp)
   43cf8:	df000115 	stw	fp,4(sp)
   43cfc:	df000104 	addi	fp,sp,4
   43d00:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43d04:	e13fff17 	ldw	r4,-4(fp)
   43d08:	01400174 	movhi	r5,5
   43d0c:	29604c04 	addi	r5,r5,-32464
   43d10:	00455140 	call	45514 <alt_dev_llist_insert>
}
   43d14:	e037883a 	mov	sp,fp
   43d18:	dfc00117 	ldw	ra,4(sp)
   43d1c:	df000017 	ldw	fp,0(sp)
   43d20:	dec00204 	addi	sp,sp,8
   43d24:	f800283a 	ret

00043d28 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43d28:	defffd04 	addi	sp,sp,-12
   43d2c:	dfc00215 	stw	ra,8(sp)
   43d30:	df000115 	stw	fp,4(sp)
   43d34:	df000104 	addi	fp,sp,4
   43d38:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   43d3c:	0045ef40 	call	45ef4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43d40:	00800044 	movi	r2,1
   43d44:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43d48:	e037883a 	mov	sp,fp
   43d4c:	dfc00117 	ldw	ra,4(sp)
   43d50:	df000017 	ldw	fp,0(sp)
   43d54:	dec00204 	addi	sp,sp,8
   43d58:	f800283a 	ret

00043d5c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43d5c:	defffe04 	addi	sp,sp,-8
   43d60:	dfc00115 	stw	ra,4(sp)
   43d64:	df000015 	stw	fp,0(sp)
   43d68:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK, sys_clk);
   43d6c:	01000234 	movhi	r4,8
   43d70:	21040004 	addi	r4,r4,4096
   43d74:	000b883a 	mov	r5,zero
   43d78:	01800044 	movi	r6,1
   43d7c:	01c0fa04 	movi	r7,1000
   43d80:	00448980 	call	44898 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   43d84:	01000134 	movhi	r4,4
   43d88:	211c0704 	addi	r4,r4,28700
   43d8c:	000b883a 	mov	r5,zero
   43d90:	01800084 	movi	r6,2
   43d94:	0043f3c0 	call	43f3c <altera_avalon_jtag_uart_init>
   43d98:	01000134 	movhi	r4,4
   43d9c:	211bfd04 	addi	r4,r4,28660
   43da0:	0043cf00 	call	43cf0 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
   43da4:	01000174 	movhi	r4,5
   43da8:	21201f04 	addi	r4,r4,-32644
   43dac:	000b883a 	mov	r5,zero
   43db0:	000d883a 	mov	r6,zero
   43db4:	0044a300 	call	44a30 <altera_avalon_uart_init>
   43db8:	01000174 	movhi	r4,5
   43dbc:	21201504 	addi	r4,r4,-32684
   43dc0:	0043cf00 	call	43cf0 <alt_dev_reg>
}
   43dc4:	e037883a 	mov	sp,fp
   43dc8:	dfc00117 	ldw	ra,4(sp)
   43dcc:	df000017 	ldw	fp,0(sp)
   43dd0:	dec00204 	addi	sp,sp,8
   43dd4:	f800283a 	ret

00043dd8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43dd8:	defffa04 	addi	sp,sp,-24
   43ddc:	dfc00515 	stw	ra,20(sp)
   43de0:	df000415 	stw	fp,16(sp)
   43de4:	df000404 	addi	fp,sp,16
   43de8:	e13ffd15 	stw	r4,-12(fp)
   43dec:	e17ffe15 	stw	r5,-8(fp)
   43df0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43df4:	e0bffd17 	ldw	r2,-12(fp)
   43df8:	10800017 	ldw	r2,0(r2)
   43dfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43e00:	e0bffc17 	ldw	r2,-16(fp)
   43e04:	10c00a04 	addi	r3,r2,40
   43e08:	e0bffd17 	ldw	r2,-12(fp)
   43e0c:	10800217 	ldw	r2,8(r2)
   43e10:	1809883a 	mov	r4,r3
   43e14:	e17ffe17 	ldw	r5,-8(fp)
   43e18:	e1bfff17 	ldw	r6,-4(fp)
   43e1c:	100f883a 	mov	r7,r2
   43e20:	00444000 	call	44400 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   43e24:	e037883a 	mov	sp,fp
   43e28:	dfc00117 	ldw	ra,4(sp)
   43e2c:	df000017 	ldw	fp,0(sp)
   43e30:	dec00204 	addi	sp,sp,8
   43e34:	f800283a 	ret

00043e38 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43e38:	defffa04 	addi	sp,sp,-24
   43e3c:	dfc00515 	stw	ra,20(sp)
   43e40:	df000415 	stw	fp,16(sp)
   43e44:	df000404 	addi	fp,sp,16
   43e48:	e13ffd15 	stw	r4,-12(fp)
   43e4c:	e17ffe15 	stw	r5,-8(fp)
   43e50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43e54:	e0bffd17 	ldw	r2,-12(fp)
   43e58:	10800017 	ldw	r2,0(r2)
   43e5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43e60:	e0bffc17 	ldw	r2,-16(fp)
   43e64:	10c00a04 	addi	r3,r2,40
   43e68:	e0bffd17 	ldw	r2,-12(fp)
   43e6c:	10800217 	ldw	r2,8(r2)
   43e70:	1809883a 	mov	r4,r3
   43e74:	e17ffe17 	ldw	r5,-8(fp)
   43e78:	e1bfff17 	ldw	r6,-4(fp)
   43e7c:	100f883a 	mov	r7,r2
   43e80:	004460c0 	call	4460c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43e84:	e037883a 	mov	sp,fp
   43e88:	dfc00117 	ldw	ra,4(sp)
   43e8c:	df000017 	ldw	fp,0(sp)
   43e90:	dec00204 	addi	sp,sp,8
   43e94:	f800283a 	ret

00043e98 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   43e98:	defffc04 	addi	sp,sp,-16
   43e9c:	dfc00315 	stw	ra,12(sp)
   43ea0:	df000215 	stw	fp,8(sp)
   43ea4:	df000204 	addi	fp,sp,8
   43ea8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43eac:	e0bfff17 	ldw	r2,-4(fp)
   43eb0:	10800017 	ldw	r2,0(r2)
   43eb4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   43eb8:	e0bffe17 	ldw	r2,-8(fp)
   43ebc:	10c00a04 	addi	r3,r2,40
   43ec0:	e0bfff17 	ldw	r2,-4(fp)
   43ec4:	10800217 	ldw	r2,8(r2)
   43ec8:	1809883a 	mov	r4,r3
   43ecc:	100b883a 	mov	r5,r2
   43ed0:	00442ac0 	call	442ac <altera_avalon_jtag_uart_close>
}
   43ed4:	e037883a 	mov	sp,fp
   43ed8:	dfc00117 	ldw	ra,4(sp)
   43edc:	df000017 	ldw	fp,0(sp)
   43ee0:	dec00204 	addi	sp,sp,8
   43ee4:	f800283a 	ret

00043ee8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   43ee8:	defffa04 	addi	sp,sp,-24
   43eec:	dfc00515 	stw	ra,20(sp)
   43ef0:	df000415 	stw	fp,16(sp)
   43ef4:	df000404 	addi	fp,sp,16
   43ef8:	e13ffd15 	stw	r4,-12(fp)
   43efc:	e17ffe15 	stw	r5,-8(fp)
   43f00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   43f04:	e0bffd17 	ldw	r2,-12(fp)
   43f08:	10800017 	ldw	r2,0(r2)
   43f0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   43f10:	e0bffc17 	ldw	r2,-16(fp)
   43f14:	10800a04 	addi	r2,r2,40
   43f18:	1009883a 	mov	r4,r2
   43f1c:	e17ffe17 	ldw	r5,-8(fp)
   43f20:	e1bfff17 	ldw	r6,-4(fp)
   43f24:	00443140 	call	44314 <altera_avalon_jtag_uart_ioctl>
}
   43f28:	e037883a 	mov	sp,fp
   43f2c:	dfc00117 	ldw	ra,4(sp)
   43f30:	df000017 	ldw	fp,0(sp)
   43f34:	dec00204 	addi	sp,sp,8
   43f38:	f800283a 	ret

00043f3c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   43f3c:	defffa04 	addi	sp,sp,-24
   43f40:	dfc00515 	stw	ra,20(sp)
   43f44:	df000415 	stw	fp,16(sp)
   43f48:	df000404 	addi	fp,sp,16
   43f4c:	e13ffd15 	stw	r4,-12(fp)
   43f50:	e17ffe15 	stw	r5,-8(fp)
   43f54:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43f58:	e0bffd17 	ldw	r2,-12(fp)
   43f5c:	00c00044 	movi	r3,1
   43f60:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   43f64:	e0bffd17 	ldw	r2,-12(fp)
   43f68:	10800017 	ldw	r2,0(r2)
   43f6c:	10800104 	addi	r2,r2,4
   43f70:	1007883a 	mov	r3,r2
   43f74:	e0bffd17 	ldw	r2,-12(fp)
   43f78:	10800817 	ldw	r2,32(r2)
   43f7c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   43f80:	e0fffe17 	ldw	r3,-8(fp)
   43f84:	e0bfff17 	ldw	r2,-4(fp)
   43f88:	d8000015 	stw	zero,0(sp)
   43f8c:	1809883a 	mov	r4,r3
   43f90:	100b883a 	mov	r5,r2
   43f94:	01800134 	movhi	r6,4
   43f98:	31900004 	addi	r6,r6,16384
   43f9c:	e1fffd17 	ldw	r7,-12(fp)
   43fa0:	004568c0 	call	4568c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   43fa4:	e0bffd17 	ldw	r2,-12(fp)
   43fa8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   43fac:	e0bffd17 	ldw	r2,-12(fp)
   43fb0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   43fb4:	00800174 	movhi	r2,5
   43fb8:	10a72804 	addi	r2,r2,-25440
   43fbc:	10800017 	ldw	r2,0(r2)
   43fc0:	1809883a 	mov	r4,r3
   43fc4:	100b883a 	mov	r5,r2
   43fc8:	01800134 	movhi	r6,4
   43fcc:	31908104 	addi	r6,r6,16900
   43fd0:	e1fffd17 	ldw	r7,-12(fp)
   43fd4:	00452100 	call	45210 <alt_alarm_start>
   43fd8:	1000040e 	bge	r2,zero,43fec <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   43fdc:	e0fffd17 	ldw	r3,-12(fp)
   43fe0:	00a00034 	movhi	r2,32768
   43fe4:	10bfffc4 	addi	r2,r2,-1
   43fe8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43fec:	e037883a 	mov	sp,fp
   43ff0:	dfc00117 	ldw	ra,4(sp)
   43ff4:	df000017 	ldw	fp,0(sp)
   43ff8:	dec00204 	addi	sp,sp,8
   43ffc:	f800283a 	ret

00044000 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   44000:	defff804 	addi	sp,sp,-32
   44004:	df000715 	stw	fp,28(sp)
   44008:	df000704 	addi	fp,sp,28
   4400c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   44010:	e0bfff17 	ldw	r2,-4(fp)
   44014:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   44018:	e0bffb17 	ldw	r2,-20(fp)
   4401c:	10800017 	ldw	r2,0(r2)
   44020:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44024:	e0bffc17 	ldw	r2,-16(fp)
   44028:	10800104 	addi	r2,r2,4
   4402c:	10800037 	ldwio	r2,0(r2)
   44030:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   44034:	e0bffd17 	ldw	r2,-12(fp)
   44038:	1080c00c 	andi	r2,r2,768
   4403c:	1000011e 	bne	r2,zero,44044 <altera_avalon_jtag_uart_irq+0x44>
      break;
   44040:	00006c06 	br	441f4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   44044:	e0bffd17 	ldw	r2,-12(fp)
   44048:	1080400c 	andi	r2,r2,256
   4404c:	10003426 	beq	r2,zero,44120 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   44050:	00800074 	movhi	r2,1
   44054:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44058:	e0bffb17 	ldw	r2,-20(fp)
   4405c:	10800a17 	ldw	r2,40(r2)
   44060:	10800044 	addi	r2,r2,1
   44064:	1081ffcc 	andi	r2,r2,2047
   44068:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4406c:	e0bffb17 	ldw	r2,-20(fp)
   44070:	10c00b17 	ldw	r3,44(r2)
   44074:	e0bffe17 	ldw	r2,-8(fp)
   44078:	1880011e 	bne	r3,r2,44080 <altera_avalon_jtag_uart_irq+0x80>
          break;
   4407c:	00001606 	br	440d8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   44080:	e0bffc17 	ldw	r2,-16(fp)
   44084:	10800037 	ldwio	r2,0(r2)
   44088:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4408c:	e0bff917 	ldw	r2,-28(fp)
   44090:	10a0000c 	andi	r2,r2,32768
   44094:	1000011e 	bne	r2,zero,4409c <altera_avalon_jtag_uart_irq+0x9c>
          break;
   44098:	00000f06 	br	440d8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4409c:	e0bffb17 	ldw	r2,-20(fp)
   440a0:	10800a17 	ldw	r2,40(r2)
   440a4:	e0fff917 	ldw	r3,-28(fp)
   440a8:	1809883a 	mov	r4,r3
   440ac:	e0fffb17 	ldw	r3,-20(fp)
   440b0:	1885883a 	add	r2,r3,r2
   440b4:	10800e04 	addi	r2,r2,56
   440b8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   440bc:	e0bffb17 	ldw	r2,-20(fp)
   440c0:	10800a17 	ldw	r2,40(r2)
   440c4:	10800044 	addi	r2,r2,1
   440c8:	10c1ffcc 	andi	r3,r2,2047
   440cc:	e0bffb17 	ldw	r2,-20(fp)
   440d0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   440d4:	003fe006 	br	44058 <__alt_data_end+0xfffce4f8>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   440d8:	e0bff917 	ldw	r2,-28(fp)
   440dc:	10bfffec 	andhi	r2,r2,65535
   440e0:	10000f26 	beq	r2,zero,44120 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   440e4:	e0bffb17 	ldw	r2,-20(fp)
   440e8:	10c00817 	ldw	r3,32(r2)
   440ec:	00bfff84 	movi	r2,-2
   440f0:	1886703a 	and	r3,r3,r2
   440f4:	e0bffb17 	ldw	r2,-20(fp)
   440f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   440fc:	e0bffc17 	ldw	r2,-16(fp)
   44100:	10800104 	addi	r2,r2,4
   44104:	1007883a 	mov	r3,r2
   44108:	e0bffb17 	ldw	r2,-20(fp)
   4410c:	10800817 	ldw	r2,32(r2)
   44110:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44114:	e0bffc17 	ldw	r2,-16(fp)
   44118:	10800104 	addi	r2,r2,4
   4411c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   44120:	e0bffd17 	ldw	r2,-12(fp)
   44124:	1080800c 	andi	r2,r2,512
   44128:	10003126 	beq	r2,zero,441f0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4412c:	e0bffd17 	ldw	r2,-12(fp)
   44130:	1004d43a 	srli	r2,r2,16
   44134:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   44138:	00001406 	br	4418c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4413c:	e0bffc17 	ldw	r2,-16(fp)
   44140:	e0fffb17 	ldw	r3,-20(fp)
   44144:	18c00d17 	ldw	r3,52(r3)
   44148:	e13ffb17 	ldw	r4,-20(fp)
   4414c:	20c7883a 	add	r3,r4,r3
   44150:	18c20e04 	addi	r3,r3,2104
   44154:	18c00003 	ldbu	r3,0(r3)
   44158:	18c03fcc 	andi	r3,r3,255
   4415c:	18c0201c 	xori	r3,r3,128
   44160:	18ffe004 	addi	r3,r3,-128
   44164:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44168:	e0bffb17 	ldw	r2,-20(fp)
   4416c:	10800d17 	ldw	r2,52(r2)
   44170:	10800044 	addi	r2,r2,1
   44174:	10c1ffcc 	andi	r3,r2,2047
   44178:	e0bffb17 	ldw	r2,-20(fp)
   4417c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   44180:	e0bffa17 	ldw	r2,-24(fp)
   44184:	10bfffc4 	addi	r2,r2,-1
   44188:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4418c:	e0bffa17 	ldw	r2,-24(fp)
   44190:	10000526 	beq	r2,zero,441a8 <altera_avalon_jtag_uart_irq+0x1a8>
   44194:	e0bffb17 	ldw	r2,-20(fp)
   44198:	10c00d17 	ldw	r3,52(r2)
   4419c:	e0bffb17 	ldw	r2,-20(fp)
   441a0:	10800c17 	ldw	r2,48(r2)
   441a4:	18bfe51e 	bne	r3,r2,4413c <__alt_data_end+0xfffce5dc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   441a8:	e0bffa17 	ldw	r2,-24(fp)
   441ac:	10001026 	beq	r2,zero,441f0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   441b0:	e0bffb17 	ldw	r2,-20(fp)
   441b4:	10c00817 	ldw	r3,32(r2)
   441b8:	00bfff44 	movi	r2,-3
   441bc:	1886703a 	and	r3,r3,r2
   441c0:	e0bffb17 	ldw	r2,-20(fp)
   441c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   441c8:	e0bffb17 	ldw	r2,-20(fp)
   441cc:	10800017 	ldw	r2,0(r2)
   441d0:	10800104 	addi	r2,r2,4
   441d4:	1007883a 	mov	r3,r2
   441d8:	e0bffb17 	ldw	r2,-20(fp)
   441dc:	10800817 	ldw	r2,32(r2)
   441e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   441e4:	e0bffc17 	ldw	r2,-16(fp)
   441e8:	10800104 	addi	r2,r2,4
   441ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   441f0:	003f8c06 	br	44024 <__alt_data_end+0xfffce4c4>
}
   441f4:	e037883a 	mov	sp,fp
   441f8:	df000017 	ldw	fp,0(sp)
   441fc:	dec00104 	addi	sp,sp,4
   44200:	f800283a 	ret

00044204 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   44204:	defff804 	addi	sp,sp,-32
   44208:	df000715 	stw	fp,28(sp)
   4420c:	df000704 	addi	fp,sp,28
   44210:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   44214:	e0bffb17 	ldw	r2,-20(fp)
   44218:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4421c:	e0bff917 	ldw	r2,-28(fp)
   44220:	10800017 	ldw	r2,0(r2)
   44224:	10800104 	addi	r2,r2,4
   44228:	10800037 	ldwio	r2,0(r2)
   4422c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   44230:	e0bffa17 	ldw	r2,-24(fp)
   44234:	1081000c 	andi	r2,r2,1024
   44238:	10000b26 	beq	r2,zero,44268 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4423c:	e0bff917 	ldw	r2,-28(fp)
   44240:	10800017 	ldw	r2,0(r2)
   44244:	10800104 	addi	r2,r2,4
   44248:	1007883a 	mov	r3,r2
   4424c:	e0bff917 	ldw	r2,-28(fp)
   44250:	10800817 	ldw	r2,32(r2)
   44254:	10810014 	ori	r2,r2,1024
   44258:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4425c:	e0bff917 	ldw	r2,-28(fp)
   44260:	10000915 	stw	zero,36(r2)
   44264:	00000a06 	br	44290 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   44268:	e0bff917 	ldw	r2,-28(fp)
   4426c:	10c00917 	ldw	r3,36(r2)
   44270:	00a00034 	movhi	r2,32768
   44274:	10bfff04 	addi	r2,r2,-4
   44278:	10c00536 	bltu	r2,r3,44290 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   4427c:	e0bff917 	ldw	r2,-28(fp)
   44280:	10800917 	ldw	r2,36(r2)
   44284:	10c00044 	addi	r3,r2,1
   44288:	e0bff917 	ldw	r2,-28(fp)
   4428c:	10c00915 	stw	r3,36(r2)
   44290:	00800174 	movhi	r2,5
   44294:	10a72804 	addi	r2,r2,-25440
   44298:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4429c:	e037883a 	mov	sp,fp
   442a0:	df000017 	ldw	fp,0(sp)
   442a4:	dec00104 	addi	sp,sp,4
   442a8:	f800283a 	ret

000442ac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   442ac:	defffd04 	addi	sp,sp,-12
   442b0:	df000215 	stw	fp,8(sp)
   442b4:	df000204 	addi	fp,sp,8
   442b8:	e13ffe15 	stw	r4,-8(fp)
   442bc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   442c0:	00000506 	br	442d8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   442c4:	e0bfff17 	ldw	r2,-4(fp)
   442c8:	1090000c 	andi	r2,r2,16384
   442cc:	10000226 	beq	r2,zero,442d8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   442d0:	00bffd44 	movi	r2,-11
   442d4:	00000b06 	br	44304 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   442d8:	e0bffe17 	ldw	r2,-8(fp)
   442dc:	10c00d17 	ldw	r3,52(r2)
   442e0:	e0bffe17 	ldw	r2,-8(fp)
   442e4:	10800c17 	ldw	r2,48(r2)
   442e8:	18800526 	beq	r3,r2,44300 <altera_avalon_jtag_uart_close+0x54>
   442ec:	e0bffe17 	ldw	r2,-8(fp)
   442f0:	10c00917 	ldw	r3,36(r2)
   442f4:	e0bffe17 	ldw	r2,-8(fp)
   442f8:	10800117 	ldw	r2,4(r2)
   442fc:	18bff136 	bltu	r3,r2,442c4 <__alt_data_end+0xfffce764>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44300:	0005883a 	mov	r2,zero
}
   44304:	e037883a 	mov	sp,fp
   44308:	df000017 	ldw	fp,0(sp)
   4430c:	dec00104 	addi	sp,sp,4
   44310:	f800283a 	ret

00044314 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   44314:	defffa04 	addi	sp,sp,-24
   44318:	df000515 	stw	fp,20(sp)
   4431c:	df000504 	addi	fp,sp,20
   44320:	e13ffd15 	stw	r4,-12(fp)
   44324:	e17ffe15 	stw	r5,-8(fp)
   44328:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4432c:	00bff9c4 	movi	r2,-25
   44330:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   44334:	e0bffe17 	ldw	r2,-8(fp)
   44338:	10da8060 	cmpeqi	r3,r2,27137
   4433c:	1800031e 	bne	r3,zero,4434c <altera_avalon_jtag_uart_ioctl+0x38>
   44340:	109a80a0 	cmpeqi	r2,r2,27138
   44344:	1000191e 	bne	r2,zero,443ac <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   44348:	00002806 	br	443ec <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4434c:	e0bffd17 	ldw	r2,-12(fp)
   44350:	10c00117 	ldw	r3,4(r2)
   44354:	00a00034 	movhi	r2,32768
   44358:	10bfffc4 	addi	r2,r2,-1
   4435c:	18801226 	beq	r3,r2,443a8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   44360:	e0bfff17 	ldw	r2,-4(fp)
   44364:	10800017 	ldw	r2,0(r2)
   44368:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4436c:	e0bffc17 	ldw	r2,-16(fp)
   44370:	10800090 	cmplti	r2,r2,2
   44374:	1000061e 	bne	r2,zero,44390 <altera_avalon_jtag_uart_ioctl+0x7c>
   44378:	e0fffc17 	ldw	r3,-16(fp)
   4437c:	00a00034 	movhi	r2,32768
   44380:	10bfffc4 	addi	r2,r2,-1
   44384:	18800226 	beq	r3,r2,44390 <altera_avalon_jtag_uart_ioctl+0x7c>
   44388:	e0bffc17 	ldw	r2,-16(fp)
   4438c:	00000206 	br	44398 <altera_avalon_jtag_uart_ioctl+0x84>
   44390:	00a00034 	movhi	r2,32768
   44394:	10bfff84 	addi	r2,r2,-2
   44398:	e0fffd17 	ldw	r3,-12(fp)
   4439c:	18800115 	stw	r2,4(r3)
      rc = 0;
   443a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   443a4:	00001106 	br	443ec <altera_avalon_jtag_uart_ioctl+0xd8>
   443a8:	00001006 	br	443ec <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   443ac:	e0bffd17 	ldw	r2,-12(fp)
   443b0:	10c00117 	ldw	r3,4(r2)
   443b4:	00a00034 	movhi	r2,32768
   443b8:	10bfffc4 	addi	r2,r2,-1
   443bc:	18800a26 	beq	r3,r2,443e8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   443c0:	e0bffd17 	ldw	r2,-12(fp)
   443c4:	10c00917 	ldw	r3,36(r2)
   443c8:	e0bffd17 	ldw	r2,-12(fp)
   443cc:	10800117 	ldw	r2,4(r2)
   443d0:	1885803a 	cmpltu	r2,r3,r2
   443d4:	10c03fcc 	andi	r3,r2,255
   443d8:	e0bfff17 	ldw	r2,-4(fp)
   443dc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   443e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   443e4:	00000006 	br	443e8 <altera_avalon_jtag_uart_ioctl+0xd4>
   443e8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   443ec:	e0bffb17 	ldw	r2,-20(fp)
}
   443f0:	e037883a 	mov	sp,fp
   443f4:	df000017 	ldw	fp,0(sp)
   443f8:	dec00104 	addi	sp,sp,4
   443fc:	f800283a 	ret

00044400 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   44400:	defff304 	addi	sp,sp,-52
   44404:	dfc00c15 	stw	ra,48(sp)
   44408:	df000b15 	stw	fp,44(sp)
   4440c:	df000b04 	addi	fp,sp,44
   44410:	e13ffc15 	stw	r4,-16(fp)
   44414:	e17ffd15 	stw	r5,-12(fp)
   44418:	e1bffe15 	stw	r6,-8(fp)
   4441c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   44420:	e0bffd17 	ldw	r2,-12(fp)
   44424:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44428:	00004906 	br	44550 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4442c:	e0bffc17 	ldw	r2,-16(fp)
   44430:	10800a17 	ldw	r2,40(r2)
   44434:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   44438:	e0bffc17 	ldw	r2,-16(fp)
   4443c:	10800b17 	ldw	r2,44(r2)
   44440:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   44444:	e0fff717 	ldw	r3,-36(fp)
   44448:	e0bff817 	ldw	r2,-32(fp)
   4444c:	18800536 	bltu	r3,r2,44464 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   44450:	e0fff717 	ldw	r3,-36(fp)
   44454:	e0bff817 	ldw	r2,-32(fp)
   44458:	1885c83a 	sub	r2,r3,r2
   4445c:	e0bff615 	stw	r2,-40(fp)
   44460:	00000406 	br	44474 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   44464:	00c20004 	movi	r3,2048
   44468:	e0bff817 	ldw	r2,-32(fp)
   4446c:	1885c83a 	sub	r2,r3,r2
   44470:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   44474:	e0bff617 	ldw	r2,-40(fp)
   44478:	1000011e 	bne	r2,zero,44480 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   4447c:	00001d06 	br	444f4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   44480:	e0fffe17 	ldw	r3,-8(fp)
   44484:	e0bff617 	ldw	r2,-40(fp)
   44488:	1880022e 	bgeu	r3,r2,44494 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4448c:	e0bffe17 	ldw	r2,-8(fp)
   44490:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   44494:	e0bff817 	ldw	r2,-32(fp)
   44498:	10800e04 	addi	r2,r2,56
   4449c:	e0fffc17 	ldw	r3,-16(fp)
   444a0:	1885883a 	add	r2,r3,r2
   444a4:	e13ff517 	ldw	r4,-44(fp)
   444a8:	100b883a 	mov	r5,r2
   444ac:	e1bff617 	ldw	r6,-40(fp)
   444b0:	00415380 	call	41538 <memcpy>
      ptr   += n;
   444b4:	e0fff517 	ldw	r3,-44(fp)
   444b8:	e0bff617 	ldw	r2,-40(fp)
   444bc:	1885883a 	add	r2,r3,r2
   444c0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   444c4:	e0fffe17 	ldw	r3,-8(fp)
   444c8:	e0bff617 	ldw	r2,-40(fp)
   444cc:	1885c83a 	sub	r2,r3,r2
   444d0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   444d4:	e0fff817 	ldw	r3,-32(fp)
   444d8:	e0bff617 	ldw	r2,-40(fp)
   444dc:	1885883a 	add	r2,r3,r2
   444e0:	10c1ffcc 	andi	r3,r2,2047
   444e4:	e0bffc17 	ldw	r2,-16(fp)
   444e8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   444ec:	e0bffe17 	ldw	r2,-8(fp)
   444f0:	00bfce16 	blt	zero,r2,4442c <__alt_data_end+0xfffce8cc>

    /* If we read any data then return it */
    if (ptr != buffer)
   444f4:	e0fff517 	ldw	r3,-44(fp)
   444f8:	e0bffd17 	ldw	r2,-12(fp)
   444fc:	18800126 	beq	r3,r2,44504 <altera_avalon_jtag_uart_read+0x104>
      break;
   44500:	00001506 	br	44558 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   44504:	e0bfff17 	ldw	r2,-4(fp)
   44508:	1090000c 	andi	r2,r2,16384
   4450c:	10000126 	beq	r2,zero,44514 <altera_avalon_jtag_uart_read+0x114>
      break;
   44510:	00001106 	br	44558 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   44514:	0001883a 	nop
   44518:	e0bffc17 	ldw	r2,-16(fp)
   4451c:	10c00a17 	ldw	r3,40(r2)
   44520:	e0bff717 	ldw	r2,-36(fp)
   44524:	1880051e 	bne	r3,r2,4453c <altera_avalon_jtag_uart_read+0x13c>
   44528:	e0bffc17 	ldw	r2,-16(fp)
   4452c:	10c00917 	ldw	r3,36(r2)
   44530:	e0bffc17 	ldw	r2,-16(fp)
   44534:	10800117 	ldw	r2,4(r2)
   44538:	18bff736 	bltu	r3,r2,44518 <__alt_data_end+0xfffce9b8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4453c:	e0bffc17 	ldw	r2,-16(fp)
   44540:	10c00a17 	ldw	r3,40(r2)
   44544:	e0bff717 	ldw	r2,-36(fp)
   44548:	1880011e 	bne	r3,r2,44550 <altera_avalon_jtag_uart_read+0x150>
      break;
   4454c:	00000206 	br	44558 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44550:	e0bffe17 	ldw	r2,-8(fp)
   44554:	00bfb516 	blt	zero,r2,4442c <__alt_data_end+0xfffce8cc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   44558:	e0fff517 	ldw	r3,-44(fp)
   4455c:	e0bffd17 	ldw	r2,-12(fp)
   44560:	18801826 	beq	r3,r2,445c4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44564:	0005303a 	rdctl	r2,status
   44568:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4456c:	e0fffa17 	ldw	r3,-24(fp)
   44570:	00bfff84 	movi	r2,-2
   44574:	1884703a 	and	r2,r3,r2
   44578:	1001703a 	wrctl	status,r2
  
  return context;
   4457c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   44580:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44584:	e0bffc17 	ldw	r2,-16(fp)
   44588:	10800817 	ldw	r2,32(r2)
   4458c:	10c00054 	ori	r3,r2,1
   44590:	e0bffc17 	ldw	r2,-16(fp)
   44594:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44598:	e0bffc17 	ldw	r2,-16(fp)
   4459c:	10800017 	ldw	r2,0(r2)
   445a0:	10800104 	addi	r2,r2,4
   445a4:	1007883a 	mov	r3,r2
   445a8:	e0bffc17 	ldw	r2,-16(fp)
   445ac:	10800817 	ldw	r2,32(r2)
   445b0:	18800035 	stwio	r2,0(r3)
   445b4:	e0bff917 	ldw	r2,-28(fp)
   445b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   445bc:	e0bffb17 	ldw	r2,-20(fp)
   445c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   445c4:	e0fff517 	ldw	r3,-44(fp)
   445c8:	e0bffd17 	ldw	r2,-12(fp)
   445cc:	18800426 	beq	r3,r2,445e0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   445d0:	e0fff517 	ldw	r3,-44(fp)
   445d4:	e0bffd17 	ldw	r2,-12(fp)
   445d8:	1885c83a 	sub	r2,r3,r2
   445dc:	00000606 	br	445f8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   445e0:	e0bfff17 	ldw	r2,-4(fp)
   445e4:	1090000c 	andi	r2,r2,16384
   445e8:	10000226 	beq	r2,zero,445f4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   445ec:	00bffd44 	movi	r2,-11
   445f0:	00000106 	br	445f8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   445f4:	00bffec4 	movi	r2,-5
}
   445f8:	e037883a 	mov	sp,fp
   445fc:	dfc00117 	ldw	ra,4(sp)
   44600:	df000017 	ldw	fp,0(sp)
   44604:	dec00204 	addi	sp,sp,8
   44608:	f800283a 	ret

0004460c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4460c:	defff304 	addi	sp,sp,-52
   44610:	dfc00c15 	stw	ra,48(sp)
   44614:	df000b15 	stw	fp,44(sp)
   44618:	df000b04 	addi	fp,sp,44
   4461c:	e13ffc15 	stw	r4,-16(fp)
   44620:	e17ffd15 	stw	r5,-12(fp)
   44624:	e1bffe15 	stw	r6,-8(fp)
   44628:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4462c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   44630:	e0bffd17 	ldw	r2,-12(fp)
   44634:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44638:	00003806 	br	4471c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4463c:	e0bffc17 	ldw	r2,-16(fp)
   44640:	10800c17 	ldw	r2,48(r2)
   44644:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   44648:	e0bffc17 	ldw	r2,-16(fp)
   4464c:	10800d17 	ldw	r2,52(r2)
   44650:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   44654:	e0fff817 	ldw	r3,-32(fp)
   44658:	e0bff517 	ldw	r2,-44(fp)
   4465c:	1880062e 	bgeu	r3,r2,44678 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   44660:	e0fff517 	ldw	r3,-44(fp)
   44664:	e0bff817 	ldw	r2,-32(fp)
   44668:	1885c83a 	sub	r2,r3,r2
   4466c:	10bfffc4 	addi	r2,r2,-1
   44670:	e0bff615 	stw	r2,-40(fp)
   44674:	00000b06 	br	446a4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   44678:	e0bff517 	ldw	r2,-44(fp)
   4467c:	10000526 	beq	r2,zero,44694 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   44680:	00c20004 	movi	r3,2048
   44684:	e0bff817 	ldw	r2,-32(fp)
   44688:	1885c83a 	sub	r2,r3,r2
   4468c:	e0bff615 	stw	r2,-40(fp)
   44690:	00000406 	br	446a4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   44694:	00c1ffc4 	movi	r3,2047
   44698:	e0bff817 	ldw	r2,-32(fp)
   4469c:	1885c83a 	sub	r2,r3,r2
   446a0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   446a4:	e0bff617 	ldw	r2,-40(fp)
   446a8:	1000011e 	bne	r2,zero,446b0 <altera_avalon_jtag_uart_write+0xa4>
        break;
   446ac:	00001d06 	br	44724 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   446b0:	e0fffe17 	ldw	r3,-8(fp)
   446b4:	e0bff617 	ldw	r2,-40(fp)
   446b8:	1880022e 	bgeu	r3,r2,446c4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   446bc:	e0bffe17 	ldw	r2,-8(fp)
   446c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   446c4:	e0bff817 	ldw	r2,-32(fp)
   446c8:	10820e04 	addi	r2,r2,2104
   446cc:	e0fffc17 	ldw	r3,-16(fp)
   446d0:	1885883a 	add	r2,r3,r2
   446d4:	1009883a 	mov	r4,r2
   446d8:	e17ffd17 	ldw	r5,-12(fp)
   446dc:	e1bff617 	ldw	r6,-40(fp)
   446e0:	00415380 	call	41538 <memcpy>
      ptr   += n;
   446e4:	e0fffd17 	ldw	r3,-12(fp)
   446e8:	e0bff617 	ldw	r2,-40(fp)
   446ec:	1885883a 	add	r2,r3,r2
   446f0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   446f4:	e0fffe17 	ldw	r3,-8(fp)
   446f8:	e0bff617 	ldw	r2,-40(fp)
   446fc:	1885c83a 	sub	r2,r3,r2
   44700:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44704:	e0fff817 	ldw	r3,-32(fp)
   44708:	e0bff617 	ldw	r2,-40(fp)
   4470c:	1885883a 	add	r2,r3,r2
   44710:	10c1ffcc 	andi	r3,r2,2047
   44714:	e0bffc17 	ldw	r2,-16(fp)
   44718:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4471c:	e0bffe17 	ldw	r2,-8(fp)
   44720:	00bfc616 	blt	zero,r2,4463c <__alt_data_end+0xfffceadc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44724:	0005303a 	rdctl	r2,status
   44728:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4472c:	e0fffa17 	ldw	r3,-24(fp)
   44730:	00bfff84 	movi	r2,-2
   44734:	1884703a 	and	r2,r3,r2
   44738:	1001703a 	wrctl	status,r2
  
  return context;
   4473c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   44740:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44744:	e0bffc17 	ldw	r2,-16(fp)
   44748:	10800817 	ldw	r2,32(r2)
   4474c:	10c00094 	ori	r3,r2,2
   44750:	e0bffc17 	ldw	r2,-16(fp)
   44754:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44758:	e0bffc17 	ldw	r2,-16(fp)
   4475c:	10800017 	ldw	r2,0(r2)
   44760:	10800104 	addi	r2,r2,4
   44764:	1007883a 	mov	r3,r2
   44768:	e0bffc17 	ldw	r2,-16(fp)
   4476c:	10800817 	ldw	r2,32(r2)
   44770:	18800035 	stwio	r2,0(r3)
   44774:	e0bff917 	ldw	r2,-28(fp)
   44778:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4477c:	e0bffb17 	ldw	r2,-20(fp)
   44780:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   44784:	e0bffe17 	ldw	r2,-8(fp)
   44788:	0080120e 	bge	zero,r2,447d4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   4478c:	e0bfff17 	ldw	r2,-4(fp)
   44790:	1090000c 	andi	r2,r2,16384
   44794:	10000126 	beq	r2,zero,4479c <altera_avalon_jtag_uart_write+0x190>
        break;
   44798:	00001006 	br	447dc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4479c:	0001883a 	nop
   447a0:	e0bffc17 	ldw	r2,-16(fp)
   447a4:	10c00d17 	ldw	r3,52(r2)
   447a8:	e0bff517 	ldw	r2,-44(fp)
   447ac:	1880051e 	bne	r3,r2,447c4 <altera_avalon_jtag_uart_write+0x1b8>
   447b0:	e0bffc17 	ldw	r2,-16(fp)
   447b4:	10c00917 	ldw	r3,36(r2)
   447b8:	e0bffc17 	ldw	r2,-16(fp)
   447bc:	10800117 	ldw	r2,4(r2)
   447c0:	18bff736 	bltu	r3,r2,447a0 <__alt_data_end+0xfffcec40>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   447c4:	e0bffc17 	ldw	r2,-16(fp)
   447c8:	10800917 	ldw	r2,36(r2)
   447cc:	10000126 	beq	r2,zero,447d4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   447d0:	00000206 	br	447dc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   447d4:	e0bffe17 	ldw	r2,-8(fp)
   447d8:	00bf9716 	blt	zero,r2,44638 <__alt_data_end+0xfffcead8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   447dc:	e0fffd17 	ldw	r3,-12(fp)
   447e0:	e0bff717 	ldw	r2,-36(fp)
   447e4:	18800426 	beq	r3,r2,447f8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   447e8:	e0fffd17 	ldw	r3,-12(fp)
   447ec:	e0bff717 	ldw	r2,-36(fp)
   447f0:	1885c83a 	sub	r2,r3,r2
   447f4:	00000606 	br	44810 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   447f8:	e0bfff17 	ldw	r2,-4(fp)
   447fc:	1090000c 	andi	r2,r2,16384
   44800:	10000226 	beq	r2,zero,4480c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   44804:	00bffd44 	movi	r2,-11
   44808:	00000106 	br	44810 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4480c:	00bffec4 	movi	r2,-5
}
   44810:	e037883a 	mov	sp,fp
   44814:	dfc00117 	ldw	ra,4(sp)
   44818:	df000017 	ldw	fp,0(sp)
   4481c:	dec00204 	addi	sp,sp,8
   44820:	f800283a 	ret

00044824 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   44824:	defffa04 	addi	sp,sp,-24
   44828:	dfc00515 	stw	ra,20(sp)
   4482c:	df000415 	stw	fp,16(sp)
   44830:	df000404 	addi	fp,sp,16
   44834:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   44838:	0007883a 	mov	r3,zero
   4483c:	e0bfff17 	ldw	r2,-4(fp)
   44840:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   44844:	e0bfff17 	ldw	r2,-4(fp)
   44848:	10800104 	addi	r2,r2,4
   4484c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44850:	0005303a 	rdctl	r2,status
   44854:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44858:	e0fffd17 	ldw	r3,-12(fp)
   4485c:	00bfff84 	movi	r2,-2
   44860:	1884703a 	and	r2,r3,r2
   44864:	1001703a 	wrctl	status,r2
  
  return context;
   44868:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4486c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   44870:	0045df00 	call	45df0 <alt_tick>
   44874:	e0bffc17 	ldw	r2,-16(fp)
   44878:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4487c:	e0bffe17 	ldw	r2,-8(fp)
   44880:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   44884:	e037883a 	mov	sp,fp
   44888:	dfc00117 	ldw	ra,4(sp)
   4488c:	df000017 	ldw	fp,0(sp)
   44890:	dec00204 	addi	sp,sp,8
   44894:	f800283a 	ret

00044898 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   44898:	defff804 	addi	sp,sp,-32
   4489c:	dfc00715 	stw	ra,28(sp)
   448a0:	df000615 	stw	fp,24(sp)
   448a4:	df000604 	addi	fp,sp,24
   448a8:	e13ffc15 	stw	r4,-16(fp)
   448ac:	e17ffd15 	stw	r5,-12(fp)
   448b0:	e1bffe15 	stw	r6,-8(fp)
   448b4:	e1ffff15 	stw	r7,-4(fp)
   448b8:	e0bfff17 	ldw	r2,-4(fp)
   448bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   448c0:	00800174 	movhi	r2,5
   448c4:	10a72804 	addi	r2,r2,-25440
   448c8:	10800017 	ldw	r2,0(r2)
   448cc:	1000041e 	bne	r2,zero,448e0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   448d0:	00800174 	movhi	r2,5
   448d4:	10a72804 	addi	r2,r2,-25440
   448d8:	e0fffb17 	ldw	r3,-20(fp)
   448dc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   448e0:	e0bffc17 	ldw	r2,-16(fp)
   448e4:	10800104 	addi	r2,r2,4
   448e8:	00c001c4 	movi	r3,7
   448ec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   448f0:	d8000015 	stw	zero,0(sp)
   448f4:	e13ffd17 	ldw	r4,-12(fp)
   448f8:	e17ffe17 	ldw	r5,-8(fp)
   448fc:	01800134 	movhi	r6,4
   44900:	31920904 	addi	r6,r6,18468
   44904:	e1fffc17 	ldw	r7,-16(fp)
   44908:	004568c0 	call	4568c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4490c:	e037883a 	mov	sp,fp
   44910:	dfc00117 	ldw	ra,4(sp)
   44914:	df000017 	ldw	fp,0(sp)
   44918:	dec00204 	addi	sp,sp,8
   4491c:	f800283a 	ret

00044920 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   44920:	defffa04 	addi	sp,sp,-24
   44924:	dfc00515 	stw	ra,20(sp)
   44928:	df000415 	stw	fp,16(sp)
   4492c:	df000404 	addi	fp,sp,16
   44930:	e13ffd15 	stw	r4,-12(fp)
   44934:	e17ffe15 	stw	r5,-8(fp)
   44938:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4493c:	e0bffd17 	ldw	r2,-12(fp)
   44940:	10800017 	ldw	r2,0(r2)
   44944:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   44948:	e0bffc17 	ldw	r2,-16(fp)
   4494c:	10c00a04 	addi	r3,r2,40
   44950:	e0bffd17 	ldw	r2,-12(fp)
   44954:	10800217 	ldw	r2,8(r2)
   44958:	1809883a 	mov	r4,r3
   4495c:	e17ffe17 	ldw	r5,-8(fp)
   44960:	e1bfff17 	ldw	r6,-4(fp)
   44964:	100f883a 	mov	r7,r2
   44968:	0044e380 	call	44e38 <altera_avalon_uart_read>
      fd->fd_flags);
}
   4496c:	e037883a 	mov	sp,fp
   44970:	dfc00117 	ldw	ra,4(sp)
   44974:	df000017 	ldw	fp,0(sp)
   44978:	dec00204 	addi	sp,sp,8
   4497c:	f800283a 	ret

00044980 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   44980:	defffa04 	addi	sp,sp,-24
   44984:	dfc00515 	stw	ra,20(sp)
   44988:	df000415 	stw	fp,16(sp)
   4498c:	df000404 	addi	fp,sp,16
   44990:	e13ffd15 	stw	r4,-12(fp)
   44994:	e17ffe15 	stw	r5,-8(fp)
   44998:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4499c:	e0bffd17 	ldw	r2,-12(fp)
   449a0:	10800017 	ldw	r2,0(r2)
   449a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   449a8:	e0bffc17 	ldw	r2,-16(fp)
   449ac:	10c00a04 	addi	r3,r2,40
   449b0:	e0bffd17 	ldw	r2,-12(fp)
   449b4:	10800217 	ldw	r2,8(r2)
   449b8:	1809883a 	mov	r4,r3
   449bc:	e17ffe17 	ldw	r5,-8(fp)
   449c0:	e1bfff17 	ldw	r6,-4(fp)
   449c4:	100f883a 	mov	r7,r2
   449c8:	00450640 	call	45064 <altera_avalon_uart_write>
      fd->fd_flags);
}
   449cc:	e037883a 	mov	sp,fp
   449d0:	dfc00117 	ldw	ra,4(sp)
   449d4:	df000017 	ldw	fp,0(sp)
   449d8:	dec00204 	addi	sp,sp,8
   449dc:	f800283a 	ret

000449e0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   449e0:	defffc04 	addi	sp,sp,-16
   449e4:	dfc00315 	stw	ra,12(sp)
   449e8:	df000215 	stw	fp,8(sp)
   449ec:	df000204 	addi	fp,sp,8
   449f0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   449f4:	e0bfff17 	ldw	r2,-4(fp)
   449f8:	10800017 	ldw	r2,0(r2)
   449fc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   44a00:	e0bffe17 	ldw	r2,-8(fp)
   44a04:	10c00a04 	addi	r3,r2,40
   44a08:	e0bfff17 	ldw	r2,-4(fp)
   44a0c:	10800217 	ldw	r2,8(r2)
   44a10:	1809883a 	mov	r4,r3
   44a14:	100b883a 	mov	r5,r2
   44a18:	0044d940 	call	44d94 <altera_avalon_uart_close>
}
   44a1c:	e037883a 	mov	sp,fp
   44a20:	dfc00117 	ldw	ra,4(sp)
   44a24:	df000017 	ldw	fp,0(sp)
   44a28:	dec00204 	addi	sp,sp,8
   44a2c:	f800283a 	ret

00044a30 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   44a30:	defff804 	addi	sp,sp,-32
   44a34:	dfc00715 	stw	ra,28(sp)
   44a38:	df000615 	stw	fp,24(sp)
   44a3c:	df000604 	addi	fp,sp,24
   44a40:	e13ffd15 	stw	r4,-12(fp)
   44a44:	e17ffe15 	stw	r5,-8(fp)
   44a48:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   44a4c:	e0bffd17 	ldw	r2,-12(fp)
   44a50:	10800017 	ldw	r2,0(r2)
   44a54:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   44a58:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   44a5c:	1000041e 	bne	r2,zero,44a70 <altera_avalon_uart_init+0x40>
   44a60:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   44a64:	1000021e 	bne	r2,zero,44a70 <altera_avalon_uart_init+0x40>
   44a68:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   44a6c:	10000226 	beq	r2,zero,44a78 <altera_avalon_uart_init+0x48>
   44a70:	00800044 	movi	r2,1
   44a74:	00000106 	br	44a7c <altera_avalon_uart_init+0x4c>
   44a78:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   44a7c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   44a80:	e0bffc17 	ldw	r2,-16(fp)
   44a84:	10000f1e 	bne	r2,zero,44ac4 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   44a88:	e0bffd17 	ldw	r2,-12(fp)
   44a8c:	00c32004 	movi	r3,3200
   44a90:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   44a94:	e0bffb17 	ldw	r2,-20(fp)
   44a98:	10800304 	addi	r2,r2,12
   44a9c:	e0fffd17 	ldw	r3,-12(fp)
   44aa0:	18c00117 	ldw	r3,4(r3)
   44aa4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   44aa8:	d8000015 	stw	zero,0(sp)
   44aac:	e13ffe17 	ldw	r4,-8(fp)
   44ab0:	e17fff17 	ldw	r5,-4(fp)
   44ab4:	01800134 	movhi	r6,4
   44ab8:	3192b604 	addi	r6,r6,19160
   44abc:	e1fffd17 	ldw	r7,-12(fp)
   44ac0:	004568c0 	call	4568c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   44ac4:	e037883a 	mov	sp,fp
   44ac8:	dfc00117 	ldw	ra,4(sp)
   44acc:	df000017 	ldw	fp,0(sp)
   44ad0:	dec00204 	addi	sp,sp,8
   44ad4:	f800283a 	ret

00044ad8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   44ad8:	defffa04 	addi	sp,sp,-24
   44adc:	dfc00515 	stw	ra,20(sp)
   44ae0:	df000415 	stw	fp,16(sp)
   44ae4:	df000404 	addi	fp,sp,16
   44ae8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   44aec:	e0bfff17 	ldw	r2,-4(fp)
   44af0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   44af4:	e0bffc17 	ldw	r2,-16(fp)
   44af8:	10800017 	ldw	r2,0(r2)
   44afc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   44b00:	e0bffd17 	ldw	r2,-12(fp)
   44b04:	10800204 	addi	r2,r2,8
   44b08:	10800037 	ldwio	r2,0(r2)
   44b0c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   44b10:	e0bffd17 	ldw	r2,-12(fp)
   44b14:	10800204 	addi	r2,r2,8
   44b18:	0007883a 	mov	r3,zero
   44b1c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   44b20:	e0bffd17 	ldw	r2,-12(fp)
   44b24:	10800204 	addi	r2,r2,8
   44b28:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   44b2c:	e0bffe17 	ldw	r2,-8(fp)
   44b30:	1080200c 	andi	r2,r2,128
   44b34:	10000326 	beq	r2,zero,44b44 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   44b38:	e13ffc17 	ldw	r4,-16(fp)
   44b3c:	e17ffe17 	ldw	r5,-8(fp)
   44b40:	0044b700 	call	44b70 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   44b44:	e0bffe17 	ldw	r2,-8(fp)
   44b48:	1081100c 	andi	r2,r2,1088
   44b4c:	10000326 	beq	r2,zero,44b5c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   44b50:	e13ffc17 	ldw	r4,-16(fp)
   44b54:	e17ffe17 	ldw	r5,-8(fp)
   44b58:	0044c500 	call	44c50 <altera_avalon_uart_txirq>
  }
  

}
   44b5c:	e037883a 	mov	sp,fp
   44b60:	dfc00117 	ldw	ra,4(sp)
   44b64:	df000017 	ldw	fp,0(sp)
   44b68:	dec00204 	addi	sp,sp,8
   44b6c:	f800283a 	ret

00044b70 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   44b70:	defffc04 	addi	sp,sp,-16
   44b74:	df000315 	stw	fp,12(sp)
   44b78:	df000304 	addi	fp,sp,12
   44b7c:	e13ffe15 	stw	r4,-8(fp)
   44b80:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   44b84:	e0bfff17 	ldw	r2,-4(fp)
   44b88:	108000cc 	andi	r2,r2,3
   44b8c:	10000126 	beq	r2,zero,44b94 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   44b90:	00002b06 	br	44c40 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   44b94:	e0bffe17 	ldw	r2,-8(fp)
   44b98:	10800317 	ldw	r2,12(r2)
   44b9c:	e0bffe17 	ldw	r2,-8(fp)
   44ba0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   44ba4:	e0bffe17 	ldw	r2,-8(fp)
   44ba8:	10800317 	ldw	r2,12(r2)
   44bac:	10800044 	addi	r2,r2,1
   44bb0:	10800fcc 	andi	r2,r2,63
   44bb4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   44bb8:	e0bffe17 	ldw	r2,-8(fp)
   44bbc:	10800317 	ldw	r2,12(r2)
   44bc0:	e0fffe17 	ldw	r3,-8(fp)
   44bc4:	18c00017 	ldw	r3,0(r3)
   44bc8:	18c00037 	ldwio	r3,0(r3)
   44bcc:	1809883a 	mov	r4,r3
   44bd0:	e0fffe17 	ldw	r3,-8(fp)
   44bd4:	1885883a 	add	r2,r3,r2
   44bd8:	10800704 	addi	r2,r2,28
   44bdc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   44be0:	e0bffe17 	ldw	r2,-8(fp)
   44be4:	e0fffd17 	ldw	r3,-12(fp)
   44be8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   44bec:	e0bffe17 	ldw	r2,-8(fp)
   44bf0:	10800317 	ldw	r2,12(r2)
   44bf4:	10800044 	addi	r2,r2,1
   44bf8:	10800fcc 	andi	r2,r2,63
   44bfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   44c00:	e0bffe17 	ldw	r2,-8(fp)
   44c04:	10c00217 	ldw	r3,8(r2)
   44c08:	e0bffd17 	ldw	r2,-12(fp)
   44c0c:	18800c1e 	bne	r3,r2,44c40 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   44c10:	e0bffe17 	ldw	r2,-8(fp)
   44c14:	10c00117 	ldw	r3,4(r2)
   44c18:	00bfdfc4 	movi	r2,-129
   44c1c:	1886703a 	and	r3,r3,r2
   44c20:	e0bffe17 	ldw	r2,-8(fp)
   44c24:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   44c28:	e0bffe17 	ldw	r2,-8(fp)
   44c2c:	10800017 	ldw	r2,0(r2)
   44c30:	10800304 	addi	r2,r2,12
   44c34:	e0fffe17 	ldw	r3,-8(fp)
   44c38:	18c00117 	ldw	r3,4(r3)
   44c3c:	10c00035 	stwio	r3,0(r2)
  }   
}
   44c40:	e037883a 	mov	sp,fp
   44c44:	df000017 	ldw	fp,0(sp)
   44c48:	dec00104 	addi	sp,sp,4
   44c4c:	f800283a 	ret

00044c50 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   44c50:	defffb04 	addi	sp,sp,-20
   44c54:	df000415 	stw	fp,16(sp)
   44c58:	df000404 	addi	fp,sp,16
   44c5c:	e13ffc15 	stw	r4,-16(fp)
   44c60:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   44c64:	e0bffc17 	ldw	r2,-16(fp)
   44c68:	10c00417 	ldw	r3,16(r2)
   44c6c:	e0bffc17 	ldw	r2,-16(fp)
   44c70:	10800517 	ldw	r2,20(r2)
   44c74:	18803226 	beq	r3,r2,44d40 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   44c78:	e0bffc17 	ldw	r2,-16(fp)
   44c7c:	10800617 	ldw	r2,24(r2)
   44c80:	1080008c 	andi	r2,r2,2
   44c84:	10000326 	beq	r2,zero,44c94 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   44c88:	e0bffd17 	ldw	r2,-12(fp)
   44c8c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   44c90:	10001d26 	beq	r2,zero,44d08 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   44c94:	e0bffc17 	ldw	r2,-16(fp)
   44c98:	10800417 	ldw	r2,16(r2)
   44c9c:	e0bffc17 	ldw	r2,-16(fp)
   44ca0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   44ca4:	e0bffc17 	ldw	r2,-16(fp)
   44ca8:	10800017 	ldw	r2,0(r2)
   44cac:	10800104 	addi	r2,r2,4
   44cb0:	e0fffc17 	ldw	r3,-16(fp)
   44cb4:	18c00417 	ldw	r3,16(r3)
   44cb8:	e13ffc17 	ldw	r4,-16(fp)
   44cbc:	20c7883a 	add	r3,r4,r3
   44cc0:	18c01704 	addi	r3,r3,92
   44cc4:	18c00003 	ldbu	r3,0(r3)
   44cc8:	18c03fcc 	andi	r3,r3,255
   44ccc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   44cd0:	e0bffc17 	ldw	r2,-16(fp)
   44cd4:	10800417 	ldw	r2,16(r2)
   44cd8:	10800044 	addi	r2,r2,1
   44cdc:	e0fffc17 	ldw	r3,-16(fp)
   44ce0:	18800415 	stw	r2,16(r3)
   44ce4:	10c00fcc 	andi	r3,r2,63
   44ce8:	e0bffc17 	ldw	r2,-16(fp)
   44cec:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   44cf0:	e0bffc17 	ldw	r2,-16(fp)
   44cf4:	10800117 	ldw	r2,4(r2)
   44cf8:	10c01014 	ori	r3,r2,64
   44cfc:	e0bffc17 	ldw	r2,-16(fp)
   44d00:	10c00115 	stw	r3,4(r2)
   44d04:	00000e06 	br	44d40 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   44d08:	e0bffc17 	ldw	r2,-16(fp)
   44d0c:	10800017 	ldw	r2,0(r2)
   44d10:	10800204 	addi	r2,r2,8
   44d14:	10800037 	ldwio	r2,0(r2)
   44d18:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   44d1c:	e0bffd17 	ldw	r2,-12(fp)
   44d20:	1082000c 	andi	r2,r2,2048
   44d24:	1000061e 	bne	r2,zero,44d40 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   44d28:	e0bffc17 	ldw	r2,-16(fp)
   44d2c:	10c00117 	ldw	r3,4(r2)
   44d30:	00bfefc4 	movi	r2,-65
   44d34:	1886703a 	and	r3,r3,r2
   44d38:	e0bffc17 	ldw	r2,-16(fp)
   44d3c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   44d40:	e0bffc17 	ldw	r2,-16(fp)
   44d44:	10c00417 	ldw	r3,16(r2)
   44d48:	e0bffc17 	ldw	r2,-16(fp)
   44d4c:	10800517 	ldw	r2,20(r2)
   44d50:	1880061e 	bne	r3,r2,44d6c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   44d54:	e0bffc17 	ldw	r2,-16(fp)
   44d58:	10c00117 	ldw	r3,4(r2)
   44d5c:	00beefc4 	movi	r2,-1089
   44d60:	1886703a 	and	r3,r3,r2
   44d64:	e0bffc17 	ldw	r2,-16(fp)
   44d68:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   44d6c:	e0bffc17 	ldw	r2,-16(fp)
   44d70:	10800017 	ldw	r2,0(r2)
   44d74:	10800304 	addi	r2,r2,12
   44d78:	e0fffc17 	ldw	r3,-16(fp)
   44d7c:	18c00117 	ldw	r3,4(r3)
   44d80:	10c00035 	stwio	r3,0(r2)
}
   44d84:	e037883a 	mov	sp,fp
   44d88:	df000017 	ldw	fp,0(sp)
   44d8c:	dec00104 	addi	sp,sp,4
   44d90:	f800283a 	ret

00044d94 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   44d94:	defffd04 	addi	sp,sp,-12
   44d98:	df000215 	stw	fp,8(sp)
   44d9c:	df000204 	addi	fp,sp,8
   44da0:	e13ffe15 	stw	r4,-8(fp)
   44da4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   44da8:	00000506 	br	44dc0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   44dac:	e0bfff17 	ldw	r2,-4(fp)
   44db0:	1090000c 	andi	r2,r2,16384
   44db4:	10000226 	beq	r2,zero,44dc0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   44db8:	00bffd44 	movi	r2,-11
   44dbc:	00000606 	br	44dd8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   44dc0:	e0bffe17 	ldw	r2,-8(fp)
   44dc4:	10c00417 	ldw	r3,16(r2)
   44dc8:	e0bffe17 	ldw	r2,-8(fp)
   44dcc:	10800517 	ldw	r2,20(r2)
   44dd0:	18bff61e 	bne	r3,r2,44dac <__alt_data_end+0xfffcf24c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44dd4:	0005883a 	mov	r2,zero
}
   44dd8:	e037883a 	mov	sp,fp
   44ddc:	df000017 	ldw	fp,0(sp)
   44de0:	dec00104 	addi	sp,sp,4
   44de4:	f800283a 	ret

00044de8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44de8:	defffe04 	addi	sp,sp,-8
   44dec:	dfc00115 	stw	ra,4(sp)
   44df0:	df000015 	stw	fp,0(sp)
   44df4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44df8:	00800174 	movhi	r2,5
   44dfc:	10a04f04 	addi	r2,r2,-32452
   44e00:	10800017 	ldw	r2,0(r2)
   44e04:	10000526 	beq	r2,zero,44e1c <alt_get_errno+0x34>
   44e08:	00800174 	movhi	r2,5
   44e0c:	10a04f04 	addi	r2,r2,-32452
   44e10:	10800017 	ldw	r2,0(r2)
   44e14:	103ee83a 	callr	r2
   44e18:	00000206 	br	44e24 <alt_get_errno+0x3c>
   44e1c:	00800174 	movhi	r2,5
   44e20:	10a72304 	addi	r2,r2,-25460
}
   44e24:	e037883a 	mov	sp,fp
   44e28:	dfc00117 	ldw	ra,4(sp)
   44e2c:	df000017 	ldw	fp,0(sp)
   44e30:	dec00204 	addi	sp,sp,8
   44e34:	f800283a 	ret

00044e38 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   44e38:	defff204 	addi	sp,sp,-56
   44e3c:	dfc00d15 	stw	ra,52(sp)
   44e40:	df000c15 	stw	fp,48(sp)
   44e44:	df000c04 	addi	fp,sp,48
   44e48:	e13ffc15 	stw	r4,-16(fp)
   44e4c:	e17ffd15 	stw	r5,-12(fp)
   44e50:	e1bffe15 	stw	r6,-8(fp)
   44e54:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   44e58:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   44e5c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   44e60:	e0bfff17 	ldw	r2,-4(fp)
   44e64:	1090000c 	andi	r2,r2,16384
   44e68:	1005003a 	cmpeq	r2,r2,zero
   44e6c:	10803fcc 	andi	r2,r2,255
   44e70:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   44e74:	00001306 	br	44ec4 <altera_avalon_uart_read+0x8c>
    {
      count++;
   44e78:	e0bff517 	ldw	r2,-44(fp)
   44e7c:	10800044 	addi	r2,r2,1
   44e80:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   44e84:	e0bffd17 	ldw	r2,-12(fp)
   44e88:	10c00044 	addi	r3,r2,1
   44e8c:	e0fffd15 	stw	r3,-12(fp)
   44e90:	e0fffc17 	ldw	r3,-16(fp)
   44e94:	18c00217 	ldw	r3,8(r3)
   44e98:	e13ffc17 	ldw	r4,-16(fp)
   44e9c:	20c7883a 	add	r3,r4,r3
   44ea0:	18c00704 	addi	r3,r3,28
   44ea4:	18c00003 	ldbu	r3,0(r3)
   44ea8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   44eac:	e0bffc17 	ldw	r2,-16(fp)
   44eb0:	10800217 	ldw	r2,8(r2)
   44eb4:	10800044 	addi	r2,r2,1
   44eb8:	10c00fcc 	andi	r3,r2,63
   44ebc:	e0bffc17 	ldw	r2,-16(fp)
   44ec0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   44ec4:	e0fff517 	ldw	r3,-44(fp)
   44ec8:	e0bffe17 	ldw	r2,-8(fp)
   44ecc:	1880050e 	bge	r3,r2,44ee4 <altera_avalon_uart_read+0xac>
   44ed0:	e0bffc17 	ldw	r2,-16(fp)
   44ed4:	10c00217 	ldw	r3,8(r2)
   44ed8:	e0bffc17 	ldw	r2,-16(fp)
   44edc:	10800317 	ldw	r2,12(r2)
   44ee0:	18bfe51e 	bne	r3,r2,44e78 <__alt_data_end+0xfffcf318>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   44ee4:	e0bff517 	ldw	r2,-44(fp)
   44ee8:	1000251e 	bne	r2,zero,44f80 <altera_avalon_uart_read+0x148>
   44eec:	e0bffc17 	ldw	r2,-16(fp)
   44ef0:	10c00217 	ldw	r3,8(r2)
   44ef4:	e0bffc17 	ldw	r2,-16(fp)
   44ef8:	10800317 	ldw	r2,12(r2)
   44efc:	1880201e 	bne	r3,r2,44f80 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   44f00:	e0bff617 	ldw	r2,-40(fp)
   44f04:	1000071e 	bne	r2,zero,44f24 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   44f08:	0044de80 	call	44de8 <alt_get_errno>
   44f0c:	1007883a 	mov	r3,r2
   44f10:	008002c4 	movi	r2,11
   44f14:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   44f18:	00800044 	movi	r2,1
   44f1c:	e0bff405 	stb	r2,-48(fp)
        break;
   44f20:	00001b06 	br	44f90 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44f24:	0005303a 	rdctl	r2,status
   44f28:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44f2c:	e0fff817 	ldw	r3,-32(fp)
   44f30:	00bfff84 	movi	r2,-2
   44f34:	1884703a 	and	r2,r3,r2
   44f38:	1001703a 	wrctl	status,r2
  
  return context;
   44f3c:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   44f40:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   44f44:	e0bffc17 	ldw	r2,-16(fp)
   44f48:	10800117 	ldw	r2,4(r2)
   44f4c:	10c02014 	ori	r3,r2,128
   44f50:	e0bffc17 	ldw	r2,-16(fp)
   44f54:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   44f58:	e0bffc17 	ldw	r2,-16(fp)
   44f5c:	10800017 	ldw	r2,0(r2)
   44f60:	10800304 	addi	r2,r2,12
   44f64:	e0fffc17 	ldw	r3,-16(fp)
   44f68:	18c00117 	ldw	r3,4(r3)
   44f6c:	10c00035 	stwio	r3,0(r2)
   44f70:	e0bff717 	ldw	r2,-36(fp)
   44f74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44f78:	e0bff917 	ldw	r2,-28(fp)
   44f7c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   44f80:	e0bff517 	ldw	r2,-44(fp)
   44f84:	1000021e 	bne	r2,zero,44f90 <altera_avalon_uart_read+0x158>
   44f88:	e0bffe17 	ldw	r2,-8(fp)
   44f8c:	103fb91e 	bne	r2,zero,44e74 <__alt_data_end+0xfffcf314>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44f90:	0005303a 	rdctl	r2,status
   44f94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44f98:	e0fffa17 	ldw	r3,-24(fp)
   44f9c:	00bfff84 	movi	r2,-2
   44fa0:	1884703a 	and	r2,r3,r2
   44fa4:	1001703a 	wrctl	status,r2
  
  return context;
   44fa8:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   44fac:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   44fb0:	e0bffc17 	ldw	r2,-16(fp)
   44fb4:	10800117 	ldw	r2,4(r2)
   44fb8:	10c02014 	ori	r3,r2,128
   44fbc:	e0bffc17 	ldw	r2,-16(fp)
   44fc0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   44fc4:	e0bffc17 	ldw	r2,-16(fp)
   44fc8:	10800017 	ldw	r2,0(r2)
   44fcc:	10800304 	addi	r2,r2,12
   44fd0:	e0fffc17 	ldw	r3,-16(fp)
   44fd4:	18c00117 	ldw	r3,4(r3)
   44fd8:	10c00035 	stwio	r3,0(r2)
   44fdc:	e0bff717 	ldw	r2,-36(fp)
   44fe0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44fe4:	e0bffb17 	ldw	r2,-20(fp)
   44fe8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   44fec:	e0bff403 	ldbu	r2,-48(fp)
   44ff0:	10000226 	beq	r2,zero,44ffc <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   44ff4:	00bffd44 	movi	r2,-11
   44ff8:	00000106 	br	45000 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   44ffc:	e0bff517 	ldw	r2,-44(fp)
  }
}
   45000:	e037883a 	mov	sp,fp
   45004:	dfc00117 	ldw	ra,4(sp)
   45008:	df000017 	ldw	fp,0(sp)
   4500c:	dec00204 	addi	sp,sp,8
   45010:	f800283a 	ret

00045014 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45014:	defffe04 	addi	sp,sp,-8
   45018:	dfc00115 	stw	ra,4(sp)
   4501c:	df000015 	stw	fp,0(sp)
   45020:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45024:	00800174 	movhi	r2,5
   45028:	10a04f04 	addi	r2,r2,-32452
   4502c:	10800017 	ldw	r2,0(r2)
   45030:	10000526 	beq	r2,zero,45048 <alt_get_errno+0x34>
   45034:	00800174 	movhi	r2,5
   45038:	10a04f04 	addi	r2,r2,-32452
   4503c:	10800017 	ldw	r2,0(r2)
   45040:	103ee83a 	callr	r2
   45044:	00000206 	br	45050 <alt_get_errno+0x3c>
   45048:	00800174 	movhi	r2,5
   4504c:	10a72304 	addi	r2,r2,-25460
}
   45050:	e037883a 	mov	sp,fp
   45054:	dfc00117 	ldw	ra,4(sp)
   45058:	df000017 	ldw	fp,0(sp)
   4505c:	dec00204 	addi	sp,sp,8
   45060:	f800283a 	ret

00045064 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   45064:	defff204 	addi	sp,sp,-56
   45068:	dfc00d15 	stw	ra,52(sp)
   4506c:	df000c15 	stw	fp,48(sp)
   45070:	df000c04 	addi	fp,sp,48
   45074:	e13ffc15 	stw	r4,-16(fp)
   45078:	e17ffd15 	stw	r5,-12(fp)
   4507c:	e1bffe15 	stw	r6,-8(fp)
   45080:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   45084:	e0bffe17 	ldw	r2,-8(fp)
   45088:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   4508c:	e0bfff17 	ldw	r2,-4(fp)
   45090:	1090000c 	andi	r2,r2,16384
   45094:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   45098:	00003c06 	br	4518c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4509c:	e0bffc17 	ldw	r2,-16(fp)
   450a0:	10800517 	ldw	r2,20(r2)
   450a4:	10800044 	addi	r2,r2,1
   450a8:	10800fcc 	andi	r2,r2,63
   450ac:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   450b0:	e0bffc17 	ldw	r2,-16(fp)
   450b4:	10c00417 	ldw	r3,16(r2)
   450b8:	e0bff617 	ldw	r2,-40(fp)
   450bc:	1880221e 	bne	r3,r2,45148 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   450c0:	e0bff517 	ldw	r2,-44(fp)
   450c4:	10000526 	beq	r2,zero,450dc <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   450c8:	00450140 	call	45014 <alt_get_errno>
   450cc:	1007883a 	mov	r3,r2
   450d0:	008002c4 	movi	r2,11
   450d4:	18800015 	stw	r2,0(r3)
        break;
   450d8:	00002e06 	br	45194 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   450dc:	0005303a 	rdctl	r2,status
   450e0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   450e4:	e0fff817 	ldw	r3,-32(fp)
   450e8:	00bfff84 	movi	r2,-2
   450ec:	1884703a 	and	r2,r3,r2
   450f0:	1001703a 	wrctl	status,r2
  
  return context;
   450f4:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   450f8:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   450fc:	e0bffc17 	ldw	r2,-16(fp)
   45100:	10800117 	ldw	r2,4(r2)
   45104:	10c11014 	ori	r3,r2,1088
   45108:	e0bffc17 	ldw	r2,-16(fp)
   4510c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   45110:	e0bffc17 	ldw	r2,-16(fp)
   45114:	10800017 	ldw	r2,0(r2)
   45118:	10800304 	addi	r2,r2,12
   4511c:	e0fffc17 	ldw	r3,-16(fp)
   45120:	18c00117 	ldw	r3,4(r3)
   45124:	10c00035 	stwio	r3,0(r2)
   45128:	e0bff717 	ldw	r2,-36(fp)
   4512c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45130:	e0bff917 	ldw	r2,-28(fp)
   45134:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   45138:	e0bffc17 	ldw	r2,-16(fp)
   4513c:	10c00417 	ldw	r3,16(r2)
   45140:	e0bff617 	ldw	r2,-40(fp)
   45144:	18bffc26 	beq	r3,r2,45138 <__alt_data_end+0xfffcf5d8>
      }
    }

    count--;
   45148:	e0bff417 	ldw	r2,-48(fp)
   4514c:	10bfffc4 	addi	r2,r2,-1
   45150:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   45154:	e0bffc17 	ldw	r2,-16(fp)
   45158:	10c00517 	ldw	r3,20(r2)
   4515c:	e0bffd17 	ldw	r2,-12(fp)
   45160:	11000044 	addi	r4,r2,1
   45164:	e13ffd15 	stw	r4,-12(fp)
   45168:	10800003 	ldbu	r2,0(r2)
   4516c:	1009883a 	mov	r4,r2
   45170:	e0bffc17 	ldw	r2,-16(fp)
   45174:	10c5883a 	add	r2,r2,r3
   45178:	10801704 	addi	r2,r2,92
   4517c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   45180:	e0bffc17 	ldw	r2,-16(fp)
   45184:	e0fff617 	ldw	r3,-40(fp)
   45188:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   4518c:	e0bff417 	ldw	r2,-48(fp)
   45190:	103fc21e 	bne	r2,zero,4509c <__alt_data_end+0xfffcf53c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45194:	0005303a 	rdctl	r2,status
   45198:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4519c:	e0fffa17 	ldw	r3,-24(fp)
   451a0:	00bfff84 	movi	r2,-2
   451a4:	1884703a 	and	r2,r3,r2
   451a8:	1001703a 	wrctl	status,r2
  
  return context;
   451ac:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   451b0:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   451b4:	e0bffc17 	ldw	r2,-16(fp)
   451b8:	10800117 	ldw	r2,4(r2)
   451bc:	10c11014 	ori	r3,r2,1088
   451c0:	e0bffc17 	ldw	r2,-16(fp)
   451c4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   451c8:	e0bffc17 	ldw	r2,-16(fp)
   451cc:	10800017 	ldw	r2,0(r2)
   451d0:	10800304 	addi	r2,r2,12
   451d4:	e0fffc17 	ldw	r3,-16(fp)
   451d8:	18c00117 	ldw	r3,4(r3)
   451dc:	10c00035 	stwio	r3,0(r2)
   451e0:	e0bff717 	ldw	r2,-36(fp)
   451e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   451e8:	e0bffb17 	ldw	r2,-20(fp)
   451ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   451f0:	e0fffe17 	ldw	r3,-8(fp)
   451f4:	e0bff417 	ldw	r2,-48(fp)
   451f8:	1885c83a 	sub	r2,r3,r2
}
   451fc:	e037883a 	mov	sp,fp
   45200:	dfc00117 	ldw	ra,4(sp)
   45204:	df000017 	ldw	fp,0(sp)
   45208:	dec00204 	addi	sp,sp,8
   4520c:	f800283a 	ret

00045210 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   45210:	defff504 	addi	sp,sp,-44
   45214:	df000a15 	stw	fp,40(sp)
   45218:	df000a04 	addi	fp,sp,40
   4521c:	e13ffc15 	stw	r4,-16(fp)
   45220:	e17ffd15 	stw	r5,-12(fp)
   45224:	e1bffe15 	stw	r6,-8(fp)
   45228:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4522c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   45230:	00800174 	movhi	r2,5
   45234:	10a72804 	addi	r2,r2,-25440
   45238:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4523c:	10003f26 	beq	r2,zero,4533c <alt_alarm_start+0x12c>
  {
    if (alarm)
   45240:	e0bffc17 	ldw	r2,-16(fp)
   45244:	10003b26 	beq	r2,zero,45334 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   45248:	e0bffc17 	ldw	r2,-16(fp)
   4524c:	e0fffe17 	ldw	r3,-8(fp)
   45250:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   45254:	e0bffc17 	ldw	r2,-16(fp)
   45258:	e0ffff17 	ldw	r3,-4(fp)
   4525c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45260:	0005303a 	rdctl	r2,status
   45264:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45268:	e0fff817 	ldw	r3,-32(fp)
   4526c:	00bfff84 	movi	r2,-2
   45270:	1884703a 	and	r2,r3,r2
   45274:	1001703a 	wrctl	status,r2
  
  return context;
   45278:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4527c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   45280:	00800174 	movhi	r2,5
   45284:	10a72904 	addi	r2,r2,-25436
   45288:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4528c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   45290:	e0fffd17 	ldw	r3,-12(fp)
   45294:	e0bff617 	ldw	r2,-40(fp)
   45298:	1885883a 	add	r2,r3,r2
   4529c:	10c00044 	addi	r3,r2,1
   452a0:	e0bffc17 	ldw	r2,-16(fp)
   452a4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   452a8:	e0bffc17 	ldw	r2,-16(fp)
   452ac:	10c00217 	ldw	r3,8(r2)
   452b0:	e0bff617 	ldw	r2,-40(fp)
   452b4:	1880042e 	bgeu	r3,r2,452c8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   452b8:	e0bffc17 	ldw	r2,-16(fp)
   452bc:	00c00044 	movi	r3,1
   452c0:	10c00405 	stb	r3,16(r2)
   452c4:	00000206 	br	452d0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   452c8:	e0bffc17 	ldw	r2,-16(fp)
   452cc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   452d0:	e0fffc17 	ldw	r3,-16(fp)
   452d4:	00800174 	movhi	r2,5
   452d8:	10a05204 	addi	r2,r2,-32440
   452dc:	e0bff915 	stw	r2,-28(fp)
   452e0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   452e4:	e0bffa17 	ldw	r2,-24(fp)
   452e8:	e0fff917 	ldw	r3,-28(fp)
   452ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   452f0:	e0bff917 	ldw	r2,-28(fp)
   452f4:	10c00017 	ldw	r3,0(r2)
   452f8:	e0bffa17 	ldw	r2,-24(fp)
   452fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45300:	e0bff917 	ldw	r2,-28(fp)
   45304:	10800017 	ldw	r2,0(r2)
   45308:	e0fffa17 	ldw	r3,-24(fp)
   4530c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45310:	e0bff917 	ldw	r2,-28(fp)
   45314:	e0fffa17 	ldw	r3,-24(fp)
   45318:	10c00015 	stw	r3,0(r2)
   4531c:	e0bff717 	ldw	r2,-36(fp)
   45320:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45324:	e0bffb17 	ldw	r2,-20(fp)
   45328:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4532c:	0005883a 	mov	r2,zero
   45330:	00000306 	br	45340 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   45334:	00bffa84 	movi	r2,-22
   45338:	00000106 	br	45340 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4533c:	00bfde84 	movi	r2,-134
  }
}
   45340:	e037883a 	mov	sp,fp
   45344:	df000017 	ldw	fp,0(sp)
   45348:	dec00104 	addi	sp,sp,4
   4534c:	f800283a 	ret

00045350 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   45350:	defffa04 	addi	sp,sp,-24
   45354:	dfc00515 	stw	ra,20(sp)
   45358:	df000415 	stw	fp,16(sp)
   4535c:	df000404 	addi	fp,sp,16
   45360:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   45364:	00800244 	movi	r2,9
   45368:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   4536c:	e13ffd17 	ldw	r4,-12(fp)
   45370:	014003f4 	movhi	r5,15
   45374:	29509004 	addi	r5,r5,16960
   45378:	00405fc0 	call	405fc <__mulsi3>
   4537c:	01023c74 	movhi	r4,2289
   45380:	21346004 	addi	r4,r4,-11904
   45384:	100b883a 	mov	r5,r2
   45388:	00405ec0 	call	405ec <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   4538c:	01200034 	movhi	r4,32768
   45390:	213fffc4 	addi	r4,r4,-1
   45394:	100b883a 	mov	r5,r2
   45398:	00405ec0 	call	405ec <__udivsi3>
   4539c:	e13fff17 	ldw	r4,-4(fp)
   453a0:	100b883a 	mov	r5,r2
   453a4:	00405ec0 	call	405ec <__udivsi3>
   453a8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   453ac:	e0bffe17 	ldw	r2,-8(fp)
   453b0:	10002a26 	beq	r2,zero,4545c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   453b4:	e03ffc15 	stw	zero,-16(fp)
   453b8:	00001706 	br	45418 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   453bc:	00a00034 	movhi	r2,32768
   453c0:	10bfffc4 	addi	r2,r2,-1
   453c4:	10bfffc4 	addi	r2,r2,-1
   453c8:	103ffe1e 	bne	r2,zero,453c4 <__alt_data_end+0xfffcf864>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   453cc:	e13ffd17 	ldw	r4,-12(fp)
   453d0:	014003f4 	movhi	r5,15
   453d4:	29509004 	addi	r5,r5,16960
   453d8:	00405fc0 	call	405fc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   453dc:	01023c74 	movhi	r4,2289
   453e0:	21346004 	addi	r4,r4,-11904
   453e4:	100b883a 	mov	r5,r2
   453e8:	00405ec0 	call	405ec <__udivsi3>
   453ec:	01200034 	movhi	r4,32768
   453f0:	213fffc4 	addi	r4,r4,-1
   453f4:	100b883a 	mov	r5,r2
   453f8:	00405ec0 	call	405ec <__udivsi3>
   453fc:	1007883a 	mov	r3,r2
   45400:	e0bfff17 	ldw	r2,-4(fp)
   45404:	10c5c83a 	sub	r2,r2,r3
   45408:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   4540c:	e0bffc17 	ldw	r2,-16(fp)
   45410:	10800044 	addi	r2,r2,1
   45414:	e0bffc15 	stw	r2,-16(fp)
   45418:	e0fffc17 	ldw	r3,-16(fp)
   4541c:	e0bffe17 	ldw	r2,-8(fp)
   45420:	18bfe616 	blt	r3,r2,453bc <__alt_data_end+0xfffcf85c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   45424:	e13ffd17 	ldw	r4,-12(fp)
   45428:	014003f4 	movhi	r5,15
   4542c:	29509004 	addi	r5,r5,16960
   45430:	00405fc0 	call	405fc <__mulsi3>
   45434:	01023c74 	movhi	r4,2289
   45438:	21346004 	addi	r4,r4,-11904
   4543c:	100b883a 	mov	r5,r2
   45440:	00405ec0 	call	405ec <__udivsi3>
   45444:	1009883a 	mov	r4,r2
   45448:	e17fff17 	ldw	r5,-4(fp)
   4544c:	00405fc0 	call	405fc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   45450:	10bfffc4 	addi	r2,r2,-1
   45454:	103ffe1e 	bne	r2,zero,45450 <__alt_data_end+0xfffcf8f0>
   45458:	00000d06 	br	45490 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4545c:	e13ffd17 	ldw	r4,-12(fp)
   45460:	014003f4 	movhi	r5,15
   45464:	29509004 	addi	r5,r5,16960
   45468:	00405fc0 	call	405fc <__mulsi3>
   4546c:	01023c74 	movhi	r4,2289
   45470:	21346004 	addi	r4,r4,-11904
   45474:	100b883a 	mov	r5,r2
   45478:	00405ec0 	call	405ec <__udivsi3>
   4547c:	1009883a 	mov	r4,r2
   45480:	e17fff17 	ldw	r5,-4(fp)
   45484:	00405fc0 	call	405fc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   45488:	10bfffc4 	addi	r2,r2,-1
   4548c:	00bffe16 	blt	zero,r2,45488 <__alt_data_end+0xfffcf928>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   45490:	0005883a 	mov	r2,zero
}
   45494:	e037883a 	mov	sp,fp
   45498:	dfc00117 	ldw	ra,4(sp)
   4549c:	df000017 	ldw	fp,0(sp)
   454a0:	dec00204 	addi	sp,sp,8
   454a4:	f800283a 	ret

000454a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   454a8:	deffff04 	addi	sp,sp,-4
   454ac:	df000015 	stw	fp,0(sp)
   454b0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   454b4:	e037883a 	mov	sp,fp
   454b8:	df000017 	ldw	fp,0(sp)
   454bc:	dec00104 	addi	sp,sp,4
   454c0:	f800283a 	ret

000454c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   454c4:	defffe04 	addi	sp,sp,-8
   454c8:	dfc00115 	stw	ra,4(sp)
   454cc:	df000015 	stw	fp,0(sp)
   454d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   454d4:	00800174 	movhi	r2,5
   454d8:	10a04f04 	addi	r2,r2,-32452
   454dc:	10800017 	ldw	r2,0(r2)
   454e0:	10000526 	beq	r2,zero,454f8 <alt_get_errno+0x34>
   454e4:	00800174 	movhi	r2,5
   454e8:	10a04f04 	addi	r2,r2,-32452
   454ec:	10800017 	ldw	r2,0(r2)
   454f0:	103ee83a 	callr	r2
   454f4:	00000206 	br	45500 <alt_get_errno+0x3c>
   454f8:	00800174 	movhi	r2,5
   454fc:	10a72304 	addi	r2,r2,-25460
}
   45500:	e037883a 	mov	sp,fp
   45504:	dfc00117 	ldw	ra,4(sp)
   45508:	df000017 	ldw	fp,0(sp)
   4550c:	dec00204 	addi	sp,sp,8
   45510:	f800283a 	ret

00045514 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   45514:	defffa04 	addi	sp,sp,-24
   45518:	dfc00515 	stw	ra,20(sp)
   4551c:	df000415 	stw	fp,16(sp)
   45520:	df000404 	addi	fp,sp,16
   45524:	e13ffe15 	stw	r4,-8(fp)
   45528:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4552c:	e0bffe17 	ldw	r2,-8(fp)
   45530:	10000326 	beq	r2,zero,45540 <alt_dev_llist_insert+0x2c>
   45534:	e0bffe17 	ldw	r2,-8(fp)
   45538:	10800217 	ldw	r2,8(r2)
   4553c:	1000061e 	bne	r2,zero,45558 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   45540:	00454c40 	call	454c4 <alt_get_errno>
   45544:	1007883a 	mov	r3,r2
   45548:	00800584 	movi	r2,22
   4554c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   45550:	00bffa84 	movi	r2,-22
   45554:	00001306 	br	455a4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   45558:	e0bffe17 	ldw	r2,-8(fp)
   4555c:	e0ffff17 	ldw	r3,-4(fp)
   45560:	e0fffc15 	stw	r3,-16(fp)
   45564:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   45568:	e0bffd17 	ldw	r2,-12(fp)
   4556c:	e0fffc17 	ldw	r3,-16(fp)
   45570:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45574:	e0bffc17 	ldw	r2,-16(fp)
   45578:	10c00017 	ldw	r3,0(r2)
   4557c:	e0bffd17 	ldw	r2,-12(fp)
   45580:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45584:	e0bffc17 	ldw	r2,-16(fp)
   45588:	10800017 	ldw	r2,0(r2)
   4558c:	e0fffd17 	ldw	r3,-12(fp)
   45590:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45594:	e0bffc17 	ldw	r2,-16(fp)
   45598:	e0fffd17 	ldw	r3,-12(fp)
   4559c:	10c00015 	stw	r3,0(r2)

  return 0;  
   455a0:	0005883a 	mov	r2,zero
}
   455a4:	e037883a 	mov	sp,fp
   455a8:	dfc00117 	ldw	ra,4(sp)
   455ac:	df000017 	ldw	fp,0(sp)
   455b0:	dec00204 	addi	sp,sp,8
   455b4:	f800283a 	ret

000455b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   455b8:	defffd04 	addi	sp,sp,-12
   455bc:	dfc00215 	stw	ra,8(sp)
   455c0:	df000115 	stw	fp,4(sp)
   455c4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   455c8:	00800134 	movhi	r2,4
   455cc:	10997204 	addi	r2,r2,26056
   455d0:	e0bfff15 	stw	r2,-4(fp)
   455d4:	00000606 	br	455f0 <_do_ctors+0x38>
        (*ctor) (); 
   455d8:	e0bfff17 	ldw	r2,-4(fp)
   455dc:	10800017 	ldw	r2,0(r2)
   455e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   455e4:	e0bfff17 	ldw	r2,-4(fp)
   455e8:	10bfff04 	addi	r2,r2,-4
   455ec:	e0bfff15 	stw	r2,-4(fp)
   455f0:	e0ffff17 	ldw	r3,-4(fp)
   455f4:	00800134 	movhi	r2,4
   455f8:	10997304 	addi	r2,r2,26060
   455fc:	18bff62e 	bgeu	r3,r2,455d8 <__alt_data_end+0xfffcfa78>
        (*ctor) (); 
}
   45600:	e037883a 	mov	sp,fp
   45604:	dfc00117 	ldw	ra,4(sp)
   45608:	df000017 	ldw	fp,0(sp)
   4560c:	dec00204 	addi	sp,sp,8
   45610:	f800283a 	ret

00045614 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   45614:	defffd04 	addi	sp,sp,-12
   45618:	dfc00215 	stw	ra,8(sp)
   4561c:	df000115 	stw	fp,4(sp)
   45620:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45624:	00800134 	movhi	r2,4
   45628:	10997204 	addi	r2,r2,26056
   4562c:	e0bfff15 	stw	r2,-4(fp)
   45630:	00000606 	br	4564c <_do_dtors+0x38>
        (*dtor) (); 
   45634:	e0bfff17 	ldw	r2,-4(fp)
   45638:	10800017 	ldw	r2,0(r2)
   4563c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45640:	e0bfff17 	ldw	r2,-4(fp)
   45644:	10bfff04 	addi	r2,r2,-4
   45648:	e0bfff15 	stw	r2,-4(fp)
   4564c:	e0ffff17 	ldw	r3,-4(fp)
   45650:	00800134 	movhi	r2,4
   45654:	10997304 	addi	r2,r2,26060
   45658:	18bff62e 	bgeu	r3,r2,45634 <__alt_data_end+0xfffcfad4>
        (*dtor) (); 
}
   4565c:	e037883a 	mov	sp,fp
   45660:	dfc00117 	ldw	ra,4(sp)
   45664:	df000017 	ldw	fp,0(sp)
   45668:	dec00204 	addi	sp,sp,8
   4566c:	f800283a 	ret

00045670 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   45670:	deffff04 	addi	sp,sp,-4
   45674:	df000015 	stw	fp,0(sp)
   45678:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   4567c:	e037883a 	mov	sp,fp
   45680:	df000017 	ldw	fp,0(sp)
   45684:	dec00104 	addi	sp,sp,4
   45688:	f800283a 	ret

0004568c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4568c:	defff904 	addi	sp,sp,-28
   45690:	dfc00615 	stw	ra,24(sp)
   45694:	df000515 	stw	fp,20(sp)
   45698:	df000504 	addi	fp,sp,20
   4569c:	e13ffc15 	stw	r4,-16(fp)
   456a0:	e17ffd15 	stw	r5,-12(fp)
   456a4:	e1bffe15 	stw	r6,-8(fp)
   456a8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   456ac:	e0800217 	ldw	r2,8(fp)
   456b0:	d8800015 	stw	r2,0(sp)
   456b4:	e13ffc17 	ldw	r4,-16(fp)
   456b8:	e17ffd17 	ldw	r5,-12(fp)
   456bc:	e1bffe17 	ldw	r6,-8(fp)
   456c0:	e1ffff17 	ldw	r7,-4(fp)
   456c4:	004586c0 	call	4586c <alt_iic_isr_register>
}  
   456c8:	e037883a 	mov	sp,fp
   456cc:	dfc00117 	ldw	ra,4(sp)
   456d0:	df000017 	ldw	fp,0(sp)
   456d4:	dec00204 	addi	sp,sp,8
   456d8:	f800283a 	ret

000456dc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   456dc:	defff904 	addi	sp,sp,-28
   456e0:	df000615 	stw	fp,24(sp)
   456e4:	df000604 	addi	fp,sp,24
   456e8:	e13ffe15 	stw	r4,-8(fp)
   456ec:	e17fff15 	stw	r5,-4(fp)
   456f0:	e0bfff17 	ldw	r2,-4(fp)
   456f4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   456f8:	0005303a 	rdctl	r2,status
   456fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45700:	e0fffb17 	ldw	r3,-20(fp)
   45704:	00bfff84 	movi	r2,-2
   45708:	1884703a 	and	r2,r3,r2
   4570c:	1001703a 	wrctl	status,r2
  
  return context;
   45710:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45714:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   45718:	e0bffa17 	ldw	r2,-24(fp)
   4571c:	00c00044 	movi	r3,1
   45720:	1884983a 	sll	r2,r3,r2
   45724:	1007883a 	mov	r3,r2
   45728:	00800174 	movhi	r2,5
   4572c:	10a72704 	addi	r2,r2,-25444
   45730:	10800017 	ldw	r2,0(r2)
   45734:	1886b03a 	or	r3,r3,r2
   45738:	00800174 	movhi	r2,5
   4573c:	10a72704 	addi	r2,r2,-25444
   45740:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45744:	00800174 	movhi	r2,5
   45748:	10a72704 	addi	r2,r2,-25444
   4574c:	10800017 	ldw	r2,0(r2)
   45750:	100170fa 	wrctl	ienable,r2
   45754:	e0bffc17 	ldw	r2,-16(fp)
   45758:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4575c:	e0bffd17 	ldw	r2,-12(fp)
   45760:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45764:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   45768:	0001883a 	nop
}
   4576c:	e037883a 	mov	sp,fp
   45770:	df000017 	ldw	fp,0(sp)
   45774:	dec00104 	addi	sp,sp,4
   45778:	f800283a 	ret

0004577c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4577c:	defff904 	addi	sp,sp,-28
   45780:	df000615 	stw	fp,24(sp)
   45784:	df000604 	addi	fp,sp,24
   45788:	e13ffe15 	stw	r4,-8(fp)
   4578c:	e17fff15 	stw	r5,-4(fp)
   45790:	e0bfff17 	ldw	r2,-4(fp)
   45794:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45798:	0005303a 	rdctl	r2,status
   4579c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   457a0:	e0fffb17 	ldw	r3,-20(fp)
   457a4:	00bfff84 	movi	r2,-2
   457a8:	1884703a 	and	r2,r3,r2
   457ac:	1001703a 	wrctl	status,r2
  
  return context;
   457b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   457b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   457b8:	e0bffa17 	ldw	r2,-24(fp)
   457bc:	00c00044 	movi	r3,1
   457c0:	1884983a 	sll	r2,r3,r2
   457c4:	0084303a 	nor	r2,zero,r2
   457c8:	1007883a 	mov	r3,r2
   457cc:	00800174 	movhi	r2,5
   457d0:	10a72704 	addi	r2,r2,-25444
   457d4:	10800017 	ldw	r2,0(r2)
   457d8:	1886703a 	and	r3,r3,r2
   457dc:	00800174 	movhi	r2,5
   457e0:	10a72704 	addi	r2,r2,-25444
   457e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   457e8:	00800174 	movhi	r2,5
   457ec:	10a72704 	addi	r2,r2,-25444
   457f0:	10800017 	ldw	r2,0(r2)
   457f4:	100170fa 	wrctl	ienable,r2
   457f8:	e0bffc17 	ldw	r2,-16(fp)
   457fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45800:	e0bffd17 	ldw	r2,-12(fp)
   45804:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45808:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   4580c:	0001883a 	nop
}
   45810:	e037883a 	mov	sp,fp
   45814:	df000017 	ldw	fp,0(sp)
   45818:	dec00104 	addi	sp,sp,4
   4581c:	f800283a 	ret

00045820 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   45820:	defffc04 	addi	sp,sp,-16
   45824:	df000315 	stw	fp,12(sp)
   45828:	df000304 	addi	fp,sp,12
   4582c:	e13ffe15 	stw	r4,-8(fp)
   45830:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   45834:	000530fa 	rdctl	r2,ienable
   45838:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4583c:	e0bfff17 	ldw	r2,-4(fp)
   45840:	00c00044 	movi	r3,1
   45844:	1884983a 	sll	r2,r3,r2
   45848:	1007883a 	mov	r3,r2
   4584c:	e0bffd17 	ldw	r2,-12(fp)
   45850:	1884703a 	and	r2,r3,r2
   45854:	1004c03a 	cmpne	r2,r2,zero
   45858:	10803fcc 	andi	r2,r2,255
}
   4585c:	e037883a 	mov	sp,fp
   45860:	df000017 	ldw	fp,0(sp)
   45864:	dec00104 	addi	sp,sp,4
   45868:	f800283a 	ret

0004586c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4586c:	defff504 	addi	sp,sp,-44
   45870:	dfc00a15 	stw	ra,40(sp)
   45874:	df000915 	stw	fp,36(sp)
   45878:	df000904 	addi	fp,sp,36
   4587c:	e13ffc15 	stw	r4,-16(fp)
   45880:	e17ffd15 	stw	r5,-12(fp)
   45884:	e1bffe15 	stw	r6,-8(fp)
   45888:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4588c:	00bffa84 	movi	r2,-22
   45890:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   45894:	e0bffd17 	ldw	r2,-12(fp)
   45898:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4589c:	e0bff817 	ldw	r2,-32(fp)
   458a0:	10800808 	cmpgei	r2,r2,32
   458a4:	1000271e 	bne	r2,zero,45944 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   458a8:	0005303a 	rdctl	r2,status
   458ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   458b0:	e0fffa17 	ldw	r3,-24(fp)
   458b4:	00bfff84 	movi	r2,-2
   458b8:	1884703a 	and	r2,r3,r2
   458bc:	1001703a 	wrctl	status,r2
  
  return context;
   458c0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   458c4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   458c8:	00800174 	movhi	r2,5
   458cc:	10a73504 	addi	r2,r2,-25388
   458d0:	e0fff817 	ldw	r3,-32(fp)
   458d4:	180690fa 	slli	r3,r3,3
   458d8:	10c5883a 	add	r2,r2,r3
   458dc:	e0fffe17 	ldw	r3,-8(fp)
   458e0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   458e4:	00800174 	movhi	r2,5
   458e8:	10a73504 	addi	r2,r2,-25388
   458ec:	e0fff817 	ldw	r3,-32(fp)
   458f0:	180690fa 	slli	r3,r3,3
   458f4:	10c5883a 	add	r2,r2,r3
   458f8:	10800104 	addi	r2,r2,4
   458fc:	e0ffff17 	ldw	r3,-4(fp)
   45900:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   45904:	e0bffe17 	ldw	r2,-8(fp)
   45908:	10000526 	beq	r2,zero,45920 <alt_iic_isr_register+0xb4>
   4590c:	e0bff817 	ldw	r2,-32(fp)
   45910:	e13ffc17 	ldw	r4,-16(fp)
   45914:	100b883a 	mov	r5,r2
   45918:	00456dc0 	call	456dc <alt_ic_irq_enable>
   4591c:	00000406 	br	45930 <alt_iic_isr_register+0xc4>
   45920:	e0bff817 	ldw	r2,-32(fp)
   45924:	e13ffc17 	ldw	r4,-16(fp)
   45928:	100b883a 	mov	r5,r2
   4592c:	004577c0 	call	4577c <alt_ic_irq_disable>
   45930:	e0bff715 	stw	r2,-36(fp)
   45934:	e0bff917 	ldw	r2,-28(fp)
   45938:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4593c:	e0bffb17 	ldw	r2,-20(fp)
   45940:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   45944:	e0bff717 	ldw	r2,-36(fp)
}
   45948:	e037883a 	mov	sp,fp
   4594c:	dfc00117 	ldw	ra,4(sp)
   45950:	df000017 	ldw	fp,0(sp)
   45954:	dec00204 	addi	sp,sp,8
   45958:	f800283a 	ret

0004595c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4595c:	defff804 	addi	sp,sp,-32
   45960:	dfc00715 	stw	ra,28(sp)
   45964:	df000615 	stw	fp,24(sp)
   45968:	dc000515 	stw	r16,20(sp)
   4596c:	df000604 	addi	fp,sp,24
   45970:	e13ffb15 	stw	r4,-20(fp)
   45974:	e17ffc15 	stw	r5,-16(fp)
   45978:	e1bffd15 	stw	r6,-12(fp)
   4597c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   45980:	e13ffc17 	ldw	r4,-16(fp)
   45984:	e17ffd17 	ldw	r5,-12(fp)
   45988:	e1bffe17 	ldw	r6,-8(fp)
   4598c:	0045bf80 	call	45bf8 <open>
   45990:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   45994:	e0bffa17 	ldw	r2,-24(fp)
   45998:	10002216 	blt	r2,zero,45a24 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   4599c:	04000134 	movhi	r16,4
   459a0:	841b9d04 	addi	r16,r16,28276
   459a4:	e0bffa17 	ldw	r2,-24(fp)
   459a8:	1009883a 	mov	r4,r2
   459ac:	01400304 	movi	r5,12
   459b0:	00405fc0 	call	405fc <__mulsi3>
   459b4:	8085883a 	add	r2,r16,r2
   459b8:	10c00017 	ldw	r3,0(r2)
   459bc:	e0bffb17 	ldw	r2,-20(fp)
   459c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   459c4:	04000134 	movhi	r16,4
   459c8:	841b9d04 	addi	r16,r16,28276
   459cc:	e0bffa17 	ldw	r2,-24(fp)
   459d0:	1009883a 	mov	r4,r2
   459d4:	01400304 	movi	r5,12
   459d8:	00405fc0 	call	405fc <__mulsi3>
   459dc:	8085883a 	add	r2,r16,r2
   459e0:	10800104 	addi	r2,r2,4
   459e4:	10c00017 	ldw	r3,0(r2)
   459e8:	e0bffb17 	ldw	r2,-20(fp)
   459ec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   459f0:	04000134 	movhi	r16,4
   459f4:	841b9d04 	addi	r16,r16,28276
   459f8:	e0bffa17 	ldw	r2,-24(fp)
   459fc:	1009883a 	mov	r4,r2
   45a00:	01400304 	movi	r5,12
   45a04:	00405fc0 	call	405fc <__mulsi3>
   45a08:	8085883a 	add	r2,r16,r2
   45a0c:	10800204 	addi	r2,r2,8
   45a10:	10c00017 	ldw	r3,0(r2)
   45a14:	e0bffb17 	ldw	r2,-20(fp)
   45a18:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   45a1c:	e13ffa17 	ldw	r4,-24(fp)
   45a20:	0043a400 	call	43a40 <alt_release_fd>
  }
} 
   45a24:	e6ffff04 	addi	sp,fp,-4
   45a28:	dfc00217 	ldw	ra,8(sp)
   45a2c:	df000117 	ldw	fp,4(sp)
   45a30:	dc000017 	ldw	r16,0(sp)
   45a34:	dec00304 	addi	sp,sp,12
   45a38:	f800283a 	ret

00045a3c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   45a3c:	defffb04 	addi	sp,sp,-20
   45a40:	dfc00415 	stw	ra,16(sp)
   45a44:	df000315 	stw	fp,12(sp)
   45a48:	df000304 	addi	fp,sp,12
   45a4c:	e13ffd15 	stw	r4,-12(fp)
   45a50:	e17ffe15 	stw	r5,-8(fp)
   45a54:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   45a58:	01000134 	movhi	r4,4
   45a5c:	211ba004 	addi	r4,r4,28288
   45a60:	e17ffd17 	ldw	r5,-12(fp)
   45a64:	01800044 	movi	r6,1
   45a68:	01c07fc4 	movi	r7,511
   45a6c:	004595c0 	call	4595c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   45a70:	01000134 	movhi	r4,4
   45a74:	211b9d04 	addi	r4,r4,28276
   45a78:	e17ffe17 	ldw	r5,-8(fp)
   45a7c:	000d883a 	mov	r6,zero
   45a80:	01c07fc4 	movi	r7,511
   45a84:	004595c0 	call	4595c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   45a88:	01000134 	movhi	r4,4
   45a8c:	211ba304 	addi	r4,r4,28300
   45a90:	e17fff17 	ldw	r5,-4(fp)
   45a94:	01800044 	movi	r6,1
   45a98:	01c07fc4 	movi	r7,511
   45a9c:	004595c0 	call	4595c <alt_open_fd>
}  
   45aa0:	e037883a 	mov	sp,fp
   45aa4:	dfc00117 	ldw	ra,4(sp)
   45aa8:	df000017 	ldw	fp,0(sp)
   45aac:	dec00204 	addi	sp,sp,8
   45ab0:	f800283a 	ret

00045ab4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45ab4:	defffe04 	addi	sp,sp,-8
   45ab8:	dfc00115 	stw	ra,4(sp)
   45abc:	df000015 	stw	fp,0(sp)
   45ac0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45ac4:	00800174 	movhi	r2,5
   45ac8:	10a04f04 	addi	r2,r2,-32452
   45acc:	10800017 	ldw	r2,0(r2)
   45ad0:	10000526 	beq	r2,zero,45ae8 <alt_get_errno+0x34>
   45ad4:	00800174 	movhi	r2,5
   45ad8:	10a04f04 	addi	r2,r2,-32452
   45adc:	10800017 	ldw	r2,0(r2)
   45ae0:	103ee83a 	callr	r2
   45ae4:	00000206 	br	45af0 <alt_get_errno+0x3c>
   45ae8:	00800174 	movhi	r2,5
   45aec:	10a72304 	addi	r2,r2,-25460
}
   45af0:	e037883a 	mov	sp,fp
   45af4:	dfc00117 	ldw	ra,4(sp)
   45af8:	df000017 	ldw	fp,0(sp)
   45afc:	dec00204 	addi	sp,sp,8
   45b00:	f800283a 	ret

00045b04 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   45b04:	defffb04 	addi	sp,sp,-20
   45b08:	dfc00415 	stw	ra,16(sp)
   45b0c:	df000315 	stw	fp,12(sp)
   45b10:	dc000215 	stw	r16,8(sp)
   45b14:	df000304 	addi	fp,sp,12
   45b18:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   45b1c:	e0bffe17 	ldw	r2,-8(fp)
   45b20:	10800217 	ldw	r2,8(r2)
   45b24:	10d00034 	orhi	r3,r2,16384
   45b28:	e0bffe17 	ldw	r2,-8(fp)
   45b2c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45b30:	e03ffd15 	stw	zero,-12(fp)
   45b34:	00002306 	br	45bc4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45b38:	04000134 	movhi	r16,4
   45b3c:	841b9d04 	addi	r16,r16,28276
   45b40:	e0bffd17 	ldw	r2,-12(fp)
   45b44:	1009883a 	mov	r4,r2
   45b48:	01400304 	movi	r5,12
   45b4c:	00405fc0 	call	405fc <__mulsi3>
   45b50:	8085883a 	add	r2,r16,r2
   45b54:	10c00017 	ldw	r3,0(r2)
   45b58:	e0bffe17 	ldw	r2,-8(fp)
   45b5c:	10800017 	ldw	r2,0(r2)
   45b60:	1880151e 	bne	r3,r2,45bb8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45b64:	04000134 	movhi	r16,4
   45b68:	841b9d04 	addi	r16,r16,28276
   45b6c:	e0bffd17 	ldw	r2,-12(fp)
   45b70:	1009883a 	mov	r4,r2
   45b74:	01400304 	movi	r5,12
   45b78:	00405fc0 	call	405fc <__mulsi3>
   45b7c:	8085883a 	add	r2,r16,r2
   45b80:	10800204 	addi	r2,r2,8
   45b84:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45b88:	10000b0e 	bge	r2,zero,45bb8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   45b8c:	e13ffd17 	ldw	r4,-12(fp)
   45b90:	01400304 	movi	r5,12
   45b94:	00405fc0 	call	405fc <__mulsi3>
   45b98:	1007883a 	mov	r3,r2
   45b9c:	00800134 	movhi	r2,4
   45ba0:	109b9d04 	addi	r2,r2,28276
   45ba4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45ba8:	e0bffe17 	ldw	r2,-8(fp)
   45bac:	18800226 	beq	r3,r2,45bb8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   45bb0:	00bffcc4 	movi	r2,-13
   45bb4:	00000a06 	br	45be0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45bb8:	e0bffd17 	ldw	r2,-12(fp)
   45bbc:	10800044 	addi	r2,r2,1
   45bc0:	e0bffd15 	stw	r2,-12(fp)
   45bc4:	00800174 	movhi	r2,5
   45bc8:	10a04e04 	addi	r2,r2,-32456
   45bcc:	10800017 	ldw	r2,0(r2)
   45bd0:	1007883a 	mov	r3,r2
   45bd4:	e0bffd17 	ldw	r2,-12(fp)
   45bd8:	18bfd72e 	bgeu	r3,r2,45b38 <__alt_data_end+0xfffcffd8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   45bdc:	0005883a 	mov	r2,zero
}
   45be0:	e6ffff04 	addi	sp,fp,-4
   45be4:	dfc00217 	ldw	ra,8(sp)
   45be8:	df000117 	ldw	fp,4(sp)
   45bec:	dc000017 	ldw	r16,0(sp)
   45bf0:	dec00304 	addi	sp,sp,12
   45bf4:	f800283a 	ret

00045bf8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   45bf8:	defff604 	addi	sp,sp,-40
   45bfc:	dfc00915 	stw	ra,36(sp)
   45c00:	df000815 	stw	fp,32(sp)
   45c04:	df000804 	addi	fp,sp,32
   45c08:	e13ffd15 	stw	r4,-12(fp)
   45c0c:	e17ffe15 	stw	r5,-8(fp)
   45c10:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   45c14:	00bfffc4 	movi	r2,-1
   45c18:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   45c1c:	00bffb44 	movi	r2,-19
   45c20:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   45c24:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   45c28:	e13ffd17 	ldw	r4,-12(fp)
   45c2c:	01400174 	movhi	r5,5
   45c30:	29604c04 	addi	r5,r5,-32464
   45c34:	0045f140 	call	45f14 <alt_find_dev>
   45c38:	e0bff815 	stw	r2,-32(fp)
   45c3c:	e0bff817 	ldw	r2,-32(fp)
   45c40:	1000051e 	bne	r2,zero,45c58 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   45c44:	e13ffd17 	ldw	r4,-12(fp)
   45c48:	0045fa40 	call	45fa4 <alt_find_file>
   45c4c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   45c50:	00800044 	movi	r2,1
   45c54:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   45c58:	e0bff817 	ldw	r2,-32(fp)
   45c5c:	10002b26 	beq	r2,zero,45d0c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   45c60:	e13ff817 	ldw	r4,-32(fp)
   45c64:	00460b80 	call	460b8 <alt_get_fd>
   45c68:	e0bff915 	stw	r2,-28(fp)
   45c6c:	e0bff917 	ldw	r2,-28(fp)
   45c70:	1000030e 	bge	r2,zero,45c80 <open+0x88>
    {
      status = index;
   45c74:	e0bff917 	ldw	r2,-28(fp)
   45c78:	e0bffa15 	stw	r2,-24(fp)
   45c7c:	00002506 	br	45d14 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   45c80:	e13ff917 	ldw	r4,-28(fp)
   45c84:	01400304 	movi	r5,12
   45c88:	00405fc0 	call	405fc <__mulsi3>
   45c8c:	1007883a 	mov	r3,r2
   45c90:	00800134 	movhi	r2,4
   45c94:	109b9d04 	addi	r2,r2,28276
   45c98:	1885883a 	add	r2,r3,r2
   45c9c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   45ca0:	e0fffe17 	ldw	r3,-8(fp)
   45ca4:	00900034 	movhi	r2,16384
   45ca8:	10bfffc4 	addi	r2,r2,-1
   45cac:	1886703a 	and	r3,r3,r2
   45cb0:	e0bffc17 	ldw	r2,-16(fp)
   45cb4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   45cb8:	e0bffb17 	ldw	r2,-20(fp)
   45cbc:	1000051e 	bne	r2,zero,45cd4 <open+0xdc>
   45cc0:	e13ffc17 	ldw	r4,-16(fp)
   45cc4:	0045b040 	call	45b04 <alt_file_locked>
   45cc8:	e0bffa15 	stw	r2,-24(fp)
   45ccc:	e0bffa17 	ldw	r2,-24(fp)
   45cd0:	10001016 	blt	r2,zero,45d14 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   45cd4:	e0bff817 	ldw	r2,-32(fp)
   45cd8:	10800317 	ldw	r2,12(r2)
   45cdc:	10000826 	beq	r2,zero,45d00 <open+0x108>
   45ce0:	e0bff817 	ldw	r2,-32(fp)
   45ce4:	10800317 	ldw	r2,12(r2)
   45ce8:	e13ffc17 	ldw	r4,-16(fp)
   45cec:	e17ffd17 	ldw	r5,-12(fp)
   45cf0:	e1bffe17 	ldw	r6,-8(fp)
   45cf4:	e1ffff17 	ldw	r7,-4(fp)
   45cf8:	103ee83a 	callr	r2
   45cfc:	00000106 	br	45d04 <open+0x10c>
   45d00:	0005883a 	mov	r2,zero
   45d04:	e0bffa15 	stw	r2,-24(fp)
   45d08:	00000206 	br	45d14 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   45d0c:	00bffb44 	movi	r2,-19
   45d10:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   45d14:	e0bffa17 	ldw	r2,-24(fp)
   45d18:	1000090e 	bge	r2,zero,45d40 <open+0x148>
  {
    alt_release_fd (index);  
   45d1c:	e13ff917 	ldw	r4,-28(fp)
   45d20:	0043a400 	call	43a40 <alt_release_fd>
    ALT_ERRNO = -status;
   45d24:	0045ab40 	call	45ab4 <alt_get_errno>
   45d28:	1007883a 	mov	r3,r2
   45d2c:	e0bffa17 	ldw	r2,-24(fp)
   45d30:	0085c83a 	sub	r2,zero,r2
   45d34:	18800015 	stw	r2,0(r3)
    return -1;
   45d38:	00bfffc4 	movi	r2,-1
   45d3c:	00000106 	br	45d44 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   45d40:	e0bff917 	ldw	r2,-28(fp)
}
   45d44:	e037883a 	mov	sp,fp
   45d48:	dfc00117 	ldw	ra,4(sp)
   45d4c:	df000017 	ldw	fp,0(sp)
   45d50:	dec00204 	addi	sp,sp,8
   45d54:	f800283a 	ret

00045d58 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   45d58:	defffa04 	addi	sp,sp,-24
   45d5c:	df000515 	stw	fp,20(sp)
   45d60:	df000504 	addi	fp,sp,20
   45d64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45d68:	0005303a 	rdctl	r2,status
   45d6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45d70:	e0fffc17 	ldw	r3,-16(fp)
   45d74:	00bfff84 	movi	r2,-2
   45d78:	1884703a 	and	r2,r3,r2
   45d7c:	1001703a 	wrctl	status,r2
  
  return context;
   45d80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   45d84:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   45d88:	e0bfff17 	ldw	r2,-4(fp)
   45d8c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   45d90:	e0bffd17 	ldw	r2,-12(fp)
   45d94:	10800017 	ldw	r2,0(r2)
   45d98:	e0fffd17 	ldw	r3,-12(fp)
   45d9c:	18c00117 	ldw	r3,4(r3)
   45da0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   45da4:	e0bffd17 	ldw	r2,-12(fp)
   45da8:	10800117 	ldw	r2,4(r2)
   45dac:	e0fffd17 	ldw	r3,-12(fp)
   45db0:	18c00017 	ldw	r3,0(r3)
   45db4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   45db8:	e0bffd17 	ldw	r2,-12(fp)
   45dbc:	e0fffd17 	ldw	r3,-12(fp)
   45dc0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   45dc4:	e0bffd17 	ldw	r2,-12(fp)
   45dc8:	e0fffd17 	ldw	r3,-12(fp)
   45dcc:	10c00015 	stw	r3,0(r2)
   45dd0:	e0bffb17 	ldw	r2,-20(fp)
   45dd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45dd8:	e0bffe17 	ldw	r2,-8(fp)
   45ddc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   45de0:	e037883a 	mov	sp,fp
   45de4:	df000017 	ldw	fp,0(sp)
   45de8:	dec00104 	addi	sp,sp,4
   45dec:	f800283a 	ret

00045df0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   45df0:	defffb04 	addi	sp,sp,-20
   45df4:	dfc00415 	stw	ra,16(sp)
   45df8:	df000315 	stw	fp,12(sp)
   45dfc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   45e00:	d0a00c17 	ldw	r2,-32720(gp)
   45e04:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   45e08:	d0a6e317 	ldw	r2,-25716(gp)
   45e0c:	10800044 	addi	r2,r2,1
   45e10:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45e14:	00002e06 	br	45ed0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   45e18:	e0bffd17 	ldw	r2,-12(fp)
   45e1c:	10800017 	ldw	r2,0(r2)
   45e20:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   45e24:	e0bffd17 	ldw	r2,-12(fp)
   45e28:	10800403 	ldbu	r2,16(r2)
   45e2c:	10803fcc 	andi	r2,r2,255
   45e30:	10000426 	beq	r2,zero,45e44 <alt_tick+0x54>
   45e34:	d0a6e317 	ldw	r2,-25716(gp)
   45e38:	1000021e 	bne	r2,zero,45e44 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   45e3c:	e0bffd17 	ldw	r2,-12(fp)
   45e40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   45e44:	e0bffd17 	ldw	r2,-12(fp)
   45e48:	10800217 	ldw	r2,8(r2)
   45e4c:	d0e6e317 	ldw	r3,-25716(gp)
   45e50:	18801d36 	bltu	r3,r2,45ec8 <alt_tick+0xd8>
   45e54:	e0bffd17 	ldw	r2,-12(fp)
   45e58:	10800403 	ldbu	r2,16(r2)
   45e5c:	10803fcc 	andi	r2,r2,255
   45e60:	1000191e 	bne	r2,zero,45ec8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   45e64:	e0bffd17 	ldw	r2,-12(fp)
   45e68:	10800317 	ldw	r2,12(r2)
   45e6c:	e0fffd17 	ldw	r3,-12(fp)
   45e70:	18c00517 	ldw	r3,20(r3)
   45e74:	1809883a 	mov	r4,r3
   45e78:	103ee83a 	callr	r2
   45e7c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   45e80:	e0bfff17 	ldw	r2,-4(fp)
   45e84:	1000031e 	bne	r2,zero,45e94 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   45e88:	e13ffd17 	ldw	r4,-12(fp)
   45e8c:	0045d580 	call	45d58 <alt_alarm_stop>
   45e90:	00000d06 	br	45ec8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   45e94:	e0bffd17 	ldw	r2,-12(fp)
   45e98:	10c00217 	ldw	r3,8(r2)
   45e9c:	e0bfff17 	ldw	r2,-4(fp)
   45ea0:	1887883a 	add	r3,r3,r2
   45ea4:	e0bffd17 	ldw	r2,-12(fp)
   45ea8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   45eac:	e0bffd17 	ldw	r2,-12(fp)
   45eb0:	10c00217 	ldw	r3,8(r2)
   45eb4:	d0a6e317 	ldw	r2,-25716(gp)
   45eb8:	1880032e 	bgeu	r3,r2,45ec8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   45ebc:	e0bffd17 	ldw	r2,-12(fp)
   45ec0:	00c00044 	movi	r3,1
   45ec4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   45ec8:	e0bffe17 	ldw	r2,-8(fp)
   45ecc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45ed0:	e0fffd17 	ldw	r3,-12(fp)
   45ed4:	d0a00c04 	addi	r2,gp,-32720
   45ed8:	18bfcf1e 	bne	r3,r2,45e18 <__alt_data_end+0xfffd02b8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   45edc:	0001883a 	nop
}
   45ee0:	e037883a 	mov	sp,fp
   45ee4:	dfc00117 	ldw	ra,4(sp)
   45ee8:	df000017 	ldw	fp,0(sp)
   45eec:	dec00204 	addi	sp,sp,8
   45ef0:	f800283a 	ret

00045ef4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   45ef4:	deffff04 	addi	sp,sp,-4
   45ef8:	df000015 	stw	fp,0(sp)
   45efc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   45f00:	000170fa 	wrctl	ienable,zero
}
   45f04:	e037883a 	mov	sp,fp
   45f08:	df000017 	ldw	fp,0(sp)
   45f0c:	dec00104 	addi	sp,sp,4
   45f10:	f800283a 	ret

00045f14 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   45f14:	defffa04 	addi	sp,sp,-24
   45f18:	dfc00515 	stw	ra,20(sp)
   45f1c:	df000415 	stw	fp,16(sp)
   45f20:	df000404 	addi	fp,sp,16
   45f24:	e13ffe15 	stw	r4,-8(fp)
   45f28:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   45f2c:	e0bfff17 	ldw	r2,-4(fp)
   45f30:	10800017 	ldw	r2,0(r2)
   45f34:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   45f38:	e13ffe17 	ldw	r4,-8(fp)
   45f3c:	004076c0 	call	4076c <strlen>
   45f40:	10800044 	addi	r2,r2,1
   45f44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45f48:	00000d06 	br	45f80 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   45f4c:	e0bffc17 	ldw	r2,-16(fp)
   45f50:	10c00217 	ldw	r3,8(r2)
   45f54:	e0bffd17 	ldw	r2,-12(fp)
   45f58:	1809883a 	mov	r4,r3
   45f5c:	e17ffe17 	ldw	r5,-8(fp)
   45f60:	100d883a 	mov	r6,r2
   45f64:	00462740 	call	46274 <memcmp>
   45f68:	1000021e 	bne	r2,zero,45f74 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   45f6c:	e0bffc17 	ldw	r2,-16(fp)
   45f70:	00000706 	br	45f90 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   45f74:	e0bffc17 	ldw	r2,-16(fp)
   45f78:	10800017 	ldw	r2,0(r2)
   45f7c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45f80:	e0fffc17 	ldw	r3,-16(fp)
   45f84:	e0bfff17 	ldw	r2,-4(fp)
   45f88:	18bff01e 	bne	r3,r2,45f4c <__alt_data_end+0xfffd03ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   45f8c:	0005883a 	mov	r2,zero
}
   45f90:	e037883a 	mov	sp,fp
   45f94:	dfc00117 	ldw	ra,4(sp)
   45f98:	df000017 	ldw	fp,0(sp)
   45f9c:	dec00204 	addi	sp,sp,8
   45fa0:	f800283a 	ret

00045fa4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   45fa4:	defffb04 	addi	sp,sp,-20
   45fa8:	dfc00415 	stw	ra,16(sp)
   45fac:	df000315 	stw	fp,12(sp)
   45fb0:	df000304 	addi	fp,sp,12
   45fb4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   45fb8:	00800174 	movhi	r2,5
   45fbc:	10a04a04 	addi	r2,r2,-32472
   45fc0:	10800017 	ldw	r2,0(r2)
   45fc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45fc8:	00003106 	br	46090 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   45fcc:	e0bffd17 	ldw	r2,-12(fp)
   45fd0:	10800217 	ldw	r2,8(r2)
   45fd4:	1009883a 	mov	r4,r2
   45fd8:	004076c0 	call	4076c <strlen>
   45fdc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   45fe0:	e0bffd17 	ldw	r2,-12(fp)
   45fe4:	10c00217 	ldw	r3,8(r2)
   45fe8:	e0bffe17 	ldw	r2,-8(fp)
   45fec:	10bfffc4 	addi	r2,r2,-1
   45ff0:	1885883a 	add	r2,r3,r2
   45ff4:	10800003 	ldbu	r2,0(r2)
   45ff8:	10803fcc 	andi	r2,r2,255
   45ffc:	1080201c 	xori	r2,r2,128
   46000:	10bfe004 	addi	r2,r2,-128
   46004:	10800bd8 	cmpnei	r2,r2,47
   46008:	1000031e 	bne	r2,zero,46018 <alt_find_file+0x74>
    {
      len -= 1;
   4600c:	e0bffe17 	ldw	r2,-8(fp)
   46010:	10bfffc4 	addi	r2,r2,-1
   46014:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   46018:	e0bffe17 	ldw	r2,-8(fp)
   4601c:	e0ffff17 	ldw	r3,-4(fp)
   46020:	1885883a 	add	r2,r3,r2
   46024:	10800003 	ldbu	r2,0(r2)
   46028:	10803fcc 	andi	r2,r2,255
   4602c:	1080201c 	xori	r2,r2,128
   46030:	10bfe004 	addi	r2,r2,-128
   46034:	10800be0 	cmpeqi	r2,r2,47
   46038:	1000081e 	bne	r2,zero,4605c <alt_find_file+0xb8>
   4603c:	e0bffe17 	ldw	r2,-8(fp)
   46040:	e0ffff17 	ldw	r3,-4(fp)
   46044:	1885883a 	add	r2,r3,r2
   46048:	10800003 	ldbu	r2,0(r2)
   4604c:	10803fcc 	andi	r2,r2,255
   46050:	1080201c 	xori	r2,r2,128
   46054:	10bfe004 	addi	r2,r2,-128
   46058:	10000a1e 	bne	r2,zero,46084 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4605c:	e0bffd17 	ldw	r2,-12(fp)
   46060:	10c00217 	ldw	r3,8(r2)
   46064:	e0bffe17 	ldw	r2,-8(fp)
   46068:	1809883a 	mov	r4,r3
   4606c:	e17fff17 	ldw	r5,-4(fp)
   46070:	100d883a 	mov	r6,r2
   46074:	00462740 	call	46274 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   46078:	1000021e 	bne	r2,zero,46084 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4607c:	e0bffd17 	ldw	r2,-12(fp)
   46080:	00000806 	br	460a4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   46084:	e0bffd17 	ldw	r2,-12(fp)
   46088:	10800017 	ldw	r2,0(r2)
   4608c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   46090:	e0fffd17 	ldw	r3,-12(fp)
   46094:	00800174 	movhi	r2,5
   46098:	10a04a04 	addi	r2,r2,-32472
   4609c:	18bfcb1e 	bne	r3,r2,45fcc <__alt_data_end+0xfffd046c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   460a0:	0005883a 	mov	r2,zero
}
   460a4:	e037883a 	mov	sp,fp
   460a8:	dfc00117 	ldw	ra,4(sp)
   460ac:	df000017 	ldw	fp,0(sp)
   460b0:	dec00204 	addi	sp,sp,8
   460b4:	f800283a 	ret

000460b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   460b8:	defffa04 	addi	sp,sp,-24
   460bc:	dfc00515 	stw	ra,20(sp)
   460c0:	df000415 	stw	fp,16(sp)
   460c4:	dc000315 	stw	r16,12(sp)
   460c8:	df000404 	addi	fp,sp,16
   460cc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   460d0:	00bffa04 	movi	r2,-24
   460d4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   460d8:	e03ffc15 	stw	zero,-16(fp)
   460dc:	00002106 	br	46164 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   460e0:	04000134 	movhi	r16,4
   460e4:	841b9d04 	addi	r16,r16,28276
   460e8:	e0bffc17 	ldw	r2,-16(fp)
   460ec:	1009883a 	mov	r4,r2
   460f0:	01400304 	movi	r5,12
   460f4:	00405fc0 	call	405fc <__mulsi3>
   460f8:	8085883a 	add	r2,r16,r2
   460fc:	10800017 	ldw	r2,0(r2)
   46100:	1000151e 	bne	r2,zero,46158 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   46104:	04000134 	movhi	r16,4
   46108:	841b9d04 	addi	r16,r16,28276
   4610c:	e0bffc17 	ldw	r2,-16(fp)
   46110:	1009883a 	mov	r4,r2
   46114:	01400304 	movi	r5,12
   46118:	00405fc0 	call	405fc <__mulsi3>
   4611c:	8085883a 	add	r2,r16,r2
   46120:	e0fffe17 	ldw	r3,-8(fp)
   46124:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   46128:	00800174 	movhi	r2,5
   4612c:	10a04e04 	addi	r2,r2,-32456
   46130:	10c00017 	ldw	r3,0(r2)
   46134:	e0bffc17 	ldw	r2,-16(fp)
   46138:	1880040e 	bge	r3,r2,4614c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   4613c:	00800174 	movhi	r2,5
   46140:	10a04e04 	addi	r2,r2,-32456
   46144:	e0fffc17 	ldw	r3,-16(fp)
   46148:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4614c:	e0bffc17 	ldw	r2,-16(fp)
   46150:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   46154:	00000606 	br	46170 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   46158:	e0bffc17 	ldw	r2,-16(fp)
   4615c:	10800044 	addi	r2,r2,1
   46160:	e0bffc15 	stw	r2,-16(fp)
   46164:	e0bffc17 	ldw	r2,-16(fp)
   46168:	10800810 	cmplti	r2,r2,32
   4616c:	103fdc1e 	bne	r2,zero,460e0 <__alt_data_end+0xfffd0580>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   46170:	e0bffd17 	ldw	r2,-12(fp)
}
   46174:	e6ffff04 	addi	sp,fp,-4
   46178:	dfc00217 	ldw	ra,8(sp)
   4617c:	df000117 	ldw	fp,4(sp)
   46180:	dc000017 	ldw	r16,0(sp)
   46184:	dec00304 	addi	sp,sp,12
   46188:	f800283a 	ret

0004618c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4618c:	defffe04 	addi	sp,sp,-8
   46190:	df000115 	stw	fp,4(sp)
   46194:	df000104 	addi	fp,sp,4
   46198:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4619c:	e0bfff17 	ldw	r2,-4(fp)
   461a0:	10bffe84 	addi	r2,r2,-6
   461a4:	10c00428 	cmpgeui	r3,r2,16
   461a8:	18001a1e 	bne	r3,zero,46214 <alt_exception_cause_generated_bad_addr+0x88>
   461ac:	100690ba 	slli	r3,r2,2
   461b0:	00800134 	movhi	r2,4
   461b4:	10987104 	addi	r2,r2,25028
   461b8:	1885883a 	add	r2,r3,r2
   461bc:	10800017 	ldw	r2,0(r2)
   461c0:	1000683a 	jmp	r2
   461c4:	00046204 	movi	zero,4488
   461c8:	00046204 	movi	zero,4488
   461cc:	00046214 	movui	zero,4488
   461d0:	00046214 	movui	zero,4488
   461d4:	00046214 	movui	zero,4488
   461d8:	00046204 	movi	zero,4488
   461dc:	0004620c 	andi	zero,zero,4488
   461e0:	00046214 	movui	zero,4488
   461e4:	00046204 	movi	zero,4488
   461e8:	00046204 	movi	zero,4488
   461ec:	00046214 	movui	zero,4488
   461f0:	00046204 	movi	zero,4488
   461f4:	0004620c 	andi	zero,zero,4488
   461f8:	00046214 	movui	zero,4488
   461fc:	00046214 	movui	zero,4488
   46200:	00046204 	movi	zero,4488
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   46204:	00800044 	movi	r2,1
   46208:	00000306 	br	46218 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   4620c:	0005883a 	mov	r2,zero
   46210:	00000106 	br	46218 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   46214:	0005883a 	mov	r2,zero
  }
}
   46218:	e037883a 	mov	sp,fp
   4621c:	df000017 	ldw	fp,0(sp)
   46220:	dec00104 	addi	sp,sp,4
   46224:	f800283a 	ret

00046228 <atexit>:
   46228:	200b883a 	mov	r5,r4
   4622c:	000d883a 	mov	r6,zero
   46230:	0009883a 	mov	r4,zero
   46234:	000f883a 	mov	r7,zero
   46238:	00462f01 	jmpi	462f0 <__register_exitproc>

0004623c <exit>:
   4623c:	defffe04 	addi	sp,sp,-8
   46240:	000b883a 	mov	r5,zero
   46244:	dc000015 	stw	r16,0(sp)
   46248:	dfc00115 	stw	ra,4(sp)
   4624c:	2021883a 	mov	r16,r4
   46250:	00464040 	call	46404 <__call_exitprocs>
   46254:	00800174 	movhi	r2,5
   46258:	10a04604 	addi	r2,r2,-32488
   4625c:	11000017 	ldw	r4,0(r2)
   46260:	20800f17 	ldw	r2,60(r4)
   46264:	10000126 	beq	r2,zero,4626c <exit+0x30>
   46268:	103ee83a 	callr	r2
   4626c:	8009883a 	mov	r4,r16
   46270:	00465980 	call	46598 <_exit>

00046274 <memcmp>:
   46274:	01c000c4 	movi	r7,3
   46278:	3980192e 	bgeu	r7,r6,462e0 <memcmp+0x6c>
   4627c:	2144b03a 	or	r2,r4,r5
   46280:	11c4703a 	and	r2,r2,r7
   46284:	10000f26 	beq	r2,zero,462c4 <memcmp+0x50>
   46288:	20800003 	ldbu	r2,0(r4)
   4628c:	28c00003 	ldbu	r3,0(r5)
   46290:	10c0151e 	bne	r2,r3,462e8 <memcmp+0x74>
   46294:	31bfff84 	addi	r6,r6,-2
   46298:	01ffffc4 	movi	r7,-1
   4629c:	00000406 	br	462b0 <memcmp+0x3c>
   462a0:	20800003 	ldbu	r2,0(r4)
   462a4:	28c00003 	ldbu	r3,0(r5)
   462a8:	31bfffc4 	addi	r6,r6,-1
   462ac:	10c00e1e 	bne	r2,r3,462e8 <memcmp+0x74>
   462b0:	21000044 	addi	r4,r4,1
   462b4:	29400044 	addi	r5,r5,1
   462b8:	31fff91e 	bne	r6,r7,462a0 <__alt_data_end+0xfffd0740>
   462bc:	0005883a 	mov	r2,zero
   462c0:	f800283a 	ret
   462c4:	20c00017 	ldw	r3,0(r4)
   462c8:	28800017 	ldw	r2,0(r5)
   462cc:	1880041e 	bne	r3,r2,462e0 <memcmp+0x6c>
   462d0:	31bfff04 	addi	r6,r6,-4
   462d4:	21000104 	addi	r4,r4,4
   462d8:	29400104 	addi	r5,r5,4
   462dc:	39bff936 	bltu	r7,r6,462c4 <__alt_data_end+0xfffd0764>
   462e0:	303fe91e 	bne	r6,zero,46288 <__alt_data_end+0xfffd0728>
   462e4:	003ff506 	br	462bc <__alt_data_end+0xfffd075c>
   462e8:	10c5c83a 	sub	r2,r2,r3
   462ec:	f800283a 	ret

000462f0 <__register_exitproc>:
   462f0:	00800174 	movhi	r2,5
   462f4:	defffa04 	addi	sp,sp,-24
   462f8:	10a04604 	addi	r2,r2,-32488
   462fc:	dc000315 	stw	r16,12(sp)
   46300:	14000017 	ldw	r16,0(r2)
   46304:	dc400415 	stw	r17,16(sp)
   46308:	dfc00515 	stw	ra,20(sp)
   4630c:	80805217 	ldw	r2,328(r16)
   46310:	2023883a 	mov	r17,r4
   46314:	10003626 	beq	r2,zero,463f0 <__register_exitproc+0x100>
   46318:	10c00117 	ldw	r3,4(r2)
   4631c:	010007c4 	movi	r4,31
   46320:	20c00e16 	blt	r4,r3,4635c <__register_exitproc+0x6c>
   46324:	1a400044 	addi	r9,r3,1
   46328:	8800211e 	bne	r17,zero,463b0 <__register_exitproc+0xc0>
   4632c:	18c00084 	addi	r3,r3,2
   46330:	18c7883a 	add	r3,r3,r3
   46334:	18c7883a 	add	r3,r3,r3
   46338:	12400115 	stw	r9,4(r2)
   4633c:	10c7883a 	add	r3,r2,r3
   46340:	19400015 	stw	r5,0(r3)
   46344:	0005883a 	mov	r2,zero
   46348:	dfc00517 	ldw	ra,20(sp)
   4634c:	dc400417 	ldw	r17,16(sp)
   46350:	dc000317 	ldw	r16,12(sp)
   46354:	dec00604 	addi	sp,sp,24
   46358:	f800283a 	ret
   4635c:	00800034 	movhi	r2,0
   46360:	10800004 	addi	r2,r2,0
   46364:	10002526 	beq	r2,zero,463fc <__register_exitproc+0x10c>
   46368:	01006404 	movi	r4,400
   4636c:	d9400015 	stw	r5,0(sp)
   46370:	d9800115 	stw	r6,4(sp)
   46374:	d9c00215 	stw	r7,8(sp)
   46378:	00000000 	call	0 <__alt_mem_RAM_jesus-0x40000>
   4637c:	d9400017 	ldw	r5,0(sp)
   46380:	d9800117 	ldw	r6,4(sp)
   46384:	d9c00217 	ldw	r7,8(sp)
   46388:	10001c26 	beq	r2,zero,463fc <__register_exitproc+0x10c>
   4638c:	80c05217 	ldw	r3,328(r16)
   46390:	10000115 	stw	zero,4(r2)
   46394:	02400044 	movi	r9,1
   46398:	10c00015 	stw	r3,0(r2)
   4639c:	80805215 	stw	r2,328(r16)
   463a0:	10006215 	stw	zero,392(r2)
   463a4:	10006315 	stw	zero,396(r2)
   463a8:	0007883a 	mov	r3,zero
   463ac:	883fdf26 	beq	r17,zero,4632c <__alt_data_end+0xfffd07cc>
   463b0:	18d1883a 	add	r8,r3,r3
   463b4:	4211883a 	add	r8,r8,r8
   463b8:	1211883a 	add	r8,r2,r8
   463bc:	41802215 	stw	r6,136(r8)
   463c0:	01000044 	movi	r4,1
   463c4:	11806217 	ldw	r6,392(r2)
   463c8:	20c8983a 	sll	r4,r4,r3
   463cc:	310cb03a 	or	r6,r6,r4
   463d0:	11806215 	stw	r6,392(r2)
   463d4:	41c04215 	stw	r7,264(r8)
   463d8:	01800084 	movi	r6,2
   463dc:	89bfd31e 	bne	r17,r6,4632c <__alt_data_end+0xfffd07cc>
   463e0:	11806317 	ldw	r6,396(r2)
   463e4:	3108b03a 	or	r4,r6,r4
   463e8:	11006315 	stw	r4,396(r2)
   463ec:	003fcf06 	br	4632c <__alt_data_end+0xfffd07cc>
   463f0:	80805304 	addi	r2,r16,332
   463f4:	80805215 	stw	r2,328(r16)
   463f8:	003fc706 	br	46318 <__alt_data_end+0xfffd07b8>
   463fc:	00bfffc4 	movi	r2,-1
   46400:	003fd106 	br	46348 <__alt_data_end+0xfffd07e8>

00046404 <__call_exitprocs>:
   46404:	00800174 	movhi	r2,5
   46408:	10a04604 	addi	r2,r2,-32488
   4640c:	10800017 	ldw	r2,0(r2)
   46410:	defff404 	addi	sp,sp,-48
   46414:	dd800815 	stw	r22,32(sp)
   46418:	d8800015 	stw	r2,0(sp)
   4641c:	10805204 	addi	r2,r2,328
   46420:	dd000615 	stw	r20,24(sp)
   46424:	dc800415 	stw	r18,16(sp)
   46428:	dfc00b15 	stw	ra,44(sp)
   4642c:	df000a15 	stw	fp,40(sp)
   46430:	ddc00915 	stw	r23,36(sp)
   46434:	dd400715 	stw	r21,28(sp)
   46438:	dcc00515 	stw	r19,20(sp)
   4643c:	dc400315 	stw	r17,12(sp)
   46440:	dc000215 	stw	r16,8(sp)
   46444:	2025883a 	mov	r18,r4
   46448:	2829883a 	mov	r20,r5
   4644c:	d8800115 	stw	r2,4(sp)
   46450:	05bfffc4 	movi	r22,-1
   46454:	d8800017 	ldw	r2,0(sp)
   46458:	14c05217 	ldw	r19,328(r2)
   4645c:	98001d26 	beq	r19,zero,464d4 <__call_exitprocs+0xd0>
   46460:	dd400117 	ldw	r21,4(sp)
   46464:	98800117 	ldw	r2,4(r19)
   46468:	173fffc4 	addi	fp,r2,-1
   4646c:	e0000d16 	blt	fp,zero,464a4 <__call_exitprocs+0xa0>
   46470:	14000044 	addi	r16,r2,1
   46474:	8421883a 	add	r16,r16,r16
   46478:	8421883a 	add	r16,r16,r16
   4647c:	84402004 	addi	r17,r16,128
   46480:	9c63883a 	add	r17,r19,r17
   46484:	9c21883a 	add	r16,r19,r16
   46488:	a0001e26 	beq	r20,zero,46504 <__call_exitprocs+0x100>
   4648c:	80804017 	ldw	r2,256(r16)
   46490:	15001c26 	beq	r2,r20,46504 <__call_exitprocs+0x100>
   46494:	e73fffc4 	addi	fp,fp,-1
   46498:	843fff04 	addi	r16,r16,-4
   4649c:	8c7fff04 	addi	r17,r17,-4
   464a0:	e5bff91e 	bne	fp,r22,46488 <__alt_data_end+0xfffd0928>
   464a4:	00800034 	movhi	r2,0
   464a8:	10800004 	addi	r2,r2,0
   464ac:	10000926 	beq	r2,zero,464d4 <__call_exitprocs+0xd0>
   464b0:	98800117 	ldw	r2,4(r19)
   464b4:	1000311e 	bne	r2,zero,4657c <__call_exitprocs+0x178>
   464b8:	98800017 	ldw	r2,0(r19)
   464bc:	10003426 	beq	r2,zero,46590 <__call_exitprocs+0x18c>
   464c0:	9809883a 	mov	r4,r19
   464c4:	a8800015 	stw	r2,0(r21)
   464c8:	00000000 	call	0 <__alt_mem_RAM_jesus-0x40000>
   464cc:	acc00017 	ldw	r19,0(r21)
   464d0:	983fe41e 	bne	r19,zero,46464 <__alt_data_end+0xfffd0904>
   464d4:	dfc00b17 	ldw	ra,44(sp)
   464d8:	df000a17 	ldw	fp,40(sp)
   464dc:	ddc00917 	ldw	r23,36(sp)
   464e0:	dd800817 	ldw	r22,32(sp)
   464e4:	dd400717 	ldw	r21,28(sp)
   464e8:	dd000617 	ldw	r20,24(sp)
   464ec:	dcc00517 	ldw	r19,20(sp)
   464f0:	dc800417 	ldw	r18,16(sp)
   464f4:	dc400317 	ldw	r17,12(sp)
   464f8:	dc000217 	ldw	r16,8(sp)
   464fc:	dec00c04 	addi	sp,sp,48
   46500:	f800283a 	ret
   46504:	98800117 	ldw	r2,4(r19)
   46508:	80c00017 	ldw	r3,0(r16)
   4650c:	10bfffc4 	addi	r2,r2,-1
   46510:	17001526 	beq	r2,fp,46568 <__call_exitprocs+0x164>
   46514:	80000015 	stw	zero,0(r16)
   46518:	183fde26 	beq	r3,zero,46494 <__alt_data_end+0xfffd0934>
   4651c:	00800044 	movi	r2,1
   46520:	1708983a 	sll	r4,r2,fp
   46524:	98806217 	ldw	r2,392(r19)
   46528:	9dc00117 	ldw	r23,4(r19)
   4652c:	2084703a 	and	r2,r4,r2
   46530:	1000061e 	bne	r2,zero,4654c <__call_exitprocs+0x148>
   46534:	183ee83a 	callr	r3
   46538:	98800117 	ldw	r2,4(r19)
   4653c:	15ffc51e 	bne	r2,r23,46454 <__alt_data_end+0xfffd08f4>
   46540:	a8800017 	ldw	r2,0(r21)
   46544:	14ffd326 	beq	r2,r19,46494 <__alt_data_end+0xfffd0934>
   46548:	003fc206 	br	46454 <__alt_data_end+0xfffd08f4>
   4654c:	98806317 	ldw	r2,396(r19)
   46550:	2084703a 	and	r2,r4,r2
   46554:	1000061e 	bne	r2,zero,46570 <__call_exitprocs+0x16c>
   46558:	89400017 	ldw	r5,0(r17)
   4655c:	9009883a 	mov	r4,r18
   46560:	183ee83a 	callr	r3
   46564:	003ff406 	br	46538 <__alt_data_end+0xfffd09d8>
   46568:	9f000115 	stw	fp,4(r19)
   4656c:	003fea06 	br	46518 <__alt_data_end+0xfffd09b8>
   46570:	89000017 	ldw	r4,0(r17)
   46574:	183ee83a 	callr	r3
   46578:	003fef06 	br	46538 <__alt_data_end+0xfffd09d8>
   4657c:	98800017 	ldw	r2,0(r19)
   46580:	982b883a 	mov	r21,r19
   46584:	1027883a 	mov	r19,r2
   46588:	983fb61e 	bne	r19,zero,46464 <__alt_data_end+0xfffd0904>
   4658c:	003fd106 	br	464d4 <__alt_data_end+0xfffd0974>
   46590:	0005883a 	mov	r2,zero
   46594:	003ffa06 	br	46580 <__alt_data_end+0xfffd0a20>

00046598 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   46598:	defffd04 	addi	sp,sp,-12
   4659c:	df000215 	stw	fp,8(sp)
   465a0:	df000204 	addi	fp,sp,8
   465a4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   465a8:	0001883a 	nop
   465ac:	e0bfff17 	ldw	r2,-4(fp)
   465b0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   465b4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   465b8:	10000226 	beq	r2,zero,465c4 <_exit+0x2c>
    ALT_SIM_FAIL();
   465bc:	002af070 	cmpltui	zero,zero,43969
   465c0:	00000106 	br	465c8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   465c4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   465c8:	003fff06 	br	465c8 <__alt_data_end+0xfffd0a68>
