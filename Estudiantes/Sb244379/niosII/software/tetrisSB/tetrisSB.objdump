
tetrisSB.elf:     file format elf32-littlenios2
tetrisSB.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0002022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000037d0 memsz 0x000037d0 flags r-x
    LOAD off    0x000047f0 vaddr 0x000237f0 paddr 0x00024f0c align 2**12
         filesz 0x0000171c memsz 0x0000171c flags rw-
    LOAD off    0x00006628 vaddr 0x00026628 paddr 0x00026628 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003588  0002022c  0002022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  000237b4  000237b4  000047b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000171c  000237f0  00024f0c  000047f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00026628  00026628  00006628  2**2
                  ALLOC, SMALL_DATA
  6 .RAM_jesus    00000000  00026748  00026748  00005f0c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005f0c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006b8  00000000  00000000  00005f30  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008840  00000000  00000000  000065e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003197  00000000  00000000  0000ee28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003299  00000000  00000000  00011fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000e40  00000000  00000000  00015258  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001ed1  00000000  00000000  00016098  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a8a  00000000  00000000  00017f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000189f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000b8  00000000  00000000  00018a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001a986  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001a989  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001a98c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001a98d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0001a98e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0001a997  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0001a9a0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  0001a9a9  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000016  00000000  00000000  0001a9b6  2**0
                  CONTENTS, READONLY
 26 .jdi          00003b78  00000000  00000000  0001a9cc  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00065f6b  00000000  00000000  0001e544  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
0002022c l    d  .text	00000000 .text
000237b4 l    d  .rodata	00000000 .rodata
000237f0 l    d  .rwdata	00000000 .rwdata
00026628 l    d  .bss	00000000 .bss
00026748 l    d  .RAM_jesus	00000000 .RAM_jesus
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tetrisSB_bsp//obj/HAL/src/crt0.o
00020264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
0002087c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00020a08 l     F .text	00000038 alt_dev_reg
000237f0 l     O .rwdata	00001060 jtag_uart
00024850 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00020d18 l     F .text	00000204 altera_avalon_jtag_uart_irq
00020f1c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002153c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
000217f0 l     F .text	00000098 altera_avalon_uart_irq
00021888 l     F .text	000000e0 altera_avalon_uart_rxirq
00021968 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00021b00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00021d2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
000221c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00022304 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00022330 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000227c8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00022920 l     F .text	00000050 alt_get_errno
00022970 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00024abc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00023654 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00026640 g     O .bss	00000004 alt_instruction_exception_handler
00020960 g     F .text	00000078 alt_main
00026648 g     O .bss	00000100 alt_irq
00024f0c g       *ABS*	00000000 __flash_rwdata_start
00022de0 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00026644 g     O .bss	00000004 errno
0002662c g     O .bss	00000004 alt_argv
0002cee0 g       *ABS*	00000000 _gp
000209d8 g     F .text	00000030 usleep
0002493c g     O .rwdata	00000180 alt_fd_list
00022e00 g     F .text	00000090 alt_find_dev
000231dc g     F .text	00000138 memcpy
000228a8 g     F .text	00000078 alt_io_redirect
000237b4 g       *ABS*	00000000 __DTOR_END__
00023078 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00021118 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00023770 g     F .text	00000008 .hidden __udivsi3
00024ef0 g     O .rwdata	00000004 alt_max_fd
00024f04 g     O .rwdata	00000004 _global_impure_ptr
00026748 g       *ABS*	00000000 __bss_end
000226d8 g     F .text	000000f0 alt_iic_isr_register
00022cdc g     F .text	00000104 alt_tick
00021748 g     F .text	000000a8 altera_avalon_uart_init
0002268c g     F .text	0000004c alt_ic_irq_enabled
00022c44 g     F .text	00000098 alt_alarm_stop
00026634 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d0 alt_irq_handler
00024914 g     O .rwdata	00000028 alt_dev_null
000222e8 g     F .text	0000001c alt_dcache_flush_all
00024f0c g       *ABS*	00000000 __ram_rwdata_end
00024ee8 g     O .rwdata	00000008 alt_dev_list
000237f0 g       *ABS*	00000000 __ram_rodata_end
00023778 g     F .text	00000008 .hidden __umodsi3
00026748 g       *ABS*	00000000 end
00021d7c g     F .text	000001ac altera_avalon_uart_write
00020c54 g     F .text	000000c4 altera_avalon_jtag_uart_init
000201cc g     F .exceptions	00000060 alt_instruction_exception_entry
000237b4 g       *ABS*	00000000 __CTOR_LIST__
0003c520 g       *ABS*	00000000 __alt_stack_pointer
000215b0 g     F .text	00000088 alt_avalon_timer_sc_init
00021698 g     F .text	00000060 altera_avalon_uart_write_fd
000216f8 g     F .text	00000050 altera_avalon_uart_close_fd
00021324 g     F .text	00000218 altera_avalon_jtag_uart_write
000234c0 g     F .text	00000194 __call_exitprocs
0002022c g     F .text	0000003c _start
00026638 g     O .bss	00000004 _alt_tick_rate
0002663c g     O .bss	00000004 _alt_nticks
00020a74 g     F .text	0000007c alt_sys_init
000233ac g     F .text	00000114 __register_exitproc
00020fc4 g     F .text	00000068 altera_avalon_jtag_uart_close
00020854 g     F .text	00000028 .hidden __mulsi3
000237f0 g       *ABS*	00000000 __ram_rwdata_start
000237b4 g       *ABS*	00000000 __ram_rodata_start
00020268 g     F .text	00000050 play_tone_tetris
00020af0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00022fa4 g     F .text	000000d4 alt_get_fd
00022068 g     F .text	00000158 alt_busy_sleep
00023160 g     F .text	0000007c memcmp
00020bb0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00026748 g       *ABS*	00000000 __alt_stack_base
00020c00 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022e90 g     F .text	00000114 alt_find_file
00022380 g     F .text	000000a4 alt_dev_llist_insert
00026628 g       *ABS*	00000000 __bss_start
000202b8 g     F .text	0000059c main
00026630 g     O .bss	00000004 alt_envp
00020b50 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00020000 g       *ABS*	00000000 __alt_mem_RAM_jesus
00024ef4 g     O .rwdata	00000004 alt_errno
000236c0 g     F .text	00000054 .hidden __divsi3
000237b4 g       *ABS*	00000000 __CTOR_END__
000237b4 g       *ABS*	00000000 __flash_rodata_start
000237b4 g       *ABS*	00000000 __DTOR_LIST__
00020a40 g     F .text	00000034 alt_irq_init
00022bc4 g     F .text	00000080 alt_release_fd
00023114 g     F .text	00000014 atexit
00024f08 g     O .rwdata	00000004 _impure_ptr
00026628 g     O .bss	00000004 alt_argc
00022480 g     F .text	0000005c _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00024ee0 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000224f8 g     F .text	00000050 alt_ic_isr_register
00024f0c g       *ABS*	00000000 _edata
00021638 g     F .text	00000060 altera_avalon_uart_read_fd
00026748 g       *ABS*	00000000 _end
0002022c g       *ABS*	00000000 __ram_exceptions_end
0002102c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
000225e8 g     F .text	000000a4 alt_ic_irq_disable
00023128 g     F .text	00000038 exit
00023714 g     F .text	0000005c .hidden __modsi3
0003c520 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00021aac g     F .text	00000054 altera_avalon_uart_close
00023780 g     F .text	00000034 _exit
00021f28 g     F .text	00000140 alt_alarm_start
00023314 g     F .text	00000098 strlen
00022a64 g     F .text	00000160 open
000224dc g     F .text	0000001c alt_icache_flush_all
00024ef8 g     O .rwdata	00000004 alt_priority_mask
00022548 g     F .text	000000a0 alt_ic_irq_enable
00021b50 g     F .text	000001dc altera_avalon_uart_read
00024efc g     O .rwdata	00000008 alt_alarm_list
00022424 g     F .text	0000005c _do_ctors
00022210 g     F .text	000000d8 close
000208e0 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408b14 	ori	at,at,556
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201cc0 	call	201cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000b4 	movhi	r2,2
   20140:	10999204 	addi	r2,r2,26184
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000b4 	movhi	r2,2
   20158:	10999204 	addi	r2,r2,26184
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe3c0c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe3c00>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	e037883a 	mov	sp,fp
   201bc:	dfc00117 	ldw	ra,4(sp)
   201c0:	df000017 	ldw	fp,0(sp)
   201c4:	dec00204 	addi	sp,sp,8
   201c8:	f800283a 	ret

000201cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201cc:	defffb04 	addi	sp,sp,-20
   201d0:	dfc00415 	stw	ra,16(sp)
   201d4:	df000315 	stw	fp,12(sp)
   201d8:	df000304 	addi	fp,sp,12
   201dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e0:	00bfffc4 	movi	r2,-1
   201e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201ec:	d0a5d817 	ldw	r2,-26784(gp)
   201f0:	10000726 	beq	r2,zero,20210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f4:	d0a5d817 	ldw	r2,-26784(gp)
   201f8:	e0fffd17 	ldw	r3,-12(fp)
   201fc:	1809883a 	mov	r4,r3
   20200:	e17fff17 	ldw	r5,-4(fp)
   20204:	e1bffe17 	ldw	r6,-8(fp)
   20208:	103ee83a 	callr	r2
   2020c:	00000206 	br	20218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20214:	0005883a 	mov	r2,zero
}
   20218:	e037883a 	mov	sp,fp
   2021c:	dfc00117 	ldw	ra,4(sp)
   20220:	df000017 	ldw	fp,0(sp)
   20224:	dec00204 	addi	sp,sp,8
   20228:	f800283a 	ret

Disassembly of section .text:

0002022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   2022c:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20230:	def14814 	ori	sp,sp,50464
    movhi gp, %hi(_gp)
   20234:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20238:	d6b3b814 	ori	gp,gp,52960
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   2023c:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20240:	10998a14 	ori	r2,r2,26152

    movhi r3, %hi(__bss_end)
   20244:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20248:	18d9d214 	ori	r3,r3,26440

    beq r2, r3, 1f
   2024c:	10c00326 	beq	r2,r3,2025c <_start+0x30>

0:
    stw zero, (r2)
   20250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20258:	10fffd36 	bltu	r2,r3,20250 <__alt_data_end+0xfffe3d30>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   2025c:	00208e00 	call	208e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20260:	00209600 	call	20960 <alt_main>

00020264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20264:	003fff06 	br	20264 <__alt_data_end+0xfffe3d44>

00020268 <play_tone_tetris>:
#define A7 3520
#define Bb7 3729
#define B7 3951
#define silencie 1

void play_tone_tetris(int nota,int time_ms){
   20268:	defffc04 	addi	sp,sp,-16
   2026c:	dfc00315 	stw	ra,12(sp)
   20270:	df000215 	stw	fp,8(sp)
   20274:	df000204 	addi	fp,sp,8
   20278:	e13ffe15 	stw	r4,-8(fp)
   2027c:	e17fff15 	stw	r5,-4(fp)

	IOWR(DIV_FREQ_BASE,0,nota);
   20280:	00800134 	movhi	r2,4
   20284:	10841004 	addi	r2,r2,4160
   20288:	e0fffe17 	ldw	r3,-8(fp)
   2028c:	10c00035 	stwio	r3,0(r2)
	usleep(time_ms*1000);
   20290:	e13fff17 	ldw	r4,-4(fp)
   20294:	0140fa04 	movi	r5,1000
   20298:	00208540 	call	20854 <__mulsi3>
   2029c:	1009883a 	mov	r4,r2
   202a0:	00209d80 	call	209d8 <usleep>
}
   202a4:	e037883a 	mov	sp,fp
   202a8:	dfc00117 	ldw	ra,4(sp)
   202ac:	df000017 	ldw	fp,0(sp)
   202b0:	dec00204 	addi	sp,sp,8
   202b4:	f800283a 	ret

000202b8 <main>:


int main()
{
   202b8:	defffe04 	addi	sp,sp,-8
   202bc:	dfc00115 	stw	ra,4(sp)
   202c0:	df000015 	stw	fp,0(sp)
   202c4:	d839883a 	mov	fp,sp
	play_tone_tetris(E5, 125);
   202c8:	01250bd4 	movui	r4,37935
   202cc:	01401f44 	movi	r5,125
   202d0:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E6, 500);
   202d4:	011285c4 	movi	r4,18967
   202d8:	01407d04 	movi	r5,500
   202dc:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B5, 250);
   202e0:	0118bc04 	movi	r4,25328
   202e4:	01403e84 	movi	r5,250
   202e8:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   202ec:	011756c4 	movi	r4,23899
   202f0:	01403e84 	movi	r5,250
   202f4:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D6, 250);
   202f8:	0114cb44 	movi	r4,21293
   202fc:	01403e84 	movi	r5,250
   20300:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E6, 125);
   20304:	011285c4 	movi	r4,18967
   20308:	01401f44 	movi	r5,125
   2030c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D6, 125);
   20310:	0114cb44 	movi	r4,21293
   20314:	01401f44 	movi	r5,125
   20318:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   2031c:	011756c4 	movi	r4,23899
   20320:	01403e84 	movi	r5,250
   20324:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B5, 250);
   20328:	0118bc04 	movi	r4,25328
   2032c:	01403e84 	movi	r5,250
   20330:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 500);
   20334:	011bbe04 	movi	r4,28408
   20338:	01407d04 	movi	r5,500
   2033c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 250);
   20340:	011bbe04 	movi	r4,28408
   20344:	01403e84 	movi	r5,250
   20348:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   2034c:	011756c4 	movi	r4,23899
   20350:	01403e84 	movi	r5,250
   20354:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E6, 500);
   20358:	011285c4 	movi	r4,18967
   2035c:	01407d04 	movi	r5,500
   20360:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D6, 250);
   20364:	0114cb44 	movi	r4,21293
   20368:	01403e84 	movi	r5,250
   2036c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   20370:	011756c4 	movi	r4,23899
   20374:	01403e84 	movi	r5,250
   20378:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B5,750);
   2037c:	0118bc04 	movi	r4,25328
   20380:	0140bb84 	movi	r5,750
   20384:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   20388:	011756c4 	movi	r4,23899
   2038c:	01403e84 	movi	r5,250
   20390:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D6, 500);
   20394:	0114cb44 	movi	r4,21293
   20398:	01407d04 	movi	r5,500
   2039c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E6, 500);
   203a0:	011285c4 	movi	r4,18967
   203a4:	01407d04 	movi	r5,500
   203a8:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 500);
   203ac:	011756c4 	movi	r4,23899
   203b0:	01407d04 	movi	r5,500
   203b4:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 500);
   203b8:	011bbe04 	movi	r4,28408
   203bc:	01407d04 	movi	r5,500
   203c0:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 500);
   203c4:	011bbe04 	movi	r4,28408
   203c8:	01407d04 	movi	r5,500
   203cc:	00202680 	call	20268 <play_tone_tetris>
	usleep(250);
   203d0:	01003e84 	movi	r4,250
   203d4:	00209d80 	call	209d8 <usleep>
	play_tone_tetris(D6, 500);
   203d8:	0114cb44 	movi	r4,21293
   203dc:	01407d04 	movi	r5,500
   203e0:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(F6, 250);
   203e4:	01117cc4 	movi	r4,17907
   203e8:	01403e84 	movi	r5,250
   203ec:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A6, 500);
   203f0:	010ddec4 	movi	r4,14203
   203f4:	01407d04 	movi	r5,500
   203f8:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(G6, 250);
   203fc:	010f9444 	movi	r4,15953
   20400:	01403e84 	movi	r5,250
   20404:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(F6, 250);
   20408:	01117cc4 	movi	r4,17907
   2040c:	01403e84 	movi	r5,250
   20410:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E6, 750);
   20414:	011285c4 	movi	r4,18967
   20418:	0140bb84 	movi	r5,750
   2041c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   20420:	011756c4 	movi	r4,23899
   20424:	01403e84 	movi	r5,250
   20428:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E6, 500);
   2042c:	011285c4 	movi	r4,18967
   20430:	01407d04 	movi	r5,500
   20434:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D6, 250);
   20438:	0114cb44 	movi	r4,21293
   2043c:	01403e84 	movi	r5,250
   20440:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   20444:	011756c4 	movi	r4,23899
   20448:	01403e84 	movi	r5,250
   2044c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B5, 500);
   20450:	0118bc04 	movi	r4,25328
   20454:	01407d04 	movi	r5,500
   20458:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B5, 250);
   2045c:	0118bc04 	movi	r4,25328
   20460:	01403e84 	movi	r5,250
   20464:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   20468:	011756c4 	movi	r4,23899
   2046c:	01403e84 	movi	r5,250
   20470:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D6, 500);
   20474:	0114cb44 	movi	r4,21293
   20478:	01407d04 	movi	r5,500
   2047c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E6, 500);
   20480:	011285c4 	movi	r4,18967
   20484:	01407d04 	movi	r5,500
   20488:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 500);
   2048c:	011756c4 	movi	r4,23899
   20490:	01407d04 	movi	r5,500
   20494:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 500);
   20498:	011bbe04 	movi	r4,28408
   2049c:	01407d04 	movi	r5,500
   204a0:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 500);
   204a4:	011bbe04 	movi	r4,28408
   204a8:	01407d04 	movi	r5,500
   204ac:	00202680 	call	20268 <play_tone_tetris>
	usleep(500);
   204b0:	01007d04 	movi	r4,500
   204b4:	00209d80 	call	209d8 <usleep>
	play_tone_tetris(E6, 500);
   204b8:	011285c4 	movi	r4,18967
   204bc:	01407d04 	movi	r5,500
   204c0:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B5, 250);
   204c4:	0118bc04 	movi	r4,25328
   204c8:	01403e84 	movi	r5,250
   204cc:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   204d0:	011756c4 	movi	r4,23899
   204d4:	01403e84 	movi	r5,250
   204d8:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D6, 250);
   204dc:	0114cb44 	movi	r4,21293
   204e0:	01403e84 	movi	r5,250
   204e4:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E6, 125);
   204e8:	011285c4 	movi	r4,18967
   204ec:	01401f44 	movi	r5,125
   204f0:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D6, 125);
   204f4:	0114cb44 	movi	r4,21293
   204f8:	01401f44 	movi	r5,125
   204fc:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   20500:	011756c4 	movi	r4,23899
   20504:	01403e84 	movi	r5,250
   20508:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B5, 250);
   2050c:	0118bc04 	movi	r4,25328
   20510:	01403e84 	movi	r5,250
   20514:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 500);
   20518:	011bbe04 	movi	r4,28408
   2051c:	01407d04 	movi	r5,500
   20520:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 250);
   20524:	011bbe04 	movi	r4,28408
   20528:	01403e84 	movi	r5,250
   2052c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   20530:	011756c4 	movi	r4,23899
   20534:	01403e84 	movi	r5,250
   20538:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E6, 500);
   2053c:	011285c4 	movi	r4,18967
   20540:	01407d04 	movi	r5,500
   20544:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D6, 250);
   20548:	0114cb44 	movi	r4,21293
   2054c:	01403e84 	movi	r5,250
   20550:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   20554:	011756c4 	movi	r4,23899
   20558:	01403e84 	movi	r5,250
   2055c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B5, 750);
   20560:	0118bc04 	movi	r4,25328
   20564:	0140bb84 	movi	r5,750
   20568:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   2056c:	011756c4 	movi	r4,23899
   20570:	01403e84 	movi	r5,250
   20574:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D6, 500);
   20578:	0114cb44 	movi	r4,21293
   2057c:	01407d04 	movi	r5,500
   20580:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E6, 500);
   20584:	011285c4 	movi	r4,18967
   20588:	01407d04 	movi	r5,500
   2058c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 500);
   20590:	011756c4 	movi	r4,23899
   20594:	01407d04 	movi	r5,500
   20598:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 500);
   2059c:	011bbe04 	movi	r4,28408
   205a0:	01407d04 	movi	r5,500
   205a4:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 500);
   205a8:	011bbe04 	movi	r4,28408
   205ac:	01407d04 	movi	r5,500
   205b0:	00202680 	call	20268 <play_tone_tetris>
	usleep(250);
   205b4:	01003e84 	movi	r4,250
   205b8:	00209d80 	call	209d8 <usleep>
	play_tone_tetris(D6, 500);
   205bc:	0114cb44 	movi	r4,21293
   205c0:	01407d04 	movi	r5,500
   205c4:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(F6, 250);
   205c8:	01117cc4 	movi	r4,17907
   205cc:	01403e84 	movi	r5,250
   205d0:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A6, 500);
   205d4:	010ddec4 	movi	r4,14203
   205d8:	01407d04 	movi	r5,500
   205dc:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(G6, 250);
   205e0:	010f9444 	movi	r4,15953
   205e4:	01403e84 	movi	r5,250
   205e8:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(F6, 250);
   205ec:	01117cc4 	movi	r4,17907
   205f0:	01403e84 	movi	r5,250
   205f4:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E6, 750);
   205f8:	011285c4 	movi	r4,18967
   205fc:	0140bb84 	movi	r5,750
   20600:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   20604:	011756c4 	movi	r4,23899
   20608:	01403e84 	movi	r5,250
   2060c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E6, 500);
   20610:	011285c4 	movi	r4,18967
   20614:	01407d04 	movi	r5,500
   20618:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D6, 250);
   2061c:	0114cb44 	movi	r4,21293
   20620:	01403e84 	movi	r5,250
   20624:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   20628:	011756c4 	movi	r4,23899
   2062c:	01403e84 	movi	r5,250
   20630:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B5, 500);
   20634:	0118bc04 	movi	r4,25328
   20638:	01407d04 	movi	r5,500
   2063c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B5, 250);
   20640:	0118bc04 	movi	r4,25328
   20644:	01403e84 	movi	r5,250
   20648:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 250);
   2064c:	011756c4 	movi	r4,23899
   20650:	01403e84 	movi	r5,250
   20654:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D6, 500);
   20658:	0114cb44 	movi	r4,21293
   2065c:	01407d04 	movi	r5,500
   20660:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E6, 500);
   20664:	011285c4 	movi	r4,18967
   20668:	01407d04 	movi	r5,500
   2066c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C6, 500);
   20670:	011756c4 	movi	r4,23899
   20674:	01407d04 	movi	r5,500
   20678:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 500);
   2067c:	011bbe04 	movi	r4,28408
   20680:	01407d04 	movi	r5,500
   20684:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 500);
   20688:	011bbe04 	movi	r4,28408
   2068c:	01407d04 	movi	r5,500
   20690:	00202680 	call	20268 <play_tone_tetris>
	usleep(500);
   20694:	01007d04 	movi	r4,500
   20698:	00209d80 	call	209d8 <usleep>
	play_tone_tetris(E5, 1000);
   2069c:	01250bd4 	movui	r4,37935
   206a0:	0140fa04 	movi	r5,1000
   206a4:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C5, 1000);
   206a8:	0100c7f4 	movhi	r4,799
   206ac:	2130e604 	addi	r4,r4,-15464
   206b0:	0140fa04 	movi	r5,1000
   206b4:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D5, 1000);
   206b8:	01299714 	movui	r4,42588
   206bc:	0140fa04 	movi	r5,1000
   206c0:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B4, 1000);
   206c4:	01318514 	movui	r4,50708
   206c8:	0140fa04 	movi	r5,1000
   206cc:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C5, 1000);
   206d0:	0100c7f4 	movhi	r4,799
   206d4:	2130e604 	addi	r4,r4,-15464
   206d8:	0140fa04 	movi	r5,1000
   206dc:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A4, 1000);
   206e0:	01377c54 	movui	r4,56817
   206e4:	0140fa04 	movi	r5,1000
   206e8:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(Ab4, 1000);
   206ec:	013ad3d4 	movui	r4,60239
   206f0:	0140fa04 	movi	r5,1000
   206f4:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B4, 1000);
   206f8:	01318514 	movui	r4,50708
   206fc:	0140fa04 	movi	r5,1000
   20700:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E5, 1000);
   20704:	01250bd4 	movui	r4,37935
   20708:	0140fa04 	movi	r5,1000
   2070c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C5, 1000);
   20710:	0100c7f4 	movhi	r4,799
   20714:	2130e604 	addi	r4,r4,-15464
   20718:	0140fa04 	movi	r5,1000
   2071c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D5, 1000);
   20720:	01299714 	movui	r4,42588
   20724:	0140fa04 	movi	r5,1000
   20728:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B4, 1000);
   2072c:	01318514 	movui	r4,50708
   20730:	0140fa04 	movi	r5,1000
   20734:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C5, 500);
   20738:	0100c7f4 	movhi	r4,799
   2073c:	2130e604 	addi	r4,r4,-15464
   20740:	01407d04 	movi	r5,500
   20744:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E5, 500);
   20748:	01250bd4 	movui	r4,37935
   2074c:	01407d04 	movi	r5,500
   20750:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 1000);
   20754:	011bbe04 	movi	r4,28408
   20758:	0140fa04 	movi	r5,1000
   2075c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 2000);
   20760:	011bbe04 	movi	r4,28408
   20764:	0141f404 	movi	r5,2000
   20768:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E5, 1000);
   2076c:	01250bd4 	movui	r4,37935
   20770:	0140fa04 	movi	r5,1000
   20774:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C5, 1000);
   20778:	0100c7f4 	movhi	r4,799
   2077c:	2130e604 	addi	r4,r4,-15464
   20780:	0140fa04 	movi	r5,1000
   20784:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D5, 1000);
   20788:	01299714 	movui	r4,42588
   2078c:	0140fa04 	movi	r5,1000
   20790:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B4, 1000);
   20794:	01318514 	movui	r4,50708
   20798:	0140fa04 	movi	r5,1000
   2079c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C5, 1000);
   207a0:	0100c7f4 	movhi	r4,799
   207a4:	2130e604 	addi	r4,r4,-15464
   207a8:	0140fa04 	movi	r5,1000
   207ac:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A4, 1000);
   207b0:	01377c54 	movui	r4,56817
   207b4:	0140fa04 	movi	r5,1000
   207b8:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(Ab4, 1000);
   207bc:	013ad3d4 	movui	r4,60239
   207c0:	0140fa04 	movi	r5,1000
   207c4:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B4, 1000);
   207c8:	01318514 	movui	r4,50708
   207cc:	0140fa04 	movi	r5,1000
   207d0:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E5, 1000);
   207d4:	01250bd4 	movui	r4,37935
   207d8:	0140fa04 	movi	r5,1000
   207dc:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C5, 1000);
   207e0:	0100c7f4 	movhi	r4,799
   207e4:	2130e604 	addi	r4,r4,-15464
   207e8:	0140fa04 	movi	r5,1000
   207ec:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(D5, 1000);
   207f0:	01299714 	movui	r4,42588
   207f4:	0140fa04 	movi	r5,1000
   207f8:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(B4, 1000);
   207fc:	01318514 	movui	r4,50708
   20800:	0140fa04 	movi	r5,1000
   20804:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(C5, 500);
   20808:	0100c7f4 	movhi	r4,799
   2080c:	2130e604 	addi	r4,r4,-15464
   20810:	01407d04 	movi	r5,500
   20814:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(E5, 500);
   20818:	01250bd4 	movui	r4,37935
   2081c:	01407d04 	movi	r5,500
   20820:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(A5, 1000);
   20824:	011bbe04 	movi	r4,28408
   20828:	0140fa04 	movi	r5,1000
   2082c:	00202680 	call	20268 <play_tone_tetris>
	play_tone_tetris(Ab5, 2000);
   20830:	011d69c4 	movi	r4,30119
   20834:	0141f404 	movi	r5,2000
   20838:	00202680 	call	20268 <play_tone_tetris>


  return 0;
   2083c:	0005883a 	mov	r2,zero
}
   20840:	e037883a 	mov	sp,fp
   20844:	dfc00117 	ldw	ra,4(sp)
   20848:	df000017 	ldw	fp,0(sp)
   2084c:	dec00204 	addi	sp,sp,8
   20850:	f800283a 	ret

00020854 <__mulsi3>:
   20854:	0005883a 	mov	r2,zero
   20858:	20000726 	beq	r4,zero,20878 <__mulsi3+0x24>
   2085c:	20c0004c 	andi	r3,r4,1
   20860:	2008d07a 	srli	r4,r4,1
   20864:	18000126 	beq	r3,zero,2086c <__mulsi3+0x18>
   20868:	1145883a 	add	r2,r2,r5
   2086c:	294b883a 	add	r5,r5,r5
   20870:	203ffa1e 	bne	r4,zero,2085c <__alt_data_end+0xfffe433c>
   20874:	f800283a 	ret
   20878:	f800283a 	ret

0002087c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2087c:	defffc04 	addi	sp,sp,-16
   20880:	df000315 	stw	fp,12(sp)
   20884:	df000304 	addi	fp,sp,12
   20888:	e13ffd15 	stw	r4,-12(fp)
   2088c:	e17ffe15 	stw	r5,-8(fp)
   20890:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   20894:	e0fffe17 	ldw	r3,-8(fp)
   20898:	e0bffd17 	ldw	r2,-12(fp)
   2089c:	18800c26 	beq	r3,r2,208d0 <alt_load_section+0x54>
  {
    while( to != end )
   208a0:	00000806 	br	208c4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   208a4:	e0bffe17 	ldw	r2,-8(fp)
   208a8:	10c00104 	addi	r3,r2,4
   208ac:	e0fffe15 	stw	r3,-8(fp)
   208b0:	e0fffd17 	ldw	r3,-12(fp)
   208b4:	19000104 	addi	r4,r3,4
   208b8:	e13ffd15 	stw	r4,-12(fp)
   208bc:	18c00017 	ldw	r3,0(r3)
   208c0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   208c4:	e0fffe17 	ldw	r3,-8(fp)
   208c8:	e0bfff17 	ldw	r2,-4(fp)
   208cc:	18bff51e 	bne	r3,r2,208a4 <__alt_data_end+0xfffe4384>
    {
      *to++ = *from++;
    }
  }
}
   208d0:	e037883a 	mov	sp,fp
   208d4:	df000017 	ldw	fp,0(sp)
   208d8:	dec00104 	addi	sp,sp,4
   208dc:	f800283a 	ret

000208e0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   208e0:	defffe04 	addi	sp,sp,-8
   208e4:	dfc00115 	stw	ra,4(sp)
   208e8:	df000015 	stw	fp,0(sp)
   208ec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   208f0:	010000b4 	movhi	r4,2
   208f4:	2113c304 	addi	r4,r4,20236
   208f8:	014000b4 	movhi	r5,2
   208fc:	294dfc04 	addi	r5,r5,14320
   20900:	018000b4 	movhi	r6,2
   20904:	3193c304 	addi	r6,r6,20236
   20908:	002087c0 	call	2087c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2090c:	010000b4 	movhi	r4,2
   20910:	21000804 	addi	r4,r4,32
   20914:	014000b4 	movhi	r5,2
   20918:	29400804 	addi	r5,r5,32
   2091c:	018000b4 	movhi	r6,2
   20920:	31808b04 	addi	r6,r6,556
   20924:	002087c0 	call	2087c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   20928:	010000b4 	movhi	r4,2
   2092c:	210ded04 	addi	r4,r4,14260
   20930:	014000b4 	movhi	r5,2
   20934:	294ded04 	addi	r5,r5,14260
   20938:	018000b4 	movhi	r6,2
   2093c:	318dfc04 	addi	r6,r6,14320
   20940:	002087c0 	call	2087c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20944:	00222e80 	call	222e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   20948:	00224dc0 	call	224dc <alt_icache_flush_all>
}
   2094c:	e037883a 	mov	sp,fp
   20950:	dfc00117 	ldw	ra,4(sp)
   20954:	df000017 	ldw	fp,0(sp)
   20958:	dec00204 	addi	sp,sp,8
   2095c:	f800283a 	ret

00020960 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20960:	defffd04 	addi	sp,sp,-12
   20964:	dfc00215 	stw	ra,8(sp)
   20968:	df000115 	stw	fp,4(sp)
   2096c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20970:	0009883a 	mov	r4,zero
   20974:	0020a400 	call	20a40 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   20978:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2097c:	0020a740 	call	20a74 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   20980:	010000b4 	movhi	r4,2
   20984:	210ded04 	addi	r4,r4,14260
   20988:	014000b4 	movhi	r5,2
   2098c:	294ded04 	addi	r5,r5,14260
   20990:	018000b4 	movhi	r6,2
   20994:	318ded04 	addi	r6,r6,14260
   20998:	00228a80 	call	228a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2099c:	00224240 	call	22424 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   209a0:	010000b4 	movhi	r4,2
   209a4:	21092004 	addi	r4,r4,9344
   209a8:	00231140 	call	23114 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   209ac:	d125d217 	ldw	r4,-26808(gp)
   209b0:	d0e5d317 	ldw	r3,-26804(gp)
   209b4:	d0a5d417 	ldw	r2,-26800(gp)
   209b8:	180b883a 	mov	r5,r3
   209bc:	100d883a 	mov	r6,r2
   209c0:	00202b80 	call	202b8 <main>
   209c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   209c8:	01000044 	movi	r4,1
   209cc:	00222100 	call	22210 <close>
  exit (result);
   209d0:	e13fff17 	ldw	r4,-4(fp)
   209d4:	00231280 	call	23128 <exit>

000209d8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   209d8:	defffd04 	addi	sp,sp,-12
   209dc:	dfc00215 	stw	ra,8(sp)
   209e0:	df000115 	stw	fp,4(sp)
   209e4:	df000104 	addi	fp,sp,4
   209e8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   209ec:	e13fff17 	ldw	r4,-4(fp)
   209f0:	00220680 	call	22068 <alt_busy_sleep>
}
   209f4:	e037883a 	mov	sp,fp
   209f8:	dfc00117 	ldw	ra,4(sp)
   209fc:	df000017 	ldw	fp,0(sp)
   20a00:	dec00204 	addi	sp,sp,8
   20a04:	f800283a 	ret

00020a08 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   20a08:	defffd04 	addi	sp,sp,-12
   20a0c:	dfc00215 	stw	ra,8(sp)
   20a10:	df000115 	stw	fp,4(sp)
   20a14:	df000104 	addi	fp,sp,4
   20a18:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   20a1c:	e13fff17 	ldw	r4,-4(fp)
   20a20:	014000b4 	movhi	r5,2
   20a24:	2953ba04 	addi	r5,r5,20200
   20a28:	00223800 	call	22380 <alt_dev_llist_insert>
}
   20a2c:	e037883a 	mov	sp,fp
   20a30:	dfc00117 	ldw	ra,4(sp)
   20a34:	df000017 	ldw	fp,0(sp)
   20a38:	dec00204 	addi	sp,sp,8
   20a3c:	f800283a 	ret

00020a40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20a40:	defffd04 	addi	sp,sp,-12
   20a44:	dfc00215 	stw	ra,8(sp)
   20a48:	df000115 	stw	fp,4(sp)
   20a4c:	df000104 	addi	fp,sp,4
   20a50:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   20a54:	0022de00 	call	22de0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20a58:	00800044 	movi	r2,1
   20a5c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20a60:	e037883a 	mov	sp,fp
   20a64:	dfc00117 	ldw	ra,4(sp)
   20a68:	df000017 	ldw	fp,0(sp)
   20a6c:	dec00204 	addi	sp,sp,8
   20a70:	f800283a 	ret

00020a74 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20a74:	defffe04 	addi	sp,sp,-8
   20a78:	dfc00115 	stw	ra,4(sp)
   20a7c:	df000015 	stw	fp,0(sp)
   20a80:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK, sys_clk);
   20a84:	01000134 	movhi	r4,4
   20a88:	21040004 	addi	r4,r4,4096
   20a8c:	000b883a 	mov	r5,zero
   20a90:	01800044 	movi	r6,1
   20a94:	01c0fa04 	movi	r7,1000
   20a98:	00215b00 	call	215b0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   20a9c:	010000b4 	movhi	r4,2
   20aa0:	210e0604 	addi	r4,r4,14360
   20aa4:	000b883a 	mov	r5,zero
   20aa8:	01800084 	movi	r6,2
   20aac:	0020c540 	call	20c54 <altera_avalon_jtag_uart_init>
   20ab0:	010000b4 	movhi	r4,2
   20ab4:	210dfc04 	addi	r4,r4,14320
   20ab8:	0020a080 	call	20a08 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
   20abc:	010000b4 	movhi	r4,2
   20ac0:	21121e04 	addi	r4,r4,18552
   20ac4:	000b883a 	mov	r5,zero
   20ac8:	000d883a 	mov	r6,zero
   20acc:	00217480 	call	21748 <altera_avalon_uart_init>
   20ad0:	010000b4 	movhi	r4,2
   20ad4:	21121404 	addi	r4,r4,18512
   20ad8:	0020a080 	call	20a08 <alt_dev_reg>
}
   20adc:	e037883a 	mov	sp,fp
   20ae0:	dfc00117 	ldw	ra,4(sp)
   20ae4:	df000017 	ldw	fp,0(sp)
   20ae8:	dec00204 	addi	sp,sp,8
   20aec:	f800283a 	ret

00020af0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   20af0:	defffa04 	addi	sp,sp,-24
   20af4:	dfc00515 	stw	ra,20(sp)
   20af8:	df000415 	stw	fp,16(sp)
   20afc:	df000404 	addi	fp,sp,16
   20b00:	e13ffd15 	stw	r4,-12(fp)
   20b04:	e17ffe15 	stw	r5,-8(fp)
   20b08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20b0c:	e0bffd17 	ldw	r2,-12(fp)
   20b10:	10800017 	ldw	r2,0(r2)
   20b14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   20b18:	e0bffc17 	ldw	r2,-16(fp)
   20b1c:	10c00a04 	addi	r3,r2,40
   20b20:	e0bffd17 	ldw	r2,-12(fp)
   20b24:	10800217 	ldw	r2,8(r2)
   20b28:	1809883a 	mov	r4,r3
   20b2c:	e17ffe17 	ldw	r5,-8(fp)
   20b30:	e1bfff17 	ldw	r6,-4(fp)
   20b34:	100f883a 	mov	r7,r2
   20b38:	00211180 	call	21118 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   20b3c:	e037883a 	mov	sp,fp
   20b40:	dfc00117 	ldw	ra,4(sp)
   20b44:	df000017 	ldw	fp,0(sp)
   20b48:	dec00204 	addi	sp,sp,8
   20b4c:	f800283a 	ret

00020b50 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   20b50:	defffa04 	addi	sp,sp,-24
   20b54:	dfc00515 	stw	ra,20(sp)
   20b58:	df000415 	stw	fp,16(sp)
   20b5c:	df000404 	addi	fp,sp,16
   20b60:	e13ffd15 	stw	r4,-12(fp)
   20b64:	e17ffe15 	stw	r5,-8(fp)
   20b68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20b6c:	e0bffd17 	ldw	r2,-12(fp)
   20b70:	10800017 	ldw	r2,0(r2)
   20b74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   20b78:	e0bffc17 	ldw	r2,-16(fp)
   20b7c:	10c00a04 	addi	r3,r2,40
   20b80:	e0bffd17 	ldw	r2,-12(fp)
   20b84:	10800217 	ldw	r2,8(r2)
   20b88:	1809883a 	mov	r4,r3
   20b8c:	e17ffe17 	ldw	r5,-8(fp)
   20b90:	e1bfff17 	ldw	r6,-4(fp)
   20b94:	100f883a 	mov	r7,r2
   20b98:	00213240 	call	21324 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   20b9c:	e037883a 	mov	sp,fp
   20ba0:	dfc00117 	ldw	ra,4(sp)
   20ba4:	df000017 	ldw	fp,0(sp)
   20ba8:	dec00204 	addi	sp,sp,8
   20bac:	f800283a 	ret

00020bb0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   20bb0:	defffc04 	addi	sp,sp,-16
   20bb4:	dfc00315 	stw	ra,12(sp)
   20bb8:	df000215 	stw	fp,8(sp)
   20bbc:	df000204 	addi	fp,sp,8
   20bc0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20bc4:	e0bfff17 	ldw	r2,-4(fp)
   20bc8:	10800017 	ldw	r2,0(r2)
   20bcc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   20bd0:	e0bffe17 	ldw	r2,-8(fp)
   20bd4:	10c00a04 	addi	r3,r2,40
   20bd8:	e0bfff17 	ldw	r2,-4(fp)
   20bdc:	10800217 	ldw	r2,8(r2)
   20be0:	1809883a 	mov	r4,r3
   20be4:	100b883a 	mov	r5,r2
   20be8:	0020fc40 	call	20fc4 <altera_avalon_jtag_uart_close>
}
   20bec:	e037883a 	mov	sp,fp
   20bf0:	dfc00117 	ldw	ra,4(sp)
   20bf4:	df000017 	ldw	fp,0(sp)
   20bf8:	dec00204 	addi	sp,sp,8
   20bfc:	f800283a 	ret

00020c00 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   20c00:	defffa04 	addi	sp,sp,-24
   20c04:	dfc00515 	stw	ra,20(sp)
   20c08:	df000415 	stw	fp,16(sp)
   20c0c:	df000404 	addi	fp,sp,16
   20c10:	e13ffd15 	stw	r4,-12(fp)
   20c14:	e17ffe15 	stw	r5,-8(fp)
   20c18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   20c1c:	e0bffd17 	ldw	r2,-12(fp)
   20c20:	10800017 	ldw	r2,0(r2)
   20c24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   20c28:	e0bffc17 	ldw	r2,-16(fp)
   20c2c:	10800a04 	addi	r2,r2,40
   20c30:	1009883a 	mov	r4,r2
   20c34:	e17ffe17 	ldw	r5,-8(fp)
   20c38:	e1bfff17 	ldw	r6,-4(fp)
   20c3c:	002102c0 	call	2102c <altera_avalon_jtag_uart_ioctl>
}
   20c40:	e037883a 	mov	sp,fp
   20c44:	dfc00117 	ldw	ra,4(sp)
   20c48:	df000017 	ldw	fp,0(sp)
   20c4c:	dec00204 	addi	sp,sp,8
   20c50:	f800283a 	ret

00020c54 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   20c54:	defffa04 	addi	sp,sp,-24
   20c58:	dfc00515 	stw	ra,20(sp)
   20c5c:	df000415 	stw	fp,16(sp)
   20c60:	df000404 	addi	fp,sp,16
   20c64:	e13ffd15 	stw	r4,-12(fp)
   20c68:	e17ffe15 	stw	r5,-8(fp)
   20c6c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20c70:	e0bffd17 	ldw	r2,-12(fp)
   20c74:	00c00044 	movi	r3,1
   20c78:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   20c7c:	e0bffd17 	ldw	r2,-12(fp)
   20c80:	10800017 	ldw	r2,0(r2)
   20c84:	10800104 	addi	r2,r2,4
   20c88:	1007883a 	mov	r3,r2
   20c8c:	e0bffd17 	ldw	r2,-12(fp)
   20c90:	10800817 	ldw	r2,32(r2)
   20c94:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   20c98:	e0fffe17 	ldw	r3,-8(fp)
   20c9c:	e0bfff17 	ldw	r2,-4(fp)
   20ca0:	d8000015 	stw	zero,0(sp)
   20ca4:	1809883a 	mov	r4,r3
   20ca8:	100b883a 	mov	r5,r2
   20cac:	018000b4 	movhi	r6,2
   20cb0:	31834604 	addi	r6,r6,3352
   20cb4:	e1fffd17 	ldw	r7,-12(fp)
   20cb8:	00224f80 	call	224f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   20cbc:	e0bffd17 	ldw	r2,-12(fp)
   20cc0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   20cc4:	e0bffd17 	ldw	r2,-12(fp)
   20cc8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   20ccc:	008000b4 	movhi	r2,2
   20cd0:	10998e04 	addi	r2,r2,26168
   20cd4:	10800017 	ldw	r2,0(r2)
   20cd8:	1809883a 	mov	r4,r3
   20cdc:	100b883a 	mov	r5,r2
   20ce0:	018000b4 	movhi	r6,2
   20ce4:	3183c704 	addi	r6,r6,3868
   20ce8:	e1fffd17 	ldw	r7,-12(fp)
   20cec:	0021f280 	call	21f28 <alt_alarm_start>
   20cf0:	1000040e 	bge	r2,zero,20d04 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   20cf4:	e0fffd17 	ldw	r3,-12(fp)
   20cf8:	00a00034 	movhi	r2,32768
   20cfc:	10bfffc4 	addi	r2,r2,-1
   20d00:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   20d04:	e037883a 	mov	sp,fp
   20d08:	dfc00117 	ldw	ra,4(sp)
   20d0c:	df000017 	ldw	fp,0(sp)
   20d10:	dec00204 	addi	sp,sp,8
   20d14:	f800283a 	ret

00020d18 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   20d18:	defff804 	addi	sp,sp,-32
   20d1c:	df000715 	stw	fp,28(sp)
   20d20:	df000704 	addi	fp,sp,28
   20d24:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   20d28:	e0bfff17 	ldw	r2,-4(fp)
   20d2c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   20d30:	e0bffb17 	ldw	r2,-20(fp)
   20d34:	10800017 	ldw	r2,0(r2)
   20d38:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20d3c:	e0bffc17 	ldw	r2,-16(fp)
   20d40:	10800104 	addi	r2,r2,4
   20d44:	10800037 	ldwio	r2,0(r2)
   20d48:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   20d4c:	e0bffd17 	ldw	r2,-12(fp)
   20d50:	1080c00c 	andi	r2,r2,768
   20d54:	1000011e 	bne	r2,zero,20d5c <altera_avalon_jtag_uart_irq+0x44>
      break;
   20d58:	00006c06 	br	20f0c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   20d5c:	e0bffd17 	ldw	r2,-12(fp)
   20d60:	1080400c 	andi	r2,r2,256
   20d64:	10003426 	beq	r2,zero,20e38 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   20d68:	00800074 	movhi	r2,1
   20d6c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20d70:	e0bffb17 	ldw	r2,-20(fp)
   20d74:	10800a17 	ldw	r2,40(r2)
   20d78:	10800044 	addi	r2,r2,1
   20d7c:	1081ffcc 	andi	r2,r2,2047
   20d80:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   20d84:	e0bffb17 	ldw	r2,-20(fp)
   20d88:	10c00b17 	ldw	r3,44(r2)
   20d8c:	e0bffe17 	ldw	r2,-8(fp)
   20d90:	1880011e 	bne	r3,r2,20d98 <altera_avalon_jtag_uart_irq+0x80>
          break;
   20d94:	00001606 	br	20df0 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   20d98:	e0bffc17 	ldw	r2,-16(fp)
   20d9c:	10800037 	ldwio	r2,0(r2)
   20da0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   20da4:	e0bff917 	ldw	r2,-28(fp)
   20da8:	10a0000c 	andi	r2,r2,32768
   20dac:	1000011e 	bne	r2,zero,20db4 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   20db0:	00000f06 	br	20df0 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   20db4:	e0bffb17 	ldw	r2,-20(fp)
   20db8:	10800a17 	ldw	r2,40(r2)
   20dbc:	e0fff917 	ldw	r3,-28(fp)
   20dc0:	1809883a 	mov	r4,r3
   20dc4:	e0fffb17 	ldw	r3,-20(fp)
   20dc8:	1885883a 	add	r2,r3,r2
   20dcc:	10800e04 	addi	r2,r2,56
   20dd0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20dd4:	e0bffb17 	ldw	r2,-20(fp)
   20dd8:	10800a17 	ldw	r2,40(r2)
   20ddc:	10800044 	addi	r2,r2,1
   20de0:	10c1ffcc 	andi	r3,r2,2047
   20de4:	e0bffb17 	ldw	r2,-20(fp)
   20de8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   20dec:	003fe006 	br	20d70 <__alt_data_end+0xfffe4850>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   20df0:	e0bff917 	ldw	r2,-28(fp)
   20df4:	10bfffec 	andhi	r2,r2,65535
   20df8:	10000f26 	beq	r2,zero,20e38 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20dfc:	e0bffb17 	ldw	r2,-20(fp)
   20e00:	10c00817 	ldw	r3,32(r2)
   20e04:	00bfff84 	movi	r2,-2
   20e08:	1886703a 	and	r3,r3,r2
   20e0c:	e0bffb17 	ldw	r2,-20(fp)
   20e10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   20e14:	e0bffc17 	ldw	r2,-16(fp)
   20e18:	10800104 	addi	r2,r2,4
   20e1c:	1007883a 	mov	r3,r2
   20e20:	e0bffb17 	ldw	r2,-20(fp)
   20e24:	10800817 	ldw	r2,32(r2)
   20e28:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20e2c:	e0bffc17 	ldw	r2,-16(fp)
   20e30:	10800104 	addi	r2,r2,4
   20e34:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   20e38:	e0bffd17 	ldw	r2,-12(fp)
   20e3c:	1080800c 	andi	r2,r2,512
   20e40:	10003126 	beq	r2,zero,20f08 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   20e44:	e0bffd17 	ldw	r2,-12(fp)
   20e48:	1004d43a 	srli	r2,r2,16
   20e4c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   20e50:	00001406 	br	20ea4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   20e54:	e0bffc17 	ldw	r2,-16(fp)
   20e58:	e0fffb17 	ldw	r3,-20(fp)
   20e5c:	18c00d17 	ldw	r3,52(r3)
   20e60:	e13ffb17 	ldw	r4,-20(fp)
   20e64:	20c7883a 	add	r3,r4,r3
   20e68:	18c20e04 	addi	r3,r3,2104
   20e6c:	18c00003 	ldbu	r3,0(r3)
   20e70:	18c03fcc 	andi	r3,r3,255
   20e74:	18c0201c 	xori	r3,r3,128
   20e78:	18ffe004 	addi	r3,r3,-128
   20e7c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20e80:	e0bffb17 	ldw	r2,-20(fp)
   20e84:	10800d17 	ldw	r2,52(r2)
   20e88:	10800044 	addi	r2,r2,1
   20e8c:	10c1ffcc 	andi	r3,r2,2047
   20e90:	e0bffb17 	ldw	r2,-20(fp)
   20e94:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   20e98:	e0bffa17 	ldw	r2,-24(fp)
   20e9c:	10bfffc4 	addi	r2,r2,-1
   20ea0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   20ea4:	e0bffa17 	ldw	r2,-24(fp)
   20ea8:	10000526 	beq	r2,zero,20ec0 <altera_avalon_jtag_uart_irq+0x1a8>
   20eac:	e0bffb17 	ldw	r2,-20(fp)
   20eb0:	10c00d17 	ldw	r3,52(r2)
   20eb4:	e0bffb17 	ldw	r2,-20(fp)
   20eb8:	10800c17 	ldw	r2,48(r2)
   20ebc:	18bfe51e 	bne	r3,r2,20e54 <__alt_data_end+0xfffe4934>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   20ec0:	e0bffa17 	ldw	r2,-24(fp)
   20ec4:	10001026 	beq	r2,zero,20f08 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   20ec8:	e0bffb17 	ldw	r2,-20(fp)
   20ecc:	10c00817 	ldw	r3,32(r2)
   20ed0:	00bfff44 	movi	r2,-3
   20ed4:	1886703a 	and	r3,r3,r2
   20ed8:	e0bffb17 	ldw	r2,-20(fp)
   20edc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20ee0:	e0bffb17 	ldw	r2,-20(fp)
   20ee4:	10800017 	ldw	r2,0(r2)
   20ee8:	10800104 	addi	r2,r2,4
   20eec:	1007883a 	mov	r3,r2
   20ef0:	e0bffb17 	ldw	r2,-20(fp)
   20ef4:	10800817 	ldw	r2,32(r2)
   20ef8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20efc:	e0bffc17 	ldw	r2,-16(fp)
   20f00:	10800104 	addi	r2,r2,4
   20f04:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   20f08:	003f8c06 	br	20d3c <__alt_data_end+0xfffe481c>
}
   20f0c:	e037883a 	mov	sp,fp
   20f10:	df000017 	ldw	fp,0(sp)
   20f14:	dec00104 	addi	sp,sp,4
   20f18:	f800283a 	ret

00020f1c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   20f1c:	defff804 	addi	sp,sp,-32
   20f20:	df000715 	stw	fp,28(sp)
   20f24:	df000704 	addi	fp,sp,28
   20f28:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   20f2c:	e0bffb17 	ldw	r2,-20(fp)
   20f30:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   20f34:	e0bff917 	ldw	r2,-28(fp)
   20f38:	10800017 	ldw	r2,0(r2)
   20f3c:	10800104 	addi	r2,r2,4
   20f40:	10800037 	ldwio	r2,0(r2)
   20f44:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   20f48:	e0bffa17 	ldw	r2,-24(fp)
   20f4c:	1081000c 	andi	r2,r2,1024
   20f50:	10000b26 	beq	r2,zero,20f80 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   20f54:	e0bff917 	ldw	r2,-28(fp)
   20f58:	10800017 	ldw	r2,0(r2)
   20f5c:	10800104 	addi	r2,r2,4
   20f60:	1007883a 	mov	r3,r2
   20f64:	e0bff917 	ldw	r2,-28(fp)
   20f68:	10800817 	ldw	r2,32(r2)
   20f6c:	10810014 	ori	r2,r2,1024
   20f70:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   20f74:	e0bff917 	ldw	r2,-28(fp)
   20f78:	10000915 	stw	zero,36(r2)
   20f7c:	00000a06 	br	20fa8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   20f80:	e0bff917 	ldw	r2,-28(fp)
   20f84:	10c00917 	ldw	r3,36(r2)
   20f88:	00a00034 	movhi	r2,32768
   20f8c:	10bfff04 	addi	r2,r2,-4
   20f90:	10c00536 	bltu	r2,r3,20fa8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   20f94:	e0bff917 	ldw	r2,-28(fp)
   20f98:	10800917 	ldw	r2,36(r2)
   20f9c:	10c00044 	addi	r3,r2,1
   20fa0:	e0bff917 	ldw	r2,-28(fp)
   20fa4:	10c00915 	stw	r3,36(r2)
   20fa8:	008000b4 	movhi	r2,2
   20fac:	10998e04 	addi	r2,r2,26168
   20fb0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   20fb4:	e037883a 	mov	sp,fp
   20fb8:	df000017 	ldw	fp,0(sp)
   20fbc:	dec00104 	addi	sp,sp,4
   20fc0:	f800283a 	ret

00020fc4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   20fc4:	defffd04 	addi	sp,sp,-12
   20fc8:	df000215 	stw	fp,8(sp)
   20fcc:	df000204 	addi	fp,sp,8
   20fd0:	e13ffe15 	stw	r4,-8(fp)
   20fd4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20fd8:	00000506 	br	20ff0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   20fdc:	e0bfff17 	ldw	r2,-4(fp)
   20fe0:	1090000c 	andi	r2,r2,16384
   20fe4:	10000226 	beq	r2,zero,20ff0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   20fe8:	00bffd44 	movi	r2,-11
   20fec:	00000b06 	br	2101c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20ff0:	e0bffe17 	ldw	r2,-8(fp)
   20ff4:	10c00d17 	ldw	r3,52(r2)
   20ff8:	e0bffe17 	ldw	r2,-8(fp)
   20ffc:	10800c17 	ldw	r2,48(r2)
   21000:	18800526 	beq	r3,r2,21018 <altera_avalon_jtag_uart_close+0x54>
   21004:	e0bffe17 	ldw	r2,-8(fp)
   21008:	10c00917 	ldw	r3,36(r2)
   2100c:	e0bffe17 	ldw	r2,-8(fp)
   21010:	10800117 	ldw	r2,4(r2)
   21014:	18bff136 	bltu	r3,r2,20fdc <__alt_data_end+0xfffe4abc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   21018:	0005883a 	mov	r2,zero
}
   2101c:	e037883a 	mov	sp,fp
   21020:	df000017 	ldw	fp,0(sp)
   21024:	dec00104 	addi	sp,sp,4
   21028:	f800283a 	ret

0002102c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2102c:	defffa04 	addi	sp,sp,-24
   21030:	df000515 	stw	fp,20(sp)
   21034:	df000504 	addi	fp,sp,20
   21038:	e13ffd15 	stw	r4,-12(fp)
   2103c:	e17ffe15 	stw	r5,-8(fp)
   21040:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   21044:	00bff9c4 	movi	r2,-25
   21048:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2104c:	e0bffe17 	ldw	r2,-8(fp)
   21050:	10da8060 	cmpeqi	r3,r2,27137
   21054:	1800031e 	bne	r3,zero,21064 <altera_avalon_jtag_uart_ioctl+0x38>
   21058:	109a80a0 	cmpeqi	r2,r2,27138
   2105c:	1000191e 	bne	r2,zero,210c4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   21060:	00002806 	br	21104 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   21064:	e0bffd17 	ldw	r2,-12(fp)
   21068:	10c00117 	ldw	r3,4(r2)
   2106c:	00a00034 	movhi	r2,32768
   21070:	10bfffc4 	addi	r2,r2,-1
   21074:	18801226 	beq	r3,r2,210c0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   21078:	e0bfff17 	ldw	r2,-4(fp)
   2107c:	10800017 	ldw	r2,0(r2)
   21080:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   21084:	e0bffc17 	ldw	r2,-16(fp)
   21088:	10800090 	cmplti	r2,r2,2
   2108c:	1000061e 	bne	r2,zero,210a8 <altera_avalon_jtag_uart_ioctl+0x7c>
   21090:	e0fffc17 	ldw	r3,-16(fp)
   21094:	00a00034 	movhi	r2,32768
   21098:	10bfffc4 	addi	r2,r2,-1
   2109c:	18800226 	beq	r3,r2,210a8 <altera_avalon_jtag_uart_ioctl+0x7c>
   210a0:	e0bffc17 	ldw	r2,-16(fp)
   210a4:	00000206 	br	210b0 <altera_avalon_jtag_uart_ioctl+0x84>
   210a8:	00a00034 	movhi	r2,32768
   210ac:	10bfff84 	addi	r2,r2,-2
   210b0:	e0fffd17 	ldw	r3,-12(fp)
   210b4:	18800115 	stw	r2,4(r3)
      rc = 0;
   210b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   210bc:	00001106 	br	21104 <altera_avalon_jtag_uart_ioctl+0xd8>
   210c0:	00001006 	br	21104 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   210c4:	e0bffd17 	ldw	r2,-12(fp)
   210c8:	10c00117 	ldw	r3,4(r2)
   210cc:	00a00034 	movhi	r2,32768
   210d0:	10bfffc4 	addi	r2,r2,-1
   210d4:	18800a26 	beq	r3,r2,21100 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   210d8:	e0bffd17 	ldw	r2,-12(fp)
   210dc:	10c00917 	ldw	r3,36(r2)
   210e0:	e0bffd17 	ldw	r2,-12(fp)
   210e4:	10800117 	ldw	r2,4(r2)
   210e8:	1885803a 	cmpltu	r2,r3,r2
   210ec:	10c03fcc 	andi	r3,r2,255
   210f0:	e0bfff17 	ldw	r2,-4(fp)
   210f4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   210f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   210fc:	00000006 	br	21100 <altera_avalon_jtag_uart_ioctl+0xd4>
   21100:	0001883a 	nop

  default:
    break;
  }

  return rc;
   21104:	e0bffb17 	ldw	r2,-20(fp)
}
   21108:	e037883a 	mov	sp,fp
   2110c:	df000017 	ldw	fp,0(sp)
   21110:	dec00104 	addi	sp,sp,4
   21114:	f800283a 	ret

00021118 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   21118:	defff304 	addi	sp,sp,-52
   2111c:	dfc00c15 	stw	ra,48(sp)
   21120:	df000b15 	stw	fp,44(sp)
   21124:	df000b04 	addi	fp,sp,44
   21128:	e13ffc15 	stw	r4,-16(fp)
   2112c:	e17ffd15 	stw	r5,-12(fp)
   21130:	e1bffe15 	stw	r6,-8(fp)
   21134:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   21138:	e0bffd17 	ldw	r2,-12(fp)
   2113c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21140:	00004906 	br	21268 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   21144:	e0bffc17 	ldw	r2,-16(fp)
   21148:	10800a17 	ldw	r2,40(r2)
   2114c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   21150:	e0bffc17 	ldw	r2,-16(fp)
   21154:	10800b17 	ldw	r2,44(r2)
   21158:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2115c:	e0fff717 	ldw	r3,-36(fp)
   21160:	e0bff817 	ldw	r2,-32(fp)
   21164:	18800536 	bltu	r3,r2,2117c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   21168:	e0fff717 	ldw	r3,-36(fp)
   2116c:	e0bff817 	ldw	r2,-32(fp)
   21170:	1885c83a 	sub	r2,r3,r2
   21174:	e0bff615 	stw	r2,-40(fp)
   21178:	00000406 	br	2118c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2117c:	00c20004 	movi	r3,2048
   21180:	e0bff817 	ldw	r2,-32(fp)
   21184:	1885c83a 	sub	r2,r3,r2
   21188:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2118c:	e0bff617 	ldw	r2,-40(fp)
   21190:	1000011e 	bne	r2,zero,21198 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   21194:	00001d06 	br	2120c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   21198:	e0fffe17 	ldw	r3,-8(fp)
   2119c:	e0bff617 	ldw	r2,-40(fp)
   211a0:	1880022e 	bgeu	r3,r2,211ac <altera_avalon_jtag_uart_read+0x94>
        n = space;
   211a4:	e0bffe17 	ldw	r2,-8(fp)
   211a8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   211ac:	e0bff817 	ldw	r2,-32(fp)
   211b0:	10800e04 	addi	r2,r2,56
   211b4:	e0fffc17 	ldw	r3,-16(fp)
   211b8:	1885883a 	add	r2,r3,r2
   211bc:	e13ff517 	ldw	r4,-44(fp)
   211c0:	100b883a 	mov	r5,r2
   211c4:	e1bff617 	ldw	r6,-40(fp)
   211c8:	00231dc0 	call	231dc <memcpy>
      ptr   += n;
   211cc:	e0fff517 	ldw	r3,-44(fp)
   211d0:	e0bff617 	ldw	r2,-40(fp)
   211d4:	1885883a 	add	r2,r3,r2
   211d8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   211dc:	e0fffe17 	ldw	r3,-8(fp)
   211e0:	e0bff617 	ldw	r2,-40(fp)
   211e4:	1885c83a 	sub	r2,r3,r2
   211e8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   211ec:	e0fff817 	ldw	r3,-32(fp)
   211f0:	e0bff617 	ldw	r2,-40(fp)
   211f4:	1885883a 	add	r2,r3,r2
   211f8:	10c1ffcc 	andi	r3,r2,2047
   211fc:	e0bffc17 	ldw	r2,-16(fp)
   21200:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   21204:	e0bffe17 	ldw	r2,-8(fp)
   21208:	00bfce16 	blt	zero,r2,21144 <__alt_data_end+0xfffe4c24>

    /* If we read any data then return it */
    if (ptr != buffer)
   2120c:	e0fff517 	ldw	r3,-44(fp)
   21210:	e0bffd17 	ldw	r2,-12(fp)
   21214:	18800126 	beq	r3,r2,2121c <altera_avalon_jtag_uart_read+0x104>
      break;
   21218:	00001506 	br	21270 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2121c:	e0bfff17 	ldw	r2,-4(fp)
   21220:	1090000c 	andi	r2,r2,16384
   21224:	10000126 	beq	r2,zero,2122c <altera_avalon_jtag_uart_read+0x114>
      break;
   21228:	00001106 	br	21270 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2122c:	0001883a 	nop
   21230:	e0bffc17 	ldw	r2,-16(fp)
   21234:	10c00a17 	ldw	r3,40(r2)
   21238:	e0bff717 	ldw	r2,-36(fp)
   2123c:	1880051e 	bne	r3,r2,21254 <altera_avalon_jtag_uart_read+0x13c>
   21240:	e0bffc17 	ldw	r2,-16(fp)
   21244:	10c00917 	ldw	r3,36(r2)
   21248:	e0bffc17 	ldw	r2,-16(fp)
   2124c:	10800117 	ldw	r2,4(r2)
   21250:	18bff736 	bltu	r3,r2,21230 <__alt_data_end+0xfffe4d10>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   21254:	e0bffc17 	ldw	r2,-16(fp)
   21258:	10c00a17 	ldw	r3,40(r2)
   2125c:	e0bff717 	ldw	r2,-36(fp)
   21260:	1880011e 	bne	r3,r2,21268 <altera_avalon_jtag_uart_read+0x150>
      break;
   21264:	00000206 	br	21270 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21268:	e0bffe17 	ldw	r2,-8(fp)
   2126c:	00bfb516 	blt	zero,r2,21144 <__alt_data_end+0xfffe4c24>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   21270:	e0fff517 	ldw	r3,-44(fp)
   21274:	e0bffd17 	ldw	r2,-12(fp)
   21278:	18801826 	beq	r3,r2,212dc <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2127c:	0005303a 	rdctl	r2,status
   21280:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21284:	e0fffa17 	ldw	r3,-24(fp)
   21288:	00bfff84 	movi	r2,-2
   2128c:	1884703a 	and	r2,r3,r2
   21290:	1001703a 	wrctl	status,r2
  
  return context;
   21294:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   21298:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2129c:	e0bffc17 	ldw	r2,-16(fp)
   212a0:	10800817 	ldw	r2,32(r2)
   212a4:	10c00054 	ori	r3,r2,1
   212a8:	e0bffc17 	ldw	r2,-16(fp)
   212ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   212b0:	e0bffc17 	ldw	r2,-16(fp)
   212b4:	10800017 	ldw	r2,0(r2)
   212b8:	10800104 	addi	r2,r2,4
   212bc:	1007883a 	mov	r3,r2
   212c0:	e0bffc17 	ldw	r2,-16(fp)
   212c4:	10800817 	ldw	r2,32(r2)
   212c8:	18800035 	stwio	r2,0(r3)
   212cc:	e0bff917 	ldw	r2,-28(fp)
   212d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   212d4:	e0bffb17 	ldw	r2,-20(fp)
   212d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   212dc:	e0fff517 	ldw	r3,-44(fp)
   212e0:	e0bffd17 	ldw	r2,-12(fp)
   212e4:	18800426 	beq	r3,r2,212f8 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   212e8:	e0fff517 	ldw	r3,-44(fp)
   212ec:	e0bffd17 	ldw	r2,-12(fp)
   212f0:	1885c83a 	sub	r2,r3,r2
   212f4:	00000606 	br	21310 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   212f8:	e0bfff17 	ldw	r2,-4(fp)
   212fc:	1090000c 	andi	r2,r2,16384
   21300:	10000226 	beq	r2,zero,2130c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   21304:	00bffd44 	movi	r2,-11
   21308:	00000106 	br	21310 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   2130c:	00bffec4 	movi	r2,-5
}
   21310:	e037883a 	mov	sp,fp
   21314:	dfc00117 	ldw	ra,4(sp)
   21318:	df000017 	ldw	fp,0(sp)
   2131c:	dec00204 	addi	sp,sp,8
   21320:	f800283a 	ret

00021324 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   21324:	defff304 	addi	sp,sp,-52
   21328:	dfc00c15 	stw	ra,48(sp)
   2132c:	df000b15 	stw	fp,44(sp)
   21330:	df000b04 	addi	fp,sp,44
   21334:	e13ffc15 	stw	r4,-16(fp)
   21338:	e17ffd15 	stw	r5,-12(fp)
   2133c:	e1bffe15 	stw	r6,-8(fp)
   21340:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   21344:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   21348:	e0bffd17 	ldw	r2,-12(fp)
   2134c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21350:	00003806 	br	21434 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   21354:	e0bffc17 	ldw	r2,-16(fp)
   21358:	10800c17 	ldw	r2,48(r2)
   2135c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   21360:	e0bffc17 	ldw	r2,-16(fp)
   21364:	10800d17 	ldw	r2,52(r2)
   21368:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2136c:	e0fff817 	ldw	r3,-32(fp)
   21370:	e0bff517 	ldw	r2,-44(fp)
   21374:	1880062e 	bgeu	r3,r2,21390 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   21378:	e0fff517 	ldw	r3,-44(fp)
   2137c:	e0bff817 	ldw	r2,-32(fp)
   21380:	1885c83a 	sub	r2,r3,r2
   21384:	10bfffc4 	addi	r2,r2,-1
   21388:	e0bff615 	stw	r2,-40(fp)
   2138c:	00000b06 	br	213bc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   21390:	e0bff517 	ldw	r2,-44(fp)
   21394:	10000526 	beq	r2,zero,213ac <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   21398:	00c20004 	movi	r3,2048
   2139c:	e0bff817 	ldw	r2,-32(fp)
   213a0:	1885c83a 	sub	r2,r3,r2
   213a4:	e0bff615 	stw	r2,-40(fp)
   213a8:	00000406 	br	213bc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   213ac:	00c1ffc4 	movi	r3,2047
   213b0:	e0bff817 	ldw	r2,-32(fp)
   213b4:	1885c83a 	sub	r2,r3,r2
   213b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   213bc:	e0bff617 	ldw	r2,-40(fp)
   213c0:	1000011e 	bne	r2,zero,213c8 <altera_avalon_jtag_uart_write+0xa4>
        break;
   213c4:	00001d06 	br	2143c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   213c8:	e0fffe17 	ldw	r3,-8(fp)
   213cc:	e0bff617 	ldw	r2,-40(fp)
   213d0:	1880022e 	bgeu	r3,r2,213dc <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   213d4:	e0bffe17 	ldw	r2,-8(fp)
   213d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   213dc:	e0bff817 	ldw	r2,-32(fp)
   213e0:	10820e04 	addi	r2,r2,2104
   213e4:	e0fffc17 	ldw	r3,-16(fp)
   213e8:	1885883a 	add	r2,r3,r2
   213ec:	1009883a 	mov	r4,r2
   213f0:	e17ffd17 	ldw	r5,-12(fp)
   213f4:	e1bff617 	ldw	r6,-40(fp)
   213f8:	00231dc0 	call	231dc <memcpy>
      ptr   += n;
   213fc:	e0fffd17 	ldw	r3,-12(fp)
   21400:	e0bff617 	ldw	r2,-40(fp)
   21404:	1885883a 	add	r2,r3,r2
   21408:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2140c:	e0fffe17 	ldw	r3,-8(fp)
   21410:	e0bff617 	ldw	r2,-40(fp)
   21414:	1885c83a 	sub	r2,r3,r2
   21418:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2141c:	e0fff817 	ldw	r3,-32(fp)
   21420:	e0bff617 	ldw	r2,-40(fp)
   21424:	1885883a 	add	r2,r3,r2
   21428:	10c1ffcc 	andi	r3,r2,2047
   2142c:	e0bffc17 	ldw	r2,-16(fp)
   21430:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21434:	e0bffe17 	ldw	r2,-8(fp)
   21438:	00bfc616 	blt	zero,r2,21354 <__alt_data_end+0xfffe4e34>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2143c:	0005303a 	rdctl	r2,status
   21440:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21444:	e0fffa17 	ldw	r3,-24(fp)
   21448:	00bfff84 	movi	r2,-2
   2144c:	1884703a 	and	r2,r3,r2
   21450:	1001703a 	wrctl	status,r2
  
  return context;
   21454:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   21458:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2145c:	e0bffc17 	ldw	r2,-16(fp)
   21460:	10800817 	ldw	r2,32(r2)
   21464:	10c00094 	ori	r3,r2,2
   21468:	e0bffc17 	ldw	r2,-16(fp)
   2146c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21470:	e0bffc17 	ldw	r2,-16(fp)
   21474:	10800017 	ldw	r2,0(r2)
   21478:	10800104 	addi	r2,r2,4
   2147c:	1007883a 	mov	r3,r2
   21480:	e0bffc17 	ldw	r2,-16(fp)
   21484:	10800817 	ldw	r2,32(r2)
   21488:	18800035 	stwio	r2,0(r3)
   2148c:	e0bff917 	ldw	r2,-28(fp)
   21490:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21494:	e0bffb17 	ldw	r2,-20(fp)
   21498:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2149c:	e0bffe17 	ldw	r2,-8(fp)
   214a0:	0080120e 	bge	zero,r2,214ec <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   214a4:	e0bfff17 	ldw	r2,-4(fp)
   214a8:	1090000c 	andi	r2,r2,16384
   214ac:	10000126 	beq	r2,zero,214b4 <altera_avalon_jtag_uart_write+0x190>
        break;
   214b0:	00001006 	br	214f4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   214b4:	0001883a 	nop
   214b8:	e0bffc17 	ldw	r2,-16(fp)
   214bc:	10c00d17 	ldw	r3,52(r2)
   214c0:	e0bff517 	ldw	r2,-44(fp)
   214c4:	1880051e 	bne	r3,r2,214dc <altera_avalon_jtag_uart_write+0x1b8>
   214c8:	e0bffc17 	ldw	r2,-16(fp)
   214cc:	10c00917 	ldw	r3,36(r2)
   214d0:	e0bffc17 	ldw	r2,-16(fp)
   214d4:	10800117 	ldw	r2,4(r2)
   214d8:	18bff736 	bltu	r3,r2,214b8 <__alt_data_end+0xfffe4f98>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   214dc:	e0bffc17 	ldw	r2,-16(fp)
   214e0:	10800917 	ldw	r2,36(r2)
   214e4:	10000126 	beq	r2,zero,214ec <altera_avalon_jtag_uart_write+0x1c8>
         break;
   214e8:	00000206 	br	214f4 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   214ec:	e0bffe17 	ldw	r2,-8(fp)
   214f0:	00bf9716 	blt	zero,r2,21350 <__alt_data_end+0xfffe4e30>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   214f4:	e0fffd17 	ldw	r3,-12(fp)
   214f8:	e0bff717 	ldw	r2,-36(fp)
   214fc:	18800426 	beq	r3,r2,21510 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   21500:	e0fffd17 	ldw	r3,-12(fp)
   21504:	e0bff717 	ldw	r2,-36(fp)
   21508:	1885c83a 	sub	r2,r3,r2
   2150c:	00000606 	br	21528 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   21510:	e0bfff17 	ldw	r2,-4(fp)
   21514:	1090000c 	andi	r2,r2,16384
   21518:	10000226 	beq	r2,zero,21524 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   2151c:	00bffd44 	movi	r2,-11
   21520:	00000106 	br	21528 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   21524:	00bffec4 	movi	r2,-5
}
   21528:	e037883a 	mov	sp,fp
   2152c:	dfc00117 	ldw	ra,4(sp)
   21530:	df000017 	ldw	fp,0(sp)
   21534:	dec00204 	addi	sp,sp,8
   21538:	f800283a 	ret

0002153c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2153c:	defffa04 	addi	sp,sp,-24
   21540:	dfc00515 	stw	ra,20(sp)
   21544:	df000415 	stw	fp,16(sp)
   21548:	df000404 	addi	fp,sp,16
   2154c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   21550:	0007883a 	mov	r3,zero
   21554:	e0bfff17 	ldw	r2,-4(fp)
   21558:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2155c:	e0bfff17 	ldw	r2,-4(fp)
   21560:	10800104 	addi	r2,r2,4
   21564:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21568:	0005303a 	rdctl	r2,status
   2156c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21570:	e0fffd17 	ldw	r3,-12(fp)
   21574:	00bfff84 	movi	r2,-2
   21578:	1884703a 	and	r2,r3,r2
   2157c:	1001703a 	wrctl	status,r2
  
  return context;
   21580:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   21584:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   21588:	0022cdc0 	call	22cdc <alt_tick>
   2158c:	e0bffc17 	ldw	r2,-16(fp)
   21590:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21594:	e0bffe17 	ldw	r2,-8(fp)
   21598:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2159c:	e037883a 	mov	sp,fp
   215a0:	dfc00117 	ldw	ra,4(sp)
   215a4:	df000017 	ldw	fp,0(sp)
   215a8:	dec00204 	addi	sp,sp,8
   215ac:	f800283a 	ret

000215b0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   215b0:	defff804 	addi	sp,sp,-32
   215b4:	dfc00715 	stw	ra,28(sp)
   215b8:	df000615 	stw	fp,24(sp)
   215bc:	df000604 	addi	fp,sp,24
   215c0:	e13ffc15 	stw	r4,-16(fp)
   215c4:	e17ffd15 	stw	r5,-12(fp)
   215c8:	e1bffe15 	stw	r6,-8(fp)
   215cc:	e1ffff15 	stw	r7,-4(fp)
   215d0:	e0bfff17 	ldw	r2,-4(fp)
   215d4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   215d8:	008000b4 	movhi	r2,2
   215dc:	10998e04 	addi	r2,r2,26168
   215e0:	10800017 	ldw	r2,0(r2)
   215e4:	1000041e 	bne	r2,zero,215f8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   215e8:	008000b4 	movhi	r2,2
   215ec:	10998e04 	addi	r2,r2,26168
   215f0:	e0fffb17 	ldw	r3,-20(fp)
   215f4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   215f8:	e0bffc17 	ldw	r2,-16(fp)
   215fc:	10800104 	addi	r2,r2,4
   21600:	00c001c4 	movi	r3,7
   21604:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   21608:	d8000015 	stw	zero,0(sp)
   2160c:	e13ffd17 	ldw	r4,-12(fp)
   21610:	e17ffe17 	ldw	r5,-8(fp)
   21614:	018000b4 	movhi	r6,2
   21618:	31854f04 	addi	r6,r6,5436
   2161c:	e1fffc17 	ldw	r7,-16(fp)
   21620:	00224f80 	call	224f8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   21624:	e037883a 	mov	sp,fp
   21628:	dfc00117 	ldw	ra,4(sp)
   2162c:	df000017 	ldw	fp,0(sp)
   21630:	dec00204 	addi	sp,sp,8
   21634:	f800283a 	ret

00021638 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   21638:	defffa04 	addi	sp,sp,-24
   2163c:	dfc00515 	stw	ra,20(sp)
   21640:	df000415 	stw	fp,16(sp)
   21644:	df000404 	addi	fp,sp,16
   21648:	e13ffd15 	stw	r4,-12(fp)
   2164c:	e17ffe15 	stw	r5,-8(fp)
   21650:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   21654:	e0bffd17 	ldw	r2,-12(fp)
   21658:	10800017 	ldw	r2,0(r2)
   2165c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   21660:	e0bffc17 	ldw	r2,-16(fp)
   21664:	10c00a04 	addi	r3,r2,40
   21668:	e0bffd17 	ldw	r2,-12(fp)
   2166c:	10800217 	ldw	r2,8(r2)
   21670:	1809883a 	mov	r4,r3
   21674:	e17ffe17 	ldw	r5,-8(fp)
   21678:	e1bfff17 	ldw	r6,-4(fp)
   2167c:	100f883a 	mov	r7,r2
   21680:	0021b500 	call	21b50 <altera_avalon_uart_read>
      fd->fd_flags);
}
   21684:	e037883a 	mov	sp,fp
   21688:	dfc00117 	ldw	ra,4(sp)
   2168c:	df000017 	ldw	fp,0(sp)
   21690:	dec00204 	addi	sp,sp,8
   21694:	f800283a 	ret

00021698 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   21698:	defffa04 	addi	sp,sp,-24
   2169c:	dfc00515 	stw	ra,20(sp)
   216a0:	df000415 	stw	fp,16(sp)
   216a4:	df000404 	addi	fp,sp,16
   216a8:	e13ffd15 	stw	r4,-12(fp)
   216ac:	e17ffe15 	stw	r5,-8(fp)
   216b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   216b4:	e0bffd17 	ldw	r2,-12(fp)
   216b8:	10800017 	ldw	r2,0(r2)
   216bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   216c0:	e0bffc17 	ldw	r2,-16(fp)
   216c4:	10c00a04 	addi	r3,r2,40
   216c8:	e0bffd17 	ldw	r2,-12(fp)
   216cc:	10800217 	ldw	r2,8(r2)
   216d0:	1809883a 	mov	r4,r3
   216d4:	e17ffe17 	ldw	r5,-8(fp)
   216d8:	e1bfff17 	ldw	r6,-4(fp)
   216dc:	100f883a 	mov	r7,r2
   216e0:	0021d7c0 	call	21d7c <altera_avalon_uart_write>
      fd->fd_flags);
}
   216e4:	e037883a 	mov	sp,fp
   216e8:	dfc00117 	ldw	ra,4(sp)
   216ec:	df000017 	ldw	fp,0(sp)
   216f0:	dec00204 	addi	sp,sp,8
   216f4:	f800283a 	ret

000216f8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   216f8:	defffc04 	addi	sp,sp,-16
   216fc:	dfc00315 	stw	ra,12(sp)
   21700:	df000215 	stw	fp,8(sp)
   21704:	df000204 	addi	fp,sp,8
   21708:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2170c:	e0bfff17 	ldw	r2,-4(fp)
   21710:	10800017 	ldw	r2,0(r2)
   21714:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   21718:	e0bffe17 	ldw	r2,-8(fp)
   2171c:	10c00a04 	addi	r3,r2,40
   21720:	e0bfff17 	ldw	r2,-4(fp)
   21724:	10800217 	ldw	r2,8(r2)
   21728:	1809883a 	mov	r4,r3
   2172c:	100b883a 	mov	r5,r2
   21730:	0021aac0 	call	21aac <altera_avalon_uart_close>
}
   21734:	e037883a 	mov	sp,fp
   21738:	dfc00117 	ldw	ra,4(sp)
   2173c:	df000017 	ldw	fp,0(sp)
   21740:	dec00204 	addi	sp,sp,8
   21744:	f800283a 	ret

00021748 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   21748:	defff804 	addi	sp,sp,-32
   2174c:	dfc00715 	stw	ra,28(sp)
   21750:	df000615 	stw	fp,24(sp)
   21754:	df000604 	addi	fp,sp,24
   21758:	e13ffd15 	stw	r4,-12(fp)
   2175c:	e17ffe15 	stw	r5,-8(fp)
   21760:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   21764:	e0bffd17 	ldw	r2,-12(fp)
   21768:	10800017 	ldw	r2,0(r2)
   2176c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   21770:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   21774:	1000041e 	bne	r2,zero,21788 <altera_avalon_uart_init+0x40>
   21778:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2177c:	1000021e 	bne	r2,zero,21788 <altera_avalon_uart_init+0x40>
   21780:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   21784:	10000226 	beq	r2,zero,21790 <altera_avalon_uart_init+0x48>
   21788:	00800044 	movi	r2,1
   2178c:	00000106 	br	21794 <altera_avalon_uart_init+0x4c>
   21790:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   21794:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   21798:	e0bffc17 	ldw	r2,-16(fp)
   2179c:	10000f1e 	bne	r2,zero,217dc <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   217a0:	e0bffd17 	ldw	r2,-12(fp)
   217a4:	00c32004 	movi	r3,3200
   217a8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   217ac:	e0bffb17 	ldw	r2,-20(fp)
   217b0:	10800304 	addi	r2,r2,12
   217b4:	e0fffd17 	ldw	r3,-12(fp)
   217b8:	18c00117 	ldw	r3,4(r3)
   217bc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   217c0:	d8000015 	stw	zero,0(sp)
   217c4:	e13ffe17 	ldw	r4,-8(fp)
   217c8:	e17fff17 	ldw	r5,-4(fp)
   217cc:	018000b4 	movhi	r6,2
   217d0:	3185fc04 	addi	r6,r6,6128
   217d4:	e1fffd17 	ldw	r7,-12(fp)
   217d8:	00224f80 	call	224f8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   217dc:	e037883a 	mov	sp,fp
   217e0:	dfc00117 	ldw	ra,4(sp)
   217e4:	df000017 	ldw	fp,0(sp)
   217e8:	dec00204 	addi	sp,sp,8
   217ec:	f800283a 	ret

000217f0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   217f0:	defffa04 	addi	sp,sp,-24
   217f4:	dfc00515 	stw	ra,20(sp)
   217f8:	df000415 	stw	fp,16(sp)
   217fc:	df000404 	addi	fp,sp,16
   21800:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   21804:	e0bfff17 	ldw	r2,-4(fp)
   21808:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   2180c:	e0bffc17 	ldw	r2,-16(fp)
   21810:	10800017 	ldw	r2,0(r2)
   21814:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   21818:	e0bffd17 	ldw	r2,-12(fp)
   2181c:	10800204 	addi	r2,r2,8
   21820:	10800037 	ldwio	r2,0(r2)
   21824:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   21828:	e0bffd17 	ldw	r2,-12(fp)
   2182c:	10800204 	addi	r2,r2,8
   21830:	0007883a 	mov	r3,zero
   21834:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   21838:	e0bffd17 	ldw	r2,-12(fp)
   2183c:	10800204 	addi	r2,r2,8
   21840:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   21844:	e0bffe17 	ldw	r2,-8(fp)
   21848:	1080200c 	andi	r2,r2,128
   2184c:	10000326 	beq	r2,zero,2185c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   21850:	e13ffc17 	ldw	r4,-16(fp)
   21854:	e17ffe17 	ldw	r5,-8(fp)
   21858:	00218880 	call	21888 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   2185c:	e0bffe17 	ldw	r2,-8(fp)
   21860:	1081100c 	andi	r2,r2,1088
   21864:	10000326 	beq	r2,zero,21874 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   21868:	e13ffc17 	ldw	r4,-16(fp)
   2186c:	e17ffe17 	ldw	r5,-8(fp)
   21870:	00219680 	call	21968 <altera_avalon_uart_txirq>
  }
  

}
   21874:	e037883a 	mov	sp,fp
   21878:	dfc00117 	ldw	ra,4(sp)
   2187c:	df000017 	ldw	fp,0(sp)
   21880:	dec00204 	addi	sp,sp,8
   21884:	f800283a 	ret

00021888 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   21888:	defffc04 	addi	sp,sp,-16
   2188c:	df000315 	stw	fp,12(sp)
   21890:	df000304 	addi	fp,sp,12
   21894:	e13ffe15 	stw	r4,-8(fp)
   21898:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   2189c:	e0bfff17 	ldw	r2,-4(fp)
   218a0:	108000cc 	andi	r2,r2,3
   218a4:	10000126 	beq	r2,zero,218ac <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   218a8:	00002b06 	br	21958 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   218ac:	e0bffe17 	ldw	r2,-8(fp)
   218b0:	10800317 	ldw	r2,12(r2)
   218b4:	e0bffe17 	ldw	r2,-8(fp)
   218b8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   218bc:	e0bffe17 	ldw	r2,-8(fp)
   218c0:	10800317 	ldw	r2,12(r2)
   218c4:	10800044 	addi	r2,r2,1
   218c8:	10800fcc 	andi	r2,r2,63
   218cc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   218d0:	e0bffe17 	ldw	r2,-8(fp)
   218d4:	10800317 	ldw	r2,12(r2)
   218d8:	e0fffe17 	ldw	r3,-8(fp)
   218dc:	18c00017 	ldw	r3,0(r3)
   218e0:	18c00037 	ldwio	r3,0(r3)
   218e4:	1809883a 	mov	r4,r3
   218e8:	e0fffe17 	ldw	r3,-8(fp)
   218ec:	1885883a 	add	r2,r3,r2
   218f0:	10800704 	addi	r2,r2,28
   218f4:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   218f8:	e0bffe17 	ldw	r2,-8(fp)
   218fc:	e0fffd17 	ldw	r3,-12(fp)
   21900:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   21904:	e0bffe17 	ldw	r2,-8(fp)
   21908:	10800317 	ldw	r2,12(r2)
   2190c:	10800044 	addi	r2,r2,1
   21910:	10800fcc 	andi	r2,r2,63
   21914:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   21918:	e0bffe17 	ldw	r2,-8(fp)
   2191c:	10c00217 	ldw	r3,8(r2)
   21920:	e0bffd17 	ldw	r2,-12(fp)
   21924:	18800c1e 	bne	r3,r2,21958 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   21928:	e0bffe17 	ldw	r2,-8(fp)
   2192c:	10c00117 	ldw	r3,4(r2)
   21930:	00bfdfc4 	movi	r2,-129
   21934:	1886703a 	and	r3,r3,r2
   21938:	e0bffe17 	ldw	r2,-8(fp)
   2193c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   21940:	e0bffe17 	ldw	r2,-8(fp)
   21944:	10800017 	ldw	r2,0(r2)
   21948:	10800304 	addi	r2,r2,12
   2194c:	e0fffe17 	ldw	r3,-8(fp)
   21950:	18c00117 	ldw	r3,4(r3)
   21954:	10c00035 	stwio	r3,0(r2)
  }   
}
   21958:	e037883a 	mov	sp,fp
   2195c:	df000017 	ldw	fp,0(sp)
   21960:	dec00104 	addi	sp,sp,4
   21964:	f800283a 	ret

00021968 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   21968:	defffb04 	addi	sp,sp,-20
   2196c:	df000415 	stw	fp,16(sp)
   21970:	df000404 	addi	fp,sp,16
   21974:	e13ffc15 	stw	r4,-16(fp)
   21978:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   2197c:	e0bffc17 	ldw	r2,-16(fp)
   21980:	10c00417 	ldw	r3,16(r2)
   21984:	e0bffc17 	ldw	r2,-16(fp)
   21988:	10800517 	ldw	r2,20(r2)
   2198c:	18803226 	beq	r3,r2,21a58 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   21990:	e0bffc17 	ldw	r2,-16(fp)
   21994:	10800617 	ldw	r2,24(r2)
   21998:	1080008c 	andi	r2,r2,2
   2199c:	10000326 	beq	r2,zero,219ac <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   219a0:	e0bffd17 	ldw	r2,-12(fp)
   219a4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   219a8:	10001d26 	beq	r2,zero,21a20 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   219ac:	e0bffc17 	ldw	r2,-16(fp)
   219b0:	10800417 	ldw	r2,16(r2)
   219b4:	e0bffc17 	ldw	r2,-16(fp)
   219b8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   219bc:	e0bffc17 	ldw	r2,-16(fp)
   219c0:	10800017 	ldw	r2,0(r2)
   219c4:	10800104 	addi	r2,r2,4
   219c8:	e0fffc17 	ldw	r3,-16(fp)
   219cc:	18c00417 	ldw	r3,16(r3)
   219d0:	e13ffc17 	ldw	r4,-16(fp)
   219d4:	20c7883a 	add	r3,r4,r3
   219d8:	18c01704 	addi	r3,r3,92
   219dc:	18c00003 	ldbu	r3,0(r3)
   219e0:	18c03fcc 	andi	r3,r3,255
   219e4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   219e8:	e0bffc17 	ldw	r2,-16(fp)
   219ec:	10800417 	ldw	r2,16(r2)
   219f0:	10800044 	addi	r2,r2,1
   219f4:	e0fffc17 	ldw	r3,-16(fp)
   219f8:	18800415 	stw	r2,16(r3)
   219fc:	10c00fcc 	andi	r3,r2,63
   21a00:	e0bffc17 	ldw	r2,-16(fp)
   21a04:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   21a08:	e0bffc17 	ldw	r2,-16(fp)
   21a0c:	10800117 	ldw	r2,4(r2)
   21a10:	10c01014 	ori	r3,r2,64
   21a14:	e0bffc17 	ldw	r2,-16(fp)
   21a18:	10c00115 	stw	r3,4(r2)
   21a1c:	00000e06 	br	21a58 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   21a20:	e0bffc17 	ldw	r2,-16(fp)
   21a24:	10800017 	ldw	r2,0(r2)
   21a28:	10800204 	addi	r2,r2,8
   21a2c:	10800037 	ldwio	r2,0(r2)
   21a30:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   21a34:	e0bffd17 	ldw	r2,-12(fp)
   21a38:	1082000c 	andi	r2,r2,2048
   21a3c:	1000061e 	bne	r2,zero,21a58 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   21a40:	e0bffc17 	ldw	r2,-16(fp)
   21a44:	10c00117 	ldw	r3,4(r2)
   21a48:	00bfefc4 	movi	r2,-65
   21a4c:	1886703a 	and	r3,r3,r2
   21a50:	e0bffc17 	ldw	r2,-16(fp)
   21a54:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   21a58:	e0bffc17 	ldw	r2,-16(fp)
   21a5c:	10c00417 	ldw	r3,16(r2)
   21a60:	e0bffc17 	ldw	r2,-16(fp)
   21a64:	10800517 	ldw	r2,20(r2)
   21a68:	1880061e 	bne	r3,r2,21a84 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   21a6c:	e0bffc17 	ldw	r2,-16(fp)
   21a70:	10c00117 	ldw	r3,4(r2)
   21a74:	00beefc4 	movi	r2,-1089
   21a78:	1886703a 	and	r3,r3,r2
   21a7c:	e0bffc17 	ldw	r2,-16(fp)
   21a80:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   21a84:	e0bffc17 	ldw	r2,-16(fp)
   21a88:	10800017 	ldw	r2,0(r2)
   21a8c:	10800304 	addi	r2,r2,12
   21a90:	e0fffc17 	ldw	r3,-16(fp)
   21a94:	18c00117 	ldw	r3,4(r3)
   21a98:	10c00035 	stwio	r3,0(r2)
}
   21a9c:	e037883a 	mov	sp,fp
   21aa0:	df000017 	ldw	fp,0(sp)
   21aa4:	dec00104 	addi	sp,sp,4
   21aa8:	f800283a 	ret

00021aac <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   21aac:	defffd04 	addi	sp,sp,-12
   21ab0:	df000215 	stw	fp,8(sp)
   21ab4:	df000204 	addi	fp,sp,8
   21ab8:	e13ffe15 	stw	r4,-8(fp)
   21abc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   21ac0:	00000506 	br	21ad8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   21ac4:	e0bfff17 	ldw	r2,-4(fp)
   21ac8:	1090000c 	andi	r2,r2,16384
   21acc:	10000226 	beq	r2,zero,21ad8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   21ad0:	00bffd44 	movi	r2,-11
   21ad4:	00000606 	br	21af0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   21ad8:	e0bffe17 	ldw	r2,-8(fp)
   21adc:	10c00417 	ldw	r3,16(r2)
   21ae0:	e0bffe17 	ldw	r2,-8(fp)
   21ae4:	10800517 	ldw	r2,20(r2)
   21ae8:	18bff61e 	bne	r3,r2,21ac4 <__alt_data_end+0xfffe55a4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   21aec:	0005883a 	mov	r2,zero
}
   21af0:	e037883a 	mov	sp,fp
   21af4:	df000017 	ldw	fp,0(sp)
   21af8:	dec00104 	addi	sp,sp,4
   21afc:	f800283a 	ret

00021b00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21b00:	defffe04 	addi	sp,sp,-8
   21b04:	dfc00115 	stw	ra,4(sp)
   21b08:	df000015 	stw	fp,0(sp)
   21b0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21b10:	008000b4 	movhi	r2,2
   21b14:	1093bd04 	addi	r2,r2,20212
   21b18:	10800017 	ldw	r2,0(r2)
   21b1c:	10000526 	beq	r2,zero,21b34 <alt_get_errno+0x34>
   21b20:	008000b4 	movhi	r2,2
   21b24:	1093bd04 	addi	r2,r2,20212
   21b28:	10800017 	ldw	r2,0(r2)
   21b2c:	103ee83a 	callr	r2
   21b30:	00000206 	br	21b3c <alt_get_errno+0x3c>
   21b34:	008000b4 	movhi	r2,2
   21b38:	10999104 	addi	r2,r2,26180
}
   21b3c:	e037883a 	mov	sp,fp
   21b40:	dfc00117 	ldw	ra,4(sp)
   21b44:	df000017 	ldw	fp,0(sp)
   21b48:	dec00204 	addi	sp,sp,8
   21b4c:	f800283a 	ret

00021b50 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   21b50:	defff204 	addi	sp,sp,-56
   21b54:	dfc00d15 	stw	ra,52(sp)
   21b58:	df000c15 	stw	fp,48(sp)
   21b5c:	df000c04 	addi	fp,sp,48
   21b60:	e13ffc15 	stw	r4,-16(fp)
   21b64:	e17ffd15 	stw	r5,-12(fp)
   21b68:	e1bffe15 	stw	r6,-8(fp)
   21b6c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   21b70:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   21b74:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   21b78:	e0bfff17 	ldw	r2,-4(fp)
   21b7c:	1090000c 	andi	r2,r2,16384
   21b80:	1005003a 	cmpeq	r2,r2,zero
   21b84:	10803fcc 	andi	r2,r2,255
   21b88:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   21b8c:	00001306 	br	21bdc <altera_avalon_uart_read+0x8c>
    {
      count++;
   21b90:	e0bff517 	ldw	r2,-44(fp)
   21b94:	10800044 	addi	r2,r2,1
   21b98:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   21b9c:	e0bffd17 	ldw	r2,-12(fp)
   21ba0:	10c00044 	addi	r3,r2,1
   21ba4:	e0fffd15 	stw	r3,-12(fp)
   21ba8:	e0fffc17 	ldw	r3,-16(fp)
   21bac:	18c00217 	ldw	r3,8(r3)
   21bb0:	e13ffc17 	ldw	r4,-16(fp)
   21bb4:	20c7883a 	add	r3,r4,r3
   21bb8:	18c00704 	addi	r3,r3,28
   21bbc:	18c00003 	ldbu	r3,0(r3)
   21bc0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   21bc4:	e0bffc17 	ldw	r2,-16(fp)
   21bc8:	10800217 	ldw	r2,8(r2)
   21bcc:	10800044 	addi	r2,r2,1
   21bd0:	10c00fcc 	andi	r3,r2,63
   21bd4:	e0bffc17 	ldw	r2,-16(fp)
   21bd8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   21bdc:	e0fff517 	ldw	r3,-44(fp)
   21be0:	e0bffe17 	ldw	r2,-8(fp)
   21be4:	1880050e 	bge	r3,r2,21bfc <altera_avalon_uart_read+0xac>
   21be8:	e0bffc17 	ldw	r2,-16(fp)
   21bec:	10c00217 	ldw	r3,8(r2)
   21bf0:	e0bffc17 	ldw	r2,-16(fp)
   21bf4:	10800317 	ldw	r2,12(r2)
   21bf8:	18bfe51e 	bne	r3,r2,21b90 <__alt_data_end+0xfffe5670>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   21bfc:	e0bff517 	ldw	r2,-44(fp)
   21c00:	1000251e 	bne	r2,zero,21c98 <altera_avalon_uart_read+0x148>
   21c04:	e0bffc17 	ldw	r2,-16(fp)
   21c08:	10c00217 	ldw	r3,8(r2)
   21c0c:	e0bffc17 	ldw	r2,-16(fp)
   21c10:	10800317 	ldw	r2,12(r2)
   21c14:	1880201e 	bne	r3,r2,21c98 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   21c18:	e0bff617 	ldw	r2,-40(fp)
   21c1c:	1000071e 	bne	r2,zero,21c3c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   21c20:	0021b000 	call	21b00 <alt_get_errno>
   21c24:	1007883a 	mov	r3,r2
   21c28:	008002c4 	movi	r2,11
   21c2c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   21c30:	00800044 	movi	r2,1
   21c34:	e0bff405 	stb	r2,-48(fp)
        break;
   21c38:	00001b06 	br	21ca8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21c3c:	0005303a 	rdctl	r2,status
   21c40:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21c44:	e0fff817 	ldw	r3,-32(fp)
   21c48:	00bfff84 	movi	r2,-2
   21c4c:	1884703a 	and	r2,r3,r2
   21c50:	1001703a 	wrctl	status,r2
  
  return context;
   21c54:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   21c58:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   21c5c:	e0bffc17 	ldw	r2,-16(fp)
   21c60:	10800117 	ldw	r2,4(r2)
   21c64:	10c02014 	ori	r3,r2,128
   21c68:	e0bffc17 	ldw	r2,-16(fp)
   21c6c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   21c70:	e0bffc17 	ldw	r2,-16(fp)
   21c74:	10800017 	ldw	r2,0(r2)
   21c78:	10800304 	addi	r2,r2,12
   21c7c:	e0fffc17 	ldw	r3,-16(fp)
   21c80:	18c00117 	ldw	r3,4(r3)
   21c84:	10c00035 	stwio	r3,0(r2)
   21c88:	e0bff717 	ldw	r2,-36(fp)
   21c8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21c90:	e0bff917 	ldw	r2,-28(fp)
   21c94:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   21c98:	e0bff517 	ldw	r2,-44(fp)
   21c9c:	1000021e 	bne	r2,zero,21ca8 <altera_avalon_uart_read+0x158>
   21ca0:	e0bffe17 	ldw	r2,-8(fp)
   21ca4:	103fb91e 	bne	r2,zero,21b8c <__alt_data_end+0xfffe566c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21ca8:	0005303a 	rdctl	r2,status
   21cac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21cb0:	e0fffa17 	ldw	r3,-24(fp)
   21cb4:	00bfff84 	movi	r2,-2
   21cb8:	1884703a 	and	r2,r3,r2
   21cbc:	1001703a 	wrctl	status,r2
  
  return context;
   21cc0:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   21cc4:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   21cc8:	e0bffc17 	ldw	r2,-16(fp)
   21ccc:	10800117 	ldw	r2,4(r2)
   21cd0:	10c02014 	ori	r3,r2,128
   21cd4:	e0bffc17 	ldw	r2,-16(fp)
   21cd8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   21cdc:	e0bffc17 	ldw	r2,-16(fp)
   21ce0:	10800017 	ldw	r2,0(r2)
   21ce4:	10800304 	addi	r2,r2,12
   21ce8:	e0fffc17 	ldw	r3,-16(fp)
   21cec:	18c00117 	ldw	r3,4(r3)
   21cf0:	10c00035 	stwio	r3,0(r2)
   21cf4:	e0bff717 	ldw	r2,-36(fp)
   21cf8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21cfc:	e0bffb17 	ldw	r2,-20(fp)
   21d00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   21d04:	e0bff403 	ldbu	r2,-48(fp)
   21d08:	10000226 	beq	r2,zero,21d14 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   21d0c:	00bffd44 	movi	r2,-11
   21d10:	00000106 	br	21d18 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   21d14:	e0bff517 	ldw	r2,-44(fp)
  }
}
   21d18:	e037883a 	mov	sp,fp
   21d1c:	dfc00117 	ldw	ra,4(sp)
   21d20:	df000017 	ldw	fp,0(sp)
   21d24:	dec00204 	addi	sp,sp,8
   21d28:	f800283a 	ret

00021d2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21d2c:	defffe04 	addi	sp,sp,-8
   21d30:	dfc00115 	stw	ra,4(sp)
   21d34:	df000015 	stw	fp,0(sp)
   21d38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21d3c:	008000b4 	movhi	r2,2
   21d40:	1093bd04 	addi	r2,r2,20212
   21d44:	10800017 	ldw	r2,0(r2)
   21d48:	10000526 	beq	r2,zero,21d60 <alt_get_errno+0x34>
   21d4c:	008000b4 	movhi	r2,2
   21d50:	1093bd04 	addi	r2,r2,20212
   21d54:	10800017 	ldw	r2,0(r2)
   21d58:	103ee83a 	callr	r2
   21d5c:	00000206 	br	21d68 <alt_get_errno+0x3c>
   21d60:	008000b4 	movhi	r2,2
   21d64:	10999104 	addi	r2,r2,26180
}
   21d68:	e037883a 	mov	sp,fp
   21d6c:	dfc00117 	ldw	ra,4(sp)
   21d70:	df000017 	ldw	fp,0(sp)
   21d74:	dec00204 	addi	sp,sp,8
   21d78:	f800283a 	ret

00021d7c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   21d7c:	defff204 	addi	sp,sp,-56
   21d80:	dfc00d15 	stw	ra,52(sp)
   21d84:	df000c15 	stw	fp,48(sp)
   21d88:	df000c04 	addi	fp,sp,48
   21d8c:	e13ffc15 	stw	r4,-16(fp)
   21d90:	e17ffd15 	stw	r5,-12(fp)
   21d94:	e1bffe15 	stw	r6,-8(fp)
   21d98:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   21d9c:	e0bffe17 	ldw	r2,-8(fp)
   21da0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   21da4:	e0bfff17 	ldw	r2,-4(fp)
   21da8:	1090000c 	andi	r2,r2,16384
   21dac:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   21db0:	00003c06 	br	21ea4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   21db4:	e0bffc17 	ldw	r2,-16(fp)
   21db8:	10800517 	ldw	r2,20(r2)
   21dbc:	10800044 	addi	r2,r2,1
   21dc0:	10800fcc 	andi	r2,r2,63
   21dc4:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   21dc8:	e0bffc17 	ldw	r2,-16(fp)
   21dcc:	10c00417 	ldw	r3,16(r2)
   21dd0:	e0bff617 	ldw	r2,-40(fp)
   21dd4:	1880221e 	bne	r3,r2,21e60 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   21dd8:	e0bff517 	ldw	r2,-44(fp)
   21ddc:	10000526 	beq	r2,zero,21df4 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   21de0:	0021d2c0 	call	21d2c <alt_get_errno>
   21de4:	1007883a 	mov	r3,r2
   21de8:	008002c4 	movi	r2,11
   21dec:	18800015 	stw	r2,0(r3)
        break;
   21df0:	00002e06 	br	21eac <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21df4:	0005303a 	rdctl	r2,status
   21df8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21dfc:	e0fff817 	ldw	r3,-32(fp)
   21e00:	00bfff84 	movi	r2,-2
   21e04:	1884703a 	and	r2,r3,r2
   21e08:	1001703a 	wrctl	status,r2
  
  return context;
   21e0c:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   21e10:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   21e14:	e0bffc17 	ldw	r2,-16(fp)
   21e18:	10800117 	ldw	r2,4(r2)
   21e1c:	10c11014 	ori	r3,r2,1088
   21e20:	e0bffc17 	ldw	r2,-16(fp)
   21e24:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   21e28:	e0bffc17 	ldw	r2,-16(fp)
   21e2c:	10800017 	ldw	r2,0(r2)
   21e30:	10800304 	addi	r2,r2,12
   21e34:	e0fffc17 	ldw	r3,-16(fp)
   21e38:	18c00117 	ldw	r3,4(r3)
   21e3c:	10c00035 	stwio	r3,0(r2)
   21e40:	e0bff717 	ldw	r2,-36(fp)
   21e44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21e48:	e0bff917 	ldw	r2,-28(fp)
   21e4c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   21e50:	e0bffc17 	ldw	r2,-16(fp)
   21e54:	10c00417 	ldw	r3,16(r2)
   21e58:	e0bff617 	ldw	r2,-40(fp)
   21e5c:	18bffc26 	beq	r3,r2,21e50 <__alt_data_end+0xfffe5930>
      }
    }

    count--;
   21e60:	e0bff417 	ldw	r2,-48(fp)
   21e64:	10bfffc4 	addi	r2,r2,-1
   21e68:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   21e6c:	e0bffc17 	ldw	r2,-16(fp)
   21e70:	10c00517 	ldw	r3,20(r2)
   21e74:	e0bffd17 	ldw	r2,-12(fp)
   21e78:	11000044 	addi	r4,r2,1
   21e7c:	e13ffd15 	stw	r4,-12(fp)
   21e80:	10800003 	ldbu	r2,0(r2)
   21e84:	1009883a 	mov	r4,r2
   21e88:	e0bffc17 	ldw	r2,-16(fp)
   21e8c:	10c5883a 	add	r2,r2,r3
   21e90:	10801704 	addi	r2,r2,92
   21e94:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   21e98:	e0bffc17 	ldw	r2,-16(fp)
   21e9c:	e0fff617 	ldw	r3,-40(fp)
   21ea0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   21ea4:	e0bff417 	ldw	r2,-48(fp)
   21ea8:	103fc21e 	bne	r2,zero,21db4 <__alt_data_end+0xfffe5894>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21eac:	0005303a 	rdctl	r2,status
   21eb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21eb4:	e0fffa17 	ldw	r3,-24(fp)
   21eb8:	00bfff84 	movi	r2,-2
   21ebc:	1884703a 	and	r2,r3,r2
   21ec0:	1001703a 	wrctl	status,r2
  
  return context;
   21ec4:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   21ec8:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   21ecc:	e0bffc17 	ldw	r2,-16(fp)
   21ed0:	10800117 	ldw	r2,4(r2)
   21ed4:	10c11014 	ori	r3,r2,1088
   21ed8:	e0bffc17 	ldw	r2,-16(fp)
   21edc:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   21ee0:	e0bffc17 	ldw	r2,-16(fp)
   21ee4:	10800017 	ldw	r2,0(r2)
   21ee8:	10800304 	addi	r2,r2,12
   21eec:	e0fffc17 	ldw	r3,-16(fp)
   21ef0:	18c00117 	ldw	r3,4(r3)
   21ef4:	10c00035 	stwio	r3,0(r2)
   21ef8:	e0bff717 	ldw	r2,-36(fp)
   21efc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21f00:	e0bffb17 	ldw	r2,-20(fp)
   21f04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   21f08:	e0fffe17 	ldw	r3,-8(fp)
   21f0c:	e0bff417 	ldw	r2,-48(fp)
   21f10:	1885c83a 	sub	r2,r3,r2
}
   21f14:	e037883a 	mov	sp,fp
   21f18:	dfc00117 	ldw	ra,4(sp)
   21f1c:	df000017 	ldw	fp,0(sp)
   21f20:	dec00204 	addi	sp,sp,8
   21f24:	f800283a 	ret

00021f28 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   21f28:	defff504 	addi	sp,sp,-44
   21f2c:	df000a15 	stw	fp,40(sp)
   21f30:	df000a04 	addi	fp,sp,40
   21f34:	e13ffc15 	stw	r4,-16(fp)
   21f38:	e17ffd15 	stw	r5,-12(fp)
   21f3c:	e1bffe15 	stw	r6,-8(fp)
   21f40:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   21f44:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21f48:	008000b4 	movhi	r2,2
   21f4c:	10998e04 	addi	r2,r2,26168
   21f50:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   21f54:	10003f26 	beq	r2,zero,22054 <alt_alarm_start+0x12c>
  {
    if (alarm)
   21f58:	e0bffc17 	ldw	r2,-16(fp)
   21f5c:	10003b26 	beq	r2,zero,2204c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   21f60:	e0bffc17 	ldw	r2,-16(fp)
   21f64:	e0fffe17 	ldw	r3,-8(fp)
   21f68:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   21f6c:	e0bffc17 	ldw	r2,-16(fp)
   21f70:	e0ffff17 	ldw	r3,-4(fp)
   21f74:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21f78:	0005303a 	rdctl	r2,status
   21f7c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21f80:	e0fff817 	ldw	r3,-32(fp)
   21f84:	00bfff84 	movi	r2,-2
   21f88:	1884703a 	and	r2,r3,r2
   21f8c:	1001703a 	wrctl	status,r2
  
  return context;
   21f90:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   21f94:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   21f98:	008000b4 	movhi	r2,2
   21f9c:	10998f04 	addi	r2,r2,26172
   21fa0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   21fa4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   21fa8:	e0fffd17 	ldw	r3,-12(fp)
   21fac:	e0bff617 	ldw	r2,-40(fp)
   21fb0:	1885883a 	add	r2,r3,r2
   21fb4:	10c00044 	addi	r3,r2,1
   21fb8:	e0bffc17 	ldw	r2,-16(fp)
   21fbc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   21fc0:	e0bffc17 	ldw	r2,-16(fp)
   21fc4:	10c00217 	ldw	r3,8(r2)
   21fc8:	e0bff617 	ldw	r2,-40(fp)
   21fcc:	1880042e 	bgeu	r3,r2,21fe0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   21fd0:	e0bffc17 	ldw	r2,-16(fp)
   21fd4:	00c00044 	movi	r3,1
   21fd8:	10c00405 	stb	r3,16(r2)
   21fdc:	00000206 	br	21fe8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   21fe0:	e0bffc17 	ldw	r2,-16(fp)
   21fe4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   21fe8:	e0fffc17 	ldw	r3,-16(fp)
   21fec:	008000b4 	movhi	r2,2
   21ff0:	1093bf04 	addi	r2,r2,20220
   21ff4:	e0bff915 	stw	r2,-28(fp)
   21ff8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21ffc:	e0bffa17 	ldw	r2,-24(fp)
   22000:	e0fff917 	ldw	r3,-28(fp)
   22004:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   22008:	e0bff917 	ldw	r2,-28(fp)
   2200c:	10c00017 	ldw	r3,0(r2)
   22010:	e0bffa17 	ldw	r2,-24(fp)
   22014:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22018:	e0bff917 	ldw	r2,-28(fp)
   2201c:	10800017 	ldw	r2,0(r2)
   22020:	e0fffa17 	ldw	r3,-24(fp)
   22024:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22028:	e0bff917 	ldw	r2,-28(fp)
   2202c:	e0fffa17 	ldw	r3,-24(fp)
   22030:	10c00015 	stw	r3,0(r2)
   22034:	e0bff717 	ldw	r2,-36(fp)
   22038:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2203c:	e0bffb17 	ldw	r2,-20(fp)
   22040:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   22044:	0005883a 	mov	r2,zero
   22048:	00000306 	br	22058 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   2204c:	00bffa84 	movi	r2,-22
   22050:	00000106 	br	22058 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   22054:	00bfde84 	movi	r2,-134
  }
}
   22058:	e037883a 	mov	sp,fp
   2205c:	df000017 	ldw	fp,0(sp)
   22060:	dec00104 	addi	sp,sp,4
   22064:	f800283a 	ret

00022068 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   22068:	defffa04 	addi	sp,sp,-24
   2206c:	dfc00515 	stw	ra,20(sp)
   22070:	df000415 	stw	fp,16(sp)
   22074:	df000404 	addi	fp,sp,16
   22078:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   2207c:	00800244 	movi	r2,9
   22080:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   22084:	e13ffd17 	ldw	r4,-12(fp)
   22088:	014003f4 	movhi	r5,15
   2208c:	29509004 	addi	r5,r5,16960
   22090:	00208540 	call	20854 <__mulsi3>
   22094:	01023c74 	movhi	r4,2289
   22098:	21346004 	addi	r4,r4,-11904
   2209c:	100b883a 	mov	r5,r2
   220a0:	00237700 	call	23770 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   220a4:	01200034 	movhi	r4,32768
   220a8:	213fffc4 	addi	r4,r4,-1
   220ac:	100b883a 	mov	r5,r2
   220b0:	00237700 	call	23770 <__udivsi3>
   220b4:	e13fff17 	ldw	r4,-4(fp)
   220b8:	100b883a 	mov	r5,r2
   220bc:	00237700 	call	23770 <__udivsi3>
   220c0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   220c4:	e0bffe17 	ldw	r2,-8(fp)
   220c8:	10002a26 	beq	r2,zero,22174 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   220cc:	e03ffc15 	stw	zero,-16(fp)
   220d0:	00001706 	br	22130 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   220d4:	00a00034 	movhi	r2,32768
   220d8:	10bfffc4 	addi	r2,r2,-1
   220dc:	10bfffc4 	addi	r2,r2,-1
   220e0:	103ffe1e 	bne	r2,zero,220dc <__alt_data_end+0xfffe5bbc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   220e4:	e13ffd17 	ldw	r4,-12(fp)
   220e8:	014003f4 	movhi	r5,15
   220ec:	29509004 	addi	r5,r5,16960
   220f0:	00208540 	call	20854 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   220f4:	01023c74 	movhi	r4,2289
   220f8:	21346004 	addi	r4,r4,-11904
   220fc:	100b883a 	mov	r5,r2
   22100:	00237700 	call	23770 <__udivsi3>
   22104:	01200034 	movhi	r4,32768
   22108:	213fffc4 	addi	r4,r4,-1
   2210c:	100b883a 	mov	r5,r2
   22110:	00237700 	call	23770 <__udivsi3>
   22114:	1007883a 	mov	r3,r2
   22118:	e0bfff17 	ldw	r2,-4(fp)
   2211c:	10c5c83a 	sub	r2,r2,r3
   22120:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   22124:	e0bffc17 	ldw	r2,-16(fp)
   22128:	10800044 	addi	r2,r2,1
   2212c:	e0bffc15 	stw	r2,-16(fp)
   22130:	e0fffc17 	ldw	r3,-16(fp)
   22134:	e0bffe17 	ldw	r2,-8(fp)
   22138:	18bfe616 	blt	r3,r2,220d4 <__alt_data_end+0xfffe5bb4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2213c:	e13ffd17 	ldw	r4,-12(fp)
   22140:	014003f4 	movhi	r5,15
   22144:	29509004 	addi	r5,r5,16960
   22148:	00208540 	call	20854 <__mulsi3>
   2214c:	01023c74 	movhi	r4,2289
   22150:	21346004 	addi	r4,r4,-11904
   22154:	100b883a 	mov	r5,r2
   22158:	00237700 	call	23770 <__udivsi3>
   2215c:	1009883a 	mov	r4,r2
   22160:	e17fff17 	ldw	r5,-4(fp)
   22164:	00208540 	call	20854 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   22168:	10bfffc4 	addi	r2,r2,-1
   2216c:	103ffe1e 	bne	r2,zero,22168 <__alt_data_end+0xfffe5c48>
   22170:	00000d06 	br	221a8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   22174:	e13ffd17 	ldw	r4,-12(fp)
   22178:	014003f4 	movhi	r5,15
   2217c:	29509004 	addi	r5,r5,16960
   22180:	00208540 	call	20854 <__mulsi3>
   22184:	01023c74 	movhi	r4,2289
   22188:	21346004 	addi	r4,r4,-11904
   2218c:	100b883a 	mov	r5,r2
   22190:	00237700 	call	23770 <__udivsi3>
   22194:	1009883a 	mov	r4,r2
   22198:	e17fff17 	ldw	r5,-4(fp)
   2219c:	00208540 	call	20854 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   221a0:	10bfffc4 	addi	r2,r2,-1
   221a4:	00bffe16 	blt	zero,r2,221a0 <__alt_data_end+0xfffe5c80>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   221a8:	0005883a 	mov	r2,zero
}
   221ac:	e037883a 	mov	sp,fp
   221b0:	dfc00117 	ldw	ra,4(sp)
   221b4:	df000017 	ldw	fp,0(sp)
   221b8:	dec00204 	addi	sp,sp,8
   221bc:	f800283a 	ret

000221c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   221c0:	defffe04 	addi	sp,sp,-8
   221c4:	dfc00115 	stw	ra,4(sp)
   221c8:	df000015 	stw	fp,0(sp)
   221cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   221d0:	008000b4 	movhi	r2,2
   221d4:	1093bd04 	addi	r2,r2,20212
   221d8:	10800017 	ldw	r2,0(r2)
   221dc:	10000526 	beq	r2,zero,221f4 <alt_get_errno+0x34>
   221e0:	008000b4 	movhi	r2,2
   221e4:	1093bd04 	addi	r2,r2,20212
   221e8:	10800017 	ldw	r2,0(r2)
   221ec:	103ee83a 	callr	r2
   221f0:	00000206 	br	221fc <alt_get_errno+0x3c>
   221f4:	008000b4 	movhi	r2,2
   221f8:	10999104 	addi	r2,r2,26180
}
   221fc:	e037883a 	mov	sp,fp
   22200:	dfc00117 	ldw	ra,4(sp)
   22204:	df000017 	ldw	fp,0(sp)
   22208:	dec00204 	addi	sp,sp,8
   2220c:	f800283a 	ret

00022210 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   22210:	defffb04 	addi	sp,sp,-20
   22214:	dfc00415 	stw	ra,16(sp)
   22218:	df000315 	stw	fp,12(sp)
   2221c:	df000304 	addi	fp,sp,12
   22220:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   22224:	e0bfff17 	ldw	r2,-4(fp)
   22228:	10000816 	blt	r2,zero,2224c <close+0x3c>
   2222c:	e13fff17 	ldw	r4,-4(fp)
   22230:	01400304 	movi	r5,12
   22234:	00208540 	call	20854 <__mulsi3>
   22238:	1007883a 	mov	r3,r2
   2223c:	008000b4 	movhi	r2,2
   22240:	10924f04 	addi	r2,r2,18748
   22244:	1885883a 	add	r2,r3,r2
   22248:	00000106 	br	22250 <close+0x40>
   2224c:	0005883a 	mov	r2,zero
   22250:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   22254:	e0bffd17 	ldw	r2,-12(fp)
   22258:	10001926 	beq	r2,zero,222c0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2225c:	e0bffd17 	ldw	r2,-12(fp)
   22260:	10800017 	ldw	r2,0(r2)
   22264:	10800417 	ldw	r2,16(r2)
   22268:	10000626 	beq	r2,zero,22284 <close+0x74>
   2226c:	e0bffd17 	ldw	r2,-12(fp)
   22270:	10800017 	ldw	r2,0(r2)
   22274:	10800417 	ldw	r2,16(r2)
   22278:	e13ffd17 	ldw	r4,-12(fp)
   2227c:	103ee83a 	callr	r2
   22280:	00000106 	br	22288 <close+0x78>
   22284:	0005883a 	mov	r2,zero
   22288:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2228c:	e13fff17 	ldw	r4,-4(fp)
   22290:	0022bc40 	call	22bc4 <alt_release_fd>
    if (rval < 0)
   22294:	e0bffe17 	ldw	r2,-8(fp)
   22298:	1000070e 	bge	r2,zero,222b8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   2229c:	00221c00 	call	221c0 <alt_get_errno>
   222a0:	1007883a 	mov	r3,r2
   222a4:	e0bffe17 	ldw	r2,-8(fp)
   222a8:	0085c83a 	sub	r2,zero,r2
   222ac:	18800015 	stw	r2,0(r3)
      return -1;
   222b0:	00bfffc4 	movi	r2,-1
   222b4:	00000706 	br	222d4 <close+0xc4>
    }
    return 0;
   222b8:	0005883a 	mov	r2,zero
   222bc:	00000506 	br	222d4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   222c0:	00221c00 	call	221c0 <alt_get_errno>
   222c4:	1007883a 	mov	r3,r2
   222c8:	00801444 	movi	r2,81
   222cc:	18800015 	stw	r2,0(r3)
    return -1;
   222d0:	00bfffc4 	movi	r2,-1
  }
}
   222d4:	e037883a 	mov	sp,fp
   222d8:	dfc00117 	ldw	ra,4(sp)
   222dc:	df000017 	ldw	fp,0(sp)
   222e0:	dec00204 	addi	sp,sp,8
   222e4:	f800283a 	ret

000222e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   222e8:	deffff04 	addi	sp,sp,-4
   222ec:	df000015 	stw	fp,0(sp)
   222f0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   222f4:	e037883a 	mov	sp,fp
   222f8:	df000017 	ldw	fp,0(sp)
   222fc:	dec00104 	addi	sp,sp,4
   22300:	f800283a 	ret

00022304 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   22304:	defffc04 	addi	sp,sp,-16
   22308:	df000315 	stw	fp,12(sp)
   2230c:	df000304 	addi	fp,sp,12
   22310:	e13ffd15 	stw	r4,-12(fp)
   22314:	e17ffe15 	stw	r5,-8(fp)
   22318:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2231c:	e0bfff17 	ldw	r2,-4(fp)
}
   22320:	e037883a 	mov	sp,fp
   22324:	df000017 	ldw	fp,0(sp)
   22328:	dec00104 	addi	sp,sp,4
   2232c:	f800283a 	ret

00022330 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22330:	defffe04 	addi	sp,sp,-8
   22334:	dfc00115 	stw	ra,4(sp)
   22338:	df000015 	stw	fp,0(sp)
   2233c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22340:	008000b4 	movhi	r2,2
   22344:	1093bd04 	addi	r2,r2,20212
   22348:	10800017 	ldw	r2,0(r2)
   2234c:	10000526 	beq	r2,zero,22364 <alt_get_errno+0x34>
   22350:	008000b4 	movhi	r2,2
   22354:	1093bd04 	addi	r2,r2,20212
   22358:	10800017 	ldw	r2,0(r2)
   2235c:	103ee83a 	callr	r2
   22360:	00000206 	br	2236c <alt_get_errno+0x3c>
   22364:	008000b4 	movhi	r2,2
   22368:	10999104 	addi	r2,r2,26180
}
   2236c:	e037883a 	mov	sp,fp
   22370:	dfc00117 	ldw	ra,4(sp)
   22374:	df000017 	ldw	fp,0(sp)
   22378:	dec00204 	addi	sp,sp,8
   2237c:	f800283a 	ret

00022380 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   22380:	defffa04 	addi	sp,sp,-24
   22384:	dfc00515 	stw	ra,20(sp)
   22388:	df000415 	stw	fp,16(sp)
   2238c:	df000404 	addi	fp,sp,16
   22390:	e13ffe15 	stw	r4,-8(fp)
   22394:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   22398:	e0bffe17 	ldw	r2,-8(fp)
   2239c:	10000326 	beq	r2,zero,223ac <alt_dev_llist_insert+0x2c>
   223a0:	e0bffe17 	ldw	r2,-8(fp)
   223a4:	10800217 	ldw	r2,8(r2)
   223a8:	1000061e 	bne	r2,zero,223c4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   223ac:	00223300 	call	22330 <alt_get_errno>
   223b0:	1007883a 	mov	r3,r2
   223b4:	00800584 	movi	r2,22
   223b8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   223bc:	00bffa84 	movi	r2,-22
   223c0:	00001306 	br	22410 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   223c4:	e0bffe17 	ldw	r2,-8(fp)
   223c8:	e0ffff17 	ldw	r3,-4(fp)
   223cc:	e0fffc15 	stw	r3,-16(fp)
   223d0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   223d4:	e0bffd17 	ldw	r2,-12(fp)
   223d8:	e0fffc17 	ldw	r3,-16(fp)
   223dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   223e0:	e0bffc17 	ldw	r2,-16(fp)
   223e4:	10c00017 	ldw	r3,0(r2)
   223e8:	e0bffd17 	ldw	r2,-12(fp)
   223ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   223f0:	e0bffc17 	ldw	r2,-16(fp)
   223f4:	10800017 	ldw	r2,0(r2)
   223f8:	e0fffd17 	ldw	r3,-12(fp)
   223fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22400:	e0bffc17 	ldw	r2,-16(fp)
   22404:	e0fffd17 	ldw	r3,-12(fp)
   22408:	10c00015 	stw	r3,0(r2)

  return 0;  
   2240c:	0005883a 	mov	r2,zero
}
   22410:	e037883a 	mov	sp,fp
   22414:	dfc00117 	ldw	ra,4(sp)
   22418:	df000017 	ldw	fp,0(sp)
   2241c:	dec00204 	addi	sp,sp,8
   22420:	f800283a 	ret

00022424 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   22424:	defffd04 	addi	sp,sp,-12
   22428:	dfc00215 	stw	ra,8(sp)
   2242c:	df000115 	stw	fp,4(sp)
   22430:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22434:	008000b4 	movhi	r2,2
   22438:	108dec04 	addi	r2,r2,14256
   2243c:	e0bfff15 	stw	r2,-4(fp)
   22440:	00000606 	br	2245c <_do_ctors+0x38>
        (*ctor) (); 
   22444:	e0bfff17 	ldw	r2,-4(fp)
   22448:	10800017 	ldw	r2,0(r2)
   2244c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22450:	e0bfff17 	ldw	r2,-4(fp)
   22454:	10bfff04 	addi	r2,r2,-4
   22458:	e0bfff15 	stw	r2,-4(fp)
   2245c:	e0ffff17 	ldw	r3,-4(fp)
   22460:	008000b4 	movhi	r2,2
   22464:	108ded04 	addi	r2,r2,14260
   22468:	18bff62e 	bgeu	r3,r2,22444 <__alt_data_end+0xfffe5f24>
        (*ctor) (); 
}
   2246c:	e037883a 	mov	sp,fp
   22470:	dfc00117 	ldw	ra,4(sp)
   22474:	df000017 	ldw	fp,0(sp)
   22478:	dec00204 	addi	sp,sp,8
   2247c:	f800283a 	ret

00022480 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   22480:	defffd04 	addi	sp,sp,-12
   22484:	dfc00215 	stw	ra,8(sp)
   22488:	df000115 	stw	fp,4(sp)
   2248c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22490:	008000b4 	movhi	r2,2
   22494:	108dec04 	addi	r2,r2,14256
   22498:	e0bfff15 	stw	r2,-4(fp)
   2249c:	00000606 	br	224b8 <_do_dtors+0x38>
        (*dtor) (); 
   224a0:	e0bfff17 	ldw	r2,-4(fp)
   224a4:	10800017 	ldw	r2,0(r2)
   224a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   224ac:	e0bfff17 	ldw	r2,-4(fp)
   224b0:	10bfff04 	addi	r2,r2,-4
   224b4:	e0bfff15 	stw	r2,-4(fp)
   224b8:	e0ffff17 	ldw	r3,-4(fp)
   224bc:	008000b4 	movhi	r2,2
   224c0:	108ded04 	addi	r2,r2,14260
   224c4:	18bff62e 	bgeu	r3,r2,224a0 <__alt_data_end+0xfffe5f80>
        (*dtor) (); 
}
   224c8:	e037883a 	mov	sp,fp
   224cc:	dfc00117 	ldw	ra,4(sp)
   224d0:	df000017 	ldw	fp,0(sp)
   224d4:	dec00204 	addi	sp,sp,8
   224d8:	f800283a 	ret

000224dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   224dc:	deffff04 	addi	sp,sp,-4
   224e0:	df000015 	stw	fp,0(sp)
   224e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   224e8:	e037883a 	mov	sp,fp
   224ec:	df000017 	ldw	fp,0(sp)
   224f0:	dec00104 	addi	sp,sp,4
   224f4:	f800283a 	ret

000224f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   224f8:	defff904 	addi	sp,sp,-28
   224fc:	dfc00615 	stw	ra,24(sp)
   22500:	df000515 	stw	fp,20(sp)
   22504:	df000504 	addi	fp,sp,20
   22508:	e13ffc15 	stw	r4,-16(fp)
   2250c:	e17ffd15 	stw	r5,-12(fp)
   22510:	e1bffe15 	stw	r6,-8(fp)
   22514:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   22518:	e0800217 	ldw	r2,8(fp)
   2251c:	d8800015 	stw	r2,0(sp)
   22520:	e13ffc17 	ldw	r4,-16(fp)
   22524:	e17ffd17 	ldw	r5,-12(fp)
   22528:	e1bffe17 	ldw	r6,-8(fp)
   2252c:	e1ffff17 	ldw	r7,-4(fp)
   22530:	00226d80 	call	226d8 <alt_iic_isr_register>
}  
   22534:	e037883a 	mov	sp,fp
   22538:	dfc00117 	ldw	ra,4(sp)
   2253c:	df000017 	ldw	fp,0(sp)
   22540:	dec00204 	addi	sp,sp,8
   22544:	f800283a 	ret

00022548 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   22548:	defff904 	addi	sp,sp,-28
   2254c:	df000615 	stw	fp,24(sp)
   22550:	df000604 	addi	fp,sp,24
   22554:	e13ffe15 	stw	r4,-8(fp)
   22558:	e17fff15 	stw	r5,-4(fp)
   2255c:	e0bfff17 	ldw	r2,-4(fp)
   22560:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22564:	0005303a 	rdctl	r2,status
   22568:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2256c:	e0fffb17 	ldw	r3,-20(fp)
   22570:	00bfff84 	movi	r2,-2
   22574:	1884703a 	and	r2,r3,r2
   22578:	1001703a 	wrctl	status,r2
  
  return context;
   2257c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22580:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   22584:	e0bffa17 	ldw	r2,-24(fp)
   22588:	00c00044 	movi	r3,1
   2258c:	1884983a 	sll	r2,r3,r2
   22590:	1007883a 	mov	r3,r2
   22594:	008000b4 	movhi	r2,2
   22598:	10998d04 	addi	r2,r2,26164
   2259c:	10800017 	ldw	r2,0(r2)
   225a0:	1886b03a 	or	r3,r3,r2
   225a4:	008000b4 	movhi	r2,2
   225a8:	10998d04 	addi	r2,r2,26164
   225ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   225b0:	008000b4 	movhi	r2,2
   225b4:	10998d04 	addi	r2,r2,26164
   225b8:	10800017 	ldw	r2,0(r2)
   225bc:	100170fa 	wrctl	ienable,r2
   225c0:	e0bffc17 	ldw	r2,-16(fp)
   225c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   225c8:	e0bffd17 	ldw	r2,-12(fp)
   225cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   225d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   225d4:	0001883a 	nop
}
   225d8:	e037883a 	mov	sp,fp
   225dc:	df000017 	ldw	fp,0(sp)
   225e0:	dec00104 	addi	sp,sp,4
   225e4:	f800283a 	ret

000225e8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   225e8:	defff904 	addi	sp,sp,-28
   225ec:	df000615 	stw	fp,24(sp)
   225f0:	df000604 	addi	fp,sp,24
   225f4:	e13ffe15 	stw	r4,-8(fp)
   225f8:	e17fff15 	stw	r5,-4(fp)
   225fc:	e0bfff17 	ldw	r2,-4(fp)
   22600:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22604:	0005303a 	rdctl	r2,status
   22608:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2260c:	e0fffb17 	ldw	r3,-20(fp)
   22610:	00bfff84 	movi	r2,-2
   22614:	1884703a 	and	r2,r3,r2
   22618:	1001703a 	wrctl	status,r2
  
  return context;
   2261c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22620:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   22624:	e0bffa17 	ldw	r2,-24(fp)
   22628:	00c00044 	movi	r3,1
   2262c:	1884983a 	sll	r2,r3,r2
   22630:	0084303a 	nor	r2,zero,r2
   22634:	1007883a 	mov	r3,r2
   22638:	008000b4 	movhi	r2,2
   2263c:	10998d04 	addi	r2,r2,26164
   22640:	10800017 	ldw	r2,0(r2)
   22644:	1886703a 	and	r3,r3,r2
   22648:	008000b4 	movhi	r2,2
   2264c:	10998d04 	addi	r2,r2,26164
   22650:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22654:	008000b4 	movhi	r2,2
   22658:	10998d04 	addi	r2,r2,26164
   2265c:	10800017 	ldw	r2,0(r2)
   22660:	100170fa 	wrctl	ienable,r2
   22664:	e0bffc17 	ldw	r2,-16(fp)
   22668:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2266c:	e0bffd17 	ldw	r2,-12(fp)
   22670:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22674:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   22678:	0001883a 	nop
}
   2267c:	e037883a 	mov	sp,fp
   22680:	df000017 	ldw	fp,0(sp)
   22684:	dec00104 	addi	sp,sp,4
   22688:	f800283a 	ret

0002268c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2268c:	defffc04 	addi	sp,sp,-16
   22690:	df000315 	stw	fp,12(sp)
   22694:	df000304 	addi	fp,sp,12
   22698:	e13ffe15 	stw	r4,-8(fp)
   2269c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   226a0:	000530fa 	rdctl	r2,ienable
   226a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   226a8:	e0bfff17 	ldw	r2,-4(fp)
   226ac:	00c00044 	movi	r3,1
   226b0:	1884983a 	sll	r2,r3,r2
   226b4:	1007883a 	mov	r3,r2
   226b8:	e0bffd17 	ldw	r2,-12(fp)
   226bc:	1884703a 	and	r2,r3,r2
   226c0:	1004c03a 	cmpne	r2,r2,zero
   226c4:	10803fcc 	andi	r2,r2,255
}
   226c8:	e037883a 	mov	sp,fp
   226cc:	df000017 	ldw	fp,0(sp)
   226d0:	dec00104 	addi	sp,sp,4
   226d4:	f800283a 	ret

000226d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   226d8:	defff504 	addi	sp,sp,-44
   226dc:	dfc00a15 	stw	ra,40(sp)
   226e0:	df000915 	stw	fp,36(sp)
   226e4:	df000904 	addi	fp,sp,36
   226e8:	e13ffc15 	stw	r4,-16(fp)
   226ec:	e17ffd15 	stw	r5,-12(fp)
   226f0:	e1bffe15 	stw	r6,-8(fp)
   226f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   226f8:	00bffa84 	movi	r2,-22
   226fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   22700:	e0bffd17 	ldw	r2,-12(fp)
   22704:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   22708:	e0bff817 	ldw	r2,-32(fp)
   2270c:	10800808 	cmpgei	r2,r2,32
   22710:	1000271e 	bne	r2,zero,227b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22714:	0005303a 	rdctl	r2,status
   22718:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2271c:	e0fffa17 	ldw	r3,-24(fp)
   22720:	00bfff84 	movi	r2,-2
   22724:	1884703a 	and	r2,r3,r2
   22728:	1001703a 	wrctl	status,r2
  
  return context;
   2272c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   22730:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   22734:	008000b4 	movhi	r2,2
   22738:	10999204 	addi	r2,r2,26184
   2273c:	e0fff817 	ldw	r3,-32(fp)
   22740:	180690fa 	slli	r3,r3,3
   22744:	10c5883a 	add	r2,r2,r3
   22748:	e0fffe17 	ldw	r3,-8(fp)
   2274c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   22750:	008000b4 	movhi	r2,2
   22754:	10999204 	addi	r2,r2,26184
   22758:	e0fff817 	ldw	r3,-32(fp)
   2275c:	180690fa 	slli	r3,r3,3
   22760:	10c5883a 	add	r2,r2,r3
   22764:	10800104 	addi	r2,r2,4
   22768:	e0ffff17 	ldw	r3,-4(fp)
   2276c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   22770:	e0bffe17 	ldw	r2,-8(fp)
   22774:	10000526 	beq	r2,zero,2278c <alt_iic_isr_register+0xb4>
   22778:	e0bff817 	ldw	r2,-32(fp)
   2277c:	e13ffc17 	ldw	r4,-16(fp)
   22780:	100b883a 	mov	r5,r2
   22784:	00225480 	call	22548 <alt_ic_irq_enable>
   22788:	00000406 	br	2279c <alt_iic_isr_register+0xc4>
   2278c:	e0bff817 	ldw	r2,-32(fp)
   22790:	e13ffc17 	ldw	r4,-16(fp)
   22794:	100b883a 	mov	r5,r2
   22798:	00225e80 	call	225e8 <alt_ic_irq_disable>
   2279c:	e0bff715 	stw	r2,-36(fp)
   227a0:	e0bff917 	ldw	r2,-28(fp)
   227a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   227a8:	e0bffb17 	ldw	r2,-20(fp)
   227ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   227b0:	e0bff717 	ldw	r2,-36(fp)
}
   227b4:	e037883a 	mov	sp,fp
   227b8:	dfc00117 	ldw	ra,4(sp)
   227bc:	df000017 	ldw	fp,0(sp)
   227c0:	dec00204 	addi	sp,sp,8
   227c4:	f800283a 	ret

000227c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   227c8:	defff804 	addi	sp,sp,-32
   227cc:	dfc00715 	stw	ra,28(sp)
   227d0:	df000615 	stw	fp,24(sp)
   227d4:	dc000515 	stw	r16,20(sp)
   227d8:	df000604 	addi	fp,sp,24
   227dc:	e13ffb15 	stw	r4,-20(fp)
   227e0:	e17ffc15 	stw	r5,-16(fp)
   227e4:	e1bffd15 	stw	r6,-12(fp)
   227e8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   227ec:	e13ffc17 	ldw	r4,-16(fp)
   227f0:	e17ffd17 	ldw	r5,-12(fp)
   227f4:	e1bffe17 	ldw	r6,-8(fp)
   227f8:	0022a640 	call	22a64 <open>
   227fc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   22800:	e0bffa17 	ldw	r2,-24(fp)
   22804:	10002216 	blt	r2,zero,22890 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   22808:	040000b4 	movhi	r16,2
   2280c:	84124f04 	addi	r16,r16,18748
   22810:	e0bffa17 	ldw	r2,-24(fp)
   22814:	1009883a 	mov	r4,r2
   22818:	01400304 	movi	r5,12
   2281c:	00208540 	call	20854 <__mulsi3>
   22820:	8085883a 	add	r2,r16,r2
   22824:	10c00017 	ldw	r3,0(r2)
   22828:	e0bffb17 	ldw	r2,-20(fp)
   2282c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   22830:	040000b4 	movhi	r16,2
   22834:	84124f04 	addi	r16,r16,18748
   22838:	e0bffa17 	ldw	r2,-24(fp)
   2283c:	1009883a 	mov	r4,r2
   22840:	01400304 	movi	r5,12
   22844:	00208540 	call	20854 <__mulsi3>
   22848:	8085883a 	add	r2,r16,r2
   2284c:	10800104 	addi	r2,r2,4
   22850:	10c00017 	ldw	r3,0(r2)
   22854:	e0bffb17 	ldw	r2,-20(fp)
   22858:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2285c:	040000b4 	movhi	r16,2
   22860:	84124f04 	addi	r16,r16,18748
   22864:	e0bffa17 	ldw	r2,-24(fp)
   22868:	1009883a 	mov	r4,r2
   2286c:	01400304 	movi	r5,12
   22870:	00208540 	call	20854 <__mulsi3>
   22874:	8085883a 	add	r2,r16,r2
   22878:	10800204 	addi	r2,r2,8
   2287c:	10c00017 	ldw	r3,0(r2)
   22880:	e0bffb17 	ldw	r2,-20(fp)
   22884:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   22888:	e13ffa17 	ldw	r4,-24(fp)
   2288c:	0022bc40 	call	22bc4 <alt_release_fd>
  }
} 
   22890:	e6ffff04 	addi	sp,fp,-4
   22894:	dfc00217 	ldw	ra,8(sp)
   22898:	df000117 	ldw	fp,4(sp)
   2289c:	dc000017 	ldw	r16,0(sp)
   228a0:	dec00304 	addi	sp,sp,12
   228a4:	f800283a 	ret

000228a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   228a8:	defffb04 	addi	sp,sp,-20
   228ac:	dfc00415 	stw	ra,16(sp)
   228b0:	df000315 	stw	fp,12(sp)
   228b4:	df000304 	addi	fp,sp,12
   228b8:	e13ffd15 	stw	r4,-12(fp)
   228bc:	e17ffe15 	stw	r5,-8(fp)
   228c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   228c4:	010000b4 	movhi	r4,2
   228c8:	21125204 	addi	r4,r4,18760
   228cc:	e17ffd17 	ldw	r5,-12(fp)
   228d0:	01800044 	movi	r6,1
   228d4:	01c07fc4 	movi	r7,511
   228d8:	00227c80 	call	227c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   228dc:	010000b4 	movhi	r4,2
   228e0:	21124f04 	addi	r4,r4,18748
   228e4:	e17ffe17 	ldw	r5,-8(fp)
   228e8:	000d883a 	mov	r6,zero
   228ec:	01c07fc4 	movi	r7,511
   228f0:	00227c80 	call	227c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   228f4:	010000b4 	movhi	r4,2
   228f8:	21125504 	addi	r4,r4,18772
   228fc:	e17fff17 	ldw	r5,-4(fp)
   22900:	01800044 	movi	r6,1
   22904:	01c07fc4 	movi	r7,511
   22908:	00227c80 	call	227c8 <alt_open_fd>
}  
   2290c:	e037883a 	mov	sp,fp
   22910:	dfc00117 	ldw	ra,4(sp)
   22914:	df000017 	ldw	fp,0(sp)
   22918:	dec00204 	addi	sp,sp,8
   2291c:	f800283a 	ret

00022920 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22920:	defffe04 	addi	sp,sp,-8
   22924:	dfc00115 	stw	ra,4(sp)
   22928:	df000015 	stw	fp,0(sp)
   2292c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22930:	008000b4 	movhi	r2,2
   22934:	1093bd04 	addi	r2,r2,20212
   22938:	10800017 	ldw	r2,0(r2)
   2293c:	10000526 	beq	r2,zero,22954 <alt_get_errno+0x34>
   22940:	008000b4 	movhi	r2,2
   22944:	1093bd04 	addi	r2,r2,20212
   22948:	10800017 	ldw	r2,0(r2)
   2294c:	103ee83a 	callr	r2
   22950:	00000206 	br	2295c <alt_get_errno+0x3c>
   22954:	008000b4 	movhi	r2,2
   22958:	10999104 	addi	r2,r2,26180
}
   2295c:	e037883a 	mov	sp,fp
   22960:	dfc00117 	ldw	ra,4(sp)
   22964:	df000017 	ldw	fp,0(sp)
   22968:	dec00204 	addi	sp,sp,8
   2296c:	f800283a 	ret

00022970 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   22970:	defffb04 	addi	sp,sp,-20
   22974:	dfc00415 	stw	ra,16(sp)
   22978:	df000315 	stw	fp,12(sp)
   2297c:	dc000215 	stw	r16,8(sp)
   22980:	df000304 	addi	fp,sp,12
   22984:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   22988:	e0bffe17 	ldw	r2,-8(fp)
   2298c:	10800217 	ldw	r2,8(r2)
   22990:	10d00034 	orhi	r3,r2,16384
   22994:	e0bffe17 	ldw	r2,-8(fp)
   22998:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2299c:	e03ffd15 	stw	zero,-12(fp)
   229a0:	00002306 	br	22a30 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   229a4:	040000b4 	movhi	r16,2
   229a8:	84124f04 	addi	r16,r16,18748
   229ac:	e0bffd17 	ldw	r2,-12(fp)
   229b0:	1009883a 	mov	r4,r2
   229b4:	01400304 	movi	r5,12
   229b8:	00208540 	call	20854 <__mulsi3>
   229bc:	8085883a 	add	r2,r16,r2
   229c0:	10c00017 	ldw	r3,0(r2)
   229c4:	e0bffe17 	ldw	r2,-8(fp)
   229c8:	10800017 	ldw	r2,0(r2)
   229cc:	1880151e 	bne	r3,r2,22a24 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   229d0:	040000b4 	movhi	r16,2
   229d4:	84124f04 	addi	r16,r16,18748
   229d8:	e0bffd17 	ldw	r2,-12(fp)
   229dc:	1009883a 	mov	r4,r2
   229e0:	01400304 	movi	r5,12
   229e4:	00208540 	call	20854 <__mulsi3>
   229e8:	8085883a 	add	r2,r16,r2
   229ec:	10800204 	addi	r2,r2,8
   229f0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   229f4:	10000b0e 	bge	r2,zero,22a24 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   229f8:	e13ffd17 	ldw	r4,-12(fp)
   229fc:	01400304 	movi	r5,12
   22a00:	00208540 	call	20854 <__mulsi3>
   22a04:	1007883a 	mov	r3,r2
   22a08:	008000b4 	movhi	r2,2
   22a0c:	10924f04 	addi	r2,r2,18748
   22a10:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22a14:	e0bffe17 	ldw	r2,-8(fp)
   22a18:	18800226 	beq	r3,r2,22a24 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   22a1c:	00bffcc4 	movi	r2,-13
   22a20:	00000a06 	br	22a4c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22a24:	e0bffd17 	ldw	r2,-12(fp)
   22a28:	10800044 	addi	r2,r2,1
   22a2c:	e0bffd15 	stw	r2,-12(fp)
   22a30:	008000b4 	movhi	r2,2
   22a34:	1093bc04 	addi	r2,r2,20208
   22a38:	10800017 	ldw	r2,0(r2)
   22a3c:	1007883a 	mov	r3,r2
   22a40:	e0bffd17 	ldw	r2,-12(fp)
   22a44:	18bfd72e 	bgeu	r3,r2,229a4 <__alt_data_end+0xfffe6484>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   22a48:	0005883a 	mov	r2,zero
}
   22a4c:	e6ffff04 	addi	sp,fp,-4
   22a50:	dfc00217 	ldw	ra,8(sp)
   22a54:	df000117 	ldw	fp,4(sp)
   22a58:	dc000017 	ldw	r16,0(sp)
   22a5c:	dec00304 	addi	sp,sp,12
   22a60:	f800283a 	ret

00022a64 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   22a64:	defff604 	addi	sp,sp,-40
   22a68:	dfc00915 	stw	ra,36(sp)
   22a6c:	df000815 	stw	fp,32(sp)
   22a70:	df000804 	addi	fp,sp,32
   22a74:	e13ffd15 	stw	r4,-12(fp)
   22a78:	e17ffe15 	stw	r5,-8(fp)
   22a7c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   22a80:	00bfffc4 	movi	r2,-1
   22a84:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   22a88:	00bffb44 	movi	r2,-19
   22a8c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   22a90:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   22a94:	e13ffd17 	ldw	r4,-12(fp)
   22a98:	014000b4 	movhi	r5,2
   22a9c:	2953ba04 	addi	r5,r5,20200
   22aa0:	0022e000 	call	22e00 <alt_find_dev>
   22aa4:	e0bff815 	stw	r2,-32(fp)
   22aa8:	e0bff817 	ldw	r2,-32(fp)
   22aac:	1000051e 	bne	r2,zero,22ac4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   22ab0:	e13ffd17 	ldw	r4,-12(fp)
   22ab4:	0022e900 	call	22e90 <alt_find_file>
   22ab8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   22abc:	00800044 	movi	r2,1
   22ac0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   22ac4:	e0bff817 	ldw	r2,-32(fp)
   22ac8:	10002b26 	beq	r2,zero,22b78 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   22acc:	e13ff817 	ldw	r4,-32(fp)
   22ad0:	0022fa40 	call	22fa4 <alt_get_fd>
   22ad4:	e0bff915 	stw	r2,-28(fp)
   22ad8:	e0bff917 	ldw	r2,-28(fp)
   22adc:	1000030e 	bge	r2,zero,22aec <open+0x88>
    {
      status = index;
   22ae0:	e0bff917 	ldw	r2,-28(fp)
   22ae4:	e0bffa15 	stw	r2,-24(fp)
   22ae8:	00002506 	br	22b80 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   22aec:	e13ff917 	ldw	r4,-28(fp)
   22af0:	01400304 	movi	r5,12
   22af4:	00208540 	call	20854 <__mulsi3>
   22af8:	1007883a 	mov	r3,r2
   22afc:	008000b4 	movhi	r2,2
   22b00:	10924f04 	addi	r2,r2,18748
   22b04:	1885883a 	add	r2,r3,r2
   22b08:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   22b0c:	e0fffe17 	ldw	r3,-8(fp)
   22b10:	00900034 	movhi	r2,16384
   22b14:	10bfffc4 	addi	r2,r2,-1
   22b18:	1886703a 	and	r3,r3,r2
   22b1c:	e0bffc17 	ldw	r2,-16(fp)
   22b20:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   22b24:	e0bffb17 	ldw	r2,-20(fp)
   22b28:	1000051e 	bne	r2,zero,22b40 <open+0xdc>
   22b2c:	e13ffc17 	ldw	r4,-16(fp)
   22b30:	00229700 	call	22970 <alt_file_locked>
   22b34:	e0bffa15 	stw	r2,-24(fp)
   22b38:	e0bffa17 	ldw	r2,-24(fp)
   22b3c:	10001016 	blt	r2,zero,22b80 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   22b40:	e0bff817 	ldw	r2,-32(fp)
   22b44:	10800317 	ldw	r2,12(r2)
   22b48:	10000826 	beq	r2,zero,22b6c <open+0x108>
   22b4c:	e0bff817 	ldw	r2,-32(fp)
   22b50:	10800317 	ldw	r2,12(r2)
   22b54:	e13ffc17 	ldw	r4,-16(fp)
   22b58:	e17ffd17 	ldw	r5,-12(fp)
   22b5c:	e1bffe17 	ldw	r6,-8(fp)
   22b60:	e1ffff17 	ldw	r7,-4(fp)
   22b64:	103ee83a 	callr	r2
   22b68:	00000106 	br	22b70 <open+0x10c>
   22b6c:	0005883a 	mov	r2,zero
   22b70:	e0bffa15 	stw	r2,-24(fp)
   22b74:	00000206 	br	22b80 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   22b78:	00bffb44 	movi	r2,-19
   22b7c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   22b80:	e0bffa17 	ldw	r2,-24(fp)
   22b84:	1000090e 	bge	r2,zero,22bac <open+0x148>
  {
    alt_release_fd (index);  
   22b88:	e13ff917 	ldw	r4,-28(fp)
   22b8c:	0022bc40 	call	22bc4 <alt_release_fd>
    ALT_ERRNO = -status;
   22b90:	00229200 	call	22920 <alt_get_errno>
   22b94:	1007883a 	mov	r3,r2
   22b98:	e0bffa17 	ldw	r2,-24(fp)
   22b9c:	0085c83a 	sub	r2,zero,r2
   22ba0:	18800015 	stw	r2,0(r3)
    return -1;
   22ba4:	00bfffc4 	movi	r2,-1
   22ba8:	00000106 	br	22bb0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   22bac:	e0bff917 	ldw	r2,-28(fp)
}
   22bb0:	e037883a 	mov	sp,fp
   22bb4:	dfc00117 	ldw	ra,4(sp)
   22bb8:	df000017 	ldw	fp,0(sp)
   22bbc:	dec00204 	addi	sp,sp,8
   22bc0:	f800283a 	ret

00022bc4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   22bc4:	defffc04 	addi	sp,sp,-16
   22bc8:	dfc00315 	stw	ra,12(sp)
   22bcc:	df000215 	stw	fp,8(sp)
   22bd0:	dc000115 	stw	r16,4(sp)
   22bd4:	df000204 	addi	fp,sp,8
   22bd8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   22bdc:	e0bffe17 	ldw	r2,-8(fp)
   22be0:	108000d0 	cmplti	r2,r2,3
   22be4:	1000111e 	bne	r2,zero,22c2c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   22be8:	040000b4 	movhi	r16,2
   22bec:	84124f04 	addi	r16,r16,18748
   22bf0:	e0bffe17 	ldw	r2,-8(fp)
   22bf4:	1009883a 	mov	r4,r2
   22bf8:	01400304 	movi	r5,12
   22bfc:	00208540 	call	20854 <__mulsi3>
   22c00:	8085883a 	add	r2,r16,r2
   22c04:	10800204 	addi	r2,r2,8
   22c08:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   22c0c:	040000b4 	movhi	r16,2
   22c10:	84124f04 	addi	r16,r16,18748
   22c14:	e0bffe17 	ldw	r2,-8(fp)
   22c18:	1009883a 	mov	r4,r2
   22c1c:	01400304 	movi	r5,12
   22c20:	00208540 	call	20854 <__mulsi3>
   22c24:	8085883a 	add	r2,r16,r2
   22c28:	10000015 	stw	zero,0(r2)
  }
}
   22c2c:	e6ffff04 	addi	sp,fp,-4
   22c30:	dfc00217 	ldw	ra,8(sp)
   22c34:	df000117 	ldw	fp,4(sp)
   22c38:	dc000017 	ldw	r16,0(sp)
   22c3c:	dec00304 	addi	sp,sp,12
   22c40:	f800283a 	ret

00022c44 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   22c44:	defffa04 	addi	sp,sp,-24
   22c48:	df000515 	stw	fp,20(sp)
   22c4c:	df000504 	addi	fp,sp,20
   22c50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22c54:	0005303a 	rdctl	r2,status
   22c58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22c5c:	e0fffc17 	ldw	r3,-16(fp)
   22c60:	00bfff84 	movi	r2,-2
   22c64:	1884703a 	and	r2,r3,r2
   22c68:	1001703a 	wrctl	status,r2
  
  return context;
   22c6c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   22c70:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   22c74:	e0bfff17 	ldw	r2,-4(fp)
   22c78:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   22c7c:	e0bffd17 	ldw	r2,-12(fp)
   22c80:	10800017 	ldw	r2,0(r2)
   22c84:	e0fffd17 	ldw	r3,-12(fp)
   22c88:	18c00117 	ldw	r3,4(r3)
   22c8c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   22c90:	e0bffd17 	ldw	r2,-12(fp)
   22c94:	10800117 	ldw	r2,4(r2)
   22c98:	e0fffd17 	ldw	r3,-12(fp)
   22c9c:	18c00017 	ldw	r3,0(r3)
   22ca0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   22ca4:	e0bffd17 	ldw	r2,-12(fp)
   22ca8:	e0fffd17 	ldw	r3,-12(fp)
   22cac:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   22cb0:	e0bffd17 	ldw	r2,-12(fp)
   22cb4:	e0fffd17 	ldw	r3,-12(fp)
   22cb8:	10c00015 	stw	r3,0(r2)
   22cbc:	e0bffb17 	ldw	r2,-20(fp)
   22cc0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22cc4:	e0bffe17 	ldw	r2,-8(fp)
   22cc8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   22ccc:	e037883a 	mov	sp,fp
   22cd0:	df000017 	ldw	fp,0(sp)
   22cd4:	dec00104 	addi	sp,sp,4
   22cd8:	f800283a 	ret

00022cdc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   22cdc:	defffb04 	addi	sp,sp,-20
   22ce0:	dfc00415 	stw	ra,16(sp)
   22ce4:	df000315 	stw	fp,12(sp)
   22ce8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   22cec:	d0a00717 	ldw	r2,-32740(gp)
   22cf0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   22cf4:	d0a5d717 	ldw	r2,-26788(gp)
   22cf8:	10800044 	addi	r2,r2,1
   22cfc:	d0a5d715 	stw	r2,-26788(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   22d00:	00002e06 	br	22dbc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   22d04:	e0bffd17 	ldw	r2,-12(fp)
   22d08:	10800017 	ldw	r2,0(r2)
   22d0c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   22d10:	e0bffd17 	ldw	r2,-12(fp)
   22d14:	10800403 	ldbu	r2,16(r2)
   22d18:	10803fcc 	andi	r2,r2,255
   22d1c:	10000426 	beq	r2,zero,22d30 <alt_tick+0x54>
   22d20:	d0a5d717 	ldw	r2,-26788(gp)
   22d24:	1000021e 	bne	r2,zero,22d30 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   22d28:	e0bffd17 	ldw	r2,-12(fp)
   22d2c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   22d30:	e0bffd17 	ldw	r2,-12(fp)
   22d34:	10800217 	ldw	r2,8(r2)
   22d38:	d0e5d717 	ldw	r3,-26788(gp)
   22d3c:	18801d36 	bltu	r3,r2,22db4 <alt_tick+0xd8>
   22d40:	e0bffd17 	ldw	r2,-12(fp)
   22d44:	10800403 	ldbu	r2,16(r2)
   22d48:	10803fcc 	andi	r2,r2,255
   22d4c:	1000191e 	bne	r2,zero,22db4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   22d50:	e0bffd17 	ldw	r2,-12(fp)
   22d54:	10800317 	ldw	r2,12(r2)
   22d58:	e0fffd17 	ldw	r3,-12(fp)
   22d5c:	18c00517 	ldw	r3,20(r3)
   22d60:	1809883a 	mov	r4,r3
   22d64:	103ee83a 	callr	r2
   22d68:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   22d6c:	e0bfff17 	ldw	r2,-4(fp)
   22d70:	1000031e 	bne	r2,zero,22d80 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   22d74:	e13ffd17 	ldw	r4,-12(fp)
   22d78:	0022c440 	call	22c44 <alt_alarm_stop>
   22d7c:	00000d06 	br	22db4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   22d80:	e0bffd17 	ldw	r2,-12(fp)
   22d84:	10c00217 	ldw	r3,8(r2)
   22d88:	e0bfff17 	ldw	r2,-4(fp)
   22d8c:	1887883a 	add	r3,r3,r2
   22d90:	e0bffd17 	ldw	r2,-12(fp)
   22d94:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   22d98:	e0bffd17 	ldw	r2,-12(fp)
   22d9c:	10c00217 	ldw	r3,8(r2)
   22da0:	d0a5d717 	ldw	r2,-26788(gp)
   22da4:	1880032e 	bgeu	r3,r2,22db4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   22da8:	e0bffd17 	ldw	r2,-12(fp)
   22dac:	00c00044 	movi	r3,1
   22db0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   22db4:	e0bffe17 	ldw	r2,-8(fp)
   22db8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   22dbc:	e0fffd17 	ldw	r3,-12(fp)
   22dc0:	d0a00704 	addi	r2,gp,-32740
   22dc4:	18bfcf1e 	bne	r3,r2,22d04 <__alt_data_end+0xfffe67e4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   22dc8:	0001883a 	nop
}
   22dcc:	e037883a 	mov	sp,fp
   22dd0:	dfc00117 	ldw	ra,4(sp)
   22dd4:	df000017 	ldw	fp,0(sp)
   22dd8:	dec00204 	addi	sp,sp,8
   22ddc:	f800283a 	ret

00022de0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   22de0:	deffff04 	addi	sp,sp,-4
   22de4:	df000015 	stw	fp,0(sp)
   22de8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   22dec:	000170fa 	wrctl	ienable,zero
}
   22df0:	e037883a 	mov	sp,fp
   22df4:	df000017 	ldw	fp,0(sp)
   22df8:	dec00104 	addi	sp,sp,4
   22dfc:	f800283a 	ret

00022e00 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   22e00:	defffa04 	addi	sp,sp,-24
   22e04:	dfc00515 	stw	ra,20(sp)
   22e08:	df000415 	stw	fp,16(sp)
   22e0c:	df000404 	addi	fp,sp,16
   22e10:	e13ffe15 	stw	r4,-8(fp)
   22e14:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   22e18:	e0bfff17 	ldw	r2,-4(fp)
   22e1c:	10800017 	ldw	r2,0(r2)
   22e20:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   22e24:	e13ffe17 	ldw	r4,-8(fp)
   22e28:	00233140 	call	23314 <strlen>
   22e2c:	10800044 	addi	r2,r2,1
   22e30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22e34:	00000d06 	br	22e6c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   22e38:	e0bffc17 	ldw	r2,-16(fp)
   22e3c:	10c00217 	ldw	r3,8(r2)
   22e40:	e0bffd17 	ldw	r2,-12(fp)
   22e44:	1809883a 	mov	r4,r3
   22e48:	e17ffe17 	ldw	r5,-8(fp)
   22e4c:	100d883a 	mov	r6,r2
   22e50:	00231600 	call	23160 <memcmp>
   22e54:	1000021e 	bne	r2,zero,22e60 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   22e58:	e0bffc17 	ldw	r2,-16(fp)
   22e5c:	00000706 	br	22e7c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   22e60:	e0bffc17 	ldw	r2,-16(fp)
   22e64:	10800017 	ldw	r2,0(r2)
   22e68:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22e6c:	e0fffc17 	ldw	r3,-16(fp)
   22e70:	e0bfff17 	ldw	r2,-4(fp)
   22e74:	18bff01e 	bne	r3,r2,22e38 <__alt_data_end+0xfffe6918>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   22e78:	0005883a 	mov	r2,zero
}
   22e7c:	e037883a 	mov	sp,fp
   22e80:	dfc00117 	ldw	ra,4(sp)
   22e84:	df000017 	ldw	fp,0(sp)
   22e88:	dec00204 	addi	sp,sp,8
   22e8c:	f800283a 	ret

00022e90 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   22e90:	defffb04 	addi	sp,sp,-20
   22e94:	dfc00415 	stw	ra,16(sp)
   22e98:	df000315 	stw	fp,12(sp)
   22e9c:	df000304 	addi	fp,sp,12
   22ea0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   22ea4:	008000b4 	movhi	r2,2
   22ea8:	1093b804 	addi	r2,r2,20192
   22eac:	10800017 	ldw	r2,0(r2)
   22eb0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   22eb4:	00003106 	br	22f7c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   22eb8:	e0bffd17 	ldw	r2,-12(fp)
   22ebc:	10800217 	ldw	r2,8(r2)
   22ec0:	1009883a 	mov	r4,r2
   22ec4:	00233140 	call	23314 <strlen>
   22ec8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   22ecc:	e0bffd17 	ldw	r2,-12(fp)
   22ed0:	10c00217 	ldw	r3,8(r2)
   22ed4:	e0bffe17 	ldw	r2,-8(fp)
   22ed8:	10bfffc4 	addi	r2,r2,-1
   22edc:	1885883a 	add	r2,r3,r2
   22ee0:	10800003 	ldbu	r2,0(r2)
   22ee4:	10803fcc 	andi	r2,r2,255
   22ee8:	1080201c 	xori	r2,r2,128
   22eec:	10bfe004 	addi	r2,r2,-128
   22ef0:	10800bd8 	cmpnei	r2,r2,47
   22ef4:	1000031e 	bne	r2,zero,22f04 <alt_find_file+0x74>
    {
      len -= 1;
   22ef8:	e0bffe17 	ldw	r2,-8(fp)
   22efc:	10bfffc4 	addi	r2,r2,-1
   22f00:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22f04:	e0bffe17 	ldw	r2,-8(fp)
   22f08:	e0ffff17 	ldw	r3,-4(fp)
   22f0c:	1885883a 	add	r2,r3,r2
   22f10:	10800003 	ldbu	r2,0(r2)
   22f14:	10803fcc 	andi	r2,r2,255
   22f18:	1080201c 	xori	r2,r2,128
   22f1c:	10bfe004 	addi	r2,r2,-128
   22f20:	10800be0 	cmpeqi	r2,r2,47
   22f24:	1000081e 	bne	r2,zero,22f48 <alt_find_file+0xb8>
   22f28:	e0bffe17 	ldw	r2,-8(fp)
   22f2c:	e0ffff17 	ldw	r3,-4(fp)
   22f30:	1885883a 	add	r2,r3,r2
   22f34:	10800003 	ldbu	r2,0(r2)
   22f38:	10803fcc 	andi	r2,r2,255
   22f3c:	1080201c 	xori	r2,r2,128
   22f40:	10bfe004 	addi	r2,r2,-128
   22f44:	10000a1e 	bne	r2,zero,22f70 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   22f48:	e0bffd17 	ldw	r2,-12(fp)
   22f4c:	10c00217 	ldw	r3,8(r2)
   22f50:	e0bffe17 	ldw	r2,-8(fp)
   22f54:	1809883a 	mov	r4,r3
   22f58:	e17fff17 	ldw	r5,-4(fp)
   22f5c:	100d883a 	mov	r6,r2
   22f60:	00231600 	call	23160 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22f64:	1000021e 	bne	r2,zero,22f70 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   22f68:	e0bffd17 	ldw	r2,-12(fp)
   22f6c:	00000806 	br	22f90 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   22f70:	e0bffd17 	ldw	r2,-12(fp)
   22f74:	10800017 	ldw	r2,0(r2)
   22f78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   22f7c:	e0fffd17 	ldw	r3,-12(fp)
   22f80:	008000b4 	movhi	r2,2
   22f84:	1093b804 	addi	r2,r2,20192
   22f88:	18bfcb1e 	bne	r3,r2,22eb8 <__alt_data_end+0xfffe6998>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   22f8c:	0005883a 	mov	r2,zero
}
   22f90:	e037883a 	mov	sp,fp
   22f94:	dfc00117 	ldw	ra,4(sp)
   22f98:	df000017 	ldw	fp,0(sp)
   22f9c:	dec00204 	addi	sp,sp,8
   22fa0:	f800283a 	ret

00022fa4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   22fa4:	defffa04 	addi	sp,sp,-24
   22fa8:	dfc00515 	stw	ra,20(sp)
   22fac:	df000415 	stw	fp,16(sp)
   22fb0:	dc000315 	stw	r16,12(sp)
   22fb4:	df000404 	addi	fp,sp,16
   22fb8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   22fbc:	00bffa04 	movi	r2,-24
   22fc0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22fc4:	e03ffc15 	stw	zero,-16(fp)
   22fc8:	00002106 	br	23050 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   22fcc:	040000b4 	movhi	r16,2
   22fd0:	84124f04 	addi	r16,r16,18748
   22fd4:	e0bffc17 	ldw	r2,-16(fp)
   22fd8:	1009883a 	mov	r4,r2
   22fdc:	01400304 	movi	r5,12
   22fe0:	00208540 	call	20854 <__mulsi3>
   22fe4:	8085883a 	add	r2,r16,r2
   22fe8:	10800017 	ldw	r2,0(r2)
   22fec:	1000151e 	bne	r2,zero,23044 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   22ff0:	040000b4 	movhi	r16,2
   22ff4:	84124f04 	addi	r16,r16,18748
   22ff8:	e0bffc17 	ldw	r2,-16(fp)
   22ffc:	1009883a 	mov	r4,r2
   23000:	01400304 	movi	r5,12
   23004:	00208540 	call	20854 <__mulsi3>
   23008:	8085883a 	add	r2,r16,r2
   2300c:	e0fffe17 	ldw	r3,-8(fp)
   23010:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   23014:	008000b4 	movhi	r2,2
   23018:	1093bc04 	addi	r2,r2,20208
   2301c:	10c00017 	ldw	r3,0(r2)
   23020:	e0bffc17 	ldw	r2,-16(fp)
   23024:	1880040e 	bge	r3,r2,23038 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   23028:	008000b4 	movhi	r2,2
   2302c:	1093bc04 	addi	r2,r2,20208
   23030:	e0fffc17 	ldw	r3,-16(fp)
   23034:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   23038:	e0bffc17 	ldw	r2,-16(fp)
   2303c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   23040:	00000606 	br	2305c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   23044:	e0bffc17 	ldw	r2,-16(fp)
   23048:	10800044 	addi	r2,r2,1
   2304c:	e0bffc15 	stw	r2,-16(fp)
   23050:	e0bffc17 	ldw	r2,-16(fp)
   23054:	10800810 	cmplti	r2,r2,32
   23058:	103fdc1e 	bne	r2,zero,22fcc <__alt_data_end+0xfffe6aac>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2305c:	e0bffd17 	ldw	r2,-12(fp)
}
   23060:	e6ffff04 	addi	sp,fp,-4
   23064:	dfc00217 	ldw	ra,8(sp)
   23068:	df000117 	ldw	fp,4(sp)
   2306c:	dc000017 	ldw	r16,0(sp)
   23070:	dec00304 	addi	sp,sp,12
   23074:	f800283a 	ret

00023078 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   23078:	defffe04 	addi	sp,sp,-8
   2307c:	df000115 	stw	fp,4(sp)
   23080:	df000104 	addi	fp,sp,4
   23084:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   23088:	e0bfff17 	ldw	r2,-4(fp)
   2308c:	10bffe84 	addi	r2,r2,-6
   23090:	10c00428 	cmpgeui	r3,r2,16
   23094:	18001a1e 	bne	r3,zero,23100 <alt_exception_cause_generated_bad_addr+0x88>
   23098:	100690ba 	slli	r3,r2,2
   2309c:	008000b4 	movhi	r2,2
   230a0:	108c2c04 	addi	r2,r2,12464
   230a4:	1885883a 	add	r2,r3,r2
   230a8:	10800017 	ldw	r2,0(r2)
   230ac:	1000683a 	jmp	r2
   230b0:	000230f0 	cmpltui	zero,zero,2243
   230b4:	000230f0 	cmpltui	zero,zero,2243
   230b8:	00023100 	call	2310 <__alt_mem_RAM_jesus-0x1dcf0>
   230bc:	00023100 	call	2310 <__alt_mem_RAM_jesus-0x1dcf0>
   230c0:	00023100 	call	2310 <__alt_mem_RAM_jesus-0x1dcf0>
   230c4:	000230f0 	cmpltui	zero,zero,2243
   230c8:	000230f8 	rdprs	zero,zero,2243
   230cc:	00023100 	call	2310 <__alt_mem_RAM_jesus-0x1dcf0>
   230d0:	000230f0 	cmpltui	zero,zero,2243
   230d4:	000230f0 	cmpltui	zero,zero,2243
   230d8:	00023100 	call	2310 <__alt_mem_RAM_jesus-0x1dcf0>
   230dc:	000230f0 	cmpltui	zero,zero,2243
   230e0:	000230f8 	rdprs	zero,zero,2243
   230e4:	00023100 	call	2310 <__alt_mem_RAM_jesus-0x1dcf0>
   230e8:	00023100 	call	2310 <__alt_mem_RAM_jesus-0x1dcf0>
   230ec:	000230f0 	cmpltui	zero,zero,2243
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   230f0:	00800044 	movi	r2,1
   230f4:	00000306 	br	23104 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   230f8:	0005883a 	mov	r2,zero
   230fc:	00000106 	br	23104 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   23100:	0005883a 	mov	r2,zero
  }
}
   23104:	e037883a 	mov	sp,fp
   23108:	df000017 	ldw	fp,0(sp)
   2310c:	dec00104 	addi	sp,sp,4
   23110:	f800283a 	ret

00023114 <atexit>:
   23114:	200b883a 	mov	r5,r4
   23118:	000d883a 	mov	r6,zero
   2311c:	0009883a 	mov	r4,zero
   23120:	000f883a 	mov	r7,zero
   23124:	00233ac1 	jmpi	233ac <__register_exitproc>

00023128 <exit>:
   23128:	defffe04 	addi	sp,sp,-8
   2312c:	000b883a 	mov	r5,zero
   23130:	dc000015 	stw	r16,0(sp)
   23134:	dfc00115 	stw	ra,4(sp)
   23138:	2021883a 	mov	r16,r4
   2313c:	00234c00 	call	234c0 <__call_exitprocs>
   23140:	008000b4 	movhi	r2,2
   23144:	1093c104 	addi	r2,r2,20228
   23148:	11000017 	ldw	r4,0(r2)
   2314c:	20800f17 	ldw	r2,60(r4)
   23150:	10000126 	beq	r2,zero,23158 <exit+0x30>
   23154:	103ee83a 	callr	r2
   23158:	8009883a 	mov	r4,r16
   2315c:	00237800 	call	23780 <_exit>

00023160 <memcmp>:
   23160:	01c000c4 	movi	r7,3
   23164:	3980192e 	bgeu	r7,r6,231cc <memcmp+0x6c>
   23168:	2144b03a 	or	r2,r4,r5
   2316c:	11c4703a 	and	r2,r2,r7
   23170:	10000f26 	beq	r2,zero,231b0 <memcmp+0x50>
   23174:	20800003 	ldbu	r2,0(r4)
   23178:	28c00003 	ldbu	r3,0(r5)
   2317c:	10c0151e 	bne	r2,r3,231d4 <memcmp+0x74>
   23180:	31bfff84 	addi	r6,r6,-2
   23184:	01ffffc4 	movi	r7,-1
   23188:	00000406 	br	2319c <memcmp+0x3c>
   2318c:	20800003 	ldbu	r2,0(r4)
   23190:	28c00003 	ldbu	r3,0(r5)
   23194:	31bfffc4 	addi	r6,r6,-1
   23198:	10c00e1e 	bne	r2,r3,231d4 <memcmp+0x74>
   2319c:	21000044 	addi	r4,r4,1
   231a0:	29400044 	addi	r5,r5,1
   231a4:	31fff91e 	bne	r6,r7,2318c <__alt_data_end+0xfffe6c6c>
   231a8:	0005883a 	mov	r2,zero
   231ac:	f800283a 	ret
   231b0:	20c00017 	ldw	r3,0(r4)
   231b4:	28800017 	ldw	r2,0(r5)
   231b8:	1880041e 	bne	r3,r2,231cc <memcmp+0x6c>
   231bc:	31bfff04 	addi	r6,r6,-4
   231c0:	21000104 	addi	r4,r4,4
   231c4:	29400104 	addi	r5,r5,4
   231c8:	39bff936 	bltu	r7,r6,231b0 <__alt_data_end+0xfffe6c90>
   231cc:	303fe91e 	bne	r6,zero,23174 <__alt_data_end+0xfffe6c54>
   231d0:	003ff506 	br	231a8 <__alt_data_end+0xfffe6c88>
   231d4:	10c5c83a 	sub	r2,r2,r3
   231d8:	f800283a 	ret

000231dc <memcpy>:
   231dc:	deffff04 	addi	sp,sp,-4
   231e0:	dc000015 	stw	r16,0(sp)
   231e4:	00c003c4 	movi	r3,15
   231e8:	2005883a 	mov	r2,r4
   231ec:	1980432e 	bgeu	r3,r6,232fc <memcpy+0x120>
   231f0:	2146b03a 	or	r3,r4,r5
   231f4:	18c000cc 	andi	r3,r3,3
   231f8:	1800421e 	bne	r3,zero,23304 <memcpy+0x128>
   231fc:	343ffc04 	addi	r16,r6,-16
   23200:	8020d13a 	srli	r16,r16,4
   23204:	28c00104 	addi	r3,r5,4
   23208:	23400104 	addi	r13,r4,4
   2320c:	801e913a 	slli	r15,r16,4
   23210:	2b000204 	addi	r12,r5,8
   23214:	22c00204 	addi	r11,r4,8
   23218:	7bc00504 	addi	r15,r15,20
   2321c:	2a800304 	addi	r10,r5,12
   23220:	22400304 	addi	r9,r4,12
   23224:	2bdf883a 	add	r15,r5,r15
   23228:	2811883a 	mov	r8,r5
   2322c:	200f883a 	mov	r7,r4
   23230:	41000017 	ldw	r4,0(r8)
   23234:	39c00404 	addi	r7,r7,16
   23238:	18c00404 	addi	r3,r3,16
   2323c:	393ffc15 	stw	r4,-16(r7)
   23240:	1bbffc17 	ldw	r14,-16(r3)
   23244:	6b400404 	addi	r13,r13,16
   23248:	5ac00404 	addi	r11,r11,16
   2324c:	6bbffc15 	stw	r14,-16(r13)
   23250:	63800017 	ldw	r14,0(r12)
   23254:	4a400404 	addi	r9,r9,16
   23258:	42000404 	addi	r8,r8,16
   2325c:	5bbffc15 	stw	r14,-16(r11)
   23260:	53800017 	ldw	r14,0(r10)
   23264:	63000404 	addi	r12,r12,16
   23268:	52800404 	addi	r10,r10,16
   2326c:	4bbffc15 	stw	r14,-16(r9)
   23270:	1bffef1e 	bne	r3,r15,23230 <__alt_data_end+0xfffe6d10>
   23274:	81c00044 	addi	r7,r16,1
   23278:	380e913a 	slli	r7,r7,4
   2327c:	310003cc 	andi	r4,r6,15
   23280:	02c000c4 	movi	r11,3
   23284:	11c7883a 	add	r3,r2,r7
   23288:	29cb883a 	add	r5,r5,r7
   2328c:	59001f2e 	bgeu	r11,r4,2330c <memcpy+0x130>
   23290:	1813883a 	mov	r9,r3
   23294:	2811883a 	mov	r8,r5
   23298:	200f883a 	mov	r7,r4
   2329c:	42800017 	ldw	r10,0(r8)
   232a0:	4a400104 	addi	r9,r9,4
   232a4:	39ffff04 	addi	r7,r7,-4
   232a8:	4abfff15 	stw	r10,-4(r9)
   232ac:	42000104 	addi	r8,r8,4
   232b0:	59fffa36 	bltu	r11,r7,2329c <__alt_data_end+0xfffe6d7c>
   232b4:	213fff04 	addi	r4,r4,-4
   232b8:	2008d0ba 	srli	r4,r4,2
   232bc:	318000cc 	andi	r6,r6,3
   232c0:	21000044 	addi	r4,r4,1
   232c4:	2109883a 	add	r4,r4,r4
   232c8:	2109883a 	add	r4,r4,r4
   232cc:	1907883a 	add	r3,r3,r4
   232d0:	290b883a 	add	r5,r5,r4
   232d4:	30000626 	beq	r6,zero,232f0 <memcpy+0x114>
   232d8:	198d883a 	add	r6,r3,r6
   232dc:	29c00003 	ldbu	r7,0(r5)
   232e0:	18c00044 	addi	r3,r3,1
   232e4:	29400044 	addi	r5,r5,1
   232e8:	19ffffc5 	stb	r7,-1(r3)
   232ec:	19bffb1e 	bne	r3,r6,232dc <__alt_data_end+0xfffe6dbc>
   232f0:	dc000017 	ldw	r16,0(sp)
   232f4:	dec00104 	addi	sp,sp,4
   232f8:	f800283a 	ret
   232fc:	2007883a 	mov	r3,r4
   23300:	003ff406 	br	232d4 <__alt_data_end+0xfffe6db4>
   23304:	2007883a 	mov	r3,r4
   23308:	003ff306 	br	232d8 <__alt_data_end+0xfffe6db8>
   2330c:	200d883a 	mov	r6,r4
   23310:	003ff006 	br	232d4 <__alt_data_end+0xfffe6db4>

00023314 <strlen>:
   23314:	208000cc 	andi	r2,r4,3
   23318:	10002026 	beq	r2,zero,2339c <strlen+0x88>
   2331c:	20800007 	ldb	r2,0(r4)
   23320:	10002026 	beq	r2,zero,233a4 <strlen+0x90>
   23324:	2005883a 	mov	r2,r4
   23328:	00000206 	br	23334 <strlen+0x20>
   2332c:	10c00007 	ldb	r3,0(r2)
   23330:	18001826 	beq	r3,zero,23394 <strlen+0x80>
   23334:	10800044 	addi	r2,r2,1
   23338:	10c000cc 	andi	r3,r2,3
   2333c:	183ffb1e 	bne	r3,zero,2332c <__alt_data_end+0xfffe6e0c>
   23340:	10c00017 	ldw	r3,0(r2)
   23344:	01ffbff4 	movhi	r7,65279
   23348:	39ffbfc4 	addi	r7,r7,-257
   2334c:	00ca303a 	nor	r5,zero,r3
   23350:	01a02074 	movhi	r6,32897
   23354:	19c7883a 	add	r3,r3,r7
   23358:	31a02004 	addi	r6,r6,-32640
   2335c:	1946703a 	and	r3,r3,r5
   23360:	1986703a 	and	r3,r3,r6
   23364:	1800091e 	bne	r3,zero,2338c <strlen+0x78>
   23368:	10800104 	addi	r2,r2,4
   2336c:	10c00017 	ldw	r3,0(r2)
   23370:	19cb883a 	add	r5,r3,r7
   23374:	00c6303a 	nor	r3,zero,r3
   23378:	28c6703a 	and	r3,r5,r3
   2337c:	1986703a 	and	r3,r3,r6
   23380:	183ff926 	beq	r3,zero,23368 <__alt_data_end+0xfffe6e48>
   23384:	00000106 	br	2338c <strlen+0x78>
   23388:	10800044 	addi	r2,r2,1
   2338c:	10c00007 	ldb	r3,0(r2)
   23390:	183ffd1e 	bne	r3,zero,23388 <__alt_data_end+0xfffe6e68>
   23394:	1105c83a 	sub	r2,r2,r4
   23398:	f800283a 	ret
   2339c:	2005883a 	mov	r2,r4
   233a0:	003fe706 	br	23340 <__alt_data_end+0xfffe6e20>
   233a4:	0005883a 	mov	r2,zero
   233a8:	f800283a 	ret

000233ac <__register_exitproc>:
   233ac:	008000b4 	movhi	r2,2
   233b0:	defffa04 	addi	sp,sp,-24
   233b4:	1093c104 	addi	r2,r2,20228
   233b8:	dc000315 	stw	r16,12(sp)
   233bc:	14000017 	ldw	r16,0(r2)
   233c0:	dc400415 	stw	r17,16(sp)
   233c4:	dfc00515 	stw	ra,20(sp)
   233c8:	80805217 	ldw	r2,328(r16)
   233cc:	2023883a 	mov	r17,r4
   233d0:	10003626 	beq	r2,zero,234ac <__register_exitproc+0x100>
   233d4:	10c00117 	ldw	r3,4(r2)
   233d8:	010007c4 	movi	r4,31
   233dc:	20c00e16 	blt	r4,r3,23418 <__register_exitproc+0x6c>
   233e0:	1a400044 	addi	r9,r3,1
   233e4:	8800211e 	bne	r17,zero,2346c <__register_exitproc+0xc0>
   233e8:	18c00084 	addi	r3,r3,2
   233ec:	18c7883a 	add	r3,r3,r3
   233f0:	18c7883a 	add	r3,r3,r3
   233f4:	12400115 	stw	r9,4(r2)
   233f8:	10c7883a 	add	r3,r2,r3
   233fc:	19400015 	stw	r5,0(r3)
   23400:	0005883a 	mov	r2,zero
   23404:	dfc00517 	ldw	ra,20(sp)
   23408:	dc400417 	ldw	r17,16(sp)
   2340c:	dc000317 	ldw	r16,12(sp)
   23410:	dec00604 	addi	sp,sp,24
   23414:	f800283a 	ret
   23418:	00800034 	movhi	r2,0
   2341c:	10800004 	addi	r2,r2,0
   23420:	10002526 	beq	r2,zero,234b8 <__register_exitproc+0x10c>
   23424:	01006404 	movi	r4,400
   23428:	d9400015 	stw	r5,0(sp)
   2342c:	d9800115 	stw	r6,4(sp)
   23430:	d9c00215 	stw	r7,8(sp)
   23434:	00000000 	call	0 <__alt_mem_RAM_jesus-0x20000>
   23438:	d9400017 	ldw	r5,0(sp)
   2343c:	d9800117 	ldw	r6,4(sp)
   23440:	d9c00217 	ldw	r7,8(sp)
   23444:	10001c26 	beq	r2,zero,234b8 <__register_exitproc+0x10c>
   23448:	80c05217 	ldw	r3,328(r16)
   2344c:	10000115 	stw	zero,4(r2)
   23450:	02400044 	movi	r9,1
   23454:	10c00015 	stw	r3,0(r2)
   23458:	80805215 	stw	r2,328(r16)
   2345c:	10006215 	stw	zero,392(r2)
   23460:	10006315 	stw	zero,396(r2)
   23464:	0007883a 	mov	r3,zero
   23468:	883fdf26 	beq	r17,zero,233e8 <__alt_data_end+0xfffe6ec8>
   2346c:	18d1883a 	add	r8,r3,r3
   23470:	4211883a 	add	r8,r8,r8
   23474:	1211883a 	add	r8,r2,r8
   23478:	41802215 	stw	r6,136(r8)
   2347c:	01000044 	movi	r4,1
   23480:	11806217 	ldw	r6,392(r2)
   23484:	20c8983a 	sll	r4,r4,r3
   23488:	310cb03a 	or	r6,r6,r4
   2348c:	11806215 	stw	r6,392(r2)
   23490:	41c04215 	stw	r7,264(r8)
   23494:	01800084 	movi	r6,2
   23498:	89bfd31e 	bne	r17,r6,233e8 <__alt_data_end+0xfffe6ec8>
   2349c:	11806317 	ldw	r6,396(r2)
   234a0:	3108b03a 	or	r4,r6,r4
   234a4:	11006315 	stw	r4,396(r2)
   234a8:	003fcf06 	br	233e8 <__alt_data_end+0xfffe6ec8>
   234ac:	80805304 	addi	r2,r16,332
   234b0:	80805215 	stw	r2,328(r16)
   234b4:	003fc706 	br	233d4 <__alt_data_end+0xfffe6eb4>
   234b8:	00bfffc4 	movi	r2,-1
   234bc:	003fd106 	br	23404 <__alt_data_end+0xfffe6ee4>

000234c0 <__call_exitprocs>:
   234c0:	008000b4 	movhi	r2,2
   234c4:	1093c104 	addi	r2,r2,20228
   234c8:	10800017 	ldw	r2,0(r2)
   234cc:	defff404 	addi	sp,sp,-48
   234d0:	dd800815 	stw	r22,32(sp)
   234d4:	d8800015 	stw	r2,0(sp)
   234d8:	10805204 	addi	r2,r2,328
   234dc:	dd000615 	stw	r20,24(sp)
   234e0:	dc800415 	stw	r18,16(sp)
   234e4:	dfc00b15 	stw	ra,44(sp)
   234e8:	df000a15 	stw	fp,40(sp)
   234ec:	ddc00915 	stw	r23,36(sp)
   234f0:	dd400715 	stw	r21,28(sp)
   234f4:	dcc00515 	stw	r19,20(sp)
   234f8:	dc400315 	stw	r17,12(sp)
   234fc:	dc000215 	stw	r16,8(sp)
   23500:	2025883a 	mov	r18,r4
   23504:	2829883a 	mov	r20,r5
   23508:	d8800115 	stw	r2,4(sp)
   2350c:	05bfffc4 	movi	r22,-1
   23510:	d8800017 	ldw	r2,0(sp)
   23514:	14c05217 	ldw	r19,328(r2)
   23518:	98001d26 	beq	r19,zero,23590 <__call_exitprocs+0xd0>
   2351c:	dd400117 	ldw	r21,4(sp)
   23520:	98800117 	ldw	r2,4(r19)
   23524:	173fffc4 	addi	fp,r2,-1
   23528:	e0000d16 	blt	fp,zero,23560 <__call_exitprocs+0xa0>
   2352c:	14000044 	addi	r16,r2,1
   23530:	8421883a 	add	r16,r16,r16
   23534:	8421883a 	add	r16,r16,r16
   23538:	84402004 	addi	r17,r16,128
   2353c:	9c63883a 	add	r17,r19,r17
   23540:	9c21883a 	add	r16,r19,r16
   23544:	a0001e26 	beq	r20,zero,235c0 <__call_exitprocs+0x100>
   23548:	80804017 	ldw	r2,256(r16)
   2354c:	15001c26 	beq	r2,r20,235c0 <__call_exitprocs+0x100>
   23550:	e73fffc4 	addi	fp,fp,-1
   23554:	843fff04 	addi	r16,r16,-4
   23558:	8c7fff04 	addi	r17,r17,-4
   2355c:	e5bff91e 	bne	fp,r22,23544 <__alt_data_end+0xfffe7024>
   23560:	00800034 	movhi	r2,0
   23564:	10800004 	addi	r2,r2,0
   23568:	10000926 	beq	r2,zero,23590 <__call_exitprocs+0xd0>
   2356c:	98800117 	ldw	r2,4(r19)
   23570:	1000311e 	bne	r2,zero,23638 <__call_exitprocs+0x178>
   23574:	98800017 	ldw	r2,0(r19)
   23578:	10003426 	beq	r2,zero,2364c <__call_exitprocs+0x18c>
   2357c:	9809883a 	mov	r4,r19
   23580:	a8800015 	stw	r2,0(r21)
   23584:	00000000 	call	0 <__alt_mem_RAM_jesus-0x20000>
   23588:	acc00017 	ldw	r19,0(r21)
   2358c:	983fe41e 	bne	r19,zero,23520 <__alt_data_end+0xfffe7000>
   23590:	dfc00b17 	ldw	ra,44(sp)
   23594:	df000a17 	ldw	fp,40(sp)
   23598:	ddc00917 	ldw	r23,36(sp)
   2359c:	dd800817 	ldw	r22,32(sp)
   235a0:	dd400717 	ldw	r21,28(sp)
   235a4:	dd000617 	ldw	r20,24(sp)
   235a8:	dcc00517 	ldw	r19,20(sp)
   235ac:	dc800417 	ldw	r18,16(sp)
   235b0:	dc400317 	ldw	r17,12(sp)
   235b4:	dc000217 	ldw	r16,8(sp)
   235b8:	dec00c04 	addi	sp,sp,48
   235bc:	f800283a 	ret
   235c0:	98800117 	ldw	r2,4(r19)
   235c4:	80c00017 	ldw	r3,0(r16)
   235c8:	10bfffc4 	addi	r2,r2,-1
   235cc:	17001526 	beq	r2,fp,23624 <__call_exitprocs+0x164>
   235d0:	80000015 	stw	zero,0(r16)
   235d4:	183fde26 	beq	r3,zero,23550 <__alt_data_end+0xfffe7030>
   235d8:	00800044 	movi	r2,1
   235dc:	1708983a 	sll	r4,r2,fp
   235e0:	98806217 	ldw	r2,392(r19)
   235e4:	9dc00117 	ldw	r23,4(r19)
   235e8:	2084703a 	and	r2,r4,r2
   235ec:	1000061e 	bne	r2,zero,23608 <__call_exitprocs+0x148>
   235f0:	183ee83a 	callr	r3
   235f4:	98800117 	ldw	r2,4(r19)
   235f8:	15ffc51e 	bne	r2,r23,23510 <__alt_data_end+0xfffe6ff0>
   235fc:	a8800017 	ldw	r2,0(r21)
   23600:	14ffd326 	beq	r2,r19,23550 <__alt_data_end+0xfffe7030>
   23604:	003fc206 	br	23510 <__alt_data_end+0xfffe6ff0>
   23608:	98806317 	ldw	r2,396(r19)
   2360c:	2084703a 	and	r2,r4,r2
   23610:	1000061e 	bne	r2,zero,2362c <__call_exitprocs+0x16c>
   23614:	89400017 	ldw	r5,0(r17)
   23618:	9009883a 	mov	r4,r18
   2361c:	183ee83a 	callr	r3
   23620:	003ff406 	br	235f4 <__alt_data_end+0xfffe70d4>
   23624:	9f000115 	stw	fp,4(r19)
   23628:	003fea06 	br	235d4 <__alt_data_end+0xfffe70b4>
   2362c:	89000017 	ldw	r4,0(r17)
   23630:	183ee83a 	callr	r3
   23634:	003fef06 	br	235f4 <__alt_data_end+0xfffe70d4>
   23638:	98800017 	ldw	r2,0(r19)
   2363c:	982b883a 	mov	r21,r19
   23640:	1027883a 	mov	r19,r2
   23644:	983fb61e 	bne	r19,zero,23520 <__alt_data_end+0xfffe7000>
   23648:	003fd106 	br	23590 <__alt_data_end+0xfffe7070>
   2364c:	0005883a 	mov	r2,zero
   23650:	003ffa06 	br	2363c <__alt_data_end+0xfffe711c>

00023654 <udivmodsi4>:
   23654:	2900182e 	bgeu	r5,r4,236b8 <udivmodsi4+0x64>
   23658:	28001716 	blt	r5,zero,236b8 <udivmodsi4+0x64>
   2365c:	00800804 	movi	r2,32
   23660:	00c00044 	movi	r3,1
   23664:	00000206 	br	23670 <udivmodsi4+0x1c>
   23668:	10001126 	beq	r2,zero,236b0 <udivmodsi4+0x5c>
   2366c:	28000516 	blt	r5,zero,23684 <udivmodsi4+0x30>
   23670:	294b883a 	add	r5,r5,r5
   23674:	10bfffc4 	addi	r2,r2,-1
   23678:	18c7883a 	add	r3,r3,r3
   2367c:	293ffa36 	bltu	r5,r4,23668 <__alt_data_end+0xfffe7148>
   23680:	18000b26 	beq	r3,zero,236b0 <udivmodsi4+0x5c>
   23684:	0005883a 	mov	r2,zero
   23688:	21400236 	bltu	r4,r5,23694 <udivmodsi4+0x40>
   2368c:	2149c83a 	sub	r4,r4,r5
   23690:	10c4b03a 	or	r2,r2,r3
   23694:	1806d07a 	srli	r3,r3,1
   23698:	280ad07a 	srli	r5,r5,1
   2369c:	183ffa1e 	bne	r3,zero,23688 <__alt_data_end+0xfffe7168>
   236a0:	3000011e 	bne	r6,zero,236a8 <udivmodsi4+0x54>
   236a4:	f800283a 	ret
   236a8:	2005883a 	mov	r2,r4
   236ac:	f800283a 	ret
   236b0:	0005883a 	mov	r2,zero
   236b4:	003ffa06 	br	236a0 <__alt_data_end+0xfffe7180>
   236b8:	00c00044 	movi	r3,1
   236bc:	003ff106 	br	23684 <__alt_data_end+0xfffe7164>

000236c0 <__divsi3>:
   236c0:	defffe04 	addi	sp,sp,-8
   236c4:	dfc00115 	stw	ra,4(sp)
   236c8:	dc000015 	stw	r16,0(sp)
   236cc:	20000b16 	blt	r4,zero,236fc <__divsi3+0x3c>
   236d0:	0021883a 	mov	r16,zero
   236d4:	28000c16 	blt	r5,zero,23708 <__divsi3+0x48>
   236d8:	000d883a 	mov	r6,zero
   236dc:	00236540 	call	23654 <udivmodsi4>
   236e0:	0407c83a 	sub	r3,zero,r16
   236e4:	1884f03a 	xor	r2,r3,r2
   236e8:	1405883a 	add	r2,r2,r16
   236ec:	dfc00117 	ldw	ra,4(sp)
   236f0:	dc000017 	ldw	r16,0(sp)
   236f4:	dec00204 	addi	sp,sp,8
   236f8:	f800283a 	ret
   236fc:	0109c83a 	sub	r4,zero,r4
   23700:	04000044 	movi	r16,1
   23704:	283ff40e 	bge	r5,zero,236d8 <__alt_data_end+0xfffe71b8>
   23708:	014bc83a 	sub	r5,zero,r5
   2370c:	8400005c 	xori	r16,r16,1
   23710:	003ff106 	br	236d8 <__alt_data_end+0xfffe71b8>

00023714 <__modsi3>:
   23714:	defffd04 	addi	sp,sp,-12
   23718:	dfc00215 	stw	ra,8(sp)
   2371c:	dc400115 	stw	r17,4(sp)
   23720:	dc000015 	stw	r16,0(sp)
   23724:	20000c16 	blt	r4,zero,23758 <__modsi3+0x44>
   23728:	0023883a 	mov	r17,zero
   2372c:	0021883a 	mov	r16,zero
   23730:	28000d16 	blt	r5,zero,23768 <__modsi3+0x54>
   23734:	01800044 	movi	r6,1
   23738:	00236540 	call	23654 <udivmodsi4>
   2373c:	1404f03a 	xor	r2,r2,r16
   23740:	8885883a 	add	r2,r17,r2
   23744:	dfc00217 	ldw	ra,8(sp)
   23748:	dc400117 	ldw	r17,4(sp)
   2374c:	dc000017 	ldw	r16,0(sp)
   23750:	dec00304 	addi	sp,sp,12
   23754:	f800283a 	ret
   23758:	0109c83a 	sub	r4,zero,r4
   2375c:	04400044 	movi	r17,1
   23760:	043fffc4 	movi	r16,-1
   23764:	283ff30e 	bge	r5,zero,23734 <__alt_data_end+0xfffe7214>
   23768:	014bc83a 	sub	r5,zero,r5
   2376c:	003ff106 	br	23734 <__alt_data_end+0xfffe7214>

00023770 <__udivsi3>:
   23770:	000d883a 	mov	r6,zero
   23774:	00236541 	jmpi	23654 <udivmodsi4>

00023778 <__umodsi3>:
   23778:	01800044 	movi	r6,1
   2377c:	00236541 	jmpi	23654 <udivmodsi4>

00023780 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   23780:	defffd04 	addi	sp,sp,-12
   23784:	df000215 	stw	fp,8(sp)
   23788:	df000204 	addi	fp,sp,8
   2378c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   23790:	0001883a 	nop
   23794:	e0bfff17 	ldw	r2,-4(fp)
   23798:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   2379c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   237a0:	10000226 	beq	r2,zero,237ac <_exit+0x2c>
    ALT_SIM_FAIL();
   237a4:	002af070 	cmpltui	zero,zero,43969
   237a8:	00000106 	br	237b0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   237ac:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   237b0:	003fff06 	br	237b0 <__alt_data_end+0xfffe7290>
