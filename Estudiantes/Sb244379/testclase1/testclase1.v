
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module testclase1(

	//////////// CLOCK //////////
	input 		          		FPGA_CLK1_50,
	input 		          		FPGA_CLK2_50,
	input 		          		FPGA_CLK3_50,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// SW //////////
	input 		     [3:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire clk_div_freq;
reg clk_25mhz=1'b0;
reg clk_12mhz=1'b0;
wire [31:0]salida_rom;
//=======================================================
//  Structural coding
//=======================================================
always@(posedge FPGA_CLK1_50)
begin
	clk_25mhz<=~clk_25mhz;
end


always@(posedge clk_25mhz)
begin
	clk_12mhz<=~clk_12mhz;
end

//Intantiation of multiplexor 4 to 1
ejem_mux multiplexor
(
	.sel() ,	// input [1:0] sel_sig
	.out() 	// output [7:0] out_sig
);
//Instation of contador by 8 bits
contador contador1
(
	.clk(),//FPGA_CLK1_50) ,	// input  clk_sig
	.reset(),//KEY[0]) ,	// input  reset_sig
	.conteo()//LED[7:0]) 	// output [7:0] conteo_sig
);
//Instation of synchronizer clock 
sincro sincro_inst
(
	.async(),//KEY[0]) ,	// input  async_sig
	.clock(),//FPGA_CLK1_50) ,	// input  clock_sig
	.sync()//LED[0]) 	// output  sync_sig
);

//Intantiation divisor of frequency one
romcita romcita_inst
(
	.sel(SW[3:0]) ,	// input [3:0] sel_sig
	.data(salida_rom[31:0]) 	// output [31:0] data_sig
);
//Intation of divisor of frequency two
div_freq divisor1hz
(
	.clk(FPGA_CLK1_50) ,	// input  clk_sig
	.in(32'd24999999) ,	// input [31:0] in_sig
	.div(clk_div_freq) 	// output  div_sig
);
endmodule
