
rtos_4.elf:     file format elf32-littlenios2
rtos_4.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0004024c

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0001278c memsz 0x0001278c flags r-x
    LOAD off    0x000137ac vaddr 0x000527ac paddr 0x000542a4 align 2**12
         filesz 0x00001af8 memsz 0x00001af8 flags rw-
    LOAD off    0x00015d9c vaddr 0x00055d9c paddr 0x00055d9c align 2**12
         filesz 0x00000000 memsz 0x00009eb8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000022c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012210  0004024c  0004024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000350  0005245c  0005245c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af8  000527ac  000542a4  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00009eb8  00055d9c  00055d9c  00015d9c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  0005fc54  0005fc54  000152a4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000152a4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d80  00000000  00000000  000152c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025df3  00000000  00000000  00016048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009884  00000000  00000000  0003be3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bc12  00000000  00000000  000456bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002cc8  00000000  00000000  000512d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004093  00000000  00000000  00053f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017099  00000000  00000000  0005802f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006f0c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001348  00000000  00000000  0006f0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00074692  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00074695  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007469f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000746a0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000746a1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000746a5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000746a9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000746ad  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000746b6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000746bf  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000011  00000000  00000000  000746c8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000028  00000000  00000000  000746d9  2**0
                  CONTENTS, READONLY
 29 .jdi          00004d23  00000000  00000000  00074701  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005b74d  00000000  00000000  00079424  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
0004024c l    d  .text	00000000 .text
0005245c l    d  .rodata	00000000 .rodata
000527ac l    d  .rwdata	00000000 .rwdata
00055d9c l    d  .bss	00000000 .bss
0005fc54 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../rtos_4_bsp//obj/HAL/src/crt0.o
00040294 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/FreeRTOS/portable/GCC/NiosII/port_am.o
00040020 l       .exceptions	00000000 save_context
0004009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
000400ac l       .exceptions	00000000 hw_irq_test
00040150 l       .exceptions	00000000 soft_exceptions
000400c0 l       .exceptions	00000000 hw_irq_handler
000400d4 l       .exceptions	00000000 restore_context
0004016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
00040678 l     F .text	000000a0 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 heap_2.c
00055e24 l     O .bss	00009c40 xHeap
00054258 l     O .rwdata	00000002 heapSTRUCT_SIZE
00055d9c l     O .bss	00000008 xStart
00055da4 l     O .bss	00000008 xEnd
0005425c l     O .rwdata	00000004 xFreeBytesRemaining
00055dac l     O .bss	00000004 xHeapHasBeenInitialised.2265
00000000 l    df *ABS*	00000000 queue.c
00041640 l     F .text	00000158 prvCopyDataToQueue
000419a0 l     F .text	00000050 prvIsQueueFull
00041830 l     F .text	000000f0 prvUnlockQueue
00041798 l     F .text	00000098 prvCopyDataFromQueue
00041920 l     F .text	00000048 prvIsQueueEmpty
00000000 l    df *ABS*	00000000 tasks.c
0005fa64 l     O .bss	00000064 pxReadyTasksLists
0005fac8 l     O .bss	00000014 xDelayedTaskList1
0005fadc l     O .bss	00000014 xDelayedTaskList2
00055db4 l     O .bss	00000004 pxDelayedTaskList
00055db8 l     O .bss	00000004 pxOverflowDelayedTaskList
0005faf0 l     O .bss	00000014 xPendingReadyList
0005fb04 l     O .bss	00000014 xTasksWaitingTermination
00055dbc l     O .bss	00000004 uxTasksDeleted
0005fb18 l     O .bss	00000014 xSuspendedTaskList
00055dc0 l     O .bss	00000004 uxCurrentNumberOfTasks
00055dc4 l     O .bss	00000004 xTickCount
00055dc8 l     O .bss	00000004 uxTopUsedPriority
00055dcc l     O .bss	00000004 uxTopReadyPriority
00055dd0 l     O .bss	00000004 xSchedulerRunning
00055dd4 l     O .bss	00000004 uxSchedulerSuspended
00055dd8 l     O .bss	00000004 uxMissedTicks
00055ddc l     O .bss	00000004 xMissedYield
00055de0 l     O .bss	00000004 xNumOfOverflows
00055de4 l     O .bss	00000004 uxTaskNumber
00054260 l     O .rwdata	00000004 xNextTaskUnblockTime
00042dc8 l     F .text	000000b4 prvAllocateTCBAndStack
00042b10 l     F .text	000000dc prvInitialiseTCBVariables
00042bec l     F .text	000000b4 prvInitialiseTaskLists
00042d40 l     F .text	00000088 prvAddCurrentTaskToDelayedList
00042af4 l     F .text	0000001c prvIdleTask
00052461 l     O .rodata	00000014 ucExpectedStackBytes.3313
00042ca0 l     F .text	000000a0 prvCheckTasksWaitingTermination
00042f48 l     F .text	00000040 prvDeleteTCB
00042e7c l     F .text	0000006c usTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 freeRTOScheck.c
00043250 l     F .text	000000b4 prvCheckTask
00043304 l     F .text	00000174 prvFirstRegTestTask
0004338c l       .text	00000000 RegTest1
00043460 l       .text	00000000 RegTest1Error
00043478 l     F .text	00000170 prvSecondRegTestTask
00043500 l       .text	00000000 RegTest2
000435d0 l       .text	00000000 RegTest2Error
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
000524fa l     O .rodata	00000010 zeroes.4181
0005250a l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00045e08 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00047988 l     F .text	00000008 __fp_lock
00047990 l     F .text	00000008 __fp_unlock
000479a4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000527ac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00052bf0 l     O .rwdata	00000020 lc_ctype_charset
00052bd0 l     O .rwdata	00000020 lc_message_charset
00052c10 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mprec.c
0005253c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004a208 l     F .text	000000fc __sprint_r.part.0
00052670 l     O .rodata	00000010 blanks.4125
00052660 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0004d6c4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0004fdf0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004ff10 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004ff3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0005021c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00050310 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000503f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000505d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00054298 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0005082c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00050974 l     F .text	00000038 alt_dev_reg
000531f8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00050c68 l     F .text	00000204 altera_avalon_jtag_uart_irq
00050e6c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0005148c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0005170c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000518e8 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00051a20 l     F .text	00000050 alt_get_errno
00051a70 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00043bb4 g     F .text	00000018 putchar
00049be8 g     F .text	00000074 _mprec_log10
00049cd4 g     F .text	0000008c __any_on
0004c16c g     F .text	00000054 _isatty_r
00052548 g     O .rodata	00000028 __mprec_tinytens
00050518 g     F .text	00000078 alt_main
0005fb54 g     O .bss	00000100 alt_irq
0004c1c0 g     F .text	0000005c _lseek_r
000400c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
00040cb4 g     F .text	00000020 xPortGetFreeHeapSize
000542a4 g       *ABS*	00000000 __flash_rwdata_start
0004e958 g     F .text	00000084 .hidden __eqdf2
00055de8 g     O .bss	00000004 ulRegTest1Counter
0005fc54 g       *ABS*	00000000 __alt_heap_start
00041e28 g     F .text	00000058 uxTaskPriorityGet
00043b70 g     F .text	0000003c printf
0004c974 g     F .text	0000009c _wcrtomb_r
0004a068 g     F .text	0000005c __sseek
00047cd8 g     F .text	00000010 __sinit
0004b69c g     F .text	00000154 __swbuf_r
000482ac g     F .text	0000007c _setlocale_r
00047b44 g     F .text	00000064 __sfmoreglue
000505b0 g     F .text	00000020 __malloc_unlock
0004c21c g     F .text	0000015c memmove
00043178 g     F .text	0000004c vTaskEnterCritical
00047cc0 g     F .text	00000018 _cleanup
000411f4 g     F .text	000000c4 xQueueGenericSendFromISR
00048dd4 g     F .text	000000a8 _Balloc
0004e9dc g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040ef8 g     F .text	00000088 xQueueGiveMutexRecursive
00055db0 g     O .bss	00000004 pxCurrentTCB
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004bc70 g     F .text	00000058 _fstat_r
00055e08 g     O .bss	00000004 errno
00049fe4 g     F .text	00000008 __seofread
00055e14 g     O .bss	00000004 alt_argv
0005c258 g       *ABS*	00000000 _gp
00041e80 g     F .text	00000184 vTaskPrioritySet
00053078 g     O .rwdata	00000180 alt_fd_list
00040624 g     F .text	00000038 xPortStartScheduler
00043bac g     F .text	00000008 _putchar_r
00042378 g     F .text	00000044 vTaskEndScheduler
00051e50 g     F .text	00000090 alt_find_dev
000438e8 g     F .text	00000138 memcpy
00042848 g     F .text	00000090 vTaskPlaceOnEventList
00041a30 g     F .text	000001d8 xTaskGenericCreate
000420d8 g     F .text	0000006c xTaskIsTaskSuspended
00047998 g     F .text	0000000c _cleanup_r
0004fc18 g     F .text	000000d0 .hidden __floatsidf
000519a8 g     F .text	00000078 alt_io_redirect
00040cf0 g     F .text	00000144 xQueueCreate
0004eabc g     F .text	000000e0 .hidden __ltdf2
0005245c g       *ABS*	00000000 __DTOR_END__
00040bec g     F .text	000000c8 vPortFree
00049ec8 g     F .text	00000074 __fpclassifyd
00049b44 g     F .text	000000a4 __ratio
0004b678 g     F .text	00000024 __vfiprintf_internal
00051068 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00043b44 g     F .text	0000002c _printf_r
0004d7e0 g     F .text	00000008 .hidden __udivsi3
0005026c g     F .text	000000a4 isatty
00052598 g     O .rodata	000000c8 __mprec_tens
00042ee8 g     F .text	00000060 uxTaskGetStackHighWaterMark
00048328 g     F .text	0000000c __locale_charset
00040324 g     F .text	00000098 vListInsertEnd
000520a8 g     F .text	0000008c alt_icache_flush
00055e04 g     O .bss	00000004 __malloc_top_pad
00040490 g     F .text	00000090 vListRemove
000435e8 g     F .text	00000050 Tarea_LED0
0005426c g     O .rwdata	00000004 __mb_cur_max
00048358 g     F .text	0000000c _localeconv_r
0004bcc8 g     F .text	000004a4 __sfvwrite_r
000491d4 g     F .text	0000003c __i2b
00049f3c g     F .text	00000054 _sbrk_r
00042210 g     F .text	000000e0 xTaskResumeFromISR
0004c378 g     F .text	0000005c _read_r
000402fc g     F .text	00000028 vListInitialiseItem
0005428c g     O .rwdata	00000004 alt_max_fd
00040718 g     F .text	00000040 vPortSysTickHandler
0004b980 g     F .text	00000100 _fclose_r
00047958 g     F .text	00000030 fflush
00055e00 g     O .bss	00000004 __malloc_max_sbrked_mem
00040758 g     F .text	000001a0 alt_irq_register
0004d7f0 g     F .text	0000089c .hidden __adddf3
000498ec g     F .text	0000011c __b2d
0004d134 g     F .text	00000590 .hidden __umoddi3
00050444 g     F .text	000000d4 lseek
00054264 g     O .rwdata	00000004 _global_impure_ptr
0004c3d4 g     F .text	000005a0 _realloc_r
0005fc54 g       *ABS*	00000000 __bss_end
000408f8 g     F .text	000000e0 alt_iic_isr_register
00051d2c g     F .text	00000104 alt_tick
0004cb74 g     F .text	000005c0 .hidden __udivdi3
0004ba94 g     F .text	00000184 _fputwc_r
00052570 g     O .rodata	00000028 __mprec_bigtens
00048fb8 g     F .text	00000104 __s2b
0004fce8 g     F .text	000000a4 .hidden __floatunsidf
00049694 g     F .text	00000060 __mcmp
000409d8 g     F .text	00000214 pvPortMalloc
00047cf8 g     F .text	00000018 __fp_lock_all
000501d0 g     F .text	0000004c alt_ic_irq_enabled
00041600 g     F .text	00000040 vQueueDelete
0004065c g     F .text	0000001c vPortEndScheduler
00040298 g     F .text	00000064 vListInitialise
00051c94 g     F .text	00000098 alt_alarm_stop
00055e0c g     O .bss	00000004 alt_irq_active
0004017c g     F .exceptions	000000d0 alt_irq_handler
00053050 g     O .rwdata	00000028 alt_dev_null
00042520 g     F .text	00000038 xTaskGetTickCount
00041074 g     F .text	00000180 xQueueGenericSend
000516c8 g     F .text	00000044 alt_dcache_flush_all
000490bc g     F .text	00000068 __hi0bits
0004fb90 g     F .text	00000088 .hidden __fixdfsi
000542a4 g       *ABS*	00000000 __ram_rwdata_end
00054284 g     O .rwdata	00000008 alt_dev_list
0005087c g     F .text	000000f8 write
00049d60 g     F .text	000000a0 _putc_r
000428d8 g     F .text	000000ec xTaskRemoveFromEventList
000527ac g       *ABS*	00000000 __ram_rodata_end
0004ff8c g     F .text	000000b0 fstat
0004eabc g     F .text	000000e0 .hidden __ledf2
0004940c g     F .text	00000140 __pow5mult
0004a31c g     F .text	0000135c ___vfiprintf_internal_r
00055df8 g     O .bss	00000004 __nlocale_changed
0004d7e8 g     F .text	00000008 .hidden __umodsi3
00055dec g     O .bss	00000004 ulRegTest2Counter
0005fc54 g       *ABS*	00000000 end
00041c08 g     F .text	000000c8 vTaskDelete
00050ba4 g     F .text	000000c4 altera_avalon_jtag_uart_init
0005245c g       *ABS*	00000000 __CTOR_LIST__
0007a980 g       *ABS*	00000000 __alt_stack_pointer
00051500 g     F .text	00000088 alt_avalon_timer_sc_init
0004fd8c g     F .text	00000064 .hidden __clzsi2
00051274 g     F .text	00000218 altera_avalon_jtag_uart_write
00047ce8 g     F .text	00000004 __sfp_lock_acquire
00048cec g     F .text	000000e8 memchr
00043cb8 g     F .text	00001ffc ___vfprintf_internal_r
000429fc g     F .text	000000d4 xTaskCheckForTimeOut
00047e4c g     F .text	000002f0 _free_r
00048334 g     F .text	00000010 __locale_mb_cur_max
00052294 g     F .text	00000194 __call_exitprocs
00055df4 g     O .bss	00000004 __mlocale_changed
00054270 g     O .rwdata	00000004 __malloc_sbrk_base
0004024c g     F .text	0000004c _start
00055e1c g     O .bss	00000004 _alt_tick_rate
000423bc g     F .text	00000028 vTaskSuspendAll
00042558 g     F .text	0000002c xTaskGetTickCountFromISR
0004954c g     F .text	00000148 __lshift
00055e20 g     O .bss	00000004 _alt_nticks
00050620 g     F .text	000000fc read
000509e0 g     F .text	00000060 alt_sys_init
00043638 g     F .text	00000050 Tarea_LED1
00052180 g     F .text	00000114 __register_exitproc
000430ac g     F .text	000000cc vTaskPriorityDisinherit
00049210 g     F .text	000001fc __multiply
00050f14 g     F .text	00000068 altera_avalon_jtag_uart_close
00042fb0 g     F .text	000000fc vTaskPriorityInherit
000527ac g       *ABS*	00000000 __ram_rwdata_start
0005245c g       *ABS*	00000000 __ram_rodata_start
00043bcc g     F .text	000000ec strncpy
0005fb2c g     O .bss	00000028 __malloc_current_mallinfo
00042144 g     F .text	000000cc vTaskResume
00049a08 g     F .text	0000013c __d2b
0004271c g     F .text	0000012c vTaskSwitchContext
00050a40 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00051ff4 g     F .text	000000b4 alt_get_fd
0004b868 g     F .text	00000054 _close_r
0004386c g     F .text	0000007c memcmp
00050b00 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0005fc54 g       *ABS*	00000000 __alt_stack_base
00050b50 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00043710 g     F .text	00000058 Tarea_LED7
00045cd8 g     F .text	00000130 __swsetup_r
00043220 g     F .text	00000014 vApplicationStackOverflowHook
00042004 g     F .text	000000d4 vTaskSuspend
0004e08c g     F .text	000008cc .hidden __divdf3
00047ba8 g     F .text	00000118 __sfp
00049c5c g     F .text	00000078 __copybits
00042584 g     F .text	00000020 uxTaskGetNumberOfTasks
00000000         *UND*	00000000 save_context
00052c48 g     O .rwdata	00000408 __malloc_av_
00047cf4 g     F .text	00000004 __sinit_lock_release
000425a4 g     F .text	00000178 vTaskIncrementTick
0004eb9c g     F .text	00000724 .hidden __muldf3
00049f90 g     F .text	00000054 __sread
00051ee0 g     F .text	00000114 alt_find_file
0005175c g     F .text	000000a4 alt_dev_llist_insert
00050590 g     F .text	00000020 __malloc_lock
0005077c g     F .text	000000b0 sbrk
00040f80 g     F .text	000000a0 xQueueTakeMutexRecursive
00047730 g     F .text	00000228 _fflush_r
0004b8bc g     F .text	000000c4 _calloc_r
00055d9c g       *ABS*	00000000 __bss_start
00043a20 g     F .text	00000124 memset
00043790 g     F .text	000000dc main
00055e18 g     O .bss	00000004 alt_envp
00055dfc g     O .bss	00000004 __malloc_max_total_mem
00050aa0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004b7f0 g     F .text	0000001c __swbuf
000403bc g     F .text	000000d4 vListInsert
0004a0c4 g     F .text	00000008 __sclose
0007a980 g       *ABS*	00000000 __alt_heap_limit
0004ba80 g     F .text	00000014 fclose
00046008 g     F .text	00001728 _dtoa_r
00048544 g     F .text	000007a8 _malloc_r
0004cae8 g     F .text	00000030 __ascii_wctomb
00054290 g     O .rwdata	00000004 alt_errno
00041cd0 g     F .text	000000e4 vTaskDelayUntil
0004813c g     F .text	000000b8 _fwalk
00043768 g     F .text	00000028 SetupHardware
000414c8 g     F .text	000000c8 xQueueReceiveFromISR
00042f88 g     F .text	00000028 xTaskGetCurrentTaskHandle
00049e00 g     F .text	000000c8 putc
0004d730 g     F .text	00000054 .hidden __divsi3
00047d28 g     F .text	00000124 _malloc_trim_r
0005245c g       *ABS*	00000000 __CTOR_END__
0004a0cc g     F .text	000000a4 strcmp
00041020 g     F .text	00000054 xQueueCreateCountingSemaphore
0005245c g       *ABS*	00000000 __flash_rodata_start
0005245c g       *ABS*	00000000 __DTOR_LIST__
0004e958 g     F .text	00000084 .hidden __nedf2
000509ac g     F .text	00000034 alt_irq_init
0005071c g     F .text	00000060 alt_release_fd
000423e4 g     F .text	0000013c xTaskResumeAll
00052680 g     O .rodata	00000100 .hidden __clz_tab
000422f0 g     F .text	00000088 vTaskStartScheduler
00055df0 g     O .bss	00000004 _PathLocale
00052134 g     F .text	00000014 atexit
0004b80c g     F .text	0000005c _write_r
00040520 g     F .text	00000024 prvReadGp
00048364 g     F .text	0000001c setlocale
000419f0 g     F .text	00000040 xQueueIsQueueFullFromISR
00054268 g     O .rwdata	00000004 _impure_ptr
00055e10 g     O .bss	00000004 alt_argc
0005185c g     F .text	0000005c _do_dtors
00048350 g     F .text	00000008 __locale_cjk_lang
0004988c g     F .text	00000060 __ulp
00047d10 g     F .text	00000018 __fp_unlock_all
00042ad0 g     F .text	00000024 vTaskMissedYield
0005427c g     O .rwdata	00000008 alt_fs_list
00041590 g     F .text	00000040 uxQueueMessagesWaiting
000412b8 g     F .text	00000210 xQueueGenericReceive
00040020 g       *ABS*	00000000 __ram_exceptions_start
00048380 g     F .text	0000000c localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0005003c g     F .text	00000050 alt_ic_isr_register
00043234 g     F .text	0000001c _general_exception_handler
000542a4 g       *ABS*	00000000 _edata
0005fc54 g       *ABS*	00000000 _end
0004024c g       *ABS*	00000000 __ram_exceptions_end
00050f7c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00040cd4 g     F .text	0000001c vPortInitialiseBlocks
0005012c g     F .text	000000a4 alt_ic_irq_disable
00049fec g     F .text	0000007c __swrite
00054274 g     O .rwdata	00000004 __malloc_trim_threshold
00051e30 g     F .text	00000020 altera_nios2_qsys_irq_init
00048344 g     F .text	0000000c __locale_msgcharset
00052148 g     F .text	00000038 exit
000481f4 g     F .text	000000b8 _fwalk_reent
000496f4 g     F .text	00000198 __mdiff
0004d784 g     F .text	0000005c .hidden __modsi3
00041db4 g     F .text	00000074 vTaskDelay
0007a980 g       *ABS*	00000000 __alt_data_end
00047cec g     F .text	00000004 __sfp_lock_release
00052428 g     F .text	00000034 _exit
00051588 g     F .text	00000140 alt_alarm_start
0004838c g     F .text	000001b8 __smakebuf_r
000431c4 g     F .text	0000005c vTaskExitCritical
0004a170 g     F .text	00000098 strlen
00040544 g     F .text	000000e0 pxPortInitialiseStack
00051b3c g     F .text	00000158 open
0004e9dc g     F .text	000000e0 .hidden __gedf2
00054278 g     O .rwdata	00000004 __wctomb
00043688 g     F .text	00000088 Tarea_LED2_6
0004a304 g     F .text	00000018 __sprint_r
000518b8 g     F .text	00000030 alt_icache_flush_all
000429c4 g     F .text	00000038 vTaskSetTimeOutState
00054294 g     O .rwdata	00000004 alt_priority_mask
0005008c g     F .text	000000a0 alt_ic_irq_enable
00045cb4 g     F .text	00000024 __vfprintf_internal
0004cb18 g     F .text	0000005c _wctomb_r
000415d0 g     F .text	00000030 uxQueueMessagesWaitingFromISR
00041968 g     F .text	00000038 xQueueIsQueueEmptyFromISR
0004f2c0 g     F .text	000008d0 .hidden __subdf3
00049124 g     F .text	000000b0 __lo0bits
0005429c g     O .rwdata	00000008 alt_alarm_list
00051800 g     F .text	0000005c _do_ctors
0004ca10 g     F .text	000000d8 wcrtomb
00040e34 g     F .text	000000c4 xQueueCreateMutex
0004fe40 g     F .text	000000d0 close
00050374 g     F .text	00000080 alt_load
0004bc18 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
00047cf0 g     F .text	00000004 __sinit_lock_acquire
00048ea4 g     F .text	00000114 __multadd
00048e7c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffc5684>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409314 	ori	at,at,588
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>

Disassembly of section .exceptions:

00040020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
   40020:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
   40024:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
   40028:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
   4002c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
   40030:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
   40034:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
   40038:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
   4003c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
   40040:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
   40044:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
   40048:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
   4004c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
   40068:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
   4006c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
   40070:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
   40074:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
   40078:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
   4007c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
   40080:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
   40084:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
   40088:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
   4008c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
   40090:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
   40094:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
   40098:	df001c15 	stw	fp,112(sp)

0004009c <save_sp_to_pxCurrentTCB>:
   4009c:	06000174 	movhi	et,5

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
   400a0:	c6176c04 	addi	et,et,23984
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
   400a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
   400a8:	c6c00015 	stw	sp,0(et)

000400ac <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
   400ac:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
   400b0:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
   400b4:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
   400b8:	10002526 	beq	r2,zero,40150 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
   400bc:	20002426 	beq	r4,zero,40150 <soft_exceptions>

000400c0 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
   400c0:	004017c0 	call	4017c <alt_irq_handler>

000400c4 <restore_sp_from_pxCurrentTCB>:
   400c4:	06000174 	movhi	et,5

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
   400c8:	c6176c04 	addi	et,et,23984
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
   400cc:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
   400d0:	c6c00017 	ldw	sp,0(et)

000400d4 <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
   400d4:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
   400d8:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
   400dc:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
   400e0:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
   400e4:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
   400e8:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
   400ec:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
   400f0:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
   400f4:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
   400f8:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
   400fc:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
   40100:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
   40104:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
   40108:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
   4010c:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
   40110:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
   40114:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
   40118:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
   4011c:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
   40120:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
   40124:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
   40128:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
   4012c:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
   40130:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
   40134:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
   40138:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
   4013c:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
   40140:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
   40144:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
   40148:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
   4014c:	ef80083a 	eret

00040150 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
   40150:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
   40154:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
   40158:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
   4015c:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
   40160:	c0000226 	beq	et,zero,4016c <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
   40164:	003da03a 	break	0
  	br		restore_context			# its something else
   40168:	003fda06 	br	400d4 <__alt_data_end+0xfffc5754>

0004016c <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
   4016c:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
   40170:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
   40174:	004271c0 	call	4271c <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
   40178:	003fd206 	br	400c4 <__alt_data_end+0xfffc5744>

0004017c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   4017c:	defff904 	addi	sp,sp,-28
   40180:	dfc00615 	stw	ra,24(sp)
   40184:	df000515 	stw	fp,20(sp)
   40188:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4018c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40190:	0005313a 	rdctl	r2,ipending
   40194:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40198:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4019c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   401a0:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   401a4:	00800044 	movi	r2,1
   401a8:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   401ac:	e0fffb17 	ldw	r3,-20(fp)
   401b0:	e0bffc17 	ldw	r2,-16(fp)
   401b4:	1884703a 	and	r2,r3,r2
   401b8:	10001426 	beq	r2,zero,4020c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   401bc:	008001b4 	movhi	r2,6
   401c0:	10bed504 	addi	r2,r2,-1196
   401c4:	e0fffd17 	ldw	r3,-12(fp)
   401c8:	180690fa 	slli	r3,r3,3
   401cc:	10c5883a 	add	r2,r2,r3
   401d0:	10c00017 	ldw	r3,0(r2)
   401d4:	008001b4 	movhi	r2,6
   401d8:	10bed504 	addi	r2,r2,-1196
   401dc:	e13ffd17 	ldw	r4,-12(fp)
   401e0:	200890fa 	slli	r4,r4,3
   401e4:	1105883a 	add	r2,r2,r4
   401e8:	10800104 	addi	r2,r2,4
   401ec:	10800017 	ldw	r2,0(r2)
   401f0:	1009883a 	mov	r4,r2
   401f4:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   401f8:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   401fc:	0005313a 	rdctl	r2,ipending
   40200:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40204:	e0bfff17 	ldw	r2,-4(fp)
   40208:	00000706 	br	40228 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4020c:	e0bffc17 	ldw	r2,-16(fp)
   40210:	1085883a 	add	r2,r2,r2
   40214:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40218:	e0bffd17 	ldw	r2,-12(fp)
   4021c:	10800044 	addi	r2,r2,1
   40220:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   40224:	003fe106 	br	401ac <__alt_data_end+0xfffc582c>

    active = alt_irq_pending ();
   40228:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4022c:	e0bffb17 	ldw	r2,-20(fp)
   40230:	103fdb1e 	bne	r2,zero,401a0 <__alt_data_end+0xfffc5820>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   40234:	0001883a 	nop
}
   40238:	e037883a 	mov	sp,fp
   4023c:	dfc00117 	ldw	ra,4(sp)
   40240:	df000017 	ldw	fp,0(sp)
   40244:	dec00204 	addi	sp,sp,8
   40248:	f800283a 	ret

Disassembly of section .text:

0004024c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   4024c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40250:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   40254:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40258:	00bffd16 	blt	zero,r2,40250 <__alt_data_end+0xfffc58d0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   4025c:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40260:	deea6014 	ori	sp,sp,43392
    movhi gp, %hi(_gp)
   40264:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40268:	d6b09614 	ori	gp,gp,49752
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   4026c:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40270:	10976714 	ori	r2,r2,23964

    movhi r3, %hi(__bss_end)
   40274:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   40278:	18ff1514 	ori	r3,r3,64596

    beq r2, r3, 1f
   4027c:	10c00326 	beq	r2,r3,4028c <_start+0x40>

0:
    stw zero, (r2)
   40280:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40284:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40288:	10fffd36 	bltu	r2,r3,40280 <__alt_data_end+0xfffc5900>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   4028c:	00503740 	call	50374 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40290:	00505180 	call	50518 <alt_main>

00040294 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40294:	003fff06 	br	40294 <__alt_data_end+0xfffc5914>

00040298 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
   40298:	defffe04 	addi	sp,sp,-8
   4029c:	df000115 	stw	fp,4(sp)
   402a0:	df000104 	addi	fp,sp,4
   402a4:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   402a8:	e0bfff17 	ldw	r2,-4(fp)
   402ac:	10c00204 	addi	r3,r2,8
   402b0:	e0bfff17 	ldw	r2,-4(fp)
   402b4:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   402b8:	e0bfff17 	ldw	r2,-4(fp)
   402bc:	00ffffc4 	movi	r3,-1
   402c0:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   402c4:	e0bfff17 	ldw	r2,-4(fp)
   402c8:	10c00204 	addi	r3,r2,8
   402cc:	e0bfff17 	ldw	r2,-4(fp)
   402d0:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   402d4:	e0bfff17 	ldw	r2,-4(fp)
   402d8:	10c00204 	addi	r3,r2,8
   402dc:	e0bfff17 	ldw	r2,-4(fp)
   402e0:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   402e4:	e0bfff17 	ldw	r2,-4(fp)
   402e8:	10000015 	stw	zero,0(r2)
}
   402ec:	e037883a 	mov	sp,fp
   402f0:	df000017 	ldw	fp,0(sp)
   402f4:	dec00104 	addi	sp,sp,4
   402f8:	f800283a 	ret

000402fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
   402fc:	defffe04 	addi	sp,sp,-8
   40300:	df000115 	stw	fp,4(sp)
   40304:	df000104 	addi	fp,sp,4
   40308:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   4030c:	e0bfff17 	ldw	r2,-4(fp)
   40310:	10000415 	stw	zero,16(r2)
}
   40314:	e037883a 	mov	sp,fp
   40318:	df000017 	ldw	fp,0(sp)
   4031c:	dec00104 	addi	sp,sp,4
   40320:	f800283a 	ret

00040324 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
   40324:	defffc04 	addi	sp,sp,-16
   40328:	df000315 	stw	fp,12(sp)
   4032c:	df000304 	addi	fp,sp,12
   40330:	e13ffe15 	stw	r4,-8(fp)
   40334:	e17fff15 	stw	r5,-4(fp)

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   40338:	e0bffe17 	ldw	r2,-8(fp)
   4033c:	10800117 	ldw	r2,4(r2)
   40340:	e0bffd15 	stw	r2,-12(fp)

	pxNewListItem->pxNext = pxIndex->pxNext;
   40344:	e0bffd17 	ldw	r2,-12(fp)
   40348:	10c00117 	ldw	r3,4(r2)
   4034c:	e0bfff17 	ldw	r2,-4(fp)
   40350:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxList->pxIndex;
   40354:	e0bffe17 	ldw	r2,-8(fp)
   40358:	10c00117 	ldw	r3,4(r2)
   4035c:	e0bfff17 	ldw	r2,-4(fp)
   40360:	10c00215 	stw	r3,8(r2)
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   40364:	e0bffd17 	ldw	r2,-12(fp)
   40368:	10800117 	ldw	r2,4(r2)
   4036c:	e0ffff17 	ldw	r3,-4(fp)
   40370:	10c00215 	stw	r3,8(r2)
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   40374:	e0bffd17 	ldw	r2,-12(fp)
   40378:	e0ffff17 	ldw	r3,-4(fp)
   4037c:	10c00115 	stw	r3,4(r2)
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   40380:	e0bffe17 	ldw	r2,-8(fp)
   40384:	e0ffff17 	ldw	r3,-4(fp)
   40388:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   4038c:	e0bfff17 	ldw	r2,-4(fp)
   40390:	e0fffe17 	ldw	r3,-8(fp)
   40394:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
   40398:	e0bffe17 	ldw	r2,-8(fp)
   4039c:	10800017 	ldw	r2,0(r2)
   403a0:	10c00044 	addi	r3,r2,1
   403a4:	e0bffe17 	ldw	r2,-8(fp)
   403a8:	10c00015 	stw	r3,0(r2)
}
   403ac:	e037883a 	mov	sp,fp
   403b0:	df000017 	ldw	fp,0(sp)
   403b4:	dec00104 	addi	sp,sp,4
   403b8:	f800283a 	ret

000403bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   403bc:	defffb04 	addi	sp,sp,-20
   403c0:	df000415 	stw	fp,16(sp)
   403c4:	df000404 	addi	fp,sp,16
   403c8:	e13ffe15 	stw	r4,-8(fp)
   403cc:	e17fff15 	stw	r5,-4(fp)
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   403d0:	e0bfff17 	ldw	r2,-4(fp)
   403d4:	10800017 	ldw	r2,0(r2)
   403d8:	e0bffd15 	stw	r2,-12(fp)
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   403dc:	e0bffd17 	ldw	r2,-12(fp)
   403e0:	10bfffd8 	cmpnei	r2,r2,-1
   403e4:	1000041e 	bne	r2,zero,403f8 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   403e8:	e0bffe17 	ldw	r2,-8(fp)
   403ec:	10800417 	ldw	r2,16(r2)
   403f0:	e0bffc15 	stw	r2,-16(fp)
   403f4:	00000c06 	br	40428 <vListInsert+0x6c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   403f8:	e0bffe17 	ldw	r2,-8(fp)
   403fc:	10800204 	addi	r2,r2,8
   40400:	e0bffc15 	stw	r2,-16(fp)
   40404:	00000306 	br	40414 <vListInsert+0x58>
   40408:	e0bffc17 	ldw	r2,-16(fp)
   4040c:	10800117 	ldw	r2,4(r2)
   40410:	e0bffc15 	stw	r2,-16(fp)
   40414:	e0bffc17 	ldw	r2,-16(fp)
   40418:	10800117 	ldw	r2,4(r2)
   4041c:	10800017 	ldw	r2,0(r2)
   40420:	e0fffd17 	ldw	r3,-12(fp)
   40424:	18bff82e 	bgeu	r3,r2,40408 <__alt_data_end+0xfffc5a88>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   40428:	e0bffc17 	ldw	r2,-16(fp)
   4042c:	10c00117 	ldw	r3,4(r2)
   40430:	e0bfff17 	ldw	r2,-4(fp)
   40434:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   40438:	e0bfff17 	ldw	r2,-4(fp)
   4043c:	10800117 	ldw	r2,4(r2)
   40440:	e0ffff17 	ldw	r3,-4(fp)
   40444:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
   40448:	e0bfff17 	ldw	r2,-4(fp)
   4044c:	e0fffc17 	ldw	r3,-16(fp)
   40450:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   40454:	e0bffc17 	ldw	r2,-16(fp)
   40458:	e0ffff17 	ldw	r3,-4(fp)
   4045c:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   40460:	e0bfff17 	ldw	r2,-4(fp)
   40464:	e0fffe17 	ldw	r3,-8(fp)
   40468:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
   4046c:	e0bffe17 	ldw	r2,-8(fp)
   40470:	10800017 	ldw	r2,0(r2)
   40474:	10c00044 	addi	r3,r2,1
   40478:	e0bffe17 	ldw	r2,-8(fp)
   4047c:	10c00015 	stw	r3,0(r2)
}
   40480:	e037883a 	mov	sp,fp
   40484:	df000017 	ldw	fp,0(sp)
   40488:	dec00104 	addi	sp,sp,4
   4048c:	f800283a 	ret

00040490 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
   40490:	defffd04 	addi	sp,sp,-12
   40494:	df000215 	stw	fp,8(sp)
   40498:	df000204 	addi	fp,sp,8
   4049c:	e13fff15 	stw	r4,-4(fp)
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   404a0:	e0bfff17 	ldw	r2,-4(fp)
   404a4:	10800117 	ldw	r2,4(r2)
   404a8:	e0ffff17 	ldw	r3,-4(fp)
   404ac:	18c00217 	ldw	r3,8(r3)
   404b0:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   404b4:	e0bfff17 	ldw	r2,-4(fp)
   404b8:	10800217 	ldw	r2,8(r2)
   404bc:	e0ffff17 	ldw	r3,-4(fp)
   404c0:	18c00117 	ldw	r3,4(r3)
   404c4:	10c00115 	stw	r3,4(r2)
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   404c8:	e0bfff17 	ldw	r2,-4(fp)
   404cc:	10800417 	ldw	r2,16(r2)
   404d0:	e0bffe15 	stw	r2,-8(fp)

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   404d4:	e0bffe17 	ldw	r2,-8(fp)
   404d8:	10c00117 	ldw	r3,4(r2)
   404dc:	e0bfff17 	ldw	r2,-4(fp)
   404e0:	1880041e 	bne	r3,r2,404f4 <vListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   404e4:	e0bfff17 	ldw	r2,-4(fp)
   404e8:	10c00217 	ldw	r3,8(r2)
   404ec:	e0bffe17 	ldw	r2,-8(fp)
   404f0:	10c00115 	stw	r3,4(r2)
	}

	pxItemToRemove->pvContainer = NULL;
   404f4:	e0bfff17 	ldw	r2,-4(fp)
   404f8:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
   404fc:	e0bffe17 	ldw	r2,-8(fp)
   40500:	10800017 	ldw	r2,0(r2)
   40504:	10ffffc4 	addi	r3,r2,-1
   40508:	e0bffe17 	ldw	r2,-8(fp)
   4050c:	10c00015 	stw	r3,0(r2)
}
   40510:	e037883a 	mov	sp,fp
   40514:	df000017 	ldw	fp,0(sp)
   40518:	dec00104 	addi	sp,sp,4
   4051c:	f800283a 	ret

00040520 <prvReadGp>:
  void vPortSysTickHandler( void * context, alt_u32 id );
#endif
/*-----------------------------------------------------------*/

void prvReadGp( unsigned long *ulValue )
{
   40520:	defffe04 	addi	sp,sp,-8
   40524:	df000115 	stw	fp,4(sp)
   40528:	df000104 	addi	fp,sp,4
   4052c:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (r4) " );
   40530:	26800015 	stw	gp,0(r4)
};
   40534:	e037883a 	mov	sp,fp
   40538:	df000017 	ldw	fp,0(sp)
   4053c:	dec00104 	addi	sp,sp,4
   40540:	f800283a 	ret

00040544 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   40544:	defff904 	addi	sp,sp,-28
   40548:	dfc00615 	stw	ra,24(sp)
   4054c:	df000515 	stw	fp,20(sp)
   40550:	df000504 	addi	fp,sp,20
   40554:	e13ffd15 	stw	r4,-12(fp)
   40558:	e17ffe15 	stw	r5,-8(fp)
   4055c:	e1bfff15 	stw	r6,-4(fp)
portSTACK_TYPE *pxFramePointer = pxTopOfStack - 1;
   40560:	e0bffd17 	ldw	r2,-12(fp)
   40564:	10bfff04 	addi	r2,r2,-4
   40568:	e0bffb15 	stw	r2,-20(fp)
portSTACK_TYPE xGlobalPointer;

    prvReadGp( &xGlobalPointer );
   4056c:	e0bffc04 	addi	r2,fp,-16
   40570:	1009883a 	mov	r4,r2
   40574:	00405200 	call	40520 <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
   40578:	e0fffd17 	ldw	r3,-12(fp)
   4057c:	00b7abb4 	movhi	r2,57006
   40580:	10afbbc4 	addi	r2,r2,-16657
   40584:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
   40588:	e0bffd17 	ldw	r2,-12(fp)
   4058c:	10bfff04 	addi	r2,r2,-4
   40590:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( portSTACK_TYPE ) pxFramePointer;
   40594:	e0fffb17 	ldw	r3,-20(fp)
   40598:	e0bffd17 	ldw	r2,-12(fp)
   4059c:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
   405a0:	e0bffd17 	ldw	r2,-12(fp)
   405a4:	10bfff04 	addi	r2,r2,-4
   405a8:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = xGlobalPointer;
   405ac:	e0fffc17 	ldw	r3,-16(fp)
   405b0:	e0bffd17 	ldw	r2,-12(fp)
   405b4:	10c00015 	stw	r3,0(r2)

    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
   405b8:	e0bffd17 	ldw	r2,-12(fp)
   405bc:	10bff704 	addi	r2,r2,-36
   405c0:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( portSTACK_TYPE ) pxCode;
   405c4:	e0fffe17 	ldw	r3,-8(fp)
   405c8:	e0bffd17 	ldw	r2,-12(fp)
   405cc:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
   405d0:	e0bffd17 	ldw	r2,-12(fp)
   405d4:	10bfff04 	addi	r2,r2,-4
   405d8:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS;
   405dc:	e0bffd17 	ldw	r2,-12(fp)
   405e0:	00c00044 	movi	r3,1
   405e4:	10c00015 	stw	r3,0(r2)

    /* Space for R15 to R5. */
    pxTopOfStack -= 12;
   405e8:	e0bffd17 	ldw	r2,-12(fp)
   405ec:	10bff404 	addi	r2,r2,-48
   405f0:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( portSTACK_TYPE ) pvParameters;
   405f4:	e0ffff17 	ldw	r3,-4(fp)
   405f8:	e0bffd17 	ldw	r2,-12(fp)
   405fc:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
   40600:	e0bffd17 	ldw	r2,-12(fp)
   40604:	10bffb04 	addi	r2,r2,-20
   40608:	e0bffd15 	stw	r2,-12(fp)

    return pxTopOfStack;
   4060c:	e0bffd17 	ldw	r2,-12(fp)
}
   40610:	e037883a 	mov	sp,fp
   40614:	dfc00117 	ldw	ra,4(sp)
   40618:	df000017 	ldw	fp,0(sp)
   4061c:	dec00204 	addi	sp,sp,8
   40620:	f800283a 	ret

00040624 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   40624:	defffe04 	addi	sp,sp,-8
   40628:	dfc00115 	stw	ra,4(sp)
   4062c:	df000015 	stw	fp,0(sp)
   40630:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   40634:	00406780 	call	40678 <prvSetupTimerInterrupt>
   40638:	00800134 	movhi	r2,4

	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
   4063c:	10803104 	addi	r2,r2,196
   40640:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
   40644:	0005883a 	mov	r2,zero
}
   40648:	e037883a 	mov	sp,fp
   4064c:	dfc00117 	ldw	ra,4(sp)
   40650:	df000017 	ldw	fp,0(sp)
   40654:	dec00204 	addi	sp,sp,8
   40658:	f800283a 	ret

0004065c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
   4065c:	deffff04 	addi	sp,sp,-4
   40660:	df000015 	stw	fp,0(sp)
   40664:	d839883a 	mov	fp,sp
	/* It is unlikely that the NIOS2 port will require this function as there
	is nothing to return to.  */
}
   40668:	e037883a 	mov	sp,fp
   4066c:	df000017 	ldw	fp,0(sp)
   40670:	dec00104 	addi	sp,sp,4
   40674:	f800283a 	ret

00040678 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   40678:	defffd04 	addi	sp,sp,-12
   4067c:	dfc00215 	stw	ra,8(sp)
   40680:	df000115 	stw	fp,4(sp)
   40684:	df000104 	addi	fp,sp,4
	/* Try to register the interrupt handler. */
	//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	if ( -EINVAL ==     alt_ic_isr_register(SYS_CLK_IRQ_INTERRUPT_CONTROLLER_ID, SYS_CLK_IRQ,
   40688:	d8000015 	stw	zero,0(sp)
   4068c:	0009883a 	mov	r4,zero
   40690:	014000c4 	movi	r5,3
   40694:	01800134 	movhi	r6,4
   40698:	3181c604 	addi	r6,r6,1816
   4069c:	000f883a 	mov	r7,zero
   406a0:	005003c0 	call	5003c <alt_ic_isr_register>
   406a4:	10bffa98 	cmpnei	r2,r2,-22
   406a8:	1000021e 	bne	r2,zero,406b4 <prvSetupTimerInterrupt+0x3c>
#else
	if ( -EINVAL == alt_irq_register( SYS_CLK_IRQ, 0x0, vPortSysTickHandler ) )
#endif
	{
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
   406ac:	003da03a 	break	0
   406b0:	00001006 	br	406f4 <prvSetupTimerInterrupt+0x7c>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
   406b4:	00c00204 	movi	r3,8
   406b8:	00800234 	movhi	r2,8
   406bc:	10841904 	addi	r2,r2,4196
   406c0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
   406c4:	00e1a814 	movui	r3,34464
   406c8:	00800234 	movhi	r2,8
   406cc:	10841a04 	addi	r2,r2,4200
   406d0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
   406d4:	00c00044 	movi	r3,1
   406d8:	00800234 	movhi	r2,8
   406dc:	10841b04 	addi	r2,r2,4204
   406e0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
   406e4:	00c001c4 	movi	r3,7
   406e8:	00800234 	movhi	r2,8
   406ec:	10841904 	addi	r2,r2,4196
   406f0:	10c00035 	stwio	r3,0(r2)
	}

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
   406f4:	00ffff84 	movi	r3,-2
   406f8:	00800234 	movhi	r2,8
   406fc:	10841804 	addi	r2,r2,4192
   40700:	10c00035 	stwio	r3,0(r2)
}
   40704:	e037883a 	mov	sp,fp
   40708:	dfc00117 	ldw	ra,4(sp)
   4070c:	df000017 	ldw	fp,0(sp)
   40710:	dec00204 	addi	sp,sp,8
   40714:	f800283a 	ret

00040718 <vPortSysTickHandler>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void vPortSysTickHandler( void * context )
#else
void vPortSysTickHandler( void * context, alt_u32 id )
#endif
{
   40718:	defffd04 	addi	sp,sp,-12
   4071c:	dfc00215 	stw	ra,8(sp)
   40720:	df000115 	stw	fp,4(sp)
   40724:	df000104 	addi	fp,sp,4
   40728:	e13fff15 	stw	r4,-4(fp)
	/* Increment the Kernel Tick. */
	vTaskIncrementTick();
   4072c:	00425a40 	call	425a4 <vTaskIncrementTick>

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
        vTaskSwitchContext();
   40730:	004271c0 	call	4271c <vTaskSwitchContext>
	#endif

	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
   40734:	00ffff84 	movi	r3,-2
   40738:	00800234 	movhi	r2,8
   4073c:	10841804 	addi	r2,r2,4192
   40740:	10c00035 	stwio	r3,0(r2)
}
   40744:	e037883a 	mov	sp,fp
   40748:	dfc00117 	ldw	ra,4(sp)
   4074c:	df000017 	ldw	fp,0(sp)
   40750:	dec00204 	addi	sp,sp,8
   40754:	f800283a 	ret

00040758 <alt_irq_register>:
#ifndef ALT_ENHANCED_INTERRUPT_API_PRESENT
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
#else
int alt_irq_register( alt_u32 id, void* context, alt_isr_func handler )
#endif
{
   40758:	defff104 	addi	sp,sp,-60
   4075c:	df000e15 	stw	fp,56(sp)
   40760:	df000e04 	addi	fp,sp,56
   40764:	e13ffd15 	stw	r4,-12(fp)
   40768:	e17ffe15 	stw	r5,-8(fp)
   4076c:	e1bfff15 	stw	r6,-4(fp)
	int rc = -EINVAL;
   40770:	00bffa84 	movi	r2,-22
   40774:	e0bff215 	stw	r2,-56(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ)
   40778:	e0bffd17 	ldw	r2,-12(fp)
   4077c:	10800828 	cmpgeui	r2,r2,32
   40780:	1000581e 	bne	r2,zero,408e4 <alt_irq_register+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40784:	0005303a 	rdctl	r2,status
   40788:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4078c:	e0fff417 	ldw	r3,-48(fp)
   40790:	00bfff84 	movi	r2,-2
   40794:	1884703a 	and	r2,r3,r2
   40798:	1001703a 	wrctl	status,r2
  
  return context;
   4079c:	e0bff417 	ldw	r2,-48(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistent
		 * state.
		 */

		status = alt_irq_disable_all ();
   407a0:	e0bff315 	stw	r2,-52(fp)

		alt_irq[id].handler = handler;
   407a4:	008001b4 	movhi	r2,6
   407a8:	10bed504 	addi	r2,r2,-1196
   407ac:	e0fffd17 	ldw	r3,-12(fp)
   407b0:	180690fa 	slli	r3,r3,3
   407b4:	10c5883a 	add	r2,r2,r3
   407b8:	e0ffff17 	ldw	r3,-4(fp)
   407bc:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = context;
   407c0:	008001b4 	movhi	r2,6
   407c4:	10bed504 	addi	r2,r2,-1196
   407c8:	e0fffd17 	ldw	r3,-12(fp)
   407cc:	180690fa 	slli	r3,r3,3
   407d0:	10c5883a 	add	r2,r2,r3
   407d4:	10800104 	addi	r2,r2,4
   407d8:	e0fffe17 	ldw	r3,-8(fp)
   407dc:	10c00015 	stw	r3,0(r2)

		rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   407e0:	e0bfff17 	ldw	r2,-4(fp)
   407e4:	10001f26 	beq	r2,zero,40864 <alt_irq_register+0x10c>
   407e8:	e0bffd17 	ldw	r2,-12(fp)
   407ec:	e0bff515 	stw	r2,-44(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   407f0:	0005303a 	rdctl	r2,status
   407f4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   407f8:	e0fff617 	ldw	r3,-40(fp)
   407fc:	00bfff84 	movi	r2,-2
   40800:	1884703a 	and	r2,r3,r2
   40804:	1001703a 	wrctl	status,r2
  
  return context;
   40808:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4080c:	e0bff715 	stw	r2,-36(fp)

  alt_irq_active |= (1 << id);
   40810:	e0bff517 	ldw	r2,-44(fp)
   40814:	00c00044 	movi	r3,1
   40818:	1884983a 	sll	r2,r3,r2
   4081c:	1007883a 	mov	r3,r2
   40820:	00800174 	movhi	r2,5
   40824:	10978304 	addi	r2,r2,24076
   40828:	10800017 	ldw	r2,0(r2)
   4082c:	1886b03a 	or	r3,r3,r2
   40830:	00800174 	movhi	r2,5
   40834:	10978304 	addi	r2,r2,24076
   40838:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4083c:	00800174 	movhi	r2,5
   40840:	10978304 	addi	r2,r2,24076
   40844:	10800017 	ldw	r2,0(r2)
   40848:	100170fa 	wrctl	ienable,r2
   4084c:	e0bff717 	ldw	r2,-36(fp)
   40850:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   40854:	e0bff817 	ldw	r2,-32(fp)
   40858:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4085c:	0005883a 	mov	r2,zero
   40860:	00001f06 	br	408e0 <alt_irq_register+0x188>
   40864:	e0bffd17 	ldw	r2,-12(fp)
   40868:	e0bff915 	stw	r2,-28(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4086c:	0005303a 	rdctl	r2,status
   40870:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40874:	e0fffa17 	ldw	r3,-24(fp)
   40878:	00bfff84 	movi	r2,-2
   4087c:	1884703a 	and	r2,r3,r2
   40880:	1001703a 	wrctl	status,r2
  
  return context;
   40884:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   40888:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   4088c:	e0bff917 	ldw	r2,-28(fp)
   40890:	00c00044 	movi	r3,1
   40894:	1884983a 	sll	r2,r3,r2
   40898:	0084303a 	nor	r2,zero,r2
   4089c:	1007883a 	mov	r3,r2
   408a0:	00800174 	movhi	r2,5
   408a4:	10978304 	addi	r2,r2,24076
   408a8:	10800017 	ldw	r2,0(r2)
   408ac:	1886703a 	and	r3,r3,r2
   408b0:	00800174 	movhi	r2,5
   408b4:	10978304 	addi	r2,r2,24076
   408b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   408bc:	00800174 	movhi	r2,5
   408c0:	10978304 	addi	r2,r2,24076
   408c4:	10800017 	ldw	r2,0(r2)
   408c8:	100170fa 	wrctl	ienable,r2
   408cc:	e0bffb17 	ldw	r2,-20(fp)
   408d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   408d4:	e0bffc17 	ldw	r2,-16(fp)
   408d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   408dc:	0005883a 	mov	r2,zero
   408e0:	e0bff215 	stw	r2,-56(fp)

		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}

	return rc;
   408e4:	e0bff217 	ldw	r2,-56(fp)
}
   408e8:	e037883a 	mov	sp,fp
   408ec:	df000017 	ldw	fp,0(sp)
   408f0:	dec00104 	addi	sp,sp,4
   408f4:	f800283a 	ret

000408f8 <alt_iic_isr_register>:
  * @param flags
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr,
  void *isr_context, void *flags)
{
   408f8:	defff604 	addi	sp,sp,-40
   408fc:	dfc00915 	stw	ra,36(sp)
   40900:	df000815 	stw	fp,32(sp)
   40904:	df000804 	addi	fp,sp,32
   40908:	e13ffc15 	stw	r4,-16(fp)
   4090c:	e17ffd15 	stw	r5,-12(fp)
   40910:	e1bffe15 	stw	r6,-8(fp)
   40914:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;
   40918:	00bffa84 	movi	r2,-22
   4091c:	e0bff815 	stw	r2,-32(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   40920:	e0bffd17 	ldw	r2,-12(fp)
   40924:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   40928:	e0bff917 	ldw	r2,-28(fp)
   4092c:	10800808 	cmpgei	r2,r2,32
   40930:	1000231e 	bne	r2,zero,409c0 <alt_iic_isr_register+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40934:	0005303a 	rdctl	r2,status
   40938:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4093c:	e0fffb17 	ldw	r3,-20(fp)
   40940:	00bfff84 	movi	r2,-2
   40944:	1884703a 	and	r2,r3,r2
   40948:	1001703a 	wrctl	status,r2
  
  return context;
   4094c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   40950:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   40954:	008001b4 	movhi	r2,6
   40958:	10bed504 	addi	r2,r2,-1196
   4095c:	e0fff917 	ldw	r3,-28(fp)
   40960:	180690fa 	slli	r3,r3,3
   40964:	10c5883a 	add	r2,r2,r3
   40968:	e0fffe17 	ldw	r3,-8(fp)
   4096c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   40970:	008001b4 	movhi	r2,6
   40974:	10bed504 	addi	r2,r2,-1196
   40978:	e0fff917 	ldw	r3,-28(fp)
   4097c:	180690fa 	slli	r3,r3,3
   40980:	10c5883a 	add	r2,r2,r3
   40984:	10800104 	addi	r2,r2,4
   40988:	e0ffff17 	ldw	r3,-4(fp)
   4098c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   40990:	e0bffe17 	ldw	r2,-8(fp)
   40994:	10000526 	beq	r2,zero,409ac <alt_iic_isr_register+0xb4>
   40998:	e0bff917 	ldw	r2,-28(fp)
   4099c:	e13ffc17 	ldw	r4,-16(fp)
   409a0:	100b883a 	mov	r5,r2
   409a4:	005008c0 	call	5008c <alt_ic_irq_enable>
   409a8:	00000406 	br	409bc <alt_iic_isr_register+0xc4>
   409ac:	e0bff917 	ldw	r2,-28(fp)
   409b0:	e13ffc17 	ldw	r4,-16(fp)
   409b4:	100b883a 	mov	r5,r2
   409b8:	005012c0 	call	5012c <alt_ic_irq_disable>
   409bc:	e0bff815 	stw	r2,-32(fp)

  //  alt_irq_enable_all(status);
  }

  return rc;
   409c0:	e0bff817 	ldw	r2,-32(fp)
}
   409c4:	e037883a 	mov	sp,fp
   409c8:	dfc00117 	ldw	ra,4(sp)
   409cc:	df000017 	ldw	fp,0(sp)
   409d0:	dec00204 	addi	sp,sp,8
   409d4:	f800283a 	ret

000409d8 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   409d8:	defff604 	addi	sp,sp,-40
   409dc:	dfc00915 	stw	ra,36(sp)
   409e0:	df000815 	stw	fp,32(sp)
   409e4:	df000804 	addi	fp,sp,32
   409e8:	e13fff15 	stw	r4,-4(fp)
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
   409ec:	e03ffa15 	stw	zero,-24(fp)

	vTaskSuspendAll();
   409f0:	00423bc0 	call	423bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   409f4:	d0a6d517 	ldw	r2,-25772(gp)
   409f8:	1000141e 	bne	r2,zero,40a4c <pvPortMalloc+0x74>
		{
			prvHeapInit();
   409fc:	00800174 	movhi	r2,5
   40a00:	10978904 	addi	r2,r2,24100
   40a04:	d0a6d115 	stw	r2,-25788(gp)
   40a08:	d0a6d204 	addi	r2,gp,-25784
   40a0c:	10000015 	stw	zero,0(r2)
   40a10:	d0a6d404 	addi	r2,gp,-25776
   40a14:	00e71014 	movui	r3,40000
   40a18:	10c00015 	stw	r3,0(r2)
   40a1c:	d026d315 	stw	zero,-25780(gp)
   40a20:	00800174 	movhi	r2,5
   40a24:	10978904 	addi	r2,r2,24100
   40a28:	e0bffc15 	stw	r2,-16(fp)
   40a2c:	e0bffc17 	ldw	r2,-16(fp)
   40a30:	00e71014 	movui	r3,40000
   40a34:	10c00115 	stw	r3,4(r2)
   40a38:	e0bffc17 	ldw	r2,-16(fp)
   40a3c:	d0e6d304 	addi	r3,gp,-25780
   40a40:	10c00015 	stw	r3,0(r2)
			xHeapHasBeenInitialised = pdTRUE;
   40a44:	00800044 	movi	r2,1
   40a48:	d0a6d515 	stw	r2,-25772(gp)
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   40a4c:	e0bfff17 	ldw	r2,-4(fp)
   40a50:	10000d26 	beq	r2,zero,40a88 <pvPortMalloc+0xb0>
		{
			xWantedSize += heapSTRUCT_SIZE;
   40a54:	00800304 	movi	r2,12
   40a58:	10bfffcc 	andi	r2,r2,65535
   40a5c:	e0ffff17 	ldw	r3,-4(fp)
   40a60:	1885883a 	add	r2,r3,r2
   40a64:	e0bfff15 	stw	r2,-4(fp)

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   40a68:	e0bfff17 	ldw	r2,-4(fp)
   40a6c:	108000cc 	andi	r2,r2,3
   40a70:	10000526 	beq	r2,zero,40a88 <pvPortMalloc+0xb0>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   40a74:	e0ffff17 	ldw	r3,-4(fp)
   40a78:	00bfff04 	movi	r2,-4
   40a7c:	1884703a 	and	r2,r3,r2
   40a80:	10800104 	addi	r2,r2,4
   40a84:	e0bfff15 	stw	r2,-4(fp)
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
   40a88:	e0bfff17 	ldw	r2,-4(fp)
   40a8c:	10005026 	beq	r2,zero,40bd0 <pvPortMalloc+0x1f8>
   40a90:	e0bfff17 	ldw	r2,-4(fp)
   40a94:	10a71028 	cmpgeui	r2,r2,40000
   40a98:	10004d1e 	bne	r2,zero,40bd0 <pvPortMalloc+0x1f8>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
   40a9c:	d0a6d104 	addi	r2,gp,-25788
   40aa0:	e0bff915 	stw	r2,-28(fp)
			pxBlock = xStart.pxNextFreeBlock;
   40aa4:	d0a6d117 	ldw	r2,-25788(gp)
   40aa8:	e0bff815 	stw	r2,-32(fp)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
   40aac:	00000506 	br	40ac4 <pvPortMalloc+0xec>
			{
				pxPreviousBlock = pxBlock;
   40ab0:	e0bff817 	ldw	r2,-32(fp)
   40ab4:	e0bff915 	stw	r2,-28(fp)
				pxBlock = pxBlock->pxNextFreeBlock;
   40ab8:	e0bff817 	ldw	r2,-32(fp)
   40abc:	10800017 	ldw	r2,0(r2)
   40ac0:	e0bff815 	stw	r2,-32(fp)
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
   40ac4:	e0bff817 	ldw	r2,-32(fp)
   40ac8:	10c00117 	ldw	r3,4(r2)
   40acc:	e0bfff17 	ldw	r2,-4(fp)
   40ad0:	1880032e 	bgeu	r3,r2,40ae0 <pvPortMalloc+0x108>
   40ad4:	e0bff817 	ldw	r2,-32(fp)
   40ad8:	10800017 	ldw	r2,0(r2)
   40adc:	103ff41e 	bne	r2,zero,40ab0 <__alt_data_end+0xfffc6130>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
   40ae0:	e0fff817 	ldw	r3,-32(fp)
   40ae4:	d0a6d304 	addi	r2,gp,-25780
   40ae8:	18803926 	beq	r3,r2,40bd0 <pvPortMalloc+0x1f8>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   40aec:	e0bff917 	ldw	r2,-28(fp)
   40af0:	10c00017 	ldw	r3,0(r2)
   40af4:	00800304 	movi	r2,12
   40af8:	10bfffcc 	andi	r2,r2,65535
   40afc:	1885883a 	add	r2,r3,r2
   40b00:	e0bffa15 	stw	r2,-24(fp)

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   40b04:	e0bff817 	ldw	r2,-32(fp)
   40b08:	10c00017 	ldw	r3,0(r2)
   40b0c:	e0bff917 	ldw	r2,-28(fp)
   40b10:	10c00015 	stw	r3,0(r2)

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   40b14:	e0bff817 	ldw	r2,-32(fp)
   40b18:	10c00117 	ldw	r3,4(r2)
   40b1c:	e0bfff17 	ldw	r2,-4(fp)
   40b20:	1887c83a 	sub	r3,r3,r2
   40b24:	00800304 	movi	r2,12
   40b28:	10bfffcc 	andi	r2,r2,65535
   40b2c:	1085883a 	add	r2,r2,r2
   40b30:	10c0222e 	bgeu	r2,r3,40bbc <pvPortMalloc+0x1e4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   40b34:	e0fff817 	ldw	r3,-32(fp)
   40b38:	e0bfff17 	ldw	r2,-4(fp)
   40b3c:	1885883a 	add	r2,r3,r2
   40b40:	e0bffd15 	stw	r2,-12(fp)

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   40b44:	e0bff817 	ldw	r2,-32(fp)
   40b48:	10c00117 	ldw	r3,4(r2)
   40b4c:	e0bfff17 	ldw	r2,-4(fp)
   40b50:	1887c83a 	sub	r3,r3,r2
   40b54:	e0bffd17 	ldw	r2,-12(fp)
   40b58:	10c00115 	stw	r3,4(r2)
					pxBlock->xBlockSize = xWantedSize;
   40b5c:	e0bff817 	ldw	r2,-32(fp)
   40b60:	e0ffff17 	ldw	r3,-4(fp)
   40b64:	10c00115 	stw	r3,4(r2)

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   40b68:	e0bffd17 	ldw	r2,-12(fp)
   40b6c:	10800117 	ldw	r2,4(r2)
   40b70:	e0bffe15 	stw	r2,-8(fp)
   40b74:	d0a6d104 	addi	r2,gp,-25788
   40b78:	e0bffb15 	stw	r2,-20(fp)
   40b7c:	00000306 	br	40b8c <pvPortMalloc+0x1b4>
   40b80:	e0bffb17 	ldw	r2,-20(fp)
   40b84:	10800017 	ldw	r2,0(r2)
   40b88:	e0bffb15 	stw	r2,-20(fp)
   40b8c:	e0bffb17 	ldw	r2,-20(fp)
   40b90:	10800017 	ldw	r2,0(r2)
   40b94:	10c00117 	ldw	r3,4(r2)
   40b98:	e0bffe17 	ldw	r2,-8(fp)
   40b9c:	18bff836 	bltu	r3,r2,40b80 <__alt_data_end+0xfffc6200>
   40ba0:	e0bffb17 	ldw	r2,-20(fp)
   40ba4:	10c00017 	ldw	r3,0(r2)
   40ba8:	e0bffd17 	ldw	r2,-12(fp)
   40bac:	10c00015 	stw	r3,0(r2)
   40bb0:	e0bffb17 	ldw	r2,-20(fp)
   40bb4:	e0fffd17 	ldw	r3,-12(fp)
   40bb8:	10c00015 	stw	r3,0(r2)
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
   40bbc:	d0e00117 	ldw	r3,-32764(gp)
   40bc0:	e0bff817 	ldw	r2,-32(fp)
   40bc4:	10800117 	ldw	r2,4(r2)
   40bc8:	1885c83a 	sub	r2,r3,r2
   40bcc:	d0a00115 	stw	r2,-32764(gp)
			}
		}
	}
	xTaskResumeAll();
   40bd0:	00423e40 	call	423e4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
   40bd4:	e0bffa17 	ldw	r2,-24(fp)
}
   40bd8:	e037883a 	mov	sp,fp
   40bdc:	dfc00117 	ldw	ra,4(sp)
   40be0:	df000017 	ldw	fp,0(sp)
   40be4:	dec00204 	addi	sp,sp,8
   40be8:	f800283a 	ret

00040bec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   40bec:	defff904 	addi	sp,sp,-28
   40bf0:	dfc00615 	stw	ra,24(sp)
   40bf4:	df000515 	stw	fp,20(sp)
   40bf8:	df000504 	addi	fp,sp,20
   40bfc:	e13fff15 	stw	r4,-4(fp)
unsigned char *puc = ( unsigned char * ) pv;
   40c00:	e0bfff17 	ldw	r2,-4(fp)
   40c04:	e0bffc15 	stw	r2,-16(fp)
xBlockLink *pxLink;

	if( pv )
   40c08:	e0bfff17 	ldw	r2,-4(fp)
   40c0c:	10002426 	beq	r2,zero,40ca0 <vPortFree+0xb4>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   40c10:	00800304 	movi	r2,12
   40c14:	10bfffcc 	andi	r2,r2,65535
   40c18:	0085c83a 	sub	r2,zero,r2
   40c1c:	e0fffc17 	ldw	r3,-16(fp)
   40c20:	1885883a 	add	r2,r3,r2
   40c24:	e0bffc15 	stw	r2,-16(fp)

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   40c28:	e0bffc17 	ldw	r2,-16(fp)
   40c2c:	e0bffd15 	stw	r2,-12(fp)

		vTaskSuspendAll();
   40c30:	00423bc0 	call	423bc <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
   40c34:	e0bffd17 	ldw	r2,-12(fp)
   40c38:	10800117 	ldw	r2,4(r2)
   40c3c:	e0bffe15 	stw	r2,-8(fp)
   40c40:	d0a6d104 	addi	r2,gp,-25788
   40c44:	e0bffb15 	stw	r2,-20(fp)
   40c48:	00000306 	br	40c58 <vPortFree+0x6c>
   40c4c:	e0bffb17 	ldw	r2,-20(fp)
   40c50:	10800017 	ldw	r2,0(r2)
   40c54:	e0bffb15 	stw	r2,-20(fp)
   40c58:	e0bffb17 	ldw	r2,-20(fp)
   40c5c:	10800017 	ldw	r2,0(r2)
   40c60:	10c00117 	ldw	r3,4(r2)
   40c64:	e0bffe17 	ldw	r2,-8(fp)
   40c68:	18bff836 	bltu	r3,r2,40c4c <__alt_data_end+0xfffc62cc>
   40c6c:	e0bffb17 	ldw	r2,-20(fp)
   40c70:	10c00017 	ldw	r3,0(r2)
   40c74:	e0bffd17 	ldw	r2,-12(fp)
   40c78:	10c00015 	stw	r3,0(r2)
   40c7c:	e0bffb17 	ldw	r2,-20(fp)
   40c80:	e0fffd17 	ldw	r3,-12(fp)
   40c84:	10c00015 	stw	r3,0(r2)
			xFreeBytesRemaining += pxLink->xBlockSize;
   40c88:	e0bffd17 	ldw	r2,-12(fp)
   40c8c:	10c00117 	ldw	r3,4(r2)
   40c90:	d0a00117 	ldw	r2,-32764(gp)
   40c94:	1885883a 	add	r2,r3,r2
   40c98:	d0a00115 	stw	r2,-32764(gp)
		}
		xTaskResumeAll();
   40c9c:	00423e40 	call	423e4 <xTaskResumeAll>
	}
}
   40ca0:	e037883a 	mov	sp,fp
   40ca4:	dfc00117 	ldw	ra,4(sp)
   40ca8:	df000017 	ldw	fp,0(sp)
   40cac:	dec00204 	addi	sp,sp,8
   40cb0:	f800283a 	ret

00040cb4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   40cb4:	deffff04 	addi	sp,sp,-4
   40cb8:	df000015 	stw	fp,0(sp)
   40cbc:	d839883a 	mov	fp,sp
	return xFreeBytesRemaining;
   40cc0:	d0a00117 	ldw	r2,-32764(gp)
}
   40cc4:	e037883a 	mov	sp,fp
   40cc8:	df000017 	ldw	fp,0(sp)
   40ccc:	dec00104 	addi	sp,sp,4
   40cd0:	f800283a 	ret

00040cd4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
   40cd4:	deffff04 	addi	sp,sp,-4
   40cd8:	df000015 	stw	fp,0(sp)
   40cdc:	d839883a 	mov	fp,sp
	/* This just exists to keep the linker quiet. */
}
   40ce0:	e037883a 	mov	sp,fp
   40ce4:	df000017 	ldw	fp,0(sp)
   40ce8:	dec00104 	addi	sp,sp,4
   40cec:	f800283a 	ret

00040cf0 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
   40cf0:	defff904 	addi	sp,sp,-28
   40cf4:	dfc00615 	stw	ra,24(sp)
   40cf8:	df000515 	stw	fp,20(sp)
   40cfc:	df000504 	addi	fp,sp,20
   40d00:	e13ffe15 	stw	r4,-8(fp)
   40d04:	e17fff15 	stw	r5,-4(fp)
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   40d08:	e03ffb15 	stw	zero,-20(fp)

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   40d0c:	e0bffe17 	ldw	r2,-8(fp)
   40d10:	10004226 	beq	r2,zero,40e1c <xQueueCreate+0x12c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   40d14:	01001304 	movi	r4,76
   40d18:	00409d80 	call	409d8 <pvPortMalloc>
   40d1c:	e0bffc15 	stw	r2,-16(fp)
		if( pxNewQueue != NULL )
   40d20:	e0bffc17 	ldw	r2,-16(fp)
   40d24:	10003d26 	beq	r2,zero,40e1c <xQueueCreate+0x12c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   40d28:	e0fffe17 	ldw	r3,-8(fp)
   40d2c:	e0bfff17 	ldw	r2,-4(fp)
   40d30:	1885383a 	mul	r2,r3,r2
   40d34:	10800044 	addi	r2,r2,1
   40d38:	e0bffd15 	stw	r2,-12(fp)

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   40d3c:	e13ffd17 	ldw	r4,-12(fp)
   40d40:	00409d80 	call	409d8 <pvPortMalloc>
   40d44:	1007883a 	mov	r3,r2
   40d48:	e0bffc17 	ldw	r2,-16(fp)
   40d4c:	10c00015 	stw	r3,0(r2)
			if( pxNewQueue->pcHead != NULL )
   40d50:	e0bffc17 	ldw	r2,-16(fp)
   40d54:	10800017 	ldw	r2,0(r2)
   40d58:	10002e26 	beq	r2,zero,40e14 <xQueueCreate+0x124>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
   40d5c:	e0bffc17 	ldw	r2,-16(fp)
   40d60:	10c00017 	ldw	r3,0(r2)
   40d64:	e13ffe17 	ldw	r4,-8(fp)
   40d68:	e0bfff17 	ldw	r2,-4(fp)
   40d6c:	2085383a 	mul	r2,r4,r2
   40d70:	1887883a 	add	r3,r3,r2
   40d74:	e0bffc17 	ldw	r2,-16(fp)
   40d78:	10c00115 	stw	r3,4(r2)
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   40d7c:	e0bffc17 	ldw	r2,-16(fp)
   40d80:	10000e15 	stw	zero,56(r2)
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
   40d84:	e0bffc17 	ldw	r2,-16(fp)
   40d88:	10c00017 	ldw	r3,0(r2)
   40d8c:	e0bffc17 	ldw	r2,-16(fp)
   40d90:	10c00215 	stw	r3,8(r2)
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
   40d94:	e0bffc17 	ldw	r2,-16(fp)
   40d98:	10c00017 	ldw	r3,0(r2)
   40d9c:	e0bffe17 	ldw	r2,-8(fp)
   40da0:	113fffc4 	addi	r4,r2,-1
   40da4:	e0bfff17 	ldw	r2,-4(fp)
   40da8:	2085383a 	mul	r2,r4,r2
   40dac:	1887883a 	add	r3,r3,r2
   40db0:	e0bffc17 	ldw	r2,-16(fp)
   40db4:	10c00315 	stw	r3,12(r2)
				pxNewQueue->uxLength = uxQueueLength;
   40db8:	e0bffc17 	ldw	r2,-16(fp)
   40dbc:	e0fffe17 	ldw	r3,-8(fp)
   40dc0:	10c00f15 	stw	r3,60(r2)
				pxNewQueue->uxItemSize = uxItemSize;
   40dc4:	e0bffc17 	ldw	r2,-16(fp)
   40dc8:	e0ffff17 	ldw	r3,-4(fp)
   40dcc:	10c01015 	stw	r3,64(r2)
				pxNewQueue->xRxLock = queueUNLOCKED;
   40dd0:	e0bffc17 	ldw	r2,-16(fp)
   40dd4:	00ffffc4 	movi	r3,-1
   40dd8:	10c01115 	stw	r3,68(r2)
				pxNewQueue->xTxLock = queueUNLOCKED;
   40ddc:	e0bffc17 	ldw	r2,-16(fp)
   40de0:	00ffffc4 	movi	r3,-1
   40de4:	10c01215 	stw	r3,72(r2)

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
   40de8:	e0bffc17 	ldw	r2,-16(fp)
   40dec:	10800404 	addi	r2,r2,16
   40df0:	1009883a 	mov	r4,r2
   40df4:	00402980 	call	40298 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
   40df8:	e0bffc17 	ldw	r2,-16(fp)
   40dfc:	10800904 	addi	r2,r2,36
   40e00:	1009883a 	mov	r4,r2
   40e04:	00402980 	call	40298 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   40e08:	e0bffc17 	ldw	r2,-16(fp)
   40e0c:	e0bffb15 	stw	r2,-20(fp)
   40e10:	00000206 	br	40e1c <xQueueCreate+0x12c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
   40e14:	e13ffc17 	ldw	r4,-16(fp)
   40e18:	0040bec0 	call	40bec <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
   40e1c:	e0bffb17 	ldw	r2,-20(fp)
}
   40e20:	e037883a 	mov	sp,fp
   40e24:	dfc00117 	ldw	ra,4(sp)
   40e28:	df000017 	ldw	fp,0(sp)
   40e2c:	dec00204 	addi	sp,sp,8
   40e30:	f800283a 	ret

00040e34 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
   40e34:	defffd04 	addi	sp,sp,-12
   40e38:	dfc00215 	stw	ra,8(sp)
   40e3c:	df000115 	stw	fp,4(sp)
   40e40:	df000104 	addi	fp,sp,4
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   40e44:	01001304 	movi	r4,76
   40e48:	00409d80 	call	409d8 <pvPortMalloc>
   40e4c:	e0bfff15 	stw	r2,-4(fp)
		if( pxNewQueue != NULL )
   40e50:	e0bfff17 	ldw	r2,-4(fp)
   40e54:	10002226 	beq	r2,zero,40ee0 <xQueueCreateMutex+0xac>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   40e58:	e0bfff17 	ldw	r2,-4(fp)
   40e5c:	10000115 	stw	zero,4(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   40e60:	e0bfff17 	ldw	r2,-4(fp)
   40e64:	10000015 	stw	zero,0(r2)

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
   40e68:	e0bfff17 	ldw	r2,-4(fp)
   40e6c:	10000215 	stw	zero,8(r2)
			pxNewQueue->pcReadFrom = NULL;
   40e70:	e0bfff17 	ldw	r2,-4(fp)
   40e74:	10000315 	stw	zero,12(r2)

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   40e78:	e0bfff17 	ldw	r2,-4(fp)
   40e7c:	10000e15 	stw	zero,56(r2)
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
   40e80:	e0bfff17 	ldw	r2,-4(fp)
   40e84:	00c00044 	movi	r3,1
   40e88:	10c00f15 	stw	r3,60(r2)
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
   40e8c:	e0bfff17 	ldw	r2,-4(fp)
   40e90:	10001015 	stw	zero,64(r2)
			pxNewQueue->xRxLock = queueUNLOCKED;
   40e94:	e0bfff17 	ldw	r2,-4(fp)
   40e98:	00ffffc4 	movi	r3,-1
   40e9c:	10c01115 	stw	r3,68(r2)
			pxNewQueue->xTxLock = queueUNLOCKED;
   40ea0:	e0bfff17 	ldw	r2,-4(fp)
   40ea4:	00ffffc4 	movi	r3,-1
   40ea8:	10c01215 	stw	r3,72(r2)

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
   40eac:	e0bfff17 	ldw	r2,-4(fp)
   40eb0:	10800404 	addi	r2,r2,16
   40eb4:	1009883a 	mov	r4,r2
   40eb8:	00402980 	call	40298 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
   40ebc:	e0bfff17 	ldw	r2,-4(fp)
   40ec0:	10800904 	addi	r2,r2,36
   40ec4:	1009883a 	mov	r4,r2
   40ec8:	00402980 	call	40298 <vListInitialise>

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
   40ecc:	e13fff17 	ldw	r4,-4(fp)
   40ed0:	000b883a 	mov	r5,zero
   40ed4:	000d883a 	mov	r6,zero
   40ed8:	000f883a 	mov	r7,zero
   40edc:	00410740 	call	41074 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
   40ee0:	e0bfff17 	ldw	r2,-4(fp)
	}
   40ee4:	e037883a 	mov	sp,fp
   40ee8:	dfc00117 	ldw	ra,4(sp)
   40eec:	df000017 	ldw	fp,0(sp)
   40ef0:	dec00204 	addi	sp,sp,8
   40ef4:	f800283a 	ret

00040ef8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if configUSE_RECURSIVE_MUTEXES == 1

	portBASE_TYPE xQueueGiveMutexRecursive( xQueueHandle pxMutex )
	{
   40ef8:	defffb04 	addi	sp,sp,-20
   40efc:	dfc00415 	stw	ra,16(sp)
   40f00:	df000315 	stw	fp,12(sp)
   40f04:	dc000215 	stw	r16,8(sp)
   40f08:	df000304 	addi	fp,sp,12
   40f0c:	e13ffe15 	stw	r4,-8(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
   40f10:	e0bffe17 	ldw	r2,-8(fp)
   40f14:	14000117 	ldw	r16,4(r2)
   40f18:	0042f880 	call	42f88 <xTaskGetCurrentTaskHandle>
   40f1c:	8080101e 	bne	r16,r2,40f60 <xQueueGiveMutexRecursive+0x68>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->uxRecursiveCallCount )--;
   40f20:	e0bffe17 	ldw	r2,-8(fp)
   40f24:	10800317 	ldw	r2,12(r2)
   40f28:	10ffffc4 	addi	r3,r2,-1
   40f2c:	e0bffe17 	ldw	r2,-8(fp)
   40f30:	10c00315 	stw	r3,12(r2)

			/* Have we unwound the call count? */
			if( pxMutex->uxRecursiveCallCount == 0 )
   40f34:	e0bffe17 	ldw	r2,-8(fp)
   40f38:	10800317 	ldw	r2,12(r2)
   40f3c:	1000051e 	bne	r2,zero,40f54 <xQueueGiveMutexRecursive+0x5c>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
   40f40:	e13ffe17 	ldw	r4,-8(fp)
   40f44:	000b883a 	mov	r5,zero
   40f48:	000d883a 	mov	r6,zero
   40f4c:	000f883a 	mov	r7,zero
   40f50:	00410740 	call	41074 <xQueueGenericSend>
			}

			xReturn = pdPASS;
   40f54:	00800044 	movi	r2,1
   40f58:	e0bffd15 	stw	r2,-12(fp)
   40f5c:	00000106 	br	40f64 <xQueueGiveMutexRecursive+0x6c>
		}
		else
		{
			/* We cannot give the mutex because we are not the holder. */
			xReturn = pdFAIL;
   40f60:	e03ffd15 	stw	zero,-12(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
   40f64:	e0bffd17 	ldw	r2,-12(fp)
	}
   40f68:	e6ffff04 	addi	sp,fp,-4
   40f6c:	dfc00217 	ldw	ra,8(sp)
   40f70:	df000117 	ldw	fp,4(sp)
   40f74:	dc000017 	ldw	r16,0(sp)
   40f78:	dec00304 	addi	sp,sp,12
   40f7c:	f800283a 	ret

00040f80 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if configUSE_RECURSIVE_MUTEXES == 1

	portBASE_TYPE xQueueTakeMutexRecursive( xQueueHandle pxMutex, portTickType xBlockTime )
	{
   40f80:	defffa04 	addi	sp,sp,-24
   40f84:	dfc00515 	stw	ra,20(sp)
   40f88:	df000415 	stw	fp,16(sp)
   40f8c:	dc000315 	stw	r16,12(sp)
   40f90:	df000404 	addi	fp,sp,16
   40f94:	e13ffd15 	stw	r4,-12(fp)
   40f98:	e17ffe15 	stw	r5,-8(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
   40f9c:	e0bffd17 	ldw	r2,-12(fp)
   40fa0:	14000117 	ldw	r16,4(r2)
   40fa4:	0042f880 	call	42f88 <xTaskGetCurrentTaskHandle>
   40fa8:	8080081e 	bne	r16,r2,40fcc <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->uxRecursiveCallCount )++;
   40fac:	e0bffd17 	ldw	r2,-12(fp)
   40fb0:	10800317 	ldw	r2,12(r2)
   40fb4:	10c00044 	addi	r3,r2,1
   40fb8:	e0bffd17 	ldw	r2,-12(fp)
   40fbc:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
   40fc0:	00800044 	movi	r2,1
   40fc4:	e0bffc15 	stw	r2,-16(fp)
   40fc8:	00000e06 	br	41004 <xQueueTakeMutexRecursive+0x84>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xBlockTime, pdFALSE );
   40fcc:	e13ffd17 	ldw	r4,-12(fp)
   40fd0:	000b883a 	mov	r5,zero
   40fd4:	e1bffe17 	ldw	r6,-8(fp)
   40fd8:	000f883a 	mov	r7,zero
   40fdc:	00412b80 	call	412b8 <xQueueGenericReceive>
   40fe0:	e0bffc15 	stw	r2,-16(fp)

			/* pdPASS will only be returned if we successfully obtained the mutex,
			we may have blocked to reach here. */
			if( xReturn == pdPASS )
   40fe4:	e0bffc17 	ldw	r2,-16(fp)
   40fe8:	10800058 	cmpnei	r2,r2,1
   40fec:	1000051e 	bne	r2,zero,41004 <xQueueTakeMutexRecursive+0x84>
			{
				( pxMutex->uxRecursiveCallCount )++;
   40ff0:	e0bffd17 	ldw	r2,-12(fp)
   40ff4:	10800317 	ldw	r2,12(r2)
   40ff8:	10c00044 	addi	r3,r2,1
   40ffc:	e0bffd17 	ldw	r2,-12(fp)
   41000:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
   41004:	e0bffc17 	ldw	r2,-16(fp)
	}
   41008:	e6ffff04 	addi	sp,fp,-4
   4100c:	dfc00217 	ldw	ra,8(sp)
   41010:	df000117 	ldw	fp,4(sp)
   41014:	dc000017 	ldw	r16,0(sp)
   41018:	dec00304 	addi	sp,sp,12
   4101c:	f800283a 	ret

00041020 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
   41020:	defffb04 	addi	sp,sp,-20
   41024:	dfc00415 	stw	ra,16(sp)
   41028:	df000315 	stw	fp,12(sp)
   4102c:	df000304 	addi	fp,sp,12
   41030:	e13ffe15 	stw	r4,-8(fp)
   41034:	e17fff15 	stw	r5,-4(fp)
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
   41038:	e13ffe17 	ldw	r4,-8(fp)
   4103c:	000b883a 	mov	r5,zero
   41040:	0040cf00 	call	40cf0 <xQueueCreate>
   41044:	e0bffd15 	stw	r2,-12(fp)

		if( pxHandle != NULL )
   41048:	e0bffd17 	ldw	r2,-12(fp)
   4104c:	10000326 	beq	r2,zero,4105c <xQueueCreateCountingSemaphore+0x3c>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
   41050:	e0bffd17 	ldw	r2,-12(fp)
   41054:	e0ffff17 	ldw	r3,-4(fp)
   41058:	10c00e15 	stw	r3,56(r2)
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
   4105c:	e0bffd17 	ldw	r2,-12(fp)
	}
   41060:	e037883a 	mov	sp,fp
   41064:	dfc00117 	ldw	ra,4(sp)
   41068:	df000017 	ldw	fp,0(sp)
   4106c:	dec00204 	addi	sp,sp,8
   41070:	f800283a 	ret

00041074 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   41074:	defff704 	addi	sp,sp,-36
   41078:	dfc00815 	stw	ra,32(sp)
   4107c:	df000715 	stw	fp,28(sp)
   41080:	df000704 	addi	fp,sp,28
   41084:	e13ffc15 	stw	r4,-16(fp)
   41088:	e17ffd15 	stw	r5,-12(fp)
   4108c:	e1bffe15 	stw	r6,-8(fp)
   41090:	e1ffff15 	stw	r7,-4(fp)
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   41094:	e03ff915 	stw	zero,-28(fp)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   41098:	00431780 	call	43178 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   4109c:	e0bffc17 	ldw	r2,-16(fp)
   410a0:	10c00e17 	ldw	r3,56(r2)
   410a4:	e0bffc17 	ldw	r2,-16(fp)
   410a8:	10800f17 	ldw	r2,60(r2)
   410ac:	1880112e 	bgeu	r3,r2,410f4 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   410b0:	e13ffc17 	ldw	r4,-16(fp)
   410b4:	e17ffd17 	ldw	r5,-12(fp)
   410b8:	e1bfff17 	ldw	r6,-4(fp)
   410bc:	00416400 	call	41640 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   410c0:	e0bffc17 	ldw	r2,-16(fp)
   410c4:	10800917 	ldw	r2,36(r2)
   410c8:	10000726 	beq	r2,zero,410e8 <xQueueGenericSend+0x74>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   410cc:	e0bffc17 	ldw	r2,-16(fp)
   410d0:	10800904 	addi	r2,r2,36
   410d4:	1009883a 	mov	r4,r2
   410d8:	00428d80 	call	428d8 <xTaskRemoveFromEventList>
   410dc:	10800058 	cmpnei	r2,r2,1
   410e0:	1000011e 	bne	r2,zero,410e8 <xQueueGenericSend+0x74>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   410e4:	003b683a 	trap	0
					}
				}

				taskEXIT_CRITICAL();
   410e8:	00431c40 	call	431c4 <vTaskExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   410ec:	00800044 	movi	r2,1
   410f0:	00003b06 	br	411e0 <xQueueGenericSend+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   410f4:	e0bffe17 	ldw	r2,-8(fp)
   410f8:	1000031e 	bne	r2,zero,41108 <xQueueGenericSend+0x94>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   410fc:	00431c40 	call	431c4 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   41100:	0005883a 	mov	r2,zero
   41104:	00003606 	br	411e0 <xQueueGenericSend+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
   41108:	e0bff917 	ldw	r2,-28(fp)
   4110c:	1000051e 	bne	r2,zero,41124 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   41110:	e0bffa04 	addi	r2,fp,-24
   41114:	1009883a 	mov	r4,r2
   41118:	00429c40 	call	429c4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   4111c:	00800044 	movi	r2,1
   41120:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}
		taskEXIT_CRITICAL();
   41124:	00431c40 	call	431c4 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   41128:	00423bc0 	call	423bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   4112c:	00431780 	call	43178 <vTaskEnterCritical>
   41130:	e0bffc17 	ldw	r2,-16(fp)
   41134:	10801117 	ldw	r2,68(r2)
   41138:	10bfffd8 	cmpnei	r2,r2,-1
   4113c:	1000021e 	bne	r2,zero,41148 <xQueueGenericSend+0xd4>
   41140:	e0bffc17 	ldw	r2,-16(fp)
   41144:	10001115 	stw	zero,68(r2)
   41148:	e0bffc17 	ldw	r2,-16(fp)
   4114c:	10801217 	ldw	r2,72(r2)
   41150:	10bfffd8 	cmpnei	r2,r2,-1
   41154:	1000021e 	bne	r2,zero,41160 <xQueueGenericSend+0xec>
   41158:	e0bffc17 	ldw	r2,-16(fp)
   4115c:	10001215 	stw	zero,72(r2)
   41160:	00431c40 	call	431c4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   41164:	e0fffa04 	addi	r3,fp,-24
   41168:	e0bffe04 	addi	r2,fp,-8
   4116c:	1809883a 	mov	r4,r3
   41170:	100b883a 	mov	r5,r2
   41174:	00429fc0 	call	429fc <xTaskCheckForTimeOut>
   41178:	1000131e 	bne	r2,zero,411c8 <xQueueGenericSend+0x154>
		{
			if( prvIsQueueFull( pxQueue ) )
   4117c:	e13ffc17 	ldw	r4,-16(fp)
   41180:	00419a00 	call	419a0 <prvIsQueueFull>
   41184:	10000c26 	beq	r2,zero,411b8 <xQueueGenericSend+0x144>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   41188:	e0bffc17 	ldw	r2,-16(fp)
   4118c:	10c00404 	addi	r3,r2,16
   41190:	e0bffe17 	ldw	r2,-8(fp)
   41194:	1809883a 	mov	r4,r3
   41198:	100b883a 	mov	r5,r2
   4119c:	00428480 	call	42848 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   411a0:	e13ffc17 	ldw	r4,-16(fp)
   411a4:	00418300 	call	41830 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
   411a8:	00423e40 	call	423e4 <xTaskResumeAll>
   411ac:	10000b1e 	bne	r2,zero,411dc <xQueueGenericSend+0x168>
				{
					portYIELD_WITHIN_API();
   411b0:	003b683a 	trap	0
   411b4:	00000906 	br	411dc <xQueueGenericSend+0x168>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   411b8:	e13ffc17 	ldw	r4,-16(fp)
   411bc:	00418300 	call	41830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   411c0:	00423e40 	call	423e4 <xTaskResumeAll>
   411c4:	003fb406 	br	41098 <__alt_data_end+0xfffc6718>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   411c8:	e13ffc17 	ldw	r4,-16(fp)
   411cc:	00418300 	call	41830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   411d0:	00423e40 	call	423e4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   411d4:	0005883a 	mov	r2,zero
   411d8:	00000106 	br	411e0 <xQueueGenericSend+0x16c>
		}
	}
   411dc:	003fae06 	br	41098 <__alt_data_end+0xfffc6718>
}
   411e0:	e037883a 	mov	sp,fp
   411e4:	dfc00117 	ldw	ra,4(sp)
   411e8:	df000017 	ldw	fp,0(sp)
   411ec:	dec00204 	addi	sp,sp,8
   411f0:	f800283a 	ret

000411f4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   411f4:	defff804 	addi	sp,sp,-32
   411f8:	dfc00715 	stw	ra,28(sp)
   411fc:	df000615 	stw	fp,24(sp)
   41200:	df000604 	addi	fp,sp,24
   41204:	e13ffc15 	stw	r4,-16(fp)
   41208:	e17ffd15 	stw	r5,-12(fp)
   4120c:	e1bffe15 	stw	r6,-8(fp)
   41210:	e1ffff15 	stw	r7,-4(fp)
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   41214:	e03ffb15 	stw	zero,-20(fp)
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   41218:	e0bffc17 	ldw	r2,-16(fp)
   4121c:	10c00e17 	ldw	r3,56(r2)
   41220:	e0bffc17 	ldw	r2,-16(fp)
   41224:	10800f17 	ldw	r2,60(r2)
   41228:	18801c2e 	bgeu	r3,r2,4129c <xQueueGenericSendFromISR+0xa8>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   4122c:	e13ffc17 	ldw	r4,-16(fp)
   41230:	e17ffd17 	ldw	r5,-12(fp)
   41234:	e1bfff17 	ldw	r6,-4(fp)
   41238:	00416400 	call	41640 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   4123c:	e0bffc17 	ldw	r2,-16(fp)
   41240:	10801217 	ldw	r2,72(r2)
   41244:	10bfffd8 	cmpnei	r2,r2,-1
   41248:	10000c1e 	bne	r2,zero,4127c <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   4124c:	e0bffc17 	ldw	r2,-16(fp)
   41250:	10800917 	ldw	r2,36(r2)
   41254:	10000e26 	beq	r2,zero,41290 <xQueueGenericSendFromISR+0x9c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   41258:	e0bffc17 	ldw	r2,-16(fp)
   4125c:	10800904 	addi	r2,r2,36
   41260:	1009883a 	mov	r4,r2
   41264:	00428d80 	call	428d8 <xTaskRemoveFromEventList>
   41268:	10000926 	beq	r2,zero,41290 <xQueueGenericSendFromISR+0x9c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
   4126c:	e0bffe17 	ldw	r2,-8(fp)
   41270:	00c00044 	movi	r3,1
   41274:	10c00015 	stw	r3,0(r2)
   41278:	00000506 	br	41290 <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   4127c:	e0bffc17 	ldw	r2,-16(fp)
   41280:	10801217 	ldw	r2,72(r2)
   41284:	10c00044 	addi	r3,r2,1
   41288:	e0bffc17 	ldw	r2,-16(fp)
   4128c:	10c01215 	stw	r3,72(r2)
			}

			xReturn = pdPASS;
   41290:	00800044 	movi	r2,1
   41294:	e0bffa15 	stw	r2,-24(fp)
   41298:	00000106 	br	412a0 <xQueueGenericSendFromISR+0xac>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   4129c:	e03ffa15 	stw	zero,-24(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   412a0:	e0bffa17 	ldw	r2,-24(fp)
}
   412a4:	e037883a 	mov	sp,fp
   412a8:	dfc00117 	ldw	ra,4(sp)
   412ac:	df000017 	ldw	fp,0(sp)
   412b0:	dec00204 	addi	sp,sp,8
   412b4:	f800283a 	ret

000412b8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   412b8:	defff604 	addi	sp,sp,-40
   412bc:	dfc00915 	stw	ra,36(sp)
   412c0:	df000815 	stw	fp,32(sp)
   412c4:	df000804 	addi	fp,sp,32
   412c8:	e13ffc15 	stw	r4,-16(fp)
   412cc:	e17ffd15 	stw	r5,-12(fp)
   412d0:	e1bffe15 	stw	r6,-8(fp)
   412d4:	e1ffff15 	stw	r7,-4(fp)
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   412d8:	e03ff815 	stw	zero,-32(fp)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   412dc:	00431780 	call	43178 <vTaskEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   412e0:	e0bffc17 	ldw	r2,-16(fp)
   412e4:	10800e17 	ldw	r2,56(r2)
   412e8:	10002e26 	beq	r2,zero,413a4 <xQueueGenericReceive+0xec>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   412ec:	e0bffc17 	ldw	r2,-16(fp)
   412f0:	10800317 	ldw	r2,12(r2)
   412f4:	e0bff915 	stw	r2,-28(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   412f8:	e13ffc17 	ldw	r4,-16(fp)
   412fc:	e17ffd17 	ldw	r5,-12(fp)
   41300:	00417980 	call	41798 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
   41304:	e0bfff17 	ldw	r2,-4(fp)
   41308:	1000171e 	bne	r2,zero,41368 <xQueueGenericReceive+0xb0>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   4130c:	e0bffc17 	ldw	r2,-16(fp)
   41310:	10800e17 	ldw	r2,56(r2)
   41314:	10ffffc4 	addi	r3,r2,-1
   41318:	e0bffc17 	ldw	r2,-16(fp)
   4131c:	10c00e15 	stw	r3,56(r2)

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   41320:	e0bffc17 	ldw	r2,-16(fp)
   41324:	10800017 	ldw	r2,0(r2)
   41328:	1000041e 	bne	r2,zero,4133c <xQueueGenericReceive+0x84>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   4132c:	0042f880 	call	42f88 <xTaskGetCurrentTaskHandle>
   41330:	1007883a 	mov	r3,r2
   41334:	e0bffc17 	ldw	r2,-16(fp)
   41338:	10c00115 	stw	r3,4(r2)
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   4133c:	e0bffc17 	ldw	r2,-16(fp)
   41340:	10800417 	ldw	r2,16(r2)
   41344:	10001426 	beq	r2,zero,41398 <xQueueGenericReceive+0xe0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   41348:	e0bffc17 	ldw	r2,-16(fp)
   4134c:	10800404 	addi	r2,r2,16
   41350:	1009883a 	mov	r4,r2
   41354:	00428d80 	call	428d8 <xTaskRemoveFromEventList>
   41358:	10800058 	cmpnei	r2,r2,1
   4135c:	10000e1e 	bne	r2,zero,41398 <xQueueGenericReceive+0xe0>
						{
							portYIELD_WITHIN_API();
   41360:	003b683a 	trap	0
   41364:	00000c06 	br	41398 <xQueueGenericReceive+0xe0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   41368:	e0bffc17 	ldw	r2,-16(fp)
   4136c:	e0fff917 	ldw	r3,-28(fp)
   41370:	10c00315 	stw	r3,12(r2)

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   41374:	e0bffc17 	ldw	r2,-16(fp)
   41378:	10800917 	ldw	r2,36(r2)
   4137c:	10000626 	beq	r2,zero,41398 <xQueueGenericReceive+0xe0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   41380:	e0bffc17 	ldw	r2,-16(fp)
   41384:	10800904 	addi	r2,r2,36
   41388:	1009883a 	mov	r4,r2
   4138c:	00428d80 	call	428d8 <xTaskRemoveFromEventList>
   41390:	10000126 	beq	r2,zero,41398 <xQueueGenericReceive+0xe0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   41394:	003b683a 	trap	0
						}
					}

				}

				taskEXIT_CRITICAL();
   41398:	00431c40 	call	431c4 <vTaskExitCritical>
				return pdPASS;
   4139c:	00800044 	movi	r2,1
   413a0:	00004406 	br	414b4 <xQueueGenericReceive+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   413a4:	e0bffe17 	ldw	r2,-8(fp)
   413a8:	1000031e 	bne	r2,zero,413b8 <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   413ac:	00431c40 	call	431c4 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   413b0:	0005883a 	mov	r2,zero
   413b4:	00003f06 	br	414b4 <xQueueGenericReceive+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
   413b8:	e0bff817 	ldw	r2,-32(fp)
   413bc:	1000051e 	bne	r2,zero,413d4 <xQueueGenericReceive+0x11c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   413c0:	e0bffa04 	addi	r2,fp,-24
   413c4:	1009883a 	mov	r4,r2
   413c8:	00429c40 	call	429c4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   413cc:	00800044 	movi	r2,1
   413d0:	e0bff815 	stw	r2,-32(fp)
				}
			}
		}
		taskEXIT_CRITICAL();
   413d4:	00431c40 	call	431c4 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   413d8:	00423bc0 	call	423bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   413dc:	00431780 	call	43178 <vTaskEnterCritical>
   413e0:	e0bffc17 	ldw	r2,-16(fp)
   413e4:	10801117 	ldw	r2,68(r2)
   413e8:	10bfffd8 	cmpnei	r2,r2,-1
   413ec:	1000021e 	bne	r2,zero,413f8 <xQueueGenericReceive+0x140>
   413f0:	e0bffc17 	ldw	r2,-16(fp)
   413f4:	10001115 	stw	zero,68(r2)
   413f8:	e0bffc17 	ldw	r2,-16(fp)
   413fc:	10801217 	ldw	r2,72(r2)
   41400:	10bfffd8 	cmpnei	r2,r2,-1
   41404:	1000021e 	bne	r2,zero,41410 <xQueueGenericReceive+0x158>
   41408:	e0bffc17 	ldw	r2,-16(fp)
   4140c:	10001215 	stw	zero,72(r2)
   41410:	00431c40 	call	431c4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   41414:	e0fffa04 	addi	r3,fp,-24
   41418:	e0bffe04 	addi	r2,fp,-8
   4141c:	1809883a 	mov	r4,r3
   41420:	100b883a 	mov	r5,r2
   41424:	00429fc0 	call	429fc <xTaskCheckForTimeOut>
   41428:	10001c1e 	bne	r2,zero,4149c <xQueueGenericReceive+0x1e4>
		{
			if( prvIsQueueEmpty( pxQueue ) )
   4142c:	e13ffc17 	ldw	r4,-16(fp)
   41430:	00419200 	call	41920 <prvIsQueueEmpty>
   41434:	10001526 	beq	r2,zero,4148c <xQueueGenericReceive+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   41438:	e0bffc17 	ldw	r2,-16(fp)
   4143c:	10800017 	ldw	r2,0(r2)
   41440:	1000061e 	bne	r2,zero,4145c <xQueueGenericReceive+0x1a4>
					{
						portENTER_CRITICAL();
   41444:	00431780 	call	43178 <vTaskEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   41448:	e0bffc17 	ldw	r2,-16(fp)
   4144c:	10800117 	ldw	r2,4(r2)
   41450:	1009883a 	mov	r4,r2
   41454:	0042fb00 	call	42fb0 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
   41458:	00431c40 	call	431c4 <vTaskExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   4145c:	e0bffc17 	ldw	r2,-16(fp)
   41460:	10c00904 	addi	r3,r2,36
   41464:	e0bffe17 	ldw	r2,-8(fp)
   41468:	1809883a 	mov	r4,r3
   4146c:	100b883a 	mov	r5,r2
   41470:	00428480 	call	42848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   41474:	e13ffc17 	ldw	r4,-16(fp)
   41478:	00418300 	call	41830 <prvUnlockQueue>
				if( !xTaskResumeAll() )
   4147c:	00423e40 	call	423e4 <xTaskResumeAll>
   41480:	10000b1e 	bne	r2,zero,414b0 <xQueueGenericReceive+0x1f8>
				{
					portYIELD_WITHIN_API();
   41484:	003b683a 	trap	0
   41488:	00000906 	br	414b0 <xQueueGenericReceive+0x1f8>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   4148c:	e13ffc17 	ldw	r4,-16(fp)
   41490:	00418300 	call	41830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   41494:	00423e40 	call	423e4 <xTaskResumeAll>
   41498:	003f9006 	br	412dc <__alt_data_end+0xfffc695c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   4149c:	e13ffc17 	ldw	r4,-16(fp)
   414a0:	00418300 	call	41830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   414a4:	00423e40 	call	423e4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   414a8:	0005883a 	mov	r2,zero
   414ac:	00000106 	br	414b4 <xQueueGenericReceive+0x1fc>
		}
	}
   414b0:	003f8a06 	br	412dc <__alt_data_end+0xfffc695c>
}
   414b4:	e037883a 	mov	sp,fp
   414b8:	dfc00117 	ldw	ra,4(sp)
   414bc:	df000017 	ldw	fp,0(sp)
   414c0:	dec00204 	addi	sp,sp,8
   414c4:	f800283a 	ret

000414c8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
   414c8:	defff904 	addi	sp,sp,-28
   414cc:	dfc00615 	stw	ra,24(sp)
   414d0:	df000515 	stw	fp,20(sp)
   414d4:	df000504 	addi	fp,sp,20
   414d8:	e13ffd15 	stw	r4,-12(fp)
   414dc:	e17ffe15 	stw	r5,-8(fp)
   414e0:	e1bfff15 	stw	r6,-4(fp)

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   414e4:	e03ffc15 	stw	zero,-16(fp)
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   414e8:	e0bffd17 	ldw	r2,-12(fp)
   414ec:	10800e17 	ldw	r2,56(r2)
   414f0:	10002026 	beq	r2,zero,41574 <xQueueReceiveFromISR+0xac>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   414f4:	e13ffd17 	ldw	r4,-12(fp)
   414f8:	e17ffe17 	ldw	r5,-8(fp)
   414fc:	00417980 	call	41798 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
   41500:	e0bffd17 	ldw	r2,-12(fp)
   41504:	10800e17 	ldw	r2,56(r2)
   41508:	10ffffc4 	addi	r3,r2,-1
   4150c:	e0bffd17 	ldw	r2,-12(fp)
   41510:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   41514:	e0bffd17 	ldw	r2,-12(fp)
   41518:	10801117 	ldw	r2,68(r2)
   4151c:	10bfffd8 	cmpnei	r2,r2,-1
   41520:	10000c1e 	bne	r2,zero,41554 <xQueueReceiveFromISR+0x8c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   41524:	e0bffd17 	ldw	r2,-12(fp)
   41528:	10800417 	ldw	r2,16(r2)
   4152c:	10000e26 	beq	r2,zero,41568 <xQueueReceiveFromISR+0xa0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   41530:	e0bffd17 	ldw	r2,-12(fp)
   41534:	10800404 	addi	r2,r2,16
   41538:	1009883a 	mov	r4,r2
   4153c:	00428d80 	call	428d8 <xTaskRemoveFromEventList>
   41540:	10000926 	beq	r2,zero,41568 <xQueueReceiveFromISR+0xa0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
   41544:	e0bfff17 	ldw	r2,-4(fp)
   41548:	00c00044 	movi	r3,1
   4154c:	10c00015 	stw	r3,0(r2)
   41550:	00000506 	br	41568 <xQueueReceiveFromISR+0xa0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   41554:	e0bffd17 	ldw	r2,-12(fp)
   41558:	10801117 	ldw	r2,68(r2)
   4155c:	10c00044 	addi	r3,r2,1
   41560:	e0bffd17 	ldw	r2,-12(fp)
   41564:	10c01115 	stw	r3,68(r2)
			}

			xReturn = pdPASS;
   41568:	00800044 	movi	r2,1
   4156c:	e0bffb15 	stw	r2,-20(fp)
   41570:	00000106 	br	41578 <xQueueReceiveFromISR+0xb0>
		}
		else
		{
			xReturn = pdFAIL;
   41574:	e03ffb15 	stw	zero,-20(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   41578:	e0bffb17 	ldw	r2,-20(fp)
}
   4157c:	e037883a 	mov	sp,fp
   41580:	dfc00117 	ldw	ra,4(sp)
   41584:	df000017 	ldw	fp,0(sp)
   41588:	dec00204 	addi	sp,sp,8
   4158c:	f800283a 	ret

00041590 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
   41590:	defffc04 	addi	sp,sp,-16
   41594:	dfc00315 	stw	ra,12(sp)
   41598:	df000215 	stw	fp,8(sp)
   4159c:	df000204 	addi	fp,sp,8
   415a0:	e13fff15 	stw	r4,-4(fp)
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   415a4:	00431780 	call	43178 <vTaskEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
   415a8:	e0bfff17 	ldw	r2,-4(fp)
   415ac:	10800e17 	ldw	r2,56(r2)
   415b0:	e0bffe15 	stw	r2,-8(fp)
	taskEXIT_CRITICAL();
   415b4:	00431c40 	call	431c4 <vTaskExitCritical>

	return uxReturn;
   415b8:	e0bffe17 	ldw	r2,-8(fp)
}
   415bc:	e037883a 	mov	sp,fp
   415c0:	dfc00117 	ldw	ra,4(sp)
   415c4:	df000017 	ldw	fp,0(sp)
   415c8:	dec00204 	addi	sp,sp,8
   415cc:	f800283a 	ret

000415d0 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
   415d0:	defffd04 	addi	sp,sp,-12
   415d4:	df000215 	stw	fp,8(sp)
   415d8:	df000204 	addi	fp,sp,8
   415dc:	e13fff15 	stw	r4,-4(fp)
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
   415e0:	e0bfff17 	ldw	r2,-4(fp)
   415e4:	10800e17 	ldw	r2,56(r2)
   415e8:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
   415ec:	e0bffe17 	ldw	r2,-8(fp)
}
   415f0:	e037883a 	mov	sp,fp
   415f4:	df000017 	ldw	fp,0(sp)
   415f8:	dec00104 	addi	sp,sp,4
   415fc:	f800283a 	ret

00041600 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
   41600:	defffd04 	addi	sp,sp,-12
   41604:	dfc00215 	stw	ra,8(sp)
   41608:	df000115 	stw	fp,4(sp)
   4160c:	df000104 	addi	fp,sp,4
   41610:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
   41614:	e0bfff17 	ldw	r2,-4(fp)
   41618:	10800017 	ldw	r2,0(r2)
   4161c:	1009883a 	mov	r4,r2
   41620:	0040bec0 	call	40bec <vPortFree>
	vPortFree( pxQueue );
   41624:	e13fff17 	ldw	r4,-4(fp)
   41628:	0040bec0 	call	40bec <vPortFree>
}
   4162c:	e037883a 	mov	sp,fp
   41630:	dfc00117 	ldw	ra,4(sp)
   41634:	df000017 	ldw	fp,0(sp)
   41638:	dec00204 	addi	sp,sp,8
   4163c:	f800283a 	ret

00041640 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   41640:	defffb04 	addi	sp,sp,-20
   41644:	dfc00415 	stw	ra,16(sp)
   41648:	df000315 	stw	fp,12(sp)
   4164c:	df000304 	addi	fp,sp,12
   41650:	e13ffd15 	stw	r4,-12(fp)
   41654:	e17ffe15 	stw	r5,-8(fp)
   41658:	e1bfff15 	stw	r6,-4(fp)
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   4165c:	e0bffd17 	ldw	r2,-12(fp)
   41660:	10801017 	ldw	r2,64(r2)
   41664:	10000a1e 	bne	r2,zero,41690 <prvCopyDataToQueue+0x50>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   41668:	e0bffd17 	ldw	r2,-12(fp)
   4166c:	10800017 	ldw	r2,0(r2)
   41670:	10003f1e 	bne	r2,zero,41770 <prvCopyDataToQueue+0x130>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   41674:	e0bffd17 	ldw	r2,-12(fp)
   41678:	10800117 	ldw	r2,4(r2)
   4167c:	1009883a 	mov	r4,r2
   41680:	00430ac0 	call	430ac <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
   41684:	e0bffd17 	ldw	r2,-12(fp)
   41688:	10000115 	stw	zero,4(r2)
   4168c:	00003806 	br	41770 <prvCopyDataToQueue+0x130>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   41690:	e0bfff17 	ldw	r2,-4(fp)
   41694:	1000191e 	bne	r2,zero,416fc <prvCopyDataToQueue+0xbc>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   41698:	e0bffd17 	ldw	r2,-12(fp)
   4169c:	10c00217 	ldw	r3,8(r2)
   416a0:	e0bffd17 	ldw	r2,-12(fp)
   416a4:	10801017 	ldw	r2,64(r2)
   416a8:	1809883a 	mov	r4,r3
   416ac:	e17ffe17 	ldw	r5,-8(fp)
   416b0:	100d883a 	mov	r6,r2
   416b4:	00438e80 	call	438e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   416b8:	e0bffd17 	ldw	r2,-12(fp)
   416bc:	10c00217 	ldw	r3,8(r2)
   416c0:	e0bffd17 	ldw	r2,-12(fp)
   416c4:	10801017 	ldw	r2,64(r2)
   416c8:	1887883a 	add	r3,r3,r2
   416cc:	e0bffd17 	ldw	r2,-12(fp)
   416d0:	10c00215 	stw	r3,8(r2)
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   416d4:	e0bffd17 	ldw	r2,-12(fp)
   416d8:	10c00217 	ldw	r3,8(r2)
   416dc:	e0bffd17 	ldw	r2,-12(fp)
   416e0:	10800117 	ldw	r2,4(r2)
   416e4:	18802236 	bltu	r3,r2,41770 <prvCopyDataToQueue+0x130>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   416e8:	e0bffd17 	ldw	r2,-12(fp)
   416ec:	10c00017 	ldw	r3,0(r2)
   416f0:	e0bffd17 	ldw	r2,-12(fp)
   416f4:	10c00215 	stw	r3,8(r2)
   416f8:	00001d06 	br	41770 <prvCopyDataToQueue+0x130>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   416fc:	e0bffd17 	ldw	r2,-12(fp)
   41700:	10c00317 	ldw	r3,12(r2)
   41704:	e0bffd17 	ldw	r2,-12(fp)
   41708:	10801017 	ldw	r2,64(r2)
   4170c:	1809883a 	mov	r4,r3
   41710:	e17ffe17 	ldw	r5,-8(fp)
   41714:	100d883a 	mov	r6,r2
   41718:	00438e80 	call	438e8 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   4171c:	e0bffd17 	ldw	r2,-12(fp)
   41720:	10c00317 	ldw	r3,12(r2)
   41724:	e0bffd17 	ldw	r2,-12(fp)
   41728:	10801017 	ldw	r2,64(r2)
   4172c:	0085c83a 	sub	r2,zero,r2
   41730:	1887883a 	add	r3,r3,r2
   41734:	e0bffd17 	ldw	r2,-12(fp)
   41738:	10c00315 	stw	r3,12(r2)
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   4173c:	e0bffd17 	ldw	r2,-12(fp)
   41740:	10c00317 	ldw	r3,12(r2)
   41744:	e0bffd17 	ldw	r2,-12(fp)
   41748:	10800017 	ldw	r2,0(r2)
   4174c:	1880082e 	bgeu	r3,r2,41770 <prvCopyDataToQueue+0x130>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   41750:	e0bffd17 	ldw	r2,-12(fp)
   41754:	10c00117 	ldw	r3,4(r2)
   41758:	e0bffd17 	ldw	r2,-12(fp)
   4175c:	10801017 	ldw	r2,64(r2)
   41760:	0085c83a 	sub	r2,zero,r2
   41764:	1887883a 	add	r3,r3,r2
   41768:	e0bffd17 	ldw	r2,-12(fp)
   4176c:	10c00315 	stw	r3,12(r2)
		}
	}

	++( pxQueue->uxMessagesWaiting );
   41770:	e0bffd17 	ldw	r2,-12(fp)
   41774:	10800e17 	ldw	r2,56(r2)
   41778:	10c00044 	addi	r3,r2,1
   4177c:	e0bffd17 	ldw	r2,-12(fp)
   41780:	10c00e15 	stw	r3,56(r2)
}
   41784:	e037883a 	mov	sp,fp
   41788:	dfc00117 	ldw	ra,4(sp)
   4178c:	df000017 	ldw	fp,0(sp)
   41790:	dec00204 	addi	sp,sp,8
   41794:	f800283a 	ret

00041798 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   41798:	defffc04 	addi	sp,sp,-16
   4179c:	dfc00315 	stw	ra,12(sp)
   417a0:	df000215 	stw	fp,8(sp)
   417a4:	df000204 	addi	fp,sp,8
   417a8:	e13ffe15 	stw	r4,-8(fp)
   417ac:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   417b0:	e0bffe17 	ldw	r2,-8(fp)
   417b4:	10800017 	ldw	r2,0(r2)
   417b8:	10001826 	beq	r2,zero,4181c <prvCopyDataFromQueue+0x84>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   417bc:	e0bffe17 	ldw	r2,-8(fp)
   417c0:	10c00317 	ldw	r3,12(r2)
   417c4:	e0bffe17 	ldw	r2,-8(fp)
   417c8:	10801017 	ldw	r2,64(r2)
   417cc:	1887883a 	add	r3,r3,r2
   417d0:	e0bffe17 	ldw	r2,-8(fp)
   417d4:	10c00315 	stw	r3,12(r2)
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   417d8:	e0bffe17 	ldw	r2,-8(fp)
   417dc:	10c00317 	ldw	r3,12(r2)
   417e0:	e0bffe17 	ldw	r2,-8(fp)
   417e4:	10800117 	ldw	r2,4(r2)
   417e8:	18800436 	bltu	r3,r2,417fc <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   417ec:	e0bffe17 	ldw	r2,-8(fp)
   417f0:	10c00017 	ldw	r3,0(r2)
   417f4:	e0bffe17 	ldw	r2,-8(fp)
   417f8:	10c00315 	stw	r3,12(r2)
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   417fc:	e0bffe17 	ldw	r2,-8(fp)
   41800:	10c00317 	ldw	r3,12(r2)
   41804:	e0bffe17 	ldw	r2,-8(fp)
   41808:	10801017 	ldw	r2,64(r2)
   4180c:	e13fff17 	ldw	r4,-4(fp)
   41810:	180b883a 	mov	r5,r3
   41814:	100d883a 	mov	r6,r2
   41818:	00438e80 	call	438e8 <memcpy>
	}
}
   4181c:	e037883a 	mov	sp,fp
   41820:	dfc00117 	ldw	ra,4(sp)
   41824:	df000017 	ldw	fp,0(sp)
   41828:	dec00204 	addi	sp,sp,8
   4182c:	f800283a 	ret

00041830 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   41830:	defffd04 	addi	sp,sp,-12
   41834:	dfc00215 	stw	ra,8(sp)
   41838:	df000115 	stw	fp,4(sp)
   4183c:	df000104 	addi	fp,sp,4
   41840:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   41844:	00431780 	call	43178 <vTaskEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   41848:	00001006 	br	4188c <prvUnlockQueue+0x5c>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   4184c:	e0bfff17 	ldw	r2,-4(fp)
   41850:	10800917 	ldw	r2,36(r2)
   41854:	10000c26 	beq	r2,zero,41888 <prvUnlockQueue+0x58>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   41858:	e0bfff17 	ldw	r2,-4(fp)
   4185c:	10800904 	addi	r2,r2,36
   41860:	1009883a 	mov	r4,r2
   41864:	00428d80 	call	428d8 <xTaskRemoveFromEventList>
   41868:	10000126 	beq	r2,zero,41870 <prvUnlockQueue+0x40>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   4186c:	0042ad00 	call	42ad0 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
   41870:	e0bfff17 	ldw	r2,-4(fp)
   41874:	10801217 	ldw	r2,72(r2)
   41878:	10ffffc4 	addi	r3,r2,-1
   4187c:	e0bfff17 	ldw	r2,-4(fp)
   41880:	10c01215 	stw	r3,72(r2)
   41884:	00000106 	br	4188c <prvUnlockQueue+0x5c>
			}
			else
			{
				break;
   41888:	00000306 	br	41898 <prvUnlockQueue+0x68>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   4188c:	e0bfff17 	ldw	r2,-4(fp)
   41890:	10801217 	ldw	r2,72(r2)
   41894:	00bfed16 	blt	zero,r2,4184c <__alt_data_end+0xfffc6ecc>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   41898:	e0bfff17 	ldw	r2,-4(fp)
   4189c:	00ffffc4 	movi	r3,-1
   418a0:	10c01215 	stw	r3,72(r2)
	}
	taskEXIT_CRITICAL();
   418a4:	00431c40 	call	431c4 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   418a8:	00431780 	call	43178 <vTaskEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   418ac:	00001006 	br	418f0 <prvUnlockQueue+0xc0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   418b0:	e0bfff17 	ldw	r2,-4(fp)
   418b4:	10800417 	ldw	r2,16(r2)
   418b8:	10000c26 	beq	r2,zero,418ec <prvUnlockQueue+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   418bc:	e0bfff17 	ldw	r2,-4(fp)
   418c0:	10800404 	addi	r2,r2,16
   418c4:	1009883a 	mov	r4,r2
   418c8:	00428d80 	call	428d8 <xTaskRemoveFromEventList>
   418cc:	10000126 	beq	r2,zero,418d4 <prvUnlockQueue+0xa4>
				{
					vTaskMissedYield();
   418d0:	0042ad00 	call	42ad0 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
   418d4:	e0bfff17 	ldw	r2,-4(fp)
   418d8:	10801117 	ldw	r2,68(r2)
   418dc:	10ffffc4 	addi	r3,r2,-1
   418e0:	e0bfff17 	ldw	r2,-4(fp)
   418e4:	10c01115 	stw	r3,68(r2)
   418e8:	00000106 	br	418f0 <prvUnlockQueue+0xc0>
			}
			else
			{
				break;
   418ec:	00000306 	br	418fc <prvUnlockQueue+0xcc>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   418f0:	e0bfff17 	ldw	r2,-4(fp)
   418f4:	10801117 	ldw	r2,68(r2)
   418f8:	00bfed16 	blt	zero,r2,418b0 <__alt_data_end+0xfffc6f30>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   418fc:	e0bfff17 	ldw	r2,-4(fp)
   41900:	00ffffc4 	movi	r3,-1
   41904:	10c01115 	stw	r3,68(r2)
	}
	taskEXIT_CRITICAL();
   41908:	00431c40 	call	431c4 <vTaskExitCritical>
}
   4190c:	e037883a 	mov	sp,fp
   41910:	dfc00117 	ldw	ra,4(sp)
   41914:	df000017 	ldw	fp,0(sp)
   41918:	dec00204 	addi	sp,sp,8
   4191c:	f800283a 	ret

00041920 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
   41920:	defffc04 	addi	sp,sp,-16
   41924:	dfc00315 	stw	ra,12(sp)
   41928:	df000215 	stw	fp,8(sp)
   4192c:	df000204 	addi	fp,sp,8
   41930:	e13fff15 	stw	r4,-4(fp)
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   41934:	00431780 	call	43178 <vTaskEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   41938:	e0bfff17 	ldw	r2,-4(fp)
   4193c:	10800e17 	ldw	r2,56(r2)
   41940:	1005003a 	cmpeq	r2,r2,zero
   41944:	10803fcc 	andi	r2,r2,255
   41948:	e0bffe15 	stw	r2,-8(fp)
	taskEXIT_CRITICAL();
   4194c:	00431c40 	call	431c4 <vTaskExitCritical>

	return xReturn;
   41950:	e0bffe17 	ldw	r2,-8(fp)
}
   41954:	e037883a 	mov	sp,fp
   41958:	dfc00117 	ldw	ra,4(sp)
   4195c:	df000017 	ldw	fp,0(sp)
   41960:	dec00204 	addi	sp,sp,8
   41964:	f800283a 	ret

00041968 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
   41968:	defffd04 	addi	sp,sp,-12
   4196c:	df000215 	stw	fp,8(sp)
   41970:	df000204 	addi	fp,sp,8
   41974:	e13fff15 	stw	r4,-4(fp)
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   41978:	e0bfff17 	ldw	r2,-4(fp)
   4197c:	10800e17 	ldw	r2,56(r2)
   41980:	1005003a 	cmpeq	r2,r2,zero
   41984:	10803fcc 	andi	r2,r2,255
   41988:	e0bffe15 	stw	r2,-8(fp)

	return xReturn;
   4198c:	e0bffe17 	ldw	r2,-8(fp)
}
   41990:	e037883a 	mov	sp,fp
   41994:	df000017 	ldw	fp,0(sp)
   41998:	dec00104 	addi	sp,sp,4
   4199c:	f800283a 	ret

000419a0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
   419a0:	defffc04 	addi	sp,sp,-16
   419a4:	dfc00315 	stw	ra,12(sp)
   419a8:	df000215 	stw	fp,8(sp)
   419ac:	df000204 	addi	fp,sp,8
   419b0:	e13fff15 	stw	r4,-4(fp)
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   419b4:	00431780 	call	43178 <vTaskEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   419b8:	e0bfff17 	ldw	r2,-4(fp)
   419bc:	10c00e17 	ldw	r3,56(r2)
   419c0:	e0bfff17 	ldw	r2,-4(fp)
   419c4:	10800f17 	ldw	r2,60(r2)
   419c8:	1885003a 	cmpeq	r2,r3,r2
   419cc:	10803fcc 	andi	r2,r2,255
   419d0:	e0bffe15 	stw	r2,-8(fp)
	taskEXIT_CRITICAL();
   419d4:	00431c40 	call	431c4 <vTaskExitCritical>

	return xReturn;
   419d8:	e0bffe17 	ldw	r2,-8(fp)
}
   419dc:	e037883a 	mov	sp,fp
   419e0:	dfc00117 	ldw	ra,4(sp)
   419e4:	df000017 	ldw	fp,0(sp)
   419e8:	dec00204 	addi	sp,sp,8
   419ec:	f800283a 	ret

000419f0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
   419f0:	defffd04 	addi	sp,sp,-12
   419f4:	df000215 	stw	fp,8(sp)
   419f8:	df000204 	addi	fp,sp,8
   419fc:	e13fff15 	stw	r4,-4(fp)
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   41a00:	e0bfff17 	ldw	r2,-4(fp)
   41a04:	10c00e17 	ldw	r3,56(r2)
   41a08:	e0bfff17 	ldw	r2,-4(fp)
   41a0c:	10800f17 	ldw	r2,60(r2)
   41a10:	1885003a 	cmpeq	r2,r3,r2
   41a14:	10803fcc 	andi	r2,r2,255
   41a18:	e0bffe15 	stw	r2,-8(fp)

	return xReturn;
   41a1c:	e0bffe17 	ldw	r2,-8(fp)
}
   41a20:	e037883a 	mov	sp,fp
   41a24:	df000017 	ldw	fp,0(sp)
   41a28:	dec00104 	addi	sp,sp,4
   41a2c:	f800283a 	ret

00041a30 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   41a30:	defff604 	addi	sp,sp,-40
   41a34:	dfc00915 	stw	ra,36(sp)
   41a38:	df000815 	stw	fp,32(sp)
   41a3c:	df000804 	addi	fp,sp,32
   41a40:	e13ffc15 	stw	r4,-16(fp)
   41a44:	e17ffd15 	stw	r5,-12(fp)
   41a48:	3005883a 	mov	r2,r6
   41a4c:	e1ffff15 	stw	r7,-4(fp)
   41a50:	e0bffe0d 	sth	r2,-8(fp)
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   41a54:	e0bffe0b 	ldhu	r2,-8(fp)
   41a58:	1009883a 	mov	r4,r2
   41a5c:	e1400417 	ldw	r5,16(fp)
   41a60:	0042dc80 	call	42dc8 <prvAllocateTCBAndStack>
   41a64:	e0bffa15 	stw	r2,-24(fp)

	if( pxNewTCB != NULL )
   41a68:	e0bffa17 	ldw	r2,-24(fp)
   41a6c:	10005426 	beq	r2,zero,41bc0 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   41a70:	e0bffa17 	ldw	r2,-24(fp)
   41a74:	10c00c17 	ldw	r3,48(r2)
   41a78:	e0bffe0b 	ldhu	r2,-8(fp)
   41a7c:	1085883a 	add	r2,r2,r2
   41a80:	1085883a 	add	r2,r2,r2
   41a84:	10bfff04 	addi	r2,r2,-4
   41a88:	1885883a 	add	r2,r3,r2
   41a8c:	e0bffb15 	stw	r2,-20(fp)
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
   41a90:	e0fffb17 	ldw	r3,-20(fp)
   41a94:	00bfff04 	movi	r2,-4
   41a98:	1884703a 	and	r2,r3,r2
   41a9c:	e0bffb15 	stw	r2,-20(fp)
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   41aa0:	e0bffe0b 	ldhu	r2,-8(fp)
   41aa4:	d8800015 	stw	r2,0(sp)
   41aa8:	e13ffa17 	ldw	r4,-24(fp)
   41aac:	e17ffd17 	ldw	r5,-12(fp)
   41ab0:	e1800217 	ldw	r6,8(fp)
   41ab4:	e1c00517 	ldw	r7,20(fp)
   41ab8:	0042b100 	call	42b10 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   41abc:	e13ffb17 	ldw	r4,-20(fp)
   41ac0:	e17ffc17 	ldw	r5,-16(fp)
   41ac4:	e1bfff17 	ldw	r6,-4(fp)
   41ac8:	00405440 	call	40544 <pxPortInitialiseStack>
   41acc:	1007883a 	mov	r3,r2
   41ad0:	e0bffa17 	ldw	r2,-24(fp)
   41ad4:	10c00015 	stw	r3,0(r2)
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
   41ad8:	e0800317 	ldw	r2,12(fp)
   41adc:	10000326 	beq	r2,zero,41aec <xTaskGenericCreate+0xbc>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   41ae0:	e0800317 	ldw	r2,12(fp)
   41ae4:	e0fffa17 	ldw	r3,-24(fp)
   41ae8:	10c00015 	stw	r3,0(r2)
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   41aec:	00431780 	call	43178 <vTaskEnterCritical>
		{
			uxCurrentNumberOfTasks++;
   41af0:	d0a6da17 	ldw	r2,-25752(gp)
   41af4:	10800044 	addi	r2,r2,1
   41af8:	d0a6da15 	stw	r2,-25752(gp)
			if( pxCurrentTCB == NULL )
   41afc:	d0a6d617 	ldw	r2,-25768(gp)
   41b00:	1000071e 	bne	r2,zero,41b20 <xTaskGenericCreate+0xf0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   41b04:	e0bffa17 	ldw	r2,-24(fp)
   41b08:	d0a6d615 	stw	r2,-25768(gp)

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   41b0c:	d0a6da17 	ldw	r2,-25752(gp)
   41b10:	10800058 	cmpnei	r2,r2,1
   41b14:	10000a1e 	bne	r2,zero,41b40 <xTaskGenericCreate+0x110>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   41b18:	0042bec0 	call	42bec <prvInitialiseTaskLists>
   41b1c:	00000806 	br	41b40 <xTaskGenericCreate+0x110>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   41b20:	d0a6de17 	ldw	r2,-25736(gp)
   41b24:	1000061e 	bne	r2,zero,41b40 <xTaskGenericCreate+0x110>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   41b28:	d0a6d617 	ldw	r2,-25768(gp)
   41b2c:	10800b17 	ldw	r2,44(r2)
   41b30:	e0c00217 	ldw	r3,8(fp)
   41b34:	18800236 	bltu	r3,r2,41b40 <xTaskGenericCreate+0x110>
					{
						pxCurrentTCB = pxNewTCB;
   41b38:	e0bffa17 	ldw	r2,-24(fp)
   41b3c:	d0a6d615 	stw	r2,-25768(gp)
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   41b40:	e0bffa17 	ldw	r2,-24(fp)
   41b44:	10800b17 	ldw	r2,44(r2)
   41b48:	d0e6dc17 	ldw	r3,-25744(gp)
   41b4c:	1880032e 	bgeu	r3,r2,41b5c <xTaskGenericCreate+0x12c>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   41b50:	e0bffa17 	ldw	r2,-24(fp)
   41b54:	10800b17 	ldw	r2,44(r2)
   41b58:	d0a6dc15 	stw	r2,-25744(gp)
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
   41b5c:	d0a6e317 	ldw	r2,-25716(gp)
   41b60:	10800044 	addi	r2,r2,1
   41b64:	d0a6e315 	stw	r2,-25716(gp)

			prvAddTaskToReadyQueue( pxNewTCB );
   41b68:	e0bffa17 	ldw	r2,-24(fp)
   41b6c:	10800b17 	ldw	r2,44(r2)
   41b70:	d0e6dd17 	ldw	r3,-25740(gp)
   41b74:	1880032e 	bgeu	r3,r2,41b84 <xTaskGenericCreate+0x154>
   41b78:	e0bffa17 	ldw	r2,-24(fp)
   41b7c:	10800b17 	ldw	r2,44(r2)
   41b80:	d0a6dd15 	stw	r2,-25740(gp)
   41b84:	e0bffa17 	ldw	r2,-24(fp)
   41b88:	10800b17 	ldw	r2,44(r2)
   41b8c:	10c00524 	muli	r3,r2,20
   41b90:	008001b4 	movhi	r2,6
   41b94:	10be9904 	addi	r2,r2,-1436
   41b98:	1887883a 	add	r3,r3,r2
   41b9c:	e0bffa17 	ldw	r2,-24(fp)
   41ba0:	10800104 	addi	r2,r2,4
   41ba4:	1809883a 	mov	r4,r3
   41ba8:	100b883a 	mov	r5,r2
   41bac:	00403240 	call	40324 <vListInsertEnd>

			xReturn = pdPASS;
   41bb0:	00800044 	movi	r2,1
   41bb4:	e0bff915 	stw	r2,-28(fp)
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   41bb8:	00431c40 	call	431c4 <vTaskExitCritical>
   41bbc:	00000206 	br	41bc8 <xTaskGenericCreate+0x198>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   41bc0:	00bfffc4 	movi	r2,-1
   41bc4:	e0bff915 	stw	r2,-28(fp)
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   41bc8:	e0bff917 	ldw	r2,-28(fp)
   41bcc:	10800058 	cmpnei	r2,r2,1
   41bd0:	1000071e 	bne	r2,zero,41bf0 <xTaskGenericCreate+0x1c0>
	{
		if( xSchedulerRunning != pdFALSE )
   41bd4:	d0a6de17 	ldw	r2,-25736(gp)
   41bd8:	10000526 	beq	r2,zero,41bf0 <xTaskGenericCreate+0x1c0>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   41bdc:	d0a6d617 	ldw	r2,-25768(gp)
   41be0:	10c00b17 	ldw	r3,44(r2)
   41be4:	e0800217 	ldw	r2,8(fp)
   41be8:	1880012e 	bgeu	r3,r2,41bf0 <xTaskGenericCreate+0x1c0>
			{
				portYIELD_WITHIN_API();
   41bec:	003b683a 	trap	0
			}
		}
	}

	return xReturn;
   41bf0:	e0bff917 	ldw	r2,-28(fp)
}
   41bf4:	e037883a 	mov	sp,fp
   41bf8:	dfc00117 	ldw	ra,4(sp)
   41bfc:	df000017 	ldw	fp,0(sp)
   41c00:	dec00204 	addi	sp,sp,8
   41c04:	f800283a 	ret

00041c08 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   41c08:	defffc04 	addi	sp,sp,-16
   41c0c:	dfc00315 	stw	ra,12(sp)
   41c10:	df000215 	stw	fp,8(sp)
   41c14:	df000204 	addi	fp,sp,8
   41c18:	e13fff15 	stw	r4,-4(fp)
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   41c1c:	00431780 	call	43178 <vTaskEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   41c20:	d0a6d617 	ldw	r2,-25768(gp)
   41c24:	e0ffff17 	ldw	r3,-4(fp)
   41c28:	1880011e 	bne	r3,r2,41c30 <vTaskDelete+0x28>
			{
				pxTaskToDelete = NULL;
   41c2c:	e03fff15 	stw	zero,-4(fp)
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   41c30:	e0bfff17 	ldw	r2,-4(fp)
   41c34:	1000021e 	bne	r2,zero,41c40 <vTaskDelete+0x38>
   41c38:	d0a6d617 	ldw	r2,-25768(gp)
   41c3c:	00000106 	br	41c44 <vTaskDelete+0x3c>
   41c40:	e0bfff17 	ldw	r2,-4(fp)
   41c44:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   41c48:	e0bffe17 	ldw	r2,-8(fp)
   41c4c:	10800104 	addi	r2,r2,4
   41c50:	1009883a 	mov	r4,r2
   41c54:	00404900 	call	40490 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
   41c58:	e0bffe17 	ldw	r2,-8(fp)
   41c5c:	10800a17 	ldw	r2,40(r2)
   41c60:	10000426 	beq	r2,zero,41c74 <vTaskDelete+0x6c>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   41c64:	e0bffe17 	ldw	r2,-8(fp)
   41c68:	10800604 	addi	r2,r2,24
   41c6c:	1009883a 	mov	r4,r2
   41c70:	00404900 	call	40490 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   41c74:	e0bffe17 	ldw	r2,-8(fp)
   41c78:	10800104 	addi	r2,r2,4
   41c7c:	010001b4 	movhi	r4,6
   41c80:	213ec104 	addi	r4,r4,-1276
   41c84:	100b883a 	mov	r5,r2
   41c88:	00403240 	call	40324 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   41c8c:	d0a6d917 	ldw	r2,-25756(gp)
   41c90:	10800044 	addi	r2,r2,1
   41c94:	d0a6d915 	stw	r2,-25756(gp)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   41c98:	d0a6e317 	ldw	r2,-25716(gp)
   41c9c:	10800044 	addi	r2,r2,1
   41ca0:	d0a6e315 	stw	r2,-25716(gp)

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   41ca4:	00431c40 	call	431c4 <vTaskExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   41ca8:	d0a6de17 	ldw	r2,-25736(gp)
   41cac:	10000326 	beq	r2,zero,41cbc <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
   41cb0:	e0bfff17 	ldw	r2,-4(fp)
   41cb4:	1000011e 	bne	r2,zero,41cbc <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
   41cb8:	003b683a 	trap	0
			}
		}
	}
   41cbc:	e037883a 	mov	sp,fp
   41cc0:	dfc00117 	ldw	ra,4(sp)
   41cc4:	df000017 	ldw	fp,0(sp)
   41cc8:	dec00204 	addi	sp,sp,8
   41ccc:	f800283a 	ret

00041cd0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   41cd0:	defff904 	addi	sp,sp,-28
   41cd4:	dfc00615 	stw	ra,24(sp)
   41cd8:	df000515 	stw	fp,20(sp)
   41cdc:	df000504 	addi	fp,sp,20
   41ce0:	e13ffe15 	stw	r4,-8(fp)
   41ce4:	e17fff15 	stw	r5,-4(fp)
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
   41ce8:	e03ffb15 	stw	zero,-20(fp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0 ) );

		vTaskSuspendAll();
   41cec:	00423bc0 	call	423bc <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   41cf0:	e0bffe17 	ldw	r2,-8(fp)
   41cf4:	10c00017 	ldw	r3,0(r2)
   41cf8:	e0bfff17 	ldw	r2,-4(fp)
   41cfc:	1885883a 	add	r2,r3,r2
   41d00:	e0bffc15 	stw	r2,-16(fp)

			if( xTickCount < *pxPreviousWakeTime )
   41d04:	e0bffe17 	ldw	r2,-8(fp)
   41d08:	10800017 	ldw	r2,0(r2)
   41d0c:	d0e6db17 	ldw	r3,-25748(gp)
   41d10:	18800a2e 	bgeu	r3,r2,41d3c <vTaskDelayUntil+0x6c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   41d14:	e0bffe17 	ldw	r2,-8(fp)
   41d18:	10800017 	ldw	r2,0(r2)
   41d1c:	e0fffc17 	ldw	r3,-16(fp)
   41d20:	18800f2e 	bgeu	r3,r2,41d60 <vTaskDelayUntil+0x90>
   41d24:	d0e6db17 	ldw	r3,-25748(gp)
   41d28:	e0bffc17 	ldw	r2,-16(fp)
   41d2c:	18800c2e 	bgeu	r3,r2,41d60 <vTaskDelayUntil+0x90>
				{
					xShouldDelay = pdTRUE;
   41d30:	00800044 	movi	r2,1
   41d34:	e0bffb15 	stw	r2,-20(fp)
   41d38:	00000906 	br	41d60 <vTaskDelayUntil+0x90>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   41d3c:	e0bffe17 	ldw	r2,-8(fp)
   41d40:	10800017 	ldw	r2,0(r2)
   41d44:	e0fffc17 	ldw	r3,-16(fp)
   41d48:	18800336 	bltu	r3,r2,41d58 <vTaskDelayUntil+0x88>
   41d4c:	d0e6db17 	ldw	r3,-25748(gp)
   41d50:	e0bffc17 	ldw	r2,-16(fp)
   41d54:	1880022e 	bgeu	r3,r2,41d60 <vTaskDelayUntil+0x90>
				{
					xShouldDelay = pdTRUE;
   41d58:	00800044 	movi	r2,1
   41d5c:	e0bffb15 	stw	r2,-20(fp)
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   41d60:	e0bffe17 	ldw	r2,-8(fp)
   41d64:	e0fffc17 	ldw	r3,-16(fp)
   41d68:	10c00015 	stw	r3,0(r2)

			if( xShouldDelay != pdFALSE )
   41d6c:	e0bffb17 	ldw	r2,-20(fp)
   41d70:	10000626 	beq	r2,zero,41d8c <vTaskDelayUntil+0xbc>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   41d74:	d0a6d617 	ldw	r2,-25768(gp)
   41d78:	10800104 	addi	r2,r2,4
   41d7c:	1009883a 	mov	r4,r2
   41d80:	00404900 	call	40490 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   41d84:	e13ffc17 	ldw	r4,-16(fp)
   41d88:	0042d400 	call	42d40 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   41d8c:	00423e40 	call	423e4 <xTaskResumeAll>
   41d90:	e0bffd15 	stw	r2,-12(fp)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
   41d94:	e0bffd17 	ldw	r2,-12(fp)
   41d98:	1000011e 	bne	r2,zero,41da0 <vTaskDelayUntil+0xd0>
		{
			portYIELD_WITHIN_API();
   41d9c:	003b683a 	trap	0
		}
	}
   41da0:	e037883a 	mov	sp,fp
   41da4:	dfc00117 	ldw	ra,4(sp)
   41da8:	df000017 	ldw	fp,0(sp)
   41dac:	dec00204 	addi	sp,sp,8
   41db0:	f800283a 	ret

00041db4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   41db4:	defffb04 	addi	sp,sp,-20
   41db8:	dfc00415 	stw	ra,16(sp)
   41dbc:	df000315 	stw	fp,12(sp)
   41dc0:	df000304 	addi	fp,sp,12
   41dc4:	e13fff15 	stw	r4,-4(fp)
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   41dc8:	e03ffd15 	stw	zero,-12(fp)

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
   41dcc:	e0bfff17 	ldw	r2,-4(fp)
   41dd0:	10000d26 	beq	r2,zero,41e08 <vTaskDelay+0x54>
		{
			vTaskSuspendAll();
   41dd4:	00423bc0 	call	423bc <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   41dd8:	d0e6db17 	ldw	r3,-25748(gp)
   41ddc:	e0bfff17 	ldw	r2,-4(fp)
   41de0:	1885883a 	add	r2,r3,r2
   41de4:	e0bffe15 	stw	r2,-8(fp)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   41de8:	d0a6d617 	ldw	r2,-25768(gp)
   41dec:	10800104 	addi	r2,r2,4
   41df0:	1009883a 	mov	r4,r2
   41df4:	00404900 	call	40490 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   41df8:	e13ffe17 	ldw	r4,-8(fp)
   41dfc:	0042d400 	call	42d40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
   41e00:	00423e40 	call	423e4 <xTaskResumeAll>
   41e04:	e0bffd15 	stw	r2,-12(fp)
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
   41e08:	e0bffd17 	ldw	r2,-12(fp)
   41e0c:	1000011e 	bne	r2,zero,41e14 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
   41e10:	003b683a 	trap	0
		}
	}
   41e14:	e037883a 	mov	sp,fp
   41e18:	dfc00117 	ldw	ra,4(sp)
   41e1c:	df000017 	ldw	fp,0(sp)
   41e20:	dec00204 	addi	sp,sp,8
   41e24:	f800283a 	ret

00041e28 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
   41e28:	defffb04 	addi	sp,sp,-20
   41e2c:	dfc00415 	stw	ra,16(sp)
   41e30:	df000315 	stw	fp,12(sp)
   41e34:	df000304 	addi	fp,sp,12
   41e38:	e13fff15 	stw	r4,-4(fp)
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
   41e3c:	00431780 	call	43178 <vTaskEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   41e40:	e0bfff17 	ldw	r2,-4(fp)
   41e44:	1000021e 	bne	r2,zero,41e50 <uxTaskPriorityGet+0x28>
   41e48:	d0a6d617 	ldw	r2,-25768(gp)
   41e4c:	00000106 	br	41e54 <uxTaskPriorityGet+0x2c>
   41e50:	e0bfff17 	ldw	r2,-4(fp)
   41e54:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
   41e58:	e0bffd17 	ldw	r2,-12(fp)
   41e5c:	10800b17 	ldw	r2,44(r2)
   41e60:	e0bffe15 	stw	r2,-8(fp)
		}
		taskEXIT_CRITICAL();
   41e64:	00431c40 	call	431c4 <vTaskExitCritical>

		return uxReturn;
   41e68:	e0bffe17 	ldw	r2,-8(fp)
	}
   41e6c:	e037883a 	mov	sp,fp
   41e70:	dfc00117 	ldw	ra,4(sp)
   41e74:	df000017 	ldw	fp,0(sp)
   41e78:	dec00204 	addi	sp,sp,8
   41e7c:	f800283a 	ret

00041e80 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
   41e80:	defff904 	addi	sp,sp,-28
   41e84:	dfc00615 	stw	ra,24(sp)
   41e88:	df000515 	stw	fp,20(sp)
   41e8c:	df000504 	addi	fp,sp,20
   41e90:	e13ffe15 	stw	r4,-8(fp)
   41e94:	e17fff15 	stw	r5,-4(fp)
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
   41e98:	e03ffb15 	stw	zero,-20(fp)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
   41e9c:	e0bfff17 	ldw	r2,-4(fp)
   41ea0:	10800170 	cmpltui	r2,r2,5
   41ea4:	1000021e 	bne	r2,zero,41eb0 <vTaskPrioritySet+0x30>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   41ea8:	00800104 	movi	r2,4
   41eac:	e0bfff15 	stw	r2,-4(fp)
		}

		taskENTER_CRITICAL();
   41eb0:	00431780 	call	43178 <vTaskEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
   41eb4:	d0a6d617 	ldw	r2,-25768(gp)
   41eb8:	e0fffe17 	ldw	r3,-8(fp)
   41ebc:	1880011e 	bne	r3,r2,41ec4 <vTaskPrioritySet+0x44>
			{
				pxTask = NULL;
   41ec0:	e03ffe15 	stw	zero,-8(fp)
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   41ec4:	e0bffe17 	ldw	r2,-8(fp)
   41ec8:	1000021e 	bne	r2,zero,41ed4 <vTaskPrioritySet+0x54>
   41ecc:	d0a6d617 	ldw	r2,-25768(gp)
   41ed0:	00000106 	br	41ed8 <vTaskPrioritySet+0x58>
   41ed4:	e0bffe17 	ldw	r2,-8(fp)
   41ed8:	e0bffc15 	stw	r2,-16(fp)

			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
   41edc:	e0bffc17 	ldw	r2,-16(fp)
   41ee0:	10801017 	ldw	r2,64(r2)
   41ee4:	e0bffd15 	stw	r2,-12(fp)
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
   41ee8:	e0fffd17 	ldw	r3,-12(fp)
   41eec:	e0bfff17 	ldw	r2,-4(fp)
   41ef0:	18803e26 	beq	r3,r2,41fec <vTaskPrioritySet+0x16c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
   41ef4:	e0bfff17 	ldw	r2,-4(fp)
   41ef8:	e0fffd17 	ldw	r3,-12(fp)
   41efc:	1880052e 	bgeu	r3,r2,41f14 <vTaskPrioritySet+0x94>
				{
					if( pxTask != NULL )
   41f00:	e0bffe17 	ldw	r2,-8(fp)
   41f04:	10000726 	beq	r2,zero,41f24 <vTaskPrioritySet+0xa4>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
   41f08:	00800044 	movi	r2,1
   41f0c:	e0bffb15 	stw	r2,-20(fp)
   41f10:	00000406 	br	41f24 <vTaskPrioritySet+0xa4>
					}
				}
				else if( pxTask == NULL )
   41f14:	e0bffe17 	ldw	r2,-8(fp)
   41f18:	1000021e 	bne	r2,zero,41f24 <vTaskPrioritySet+0xa4>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
   41f1c:	00800044 	movi	r2,1
   41f20:	e0bffb15 	stw	r2,-20(fp)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
   41f24:	e0bffc17 	ldw	r2,-16(fp)
   41f28:	10c01017 	ldw	r3,64(r2)
   41f2c:	e0bffc17 	ldw	r2,-16(fp)
   41f30:	10800b17 	ldw	r2,44(r2)
   41f34:	1880031e 	bne	r3,r2,41f44 <vTaskPrioritySet+0xc4>
					{
						pxTCB->uxPriority = uxNewPriority;
   41f38:	e0bffc17 	ldw	r2,-16(fp)
   41f3c:	e0ffff17 	ldw	r3,-4(fp)
   41f40:	10c00b15 	stw	r3,44(r2)
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
   41f44:	e0bffc17 	ldw	r2,-16(fp)
   41f48:	e0ffff17 	ldw	r3,-4(fp)
   41f4c:	10c01015 	stw	r3,64(r2)
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
   41f50:	00c00144 	movi	r3,5
   41f54:	e0bfff17 	ldw	r2,-4(fp)
   41f58:	1887c83a 	sub	r3,r3,r2
   41f5c:	e0bffc17 	ldw	r2,-16(fp)
   41f60:	10c00615 	stw	r3,24(r2)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
   41f64:	e0bffc17 	ldw	r2,-16(fp)
   41f68:	10c00517 	ldw	r3,20(r2)
   41f6c:	e0bffd17 	ldw	r2,-12(fp)
   41f70:	11000524 	muli	r4,r2,20
   41f74:	008001b4 	movhi	r2,6
   41f78:	10be9904 	addi	r2,r2,-1436
   41f7c:	2085883a 	add	r2,r4,r2
   41f80:	1880161e 	bne	r3,r2,41fdc <vTaskPrioritySet+0x15c>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
   41f84:	e0bffc17 	ldw	r2,-16(fp)
   41f88:	10800104 	addi	r2,r2,4
   41f8c:	1009883a 	mov	r4,r2
   41f90:	00404900 	call	40490 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   41f94:	e0bffc17 	ldw	r2,-16(fp)
   41f98:	10800b17 	ldw	r2,44(r2)
   41f9c:	d0e6dd17 	ldw	r3,-25740(gp)
   41fa0:	1880032e 	bgeu	r3,r2,41fb0 <vTaskPrioritySet+0x130>
   41fa4:	e0bffc17 	ldw	r2,-16(fp)
   41fa8:	10800b17 	ldw	r2,44(r2)
   41fac:	d0a6dd15 	stw	r2,-25740(gp)
   41fb0:	e0bffc17 	ldw	r2,-16(fp)
   41fb4:	10800b17 	ldw	r2,44(r2)
   41fb8:	10c00524 	muli	r3,r2,20
   41fbc:	008001b4 	movhi	r2,6
   41fc0:	10be9904 	addi	r2,r2,-1436
   41fc4:	1887883a 	add	r3,r3,r2
   41fc8:	e0bffc17 	ldw	r2,-16(fp)
   41fcc:	10800104 	addi	r2,r2,4
   41fd0:	1809883a 	mov	r4,r3
   41fd4:	100b883a 	mov	r5,r2
   41fd8:	00403240 	call	40324 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
   41fdc:	e0bffb17 	ldw	r2,-20(fp)
   41fe0:	10800058 	cmpnei	r2,r2,1
   41fe4:	1000011e 	bne	r2,zero,41fec <vTaskPrioritySet+0x16c>
				{
					portYIELD_WITHIN_API();
   41fe8:	003b683a 	trap	0
				}
			}
		}
		taskEXIT_CRITICAL();
   41fec:	00431c40 	call	431c4 <vTaskExitCritical>
	}
   41ff0:	e037883a 	mov	sp,fp
   41ff4:	dfc00117 	ldw	ra,4(sp)
   41ff8:	df000017 	ldw	fp,0(sp)
   41ffc:	dec00204 	addi	sp,sp,8
   42000:	f800283a 	ret

00042004 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
   42004:	defffc04 	addi	sp,sp,-16
   42008:	dfc00315 	stw	ra,12(sp)
   4200c:	df000215 	stw	fp,8(sp)
   42010:	df000204 	addi	fp,sp,8
   42014:	e13fff15 	stw	r4,-4(fp)
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   42018:	00431780 	call	43178 <vTaskEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
   4201c:	d0a6d617 	ldw	r2,-25768(gp)
   42020:	e0ffff17 	ldw	r3,-4(fp)
   42024:	1880011e 	bne	r3,r2,4202c <vTaskSuspend+0x28>
			{
				pxTaskToSuspend = NULL;
   42028:	e03fff15 	stw	zero,-4(fp)
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
   4202c:	e0bfff17 	ldw	r2,-4(fp)
   42030:	1000021e 	bne	r2,zero,4203c <vTaskSuspend+0x38>
   42034:	d0a6d617 	ldw	r2,-25768(gp)
   42038:	00000106 	br	42040 <vTaskSuspend+0x3c>
   4203c:	e0bfff17 	ldw	r2,-4(fp)
   42040:	e0bffe15 	stw	r2,-8(fp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   42044:	e0bffe17 	ldw	r2,-8(fp)
   42048:	10800104 	addi	r2,r2,4
   4204c:	1009883a 	mov	r4,r2
   42050:	00404900 	call	40490 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
   42054:	e0bffe17 	ldw	r2,-8(fp)
   42058:	10800a17 	ldw	r2,40(r2)
   4205c:	10000426 	beq	r2,zero,42070 <vTaskSuspend+0x6c>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   42060:	e0bffe17 	ldw	r2,-8(fp)
   42064:	10800604 	addi	r2,r2,24
   42068:	1009883a 	mov	r4,r2
   4206c:	00404900 	call	40490 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
   42070:	e0bffe17 	ldw	r2,-8(fp)
   42074:	10800104 	addi	r2,r2,4
   42078:	010001b4 	movhi	r4,6
   4207c:	213ec604 	addi	r4,r4,-1256
   42080:	100b883a 	mov	r5,r2
   42084:	00403240 	call	40324 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
   42088:	00431c40 	call	431c4 <vTaskExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
   4208c:	e0bfff17 	ldw	r2,-4(fp)
   42090:	10000c1e 	bne	r2,zero,420c4 <vTaskSuspend+0xc0>
		{
			if( xSchedulerRunning != pdFALSE )
   42094:	d0a6de17 	ldw	r2,-25736(gp)
   42098:	10000226 	beq	r2,zero,420a4 <vTaskSuspend+0xa0>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
   4209c:	003b683a 	trap	0
   420a0:	00000806 	br	420c4 <vTaskSuspend+0xc0>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) 
   420a4:	008001b4 	movhi	r2,6
   420a8:	10bec604 	addi	r2,r2,-1256
   420ac:	10c00017 	ldw	r3,0(r2)
   420b0:	d0a6da17 	ldw	r2,-25752(gp)
   420b4:	1880021e 	bne	r3,r2,420c0 <vTaskSuspend+0xbc>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
   420b8:	d026d615 	stw	zero,-25768(gp)
   420bc:	00000106 	br	420c4 <vTaskSuspend+0xc0>
				}
				else
				{
					vTaskSwitchContext();
   420c0:	004271c0 	call	4271c <vTaskSwitchContext>
				}
			}
		}
	}
   420c4:	e037883a 	mov	sp,fp
   420c8:	dfc00117 	ldw	ra,4(sp)
   420cc:	df000017 	ldw	fp,0(sp)
   420d0:	dec00204 	addi	sp,sp,8
   420d4:	f800283a 	ret

000420d8 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
   420d8:	defffc04 	addi	sp,sp,-16
   420dc:	df000315 	stw	fp,12(sp)
   420e0:	df000304 	addi	fp,sp,12
   420e4:	e13fff15 	stw	r4,-4(fp)
	portBASE_TYPE xReturn = pdFALSE;
   420e8:	e03ffd15 	stw	zero,-12(fp)
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
   420ec:	e0bfff17 	ldw	r2,-4(fp)
   420f0:	e0bffe15 	stw	r2,-8(fp)
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
   420f4:	e0bffe17 	ldw	r2,-8(fp)
   420f8:	10c00517 	ldw	r3,20(r2)
   420fc:	008001b4 	movhi	r2,6
   42100:	10bec604 	addi	r2,r2,-1256
   42104:	18800a1e 	bne	r3,r2,42130 <xTaskIsTaskSuspended+0x58>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
   42108:	e0bffe17 	ldw	r2,-8(fp)
   4210c:	10c00a17 	ldw	r3,40(r2)
   42110:	008001b4 	movhi	r2,6
   42114:	10bebc04 	addi	r2,r2,-1296
   42118:	18800526 	beq	r3,r2,42130 <xTaskIsTaskSuspended+0x58>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
   4211c:	e0bffe17 	ldw	r2,-8(fp)
   42120:	10800a17 	ldw	r2,40(r2)
   42124:	1000021e 	bne	r2,zero,42130 <xTaskIsTaskSuspended+0x58>
				{
					xReturn = pdTRUE;
   42128:	00800044 	movi	r2,1
   4212c:	e0bffd15 	stw	r2,-12(fp)
				}
			}
		}

		return xReturn;
   42130:	e0bffd17 	ldw	r2,-12(fp)
	}
   42134:	e037883a 	mov	sp,fp
   42138:	df000017 	ldw	fp,0(sp)
   4213c:	dec00104 	addi	sp,sp,4
   42140:	f800283a 	ret

00042144 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
   42144:	defffc04 	addi	sp,sp,-16
   42148:	dfc00315 	stw	ra,12(sp)
   4214c:	df000215 	stw	fp,8(sp)
   42150:	df000204 	addi	fp,sp,8
   42154:	e13fff15 	stw	r4,-4(fp)
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
   42158:	e0bfff17 	ldw	r2,-4(fp)
   4215c:	e0bffe15 	stw	r2,-8(fp)

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   42160:	e0bffe17 	ldw	r2,-8(fp)
   42164:	10002526 	beq	r2,zero,421fc <vTaskResume+0xb8>
   42168:	d0a6d617 	ldw	r2,-25768(gp)
   4216c:	e0fffe17 	ldw	r3,-8(fp)
   42170:	18802226 	beq	r3,r2,421fc <vTaskResume+0xb8>
		{
			taskENTER_CRITICAL();
   42174:	00431780 	call	43178 <vTaskEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   42178:	e13ffe17 	ldw	r4,-8(fp)
   4217c:	00420d80 	call	420d8 <xTaskIsTaskSuspended>
   42180:	10800058 	cmpnei	r2,r2,1
   42184:	10001c1e 	bne	r2,zero,421f8 <vTaskResume+0xb4>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
   42188:	e0bffe17 	ldw	r2,-8(fp)
   4218c:	10800104 	addi	r2,r2,4
   42190:	1009883a 	mov	r4,r2
   42194:	00404900 	call	40490 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   42198:	e0bffe17 	ldw	r2,-8(fp)
   4219c:	10800b17 	ldw	r2,44(r2)
   421a0:	d0e6dd17 	ldw	r3,-25740(gp)
   421a4:	1880032e 	bgeu	r3,r2,421b4 <vTaskResume+0x70>
   421a8:	e0bffe17 	ldw	r2,-8(fp)
   421ac:	10800b17 	ldw	r2,44(r2)
   421b0:	d0a6dd15 	stw	r2,-25740(gp)
   421b4:	e0bffe17 	ldw	r2,-8(fp)
   421b8:	10800b17 	ldw	r2,44(r2)
   421bc:	10c00524 	muli	r3,r2,20
   421c0:	008001b4 	movhi	r2,6
   421c4:	10be9904 	addi	r2,r2,-1436
   421c8:	1887883a 	add	r3,r3,r2
   421cc:	e0bffe17 	ldw	r2,-8(fp)
   421d0:	10800104 	addi	r2,r2,4
   421d4:	1809883a 	mov	r4,r3
   421d8:	100b883a 	mov	r5,r2
   421dc:	00403240 	call	40324 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   421e0:	e0bffe17 	ldw	r2,-8(fp)
   421e4:	10c00b17 	ldw	r3,44(r2)
   421e8:	d0a6d617 	ldw	r2,-25768(gp)
   421ec:	10800b17 	ldw	r2,44(r2)
   421f0:	18800136 	bltu	r3,r2,421f8 <vTaskResume+0xb4>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
   421f4:	003b683a 	trap	0
					}
				}
			}
			taskEXIT_CRITICAL();
   421f8:	00431c40 	call	431c4 <vTaskExitCritical>
		}
	}
   421fc:	e037883a 	mov	sp,fp
   42200:	dfc00117 	ldw	ra,4(sp)
   42204:	df000017 	ldw	fp,0(sp)
   42208:	dec00204 	addi	sp,sp,8
   4220c:	f800283a 	ret

00042210 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
   42210:	defffb04 	addi	sp,sp,-20
   42214:	dfc00415 	stw	ra,16(sp)
   42218:	df000315 	stw	fp,12(sp)
   4221c:	df000304 	addi	fp,sp,12
   42220:	e13fff15 	stw	r4,-4(fp)
	portBASE_TYPE xYieldRequired = pdFALSE;
   42224:	e03ffd15 	stw	zero,-12(fp)
	tskTCB *pxTCB;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
   42228:	e0bfff17 	ldw	r2,-4(fp)
   4222c:	e0bffe15 	stw	r2,-8(fp)

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   42230:	e13ffe17 	ldw	r4,-8(fp)
   42234:	00420d80 	call	420d8 <xTaskIsTaskSuspended>
   42238:	10800058 	cmpnei	r2,r2,1
   4223c:	1000261e 	bne	r2,zero,422d8 <xTaskResumeFromISR+0xc8>
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   42240:	d0a6df17 	ldw	r2,-25732(gp)
   42244:	10001e1e 	bne	r2,zero,422c0 <xTaskResumeFromISR+0xb0>
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
   42248:	e0bffe17 	ldw	r2,-8(fp)
   4224c:	10c00b17 	ldw	r3,44(r2)
   42250:	d0a6d617 	ldw	r2,-25768(gp)
   42254:	10800b17 	ldw	r2,44(r2)
   42258:	1885403a 	cmpgeu	r2,r3,r2
   4225c:	10803fcc 	andi	r2,r2,255
   42260:	e0bffd15 	stw	r2,-12(fp)
				vListRemove(  &( pxTCB->xGenericListItem ) );
   42264:	e0bffe17 	ldw	r2,-8(fp)
   42268:	10800104 	addi	r2,r2,4
   4226c:	1009883a 	mov	r4,r2
   42270:	00404900 	call	40490 <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
   42274:	e0bffe17 	ldw	r2,-8(fp)
   42278:	10800b17 	ldw	r2,44(r2)
   4227c:	d0e6dd17 	ldw	r3,-25740(gp)
   42280:	1880032e 	bgeu	r3,r2,42290 <xTaskResumeFromISR+0x80>
   42284:	e0bffe17 	ldw	r2,-8(fp)
   42288:	10800b17 	ldw	r2,44(r2)
   4228c:	d0a6dd15 	stw	r2,-25740(gp)
   42290:	e0bffe17 	ldw	r2,-8(fp)
   42294:	10800b17 	ldw	r2,44(r2)
   42298:	10c00524 	muli	r3,r2,20
   4229c:	008001b4 	movhi	r2,6
   422a0:	10be9904 	addi	r2,r2,-1436
   422a4:	1887883a 	add	r3,r3,r2
   422a8:	e0bffe17 	ldw	r2,-8(fp)
   422ac:	10800104 	addi	r2,r2,4
   422b0:	1809883a 	mov	r4,r3
   422b4:	100b883a 	mov	r5,r2
   422b8:	00403240 	call	40324 <vListInsertEnd>
   422bc:	00000606 	br	422d8 <xTaskResumeFromISR+0xc8>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   422c0:	e0bffe17 	ldw	r2,-8(fp)
   422c4:	10800604 	addi	r2,r2,24
   422c8:	010001b4 	movhi	r4,6
   422cc:	213ebc04 	addi	r4,r4,-1296
   422d0:	100b883a 	mov	r5,r2
   422d4:	00403240 	call	40324 <vListInsertEnd>
			}
		}

		return xYieldRequired;
   422d8:	e0bffd17 	ldw	r2,-12(fp)
	}
   422dc:	e037883a 	mov	sp,fp
   422e0:	dfc00117 	ldw	ra,4(sp)
   422e4:	df000017 	ldw	fp,0(sp)
   422e8:	dec00204 	addi	sp,sp,8
   422ec:	f800283a 	ret

000422f0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   422f0:	defff804 	addi	sp,sp,-32
   422f4:	dfc00715 	stw	ra,28(sp)
   422f8:	df000615 	stw	fp,24(sp)
   422fc:	df000604 	addi	fp,sp,24
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
   42300:	d8000015 	stw	zero,0(sp)
   42304:	d8000115 	stw	zero,4(sp)
   42308:	d8000215 	stw	zero,8(sp)
   4230c:	d8000315 	stw	zero,12(sp)
   42310:	01000134 	movhi	r4,4
   42314:	210abd04 	addi	r4,r4,10996
   42318:	01400174 	movhi	r5,5
   4231c:	29491704 	addi	r5,r5,9308
   42320:	01810004 	movi	r6,1024
   42324:	000f883a 	mov	r7,zero
   42328:	0041a300 	call	41a30 <xTaskGenericCreate>
   4232c:	e0bffe15 	stw	r2,-8(fp)
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
   42330:	e0bffe17 	ldw	r2,-8(fp)
   42334:	10800058 	cmpnei	r2,r2,1
   42338:	10000a1e 	bne	r2,zero,42364 <vTaskStartScheduler+0x74>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4233c:	0005303a 	rdctl	r2,status
   42340:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42344:	e0ffff17 	ldw	r3,-4(fp)
   42348:	00bfff84 	movi	r2,-2
   4234c:	1884703a 	and	r2,r3,r2
   42350:	1001703a 	wrctl	status,r2

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();

		xSchedulerRunning = pdTRUE;
   42354:	00800044 	movi	r2,1
   42358:	d0a6de15 	stw	r2,-25736(gp)
		xTickCount = ( portTickType ) 0;
   4235c:	d026db15 	stw	zero,-25748(gp)
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
   42360:	00406240 	call	40624 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
   42364:	e037883a 	mov	sp,fp
   42368:	dfc00117 	ldw	ra,4(sp)
   4236c:	df000017 	ldw	fp,0(sp)
   42370:	dec00204 	addi	sp,sp,8
   42374:	f800283a 	ret

00042378 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
   42378:	defffd04 	addi	sp,sp,-12
   4237c:	dfc00215 	stw	ra,8(sp)
   42380:	df000115 	stw	fp,4(sp)
   42384:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42388:	0005303a 	rdctl	r2,status
   4238c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42390:	e0ffff17 	ldw	r3,-4(fp)
   42394:	00bfff84 	movi	r2,-2
   42398:	1884703a 	and	r2,r3,r2
   4239c:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
   423a0:	d026de15 	stw	zero,-25736(gp)
	vPortEndScheduler();
   423a4:	004065c0 	call	4065c <vPortEndScheduler>
}
   423a8:	e037883a 	mov	sp,fp
   423ac:	dfc00117 	ldw	ra,4(sp)
   423b0:	df000017 	ldw	fp,0(sp)
   423b4:	dec00204 	addi	sp,sp,8
   423b8:	f800283a 	ret

000423bc <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   423bc:	deffff04 	addi	sp,sp,-4
   423c0:	df000015 	stw	fp,0(sp)
   423c4:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   423c8:	d0a6df17 	ldw	r2,-25732(gp)
   423cc:	10800044 	addi	r2,r2,1
   423d0:	d0a6df15 	stw	r2,-25732(gp)
}
   423d4:	e037883a 	mov	sp,fp
   423d8:	df000017 	ldw	fp,0(sp)
   423dc:	dec00104 	addi	sp,sp,4
   423e0:	f800283a 	ret

000423e4 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   423e4:	defffb04 	addi	sp,sp,-20
   423e8:	dfc00415 	stw	ra,16(sp)
   423ec:	df000315 	stw	fp,12(sp)
   423f0:	dc000215 	stw	r16,8(sp)
   423f4:	df000304 	addi	fp,sp,12
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   423f8:	e03ffd15 	stw	zero,-12(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   423fc:	00431780 	call	43178 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
   42400:	d0a6df17 	ldw	r2,-25732(gp)
   42404:	10bfffc4 	addi	r2,r2,-1
   42408:	d0a6df15 	stw	r2,-25732(gp)

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   4240c:	d0a6df17 	ldw	r2,-25732(gp)
   42410:	10003b1e 	bne	r2,zero,42500 <xTaskResumeAll+0x11c>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
   42414:	d0a6da17 	ldw	r2,-25752(gp)
   42418:	10003926 	beq	r2,zero,42500 <xTaskResumeAll+0x11c>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
   4241c:	e03ffe15 	stw	zero,-8(fp)

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   42420:	00001e06 	br	4249c <xTaskResumeAll+0xb8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   42424:	008001b4 	movhi	r2,6
   42428:	10bebc04 	addi	r2,r2,-1296
   4242c:	10800317 	ldw	r2,12(r2)
   42430:	14000317 	ldw	r16,12(r2)
					vListRemove( &( pxTCB->xEventListItem ) );
   42434:	80800604 	addi	r2,r16,24
   42438:	1009883a 	mov	r4,r2
   4243c:	00404900 	call	40490 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
   42440:	80800104 	addi	r2,r16,4
   42444:	1009883a 	mov	r4,r2
   42448:	00404900 	call	40490 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   4244c:	80800b17 	ldw	r2,44(r16)
   42450:	d0e6dd17 	ldw	r3,-25740(gp)
   42454:	1880022e 	bgeu	r3,r2,42460 <xTaskResumeAll+0x7c>
   42458:	80800b17 	ldw	r2,44(r16)
   4245c:	d0a6dd15 	stw	r2,-25740(gp)
   42460:	80800b17 	ldw	r2,44(r16)
   42464:	10c00524 	muli	r3,r2,20
   42468:	008001b4 	movhi	r2,6
   4246c:	10be9904 	addi	r2,r2,-1436
   42470:	1887883a 	add	r3,r3,r2
   42474:	80800104 	addi	r2,r16,4
   42478:	1809883a 	mov	r4,r3
   4247c:	100b883a 	mov	r5,r2
   42480:	00403240 	call	40324 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   42484:	80c00b17 	ldw	r3,44(r16)
   42488:	d0a6d617 	ldw	r2,-25768(gp)
   4248c:	10800b17 	ldw	r2,44(r2)
   42490:	18800236 	bltu	r3,r2,4249c <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
   42494:	00800044 	movi	r2,1
   42498:	e0bffe15 	stw	r2,-8(fp)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   4249c:	008001b4 	movhi	r2,6
   424a0:	10bebc04 	addi	r2,r2,-1296
   424a4:	10800017 	ldw	r2,0(r2)
   424a8:	103fde1e 	bne	r2,zero,42424 <__alt_data_end+0xfffc7aa4>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
   424ac:	d0a6e017 	ldw	r2,-25728(gp)
   424b0:	10000926 	beq	r2,zero,424d8 <xTaskResumeAll+0xf4>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
   424b4:	00000406 	br	424c8 <xTaskResumeAll+0xe4>
					{
						vTaskIncrementTick();
   424b8:	00425a40 	call	425a4 <vTaskIncrementTick>
						--uxMissedTicks;
   424bc:	d0a6e017 	ldw	r2,-25728(gp)
   424c0:	10bfffc4 	addi	r2,r2,-1
   424c4:	d0a6e015 	stw	r2,-25728(gp)
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
   424c8:	d0a6e017 	ldw	r2,-25728(gp)
   424cc:	103ffa1e 	bne	r2,zero,424b8 <__alt_data_end+0xfffc7b38>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
   424d0:	00800044 	movi	r2,1
   424d4:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   424d8:	e0bffe17 	ldw	r2,-8(fp)
   424dc:	10800060 	cmpeqi	r2,r2,1
   424e0:	1000031e 	bne	r2,zero,424f0 <xTaskResumeAll+0x10c>
   424e4:	d0a6e117 	ldw	r2,-25724(gp)
   424e8:	10800058 	cmpnei	r2,r2,1
   424ec:	1000041e 	bne	r2,zero,42500 <xTaskResumeAll+0x11c>
				{
					xAlreadyYielded = pdTRUE;
   424f0:	00800044 	movi	r2,1
   424f4:	e0bffd15 	stw	r2,-12(fp)
					xMissedYield = pdFALSE;
   424f8:	d026e115 	stw	zero,-25724(gp)
					portYIELD_WITHIN_API();
   424fc:	003b683a 	trap	0
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   42500:	00431c40 	call	431c4 <vTaskExitCritical>

	return xAlreadyYielded;
   42504:	e0bffd17 	ldw	r2,-12(fp)
}
   42508:	e6ffff04 	addi	sp,fp,-4
   4250c:	dfc00217 	ldw	ra,8(sp)
   42510:	df000117 	ldw	fp,4(sp)
   42514:	dc000017 	ldw	r16,0(sp)
   42518:	dec00304 	addi	sp,sp,12
   4251c:	f800283a 	ret

00042520 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   42520:	defffd04 	addi	sp,sp,-12
   42524:	dfc00215 	stw	ra,8(sp)
   42528:	df000115 	stw	fp,4(sp)
   4252c:	df000104 	addi	fp,sp,4
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   42530:	00431780 	call	43178 <vTaskEnterCritical>
	{
		xTicks = xTickCount;
   42534:	d0a6db17 	ldw	r2,-25748(gp)
   42538:	e0bfff15 	stw	r2,-4(fp)
	}
	taskEXIT_CRITICAL();
   4253c:	00431c40 	call	431c4 <vTaskExitCritical>

	return xTicks;
   42540:	e0bfff17 	ldw	r2,-4(fp)
}
   42544:	e037883a 	mov	sp,fp
   42548:	dfc00117 	ldw	ra,4(sp)
   4254c:	df000017 	ldw	fp,0(sp)
   42550:	dec00204 	addi	sp,sp,8
   42554:	f800283a 	ret

00042558 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   42558:	defffd04 	addi	sp,sp,-12
   4255c:	df000215 	stw	fp,8(sp)
   42560:	df000204 	addi	fp,sp,8
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   42564:	e03ffe15 	stw	zero,-8(fp)
	xReturn = xTickCount;
   42568:	d0a6db17 	ldw	r2,-25748(gp)
   4256c:	e0bfff15 	stw	r2,-4(fp)
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   42570:	e0bfff17 	ldw	r2,-4(fp)
}
   42574:	e037883a 	mov	sp,fp
   42578:	df000017 	ldw	fp,0(sp)
   4257c:	dec00104 	addi	sp,sp,4
   42580:	f800283a 	ret

00042584 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
   42584:	deffff04 	addi	sp,sp,-4
   42588:	df000015 	stw	fp,0(sp)
   4258c:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
   42590:	d0a6da17 	ldw	r2,-25752(gp)
}
   42594:	e037883a 	mov	sp,fp
   42598:	df000017 	ldw	fp,0(sp)
   4259c:	dec00104 	addi	sp,sp,4
   425a0:	f800283a 	ret

000425a4 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
   425a4:	defffb04 	addi	sp,sp,-20
   425a8:	dfc00415 	stw	ra,16(sp)
   425ac:	df000315 	stw	fp,12(sp)
   425b0:	df000304 	addi	fp,sp,12
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   425b4:	d0a6df17 	ldw	r2,-25732(gp)
   425b8:	1000501e 	bne	r2,zero,426fc <vTaskIncrementTick+0x158>
	{
		++xTickCount;
   425bc:	d0a6db17 	ldw	r2,-25748(gp)
   425c0:	10800044 	addi	r2,r2,1
   425c4:	d0a6db15 	stw	r2,-25748(gp)
		if( xTickCount == ( portTickType ) 0 )
   425c8:	d0a6db17 	ldw	r2,-25748(gp)
   425cc:	1000161e 	bne	r2,zero,42628 <vTaskIncrementTick+0x84>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
   425d0:	d0a6d717 	ldw	r2,-25764(gp)
   425d4:	e0bffd15 	stw	r2,-12(fp)
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   425d8:	d0a6d817 	ldw	r2,-25760(gp)
   425dc:	d0a6d715 	stw	r2,-25764(gp)
			pxOverflowDelayedTaskList = pxTemp;
   425e0:	e0bffd17 	ldw	r2,-12(fp)
   425e4:	d0a6d815 	stw	r2,-25760(gp)
			xNumOfOverflows++;
   425e8:	d0a6e217 	ldw	r2,-25720(gp)
   425ec:	10800044 	addi	r2,r2,1
   425f0:	d0a6e215 	stw	r2,-25720(gp)
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   425f4:	d0a6d717 	ldw	r2,-25764(gp)
   425f8:	10800017 	ldw	r2,0(r2)
   425fc:	1000031e 	bne	r2,zero,4260c <vTaskIncrementTick+0x68>
				/* The new current delayed list is empty.  Set 
				xNextTaskUnblockTime to the maximum possible value so it is 
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until 
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   42600:	00bfffc4 	movi	r2,-1
   42604:	d0a00215 	stw	r2,-32760(gp)
   42608:	00000706 	br	42628 <vTaskIncrementTick+0x84>
			{
				/* The new current delayed list is not empty, get the value of 
				the item at the head of the delayed list.  This is the time at 
				which the task at the head of the delayed list should be removed 
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   4260c:	d0a6d717 	ldw	r2,-25764(gp)
   42610:	10800317 	ldw	r2,12(r2)
   42614:	10800317 	ldw	r2,12(r2)
   42618:	e0bffe15 	stw	r2,-8(fp)
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   4261c:	e0bffe17 	ldw	r2,-8(fp)
   42620:	10800117 	ldw	r2,4(r2)
   42624:	d0a00215 	stw	r2,-32760(gp)
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   42628:	d0e6db17 	ldw	r3,-25748(gp)
   4262c:	d0a00217 	ldw	r2,-32760(gp)
   42630:	18803136 	bltu	r3,r2,426f8 <vTaskIncrementTick+0x154>
   42634:	d0a6d717 	ldw	r2,-25764(gp)
   42638:	10800017 	ldw	r2,0(r2)
   4263c:	1000031e 	bne	r2,zero,4264c <vTaskIncrementTick+0xa8>
   42640:	00bfffc4 	movi	r2,-1
   42644:	d0a00215 	stw	r2,-32760(gp)
   42648:	00002b06 	br	426f8 <vTaskIncrementTick+0x154>
   4264c:	d0a6d717 	ldw	r2,-25764(gp)
   42650:	10800317 	ldw	r2,12(r2)
   42654:	10800317 	ldw	r2,12(r2)
   42658:	e0bffe15 	stw	r2,-8(fp)
   4265c:	e0bffe17 	ldw	r2,-8(fp)
   42660:	10800117 	ldw	r2,4(r2)
   42664:	e0bfff15 	stw	r2,-4(fp)
   42668:	d0e6db17 	ldw	r3,-25748(gp)
   4266c:	e0bfff17 	ldw	r2,-4(fp)
   42670:	1880032e 	bgeu	r3,r2,42680 <vTaskIncrementTick+0xdc>
   42674:	e0bfff17 	ldw	r2,-4(fp)
   42678:	d0a00215 	stw	r2,-32760(gp)
   4267c:	00001e06 	br	426f8 <vTaskIncrementTick+0x154>
   42680:	e0bffe17 	ldw	r2,-8(fp)
   42684:	10800104 	addi	r2,r2,4
   42688:	1009883a 	mov	r4,r2
   4268c:	00404900 	call	40490 <vListRemove>
   42690:	e0bffe17 	ldw	r2,-8(fp)
   42694:	10800a17 	ldw	r2,40(r2)
   42698:	10000426 	beq	r2,zero,426ac <vTaskIncrementTick+0x108>
   4269c:	e0bffe17 	ldw	r2,-8(fp)
   426a0:	10800604 	addi	r2,r2,24
   426a4:	1009883a 	mov	r4,r2
   426a8:	00404900 	call	40490 <vListRemove>
   426ac:	e0bffe17 	ldw	r2,-8(fp)
   426b0:	10800b17 	ldw	r2,44(r2)
   426b4:	d0e6dd17 	ldw	r3,-25740(gp)
   426b8:	1880032e 	bgeu	r3,r2,426c8 <vTaskIncrementTick+0x124>
   426bc:	e0bffe17 	ldw	r2,-8(fp)
   426c0:	10800b17 	ldw	r2,44(r2)
   426c4:	d0a6dd15 	stw	r2,-25740(gp)
   426c8:	e0bffe17 	ldw	r2,-8(fp)
   426cc:	10800b17 	ldw	r2,44(r2)
   426d0:	10c00524 	muli	r3,r2,20
   426d4:	008001b4 	movhi	r2,6
   426d8:	10be9904 	addi	r2,r2,-1436
   426dc:	1887883a 	add	r3,r3,r2
   426e0:	e0bffe17 	ldw	r2,-8(fp)
   426e4:	10800104 	addi	r2,r2,4
   426e8:	1809883a 	mov	r4,r3
   426ec:	100b883a 	mov	r5,r2
   426f0:	00403240 	call	40324 <vListInsertEnd>
   426f4:	003fcf06 	br	42634 <__alt_data_end+0xfffc7cb4>
   426f8:	00000306 	br	42708 <vTaskIncrementTick+0x164>
	}
	else
	{
		++uxMissedTicks;
   426fc:	d0a6e017 	ldw	r2,-25728(gp)
   42700:	10800044 	addi	r2,r2,1
   42704:	d0a6e015 	stw	r2,-25728(gp)
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
   42708:	e037883a 	mov	sp,fp
   4270c:	dfc00117 	ldw	ra,4(sp)
   42710:	df000017 	ldw	fp,0(sp)
   42714:	dec00204 	addi	sp,sp,8
   42718:	f800283a 	ret

0004271c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   4271c:	defffd04 	addi	sp,sp,-12
   42720:	dfc00215 	stw	ra,8(sp)
   42724:	df000115 	stw	fp,4(sp)
   42728:	df000104 	addi	fp,sp,4
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   4272c:	d0a6df17 	ldw	r2,-25732(gp)
   42730:	10000326 	beq	r2,zero,42740 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   42734:	00800044 	movi	r2,1
   42738:	d0a6e115 	stw	r2,-25724(gp)
   4273c:	00003d06 	br	42834 <vTaskSwitchContext+0x118>
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
				ulTaskSwitchedInTime = ulTempCounter;
		}
		#endif
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   42740:	d0a6d617 	ldw	r2,-25768(gp)
   42744:	10800017 	ldw	r2,0(r2)
   42748:	d0e6d617 	ldw	r3,-25768(gp)
   4274c:	18c00c17 	ldw	r3,48(r3)
   42750:	18800636 	bltu	r3,r2,4276c <vTaskSwitchContext+0x50>
   42754:	d0e6d617 	ldw	r3,-25768(gp)
   42758:	d0a6d617 	ldw	r2,-25768(gp)
   4275c:	10800d04 	addi	r2,r2,52
   42760:	1809883a 	mov	r4,r3
   42764:	100b883a 	mov	r5,r2
   42768:	00432200 	call	43220 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   4276c:	d0a6d617 	ldw	r2,-25768(gp)
   42770:	10800c17 	ldw	r2,48(r2)
   42774:	1009883a 	mov	r4,r2
   42778:	01400174 	movhi	r5,5
   4277c:	29491844 	addi	r5,r5,9313
   42780:	01800504 	movi	r6,20
   42784:	004386c0 	call	4386c <memcmp>
   42788:	10000626 	beq	r2,zero,427a4 <vTaskSwitchContext+0x88>
   4278c:	d0e6d617 	ldw	r3,-25768(gp)
   42790:	d0a6d617 	ldw	r2,-25768(gp)
   42794:	10800d04 	addi	r2,r2,52
   42798:	1809883a 	mov	r4,r3
   4279c:	100b883a 	mov	r5,r2
   427a0:	00432200 	call	43220 <vApplicationStackOverflowHook>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   427a4:	00000306 	br	427b4 <vTaskSwitchContext+0x98>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
   427a8:	d0a6dd17 	ldw	r2,-25740(gp)
   427ac:	10bfffc4 	addi	r2,r2,-1
   427b0:	d0a6dd15 	stw	r2,-25740(gp)
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   427b4:	d0e6dd17 	ldw	r3,-25740(gp)
   427b8:	008001b4 	movhi	r2,6
   427bc:	10be9904 	addi	r2,r2,-1436
   427c0:	18c00524 	muli	r3,r3,20
   427c4:	10c5883a 	add	r2,r2,r3
   427c8:	10800017 	ldw	r2,0(r2)
   427cc:	103ff626 	beq	r2,zero,427a8 <__alt_data_end+0xfffc7e28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   427d0:	d0a6dd17 	ldw	r2,-25740(gp)
   427d4:	10c00524 	muli	r3,r2,20
   427d8:	008001b4 	movhi	r2,6
   427dc:	10be9904 	addi	r2,r2,-1436
   427e0:	1885883a 	add	r2,r3,r2
   427e4:	e0bfff15 	stw	r2,-4(fp)
   427e8:	e0bfff17 	ldw	r2,-4(fp)
   427ec:	10800117 	ldw	r2,4(r2)
   427f0:	10c00117 	ldw	r3,4(r2)
   427f4:	e0bfff17 	ldw	r2,-4(fp)
   427f8:	10c00115 	stw	r3,4(r2)
   427fc:	e0bfff17 	ldw	r2,-4(fp)
   42800:	10c00117 	ldw	r3,4(r2)
   42804:	e0bfff17 	ldw	r2,-4(fp)
   42808:	10800204 	addi	r2,r2,8
   4280c:	1880051e 	bne	r3,r2,42824 <vTaskSwitchContext+0x108>
   42810:	e0bfff17 	ldw	r2,-4(fp)
   42814:	10800117 	ldw	r2,4(r2)
   42818:	10c00117 	ldw	r3,4(r2)
   4281c:	e0bfff17 	ldw	r2,-4(fp)
   42820:	10c00115 	stw	r3,4(r2)
   42824:	e0bfff17 	ldw	r2,-4(fp)
   42828:	10800117 	ldw	r2,4(r2)
   4282c:	10800317 	ldw	r2,12(r2)
   42830:	d0a6d615 	stw	r2,-25768(gp)
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
   42834:	e037883a 	mov	sp,fp
   42838:	dfc00117 	ldw	ra,4(sp)
   4283c:	df000017 	ldw	fp,0(sp)
   42840:	dec00204 	addi	sp,sp,8
   42844:	f800283a 	ret

00042848 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   42848:	defffb04 	addi	sp,sp,-20
   4284c:	dfc00415 	stw	ra,16(sp)
   42850:	df000315 	stw	fp,12(sp)
   42854:	df000304 	addi	fp,sp,12
   42858:	e13ffe15 	stw	r4,-8(fp)
   4285c:	e17fff15 	stw	r5,-4(fp)
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   42860:	d0a6d617 	ldw	r2,-25768(gp)
   42864:	10800604 	addi	r2,r2,24
   42868:	e13ffe17 	ldw	r4,-8(fp)
   4286c:	100b883a 	mov	r5,r2
   42870:	00403bc0 	call	403bc <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   42874:	d0a6d617 	ldw	r2,-25768(gp)
   42878:	10800104 	addi	r2,r2,4
   4287c:	1009883a 	mov	r4,r2
   42880:	00404900 	call	40490 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   42884:	e0bfff17 	ldw	r2,-4(fp)
   42888:	10bfffd8 	cmpnei	r2,r2,-1
   4288c:	1000071e 	bne	r2,zero,428ac <vTaskPlaceOnEventList+0x64>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   42890:	d0a6d617 	ldw	r2,-25768(gp)
   42894:	10800104 	addi	r2,r2,4
   42898:	010001b4 	movhi	r4,6
   4289c:	213ec604 	addi	r4,r4,-1256
   428a0:	100b883a 	mov	r5,r2
   428a4:	00403240 	call	40324 <vListInsertEnd>
   428a8:	00000606 	br	428c4 <vTaskPlaceOnEventList+0x7c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   428ac:	d0e6db17 	ldw	r3,-25748(gp)
   428b0:	e0bfff17 	ldw	r2,-4(fp)
   428b4:	1885883a 	add	r2,r3,r2
   428b8:	e0bffd15 	stw	r2,-12(fp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   428bc:	e13ffd17 	ldw	r4,-12(fp)
   428c0:	0042d400 	call	42d40 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
   428c4:	e037883a 	mov	sp,fp
   428c8:	dfc00117 	ldw	ra,4(sp)
   428cc:	df000017 	ldw	fp,0(sp)
   428d0:	dec00204 	addi	sp,sp,8
   428d4:	f800283a 	ret

000428d8 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   428d8:	defffb04 	addi	sp,sp,-20
   428dc:	dfc00415 	stw	ra,16(sp)
   428e0:	df000315 	stw	fp,12(sp)
   428e4:	df000304 	addi	fp,sp,12
   428e8:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   428ec:	e0bfff17 	ldw	r2,-4(fp)
   428f0:	10800317 	ldw	r2,12(r2)
   428f4:	10800317 	ldw	r2,12(r2)
   428f8:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   428fc:	e0bffe17 	ldw	r2,-8(fp)
   42900:	10800604 	addi	r2,r2,24
   42904:	1009883a 	mov	r4,r2
   42908:	00404900 	call	40490 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   4290c:	d0a6df17 	ldw	r2,-25732(gp)
   42910:	1000171e 	bne	r2,zero,42970 <xTaskRemoveFromEventList+0x98>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   42914:	e0bffe17 	ldw	r2,-8(fp)
   42918:	10800104 	addi	r2,r2,4
   4291c:	1009883a 	mov	r4,r2
   42920:	00404900 	call	40490 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   42924:	e0bffe17 	ldw	r2,-8(fp)
   42928:	10800b17 	ldw	r2,44(r2)
   4292c:	d0e6dd17 	ldw	r3,-25740(gp)
   42930:	1880032e 	bgeu	r3,r2,42940 <xTaskRemoveFromEventList+0x68>
   42934:	e0bffe17 	ldw	r2,-8(fp)
   42938:	10800b17 	ldw	r2,44(r2)
   4293c:	d0a6dd15 	stw	r2,-25740(gp)
   42940:	e0bffe17 	ldw	r2,-8(fp)
   42944:	10800b17 	ldw	r2,44(r2)
   42948:	10c00524 	muli	r3,r2,20
   4294c:	008001b4 	movhi	r2,6
   42950:	10be9904 	addi	r2,r2,-1436
   42954:	1887883a 	add	r3,r3,r2
   42958:	e0bffe17 	ldw	r2,-8(fp)
   4295c:	10800104 	addi	r2,r2,4
   42960:	1809883a 	mov	r4,r3
   42964:	100b883a 	mov	r5,r2
   42968:	00403240 	call	40324 <vListInsertEnd>
   4296c:	00000606 	br	42988 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   42970:	e0bffe17 	ldw	r2,-8(fp)
   42974:	10800604 	addi	r2,r2,24
   42978:	010001b4 	movhi	r4,6
   4297c:	213ebc04 	addi	r4,r4,-1296
   42980:	100b883a 	mov	r5,r2
   42984:	00403240 	call	40324 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   42988:	e0bffe17 	ldw	r2,-8(fp)
   4298c:	10c00b17 	ldw	r3,44(r2)
   42990:	d0a6d617 	ldw	r2,-25768(gp)
   42994:	10800b17 	ldw	r2,44(r2)
   42998:	18800336 	bltu	r3,r2,429a8 <xTaskRemoveFromEventList+0xd0>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   4299c:	00800044 	movi	r2,1
   429a0:	e0bffd15 	stw	r2,-12(fp)
   429a4:	00000106 	br	429ac <xTaskRemoveFromEventList+0xd4>
	}
	else
	{
		xReturn = pdFALSE;
   429a8:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
   429ac:	e0bffd17 	ldw	r2,-12(fp)
}
   429b0:	e037883a 	mov	sp,fp
   429b4:	dfc00117 	ldw	ra,4(sp)
   429b8:	df000017 	ldw	fp,0(sp)
   429bc:	dec00204 	addi	sp,sp,8
   429c0:	f800283a 	ret

000429c4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   429c4:	defffe04 	addi	sp,sp,-8
   429c8:	df000115 	stw	fp,4(sp)
   429cc:	df000104 	addi	fp,sp,4
   429d0:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   429d4:	d0e6e217 	ldw	r3,-25720(gp)
   429d8:	e0bfff17 	ldw	r2,-4(fp)
   429dc:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
   429e0:	d0e6db17 	ldw	r3,-25748(gp)
   429e4:	e0bfff17 	ldw	r2,-4(fp)
   429e8:	10c00115 	stw	r3,4(r2)
}
   429ec:	e037883a 	mov	sp,fp
   429f0:	df000017 	ldw	fp,0(sp)
   429f4:	dec00104 	addi	sp,sp,4
   429f8:	f800283a 	ret

000429fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   429fc:	defffb04 	addi	sp,sp,-20
   42a00:	dfc00415 	stw	ra,16(sp)
   42a04:	df000315 	stw	fp,12(sp)
   42a08:	df000304 	addi	fp,sp,12
   42a0c:	e13ffe15 	stw	r4,-8(fp)
   42a10:	e17fff15 	stw	r5,-4(fp)
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   42a14:	00431780 	call	43178 <vTaskEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   42a18:	e0bfff17 	ldw	r2,-4(fp)
   42a1c:	10800017 	ldw	r2,0(r2)
   42a20:	10bfffd8 	cmpnei	r2,r2,-1
   42a24:	1000021e 	bne	r2,zero,42a30 <xTaskCheckForTimeOut+0x34>
			{
				xReturn = pdFALSE;
   42a28:	e03ffd15 	stw	zero,-12(fp)
   42a2c:	00002106 	br	42ab4 <xTaskCheckForTimeOut+0xb8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   42a30:	e0bffe17 	ldw	r2,-8(fp)
   42a34:	10c00017 	ldw	r3,0(r2)
   42a38:	d0a6e217 	ldw	r2,-25720(gp)
   42a3c:	18800726 	beq	r3,r2,42a5c <xTaskCheckForTimeOut+0x60>
   42a40:	e0bffe17 	ldw	r2,-8(fp)
   42a44:	10800117 	ldw	r2,4(r2)
   42a48:	d0e6db17 	ldw	r3,-25748(gp)
   42a4c:	18800336 	bltu	r3,r2,42a5c <xTaskCheckForTimeOut+0x60>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   42a50:	00800044 	movi	r2,1
   42a54:	e0bffd15 	stw	r2,-12(fp)
   42a58:	00001606 	br	42ab4 <xTaskCheckForTimeOut+0xb8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   42a5c:	d0e6db17 	ldw	r3,-25748(gp)
   42a60:	e0bffe17 	ldw	r2,-8(fp)
   42a64:	10800117 	ldw	r2,4(r2)
   42a68:	1887c83a 	sub	r3,r3,r2
   42a6c:	e0bfff17 	ldw	r2,-4(fp)
   42a70:	10800017 	ldw	r2,0(r2)
   42a74:	18800d2e 	bgeu	r3,r2,42aac <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   42a78:	d0e6db17 	ldw	r3,-25748(gp)
   42a7c:	e0bffe17 	ldw	r2,-8(fp)
   42a80:	10800117 	ldw	r2,4(r2)
   42a84:	1885c83a 	sub	r2,r3,r2
   42a88:	e0ffff17 	ldw	r3,-4(fp)
   42a8c:	18c00017 	ldw	r3,0(r3)
   42a90:	1887c83a 	sub	r3,r3,r2
   42a94:	e0bfff17 	ldw	r2,-4(fp)
   42a98:	10c00015 	stw	r3,0(r2)
			vTaskSetTimeOutState( pxTimeOut );
   42a9c:	e13ffe17 	ldw	r4,-8(fp)
   42aa0:	00429c40 	call	429c4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
   42aa4:	e03ffd15 	stw	zero,-12(fp)
   42aa8:	00000206 	br	42ab4 <xTaskCheckForTimeOut+0xb8>
		}
		else
		{
			xReturn = pdTRUE;
   42aac:	00800044 	movi	r2,1
   42ab0:	e0bffd15 	stw	r2,-12(fp)
		}
	}
	taskEXIT_CRITICAL();
   42ab4:	00431c40 	call	431c4 <vTaskExitCritical>

	return xReturn;
   42ab8:	e0bffd17 	ldw	r2,-12(fp)
}
   42abc:	e037883a 	mov	sp,fp
   42ac0:	dfc00117 	ldw	ra,4(sp)
   42ac4:	df000017 	ldw	fp,0(sp)
   42ac8:	dec00204 	addi	sp,sp,8
   42acc:	f800283a 	ret

00042ad0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   42ad0:	deffff04 	addi	sp,sp,-4
   42ad4:	df000015 	stw	fp,0(sp)
   42ad8:	d839883a 	mov	fp,sp
	xMissedYield = pdTRUE;
   42adc:	00800044 	movi	r2,1
   42ae0:	d0a6e115 	stw	r2,-25724(gp)
}
   42ae4:	e037883a 	mov	sp,fp
   42ae8:	df000017 	ldw	fp,0(sp)
   42aec:	dec00104 	addi	sp,sp,4
   42af0:	f800283a 	ret

00042af4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   42af4:	defffd04 	addi	sp,sp,-12
   42af8:	dfc00215 	stw	ra,8(sp)
   42afc:	df000115 	stw	fp,4(sp)
   42b00:	df000104 	addi	fp,sp,4
   42b04:	e13fff15 	stw	r4,-4(fp)
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   42b08:	0042ca00 	call	42ca0 <prvCheckTasksWaitingTermination>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
   42b0c:	003ffe06 	br	42b08 <__alt_data_end+0xfffc8188>

00042b10 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
   42b10:	defff904 	addi	sp,sp,-28
   42b14:	dfc00615 	stw	ra,24(sp)
   42b18:	df000515 	stw	fp,20(sp)
   42b1c:	df000504 	addi	fp,sp,20
   42b20:	e13ffb15 	stw	r4,-20(fp)
   42b24:	e17ffc15 	stw	r5,-16(fp)
   42b28:	e1bffd15 	stw	r6,-12(fp)
   42b2c:	e1fffe15 	stw	r7,-8(fp)
   42b30:	e0800217 	ldw	r2,8(fp)
   42b34:	e0bfff0d 	sth	r2,-4(fp)
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   42b38:	e0bffb17 	ldw	r2,-20(fp)
   42b3c:	10800d04 	addi	r2,r2,52
   42b40:	1009883a 	mov	r4,r2
   42b44:	e17ffc17 	ldw	r5,-16(fp)
   42b48:	01800204 	movi	r6,8
   42b4c:	0043bcc0 	call	43bcc <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   42b50:	e0bffb17 	ldw	r2,-20(fp)
   42b54:	10000ec5 	stb	zero,59(r2)

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
   42b58:	e0bffd17 	ldw	r2,-12(fp)
   42b5c:	10800170 	cmpltui	r2,r2,5
   42b60:	1000021e 	bne	r2,zero,42b6c <prvInitialiseTCBVariables+0x5c>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   42b64:	00800104 	movi	r2,4
   42b68:	e0bffd15 	stw	r2,-12(fp)
	}

	pxTCB->uxPriority = uxPriority;
   42b6c:	e0bffb17 	ldw	r2,-20(fp)
   42b70:	e0fffd17 	ldw	r3,-12(fp)
   42b74:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   42b78:	e0bffb17 	ldw	r2,-20(fp)
   42b7c:	e0fffd17 	ldw	r3,-12(fp)
   42b80:	10c01015 	stw	r3,64(r2)
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   42b84:	e0bffb17 	ldw	r2,-20(fp)
   42b88:	10800104 	addi	r2,r2,4
   42b8c:	1009883a 	mov	r4,r2
   42b90:	00402fc0 	call	402fc <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   42b94:	e0bffb17 	ldw	r2,-20(fp)
   42b98:	10800604 	addi	r2,r2,24
   42b9c:	1009883a 	mov	r4,r2
   42ba0:	00402fc0 	call	402fc <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   42ba4:	e0bffb17 	ldw	r2,-20(fp)
   42ba8:	e0fffb17 	ldw	r3,-20(fp)
   42bac:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   42bb0:	00c00144 	movi	r3,5
   42bb4:	e0bffd17 	ldw	r2,-12(fp)
   42bb8:	1887c83a 	sub	r3,r3,r2
   42bbc:	e0bffb17 	ldw	r2,-20(fp)
   42bc0:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   42bc4:	e0bffb17 	ldw	r2,-20(fp)
   42bc8:	e0fffb17 	ldw	r3,-20(fp)
   42bcc:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0;
   42bd0:	e0bffb17 	ldw	r2,-20(fp)
   42bd4:	10000f15 	stw	zero,60(r2)
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
   42bd8:	e037883a 	mov	sp,fp
   42bdc:	dfc00117 	ldw	ra,4(sp)
   42be0:	df000017 	ldw	fp,0(sp)
   42be4:	dec00204 	addi	sp,sp,8
   42be8:	f800283a 	ret

00042bec <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
   42bec:	defffd04 	addi	sp,sp,-12
   42bf0:	dfc00215 	stw	ra,8(sp)
   42bf4:	df000115 	stw	fp,4(sp)
   42bf8:	df000104 	addi	fp,sp,4
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   42bfc:	e03fff15 	stw	zero,-4(fp)
   42c00:	00000a06 	br	42c2c <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   42c04:	e0bfff17 	ldw	r2,-4(fp)
   42c08:	10c00524 	muli	r3,r2,20
   42c0c:	008001b4 	movhi	r2,6
   42c10:	10be9904 	addi	r2,r2,-1436
   42c14:	1885883a 	add	r2,r3,r2
   42c18:	1009883a 	mov	r4,r2
   42c1c:	00402980 	call	40298 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   42c20:	e0bfff17 	ldw	r2,-4(fp)
   42c24:	10800044 	addi	r2,r2,1
   42c28:	e0bfff15 	stw	r2,-4(fp)
   42c2c:	e0bfff17 	ldw	r2,-4(fp)
   42c30:	10800170 	cmpltui	r2,r2,5
   42c34:	103ff31e 	bne	r2,zero,42c04 <__alt_data_end+0xfffc8284>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   42c38:	010001b4 	movhi	r4,6
   42c3c:	213eb204 	addi	r4,r4,-1336
   42c40:	00402980 	call	40298 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   42c44:	010001b4 	movhi	r4,6
   42c48:	213eb704 	addi	r4,r4,-1316
   42c4c:	00402980 	call	40298 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
   42c50:	010001b4 	movhi	r4,6
   42c54:	213ebc04 	addi	r4,r4,-1296
   42c58:	00402980 	call	40298 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   42c5c:	010001b4 	movhi	r4,6
   42c60:	213ec104 	addi	r4,r4,-1276
   42c64:	00402980 	call	40298 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   42c68:	010001b4 	movhi	r4,6
   42c6c:	213ec604 	addi	r4,r4,-1256
   42c70:	00402980 	call	40298 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   42c74:	008001b4 	movhi	r2,6
   42c78:	10beb204 	addi	r2,r2,-1336
   42c7c:	d0a6d715 	stw	r2,-25764(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   42c80:	008001b4 	movhi	r2,6
   42c84:	10beb704 	addi	r2,r2,-1316
   42c88:	d0a6d815 	stw	r2,-25760(gp)
}
   42c8c:	e037883a 	mov	sp,fp
   42c90:	dfc00117 	ldw	ra,4(sp)
   42c94:	df000017 	ldw	fp,0(sp)
   42c98:	dec00204 	addi	sp,sp,8
   42c9c:	f800283a 	ret

00042ca0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   42ca0:	defffc04 	addi	sp,sp,-16
   42ca4:	dfc00315 	stw	ra,12(sp)
   42ca8:	df000215 	stw	fp,8(sp)
   42cac:	df000204 	addi	fp,sp,8
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
   42cb0:	d0a6d917 	ldw	r2,-25756(gp)
   42cb4:	10001d26 	beq	r2,zero,42d2c <prvCheckTasksWaitingTermination+0x8c>
		{
			vTaskSuspendAll();
   42cb8:	00423bc0 	call	423bc <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   42cbc:	008001b4 	movhi	r2,6
   42cc0:	10bec104 	addi	r2,r2,-1276
   42cc4:	10800017 	ldw	r2,0(r2)
   42cc8:	1005003a 	cmpeq	r2,r2,zero
   42ccc:	10803fcc 	andi	r2,r2,255
   42cd0:	e0bffe15 	stw	r2,-8(fp)
			xTaskResumeAll();
   42cd4:	00423e40 	call	423e4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
   42cd8:	e0bffe17 	ldw	r2,-8(fp)
   42cdc:	1000131e 	bne	r2,zero,42d2c <prvCheckTasksWaitingTermination+0x8c>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   42ce0:	00431780 	call	43178 <vTaskEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   42ce4:	008001b4 	movhi	r2,6
   42ce8:	10bec304 	addi	r2,r2,-1268
   42cec:	10800117 	ldw	r2,4(r2)
   42cf0:	10800317 	ldw	r2,12(r2)
   42cf4:	e0bfff15 	stw	r2,-4(fp)
					vListRemove( &( pxTCB->xGenericListItem ) );
   42cf8:	e0bfff17 	ldw	r2,-4(fp)
   42cfc:	10800104 	addi	r2,r2,4
   42d00:	1009883a 	mov	r4,r2
   42d04:	00404900 	call	40490 <vListRemove>
					--uxCurrentNumberOfTasks;
   42d08:	d0a6da17 	ldw	r2,-25752(gp)
   42d0c:	10bfffc4 	addi	r2,r2,-1
   42d10:	d0a6da15 	stw	r2,-25752(gp)
					--uxTasksDeleted;
   42d14:	d0a6d917 	ldw	r2,-25756(gp)
   42d18:	10bfffc4 	addi	r2,r2,-1
   42d1c:	d0a6d915 	stw	r2,-25756(gp)
				}
				taskEXIT_CRITICAL();
   42d20:	00431c40 	call	431c4 <vTaskExitCritical>

				prvDeleteTCB( pxTCB );
   42d24:	e13fff17 	ldw	r4,-4(fp)
   42d28:	0042f480 	call	42f48 <prvDeleteTCB>
			}
		}
	}
	#endif
}
   42d2c:	e037883a 	mov	sp,fp
   42d30:	dfc00117 	ldw	ra,4(sp)
   42d34:	df000017 	ldw	fp,0(sp)
   42d38:	dec00204 	addi	sp,sp,8
   42d3c:	f800283a 	ret

00042d40 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   42d40:	defffd04 	addi	sp,sp,-12
   42d44:	dfc00215 	stw	ra,8(sp)
   42d48:	df000115 	stw	fp,4(sp)
   42d4c:	df000104 	addi	fp,sp,4
   42d50:	e13fff15 	stw	r4,-4(fp)
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   42d54:	d0a6d617 	ldw	r2,-25768(gp)
   42d58:	e0ffff17 	ldw	r3,-4(fp)
   42d5c:	10c00115 	stw	r3,4(r2)

	if( xTimeToWake < xTickCount )
   42d60:	d0a6db17 	ldw	r2,-25748(gp)
   42d64:	e0ffff17 	ldw	r3,-4(fp)
   42d68:	1880072e 	bgeu	r3,r2,42d88 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   42d6c:	d0e6d817 	ldw	r3,-25760(gp)
   42d70:	d0a6d617 	ldw	r2,-25768(gp)
   42d74:	10800104 	addi	r2,r2,4
   42d78:	1809883a 	mov	r4,r3
   42d7c:	100b883a 	mov	r5,r2
   42d80:	00403bc0 	call	403bc <vListInsert>
   42d84:	00000b06 	br	42db4 <prvAddCurrentTaskToDelayedList+0x74>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   42d88:	d0e6d717 	ldw	r3,-25764(gp)
   42d8c:	d0a6d617 	ldw	r2,-25768(gp)
   42d90:	10800104 	addi	r2,r2,4
   42d94:	1809883a 	mov	r4,r3
   42d98:	100b883a 	mov	r5,r2
   42d9c:	00403bc0 	call	403bc <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   42da0:	d0a00217 	ldw	r2,-32760(gp)
   42da4:	e0ffff17 	ldw	r3,-4(fp)
   42da8:	1880022e 	bgeu	r3,r2,42db4 <prvAddCurrentTaskToDelayedList+0x74>
		{
			xNextTaskUnblockTime = xTimeToWake;
   42dac:	e0bfff17 	ldw	r2,-4(fp)
   42db0:	d0a00215 	stw	r2,-32760(gp)
		}
	}
}
   42db4:	e037883a 	mov	sp,fp
   42db8:	dfc00117 	ldw	ra,4(sp)
   42dbc:	df000017 	ldw	fp,0(sp)
   42dc0:	dec00204 	addi	sp,sp,8
   42dc4:	f800283a 	ret

00042dc8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
   42dc8:	defffb04 	addi	sp,sp,-20
   42dcc:	dfc00415 	stw	ra,16(sp)
   42dd0:	df000315 	stw	fp,12(sp)
   42dd4:	df000304 	addi	fp,sp,12
   42dd8:	2005883a 	mov	r2,r4
   42ddc:	e17fff15 	stw	r5,-4(fp)
   42de0:	e0bffe0d 	sth	r2,-8(fp)
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   42de4:	01001104 	movi	r4,68
   42de8:	00409d80 	call	409d8 <pvPortMalloc>
   42dec:	e0bffd15 	stw	r2,-12(fp)

	if( pxNewTCB != NULL )
   42df0:	e0bffd17 	ldw	r2,-12(fp)
   42df4:	10001b26 	beq	r2,zero,42e64 <prvAllocateTCBAndStack+0x9c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   42df8:	e0bfff17 	ldw	r2,-4(fp)
   42dfc:	1000061e 	bne	r2,zero,42e18 <prvAllocateTCBAndStack+0x50>
   42e00:	e0bffe0b 	ldhu	r2,-8(fp)
   42e04:	1085883a 	add	r2,r2,r2
   42e08:	1085883a 	add	r2,r2,r2
   42e0c:	1009883a 	mov	r4,r2
   42e10:	00409d80 	call	409d8 <pvPortMalloc>
   42e14:	00000106 	br	42e1c <prvAllocateTCBAndStack+0x54>
   42e18:	e0bfff17 	ldw	r2,-4(fp)
   42e1c:	e0fffd17 	ldw	r3,-12(fp)
   42e20:	18800c15 	stw	r2,48(r3)

		if( pxNewTCB->pxStack == NULL )
   42e24:	e0bffd17 	ldw	r2,-12(fp)
   42e28:	10800c17 	ldw	r2,48(r2)
   42e2c:	1000041e 	bne	r2,zero,42e40 <prvAllocateTCBAndStack+0x78>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   42e30:	e13ffd17 	ldw	r4,-12(fp)
   42e34:	0040bec0 	call	40bec <vPortFree>
			pxNewTCB = NULL;
   42e38:	e03ffd15 	stw	zero,-12(fp)
   42e3c:	00000906 	br	42e64 <prvAllocateTCBAndStack+0x9c>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
   42e40:	e0bffd17 	ldw	r2,-12(fp)
   42e44:	10c00c17 	ldw	r3,48(r2)
   42e48:	e0bffe0b 	ldhu	r2,-8(fp)
   42e4c:	1085883a 	add	r2,r2,r2
   42e50:	1085883a 	add	r2,r2,r2
   42e54:	1809883a 	mov	r4,r3
   42e58:	01402944 	movi	r5,165
   42e5c:	100d883a 	mov	r6,r2
   42e60:	0043a200 	call	43a20 <memset>
		}
	}

	return pxNewTCB;
   42e64:	e0bffd17 	ldw	r2,-12(fp)
}
   42e68:	e037883a 	mov	sp,fp
   42e6c:	dfc00117 	ldw	ra,4(sp)
   42e70:	df000017 	ldw	fp,0(sp)
   42e74:	dec00204 	addi	sp,sp,8
   42e78:	f800283a 	ret

00042e7c <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
   42e7c:	defffd04 	addi	sp,sp,-12
   42e80:	df000215 	stw	fp,8(sp)
   42e84:	dc000115 	stw	r16,4(sp)
   42e88:	df000204 	addi	fp,sp,8
   42e8c:	e13ffe15 	stw	r4,-8(fp)
	register unsigned short usCount = 0;
   42e90:	0021883a 	mov	r16,zero

		while( *pucStackByte == tskSTACK_FILL_BYTE )
   42e94:	00000606 	br	42eb0 <usTaskCheckFreeStackSpace+0x34>
		{
			pucStackByte -= portSTACK_GROWTH;
   42e98:	e0bffe17 	ldw	r2,-8(fp)
   42e9c:	10800044 	addi	r2,r2,1
   42ea0:	e0bffe15 	stw	r2,-8(fp)
			usCount++;
   42ea4:	8005883a 	mov	r2,r16
   42ea8:	10800044 	addi	r2,r2,1
   42eac:	1021883a 	mov	r16,r2

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
   42eb0:	e0bffe17 	ldw	r2,-8(fp)
   42eb4:	10800003 	ldbu	r2,0(r2)
   42eb8:	10803fcc 	andi	r2,r2,255
   42ebc:	10802960 	cmpeqi	r2,r2,165
   42ec0:	103ff51e 	bne	r2,zero,42e98 <__alt_data_end+0xfffc8518>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
   42ec4:	80bfffcc 	andi	r2,r16,65535
   42ec8:	1004d0ba 	srli	r2,r2,2
   42ecc:	1021883a 	mov	r16,r2

		return usCount;
   42ed0:	8005883a 	mov	r2,r16
	}
   42ed4:	e6ffff04 	addi	sp,fp,-4
   42ed8:	df000117 	ldw	fp,4(sp)
   42edc:	dc000017 	ldw	r16,0(sp)
   42ee0:	dec00204 	addi	sp,sp,8
   42ee4:	f800283a 	ret

00042ee8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
	{
   42ee8:	defffa04 	addi	sp,sp,-24
   42eec:	dfc00515 	stw	ra,20(sp)
   42ef0:	df000415 	stw	fp,16(sp)
   42ef4:	df000404 	addi	fp,sp,16
   42ef8:	e13fff15 	stw	r4,-4(fp)
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   42efc:	e0bfff17 	ldw	r2,-4(fp)
   42f00:	1000021e 	bne	r2,zero,42f0c <uxTaskGetStackHighWaterMark+0x24>
   42f04:	d0a6d617 	ldw	r2,-25768(gp)
   42f08:	00000106 	br	42f10 <uxTaskGetStackHighWaterMark+0x28>
   42f0c:	e0bfff17 	ldw	r2,-4(fp)
   42f10:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
   42f14:	e0bffc17 	ldw	r2,-16(fp)
   42f18:	10800c17 	ldw	r2,48(r2)
   42f1c:	e0bffd15 	stw	r2,-12(fp)
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
   42f20:	e13ffd17 	ldw	r4,-12(fp)
   42f24:	0042e7c0 	call	42e7c <usTaskCheckFreeStackSpace>
   42f28:	10bfffcc 	andi	r2,r2,65535
   42f2c:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
   42f30:	e0bffe17 	ldw	r2,-8(fp)
	}
   42f34:	e037883a 	mov	sp,fp
   42f38:	dfc00117 	ldw	ra,4(sp)
   42f3c:	df000017 	ldw	fp,0(sp)
   42f40:	dec00204 	addi	sp,sp,8
   42f44:	f800283a 	ret

00042f48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_vTaskDelete == 1 ) || ( INCLUDE_vTaskCleanUpResources == 1 ) )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
   42f48:	defffd04 	addi	sp,sp,-12
   42f4c:	dfc00215 	stw	ra,8(sp)
   42f50:	df000115 	stw	fp,4(sp)
   42f54:	df000104 	addi	fp,sp,4
   42f58:	e13fff15 	stw	r4,-4(fp)
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   42f5c:	e0bfff17 	ldw	r2,-4(fp)
   42f60:	10800c17 	ldw	r2,48(r2)
   42f64:	1009883a 	mov	r4,r2
   42f68:	0040bec0 	call	40bec <vPortFree>
		vPortFree( pxTCB );
   42f6c:	e13fff17 	ldw	r4,-4(fp)
   42f70:	0040bec0 	call	40bec <vPortFree>
	}
   42f74:	e037883a 	mov	sp,fp
   42f78:	dfc00117 	ldw	ra,4(sp)
   42f7c:	df000017 	ldw	fp,0(sp)
   42f80:	dec00204 	addi	sp,sp,8
   42f84:	f800283a 	ret

00042f88 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
   42f88:	defffe04 	addi	sp,sp,-8
   42f8c:	df000115 	stw	fp,4(sp)
   42f90:	df000104 	addi	fp,sp,4
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   42f94:	d0a6d617 	ldw	r2,-25768(gp)
   42f98:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
   42f9c:	e0bfff17 	ldw	r2,-4(fp)
	}
   42fa0:	e037883a 	mov	sp,fp
   42fa4:	df000017 	ldw	fp,0(sp)
   42fa8:	dec00104 	addi	sp,sp,4
   42fac:	f800283a 	ret

00042fb0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   42fb0:	defffc04 	addi	sp,sp,-16
   42fb4:	dfc00315 	stw	ra,12(sp)
   42fb8:	df000215 	stw	fp,8(sp)
   42fbc:	df000204 	addi	fp,sp,8
   42fc0:	e13fff15 	stw	r4,-4(fp)
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
   42fc4:	e0bfff17 	ldw	r2,-4(fp)
   42fc8:	e0bffe15 	stw	r2,-8(fp)

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   42fcc:	e0bffe17 	ldw	r2,-8(fp)
   42fd0:	10c00b17 	ldw	r3,44(r2)
   42fd4:	d0a6d617 	ldw	r2,-25768(gp)
   42fd8:	10800b17 	ldw	r2,44(r2)
   42fdc:	18802e2e 	bgeu	r3,r2,43098 <vTaskPriorityInherit+0xe8>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   42fe0:	d0a6d617 	ldw	r2,-25768(gp)
   42fe4:	10800b17 	ldw	r2,44(r2)
   42fe8:	00c00144 	movi	r3,5
   42fec:	1887c83a 	sub	r3,r3,r2
   42ff0:	e0bffe17 	ldw	r2,-8(fp)
   42ff4:	10c00615 	stw	r3,24(r2)

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
   42ff8:	e0bffe17 	ldw	r2,-8(fp)
   42ffc:	10c00517 	ldw	r3,20(r2)
   43000:	e0bffe17 	ldw	r2,-8(fp)
   43004:	10800b17 	ldw	r2,44(r2)
   43008:	11000524 	muli	r4,r2,20
   4300c:	008001b4 	movhi	r2,6
   43010:	10be9904 	addi	r2,r2,-1436
   43014:	2085883a 	add	r2,r4,r2
   43018:	18801b1e 	bne	r3,r2,43088 <vTaskPriorityInherit+0xd8>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
   4301c:	e0bffe17 	ldw	r2,-8(fp)
   43020:	10800104 	addi	r2,r2,4
   43024:	1009883a 	mov	r4,r2
   43028:	00404900 	call	40490 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   4302c:	d0a6d617 	ldw	r2,-25768(gp)
   43030:	10c00b17 	ldw	r3,44(r2)
   43034:	e0bffe17 	ldw	r2,-8(fp)
   43038:	10c00b15 	stw	r3,44(r2)
				prvAddTaskToReadyQueue( pxTCB );
   4303c:	e0bffe17 	ldw	r2,-8(fp)
   43040:	10800b17 	ldw	r2,44(r2)
   43044:	d0e6dd17 	ldw	r3,-25740(gp)
   43048:	1880032e 	bgeu	r3,r2,43058 <vTaskPriorityInherit+0xa8>
   4304c:	e0bffe17 	ldw	r2,-8(fp)
   43050:	10800b17 	ldw	r2,44(r2)
   43054:	d0a6dd15 	stw	r2,-25740(gp)
   43058:	e0bffe17 	ldw	r2,-8(fp)
   4305c:	10800b17 	ldw	r2,44(r2)
   43060:	10c00524 	muli	r3,r2,20
   43064:	008001b4 	movhi	r2,6
   43068:	10be9904 	addi	r2,r2,-1436
   4306c:	1887883a 	add	r3,r3,r2
   43070:	e0bffe17 	ldw	r2,-8(fp)
   43074:	10800104 	addi	r2,r2,4
   43078:	1809883a 	mov	r4,r3
   4307c:	100b883a 	mov	r5,r2
   43080:	00403240 	call	40324 <vListInsertEnd>
   43084:	00000406 	br	43098 <vTaskPriorityInherit+0xe8>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   43088:	d0a6d617 	ldw	r2,-25768(gp)
   4308c:	10c00b17 	ldw	r3,44(r2)
   43090:	e0bffe17 	ldw	r2,-8(fp)
   43094:	10c00b15 	stw	r3,44(r2)
			}
		}
	}
   43098:	e037883a 	mov	sp,fp
   4309c:	dfc00117 	ldw	ra,4(sp)
   430a0:	df000017 	ldw	fp,0(sp)
   430a4:	dec00204 	addi	sp,sp,8
   430a8:	f800283a 	ret

000430ac <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   430ac:	defffc04 	addi	sp,sp,-16
   430b0:	dfc00315 	stw	ra,12(sp)
   430b4:	df000215 	stw	fp,8(sp)
   430b8:	df000204 	addi	fp,sp,8
   430bc:	e13fff15 	stw	r4,-4(fp)
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
   430c0:	e0bfff17 	ldw	r2,-4(fp)
   430c4:	e0bffe15 	stw	r2,-8(fp)

		if( pxMutexHolder != NULL )
   430c8:	e0bfff17 	ldw	r2,-4(fp)
   430cc:	10002526 	beq	r2,zero,43164 <vTaskPriorityDisinherit+0xb8>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   430d0:	e0bffe17 	ldw	r2,-8(fp)
   430d4:	10c00b17 	ldw	r3,44(r2)
   430d8:	e0bffe17 	ldw	r2,-8(fp)
   430dc:	10801017 	ldw	r2,64(r2)
   430e0:	18802026 	beq	r3,r2,43164 <vTaskPriorityDisinherit+0xb8>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
   430e4:	e0bffe17 	ldw	r2,-8(fp)
   430e8:	10800104 	addi	r2,r2,4
   430ec:	1009883a 	mov	r4,r2
   430f0:	00404900 	call	40490 <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   430f4:	e0bffe17 	ldw	r2,-8(fp)
   430f8:	10c01017 	ldw	r3,64(r2)
   430fc:	e0bffe17 	ldw	r2,-8(fp)
   43100:	10c00b15 	stw	r3,44(r2)
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   43104:	e0bffe17 	ldw	r2,-8(fp)
   43108:	10800b17 	ldw	r2,44(r2)
   4310c:	00c00144 	movi	r3,5
   43110:	1887c83a 	sub	r3,r3,r2
   43114:	e0bffe17 	ldw	r2,-8(fp)
   43118:	10c00615 	stw	r3,24(r2)
				prvAddTaskToReadyQueue( pxTCB );
   4311c:	e0bffe17 	ldw	r2,-8(fp)
   43120:	10800b17 	ldw	r2,44(r2)
   43124:	d0e6dd17 	ldw	r3,-25740(gp)
   43128:	1880032e 	bgeu	r3,r2,43138 <vTaskPriorityDisinherit+0x8c>
   4312c:	e0bffe17 	ldw	r2,-8(fp)
   43130:	10800b17 	ldw	r2,44(r2)
   43134:	d0a6dd15 	stw	r2,-25740(gp)
   43138:	e0bffe17 	ldw	r2,-8(fp)
   4313c:	10800b17 	ldw	r2,44(r2)
   43140:	10c00524 	muli	r3,r2,20
   43144:	008001b4 	movhi	r2,6
   43148:	10be9904 	addi	r2,r2,-1436
   4314c:	1887883a 	add	r3,r3,r2
   43150:	e0bffe17 	ldw	r2,-8(fp)
   43154:	10800104 	addi	r2,r2,4
   43158:	1809883a 	mov	r4,r3
   4315c:	100b883a 	mov	r5,r2
   43160:	00403240 	call	40324 <vListInsertEnd>
			}
		}
	}
   43164:	e037883a 	mov	sp,fp
   43168:	dfc00117 	ldw	ra,4(sp)
   4316c:	df000017 	ldw	fp,0(sp)
   43170:	dec00204 	addi	sp,sp,8
   43174:	f800283a 	ret

00043178 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
   43178:	defffe04 	addi	sp,sp,-8
   4317c:	df000115 	stw	fp,4(sp)
   43180:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43184:	0005303a 	rdctl	r2,status
   43188:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4318c:	e0ffff17 	ldw	r3,-4(fp)
   43190:	00bfff84 	movi	r2,-2
   43194:	1884703a 	and	r2,r3,r2
   43198:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
   4319c:	d0a6de17 	ldw	r2,-25736(gp)
   431a0:	10000426 	beq	r2,zero,431b4 <vTaskEnterCritical+0x3c>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
   431a4:	d0a6d617 	ldw	r2,-25768(gp)
   431a8:	10c00f17 	ldw	r3,60(r2)
   431ac:	18c00044 	addi	r3,r3,1
   431b0:	10c00f15 	stw	r3,60(r2)
		}
	}
   431b4:	e037883a 	mov	sp,fp
   431b8:	df000017 	ldw	fp,0(sp)
   431bc:	dec00104 	addi	sp,sp,4
   431c0:	f800283a 	ret

000431c4 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

void vTaskExitCritical( void )
{
   431c4:	defffe04 	addi	sp,sp,-8
   431c8:	df000115 	stw	fp,4(sp)
   431cc:	df000104 	addi	fp,sp,4
	if( xSchedulerRunning != pdFALSE )
   431d0:	d0a6de17 	ldw	r2,-25736(gp)
   431d4:	10000e26 	beq	r2,zero,43210 <vTaskExitCritical+0x4c>
	{
		if( pxCurrentTCB->uxCriticalNesting > 0 )
   431d8:	d0a6d617 	ldw	r2,-25768(gp)
   431dc:	10800f17 	ldw	r2,60(r2)
   431e0:	10000b26 	beq	r2,zero,43210 <vTaskExitCritical+0x4c>
		{
			( pxCurrentTCB->uxCriticalNesting )--;
   431e4:	d0a6d617 	ldw	r2,-25768(gp)
   431e8:	10c00f17 	ldw	r3,60(r2)
   431ec:	18ffffc4 	addi	r3,r3,-1
   431f0:	10c00f15 	stw	r3,60(r2)

			if( pxCurrentTCB->uxCriticalNesting == 0 )
   431f4:	d0a6d617 	ldw	r2,-25768(gp)
   431f8:	10800f17 	ldw	r2,60(r2)
   431fc:	1000041e 	bne	r2,zero,43210 <vTaskExitCritical+0x4c>
   43200:	00800044 	movi	r2,1
   43204:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43208:	e0bfff17 	ldw	r2,-4(fp)
   4320c:	1001703a 	wrctl	status,r2
			{
				portENABLE_INTERRUPTS();
			}
		}
	}
}
   43210:	e037883a 	mov	sp,fp
   43214:	df000017 	ldw	fp,0(sp)
   43218:	dec00104 	addi	sp,sp,4
   4321c:	f800283a 	ret

00043220 <vApplicationStackOverflowHook>:




void vApplicationStackOverflowHook( void )
{
   43220:	deffff04 	addi	sp,sp,-4
   43224:	df000015 	stw	fp,0(sp)
   43228:	d839883a 	mov	fp,sp
	/* Look at pxCurrentTCB to see which task overflowed its stack. */
	for( ;; )
    {
		asm( "break" );
   4322c:	003da03a 	break	0
    }
   43230:	003ffe06 	br	4322c <__alt_data_end+0xfffc88ac>

00043234 <_general_exception_handler>:
}
/*-----------------------------------------------------------*/

void _general_exception_handler( unsigned long ulCause, unsigned long ulStatus )
{
   43234:	defffd04 	addi	sp,sp,-12
   43238:	df000215 	stw	fp,8(sp)
   4323c:	df000204 	addi	fp,sp,8
   43240:	e13ffe15 	stw	r4,-8(fp)
   43244:	e17fff15 	stw	r5,-4(fp)
	/* This overrides the definition provided by the kernel.  Other exceptions
	should be handled here. */
	for( ;; )
    {
		asm( "break" );
   43248:	003da03a 	break	0
    }
   4324c:	003ffe06 	br	43248 <__alt_data_end+0xfffc88c8>

00043250 <prvCheckTask>:
}
/*-----------------------------------------------------------*/

static void prvCheckTask( void *pvParameters )
{
   43250:	defff804 	addi	sp,sp,-32
   43254:	dfc00715 	stw	ra,28(sp)
   43258:	df000615 	stw	fp,24(sp)
   4325c:	df000604 	addi	fp,sp,24
   43260:	e13fff15 	stw	r4,-4(fp)
portTickType xLastExecutionTime, ulTicksToWait = mainNO_ERROR_PERIOD;
   43264:	0084e204 	movi	r2,5000
   43268:	e0bffa15 	stw	r2,-24(fp)
unsigned long ulLastRegTest1 = 0UL, ulLastRegTest2 = 0UL;
   4326c:	e03ffb15 	stw	zero,-20(fp)
   43270:	e03ffc15 	stw	zero,-16(fp)
const char * pcMessage;

	/* Initialise the variable used to control our iteration rate prior to
	its first use. */
	xLastExecutionTime = xTaskGetTickCount();
   43274:	00425200 	call	42520 <xTaskGetTickCount>
   43278:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* Wait until it is time to run the tests again. */
		vTaskDelayUntil( &xLastExecutionTime, ulTicksToWait );
   4327c:	e0bffe04 	addi	r2,fp,-8
   43280:	1009883a 	mov	r4,r2
   43284:	e17ffa17 	ldw	r5,-24(fp)
   43288:	0041cd00 	call	41cd0 <vTaskDelayUntil>

		/* Have any of the standard demo tasks detected an error in their
		operation? */
		if( ulLastRegTest1 == ulRegTest1Counter )
   4328c:	d0a6e417 	ldw	r2,-25712(gp)
   43290:	e0fffb17 	ldw	r3,-20(fp)
   43294:	1880061e 	bne	r3,r2,432b0 <prvCheckTask+0x60>
        {
            /* ulRegTest1Counter is no longer being incremented, indicating
            that an error has been discovered in prvFirstRegTestTask(). */
            ulTicksToWait = mainERROR_PERIOD;
   43298:	00807d04 	movi	r2,500
   4329c:	e0bffa15 	stw	r2,-24(fp)
            pcMessage = "Error: Reg Test1.\n";
   432a0:	00800174 	movhi	r2,5
   432a4:	10891e04 	addi	r2,r2,9336
   432a8:	e0bffd15 	stw	r2,-12(fp)
   432ac:	00000a06 	br	432d8 <prvCheckTask+0x88>
        }
        else if( ulLastRegTest2 == ulRegTest2Counter )
   432b0:	d0a6e517 	ldw	r2,-25708(gp)
   432b4:	e0fffc17 	ldw	r3,-16(fp)
   432b8:	1880061e 	bne	r3,r2,432d4 <prvCheckTask+0x84>
        {
            /* ulRegTest2Counter is no longer being incremented, indicating
            that an error has been discovered in prvSecondRegTestTask(). */
            ulTicksToWait = mainERROR_PERIOD;
   432bc:	00807d04 	movi	r2,500
   432c0:	e0bffa15 	stw	r2,-24(fp)
            pcMessage = "Error: Reg Test2.\n";
   432c4:	00800174 	movhi	r2,5
   432c8:	10892304 	addi	r2,r2,9356
   432cc:	e0bffd15 	stw	r2,-12(fp)
   432d0:	00000106 	br	432d8 <prvCheckTask+0x88>
        }
		else
		{
			pcMessage = NULL;
   432d4:	e03ffd15 	stw	zero,-12(fp)
		}

        /* Remember the counter values this time around so a counter failing
        to be incremented correctly can be spotted. */
        ulLastRegTest1 = ulRegTest1Counter;
   432d8:	d0a6e417 	ldw	r2,-25712(gp)
   432dc:	e0bffb15 	stw	r2,-20(fp)
        ulLastRegTest2 = ulRegTest2Counter;
   432e0:	d0a6e517 	ldw	r2,-25708(gp)
   432e4:	e0bffc15 	stw	r2,-16(fp)

        /* Print out an error message if there is one.  Mutual exclusion is
        not used as this is the only task accessing stdout. */
        if( pcMessage != NULL )
   432e8:	e0bffd17 	ldw	r2,-12(fp)
   432ec:	10000226 	beq	r2,zero,432f8 <prvCheckTask+0xa8>
        {
            printf( pcMessage );
   432f0:	e13ffd17 	ldw	r4,-12(fp)
   432f4:	0043b700 	call	43b70 <printf>
        }


        //added cjr
        printf(".");
   432f8:	01000b84 	movi	r4,46
   432fc:	0043bb40 	call	43bb4 <putchar>
	}
   43300:	003fde06 	br	4327c <__alt_data_end+0xfffc88fc>

00043304 <prvFirstRegTestTask>:
}
/*-----------------------------------------------------------*/

static void prvFirstRegTestTask( void *pvParameters )
{
   43304:	defffd04 	addi	sp,sp,-12
   43308:	dfc00215 	stw	ra,8(sp)
   4330c:	df000115 	stw	fp,4(sp)
   43310:	df000104 	addi	fp,sp,4
   43314:	e13fff15 	stw	r4,-4(fp)
    /* Check the parameters are passed in as expected. */
    if( pvParameters != mainREG_TEST_1_PARAMETER )
   43318:	e0ffff17 	ldw	r3,-4(fp)
   4331c:	00800234 	movhi	r2,8
   43320:	10aa5fc4 	addi	r2,r2,-22145
   43324:	18800226 	beq	r3,r2,43330 <prvFirstRegTestTask+0x2c>
    {
        /* Don't execute any further so an error is recognised by the check
        task. */
        vTaskDelete( NULL );
   43328:	0009883a 	mov	r4,zero
   4332c:	0041c080 	call	41c08 <vTaskDelete>

    If no errors are found ulRegTest1Counter is incremented.  The check task
    will recognise an error if ulRegTest1Counter stops being incremented.
    This task also performs a manual yield in the middle of its execution, just
    to increase the test coverage. */
    asm volatile (
   43330:	00c000c4 	movi	r3,3
   43334:	01000104 	movi	r4,4
   43338:	01400144 	movi	r5,5
   4333c:	01800184 	movi	r6,6
   43340:	01c001c4 	movi	r7,7
   43344:	02000204 	movi	r8,8
   43348:	02400244 	movi	r9,9
   4334c:	02800284 	movi	r10,10
   43350:	02c002c4 	movi	r11,11
   43354:	03000304 	movi	r12,12
   43358:	03400344 	movi	r13,13
   4335c:	03800384 	movi	r14,14
   43360:	03c003c4 	movi	r15,15
   43364:	04000404 	movi	r16,16
   43368:	04400444 	movi	r17,17
   4336c:	04800484 	movi	r18,18
   43370:	04c004c4 	movi	r19,19
   43374:	05000504 	movi	r20,20
   43378:	05400544 	movi	r21,21
   4337c:	05800584 	movi	r22,22
   43380:	05c005c4 	movi	r23,23
   43384:	07000704 	movi	fp,28
   43388:	07c007c4 	movi	ra,31

0004338c <RegTest1>:
   4338c:	00800004 	movi	r2,0
   43390:	003b683a 	trap	0
   43394:	1000321e 	bne	r2,zero,43460 <RegTest1Error>
   43398:	008000c4 	movi	r2,3
   4339c:	10c0301e 	bne	r2,r3,43460 <RegTest1Error>
   433a0:	00800104 	movi	r2,4
   433a4:	11002e1e 	bne	r2,r4,43460 <RegTest1Error>
   433a8:	00800144 	movi	r2,5
   433ac:	11402c1e 	bne	r2,r5,43460 <RegTest1Error>
   433b0:	00800184 	movi	r2,6
   433b4:	11802a1e 	bne	r2,r6,43460 <RegTest1Error>
   433b8:	008001c4 	movi	r2,7
   433bc:	11c0281e 	bne	r2,r7,43460 <RegTest1Error>
   433c0:	00800204 	movi	r2,8
   433c4:	1200261e 	bne	r2,r8,43460 <RegTest1Error>
   433c8:	00800244 	movi	r2,9
   433cc:	1240241e 	bne	r2,r9,43460 <RegTest1Error>
   433d0:	00800284 	movi	r2,10
   433d4:	1280221e 	bne	r2,r10,43460 <RegTest1Error>
   433d8:	008002c4 	movi	r2,11
   433dc:	12c0201e 	bne	r2,r11,43460 <RegTest1Error>
   433e0:	00800304 	movi	r2,12
   433e4:	13001e1e 	bne	r2,r12,43460 <RegTest1Error>
   433e8:	00800344 	movi	r2,13
   433ec:	13401c1e 	bne	r2,r13,43460 <RegTest1Error>
   433f0:	00800384 	movi	r2,14
   433f4:	13801a1e 	bne	r2,r14,43460 <RegTest1Error>
   433f8:	008003c4 	movi	r2,15
   433fc:	13c0181e 	bne	r2,r15,43460 <RegTest1Error>
   43400:	00800404 	movi	r2,16
   43404:	1400161e 	bne	r2,r16,43460 <RegTest1Error>
   43408:	00800444 	movi	r2,17
   4340c:	1440141e 	bne	r2,r17,43460 <RegTest1Error>
   43410:	00800484 	movi	r2,18
   43414:	1480121e 	bne	r2,r18,43460 <RegTest1Error>
   43418:	008004c4 	movi	r2,19
   4341c:	14c0101e 	bne	r2,r19,43460 <RegTest1Error>
   43420:	00800504 	movi	r2,20
   43424:	15000e1e 	bne	r2,r20,43460 <RegTest1Error>
   43428:	00800544 	movi	r2,21
   4342c:	15400c1e 	bne	r2,r21,43460 <RegTest1Error>
   43430:	00800584 	movi	r2,22
   43434:	15800a1e 	bne	r2,r22,43460 <RegTest1Error>
   43438:	008005c4 	movi	r2,23
   4343c:	15c0081e 	bne	r2,r23,43460 <RegTest1Error>
   43440:	00800704 	movi	r2,28
   43444:	1700061e 	bne	r2,fp,43460 <RegTest1Error>
   43448:	008007c4 	movi	r2,31
   4344c:	17c0041e 	bne	r2,ra,43460 <RegTest1Error>
   43450:	d0a6e417 	ldw	r2,-25712(gp)
   43454:	10800044 	addi	r2,r2,1
   43458:	d0a6e415 	stw	r2,-25712(gp)
   4345c:	003fcb06 	br	4338c <__alt_data_end+0xfffc8a0c>

00043460 <RegTest1Error>:
   43460:	003fff06 	br	43460 <__alt_data_end+0xfffc8ae0>
        "   stw     r2, %gprel(ulRegTest1Counter)(gp)       \n" \
        "   br      RegTest1                    \n" \
        "RegTest1Error:                         \n" \
        "   br      RegTest1Error               \n"
    );
}
   43464:	e037883a 	mov	sp,fp
   43468:	dfc00117 	ldw	ra,4(sp)
   4346c:	df000017 	ldw	fp,0(sp)
   43470:	dec00204 	addi	sp,sp,8
   43474:	f800283a 	ret

00043478 <prvSecondRegTestTask>:
/*-----------------------------------------------------------*/

static void prvSecondRegTestTask( void *pvParameters )
{
   43478:	defffd04 	addi	sp,sp,-12
   4347c:	dfc00215 	stw	ra,8(sp)
   43480:	df000115 	stw	fp,4(sp)
   43484:	df000104 	addi	fp,sp,4
   43488:	e13fff15 	stw	r4,-4(fp)
    /* Check the parameters are passed in as expected. */
    if( pvParameters != mainREG_TEST_2_PARAMETER )
   4348c:	e0ffff17 	ldw	r3,-4(fp)
   43490:	00800234 	movhi	r2,8
   43494:	10aa6004 	addi	r2,r2,-22144
   43498:	18800226 	beq	r3,r2,434a4 <prvSecondRegTestTask+0x2c>
    {
        /* Don't execute any further so an error is recognised by the check
        task. */
        vTaskDelete( NULL );
   4349c:	0009883a 	mov	r4,zero
   434a0:	0041c080 	call	41c08 <vTaskDelete>
    contains its expected value.  An incorrect value is indicative of an error
    in the context switching process.

    If no errors are found ulRegTest2Counter is incremented.  The check task
    will recognise an error if ulRegTest2Counter stops being incremented. */
    asm volatile (
   434a4:	00c000c4 	movi	r3,3
   434a8:	01000104 	movi	r4,4
   434ac:	01400144 	movi	r5,5
   434b0:	01800184 	movi	r6,6
   434b4:	01c001c4 	movi	r7,7
   434b8:	02000204 	movi	r8,8
   434bc:	02400244 	movi	r9,9
   434c0:	02800284 	movi	r10,10
   434c4:	02c002c4 	movi	r11,11
   434c8:	03000304 	movi	r12,12
   434cc:	03400344 	movi	r13,13
   434d0:	03800384 	movi	r14,14
   434d4:	03c003c4 	movi	r15,15
   434d8:	04000404 	movi	r16,16
   434dc:	04400444 	movi	r17,17
   434e0:	04800484 	movi	r18,18
   434e4:	04c004c4 	movi	r19,19
   434e8:	05000504 	movi	r20,20
   434ec:	05400544 	movi	r21,21
   434f0:	05800584 	movi	r22,22
   434f4:	05c005c4 	movi	r23,23
   434f8:	07000704 	movi	fp,28
   434fc:	07c007c4 	movi	ra,31

00043500 <RegTest2>:
   43500:	00800004 	movi	r2,0
   43504:	1000321e 	bne	r2,zero,435d0 <RegTest2Error>
   43508:	008000c4 	movi	r2,3
   4350c:	10c0301e 	bne	r2,r3,435d0 <RegTest2Error>
   43510:	00800104 	movi	r2,4
   43514:	11002e1e 	bne	r2,r4,435d0 <RegTest2Error>
   43518:	00800144 	movi	r2,5
   4351c:	11402c1e 	bne	r2,r5,435d0 <RegTest2Error>
   43520:	00800184 	movi	r2,6
   43524:	11802a1e 	bne	r2,r6,435d0 <RegTest2Error>
   43528:	008001c4 	movi	r2,7
   4352c:	11c0281e 	bne	r2,r7,435d0 <RegTest2Error>
   43530:	00800204 	movi	r2,8
   43534:	1200261e 	bne	r2,r8,435d0 <RegTest2Error>
   43538:	00800244 	movi	r2,9
   4353c:	1240241e 	bne	r2,r9,435d0 <RegTest2Error>
   43540:	00800284 	movi	r2,10
   43544:	1280221e 	bne	r2,r10,435d0 <RegTest2Error>
   43548:	008002c4 	movi	r2,11
   4354c:	12c0201e 	bne	r2,r11,435d0 <RegTest2Error>
   43550:	00800304 	movi	r2,12
   43554:	13001e1e 	bne	r2,r12,435d0 <RegTest2Error>
   43558:	00800344 	movi	r2,13
   4355c:	13401c1e 	bne	r2,r13,435d0 <RegTest2Error>
   43560:	00800384 	movi	r2,14
   43564:	13801a1e 	bne	r2,r14,435d0 <RegTest2Error>
   43568:	008003c4 	movi	r2,15
   4356c:	13c0181e 	bne	r2,r15,435d0 <RegTest2Error>
   43570:	00800404 	movi	r2,16
   43574:	1400161e 	bne	r2,r16,435d0 <RegTest2Error>
   43578:	00800444 	movi	r2,17
   4357c:	1440141e 	bne	r2,r17,435d0 <RegTest2Error>
   43580:	00800484 	movi	r2,18
   43584:	1480121e 	bne	r2,r18,435d0 <RegTest2Error>
   43588:	008004c4 	movi	r2,19
   4358c:	14c0101e 	bne	r2,r19,435d0 <RegTest2Error>
   43590:	00800504 	movi	r2,20
   43594:	15000e1e 	bne	r2,r20,435d0 <RegTest2Error>
   43598:	00800544 	movi	r2,21
   4359c:	15400c1e 	bne	r2,r21,435d0 <RegTest2Error>
   435a0:	00800584 	movi	r2,22
   435a4:	15800a1e 	bne	r2,r22,435d0 <RegTest2Error>
   435a8:	008005c4 	movi	r2,23
   435ac:	15c0081e 	bne	r2,r23,435d0 <RegTest2Error>
   435b0:	00800704 	movi	r2,28
   435b4:	1700061e 	bne	r2,fp,435d0 <RegTest2Error>
   435b8:	008007c4 	movi	r2,31
   435bc:	17c0041e 	bne	r2,ra,435d0 <RegTest2Error>
   435c0:	d0a6e517 	ldw	r2,-25708(gp)
   435c4:	10800044 	addi	r2,r2,1
   435c8:	d0a6e515 	stw	r2,-25708(gp)
   435cc:	003fcc06 	br	43500 <__alt_data_end+0xfffc8b80>

000435d0 <RegTest2Error>:
   435d0:	003fff06 	br	435d0 <__alt_data_end+0xfffc8c50>
        "   stw     r2, %gprel(ulRegTest2Counter)(gp)       \n" \
        "   br      RegTest2                    \n" \
        "RegTest2Error:                         \n" \
        "   br      RegTest2Error               \n"
    );
}
   435d4:	e037883a 	mov	sp,fp
   435d8:	dfc00117 	ldw	ra,4(sp)
   435dc:	df000017 	ldw	fp,0(sp)
   435e0:	dec00204 	addi	sp,sp,8
   435e4:	f800283a 	ret

000435e8 <Tarea_LED0>:
	unsigned char out_tmp=1<<x;\
	unsigned char out=in_led ^ out_tmp;\
	IOWR(LED_BASE,0,out);\
}

void Tarea_LED0(void *pvParameters) {
   435e8:	defffc04 	addi	sp,sp,-16
   435ec:	dfc00315 	stw	ra,12(sp)
   435f0:	df000215 	stw	fp,8(sp)
   435f4:	df000204 	addi	fp,sp,8
   435f8:	e13fff15 	stw	r4,-4(fp)

	for (;;){
		TOGGLE_LED(0);
   435fc:	0005883a 	mov	r2,zero
   43600:	10800037 	ldwio	r2,0(r2)
   43604:	e0bffe05 	stb	r2,-8(fp)
   43608:	00800044 	movi	r2,1
   4360c:	e0bffe45 	stb	r2,-7(fp)
   43610:	e0fffe03 	ldbu	r3,-8(fp)
   43614:	e0bffe43 	ldbu	r2,-7(fp)
   43618:	1884f03a 	xor	r2,r3,r2
   4361c:	e0bffe85 	stb	r2,-6(fp)
   43620:	e0bffe83 	ldbu	r2,-6(fp)
   43624:	0007883a 	mov	r3,zero
   43628:	18800035 	stwio	r2,0(r3)
		vTaskDelay(500 / portTICK_RATE_MS); //
   4362c:	01007d04 	movi	r4,500
   43630:	0041db40 	call	41db4 <vTaskDelay>

	}
   43634:	003ff106 	br	435fc <__alt_data_end+0xfffc8c7c>

00043638 <Tarea_LED1>:
	vTaskDelete(NULL);
}

void Tarea_LED1(void *pvParameters) {
   43638:	defffc04 	addi	sp,sp,-16
   4363c:	dfc00315 	stw	ra,12(sp)
   43640:	df000215 	stw	fp,8(sp)
   43644:	df000204 	addi	fp,sp,8
   43648:	e13fff15 	stw	r4,-4(fp)

	for (;;){
		TOGGLE_LED(1);
   4364c:	0005883a 	mov	r2,zero
   43650:	10800037 	ldwio	r2,0(r2)
   43654:	e0bffe05 	stb	r2,-8(fp)
   43658:	00800084 	movi	r2,2
   4365c:	e0bffe45 	stb	r2,-7(fp)
   43660:	e0fffe03 	ldbu	r3,-8(fp)
   43664:	e0bffe43 	ldbu	r2,-7(fp)
   43668:	1884f03a 	xor	r2,r3,r2
   4366c:	e0bffe85 	stb	r2,-6(fp)
   43670:	e0bffe83 	ldbu	r2,-6(fp)
   43674:	0007883a 	mov	r3,zero
   43678:	18800035 	stwio	r2,0(r3)
		vTaskDelay(100 / portTICK_RATE_MS); //
   4367c:	01001904 	movi	r4,100
   43680:	0041db40 	call	41db4 <vTaskDelay>

	}
   43684:	003ff106 	br	4364c <__alt_data_end+0xfffc8ccc>

00043688 <Tarea_LED2_6>:
	vTaskDelete(NULL);
}

void Tarea_LED2_6(void *pvParameters) {
   43688:	defffc04 	addi	sp,sp,-16
   4368c:	dfc00315 	stw	ra,12(sp)
   43690:	df000215 	stw	fp,8(sp)
   43694:	df000204 	addi	fp,sp,8
   43698:	e13fff15 	stw	r4,-4(fp)
	unsigned char led_2_6;
	unsigned char temp_led;
	led_2_6=1;
   4369c:	00800044 	movi	r2,1
   436a0:	e0bffe05 	stb	r2,-8(fp)
	for (;;){

		if (led_2_6 & 0x10){
   436a4:	e0bffe03 	ldbu	r2,-8(fp)
   436a8:	1080040c 	andi	r2,r2,16
   436ac:	10000226 	beq	r2,zero,436b8 <Tarea_LED2_6+0x30>
			led_2_6=1;
   436b0:	00800044 	movi	r2,1
   436b4:	e0bffe05 	stb	r2,-8(fp)
		}
		led_2_6=led_2_6<<1;
   436b8:	e0bffe03 	ldbu	r2,-8(fp)
   436bc:	1085883a 	add	r2,r2,r2
   436c0:	e0bffe05 	stb	r2,-8(fp)
		temp_led=READ_LED_PORT & 0x83;
   436c4:	0005883a 	mov	r2,zero
   436c8:	10800037 	ldwio	r2,0(r2)
   436cc:	1007883a 	mov	r3,r2
   436d0:	00bfe0c4 	movi	r2,-125
   436d4:	1884703a 	and	r2,r3,r2
   436d8:	e0bffe45 	stb	r2,-7(fp)
		temp_led=temp_led | (led_2_6<<2);
   436dc:	e0bffe03 	ldbu	r2,-8(fp)
   436e0:	1085883a 	add	r2,r2,r2
   436e4:	1085883a 	add	r2,r2,r2
   436e8:	1007883a 	mov	r3,r2
   436ec:	e0bffe43 	ldbu	r2,-7(fp)
   436f0:	1884b03a 	or	r2,r3,r2
   436f4:	e0bffe45 	stb	r2,-7(fp)
		WRITE_LED_PORT(temp_led);
   436f8:	e0bffe43 	ldbu	r2,-7(fp)
   436fc:	0007883a 	mov	r3,zero
   43700:	18800035 	stwio	r2,0(r3)

		vTaskDelay(50 / portTICK_RATE_MS); //
   43704:	01000c84 	movi	r4,50
   43708:	0041db40 	call	41db4 <vTaskDelay>
	}
   4370c:	003fe506 	br	436a4 <__alt_data_end+0xfffc8d24>

00043710 <Tarea_LED7>:
	vTaskDelete(NULL);
}

void Tarea_LED7(void *pvParameters) {
   43710:	defffc04 	addi	sp,sp,-16
   43714:	dfc00315 	stw	ra,12(sp)
   43718:	df000215 	stw	fp,8(sp)
   4371c:	df000204 	addi	fp,sp,8
   43720:	e13fff15 	stw	r4,-4(fp)

	for (;;){
		TOGGLE_LED(7);
   43724:	0005883a 	mov	r2,zero
   43728:	10800037 	ldwio	r2,0(r2)
   4372c:	e0bffe05 	stb	r2,-8(fp)
   43730:	00bfe004 	movi	r2,-128
   43734:	e0bffe45 	stb	r2,-7(fp)
   43738:	e0fffe03 	ldbu	r3,-8(fp)
   4373c:	e0bffe43 	ldbu	r2,-7(fp)
   43740:	1884f03a 	xor	r2,r3,r2
   43744:	e0bffe85 	stb	r2,-6(fp)
   43748:	e0bffe83 	ldbu	r2,-6(fp)
   4374c:	0007883a 	mov	r3,zero
   43750:	18800035 	stwio	r2,0(r3)
		vTaskDelay(1000 / portTICK_RATE_MS); //
   43754:	0100fa04 	movi	r4,1000
   43758:	0041db40 	call	41db4 <vTaskDelay>

		vTaskDelay(45 / portTICK_RATE_MS);
   4375c:	01000b44 	movi	r4,45
   43760:	0041db40 	call	41db4 <vTaskDelay>
	}
   43764:	003fef06 	br	43724 <__alt_data_end+0xfffc8da4>

00043768 <SetupHardware>:
	vTaskDelete(NULL);
}

void SetupHardware(){
   43768:	deffff04 	addi	sp,sp,-4
   4376c:	df000015 	stw	fp,0(sp)
   43770:	d839883a 	mov	fp,sp
	WRITE_LED_PORT(0); //inicia los leds en 0
   43774:	0007883a 	mov	r3,zero
   43778:	0005883a 	mov	r2,zero
   4377c:	10c00035 	stwio	r3,0(r2)
}
   43780:	e037883a 	mov	sp,fp
   43784:	df000017 	ldw	fp,0(sp)
   43788:	dec00104 	addi	sp,sp,4
   4378c:	f800283a 	ret

00043790 <main>:
int main() {
   43790:	defffa04 	addi	sp,sp,-24
   43794:	dfc00515 	stw	ra,20(sp)
   43798:	df000415 	stw	fp,16(sp)
   4379c:	df000404 	addi	fp,sp,16

	SetupHardware();
   437a0:	00437680 	call	43768 <SetupHardware>
	(void) xTaskCreate(Tarea_LED0, (signed portCHAR *) "Terea_LED0",
   437a4:	00800044 	movi	r2,1
   437a8:	d8800015 	stw	r2,0(sp)
   437ac:	d8000115 	stw	zero,4(sp)
   437b0:	d8000215 	stw	zero,8(sp)
   437b4:	d8000315 	stw	zero,12(sp)
   437b8:	01000134 	movhi	r4,4
   437bc:	210d7a04 	addi	r4,r4,13800
   437c0:	01400174 	movhi	r5,5
   437c4:	29492804 	addi	r5,r5,9376
   437c8:	01810004 	movi	r6,1024
   437cc:	000f883a 	mov	r7,zero
   437d0:	0041a300 	call	41a30 <xTaskGenericCreate>
			configMINIMAL_STACK_SIZE, (void * )0, LED_0_TASK_PRIORITY,
			(xTaskHandle *)NULL);
	(void) xTaskCreate(Tarea_LED1, (signed portCHAR *) "Terea_LED1",
   437d4:	00800084 	movi	r2,2
   437d8:	d8800015 	stw	r2,0(sp)
   437dc:	d8000115 	stw	zero,4(sp)
   437e0:	d8000215 	stw	zero,8(sp)
   437e4:	d8000315 	stw	zero,12(sp)
   437e8:	01000134 	movhi	r4,4
   437ec:	210d8e04 	addi	r4,r4,13880
   437f0:	01400174 	movhi	r5,5
   437f4:	29492b04 	addi	r5,r5,9388
   437f8:	01810004 	movi	r6,1024
   437fc:	000f883a 	mov	r7,zero
   43800:	0041a300 	call	41a30 <xTaskGenericCreate>
			configMINIMAL_STACK_SIZE, (void * )0, LED_1_TASK_PRIORITY,
			(xTaskHandle *)NULL);
	(void) xTaskCreate(Tarea_LED2_6, (signed portCHAR *) "Terea_LED1",
   43804:	008000c4 	movi	r2,3
   43808:	d8800015 	stw	r2,0(sp)
   4380c:	d8000115 	stw	zero,4(sp)
   43810:	d8000215 	stw	zero,8(sp)
   43814:	d8000315 	stw	zero,12(sp)
   43818:	01000134 	movhi	r4,4
   4381c:	210da204 	addi	r4,r4,13960
   43820:	01400174 	movhi	r5,5
   43824:	29492b04 	addi	r5,r5,9388
   43828:	01810004 	movi	r6,1024
   4382c:	000f883a 	mov	r7,zero
   43830:	0041a300 	call	41a30 <xTaskGenericCreate>
				configMINIMAL_STACK_SIZE, (void * )0, LED_2_6_TASK_PRIORITY,
				(xTaskHandle *)NULL);
	(void) xTaskCreate(Tarea_LED7, (signed portCHAR *) "Terea_LED1",
   43834:	00800104 	movi	r2,4
   43838:	d8800015 	stw	r2,0(sp)
   4383c:	d8000115 	stw	zero,4(sp)
   43840:	d8000215 	stw	zero,8(sp)
   43844:	d8000315 	stw	zero,12(sp)
   43848:	01000134 	movhi	r4,4
   4384c:	210dc404 	addi	r4,r4,14096
   43850:	01400174 	movhi	r5,5
   43854:	29492b04 	addi	r5,r5,9388
   43858:	01810004 	movi	r6,1024
   4385c:	000f883a 	mov	r7,zero
   43860:	0041a300 	call	41a30 <xTaskGenericCreate>
					configMINIMAL_STACK_SIZE, (void * )0, LED_7_TASK_PRIORITY,
					(xTaskHandle *)NULL);
	vTaskStartScheduler();
   43864:	00422f00 	call	422f0 <vTaskStartScheduler>

	for (;;) {

	}
   43868:	003fff06 	br	43868 <__alt_data_end+0xfffc8ee8>

0004386c <memcmp>:
   4386c:	01c000c4 	movi	r7,3
   43870:	3980192e 	bgeu	r7,r6,438d8 <memcmp+0x6c>
   43874:	2144b03a 	or	r2,r4,r5
   43878:	11c4703a 	and	r2,r2,r7
   4387c:	10000f26 	beq	r2,zero,438bc <memcmp+0x50>
   43880:	20800003 	ldbu	r2,0(r4)
   43884:	28c00003 	ldbu	r3,0(r5)
   43888:	10c0151e 	bne	r2,r3,438e0 <memcmp+0x74>
   4388c:	31bfff84 	addi	r6,r6,-2
   43890:	01ffffc4 	movi	r7,-1
   43894:	00000406 	br	438a8 <memcmp+0x3c>
   43898:	20800003 	ldbu	r2,0(r4)
   4389c:	28c00003 	ldbu	r3,0(r5)
   438a0:	31bfffc4 	addi	r6,r6,-1
   438a4:	10c00e1e 	bne	r2,r3,438e0 <memcmp+0x74>
   438a8:	21000044 	addi	r4,r4,1
   438ac:	29400044 	addi	r5,r5,1
   438b0:	31fff91e 	bne	r6,r7,43898 <__alt_data_end+0xfffc8f18>
   438b4:	0005883a 	mov	r2,zero
   438b8:	f800283a 	ret
   438bc:	20c00017 	ldw	r3,0(r4)
   438c0:	28800017 	ldw	r2,0(r5)
   438c4:	1880041e 	bne	r3,r2,438d8 <memcmp+0x6c>
   438c8:	31bfff04 	addi	r6,r6,-4
   438cc:	21000104 	addi	r4,r4,4
   438d0:	29400104 	addi	r5,r5,4
   438d4:	39bff936 	bltu	r7,r6,438bc <__alt_data_end+0xfffc8f3c>
   438d8:	303fe91e 	bne	r6,zero,43880 <__alt_data_end+0xfffc8f00>
   438dc:	003ff506 	br	438b4 <__alt_data_end+0xfffc8f34>
   438e0:	10c5c83a 	sub	r2,r2,r3
   438e4:	f800283a 	ret

000438e8 <memcpy>:
   438e8:	deffff04 	addi	sp,sp,-4
   438ec:	dc000015 	stw	r16,0(sp)
   438f0:	00c003c4 	movi	r3,15
   438f4:	2005883a 	mov	r2,r4
   438f8:	1980432e 	bgeu	r3,r6,43a08 <memcpy+0x120>
   438fc:	2146b03a 	or	r3,r4,r5
   43900:	18c000cc 	andi	r3,r3,3
   43904:	1800421e 	bne	r3,zero,43a10 <memcpy+0x128>
   43908:	343ffc04 	addi	r16,r6,-16
   4390c:	8020d13a 	srli	r16,r16,4
   43910:	28c00104 	addi	r3,r5,4
   43914:	23400104 	addi	r13,r4,4
   43918:	801e913a 	slli	r15,r16,4
   4391c:	2b000204 	addi	r12,r5,8
   43920:	22c00204 	addi	r11,r4,8
   43924:	7bc00504 	addi	r15,r15,20
   43928:	2a800304 	addi	r10,r5,12
   4392c:	22400304 	addi	r9,r4,12
   43930:	2bdf883a 	add	r15,r5,r15
   43934:	2811883a 	mov	r8,r5
   43938:	200f883a 	mov	r7,r4
   4393c:	41000017 	ldw	r4,0(r8)
   43940:	39c00404 	addi	r7,r7,16
   43944:	18c00404 	addi	r3,r3,16
   43948:	393ffc15 	stw	r4,-16(r7)
   4394c:	1bbffc17 	ldw	r14,-16(r3)
   43950:	6b400404 	addi	r13,r13,16
   43954:	5ac00404 	addi	r11,r11,16
   43958:	6bbffc15 	stw	r14,-16(r13)
   4395c:	63800017 	ldw	r14,0(r12)
   43960:	4a400404 	addi	r9,r9,16
   43964:	42000404 	addi	r8,r8,16
   43968:	5bbffc15 	stw	r14,-16(r11)
   4396c:	53800017 	ldw	r14,0(r10)
   43970:	63000404 	addi	r12,r12,16
   43974:	52800404 	addi	r10,r10,16
   43978:	4bbffc15 	stw	r14,-16(r9)
   4397c:	1bffef1e 	bne	r3,r15,4393c <__alt_data_end+0xfffc8fbc>
   43980:	81c00044 	addi	r7,r16,1
   43984:	380e913a 	slli	r7,r7,4
   43988:	310003cc 	andi	r4,r6,15
   4398c:	02c000c4 	movi	r11,3
   43990:	11c7883a 	add	r3,r2,r7
   43994:	29cb883a 	add	r5,r5,r7
   43998:	59001f2e 	bgeu	r11,r4,43a18 <memcpy+0x130>
   4399c:	1813883a 	mov	r9,r3
   439a0:	2811883a 	mov	r8,r5
   439a4:	200f883a 	mov	r7,r4
   439a8:	42800017 	ldw	r10,0(r8)
   439ac:	4a400104 	addi	r9,r9,4
   439b0:	39ffff04 	addi	r7,r7,-4
   439b4:	4abfff15 	stw	r10,-4(r9)
   439b8:	42000104 	addi	r8,r8,4
   439bc:	59fffa36 	bltu	r11,r7,439a8 <__alt_data_end+0xfffc9028>
   439c0:	213fff04 	addi	r4,r4,-4
   439c4:	2008d0ba 	srli	r4,r4,2
   439c8:	318000cc 	andi	r6,r6,3
   439cc:	21000044 	addi	r4,r4,1
   439d0:	2109883a 	add	r4,r4,r4
   439d4:	2109883a 	add	r4,r4,r4
   439d8:	1907883a 	add	r3,r3,r4
   439dc:	290b883a 	add	r5,r5,r4
   439e0:	30000626 	beq	r6,zero,439fc <memcpy+0x114>
   439e4:	198d883a 	add	r6,r3,r6
   439e8:	29c00003 	ldbu	r7,0(r5)
   439ec:	18c00044 	addi	r3,r3,1
   439f0:	29400044 	addi	r5,r5,1
   439f4:	19ffffc5 	stb	r7,-1(r3)
   439f8:	19bffb1e 	bne	r3,r6,439e8 <__alt_data_end+0xfffc9068>
   439fc:	dc000017 	ldw	r16,0(sp)
   43a00:	dec00104 	addi	sp,sp,4
   43a04:	f800283a 	ret
   43a08:	2007883a 	mov	r3,r4
   43a0c:	003ff406 	br	439e0 <__alt_data_end+0xfffc9060>
   43a10:	2007883a 	mov	r3,r4
   43a14:	003ff306 	br	439e4 <__alt_data_end+0xfffc9064>
   43a18:	200d883a 	mov	r6,r4
   43a1c:	003ff006 	br	439e0 <__alt_data_end+0xfffc9060>

00043a20 <memset>:
   43a20:	20c000cc 	andi	r3,r4,3
   43a24:	2005883a 	mov	r2,r4
   43a28:	18004326 	beq	r3,zero,43b38 <memset+0x118>
   43a2c:	31ffffc4 	addi	r7,r6,-1
   43a30:	30004026 	beq	r6,zero,43b34 <memset+0x114>
   43a34:	2813883a 	mov	r9,r5
   43a38:	200d883a 	mov	r6,r4
   43a3c:	2007883a 	mov	r3,r4
   43a40:	00000406 	br	43a54 <memset+0x34>
   43a44:	3a3fffc4 	addi	r8,r7,-1
   43a48:	31800044 	addi	r6,r6,1
   43a4c:	38003926 	beq	r7,zero,43b34 <memset+0x114>
   43a50:	400f883a 	mov	r7,r8
   43a54:	18c00044 	addi	r3,r3,1
   43a58:	32400005 	stb	r9,0(r6)
   43a5c:	1a0000cc 	andi	r8,r3,3
   43a60:	403ff81e 	bne	r8,zero,43a44 <__alt_data_end+0xfffc90c4>
   43a64:	010000c4 	movi	r4,3
   43a68:	21c02d2e 	bgeu	r4,r7,43b20 <memset+0x100>
   43a6c:	29803fcc 	andi	r6,r5,255
   43a70:	3008923a 	slli	r4,r6,8
   43a74:	218cb03a 	or	r6,r4,r6
   43a78:	3008943a 	slli	r4,r6,16
   43a7c:	218cb03a 	or	r6,r4,r6
   43a80:	010003c4 	movi	r4,15
   43a84:	21c0182e 	bgeu	r4,r7,43ae8 <memset+0xc8>
   43a88:	3b3ffc04 	addi	r12,r7,-16
   43a8c:	6018d13a 	srli	r12,r12,4
   43a90:	1a000104 	addi	r8,r3,4
   43a94:	1ac00204 	addi	r11,r3,8
   43a98:	6008913a 	slli	r4,r12,4
   43a9c:	1a800304 	addi	r10,r3,12
   43aa0:	1813883a 	mov	r9,r3
   43aa4:	21000504 	addi	r4,r4,20
   43aa8:	1909883a 	add	r4,r3,r4
   43aac:	49800015 	stw	r6,0(r9)
   43ab0:	41800015 	stw	r6,0(r8)
   43ab4:	59800015 	stw	r6,0(r11)
   43ab8:	51800015 	stw	r6,0(r10)
   43abc:	42000404 	addi	r8,r8,16
   43ac0:	4a400404 	addi	r9,r9,16
   43ac4:	5ac00404 	addi	r11,r11,16
   43ac8:	52800404 	addi	r10,r10,16
   43acc:	413ff71e 	bne	r8,r4,43aac <__alt_data_end+0xfffc912c>
   43ad0:	63000044 	addi	r12,r12,1
   43ad4:	6018913a 	slli	r12,r12,4
   43ad8:	39c003cc 	andi	r7,r7,15
   43adc:	010000c4 	movi	r4,3
   43ae0:	1b07883a 	add	r3,r3,r12
   43ae4:	21c00e2e 	bgeu	r4,r7,43b20 <memset+0x100>
   43ae8:	1813883a 	mov	r9,r3
   43aec:	3811883a 	mov	r8,r7
   43af0:	010000c4 	movi	r4,3
   43af4:	49800015 	stw	r6,0(r9)
   43af8:	423fff04 	addi	r8,r8,-4
   43afc:	4a400104 	addi	r9,r9,4
   43b00:	223ffc36 	bltu	r4,r8,43af4 <__alt_data_end+0xfffc9174>
   43b04:	393fff04 	addi	r4,r7,-4
   43b08:	2008d0ba 	srli	r4,r4,2
   43b0c:	39c000cc 	andi	r7,r7,3
   43b10:	21000044 	addi	r4,r4,1
   43b14:	2109883a 	add	r4,r4,r4
   43b18:	2109883a 	add	r4,r4,r4
   43b1c:	1907883a 	add	r3,r3,r4
   43b20:	38000426 	beq	r7,zero,43b34 <memset+0x114>
   43b24:	19cf883a 	add	r7,r3,r7
   43b28:	19400005 	stb	r5,0(r3)
   43b2c:	18c00044 	addi	r3,r3,1
   43b30:	19fffd1e 	bne	r3,r7,43b28 <__alt_data_end+0xfffc91a8>
   43b34:	f800283a 	ret
   43b38:	2007883a 	mov	r3,r4
   43b3c:	300f883a 	mov	r7,r6
   43b40:	003fc806 	br	43a64 <__alt_data_end+0xfffc90e4>

00043b44 <_printf_r>:
   43b44:	defffd04 	addi	sp,sp,-12
   43b48:	dfc00015 	stw	ra,0(sp)
   43b4c:	d9800115 	stw	r6,4(sp)
   43b50:	d9c00215 	stw	r7,8(sp)
   43b54:	280d883a 	mov	r6,r5
   43b58:	21400217 	ldw	r5,8(r4)
   43b5c:	d9c00104 	addi	r7,sp,4
   43b60:	0043cb80 	call	43cb8 <___vfprintf_internal_r>
   43b64:	dfc00017 	ldw	ra,0(sp)
   43b68:	dec00304 	addi	sp,sp,12
   43b6c:	f800283a 	ret

00043b70 <printf>:
   43b70:	defffc04 	addi	sp,sp,-16
   43b74:	dfc00015 	stw	ra,0(sp)
   43b78:	d9400115 	stw	r5,4(sp)
   43b7c:	d9800215 	stw	r6,8(sp)
   43b80:	d9c00315 	stw	r7,12(sp)
   43b84:	00800174 	movhi	r2,5
   43b88:	10909a04 	addi	r2,r2,17000
   43b8c:	10800017 	ldw	r2,0(r2)
   43b90:	200b883a 	mov	r5,r4
   43b94:	d9800104 	addi	r6,sp,4
   43b98:	11000217 	ldw	r4,8(r2)
   43b9c:	0045cb40 	call	45cb4 <__vfprintf_internal>
   43ba0:	dfc00017 	ldw	ra,0(sp)
   43ba4:	dec00404 	addi	sp,sp,16
   43ba8:	f800283a 	ret

00043bac <_putchar_r>:
   43bac:	21800217 	ldw	r6,8(r4)
   43bb0:	0049d601 	jmpi	49d60 <_putc_r>

00043bb4 <putchar>:
   43bb4:	00800174 	movhi	r2,5
   43bb8:	10909a04 	addi	r2,r2,17000
   43bbc:	200b883a 	mov	r5,r4
   43bc0:	11000017 	ldw	r4,0(r2)
   43bc4:	21800217 	ldw	r6,8(r4)
   43bc8:	0049d601 	jmpi	49d60 <_putc_r>

00043bcc <strncpy>:
   43bcc:	2906b03a 	or	r3,r5,r4
   43bd0:	18c000cc 	andi	r3,r3,3
   43bd4:	2005883a 	mov	r2,r4
   43bd8:	18002c1e 	bne	r3,zero,43c8c <strncpy+0xc0>
   43bdc:	010000c4 	movi	r4,3
   43be0:	21802a2e 	bgeu	r4,r6,43c8c <strncpy+0xc0>
   43be4:	033fbff4 	movhi	r12,65279
   43be8:	02e02074 	movhi	r11,32897
   43bec:	633fbfc4 	addi	r12,r12,-257
   43bf0:	5ae02004 	addi	r11,r11,-32640
   43bf4:	100f883a 	mov	r7,r2
   43bf8:	2a000017 	ldw	r8,0(r5)
   43bfc:	3815883a 	mov	r10,r7
   43c00:	0212303a 	nor	r9,zero,r8
   43c04:	4307883a 	add	r3,r8,r12
   43c08:	48c6703a 	and	r3,r9,r3
   43c0c:	1ac6703a 	and	r3,r3,r11
   43c10:	1800261e 	bne	r3,zero,43cac <strncpy+0xe0>
   43c14:	39c00104 	addi	r7,r7,4
   43c18:	52000015 	stw	r8,0(r10)
   43c1c:	31bfff04 	addi	r6,r6,-4
   43c20:	3811883a 	mov	r8,r7
   43c24:	29400104 	addi	r5,r5,4
   43c28:	21bff336 	bltu	r4,r6,43bf8 <__alt_data_end+0xfffc9278>
   43c2c:	30001e26 	beq	r6,zero,43ca8 <strncpy+0xdc>
   43c30:	29c00003 	ldbu	r7,0(r5)
   43c34:	31bfffc4 	addi	r6,r6,-1
   43c38:	40c00044 	addi	r3,r8,1
   43c3c:	41c00005 	stb	r7,0(r8)
   43c40:	39c03fcc 	andi	r7,r7,255
   43c44:	39c0201c 	xori	r7,r7,128
   43c48:	39ffe004 	addi	r7,r7,-128
   43c4c:	29400044 	addi	r5,r5,1
   43c50:	38001026 	beq	r7,zero,43c94 <strncpy+0xc8>
   43c54:	1811883a 	mov	r8,r3
   43c58:	00000906 	br	43c80 <strncpy+0xb4>
   43c5c:	29c00003 	ldbu	r7,0(r5)
   43c60:	31bfffc4 	addi	r6,r6,-1
   43c64:	29400044 	addi	r5,r5,1
   43c68:	41c00005 	stb	r7,0(r8)
   43c6c:	39c03fcc 	andi	r7,r7,255
   43c70:	39c0201c 	xori	r7,r7,128
   43c74:	39ffe004 	addi	r7,r7,-128
   43c78:	1811883a 	mov	r8,r3
   43c7c:	38000526 	beq	r7,zero,43c94 <strncpy+0xc8>
   43c80:	18c00044 	addi	r3,r3,1
   43c84:	303ff51e 	bne	r6,zero,43c5c <__alt_data_end+0xfffc92dc>
   43c88:	f800283a 	ret
   43c8c:	1011883a 	mov	r8,r2
   43c90:	003fe606 	br	43c2c <__alt_data_end+0xfffc92ac>
   43c94:	30000726 	beq	r6,zero,43cb4 <strncpy+0xe8>
   43c98:	198d883a 	add	r6,r3,r6
   43c9c:	18000005 	stb	zero,0(r3)
   43ca0:	18c00044 	addi	r3,r3,1
   43ca4:	19bffd1e 	bne	r3,r6,43c9c <__alt_data_end+0xfffc931c>
   43ca8:	f800283a 	ret
   43cac:	3811883a 	mov	r8,r7
   43cb0:	003fde06 	br	43c2c <__alt_data_end+0xfffc92ac>
   43cb4:	f800283a 	ret

00043cb8 <___vfprintf_internal_r>:
   43cb8:	defeb604 	addi	sp,sp,-1320
   43cbc:	dfc14915 	stw	ra,1316(sp)
   43cc0:	ddc14715 	stw	r23,1308(sp)
   43cc4:	dd814615 	stw	r22,1304(sp)
   43cc8:	282f883a 	mov	r23,r5
   43ccc:	202d883a 	mov	r22,r4
   43cd0:	d9812a15 	stw	r6,1192(sp)
   43cd4:	d9c12d15 	stw	r7,1204(sp)
   43cd8:	df014815 	stw	fp,1312(sp)
   43cdc:	dd414515 	stw	r21,1300(sp)
   43ce0:	dd014415 	stw	r20,1296(sp)
   43ce4:	dcc14315 	stw	r19,1292(sp)
   43ce8:	dc814215 	stw	r18,1288(sp)
   43cec:	dc414115 	stw	r17,1284(sp)
   43cf0:	dc014015 	stw	r16,1280(sp)
   43cf4:	00483580 	call	48358 <_localeconv_r>
   43cf8:	10800017 	ldw	r2,0(r2)
   43cfc:	1009883a 	mov	r4,r2
   43d00:	d8813515 	stw	r2,1236(sp)
   43d04:	004a1700 	call	4a170 <strlen>
   43d08:	d8813815 	stw	r2,1248(sp)
   43d0c:	b0000226 	beq	r22,zero,43d18 <___vfprintf_internal_r+0x60>
   43d10:	b0800e17 	ldw	r2,56(r22)
   43d14:	10010426 	beq	r2,zero,44128 <___vfprintf_internal_r+0x470>
   43d18:	b8c0030b 	ldhu	r3,12(r23)
   43d1c:	1908000c 	andi	r4,r3,8192
   43d20:	1805883a 	mov	r2,r3
   43d24:	2000071e 	bne	r4,zero,43d44 <___vfprintf_internal_r+0x8c>
   43d28:	b9001917 	ldw	r4,100(r23)
   43d2c:	18880014 	ori	r2,r3,8192
   43d30:	00f7ffc4 	movi	r3,-8193
   43d34:	20c8703a 	and	r4,r4,r3
   43d38:	b880030d 	sth	r2,12(r23)
   43d3c:	1007883a 	mov	r3,r2
   43d40:	b9001915 	stw	r4,100(r23)
   43d44:	1100020c 	andi	r4,r2,8
   43d48:	2000a726 	beq	r4,zero,43fe8 <___vfprintf_internal_r+0x330>
   43d4c:	b9000417 	ldw	r4,16(r23)
   43d50:	2000a526 	beq	r4,zero,43fe8 <___vfprintf_internal_r+0x330>
   43d54:	1080068c 	andi	r2,r2,26
   43d58:	01000284 	movi	r4,10
   43d5c:	1100ab26 	beq	r2,r4,4400c <___vfprintf_internal_r+0x354>
   43d60:	dac10e04 	addi	r11,sp,1080
   43d64:	db010dc4 	addi	r12,sp,1079
   43d68:	d8800404 	addi	r2,sp,16
   43d6c:	05000174 	movhi	r20,5
   43d70:	dac12815 	stw	r11,1184(sp)
   43d74:	5b17c83a 	sub	r11,r11,r12
   43d78:	a5093e84 	addi	r20,r20,9466
   43d7c:	db012915 	stw	r12,1188(sp)
   43d80:	d8811e15 	stw	r2,1144(sp)
   43d84:	d8012015 	stw	zero,1152(sp)
   43d88:	d8011f15 	stw	zero,1148(sp)
   43d8c:	d8013315 	stw	zero,1228(sp)
   43d90:	d8013715 	stw	zero,1244(sp)
   43d94:	d8013915 	stw	zero,1252(sp)
   43d98:	d8013b15 	stw	zero,1260(sp)
   43d9c:	d8013a15 	stw	zero,1256(sp)
   43da0:	d8012f15 	stw	zero,1212(sp)
   43da4:	1011883a 	mov	r8,r2
   43da8:	dac13c15 	stw	r11,1264(sp)
   43dac:	db012a17 	ldw	r12,1192(sp)
   43db0:	60800007 	ldb	r2,0(r12)
   43db4:	1000df26 	beq	r2,zero,44134 <___vfprintf_internal_r+0x47c>
   43db8:	00c00944 	movi	r3,37
   43dbc:	10c0dd26 	beq	r2,r3,44134 <___vfprintf_internal_r+0x47c>
   43dc0:	6021883a 	mov	r16,r12
   43dc4:	00000106 	br	43dcc <___vfprintf_internal_r+0x114>
   43dc8:	10c08426 	beq	r2,r3,43fdc <___vfprintf_internal_r+0x324>
   43dcc:	84000044 	addi	r16,r16,1
   43dd0:	80800007 	ldb	r2,0(r16)
   43dd4:	103ffc1e 	bne	r2,zero,43dc8 <__alt_data_end+0xfffc9448>
   43dd8:	dac12a17 	ldw	r11,1192(sp)
   43ddc:	82e3c83a 	sub	r17,r16,r11
   43de0:	88000f26 	beq	r17,zero,43e20 <___vfprintf_internal_r+0x168>
   43de4:	d8c12017 	ldw	r3,1152(sp)
   43de8:	d8811f17 	ldw	r2,1148(sp)
   43dec:	dac12a17 	ldw	r11,1192(sp)
   43df0:	1c47883a 	add	r3,r3,r17
   43df4:	10800044 	addi	r2,r2,1
   43df8:	d8c12015 	stw	r3,1152(sp)
   43dfc:	42c00015 	stw	r11,0(r8)
   43e00:	44400115 	stw	r17,4(r8)
   43e04:	d8811f15 	stw	r2,1148(sp)
   43e08:	00c001c4 	movi	r3,7
   43e0c:	1880b416 	blt	r3,r2,440e0 <___vfprintf_internal_r+0x428>
   43e10:	42000204 	addi	r8,r8,8
   43e14:	db012f17 	ldw	r12,1212(sp)
   43e18:	6459883a 	add	r12,r12,r17
   43e1c:	db012f15 	stw	r12,1212(sp)
   43e20:	80800007 	ldb	r2,0(r16)
   43e24:	1000b526 	beq	r2,zero,440fc <___vfprintf_internal_r+0x444>
   43e28:	80800044 	addi	r2,r16,1
   43e2c:	84000047 	ldb	r16,1(r16)
   43e30:	d8012785 	stb	zero,1182(sp)
   43e34:	000d883a 	mov	r6,zero
   43e38:	027fffc4 	movi	r9,-1
   43e3c:	d8012e15 	stw	zero,1208(sp)
   43e40:	0023883a 	mov	r17,zero
   43e44:	01001604 	movi	r4,88
   43e48:	01400244 	movi	r5,9
   43e4c:	02800a84 	movi	r10,42
   43e50:	01c01b04 	movi	r7,108
   43e54:	10c00044 	addi	r3,r2,1
   43e58:	80bff804 	addi	r2,r16,-32
   43e5c:	2082f236 	bltu	r4,r2,44a28 <___vfprintf_internal_r+0xd70>
   43e60:	100490ba 	slli	r2,r2,2
   43e64:	02c00134 	movhi	r11,4
   43e68:	5acf9e04 	addi	r11,r11,15992
   43e6c:	12c5883a 	add	r2,r2,r11
   43e70:	10800017 	ldw	r2,0(r2)
   43e74:	1000683a 	jmp	r2
   43e78:	00044870 	cmpltui	zero,zero,4385
   43e7c:	00044a28 	cmpgeui	zero,zero,4392
   43e80:	00044a28 	cmpgeui	zero,zero,4392
   43e84:	00044890 	cmplti	zero,zero,4386
   43e88:	00044a28 	cmpgeui	zero,zero,4392
   43e8c:	00044a28 	cmpgeui	zero,zero,4392
   43e90:	00044a28 	cmpgeui	zero,zero,4392
   43e94:	00044a28 	cmpgeui	zero,zero,4392
   43e98:	00044a28 	cmpgeui	zero,zero,4392
   43e9c:	00044a28 	cmpgeui	zero,zero,4392
   43ea0:	000449ec 	andhi	zero,zero,4391
   43ea4:	00044a18 	cmpnei	zero,zero,4392
   43ea8:	00044a28 	cmpgeui	zero,zero,4392
   43eac:	0004413c 	xorhi	zero,zero,4356
   43eb0:	0004414c 	andi	zero,zero,4357
   43eb4:	00044a28 	cmpgeui	zero,zero,4392
   43eb8:	0004418c 	andi	zero,zero,4358
   43ebc:	00044680 	call	4468 <__alt_mem_onchip_memory2-0x3bb98>
   43ec0:	00044680 	call	4468 <__alt_mem_onchip_memory2-0x3bb98>
   43ec4:	00044680 	call	4468 <__alt_mem_onchip_memory2-0x3bb98>
   43ec8:	00044680 	call	4468 <__alt_mem_onchip_memory2-0x3bb98>
   43ecc:	00044680 	call	4468 <__alt_mem_onchip_memory2-0x3bb98>
   43ed0:	00044680 	call	4468 <__alt_mem_onchip_memory2-0x3bb98>
   43ed4:	00044680 	call	4468 <__alt_mem_onchip_memory2-0x3bb98>
   43ed8:	00044680 	call	4468 <__alt_mem_onchip_memory2-0x3bb98>
   43edc:	00044680 	call	4468 <__alt_mem_onchip_memory2-0x3bb98>
   43ee0:	00044a28 	cmpgeui	zero,zero,4392
   43ee4:	00044a28 	cmpgeui	zero,zero,4392
   43ee8:	00044a28 	cmpgeui	zero,zero,4392
   43eec:	00044a28 	cmpgeui	zero,zero,4392
   43ef0:	00044a28 	cmpgeui	zero,zero,4392
   43ef4:	00044a28 	cmpgeui	zero,zero,4392
   43ef8:	00044a28 	cmpgeui	zero,zero,4392
   43efc:	00044a28 	cmpgeui	zero,zero,4392
   43f00:	00044a28 	cmpgeui	zero,zero,4392
   43f04:	00044a28 	cmpgeui	zero,zero,4392
   43f08:	000446b4 	movhi	zero,4378
   43f0c:	0004419c 	xori	zero,zero,4358
   43f10:	00044a28 	cmpgeui	zero,zero,4392
   43f14:	0004419c 	xori	zero,zero,4358
   43f18:	00044a28 	cmpgeui	zero,zero,4392
   43f1c:	00044a28 	cmpgeui	zero,zero,4392
   43f20:	00044a28 	cmpgeui	zero,zero,4392
   43f24:	00044a28 	cmpgeui	zero,zero,4392
   43f28:	00044240 	call	4424 <__alt_mem_onchip_memory2-0x3bbdc>
   43f2c:	00044a28 	cmpgeui	zero,zero,4392
   43f30:	00044a28 	cmpgeui	zero,zero,4392
   43f34:	00044250 	cmplti	zero,zero,4361
   43f38:	00044a28 	cmpgeui	zero,zero,4392
   43f3c:	00044a28 	cmpgeui	zero,zero,4392
   43f40:	00044a28 	cmpgeui	zero,zero,4392
   43f44:	00044a28 	cmpgeui	zero,zero,4392
   43f48:	00044a28 	cmpgeui	zero,zero,4392
   43f4c:	0004464c 	andi	zero,zero,4377
   43f50:	00044a28 	cmpgeui	zero,zero,4392
   43f54:	00044a28 	cmpgeui	zero,zero,4392
   43f58:	000446fc 	xorhi	zero,zero,4379
   43f5c:	00044a28 	cmpgeui	zero,zero,4392
   43f60:	00044a28 	cmpgeui	zero,zero,4392
   43f64:	00044a28 	cmpgeui	zero,zero,4392
   43f68:	00044a28 	cmpgeui	zero,zero,4392
   43f6c:	00044a28 	cmpgeui	zero,zero,4392
   43f70:	00044a28 	cmpgeui	zero,zero,4392
   43f74:	00044a28 	cmpgeui	zero,zero,4392
   43f78:	00044a28 	cmpgeui	zero,zero,4392
   43f7c:	00044a28 	cmpgeui	zero,zero,4392
   43f80:	00044a28 	cmpgeui	zero,zero,4392
   43f84:	000448f0 	cmpltui	zero,zero,4387
   43f88:	000448a0 	cmpeqi	zero,zero,4386
   43f8c:	0004419c 	xori	zero,zero,4358
   43f90:	0004419c 	xori	zero,zero,4358
   43f94:	0004419c 	xori	zero,zero,4358
   43f98:	000448e0 	cmpeqi	zero,zero,4387
   43f9c:	000448a0 	cmpeqi	zero,zero,4386
   43fa0:	00044a28 	cmpgeui	zero,zero,4392
   43fa4:	00044a28 	cmpgeui	zero,zero,4392
   43fa8:	000447e8 	cmpgeui	zero,zero,4383
   43fac:	00044a28 	cmpgeui	zero,zero,4392
   43fb0:	000447fc 	xorhi	zero,zero,4383
   43fb4:	00044830 	cmpltui	zero,zero,4384
   43fb8:	00044930 	cmpltui	zero,zero,4388
   43fbc:	00044758 	cmpnei	zero,zero,4381
   43fc0:	00044a28 	cmpgeui	zero,zero,4392
   43fc4:	00044978 	rdprs	zero,zero,4389
   43fc8:	00044a28 	cmpgeui	zero,zero,4392
   43fcc:	00044768 	cmpgeui	zero,zero,4381
   43fd0:	00044a28 	cmpgeui	zero,zero,4392
   43fd4:	00044a28 	cmpgeui	zero,zero,4392
   43fd8:	000447a8 	cmpgeui	zero,zero,4382
   43fdc:	db012a17 	ldw	r12,1192(sp)
   43fe0:	8323c83a 	sub	r17,r16,r12
   43fe4:	003f7e06 	br	43de0 <__alt_data_end+0xfffc9460>
   43fe8:	b009883a 	mov	r4,r22
   43fec:	b80b883a 	mov	r5,r23
   43ff0:	0045cd80 	call	45cd8 <__swsetup_r>
   43ff4:	10002d1e 	bne	r2,zero,440ac <___vfprintf_internal_r+0x3f4>
   43ff8:	b8c0030b 	ldhu	r3,12(r23)
   43ffc:	01000284 	movi	r4,10
   44000:	1805883a 	mov	r2,r3
   44004:	1080068c 	andi	r2,r2,26
   44008:	113f551e 	bne	r2,r4,43d60 <__alt_data_end+0xfffc93e0>
   4400c:	b880038b 	ldhu	r2,14(r23)
   44010:	113fffcc 	andi	r4,r2,65535
   44014:	2120001c 	xori	r4,r4,32768
   44018:	21200004 	addi	r4,r4,-32768
   4401c:	203f5016 	blt	r4,zero,43d60 <__alt_data_end+0xfffc93e0>
   44020:	bac01917 	ldw	r11,100(r23)
   44024:	ba800717 	ldw	r10,28(r23)
   44028:	ba400917 	ldw	r9,36(r23)
   4402c:	d9812a17 	ldw	r6,1192(sp)
   44030:	d9c12d17 	ldw	r7,1204(sp)
   44034:	02010004 	movi	r8,1024
   44038:	18ffff4c 	andi	r3,r3,65533
   4403c:	d881078d 	sth	r2,1054(sp)
   44040:	b009883a 	mov	r4,r22
   44044:	d8800404 	addi	r2,sp,16
   44048:	d9410404 	addi	r5,sp,1040
   4404c:	d8c1070d 	sth	r3,1052(sp)
   44050:	dac11d15 	stw	r11,1140(sp)
   44054:	da810b15 	stw	r10,1068(sp)
   44058:	da410d15 	stw	r9,1076(sp)
   4405c:	d8810415 	stw	r2,1040(sp)
   44060:	d8810815 	stw	r2,1056(sp)
   44064:	da010615 	stw	r8,1048(sp)
   44068:	da010915 	stw	r8,1060(sp)
   4406c:	d8010a15 	stw	zero,1064(sp)
   44070:	0043cb80 	call	43cb8 <___vfprintf_internal_r>
   44074:	1021883a 	mov	r16,r2
   44078:	10000416 	blt	r2,zero,4408c <___vfprintf_internal_r+0x3d4>
   4407c:	b009883a 	mov	r4,r22
   44080:	d9410404 	addi	r5,sp,1040
   44084:	00477300 	call	47730 <_fflush_r>
   44088:	1006ee1e 	bne	r2,zero,45c44 <___vfprintf_internal_r+0x1f8c>
   4408c:	d881070b 	ldhu	r2,1052(sp)
   44090:	1080100c 	andi	r2,r2,64
   44094:	10000326 	beq	r2,zero,440a4 <___vfprintf_internal_r+0x3ec>
   44098:	b880030b 	ldhu	r2,12(r23)
   4409c:	10801014 	ori	r2,r2,64
   440a0:	b880030d 	sth	r2,12(r23)
   440a4:	8005883a 	mov	r2,r16
   440a8:	00000106 	br	440b0 <___vfprintf_internal_r+0x3f8>
   440ac:	00bfffc4 	movi	r2,-1
   440b0:	dfc14917 	ldw	ra,1316(sp)
   440b4:	df014817 	ldw	fp,1312(sp)
   440b8:	ddc14717 	ldw	r23,1308(sp)
   440bc:	dd814617 	ldw	r22,1304(sp)
   440c0:	dd414517 	ldw	r21,1300(sp)
   440c4:	dd014417 	ldw	r20,1296(sp)
   440c8:	dcc14317 	ldw	r19,1292(sp)
   440cc:	dc814217 	ldw	r18,1288(sp)
   440d0:	dc414117 	ldw	r17,1284(sp)
   440d4:	dc014017 	ldw	r16,1280(sp)
   440d8:	dec14a04 	addi	sp,sp,1320
   440dc:	f800283a 	ret
   440e0:	b009883a 	mov	r4,r22
   440e4:	b80b883a 	mov	r5,r23
   440e8:	d9811e04 	addi	r6,sp,1144
   440ec:	004a3040 	call	4a304 <__sprint_r>
   440f0:	1000081e 	bne	r2,zero,44114 <___vfprintf_internal_r+0x45c>
   440f4:	da000404 	addi	r8,sp,16
   440f8:	003f4606 	br	43e14 <__alt_data_end+0xfffc9494>
   440fc:	d8812017 	ldw	r2,1152(sp)
   44100:	10000426 	beq	r2,zero,44114 <___vfprintf_internal_r+0x45c>
   44104:	b009883a 	mov	r4,r22
   44108:	b80b883a 	mov	r5,r23
   4410c:	d9811e04 	addi	r6,sp,1144
   44110:	004a3040 	call	4a304 <__sprint_r>
   44114:	b880030b 	ldhu	r2,12(r23)
   44118:	1080100c 	andi	r2,r2,64
   4411c:	103fe31e 	bne	r2,zero,440ac <__alt_data_end+0xfffc972c>
   44120:	d8812f17 	ldw	r2,1212(sp)
   44124:	003fe206 	br	440b0 <__alt_data_end+0xfffc9730>
   44128:	b009883a 	mov	r4,r22
   4412c:	0047cd80 	call	47cd8 <__sinit>
   44130:	003ef906 	br	43d18 <__alt_data_end+0xfffc9398>
   44134:	dc012a17 	ldw	r16,1192(sp)
   44138:	003f3906 	br	43e20 <__alt_data_end+0xfffc94a0>
   4413c:	1805883a 	mov	r2,r3
   44140:	8c400114 	ori	r17,r17,4
   44144:	1c000007 	ldb	r16,0(r3)
   44148:	003f4206 	br	43e54 <__alt_data_end+0xfffc94d4>
   4414c:	1c000007 	ldb	r16,0(r3)
   44150:	18800044 	addi	r2,r3,1
   44154:	8286b326 	beq	r16,r10,45c24 <___vfprintf_internal_r+0x1f6c>
   44158:	82fff404 	addi	r11,r16,-48
   4415c:	1007883a 	mov	r3,r2
   44160:	0013883a 	mov	r9,zero
   44164:	2aff3c36 	bltu	r5,r11,43e58 <__alt_data_end+0xfffc94d8>
   44168:	1c000007 	ldb	r16,0(r3)
   4416c:	4a4002a4 	muli	r9,r9,10
   44170:	18c00044 	addi	r3,r3,1
   44174:	5a53883a 	add	r9,r11,r9
   44178:	82fff404 	addi	r11,r16,-48
   4417c:	2afffa2e 	bgeu	r5,r11,44168 <__alt_data_end+0xfffc97e8>
   44180:	483f350e 	bge	r9,zero,43e58 <__alt_data_end+0xfffc94d8>
   44184:	027fffc4 	movi	r9,-1
   44188:	003f3306 	br	43e58 <__alt_data_end+0xfffc94d8>
   4418c:	8c402014 	ori	r17,r17,128
   44190:	1805883a 	mov	r2,r3
   44194:	1c000007 	ldb	r16,0(r3)
   44198:	003f2e06 	br	43e54 <__alt_data_end+0xfffc94d4>
   4419c:	db012d17 	ldw	r12,1204(sp)
   441a0:	dac12d17 	ldw	r11,1204(sp)
   441a4:	d8c12a15 	stw	r3,1192(sp)
   441a8:	63000017 	ldw	r12,0(r12)
   441ac:	5ac00117 	ldw	r11,4(r11)
   441b0:	d9812785 	stb	r6,1182(sp)
   441b4:	6009883a 	mov	r4,r12
   441b8:	580b883a 	mov	r5,r11
   441bc:	db013715 	stw	r12,1244(sp)
   441c0:	da013f15 	stw	r8,1276(sp)
   441c4:	da413e15 	stw	r9,1272(sp)
   441c8:	dac13915 	stw	r11,1252(sp)
   441cc:	0049ec80 	call	49ec8 <__fpclassifyd>
   441d0:	db012d17 	ldw	r12,1204(sp)
   441d4:	04800044 	movi	r18,1
   441d8:	da013f17 	ldw	r8,1276(sp)
   441dc:	64c00204 	addi	r19,r12,8
   441e0:	da413e17 	ldw	r9,1272(sp)
   441e4:	d9013717 	ldw	r4,1244(sp)
   441e8:	d9413917 	ldw	r5,1252(sp)
   441ec:	1484581e 	bne	r2,r18,45350 <___vfprintf_internal_r+0x1698>
   441f0:	000d883a 	mov	r6,zero
   441f4:	000f883a 	mov	r7,zero
   441f8:	004eabc0 	call	4eabc <__ledf2>
   441fc:	da013f17 	ldw	r8,1276(sp)
   44200:	1005ef16 	blt	r2,zero,459c0 <___vfprintf_internal_r+0x1d08>
   44204:	dd412783 	ldbu	r21,1182(sp)
   44208:	008011c4 	movi	r2,71
   4420c:	14053b0e 	bge	r2,r16,456fc <___vfprintf_internal_r+0x1a44>
   44210:	00c00174 	movhi	r3,5
   44214:	18c92f04 	addi	r3,r3,9404
   44218:	d8c13115 	stw	r3,1220(sp)
   4421c:	02c000c4 	movi	r11,3
   44220:	00bfdfc4 	movi	r2,-129
   44224:	dac12b15 	stw	r11,1196(sp)
   44228:	88a2703a 	and	r17,r17,r2
   4422c:	dcc12d15 	stw	r19,1204(sp)
   44230:	5825883a 	mov	r18,r11
   44234:	d8013215 	stw	zero,1224(sp)
   44238:	d8013415 	stw	zero,1232(sp)
   4423c:	00003206 	br	44308 <___vfprintf_internal_r+0x650>
   44240:	8c400214 	ori	r17,r17,8
   44244:	1805883a 	mov	r2,r3
   44248:	1c000007 	ldb	r16,0(r3)
   4424c:	003f0106 	br	43e54 <__alt_data_end+0xfffc94d4>
   44250:	8c400414 	ori	r17,r17,16
   44254:	d8c12a15 	stw	r3,1192(sp)
   44258:	88c0080c 	andi	r3,r17,32
   4425c:	d8812d17 	ldw	r2,1204(sp)
   44260:	18017726 	beq	r3,zero,44840 <___vfprintf_internal_r+0xb88>
   44264:	db012d17 	ldw	r12,1204(sp)
   44268:	14c00017 	ldw	r19,0(r2)
   4426c:	17000117 	ldw	fp,4(r2)
   44270:	63000204 	addi	r12,r12,8
   44274:	db012d15 	stw	r12,1204(sp)
   44278:	0005883a 	mov	r2,zero
   4427c:	9f06b03a 	or	r3,r19,fp
   44280:	d8012785 	stb	zero,1182(sp)
   44284:	da413215 	stw	r9,1224(sp)
   44288:	002b883a 	mov	r21,zero
   4428c:	48000216 	blt	r9,zero,44298 <___vfprintf_internal_r+0x5e0>
   44290:	013fdfc4 	movi	r4,-129
   44294:	8922703a 	and	r17,r17,r4
   44298:	1801ed1e 	bne	r3,zero,44a50 <___vfprintf_internal_r+0xd98>
   4429c:	4802e026 	beq	r9,zero,44e20 <___vfprintf_internal_r+0x1168>
   442a0:	10803fcc 	andi	r2,r2,255
   442a4:	00c00044 	movi	r3,1
   442a8:	10c20f26 	beq	r2,r3,44ae8 <___vfprintf_internal_r+0xe30>
   442ac:	00c00084 	movi	r3,2
   442b0:	10c2fd26 	beq	r2,r3,44ea8 <___vfprintf_internal_r+0x11f0>
   442b4:	d8c10e04 	addi	r3,sp,1080
   442b8:	9808d0fa 	srli	r4,r19,3
   442bc:	e00a977a 	slli	r5,fp,29
   442c0:	e038d0fa 	srli	fp,fp,3
   442c4:	9cc001cc 	andi	r19,r19,7
   442c8:	98800c04 	addi	r2,r19,48
   442cc:	18ffffc4 	addi	r3,r3,-1
   442d0:	2926b03a 	or	r19,r5,r4
   442d4:	18800005 	stb	r2,0(r3)
   442d8:	9f08b03a 	or	r4,r19,fp
   442dc:	203ff61e 	bne	r4,zero,442b8 <__alt_data_end+0xfffc9938>
   442e0:	8900004c 	andi	r4,r17,1
   442e4:	d8c13115 	stw	r3,1220(sp)
   442e8:	2003791e 	bne	r4,zero,450d0 <___vfprintf_internal_r+0x1418>
   442ec:	dac12817 	ldw	r11,1184(sp)
   442f0:	58e5c83a 	sub	r18,r11,r3
   442f4:	9005883a 	mov	r2,r18
   442f8:	9240010e 	bge	r18,r9,44300 <___vfprintf_internal_r+0x648>
   442fc:	4805883a 	mov	r2,r9
   44300:	d8812b15 	stw	r2,1196(sp)
   44304:	d8013415 	stw	zero,1232(sp)
   44308:	a8803fcc 	andi	r2,r21,255
   4430c:	1080201c 	xori	r2,r2,128
   44310:	10bfe004 	addi	r2,r2,-128
   44314:	10000326 	beq	r2,zero,44324 <___vfprintf_internal_r+0x66c>
   44318:	db012b17 	ldw	r12,1196(sp)
   4431c:	63000044 	addi	r12,r12,1
   44320:	db012b15 	stw	r12,1196(sp)
   44324:	88c0008c 	andi	r3,r17,2
   44328:	d8c12c15 	stw	r3,1200(sp)
   4432c:	18000326 	beq	r3,zero,4433c <___vfprintf_internal_r+0x684>
   44330:	dac12b17 	ldw	r11,1196(sp)
   44334:	5ac00084 	addi	r11,r11,2
   44338:	dac12b15 	stw	r11,1196(sp)
   4433c:	8b00210c 	andi	r12,r17,132
   44340:	db013015 	stw	r12,1216(sp)
   44344:	6001c01e 	bne	r12,zero,44a48 <___vfprintf_internal_r+0xd90>
   44348:	dac12e17 	ldw	r11,1208(sp)
   4434c:	db012b17 	ldw	r12,1196(sp)
   44350:	5b39c83a 	sub	fp,r11,r12
   44354:	0701bc0e 	bge	zero,fp,44a48 <___vfprintf_internal_r+0xd90>
   44358:	02400404 	movi	r9,16
   4435c:	d8c12017 	ldw	r3,1152(sp)
   44360:	d8811f17 	ldw	r2,1148(sp)
   44364:	4f05220e 	bge	r9,fp,457f0 <___vfprintf_internal_r+0x1b38>
   44368:	01400174 	movhi	r5,5
   4436c:	29494284 	addi	r5,r5,9482
   44370:	d9413615 	stw	r5,1240(sp)
   44374:	482b883a 	mov	r21,r9
   44378:	04c001c4 	movi	r19,7
   4437c:	00000306 	br	4438c <___vfprintf_internal_r+0x6d4>
   44380:	e73ffc04 	addi	fp,fp,-16
   44384:	42000204 	addi	r8,r8,8
   44388:	af00130e 	bge	r21,fp,443d8 <___vfprintf_internal_r+0x720>
   4438c:	02c00174 	movhi	r11,5
   44390:	18c00404 	addi	r3,r3,16
   44394:	10800044 	addi	r2,r2,1
   44398:	5ac94284 	addi	r11,r11,9482
   4439c:	42c00015 	stw	r11,0(r8)
   443a0:	45400115 	stw	r21,4(r8)
   443a4:	d8c12015 	stw	r3,1152(sp)
   443a8:	d8811f15 	stw	r2,1148(sp)
   443ac:	98bff40e 	bge	r19,r2,44380 <__alt_data_end+0xfffc9a00>
   443b0:	b009883a 	mov	r4,r22
   443b4:	b80b883a 	mov	r5,r23
   443b8:	d9811e04 	addi	r6,sp,1144
   443bc:	004a3040 	call	4a304 <__sprint_r>
   443c0:	103f541e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   443c4:	e73ffc04 	addi	fp,fp,-16
   443c8:	d8c12017 	ldw	r3,1152(sp)
   443cc:	d8811f17 	ldw	r2,1148(sp)
   443d0:	da000404 	addi	r8,sp,16
   443d4:	af3fed16 	blt	r21,fp,4438c <__alt_data_end+0xfffc9a0c>
   443d8:	db013617 	ldw	r12,1240(sp)
   443dc:	e0c7883a 	add	r3,fp,r3
   443e0:	10800044 	addi	r2,r2,1
   443e4:	43000015 	stw	r12,0(r8)
   443e8:	47000115 	stw	fp,4(r8)
   443ec:	d8c12015 	stw	r3,1152(sp)
   443f0:	d8811f15 	stw	r2,1148(sp)
   443f4:	010001c4 	movi	r4,7
   443f8:	2082f416 	blt	r4,r2,44fcc <___vfprintf_internal_r+0x1314>
   443fc:	d8812787 	ldb	r2,1182(sp)
   44400:	42000204 	addi	r8,r8,8
   44404:	10000c26 	beq	r2,zero,44438 <___vfprintf_internal_r+0x780>
   44408:	d8811f17 	ldw	r2,1148(sp)
   4440c:	d9012784 	addi	r4,sp,1182
   44410:	18c00044 	addi	r3,r3,1
   44414:	10800044 	addi	r2,r2,1
   44418:	41000015 	stw	r4,0(r8)
   4441c:	01000044 	movi	r4,1
   44420:	41000115 	stw	r4,4(r8)
   44424:	d8c12015 	stw	r3,1152(sp)
   44428:	d8811f15 	stw	r2,1148(sp)
   4442c:	010001c4 	movi	r4,7
   44430:	20828d16 	blt	r4,r2,44e68 <___vfprintf_internal_r+0x11b0>
   44434:	42000204 	addi	r8,r8,8
   44438:	dac12c17 	ldw	r11,1200(sp)
   4443c:	58000c26 	beq	r11,zero,44470 <___vfprintf_internal_r+0x7b8>
   44440:	d8811f17 	ldw	r2,1148(sp)
   44444:	d9012704 	addi	r4,sp,1180
   44448:	18c00084 	addi	r3,r3,2
   4444c:	10800044 	addi	r2,r2,1
   44450:	41000015 	stw	r4,0(r8)
   44454:	01000084 	movi	r4,2
   44458:	41000115 	stw	r4,4(r8)
   4445c:	d8c12015 	stw	r3,1152(sp)
   44460:	d8811f15 	stw	r2,1148(sp)
   44464:	010001c4 	movi	r4,7
   44468:	20828716 	blt	r4,r2,44e88 <___vfprintf_internal_r+0x11d0>
   4446c:	42000204 	addi	r8,r8,8
   44470:	db013017 	ldw	r12,1216(sp)
   44474:	00802004 	movi	r2,128
   44478:	6081e926 	beq	r12,r2,44c20 <___vfprintf_internal_r+0xf68>
   4447c:	db013217 	ldw	r12,1224(sp)
   44480:	64abc83a 	sub	r21,r12,r18
   44484:	0540260e 	bge	zero,r21,44520 <___vfprintf_internal_r+0x868>
   44488:	07000404 	movi	fp,16
   4448c:	d8811f17 	ldw	r2,1148(sp)
   44490:	e5443d0e 	bge	fp,r21,45588 <___vfprintf_internal_r+0x18d0>
   44494:	01400174 	movhi	r5,5
   44498:	29493e84 	addi	r5,r5,9466
   4449c:	d9412c15 	stw	r5,1200(sp)
   444a0:	04c001c4 	movi	r19,7
   444a4:	00000306 	br	444b4 <___vfprintf_internal_r+0x7fc>
   444a8:	ad7ffc04 	addi	r21,r21,-16
   444ac:	42000204 	addi	r8,r8,8
   444b0:	e540110e 	bge	fp,r21,444f8 <___vfprintf_internal_r+0x840>
   444b4:	18c00404 	addi	r3,r3,16
   444b8:	10800044 	addi	r2,r2,1
   444bc:	45000015 	stw	r20,0(r8)
   444c0:	47000115 	stw	fp,4(r8)
   444c4:	d8c12015 	stw	r3,1152(sp)
   444c8:	d8811f15 	stw	r2,1148(sp)
   444cc:	98bff60e 	bge	r19,r2,444a8 <__alt_data_end+0xfffc9b28>
   444d0:	b009883a 	mov	r4,r22
   444d4:	b80b883a 	mov	r5,r23
   444d8:	d9811e04 	addi	r6,sp,1144
   444dc:	004a3040 	call	4a304 <__sprint_r>
   444e0:	103f0c1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   444e4:	ad7ffc04 	addi	r21,r21,-16
   444e8:	d8c12017 	ldw	r3,1152(sp)
   444ec:	d8811f17 	ldw	r2,1148(sp)
   444f0:	da000404 	addi	r8,sp,16
   444f4:	e57fef16 	blt	fp,r21,444b4 <__alt_data_end+0xfffc9b34>
   444f8:	dac12c17 	ldw	r11,1200(sp)
   444fc:	1d47883a 	add	r3,r3,r21
   44500:	10800044 	addi	r2,r2,1
   44504:	42c00015 	stw	r11,0(r8)
   44508:	45400115 	stw	r21,4(r8)
   4450c:	d8c12015 	stw	r3,1152(sp)
   44510:	d8811f15 	stw	r2,1148(sp)
   44514:	010001c4 	movi	r4,7
   44518:	20824b16 	blt	r4,r2,44e48 <___vfprintf_internal_r+0x1190>
   4451c:	42000204 	addi	r8,r8,8
   44520:	8880400c 	andi	r2,r17,256
   44524:	1001761e 	bne	r2,zero,44b00 <___vfprintf_internal_r+0xe48>
   44528:	d8811f17 	ldw	r2,1148(sp)
   4452c:	db013117 	ldw	r12,1220(sp)
   44530:	1c87883a 	add	r3,r3,r18
   44534:	10800044 	addi	r2,r2,1
   44538:	43000015 	stw	r12,0(r8)
   4453c:	44800115 	stw	r18,4(r8)
   44540:	d8c12015 	stw	r3,1152(sp)
   44544:	d8811f15 	stw	r2,1148(sp)
   44548:	010001c4 	movi	r4,7
   4454c:	20822616 	blt	r4,r2,44de8 <___vfprintf_internal_r+0x1130>
   44550:	42000204 	addi	r8,r8,8
   44554:	8c40010c 	andi	r17,r17,4
   44558:	88003126 	beq	r17,zero,44620 <___vfprintf_internal_r+0x968>
   4455c:	db012e17 	ldw	r12,1208(sp)
   44560:	dac12b17 	ldw	r11,1196(sp)
   44564:	62e1c83a 	sub	r16,r12,r11
   44568:	04002d0e 	bge	zero,r16,44620 <___vfprintf_internal_r+0x968>
   4456c:	04400404 	movi	r17,16
   44570:	d8811f17 	ldw	r2,1148(sp)
   44574:	8c04df0e 	bge	r17,r16,458f4 <___vfprintf_internal_r+0x1c3c>
   44578:	01000174 	movhi	r4,5
   4457c:	21094284 	addi	r4,r4,9482
   44580:	d9013615 	stw	r4,1240(sp)
   44584:	048001c4 	movi	r18,7
   44588:	00000306 	br	44598 <___vfprintf_internal_r+0x8e0>
   4458c:	843ffc04 	addi	r16,r16,-16
   44590:	42000204 	addi	r8,r8,8
   44594:	8c00130e 	bge	r17,r16,445e4 <___vfprintf_internal_r+0x92c>
   44598:	01400174 	movhi	r5,5
   4459c:	18c00404 	addi	r3,r3,16
   445a0:	10800044 	addi	r2,r2,1
   445a4:	29494284 	addi	r5,r5,9482
   445a8:	41400015 	stw	r5,0(r8)
   445ac:	44400115 	stw	r17,4(r8)
   445b0:	d8c12015 	stw	r3,1152(sp)
   445b4:	d8811f15 	stw	r2,1148(sp)
   445b8:	90bff40e 	bge	r18,r2,4458c <__alt_data_end+0xfffc9c0c>
   445bc:	b009883a 	mov	r4,r22
   445c0:	b80b883a 	mov	r5,r23
   445c4:	d9811e04 	addi	r6,sp,1144
   445c8:	004a3040 	call	4a304 <__sprint_r>
   445cc:	103ed11e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   445d0:	843ffc04 	addi	r16,r16,-16
   445d4:	d8c12017 	ldw	r3,1152(sp)
   445d8:	d8811f17 	ldw	r2,1148(sp)
   445dc:	da000404 	addi	r8,sp,16
   445e0:	8c3fed16 	blt	r17,r16,44598 <__alt_data_end+0xfffc9c18>
   445e4:	dac13617 	ldw	r11,1240(sp)
   445e8:	1c07883a 	add	r3,r3,r16
   445ec:	10800044 	addi	r2,r2,1
   445f0:	42c00015 	stw	r11,0(r8)
   445f4:	44000115 	stw	r16,4(r8)
   445f8:	d8c12015 	stw	r3,1152(sp)
   445fc:	d8811f15 	stw	r2,1148(sp)
   44600:	010001c4 	movi	r4,7
   44604:	2080060e 	bge	r4,r2,44620 <___vfprintf_internal_r+0x968>
   44608:	b009883a 	mov	r4,r22
   4460c:	b80b883a 	mov	r5,r23
   44610:	d9811e04 	addi	r6,sp,1144
   44614:	004a3040 	call	4a304 <__sprint_r>
   44618:	103ebe1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   4461c:	d8c12017 	ldw	r3,1152(sp)
   44620:	d8812b17 	ldw	r2,1196(sp)
   44624:	db012e17 	ldw	r12,1208(sp)
   44628:	1300010e 	bge	r2,r12,44630 <___vfprintf_internal_r+0x978>
   4462c:	6005883a 	mov	r2,r12
   44630:	dac12f17 	ldw	r11,1212(sp)
   44634:	5897883a 	add	r11,r11,r2
   44638:	dac12f15 	stw	r11,1212(sp)
   4463c:	1801f21e 	bne	r3,zero,44e08 <___vfprintf_internal_r+0x1150>
   44640:	d8011f15 	stw	zero,1148(sp)
   44644:	da000404 	addi	r8,sp,16
   44648:	003dd806 	br	43dac <__alt_data_end+0xfffc942c>
   4464c:	8c400414 	ori	r17,r17,16
   44650:	d8c12a15 	stw	r3,1192(sp)
   44654:	88c0080c 	andi	r3,r17,32
   44658:	d8812d17 	ldw	r2,1204(sp)
   4465c:	18004626 	beq	r3,zero,44778 <___vfprintf_internal_r+0xac0>
   44660:	dac12d17 	ldw	r11,1204(sp)
   44664:	14c00017 	ldw	r19,0(r2)
   44668:	17000117 	ldw	fp,4(r2)
   4466c:	5ac00204 	addi	r11,r11,8
   44670:	dac12d15 	stw	r11,1204(sp)
   44674:	00800044 	movi	r2,1
   44678:	9f06b03a 	or	r3,r19,fp
   4467c:	003f0006 	br	44280 <__alt_data_end+0xfffc9900>
   44680:	1805883a 	mov	r2,r3
   44684:	d8012e15 	stw	zero,1208(sp)
   44688:	82fff404 	addi	r11,r16,-48
   4468c:	0019883a 	mov	r12,zero
   44690:	14000007 	ldb	r16,0(r2)
   44694:	630002a4 	muli	r12,r12,10
   44698:	18c00044 	addi	r3,r3,1
   4469c:	1805883a 	mov	r2,r3
   446a0:	62d9883a 	add	r12,r12,r11
   446a4:	82fff404 	addi	r11,r16,-48
   446a8:	2afff92e 	bgeu	r5,r11,44690 <__alt_data_end+0xfffc9d10>
   446ac:	db012e15 	stw	r12,1208(sp)
   446b0:	003de906 	br	43e58 <__alt_data_end+0xfffc94d8>
   446b4:	8c400414 	ori	r17,r17,16
   446b8:	d8c12a15 	stw	r3,1192(sp)
   446bc:	d9812785 	stb	r6,1182(sp)
   446c0:	8880080c 	andi	r2,r17,32
   446c4:	d8c12d17 	ldw	r3,1204(sp)
   446c8:	10007a26 	beq	r2,zero,448b4 <___vfprintf_internal_r+0xbfc>
   446cc:	db012d17 	ldw	r12,1204(sp)
   446d0:	18800117 	ldw	r2,4(r3)
   446d4:	1cc00017 	ldw	r19,0(r3)
   446d8:	63000204 	addi	r12,r12,8
   446dc:	db012d15 	stw	r12,1204(sp)
   446e0:	1039883a 	mov	fp,r2
   446e4:	10031016 	blt	r2,zero,45328 <___vfprintf_internal_r+0x1670>
   446e8:	dd412783 	ldbu	r21,1182(sp)
   446ec:	da413215 	stw	r9,1224(sp)
   446f0:	00800044 	movi	r2,1
   446f4:	9f06b03a 	or	r3,r19,fp
   446f8:	003ee406 	br	4428c <__alt_data_end+0xfffc990c>
   446fc:	03000174 	movhi	r12,5
   44700:	63093204 	addi	r12,r12,9416
   44704:	d8c12a15 	stw	r3,1192(sp)
   44708:	d9812785 	stb	r6,1182(sp)
   4470c:	db013b15 	stw	r12,1260(sp)
   44710:	88c0080c 	andi	r3,r17,32
   44714:	d8812d17 	ldw	r2,1204(sp)
   44718:	18002b26 	beq	r3,zero,447c8 <___vfprintf_internal_r+0xb10>
   4471c:	dac12d17 	ldw	r11,1204(sp)
   44720:	14c00017 	ldw	r19,0(r2)
   44724:	17000117 	ldw	fp,4(r2)
   44728:	5ac00204 	addi	r11,r11,8
   4472c:	dac12d15 	stw	r11,1204(sp)
   44730:	8880004c 	andi	r2,r17,1
   44734:	10025b26 	beq	r2,zero,450a4 <___vfprintf_internal_r+0x13ec>
   44738:	9f06b03a 	or	r3,r19,fp
   4473c:	18037026 	beq	r3,zero,45500 <___vfprintf_internal_r+0x1848>
   44740:	00800c04 	movi	r2,48
   44744:	d8812705 	stb	r2,1180(sp)
   44748:	dc012745 	stb	r16,1181(sp)
   4474c:	8c400094 	ori	r17,r17,2
   44750:	00800084 	movi	r2,2
   44754:	003eca06 	br	44280 <__alt_data_end+0xfffc9900>
   44758:	8c400814 	ori	r17,r17,32
   4475c:	1805883a 	mov	r2,r3
   44760:	1c000007 	ldb	r16,0(r3)
   44764:	003dbb06 	br	43e54 <__alt_data_end+0xfffc94d4>
   44768:	d8c12a15 	stw	r3,1192(sp)
   4476c:	88c0080c 	andi	r3,r17,32
   44770:	d8812d17 	ldw	r2,1204(sp)
   44774:	183fba1e 	bne	r3,zero,44660 <__alt_data_end+0xfffc9ce0>
   44778:	88c0040c 	andi	r3,r17,16
   4477c:	18024c1e 	bne	r3,zero,450b0 <___vfprintf_internal_r+0x13f8>
   44780:	88c0100c 	andi	r3,r17,64
   44784:	18024a26 	beq	r3,zero,450b0 <___vfprintf_internal_r+0x13f8>
   44788:	dac12d17 	ldw	r11,1204(sp)
   4478c:	14c0000b 	ldhu	r19,0(r2)
   44790:	0039883a 	mov	fp,zero
   44794:	5ac00104 	addi	r11,r11,4
   44798:	dac12d15 	stw	r11,1204(sp)
   4479c:	00800044 	movi	r2,1
   447a0:	9807883a 	mov	r3,r19
   447a4:	003eb606 	br	44280 <__alt_data_end+0xfffc9900>
   447a8:	00800174 	movhi	r2,5
   447ac:	10893704 	addi	r2,r2,9436
   447b0:	d8c12a15 	stw	r3,1192(sp)
   447b4:	d8813b15 	stw	r2,1260(sp)
   447b8:	d9812785 	stb	r6,1182(sp)
   447bc:	88c0080c 	andi	r3,r17,32
   447c0:	d8812d17 	ldw	r2,1204(sp)
   447c4:	183fd51e 	bne	r3,zero,4471c <__alt_data_end+0xfffc9d9c>
   447c8:	88c0040c 	andi	r3,r17,16
   447cc:	18034126 	beq	r3,zero,454d4 <___vfprintf_internal_r+0x181c>
   447d0:	db012d17 	ldw	r12,1204(sp)
   447d4:	14c00017 	ldw	r19,0(r2)
   447d8:	0039883a 	mov	fp,zero
   447dc:	63000104 	addi	r12,r12,4
   447e0:	db012d15 	stw	r12,1204(sp)
   447e4:	003fd206 	br	44730 <__alt_data_end+0xfffc9db0>
   447e8:	1c000007 	ldb	r16,0(r3)
   447ec:	81c3d626 	beq	r16,r7,45748 <___vfprintf_internal_r+0x1a90>
   447f0:	8c400414 	ori	r17,r17,16
   447f4:	1805883a 	mov	r2,r3
   447f8:	003d9606 	br	43e54 <__alt_data_end+0xfffc94d4>
   447fc:	d8c12a15 	stw	r3,1192(sp)
   44800:	d9812785 	stb	r6,1182(sp)
   44804:	8880080c 	andi	r2,r17,32
   44808:	10033f26 	beq	r2,zero,45508 <___vfprintf_internal_r+0x1850>
   4480c:	db012d17 	ldw	r12,1204(sp)
   44810:	dac12f17 	ldw	r11,1212(sp)
   44814:	60800017 	ldw	r2,0(r12)
   44818:	5807d7fa 	srai	r3,r11,31
   4481c:	63000104 	addi	r12,r12,4
   44820:	db012d15 	stw	r12,1204(sp)
   44824:	12c00015 	stw	r11,0(r2)
   44828:	10c00115 	stw	r3,4(r2)
   4482c:	003d5f06 	br	43dac <__alt_data_end+0xfffc942c>
   44830:	d8c12a15 	stw	r3,1192(sp)
   44834:	88c0080c 	andi	r3,r17,32
   44838:	d8812d17 	ldw	r2,1204(sp)
   4483c:	183e891e 	bne	r3,zero,44264 <__alt_data_end+0xfffc98e4>
   44840:	88c0040c 	andi	r3,r17,16
   44844:	1801ea1e 	bne	r3,zero,44ff0 <___vfprintf_internal_r+0x1338>
   44848:	88c0100c 	andi	r3,r17,64
   4484c:	1801e826 	beq	r3,zero,44ff0 <___vfprintf_internal_r+0x1338>
   44850:	db012d17 	ldw	r12,1204(sp)
   44854:	14c0000b 	ldhu	r19,0(r2)
   44858:	0039883a 	mov	fp,zero
   4485c:	63000104 	addi	r12,r12,4
   44860:	db012d15 	stw	r12,1204(sp)
   44864:	0005883a 	mov	r2,zero
   44868:	9807883a 	mov	r3,r19
   4486c:	003e8406 	br	44280 <__alt_data_end+0xfffc9900>
   44870:	30803fcc 	andi	r2,r6,255
   44874:	1080201c 	xori	r2,r2,128
   44878:	10bfe004 	addi	r2,r2,-128
   4487c:	10031d1e 	bne	r2,zero,454f4 <___vfprintf_internal_r+0x183c>
   44880:	1805883a 	mov	r2,r3
   44884:	01800804 	movi	r6,32
   44888:	1c000007 	ldb	r16,0(r3)
   4488c:	003d7106 	br	43e54 <__alt_data_end+0xfffc94d4>
   44890:	8c400054 	ori	r17,r17,1
   44894:	1805883a 	mov	r2,r3
   44898:	1c000007 	ldb	r16,0(r3)
   4489c:	003d6d06 	br	43e54 <__alt_data_end+0xfffc94d4>
   448a0:	d8c12a15 	stw	r3,1192(sp)
   448a4:	d9812785 	stb	r6,1182(sp)
   448a8:	8880080c 	andi	r2,r17,32
   448ac:	d8c12d17 	ldw	r3,1204(sp)
   448b0:	103f861e 	bne	r2,zero,446cc <__alt_data_end+0xfffc9d4c>
   448b4:	8880040c 	andi	r2,r17,16
   448b8:	1001f31e 	bne	r2,zero,45088 <___vfprintf_internal_r+0x13d0>
   448bc:	8880100c 	andi	r2,r17,64
   448c0:	1001f126 	beq	r2,zero,45088 <___vfprintf_internal_r+0x13d0>
   448c4:	1cc0000f 	ldh	r19,0(r3)
   448c8:	db012d17 	ldw	r12,1204(sp)
   448cc:	9839d7fa 	srai	fp,r19,31
   448d0:	63000104 	addi	r12,r12,4
   448d4:	db012d15 	stw	r12,1204(sp)
   448d8:	e005883a 	mov	r2,fp
   448dc:	003f8106 	br	446e4 <__alt_data_end+0xfffc9d64>
   448e0:	8c401014 	ori	r17,r17,64
   448e4:	1805883a 	mov	r2,r3
   448e8:	1c000007 	ldb	r16,0(r3)
   448ec:	003d5906 	br	43e54 <__alt_data_end+0xfffc94d4>
   448f0:	db012d17 	ldw	r12,1204(sp)
   448f4:	d8c12a15 	stw	r3,1192(sp)
   448f8:	00c00044 	movi	r3,1
   448fc:	60800017 	ldw	r2,0(r12)
   44900:	63000104 	addi	r12,r12,4
   44904:	d8c12b15 	stw	r3,1196(sp)
   44908:	d8012785 	stb	zero,1182(sp)
   4490c:	d8810405 	stb	r2,1040(sp)
   44910:	db012d15 	stw	r12,1204(sp)
   44914:	dac10404 	addi	r11,sp,1040
   44918:	1825883a 	mov	r18,r3
   4491c:	d8013215 	stw	zero,1224(sp)
   44920:	d8013415 	stw	zero,1232(sp)
   44924:	dac13115 	stw	r11,1220(sp)
   44928:	0005883a 	mov	r2,zero
   4492c:	003e7d06 	br	44324 <__alt_data_end+0xfffc99a4>
   44930:	db012d17 	ldw	r12,1204(sp)
   44934:	00800c04 	movi	r2,48
   44938:	d8812705 	stb	r2,1180(sp)
   4493c:	64c00017 	ldw	r19,0(r12)
   44940:	00801e04 	movi	r2,120
   44944:	d8812745 	stb	r2,1181(sp)
   44948:	00800174 	movhi	r2,5
   4494c:	10893704 	addi	r2,r2,9436
   44950:	63000104 	addi	r12,r12,4
   44954:	d8c12a15 	stw	r3,1192(sp)
   44958:	d8813b15 	stw	r2,1260(sp)
   4495c:	0039883a 	mov	fp,zero
   44960:	8c400094 	ori	r17,r17,2
   44964:	db012d15 	stw	r12,1204(sp)
   44968:	00800084 	movi	r2,2
   4496c:	04001e04 	movi	r16,120
   44970:	9807883a 	mov	r3,r19
   44974:	003e4206 	br	44280 <__alt_data_end+0xfffc9900>
   44978:	dac12d17 	ldw	r11,1204(sp)
   4497c:	db012d17 	ldw	r12,1204(sp)
   44980:	d8c12a15 	stw	r3,1192(sp)
   44984:	5ac00017 	ldw	r11,0(r11)
   44988:	d8012785 	stb	zero,1182(sp)
   4498c:	64c00104 	addi	r19,r12,4
   44990:	dac13115 	stw	r11,1220(sp)
   44994:	5803e826 	beq	r11,zero,45938 <___vfprintf_internal_r+0x1c80>
   44998:	d9013117 	ldw	r4,1220(sp)
   4499c:	48037a16 	blt	r9,zero,45788 <___vfprintf_internal_r+0x1ad0>
   449a0:	480d883a 	mov	r6,r9
   449a4:	000b883a 	mov	r5,zero
   449a8:	da013f15 	stw	r8,1276(sp)
   449ac:	da413e15 	stw	r9,1272(sp)
   449b0:	0048cec0 	call	48cec <memchr>
   449b4:	da013f17 	ldw	r8,1276(sp)
   449b8:	da413e17 	ldw	r9,1272(sp)
   449bc:	10044426 	beq	r2,zero,45ad0 <___vfprintf_internal_r+0x1e18>
   449c0:	d8c13117 	ldw	r3,1220(sp)
   449c4:	10e5c83a 	sub	r18,r2,r3
   449c8:	4c834416 	blt	r9,r18,456dc <___vfprintf_internal_r+0x1a24>
   449cc:	9005883a 	mov	r2,r18
   449d0:	90037216 	blt	r18,zero,4579c <___vfprintf_internal_r+0x1ae4>
   449d4:	dd412783 	ldbu	r21,1182(sp)
   449d8:	d8812b15 	stw	r2,1196(sp)
   449dc:	dcc12d15 	stw	r19,1204(sp)
   449e0:	d8013215 	stw	zero,1224(sp)
   449e4:	d8013415 	stw	zero,1232(sp)
   449e8:	003e4706 	br	44308 <__alt_data_end+0xfffc9988>
   449ec:	dac12d17 	ldw	r11,1204(sp)
   449f0:	db012d17 	ldw	r12,1204(sp)
   449f4:	5ac00017 	ldw	r11,0(r11)
   449f8:	dac12e15 	stw	r11,1208(sp)
   449fc:	62c00104 	addi	r11,r12,4
   44a00:	db012e17 	ldw	r12,1208(sp)
   44a04:	60034a16 	blt	r12,zero,45730 <___vfprintf_internal_r+0x1a78>
   44a08:	dac12d15 	stw	r11,1204(sp)
   44a0c:	1805883a 	mov	r2,r3
   44a10:	1c000007 	ldb	r16,0(r3)
   44a14:	003d0f06 	br	43e54 <__alt_data_end+0xfffc94d4>
   44a18:	1805883a 	mov	r2,r3
   44a1c:	01800ac4 	movi	r6,43
   44a20:	1c000007 	ldb	r16,0(r3)
   44a24:	003d0b06 	br	43e54 <__alt_data_end+0xfffc94d4>
   44a28:	d8c12a15 	stw	r3,1192(sp)
   44a2c:	d9812785 	stb	r6,1182(sp)
   44a30:	803db226 	beq	r16,zero,440fc <__alt_data_end+0xfffc977c>
   44a34:	00c00044 	movi	r3,1
   44a38:	d8c12b15 	stw	r3,1196(sp)
   44a3c:	dc010405 	stb	r16,1040(sp)
   44a40:	d8012785 	stb	zero,1182(sp)
   44a44:	003fb306 	br	44914 <__alt_data_end+0xfffc9f94>
   44a48:	d8c12017 	ldw	r3,1152(sp)
   44a4c:	003e6d06 	br	44404 <__alt_data_end+0xfffc9a84>
   44a50:	10803fcc 	andi	r2,r2,255
   44a54:	00c00044 	movi	r3,1
   44a58:	10fe141e 	bne	r2,r3,442ac <__alt_data_end+0xfffc992c>
   44a5c:	e000021e 	bne	fp,zero,44a68 <___vfprintf_internal_r+0xdb0>
   44a60:	00800244 	movi	r2,9
   44a64:	14c0202e 	bgeu	r2,r19,44ae8 <___vfprintf_internal_r+0xe30>
   44a68:	dc012b15 	stw	r16,1196(sp)
   44a6c:	dc412c15 	stw	r17,1200(sp)
   44a70:	9821883a 	mov	r16,r19
   44a74:	e023883a 	mov	r17,fp
   44a78:	dc810e04 	addi	r18,sp,1080
   44a7c:	4027883a 	mov	r19,r8
   44a80:	4839883a 	mov	fp,r9
   44a84:	8009883a 	mov	r4,r16
   44a88:	880b883a 	mov	r5,r17
   44a8c:	01800284 	movi	r6,10
   44a90:	000f883a 	mov	r7,zero
   44a94:	004d1340 	call	4d134 <__umoddi3>
   44a98:	10800c04 	addi	r2,r2,48
   44a9c:	94bfffc4 	addi	r18,r18,-1
   44aa0:	8009883a 	mov	r4,r16
   44aa4:	880b883a 	mov	r5,r17
   44aa8:	01800284 	movi	r6,10
   44aac:	000f883a 	mov	r7,zero
   44ab0:	90800005 	stb	r2,0(r18)
   44ab4:	004cb740 	call	4cb74 <__udivdi3>
   44ab8:	1021883a 	mov	r16,r2
   44abc:	10c4b03a 	or	r2,r2,r3
   44ac0:	1823883a 	mov	r17,r3
   44ac4:	103fef1e 	bne	r2,zero,44a84 <__alt_data_end+0xfffca104>
   44ac8:	dac12817 	ldw	r11,1184(sp)
   44acc:	dc813115 	stw	r18,1220(sp)
   44ad0:	dc012b17 	ldw	r16,1196(sp)
   44ad4:	9811883a 	mov	r8,r19
   44ad8:	dc412c17 	ldw	r17,1200(sp)
   44adc:	e013883a 	mov	r9,fp
   44ae0:	5ca5c83a 	sub	r18,r11,r18
   44ae4:	003e0306 	br	442f4 <__alt_data_end+0xfffc9974>
   44ae8:	9cc00c04 	addi	r19,r19,48
   44aec:	d8c10dc4 	addi	r3,sp,1079
   44af0:	dcc10dc5 	stb	r19,1079(sp)
   44af4:	dc813c17 	ldw	r18,1264(sp)
   44af8:	d8c13115 	stw	r3,1220(sp)
   44afc:	003dfd06 	br	442f4 <__alt_data_end+0xfffc9974>
   44b00:	00801944 	movi	r2,101
   44b04:	1400710e 	bge	r2,r16,44ccc <___vfprintf_internal_r+0x1014>
   44b08:	d9013717 	ldw	r4,1244(sp)
   44b0c:	d9413917 	ldw	r5,1252(sp)
   44b10:	000d883a 	mov	r6,zero
   44b14:	000f883a 	mov	r7,zero
   44b18:	d8c13d15 	stw	r3,1268(sp)
   44b1c:	da013f15 	stw	r8,1276(sp)
   44b20:	004e9580 	call	4e958 <__eqdf2>
   44b24:	d8c13d17 	ldw	r3,1268(sp)
   44b28:	da013f17 	ldw	r8,1276(sp)
   44b2c:	1000ef1e 	bne	r2,zero,44eec <___vfprintf_internal_r+0x1234>
   44b30:	d8811f17 	ldw	r2,1148(sp)
   44b34:	01000174 	movhi	r4,5
   44b38:	21093e04 	addi	r4,r4,9464
   44b3c:	18c00044 	addi	r3,r3,1
   44b40:	10800044 	addi	r2,r2,1
   44b44:	41000015 	stw	r4,0(r8)
   44b48:	01000044 	movi	r4,1
   44b4c:	41000115 	stw	r4,4(r8)
   44b50:	d8c12015 	stw	r3,1152(sp)
   44b54:	d8811f15 	stw	r2,1148(sp)
   44b58:	010001c4 	movi	r4,7
   44b5c:	20828e16 	blt	r4,r2,45598 <___vfprintf_internal_r+0x18e0>
   44b60:	42000204 	addi	r8,r8,8
   44b64:	d8812617 	ldw	r2,1176(sp)
   44b68:	dac13317 	ldw	r11,1228(sp)
   44b6c:	12c00216 	blt	r2,r11,44b78 <___vfprintf_internal_r+0xec0>
   44b70:	8880004c 	andi	r2,r17,1
   44b74:	103e7726 	beq	r2,zero,44554 <__alt_data_end+0xfffc9bd4>
   44b78:	db013817 	ldw	r12,1248(sp)
   44b7c:	d8811f17 	ldw	r2,1148(sp)
   44b80:	dac13517 	ldw	r11,1236(sp)
   44b84:	1b07883a 	add	r3,r3,r12
   44b88:	10800044 	addi	r2,r2,1
   44b8c:	42c00015 	stw	r11,0(r8)
   44b90:	43000115 	stw	r12,4(r8)
   44b94:	d8c12015 	stw	r3,1152(sp)
   44b98:	d8811f15 	stw	r2,1148(sp)
   44b9c:	010001c4 	movi	r4,7
   44ba0:	2082ed16 	blt	r4,r2,45758 <___vfprintf_internal_r+0x1aa0>
   44ba4:	42000204 	addi	r8,r8,8
   44ba8:	db013317 	ldw	r12,1228(sp)
   44bac:	643fffc4 	addi	r16,r12,-1
   44bb0:	043e680e 	bge	zero,r16,44554 <__alt_data_end+0xfffc9bd4>
   44bb4:	04800404 	movi	r18,16
   44bb8:	d8811f17 	ldw	r2,1148(sp)
   44bbc:	94007e0e 	bge	r18,r16,44db8 <___vfprintf_internal_r+0x1100>
   44bc0:	01400174 	movhi	r5,5
   44bc4:	29493e84 	addi	r5,r5,9466
   44bc8:	d9412c15 	stw	r5,1200(sp)
   44bcc:	054001c4 	movi	r21,7
   44bd0:	00000306 	br	44be0 <___vfprintf_internal_r+0xf28>
   44bd4:	42000204 	addi	r8,r8,8
   44bd8:	843ffc04 	addi	r16,r16,-16
   44bdc:	9400790e 	bge	r18,r16,44dc4 <___vfprintf_internal_r+0x110c>
   44be0:	18c00404 	addi	r3,r3,16
   44be4:	10800044 	addi	r2,r2,1
   44be8:	45000015 	stw	r20,0(r8)
   44bec:	44800115 	stw	r18,4(r8)
   44bf0:	d8c12015 	stw	r3,1152(sp)
   44bf4:	d8811f15 	stw	r2,1148(sp)
   44bf8:	a8bff60e 	bge	r21,r2,44bd4 <__alt_data_end+0xfffca254>
   44bfc:	b009883a 	mov	r4,r22
   44c00:	b80b883a 	mov	r5,r23
   44c04:	d9811e04 	addi	r6,sp,1144
   44c08:	004a3040 	call	4a304 <__sprint_r>
   44c0c:	103d411e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   44c10:	d8c12017 	ldw	r3,1152(sp)
   44c14:	d8811f17 	ldw	r2,1148(sp)
   44c18:	da000404 	addi	r8,sp,16
   44c1c:	003fee06 	br	44bd8 <__alt_data_end+0xfffca258>
   44c20:	dac12e17 	ldw	r11,1208(sp)
   44c24:	db012b17 	ldw	r12,1196(sp)
   44c28:	5b2bc83a 	sub	r21,r11,r12
   44c2c:	057e130e 	bge	zero,r21,4447c <__alt_data_end+0xfffc9afc>
   44c30:	07000404 	movi	fp,16
   44c34:	d8811f17 	ldw	r2,1148(sp)
   44c38:	e543640e 	bge	fp,r21,459cc <___vfprintf_internal_r+0x1d14>
   44c3c:	01400174 	movhi	r5,5
   44c40:	29493e84 	addi	r5,r5,9466
   44c44:	d9412c15 	stw	r5,1200(sp)
   44c48:	04c001c4 	movi	r19,7
   44c4c:	00000306 	br	44c5c <___vfprintf_internal_r+0xfa4>
   44c50:	ad7ffc04 	addi	r21,r21,-16
   44c54:	42000204 	addi	r8,r8,8
   44c58:	e540110e 	bge	fp,r21,44ca0 <___vfprintf_internal_r+0xfe8>
   44c5c:	18c00404 	addi	r3,r3,16
   44c60:	10800044 	addi	r2,r2,1
   44c64:	45000015 	stw	r20,0(r8)
   44c68:	47000115 	stw	fp,4(r8)
   44c6c:	d8c12015 	stw	r3,1152(sp)
   44c70:	d8811f15 	stw	r2,1148(sp)
   44c74:	98bff60e 	bge	r19,r2,44c50 <__alt_data_end+0xfffca2d0>
   44c78:	b009883a 	mov	r4,r22
   44c7c:	b80b883a 	mov	r5,r23
   44c80:	d9811e04 	addi	r6,sp,1144
   44c84:	004a3040 	call	4a304 <__sprint_r>
   44c88:	103d221e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   44c8c:	ad7ffc04 	addi	r21,r21,-16
   44c90:	d8c12017 	ldw	r3,1152(sp)
   44c94:	d8811f17 	ldw	r2,1148(sp)
   44c98:	da000404 	addi	r8,sp,16
   44c9c:	e57fef16 	blt	fp,r21,44c5c <__alt_data_end+0xfffca2dc>
   44ca0:	dac12c17 	ldw	r11,1200(sp)
   44ca4:	1d47883a 	add	r3,r3,r21
   44ca8:	10800044 	addi	r2,r2,1
   44cac:	42c00015 	stw	r11,0(r8)
   44cb0:	45400115 	stw	r21,4(r8)
   44cb4:	d8c12015 	stw	r3,1152(sp)
   44cb8:	d8811f15 	stw	r2,1148(sp)
   44cbc:	010001c4 	movi	r4,7
   44cc0:	20819116 	blt	r4,r2,45308 <___vfprintf_internal_r+0x1650>
   44cc4:	42000204 	addi	r8,r8,8
   44cc8:	003dec06 	br	4447c <__alt_data_end+0xfffc9afc>
   44ccc:	db013317 	ldw	r12,1228(sp)
   44cd0:	00800044 	movi	r2,1
   44cd4:	18c00044 	addi	r3,r3,1
   44cd8:	1301530e 	bge	r2,r12,45228 <___vfprintf_internal_r+0x1570>
   44cdc:	dc011f17 	ldw	r16,1148(sp)
   44ce0:	dac13117 	ldw	r11,1220(sp)
   44ce4:	00800044 	movi	r2,1
   44ce8:	84000044 	addi	r16,r16,1
   44cec:	40800115 	stw	r2,4(r8)
   44cf0:	42c00015 	stw	r11,0(r8)
   44cf4:	d8c12015 	stw	r3,1152(sp)
   44cf8:	dc011f15 	stw	r16,1148(sp)
   44cfc:	008001c4 	movi	r2,7
   44d00:	14016b16 	blt	r2,r16,452b0 <___vfprintf_internal_r+0x15f8>
   44d04:	42000204 	addi	r8,r8,8
   44d08:	db013817 	ldw	r12,1248(sp)
   44d0c:	dac13517 	ldw	r11,1236(sp)
   44d10:	84000044 	addi	r16,r16,1
   44d14:	1b07883a 	add	r3,r3,r12
   44d18:	42c00015 	stw	r11,0(r8)
   44d1c:	43000115 	stw	r12,4(r8)
   44d20:	d8c12015 	stw	r3,1152(sp)
   44d24:	dc011f15 	stw	r16,1148(sp)
   44d28:	008001c4 	movi	r2,7
   44d2c:	14016916 	blt	r2,r16,452d4 <___vfprintf_internal_r+0x161c>
   44d30:	44800204 	addi	r18,r8,8
   44d34:	d9013717 	ldw	r4,1244(sp)
   44d38:	d9413917 	ldw	r5,1252(sp)
   44d3c:	000d883a 	mov	r6,zero
   44d40:	000f883a 	mov	r7,zero
   44d44:	d8c13d15 	stw	r3,1268(sp)
   44d48:	004e9580 	call	4e958 <__eqdf2>
   44d4c:	d8c13d17 	ldw	r3,1268(sp)
   44d50:	db013317 	ldw	r12,1228(sp)
   44d54:	1000ae26 	beq	r2,zero,45010 <___vfprintf_internal_r+0x1358>
   44d58:	dac13117 	ldw	r11,1220(sp)
   44d5c:	60bfffc4 	addi	r2,r12,-1
   44d60:	1887883a 	add	r3,r3,r2
   44d64:	59000044 	addi	r4,r11,1
   44d68:	84000044 	addi	r16,r16,1
   44d6c:	90800115 	stw	r2,4(r18)
   44d70:	91000015 	stw	r4,0(r18)
   44d74:	d8c12015 	stw	r3,1152(sp)
   44d78:	dc011f15 	stw	r16,1148(sp)
   44d7c:	008001c4 	movi	r2,7
   44d80:	14014216 	blt	r2,r16,4528c <___vfprintf_internal_r+0x15d4>
   44d84:	94800204 	addi	r18,r18,8
   44d88:	dac13a17 	ldw	r11,1256(sp)
   44d8c:	dd4122c4 	addi	r21,sp,1163
   44d90:	84000044 	addi	r16,r16,1
   44d94:	58c7883a 	add	r3,r11,r3
   44d98:	95400015 	stw	r21,0(r18)
   44d9c:	92c00115 	stw	r11,4(r18)
   44da0:	d8c12015 	stw	r3,1152(sp)
   44da4:	dc011f15 	stw	r16,1148(sp)
   44da8:	008001c4 	movi	r2,7
   44dac:	14000e16 	blt	r2,r16,44de8 <___vfprintf_internal_r+0x1130>
   44db0:	92000204 	addi	r8,r18,8
   44db4:	003de706 	br	44554 <__alt_data_end+0xfffc9bd4>
   44db8:	01000174 	movhi	r4,5
   44dbc:	21093e84 	addi	r4,r4,9466
   44dc0:	d9012c15 	stw	r4,1200(sp)
   44dc4:	dac12c17 	ldw	r11,1200(sp)
   44dc8:	1c07883a 	add	r3,r3,r16
   44dcc:	44000115 	stw	r16,4(r8)
   44dd0:	42c00015 	stw	r11,0(r8)
   44dd4:	10800044 	addi	r2,r2,1
   44dd8:	d8c12015 	stw	r3,1152(sp)
   44ddc:	d8811f15 	stw	r2,1148(sp)
   44de0:	010001c4 	movi	r4,7
   44de4:	20bdda0e 	bge	r4,r2,44550 <__alt_data_end+0xfffc9bd0>
   44de8:	b009883a 	mov	r4,r22
   44dec:	b80b883a 	mov	r5,r23
   44df0:	d9811e04 	addi	r6,sp,1144
   44df4:	004a3040 	call	4a304 <__sprint_r>
   44df8:	103cc61e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   44dfc:	d8c12017 	ldw	r3,1152(sp)
   44e00:	da000404 	addi	r8,sp,16
   44e04:	003dd306 	br	44554 <__alt_data_end+0xfffc9bd4>
   44e08:	b009883a 	mov	r4,r22
   44e0c:	b80b883a 	mov	r5,r23
   44e10:	d9811e04 	addi	r6,sp,1144
   44e14:	004a3040 	call	4a304 <__sprint_r>
   44e18:	103e0926 	beq	r2,zero,44640 <__alt_data_end+0xfffc9cc0>
   44e1c:	003cbd06 	br	44114 <__alt_data_end+0xfffc9794>
   44e20:	10803fcc 	andi	r2,r2,255
   44e24:	1000651e 	bne	r2,zero,44fbc <___vfprintf_internal_r+0x1304>
   44e28:	8880004c 	andi	r2,r17,1
   44e2c:	10013226 	beq	r2,zero,452f8 <___vfprintf_internal_r+0x1640>
   44e30:	00800c04 	movi	r2,48
   44e34:	d8c10dc4 	addi	r3,sp,1079
   44e38:	d8810dc5 	stb	r2,1079(sp)
   44e3c:	dc813c17 	ldw	r18,1264(sp)
   44e40:	d8c13115 	stw	r3,1220(sp)
   44e44:	003d2b06 	br	442f4 <__alt_data_end+0xfffc9974>
   44e48:	b009883a 	mov	r4,r22
   44e4c:	b80b883a 	mov	r5,r23
   44e50:	d9811e04 	addi	r6,sp,1144
   44e54:	004a3040 	call	4a304 <__sprint_r>
   44e58:	103cae1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   44e5c:	d8c12017 	ldw	r3,1152(sp)
   44e60:	da000404 	addi	r8,sp,16
   44e64:	003dae06 	br	44520 <__alt_data_end+0xfffc9ba0>
   44e68:	b009883a 	mov	r4,r22
   44e6c:	b80b883a 	mov	r5,r23
   44e70:	d9811e04 	addi	r6,sp,1144
   44e74:	004a3040 	call	4a304 <__sprint_r>
   44e78:	103ca61e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   44e7c:	d8c12017 	ldw	r3,1152(sp)
   44e80:	da000404 	addi	r8,sp,16
   44e84:	003d6c06 	br	44438 <__alt_data_end+0xfffc9ab8>
   44e88:	b009883a 	mov	r4,r22
   44e8c:	b80b883a 	mov	r5,r23
   44e90:	d9811e04 	addi	r6,sp,1144
   44e94:	004a3040 	call	4a304 <__sprint_r>
   44e98:	103c9e1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   44e9c:	d8c12017 	ldw	r3,1152(sp)
   44ea0:	da000404 	addi	r8,sp,16
   44ea4:	003d7206 	br	44470 <__alt_data_end+0xfffc9af0>
   44ea8:	d9413b17 	ldw	r5,1260(sp)
   44eac:	d8c10e04 	addi	r3,sp,1080
   44eb0:	988003cc 	andi	r2,r19,15
   44eb4:	e008973a 	slli	r4,fp,28
   44eb8:	2885883a 	add	r2,r5,r2
   44ebc:	9826d13a 	srli	r19,r19,4
   44ec0:	10800003 	ldbu	r2,0(r2)
   44ec4:	e038d13a 	srli	fp,fp,4
   44ec8:	18ffffc4 	addi	r3,r3,-1
   44ecc:	24e6b03a 	or	r19,r4,r19
   44ed0:	18800005 	stb	r2,0(r3)
   44ed4:	9f04b03a 	or	r2,r19,fp
   44ed8:	103ff51e 	bne	r2,zero,44eb0 <__alt_data_end+0xfffca530>
   44edc:	db012817 	ldw	r12,1184(sp)
   44ee0:	d8c13115 	stw	r3,1220(sp)
   44ee4:	60e5c83a 	sub	r18,r12,r3
   44ee8:	003d0206 	br	442f4 <__alt_data_end+0xfffc9974>
   44eec:	dc012617 	ldw	r16,1176(sp)
   44ef0:	0401b10e 	bge	zero,r16,455b8 <___vfprintf_internal_r+0x1900>
   44ef4:	db013117 	ldw	r12,1220(sp)
   44ef8:	dac13317 	ldw	r11,1228(sp)
   44efc:	62e1883a 	add	r16,r12,r11
   44f00:	db013417 	ldw	r12,1232(sp)
   44f04:	5825883a 	mov	r18,r11
   44f08:	62c0010e 	bge	r12,r11,44f10 <___vfprintf_internal_r+0x1258>
   44f0c:	6025883a 	mov	r18,r12
   44f10:	04800b0e 	bge	zero,r18,44f40 <___vfprintf_internal_r+0x1288>
   44f14:	d8811f17 	ldw	r2,1148(sp)
   44f18:	dac13117 	ldw	r11,1220(sp)
   44f1c:	1c87883a 	add	r3,r3,r18
   44f20:	10800044 	addi	r2,r2,1
   44f24:	42c00015 	stw	r11,0(r8)
   44f28:	44800115 	stw	r18,4(r8)
   44f2c:	d8c12015 	stw	r3,1152(sp)
   44f30:	d8811f15 	stw	r2,1148(sp)
   44f34:	010001c4 	movi	r4,7
   44f38:	20824f16 	blt	r4,r2,45878 <___vfprintf_internal_r+0x1bc0>
   44f3c:	42000204 	addi	r8,r8,8
   44f40:	90024b16 	blt	r18,zero,45870 <___vfprintf_internal_r+0x1bb8>
   44f44:	db013417 	ldw	r12,1232(sp)
   44f48:	64a5c83a 	sub	r18,r12,r18
   44f4c:	0480730e 	bge	zero,r18,4511c <___vfprintf_internal_r+0x1464>
   44f50:	05400404 	movi	r21,16
   44f54:	d8811f17 	ldw	r2,1148(sp)
   44f58:	ac817d0e 	bge	r21,r18,45550 <___vfprintf_internal_r+0x1898>
   44f5c:	01400174 	movhi	r5,5
   44f60:	29493e84 	addi	r5,r5,9466
   44f64:	d9412c15 	stw	r5,1200(sp)
   44f68:	070001c4 	movi	fp,7
   44f6c:	00000306 	br	44f7c <___vfprintf_internal_r+0x12c4>
   44f70:	42000204 	addi	r8,r8,8
   44f74:	94bffc04 	addi	r18,r18,-16
   44f78:	ac81780e 	bge	r21,r18,4555c <___vfprintf_internal_r+0x18a4>
   44f7c:	18c00404 	addi	r3,r3,16
   44f80:	10800044 	addi	r2,r2,1
   44f84:	45000015 	stw	r20,0(r8)
   44f88:	45400115 	stw	r21,4(r8)
   44f8c:	d8c12015 	stw	r3,1152(sp)
   44f90:	d8811f15 	stw	r2,1148(sp)
   44f94:	e0bff60e 	bge	fp,r2,44f70 <__alt_data_end+0xfffca5f0>
   44f98:	b009883a 	mov	r4,r22
   44f9c:	b80b883a 	mov	r5,r23
   44fa0:	d9811e04 	addi	r6,sp,1144
   44fa4:	004a3040 	call	4a304 <__sprint_r>
   44fa8:	103c5a1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   44fac:	d8c12017 	ldw	r3,1152(sp)
   44fb0:	d8811f17 	ldw	r2,1148(sp)
   44fb4:	da000404 	addi	r8,sp,16
   44fb8:	003fee06 	br	44f74 <__alt_data_end+0xfffca5f4>
   44fbc:	dac10e04 	addi	r11,sp,1080
   44fc0:	0025883a 	mov	r18,zero
   44fc4:	dac13115 	stw	r11,1220(sp)
   44fc8:	003cca06 	br	442f4 <__alt_data_end+0xfffc9974>
   44fcc:	b009883a 	mov	r4,r22
   44fd0:	b80b883a 	mov	r5,r23
   44fd4:	d9811e04 	addi	r6,sp,1144
   44fd8:	004a3040 	call	4a304 <__sprint_r>
   44fdc:	103c4d1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   44fe0:	d8c12017 	ldw	r3,1152(sp)
   44fe4:	d8812787 	ldb	r2,1182(sp)
   44fe8:	da000404 	addi	r8,sp,16
   44fec:	003d0506 	br	44404 <__alt_data_end+0xfffc9a84>
   44ff0:	dac12d17 	ldw	r11,1204(sp)
   44ff4:	14c00017 	ldw	r19,0(r2)
   44ff8:	0039883a 	mov	fp,zero
   44ffc:	5ac00104 	addi	r11,r11,4
   45000:	dac12d15 	stw	r11,1204(sp)
   45004:	0005883a 	mov	r2,zero
   45008:	9807883a 	mov	r3,r19
   4500c:	003c9c06 	br	44280 <__alt_data_end+0xfffc9900>
   45010:	657fffc4 	addi	r21,r12,-1
   45014:	057f5c0e 	bge	zero,r21,44d88 <__alt_data_end+0xfffca408>
   45018:	07000404 	movi	fp,16
   4501c:	e5408f0e 	bge	fp,r21,4525c <___vfprintf_internal_r+0x15a4>
   45020:	01000174 	movhi	r4,5
   45024:	21093e84 	addi	r4,r4,9466
   45028:	d9012c15 	stw	r4,1200(sp)
   4502c:	01c001c4 	movi	r7,7
   45030:	00000306 	br	45040 <___vfprintf_internal_r+0x1388>
   45034:	94800204 	addi	r18,r18,8
   45038:	ad7ffc04 	addi	r21,r21,-16
   4503c:	e5408a0e 	bge	fp,r21,45268 <___vfprintf_internal_r+0x15b0>
   45040:	18c00404 	addi	r3,r3,16
   45044:	84000044 	addi	r16,r16,1
   45048:	95000015 	stw	r20,0(r18)
   4504c:	97000115 	stw	fp,4(r18)
   45050:	d8c12015 	stw	r3,1152(sp)
   45054:	dc011f15 	stw	r16,1148(sp)
   45058:	3c3ff60e 	bge	r7,r16,45034 <__alt_data_end+0xfffca6b4>
   4505c:	b009883a 	mov	r4,r22
   45060:	b80b883a 	mov	r5,r23
   45064:	d9811e04 	addi	r6,sp,1144
   45068:	d9c13d15 	stw	r7,1268(sp)
   4506c:	004a3040 	call	4a304 <__sprint_r>
   45070:	d9c13d17 	ldw	r7,1268(sp)
   45074:	103c271e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   45078:	d8c12017 	ldw	r3,1152(sp)
   4507c:	dc011f17 	ldw	r16,1148(sp)
   45080:	dc800404 	addi	r18,sp,16
   45084:	003fec06 	br	45038 <__alt_data_end+0xfffca6b8>
   45088:	1cc00017 	ldw	r19,0(r3)
   4508c:	dac12d17 	ldw	r11,1204(sp)
   45090:	9839d7fa 	srai	fp,r19,31
   45094:	5ac00104 	addi	r11,r11,4
   45098:	dac12d15 	stw	r11,1204(sp)
   4509c:	e005883a 	mov	r2,fp
   450a0:	003d9006 	br	446e4 <__alt_data_end+0xfffc9d64>
   450a4:	00800084 	movi	r2,2
   450a8:	9f06b03a 	or	r3,r19,fp
   450ac:	003c7406 	br	44280 <__alt_data_end+0xfffc9900>
   450b0:	db012d17 	ldw	r12,1204(sp)
   450b4:	14c00017 	ldw	r19,0(r2)
   450b8:	0039883a 	mov	fp,zero
   450bc:	63000104 	addi	r12,r12,4
   450c0:	db012d15 	stw	r12,1204(sp)
   450c4:	00800044 	movi	r2,1
   450c8:	9807883a 	mov	r3,r19
   450cc:	003c6c06 	br	44280 <__alt_data_end+0xfffc9900>
   450d0:	10803fcc 	andi	r2,r2,255
   450d4:	1080201c 	xori	r2,r2,128
   450d8:	10bfe004 	addi	r2,r2,-128
   450dc:	01000c04 	movi	r4,48
   450e0:	1101a526 	beq	r2,r4,45778 <___vfprintf_internal_r+0x1ac0>
   450e4:	dac13117 	ldw	r11,1220(sp)
   450e8:	db012817 	ldw	r12,1184(sp)
   450ec:	193fffc5 	stb	r4,-1(r3)
   450f0:	5affffc4 	addi	r11,r11,-1
   450f4:	dac13115 	stw	r11,1220(sp)
   450f8:	62e5c83a 	sub	r18,r12,r11
   450fc:	003c7d06 	br	442f4 <__alt_data_end+0xfffc9974>
   45100:	b009883a 	mov	r4,r22
   45104:	b80b883a 	mov	r5,r23
   45108:	d9811e04 	addi	r6,sp,1144
   4510c:	004a3040 	call	4a304 <__sprint_r>
   45110:	103c001e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   45114:	d8c12017 	ldw	r3,1152(sp)
   45118:	da000404 	addi	r8,sp,16
   4511c:	db013117 	ldw	r12,1220(sp)
   45120:	dac13417 	ldw	r11,1232(sp)
   45124:	d8812617 	ldw	r2,1176(sp)
   45128:	62e5883a 	add	r18,r12,r11
   4512c:	db013317 	ldw	r12,1228(sp)
   45130:	13000216 	blt	r2,r12,4513c <___vfprintf_internal_r+0x1484>
   45134:	8900004c 	andi	r4,r17,1
   45138:	20000c26 	beq	r4,zero,4516c <___vfprintf_internal_r+0x14b4>
   4513c:	dac13817 	ldw	r11,1248(sp)
   45140:	d9011f17 	ldw	r4,1148(sp)
   45144:	db013517 	ldw	r12,1236(sp)
   45148:	1ac7883a 	add	r3,r3,r11
   4514c:	21000044 	addi	r4,r4,1
   45150:	43000015 	stw	r12,0(r8)
   45154:	42c00115 	stw	r11,4(r8)
   45158:	d8c12015 	stw	r3,1152(sp)
   4515c:	d9011f15 	stw	r4,1148(sp)
   45160:	014001c4 	movi	r5,7
   45164:	2901cc16 	blt	r5,r4,45898 <___vfprintf_internal_r+0x1be0>
   45168:	42000204 	addi	r8,r8,8
   4516c:	dac13317 	ldw	r11,1228(sp)
   45170:	8489c83a 	sub	r4,r16,r18
   45174:	5885c83a 	sub	r2,r11,r2
   45178:	1021883a 	mov	r16,r2
   4517c:	2080010e 	bge	r4,r2,45184 <___vfprintf_internal_r+0x14cc>
   45180:	2021883a 	mov	r16,r4
   45184:	04000a0e 	bge	zero,r16,451b0 <___vfprintf_internal_r+0x14f8>
   45188:	d9011f17 	ldw	r4,1148(sp)
   4518c:	1c07883a 	add	r3,r3,r16
   45190:	44800015 	stw	r18,0(r8)
   45194:	21000044 	addi	r4,r4,1
   45198:	44000115 	stw	r16,4(r8)
   4519c:	d8c12015 	stw	r3,1152(sp)
   451a0:	d9011f15 	stw	r4,1148(sp)
   451a4:	014001c4 	movi	r5,7
   451a8:	2901d616 	blt	r5,r4,45904 <___vfprintf_internal_r+0x1c4c>
   451ac:	42000204 	addi	r8,r8,8
   451b0:	8001df16 	blt	r16,zero,45930 <___vfprintf_internal_r+0x1c78>
   451b4:	1421c83a 	sub	r16,r2,r16
   451b8:	043ce60e 	bge	zero,r16,44554 <__alt_data_end+0xfffc9bd4>
   451bc:	04800404 	movi	r18,16
   451c0:	d8811f17 	ldw	r2,1148(sp)
   451c4:	943efc0e 	bge	r18,r16,44db8 <__alt_data_end+0xfffca438>
   451c8:	01400174 	movhi	r5,5
   451cc:	29493e84 	addi	r5,r5,9466
   451d0:	d9412c15 	stw	r5,1200(sp)
   451d4:	054001c4 	movi	r21,7
   451d8:	00000306 	br	451e8 <___vfprintf_internal_r+0x1530>
   451dc:	42000204 	addi	r8,r8,8
   451e0:	843ffc04 	addi	r16,r16,-16
   451e4:	943ef70e 	bge	r18,r16,44dc4 <__alt_data_end+0xfffca444>
   451e8:	18c00404 	addi	r3,r3,16
   451ec:	10800044 	addi	r2,r2,1
   451f0:	45000015 	stw	r20,0(r8)
   451f4:	44800115 	stw	r18,4(r8)
   451f8:	d8c12015 	stw	r3,1152(sp)
   451fc:	d8811f15 	stw	r2,1148(sp)
   45200:	a8bff60e 	bge	r21,r2,451dc <__alt_data_end+0xfffca85c>
   45204:	b009883a 	mov	r4,r22
   45208:	b80b883a 	mov	r5,r23
   4520c:	d9811e04 	addi	r6,sp,1144
   45210:	004a3040 	call	4a304 <__sprint_r>
   45214:	103bbf1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   45218:	d8c12017 	ldw	r3,1152(sp)
   4521c:	d8811f17 	ldw	r2,1148(sp)
   45220:	da000404 	addi	r8,sp,16
   45224:	003fee06 	br	451e0 <__alt_data_end+0xfffca860>
   45228:	8888703a 	and	r4,r17,r2
   4522c:	203eab1e 	bne	r4,zero,44cdc <__alt_data_end+0xfffca35c>
   45230:	dc011f17 	ldw	r16,1148(sp)
   45234:	db013117 	ldw	r12,1220(sp)
   45238:	40800115 	stw	r2,4(r8)
   4523c:	84000044 	addi	r16,r16,1
   45240:	43000015 	stw	r12,0(r8)
   45244:	d8c12015 	stw	r3,1152(sp)
   45248:	dc011f15 	stw	r16,1148(sp)
   4524c:	008001c4 	movi	r2,7
   45250:	14000e16 	blt	r2,r16,4528c <___vfprintf_internal_r+0x15d4>
   45254:	44800204 	addi	r18,r8,8
   45258:	003ecb06 	br	44d88 <__alt_data_end+0xfffca408>
   4525c:	00800174 	movhi	r2,5
   45260:	10893e84 	addi	r2,r2,9466
   45264:	d8812c15 	stw	r2,1200(sp)
   45268:	dac12c17 	ldw	r11,1200(sp)
   4526c:	1d47883a 	add	r3,r3,r21
   45270:	84000044 	addi	r16,r16,1
   45274:	92c00015 	stw	r11,0(r18)
   45278:	95400115 	stw	r21,4(r18)
   4527c:	d8c12015 	stw	r3,1152(sp)
   45280:	dc011f15 	stw	r16,1148(sp)
   45284:	008001c4 	movi	r2,7
   45288:	143ebe0e 	bge	r2,r16,44d84 <__alt_data_end+0xfffca404>
   4528c:	b009883a 	mov	r4,r22
   45290:	b80b883a 	mov	r5,r23
   45294:	d9811e04 	addi	r6,sp,1144
   45298:	004a3040 	call	4a304 <__sprint_r>
   4529c:	103b9d1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   452a0:	d8c12017 	ldw	r3,1152(sp)
   452a4:	dc011f17 	ldw	r16,1148(sp)
   452a8:	dc800404 	addi	r18,sp,16
   452ac:	003eb606 	br	44d88 <__alt_data_end+0xfffca408>
   452b0:	b009883a 	mov	r4,r22
   452b4:	b80b883a 	mov	r5,r23
   452b8:	d9811e04 	addi	r6,sp,1144
   452bc:	004a3040 	call	4a304 <__sprint_r>
   452c0:	103b941e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   452c4:	d8c12017 	ldw	r3,1152(sp)
   452c8:	dc011f17 	ldw	r16,1148(sp)
   452cc:	da000404 	addi	r8,sp,16
   452d0:	003e8d06 	br	44d08 <__alt_data_end+0xfffca388>
   452d4:	b009883a 	mov	r4,r22
   452d8:	b80b883a 	mov	r5,r23
   452dc:	d9811e04 	addi	r6,sp,1144
   452e0:	004a3040 	call	4a304 <__sprint_r>
   452e4:	103b8b1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   452e8:	d8c12017 	ldw	r3,1152(sp)
   452ec:	dc011f17 	ldw	r16,1148(sp)
   452f0:	dc800404 	addi	r18,sp,16
   452f4:	003e8f06 	br	44d34 <__alt_data_end+0xfffca3b4>
   452f8:	db010e04 	addi	r12,sp,1080
   452fc:	0025883a 	mov	r18,zero
   45300:	db013115 	stw	r12,1220(sp)
   45304:	003bfb06 	br	442f4 <__alt_data_end+0xfffc9974>
   45308:	b009883a 	mov	r4,r22
   4530c:	b80b883a 	mov	r5,r23
   45310:	d9811e04 	addi	r6,sp,1144
   45314:	004a3040 	call	4a304 <__sprint_r>
   45318:	103b7e1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   4531c:	d8c12017 	ldw	r3,1152(sp)
   45320:	da000404 	addi	r8,sp,16
   45324:	003c5506 	br	4447c <__alt_data_end+0xfffc9afc>
   45328:	04e7c83a 	sub	r19,zero,r19
   4532c:	9804c03a 	cmpne	r2,r19,zero
   45330:	0739c83a 	sub	fp,zero,fp
   45334:	e0b9c83a 	sub	fp,fp,r2
   45338:	05400b44 	movi	r21,45
   4533c:	dd412785 	stb	r21,1182(sp)
   45340:	da413215 	stw	r9,1224(sp)
   45344:	00800044 	movi	r2,1
   45348:	9f06b03a 	or	r3,r19,fp
   4534c:	003bcf06 	br	4428c <__alt_data_end+0xfffc990c>
   45350:	da013f15 	stw	r8,1276(sp)
   45354:	da413e15 	stw	r9,1272(sp)
   45358:	0049ec80 	call	49ec8 <__fpclassifyd>
   4535c:	da013f17 	ldw	r8,1276(sp)
   45360:	da413e17 	ldw	r9,1272(sp)
   45364:	1000ce26 	beq	r2,zero,456a0 <___vfprintf_internal_r+0x19e8>
   45368:	057ff7c4 	movi	r21,-33
   4536c:	00bfffc4 	movi	r2,-1
   45370:	856a703a 	and	r21,r16,r21
   45374:	4881f026 	beq	r9,r2,45b38 <___vfprintf_internal_r+0x1e80>
   45378:	008011c4 	movi	r2,71
   4537c:	a881e526 	beq	r21,r2,45b14 <___vfprintf_internal_r+0x1e5c>
   45380:	db013917 	ldw	r12,1252(sp)
   45384:	8ac04014 	ori	r11,r17,256
   45388:	dac12d15 	stw	r11,1204(sp)
   4538c:	6001e416 	blt	r12,zero,45b20 <___vfprintf_internal_r+0x1e68>
   45390:	dc813917 	ldw	r18,1252(sp)
   45394:	d8012b05 	stb	zero,1196(sp)
   45398:	00801984 	movi	r2,102
   4539c:	80811826 	beq	r16,r2,45800 <___vfprintf_internal_r+0x1b48>
   453a0:	00801184 	movi	r2,70
   453a4:	80811626 	beq	r16,r2,45800 <___vfprintf_internal_r+0x1b48>
   453a8:	00801144 	movi	r2,69
   453ac:	a881e026 	beq	r21,r2,45b30 <___vfprintf_internal_r+0x1e78>
   453b0:	4839883a 	mov	fp,r9
   453b4:	d8812604 	addi	r2,sp,1176
   453b8:	d8800115 	stw	r2,4(sp)
   453bc:	d9413717 	ldw	r5,1244(sp)
   453c0:	d8812504 	addi	r2,sp,1172
   453c4:	d8800215 	stw	r2,8(sp)
   453c8:	d8812104 	addi	r2,sp,1156
   453cc:	df000015 	stw	fp,0(sp)
   453d0:	d8800315 	stw	r2,12(sp)
   453d4:	b009883a 	mov	r4,r22
   453d8:	900d883a 	mov	r6,r18
   453dc:	01c00084 	movi	r7,2
   453e0:	da013f15 	stw	r8,1276(sp)
   453e4:	da413e15 	stw	r9,1272(sp)
   453e8:	00460080 	call	46008 <_dtoa_r>
   453ec:	d8813115 	stw	r2,1220(sp)
   453f0:	008019c4 	movi	r2,103
   453f4:	da013f17 	ldw	r8,1276(sp)
   453f8:	da413e17 	ldw	r9,1272(sp)
   453fc:	80800226 	beq	r16,r2,45408 <___vfprintf_internal_r+0x1750>
   45400:	008011c4 	movi	r2,71
   45404:	8081101e 	bne	r16,r2,45848 <___vfprintf_internal_r+0x1b90>
   45408:	8880004c 	andi	r2,r17,1
   4540c:	1001df26 	beq	r2,zero,45b8c <___vfprintf_internal_r+0x1ed4>
   45410:	db013117 	ldw	r12,1220(sp)
   45414:	6715883a 	add	r10,r12,fp
   45418:	d9013717 	ldw	r4,1244(sp)
   4541c:	900b883a 	mov	r5,r18
   45420:	000d883a 	mov	r6,zero
   45424:	000f883a 	mov	r7,zero
   45428:	da013f15 	stw	r8,1276(sp)
   4542c:	da413e15 	stw	r9,1272(sp)
   45430:	da813d15 	stw	r10,1268(sp)
   45434:	004e9580 	call	4e958 <__eqdf2>
   45438:	da013f17 	ldw	r8,1276(sp)
   4543c:	da413e17 	ldw	r9,1272(sp)
   45440:	da813d17 	ldw	r10,1268(sp)
   45444:	10016526 	beq	r2,zero,459dc <___vfprintf_internal_r+0x1d24>
   45448:	d8812117 	ldw	r2,1156(sp)
   4544c:	1280062e 	bgeu	r2,r10,45468 <___vfprintf_internal_r+0x17b0>
   45450:	01000c04 	movi	r4,48
   45454:	10c00044 	addi	r3,r2,1
   45458:	d8c12115 	stw	r3,1156(sp)
   4545c:	11000005 	stb	r4,0(r2)
   45460:	d8812117 	ldw	r2,1156(sp)
   45464:	12bffb36 	bltu	r2,r10,45454 <__alt_data_end+0xfffcaad4>
   45468:	db013117 	ldw	r12,1220(sp)
   4546c:	1305c83a 	sub	r2,r2,r12
   45470:	d8813315 	stw	r2,1228(sp)
   45474:	008011c4 	movi	r2,71
   45478:	a8814a26 	beq	r21,r2,459a4 <___vfprintf_internal_r+0x1cec>
   4547c:	00801944 	movi	r2,101
   45480:	14020a0e 	bge	r2,r16,45cac <___vfprintf_internal_r+0x1ff4>
   45484:	00801984 	movi	r2,102
   45488:	8081b626 	beq	r16,r2,45b64 <___vfprintf_internal_r+0x1eac>
   4548c:	db012617 	ldw	r12,1176(sp)
   45490:	db013415 	stw	r12,1232(sp)
   45494:	db013417 	ldw	r12,1232(sp)
   45498:	dac13317 	ldw	r11,1228(sp)
   4549c:	62c1a816 	blt	r12,r11,45b40 <___vfprintf_internal_r+0x1e88>
   454a0:	8c40004c 	andi	r17,r17,1
   454a4:	8801ca1e 	bne	r17,zero,45bd0 <___vfprintf_internal_r+0x1f18>
   454a8:	6005883a 	mov	r2,r12
   454ac:	6001b516 	blt	r12,zero,45b84 <___vfprintf_internal_r+0x1ecc>
   454b0:	dc813417 	ldw	r18,1232(sp)
   454b4:	df012b07 	ldb	fp,1196(sp)
   454b8:	e001321e 	bne	fp,zero,45984 <___vfprintf_internal_r+0x1ccc>
   454bc:	dc412d17 	ldw	r17,1204(sp)
   454c0:	dd412783 	ldbu	r21,1182(sp)
   454c4:	d8812b15 	stw	r2,1196(sp)
   454c8:	dcc12d15 	stw	r19,1204(sp)
   454cc:	d8013215 	stw	zero,1224(sp)
   454d0:	003b8d06 	br	44308 <__alt_data_end+0xfffc9988>
   454d4:	88c0100c 	andi	r3,r17,64
   454d8:	18008226 	beq	r3,zero,456e4 <___vfprintf_internal_r+0x1a2c>
   454dc:	dac12d17 	ldw	r11,1204(sp)
   454e0:	14c0000b 	ldhu	r19,0(r2)
   454e4:	0039883a 	mov	fp,zero
   454e8:	5ac00104 	addi	r11,r11,4
   454ec:	dac12d15 	stw	r11,1204(sp)
   454f0:	003c8f06 	br	44730 <__alt_data_end+0xfffc9db0>
   454f4:	1c000007 	ldb	r16,0(r3)
   454f8:	1805883a 	mov	r2,r3
   454fc:	003a5506 	br	43e54 <__alt_data_end+0xfffc94d4>
   45500:	00800084 	movi	r2,2
   45504:	003b5e06 	br	44280 <__alt_data_end+0xfffc9900>
   45508:	8880040c 	andi	r2,r17,16
   4550c:	1000091e 	bne	r2,zero,45534 <___vfprintf_internal_r+0x187c>
   45510:	8c40100c 	andi	r17,r17,64
   45514:	88000726 	beq	r17,zero,45534 <___vfprintf_internal_r+0x187c>
   45518:	db012d17 	ldw	r12,1204(sp)
   4551c:	dac12f17 	ldw	r11,1212(sp)
   45520:	60800017 	ldw	r2,0(r12)
   45524:	63000104 	addi	r12,r12,4
   45528:	db012d15 	stw	r12,1204(sp)
   4552c:	12c0000d 	sth	r11,0(r2)
   45530:	003a1e06 	br	43dac <__alt_data_end+0xfffc942c>
   45534:	db012d17 	ldw	r12,1204(sp)
   45538:	dac12f17 	ldw	r11,1212(sp)
   4553c:	60800017 	ldw	r2,0(r12)
   45540:	63000104 	addi	r12,r12,4
   45544:	db012d15 	stw	r12,1204(sp)
   45548:	12c00015 	stw	r11,0(r2)
   4554c:	003a1706 	br	43dac <__alt_data_end+0xfffc942c>
   45550:	01000174 	movhi	r4,5
   45554:	21093e84 	addi	r4,r4,9466
   45558:	d9012c15 	stw	r4,1200(sp)
   4555c:	dac12c17 	ldw	r11,1200(sp)
   45560:	1c87883a 	add	r3,r3,r18
   45564:	10800044 	addi	r2,r2,1
   45568:	42c00015 	stw	r11,0(r8)
   4556c:	44800115 	stw	r18,4(r8)
   45570:	d8c12015 	stw	r3,1152(sp)
   45574:	d8811f15 	stw	r2,1148(sp)
   45578:	010001c4 	movi	r4,7
   4557c:	20bee016 	blt	r4,r2,45100 <__alt_data_end+0xfffca780>
   45580:	42000204 	addi	r8,r8,8
   45584:	003ee506 	br	4511c <__alt_data_end+0xfffca79c>
   45588:	01000174 	movhi	r4,5
   4558c:	21093e84 	addi	r4,r4,9466
   45590:	d9012c15 	stw	r4,1200(sp)
   45594:	003bd806 	br	444f8 <__alt_data_end+0xfffc9b78>
   45598:	b009883a 	mov	r4,r22
   4559c:	b80b883a 	mov	r5,r23
   455a0:	d9811e04 	addi	r6,sp,1144
   455a4:	004a3040 	call	4a304 <__sprint_r>
   455a8:	103ada1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   455ac:	d8c12017 	ldw	r3,1152(sp)
   455b0:	da000404 	addi	r8,sp,16
   455b4:	003d6b06 	br	44b64 <__alt_data_end+0xfffca1e4>
   455b8:	d8811f17 	ldw	r2,1148(sp)
   455bc:	03000174 	movhi	r12,5
   455c0:	01000044 	movi	r4,1
   455c4:	18c00044 	addi	r3,r3,1
   455c8:	10800044 	addi	r2,r2,1
   455cc:	63093e04 	addi	r12,r12,9464
   455d0:	41000115 	stw	r4,4(r8)
   455d4:	43000015 	stw	r12,0(r8)
   455d8:	d8c12015 	stw	r3,1152(sp)
   455dc:	d8811f15 	stw	r2,1148(sp)
   455e0:	010001c4 	movi	r4,7
   455e4:	20804916 	blt	r4,r2,4570c <___vfprintf_internal_r+0x1a54>
   455e8:	42000204 	addi	r8,r8,8
   455ec:	8000041e 	bne	r16,zero,45600 <___vfprintf_internal_r+0x1948>
   455f0:	dac13317 	ldw	r11,1228(sp)
   455f4:	5800021e 	bne	r11,zero,45600 <___vfprintf_internal_r+0x1948>
   455f8:	8880004c 	andi	r2,r17,1
   455fc:	103bd526 	beq	r2,zero,44554 <__alt_data_end+0xfffc9bd4>
   45600:	db013817 	ldw	r12,1248(sp)
   45604:	d8811f17 	ldw	r2,1148(sp)
   45608:	dac13517 	ldw	r11,1236(sp)
   4560c:	1b07883a 	add	r3,r3,r12
   45610:	10800044 	addi	r2,r2,1
   45614:	42c00015 	stw	r11,0(r8)
   45618:	43000115 	stw	r12,4(r8)
   4561c:	d8c12015 	stw	r3,1152(sp)
   45620:	d8811f15 	stw	r2,1148(sp)
   45624:	010001c4 	movi	r4,7
   45628:	20813016 	blt	r4,r2,45aec <___vfprintf_internal_r+0x1e34>
   4562c:	42000204 	addi	r8,r8,8
   45630:	0421c83a 	sub	r16,zero,r16
   45634:	0400630e 	bge	zero,r16,457c4 <___vfprintf_internal_r+0x1b0c>
   45638:	04800404 	movi	r18,16
   4563c:	94009f0e 	bge	r18,r16,458bc <___vfprintf_internal_r+0x1c04>
   45640:	01000174 	movhi	r4,5
   45644:	21093e84 	addi	r4,r4,9466
   45648:	d9012c15 	stw	r4,1200(sp)
   4564c:	054001c4 	movi	r21,7
   45650:	00000306 	br	45660 <___vfprintf_internal_r+0x19a8>
   45654:	42000204 	addi	r8,r8,8
   45658:	843ffc04 	addi	r16,r16,-16
   4565c:	94009a0e 	bge	r18,r16,458c8 <___vfprintf_internal_r+0x1c10>
   45660:	18c00404 	addi	r3,r3,16
   45664:	10800044 	addi	r2,r2,1
   45668:	45000015 	stw	r20,0(r8)
   4566c:	44800115 	stw	r18,4(r8)
   45670:	d8c12015 	stw	r3,1152(sp)
   45674:	d8811f15 	stw	r2,1148(sp)
   45678:	a8bff60e 	bge	r21,r2,45654 <__alt_data_end+0xfffcacd4>
   4567c:	b009883a 	mov	r4,r22
   45680:	b80b883a 	mov	r5,r23
   45684:	d9811e04 	addi	r6,sp,1144
   45688:	004a3040 	call	4a304 <__sprint_r>
   4568c:	103aa11e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   45690:	d8c12017 	ldw	r3,1152(sp)
   45694:	d8811f17 	ldw	r2,1148(sp)
   45698:	da000404 	addi	r8,sp,16
   4569c:	003fee06 	br	45658 <__alt_data_end+0xfffcacd8>
   456a0:	008011c4 	movi	r2,71
   456a4:	1400b316 	blt	r2,r16,45974 <___vfprintf_internal_r+0x1cbc>
   456a8:	03000174 	movhi	r12,5
   456ac:	63093004 	addi	r12,r12,9408
   456b0:	db013115 	stw	r12,1220(sp)
   456b4:	00c000c4 	movi	r3,3
   456b8:	00bfdfc4 	movi	r2,-129
   456bc:	d8c12b15 	stw	r3,1196(sp)
   456c0:	88a2703a 	and	r17,r17,r2
   456c4:	dd412783 	ldbu	r21,1182(sp)
   456c8:	dcc12d15 	stw	r19,1204(sp)
   456cc:	1825883a 	mov	r18,r3
   456d0:	d8013215 	stw	zero,1224(sp)
   456d4:	d8013415 	stw	zero,1232(sp)
   456d8:	003b0b06 	br	44308 <__alt_data_end+0xfffc9988>
   456dc:	4825883a 	mov	r18,r9
   456e0:	003cba06 	br	449cc <__alt_data_end+0xfffca04c>
   456e4:	db012d17 	ldw	r12,1204(sp)
   456e8:	14c00017 	ldw	r19,0(r2)
   456ec:	0039883a 	mov	fp,zero
   456f0:	63000104 	addi	r12,r12,4
   456f4:	db012d15 	stw	r12,1204(sp)
   456f8:	003c0d06 	br	44730 <__alt_data_end+0xfffc9db0>
   456fc:	00800174 	movhi	r2,5
   45700:	10892e04 	addi	r2,r2,9400
   45704:	d8813115 	stw	r2,1220(sp)
   45708:	003ac406 	br	4421c <__alt_data_end+0xfffc989c>
   4570c:	b009883a 	mov	r4,r22
   45710:	b80b883a 	mov	r5,r23
   45714:	d9811e04 	addi	r6,sp,1144
   45718:	004a3040 	call	4a304 <__sprint_r>
   4571c:	103a7d1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   45720:	dc012617 	ldw	r16,1176(sp)
   45724:	d8c12017 	ldw	r3,1152(sp)
   45728:	da000404 	addi	r8,sp,16
   4572c:	003faf06 	br	455ec <__alt_data_end+0xfffcac6c>
   45730:	db012e17 	ldw	r12,1208(sp)
   45734:	1805883a 	mov	r2,r3
   45738:	dac12d15 	stw	r11,1204(sp)
   4573c:	0319c83a 	sub	r12,zero,r12
   45740:	db012e15 	stw	r12,1208(sp)
   45744:	003a7e06 	br	44140 <__alt_data_end+0xfffc97c0>
   45748:	18800044 	addi	r2,r3,1
   4574c:	8c400814 	ori	r17,r17,32
   45750:	1c000047 	ldb	r16,1(r3)
   45754:	0039bf06 	br	43e54 <__alt_data_end+0xfffc94d4>
   45758:	b009883a 	mov	r4,r22
   4575c:	b80b883a 	mov	r5,r23
   45760:	d9811e04 	addi	r6,sp,1144
   45764:	004a3040 	call	4a304 <__sprint_r>
   45768:	103a6a1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   4576c:	d8c12017 	ldw	r3,1152(sp)
   45770:	da000404 	addi	r8,sp,16
   45774:	003d0c06 	br	44ba8 <__alt_data_end+0xfffca228>
   45778:	db012817 	ldw	r12,1184(sp)
   4577c:	d8c13117 	ldw	r3,1220(sp)
   45780:	60e5c83a 	sub	r18,r12,r3
   45784:	003adb06 	br	442f4 <__alt_data_end+0xfffc9974>
   45788:	da013f15 	stw	r8,1276(sp)
   4578c:	004a1700 	call	4a170 <strlen>
   45790:	1025883a 	mov	r18,r2
   45794:	da013f17 	ldw	r8,1276(sp)
   45798:	903c8e0e 	bge	r18,zero,449d4 <__alt_data_end+0xfffca054>
   4579c:	0005883a 	mov	r2,zero
   457a0:	003c8c06 	br	449d4 <__alt_data_end+0xfffca054>
   457a4:	b009883a 	mov	r4,r22
   457a8:	b80b883a 	mov	r5,r23
   457ac:	d9811e04 	addi	r6,sp,1144
   457b0:	004a3040 	call	4a304 <__sprint_r>
   457b4:	103a571e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   457b8:	d8c12017 	ldw	r3,1152(sp)
   457bc:	d8811f17 	ldw	r2,1148(sp)
   457c0:	da000404 	addi	r8,sp,16
   457c4:	db013317 	ldw	r12,1228(sp)
   457c8:	dac13117 	ldw	r11,1220(sp)
   457cc:	10800044 	addi	r2,r2,1
   457d0:	60c7883a 	add	r3,r12,r3
   457d4:	42c00015 	stw	r11,0(r8)
   457d8:	43000115 	stw	r12,4(r8)
   457dc:	d8c12015 	stw	r3,1152(sp)
   457e0:	d8811f15 	stw	r2,1148(sp)
   457e4:	010001c4 	movi	r4,7
   457e8:	20bb590e 	bge	r4,r2,44550 <__alt_data_end+0xfffc9bd0>
   457ec:	003d7e06 	br	44de8 <__alt_data_end+0xfffca468>
   457f0:	01000174 	movhi	r4,5
   457f4:	21094284 	addi	r4,r4,9482
   457f8:	d9013615 	stw	r4,1240(sp)
   457fc:	003af606 	br	443d8 <__alt_data_end+0xfffc9a58>
   45800:	d8812604 	addi	r2,sp,1176
   45804:	d8800115 	stw	r2,4(sp)
   45808:	d9413717 	ldw	r5,1244(sp)
   4580c:	d8812504 	addi	r2,sp,1172
   45810:	d8800215 	stw	r2,8(sp)
   45814:	d8812104 	addi	r2,sp,1156
   45818:	da400015 	stw	r9,0(sp)
   4581c:	d8800315 	stw	r2,12(sp)
   45820:	b009883a 	mov	r4,r22
   45824:	900d883a 	mov	r6,r18
   45828:	01c000c4 	movi	r7,3
   4582c:	da013f15 	stw	r8,1276(sp)
   45830:	da413e15 	stw	r9,1272(sp)
   45834:	00460080 	call	46008 <_dtoa_r>
   45838:	da413e17 	ldw	r9,1272(sp)
   4583c:	da013f17 	ldw	r8,1276(sp)
   45840:	d8813115 	stw	r2,1220(sp)
   45844:	4839883a 	mov	fp,r9
   45848:	dac13117 	ldw	r11,1220(sp)
   4584c:	00801184 	movi	r2,70
   45850:	5f15883a 	add	r10,r11,fp
   45854:	a8bef01e 	bne	r21,r2,45418 <__alt_data_end+0xfffcaa98>
   45858:	59000007 	ldb	r4,0(r11)
   4585c:	00800c04 	movi	r2,48
   45860:	2080e026 	beq	r4,r2,45be4 <___vfprintf_internal_r+0x1f2c>
   45864:	d8c12617 	ldw	r3,1176(sp)
   45868:	50d5883a 	add	r10,r10,r3
   4586c:	003eea06 	br	45418 <__alt_data_end+0xfffcaa98>
   45870:	0025883a 	mov	r18,zero
   45874:	003db306 	br	44f44 <__alt_data_end+0xfffca5c4>
   45878:	b009883a 	mov	r4,r22
   4587c:	b80b883a 	mov	r5,r23
   45880:	d9811e04 	addi	r6,sp,1144
   45884:	004a3040 	call	4a304 <__sprint_r>
   45888:	103a221e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   4588c:	d8c12017 	ldw	r3,1152(sp)
   45890:	da000404 	addi	r8,sp,16
   45894:	003daa06 	br	44f40 <__alt_data_end+0xfffca5c0>
   45898:	b009883a 	mov	r4,r22
   4589c:	b80b883a 	mov	r5,r23
   458a0:	d9811e04 	addi	r6,sp,1144
   458a4:	004a3040 	call	4a304 <__sprint_r>
   458a8:	103a1a1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   458ac:	d8812617 	ldw	r2,1176(sp)
   458b0:	d8c12017 	ldw	r3,1152(sp)
   458b4:	da000404 	addi	r8,sp,16
   458b8:	003e2c06 	br	4516c <__alt_data_end+0xfffca7ec>
   458bc:	03000174 	movhi	r12,5
   458c0:	63093e84 	addi	r12,r12,9466
   458c4:	db012c15 	stw	r12,1200(sp)
   458c8:	dac12c17 	ldw	r11,1200(sp)
   458cc:	1c07883a 	add	r3,r3,r16
   458d0:	10800044 	addi	r2,r2,1
   458d4:	42c00015 	stw	r11,0(r8)
   458d8:	44000115 	stw	r16,4(r8)
   458dc:	d8c12015 	stw	r3,1152(sp)
   458e0:	d8811f15 	stw	r2,1148(sp)
   458e4:	010001c4 	movi	r4,7
   458e8:	20bfae16 	blt	r4,r2,457a4 <__alt_data_end+0xfffcae24>
   458ec:	42000204 	addi	r8,r8,8
   458f0:	003fb406 	br	457c4 <__alt_data_end+0xfffcae44>
   458f4:	03000174 	movhi	r12,5
   458f8:	63094284 	addi	r12,r12,9482
   458fc:	db013615 	stw	r12,1240(sp)
   45900:	003b3806 	br	445e4 <__alt_data_end+0xfffc9c64>
   45904:	b009883a 	mov	r4,r22
   45908:	b80b883a 	mov	r5,r23
   4590c:	d9811e04 	addi	r6,sp,1144
   45910:	004a3040 	call	4a304 <__sprint_r>
   45914:	1039ff1e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   45918:	d8812617 	ldw	r2,1176(sp)
   4591c:	db013317 	ldw	r12,1228(sp)
   45920:	d8c12017 	ldw	r3,1152(sp)
   45924:	da000404 	addi	r8,sp,16
   45928:	6085c83a 	sub	r2,r12,r2
   4592c:	003e2006 	br	451b0 <__alt_data_end+0xfffca830>
   45930:	0021883a 	mov	r16,zero
   45934:	003e1f06 	br	451b4 <__alt_data_end+0xfffca834>
   45938:	00800184 	movi	r2,6
   4593c:	1240012e 	bgeu	r2,r9,45944 <___vfprintf_internal_r+0x1c8c>
   45940:	1013883a 	mov	r9,r2
   45944:	4825883a 	mov	r18,r9
   45948:	4805883a 	mov	r2,r9
   4594c:	48009e16 	blt	r9,zero,45bc8 <___vfprintf_internal_r+0x1f10>
   45950:	d8812b15 	stw	r2,1196(sp)
   45954:	00800174 	movhi	r2,5
   45958:	10893c04 	addi	r2,r2,9456
   4595c:	d8813115 	stw	r2,1220(sp)
   45960:	dcc12d15 	stw	r19,1204(sp)
   45964:	d8013215 	stw	zero,1224(sp)
   45968:	d8013415 	stw	zero,1232(sp)
   4596c:	0005883a 	mov	r2,zero
   45970:	003a6c06 	br	44324 <__alt_data_end+0xfffc99a4>
   45974:	00800174 	movhi	r2,5
   45978:	10893104 	addi	r2,r2,9412
   4597c:	d8813115 	stw	r2,1220(sp)
   45980:	003f4c06 	br	456b4 <__alt_data_end+0xfffcad34>
   45984:	00c00b44 	movi	r3,45
   45988:	d8812b15 	stw	r2,1196(sp)
   4598c:	dc412d17 	ldw	r17,1204(sp)
   45990:	d8c12785 	stb	r3,1182(sp)
   45994:	dcc12d15 	stw	r19,1204(sp)
   45998:	d8013215 	stw	zero,1224(sp)
   4599c:	00800b44 	movi	r2,45
   459a0:	003a5d06 	br	44318 <__alt_data_end+0xfffc9998>
   459a4:	d8c12617 	ldw	r3,1176(sp)
   459a8:	00bfff44 	movi	r2,-3
   459ac:	18800d16 	blt	r3,r2,459e4 <___vfprintf_internal_r+0x1d2c>
   459b0:	48c00c16 	blt	r9,r3,459e4 <___vfprintf_internal_r+0x1d2c>
   459b4:	d8c13415 	stw	r3,1232(sp)
   459b8:	040019c4 	movi	r16,103
   459bc:	003eb506 	br	45494 <__alt_data_end+0xfffcab14>
   459c0:	05400b44 	movi	r21,45
   459c4:	dd412785 	stb	r21,1182(sp)
   459c8:	003a0f06 	br	44208 <__alt_data_end+0xfffc9888>
   459cc:	01000174 	movhi	r4,5
   459d0:	21093e84 	addi	r4,r4,9466
   459d4:	d9012c15 	stw	r4,1200(sp)
   459d8:	003cb106 	br	44ca0 <__alt_data_end+0xfffca320>
   459dc:	5005883a 	mov	r2,r10
   459e0:	003ea106 	br	45468 <__alt_data_end+0xfffcaae8>
   459e4:	843fff84 	addi	r16,r16,-2
   459e8:	1f3fffc4 	addi	fp,r3,-1
   459ec:	df012615 	stw	fp,1176(sp)
   459f0:	dc0122c5 	stb	r16,1163(sp)
   459f4:	e0009516 	blt	fp,zero,45c4c <___vfprintf_internal_r+0x1f94>
   459f8:	00800ac4 	movi	r2,43
   459fc:	d8812305 	stb	r2,1164(sp)
   45a00:	00800244 	movi	r2,9
   45a04:	1700690e 	bge	r2,fp,45bac <___vfprintf_internal_r+0x1ef4>
   45a08:	dd4122c4 	addi	r21,sp,1163
   45a0c:	dc012c15 	stw	r16,1200(sp)
   45a10:	8825883a 	mov	r18,r17
   45a14:	a821883a 	mov	r16,r21
   45a18:	4023883a 	mov	r17,r8
   45a1c:	e009883a 	mov	r4,fp
   45a20:	01400284 	movi	r5,10
   45a24:	004d7840 	call	4d784 <__modsi3>
   45a28:	10800c04 	addi	r2,r2,48
   45a2c:	843fffc4 	addi	r16,r16,-1
   45a30:	e009883a 	mov	r4,fp
   45a34:	01400284 	movi	r5,10
   45a38:	80800005 	stb	r2,0(r16)
   45a3c:	004d7300 	call	4d730 <__divsi3>
   45a40:	1039883a 	mov	fp,r2
   45a44:	00800244 	movi	r2,9
   45a48:	173ff416 	blt	r2,fp,45a1c <__alt_data_end+0xfffcb09c>
   45a4c:	8811883a 	mov	r8,r17
   45a50:	e0800c04 	addi	r2,fp,48
   45a54:	9023883a 	mov	r17,r18
   45a58:	8025883a 	mov	r18,r16
   45a5c:	913fffc4 	addi	r4,r18,-1
   45a60:	90bfffc5 	stb	r2,-1(r18)
   45a64:	dc012c17 	ldw	r16,1200(sp)
   45a68:	25408e2e 	bgeu	r4,r21,45ca4 <___vfprintf_internal_r+0x1fec>
   45a6c:	d9412384 	addi	r5,sp,1166
   45a70:	2c8bc83a 	sub	r5,r5,r18
   45a74:	d8c12344 	addi	r3,sp,1165
   45a78:	a94b883a 	add	r5,r21,r5
   45a7c:	00000106 	br	45a84 <___vfprintf_internal_r+0x1dcc>
   45a80:	20800003 	ldbu	r2,0(r4)
   45a84:	18800005 	stb	r2,0(r3)
   45a88:	18c00044 	addi	r3,r3,1
   45a8c:	21000044 	addi	r4,r4,1
   45a90:	197ffb1e 	bne	r3,r5,45a80 <__alt_data_end+0xfffcb100>
   45a94:	d8812304 	addi	r2,sp,1164
   45a98:	1485c83a 	sub	r2,r2,r18
   45a9c:	d8c12344 	addi	r3,sp,1165
   45aa0:	1885883a 	add	r2,r3,r2
   45aa4:	dac13317 	ldw	r11,1228(sp)
   45aa8:	156bc83a 	sub	r21,r2,r21
   45aac:	dd413a15 	stw	r21,1256(sp)
   45ab0:	00800044 	movi	r2,1
   45ab4:	5d65883a 	add	r18,r11,r21
   45ab8:	12c0770e 	bge	r2,r11,45c98 <___vfprintf_internal_r+0x1fe0>
   45abc:	94800044 	addi	r18,r18,1
   45ac0:	9005883a 	mov	r2,r18
   45ac4:	90007216 	blt	r18,zero,45c90 <___vfprintf_internal_r+0x1fd8>
   45ac8:	d8013415 	stw	zero,1232(sp)
   45acc:	003e7906 	br	454b4 <__alt_data_end+0xfffcab34>
   45ad0:	da412b15 	stw	r9,1196(sp)
   45ad4:	dd412783 	ldbu	r21,1182(sp)
   45ad8:	4825883a 	mov	r18,r9
   45adc:	dcc12d15 	stw	r19,1204(sp)
   45ae0:	d8013215 	stw	zero,1224(sp)
   45ae4:	d8013415 	stw	zero,1232(sp)
   45ae8:	003a0706 	br	44308 <__alt_data_end+0xfffc9988>
   45aec:	b009883a 	mov	r4,r22
   45af0:	b80b883a 	mov	r5,r23
   45af4:	d9811e04 	addi	r6,sp,1144
   45af8:	004a3040 	call	4a304 <__sprint_r>
   45afc:	1039851e 	bne	r2,zero,44114 <__alt_data_end+0xfffc9794>
   45b00:	dc012617 	ldw	r16,1176(sp)
   45b04:	d8c12017 	ldw	r3,1152(sp)
   45b08:	d8811f17 	ldw	r2,1148(sp)
   45b0c:	da000404 	addi	r8,sp,16
   45b10:	003ec706 	br	45630 <__alt_data_end+0xfffcacb0>
   45b14:	483e1a1e 	bne	r9,zero,45380 <__alt_data_end+0xfffcaa00>
   45b18:	9013883a 	mov	r9,r18
   45b1c:	003e1806 	br	45380 <__alt_data_end+0xfffcaa00>
   45b20:	00c00b44 	movi	r3,45
   45b24:	64a0003c 	xorhi	r18,r12,32768
   45b28:	d8c12b05 	stb	r3,1196(sp)
   45b2c:	003e1a06 	br	45398 <__alt_data_end+0xfffcaa18>
   45b30:	4f000044 	addi	fp,r9,1
   45b34:	003e1f06 	br	453b4 <__alt_data_end+0xfffcaa34>
   45b38:	02400184 	movi	r9,6
   45b3c:	003e1006 	br	45380 <__alt_data_end+0xfffcaa00>
   45b40:	d8c13417 	ldw	r3,1232(sp)
   45b44:	00c04b0e 	bge	zero,r3,45c74 <___vfprintf_internal_r+0x1fbc>
   45b48:	04800044 	movi	r18,1
   45b4c:	dac13317 	ldw	r11,1228(sp)
   45b50:	92e5883a 	add	r18,r18,r11
   45b54:	9005883a 	mov	r2,r18
   45b58:	903e560e 	bge	r18,zero,454b4 <__alt_data_end+0xfffcab34>
   45b5c:	0005883a 	mov	r2,zero
   45b60:	003e5406 	br	454b4 <__alt_data_end+0xfffcab34>
   45b64:	d8c12617 	ldw	r3,1176(sp)
   45b68:	d8c13415 	stw	r3,1232(sp)
   45b6c:	00c03b0e 	bge	zero,r3,45c5c <___vfprintf_internal_r+0x1fa4>
   45b70:	4800081e 	bne	r9,zero,45b94 <___vfprintf_internal_r+0x1edc>
   45b74:	8c40004c 	andi	r17,r17,1
   45b78:	8800061e 	bne	r17,zero,45b94 <___vfprintf_internal_r+0x1edc>
   45b7c:	1805883a 	mov	r2,r3
   45b80:	183e4b0e 	bge	r3,zero,454b0 <__alt_data_end+0xfffcab30>
   45b84:	0005883a 	mov	r2,zero
   45b88:	003e4906 	br	454b0 <__alt_data_end+0xfffcab30>
   45b8c:	d8812117 	ldw	r2,1156(sp)
   45b90:	003e3506 	br	45468 <__alt_data_end+0xfffcaae8>
   45b94:	dac13417 	ldw	r11,1232(sp)
   45b98:	4a400044 	addi	r9,r9,1
   45b9c:	5a65883a 	add	r18,r11,r9
   45ba0:	9005883a 	mov	r2,r18
   45ba4:	903e430e 	bge	r18,zero,454b4 <__alt_data_end+0xfffcab34>
   45ba8:	003fec06 	br	45b5c <__alt_data_end+0xfffcb1dc>
   45bac:	00800c04 	movi	r2,48
   45bb0:	e0c00c04 	addi	r3,fp,48
   45bb4:	d8812345 	stb	r2,1165(sp)
   45bb8:	d8c12385 	stb	r3,1166(sp)
   45bbc:	d88123c4 	addi	r2,sp,1167
   45bc0:	dd4122c4 	addi	r21,sp,1163
   45bc4:	003fb706 	br	45aa4 <__alt_data_end+0xfffcb124>
   45bc8:	0005883a 	mov	r2,zero
   45bcc:	003f6006 	br	45950 <__alt_data_end+0xfffcafd0>
   45bd0:	db013417 	ldw	r12,1232(sp)
   45bd4:	64800044 	addi	r18,r12,1
   45bd8:	9005883a 	mov	r2,r18
   45bdc:	903e350e 	bge	r18,zero,454b4 <__alt_data_end+0xfffcab34>
   45be0:	003fde06 	br	45b5c <__alt_data_end+0xfffcb1dc>
   45be4:	d9013717 	ldw	r4,1244(sp)
   45be8:	900b883a 	mov	r5,r18
   45bec:	000d883a 	mov	r6,zero
   45bf0:	000f883a 	mov	r7,zero
   45bf4:	da013f15 	stw	r8,1276(sp)
   45bf8:	da413e15 	stw	r9,1272(sp)
   45bfc:	da813d15 	stw	r10,1268(sp)
   45c00:	004e9580 	call	4e958 <__eqdf2>
   45c04:	da013f17 	ldw	r8,1276(sp)
   45c08:	da413e17 	ldw	r9,1272(sp)
   45c0c:	da813d17 	ldw	r10,1268(sp)
   45c10:	103f1426 	beq	r2,zero,45864 <__alt_data_end+0xfffcaee4>
   45c14:	00800044 	movi	r2,1
   45c18:	1707c83a 	sub	r3,r2,fp
   45c1c:	d8c12615 	stw	r3,1176(sp)
   45c20:	003f1106 	br	45868 <__alt_data_end+0xfffcaee8>
   45c24:	dac12d17 	ldw	r11,1204(sp)
   45c28:	5a400017 	ldw	r9,0(r11)
   45c2c:	5ac00104 	addi	r11,r11,4
   45c30:	dac12d15 	stw	r11,1204(sp)
   45c34:	483ec60e 	bge	r9,zero,45750 <__alt_data_end+0xfffcadd0>
   45c38:	027fffc4 	movi	r9,-1
   45c3c:	1c000047 	ldb	r16,1(r3)
   45c40:	00388406 	br	43e54 <__alt_data_end+0xfffc94d4>
   45c44:	043fffc4 	movi	r16,-1
   45c48:	00391006 	br	4408c <__alt_data_end+0xfffc970c>
   45c4c:	00800b44 	movi	r2,45
   45c50:	0739c83a 	sub	fp,zero,fp
   45c54:	d8812305 	stb	r2,1164(sp)
   45c58:	003f6906 	br	45a00 <__alt_data_end+0xfffcb080>
   45c5c:	4800081e 	bne	r9,zero,45c80 <___vfprintf_internal_r+0x1fc8>
   45c60:	8c40004c 	andi	r17,r17,1
   45c64:	8800061e 	bne	r17,zero,45c80 <___vfprintf_internal_r+0x1fc8>
   45c68:	00800044 	movi	r2,1
   45c6c:	1025883a 	mov	r18,r2
   45c70:	003e1006 	br	454b4 <__alt_data_end+0xfffcab34>
   45c74:	04800084 	movi	r18,2
   45c78:	90e5c83a 	sub	r18,r18,r3
   45c7c:	003fb306 	br	45b4c <__alt_data_end+0xfffcb1cc>
   45c80:	4c800084 	addi	r18,r9,2
   45c84:	9005883a 	mov	r2,r18
   45c88:	903e0a0e 	bge	r18,zero,454b4 <__alt_data_end+0xfffcab34>
   45c8c:	003fb306 	br	45b5c <__alt_data_end+0xfffcb1dc>
   45c90:	0005883a 	mov	r2,zero
   45c94:	003f8c06 	br	45ac8 <__alt_data_end+0xfffcb148>
   45c98:	88a2703a 	and	r17,r17,r2
   45c9c:	883f8826 	beq	r17,zero,45ac0 <__alt_data_end+0xfffcb140>
   45ca0:	003f8606 	br	45abc <__alt_data_end+0xfffcb13c>
   45ca4:	d8812344 	addi	r2,sp,1165
   45ca8:	003f7e06 	br	45aa4 <__alt_data_end+0xfffcb124>
   45cac:	d8c12617 	ldw	r3,1176(sp)
   45cb0:	003f4d06 	br	459e8 <__alt_data_end+0xfffcb068>

00045cb4 <__vfprintf_internal>:
   45cb4:	2007883a 	mov	r3,r4
   45cb8:	01000174 	movhi	r4,5
   45cbc:	21109a04 	addi	r4,r4,17000
   45cc0:	21000017 	ldw	r4,0(r4)
   45cc4:	2805883a 	mov	r2,r5
   45cc8:	300f883a 	mov	r7,r6
   45ccc:	180b883a 	mov	r5,r3
   45cd0:	100d883a 	mov	r6,r2
   45cd4:	0043cb81 	jmpi	43cb8 <___vfprintf_internal_r>

00045cd8 <__swsetup_r>:
   45cd8:	00800174 	movhi	r2,5
   45cdc:	defffd04 	addi	sp,sp,-12
   45ce0:	10909a04 	addi	r2,r2,17000
   45ce4:	dc400115 	stw	r17,4(sp)
   45ce8:	2023883a 	mov	r17,r4
   45cec:	11000017 	ldw	r4,0(r2)
   45cf0:	dc000015 	stw	r16,0(sp)
   45cf4:	dfc00215 	stw	ra,8(sp)
   45cf8:	2821883a 	mov	r16,r5
   45cfc:	20000226 	beq	r4,zero,45d08 <__swsetup_r+0x30>
   45d00:	20c00e17 	ldw	r3,56(r4)
   45d04:	18002e26 	beq	r3,zero,45dc0 <__swsetup_r+0xe8>
   45d08:	8080030b 	ldhu	r2,12(r16)
   45d0c:	10c0020c 	andi	r3,r2,8
   45d10:	100d883a 	mov	r6,r2
   45d14:	18000f26 	beq	r3,zero,45d54 <__swsetup_r+0x7c>
   45d18:	80c00417 	ldw	r3,16(r16)
   45d1c:	18001526 	beq	r3,zero,45d74 <__swsetup_r+0x9c>
   45d20:	1100004c 	andi	r4,r2,1
   45d24:	20001c1e 	bne	r4,zero,45d98 <__swsetup_r+0xc0>
   45d28:	1080008c 	andi	r2,r2,2
   45d2c:	1000261e 	bne	r2,zero,45dc8 <__swsetup_r+0xf0>
   45d30:	80800517 	ldw	r2,20(r16)
   45d34:	80800215 	stw	r2,8(r16)
   45d38:	18001c26 	beq	r3,zero,45dac <__swsetup_r+0xd4>
   45d3c:	0005883a 	mov	r2,zero
   45d40:	dfc00217 	ldw	ra,8(sp)
   45d44:	dc400117 	ldw	r17,4(sp)
   45d48:	dc000017 	ldw	r16,0(sp)
   45d4c:	dec00304 	addi	sp,sp,12
   45d50:	f800283a 	ret
   45d54:	3080040c 	andi	r2,r6,16
   45d58:	10001726 	beq	r2,zero,45db8 <__swsetup_r+0xe0>
   45d5c:	3080010c 	andi	r2,r6,4
   45d60:	10001b1e 	bne	r2,zero,45dd0 <__swsetup_r+0xf8>
   45d64:	80c00417 	ldw	r3,16(r16)
   45d68:	30800214 	ori	r2,r6,8
   45d6c:	8080030d 	sth	r2,12(r16)
   45d70:	183feb1e 	bne	r3,zero,45d20 <__alt_data_end+0xfffcb3a0>
   45d74:	1140a00c 	andi	r5,r2,640
   45d78:	01008004 	movi	r4,512
   45d7c:	293fe826 	beq	r5,r4,45d20 <__alt_data_end+0xfffcb3a0>
   45d80:	8809883a 	mov	r4,r17
   45d84:	800b883a 	mov	r5,r16
   45d88:	004838c0 	call	4838c <__smakebuf_r>
   45d8c:	8080030b 	ldhu	r2,12(r16)
   45d90:	80c00417 	ldw	r3,16(r16)
   45d94:	003fe206 	br	45d20 <__alt_data_end+0xfffcb3a0>
   45d98:	80800517 	ldw	r2,20(r16)
   45d9c:	80000215 	stw	zero,8(r16)
   45da0:	0085c83a 	sub	r2,zero,r2
   45da4:	80800615 	stw	r2,24(r16)
   45da8:	183fe41e 	bne	r3,zero,45d3c <__alt_data_end+0xfffcb3bc>
   45dac:	8080030b 	ldhu	r2,12(r16)
   45db0:	1080200c 	andi	r2,r2,128
   45db4:	103fe226 	beq	r2,zero,45d40 <__alt_data_end+0xfffcb3c0>
   45db8:	00bfffc4 	movi	r2,-1
   45dbc:	003fe006 	br	45d40 <__alt_data_end+0xfffcb3c0>
   45dc0:	0047cd80 	call	47cd8 <__sinit>
   45dc4:	003fd006 	br	45d08 <__alt_data_end+0xfffcb388>
   45dc8:	0005883a 	mov	r2,zero
   45dcc:	003fd906 	br	45d34 <__alt_data_end+0xfffcb3b4>
   45dd0:	81400c17 	ldw	r5,48(r16)
   45dd4:	28000626 	beq	r5,zero,45df0 <__swsetup_r+0x118>
   45dd8:	80801004 	addi	r2,r16,64
   45ddc:	28800326 	beq	r5,r2,45dec <__swsetup_r+0x114>
   45de0:	8809883a 	mov	r4,r17
   45de4:	0047e4c0 	call	47e4c <_free_r>
   45de8:	8180030b 	ldhu	r6,12(r16)
   45dec:	80000c15 	stw	zero,48(r16)
   45df0:	80c00417 	ldw	r3,16(r16)
   45df4:	00bff6c4 	movi	r2,-37
   45df8:	118c703a 	and	r6,r2,r6
   45dfc:	80000115 	stw	zero,4(r16)
   45e00:	80c00015 	stw	r3,0(r16)
   45e04:	003fd806 	br	45d68 <__alt_data_end+0xfffcb3e8>

00045e08 <quorem>:
   45e08:	defff704 	addi	sp,sp,-36
   45e0c:	dc800215 	stw	r18,8(sp)
   45e10:	20800417 	ldw	r2,16(r4)
   45e14:	2c800417 	ldw	r18,16(r5)
   45e18:	dfc00815 	stw	ra,32(sp)
   45e1c:	ddc00715 	stw	r23,28(sp)
   45e20:	dd800615 	stw	r22,24(sp)
   45e24:	dd400515 	stw	r21,20(sp)
   45e28:	dd000415 	stw	r20,16(sp)
   45e2c:	dcc00315 	stw	r19,12(sp)
   45e30:	dc400115 	stw	r17,4(sp)
   45e34:	dc000015 	stw	r16,0(sp)
   45e38:	14807116 	blt	r2,r18,46000 <quorem+0x1f8>
   45e3c:	94bfffc4 	addi	r18,r18,-1
   45e40:	94ad883a 	add	r22,r18,r18
   45e44:	b5ad883a 	add	r22,r22,r22
   45e48:	2c400504 	addi	r17,r5,20
   45e4c:	8da9883a 	add	r20,r17,r22
   45e50:	25400504 	addi	r21,r4,20
   45e54:	282f883a 	mov	r23,r5
   45e58:	adad883a 	add	r22,r21,r22
   45e5c:	a1400017 	ldw	r5,0(r20)
   45e60:	2021883a 	mov	r16,r4
   45e64:	b1000017 	ldw	r4,0(r22)
   45e68:	29400044 	addi	r5,r5,1
   45e6c:	004d7e00 	call	4d7e0 <__udivsi3>
   45e70:	1027883a 	mov	r19,r2
   45e74:	10002c26 	beq	r2,zero,45f28 <quorem+0x120>
   45e78:	a813883a 	mov	r9,r21
   45e7c:	8811883a 	mov	r8,r17
   45e80:	0009883a 	mov	r4,zero
   45e84:	000d883a 	mov	r6,zero
   45e88:	41c00017 	ldw	r7,0(r8)
   45e8c:	49400017 	ldw	r5,0(r9)
   45e90:	42000104 	addi	r8,r8,4
   45e94:	38bfffcc 	andi	r2,r7,65535
   45e98:	14c5383a 	mul	r2,r2,r19
   45e9c:	380ed43a 	srli	r7,r7,16
   45ea0:	28ffffcc 	andi	r3,r5,65535
   45ea4:	2085883a 	add	r2,r4,r2
   45ea8:	1008d43a 	srli	r4,r2,16
   45eac:	3ccf383a 	mul	r7,r7,r19
   45eb0:	198d883a 	add	r6,r3,r6
   45eb4:	10ffffcc 	andi	r3,r2,65535
   45eb8:	30c7c83a 	sub	r3,r6,r3
   45ebc:	280ad43a 	srli	r5,r5,16
   45ec0:	21c9883a 	add	r4,r4,r7
   45ec4:	180dd43a 	srai	r6,r3,16
   45ec8:	20bfffcc 	andi	r2,r4,65535
   45ecc:	288bc83a 	sub	r5,r5,r2
   45ed0:	298b883a 	add	r5,r5,r6
   45ed4:	280e943a 	slli	r7,r5,16
   45ed8:	18ffffcc 	andi	r3,r3,65535
   45edc:	2008d43a 	srli	r4,r4,16
   45ee0:	38ceb03a 	or	r7,r7,r3
   45ee4:	49c00015 	stw	r7,0(r9)
   45ee8:	280dd43a 	srai	r6,r5,16
   45eec:	4a400104 	addi	r9,r9,4
   45ef0:	a23fe52e 	bgeu	r20,r8,45e88 <__alt_data_end+0xfffcb508>
   45ef4:	b0800017 	ldw	r2,0(r22)
   45ef8:	10000b1e 	bne	r2,zero,45f28 <quorem+0x120>
   45efc:	b0bfff04 	addi	r2,r22,-4
   45f00:	a880082e 	bgeu	r21,r2,45f24 <quorem+0x11c>
   45f04:	b0ffff17 	ldw	r3,-4(r22)
   45f08:	18000326 	beq	r3,zero,45f18 <quorem+0x110>
   45f0c:	00000506 	br	45f24 <quorem+0x11c>
   45f10:	10c00017 	ldw	r3,0(r2)
   45f14:	1800031e 	bne	r3,zero,45f24 <quorem+0x11c>
   45f18:	10bfff04 	addi	r2,r2,-4
   45f1c:	94bfffc4 	addi	r18,r18,-1
   45f20:	a8bffb36 	bltu	r21,r2,45f10 <__alt_data_end+0xfffcb590>
   45f24:	84800415 	stw	r18,16(r16)
   45f28:	8009883a 	mov	r4,r16
   45f2c:	b80b883a 	mov	r5,r23
   45f30:	00496940 	call	49694 <__mcmp>
   45f34:	10002616 	blt	r2,zero,45fd0 <quorem+0x1c8>
   45f38:	9cc00044 	addi	r19,r19,1
   45f3c:	a80d883a 	mov	r6,r21
   45f40:	000b883a 	mov	r5,zero
   45f44:	31000017 	ldw	r4,0(r6)
   45f48:	88800017 	ldw	r2,0(r17)
   45f4c:	31800104 	addi	r6,r6,4
   45f50:	20ffffcc 	andi	r3,r4,65535
   45f54:	194b883a 	add	r5,r3,r5
   45f58:	10ffffcc 	andi	r3,r2,65535
   45f5c:	28c7c83a 	sub	r3,r5,r3
   45f60:	1004d43a 	srli	r2,r2,16
   45f64:	2008d43a 	srli	r4,r4,16
   45f68:	180bd43a 	srai	r5,r3,16
   45f6c:	18ffffcc 	andi	r3,r3,65535
   45f70:	2089c83a 	sub	r4,r4,r2
   45f74:	2149883a 	add	r4,r4,r5
   45f78:	2004943a 	slli	r2,r4,16
   45f7c:	8c400104 	addi	r17,r17,4
   45f80:	200bd43a 	srai	r5,r4,16
   45f84:	10c6b03a 	or	r3,r2,r3
   45f88:	30ffff15 	stw	r3,-4(r6)
   45f8c:	a47fed2e 	bgeu	r20,r17,45f44 <__alt_data_end+0xfffcb5c4>
   45f90:	9485883a 	add	r2,r18,r18
   45f94:	1085883a 	add	r2,r2,r2
   45f98:	a887883a 	add	r3,r21,r2
   45f9c:	18800017 	ldw	r2,0(r3)
   45fa0:	10000b1e 	bne	r2,zero,45fd0 <quorem+0x1c8>
   45fa4:	18bfff04 	addi	r2,r3,-4
   45fa8:	a880082e 	bgeu	r21,r2,45fcc <quorem+0x1c4>
   45fac:	18ffff17 	ldw	r3,-4(r3)
   45fb0:	18000326 	beq	r3,zero,45fc0 <quorem+0x1b8>
   45fb4:	00000506 	br	45fcc <quorem+0x1c4>
   45fb8:	10c00017 	ldw	r3,0(r2)
   45fbc:	1800031e 	bne	r3,zero,45fcc <quorem+0x1c4>
   45fc0:	10bfff04 	addi	r2,r2,-4
   45fc4:	94bfffc4 	addi	r18,r18,-1
   45fc8:	a8bffb36 	bltu	r21,r2,45fb8 <__alt_data_end+0xfffcb638>
   45fcc:	84800415 	stw	r18,16(r16)
   45fd0:	9805883a 	mov	r2,r19
   45fd4:	dfc00817 	ldw	ra,32(sp)
   45fd8:	ddc00717 	ldw	r23,28(sp)
   45fdc:	dd800617 	ldw	r22,24(sp)
   45fe0:	dd400517 	ldw	r21,20(sp)
   45fe4:	dd000417 	ldw	r20,16(sp)
   45fe8:	dcc00317 	ldw	r19,12(sp)
   45fec:	dc800217 	ldw	r18,8(sp)
   45ff0:	dc400117 	ldw	r17,4(sp)
   45ff4:	dc000017 	ldw	r16,0(sp)
   45ff8:	dec00904 	addi	sp,sp,36
   45ffc:	f800283a 	ret
   46000:	0005883a 	mov	r2,zero
   46004:	003ff306 	br	45fd4 <__alt_data_end+0xfffcb654>

00046008 <_dtoa_r>:
   46008:	20801017 	ldw	r2,64(r4)
   4600c:	deffde04 	addi	sp,sp,-136
   46010:	dd401d15 	stw	r21,116(sp)
   46014:	dcc01b15 	stw	r19,108(sp)
   46018:	dc801a15 	stw	r18,104(sp)
   4601c:	dc401915 	stw	r17,100(sp)
   46020:	dc001815 	stw	r16,96(sp)
   46024:	dfc02115 	stw	ra,132(sp)
   46028:	df002015 	stw	fp,128(sp)
   4602c:	ddc01f15 	stw	r23,124(sp)
   46030:	dd801e15 	stw	r22,120(sp)
   46034:	dd001c15 	stw	r20,112(sp)
   46038:	d9c00315 	stw	r7,12(sp)
   4603c:	2021883a 	mov	r16,r4
   46040:	302b883a 	mov	r21,r6
   46044:	2825883a 	mov	r18,r5
   46048:	dc402417 	ldw	r17,144(sp)
   4604c:	3027883a 	mov	r19,r6
   46050:	10000826 	beq	r2,zero,46074 <_dtoa_r+0x6c>
   46054:	21801117 	ldw	r6,68(r4)
   46058:	00c00044 	movi	r3,1
   4605c:	100b883a 	mov	r5,r2
   46060:	1986983a 	sll	r3,r3,r6
   46064:	11800115 	stw	r6,4(r2)
   46068:	10c00215 	stw	r3,8(r2)
   4606c:	0048e7c0 	call	48e7c <_Bfree>
   46070:	80001015 	stw	zero,64(r16)
   46074:	a8002d16 	blt	r21,zero,4612c <_dtoa_r+0x124>
   46078:	88000015 	stw	zero,0(r17)
   4607c:	a8dffc2c 	andhi	r3,r21,32752
   46080:	009ffc34 	movhi	r2,32752
   46084:	18801b26 	beq	r3,r2,460f4 <_dtoa_r+0xec>
   46088:	9009883a 	mov	r4,r18
   4608c:	980b883a 	mov	r5,r19
   46090:	000d883a 	mov	r6,zero
   46094:	000f883a 	mov	r7,zero
   46098:	004e9580 	call	4e958 <__eqdf2>
   4609c:	10002a1e 	bne	r2,zero,46148 <_dtoa_r+0x140>
   460a0:	d8c02317 	ldw	r3,140(sp)
   460a4:	d9002517 	ldw	r4,148(sp)
   460a8:	00800044 	movi	r2,1
   460ac:	18800015 	stw	r2,0(r3)
   460b0:	2001a226 	beq	r4,zero,4673c <_dtoa_r+0x734>
   460b4:	00800174 	movhi	r2,5
   460b8:	10893e44 	addi	r2,r2,9465
   460bc:	20800015 	stw	r2,0(r4)
   460c0:	10bfffc4 	addi	r2,r2,-1
   460c4:	dfc02117 	ldw	ra,132(sp)
   460c8:	df002017 	ldw	fp,128(sp)
   460cc:	ddc01f17 	ldw	r23,124(sp)
   460d0:	dd801e17 	ldw	r22,120(sp)
   460d4:	dd401d17 	ldw	r21,116(sp)
   460d8:	dd001c17 	ldw	r20,112(sp)
   460dc:	dcc01b17 	ldw	r19,108(sp)
   460e0:	dc801a17 	ldw	r18,104(sp)
   460e4:	dc401917 	ldw	r17,100(sp)
   460e8:	dc001817 	ldw	r16,96(sp)
   460ec:	dec02204 	addi	sp,sp,136
   460f0:	f800283a 	ret
   460f4:	d8c02317 	ldw	r3,140(sp)
   460f8:	0089c3c4 	movi	r2,9999
   460fc:	18800015 	stw	r2,0(r3)
   46100:	90017c26 	beq	r18,zero,466f4 <_dtoa_r+0x6ec>
   46104:	00800174 	movhi	r2,5
   46108:	10894a04 	addi	r2,r2,9512
   4610c:	d9002517 	ldw	r4,148(sp)
   46110:	203fec26 	beq	r4,zero,460c4 <__alt_data_end+0xfffcb744>
   46114:	10c000c7 	ldb	r3,3(r2)
   46118:	18017d1e 	bne	r3,zero,46710 <_dtoa_r+0x708>
   4611c:	10c000c4 	addi	r3,r2,3
   46120:	d9802517 	ldw	r6,148(sp)
   46124:	30c00015 	stw	r3,0(r6)
   46128:	003fe606 	br	460c4 <__alt_data_end+0xfffcb744>
   4612c:	04e00034 	movhi	r19,32768
   46130:	9cffffc4 	addi	r19,r19,-1
   46134:	00800044 	movi	r2,1
   46138:	ace6703a 	and	r19,r21,r19
   4613c:	88800015 	stw	r2,0(r17)
   46140:	982b883a 	mov	r21,r19
   46144:	003fcd06 	br	4607c <__alt_data_end+0xfffcb6fc>
   46148:	d8800204 	addi	r2,sp,8
   4614c:	a822d53a 	srli	r17,r21,20
   46150:	d8800015 	stw	r2,0(sp)
   46154:	8009883a 	mov	r4,r16
   46158:	900b883a 	mov	r5,r18
   4615c:	980d883a 	mov	r6,r19
   46160:	d9c00104 	addi	r7,sp,4
   46164:	0049a080 	call	49a08 <__d2b>
   46168:	1039883a 	mov	fp,r2
   4616c:	88016a1e 	bne	r17,zero,46718 <_dtoa_r+0x710>
   46170:	dd000217 	ldw	r20,8(sp)
   46174:	dc400117 	ldw	r17,4(sp)
   46178:	00befbc4 	movi	r2,-1041
   4617c:	a463883a 	add	r17,r20,r17
   46180:	8882ea16 	blt	r17,r2,46d2c <_dtoa_r+0xd24>
   46184:	00bf0384 	movi	r2,-1010
   46188:	1445c83a 	sub	r2,r2,r17
   4618c:	89010484 	addi	r4,r17,1042
   46190:	a8aa983a 	sll	r21,r21,r2
   46194:	9108d83a 	srl	r4,r18,r4
   46198:	a908b03a 	or	r4,r21,r4
   4619c:	004fce80 	call	4fce8 <__floatunsidf>
   461a0:	017f8434 	movhi	r5,65040
   461a4:	01800044 	movi	r6,1
   461a8:	1009883a 	mov	r4,r2
   461ac:	194b883a 	add	r5,r3,r5
   461b0:	8c7fffc4 	addi	r17,r17,-1
   461b4:	d9800f15 	stw	r6,60(sp)
   461b8:	000d883a 	mov	r6,zero
   461bc:	01cffe34 	movhi	r7,16376
   461c0:	004f2c00 	call	4f2c0 <__subdf3>
   461c4:	0198dbf4 	movhi	r6,25455
   461c8:	01cff4f4 	movhi	r7,16339
   461cc:	1009883a 	mov	r4,r2
   461d0:	180b883a 	mov	r5,r3
   461d4:	3190d844 	addi	r6,r6,17249
   461d8:	39e1e9c4 	addi	r7,r7,-30809
   461dc:	004eb9c0 	call	4eb9c <__muldf3>
   461e0:	01a2d874 	movhi	r6,35681
   461e4:	01cff1f4 	movhi	r7,16327
   461e8:	180b883a 	mov	r5,r3
   461ec:	31b22cc4 	addi	r6,r6,-14157
   461f0:	39e28a04 	addi	r7,r7,-30168
   461f4:	1009883a 	mov	r4,r2
   461f8:	004d7f00 	call	4d7f0 <__adddf3>
   461fc:	8809883a 	mov	r4,r17
   46200:	102d883a 	mov	r22,r2
   46204:	182b883a 	mov	r21,r3
   46208:	004fc180 	call	4fc18 <__floatsidf>
   4620c:	019427f4 	movhi	r6,20639
   46210:	01cff4f4 	movhi	r7,16339
   46214:	1009883a 	mov	r4,r2
   46218:	180b883a 	mov	r5,r3
   4621c:	319e7ec4 	addi	r6,r6,31227
   46220:	39d104c4 	addi	r7,r7,17427
   46224:	004eb9c0 	call	4eb9c <__muldf3>
   46228:	b009883a 	mov	r4,r22
   4622c:	a80b883a 	mov	r5,r21
   46230:	100d883a 	mov	r6,r2
   46234:	180f883a 	mov	r7,r3
   46238:	004d7f00 	call	4d7f0 <__adddf3>
   4623c:	1009883a 	mov	r4,r2
   46240:	180b883a 	mov	r5,r3
   46244:	102d883a 	mov	r22,r2
   46248:	182b883a 	mov	r21,r3
   4624c:	004fb900 	call	4fb90 <__fixdfsi>
   46250:	b009883a 	mov	r4,r22
   46254:	a80b883a 	mov	r5,r21
   46258:	000d883a 	mov	r6,zero
   4625c:	000f883a 	mov	r7,zero
   46260:	d8800515 	stw	r2,20(sp)
   46264:	004eabc0 	call	4eabc <__ledf2>
   46268:	10023116 	blt	r2,zero,46b30 <_dtoa_r+0xb28>
   4626c:	d8c00517 	ldw	r3,20(sp)
   46270:	00800584 	movi	r2,22
   46274:	10c21f36 	bltu	r2,r3,46af4 <_dtoa_r+0xaec>
   46278:	180490fa 	slli	r2,r3,3
   4627c:	00c00174 	movhi	r3,5
   46280:	18c96604 	addi	r3,r3,9624
   46284:	1885883a 	add	r2,r3,r2
   46288:	11000017 	ldw	r4,0(r2)
   4628c:	11400117 	ldw	r5,4(r2)
   46290:	900d883a 	mov	r6,r18
   46294:	980f883a 	mov	r7,r19
   46298:	004e9dc0 	call	4e9dc <__gedf2>
   4629c:	0082a70e 	bge	zero,r2,46d3c <_dtoa_r+0xd34>
   462a0:	d9000517 	ldw	r4,20(sp)
   462a4:	d8000c15 	stw	zero,48(sp)
   462a8:	213fffc4 	addi	r4,r4,-1
   462ac:	d9000515 	stw	r4,20(sp)
   462b0:	a463c83a 	sub	r17,r20,r17
   462b4:	8dbfffc4 	addi	r22,r17,-1
   462b8:	b0021916 	blt	r22,zero,46b20 <_dtoa_r+0xb18>
   462bc:	d8000815 	stw	zero,32(sp)
   462c0:	d8800517 	ldw	r2,20(sp)
   462c4:	10020e16 	blt	r2,zero,46b00 <_dtoa_r+0xaf8>
   462c8:	b0ad883a 	add	r22,r22,r2
   462cc:	d8800a15 	stw	r2,40(sp)
   462d0:	d8000915 	stw	zero,36(sp)
   462d4:	d8c00317 	ldw	r3,12(sp)
   462d8:	00800244 	movi	r2,9
   462dc:	10c11a36 	bltu	r2,r3,46748 <_dtoa_r+0x740>
   462e0:	00800144 	movi	r2,5
   462e4:	10c4fc0e 	bge	r2,r3,476d8 <_dtoa_r+0x16d0>
   462e8:	18ffff04 	addi	r3,r3,-4
   462ec:	d8c00315 	stw	r3,12(sp)
   462f0:	0029883a 	mov	r20,zero
   462f4:	d9800317 	ldw	r6,12(sp)
   462f8:	008000c4 	movi	r2,3
   462fc:	3083bd26 	beq	r6,r2,471f4 <_dtoa_r+0x11ec>
   46300:	1183670e 	bge	r2,r6,470a0 <_dtoa_r+0x1098>
   46304:	d8c00317 	ldw	r3,12(sp)
   46308:	00800104 	movi	r2,4
   4630c:	1882e726 	beq	r3,r2,46eac <_dtoa_r+0xea4>
   46310:	00800144 	movi	r2,5
   46314:	1884f21e 	bne	r3,r2,476e0 <_dtoa_r+0x16d8>
   46318:	00800044 	movi	r2,1
   4631c:	d8800b15 	stw	r2,44(sp)
   46320:	d8c02217 	ldw	r3,136(sp)
   46324:	d9000517 	ldw	r4,20(sp)
   46328:	1907883a 	add	r3,r3,r4
   4632c:	19800044 	addi	r6,r3,1
   46330:	d8c00d15 	stw	r3,52(sp)
   46334:	d9800615 	stw	r6,24(sp)
   46338:	0183c30e 	bge	zero,r6,47248 <_dtoa_r+0x1240>
   4633c:	d9800617 	ldw	r6,24(sp)
   46340:	3023883a 	mov	r17,r6
   46344:	80001115 	stw	zero,68(r16)
   46348:	008005c4 	movi	r2,23
   4634c:	1184f62e 	bgeu	r2,r6,47728 <_dtoa_r+0x1720>
   46350:	00c00044 	movi	r3,1
   46354:	00800104 	movi	r2,4
   46358:	1085883a 	add	r2,r2,r2
   4635c:	11000504 	addi	r4,r2,20
   46360:	180b883a 	mov	r5,r3
   46364:	18c00044 	addi	r3,r3,1
   46368:	313ffb2e 	bgeu	r6,r4,46358 <__alt_data_end+0xfffcb9d8>
   4636c:	81401115 	stw	r5,68(r16)
   46370:	8009883a 	mov	r4,r16
   46374:	0048dd40 	call	48dd4 <_Balloc>
   46378:	d8800715 	stw	r2,28(sp)
   4637c:	80801015 	stw	r2,64(r16)
   46380:	00800384 	movi	r2,14
   46384:	1440fd36 	bltu	r2,r17,4677c <_dtoa_r+0x774>
   46388:	a000fc26 	beq	r20,zero,4677c <_dtoa_r+0x774>
   4638c:	d8800517 	ldw	r2,20(sp)
   46390:	0083b90e 	bge	zero,r2,47278 <_dtoa_r+0x1270>
   46394:	d8c00517 	ldw	r3,20(sp)
   46398:	108003cc 	andi	r2,r2,15
   4639c:	100490fa 	slli	r2,r2,3
   463a0:	182fd13a 	srai	r23,r3,4
   463a4:	00c00174 	movhi	r3,5
   463a8:	18c96604 	addi	r3,r3,9624
   463ac:	1885883a 	add	r2,r3,r2
   463b0:	b8c0040c 	andi	r3,r23,16
   463b4:	12c00017 	ldw	r11,0(r2)
   463b8:	12800117 	ldw	r10,4(r2)
   463bc:	18039726 	beq	r3,zero,4721c <_dtoa_r+0x1214>
   463c0:	00800174 	movhi	r2,5
   463c4:	10895c04 	addi	r2,r2,9584
   463c8:	11800817 	ldw	r6,32(r2)
   463cc:	11c00917 	ldw	r7,36(r2)
   463d0:	9009883a 	mov	r4,r18
   463d4:	980b883a 	mov	r5,r19
   463d8:	da801615 	stw	r10,88(sp)
   463dc:	dac01515 	stw	r11,84(sp)
   463e0:	004e08c0 	call	4e08c <__divdf3>
   463e4:	da801617 	ldw	r10,88(sp)
   463e8:	dac01517 	ldw	r11,84(sp)
   463ec:	bdc003cc 	andi	r23,r23,15
   463f0:	044000c4 	movi	r17,3
   463f4:	d8800e15 	stw	r2,56(sp)
   463f8:	182b883a 	mov	r21,r3
   463fc:	b8001126 	beq	r23,zero,46444 <_dtoa_r+0x43c>
   46400:	05000174 	movhi	r20,5
   46404:	a5095c04 	addi	r20,r20,9584
   46408:	5805883a 	mov	r2,r11
   4640c:	5007883a 	mov	r3,r10
   46410:	b980004c 	andi	r6,r23,1
   46414:	1009883a 	mov	r4,r2
   46418:	b82fd07a 	srai	r23,r23,1
   4641c:	180b883a 	mov	r5,r3
   46420:	30000426 	beq	r6,zero,46434 <_dtoa_r+0x42c>
   46424:	a1800017 	ldw	r6,0(r20)
   46428:	a1c00117 	ldw	r7,4(r20)
   4642c:	8c400044 	addi	r17,r17,1
   46430:	004eb9c0 	call	4eb9c <__muldf3>
   46434:	a5000204 	addi	r20,r20,8
   46438:	b83ff51e 	bne	r23,zero,46410 <__alt_data_end+0xfffcba90>
   4643c:	1017883a 	mov	r11,r2
   46440:	1815883a 	mov	r10,r3
   46444:	d9000e17 	ldw	r4,56(sp)
   46448:	a80b883a 	mov	r5,r21
   4644c:	580d883a 	mov	r6,r11
   46450:	500f883a 	mov	r7,r10
   46454:	004e08c0 	call	4e08c <__divdf3>
   46458:	1029883a 	mov	r20,r2
   4645c:	182b883a 	mov	r21,r3
   46460:	d9800c17 	ldw	r6,48(sp)
   46464:	30000626 	beq	r6,zero,46480 <_dtoa_r+0x478>
   46468:	a009883a 	mov	r4,r20
   4646c:	a80b883a 	mov	r5,r21
   46470:	000d883a 	mov	r6,zero
   46474:	01cffc34 	movhi	r7,16368
   46478:	004eabc0 	call	4eabc <__ledf2>
   4647c:	10043216 	blt	r2,zero,47548 <_dtoa_r+0x1540>
   46480:	8809883a 	mov	r4,r17
   46484:	004fc180 	call	4fc18 <__floatsidf>
   46488:	1009883a 	mov	r4,r2
   4648c:	180b883a 	mov	r5,r3
   46490:	a00d883a 	mov	r6,r20
   46494:	a80f883a 	mov	r7,r21
   46498:	004eb9c0 	call	4eb9c <__muldf3>
   4649c:	000d883a 	mov	r6,zero
   464a0:	1009883a 	mov	r4,r2
   464a4:	180b883a 	mov	r5,r3
   464a8:	01d00734 	movhi	r7,16412
   464ac:	004d7f00 	call	4d7f0 <__adddf3>
   464b0:	1023883a 	mov	r17,r2
   464b4:	d9800617 	ldw	r6,24(sp)
   464b8:	00bf3034 	movhi	r2,64704
   464bc:	1885883a 	add	r2,r3,r2
   464c0:	d8800e15 	stw	r2,56(sp)
   464c4:	30032e26 	beq	r6,zero,47180 <_dtoa_r+0x1178>
   464c8:	d8c00517 	ldw	r3,20(sp)
   464cc:	da800617 	ldw	r10,24(sp)
   464d0:	d8c01215 	stw	r3,72(sp)
   464d4:	d9000b17 	ldw	r4,44(sp)
   464d8:	2003b026 	beq	r4,zero,4739c <_dtoa_r+0x1394>
   464dc:	50bfffc4 	addi	r2,r10,-1
   464e0:	100490fa 	slli	r2,r2,3
   464e4:	00c00174 	movhi	r3,5
   464e8:	18c96604 	addi	r3,r3,9624
   464ec:	1885883a 	add	r2,r3,r2
   464f0:	11800017 	ldw	r6,0(r2)
   464f4:	11c00117 	ldw	r7,4(r2)
   464f8:	d8800717 	ldw	r2,28(sp)
   464fc:	0009883a 	mov	r4,zero
   46500:	014ff834 	movhi	r5,16352
   46504:	da801615 	stw	r10,88(sp)
   46508:	15c00044 	addi	r23,r2,1
   4650c:	004e08c0 	call	4e08c <__divdf3>
   46510:	d9c00e17 	ldw	r7,56(sp)
   46514:	880d883a 	mov	r6,r17
   46518:	1009883a 	mov	r4,r2
   4651c:	180b883a 	mov	r5,r3
   46520:	004f2c00 	call	4f2c0 <__subdf3>
   46524:	a80b883a 	mov	r5,r21
   46528:	a009883a 	mov	r4,r20
   4652c:	d8c01015 	stw	r3,64(sp)
   46530:	d8800e15 	stw	r2,56(sp)
   46534:	004fb900 	call	4fb90 <__fixdfsi>
   46538:	1009883a 	mov	r4,r2
   4653c:	d8801715 	stw	r2,92(sp)
   46540:	004fc180 	call	4fc18 <__floatsidf>
   46544:	a009883a 	mov	r4,r20
   46548:	a80b883a 	mov	r5,r21
   4654c:	100d883a 	mov	r6,r2
   46550:	180f883a 	mov	r7,r3
   46554:	004f2c00 	call	4f2c0 <__subdf3>
   46558:	da001717 	ldw	r8,92(sp)
   4655c:	1829883a 	mov	r20,r3
   46560:	d8c00717 	ldw	r3,28(sp)
   46564:	d9000e17 	ldw	r4,56(sp)
   46568:	d9401017 	ldw	r5,64(sp)
   4656c:	42000c04 	addi	r8,r8,48
   46570:	1023883a 	mov	r17,r2
   46574:	1a000005 	stb	r8,0(r3)
   46578:	880d883a 	mov	r6,r17
   4657c:	a00f883a 	mov	r7,r20
   46580:	402b883a 	mov	r21,r8
   46584:	004e9dc0 	call	4e9dc <__gedf2>
   46588:	00844516 	blt	zero,r2,476a0 <_dtoa_r+0x1698>
   4658c:	0009883a 	mov	r4,zero
   46590:	014ffc34 	movhi	r5,16368
   46594:	880d883a 	mov	r6,r17
   46598:	a00f883a 	mov	r7,r20
   4659c:	004f2c00 	call	4f2c0 <__subdf3>
   465a0:	d9000e17 	ldw	r4,56(sp)
   465a4:	d9401017 	ldw	r5,64(sp)
   465a8:	100d883a 	mov	r6,r2
   465ac:	180f883a 	mov	r7,r3
   465b0:	004e9dc0 	call	4e9dc <__gedf2>
   465b4:	da801617 	ldw	r10,88(sp)
   465b8:	00843616 	blt	zero,r2,47694 <_dtoa_r+0x168c>
   465bc:	00800044 	movi	r2,1
   465c0:	12806e0e 	bge	r2,r10,4677c <_dtoa_r+0x774>
   465c4:	d9000717 	ldw	r4,28(sp)
   465c8:	dd801315 	stw	r22,76(sp)
   465cc:	dc001115 	stw	r16,68(sp)
   465d0:	2295883a 	add	r10,r4,r10
   465d4:	dcc01415 	stw	r19,80(sp)
   465d8:	502d883a 	mov	r22,r10
   465dc:	dcc01017 	ldw	r19,64(sp)
   465e0:	b821883a 	mov	r16,r23
   465e4:	dc801015 	stw	r18,64(sp)
   465e8:	dc800e17 	ldw	r18,56(sp)
   465ec:	00000906 	br	46614 <_dtoa_r+0x60c>
   465f0:	004f2c00 	call	4f2c0 <__subdf3>
   465f4:	1009883a 	mov	r4,r2
   465f8:	180b883a 	mov	r5,r3
   465fc:	900d883a 	mov	r6,r18
   46600:	980f883a 	mov	r7,r19
   46604:	004eabc0 	call	4eabc <__ledf2>
   46608:	10040e16 	blt	r2,zero,47644 <_dtoa_r+0x163c>
   4660c:	b821883a 	mov	r16,r23
   46610:	bd841026 	beq	r23,r22,47654 <_dtoa_r+0x164c>
   46614:	9009883a 	mov	r4,r18
   46618:	980b883a 	mov	r5,r19
   4661c:	000d883a 	mov	r6,zero
   46620:	01d00934 	movhi	r7,16420
   46624:	004eb9c0 	call	4eb9c <__muldf3>
   46628:	000d883a 	mov	r6,zero
   4662c:	01d00934 	movhi	r7,16420
   46630:	8809883a 	mov	r4,r17
   46634:	a00b883a 	mov	r5,r20
   46638:	1025883a 	mov	r18,r2
   4663c:	1827883a 	mov	r19,r3
   46640:	004eb9c0 	call	4eb9c <__muldf3>
   46644:	180b883a 	mov	r5,r3
   46648:	1009883a 	mov	r4,r2
   4664c:	1823883a 	mov	r17,r3
   46650:	1029883a 	mov	r20,r2
   46654:	004fb900 	call	4fb90 <__fixdfsi>
   46658:	1009883a 	mov	r4,r2
   4665c:	102b883a 	mov	r21,r2
   46660:	004fc180 	call	4fc18 <__floatsidf>
   46664:	a009883a 	mov	r4,r20
   46668:	880b883a 	mov	r5,r17
   4666c:	100d883a 	mov	r6,r2
   46670:	180f883a 	mov	r7,r3
   46674:	004f2c00 	call	4f2c0 <__subdf3>
   46678:	ad400c04 	addi	r21,r21,48
   4667c:	1009883a 	mov	r4,r2
   46680:	180b883a 	mov	r5,r3
   46684:	900d883a 	mov	r6,r18
   46688:	980f883a 	mov	r7,r19
   4668c:	85400005 	stb	r21,0(r16)
   46690:	1023883a 	mov	r17,r2
   46694:	1829883a 	mov	r20,r3
   46698:	004eabc0 	call	4eabc <__ledf2>
   4669c:	bdc00044 	addi	r23,r23,1
   466a0:	0009883a 	mov	r4,zero
   466a4:	014ffc34 	movhi	r5,16368
   466a8:	880d883a 	mov	r6,r17
   466ac:	a00f883a 	mov	r7,r20
   466b0:	103fcf0e 	bge	r2,zero,465f0 <__alt_data_end+0xfffcbc70>
   466b4:	d9801217 	ldw	r6,72(sp)
   466b8:	dc001117 	ldw	r16,68(sp)
   466bc:	d9800515 	stw	r6,20(sp)
   466c0:	8009883a 	mov	r4,r16
   466c4:	e00b883a 	mov	r5,fp
   466c8:	0048e7c0 	call	48e7c <_Bfree>
   466cc:	d8c00517 	ldw	r3,20(sp)
   466d0:	d9002317 	ldw	r4,140(sp)
   466d4:	d9802517 	ldw	r6,148(sp)
   466d8:	b8000005 	stb	zero,0(r23)
   466dc:	18800044 	addi	r2,r3,1
   466e0:	20800015 	stw	r2,0(r4)
   466e4:	30027226 	beq	r6,zero,470b0 <_dtoa_r+0x10a8>
   466e8:	35c00015 	stw	r23,0(r6)
   466ec:	d8800717 	ldw	r2,28(sp)
   466f0:	003e7406 	br	460c4 <__alt_data_end+0xfffcb744>
   466f4:	00800434 	movhi	r2,16
   466f8:	10bfffc4 	addi	r2,r2,-1
   466fc:	a8aa703a 	and	r21,r21,r2
   46700:	a83e801e 	bne	r21,zero,46104 <__alt_data_end+0xfffcb784>
   46704:	00800174 	movhi	r2,5
   46708:	10894704 	addi	r2,r2,9500
   4670c:	003e7f06 	br	4610c <__alt_data_end+0xfffcb78c>
   46710:	10c00204 	addi	r3,r2,8
   46714:	003e8206 	br	46120 <__alt_data_end+0xfffcb7a0>
   46718:	01400434 	movhi	r5,16
   4671c:	297fffc4 	addi	r5,r5,-1
   46720:	994a703a 	and	r5,r19,r5
   46724:	9009883a 	mov	r4,r18
   46728:	8c7f0044 	addi	r17,r17,-1023
   4672c:	294ffc34 	orhi	r5,r5,16368
   46730:	dd000217 	ldw	r20,8(sp)
   46734:	d8000f15 	stw	zero,60(sp)
   46738:	003e9f06 	br	461b8 <__alt_data_end+0xfffcb838>
   4673c:	00800174 	movhi	r2,5
   46740:	10893e04 	addi	r2,r2,9464
   46744:	003e5f06 	br	460c4 <__alt_data_end+0xfffcb744>
   46748:	80001115 	stw	zero,68(r16)
   4674c:	8009883a 	mov	r4,r16
   46750:	000b883a 	mov	r5,zero
   46754:	0048dd40 	call	48dd4 <_Balloc>
   46758:	01bfffc4 	movi	r6,-1
   4675c:	d8800715 	stw	r2,28(sp)
   46760:	80801015 	stw	r2,64(r16)
   46764:	00800044 	movi	r2,1
   46768:	d9800615 	stw	r6,24(sp)
   4676c:	d8800b15 	stw	r2,44(sp)
   46770:	d8002215 	stw	zero,136(sp)
   46774:	d9800d15 	stw	r6,52(sp)
   46778:	d8000315 	stw	zero,12(sp)
   4677c:	d8800117 	ldw	r2,4(sp)
   46780:	10008e16 	blt	r2,zero,469bc <_dtoa_r+0x9b4>
   46784:	d9000517 	ldw	r4,20(sp)
   46788:	00c00384 	movi	r3,14
   4678c:	19008b16 	blt	r3,r4,469bc <_dtoa_r+0x9b4>
   46790:	200490fa 	slli	r2,r4,3
   46794:	00c00174 	movhi	r3,5
   46798:	d9802217 	ldw	r6,136(sp)
   4679c:	18c96604 	addi	r3,r3,9624
   467a0:	1885883a 	add	r2,r3,r2
   467a4:	14400017 	ldw	r17,0(r2)
   467a8:	15000117 	ldw	r20,4(r2)
   467ac:	3001c716 	blt	r6,zero,46ecc <_dtoa_r+0xec4>
   467b0:	880d883a 	mov	r6,r17
   467b4:	a00f883a 	mov	r7,r20
   467b8:	9009883a 	mov	r4,r18
   467bc:	980b883a 	mov	r5,r19
   467c0:	004e08c0 	call	4e08c <__divdf3>
   467c4:	180b883a 	mov	r5,r3
   467c8:	1009883a 	mov	r4,r2
   467cc:	004fb900 	call	4fb90 <__fixdfsi>
   467d0:	1009883a 	mov	r4,r2
   467d4:	102d883a 	mov	r22,r2
   467d8:	004fc180 	call	4fc18 <__floatsidf>
   467dc:	1009883a 	mov	r4,r2
   467e0:	180b883a 	mov	r5,r3
   467e4:	880d883a 	mov	r6,r17
   467e8:	a00f883a 	mov	r7,r20
   467ec:	004eb9c0 	call	4eb9c <__muldf3>
   467f0:	9009883a 	mov	r4,r18
   467f4:	980b883a 	mov	r5,r19
   467f8:	100d883a 	mov	r6,r2
   467fc:	180f883a 	mov	r7,r3
   46800:	004f2c00 	call	4f2c0 <__subdf3>
   46804:	d9000717 	ldw	r4,28(sp)
   46808:	d9800617 	ldw	r6,24(sp)
   4680c:	180b883a 	mov	r5,r3
   46810:	b0c00c04 	addi	r3,r22,48
   46814:	20c00005 	stb	r3,0(r4)
   46818:	25c00044 	addi	r23,r4,1
   4681c:	01000044 	movi	r4,1
   46820:	1011883a 	mov	r8,r2
   46824:	2807883a 	mov	r3,r5
   46828:	31003d26 	beq	r6,r4,46920 <_dtoa_r+0x918>
   4682c:	000d883a 	mov	r6,zero
   46830:	01d00934 	movhi	r7,16420
   46834:	1009883a 	mov	r4,r2
   46838:	004eb9c0 	call	4eb9c <__muldf3>
   4683c:	1009883a 	mov	r4,r2
   46840:	180b883a 	mov	r5,r3
   46844:	000d883a 	mov	r6,zero
   46848:	000f883a 	mov	r7,zero
   4684c:	1027883a 	mov	r19,r2
   46850:	182b883a 	mov	r21,r3
   46854:	004e9580 	call	4e958 <__eqdf2>
   46858:	103f9926 	beq	r2,zero,466c0 <__alt_data_end+0xfffcbd40>
   4685c:	d8c00617 	ldw	r3,24(sp)
   46860:	d9000717 	ldw	r4,28(sp)
   46864:	b825883a 	mov	r18,r23
   46868:	18bfffc4 	addi	r2,r3,-1
   4686c:	20ad883a 	add	r22,r4,r2
   46870:	dc000315 	stw	r16,12(sp)
   46874:	00000a06 	br	468a0 <_dtoa_r+0x898>
   46878:	004eb9c0 	call	4eb9c <__muldf3>
   4687c:	1009883a 	mov	r4,r2
   46880:	180b883a 	mov	r5,r3
   46884:	000d883a 	mov	r6,zero
   46888:	000f883a 	mov	r7,zero
   4688c:	1027883a 	mov	r19,r2
   46890:	182b883a 	mov	r21,r3
   46894:	b825883a 	mov	r18,r23
   46898:	004e9580 	call	4e958 <__eqdf2>
   4689c:	10022626 	beq	r2,zero,47138 <_dtoa_r+0x1130>
   468a0:	880d883a 	mov	r6,r17
   468a4:	a00f883a 	mov	r7,r20
   468a8:	9809883a 	mov	r4,r19
   468ac:	a80b883a 	mov	r5,r21
   468b0:	004e08c0 	call	4e08c <__divdf3>
   468b4:	180b883a 	mov	r5,r3
   468b8:	1009883a 	mov	r4,r2
   468bc:	004fb900 	call	4fb90 <__fixdfsi>
   468c0:	1009883a 	mov	r4,r2
   468c4:	1021883a 	mov	r16,r2
   468c8:	004fc180 	call	4fc18 <__floatsidf>
   468cc:	1009883a 	mov	r4,r2
   468d0:	180b883a 	mov	r5,r3
   468d4:	880d883a 	mov	r6,r17
   468d8:	a00f883a 	mov	r7,r20
   468dc:	004eb9c0 	call	4eb9c <__muldf3>
   468e0:	9809883a 	mov	r4,r19
   468e4:	a80b883a 	mov	r5,r21
   468e8:	100d883a 	mov	r6,r2
   468ec:	180f883a 	mov	r7,r3
   468f0:	004f2c00 	call	4f2c0 <__subdf3>
   468f4:	82000c04 	addi	r8,r16,48
   468f8:	92000005 	stb	r8,0(r18)
   468fc:	1009883a 	mov	r4,r2
   46900:	180b883a 	mov	r5,r3
   46904:	000d883a 	mov	r6,zero
   46908:	01d00934 	movhi	r7,16420
   4690c:	1011883a 	mov	r8,r2
   46910:	bdc00044 	addi	r23,r23,1
   46914:	95bfd81e 	bne	r18,r22,46878 <__alt_data_end+0xfffcbef8>
   46918:	802d883a 	mov	r22,r16
   4691c:	dc000317 	ldw	r16,12(sp)
   46920:	4009883a 	mov	r4,r8
   46924:	180b883a 	mov	r5,r3
   46928:	400d883a 	mov	r6,r8
   4692c:	180f883a 	mov	r7,r3
   46930:	004d7f00 	call	4d7f0 <__adddf3>
   46934:	8809883a 	mov	r4,r17
   46938:	a00b883a 	mov	r5,r20
   4693c:	100d883a 	mov	r6,r2
   46940:	180f883a 	mov	r7,r3
   46944:	1027883a 	mov	r19,r2
   46948:	1825883a 	mov	r18,r3
   4694c:	004eabc0 	call	4eabc <__ledf2>
   46950:	10000816 	blt	r2,zero,46974 <_dtoa_r+0x96c>
   46954:	8809883a 	mov	r4,r17
   46958:	a00b883a 	mov	r5,r20
   4695c:	980d883a 	mov	r6,r19
   46960:	900f883a 	mov	r7,r18
   46964:	004e9580 	call	4e958 <__eqdf2>
   46968:	103f551e 	bne	r2,zero,466c0 <__alt_data_end+0xfffcbd40>
   4696c:	b580004c 	andi	r22,r22,1
   46970:	b03f5326 	beq	r22,zero,466c0 <__alt_data_end+0xfffcbd40>
   46974:	bd7fffc3 	ldbu	r21,-1(r23)
   46978:	b8bfffc4 	addi	r2,r23,-1
   4697c:	1007883a 	mov	r3,r2
   46980:	01400e44 	movi	r5,57
   46984:	d9800717 	ldw	r6,28(sp)
   46988:	00000506 	br	469a0 <_dtoa_r+0x998>
   4698c:	18ffffc4 	addi	r3,r3,-1
   46990:	30825e26 	beq	r6,r2,4730c <_dtoa_r+0x1304>
   46994:	1d400003 	ldbu	r21,0(r3)
   46998:	102f883a 	mov	r23,r2
   4699c:	10bfffc4 	addi	r2,r2,-1
   469a0:	a9003fcc 	andi	r4,r21,255
   469a4:	2100201c 	xori	r4,r4,128
   469a8:	213fe004 	addi	r4,r4,-128
   469ac:	217ff726 	beq	r4,r5,4698c <__alt_data_end+0xfffcc00c>
   469b0:	aa000044 	addi	r8,r21,1
   469b4:	12000005 	stb	r8,0(r2)
   469b8:	003f4106 	br	466c0 <__alt_data_end+0xfffcbd40>
   469bc:	d8c00b17 	ldw	r3,44(sp)
   469c0:	18006726 	beq	r3,zero,46b60 <_dtoa_r+0xb58>
   469c4:	d9000317 	ldw	r4,12(sp)
   469c8:	00c00044 	movi	r3,1
   469cc:	19016a0e 	bge	r3,r4,46f78 <_dtoa_r+0xf70>
   469d0:	d8800617 	ldw	r2,24(sp)
   469d4:	d8c00917 	ldw	r3,36(sp)
   469d8:	157fffc4 	addi	r21,r2,-1
   469dc:	1d420716 	blt	r3,r21,471fc <_dtoa_r+0x11f4>
   469e0:	1d6bc83a 	sub	r21,r3,r21
   469e4:	d8800617 	ldw	r2,24(sp)
   469e8:	1002c716 	blt	r2,zero,47508 <_dtoa_r+0x1500>
   469ec:	dd000817 	ldw	r20,32(sp)
   469f0:	d8800617 	ldw	r2,24(sp)
   469f4:	d9800817 	ldw	r6,32(sp)
   469f8:	8009883a 	mov	r4,r16
   469fc:	01400044 	movi	r5,1
   46a00:	308d883a 	add	r6,r6,r2
   46a04:	d9800815 	stw	r6,32(sp)
   46a08:	b0ad883a 	add	r22,r22,r2
   46a0c:	00491d40 	call	491d4 <__i2b>
   46a10:	1023883a 	mov	r17,r2
   46a14:	a0000826 	beq	r20,zero,46a38 <_dtoa_r+0xa30>
   46a18:	0580070e 	bge	zero,r22,46a38 <_dtoa_r+0xa30>
   46a1c:	b005883a 	mov	r2,r22
   46a20:	a5812016 	blt	r20,r22,46ea4 <_dtoa_r+0xe9c>
   46a24:	d8c00817 	ldw	r3,32(sp)
   46a28:	a0a9c83a 	sub	r20,r20,r2
   46a2c:	b0adc83a 	sub	r22,r22,r2
   46a30:	1887c83a 	sub	r3,r3,r2
   46a34:	d8c00815 	stw	r3,32(sp)
   46a38:	d9000917 	ldw	r4,36(sp)
   46a3c:	0100140e 	bge	zero,r4,46a90 <_dtoa_r+0xa88>
   46a40:	d9800b17 	ldw	r6,44(sp)
   46a44:	3001e526 	beq	r6,zero,471dc <_dtoa_r+0x11d4>
   46a48:	05400e0e 	bge	zero,r21,46a84 <_dtoa_r+0xa7c>
   46a4c:	880b883a 	mov	r5,r17
   46a50:	8009883a 	mov	r4,r16
   46a54:	a80d883a 	mov	r6,r21
   46a58:	004940c0 	call	4940c <__pow5mult>
   46a5c:	e00d883a 	mov	r6,fp
   46a60:	8009883a 	mov	r4,r16
   46a64:	100b883a 	mov	r5,r2
   46a68:	1023883a 	mov	r17,r2
   46a6c:	00492100 	call	49210 <__multiply>
   46a70:	102f883a 	mov	r23,r2
   46a74:	e00b883a 	mov	r5,fp
   46a78:	8009883a 	mov	r4,r16
   46a7c:	0048e7c0 	call	48e7c <_Bfree>
   46a80:	b839883a 	mov	fp,r23
   46a84:	d8800917 	ldw	r2,36(sp)
   46a88:	154dc83a 	sub	r6,r2,r21
   46a8c:	3001281e 	bne	r6,zero,46f30 <_dtoa_r+0xf28>
   46a90:	05c00044 	movi	r23,1
   46a94:	8009883a 	mov	r4,r16
   46a98:	b80b883a 	mov	r5,r23
   46a9c:	00491d40 	call	491d4 <__i2b>
   46aa0:	d8c00a17 	ldw	r3,40(sp)
   46aa4:	102b883a 	mov	r21,r2
   46aa8:	00c0310e 	bge	zero,r3,46b70 <_dtoa_r+0xb68>
   46aac:	8009883a 	mov	r4,r16
   46ab0:	100b883a 	mov	r5,r2
   46ab4:	180d883a 	mov	r6,r3
   46ab8:	004940c0 	call	4940c <__pow5mult>
   46abc:	d9000317 	ldw	r4,12(sp)
   46ac0:	102b883a 	mov	r21,r2
   46ac4:	b9011f0e 	bge	r23,r4,46f44 <_dtoa_r+0xf3c>
   46ac8:	0027883a 	mov	r19,zero
   46acc:	a8800417 	ldw	r2,16(r21)
   46ad0:	10800104 	addi	r2,r2,4
   46ad4:	1085883a 	add	r2,r2,r2
   46ad8:	1085883a 	add	r2,r2,r2
   46adc:	a885883a 	add	r2,r21,r2
   46ae0:	11000017 	ldw	r4,0(r2)
   46ae4:	00490bc0 	call	490bc <__hi0bits>
   46ae8:	00c00804 	movi	r3,32
   46aec:	1885c83a 	sub	r2,r3,r2
   46af0:	00002506 	br	46b88 <_dtoa_r+0xb80>
   46af4:	01800044 	movi	r6,1
   46af8:	d9800c15 	stw	r6,48(sp)
   46afc:	003dec06 	br	462b0 <__alt_data_end+0xfffcb930>
   46b00:	d8c00817 	ldw	r3,32(sp)
   46b04:	d9000517 	ldw	r4,20(sp)
   46b08:	d8000a15 	stw	zero,40(sp)
   46b0c:	1907c83a 	sub	r3,r3,r4
   46b10:	010dc83a 	sub	r6,zero,r4
   46b14:	d8c00815 	stw	r3,32(sp)
   46b18:	d9800915 	stw	r6,36(sp)
   46b1c:	003ded06 	br	462d4 <__alt_data_end+0xfffcb954>
   46b20:	05adc83a 	sub	r22,zero,r22
   46b24:	dd800815 	stw	r22,32(sp)
   46b28:	002d883a 	mov	r22,zero
   46b2c:	003de406 	br	462c0 <__alt_data_end+0xfffcb940>
   46b30:	d9000517 	ldw	r4,20(sp)
   46b34:	004fc180 	call	4fc18 <__floatsidf>
   46b38:	1009883a 	mov	r4,r2
   46b3c:	180b883a 	mov	r5,r3
   46b40:	b00d883a 	mov	r6,r22
   46b44:	a80f883a 	mov	r7,r21
   46b48:	004e9580 	call	4e958 <__eqdf2>
   46b4c:	103dc726 	beq	r2,zero,4626c <__alt_data_end+0xfffcb8ec>
   46b50:	d8800517 	ldw	r2,20(sp)
   46b54:	10bfffc4 	addi	r2,r2,-1
   46b58:	d8800515 	stw	r2,20(sp)
   46b5c:	003dc306 	br	4626c <__alt_data_end+0xfffcb8ec>
   46b60:	dd400917 	ldw	r21,36(sp)
   46b64:	dd000817 	ldw	r20,32(sp)
   46b68:	0023883a 	mov	r17,zero
   46b6c:	003fa906 	br	46a14 <__alt_data_end+0xfffcc094>
   46b70:	d9800317 	ldw	r6,12(sp)
   46b74:	b981670e 	bge	r23,r6,47114 <_dtoa_r+0x110c>
   46b78:	0027883a 	mov	r19,zero
   46b7c:	d8c00a17 	ldw	r3,40(sp)
   46b80:	183fd21e 	bne	r3,zero,46acc <__alt_data_end+0xfffcc14c>
   46b84:	00800044 	movi	r2,1
   46b88:	1585883a 	add	r2,r2,r22
   46b8c:	108007cc 	andi	r2,r2,31
   46b90:	10005f26 	beq	r2,zero,46d10 <_dtoa_r+0xd08>
   46b94:	00c00804 	movi	r3,32
   46b98:	1887c83a 	sub	r3,r3,r2
   46b9c:	01000104 	movi	r4,4
   46ba0:	20c2dd0e 	bge	r4,r3,47718 <_dtoa_r+0x1710>
   46ba4:	d9000817 	ldw	r4,32(sp)
   46ba8:	00c00704 	movi	r3,28
   46bac:	1885c83a 	sub	r2,r3,r2
   46bb0:	2089883a 	add	r4,r4,r2
   46bb4:	d9000815 	stw	r4,32(sp)
   46bb8:	a0a9883a 	add	r20,r20,r2
   46bbc:	b0ad883a 	add	r22,r22,r2
   46bc0:	d8800817 	ldw	r2,32(sp)
   46bc4:	0080050e 	bge	zero,r2,46bdc <_dtoa_r+0xbd4>
   46bc8:	e00b883a 	mov	r5,fp
   46bcc:	8009883a 	mov	r4,r16
   46bd0:	100d883a 	mov	r6,r2
   46bd4:	004954c0 	call	4954c <__lshift>
   46bd8:	1039883a 	mov	fp,r2
   46bdc:	0580050e 	bge	zero,r22,46bf4 <_dtoa_r+0xbec>
   46be0:	a80b883a 	mov	r5,r21
   46be4:	8009883a 	mov	r4,r16
   46be8:	b00d883a 	mov	r6,r22
   46bec:	004954c0 	call	4954c <__lshift>
   46bf0:	102b883a 	mov	r21,r2
   46bf4:	d8c00c17 	ldw	r3,48(sp)
   46bf8:	1801161e 	bne	r3,zero,47054 <_dtoa_r+0x104c>
   46bfc:	d8c00617 	ldw	r3,24(sp)
   46c00:	00c12d0e 	bge	zero,r3,470b8 <_dtoa_r+0x10b0>
   46c04:	d8c00b17 	ldw	r3,44(sp)
   46c08:	1800571e 	bne	r3,zero,46d68 <_dtoa_r+0xd60>
   46c0c:	dc800717 	ldw	r18,28(sp)
   46c10:	dcc00617 	ldw	r19,24(sp)
   46c14:	9029883a 	mov	r20,r18
   46c18:	00000206 	br	46c24 <_dtoa_r+0xc1c>
   46c1c:	0048ea40 	call	48ea4 <__multadd>
   46c20:	1039883a 	mov	fp,r2
   46c24:	e009883a 	mov	r4,fp
   46c28:	a80b883a 	mov	r5,r21
   46c2c:	0045e080 	call	45e08 <quorem>
   46c30:	10800c04 	addi	r2,r2,48
   46c34:	90800005 	stb	r2,0(r18)
   46c38:	94800044 	addi	r18,r18,1
   46c3c:	9507c83a 	sub	r3,r18,r20
   46c40:	8009883a 	mov	r4,r16
   46c44:	e00b883a 	mov	r5,fp
   46c48:	01800284 	movi	r6,10
   46c4c:	000f883a 	mov	r7,zero
   46c50:	1cfff216 	blt	r3,r19,46c1c <__alt_data_end+0xfffcc29c>
   46c54:	1011883a 	mov	r8,r2
   46c58:	d8800617 	ldw	r2,24(sp)
   46c5c:	00822e0e 	bge	zero,r2,47518 <_dtoa_r+0x1510>
   46c60:	d9000717 	ldw	r4,28(sp)
   46c64:	0025883a 	mov	r18,zero
   46c68:	20af883a 	add	r23,r4,r2
   46c6c:	e00b883a 	mov	r5,fp
   46c70:	01800044 	movi	r6,1
   46c74:	8009883a 	mov	r4,r16
   46c78:	da001715 	stw	r8,92(sp)
   46c7c:	004954c0 	call	4954c <__lshift>
   46c80:	1009883a 	mov	r4,r2
   46c84:	a80b883a 	mov	r5,r21
   46c88:	1039883a 	mov	fp,r2
   46c8c:	00496940 	call	49694 <__mcmp>
   46c90:	da001717 	ldw	r8,92(sp)
   46c94:	00816e0e 	bge	zero,r2,47250 <_dtoa_r+0x1248>
   46c98:	b93fffc3 	ldbu	r4,-1(r23)
   46c9c:	b8bfffc4 	addi	r2,r23,-1
   46ca0:	1007883a 	mov	r3,r2
   46ca4:	01800e44 	movi	r6,57
   46ca8:	d9c00717 	ldw	r7,28(sp)
   46cac:	00000506 	br	46cc4 <_dtoa_r+0xcbc>
   46cb0:	18ffffc4 	addi	r3,r3,-1
   46cb4:	38811926 	beq	r7,r2,4711c <_dtoa_r+0x1114>
   46cb8:	19000003 	ldbu	r4,0(r3)
   46cbc:	102f883a 	mov	r23,r2
   46cc0:	10bfffc4 	addi	r2,r2,-1
   46cc4:	21403fcc 	andi	r5,r4,255
   46cc8:	2940201c 	xori	r5,r5,128
   46ccc:	297fe004 	addi	r5,r5,-128
   46cd0:	29bff726 	beq	r5,r6,46cb0 <__alt_data_end+0xfffcc330>
   46cd4:	21000044 	addi	r4,r4,1
   46cd8:	11000005 	stb	r4,0(r2)
   46cdc:	8009883a 	mov	r4,r16
   46ce0:	a80b883a 	mov	r5,r21
   46ce4:	0048e7c0 	call	48e7c <_Bfree>
   46ce8:	883e7526 	beq	r17,zero,466c0 <__alt_data_end+0xfffcbd40>
   46cec:	90000426 	beq	r18,zero,46d00 <_dtoa_r+0xcf8>
   46cf0:	94400326 	beq	r18,r17,46d00 <_dtoa_r+0xcf8>
   46cf4:	8009883a 	mov	r4,r16
   46cf8:	900b883a 	mov	r5,r18
   46cfc:	0048e7c0 	call	48e7c <_Bfree>
   46d00:	8009883a 	mov	r4,r16
   46d04:	880b883a 	mov	r5,r17
   46d08:	0048e7c0 	call	48e7c <_Bfree>
   46d0c:	003e6c06 	br	466c0 <__alt_data_end+0xfffcbd40>
   46d10:	00800704 	movi	r2,28
   46d14:	d9800817 	ldw	r6,32(sp)
   46d18:	a0a9883a 	add	r20,r20,r2
   46d1c:	b0ad883a 	add	r22,r22,r2
   46d20:	308d883a 	add	r6,r6,r2
   46d24:	d9800815 	stw	r6,32(sp)
   46d28:	003fa506 	br	46bc0 <__alt_data_end+0xfffcc240>
   46d2c:	013efb84 	movi	r4,-1042
   46d30:	246bc83a 	sub	r21,r4,r17
   46d34:	9548983a 	sll	r4,r18,r21
   46d38:	003d1806 	br	4619c <__alt_data_end+0xfffcb81c>
   46d3c:	d8000c15 	stw	zero,48(sp)
   46d40:	003d5b06 	br	462b0 <__alt_data_end+0xfffcb930>
   46d44:	880b883a 	mov	r5,r17
   46d48:	8009883a 	mov	r4,r16
   46d4c:	01800284 	movi	r6,10
   46d50:	000f883a 	mov	r7,zero
   46d54:	0048ea40 	call	48ea4 <__multadd>
   46d58:	1023883a 	mov	r17,r2
   46d5c:	d8800d17 	ldw	r2,52(sp)
   46d60:	0082550e 	bge	zero,r2,476b8 <_dtoa_r+0x16b0>
   46d64:	d8800615 	stw	r2,24(sp)
   46d68:	0500050e 	bge	zero,r20,46d80 <_dtoa_r+0xd78>
   46d6c:	880b883a 	mov	r5,r17
   46d70:	8009883a 	mov	r4,r16
   46d74:	a00d883a 	mov	r6,r20
   46d78:	004954c0 	call	4954c <__lshift>
   46d7c:	1023883a 	mov	r17,r2
   46d80:	98016a1e 	bne	r19,zero,4732c <_dtoa_r+0x1324>
   46d84:	8829883a 	mov	r20,r17
   46d88:	d9000617 	ldw	r4,24(sp)
   46d8c:	dcc00717 	ldw	r19,28(sp)
   46d90:	9480004c 	andi	r18,r18,1
   46d94:	20bfffc4 	addi	r2,r4,-1
   46d98:	9885883a 	add	r2,r19,r2
   46d9c:	d8800415 	stw	r2,16(sp)
   46da0:	dc800615 	stw	r18,24(sp)
   46da4:	e009883a 	mov	r4,fp
   46da8:	a80b883a 	mov	r5,r21
   46dac:	0045e080 	call	45e08 <quorem>
   46db0:	e009883a 	mov	r4,fp
   46db4:	880b883a 	mov	r5,r17
   46db8:	102f883a 	mov	r23,r2
   46dbc:	00496940 	call	49694 <__mcmp>
   46dc0:	8009883a 	mov	r4,r16
   46dc4:	a80b883a 	mov	r5,r21
   46dc8:	a00d883a 	mov	r6,r20
   46dcc:	102d883a 	mov	r22,r2
   46dd0:	00496f40 	call	496f4 <__mdiff>
   46dd4:	1007883a 	mov	r3,r2
   46dd8:	10800317 	ldw	r2,12(r2)
   46ddc:	bc800c04 	addi	r18,r23,48
   46de0:	1000971e 	bne	r2,zero,47040 <_dtoa_r+0x1038>
   46de4:	180b883a 	mov	r5,r3
   46de8:	e009883a 	mov	r4,fp
   46dec:	d8c01515 	stw	r3,84(sp)
   46df0:	00496940 	call	49694 <__mcmp>
   46df4:	d8c01517 	ldw	r3,84(sp)
   46df8:	8009883a 	mov	r4,r16
   46dfc:	d8801515 	stw	r2,84(sp)
   46e00:	180b883a 	mov	r5,r3
   46e04:	0048e7c0 	call	48e7c <_Bfree>
   46e08:	d8801517 	ldw	r2,84(sp)
   46e0c:	1000041e 	bne	r2,zero,46e20 <_dtoa_r+0xe18>
   46e10:	d9800317 	ldw	r6,12(sp)
   46e14:	3000021e 	bne	r6,zero,46e20 <_dtoa_r+0xe18>
   46e18:	d8c00617 	ldw	r3,24(sp)
   46e1c:	18007626 	beq	r3,zero,46ff8 <_dtoa_r+0xff0>
   46e20:	b0005b16 	blt	r22,zero,46f90 <_dtoa_r+0xf88>
   46e24:	b000041e 	bne	r22,zero,46e38 <_dtoa_r+0xe30>
   46e28:	d9000317 	ldw	r4,12(sp)
   46e2c:	2000021e 	bne	r4,zero,46e38 <_dtoa_r+0xe30>
   46e30:	d8c00617 	ldw	r3,24(sp)
   46e34:	18005626 	beq	r3,zero,46f90 <_dtoa_r+0xf88>
   46e38:	00814d16 	blt	zero,r2,47370 <_dtoa_r+0x1368>
   46e3c:	d8c00417 	ldw	r3,16(sp)
   46e40:	9d800044 	addi	r22,r19,1
   46e44:	9c800005 	stb	r18,0(r19)
   46e48:	b02f883a 	mov	r23,r22
   46e4c:	98c14c26 	beq	r19,r3,47380 <_dtoa_r+0x1378>
   46e50:	e00b883a 	mov	r5,fp
   46e54:	8009883a 	mov	r4,r16
   46e58:	01800284 	movi	r6,10
   46e5c:	000f883a 	mov	r7,zero
   46e60:	0048ea40 	call	48ea4 <__multadd>
   46e64:	1039883a 	mov	fp,r2
   46e68:	8d006d26 	beq	r17,r20,47020 <_dtoa_r+0x1018>
   46e6c:	880b883a 	mov	r5,r17
   46e70:	01800284 	movi	r6,10
   46e74:	000f883a 	mov	r7,zero
   46e78:	8009883a 	mov	r4,r16
   46e7c:	0048ea40 	call	48ea4 <__multadd>
   46e80:	a00b883a 	mov	r5,r20
   46e84:	8009883a 	mov	r4,r16
   46e88:	01800284 	movi	r6,10
   46e8c:	000f883a 	mov	r7,zero
   46e90:	1023883a 	mov	r17,r2
   46e94:	0048ea40 	call	48ea4 <__multadd>
   46e98:	1029883a 	mov	r20,r2
   46e9c:	b027883a 	mov	r19,r22
   46ea0:	003fc006 	br	46da4 <__alt_data_end+0xfffcc424>
   46ea4:	a005883a 	mov	r2,r20
   46ea8:	003ede06 	br	46a24 <__alt_data_end+0xfffcc0a4>
   46eac:	01000044 	movi	r4,1
   46eb0:	d9000b15 	stw	r4,44(sp)
   46eb4:	d9802217 	ldw	r6,136(sp)
   46eb8:	0180dc0e 	bge	zero,r6,4722c <_dtoa_r+0x1224>
   46ebc:	3023883a 	mov	r17,r6
   46ec0:	d9800d15 	stw	r6,52(sp)
   46ec4:	d9800615 	stw	r6,24(sp)
   46ec8:	003d1e06 	br	46344 <__alt_data_end+0xfffcb9c4>
   46ecc:	d8800617 	ldw	r2,24(sp)
   46ed0:	00be3716 	blt	zero,r2,467b0 <__alt_data_end+0xfffcbe30>
   46ed4:	1000be1e 	bne	r2,zero,471d0 <_dtoa_r+0x11c8>
   46ed8:	8809883a 	mov	r4,r17
   46edc:	a00b883a 	mov	r5,r20
   46ee0:	000d883a 	mov	r6,zero
   46ee4:	01d00534 	movhi	r7,16404
   46ee8:	004eb9c0 	call	4eb9c <__muldf3>
   46eec:	1009883a 	mov	r4,r2
   46ef0:	180b883a 	mov	r5,r3
   46ef4:	900d883a 	mov	r6,r18
   46ef8:	980f883a 	mov	r7,r19
   46efc:	004e9dc0 	call	4e9dc <__gedf2>
   46f00:	002b883a 	mov	r21,zero
   46f04:	0023883a 	mov	r17,zero
   46f08:	10007a16 	blt	r2,zero,470f4 <_dtoa_r+0x10ec>
   46f0c:	d9002217 	ldw	r4,136(sp)
   46f10:	ddc00717 	ldw	r23,28(sp)
   46f14:	0108303a 	nor	r4,zero,r4
   46f18:	d9000515 	stw	r4,20(sp)
   46f1c:	8009883a 	mov	r4,r16
   46f20:	a80b883a 	mov	r5,r21
   46f24:	0048e7c0 	call	48e7c <_Bfree>
   46f28:	883f751e 	bne	r17,zero,46d00 <__alt_data_end+0xfffcc380>
   46f2c:	003de406 	br	466c0 <__alt_data_end+0xfffcbd40>
   46f30:	e00b883a 	mov	r5,fp
   46f34:	8009883a 	mov	r4,r16
   46f38:	004940c0 	call	4940c <__pow5mult>
   46f3c:	1039883a 	mov	fp,r2
   46f40:	003ed306 	br	46a90 <__alt_data_end+0xfffcc110>
   46f44:	903ee01e 	bne	r18,zero,46ac8 <__alt_data_end+0xfffcc148>
   46f48:	00800434 	movhi	r2,16
   46f4c:	10bfffc4 	addi	r2,r2,-1
   46f50:	9884703a 	and	r2,r19,r2
   46f54:	103f081e 	bne	r2,zero,46b78 <__alt_data_end+0xfffcc1f8>
   46f58:	9cdffc2c 	andhi	r19,r19,32752
   46f5c:	983f0626 	beq	r19,zero,46b78 <__alt_data_end+0xfffcc1f8>
   46f60:	d8800817 	ldw	r2,32(sp)
   46f64:	b5800044 	addi	r22,r22,1
   46f68:	04c00044 	movi	r19,1
   46f6c:	10800044 	addi	r2,r2,1
   46f70:	d8800815 	stw	r2,32(sp)
   46f74:	003f0106 	br	46b7c <__alt_data_end+0xfffcc1fc>
   46f78:	d9800f17 	ldw	r6,60(sp)
   46f7c:	30016826 	beq	r6,zero,47520 <_dtoa_r+0x1518>
   46f80:	10810cc4 	addi	r2,r2,1075
   46f84:	dd400917 	ldw	r21,36(sp)
   46f88:	dd000817 	ldw	r20,32(sp)
   46f8c:	003e9906 	br	469f4 <__alt_data_end+0xfffcc074>
   46f90:	9011883a 	mov	r8,r18
   46f94:	4007883a 	mov	r3,r8
   46f98:	e02d883a 	mov	r22,fp
   46f9c:	0080100e 	bge	zero,r2,46fe0 <_dtoa_r+0xfd8>
   46fa0:	01800044 	movi	r6,1
   46fa4:	8009883a 	mov	r4,r16
   46fa8:	e00b883a 	mov	r5,fp
   46fac:	da001515 	stw	r8,84(sp)
   46fb0:	da001715 	stw	r8,92(sp)
   46fb4:	004954c0 	call	4954c <__lshift>
   46fb8:	1009883a 	mov	r4,r2
   46fbc:	a80b883a 	mov	r5,r21
   46fc0:	102d883a 	mov	r22,r2
   46fc4:	00496940 	call	49694 <__mcmp>
   46fc8:	d8c01517 	ldw	r3,84(sp)
   46fcc:	da001717 	ldw	r8,92(sp)
   46fd0:	0081a50e 	bge	zero,r2,47668 <_dtoa_r+0x1660>
   46fd4:	00800e44 	movi	r2,57
   46fd8:	40817b26 	beq	r8,r2,475c8 <_dtoa_r+0x15c0>
   46fdc:	40c00044 	addi	r3,r8,1
   46fe0:	8825883a 	mov	r18,r17
   46fe4:	9dc00044 	addi	r23,r19,1
   46fe8:	98c00005 	stb	r3,0(r19)
   46fec:	a023883a 	mov	r17,r20
   46ff0:	b039883a 	mov	fp,r22
   46ff4:	003f3906 	br	46cdc <__alt_data_end+0xfffcc35c>
   46ff8:	00800e44 	movi	r2,57
   46ffc:	9011883a 	mov	r8,r18
   47000:	90817226 	beq	r18,r2,475cc <_dtoa_r+0x15c4>
   47004:	0580010e 	bge	zero,r22,4700c <_dtoa_r+0x1004>
   47008:	ba000c44 	addi	r8,r23,49
   4700c:	8825883a 	mov	r18,r17
   47010:	9dc00044 	addi	r23,r19,1
   47014:	9a000005 	stb	r8,0(r19)
   47018:	a023883a 	mov	r17,r20
   4701c:	003f2f06 	br	46cdc <__alt_data_end+0xfffcc35c>
   47020:	880b883a 	mov	r5,r17
   47024:	8009883a 	mov	r4,r16
   47028:	01800284 	movi	r6,10
   4702c:	000f883a 	mov	r7,zero
   47030:	0048ea40 	call	48ea4 <__multadd>
   47034:	1023883a 	mov	r17,r2
   47038:	1029883a 	mov	r20,r2
   4703c:	003f9706 	br	46e9c <__alt_data_end+0xfffcc51c>
   47040:	8009883a 	mov	r4,r16
   47044:	180b883a 	mov	r5,r3
   47048:	0048e7c0 	call	48e7c <_Bfree>
   4704c:	00800044 	movi	r2,1
   47050:	003f7306 	br	46e20 <__alt_data_end+0xfffcc4a0>
   47054:	e009883a 	mov	r4,fp
   47058:	a80b883a 	mov	r5,r21
   4705c:	00496940 	call	49694 <__mcmp>
   47060:	103ee60e 	bge	r2,zero,46bfc <__alt_data_end+0xfffcc27c>
   47064:	8009883a 	mov	r4,r16
   47068:	e00b883a 	mov	r5,fp
   4706c:	01800284 	movi	r6,10
   47070:	000f883a 	mov	r7,zero
   47074:	0048ea40 	call	48ea4 <__multadd>
   47078:	d9000517 	ldw	r4,20(sp)
   4707c:	d9800b17 	ldw	r6,44(sp)
   47080:	1039883a 	mov	fp,r2
   47084:	213fffc4 	addi	r4,r4,-1
   47088:	d9000515 	stw	r4,20(sp)
   4708c:	303f2d1e 	bne	r6,zero,46d44 <__alt_data_end+0xfffcc3c4>
   47090:	d9000d17 	ldw	r4,52(sp)
   47094:	0101780e 	bge	zero,r4,47678 <_dtoa_r+0x1670>
   47098:	d9000615 	stw	r4,24(sp)
   4709c:	003edb06 	br	46c0c <__alt_data_end+0xfffcc28c>
   470a0:	00800084 	movi	r2,2
   470a4:	30818e1e 	bne	r6,r2,476e0 <_dtoa_r+0x16d8>
   470a8:	d8000b15 	stw	zero,44(sp)
   470ac:	003f8106 	br	46eb4 <__alt_data_end+0xfffcc534>
   470b0:	d8800717 	ldw	r2,28(sp)
   470b4:	003c0306 	br	460c4 <__alt_data_end+0xfffcb744>
   470b8:	d9000317 	ldw	r4,12(sp)
   470bc:	00800084 	movi	r2,2
   470c0:	113ed00e 	bge	r2,r4,46c04 <__alt_data_end+0xfffcc284>
   470c4:	d8c00617 	ldw	r3,24(sp)
   470c8:	183f901e 	bne	r3,zero,46f0c <__alt_data_end+0xfffcc58c>
   470cc:	a80b883a 	mov	r5,r21
   470d0:	8009883a 	mov	r4,r16
   470d4:	01800144 	movi	r6,5
   470d8:	000f883a 	mov	r7,zero
   470dc:	0048ea40 	call	48ea4 <__multadd>
   470e0:	e009883a 	mov	r4,fp
   470e4:	100b883a 	mov	r5,r2
   470e8:	102b883a 	mov	r21,r2
   470ec:	00496940 	call	49694 <__mcmp>
   470f0:	00bf860e 	bge	zero,r2,46f0c <__alt_data_end+0xfffcc58c>
   470f4:	d9800717 	ldw	r6,28(sp)
   470f8:	00800c44 	movi	r2,49
   470fc:	30800005 	stb	r2,0(r6)
   47100:	d8800517 	ldw	r2,20(sp)
   47104:	35c00044 	addi	r23,r6,1
   47108:	10800044 	addi	r2,r2,1
   4710c:	d8800515 	stw	r2,20(sp)
   47110:	003f8206 	br	46f1c <__alt_data_end+0xfffcc59c>
   47114:	903e981e 	bne	r18,zero,46b78 <__alt_data_end+0xfffcc1f8>
   47118:	003f8b06 	br	46f48 <__alt_data_end+0xfffcc5c8>
   4711c:	d9800517 	ldw	r6,20(sp)
   47120:	d8c00717 	ldw	r3,28(sp)
   47124:	00800c44 	movi	r2,49
   47128:	31800044 	addi	r6,r6,1
   4712c:	d9800515 	stw	r6,20(sp)
   47130:	18800005 	stb	r2,0(r3)
   47134:	003ee906 	br	46cdc <__alt_data_end+0xfffcc35c>
   47138:	dc000317 	ldw	r16,12(sp)
   4713c:	003d6006 	br	466c0 <__alt_data_end+0xfffcbd40>
   47140:	8809883a 	mov	r4,r17
   47144:	004fc180 	call	4fc18 <__floatsidf>
   47148:	a009883a 	mov	r4,r20
   4714c:	a80b883a 	mov	r5,r21
   47150:	100d883a 	mov	r6,r2
   47154:	180f883a 	mov	r7,r3
   47158:	004eb9c0 	call	4eb9c <__muldf3>
   4715c:	1009883a 	mov	r4,r2
   47160:	180b883a 	mov	r5,r3
   47164:	000d883a 	mov	r6,zero
   47168:	01d00734 	movhi	r7,16412
   4716c:	004d7f00 	call	4d7f0 <__adddf3>
   47170:	1023883a 	mov	r17,r2
   47174:	00bf3034 	movhi	r2,64704
   47178:	1885883a 	add	r2,r3,r2
   4717c:	d8800e15 	stw	r2,56(sp)
   47180:	a009883a 	mov	r4,r20
   47184:	a80b883a 	mov	r5,r21
   47188:	000d883a 	mov	r6,zero
   4718c:	01d00534 	movhi	r7,16404
   47190:	004f2c00 	call	4f2c0 <__subdf3>
   47194:	d9c00e17 	ldw	r7,56(sp)
   47198:	1009883a 	mov	r4,r2
   4719c:	180b883a 	mov	r5,r3
   471a0:	880d883a 	mov	r6,r17
   471a4:	102b883a 	mov	r21,r2
   471a8:	1829883a 	mov	r20,r3
   471ac:	004e9dc0 	call	4e9dc <__gedf2>
   471b0:	00807716 	blt	zero,r2,47390 <_dtoa_r+0x1388>
   471b4:	d8800e17 	ldw	r2,56(sp)
   471b8:	a809883a 	mov	r4,r21
   471bc:	a00b883a 	mov	r5,r20
   471c0:	11e0003c 	xorhi	r7,r2,32768
   471c4:	880d883a 	mov	r6,r17
   471c8:	004eabc0 	call	4eabc <__ledf2>
   471cc:	103d6b0e 	bge	r2,zero,4677c <__alt_data_end+0xfffcbdfc>
   471d0:	002b883a 	mov	r21,zero
   471d4:	0023883a 	mov	r17,zero
   471d8:	003f4c06 	br	46f0c <__alt_data_end+0xfffcc58c>
   471dc:	d9800917 	ldw	r6,36(sp)
   471e0:	e00b883a 	mov	r5,fp
   471e4:	8009883a 	mov	r4,r16
   471e8:	004940c0 	call	4940c <__pow5mult>
   471ec:	1039883a 	mov	fp,r2
   471f0:	003e2706 	br	46a90 <__alt_data_end+0xfffcc110>
   471f4:	d8000b15 	stw	zero,44(sp)
   471f8:	003c4906 	br	46320 <__alt_data_end+0xfffcb9a0>
   471fc:	d9000917 	ldw	r4,36(sp)
   47200:	d9800a17 	ldw	r6,40(sp)
   47204:	dd400915 	stw	r21,36(sp)
   47208:	a905c83a 	sub	r2,r21,r4
   4720c:	308d883a 	add	r6,r6,r2
   47210:	d9800a15 	stw	r6,40(sp)
   47214:	002b883a 	mov	r21,zero
   47218:	003df206 	br	469e4 <__alt_data_end+0xfffcc064>
   4721c:	dc800e15 	stw	r18,56(sp)
   47220:	982b883a 	mov	r21,r19
   47224:	04400084 	movi	r17,2
   47228:	003c7406 	br	463fc <__alt_data_end+0xfffcba7c>
   4722c:	04400044 	movi	r17,1
   47230:	dc400d15 	stw	r17,52(sp)
   47234:	dc400615 	stw	r17,24(sp)
   47238:	dc402215 	stw	r17,136(sp)
   4723c:	80001115 	stw	zero,68(r16)
   47240:	000b883a 	mov	r5,zero
   47244:	003c4a06 	br	46370 <__alt_data_end+0xfffcb9f0>
   47248:	3023883a 	mov	r17,r6
   4724c:	003ffb06 	br	4723c <__alt_data_end+0xfffcc8bc>
   47250:	1000021e 	bne	r2,zero,4725c <_dtoa_r+0x1254>
   47254:	4200004c 	andi	r8,r8,1
   47258:	403e8f1e 	bne	r8,zero,46c98 <__alt_data_end+0xfffcc318>
   4725c:	01000c04 	movi	r4,48
   47260:	00000106 	br	47268 <_dtoa_r+0x1260>
   47264:	102f883a 	mov	r23,r2
   47268:	b8bfffc4 	addi	r2,r23,-1
   4726c:	10c00007 	ldb	r3,0(r2)
   47270:	193ffc26 	beq	r3,r4,47264 <__alt_data_end+0xfffcc8e4>
   47274:	003e9906 	br	46cdc <__alt_data_end+0xfffcc35c>
   47278:	d9000517 	ldw	r4,20(sp)
   4727c:	012fc83a 	sub	r23,zero,r4
   47280:	b800ad26 	beq	r23,zero,47538 <_dtoa_r+0x1530>
   47284:	b88003cc 	andi	r2,r23,15
   47288:	100490fa 	slli	r2,r2,3
   4728c:	00c00174 	movhi	r3,5
   47290:	18c96604 	addi	r3,r3,9624
   47294:	1885883a 	add	r2,r3,r2
   47298:	11800017 	ldw	r6,0(r2)
   4729c:	11c00117 	ldw	r7,4(r2)
   472a0:	b82fd13a 	srai	r23,r23,4
   472a4:	9009883a 	mov	r4,r18
   472a8:	980b883a 	mov	r5,r19
   472ac:	004eb9c0 	call	4eb9c <__muldf3>
   472b0:	1029883a 	mov	r20,r2
   472b4:	182b883a 	mov	r21,r3
   472b8:	b800f426 	beq	r23,zero,4768c <_dtoa_r+0x1684>
   472bc:	02000174 	movhi	r8,5
   472c0:	42095c04 	addi	r8,r8,9584
   472c4:	8029883a 	mov	r20,r16
   472c8:	04400084 	movi	r17,2
   472cc:	4021883a 	mov	r16,r8
   472d0:	b980004c 	andi	r6,r23,1
   472d4:	1009883a 	mov	r4,r2
   472d8:	b82fd07a 	srai	r23,r23,1
   472dc:	180b883a 	mov	r5,r3
   472e0:	30000426 	beq	r6,zero,472f4 <_dtoa_r+0x12ec>
   472e4:	81800017 	ldw	r6,0(r16)
   472e8:	81c00117 	ldw	r7,4(r16)
   472ec:	8c400044 	addi	r17,r17,1
   472f0:	004eb9c0 	call	4eb9c <__muldf3>
   472f4:	84000204 	addi	r16,r16,8
   472f8:	b83ff51e 	bne	r23,zero,472d0 <__alt_data_end+0xfffcc950>
   472fc:	a021883a 	mov	r16,r20
   47300:	182b883a 	mov	r21,r3
   47304:	1029883a 	mov	r20,r2
   47308:	003c5506 	br	46460 <__alt_data_end+0xfffcbae0>
   4730c:	d9800517 	ldw	r6,20(sp)
   47310:	d9000717 	ldw	r4,28(sp)
   47314:	00c00c04 	movi	r3,48
   47318:	31800044 	addi	r6,r6,1
   4731c:	d9800515 	stw	r6,20(sp)
   47320:	20c00005 	stb	r3,0(r4)
   47324:	02000c44 	movi	r8,49
   47328:	003da206 	br	469b4 <__alt_data_end+0xfffcc034>
   4732c:	89400117 	ldw	r5,4(r17)
   47330:	8009883a 	mov	r4,r16
   47334:	0048dd40 	call	48dd4 <_Balloc>
   47338:	89800417 	ldw	r6,16(r17)
   4733c:	11000304 	addi	r4,r2,12
   47340:	89400304 	addi	r5,r17,12
   47344:	31800084 	addi	r6,r6,2
   47348:	318d883a 	add	r6,r6,r6
   4734c:	318d883a 	add	r6,r6,r6
   47350:	1027883a 	mov	r19,r2
   47354:	00438e80 	call	438e8 <memcpy>
   47358:	8009883a 	mov	r4,r16
   4735c:	980b883a 	mov	r5,r19
   47360:	01800044 	movi	r6,1
   47364:	004954c0 	call	4954c <__lshift>
   47368:	1029883a 	mov	r20,r2
   4736c:	003e8606 	br	46d88 <__alt_data_end+0xfffcc408>
   47370:	00800e44 	movi	r2,57
   47374:	90809526 	beq	r18,r2,475cc <_dtoa_r+0x15c4>
   47378:	92000044 	addi	r8,r18,1
   4737c:	003f2306 	br	4700c <__alt_data_end+0xfffcc68c>
   47380:	9011883a 	mov	r8,r18
   47384:	8825883a 	mov	r18,r17
   47388:	a023883a 	mov	r17,r20
   4738c:	003e3706 	br	46c6c <__alt_data_end+0xfffcc2ec>
   47390:	002b883a 	mov	r21,zero
   47394:	0023883a 	mov	r17,zero
   47398:	003f5606 	br	470f4 <__alt_data_end+0xfffcc774>
   4739c:	51bfffc4 	addi	r6,r10,-1
   473a0:	300490fa 	slli	r2,r6,3
   473a4:	00c00174 	movhi	r3,5
   473a8:	18c96604 	addi	r3,r3,9624
   473ac:	1885883a 	add	r2,r3,r2
   473b0:	d9c00e17 	ldw	r7,56(sp)
   473b4:	11000017 	ldw	r4,0(r2)
   473b8:	11400117 	ldw	r5,4(r2)
   473bc:	d8800717 	ldw	r2,28(sp)
   473c0:	d9801015 	stw	r6,64(sp)
   473c4:	880d883a 	mov	r6,r17
   473c8:	da801615 	stw	r10,88(sp)
   473cc:	15c00044 	addi	r23,r2,1
   473d0:	004eb9c0 	call	4eb9c <__muldf3>
   473d4:	a80b883a 	mov	r5,r21
   473d8:	a009883a 	mov	r4,r20
   473dc:	d8c01115 	stw	r3,68(sp)
   473e0:	d8800e15 	stw	r2,56(sp)
   473e4:	004fb900 	call	4fb90 <__fixdfsi>
   473e8:	1009883a 	mov	r4,r2
   473ec:	1023883a 	mov	r17,r2
   473f0:	004fc180 	call	4fc18 <__floatsidf>
   473f4:	a009883a 	mov	r4,r20
   473f8:	a80b883a 	mov	r5,r21
   473fc:	100d883a 	mov	r6,r2
   47400:	180f883a 	mov	r7,r3
   47404:	004f2c00 	call	4f2c0 <__subdf3>
   47408:	1813883a 	mov	r9,r3
   4740c:	d8c00717 	ldw	r3,28(sp)
   47410:	8c400c04 	addi	r17,r17,48
   47414:	1011883a 	mov	r8,r2
   47418:	1c400005 	stb	r17,0(r3)
   4741c:	da801617 	ldw	r10,88(sp)
   47420:	00800044 	movi	r2,1
   47424:	50802326 	beq	r10,r2,474b4 <_dtoa_r+0x14ac>
   47428:	d8800717 	ldw	r2,28(sp)
   4742c:	b82b883a 	mov	r21,r23
   47430:	dc001315 	stw	r16,76(sp)
   47434:	12a9883a 	add	r20,r2,r10
   47438:	4807883a 	mov	r3,r9
   4743c:	4005883a 	mov	r2,r8
   47440:	dc801415 	stw	r18,80(sp)
   47444:	000d883a 	mov	r6,zero
   47448:	01d00934 	movhi	r7,16420
   4744c:	1009883a 	mov	r4,r2
   47450:	180b883a 	mov	r5,r3
   47454:	004eb9c0 	call	4eb9c <__muldf3>
   47458:	180b883a 	mov	r5,r3
   4745c:	1009883a 	mov	r4,r2
   47460:	1821883a 	mov	r16,r3
   47464:	1025883a 	mov	r18,r2
   47468:	004fb900 	call	4fb90 <__fixdfsi>
   4746c:	1009883a 	mov	r4,r2
   47470:	1023883a 	mov	r17,r2
   47474:	004fc180 	call	4fc18 <__floatsidf>
   47478:	9009883a 	mov	r4,r18
   4747c:	800b883a 	mov	r5,r16
   47480:	100d883a 	mov	r6,r2
   47484:	180f883a 	mov	r7,r3
   47488:	8c400c04 	addi	r17,r17,48
   4748c:	004f2c00 	call	4f2c0 <__subdf3>
   47490:	ad400044 	addi	r21,r21,1
   47494:	ac7fffc5 	stb	r17,-1(r21)
   47498:	ad3fea1e 	bne	r21,r20,47444 <__alt_data_end+0xfffccac4>
   4749c:	1813883a 	mov	r9,r3
   474a0:	d8c01017 	ldw	r3,64(sp)
   474a4:	dc001317 	ldw	r16,76(sp)
   474a8:	dc801417 	ldw	r18,80(sp)
   474ac:	1011883a 	mov	r8,r2
   474b0:	b8ef883a 	add	r23,r23,r3
   474b4:	d9000e17 	ldw	r4,56(sp)
   474b8:	d9401117 	ldw	r5,68(sp)
   474bc:	000d883a 	mov	r6,zero
   474c0:	01cff834 	movhi	r7,16352
   474c4:	da001715 	stw	r8,92(sp)
   474c8:	da401515 	stw	r9,84(sp)
   474cc:	004d7f00 	call	4d7f0 <__adddf3>
   474d0:	da001717 	ldw	r8,92(sp)
   474d4:	da401517 	ldw	r9,84(sp)
   474d8:	1009883a 	mov	r4,r2
   474dc:	400d883a 	mov	r6,r8
   474e0:	480f883a 	mov	r7,r9
   474e4:	180b883a 	mov	r5,r3
   474e8:	004eabc0 	call	4eabc <__ledf2>
   474ec:	da001717 	ldw	r8,92(sp)
   474f0:	da401517 	ldw	r9,84(sp)
   474f4:	10003b0e 	bge	r2,zero,475e4 <_dtoa_r+0x15dc>
   474f8:	d9001217 	ldw	r4,72(sp)
   474fc:	bd7fffc3 	ldbu	r21,-1(r23)
   47500:	d9000515 	stw	r4,20(sp)
   47504:	003d1c06 	br	46978 <__alt_data_end+0xfffcbff8>
   47508:	d8c00817 	ldw	r3,32(sp)
   4750c:	18a9c83a 	sub	r20,r3,r2
   47510:	0005883a 	mov	r2,zero
   47514:	003d3706 	br	469f4 <__alt_data_end+0xfffcc074>
   47518:	00800044 	movi	r2,1
   4751c:	003dd006 	br	46c60 <__alt_data_end+0xfffcc2e0>
   47520:	d8c00217 	ldw	r3,8(sp)
   47524:	00800d84 	movi	r2,54
   47528:	dd400917 	ldw	r21,36(sp)
   4752c:	10c5c83a 	sub	r2,r2,r3
   47530:	dd000817 	ldw	r20,32(sp)
   47534:	003d2f06 	br	469f4 <__alt_data_end+0xfffcc074>
   47538:	9029883a 	mov	r20,r18
   4753c:	982b883a 	mov	r21,r19
   47540:	04400084 	movi	r17,2
   47544:	003bc606 	br	46460 <__alt_data_end+0xfffcbae0>
   47548:	d8800617 	ldw	r2,24(sp)
   4754c:	103efc26 	beq	r2,zero,47140 <__alt_data_end+0xfffcc7c0>
   47550:	d8c00d17 	ldw	r3,52(sp)
   47554:	00fc890e 	bge	zero,r3,4677c <__alt_data_end+0xfffcbdfc>
   47558:	a80b883a 	mov	r5,r21
   4755c:	a009883a 	mov	r4,r20
   47560:	000d883a 	mov	r6,zero
   47564:	01d00934 	movhi	r7,16420
   47568:	004eb9c0 	call	4eb9c <__muldf3>
   4756c:	89000044 	addi	r4,r17,1
   47570:	1029883a 	mov	r20,r2
   47574:	182b883a 	mov	r21,r3
   47578:	004fc180 	call	4fc18 <__floatsidf>
   4757c:	a009883a 	mov	r4,r20
   47580:	a80b883a 	mov	r5,r21
   47584:	100d883a 	mov	r6,r2
   47588:	180f883a 	mov	r7,r3
   4758c:	004eb9c0 	call	4eb9c <__muldf3>
   47590:	1009883a 	mov	r4,r2
   47594:	180b883a 	mov	r5,r3
   47598:	000d883a 	mov	r6,zero
   4759c:	01d00734 	movhi	r7,16412
   475a0:	004d7f00 	call	4d7f0 <__adddf3>
   475a4:	d9000517 	ldw	r4,20(sp)
   475a8:	1023883a 	mov	r17,r2
   475ac:	00bf3034 	movhi	r2,64704
   475b0:	213fffc4 	addi	r4,r4,-1
   475b4:	1885883a 	add	r2,r3,r2
   475b8:	d9001215 	stw	r4,72(sp)
   475bc:	d8800e15 	stw	r2,56(sp)
   475c0:	da800d17 	ldw	r10,52(sp)
   475c4:	003bc306 	br	464d4 <__alt_data_end+0xfffcbb54>
   475c8:	b039883a 	mov	fp,r22
   475cc:	01000e44 	movi	r4,57
   475d0:	8825883a 	mov	r18,r17
   475d4:	9dc00044 	addi	r23,r19,1
   475d8:	99000005 	stb	r4,0(r19)
   475dc:	a023883a 	mov	r17,r20
   475e0:	003dae06 	br	46c9c <__alt_data_end+0xfffcc31c>
   475e4:	d9800e17 	ldw	r6,56(sp)
   475e8:	d9c01117 	ldw	r7,68(sp)
   475ec:	0009883a 	mov	r4,zero
   475f0:	014ff834 	movhi	r5,16352
   475f4:	da001715 	stw	r8,92(sp)
   475f8:	da401515 	stw	r9,84(sp)
   475fc:	004f2c00 	call	4f2c0 <__subdf3>
   47600:	da001717 	ldw	r8,92(sp)
   47604:	da401517 	ldw	r9,84(sp)
   47608:	1009883a 	mov	r4,r2
   4760c:	180b883a 	mov	r5,r3
   47610:	400d883a 	mov	r6,r8
   47614:	480f883a 	mov	r7,r9
   47618:	004e9dc0 	call	4e9dc <__gedf2>
   4761c:	00bc570e 	bge	zero,r2,4677c <__alt_data_end+0xfffcbdfc>
   47620:	01000c04 	movi	r4,48
   47624:	00000106 	br	4762c <_dtoa_r+0x1624>
   47628:	102f883a 	mov	r23,r2
   4762c:	b8bfffc4 	addi	r2,r23,-1
   47630:	10c00007 	ldb	r3,0(r2)
   47634:	193ffc26 	beq	r3,r4,47628 <__alt_data_end+0xfffccca8>
   47638:	d9801217 	ldw	r6,72(sp)
   4763c:	d9800515 	stw	r6,20(sp)
   47640:	003c1f06 	br	466c0 <__alt_data_end+0xfffcbd40>
   47644:	d8801217 	ldw	r2,72(sp)
   47648:	dc001117 	ldw	r16,68(sp)
   4764c:	d8800515 	stw	r2,20(sp)
   47650:	003cc906 	br	46978 <__alt_data_end+0xfffcbff8>
   47654:	dd801317 	ldw	r22,76(sp)
   47658:	dc001117 	ldw	r16,68(sp)
   4765c:	dcc01417 	ldw	r19,80(sp)
   47660:	dc801017 	ldw	r18,64(sp)
   47664:	003c4506 	br	4677c <__alt_data_end+0xfffcbdfc>
   47668:	103e5d1e 	bne	r2,zero,46fe0 <__alt_data_end+0xfffcc660>
   4766c:	4080004c 	andi	r2,r8,1
   47670:	103e5b26 	beq	r2,zero,46fe0 <__alt_data_end+0xfffcc660>
   47674:	003e5706 	br	46fd4 <__alt_data_end+0xfffcc654>
   47678:	d8c00317 	ldw	r3,12(sp)
   4767c:	00800084 	movi	r2,2
   47680:	10c00a16 	blt	r2,r3,476ac <_dtoa_r+0x16a4>
   47684:	d9000d17 	ldw	r4,52(sp)
   47688:	003e8306 	br	47098 <__alt_data_end+0xfffcc718>
   4768c:	04400084 	movi	r17,2
   47690:	003b7306 	br	46460 <__alt_data_end+0xfffcbae0>
   47694:	d9801217 	ldw	r6,72(sp)
   47698:	d9800515 	stw	r6,20(sp)
   4769c:	003cb606 	br	46978 <__alt_data_end+0xfffcbff8>
   476a0:	d9001217 	ldw	r4,72(sp)
   476a4:	d9000515 	stw	r4,20(sp)
   476a8:	003c0506 	br	466c0 <__alt_data_end+0xfffcbd40>
   476ac:	d9800d17 	ldw	r6,52(sp)
   476b0:	d9800615 	stw	r6,24(sp)
   476b4:	003e8306 	br	470c4 <__alt_data_end+0xfffcc744>
   476b8:	d9800317 	ldw	r6,12(sp)
   476bc:	00800084 	movi	r2,2
   476c0:	11800216 	blt	r2,r6,476cc <_dtoa_r+0x16c4>
   476c4:	d8800d17 	ldw	r2,52(sp)
   476c8:	003da606 	br	46d64 <__alt_data_end+0xfffcc3e4>
   476cc:	d8800d17 	ldw	r2,52(sp)
   476d0:	d8800615 	stw	r2,24(sp)
   476d4:	003e7b06 	br	470c4 <__alt_data_end+0xfffcc744>
   476d8:	05000044 	movi	r20,1
   476dc:	003b0506 	br	462f4 <__alt_data_end+0xfffcb974>
   476e0:	8009883a 	mov	r4,r16
   476e4:	80001115 	stw	zero,68(r16)
   476e8:	000b883a 	mov	r5,zero
   476ec:	0048dd40 	call	48dd4 <_Balloc>
   476f0:	d8800715 	stw	r2,28(sp)
   476f4:	d8c00717 	ldw	r3,28(sp)
   476f8:	00bfffc4 	movi	r2,-1
   476fc:	01000044 	movi	r4,1
   47700:	d8800615 	stw	r2,24(sp)
   47704:	80c01015 	stw	r3,64(r16)
   47708:	d9000b15 	stw	r4,44(sp)
   4770c:	d8002215 	stw	zero,136(sp)
   47710:	d8800d15 	stw	r2,52(sp)
   47714:	003c1906 	br	4677c <__alt_data_end+0xfffcbdfc>
   47718:	193d2926 	beq	r3,r4,46bc0 <__alt_data_end+0xfffcc240>
   4771c:	00c00f04 	movi	r3,60
   47720:	1885c83a 	sub	r2,r3,r2
   47724:	003d7b06 	br	46d14 <__alt_data_end+0xfffcc394>
   47728:	000b883a 	mov	r5,zero
   4772c:	003b1006 	br	46370 <__alt_data_end+0xfffcb9f0>

00047730 <_fflush_r>:
   47730:	defffb04 	addi	sp,sp,-20
   47734:	dcc00315 	stw	r19,12(sp)
   47738:	dc000015 	stw	r16,0(sp)
   4773c:	dfc00415 	stw	ra,16(sp)
   47740:	dc800215 	stw	r18,8(sp)
   47744:	dc400115 	stw	r17,4(sp)
   47748:	2027883a 	mov	r19,r4
   4774c:	2821883a 	mov	r16,r5
   47750:	20000226 	beq	r4,zero,4775c <_fflush_r+0x2c>
   47754:	20800e17 	ldw	r2,56(r4)
   47758:	10005326 	beq	r2,zero,478a8 <_fflush_r+0x178>
   4775c:	8080030b 	ldhu	r2,12(r16)
   47760:	10ffffcc 	andi	r3,r2,65535
   47764:	18e0001c 	xori	r3,r3,32768
   47768:	18e00004 	addi	r3,r3,-32768
   4776c:	18002c26 	beq	r3,zero,47820 <_fflush_r+0xf0>
   47770:	10c0020c 	andi	r3,r2,8
   47774:	1800321e 	bne	r3,zero,47840 <_fflush_r+0x110>
   47778:	80c00117 	ldw	r3,4(r16)
   4777c:	10820014 	ori	r2,r2,2048
   47780:	8080030d 	sth	r2,12(r16)
   47784:	00c0570e 	bge	zero,r3,478e4 <_fflush_r+0x1b4>
   47788:	82000a17 	ldw	r8,40(r16)
   4778c:	40002426 	beq	r8,zero,47820 <_fflush_r+0xf0>
   47790:	9c400017 	ldw	r17,0(r19)
   47794:	10c4000c 	andi	r3,r2,4096
   47798:	98000015 	stw	zero,0(r19)
   4779c:	18004626 	beq	r3,zero,478b8 <_fflush_r+0x188>
   477a0:	81801417 	ldw	r6,80(r16)
   477a4:	10c0010c 	andi	r3,r2,4
   477a8:	18000626 	beq	r3,zero,477c4 <_fflush_r+0x94>
   477ac:	80c00117 	ldw	r3,4(r16)
   477b0:	80800c17 	ldw	r2,48(r16)
   477b4:	30cdc83a 	sub	r6,r6,r3
   477b8:	10000226 	beq	r2,zero,477c4 <_fflush_r+0x94>
   477bc:	80800f17 	ldw	r2,60(r16)
   477c0:	308dc83a 	sub	r6,r6,r2
   477c4:	81400717 	ldw	r5,28(r16)
   477c8:	9809883a 	mov	r4,r19
   477cc:	000f883a 	mov	r7,zero
   477d0:	403ee83a 	callr	r8
   477d4:	00ffffc4 	movi	r3,-1
   477d8:	10c04526 	beq	r2,r3,478f0 <_fflush_r+0x1c0>
   477dc:	80c0030b 	ldhu	r3,12(r16)
   477e0:	81000417 	ldw	r4,16(r16)
   477e4:	80000115 	stw	zero,4(r16)
   477e8:	197dffcc 	andi	r5,r3,63487
   477ec:	8140030d 	sth	r5,12(r16)
   477f0:	81000015 	stw	r4,0(r16)
   477f4:	18c4000c 	andi	r3,r3,4096
   477f8:	18000126 	beq	r3,zero,47800 <_fflush_r+0xd0>
   477fc:	80801415 	stw	r2,80(r16)
   47800:	81400c17 	ldw	r5,48(r16)
   47804:	9c400015 	stw	r17,0(r19)
   47808:	28000526 	beq	r5,zero,47820 <_fflush_r+0xf0>
   4780c:	80801004 	addi	r2,r16,64
   47810:	28800226 	beq	r5,r2,4781c <_fflush_r+0xec>
   47814:	9809883a 	mov	r4,r19
   47818:	0047e4c0 	call	47e4c <_free_r>
   4781c:	80000c15 	stw	zero,48(r16)
   47820:	0005883a 	mov	r2,zero
   47824:	dfc00417 	ldw	ra,16(sp)
   47828:	dcc00317 	ldw	r19,12(sp)
   4782c:	dc800217 	ldw	r18,8(sp)
   47830:	dc400117 	ldw	r17,4(sp)
   47834:	dc000017 	ldw	r16,0(sp)
   47838:	dec00504 	addi	sp,sp,20
   4783c:	f800283a 	ret
   47840:	84800417 	ldw	r18,16(r16)
   47844:	903ff626 	beq	r18,zero,47820 <__alt_data_end+0xfffccea0>
   47848:	84400017 	ldw	r17,0(r16)
   4784c:	108000cc 	andi	r2,r2,3
   47850:	84800015 	stw	r18,0(r16)
   47854:	8ca3c83a 	sub	r17,r17,r18
   47858:	10001526 	beq	r2,zero,478b0 <_fflush_r+0x180>
   4785c:	0005883a 	mov	r2,zero
   47860:	80800215 	stw	r2,8(r16)
   47864:	04400316 	blt	zero,r17,47874 <_fflush_r+0x144>
   47868:	003fed06 	br	47820 <__alt_data_end+0xfffccea0>
   4786c:	90a5883a 	add	r18,r18,r2
   47870:	047feb0e 	bge	zero,r17,47820 <__alt_data_end+0xfffccea0>
   47874:	80800917 	ldw	r2,36(r16)
   47878:	81400717 	ldw	r5,28(r16)
   4787c:	880f883a 	mov	r7,r17
   47880:	900d883a 	mov	r6,r18
   47884:	9809883a 	mov	r4,r19
   47888:	103ee83a 	callr	r2
   4788c:	88a3c83a 	sub	r17,r17,r2
   47890:	00bff616 	blt	zero,r2,4786c <__alt_data_end+0xfffcceec>
   47894:	80c0030b 	ldhu	r3,12(r16)
   47898:	00bfffc4 	movi	r2,-1
   4789c:	18c01014 	ori	r3,r3,64
   478a0:	80c0030d 	sth	r3,12(r16)
   478a4:	003fdf06 	br	47824 <__alt_data_end+0xfffccea4>
   478a8:	0047cd80 	call	47cd8 <__sinit>
   478ac:	003fab06 	br	4775c <__alt_data_end+0xfffccddc>
   478b0:	80800517 	ldw	r2,20(r16)
   478b4:	003fea06 	br	47860 <__alt_data_end+0xfffccee0>
   478b8:	81400717 	ldw	r5,28(r16)
   478bc:	000d883a 	mov	r6,zero
   478c0:	9809883a 	mov	r4,r19
   478c4:	01c00044 	movi	r7,1
   478c8:	403ee83a 	callr	r8
   478cc:	100d883a 	mov	r6,r2
   478d0:	00bfffc4 	movi	r2,-1
   478d4:	30801326 	beq	r6,r2,47924 <_fflush_r+0x1f4>
   478d8:	8080030b 	ldhu	r2,12(r16)
   478dc:	82000a17 	ldw	r8,40(r16)
   478e0:	003fb006 	br	477a4 <__alt_data_end+0xfffcce24>
   478e4:	80c00f17 	ldw	r3,60(r16)
   478e8:	00ffa716 	blt	zero,r3,47788 <__alt_data_end+0xfffcce08>
   478ec:	003fcc06 	br	47820 <__alt_data_end+0xfffccea0>
   478f0:	98c00017 	ldw	r3,0(r19)
   478f4:	183fb926 	beq	r3,zero,477dc <__alt_data_end+0xfffcce5c>
   478f8:	01000744 	movi	r4,29
   478fc:	19000226 	beq	r3,r4,47908 <_fflush_r+0x1d8>
   47900:	01000584 	movi	r4,22
   47904:	1900101e 	bne	r3,r4,47948 <_fflush_r+0x218>
   47908:	8080030b 	ldhu	r2,12(r16)
   4790c:	80c00417 	ldw	r3,16(r16)
   47910:	80000115 	stw	zero,4(r16)
   47914:	10bdffcc 	andi	r2,r2,63487
   47918:	8080030d 	sth	r2,12(r16)
   4791c:	80c00015 	stw	r3,0(r16)
   47920:	003fb706 	br	47800 <__alt_data_end+0xfffcce80>
   47924:	98800017 	ldw	r2,0(r19)
   47928:	103feb26 	beq	r2,zero,478d8 <__alt_data_end+0xfffccf58>
   4792c:	00c00744 	movi	r3,29
   47930:	10c00226 	beq	r2,r3,4793c <_fflush_r+0x20c>
   47934:	00c00584 	movi	r3,22
   47938:	10ffd61e 	bne	r2,r3,47894 <__alt_data_end+0xfffccf14>
   4793c:	9c400015 	stw	r17,0(r19)
   47940:	0005883a 	mov	r2,zero
   47944:	003fb706 	br	47824 <__alt_data_end+0xfffccea4>
   47948:	80c0030b 	ldhu	r3,12(r16)
   4794c:	18c01014 	ori	r3,r3,64
   47950:	80c0030d 	sth	r3,12(r16)
   47954:	003fb306 	br	47824 <__alt_data_end+0xfffccea4>

00047958 <fflush>:
   47958:	20000526 	beq	r4,zero,47970 <fflush+0x18>
   4795c:	00800174 	movhi	r2,5
   47960:	10909a04 	addi	r2,r2,17000
   47964:	200b883a 	mov	r5,r4
   47968:	11000017 	ldw	r4,0(r2)
   4796c:	00477301 	jmpi	47730 <_fflush_r>
   47970:	00800174 	movhi	r2,5
   47974:	10909904 	addi	r2,r2,16996
   47978:	11000017 	ldw	r4,0(r2)
   4797c:	01400134 	movhi	r5,4
   47980:	295dcc04 	addi	r5,r5,30512
   47984:	00481f41 	jmpi	481f4 <_fwalk_reent>

00047988 <__fp_lock>:
   47988:	0005883a 	mov	r2,zero
   4798c:	f800283a 	ret

00047990 <__fp_unlock>:
   47990:	0005883a 	mov	r2,zero
   47994:	f800283a 	ret

00047998 <_cleanup_r>:
   47998:	01400174 	movhi	r5,5
   4799c:	296ea004 	addi	r5,r5,-17792
   479a0:	004813c1 	jmpi	4813c <_fwalk>

000479a4 <__sinit.part.1>:
   479a4:	defff604 	addi	sp,sp,-40
   479a8:	00c00134 	movhi	r3,4
   479ac:	dfc00915 	stw	ra,36(sp)
   479b0:	df000815 	stw	fp,32(sp)
   479b4:	ddc00715 	stw	r23,28(sp)
   479b8:	dd800615 	stw	r22,24(sp)
   479bc:	dd400515 	stw	r21,20(sp)
   479c0:	dd000415 	stw	r20,16(sp)
   479c4:	dcc00315 	stw	r19,12(sp)
   479c8:	dc800215 	stw	r18,8(sp)
   479cc:	dc400115 	stw	r17,4(sp)
   479d0:	dc000015 	stw	r16,0(sp)
   479d4:	18de6604 	addi	r3,r3,31128
   479d8:	24000117 	ldw	r16,4(r4)
   479dc:	20c00f15 	stw	r3,60(r4)
   479e0:	07000044 	movi	fp,1
   479e4:	00c000c4 	movi	r3,3
   479e8:	2080bb04 	addi	r2,r4,748
   479ec:	20c0b915 	stw	r3,740(r4)
   479f0:	27000e15 	stw	fp,56(r4)
   479f4:	2080ba15 	stw	r2,744(r4)
   479f8:	2000b815 	stw	zero,736(r4)
   479fc:	05c00204 	movi	r23,8
   47a00:	00800104 	movi	r2,4
   47a04:	2025883a 	mov	r18,r4
   47a08:	b80d883a 	mov	r6,r23
   47a0c:	81001704 	addi	r4,r16,92
   47a10:	000b883a 	mov	r5,zero
   47a14:	80000015 	stw	zero,0(r16)
   47a18:	80000115 	stw	zero,4(r16)
   47a1c:	80000215 	stw	zero,8(r16)
   47a20:	8080030d 	sth	r2,12(r16)
   47a24:	80001915 	stw	zero,100(r16)
   47a28:	8000038d 	sth	zero,14(r16)
   47a2c:	80000415 	stw	zero,16(r16)
   47a30:	80000515 	stw	zero,20(r16)
   47a34:	80000615 	stw	zero,24(r16)
   47a38:	0043a200 	call	43a20 <memset>
   47a3c:	05800174 	movhi	r22,5
   47a40:	94400217 	ldw	r17,8(r18)
   47a44:	05400174 	movhi	r21,5
   47a48:	05000174 	movhi	r20,5
   47a4c:	04c00174 	movhi	r19,5
   47a50:	b5a7e404 	addi	r22,r22,-24688
   47a54:	ad67fb04 	addi	r21,r21,-24596
   47a58:	a5281a04 	addi	r20,r20,-24472
   47a5c:	9ce83104 	addi	r19,r19,-24380
   47a60:	85800815 	stw	r22,32(r16)
   47a64:	85400915 	stw	r21,36(r16)
   47a68:	85000a15 	stw	r20,40(r16)
   47a6c:	84c00b15 	stw	r19,44(r16)
   47a70:	84000715 	stw	r16,28(r16)
   47a74:	00800284 	movi	r2,10
   47a78:	89001704 	addi	r4,r17,92
   47a7c:	b80d883a 	mov	r6,r23
   47a80:	000b883a 	mov	r5,zero
   47a84:	88000015 	stw	zero,0(r17)
   47a88:	88000115 	stw	zero,4(r17)
   47a8c:	88000215 	stw	zero,8(r17)
   47a90:	8880030d 	sth	r2,12(r17)
   47a94:	88001915 	stw	zero,100(r17)
   47a98:	8f00038d 	sth	fp,14(r17)
   47a9c:	88000415 	stw	zero,16(r17)
   47aa0:	88000515 	stw	zero,20(r17)
   47aa4:	88000615 	stw	zero,24(r17)
   47aa8:	0043a200 	call	43a20 <memset>
   47aac:	94000317 	ldw	r16,12(r18)
   47ab0:	00800484 	movi	r2,18
   47ab4:	8c400715 	stw	r17,28(r17)
   47ab8:	8d800815 	stw	r22,32(r17)
   47abc:	8d400915 	stw	r21,36(r17)
   47ac0:	8d000a15 	stw	r20,40(r17)
   47ac4:	8cc00b15 	stw	r19,44(r17)
   47ac8:	8080030d 	sth	r2,12(r16)
   47acc:	00800084 	movi	r2,2
   47ad0:	80000015 	stw	zero,0(r16)
   47ad4:	80000115 	stw	zero,4(r16)
   47ad8:	80000215 	stw	zero,8(r16)
   47adc:	80001915 	stw	zero,100(r16)
   47ae0:	8080038d 	sth	r2,14(r16)
   47ae4:	80000415 	stw	zero,16(r16)
   47ae8:	80000515 	stw	zero,20(r16)
   47aec:	80000615 	stw	zero,24(r16)
   47af0:	81001704 	addi	r4,r16,92
   47af4:	000b883a 	mov	r5,zero
   47af8:	b80d883a 	mov	r6,r23
   47afc:	0043a200 	call	43a20 <memset>
   47b00:	84000715 	stw	r16,28(r16)
   47b04:	85800815 	stw	r22,32(r16)
   47b08:	85400915 	stw	r21,36(r16)
   47b0c:	85000a15 	stw	r20,40(r16)
   47b10:	84c00b15 	stw	r19,44(r16)
   47b14:	dfc00917 	ldw	ra,36(sp)
   47b18:	df000817 	ldw	fp,32(sp)
   47b1c:	ddc00717 	ldw	r23,28(sp)
   47b20:	dd800617 	ldw	r22,24(sp)
   47b24:	dd400517 	ldw	r21,20(sp)
   47b28:	dd000417 	ldw	r20,16(sp)
   47b2c:	dcc00317 	ldw	r19,12(sp)
   47b30:	dc800217 	ldw	r18,8(sp)
   47b34:	dc400117 	ldw	r17,4(sp)
   47b38:	dc000017 	ldw	r16,0(sp)
   47b3c:	dec00a04 	addi	sp,sp,40
   47b40:	f800283a 	ret

00047b44 <__sfmoreglue>:
   47b44:	defffc04 	addi	sp,sp,-16
   47b48:	dc400115 	stw	r17,4(sp)
   47b4c:	2c401a24 	muli	r17,r5,104
   47b50:	dc800215 	stw	r18,8(sp)
   47b54:	2825883a 	mov	r18,r5
   47b58:	89400304 	addi	r5,r17,12
   47b5c:	dc000015 	stw	r16,0(sp)
   47b60:	dfc00315 	stw	ra,12(sp)
   47b64:	00485440 	call	48544 <_malloc_r>
   47b68:	1021883a 	mov	r16,r2
   47b6c:	10000726 	beq	r2,zero,47b8c <__sfmoreglue+0x48>
   47b70:	11000304 	addi	r4,r2,12
   47b74:	10000015 	stw	zero,0(r2)
   47b78:	14800115 	stw	r18,4(r2)
   47b7c:	11000215 	stw	r4,8(r2)
   47b80:	000b883a 	mov	r5,zero
   47b84:	880d883a 	mov	r6,r17
   47b88:	0043a200 	call	43a20 <memset>
   47b8c:	8005883a 	mov	r2,r16
   47b90:	dfc00317 	ldw	ra,12(sp)
   47b94:	dc800217 	ldw	r18,8(sp)
   47b98:	dc400117 	ldw	r17,4(sp)
   47b9c:	dc000017 	ldw	r16,0(sp)
   47ba0:	dec00404 	addi	sp,sp,16
   47ba4:	f800283a 	ret

00047ba8 <__sfp>:
   47ba8:	00800174 	movhi	r2,5
   47bac:	defffb04 	addi	sp,sp,-20
   47bb0:	10909904 	addi	r2,r2,16996
   47bb4:	dc800215 	stw	r18,8(sp)
   47bb8:	14800017 	ldw	r18,0(r2)
   47bbc:	dcc00315 	stw	r19,12(sp)
   47bc0:	dfc00415 	stw	ra,16(sp)
   47bc4:	90800e17 	ldw	r2,56(r18)
   47bc8:	dc400115 	stw	r17,4(sp)
   47bcc:	dc000015 	stw	r16,0(sp)
   47bd0:	2027883a 	mov	r19,r4
   47bd4:	1000021e 	bne	r2,zero,47be0 <__sfp+0x38>
   47bd8:	9009883a 	mov	r4,r18
   47bdc:	00479a40 	call	479a4 <__sinit.part.1>
   47be0:	9480b804 	addi	r18,r18,736
   47be4:	047fffc4 	movi	r17,-1
   47be8:	91400117 	ldw	r5,4(r18)
   47bec:	94000217 	ldw	r16,8(r18)
   47bf0:	297fffc4 	addi	r5,r5,-1
   47bf4:	28000a16 	blt	r5,zero,47c20 <__sfp+0x78>
   47bf8:	8080030f 	ldh	r2,12(r16)
   47bfc:	10000c26 	beq	r2,zero,47c30 <__sfp+0x88>
   47c00:	80c01d04 	addi	r3,r16,116
   47c04:	00000206 	br	47c10 <__sfp+0x68>
   47c08:	18bfe60f 	ldh	r2,-104(r3)
   47c0c:	10000826 	beq	r2,zero,47c30 <__sfp+0x88>
   47c10:	297fffc4 	addi	r5,r5,-1
   47c14:	1c3ffd04 	addi	r16,r3,-12
   47c18:	18c01a04 	addi	r3,r3,104
   47c1c:	2c7ffa1e 	bne	r5,r17,47c08 <__alt_data_end+0xfffcd288>
   47c20:	90800017 	ldw	r2,0(r18)
   47c24:	10001d26 	beq	r2,zero,47c9c <__sfp+0xf4>
   47c28:	1025883a 	mov	r18,r2
   47c2c:	003fee06 	br	47be8 <__alt_data_end+0xfffcd268>
   47c30:	00bfffc4 	movi	r2,-1
   47c34:	8080038d 	sth	r2,14(r16)
   47c38:	00800044 	movi	r2,1
   47c3c:	8080030d 	sth	r2,12(r16)
   47c40:	80001915 	stw	zero,100(r16)
   47c44:	80000015 	stw	zero,0(r16)
   47c48:	80000215 	stw	zero,8(r16)
   47c4c:	80000115 	stw	zero,4(r16)
   47c50:	80000415 	stw	zero,16(r16)
   47c54:	80000515 	stw	zero,20(r16)
   47c58:	80000615 	stw	zero,24(r16)
   47c5c:	81001704 	addi	r4,r16,92
   47c60:	000b883a 	mov	r5,zero
   47c64:	01800204 	movi	r6,8
   47c68:	0043a200 	call	43a20 <memset>
   47c6c:	8005883a 	mov	r2,r16
   47c70:	80000c15 	stw	zero,48(r16)
   47c74:	80000d15 	stw	zero,52(r16)
   47c78:	80001115 	stw	zero,68(r16)
   47c7c:	80001215 	stw	zero,72(r16)
   47c80:	dfc00417 	ldw	ra,16(sp)
   47c84:	dcc00317 	ldw	r19,12(sp)
   47c88:	dc800217 	ldw	r18,8(sp)
   47c8c:	dc400117 	ldw	r17,4(sp)
   47c90:	dc000017 	ldw	r16,0(sp)
   47c94:	dec00504 	addi	sp,sp,20
   47c98:	f800283a 	ret
   47c9c:	9809883a 	mov	r4,r19
   47ca0:	01400104 	movi	r5,4
   47ca4:	0047b440 	call	47b44 <__sfmoreglue>
   47ca8:	90800015 	stw	r2,0(r18)
   47cac:	103fde1e 	bne	r2,zero,47c28 <__alt_data_end+0xfffcd2a8>
   47cb0:	00800304 	movi	r2,12
   47cb4:	98800015 	stw	r2,0(r19)
   47cb8:	0005883a 	mov	r2,zero
   47cbc:	003ff006 	br	47c80 <__alt_data_end+0xfffcd300>

00047cc0 <_cleanup>:
   47cc0:	00800174 	movhi	r2,5
   47cc4:	10909904 	addi	r2,r2,16996
   47cc8:	11000017 	ldw	r4,0(r2)
   47ccc:	01400174 	movhi	r5,5
   47cd0:	296ea004 	addi	r5,r5,-17792
   47cd4:	004813c1 	jmpi	4813c <_fwalk>

00047cd8 <__sinit>:
   47cd8:	20800e17 	ldw	r2,56(r4)
   47cdc:	10000126 	beq	r2,zero,47ce4 <__sinit+0xc>
   47ce0:	f800283a 	ret
   47ce4:	00479a41 	jmpi	479a4 <__sinit.part.1>

00047ce8 <__sfp_lock_acquire>:
   47ce8:	f800283a 	ret

00047cec <__sfp_lock_release>:
   47cec:	f800283a 	ret

00047cf0 <__sinit_lock_acquire>:
   47cf0:	f800283a 	ret

00047cf4 <__sinit_lock_release>:
   47cf4:	f800283a 	ret

00047cf8 <__fp_lock_all>:
   47cf8:	00800174 	movhi	r2,5
   47cfc:	10909a04 	addi	r2,r2,17000
   47d00:	11000017 	ldw	r4,0(r2)
   47d04:	01400134 	movhi	r5,4
   47d08:	295e6204 	addi	r5,r5,31112
   47d0c:	004813c1 	jmpi	4813c <_fwalk>

00047d10 <__fp_unlock_all>:
   47d10:	00800174 	movhi	r2,5
   47d14:	10909a04 	addi	r2,r2,17000
   47d18:	11000017 	ldw	r4,0(r2)
   47d1c:	01400134 	movhi	r5,4
   47d20:	295e6404 	addi	r5,r5,31120
   47d24:	004813c1 	jmpi	4813c <_fwalk>

00047d28 <_malloc_trim_r>:
   47d28:	defffb04 	addi	sp,sp,-20
   47d2c:	dcc00315 	stw	r19,12(sp)
   47d30:	04c00174 	movhi	r19,5
   47d34:	dc800215 	stw	r18,8(sp)
   47d38:	dc400115 	stw	r17,4(sp)
   47d3c:	dc000015 	stw	r16,0(sp)
   47d40:	dfc00415 	stw	ra,16(sp)
   47d44:	2821883a 	mov	r16,r5
   47d48:	9ccb1204 	addi	r19,r19,11336
   47d4c:	2025883a 	mov	r18,r4
   47d50:	00505900 	call	50590 <__malloc_lock>
   47d54:	98800217 	ldw	r2,8(r19)
   47d58:	14400117 	ldw	r17,4(r2)
   47d5c:	00bfff04 	movi	r2,-4
   47d60:	88a2703a 	and	r17,r17,r2
   47d64:	8c21c83a 	sub	r16,r17,r16
   47d68:	8403fbc4 	addi	r16,r16,4079
   47d6c:	8020d33a 	srli	r16,r16,12
   47d70:	0083ffc4 	movi	r2,4095
   47d74:	843fffc4 	addi	r16,r16,-1
   47d78:	8020933a 	slli	r16,r16,12
   47d7c:	1400060e 	bge	r2,r16,47d98 <_malloc_trim_r+0x70>
   47d80:	9009883a 	mov	r4,r18
   47d84:	000b883a 	mov	r5,zero
   47d88:	0049f3c0 	call	49f3c <_sbrk_r>
   47d8c:	98c00217 	ldw	r3,8(r19)
   47d90:	1c47883a 	add	r3,r3,r17
   47d94:	10c00a26 	beq	r2,r3,47dc0 <_malloc_trim_r+0x98>
   47d98:	9009883a 	mov	r4,r18
   47d9c:	00505b00 	call	505b0 <__malloc_unlock>
   47da0:	0005883a 	mov	r2,zero
   47da4:	dfc00417 	ldw	ra,16(sp)
   47da8:	dcc00317 	ldw	r19,12(sp)
   47dac:	dc800217 	ldw	r18,8(sp)
   47db0:	dc400117 	ldw	r17,4(sp)
   47db4:	dc000017 	ldw	r16,0(sp)
   47db8:	dec00504 	addi	sp,sp,20
   47dbc:	f800283a 	ret
   47dc0:	9009883a 	mov	r4,r18
   47dc4:	040bc83a 	sub	r5,zero,r16
   47dc8:	0049f3c0 	call	49f3c <_sbrk_r>
   47dcc:	00ffffc4 	movi	r3,-1
   47dd0:	10c00d26 	beq	r2,r3,47e08 <_malloc_trim_r+0xe0>
   47dd4:	00c001b4 	movhi	r3,6
   47dd8:	18fecb04 	addi	r3,r3,-1236
   47ddc:	18800017 	ldw	r2,0(r3)
   47de0:	99000217 	ldw	r4,8(r19)
   47de4:	8c23c83a 	sub	r17,r17,r16
   47de8:	8c400054 	ori	r17,r17,1
   47dec:	1421c83a 	sub	r16,r2,r16
   47df0:	24400115 	stw	r17,4(r4)
   47df4:	9009883a 	mov	r4,r18
   47df8:	1c000015 	stw	r16,0(r3)
   47dfc:	00505b00 	call	505b0 <__malloc_unlock>
   47e00:	00800044 	movi	r2,1
   47e04:	003fe706 	br	47da4 <__alt_data_end+0xfffcd424>
   47e08:	9009883a 	mov	r4,r18
   47e0c:	000b883a 	mov	r5,zero
   47e10:	0049f3c0 	call	49f3c <_sbrk_r>
   47e14:	99000217 	ldw	r4,8(r19)
   47e18:	014003c4 	movi	r5,15
   47e1c:	1107c83a 	sub	r3,r2,r4
   47e20:	28ffdd0e 	bge	r5,r3,47d98 <__alt_data_end+0xfffcd418>
   47e24:	01400174 	movhi	r5,5
   47e28:	29509c04 	addi	r5,r5,17008
   47e2c:	29400017 	ldw	r5,0(r5)
   47e30:	18c00054 	ori	r3,r3,1
   47e34:	20c00115 	stw	r3,4(r4)
   47e38:	00c001b4 	movhi	r3,6
   47e3c:	1145c83a 	sub	r2,r2,r5
   47e40:	18fecb04 	addi	r3,r3,-1236
   47e44:	18800015 	stw	r2,0(r3)
   47e48:	003fd306 	br	47d98 <__alt_data_end+0xfffcd418>

00047e4c <_free_r>:
   47e4c:	28004c26 	beq	r5,zero,47f80 <_free_r+0x134>
   47e50:	defffd04 	addi	sp,sp,-12
   47e54:	dc400115 	stw	r17,4(sp)
   47e58:	dc000015 	stw	r16,0(sp)
   47e5c:	2023883a 	mov	r17,r4
   47e60:	2821883a 	mov	r16,r5
   47e64:	dfc00215 	stw	ra,8(sp)
   47e68:	00505900 	call	50590 <__malloc_lock>
   47e6c:	813fff17 	ldw	r4,-4(r16)
   47e70:	00bfff84 	movi	r2,-2
   47e74:	02400174 	movhi	r9,5
   47e78:	81bffe04 	addi	r6,r16,-8
   47e7c:	2084703a 	and	r2,r4,r2
   47e80:	4a4b1204 	addi	r9,r9,11336
   47e84:	308b883a 	add	r5,r6,r2
   47e88:	2a000117 	ldw	r8,4(r5)
   47e8c:	49c00217 	ldw	r7,8(r9)
   47e90:	00ffff04 	movi	r3,-4
   47e94:	40c6703a 	and	r3,r8,r3
   47e98:	39405326 	beq	r7,r5,47fe8 <_free_r+0x19c>
   47e9c:	28c00115 	stw	r3,4(r5)
   47ea0:	2100004c 	andi	r4,r4,1
   47ea4:	2000091e 	bne	r4,zero,47ecc <_free_r+0x80>
   47ea8:	81fffe17 	ldw	r7,-8(r16)
   47eac:	4a000204 	addi	r8,r9,8
   47eb0:	31cdc83a 	sub	r6,r6,r7
   47eb4:	31000217 	ldw	r4,8(r6)
   47eb8:	11c5883a 	add	r2,r2,r7
   47ebc:	22006126 	beq	r4,r8,48044 <_free_r+0x1f8>
   47ec0:	31c00317 	ldw	r7,12(r6)
   47ec4:	21c00315 	stw	r7,12(r4)
   47ec8:	39000215 	stw	r4,8(r7)
   47ecc:	28c9883a 	add	r4,r5,r3
   47ed0:	21c00117 	ldw	r7,4(r4)
   47ed4:	39c0004c 	andi	r7,r7,1
   47ed8:	38000d1e 	bne	r7,zero,47f10 <_free_r+0xc4>
   47edc:	29000217 	ldw	r4,8(r5)
   47ee0:	10c5883a 	add	r2,r2,r3
   47ee4:	00c00174 	movhi	r3,5
   47ee8:	18cb1404 	addi	r3,r3,11344
   47eec:	20c07526 	beq	r4,r3,480c4 <_free_r+0x278>
   47ef0:	29c00317 	ldw	r7,12(r5)
   47ef4:	11400054 	ori	r5,r2,1
   47ef8:	3087883a 	add	r3,r6,r2
   47efc:	21c00315 	stw	r7,12(r4)
   47f00:	39000215 	stw	r4,8(r7)
   47f04:	31400115 	stw	r5,4(r6)
   47f08:	18800015 	stw	r2,0(r3)
   47f0c:	00000406 	br	47f20 <_free_r+0xd4>
   47f10:	10c00054 	ori	r3,r2,1
   47f14:	30c00115 	stw	r3,4(r6)
   47f18:	3087883a 	add	r3,r6,r2
   47f1c:	18800015 	stw	r2,0(r3)
   47f20:	00c07fc4 	movi	r3,511
   47f24:	18801736 	bltu	r3,r2,47f84 <_free_r+0x138>
   47f28:	1004d0fa 	srli	r2,r2,3
   47f2c:	01400044 	movi	r5,1
   47f30:	49000117 	ldw	r4,4(r9)
   47f34:	1087883a 	add	r3,r2,r2
   47f38:	18c7883a 	add	r3,r3,r3
   47f3c:	1005d0ba 	srai	r2,r2,2
   47f40:	18c7883a 	add	r3,r3,r3
   47f44:	1a47883a 	add	r3,r3,r9
   47f48:	19c00217 	ldw	r7,8(r3)
   47f4c:	2884983a 	sll	r2,r5,r2
   47f50:	30c00315 	stw	r3,12(r6)
   47f54:	31c00215 	stw	r7,8(r6)
   47f58:	1104b03a 	or	r2,r2,r4
   47f5c:	19800215 	stw	r6,8(r3)
   47f60:	48800115 	stw	r2,4(r9)
   47f64:	39800315 	stw	r6,12(r7)
   47f68:	8809883a 	mov	r4,r17
   47f6c:	dfc00217 	ldw	ra,8(sp)
   47f70:	dc400117 	ldw	r17,4(sp)
   47f74:	dc000017 	ldw	r16,0(sp)
   47f78:	dec00304 	addi	sp,sp,12
   47f7c:	00505b01 	jmpi	505b0 <__malloc_unlock>
   47f80:	f800283a 	ret
   47f84:	1006d27a 	srli	r3,r2,9
   47f88:	01000104 	movi	r4,4
   47f8c:	20c04036 	bltu	r4,r3,48090 <_free_r+0x244>
   47f90:	1006d1ba 	srli	r3,r2,6
   47f94:	19400e04 	addi	r5,r3,56
   47f98:	2947883a 	add	r3,r5,r5
   47f9c:	18c7883a 	add	r3,r3,r3
   47fa0:	18c7883a 	add	r3,r3,r3
   47fa4:	1a49883a 	add	r4,r3,r9
   47fa8:	20c00217 	ldw	r3,8(r4)
   47fac:	01c00174 	movhi	r7,5
   47fb0:	39cb1204 	addi	r7,r7,11336
   47fb4:	19003b26 	beq	r3,r4,480a4 <_free_r+0x258>
   47fb8:	01ffff04 	movi	r7,-4
   47fbc:	19400117 	ldw	r5,4(r3)
   47fc0:	29ca703a 	and	r5,r5,r7
   47fc4:	1140022e 	bgeu	r2,r5,47fd0 <_free_r+0x184>
   47fc8:	18c00217 	ldw	r3,8(r3)
   47fcc:	20fffb1e 	bne	r4,r3,47fbc <__alt_data_end+0xfffcd63c>
   47fd0:	18800317 	ldw	r2,12(r3)
   47fd4:	30800315 	stw	r2,12(r6)
   47fd8:	30c00215 	stw	r3,8(r6)
   47fdc:	11800215 	stw	r6,8(r2)
   47fe0:	19800315 	stw	r6,12(r3)
   47fe4:	003fe006 	br	47f68 <__alt_data_end+0xfffcd5e8>
   47fe8:	2100004c 	andi	r4,r4,1
   47fec:	1885883a 	add	r2,r3,r2
   47ff0:	2000071e 	bne	r4,zero,48010 <_free_r+0x1c4>
   47ff4:	817ffe17 	ldw	r5,-8(r16)
   47ff8:	314dc83a 	sub	r6,r6,r5
   47ffc:	30c00317 	ldw	r3,12(r6)
   48000:	31000217 	ldw	r4,8(r6)
   48004:	1145883a 	add	r2,r2,r5
   48008:	20c00315 	stw	r3,12(r4)
   4800c:	19000215 	stw	r4,8(r3)
   48010:	10c00054 	ori	r3,r2,1
   48014:	30c00115 	stw	r3,4(r6)
   48018:	00c00174 	movhi	r3,5
   4801c:	18d09d04 	addi	r3,r3,17012
   48020:	18c00017 	ldw	r3,0(r3)
   48024:	49800215 	stw	r6,8(r9)
   48028:	10ffcf36 	bltu	r2,r3,47f68 <__alt_data_end+0xfffcd5e8>
   4802c:	00800174 	movhi	r2,5
   48030:	10978104 	addi	r2,r2,24068
   48034:	11400017 	ldw	r5,0(r2)
   48038:	8809883a 	mov	r4,r17
   4803c:	0047d280 	call	47d28 <_malloc_trim_r>
   48040:	003fc906 	br	47f68 <__alt_data_end+0xfffcd5e8>
   48044:	28c9883a 	add	r4,r5,r3
   48048:	21000117 	ldw	r4,4(r4)
   4804c:	2100004c 	andi	r4,r4,1
   48050:	20000a1e 	bne	r4,zero,4807c <_free_r+0x230>
   48054:	29000317 	ldw	r4,12(r5)
   48058:	29400217 	ldw	r5,8(r5)
   4805c:	10c5883a 	add	r2,r2,r3
   48060:	10c00054 	ori	r3,r2,1
   48064:	29000315 	stw	r4,12(r5)
   48068:	21400215 	stw	r5,8(r4)
   4806c:	30c00115 	stw	r3,4(r6)
   48070:	308d883a 	add	r6,r6,r2
   48074:	30800015 	stw	r2,0(r6)
   48078:	003fbb06 	br	47f68 <__alt_data_end+0xfffcd5e8>
   4807c:	10c00054 	ori	r3,r2,1
   48080:	30c00115 	stw	r3,4(r6)
   48084:	308d883a 	add	r6,r6,r2
   48088:	30800015 	stw	r2,0(r6)
   4808c:	003fb606 	br	47f68 <__alt_data_end+0xfffcd5e8>
   48090:	01000504 	movi	r4,20
   48094:	20c01436 	bltu	r4,r3,480e8 <_free_r+0x29c>
   48098:	194016c4 	addi	r5,r3,91
   4809c:	2947883a 	add	r3,r5,r5
   480a0:	003fbe06 	br	47f9c <__alt_data_end+0xfffcd61c>
   480a4:	280bd0ba 	srai	r5,r5,2
   480a8:	00800044 	movi	r2,1
   480ac:	39000117 	ldw	r4,4(r7)
   480b0:	114a983a 	sll	r5,r2,r5
   480b4:	1805883a 	mov	r2,r3
   480b8:	2908b03a 	or	r4,r5,r4
   480bc:	39000115 	stw	r4,4(r7)
   480c0:	003fc406 	br	47fd4 <__alt_data_end+0xfffcd654>
   480c4:	49800515 	stw	r6,20(r9)
   480c8:	49800415 	stw	r6,16(r9)
   480cc:	10c00054 	ori	r3,r2,1
   480d0:	31000315 	stw	r4,12(r6)
   480d4:	31000215 	stw	r4,8(r6)
   480d8:	30c00115 	stw	r3,4(r6)
   480dc:	308d883a 	add	r6,r6,r2
   480e0:	30800015 	stw	r2,0(r6)
   480e4:	003fa006 	br	47f68 <__alt_data_end+0xfffcd5e8>
   480e8:	01001504 	movi	r4,84
   480ec:	20c00436 	bltu	r4,r3,48100 <_free_r+0x2b4>
   480f0:	1006d33a 	srli	r3,r2,12
   480f4:	19401b84 	addi	r5,r3,110
   480f8:	2947883a 	add	r3,r5,r5
   480fc:	003fa706 	br	47f9c <__alt_data_end+0xfffcd61c>
   48100:	01005504 	movi	r4,340
   48104:	20c00436 	bltu	r4,r3,48118 <_free_r+0x2cc>
   48108:	1006d3fa 	srli	r3,r2,15
   4810c:	19401dc4 	addi	r5,r3,119
   48110:	2947883a 	add	r3,r5,r5
   48114:	003fa106 	br	47f9c <__alt_data_end+0xfffcd61c>
   48118:	01015504 	movi	r4,1364
   4811c:	20c00436 	bltu	r4,r3,48130 <_free_r+0x2e4>
   48120:	1006d4ba 	srli	r3,r2,18
   48124:	19401f04 	addi	r5,r3,124
   48128:	2947883a 	add	r3,r5,r5
   4812c:	003f9b06 	br	47f9c <__alt_data_end+0xfffcd61c>
   48130:	00c03f04 	movi	r3,252
   48134:	01401f84 	movi	r5,126
   48138:	003f9806 	br	47f9c <__alt_data_end+0xfffcd61c>

0004813c <_fwalk>:
   4813c:	defff804 	addi	sp,sp,-32
   48140:	dd400515 	stw	r21,20(sp)
   48144:	2540b804 	addi	r21,r4,736
   48148:	dd800615 	stw	r22,24(sp)
   4814c:	dd000415 	stw	r20,16(sp)
   48150:	dfc00715 	stw	ra,28(sp)
   48154:	dcc00315 	stw	r19,12(sp)
   48158:	dc800215 	stw	r18,8(sp)
   4815c:	dc400115 	stw	r17,4(sp)
   48160:	dc000015 	stw	r16,0(sp)
   48164:	2829883a 	mov	r20,r5
   48168:	002d883a 	mov	r22,zero
   4816c:	0047ce80 	call	47ce8 <__sfp_lock_acquire>
   48170:	a8001426 	beq	r21,zero,481c4 <_fwalk+0x88>
   48174:	04ffffc4 	movi	r19,-1
   48178:	ac400117 	ldw	r17,4(r21)
   4817c:	ac800217 	ldw	r18,8(r21)
   48180:	8c7fffc4 	addi	r17,r17,-1
   48184:	88000d16 	blt	r17,zero,481bc <_fwalk+0x80>
   48188:	94000304 	addi	r16,r18,12
   4818c:	94800384 	addi	r18,r18,14
   48190:	80c0000f 	ldh	r3,0(r16)
   48194:	8c7fffc4 	addi	r17,r17,-1
   48198:	813ffd04 	addi	r4,r16,-12
   4819c:	18000426 	beq	r3,zero,481b0 <_fwalk+0x74>
   481a0:	90c0000f 	ldh	r3,0(r18)
   481a4:	1cc00226 	beq	r3,r19,481b0 <_fwalk+0x74>
   481a8:	a03ee83a 	callr	r20
   481ac:	b0acb03a 	or	r22,r22,r2
   481b0:	84001a04 	addi	r16,r16,104
   481b4:	94801a04 	addi	r18,r18,104
   481b8:	8cfff51e 	bne	r17,r19,48190 <__alt_data_end+0xfffcd810>
   481bc:	ad400017 	ldw	r21,0(r21)
   481c0:	a83fed1e 	bne	r21,zero,48178 <__alt_data_end+0xfffcd7f8>
   481c4:	0047cec0 	call	47cec <__sfp_lock_release>
   481c8:	b005883a 	mov	r2,r22
   481cc:	dfc00717 	ldw	ra,28(sp)
   481d0:	dd800617 	ldw	r22,24(sp)
   481d4:	dd400517 	ldw	r21,20(sp)
   481d8:	dd000417 	ldw	r20,16(sp)
   481dc:	dcc00317 	ldw	r19,12(sp)
   481e0:	dc800217 	ldw	r18,8(sp)
   481e4:	dc400117 	ldw	r17,4(sp)
   481e8:	dc000017 	ldw	r16,0(sp)
   481ec:	dec00804 	addi	sp,sp,32
   481f0:	f800283a 	ret

000481f4 <_fwalk_reent>:
   481f4:	defff804 	addi	sp,sp,-32
   481f8:	dd400515 	stw	r21,20(sp)
   481fc:	2540b804 	addi	r21,r4,736
   48200:	dd800615 	stw	r22,24(sp)
   48204:	dd000415 	stw	r20,16(sp)
   48208:	dcc00315 	stw	r19,12(sp)
   4820c:	dfc00715 	stw	ra,28(sp)
   48210:	dc800215 	stw	r18,8(sp)
   48214:	dc400115 	stw	r17,4(sp)
   48218:	dc000015 	stw	r16,0(sp)
   4821c:	2027883a 	mov	r19,r4
   48220:	2829883a 	mov	r20,r5
   48224:	002d883a 	mov	r22,zero
   48228:	0047ce80 	call	47ce8 <__sfp_lock_acquire>
   4822c:	a8001326 	beq	r21,zero,4827c <_fwalk_reent+0x88>
   48230:	04bfffc4 	movi	r18,-1
   48234:	ac400117 	ldw	r17,4(r21)
   48238:	ac000217 	ldw	r16,8(r21)
   4823c:	8c7fffc4 	addi	r17,r17,-1
   48240:	88000c16 	blt	r17,zero,48274 <_fwalk_reent+0x80>
   48244:	84000304 	addi	r16,r16,12
   48248:	80c0000f 	ldh	r3,0(r16)
   4824c:	8c7fffc4 	addi	r17,r17,-1
   48250:	817ffd04 	addi	r5,r16,-12
   48254:	18000526 	beq	r3,zero,4826c <_fwalk_reent+0x78>
   48258:	80c0008f 	ldh	r3,2(r16)
   4825c:	9809883a 	mov	r4,r19
   48260:	1c800226 	beq	r3,r18,4826c <_fwalk_reent+0x78>
   48264:	a03ee83a 	callr	r20
   48268:	b0acb03a 	or	r22,r22,r2
   4826c:	84001a04 	addi	r16,r16,104
   48270:	8cbff51e 	bne	r17,r18,48248 <__alt_data_end+0xfffcd8c8>
   48274:	ad400017 	ldw	r21,0(r21)
   48278:	a83fee1e 	bne	r21,zero,48234 <__alt_data_end+0xfffcd8b4>
   4827c:	0047cec0 	call	47cec <__sfp_lock_release>
   48280:	b005883a 	mov	r2,r22
   48284:	dfc00717 	ldw	ra,28(sp)
   48288:	dd800617 	ldw	r22,24(sp)
   4828c:	dd400517 	ldw	r21,20(sp)
   48290:	dd000417 	ldw	r20,16(sp)
   48294:	dcc00317 	ldw	r19,12(sp)
   48298:	dc800217 	ldw	r18,8(sp)
   4829c:	dc400117 	ldw	r17,4(sp)
   482a0:	dc000017 	ldw	r16,0(sp)
   482a4:	dec00804 	addi	sp,sp,32
   482a8:	f800283a 	ret

000482ac <_setlocale_r>:
   482ac:	30001b26 	beq	r6,zero,4831c <_setlocale_r+0x70>
   482b0:	01400174 	movhi	r5,5
   482b4:	defffe04 	addi	sp,sp,-8
   482b8:	29494c04 	addi	r5,r5,9520
   482bc:	3009883a 	mov	r4,r6
   482c0:	dc000015 	stw	r16,0(sp)
   482c4:	dfc00115 	stw	ra,4(sp)
   482c8:	3021883a 	mov	r16,r6
   482cc:	004a0cc0 	call	4a0cc <strcmp>
   482d0:	1000061e 	bne	r2,zero,482ec <_setlocale_r+0x40>
   482d4:	00800174 	movhi	r2,5
   482d8:	10894b04 	addi	r2,r2,9516
   482dc:	dfc00117 	ldw	ra,4(sp)
   482e0:	dc000017 	ldw	r16,0(sp)
   482e4:	dec00204 	addi	sp,sp,8
   482e8:	f800283a 	ret
   482ec:	01400174 	movhi	r5,5
   482f0:	29494b04 	addi	r5,r5,9516
   482f4:	8009883a 	mov	r4,r16
   482f8:	004a0cc0 	call	4a0cc <strcmp>
   482fc:	103ff526 	beq	r2,zero,482d4 <__alt_data_end+0xfffcd954>
   48300:	01400174 	movhi	r5,5
   48304:	29493604 	addi	r5,r5,9432
   48308:	8009883a 	mov	r4,r16
   4830c:	004a0cc0 	call	4a0cc <strcmp>
   48310:	103ff026 	beq	r2,zero,482d4 <__alt_data_end+0xfffcd954>
   48314:	0005883a 	mov	r2,zero
   48318:	003ff006 	br	482dc <__alt_data_end+0xfffcd95c>
   4831c:	00800174 	movhi	r2,5
   48320:	10894b04 	addi	r2,r2,9516
   48324:	f800283a 	ret

00048328 <__locale_charset>:
   48328:	00800174 	movhi	r2,5
   4832c:	108afc04 	addi	r2,r2,11248
   48330:	f800283a 	ret

00048334 <__locale_mb_cur_max>:
   48334:	00800174 	movhi	r2,5
   48338:	10909b04 	addi	r2,r2,17004
   4833c:	10800017 	ldw	r2,0(r2)
   48340:	f800283a 	ret

00048344 <__locale_msgcharset>:
   48344:	00800174 	movhi	r2,5
   48348:	108af404 	addi	r2,r2,11216
   4834c:	f800283a 	ret

00048350 <__locale_cjk_lang>:
   48350:	0005883a 	mov	r2,zero
   48354:	f800283a 	ret

00048358 <_localeconv_r>:
   48358:	00800174 	movhi	r2,5
   4835c:	108b0404 	addi	r2,r2,11280
   48360:	f800283a 	ret

00048364 <setlocale>:
   48364:	00c00174 	movhi	r3,5
   48368:	18d09a04 	addi	r3,r3,17000
   4836c:	2005883a 	mov	r2,r4
   48370:	19000017 	ldw	r4,0(r3)
   48374:	280d883a 	mov	r6,r5
   48378:	100b883a 	mov	r5,r2
   4837c:	00482ac1 	jmpi	482ac <_setlocale_r>

00048380 <localeconv>:
   48380:	00800174 	movhi	r2,5
   48384:	108b0404 	addi	r2,r2,11280
   48388:	f800283a 	ret

0004838c <__smakebuf_r>:
   4838c:	2880030b 	ldhu	r2,12(r5)
   48390:	10c0008c 	andi	r3,r2,2
   48394:	1800401e 	bne	r3,zero,48498 <__smakebuf_r+0x10c>
   48398:	deffec04 	addi	sp,sp,-80
   4839c:	dc000f15 	stw	r16,60(sp)
   483a0:	2821883a 	mov	r16,r5
   483a4:	2940038f 	ldh	r5,14(r5)
   483a8:	dc401015 	stw	r17,64(sp)
   483ac:	dfc01315 	stw	ra,76(sp)
   483b0:	dcc01215 	stw	r19,72(sp)
   483b4:	dc801115 	stw	r18,68(sp)
   483b8:	2023883a 	mov	r17,r4
   483bc:	28001b16 	blt	r5,zero,4842c <__smakebuf_r+0xa0>
   483c0:	d80d883a 	mov	r6,sp
   483c4:	004bc700 	call	4bc70 <_fstat_r>
   483c8:	10001716 	blt	r2,zero,48428 <__smakebuf_r+0x9c>
   483cc:	d8800117 	ldw	r2,4(sp)
   483d0:	00e00014 	movui	r3,32768
   483d4:	10bc000c 	andi	r2,r2,61440
   483d8:	10c03726 	beq	r2,r3,484b8 <__smakebuf_r+0x12c>
   483dc:	80c0030b 	ldhu	r3,12(r16)
   483e0:	18c20014 	ori	r3,r3,2048
   483e4:	80c0030d 	sth	r3,12(r16)
   483e8:	00c80004 	movi	r3,8192
   483ec:	10c03c1e 	bne	r2,r3,484e0 <__smakebuf_r+0x154>
   483f0:	8140038f 	ldh	r5,14(r16)
   483f4:	8809883a 	mov	r4,r17
   483f8:	004c16c0 	call	4c16c <_isatty_r>
   483fc:	10004e26 	beq	r2,zero,48538 <__smakebuf_r+0x1ac>
   48400:	8080030b 	ldhu	r2,12(r16)
   48404:	04c00044 	movi	r19,1
   48408:	80c010c4 	addi	r3,r16,67
   4840c:	14c4b03a 	or	r2,r2,r19
   48410:	8080030d 	sth	r2,12(r16)
   48414:	80c00015 	stw	r3,0(r16)
   48418:	80c00415 	stw	r3,16(r16)
   4841c:	84c00515 	stw	r19,20(r16)
   48420:	04810004 	movi	r18,1024
   48424:	00000706 	br	48444 <__smakebuf_r+0xb8>
   48428:	8080030b 	ldhu	r2,12(r16)
   4842c:	10c0200c 	andi	r3,r2,128
   48430:	18001f1e 	bne	r3,zero,484b0 <__smakebuf_r+0x124>
   48434:	04810004 	movi	r18,1024
   48438:	10820014 	ori	r2,r2,2048
   4843c:	8080030d 	sth	r2,12(r16)
   48440:	0027883a 	mov	r19,zero
   48444:	8809883a 	mov	r4,r17
   48448:	900b883a 	mov	r5,r18
   4844c:	00485440 	call	48544 <_malloc_r>
   48450:	10002e26 	beq	r2,zero,4850c <__smakebuf_r+0x180>
   48454:	80c0030b 	ldhu	r3,12(r16)
   48458:	01000134 	movhi	r4,4
   4845c:	211e6604 	addi	r4,r4,31128
   48460:	89000f15 	stw	r4,60(r17)
   48464:	18c02014 	ori	r3,r3,128
   48468:	80c0030d 	sth	r3,12(r16)
   4846c:	80800015 	stw	r2,0(r16)
   48470:	80800415 	stw	r2,16(r16)
   48474:	84800515 	stw	r18,20(r16)
   48478:	98001c1e 	bne	r19,zero,484ec <__smakebuf_r+0x160>
   4847c:	dfc01317 	ldw	ra,76(sp)
   48480:	dcc01217 	ldw	r19,72(sp)
   48484:	dc801117 	ldw	r18,68(sp)
   48488:	dc401017 	ldw	r17,64(sp)
   4848c:	dc000f17 	ldw	r16,60(sp)
   48490:	dec01404 	addi	sp,sp,80
   48494:	f800283a 	ret
   48498:	288010c4 	addi	r2,r5,67
   4849c:	28800015 	stw	r2,0(r5)
   484a0:	28800415 	stw	r2,16(r5)
   484a4:	00800044 	movi	r2,1
   484a8:	28800515 	stw	r2,20(r5)
   484ac:	f800283a 	ret
   484b0:	04801004 	movi	r18,64
   484b4:	003fe006 	br	48438 <__alt_data_end+0xfffcdab8>
   484b8:	81000a17 	ldw	r4,40(r16)
   484bc:	00c00174 	movhi	r3,5
   484c0:	18e81a04 	addi	r3,r3,-24472
   484c4:	20ffc51e 	bne	r4,r3,483dc <__alt_data_end+0xfffcda5c>
   484c8:	80c0030b 	ldhu	r3,12(r16)
   484cc:	01010004 	movi	r4,1024
   484d0:	81001315 	stw	r4,76(r16)
   484d4:	1906b03a 	or	r3,r3,r4
   484d8:	80c0030d 	sth	r3,12(r16)
   484dc:	003fc206 	br	483e8 <__alt_data_end+0xfffcda68>
   484e0:	0027883a 	mov	r19,zero
   484e4:	04810004 	movi	r18,1024
   484e8:	003fd606 	br	48444 <__alt_data_end+0xfffcdac4>
   484ec:	8140038f 	ldh	r5,14(r16)
   484f0:	8809883a 	mov	r4,r17
   484f4:	004c16c0 	call	4c16c <_isatty_r>
   484f8:	103fe026 	beq	r2,zero,4847c <__alt_data_end+0xfffcdafc>
   484fc:	8080030b 	ldhu	r2,12(r16)
   48500:	10800054 	ori	r2,r2,1
   48504:	8080030d 	sth	r2,12(r16)
   48508:	003fdc06 	br	4847c <__alt_data_end+0xfffcdafc>
   4850c:	8080030b 	ldhu	r2,12(r16)
   48510:	10c0800c 	andi	r3,r2,512
   48514:	183fd91e 	bne	r3,zero,4847c <__alt_data_end+0xfffcdafc>
   48518:	10800094 	ori	r2,r2,2
   4851c:	80c010c4 	addi	r3,r16,67
   48520:	8080030d 	sth	r2,12(r16)
   48524:	00800044 	movi	r2,1
   48528:	80c00015 	stw	r3,0(r16)
   4852c:	80c00415 	stw	r3,16(r16)
   48530:	80800515 	stw	r2,20(r16)
   48534:	003fd106 	br	4847c <__alt_data_end+0xfffcdafc>
   48538:	04c00044 	movi	r19,1
   4853c:	04810004 	movi	r18,1024
   48540:	003fc006 	br	48444 <__alt_data_end+0xfffcdac4>

00048544 <_malloc_r>:
   48544:	defff504 	addi	sp,sp,-44
   48548:	dc800315 	stw	r18,12(sp)
   4854c:	dfc00a15 	stw	ra,40(sp)
   48550:	df000915 	stw	fp,36(sp)
   48554:	ddc00815 	stw	r23,32(sp)
   48558:	dd800715 	stw	r22,28(sp)
   4855c:	dd400615 	stw	r21,24(sp)
   48560:	dd000515 	stw	r20,20(sp)
   48564:	dcc00415 	stw	r19,16(sp)
   48568:	dc400215 	stw	r17,8(sp)
   4856c:	dc000115 	stw	r16,4(sp)
   48570:	288002c4 	addi	r2,r5,11
   48574:	00c00584 	movi	r3,22
   48578:	2025883a 	mov	r18,r4
   4857c:	18802a2e 	bgeu	r3,r2,48628 <_malloc_r+0xe4>
   48580:	047ffe04 	movi	r17,-8
   48584:	1462703a 	and	r17,r2,r17
   48588:	88009e16 	blt	r17,zero,48804 <_malloc_r+0x2c0>
   4858c:	89409d36 	bltu	r17,r5,48804 <_malloc_r+0x2c0>
   48590:	00505900 	call	50590 <__malloc_lock>
   48594:	00807dc4 	movi	r2,503
   48598:	14402736 	bltu	r2,r17,48638 <_malloc_r+0xf4>
   4859c:	8806d0fa 	srli	r3,r17,3
   485a0:	04c00174 	movhi	r19,5
   485a4:	9ccb1204 	addi	r19,r19,11336
   485a8:	18c5883a 	add	r2,r3,r3
   485ac:	1085883a 	add	r2,r2,r2
   485b0:	1085883a 	add	r2,r2,r2
   485b4:	9885883a 	add	r2,r19,r2
   485b8:	14000317 	ldw	r16,12(r2)
   485bc:	80814a26 	beq	r16,r2,48ae8 <_malloc_r+0x5a4>
   485c0:	80c00117 	ldw	r3,4(r16)
   485c4:	81000317 	ldw	r4,12(r16)
   485c8:	00bfff04 	movi	r2,-4
   485cc:	1884703a 	and	r2,r3,r2
   485d0:	81400217 	ldw	r5,8(r16)
   485d4:	8085883a 	add	r2,r16,r2
   485d8:	10c00117 	ldw	r3,4(r2)
   485dc:	29000315 	stw	r4,12(r5)
   485e0:	21400215 	stw	r5,8(r4)
   485e4:	18c00054 	ori	r3,r3,1
   485e8:	10c00115 	stw	r3,4(r2)
   485ec:	9009883a 	mov	r4,r18
   485f0:	00505b00 	call	505b0 <__malloc_unlock>
   485f4:	80800204 	addi	r2,r16,8
   485f8:	dfc00a17 	ldw	ra,40(sp)
   485fc:	df000917 	ldw	fp,36(sp)
   48600:	ddc00817 	ldw	r23,32(sp)
   48604:	dd800717 	ldw	r22,28(sp)
   48608:	dd400617 	ldw	r21,24(sp)
   4860c:	dd000517 	ldw	r20,20(sp)
   48610:	dcc00417 	ldw	r19,16(sp)
   48614:	dc800317 	ldw	r18,12(sp)
   48618:	dc400217 	ldw	r17,8(sp)
   4861c:	dc000117 	ldw	r16,4(sp)
   48620:	dec00b04 	addi	sp,sp,44
   48624:	f800283a 	ret
   48628:	04400404 	movi	r17,16
   4862c:	89407536 	bltu	r17,r5,48804 <_malloc_r+0x2c0>
   48630:	00505900 	call	50590 <__malloc_lock>
   48634:	003fd906 	br	4859c <__alt_data_end+0xfffcdc1c>
   48638:	8806d27a 	srli	r3,r17,9
   4863c:	18007526 	beq	r3,zero,48814 <_malloc_r+0x2d0>
   48640:	00800104 	movi	r2,4
   48644:	10c0ef36 	bltu	r2,r3,48a04 <_malloc_r+0x4c0>
   48648:	8806d1ba 	srli	r3,r17,6
   4864c:	19c00e04 	addi	r7,r3,56
   48650:	39cb883a 	add	r5,r7,r7
   48654:	04c00174 	movhi	r19,5
   48658:	294b883a 	add	r5,r5,r5
   4865c:	9ccb1204 	addi	r19,r19,11336
   48660:	294b883a 	add	r5,r5,r5
   48664:	994b883a 	add	r5,r19,r5
   48668:	2c000317 	ldw	r16,12(r5)
   4866c:	2c000e26 	beq	r5,r16,486a8 <_malloc_r+0x164>
   48670:	80800117 	ldw	r2,4(r16)
   48674:	01bfff04 	movi	r6,-4
   48678:	010003c4 	movi	r4,15
   4867c:	1184703a 	and	r2,r2,r6
   48680:	1447c83a 	sub	r3,r2,r17
   48684:	20c00716 	blt	r4,r3,486a4 <_malloc_r+0x160>
   48688:	1800650e 	bge	r3,zero,48820 <_malloc_r+0x2dc>
   4868c:	84000317 	ldw	r16,12(r16)
   48690:	2c000526 	beq	r5,r16,486a8 <_malloc_r+0x164>
   48694:	80800117 	ldw	r2,4(r16)
   48698:	1184703a 	and	r2,r2,r6
   4869c:	1447c83a 	sub	r3,r2,r17
   486a0:	20fff90e 	bge	r4,r3,48688 <__alt_data_end+0xfffcdd08>
   486a4:	39ffffc4 	addi	r7,r7,-1
   486a8:	38c00044 	addi	r3,r7,1
   486ac:	01800174 	movhi	r6,5
   486b0:	9c000417 	ldw	r16,16(r19)
   486b4:	318b1204 	addi	r6,r6,11336
   486b8:	32400204 	addi	r9,r6,8
   486bc:	82410326 	beq	r16,r9,48acc <_malloc_r+0x588>
   486c0:	81000117 	ldw	r4,4(r16)
   486c4:	00bfff04 	movi	r2,-4
   486c8:	208e703a 	and	r7,r4,r2
   486cc:	3c45c83a 	sub	r2,r7,r17
   486d0:	010003c4 	movi	r4,15
   486d4:	2080ee16 	blt	r4,r2,48a90 <_malloc_r+0x54c>
   486d8:	32400515 	stw	r9,20(r6)
   486dc:	32400415 	stw	r9,16(r6)
   486e0:	1000510e 	bge	r2,zero,48828 <_malloc_r+0x2e4>
   486e4:	00807fc4 	movi	r2,511
   486e8:	11c0ce36 	bltu	r2,r7,48a24 <_malloc_r+0x4e0>
   486ec:	3808d0fa 	srli	r4,r7,3
   486f0:	01c00044 	movi	r7,1
   486f4:	30800117 	ldw	r2,4(r6)
   486f8:	210b883a 	add	r5,r4,r4
   486fc:	294b883a 	add	r5,r5,r5
   48700:	2009d0ba 	srai	r4,r4,2
   48704:	294b883a 	add	r5,r5,r5
   48708:	298b883a 	add	r5,r5,r6
   4870c:	2a000217 	ldw	r8,8(r5)
   48710:	3908983a 	sll	r4,r7,r4
   48714:	81400315 	stw	r5,12(r16)
   48718:	82000215 	stw	r8,8(r16)
   4871c:	2088b03a 	or	r4,r4,r2
   48720:	2c000215 	stw	r16,8(r5)
   48724:	31000115 	stw	r4,4(r6)
   48728:	44000315 	stw	r16,12(r8)
   4872c:	1805d0ba 	srai	r2,r3,2
   48730:	01400044 	movi	r5,1
   48734:	288a983a 	sll	r5,r5,r2
   48738:	21404336 	bltu	r4,r5,48848 <_malloc_r+0x304>
   4873c:	2144703a 	and	r2,r4,r5
   48740:	10000a1e 	bne	r2,zero,4876c <_malloc_r+0x228>
   48744:	00bfff04 	movi	r2,-4
   48748:	294b883a 	add	r5,r5,r5
   4874c:	1886703a 	and	r3,r3,r2
   48750:	2144703a 	and	r2,r4,r5
   48754:	18c00104 	addi	r3,r3,4
   48758:	1000041e 	bne	r2,zero,4876c <_malloc_r+0x228>
   4875c:	294b883a 	add	r5,r5,r5
   48760:	2144703a 	and	r2,r4,r5
   48764:	18c00104 	addi	r3,r3,4
   48768:	103ffc26 	beq	r2,zero,4875c <__alt_data_end+0xfffcdddc>
   4876c:	023fff04 	movi	r8,-4
   48770:	01c003c4 	movi	r7,15
   48774:	18c5883a 	add	r2,r3,r3
   48778:	1085883a 	add	r2,r2,r2
   4877c:	1085883a 	add	r2,r2,r2
   48780:	9895883a 	add	r10,r19,r2
   48784:	52c00304 	addi	r11,r10,12
   48788:	1819883a 	mov	r12,r3
   4878c:	5c000017 	ldw	r16,0(r11)
   48790:	59bffd04 	addi	r6,r11,-12
   48794:	8180041e 	bne	r16,r6,487a8 <_malloc_r+0x264>
   48798:	0000ce06 	br	48ad4 <_malloc_r+0x590>
   4879c:	2000d70e 	bge	r4,zero,48afc <_malloc_r+0x5b8>
   487a0:	84000317 	ldw	r16,12(r16)
   487a4:	8180cb26 	beq	r16,r6,48ad4 <_malloc_r+0x590>
   487a8:	80800117 	ldw	r2,4(r16)
   487ac:	1204703a 	and	r2,r2,r8
   487b0:	1449c83a 	sub	r4,r2,r17
   487b4:	393ff90e 	bge	r7,r4,4879c <__alt_data_end+0xfffcde1c>
   487b8:	80800317 	ldw	r2,12(r16)
   487bc:	80c00217 	ldw	r3,8(r16)
   487c0:	89400054 	ori	r5,r17,1
   487c4:	81400115 	stw	r5,4(r16)
   487c8:	18800315 	stw	r2,12(r3)
   487cc:	10c00215 	stw	r3,8(r2)
   487d0:	8463883a 	add	r17,r16,r17
   487d4:	9c400515 	stw	r17,20(r19)
   487d8:	9c400415 	stw	r17,16(r19)
   487dc:	20800054 	ori	r2,r4,1
   487e0:	88800115 	stw	r2,4(r17)
   487e4:	8a400315 	stw	r9,12(r17)
   487e8:	8a400215 	stw	r9,8(r17)
   487ec:	8923883a 	add	r17,r17,r4
   487f0:	89000015 	stw	r4,0(r17)
   487f4:	9009883a 	mov	r4,r18
   487f8:	00505b00 	call	505b0 <__malloc_unlock>
   487fc:	80800204 	addi	r2,r16,8
   48800:	003f7d06 	br	485f8 <__alt_data_end+0xfffcdc78>
   48804:	00800304 	movi	r2,12
   48808:	90800015 	stw	r2,0(r18)
   4880c:	0005883a 	mov	r2,zero
   48810:	003f7906 	br	485f8 <__alt_data_end+0xfffcdc78>
   48814:	01401f84 	movi	r5,126
   48818:	01c00fc4 	movi	r7,63
   4881c:	003f8d06 	br	48654 <__alt_data_end+0xfffcdcd4>
   48820:	81000317 	ldw	r4,12(r16)
   48824:	003f6a06 	br	485d0 <__alt_data_end+0xfffcdc50>
   48828:	81c5883a 	add	r2,r16,r7
   4882c:	10c00117 	ldw	r3,4(r2)
   48830:	9009883a 	mov	r4,r18
   48834:	18c00054 	ori	r3,r3,1
   48838:	10c00115 	stw	r3,4(r2)
   4883c:	00505b00 	call	505b0 <__malloc_unlock>
   48840:	80800204 	addi	r2,r16,8
   48844:	003f6c06 	br	485f8 <__alt_data_end+0xfffcdc78>
   48848:	9c000217 	ldw	r16,8(r19)
   4884c:	00bfff04 	movi	r2,-4
   48850:	85800117 	ldw	r22,4(r16)
   48854:	b0ac703a 	and	r22,r22,r2
   48858:	b4400336 	bltu	r22,r17,48868 <_malloc_r+0x324>
   4885c:	b445c83a 	sub	r2,r22,r17
   48860:	00c003c4 	movi	r3,15
   48864:	18805d16 	blt	r3,r2,489dc <_malloc_r+0x498>
   48868:	05c00174 	movhi	r23,5
   4886c:	00800174 	movhi	r2,5
   48870:	bdd09c04 	addi	r23,r23,17008
   48874:	10978104 	addi	r2,r2,24068
   48878:	15400017 	ldw	r21,0(r2)
   4887c:	b9000017 	ldw	r4,0(r23)
   48880:	00ffffc4 	movi	r3,-1
   48884:	858d883a 	add	r6,r16,r22
   48888:	8d6b883a 	add	r21,r17,r21
   4888c:	20c0e426 	beq	r4,r3,48c20 <_malloc_r+0x6dc>
   48890:	ad4403c4 	addi	r21,r21,4111
   48894:	00fc0004 	movi	r3,-4096
   48898:	a8ea703a 	and	r21,r21,r3
   4889c:	9009883a 	mov	r4,r18
   488a0:	a80b883a 	mov	r5,r21
   488a4:	d9800015 	stw	r6,0(sp)
   488a8:	0049f3c0 	call	49f3c <_sbrk_r>
   488ac:	00ffffc4 	movi	r3,-1
   488b0:	1029883a 	mov	r20,r2
   488b4:	d9800017 	ldw	r6,0(sp)
   488b8:	10c0a426 	beq	r2,r3,48b4c <_malloc_r+0x608>
   488bc:	1180a236 	bltu	r2,r6,48b48 <_malloc_r+0x604>
   488c0:	070001b4 	movhi	fp,6
   488c4:	e73ecb04 	addi	fp,fp,-1236
   488c8:	e0c00017 	ldw	r3,0(fp)
   488cc:	a8c7883a 	add	r3,r21,r3
   488d0:	e0c00015 	stw	r3,0(fp)
   488d4:	3500da26 	beq	r6,r20,48c40 <_malloc_r+0x6fc>
   488d8:	b9000017 	ldw	r4,0(r23)
   488dc:	00bfffc4 	movi	r2,-1
   488e0:	2080e426 	beq	r4,r2,48c74 <_malloc_r+0x730>
   488e4:	a185c83a 	sub	r2,r20,r6
   488e8:	1885883a 	add	r2,r3,r2
   488ec:	e0800015 	stw	r2,0(fp)
   488f0:	a0c001cc 	andi	r3,r20,7
   488f4:	1800b526 	beq	r3,zero,48bcc <_malloc_r+0x688>
   488f8:	a0e9c83a 	sub	r20,r20,r3
   488fc:	00840204 	movi	r2,4104
   48900:	a5000204 	addi	r20,r20,8
   48904:	10c7c83a 	sub	r3,r2,r3
   48908:	a545883a 	add	r2,r20,r21
   4890c:	1083ffcc 	andi	r2,r2,4095
   48910:	18abc83a 	sub	r21,r3,r2
   48914:	9009883a 	mov	r4,r18
   48918:	a80b883a 	mov	r5,r21
   4891c:	0049f3c0 	call	49f3c <_sbrk_r>
   48920:	00ffffc4 	movi	r3,-1
   48924:	10c0d026 	beq	r2,r3,48c68 <_malloc_r+0x724>
   48928:	1507c83a 	sub	r3,r2,r20
   4892c:	a8c7883a 	add	r3,r21,r3
   48930:	18c00054 	ori	r3,r3,1
   48934:	e0800017 	ldw	r2,0(fp)
   48938:	9d000215 	stw	r20,8(r19)
   4893c:	a0c00115 	stw	r3,4(r20)
   48940:	a887883a 	add	r3,r21,r2
   48944:	e0c00015 	stw	r3,0(fp)
   48948:	84c00e26 	beq	r16,r19,48984 <_malloc_r+0x440>
   4894c:	018003c4 	movi	r6,15
   48950:	3580a02e 	bgeu	r6,r22,48bd4 <_malloc_r+0x690>
   48954:	81400117 	ldw	r5,4(r16)
   48958:	013ffe04 	movi	r4,-8
   4895c:	b0bffd04 	addi	r2,r22,-12
   48960:	1104703a 	and	r2,r2,r4
   48964:	2900004c 	andi	r4,r5,1
   48968:	1108b03a 	or	r4,r2,r4
   4896c:	81000115 	stw	r4,4(r16)
   48970:	01400144 	movi	r5,5
   48974:	8089883a 	add	r4,r16,r2
   48978:	21400115 	stw	r5,4(r4)
   4897c:	21400215 	stw	r5,8(r4)
   48980:	3080c036 	bltu	r6,r2,48c84 <_malloc_r+0x740>
   48984:	00800174 	movhi	r2,5
   48988:	10978004 	addi	r2,r2,24064
   4898c:	11000017 	ldw	r4,0(r2)
   48990:	20c0012e 	bgeu	r4,r3,48998 <_malloc_r+0x454>
   48994:	10c00015 	stw	r3,0(r2)
   48998:	00800174 	movhi	r2,5
   4899c:	10977f04 	addi	r2,r2,24060
   489a0:	11000017 	ldw	r4,0(r2)
   489a4:	9c000217 	ldw	r16,8(r19)
   489a8:	20c0012e 	bgeu	r4,r3,489b0 <_malloc_r+0x46c>
   489ac:	10c00015 	stw	r3,0(r2)
   489b0:	80c00117 	ldw	r3,4(r16)
   489b4:	00bfff04 	movi	r2,-4
   489b8:	1886703a 	and	r3,r3,r2
   489bc:	1c45c83a 	sub	r2,r3,r17
   489c0:	1c400236 	bltu	r3,r17,489cc <_malloc_r+0x488>
   489c4:	00c003c4 	movi	r3,15
   489c8:	18800416 	blt	r3,r2,489dc <_malloc_r+0x498>
   489cc:	9009883a 	mov	r4,r18
   489d0:	00505b00 	call	505b0 <__malloc_unlock>
   489d4:	0005883a 	mov	r2,zero
   489d8:	003f0706 	br	485f8 <__alt_data_end+0xfffcdc78>
   489dc:	88c00054 	ori	r3,r17,1
   489e0:	80c00115 	stw	r3,4(r16)
   489e4:	8463883a 	add	r17,r16,r17
   489e8:	10800054 	ori	r2,r2,1
   489ec:	9c400215 	stw	r17,8(r19)
   489f0:	88800115 	stw	r2,4(r17)
   489f4:	9009883a 	mov	r4,r18
   489f8:	00505b00 	call	505b0 <__malloc_unlock>
   489fc:	80800204 	addi	r2,r16,8
   48a00:	003efd06 	br	485f8 <__alt_data_end+0xfffcdc78>
   48a04:	00800504 	movi	r2,20
   48a08:	10c0482e 	bgeu	r2,r3,48b2c <_malloc_r+0x5e8>
   48a0c:	00801504 	movi	r2,84
   48a10:	10c06836 	bltu	r2,r3,48bb4 <_malloc_r+0x670>
   48a14:	8806d33a 	srli	r3,r17,12
   48a18:	19c01b84 	addi	r7,r3,110
   48a1c:	39cb883a 	add	r5,r7,r7
   48a20:	003f0c06 	br	48654 <__alt_data_end+0xfffcdcd4>
   48a24:	3804d27a 	srli	r2,r7,9
   48a28:	01000104 	movi	r4,4
   48a2c:	2080422e 	bgeu	r4,r2,48b38 <_malloc_r+0x5f4>
   48a30:	01000504 	movi	r4,20
   48a34:	20807c36 	bltu	r4,r2,48c28 <_malloc_r+0x6e4>
   48a38:	110016c4 	addi	r4,r2,91
   48a3c:	210b883a 	add	r5,r4,r4
   48a40:	294b883a 	add	r5,r5,r5
   48a44:	294b883a 	add	r5,r5,r5
   48a48:	994b883a 	add	r5,r19,r5
   48a4c:	28800217 	ldw	r2,8(r5)
   48a50:	02000174 	movhi	r8,5
   48a54:	420b1204 	addi	r8,r8,11336
   48a58:	11406326 	beq	r2,r5,48be8 <_malloc_r+0x6a4>
   48a5c:	01bfff04 	movi	r6,-4
   48a60:	11000117 	ldw	r4,4(r2)
   48a64:	2188703a 	and	r4,r4,r6
   48a68:	3900022e 	bgeu	r7,r4,48a74 <_malloc_r+0x530>
   48a6c:	10800217 	ldw	r2,8(r2)
   48a70:	28bffb1e 	bne	r5,r2,48a60 <__alt_data_end+0xfffce0e0>
   48a74:	11800317 	ldw	r6,12(r2)
   48a78:	99000117 	ldw	r4,4(r19)
   48a7c:	81800315 	stw	r6,12(r16)
   48a80:	80800215 	stw	r2,8(r16)
   48a84:	34000215 	stw	r16,8(r6)
   48a88:	14000315 	stw	r16,12(r2)
   48a8c:	003f2706 	br	4872c <__alt_data_end+0xfffcddac>
   48a90:	88c00054 	ori	r3,r17,1
   48a94:	80c00115 	stw	r3,4(r16)
   48a98:	8463883a 	add	r17,r16,r17
   48a9c:	34400515 	stw	r17,20(r6)
   48aa0:	34400415 	stw	r17,16(r6)
   48aa4:	10c00054 	ori	r3,r2,1
   48aa8:	8a400315 	stw	r9,12(r17)
   48aac:	8a400215 	stw	r9,8(r17)
   48ab0:	88c00115 	stw	r3,4(r17)
   48ab4:	88a3883a 	add	r17,r17,r2
   48ab8:	88800015 	stw	r2,0(r17)
   48abc:	9009883a 	mov	r4,r18
   48ac0:	00505b00 	call	505b0 <__malloc_unlock>
   48ac4:	80800204 	addi	r2,r16,8
   48ac8:	003ecb06 	br	485f8 <__alt_data_end+0xfffcdc78>
   48acc:	31000117 	ldw	r4,4(r6)
   48ad0:	003f1606 	br	4872c <__alt_data_end+0xfffcddac>
   48ad4:	63000044 	addi	r12,r12,1
   48ad8:	608000cc 	andi	r2,r12,3
   48adc:	5ac00204 	addi	r11,r11,8
   48ae0:	103f2a1e 	bne	r2,zero,4878c <__alt_data_end+0xfffcde0c>
   48ae4:	00002106 	br	48b6c <_malloc_r+0x628>
   48ae8:	80800204 	addi	r2,r16,8
   48aec:	84000517 	ldw	r16,20(r16)
   48af0:	143eb31e 	bne	r2,r16,485c0 <__alt_data_end+0xfffcdc40>
   48af4:	18c00084 	addi	r3,r3,2
   48af8:	003eec06 	br	486ac <__alt_data_end+0xfffcdd2c>
   48afc:	8085883a 	add	r2,r16,r2
   48b00:	10c00117 	ldw	r3,4(r2)
   48b04:	81000317 	ldw	r4,12(r16)
   48b08:	81400217 	ldw	r5,8(r16)
   48b0c:	18c00054 	ori	r3,r3,1
   48b10:	10c00115 	stw	r3,4(r2)
   48b14:	29000315 	stw	r4,12(r5)
   48b18:	21400215 	stw	r5,8(r4)
   48b1c:	9009883a 	mov	r4,r18
   48b20:	00505b00 	call	505b0 <__malloc_unlock>
   48b24:	80800204 	addi	r2,r16,8
   48b28:	003eb306 	br	485f8 <__alt_data_end+0xfffcdc78>
   48b2c:	19c016c4 	addi	r7,r3,91
   48b30:	39cb883a 	add	r5,r7,r7
   48b34:	003ec706 	br	48654 <__alt_data_end+0xfffcdcd4>
   48b38:	3804d1ba 	srli	r2,r7,6
   48b3c:	11000e04 	addi	r4,r2,56
   48b40:	210b883a 	add	r5,r4,r4
   48b44:	003fbe06 	br	48a40 <__alt_data_end+0xfffce0c0>
   48b48:	84ff5d26 	beq	r16,r19,488c0 <__alt_data_end+0xfffcdf40>
   48b4c:	9c000217 	ldw	r16,8(r19)
   48b50:	00bfff04 	movi	r2,-4
   48b54:	80c00117 	ldw	r3,4(r16)
   48b58:	1886703a 	and	r3,r3,r2
   48b5c:	003f9706 	br	489bc <__alt_data_end+0xfffce03c>
   48b60:	52800017 	ldw	r10,0(r10)
   48b64:	18ffffc4 	addi	r3,r3,-1
   48b68:	50805c1e 	bne	r10,r2,48cdc <_malloc_r+0x798>
   48b6c:	190000cc 	andi	r4,r3,3
   48b70:	50bffe04 	addi	r2,r10,-8
   48b74:	203ffa1e 	bne	r4,zero,48b60 <__alt_data_end+0xfffce1e0>
   48b78:	98800117 	ldw	r2,4(r19)
   48b7c:	0146303a 	nor	r3,zero,r5
   48b80:	1884703a 	and	r2,r3,r2
   48b84:	98800115 	stw	r2,4(r19)
   48b88:	294b883a 	add	r5,r5,r5
   48b8c:	117f2e36 	bltu	r2,r5,48848 <__alt_data_end+0xfffcdec8>
   48b90:	283f2d26 	beq	r5,zero,48848 <__alt_data_end+0xfffcdec8>
   48b94:	1146703a 	and	r3,r2,r5
   48b98:	1800521e 	bne	r3,zero,48ce4 <_malloc_r+0x7a0>
   48b9c:	6007883a 	mov	r3,r12
   48ba0:	294b883a 	add	r5,r5,r5
   48ba4:	1148703a 	and	r4,r2,r5
   48ba8:	18c00104 	addi	r3,r3,4
   48bac:	203ffc26 	beq	r4,zero,48ba0 <__alt_data_end+0xfffce220>
   48bb0:	003ef006 	br	48774 <__alt_data_end+0xfffcddf4>
   48bb4:	00805504 	movi	r2,340
   48bb8:	10c01336 	bltu	r2,r3,48c08 <_malloc_r+0x6c4>
   48bbc:	8806d3fa 	srli	r3,r17,15
   48bc0:	19c01dc4 	addi	r7,r3,119
   48bc4:	39cb883a 	add	r5,r7,r7
   48bc8:	003ea206 	br	48654 <__alt_data_end+0xfffcdcd4>
   48bcc:	00c40004 	movi	r3,4096
   48bd0:	003f4d06 	br	48908 <__alt_data_end+0xfffcdf88>
   48bd4:	00800044 	movi	r2,1
   48bd8:	a0800115 	stw	r2,4(r20)
   48bdc:	a021883a 	mov	r16,r20
   48be0:	0007883a 	mov	r3,zero
   48be4:	003f7506 	br	489bc <__alt_data_end+0xfffce03c>
   48be8:	200bd0ba 	srai	r5,r4,2
   48bec:	01800044 	movi	r6,1
   48bf0:	41000117 	ldw	r4,4(r8)
   48bf4:	314a983a 	sll	r5,r6,r5
   48bf8:	100d883a 	mov	r6,r2
   48bfc:	2908b03a 	or	r4,r5,r4
   48c00:	41000115 	stw	r4,4(r8)
   48c04:	003f9d06 	br	48a7c <__alt_data_end+0xfffce0fc>
   48c08:	00815504 	movi	r2,1364
   48c0c:	10c01336 	bltu	r2,r3,48c5c <_malloc_r+0x718>
   48c10:	8806d4ba 	srli	r3,r17,18
   48c14:	19c01f04 	addi	r7,r3,124
   48c18:	39cb883a 	add	r5,r7,r7
   48c1c:	003e8d06 	br	48654 <__alt_data_end+0xfffcdcd4>
   48c20:	ad400404 	addi	r21,r21,16
   48c24:	003f1d06 	br	4889c <__alt_data_end+0xfffcdf1c>
   48c28:	01001504 	movi	r4,84
   48c2c:	20801c36 	bltu	r4,r2,48ca0 <_malloc_r+0x75c>
   48c30:	3804d33a 	srli	r2,r7,12
   48c34:	11001b84 	addi	r4,r2,110
   48c38:	210b883a 	add	r5,r4,r4
   48c3c:	003f8006 	br	48a40 <__alt_data_end+0xfffce0c0>
   48c40:	3083ffcc 	andi	r2,r6,4095
   48c44:	103f241e 	bne	r2,zero,488d8 <__alt_data_end+0xfffcdf58>
   48c48:	99000217 	ldw	r4,8(r19)
   48c4c:	ad85883a 	add	r2,r21,r22
   48c50:	10800054 	ori	r2,r2,1
   48c54:	20800115 	stw	r2,4(r4)
   48c58:	003f4a06 	br	48984 <__alt_data_end+0xfffce004>
   48c5c:	01403f04 	movi	r5,252
   48c60:	01c01f84 	movi	r7,126
   48c64:	003e7b06 	br	48654 <__alt_data_end+0xfffcdcd4>
   48c68:	00c00044 	movi	r3,1
   48c6c:	002b883a 	mov	r21,zero
   48c70:	003f3006 	br	48934 <__alt_data_end+0xfffcdfb4>
   48c74:	00800174 	movhi	r2,5
   48c78:	10909c04 	addi	r2,r2,17008
   48c7c:	15000015 	stw	r20,0(r2)
   48c80:	003f1b06 	br	488f0 <__alt_data_end+0xfffcdf70>
   48c84:	9009883a 	mov	r4,r18
   48c88:	81400204 	addi	r5,r16,8
   48c8c:	0047e4c0 	call	47e4c <_free_r>
   48c90:	008001b4 	movhi	r2,6
   48c94:	10becb04 	addi	r2,r2,-1236
   48c98:	10c00017 	ldw	r3,0(r2)
   48c9c:	003f3906 	br	48984 <__alt_data_end+0xfffce004>
   48ca0:	01005504 	movi	r4,340
   48ca4:	20800436 	bltu	r4,r2,48cb8 <_malloc_r+0x774>
   48ca8:	3804d3fa 	srli	r2,r7,15
   48cac:	11001dc4 	addi	r4,r2,119
   48cb0:	210b883a 	add	r5,r4,r4
   48cb4:	003f6206 	br	48a40 <__alt_data_end+0xfffce0c0>
   48cb8:	01015504 	movi	r4,1364
   48cbc:	20800436 	bltu	r4,r2,48cd0 <_malloc_r+0x78c>
   48cc0:	3804d4ba 	srli	r2,r7,18
   48cc4:	11001f04 	addi	r4,r2,124
   48cc8:	210b883a 	add	r5,r4,r4
   48ccc:	003f5c06 	br	48a40 <__alt_data_end+0xfffce0c0>
   48cd0:	01403f04 	movi	r5,252
   48cd4:	01001f84 	movi	r4,126
   48cd8:	003f5906 	br	48a40 <__alt_data_end+0xfffce0c0>
   48cdc:	98800117 	ldw	r2,4(r19)
   48ce0:	003fa906 	br	48b88 <__alt_data_end+0xfffce208>
   48ce4:	6007883a 	mov	r3,r12
   48ce8:	003ea206 	br	48774 <__alt_data_end+0xfffcddf4>

00048cec <memchr>:
   48cec:	208000cc 	andi	r2,r4,3
   48cf0:	280f883a 	mov	r7,r5
   48cf4:	10003526 	beq	r2,zero,48dcc <memchr+0xe0>
   48cf8:	30bfffc4 	addi	r2,r6,-1
   48cfc:	30001b26 	beq	r6,zero,48d6c <memchr+0x80>
   48d00:	21800003 	ldbu	r6,0(r4)
   48d04:	28c03fcc 	andi	r3,r5,255
   48d08:	30c01a26 	beq	r6,r3,48d74 <memchr+0x88>
   48d0c:	180d883a 	mov	r6,r3
   48d10:	00000406 	br	48d24 <memchr+0x38>
   48d14:	10001526 	beq	r2,zero,48d6c <memchr+0x80>
   48d18:	20c00003 	ldbu	r3,0(r4)
   48d1c:	10bfffc4 	addi	r2,r2,-1
   48d20:	19801426 	beq	r3,r6,48d74 <memchr+0x88>
   48d24:	21000044 	addi	r4,r4,1
   48d28:	20c000cc 	andi	r3,r4,3
   48d2c:	183ff91e 	bne	r3,zero,48d14 <__alt_data_end+0xfffce394>
   48d30:	024000c4 	movi	r9,3
   48d34:	48801136 	bltu	r9,r2,48d7c <memchr+0x90>
   48d38:	10000c26 	beq	r2,zero,48d6c <memchr+0x80>
   48d3c:	20c00003 	ldbu	r3,0(r4)
   48d40:	29403fcc 	andi	r5,r5,255
   48d44:	19400b26 	beq	r3,r5,48d74 <memchr+0x88>
   48d48:	20c00044 	addi	r3,r4,1
   48d4c:	2085883a 	add	r2,r4,r2
   48d50:	39803fcc 	andi	r6,r7,255
   48d54:	00000306 	br	48d64 <memchr+0x78>
   48d58:	18c00044 	addi	r3,r3,1
   48d5c:	197fffc3 	ldbu	r5,-1(r3)
   48d60:	29800426 	beq	r5,r6,48d74 <memchr+0x88>
   48d64:	1809883a 	mov	r4,r3
   48d68:	18bffb1e 	bne	r3,r2,48d58 <__alt_data_end+0xfffce3d8>
   48d6c:	0005883a 	mov	r2,zero
   48d70:	f800283a 	ret
   48d74:	2005883a 	mov	r2,r4
   48d78:	f800283a 	ret
   48d7c:	28c03fcc 	andi	r3,r5,255
   48d80:	1810923a 	slli	r8,r3,8
   48d84:	02ffbff4 	movhi	r11,65279
   48d88:	02a02074 	movhi	r10,32897
   48d8c:	40c6b03a 	or	r3,r8,r3
   48d90:	1810943a 	slli	r8,r3,16
   48d94:	5affbfc4 	addi	r11,r11,-257
   48d98:	52a02004 	addi	r10,r10,-32640
   48d9c:	40d0b03a 	or	r8,r8,r3
   48da0:	20c00017 	ldw	r3,0(r4)
   48da4:	40c6f03a 	xor	r3,r8,r3
   48da8:	1acd883a 	add	r6,r3,r11
   48dac:	00c6303a 	nor	r3,zero,r3
   48db0:	30c6703a 	and	r3,r6,r3
   48db4:	1a86703a 	and	r3,r3,r10
   48db8:	183fdf1e 	bne	r3,zero,48d38 <__alt_data_end+0xfffce3b8>
   48dbc:	10bfff04 	addi	r2,r2,-4
   48dc0:	21000104 	addi	r4,r4,4
   48dc4:	48bff636 	bltu	r9,r2,48da0 <__alt_data_end+0xfffce420>
   48dc8:	003fdb06 	br	48d38 <__alt_data_end+0xfffce3b8>
   48dcc:	3005883a 	mov	r2,r6
   48dd0:	003fd706 	br	48d30 <__alt_data_end+0xfffce3b0>

00048dd4 <_Balloc>:
   48dd4:	20801317 	ldw	r2,76(r4)
   48dd8:	defffc04 	addi	sp,sp,-16
   48ddc:	dc400115 	stw	r17,4(sp)
   48de0:	dc000015 	stw	r16,0(sp)
   48de4:	dfc00315 	stw	ra,12(sp)
   48de8:	dc800215 	stw	r18,8(sp)
   48dec:	2023883a 	mov	r17,r4
   48df0:	2821883a 	mov	r16,r5
   48df4:	10000f26 	beq	r2,zero,48e34 <_Balloc+0x60>
   48df8:	8407883a 	add	r3,r16,r16
   48dfc:	18c7883a 	add	r3,r3,r3
   48e00:	10c7883a 	add	r3,r2,r3
   48e04:	18800017 	ldw	r2,0(r3)
   48e08:	10001126 	beq	r2,zero,48e50 <_Balloc+0x7c>
   48e0c:	11000017 	ldw	r4,0(r2)
   48e10:	19000015 	stw	r4,0(r3)
   48e14:	10000415 	stw	zero,16(r2)
   48e18:	10000315 	stw	zero,12(r2)
   48e1c:	dfc00317 	ldw	ra,12(sp)
   48e20:	dc800217 	ldw	r18,8(sp)
   48e24:	dc400117 	ldw	r17,4(sp)
   48e28:	dc000017 	ldw	r16,0(sp)
   48e2c:	dec00404 	addi	sp,sp,16
   48e30:	f800283a 	ret
   48e34:	01400104 	movi	r5,4
   48e38:	01800844 	movi	r6,33
   48e3c:	004b8bc0 	call	4b8bc <_calloc_r>
   48e40:	88801315 	stw	r2,76(r17)
   48e44:	103fec1e 	bne	r2,zero,48df8 <__alt_data_end+0xfffce478>
   48e48:	0005883a 	mov	r2,zero
   48e4c:	003ff306 	br	48e1c <__alt_data_end+0xfffce49c>
   48e50:	01400044 	movi	r5,1
   48e54:	2c24983a 	sll	r18,r5,r16
   48e58:	8809883a 	mov	r4,r17
   48e5c:	91800144 	addi	r6,r18,5
   48e60:	318d883a 	add	r6,r6,r6
   48e64:	318d883a 	add	r6,r6,r6
   48e68:	004b8bc0 	call	4b8bc <_calloc_r>
   48e6c:	103ff626 	beq	r2,zero,48e48 <__alt_data_end+0xfffce4c8>
   48e70:	14000115 	stw	r16,4(r2)
   48e74:	14800215 	stw	r18,8(r2)
   48e78:	003fe606 	br	48e14 <__alt_data_end+0xfffce494>

00048e7c <_Bfree>:
   48e7c:	28000826 	beq	r5,zero,48ea0 <_Bfree+0x24>
   48e80:	28c00117 	ldw	r3,4(r5)
   48e84:	20801317 	ldw	r2,76(r4)
   48e88:	18c7883a 	add	r3,r3,r3
   48e8c:	18c7883a 	add	r3,r3,r3
   48e90:	10c5883a 	add	r2,r2,r3
   48e94:	10c00017 	ldw	r3,0(r2)
   48e98:	28c00015 	stw	r3,0(r5)
   48e9c:	11400015 	stw	r5,0(r2)
   48ea0:	f800283a 	ret

00048ea4 <__multadd>:
   48ea4:	defffa04 	addi	sp,sp,-24
   48ea8:	dc000115 	stw	r16,4(sp)
   48eac:	2c000417 	ldw	r16,16(r5)
   48eb0:	dc800315 	stw	r18,12(sp)
   48eb4:	dc400215 	stw	r17,8(sp)
   48eb8:	dfc00515 	stw	ra,20(sp)
   48ebc:	dcc00415 	stw	r19,16(sp)
   48ec0:	2823883a 	mov	r17,r5
   48ec4:	2025883a 	mov	r18,r4
   48ec8:	2a400504 	addi	r9,r5,20
   48ecc:	0015883a 	mov	r10,zero
   48ed0:	4a000017 	ldw	r8,0(r9)
   48ed4:	4a400104 	addi	r9,r9,4
   48ed8:	52800044 	addi	r10,r10,1
   48edc:	40ffffcc 	andi	r3,r8,65535
   48ee0:	1987383a 	mul	r3,r3,r6
   48ee4:	4010d43a 	srli	r8,r8,16
   48ee8:	19cf883a 	add	r7,r3,r7
   48eec:	4191383a 	mul	r8,r8,r6
   48ef0:	3816d43a 	srli	r11,r7,16
   48ef4:	38ffffcc 	andi	r3,r7,65535
   48ef8:	5a0f883a 	add	r7,r11,r8
   48efc:	3810943a 	slli	r8,r7,16
   48f00:	380ed43a 	srli	r7,r7,16
   48f04:	40c7883a 	add	r3,r8,r3
   48f08:	48ffff15 	stw	r3,-4(r9)
   48f0c:	543ff016 	blt	r10,r16,48ed0 <__alt_data_end+0xfffce550>
   48f10:	38000926 	beq	r7,zero,48f38 <__multadd+0x94>
   48f14:	88800217 	ldw	r2,8(r17)
   48f18:	80800f0e 	bge	r16,r2,48f58 <__multadd+0xb4>
   48f1c:	80800144 	addi	r2,r16,5
   48f20:	1085883a 	add	r2,r2,r2
   48f24:	1085883a 	add	r2,r2,r2
   48f28:	8885883a 	add	r2,r17,r2
   48f2c:	11c00015 	stw	r7,0(r2)
   48f30:	84000044 	addi	r16,r16,1
   48f34:	8c000415 	stw	r16,16(r17)
   48f38:	8805883a 	mov	r2,r17
   48f3c:	dfc00517 	ldw	ra,20(sp)
   48f40:	dcc00417 	ldw	r19,16(sp)
   48f44:	dc800317 	ldw	r18,12(sp)
   48f48:	dc400217 	ldw	r17,8(sp)
   48f4c:	dc000117 	ldw	r16,4(sp)
   48f50:	dec00604 	addi	sp,sp,24
   48f54:	f800283a 	ret
   48f58:	89400117 	ldw	r5,4(r17)
   48f5c:	9009883a 	mov	r4,r18
   48f60:	d9c00015 	stw	r7,0(sp)
   48f64:	29400044 	addi	r5,r5,1
   48f68:	0048dd40 	call	48dd4 <_Balloc>
   48f6c:	89800417 	ldw	r6,16(r17)
   48f70:	89400304 	addi	r5,r17,12
   48f74:	11000304 	addi	r4,r2,12
   48f78:	31800084 	addi	r6,r6,2
   48f7c:	318d883a 	add	r6,r6,r6
   48f80:	318d883a 	add	r6,r6,r6
   48f84:	1027883a 	mov	r19,r2
   48f88:	00438e80 	call	438e8 <memcpy>
   48f8c:	89000117 	ldw	r4,4(r17)
   48f90:	90c01317 	ldw	r3,76(r18)
   48f94:	d9c00017 	ldw	r7,0(sp)
   48f98:	2109883a 	add	r4,r4,r4
   48f9c:	2109883a 	add	r4,r4,r4
   48fa0:	1907883a 	add	r3,r3,r4
   48fa4:	18800017 	ldw	r2,0(r3)
   48fa8:	88800015 	stw	r2,0(r17)
   48fac:	1c400015 	stw	r17,0(r3)
   48fb0:	9823883a 	mov	r17,r19
   48fb4:	003fd906 	br	48f1c <__alt_data_end+0xfffce59c>

00048fb8 <__s2b>:
   48fb8:	defff904 	addi	sp,sp,-28
   48fbc:	dc400115 	stw	r17,4(sp)
   48fc0:	dc000015 	stw	r16,0(sp)
   48fc4:	2023883a 	mov	r17,r4
   48fc8:	2821883a 	mov	r16,r5
   48fcc:	39000204 	addi	r4,r7,8
   48fd0:	01400244 	movi	r5,9
   48fd4:	dcc00315 	stw	r19,12(sp)
   48fd8:	dc800215 	stw	r18,8(sp)
   48fdc:	dfc00615 	stw	ra,24(sp)
   48fe0:	dd400515 	stw	r21,20(sp)
   48fe4:	dd000415 	stw	r20,16(sp)
   48fe8:	3825883a 	mov	r18,r7
   48fec:	3027883a 	mov	r19,r6
   48ff0:	004d7300 	call	4d730 <__divsi3>
   48ff4:	00c00044 	movi	r3,1
   48ff8:	000b883a 	mov	r5,zero
   48ffc:	1880030e 	bge	r3,r2,4900c <__s2b+0x54>
   49000:	18c7883a 	add	r3,r3,r3
   49004:	29400044 	addi	r5,r5,1
   49008:	18bffd16 	blt	r3,r2,49000 <__alt_data_end+0xfffce680>
   4900c:	8809883a 	mov	r4,r17
   49010:	0048dd40 	call	48dd4 <_Balloc>
   49014:	d8c00717 	ldw	r3,28(sp)
   49018:	10c00515 	stw	r3,20(r2)
   4901c:	00c00044 	movi	r3,1
   49020:	10c00415 	stw	r3,16(r2)
   49024:	00c00244 	movi	r3,9
   49028:	1cc0210e 	bge	r3,r19,490b0 <__s2b+0xf8>
   4902c:	80eb883a 	add	r21,r16,r3
   49030:	a829883a 	mov	r20,r21
   49034:	84e1883a 	add	r16,r16,r19
   49038:	a1c00007 	ldb	r7,0(r20)
   4903c:	8809883a 	mov	r4,r17
   49040:	a5000044 	addi	r20,r20,1
   49044:	100b883a 	mov	r5,r2
   49048:	01800284 	movi	r6,10
   4904c:	39fff404 	addi	r7,r7,-48
   49050:	0048ea40 	call	48ea4 <__multadd>
   49054:	a43ff81e 	bne	r20,r16,49038 <__alt_data_end+0xfffce6b8>
   49058:	ace1883a 	add	r16,r21,r19
   4905c:	843ffe04 	addi	r16,r16,-8
   49060:	9c800a0e 	bge	r19,r18,4908c <__s2b+0xd4>
   49064:	94e5c83a 	sub	r18,r18,r19
   49068:	84a5883a 	add	r18,r16,r18
   4906c:	81c00007 	ldb	r7,0(r16)
   49070:	8809883a 	mov	r4,r17
   49074:	84000044 	addi	r16,r16,1
   49078:	100b883a 	mov	r5,r2
   4907c:	01800284 	movi	r6,10
   49080:	39fff404 	addi	r7,r7,-48
   49084:	0048ea40 	call	48ea4 <__multadd>
   49088:	84bff81e 	bne	r16,r18,4906c <__alt_data_end+0xfffce6ec>
   4908c:	dfc00617 	ldw	ra,24(sp)
   49090:	dd400517 	ldw	r21,20(sp)
   49094:	dd000417 	ldw	r20,16(sp)
   49098:	dcc00317 	ldw	r19,12(sp)
   4909c:	dc800217 	ldw	r18,8(sp)
   490a0:	dc400117 	ldw	r17,4(sp)
   490a4:	dc000017 	ldw	r16,0(sp)
   490a8:	dec00704 	addi	sp,sp,28
   490ac:	f800283a 	ret
   490b0:	84000284 	addi	r16,r16,10
   490b4:	1827883a 	mov	r19,r3
   490b8:	003fe906 	br	49060 <__alt_data_end+0xfffce6e0>

000490bc <__hi0bits>:
   490bc:	20bfffec 	andhi	r2,r4,65535
   490c0:	1000141e 	bne	r2,zero,49114 <__hi0bits+0x58>
   490c4:	2008943a 	slli	r4,r4,16
   490c8:	00800404 	movi	r2,16
   490cc:	20ffc02c 	andhi	r3,r4,65280
   490d0:	1800021e 	bne	r3,zero,490dc <__hi0bits+0x20>
   490d4:	2008923a 	slli	r4,r4,8
   490d8:	10800204 	addi	r2,r2,8
   490dc:	20fc002c 	andhi	r3,r4,61440
   490e0:	1800021e 	bne	r3,zero,490ec <__hi0bits+0x30>
   490e4:	2008913a 	slli	r4,r4,4
   490e8:	10800104 	addi	r2,r2,4
   490ec:	20f0002c 	andhi	r3,r4,49152
   490f0:	1800031e 	bne	r3,zero,49100 <__hi0bits+0x44>
   490f4:	2109883a 	add	r4,r4,r4
   490f8:	10800084 	addi	r2,r2,2
   490fc:	2109883a 	add	r4,r4,r4
   49100:	20000316 	blt	r4,zero,49110 <__hi0bits+0x54>
   49104:	2110002c 	andhi	r4,r4,16384
   49108:	2000041e 	bne	r4,zero,4911c <__hi0bits+0x60>
   4910c:	00800804 	movi	r2,32
   49110:	f800283a 	ret
   49114:	0005883a 	mov	r2,zero
   49118:	003fec06 	br	490cc <__alt_data_end+0xfffce74c>
   4911c:	10800044 	addi	r2,r2,1
   49120:	f800283a 	ret

00049124 <__lo0bits>:
   49124:	20c00017 	ldw	r3,0(r4)
   49128:	188001cc 	andi	r2,r3,7
   4912c:	10000826 	beq	r2,zero,49150 <__lo0bits+0x2c>
   49130:	1880004c 	andi	r2,r3,1
   49134:	1000211e 	bne	r2,zero,491bc <__lo0bits+0x98>
   49138:	1880008c 	andi	r2,r3,2
   4913c:	1000211e 	bne	r2,zero,491c4 <__lo0bits+0xa0>
   49140:	1806d0ba 	srli	r3,r3,2
   49144:	00800084 	movi	r2,2
   49148:	20c00015 	stw	r3,0(r4)
   4914c:	f800283a 	ret
   49150:	18bfffcc 	andi	r2,r3,65535
   49154:	10001326 	beq	r2,zero,491a4 <__lo0bits+0x80>
   49158:	0005883a 	mov	r2,zero
   4915c:	19403fcc 	andi	r5,r3,255
   49160:	2800021e 	bne	r5,zero,4916c <__lo0bits+0x48>
   49164:	1806d23a 	srli	r3,r3,8
   49168:	10800204 	addi	r2,r2,8
   4916c:	194003cc 	andi	r5,r3,15
   49170:	2800021e 	bne	r5,zero,4917c <__lo0bits+0x58>
   49174:	1806d13a 	srli	r3,r3,4
   49178:	10800104 	addi	r2,r2,4
   4917c:	194000cc 	andi	r5,r3,3
   49180:	2800021e 	bne	r5,zero,4918c <__lo0bits+0x68>
   49184:	1806d0ba 	srli	r3,r3,2
   49188:	10800084 	addi	r2,r2,2
   4918c:	1940004c 	andi	r5,r3,1
   49190:	2800081e 	bne	r5,zero,491b4 <__lo0bits+0x90>
   49194:	1806d07a 	srli	r3,r3,1
   49198:	1800051e 	bne	r3,zero,491b0 <__lo0bits+0x8c>
   4919c:	00800804 	movi	r2,32
   491a0:	f800283a 	ret
   491a4:	1806d43a 	srli	r3,r3,16
   491a8:	00800404 	movi	r2,16
   491ac:	003feb06 	br	4915c <__alt_data_end+0xfffce7dc>
   491b0:	10800044 	addi	r2,r2,1
   491b4:	20c00015 	stw	r3,0(r4)
   491b8:	f800283a 	ret
   491bc:	0005883a 	mov	r2,zero
   491c0:	f800283a 	ret
   491c4:	1806d07a 	srli	r3,r3,1
   491c8:	00800044 	movi	r2,1
   491cc:	20c00015 	stw	r3,0(r4)
   491d0:	f800283a 	ret

000491d4 <__i2b>:
   491d4:	defffd04 	addi	sp,sp,-12
   491d8:	dc000015 	stw	r16,0(sp)
   491dc:	04000044 	movi	r16,1
   491e0:	dc400115 	stw	r17,4(sp)
   491e4:	2823883a 	mov	r17,r5
   491e8:	800b883a 	mov	r5,r16
   491ec:	dfc00215 	stw	ra,8(sp)
   491f0:	0048dd40 	call	48dd4 <_Balloc>
   491f4:	14400515 	stw	r17,20(r2)
   491f8:	14000415 	stw	r16,16(r2)
   491fc:	dfc00217 	ldw	ra,8(sp)
   49200:	dc400117 	ldw	r17,4(sp)
   49204:	dc000017 	ldw	r16,0(sp)
   49208:	dec00304 	addi	sp,sp,12
   4920c:	f800283a 	ret

00049210 <__multiply>:
   49210:	defffa04 	addi	sp,sp,-24
   49214:	dcc00315 	stw	r19,12(sp)
   49218:	dc800215 	stw	r18,8(sp)
   4921c:	2cc00417 	ldw	r19,16(r5)
   49220:	34800417 	ldw	r18,16(r6)
   49224:	dd000415 	stw	r20,16(sp)
   49228:	dc400115 	stw	r17,4(sp)
   4922c:	dfc00515 	stw	ra,20(sp)
   49230:	dc000015 	stw	r16,0(sp)
   49234:	2829883a 	mov	r20,r5
   49238:	3023883a 	mov	r17,r6
   4923c:	9c807016 	blt	r19,r18,49400 <__multiply+0x1f0>
   49240:	9005883a 	mov	r2,r18
   49244:	9825883a 	mov	r18,r19
   49248:	1027883a 	mov	r19,r2
   4924c:	a0800217 	ldw	r2,8(r20)
   49250:	94e1883a 	add	r16,r18,r19
   49254:	a1400117 	ldw	r5,4(r20)
   49258:	1400010e 	bge	r2,r16,49260 <__multiply+0x50>
   4925c:	29400044 	addi	r5,r5,1
   49260:	0048dd40 	call	48dd4 <_Balloc>
   49264:	8417883a 	add	r11,r16,r16
   49268:	13000504 	addi	r12,r2,20
   4926c:	5ad7883a 	add	r11,r11,r11
   49270:	62d7883a 	add	r11,r12,r11
   49274:	6007883a 	mov	r3,r12
   49278:	62c0032e 	bgeu	r12,r11,49288 <__multiply+0x78>
   4927c:	18000015 	stw	zero,0(r3)
   49280:	18c00104 	addi	r3,r3,4
   49284:	1afffd36 	bltu	r3,r11,4927c <__alt_data_end+0xfffce8fc>
   49288:	9ce7883a 	add	r19,r19,r19
   4928c:	94a5883a 	add	r18,r18,r18
   49290:	89800504 	addi	r6,r17,20
   49294:	9ce7883a 	add	r19,r19,r19
   49298:	a3800504 	addi	r14,r20,20
   4929c:	94a5883a 	add	r18,r18,r18
   492a0:	34db883a 	add	r13,r6,r19
   492a4:	7495883a 	add	r10,r14,r18
   492a8:	3340422e 	bgeu	r6,r13,493b4 <__multiply+0x1a4>
   492ac:	34400017 	ldw	r17,0(r6)
   492b0:	8cbfffcc 	andi	r18,r17,65535
   492b4:	90001b26 	beq	r18,zero,49324 <__multiply+0x114>
   492b8:	6013883a 	mov	r9,r12
   492bc:	7023883a 	mov	r17,r14
   492c0:	0011883a 	mov	r8,zero
   492c4:	88c00017 	ldw	r3,0(r17)
   492c8:	4bc00017 	ldw	r15,0(r9)
   492cc:	8c400104 	addi	r17,r17,4
   492d0:	19ffffcc 	andi	r7,r3,65535
   492d4:	3c8f383a 	mul	r7,r7,r18
   492d8:	1808d43a 	srli	r4,r3,16
   492dc:	797fffcc 	andi	r5,r15,65535
   492e0:	29cb883a 	add	r5,r5,r7
   492e4:	2a0b883a 	add	r5,r5,r8
   492e8:	2489383a 	mul	r4,r4,r18
   492ec:	7806d43a 	srli	r3,r15,16
   492f0:	2810d43a 	srli	r8,r5,16
   492f4:	297fffcc 	andi	r5,r5,65535
   492f8:	1907883a 	add	r3,r3,r4
   492fc:	1a07883a 	add	r3,r3,r8
   49300:	1808943a 	slli	r4,r3,16
   49304:	480f883a 	mov	r7,r9
   49308:	1810d43a 	srli	r8,r3,16
   4930c:	214ab03a 	or	r5,r4,r5
   49310:	49400015 	stw	r5,0(r9)
   49314:	4a400104 	addi	r9,r9,4
   49318:	8abfea36 	bltu	r17,r10,492c4 <__alt_data_end+0xfffce944>
   4931c:	3a000115 	stw	r8,4(r7)
   49320:	34400017 	ldw	r17,0(r6)
   49324:	8822d43a 	srli	r17,r17,16
   49328:	88001f26 	beq	r17,zero,493a8 <__multiply+0x198>
   4932c:	60c00017 	ldw	r3,0(r12)
   49330:	7013883a 	mov	r9,r14
   49334:	601f883a 	mov	r15,r12
   49338:	1811883a 	mov	r8,r3
   4933c:	6027883a 	mov	r19,r12
   49340:	000f883a 	mov	r7,zero
   49344:	00000106 	br	4934c <__multiply+0x13c>
   49348:	9027883a 	mov	r19,r18
   4934c:	4940000b 	ldhu	r5,0(r9)
   49350:	4010d43a 	srli	r8,r8,16
   49354:	193fffcc 	andi	r4,r3,65535
   49358:	2c4b383a 	mul	r5,r5,r17
   4935c:	7bc00104 	addi	r15,r15,4
   49360:	4a400104 	addi	r9,r9,4
   49364:	2a0b883a 	add	r5,r5,r8
   49368:	29cb883a 	add	r5,r5,r7
   4936c:	2806943a 	slli	r3,r5,16
   49370:	9c800104 	addi	r18,r19,4
   49374:	280ad43a 	srli	r5,r5,16
   49378:	1908b03a 	or	r4,r3,r4
   4937c:	793fff15 	stw	r4,-4(r15)
   49380:	48ffff17 	ldw	r3,-4(r9)
   49384:	92000017 	ldw	r8,0(r18)
   49388:	1806d43a 	srli	r3,r3,16
   4938c:	413fffcc 	andi	r4,r8,65535
   49390:	1c47383a 	mul	r3,r3,r17
   49394:	1907883a 	add	r3,r3,r4
   49398:	1947883a 	add	r3,r3,r5
   4939c:	180ed43a 	srli	r7,r3,16
   493a0:	4abfe936 	bltu	r9,r10,49348 <__alt_data_end+0xfffce9c8>
   493a4:	98c00115 	stw	r3,4(r19)
   493a8:	31800104 	addi	r6,r6,4
   493ac:	63000104 	addi	r12,r12,4
   493b0:	337fbe36 	bltu	r6,r13,492ac <__alt_data_end+0xfffce92c>
   493b4:	0400090e 	bge	zero,r16,493dc <__multiply+0x1cc>
   493b8:	58ffff17 	ldw	r3,-4(r11)
   493bc:	5affff04 	addi	r11,r11,-4
   493c0:	18000326 	beq	r3,zero,493d0 <__multiply+0x1c0>
   493c4:	00000506 	br	493dc <__multiply+0x1cc>
   493c8:	58c00017 	ldw	r3,0(r11)
   493cc:	1800031e 	bne	r3,zero,493dc <__multiply+0x1cc>
   493d0:	843fffc4 	addi	r16,r16,-1
   493d4:	5affff04 	addi	r11,r11,-4
   493d8:	803ffb1e 	bne	r16,zero,493c8 <__alt_data_end+0xfffcea48>
   493dc:	14000415 	stw	r16,16(r2)
   493e0:	dfc00517 	ldw	ra,20(sp)
   493e4:	dd000417 	ldw	r20,16(sp)
   493e8:	dcc00317 	ldw	r19,12(sp)
   493ec:	dc800217 	ldw	r18,8(sp)
   493f0:	dc400117 	ldw	r17,4(sp)
   493f4:	dc000017 	ldw	r16,0(sp)
   493f8:	dec00604 	addi	sp,sp,24
   493fc:	f800283a 	ret
   49400:	3029883a 	mov	r20,r6
   49404:	2823883a 	mov	r17,r5
   49408:	003f9006 	br	4924c <__alt_data_end+0xfffce8cc>

0004940c <__pow5mult>:
   4940c:	defffa04 	addi	sp,sp,-24
   49410:	dcc00315 	stw	r19,12(sp)
   49414:	dc800215 	stw	r18,8(sp)
   49418:	dc000015 	stw	r16,0(sp)
   4941c:	dfc00515 	stw	ra,20(sp)
   49420:	dd000415 	stw	r20,16(sp)
   49424:	dc400115 	stw	r17,4(sp)
   49428:	308000cc 	andi	r2,r6,3
   4942c:	3021883a 	mov	r16,r6
   49430:	2027883a 	mov	r19,r4
   49434:	2825883a 	mov	r18,r5
   49438:	10002e1e 	bne	r2,zero,494f4 <__pow5mult+0xe8>
   4943c:	8021d0ba 	srai	r16,r16,2
   49440:	80001a26 	beq	r16,zero,494ac <__pow5mult+0xa0>
   49444:	9c401217 	ldw	r17,72(r19)
   49448:	8800061e 	bne	r17,zero,49464 <__pow5mult+0x58>
   4944c:	00003406 	br	49520 <__pow5mult+0x114>
   49450:	8021d07a 	srai	r16,r16,1
   49454:	80001526 	beq	r16,zero,494ac <__pow5mult+0xa0>
   49458:	88800017 	ldw	r2,0(r17)
   4945c:	10001c26 	beq	r2,zero,494d0 <__pow5mult+0xc4>
   49460:	1023883a 	mov	r17,r2
   49464:	80c0004c 	andi	r3,r16,1
   49468:	183ff926 	beq	r3,zero,49450 <__alt_data_end+0xfffcead0>
   4946c:	900b883a 	mov	r5,r18
   49470:	880d883a 	mov	r6,r17
   49474:	9809883a 	mov	r4,r19
   49478:	00492100 	call	49210 <__multiply>
   4947c:	90001b26 	beq	r18,zero,494ec <__pow5mult+0xe0>
   49480:	91c00117 	ldw	r7,4(r18)
   49484:	98c01317 	ldw	r3,76(r19)
   49488:	8021d07a 	srai	r16,r16,1
   4948c:	39cf883a 	add	r7,r7,r7
   49490:	39cf883a 	add	r7,r7,r7
   49494:	19c7883a 	add	r3,r3,r7
   49498:	19000017 	ldw	r4,0(r3)
   4949c:	91000015 	stw	r4,0(r18)
   494a0:	1c800015 	stw	r18,0(r3)
   494a4:	1025883a 	mov	r18,r2
   494a8:	803feb1e 	bne	r16,zero,49458 <__alt_data_end+0xfffcead8>
   494ac:	9005883a 	mov	r2,r18
   494b0:	dfc00517 	ldw	ra,20(sp)
   494b4:	dd000417 	ldw	r20,16(sp)
   494b8:	dcc00317 	ldw	r19,12(sp)
   494bc:	dc800217 	ldw	r18,8(sp)
   494c0:	dc400117 	ldw	r17,4(sp)
   494c4:	dc000017 	ldw	r16,0(sp)
   494c8:	dec00604 	addi	sp,sp,24
   494cc:	f800283a 	ret
   494d0:	9809883a 	mov	r4,r19
   494d4:	880b883a 	mov	r5,r17
   494d8:	880d883a 	mov	r6,r17
   494dc:	00492100 	call	49210 <__multiply>
   494e0:	88800015 	stw	r2,0(r17)
   494e4:	10000015 	stw	zero,0(r2)
   494e8:	003fdd06 	br	49460 <__alt_data_end+0xfffceae0>
   494ec:	1025883a 	mov	r18,r2
   494f0:	003fd706 	br	49450 <__alt_data_end+0xfffcead0>
   494f4:	10bfffc4 	addi	r2,r2,-1
   494f8:	1085883a 	add	r2,r2,r2
   494fc:	00c00174 	movhi	r3,5
   49500:	18c94f04 	addi	r3,r3,9532
   49504:	1085883a 	add	r2,r2,r2
   49508:	1885883a 	add	r2,r3,r2
   4950c:	11800017 	ldw	r6,0(r2)
   49510:	000f883a 	mov	r7,zero
   49514:	0048ea40 	call	48ea4 <__multadd>
   49518:	1025883a 	mov	r18,r2
   4951c:	003fc706 	br	4943c <__alt_data_end+0xfffceabc>
   49520:	05000044 	movi	r20,1
   49524:	9809883a 	mov	r4,r19
   49528:	a00b883a 	mov	r5,r20
   4952c:	0048dd40 	call	48dd4 <_Balloc>
   49530:	1023883a 	mov	r17,r2
   49534:	00809c44 	movi	r2,625
   49538:	88800515 	stw	r2,20(r17)
   4953c:	8d000415 	stw	r20,16(r17)
   49540:	9c401215 	stw	r17,72(r19)
   49544:	88000015 	stw	zero,0(r17)
   49548:	003fc606 	br	49464 <__alt_data_end+0xfffceae4>

0004954c <__lshift>:
   4954c:	defff904 	addi	sp,sp,-28
   49550:	dd000415 	stw	r20,16(sp)
   49554:	dcc00315 	stw	r19,12(sp)
   49558:	3029d17a 	srai	r20,r6,5
   4955c:	2cc00417 	ldw	r19,16(r5)
   49560:	28800217 	ldw	r2,8(r5)
   49564:	dd400515 	stw	r21,20(sp)
   49568:	a4e7883a 	add	r19,r20,r19
   4956c:	dc800215 	stw	r18,8(sp)
   49570:	dc400115 	stw	r17,4(sp)
   49574:	dc000015 	stw	r16,0(sp)
   49578:	dfc00615 	stw	ra,24(sp)
   4957c:	9c000044 	addi	r16,r19,1
   49580:	2823883a 	mov	r17,r5
   49584:	302b883a 	mov	r21,r6
   49588:	2025883a 	mov	r18,r4
   4958c:	29400117 	ldw	r5,4(r5)
   49590:	1400030e 	bge	r2,r16,495a0 <__lshift+0x54>
   49594:	1085883a 	add	r2,r2,r2
   49598:	29400044 	addi	r5,r5,1
   4959c:	143ffd16 	blt	r2,r16,49594 <__alt_data_end+0xfffcec14>
   495a0:	9009883a 	mov	r4,r18
   495a4:	0048dd40 	call	48dd4 <_Balloc>
   495a8:	11c00504 	addi	r7,r2,20
   495ac:	0500090e 	bge	zero,r20,495d4 <__lshift+0x88>
   495b0:	3811883a 	mov	r8,r7
   495b4:	0007883a 	mov	r3,zero
   495b8:	40000015 	stw	zero,0(r8)
   495bc:	18c00044 	addi	r3,r3,1
   495c0:	42000104 	addi	r8,r8,4
   495c4:	1d3ffc1e 	bne	r3,r20,495b8 <__alt_data_end+0xfffcec38>
   495c8:	18c7883a 	add	r3,r3,r3
   495cc:	18c7883a 	add	r3,r3,r3
   495d0:	38cf883a 	add	r7,r7,r3
   495d4:	89000417 	ldw	r4,16(r17)
   495d8:	88c00504 	addi	r3,r17,20
   495dc:	a98007cc 	andi	r6,r21,31
   495e0:	2109883a 	add	r4,r4,r4
   495e4:	2109883a 	add	r4,r4,r4
   495e8:	1909883a 	add	r4,r3,r4
   495ec:	30002326 	beq	r6,zero,4967c <__lshift+0x130>
   495f0:	01400804 	movi	r5,32
   495f4:	298bc83a 	sub	r5,r5,r6
   495f8:	0013883a 	mov	r9,zero
   495fc:	1a000017 	ldw	r8,0(r3)
   49600:	3815883a 	mov	r10,r7
   49604:	39c00104 	addi	r7,r7,4
   49608:	4190983a 	sll	r8,r8,r6
   4960c:	18c00104 	addi	r3,r3,4
   49610:	4a10b03a 	or	r8,r9,r8
   49614:	3a3fff15 	stw	r8,-4(r7)
   49618:	1a3fff17 	ldw	r8,-4(r3)
   4961c:	4152d83a 	srl	r9,r8,r5
   49620:	193ff636 	bltu	r3,r4,495fc <__alt_data_end+0xfffcec7c>
   49624:	52400115 	stw	r9,4(r10)
   49628:	48000126 	beq	r9,zero,49630 <__lshift+0xe4>
   4962c:	9c000084 	addi	r16,r19,2
   49630:	89000117 	ldw	r4,4(r17)
   49634:	90c01317 	ldw	r3,76(r18)
   49638:	843fffc4 	addi	r16,r16,-1
   4963c:	2109883a 	add	r4,r4,r4
   49640:	2109883a 	add	r4,r4,r4
   49644:	1907883a 	add	r3,r3,r4
   49648:	19000017 	ldw	r4,0(r3)
   4964c:	14000415 	stw	r16,16(r2)
   49650:	89000015 	stw	r4,0(r17)
   49654:	1c400015 	stw	r17,0(r3)
   49658:	dfc00617 	ldw	ra,24(sp)
   4965c:	dd400517 	ldw	r21,20(sp)
   49660:	dd000417 	ldw	r20,16(sp)
   49664:	dcc00317 	ldw	r19,12(sp)
   49668:	dc800217 	ldw	r18,8(sp)
   4966c:	dc400117 	ldw	r17,4(sp)
   49670:	dc000017 	ldw	r16,0(sp)
   49674:	dec00704 	addi	sp,sp,28
   49678:	f800283a 	ret
   4967c:	19400017 	ldw	r5,0(r3)
   49680:	39c00104 	addi	r7,r7,4
   49684:	18c00104 	addi	r3,r3,4
   49688:	397fff15 	stw	r5,-4(r7)
   4968c:	193ffb36 	bltu	r3,r4,4967c <__alt_data_end+0xfffcecfc>
   49690:	003fe706 	br	49630 <__alt_data_end+0xfffcecb0>

00049694 <__mcmp>:
   49694:	20800417 	ldw	r2,16(r4)
   49698:	28c00417 	ldw	r3,16(r5)
   4969c:	10c5c83a 	sub	r2,r2,r3
   496a0:	1000111e 	bne	r2,zero,496e8 <__mcmp+0x54>
   496a4:	18c7883a 	add	r3,r3,r3
   496a8:	18c7883a 	add	r3,r3,r3
   496ac:	21000504 	addi	r4,r4,20
   496b0:	29400504 	addi	r5,r5,20
   496b4:	20c5883a 	add	r2,r4,r3
   496b8:	28cb883a 	add	r5,r5,r3
   496bc:	00000106 	br	496c4 <__mcmp+0x30>
   496c0:	20800a2e 	bgeu	r4,r2,496ec <__mcmp+0x58>
   496c4:	10bfff04 	addi	r2,r2,-4
   496c8:	297fff04 	addi	r5,r5,-4
   496cc:	11800017 	ldw	r6,0(r2)
   496d0:	28c00017 	ldw	r3,0(r5)
   496d4:	30fffa26 	beq	r6,r3,496c0 <__alt_data_end+0xfffced40>
   496d8:	30c00236 	bltu	r6,r3,496e4 <__mcmp+0x50>
   496dc:	00800044 	movi	r2,1
   496e0:	f800283a 	ret
   496e4:	00bfffc4 	movi	r2,-1
   496e8:	f800283a 	ret
   496ec:	0005883a 	mov	r2,zero
   496f0:	f800283a 	ret

000496f4 <__mdiff>:
   496f4:	defffb04 	addi	sp,sp,-20
   496f8:	dc000015 	stw	r16,0(sp)
   496fc:	2821883a 	mov	r16,r5
   49700:	dcc00315 	stw	r19,12(sp)
   49704:	300b883a 	mov	r5,r6
   49708:	2027883a 	mov	r19,r4
   4970c:	8009883a 	mov	r4,r16
   49710:	dc800215 	stw	r18,8(sp)
   49714:	dfc00415 	stw	ra,16(sp)
   49718:	dc400115 	stw	r17,4(sp)
   4971c:	3025883a 	mov	r18,r6
   49720:	00496940 	call	49694 <__mcmp>
   49724:	10005226 	beq	r2,zero,49870 <__mdiff+0x17c>
   49728:	10004c16 	blt	r2,zero,4985c <__mdiff+0x168>
   4972c:	0023883a 	mov	r17,zero
   49730:	81400117 	ldw	r5,4(r16)
   49734:	9809883a 	mov	r4,r19
   49738:	0048dd40 	call	48dd4 <_Balloc>
   4973c:	83400417 	ldw	r13,16(r16)
   49740:	93800417 	ldw	r14,16(r18)
   49744:	81000504 	addi	r4,r16,20
   49748:	6b59883a 	add	r12,r13,r13
   4974c:	739d883a 	add	r14,r14,r14
   49750:	6319883a 	add	r12,r12,r12
   49754:	91800504 	addi	r6,r18,20
   49758:	739d883a 	add	r14,r14,r14
   4975c:	14400315 	stw	r17,12(r2)
   49760:	2319883a 	add	r12,r4,r12
   49764:	339d883a 	add	r14,r6,r14
   49768:	12400504 	addi	r9,r2,20
   4976c:	0007883a 	mov	r3,zero
   49770:	22000017 	ldw	r8,0(r4)
   49774:	32800017 	ldw	r10,0(r6)
   49778:	4ac00104 	addi	r11,r9,4
   4977c:	41ffffcc 	andi	r7,r8,65535
   49780:	38c7883a 	add	r3,r7,r3
   49784:	51ffffcc 	andi	r7,r10,65535
   49788:	19cfc83a 	sub	r7,r3,r7
   4978c:	4010d43a 	srli	r8,r8,16
   49790:	5014d43a 	srli	r10,r10,16
   49794:	3807d43a 	srai	r3,r7,16
   49798:	39ffffcc 	andi	r7,r7,65535
   4979c:	4291c83a 	sub	r8,r8,r10
   497a0:	40c7883a 	add	r3,r8,r3
   497a4:	1810943a 	slli	r8,r3,16
   497a8:	31800104 	addi	r6,r6,4
   497ac:	21000104 	addi	r4,r4,4
   497b0:	41ceb03a 	or	r7,r8,r7
   497b4:	49c00015 	stw	r7,0(r9)
   497b8:	1807d43a 	srai	r3,r3,16
   497bc:	580b883a 	mov	r5,r11
   497c0:	5813883a 	mov	r9,r11
   497c4:	33bfea36 	bltu	r6,r14,49770 <__alt_data_end+0xfffcedf0>
   497c8:	2011883a 	mov	r8,r4
   497cc:	2300152e 	bgeu	r4,r12,49824 <__mdiff+0x130>
   497d0:	21400017 	ldw	r5,0(r4)
   497d4:	4a400104 	addi	r9,r9,4
   497d8:	21000104 	addi	r4,r4,4
   497dc:	29ffffcc 	andi	r7,r5,65535
   497e0:	38c7883a 	add	r3,r7,r3
   497e4:	280ad43a 	srli	r5,r5,16
   497e8:	180dd43a 	srai	r6,r3,16
   497ec:	19ffffcc 	andi	r7,r3,65535
   497f0:	3147883a 	add	r3,r6,r5
   497f4:	180a943a 	slli	r5,r3,16
   497f8:	1807d43a 	srai	r3,r3,16
   497fc:	29ceb03a 	or	r7,r5,r7
   49800:	49ffff15 	stw	r7,-4(r9)
   49804:	233ff236 	bltu	r4,r12,497d0 <__alt_data_end+0xfffcee50>
   49808:	0206303a 	nor	r3,zero,r8
   4980c:	1b07883a 	add	r3,r3,r12
   49810:	1806d0ba 	srli	r3,r3,2
   49814:	18c00044 	addi	r3,r3,1
   49818:	18c7883a 	add	r3,r3,r3
   4981c:	18c7883a 	add	r3,r3,r3
   49820:	58cb883a 	add	r5,r11,r3
   49824:	28ffff04 	addi	r3,r5,-4
   49828:	3800041e 	bne	r7,zero,4983c <__mdiff+0x148>
   4982c:	18ffff04 	addi	r3,r3,-4
   49830:	19000017 	ldw	r4,0(r3)
   49834:	6b7fffc4 	addi	r13,r13,-1
   49838:	203ffc26 	beq	r4,zero,4982c <__alt_data_end+0xfffceeac>
   4983c:	13400415 	stw	r13,16(r2)
   49840:	dfc00417 	ldw	ra,16(sp)
   49844:	dcc00317 	ldw	r19,12(sp)
   49848:	dc800217 	ldw	r18,8(sp)
   4984c:	dc400117 	ldw	r17,4(sp)
   49850:	dc000017 	ldw	r16,0(sp)
   49854:	dec00504 	addi	sp,sp,20
   49858:	f800283a 	ret
   4985c:	8005883a 	mov	r2,r16
   49860:	04400044 	movi	r17,1
   49864:	9021883a 	mov	r16,r18
   49868:	1025883a 	mov	r18,r2
   4986c:	003fb006 	br	49730 <__alt_data_end+0xfffcedb0>
   49870:	9809883a 	mov	r4,r19
   49874:	000b883a 	mov	r5,zero
   49878:	0048dd40 	call	48dd4 <_Balloc>
   4987c:	00c00044 	movi	r3,1
   49880:	10c00415 	stw	r3,16(r2)
   49884:	10000515 	stw	zero,20(r2)
   49888:	003fed06 	br	49840 <__alt_data_end+0xfffceec0>

0004988c <__ulp>:
   4988c:	295ffc2c 	andhi	r5,r5,32752
   49890:	00bf3034 	movhi	r2,64704
   49894:	2887883a 	add	r3,r5,r2
   49898:	00c0020e 	bge	zero,r3,498a4 <__ulp+0x18>
   4989c:	0005883a 	mov	r2,zero
   498a0:	f800283a 	ret
   498a4:	00c7c83a 	sub	r3,zero,r3
   498a8:	180bd53a 	srai	r5,r3,20
   498ac:	008004c4 	movi	r2,19
   498b0:	11400a0e 	bge	r2,r5,498dc <__ulp+0x50>
   498b4:	00800c84 	movi	r2,50
   498b8:	0007883a 	mov	r3,zero
   498bc:	11400516 	blt	r2,r5,498d4 <__ulp+0x48>
   498c0:	00800cc4 	movi	r2,51
   498c4:	114bc83a 	sub	r5,r2,r5
   498c8:	00800044 	movi	r2,1
   498cc:	1144983a 	sll	r2,r2,r5
   498d0:	f800283a 	ret
   498d4:	00800044 	movi	r2,1
   498d8:	f800283a 	ret
   498dc:	00800234 	movhi	r2,8
   498e0:	1147d83a 	sra	r3,r2,r5
   498e4:	0005883a 	mov	r2,zero
   498e8:	f800283a 	ret

000498ec <__b2d>:
   498ec:	defffa04 	addi	sp,sp,-24
   498f0:	dc000015 	stw	r16,0(sp)
   498f4:	24000417 	ldw	r16,16(r4)
   498f8:	dc400115 	stw	r17,4(sp)
   498fc:	24400504 	addi	r17,r4,20
   49900:	8421883a 	add	r16,r16,r16
   49904:	8421883a 	add	r16,r16,r16
   49908:	8c21883a 	add	r16,r17,r16
   4990c:	dc800215 	stw	r18,8(sp)
   49910:	84bfff17 	ldw	r18,-4(r16)
   49914:	dd000415 	stw	r20,16(sp)
   49918:	dcc00315 	stw	r19,12(sp)
   4991c:	9009883a 	mov	r4,r18
   49920:	2829883a 	mov	r20,r5
   49924:	dfc00515 	stw	ra,20(sp)
   49928:	00490bc0 	call	490bc <__hi0bits>
   4992c:	00c00804 	movi	r3,32
   49930:	1887c83a 	sub	r3,r3,r2
   49934:	a0c00015 	stw	r3,0(r20)
   49938:	00c00284 	movi	r3,10
   4993c:	84ffff04 	addi	r19,r16,-4
   49940:	18801216 	blt	r3,r2,4998c <__b2d+0xa0>
   49944:	014002c4 	movi	r5,11
   49948:	2889c83a 	sub	r4,r5,r2
   4994c:	9106d83a 	srl	r3,r18,r4
   49950:	18cffc34 	orhi	r3,r3,16368
   49954:	8cc0282e 	bgeu	r17,r19,499f8 <__b2d+0x10c>
   49958:	817ffe17 	ldw	r5,-8(r16)
   4995c:	290ad83a 	srl	r5,r5,r4
   49960:	10800544 	addi	r2,r2,21
   49964:	9084983a 	sll	r2,r18,r2
   49968:	2884b03a 	or	r2,r5,r2
   4996c:	dfc00517 	ldw	ra,20(sp)
   49970:	dd000417 	ldw	r20,16(sp)
   49974:	dcc00317 	ldw	r19,12(sp)
   49978:	dc800217 	ldw	r18,8(sp)
   4997c:	dc400117 	ldw	r17,4(sp)
   49980:	dc000017 	ldw	r16,0(sp)
   49984:	dec00604 	addi	sp,sp,24
   49988:	f800283a 	ret
   4998c:	113ffd44 	addi	r4,r2,-11
   49990:	8cc00f2e 	bgeu	r17,r19,499d0 <__b2d+0xe4>
   49994:	81bffe04 	addi	r6,r16,-8
   49998:	817ffe17 	ldw	r5,-8(r16)
   4999c:	20001326 	beq	r4,zero,499ec <__b2d+0x100>
   499a0:	00c00ac4 	movi	r3,43
   499a4:	1885c83a 	sub	r2,r3,r2
   499a8:	2886d83a 	srl	r3,r5,r2
   499ac:	9124983a 	sll	r18,r18,r4
   499b0:	90e4b03a 	or	r18,r18,r3
   499b4:	90cffc34 	orhi	r3,r18,16368
   499b8:	8980112e 	bgeu	r17,r6,49a00 <__b2d+0x114>
   499bc:	81bffd17 	ldw	r6,-12(r16)
   499c0:	308cd83a 	srl	r6,r6,r2
   499c4:	2904983a 	sll	r2,r5,r4
   499c8:	1184b03a 	or	r2,r2,r6
   499cc:	003fe706 	br	4996c <__alt_data_end+0xfffcefec>
   499d0:	20000526 	beq	r4,zero,499e8 <__b2d+0xfc>
   499d4:	9124983a 	sll	r18,r18,r4
   499d8:	000d883a 	mov	r6,zero
   499dc:	000b883a 	mov	r5,zero
   499e0:	90cffc34 	orhi	r3,r18,16368
   499e4:	003ff706 	br	499c4 <__alt_data_end+0xfffcf044>
   499e8:	000b883a 	mov	r5,zero
   499ec:	90cffc34 	orhi	r3,r18,16368
   499f0:	2805883a 	mov	r2,r5
   499f4:	003fdd06 	br	4996c <__alt_data_end+0xfffcefec>
   499f8:	000b883a 	mov	r5,zero
   499fc:	003fd806 	br	49960 <__alt_data_end+0xfffcefe0>
   49a00:	000d883a 	mov	r6,zero
   49a04:	003fef06 	br	499c4 <__alt_data_end+0xfffcf044>

00049a08 <__d2b>:
   49a08:	defff704 	addi	sp,sp,-36
   49a0c:	dc000215 	stw	r16,8(sp)
   49a10:	3021883a 	mov	r16,r6
   49a14:	dc400315 	stw	r17,12(sp)
   49a18:	8022907a 	slli	r17,r16,1
   49a1c:	dd400715 	stw	r21,28(sp)
   49a20:	282b883a 	mov	r21,r5
   49a24:	01400044 	movi	r5,1
   49a28:	dd000615 	stw	r20,24(sp)
   49a2c:	dcc00515 	stw	r19,20(sp)
   49a30:	dc800415 	stw	r18,16(sp)
   49a34:	dfc00815 	stw	ra,32(sp)
   49a38:	3829883a 	mov	r20,r7
   49a3c:	dc800917 	ldw	r18,36(sp)
   49a40:	8822d57a 	srli	r17,r17,21
   49a44:	0048dd40 	call	48dd4 <_Balloc>
   49a48:	1027883a 	mov	r19,r2
   49a4c:	00800434 	movhi	r2,16
   49a50:	10bfffc4 	addi	r2,r2,-1
   49a54:	808c703a 	and	r6,r16,r2
   49a58:	88000126 	beq	r17,zero,49a60 <__d2b+0x58>
   49a5c:	31800434 	orhi	r6,r6,16
   49a60:	d9800015 	stw	r6,0(sp)
   49a64:	a8001f26 	beq	r21,zero,49ae4 <__d2b+0xdc>
   49a68:	d9000104 	addi	r4,sp,4
   49a6c:	dd400115 	stw	r21,4(sp)
   49a70:	00491240 	call	49124 <__lo0bits>
   49a74:	d8c00017 	ldw	r3,0(sp)
   49a78:	1000291e 	bne	r2,zero,49b20 <__d2b+0x118>
   49a7c:	d9000117 	ldw	r4,4(sp)
   49a80:	99000515 	stw	r4,20(r19)
   49a84:	1820c03a 	cmpne	r16,r3,zero
   49a88:	84000044 	addi	r16,r16,1
   49a8c:	98c00615 	stw	r3,24(r19)
   49a90:	9c000415 	stw	r16,16(r19)
   49a94:	88001b1e 	bne	r17,zero,49b04 <__d2b+0xfc>
   49a98:	800690ba 	slli	r3,r16,2
   49a9c:	10bef384 	addi	r2,r2,-1074
   49aa0:	a0800015 	stw	r2,0(r20)
   49aa4:	98c5883a 	add	r2,r19,r3
   49aa8:	11000417 	ldw	r4,16(r2)
   49aac:	8020917a 	slli	r16,r16,5
   49ab0:	00490bc0 	call	490bc <__hi0bits>
   49ab4:	8085c83a 	sub	r2,r16,r2
   49ab8:	90800015 	stw	r2,0(r18)
   49abc:	9805883a 	mov	r2,r19
   49ac0:	dfc00817 	ldw	ra,32(sp)
   49ac4:	dd400717 	ldw	r21,28(sp)
   49ac8:	dd000617 	ldw	r20,24(sp)
   49acc:	dcc00517 	ldw	r19,20(sp)
   49ad0:	dc800417 	ldw	r18,16(sp)
   49ad4:	dc400317 	ldw	r17,12(sp)
   49ad8:	dc000217 	ldw	r16,8(sp)
   49adc:	dec00904 	addi	sp,sp,36
   49ae0:	f800283a 	ret
   49ae4:	d809883a 	mov	r4,sp
   49ae8:	00491240 	call	49124 <__lo0bits>
   49aec:	d8c00017 	ldw	r3,0(sp)
   49af0:	04000044 	movi	r16,1
   49af4:	9c000415 	stw	r16,16(r19)
   49af8:	98c00515 	stw	r3,20(r19)
   49afc:	10800804 	addi	r2,r2,32
   49b00:	883fe526 	beq	r17,zero,49a98 <__alt_data_end+0xfffcf118>
   49b04:	8c7ef344 	addi	r17,r17,-1075
   49b08:	88a3883a 	add	r17,r17,r2
   49b0c:	00c00d44 	movi	r3,53
   49b10:	a4400015 	stw	r17,0(r20)
   49b14:	1885c83a 	sub	r2,r3,r2
   49b18:	90800015 	stw	r2,0(r18)
   49b1c:	003fe706 	br	49abc <__alt_data_end+0xfffcf13c>
   49b20:	01000804 	movi	r4,32
   49b24:	2089c83a 	sub	r4,r4,r2
   49b28:	1908983a 	sll	r4,r3,r4
   49b2c:	d9400117 	ldw	r5,4(sp)
   49b30:	1886d83a 	srl	r3,r3,r2
   49b34:	2148b03a 	or	r4,r4,r5
   49b38:	99000515 	stw	r4,20(r19)
   49b3c:	d8c00015 	stw	r3,0(sp)
   49b40:	003fd006 	br	49a84 <__alt_data_end+0xfffcf104>

00049b44 <__ratio>:
   49b44:	defff904 	addi	sp,sp,-28
   49b48:	dc400315 	stw	r17,12(sp)
   49b4c:	2823883a 	mov	r17,r5
   49b50:	d9400104 	addi	r5,sp,4
   49b54:	dfc00615 	stw	ra,24(sp)
   49b58:	dcc00515 	stw	r19,20(sp)
   49b5c:	dc800415 	stw	r18,16(sp)
   49b60:	2027883a 	mov	r19,r4
   49b64:	dc000215 	stw	r16,8(sp)
   49b68:	00498ec0 	call	498ec <__b2d>
   49b6c:	8809883a 	mov	r4,r17
   49b70:	d80b883a 	mov	r5,sp
   49b74:	1025883a 	mov	r18,r2
   49b78:	1821883a 	mov	r16,r3
   49b7c:	00498ec0 	call	498ec <__b2d>
   49b80:	8a400417 	ldw	r9,16(r17)
   49b84:	9a000417 	ldw	r8,16(r19)
   49b88:	100d883a 	mov	r6,r2
   49b8c:	d8800017 	ldw	r2,0(sp)
   49b90:	4251c83a 	sub	r8,r8,r9
   49b94:	4012917a 	slli	r9,r8,5
   49b98:	da000117 	ldw	r8,4(sp)
   49b9c:	4091c83a 	sub	r8,r8,r2
   49ba0:	4251883a 	add	r8,r8,r9
   49ba4:	02000d0e 	bge	zero,r8,49bdc <__ratio+0x98>
   49ba8:	4010953a 	slli	r8,r8,20
   49bac:	4421883a 	add	r16,r8,r16
   49bb0:	9009883a 	mov	r4,r18
   49bb4:	800b883a 	mov	r5,r16
   49bb8:	180f883a 	mov	r7,r3
   49bbc:	004e08c0 	call	4e08c <__divdf3>
   49bc0:	dfc00617 	ldw	ra,24(sp)
   49bc4:	dcc00517 	ldw	r19,20(sp)
   49bc8:	dc800417 	ldw	r18,16(sp)
   49bcc:	dc400317 	ldw	r17,12(sp)
   49bd0:	dc000217 	ldw	r16,8(sp)
   49bd4:	dec00704 	addi	sp,sp,28
   49bd8:	f800283a 	ret
   49bdc:	4010953a 	slli	r8,r8,20
   49be0:	1a07c83a 	sub	r3,r3,r8
   49be4:	003ff206 	br	49bb0 <__alt_data_end+0xfffcf230>

00049be8 <_mprec_log10>:
   49be8:	defffe04 	addi	sp,sp,-8
   49bec:	dc000015 	stw	r16,0(sp)
   49bf0:	dfc00115 	stw	ra,4(sp)
   49bf4:	008005c4 	movi	r2,23
   49bf8:	2021883a 	mov	r16,r4
   49bfc:	11000d0e 	bge	r2,r4,49c34 <_mprec_log10+0x4c>
   49c00:	0005883a 	mov	r2,zero
   49c04:	00cffc34 	movhi	r3,16368
   49c08:	843fffc4 	addi	r16,r16,-1
   49c0c:	1009883a 	mov	r4,r2
   49c10:	180b883a 	mov	r5,r3
   49c14:	000d883a 	mov	r6,zero
   49c18:	01d00934 	movhi	r7,16420
   49c1c:	004eb9c0 	call	4eb9c <__muldf3>
   49c20:	803ff91e 	bne	r16,zero,49c08 <__alt_data_end+0xfffcf288>
   49c24:	dfc00117 	ldw	ra,4(sp)
   49c28:	dc000017 	ldw	r16,0(sp)
   49c2c:	dec00204 	addi	sp,sp,8
   49c30:	f800283a 	ret
   49c34:	202090fa 	slli	r16,r4,3
   49c38:	00800174 	movhi	r2,5
   49c3c:	10896604 	addi	r2,r2,9624
   49c40:	1421883a 	add	r16,r2,r16
   49c44:	80800017 	ldw	r2,0(r16)
   49c48:	80c00117 	ldw	r3,4(r16)
   49c4c:	dfc00117 	ldw	ra,4(sp)
   49c50:	dc000017 	ldw	r16,0(sp)
   49c54:	dec00204 	addi	sp,sp,8
   49c58:	f800283a 	ret

00049c5c <__copybits>:
   49c5c:	297fffc4 	addi	r5,r5,-1
   49c60:	280fd17a 	srai	r7,r5,5
   49c64:	30c00417 	ldw	r3,16(r6)
   49c68:	30800504 	addi	r2,r6,20
   49c6c:	39c00044 	addi	r7,r7,1
   49c70:	18c7883a 	add	r3,r3,r3
   49c74:	39cf883a 	add	r7,r7,r7
   49c78:	18c7883a 	add	r3,r3,r3
   49c7c:	39cf883a 	add	r7,r7,r7
   49c80:	10c7883a 	add	r3,r2,r3
   49c84:	21cf883a 	add	r7,r4,r7
   49c88:	10c00d2e 	bgeu	r2,r3,49cc0 <__copybits+0x64>
   49c8c:	200b883a 	mov	r5,r4
   49c90:	12000017 	ldw	r8,0(r2)
   49c94:	29400104 	addi	r5,r5,4
   49c98:	10800104 	addi	r2,r2,4
   49c9c:	2a3fff15 	stw	r8,-4(r5)
   49ca0:	10fffb36 	bltu	r2,r3,49c90 <__alt_data_end+0xfffcf310>
   49ca4:	1985c83a 	sub	r2,r3,r6
   49ca8:	10bffac4 	addi	r2,r2,-21
   49cac:	1004d0ba 	srli	r2,r2,2
   49cb0:	10800044 	addi	r2,r2,1
   49cb4:	1085883a 	add	r2,r2,r2
   49cb8:	1085883a 	add	r2,r2,r2
   49cbc:	2089883a 	add	r4,r4,r2
   49cc0:	21c0032e 	bgeu	r4,r7,49cd0 <__copybits+0x74>
   49cc4:	20000015 	stw	zero,0(r4)
   49cc8:	21000104 	addi	r4,r4,4
   49ccc:	21fffd36 	bltu	r4,r7,49cc4 <__alt_data_end+0xfffcf344>
   49cd0:	f800283a 	ret

00049cd4 <__any_on>:
   49cd4:	20c00417 	ldw	r3,16(r4)
   49cd8:	2805d17a 	srai	r2,r5,5
   49cdc:	21000504 	addi	r4,r4,20
   49ce0:	18800d0e 	bge	r3,r2,49d18 <__any_on+0x44>
   49ce4:	18c7883a 	add	r3,r3,r3
   49ce8:	18c7883a 	add	r3,r3,r3
   49cec:	20c7883a 	add	r3,r4,r3
   49cf0:	20c0192e 	bgeu	r4,r3,49d58 <__any_on+0x84>
   49cf4:	18bfff17 	ldw	r2,-4(r3)
   49cf8:	18ffff04 	addi	r3,r3,-4
   49cfc:	1000041e 	bne	r2,zero,49d10 <__any_on+0x3c>
   49d00:	20c0142e 	bgeu	r4,r3,49d54 <__any_on+0x80>
   49d04:	18ffff04 	addi	r3,r3,-4
   49d08:	19400017 	ldw	r5,0(r3)
   49d0c:	283ffc26 	beq	r5,zero,49d00 <__alt_data_end+0xfffcf380>
   49d10:	00800044 	movi	r2,1
   49d14:	f800283a 	ret
   49d18:	10c00a0e 	bge	r2,r3,49d44 <__any_on+0x70>
   49d1c:	1085883a 	add	r2,r2,r2
   49d20:	1085883a 	add	r2,r2,r2
   49d24:	294007cc 	andi	r5,r5,31
   49d28:	2087883a 	add	r3,r4,r2
   49d2c:	283ff026 	beq	r5,zero,49cf0 <__alt_data_end+0xfffcf370>
   49d30:	19800017 	ldw	r6,0(r3)
   49d34:	3144d83a 	srl	r2,r6,r5
   49d38:	114a983a 	sll	r5,r2,r5
   49d3c:	29bff41e 	bne	r5,r6,49d10 <__alt_data_end+0xfffcf390>
   49d40:	003feb06 	br	49cf0 <__alt_data_end+0xfffcf370>
   49d44:	1085883a 	add	r2,r2,r2
   49d48:	1085883a 	add	r2,r2,r2
   49d4c:	2087883a 	add	r3,r4,r2
   49d50:	003fe706 	br	49cf0 <__alt_data_end+0xfffcf370>
   49d54:	f800283a 	ret
   49d58:	0005883a 	mov	r2,zero
   49d5c:	f800283a 	ret

00049d60 <_putc_r>:
   49d60:	defffc04 	addi	sp,sp,-16
   49d64:	dc000215 	stw	r16,8(sp)
   49d68:	dfc00315 	stw	ra,12(sp)
   49d6c:	2021883a 	mov	r16,r4
   49d70:	20000226 	beq	r4,zero,49d7c <_putc_r+0x1c>
   49d74:	20800e17 	ldw	r2,56(r4)
   49d78:	10001b26 	beq	r2,zero,49de8 <_putc_r+0x88>
   49d7c:	30800217 	ldw	r2,8(r6)
   49d80:	10bfffc4 	addi	r2,r2,-1
   49d84:	30800215 	stw	r2,8(r6)
   49d88:	10000a16 	blt	r2,zero,49db4 <_putc_r+0x54>
   49d8c:	30800017 	ldw	r2,0(r6)
   49d90:	11400005 	stb	r5,0(r2)
   49d94:	30800017 	ldw	r2,0(r6)
   49d98:	10c00044 	addi	r3,r2,1
   49d9c:	30c00015 	stw	r3,0(r6)
   49da0:	10800003 	ldbu	r2,0(r2)
   49da4:	dfc00317 	ldw	ra,12(sp)
   49da8:	dc000217 	ldw	r16,8(sp)
   49dac:	dec00404 	addi	sp,sp,16
   49db0:	f800283a 	ret
   49db4:	30c00617 	ldw	r3,24(r6)
   49db8:	10c00616 	blt	r2,r3,49dd4 <_putc_r+0x74>
   49dbc:	30800017 	ldw	r2,0(r6)
   49dc0:	00c00284 	movi	r3,10
   49dc4:	11400005 	stb	r5,0(r2)
   49dc8:	30800017 	ldw	r2,0(r6)
   49dcc:	11400003 	ldbu	r5,0(r2)
   49dd0:	28fff11e 	bne	r5,r3,49d98 <__alt_data_end+0xfffcf418>
   49dd4:	8009883a 	mov	r4,r16
   49dd8:	dfc00317 	ldw	ra,12(sp)
   49ddc:	dc000217 	ldw	r16,8(sp)
   49de0:	dec00404 	addi	sp,sp,16
   49de4:	004b69c1 	jmpi	4b69c <__swbuf_r>
   49de8:	d9400015 	stw	r5,0(sp)
   49dec:	d9800115 	stw	r6,4(sp)
   49df0:	0047cd80 	call	47cd8 <__sinit>
   49df4:	d9800117 	ldw	r6,4(sp)
   49df8:	d9400017 	ldw	r5,0(sp)
   49dfc:	003fdf06 	br	49d7c <__alt_data_end+0xfffcf3fc>

00049e00 <putc>:
   49e00:	defffc04 	addi	sp,sp,-16
   49e04:	dc400115 	stw	r17,4(sp)
   49e08:	04400174 	movhi	r17,5
   49e0c:	8c509a04 	addi	r17,r17,17000
   49e10:	dc800215 	stw	r18,8(sp)
   49e14:	2025883a 	mov	r18,r4
   49e18:	89000017 	ldw	r4,0(r17)
   49e1c:	dc000015 	stw	r16,0(sp)
   49e20:	dfc00315 	stw	ra,12(sp)
   49e24:	2821883a 	mov	r16,r5
   49e28:	20000226 	beq	r4,zero,49e34 <putc+0x34>
   49e2c:	20c00e17 	ldw	r3,56(r4)
   49e30:	18001a26 	beq	r3,zero,49e9c <putc+0x9c>
   49e34:	80800217 	ldw	r2,8(r16)
   49e38:	10bfffc4 	addi	r2,r2,-1
   49e3c:	80800215 	stw	r2,8(r16)
   49e40:	10000c16 	blt	r2,zero,49e74 <putc+0x74>
   49e44:	80800017 	ldw	r2,0(r16)
   49e48:	14800005 	stb	r18,0(r2)
   49e4c:	80800017 	ldw	r2,0(r16)
   49e50:	10c00044 	addi	r3,r2,1
   49e54:	80c00015 	stw	r3,0(r16)
   49e58:	10800003 	ldbu	r2,0(r2)
   49e5c:	dfc00317 	ldw	ra,12(sp)
   49e60:	dc800217 	ldw	r18,8(sp)
   49e64:	dc400117 	ldw	r17,4(sp)
   49e68:	dc000017 	ldw	r16,0(sp)
   49e6c:	dec00404 	addi	sp,sp,16
   49e70:	f800283a 	ret
   49e74:	80c00617 	ldw	r3,24(r16)
   49e78:	10c00a16 	blt	r2,r3,49ea4 <putc+0xa4>
   49e7c:	80800017 	ldw	r2,0(r16)
   49e80:	00c00284 	movi	r3,10
   49e84:	14800005 	stb	r18,0(r2)
   49e88:	80800017 	ldw	r2,0(r16)
   49e8c:	11400003 	ldbu	r5,0(r2)
   49e90:	28ffef1e 	bne	r5,r3,49e50 <__alt_data_end+0xfffcf4d0>
   49e94:	89000017 	ldw	r4,0(r17)
   49e98:	00000406 	br	49eac <putc+0xac>
   49e9c:	0047cd80 	call	47cd8 <__sinit>
   49ea0:	003fe406 	br	49e34 <__alt_data_end+0xfffcf4b4>
   49ea4:	89000017 	ldw	r4,0(r17)
   49ea8:	900b883a 	mov	r5,r18
   49eac:	800d883a 	mov	r6,r16
   49eb0:	dfc00317 	ldw	ra,12(sp)
   49eb4:	dc800217 	ldw	r18,8(sp)
   49eb8:	dc400117 	ldw	r17,4(sp)
   49ebc:	dc000017 	ldw	r16,0(sp)
   49ec0:	dec00404 	addi	sp,sp,16
   49ec4:	004b69c1 	jmpi	4b69c <__swbuf_r>

00049ec8 <__fpclassifyd>:
   49ec8:	00a00034 	movhi	r2,32768
   49ecc:	10bfffc4 	addi	r2,r2,-1
   49ed0:	2884703a 	and	r2,r5,r2
   49ed4:	10000726 	beq	r2,zero,49ef4 <__fpclassifyd+0x2c>
   49ed8:	00fffc34 	movhi	r3,65520
   49edc:	019ff834 	movhi	r6,32736
   49ee0:	28c7883a 	add	r3,r5,r3
   49ee4:	31bfffc4 	addi	r6,r6,-1
   49ee8:	30c00536 	bltu	r6,r3,49f00 <__fpclassifyd+0x38>
   49eec:	00800104 	movi	r2,4
   49ef0:	f800283a 	ret
   49ef4:	2000021e 	bne	r4,zero,49f00 <__fpclassifyd+0x38>
   49ef8:	00800084 	movi	r2,2
   49efc:	f800283a 	ret
   49f00:	00dffc34 	movhi	r3,32752
   49f04:	019ff834 	movhi	r6,32736
   49f08:	28cb883a 	add	r5,r5,r3
   49f0c:	31bfffc4 	addi	r6,r6,-1
   49f10:	317ff62e 	bgeu	r6,r5,49eec <__alt_data_end+0xfffcf56c>
   49f14:	01400434 	movhi	r5,16
   49f18:	297fffc4 	addi	r5,r5,-1
   49f1c:	28800236 	bltu	r5,r2,49f28 <__fpclassifyd+0x60>
   49f20:	008000c4 	movi	r2,3
   49f24:	f800283a 	ret
   49f28:	10c00226 	beq	r2,r3,49f34 <__fpclassifyd+0x6c>
   49f2c:	0005883a 	mov	r2,zero
   49f30:	f800283a 	ret
   49f34:	2005003a 	cmpeq	r2,r4,zero
   49f38:	f800283a 	ret

00049f3c <_sbrk_r>:
   49f3c:	defffd04 	addi	sp,sp,-12
   49f40:	dc000015 	stw	r16,0(sp)
   49f44:	04000174 	movhi	r16,5
   49f48:	dc400115 	stw	r17,4(sp)
   49f4c:	84178204 	addi	r16,r16,24072
   49f50:	2023883a 	mov	r17,r4
   49f54:	2809883a 	mov	r4,r5
   49f58:	dfc00215 	stw	ra,8(sp)
   49f5c:	80000015 	stw	zero,0(r16)
   49f60:	005077c0 	call	5077c <sbrk>
   49f64:	00ffffc4 	movi	r3,-1
   49f68:	10c00526 	beq	r2,r3,49f80 <_sbrk_r+0x44>
   49f6c:	dfc00217 	ldw	ra,8(sp)
   49f70:	dc400117 	ldw	r17,4(sp)
   49f74:	dc000017 	ldw	r16,0(sp)
   49f78:	dec00304 	addi	sp,sp,12
   49f7c:	f800283a 	ret
   49f80:	80c00017 	ldw	r3,0(r16)
   49f84:	183ff926 	beq	r3,zero,49f6c <__alt_data_end+0xfffcf5ec>
   49f88:	88c00015 	stw	r3,0(r17)
   49f8c:	003ff706 	br	49f6c <__alt_data_end+0xfffcf5ec>

00049f90 <__sread>:
   49f90:	defffe04 	addi	sp,sp,-8
   49f94:	dc000015 	stw	r16,0(sp)
   49f98:	2821883a 	mov	r16,r5
   49f9c:	2940038f 	ldh	r5,14(r5)
   49fa0:	dfc00115 	stw	ra,4(sp)
   49fa4:	004c3780 	call	4c378 <_read_r>
   49fa8:	10000716 	blt	r2,zero,49fc8 <__sread+0x38>
   49fac:	80c01417 	ldw	r3,80(r16)
   49fb0:	1887883a 	add	r3,r3,r2
   49fb4:	80c01415 	stw	r3,80(r16)
   49fb8:	dfc00117 	ldw	ra,4(sp)
   49fbc:	dc000017 	ldw	r16,0(sp)
   49fc0:	dec00204 	addi	sp,sp,8
   49fc4:	f800283a 	ret
   49fc8:	80c0030b 	ldhu	r3,12(r16)
   49fcc:	18fbffcc 	andi	r3,r3,61439
   49fd0:	80c0030d 	sth	r3,12(r16)
   49fd4:	dfc00117 	ldw	ra,4(sp)
   49fd8:	dc000017 	ldw	r16,0(sp)
   49fdc:	dec00204 	addi	sp,sp,8
   49fe0:	f800283a 	ret

00049fe4 <__seofread>:
   49fe4:	0005883a 	mov	r2,zero
   49fe8:	f800283a 	ret

00049fec <__swrite>:
   49fec:	2880030b 	ldhu	r2,12(r5)
   49ff0:	defffb04 	addi	sp,sp,-20
   49ff4:	dcc00315 	stw	r19,12(sp)
   49ff8:	dc800215 	stw	r18,8(sp)
   49ffc:	dc400115 	stw	r17,4(sp)
   4a000:	dc000015 	stw	r16,0(sp)
   4a004:	dfc00415 	stw	ra,16(sp)
   4a008:	10c0400c 	andi	r3,r2,256
   4a00c:	2821883a 	mov	r16,r5
   4a010:	2027883a 	mov	r19,r4
   4a014:	3025883a 	mov	r18,r6
   4a018:	3823883a 	mov	r17,r7
   4a01c:	18000526 	beq	r3,zero,4a034 <__swrite+0x48>
   4a020:	2940038f 	ldh	r5,14(r5)
   4a024:	000d883a 	mov	r6,zero
   4a028:	01c00084 	movi	r7,2
   4a02c:	004c1c00 	call	4c1c0 <_lseek_r>
   4a030:	8080030b 	ldhu	r2,12(r16)
   4a034:	8140038f 	ldh	r5,14(r16)
   4a038:	10bbffcc 	andi	r2,r2,61439
   4a03c:	9809883a 	mov	r4,r19
   4a040:	900d883a 	mov	r6,r18
   4a044:	880f883a 	mov	r7,r17
   4a048:	8080030d 	sth	r2,12(r16)
   4a04c:	dfc00417 	ldw	ra,16(sp)
   4a050:	dcc00317 	ldw	r19,12(sp)
   4a054:	dc800217 	ldw	r18,8(sp)
   4a058:	dc400117 	ldw	r17,4(sp)
   4a05c:	dc000017 	ldw	r16,0(sp)
   4a060:	dec00504 	addi	sp,sp,20
   4a064:	004b80c1 	jmpi	4b80c <_write_r>

0004a068 <__sseek>:
   4a068:	defffe04 	addi	sp,sp,-8
   4a06c:	dc000015 	stw	r16,0(sp)
   4a070:	2821883a 	mov	r16,r5
   4a074:	2940038f 	ldh	r5,14(r5)
   4a078:	dfc00115 	stw	ra,4(sp)
   4a07c:	004c1c00 	call	4c1c0 <_lseek_r>
   4a080:	00ffffc4 	movi	r3,-1
   4a084:	10c00826 	beq	r2,r3,4a0a8 <__sseek+0x40>
   4a088:	80c0030b 	ldhu	r3,12(r16)
   4a08c:	80801415 	stw	r2,80(r16)
   4a090:	18c40014 	ori	r3,r3,4096
   4a094:	80c0030d 	sth	r3,12(r16)
   4a098:	dfc00117 	ldw	ra,4(sp)
   4a09c:	dc000017 	ldw	r16,0(sp)
   4a0a0:	dec00204 	addi	sp,sp,8
   4a0a4:	f800283a 	ret
   4a0a8:	80c0030b 	ldhu	r3,12(r16)
   4a0ac:	18fbffcc 	andi	r3,r3,61439
   4a0b0:	80c0030d 	sth	r3,12(r16)
   4a0b4:	dfc00117 	ldw	ra,4(sp)
   4a0b8:	dc000017 	ldw	r16,0(sp)
   4a0bc:	dec00204 	addi	sp,sp,8
   4a0c0:	f800283a 	ret

0004a0c4 <__sclose>:
   4a0c4:	2940038f 	ldh	r5,14(r5)
   4a0c8:	004b8681 	jmpi	4b868 <_close_r>

0004a0cc <strcmp>:
   4a0cc:	2144b03a 	or	r2,r4,r5
   4a0d0:	108000cc 	andi	r2,r2,3
   4a0d4:	1000171e 	bne	r2,zero,4a134 <strcmp+0x68>
   4a0d8:	20800017 	ldw	r2,0(r4)
   4a0dc:	28c00017 	ldw	r3,0(r5)
   4a0e0:	10c0141e 	bne	r2,r3,4a134 <strcmp+0x68>
   4a0e4:	027fbff4 	movhi	r9,65279
   4a0e8:	4a7fbfc4 	addi	r9,r9,-257
   4a0ec:	0086303a 	nor	r3,zero,r2
   4a0f0:	02202074 	movhi	r8,32897
   4a0f4:	1245883a 	add	r2,r2,r9
   4a0f8:	42202004 	addi	r8,r8,-32640
   4a0fc:	10c4703a 	and	r2,r2,r3
   4a100:	1204703a 	and	r2,r2,r8
   4a104:	10000226 	beq	r2,zero,4a110 <strcmp+0x44>
   4a108:	00001706 	br	4a168 <strcmp+0x9c>
   4a10c:	1000161e 	bne	r2,zero,4a168 <strcmp+0x9c>
   4a110:	21000104 	addi	r4,r4,4
   4a114:	20c00017 	ldw	r3,0(r4)
   4a118:	29400104 	addi	r5,r5,4
   4a11c:	29800017 	ldw	r6,0(r5)
   4a120:	1a4f883a 	add	r7,r3,r9
   4a124:	00c4303a 	nor	r2,zero,r3
   4a128:	3884703a 	and	r2,r7,r2
   4a12c:	1204703a 	and	r2,r2,r8
   4a130:	19bff626 	beq	r3,r6,4a10c <__alt_data_end+0xfffcf78c>
   4a134:	20800007 	ldb	r2,0(r4)
   4a138:	1000051e 	bne	r2,zero,4a150 <strcmp+0x84>
   4a13c:	00000606 	br	4a158 <strcmp+0x8c>
   4a140:	21000044 	addi	r4,r4,1
   4a144:	20800007 	ldb	r2,0(r4)
   4a148:	29400044 	addi	r5,r5,1
   4a14c:	10000226 	beq	r2,zero,4a158 <strcmp+0x8c>
   4a150:	28c00007 	ldb	r3,0(r5)
   4a154:	10fffa26 	beq	r2,r3,4a140 <__alt_data_end+0xfffcf7c0>
   4a158:	20800003 	ldbu	r2,0(r4)
   4a15c:	28c00003 	ldbu	r3,0(r5)
   4a160:	10c5c83a 	sub	r2,r2,r3
   4a164:	f800283a 	ret
   4a168:	0005883a 	mov	r2,zero
   4a16c:	f800283a 	ret

0004a170 <strlen>:
   4a170:	208000cc 	andi	r2,r4,3
   4a174:	10002026 	beq	r2,zero,4a1f8 <strlen+0x88>
   4a178:	20800007 	ldb	r2,0(r4)
   4a17c:	10002026 	beq	r2,zero,4a200 <strlen+0x90>
   4a180:	2005883a 	mov	r2,r4
   4a184:	00000206 	br	4a190 <strlen+0x20>
   4a188:	10c00007 	ldb	r3,0(r2)
   4a18c:	18001826 	beq	r3,zero,4a1f0 <strlen+0x80>
   4a190:	10800044 	addi	r2,r2,1
   4a194:	10c000cc 	andi	r3,r2,3
   4a198:	183ffb1e 	bne	r3,zero,4a188 <__alt_data_end+0xfffcf808>
   4a19c:	10c00017 	ldw	r3,0(r2)
   4a1a0:	01ffbff4 	movhi	r7,65279
   4a1a4:	39ffbfc4 	addi	r7,r7,-257
   4a1a8:	00ca303a 	nor	r5,zero,r3
   4a1ac:	01a02074 	movhi	r6,32897
   4a1b0:	19c7883a 	add	r3,r3,r7
   4a1b4:	31a02004 	addi	r6,r6,-32640
   4a1b8:	1946703a 	and	r3,r3,r5
   4a1bc:	1986703a 	and	r3,r3,r6
   4a1c0:	1800091e 	bne	r3,zero,4a1e8 <strlen+0x78>
   4a1c4:	10800104 	addi	r2,r2,4
   4a1c8:	10c00017 	ldw	r3,0(r2)
   4a1cc:	19cb883a 	add	r5,r3,r7
   4a1d0:	00c6303a 	nor	r3,zero,r3
   4a1d4:	28c6703a 	and	r3,r5,r3
   4a1d8:	1986703a 	and	r3,r3,r6
   4a1dc:	183ff926 	beq	r3,zero,4a1c4 <__alt_data_end+0xfffcf844>
   4a1e0:	00000106 	br	4a1e8 <strlen+0x78>
   4a1e4:	10800044 	addi	r2,r2,1
   4a1e8:	10c00007 	ldb	r3,0(r2)
   4a1ec:	183ffd1e 	bne	r3,zero,4a1e4 <__alt_data_end+0xfffcf864>
   4a1f0:	1105c83a 	sub	r2,r2,r4
   4a1f4:	f800283a 	ret
   4a1f8:	2005883a 	mov	r2,r4
   4a1fc:	003fe706 	br	4a19c <__alt_data_end+0xfffcf81c>
   4a200:	0005883a 	mov	r2,zero
   4a204:	f800283a 	ret

0004a208 <__sprint_r.part.0>:
   4a208:	28801917 	ldw	r2,100(r5)
   4a20c:	defff604 	addi	sp,sp,-40
   4a210:	dd400515 	stw	r21,20(sp)
   4a214:	dcc00315 	stw	r19,12(sp)
   4a218:	dfc00915 	stw	ra,36(sp)
   4a21c:	df000815 	stw	fp,32(sp)
   4a220:	ddc00715 	stw	r23,28(sp)
   4a224:	dd800615 	stw	r22,24(sp)
   4a228:	dd000415 	stw	r20,16(sp)
   4a22c:	dc800215 	stw	r18,8(sp)
   4a230:	dc400115 	stw	r17,4(sp)
   4a234:	dc000015 	stw	r16,0(sp)
   4a238:	1088000c 	andi	r2,r2,8192
   4a23c:	2827883a 	mov	r19,r5
   4a240:	302b883a 	mov	r21,r6
   4a244:	10002d26 	beq	r2,zero,4a2fc <__sprint_r.part.0+0xf4>
   4a248:	30800217 	ldw	r2,8(r6)
   4a24c:	35800017 	ldw	r22,0(r6)
   4a250:	10002826 	beq	r2,zero,4a2f4 <__sprint_r.part.0+0xec>
   4a254:	2029883a 	mov	r20,r4
   4a258:	b5c00104 	addi	r23,r22,4
   4a25c:	04bfffc4 	movi	r18,-1
   4a260:	bc400017 	ldw	r17,0(r23)
   4a264:	b4000017 	ldw	r16,0(r22)
   4a268:	0039883a 	mov	fp,zero
   4a26c:	8822d0ba 	srli	r17,r17,2
   4a270:	04400316 	blt	zero,r17,4a280 <__sprint_r.part.0+0x78>
   4a274:	00001706 	br	4a2d4 <__sprint_r.part.0+0xcc>
   4a278:	84000104 	addi	r16,r16,4
   4a27c:	8f001526 	beq	r17,fp,4a2d4 <__sprint_r.part.0+0xcc>
   4a280:	81400017 	ldw	r5,0(r16)
   4a284:	a009883a 	mov	r4,r20
   4a288:	980d883a 	mov	r6,r19
   4a28c:	004ba940 	call	4ba94 <_fputwc_r>
   4a290:	e7000044 	addi	fp,fp,1
   4a294:	14bff81e 	bne	r2,r18,4a278 <__alt_data_end+0xfffcf8f8>
   4a298:	9005883a 	mov	r2,r18
   4a29c:	a8000215 	stw	zero,8(r21)
   4a2a0:	a8000115 	stw	zero,4(r21)
   4a2a4:	dfc00917 	ldw	ra,36(sp)
   4a2a8:	df000817 	ldw	fp,32(sp)
   4a2ac:	ddc00717 	ldw	r23,28(sp)
   4a2b0:	dd800617 	ldw	r22,24(sp)
   4a2b4:	dd400517 	ldw	r21,20(sp)
   4a2b8:	dd000417 	ldw	r20,16(sp)
   4a2bc:	dcc00317 	ldw	r19,12(sp)
   4a2c0:	dc800217 	ldw	r18,8(sp)
   4a2c4:	dc400117 	ldw	r17,4(sp)
   4a2c8:	dc000017 	ldw	r16,0(sp)
   4a2cc:	dec00a04 	addi	sp,sp,40
   4a2d0:	f800283a 	ret
   4a2d4:	a8c00217 	ldw	r3,8(r21)
   4a2d8:	8c63883a 	add	r17,r17,r17
   4a2dc:	8c63883a 	add	r17,r17,r17
   4a2e0:	1c45c83a 	sub	r2,r3,r17
   4a2e4:	a8800215 	stw	r2,8(r21)
   4a2e8:	b5800204 	addi	r22,r22,8
   4a2ec:	bdc00204 	addi	r23,r23,8
   4a2f0:	103fdb1e 	bne	r2,zero,4a260 <__alt_data_end+0xfffcf8e0>
   4a2f4:	0005883a 	mov	r2,zero
   4a2f8:	003fe806 	br	4a29c <__alt_data_end+0xfffcf91c>
   4a2fc:	004bcc80 	call	4bcc8 <__sfvwrite_r>
   4a300:	003fe606 	br	4a29c <__alt_data_end+0xfffcf91c>

0004a304 <__sprint_r>:
   4a304:	30c00217 	ldw	r3,8(r6)
   4a308:	18000126 	beq	r3,zero,4a310 <__sprint_r+0xc>
   4a30c:	004a2081 	jmpi	4a208 <__sprint_r.part.0>
   4a310:	30000115 	stw	zero,4(r6)
   4a314:	0005883a 	mov	r2,zero
   4a318:	f800283a 	ret

0004a31c <___vfiprintf_internal_r>:
   4a31c:	defeca04 	addi	sp,sp,-1240
   4a320:	dd813215 	stw	r22,1224(sp)
   4a324:	dd013015 	stw	r20,1216(sp)
   4a328:	dfc13515 	stw	ra,1236(sp)
   4a32c:	df013415 	stw	fp,1232(sp)
   4a330:	ddc13315 	stw	r23,1228(sp)
   4a334:	dd413115 	stw	r21,1220(sp)
   4a338:	dcc12f15 	stw	r19,1212(sp)
   4a33c:	dc812e15 	stw	r18,1208(sp)
   4a340:	dc412d15 	stw	r17,1204(sp)
   4a344:	dc012c15 	stw	r16,1200(sp)
   4a348:	d9012015 	stw	r4,1152(sp)
   4a34c:	d9c12115 	stw	r7,1156(sp)
   4a350:	2829883a 	mov	r20,r5
   4a354:	302d883a 	mov	r22,r6
   4a358:	20000226 	beq	r4,zero,4a364 <___vfiprintf_internal_r+0x48>
   4a35c:	20800e17 	ldw	r2,56(r4)
   4a360:	1001d326 	beq	r2,zero,4aab0 <___vfiprintf_internal_r+0x794>
   4a364:	a0c0030b 	ldhu	r3,12(r20)
   4a368:	1908000c 	andi	r4,r3,8192
   4a36c:	1805883a 	mov	r2,r3
   4a370:	2000071e 	bne	r4,zero,4a390 <___vfiprintf_internal_r+0x74>
   4a374:	a1001917 	ldw	r4,100(r20)
   4a378:	18880014 	ori	r2,r3,8192
   4a37c:	00f7ffc4 	movi	r3,-8193
   4a380:	20c8703a 	and	r4,r4,r3
   4a384:	a080030d 	sth	r2,12(r20)
   4a388:	1007883a 	mov	r3,r2
   4a38c:	a1001915 	stw	r4,100(r20)
   4a390:	1100020c 	andi	r4,r2,8
   4a394:	20018926 	beq	r4,zero,4a9bc <___vfiprintf_internal_r+0x6a0>
   4a398:	a1000417 	ldw	r4,16(r20)
   4a39c:	20018726 	beq	r4,zero,4a9bc <___vfiprintf_internal_r+0x6a0>
   4a3a0:	1080068c 	andi	r2,r2,26
   4a3a4:	01000284 	movi	r4,10
   4a3a8:	11018d26 	beq	r2,r4,4a9e0 <___vfiprintf_internal_r+0x6c4>
   4a3ac:	da810a04 	addi	r10,sp,1064
   4a3b0:	dac109c4 	addi	r11,sp,1063
   4a3b4:	07000174 	movhi	fp,5
   4a3b8:	05c00174 	movhi	r23,5
   4a3bc:	da811e15 	stw	r10,1144(sp)
   4a3c0:	52d5c83a 	sub	r10,r10,r11
   4a3c4:	e7099c04 	addi	fp,fp,9840
   4a3c8:	bdc99804 	addi	r23,r23,9824
   4a3cc:	dac11f15 	stw	r11,1148(sp)
   4a3d0:	dec11a15 	stw	sp,1128(sp)
   4a3d4:	d8011c15 	stw	zero,1136(sp)
   4a3d8:	d8011b15 	stw	zero,1132(sp)
   4a3dc:	d8012615 	stw	zero,1176(sp)
   4a3e0:	d8012215 	stw	zero,1160(sp)
   4a3e4:	da812715 	stw	r10,1180(sp)
   4a3e8:	d811883a 	mov	r8,sp
   4a3ec:	b021883a 	mov	r16,r22
   4a3f0:	80800007 	ldb	r2,0(r16)
   4a3f4:	10039c26 	beq	r2,zero,4b268 <___vfiprintf_internal_r+0xf4c>
   4a3f8:	01000944 	movi	r4,37
   4a3fc:	11039a26 	beq	r2,r4,4b268 <___vfiprintf_internal_r+0xf4c>
   4a400:	8005883a 	mov	r2,r16
   4a404:	00000106 	br	4a40c <___vfiprintf_internal_r+0xf0>
   4a408:	19000326 	beq	r3,r4,4a418 <___vfiprintf_internal_r+0xfc>
   4a40c:	10800044 	addi	r2,r2,1
   4a410:	10c00007 	ldb	r3,0(r2)
   4a414:	183ffc1e 	bne	r3,zero,4a408 <__alt_data_end+0xfffcfa88>
   4a418:	1425c83a 	sub	r18,r2,r16
   4a41c:	1023883a 	mov	r17,r2
   4a420:	90001026 	beq	r18,zero,4a464 <___vfiprintf_internal_r+0x148>
   4a424:	d8c11c17 	ldw	r3,1136(sp)
   4a428:	d8811b17 	ldw	r2,1132(sp)
   4a42c:	44000015 	stw	r16,0(r8)
   4a430:	90c7883a 	add	r3,r18,r3
   4a434:	10800044 	addi	r2,r2,1
   4a438:	44800115 	stw	r18,4(r8)
   4a43c:	d8c11c15 	stw	r3,1136(sp)
   4a440:	d8811b15 	stw	r2,1132(sp)
   4a444:	010001c4 	movi	r4,7
   4a448:	2080750e 	bge	r4,r2,4a620 <___vfiprintf_internal_r+0x304>
   4a44c:	18039d1e 	bne	r3,zero,4b2c4 <___vfiprintf_internal_r+0xfa8>
   4a450:	dac12217 	ldw	r11,1160(sp)
   4a454:	d8011b15 	stw	zero,1132(sp)
   4a458:	d811883a 	mov	r8,sp
   4a45c:	5c97883a 	add	r11,r11,r18
   4a460:	dac12215 	stw	r11,1160(sp)
   4a464:	88800007 	ldb	r2,0(r17)
   4a468:	1002e026 	beq	r2,zero,4afec <___vfiprintf_internal_r+0xcd0>
   4a46c:	88c00047 	ldb	r3,1(r17)
   4a470:	8c000044 	addi	r16,r17,1
   4a474:	d8011d85 	stb	zero,1142(sp)
   4a478:	000d883a 	mov	r6,zero
   4a47c:	027fffc4 	movi	r9,-1
   4a480:	0027883a 	mov	r19,zero
   4a484:	002b883a 	mov	r21,zero
   4a488:	01001604 	movi	r4,88
   4a48c:	01400244 	movi	r5,9
   4a490:	03000a84 	movi	r12,42
   4a494:	01c01b04 	movi	r7,108
   4a498:	84000044 	addi	r16,r16,1
   4a49c:	18bff804 	addi	r2,r3,-32
   4a4a0:	20825f36 	bltu	r4,r2,4ae20 <___vfiprintf_internal_r+0xb04>
   4a4a4:	100490ba 	slli	r2,r2,2
   4a4a8:	02800174 	movhi	r10,5
   4a4ac:	52a92f04 	addi	r10,r10,-23364
   4a4b0:	1285883a 	add	r2,r2,r10
   4a4b4:	10800017 	ldw	r2,0(r2)
   4a4b8:	1000683a 	jmp	r2
   4a4bc:	0004ac90 	cmplti	zero,zero,4786
   4a4c0:	0004ae20 	cmpeqi	zero,zero,4792
   4a4c4:	0004ae20 	cmpeqi	zero,zero,4792
   4a4c8:	0004ae14 	movui	zero,4792
   4a4cc:	0004ae20 	cmpeqi	zero,zero,4792
   4a4d0:	0004ae20 	cmpeqi	zero,zero,4792
   4a4d4:	0004ae20 	cmpeqi	zero,zero,4792
   4a4d8:	0004ae20 	cmpeqi	zero,zero,4792
   4a4dc:	0004ae20 	cmpeqi	zero,zero,4792
   4a4e0:	0004ae20 	cmpeqi	zero,zero,4792
   4a4e4:	0004adec 	andhi	zero,zero,4791
   4a4e8:	0004ae08 	cmpgei	zero,zero,4792
   4a4ec:	0004ae20 	cmpeqi	zero,zero,4792
   4a4f0:	0004aac0 	call	4aac <__alt_mem_onchip_memory2-0x3b554>
   4a4f4:	0004ac20 	cmpeqi	zero,zero,4784
   4a4f8:	0004ae20 	cmpeqi	zero,zero,4792
   4a4fc:	0004aba4 	muli	zero,zero,4782
   4a500:	0004abb0 	cmpltui	zero,zero,4782
   4a504:	0004abb0 	cmpltui	zero,zero,4782
   4a508:	0004abb0 	cmpltui	zero,zero,4782
   4a50c:	0004abb0 	cmpltui	zero,zero,4782
   4a510:	0004abb0 	cmpltui	zero,zero,4782
   4a514:	0004abb0 	cmpltui	zero,zero,4782
   4a518:	0004abb0 	cmpltui	zero,zero,4782
   4a51c:	0004abb0 	cmpltui	zero,zero,4782
   4a520:	0004abb0 	cmpltui	zero,zero,4782
   4a524:	0004ae20 	cmpeqi	zero,zero,4792
   4a528:	0004ae20 	cmpeqi	zero,zero,4792
   4a52c:	0004ae20 	cmpeqi	zero,zero,4792
   4a530:	0004ae20 	cmpeqi	zero,zero,4792
   4a534:	0004ae20 	cmpeqi	zero,zero,4792
   4a538:	0004ae20 	cmpeqi	zero,zero,4792
   4a53c:	0004ae20 	cmpeqi	zero,zero,4792
   4a540:	0004ae20 	cmpeqi	zero,zero,4792
   4a544:	0004ae20 	cmpeqi	zero,zero,4792
   4a548:	0004ae20 	cmpeqi	zero,zero,4792
   4a54c:	0004abdc 	xori	zero,zero,4783
   4a550:	0004ae20 	cmpeqi	zero,zero,4792
   4a554:	0004ae20 	cmpeqi	zero,zero,4792
   4a558:	0004ae20 	cmpeqi	zero,zero,4792
   4a55c:	0004ae20 	cmpeqi	zero,zero,4792
   4a560:	0004ae20 	cmpeqi	zero,zero,4792
   4a564:	0004ae20 	cmpeqi	zero,zero,4792
   4a568:	0004ae20 	cmpeqi	zero,zero,4792
   4a56c:	0004ae20 	cmpeqi	zero,zero,4792
   4a570:	0004ae20 	cmpeqi	zero,zero,4792
   4a574:	0004ae20 	cmpeqi	zero,zero,4792
   4a578:	0004a670 	cmpltui	zero,zero,4761
   4a57c:	0004ae20 	cmpeqi	zero,zero,4792
   4a580:	0004ae20 	cmpeqi	zero,zero,4792
   4a584:	0004ae20 	cmpeqi	zero,zero,4792
   4a588:	0004ae20 	cmpeqi	zero,zero,4792
   4a58c:	0004ae20 	cmpeqi	zero,zero,4792
   4a590:	0004a634 	movhi	zero,4760
   4a594:	0004ae20 	cmpeqi	zero,zero,4792
   4a598:	0004ae20 	cmpeqi	zero,zero,4792
   4a59c:	0004ab1c 	xori	zero,zero,4780
   4a5a0:	0004ae20 	cmpeqi	zero,zero,4792
   4a5a4:	0004ae20 	cmpeqi	zero,zero,4792
   4a5a8:	0004ae20 	cmpeqi	zero,zero,4792
   4a5ac:	0004ae20 	cmpeqi	zero,zero,4792
   4a5b0:	0004ae20 	cmpeqi	zero,zero,4792
   4a5b4:	0004ae20 	cmpeqi	zero,zero,4792
   4a5b8:	0004ae20 	cmpeqi	zero,zero,4792
   4a5bc:	0004ae20 	cmpeqi	zero,zero,4792
   4a5c0:	0004ae20 	cmpeqi	zero,zero,4792
   4a5c4:	0004ae20 	cmpeqi	zero,zero,4792
   4a5c8:	0004ab74 	movhi	zero,4781
   4a5cc:	0004ad0c 	andi	zero,zero,4788
   4a5d0:	0004ae20 	cmpeqi	zero,zero,4792
   4a5d4:	0004ae20 	cmpeqi	zero,zero,4792
   4a5d8:	0004ae20 	cmpeqi	zero,zero,4792
   4a5dc:	0004ad94 	movui	zero,4790
   4a5e0:	0004ad0c 	andi	zero,zero,4788
   4a5e4:	0004ae20 	cmpeqi	zero,zero,4792
   4a5e8:	0004ae20 	cmpeqi	zero,zero,4792
   4a5ec:	0004ada0 	cmpeqi	zero,zero,4790
   4a5f0:	0004ae20 	cmpeqi	zero,zero,4792
   4a5f4:	0004ac60 	cmpeqi	zero,zero,4785
   4a5f8:	0004a674 	movhi	zero,4761
   4a5fc:	0004ad48 	cmpgei	zero,zero,4789
   4a600:	0004ad88 	cmpgei	zero,zero,4790
   4a604:	0004ae20 	cmpeqi	zero,zero,4792
   4a608:	0004acac 	andhi	zero,zero,4786
   4a60c:	0004ae20 	cmpeqi	zero,zero,4792
   4a610:	0004a638 	rdprs	zero,zero,4760
   4a614:	0004ae20 	cmpeqi	zero,zero,4792
   4a618:	0004ae20 	cmpeqi	zero,zero,4792
   4a61c:	0004adb0 	cmpltui	zero,zero,4790
   4a620:	42000204 	addi	r8,r8,8
   4a624:	dac12217 	ldw	r11,1160(sp)
   4a628:	5c97883a 	add	r11,r11,r18
   4a62c:	dac12215 	stw	r11,1160(sp)
   4a630:	003f8c06 	br	4a464 <__alt_data_end+0xfffcfae4>
   4a634:	ad400414 	ori	r21,r21,16
   4a638:	a880080c 	andi	r2,r21,32
   4a63c:	10012f1e 	bne	r2,zero,4aafc <___vfiprintf_internal_r+0x7e0>
   4a640:	a880040c 	andi	r2,r21,16
   4a644:	1001ff1e 	bne	r2,zero,4ae44 <___vfiprintf_internal_r+0xb28>
   4a648:	a880100c 	andi	r2,r21,64
   4a64c:	1001fd26 	beq	r2,zero,4ae44 <___vfiprintf_internal_r+0xb28>
   4a650:	da812117 	ldw	r10,1156(sp)
   4a654:	002d883a 	mov	r22,zero
   4a658:	00800044 	movi	r2,1
   4a65c:	5480000b 	ldhu	r18,0(r10)
   4a660:	52800104 	addi	r10,r10,4
   4a664:	da812115 	stw	r10,1156(sp)
   4a668:	9009883a 	mov	r4,r18
   4a66c:	00000a06 	br	4a698 <___vfiprintf_internal_r+0x37c>
   4a670:	ad400414 	ori	r21,r21,16
   4a674:	a880080c 	andi	r2,r21,32
   4a678:	10011426 	beq	r2,zero,4aacc <___vfiprintf_internal_r+0x7b0>
   4a67c:	da812117 	ldw	r10,1156(sp)
   4a680:	0005883a 	mov	r2,zero
   4a684:	54800017 	ldw	r18,0(r10)
   4a688:	55800117 	ldw	r22,4(r10)
   4a68c:	52800204 	addi	r10,r10,8
   4a690:	da812115 	stw	r10,1156(sp)
   4a694:	9588b03a 	or	r4,r18,r22
   4a698:	d8011d85 	stb	zero,1142(sp)
   4a69c:	4823883a 	mov	r17,r9
   4a6a0:	0019883a 	mov	r12,zero
   4a6a4:	48000216 	blt	r9,zero,4a6b0 <___vfiprintf_internal_r+0x394>
   4a6a8:	00ffdfc4 	movi	r3,-129
   4a6ac:	a8ea703a 	and	r21,r21,r3
   4a6b0:	2002221e 	bne	r4,zero,4af3c <___vfiprintf_internal_r+0xc20>
   4a6b4:	4802c726 	beq	r9,zero,4b1d4 <___vfiprintf_internal_r+0xeb8>
   4a6b8:	10803fcc 	andi	r2,r2,255
   4a6bc:	00c00044 	movi	r3,1
   4a6c0:	10c24426 	beq	r2,r3,4afd4 <___vfiprintf_internal_r+0xcb8>
   4a6c4:	00c00084 	movi	r3,2
   4a6c8:	10c2cc26 	beq	r2,r3,4b1fc <___vfiprintf_internal_r+0xee0>
   4a6cc:	d8c10a04 	addi	r3,sp,1064
   4a6d0:	9008d0fa 	srli	r4,r18,3
   4a6d4:	b00a977a 	slli	r5,r22,29
   4a6d8:	b02cd0fa 	srli	r22,r22,3
   4a6dc:	948001cc 	andi	r18,r18,7
   4a6e0:	90800c04 	addi	r2,r18,48
   4a6e4:	18ffffc4 	addi	r3,r3,-1
   4a6e8:	2924b03a 	or	r18,r5,r4
   4a6ec:	18800005 	stb	r2,0(r3)
   4a6f0:	9588b03a 	or	r4,r18,r22
   4a6f4:	203ff61e 	bne	r4,zero,4a6d0 <__alt_data_end+0xfffcfd50>
   4a6f8:	a900004c 	andi	r4,r21,1
   4a6fc:	d8c12415 	stw	r3,1168(sp)
   4a700:	2002fb1e 	bne	r4,zero,4b2f0 <___vfiprintf_internal_r+0xfd4>
   4a704:	da811e17 	ldw	r10,1144(sp)
   4a708:	50e3c83a 	sub	r17,r10,r3
   4a70c:	8825883a 	mov	r18,r17
   4a710:	8a40010e 	bge	r17,r9,4a718 <___vfiprintf_internal_r+0x3fc>
   4a714:	4825883a 	mov	r18,r9
   4a718:	63003fcc 	andi	r12,r12,255
   4a71c:	6300201c 	xori	r12,r12,128
   4a720:	633fe004 	addi	r12,r12,-128
   4a724:	60000126 	beq	r12,zero,4a72c <___vfiprintf_internal_r+0x410>
   4a728:	94800044 	addi	r18,r18,1
   4a72c:	ab80008c 	andi	r14,r21,2
   4a730:	70000126 	beq	r14,zero,4a738 <___vfiprintf_internal_r+0x41c>
   4a734:	94800084 	addi	r18,r18,2
   4a738:	ad80210c 	andi	r22,r21,132
   4a73c:	b001df1e 	bne	r22,zero,4aebc <___vfiprintf_internal_r+0xba0>
   4a740:	9c8fc83a 	sub	r7,r19,r18
   4a744:	01c1dd0e 	bge	zero,r7,4aebc <___vfiprintf_internal_r+0xba0>
   4a748:	03000404 	movi	r12,16
   4a74c:	d8811c17 	ldw	r2,1136(sp)
   4a750:	61c3920e 	bge	r12,r7,4b59c <___vfiprintf_internal_r+0x1280>
   4a754:	02800174 	movhi	r10,5
   4a758:	52899c04 	addi	r10,r10,9840
   4a75c:	dc012915 	stw	r16,1188(sp)
   4a760:	d9811b17 	ldw	r6,1132(sp)
   4a764:	da812315 	stw	r10,1164(sp)
   4a768:	00c001c4 	movi	r3,7
   4a76c:	da412515 	stw	r9,1172(sp)
   4a770:	db812815 	stw	r14,1184(sp)
   4a774:	3821883a 	mov	r16,r7
   4a778:	00000506 	br	4a790 <___vfiprintf_internal_r+0x474>
   4a77c:	31400084 	addi	r5,r6,2
   4a780:	42000204 	addi	r8,r8,8
   4a784:	200d883a 	mov	r6,r4
   4a788:	843ffc04 	addi	r16,r16,-16
   4a78c:	64000d0e 	bge	r12,r16,4a7c4 <___vfiprintf_internal_r+0x4a8>
   4a790:	10800404 	addi	r2,r2,16
   4a794:	31000044 	addi	r4,r6,1
   4a798:	47000015 	stw	fp,0(r8)
   4a79c:	43000115 	stw	r12,4(r8)
   4a7a0:	d8811c15 	stw	r2,1136(sp)
   4a7a4:	d9011b15 	stw	r4,1132(sp)
   4a7a8:	193ff40e 	bge	r3,r4,4a77c <__alt_data_end+0xfffcfdfc>
   4a7ac:	1001b51e 	bne	r2,zero,4ae84 <___vfiprintf_internal_r+0xb68>
   4a7b0:	843ffc04 	addi	r16,r16,-16
   4a7b4:	000d883a 	mov	r6,zero
   4a7b8:	01400044 	movi	r5,1
   4a7bc:	d811883a 	mov	r8,sp
   4a7c0:	643ff316 	blt	r12,r16,4a790 <__alt_data_end+0xfffcfe10>
   4a7c4:	800f883a 	mov	r7,r16
   4a7c8:	da412517 	ldw	r9,1172(sp)
   4a7cc:	db812817 	ldw	r14,1184(sp)
   4a7d0:	dc012917 	ldw	r16,1188(sp)
   4a7d4:	dac12317 	ldw	r11,1164(sp)
   4a7d8:	3887883a 	add	r3,r7,r2
   4a7dc:	41c00115 	stw	r7,4(r8)
   4a7e0:	42c00015 	stw	r11,0(r8)
   4a7e4:	d8c11c15 	stw	r3,1136(sp)
   4a7e8:	d9411b15 	stw	r5,1132(sp)
   4a7ec:	008001c4 	movi	r2,7
   4a7f0:	11429316 	blt	r2,r5,4b240 <___vfiprintf_internal_r+0xf24>
   4a7f4:	d9011d87 	ldb	r4,1142(sp)
   4a7f8:	42000204 	addi	r8,r8,8
   4a7fc:	28800044 	addi	r2,r5,1
   4a800:	2001b31e 	bne	r4,zero,4aed0 <___vfiprintf_internal_r+0xbb4>
   4a804:	70000c26 	beq	r14,zero,4a838 <___vfiprintf_internal_r+0x51c>
   4a808:	d9011d04 	addi	r4,sp,1140
   4a80c:	18c00084 	addi	r3,r3,2
   4a810:	41000015 	stw	r4,0(r8)
   4a814:	01000084 	movi	r4,2
   4a818:	41000115 	stw	r4,4(r8)
   4a81c:	d8c11c15 	stw	r3,1136(sp)
   4a820:	d8811b15 	stw	r2,1132(sp)
   4a824:	010001c4 	movi	r4,7
   4a828:	20826516 	blt	r4,r2,4b1c0 <___vfiprintf_internal_r+0xea4>
   4a82c:	100b883a 	mov	r5,r2
   4a830:	42000204 	addi	r8,r8,8
   4a834:	10800044 	addi	r2,r2,1
   4a838:	01002004 	movi	r4,128
   4a83c:	b1021a26 	beq	r22,r4,4b0a8 <___vfiprintf_internal_r+0xd8c>
   4a840:	4c6dc83a 	sub	r22,r9,r17
   4a844:	0580230e 	bge	zero,r22,4a8d4 <___vfiprintf_internal_r+0x5b8>
   4a848:	01c00404 	movi	r7,16
   4a84c:	3d83300e 	bge	r7,r22,4b510 <___vfiprintf_internal_r+0x11f4>
   4a850:	00800174 	movhi	r2,5
   4a854:	10899804 	addi	r2,r2,9824
   4a858:	d8812315 	stw	r2,1164(sp)
   4a85c:	030001c4 	movi	r12,7
   4a860:	00000506 	br	4a878 <___vfiprintf_internal_r+0x55c>
   4a864:	28800084 	addi	r2,r5,2
   4a868:	42000204 	addi	r8,r8,8
   4a86c:	200b883a 	mov	r5,r4
   4a870:	b5bffc04 	addi	r22,r22,-16
   4a874:	3d800d0e 	bge	r7,r22,4a8ac <___vfiprintf_internal_r+0x590>
   4a878:	18c00404 	addi	r3,r3,16
   4a87c:	29000044 	addi	r4,r5,1
   4a880:	45c00015 	stw	r23,0(r8)
   4a884:	41c00115 	stw	r7,4(r8)
   4a888:	d8c11c15 	stw	r3,1136(sp)
   4a88c:	d9011b15 	stw	r4,1132(sp)
   4a890:	613ff40e 	bge	r12,r4,4a864 <__alt_data_end+0xfffcfee4>
   4a894:	18019b1e 	bne	r3,zero,4af04 <___vfiprintf_internal_r+0xbe8>
   4a898:	b5bffc04 	addi	r22,r22,-16
   4a89c:	000b883a 	mov	r5,zero
   4a8a0:	00800044 	movi	r2,1
   4a8a4:	d811883a 	mov	r8,sp
   4a8a8:	3dbff316 	blt	r7,r22,4a878 <__alt_data_end+0xfffcfef8>
   4a8ac:	da812317 	ldw	r10,1164(sp)
   4a8b0:	1d87883a 	add	r3,r3,r22
   4a8b4:	45800115 	stw	r22,4(r8)
   4a8b8:	42800015 	stw	r10,0(r8)
   4a8bc:	d8c11c15 	stw	r3,1136(sp)
   4a8c0:	d8811b15 	stw	r2,1132(sp)
   4a8c4:	010001c4 	movi	r4,7
   4a8c8:	2081dd16 	blt	r4,r2,4b040 <___vfiprintf_internal_r+0xd24>
   4a8cc:	42000204 	addi	r8,r8,8
   4a8d0:	10800044 	addi	r2,r2,1
   4a8d4:	da812417 	ldw	r10,1168(sp)
   4a8d8:	1c47883a 	add	r3,r3,r17
   4a8dc:	44400115 	stw	r17,4(r8)
   4a8e0:	42800015 	stw	r10,0(r8)
   4a8e4:	d8c11c15 	stw	r3,1136(sp)
   4a8e8:	d8811b15 	stw	r2,1132(sp)
   4a8ec:	010001c4 	movi	r4,7
   4a8f0:	2081dc0e 	bge	r4,r2,4b064 <___vfiprintf_internal_r+0xd48>
   4a8f4:	1802611e 	bne	r3,zero,4b27c <___vfiprintf_internal_r+0xf60>
   4a8f8:	d8011b15 	stw	zero,1132(sp)
   4a8fc:	aac0010c 	andi	r11,r21,4
   4a900:	58002726 	beq	r11,zero,4a9a0 <___vfiprintf_internal_r+0x684>
   4a904:	9ca3c83a 	sub	r17,r19,r18
   4a908:	d811883a 	mov	r8,sp
   4a90c:	0443510e 	bge	zero,r17,4b654 <___vfiprintf_internal_r+0x1338>
   4a910:	01c00404 	movi	r7,16
   4a914:	3c43320e 	bge	r7,r17,4b5e0 <___vfiprintf_internal_r+0x12c4>
   4a918:	00800174 	movhi	r2,5
   4a91c:	10899c04 	addi	r2,r2,9840
   4a920:	d9011b17 	ldw	r4,1132(sp)
   4a924:	d8812315 	stw	r2,1164(sp)
   4a928:	382d883a 	mov	r22,r7
   4a92c:	054001c4 	movi	r21,7
   4a930:	00000506 	br	4a948 <___vfiprintf_internal_r+0x62c>
   4a934:	21400084 	addi	r5,r4,2
   4a938:	42000204 	addi	r8,r8,8
   4a93c:	1009883a 	mov	r4,r2
   4a940:	8c7ffc04 	addi	r17,r17,-16
   4a944:	b4400d0e 	bge	r22,r17,4a97c <___vfiprintf_internal_r+0x660>
   4a948:	18c00404 	addi	r3,r3,16
   4a94c:	20800044 	addi	r2,r4,1
   4a950:	47000015 	stw	fp,0(r8)
   4a954:	45800115 	stw	r22,4(r8)
   4a958:	d8c11c15 	stw	r3,1136(sp)
   4a95c:	d8811b15 	stw	r2,1132(sp)
   4a960:	a8bff40e 	bge	r21,r2,4a934 <__alt_data_end+0xfffcffb4>
   4a964:	1801ac1e 	bne	r3,zero,4b018 <___vfiprintf_internal_r+0xcfc>
   4a968:	8c7ffc04 	addi	r17,r17,-16
   4a96c:	0009883a 	mov	r4,zero
   4a970:	01400044 	movi	r5,1
   4a974:	d811883a 	mov	r8,sp
   4a978:	b47ff316 	blt	r22,r17,4a948 <__alt_data_end+0xfffcffc8>
   4a97c:	da812317 	ldw	r10,1164(sp)
   4a980:	1c47883a 	add	r3,r3,r17
   4a984:	44400115 	stw	r17,4(r8)
   4a988:	42800015 	stw	r10,0(r8)
   4a98c:	d8c11c15 	stw	r3,1136(sp)
   4a990:	d9411b15 	stw	r5,1132(sp)
   4a994:	008001c4 	movi	r2,7
   4a998:	1141b70e 	bge	r2,r5,4b078 <___vfiprintf_internal_r+0xd5c>
   4a99c:	1802cf1e 	bne	r3,zero,4b4dc <___vfiprintf_internal_r+0x11c0>
   4a9a0:	94c2ca16 	blt	r18,r19,4b4cc <___vfiprintf_internal_r+0x11b0>
   4a9a4:	dac12217 	ldw	r11,1160(sp)
   4a9a8:	5c97883a 	add	r11,r11,r18
   4a9ac:	dac12215 	stw	r11,1160(sp)
   4a9b0:	d8011b15 	stw	zero,1132(sp)
   4a9b4:	d811883a 	mov	r8,sp
   4a9b8:	003e8d06 	br	4a3f0 <__alt_data_end+0xfffcfa70>
   4a9bc:	d9012017 	ldw	r4,1152(sp)
   4a9c0:	a00b883a 	mov	r5,r20
   4a9c4:	0045cd80 	call	45cd8 <__swsetup_r>
   4a9c8:	10002c1e 	bne	r2,zero,4aa7c <___vfiprintf_internal_r+0x760>
   4a9cc:	a0c0030b 	ldhu	r3,12(r20)
   4a9d0:	01000284 	movi	r4,10
   4a9d4:	1805883a 	mov	r2,r3
   4a9d8:	1080068c 	andi	r2,r2,26
   4a9dc:	113e731e 	bne	r2,r4,4a3ac <__alt_data_end+0xfffcfa2c>
   4a9e0:	a080038b 	ldhu	r2,14(r20)
   4a9e4:	113fffcc 	andi	r4,r2,65535
   4a9e8:	2120001c 	xori	r4,r4,32768
   4a9ec:	21200004 	addi	r4,r4,-32768
   4a9f0:	203e6e16 	blt	r4,zero,4a3ac <__alt_data_end+0xfffcfa2c>
   4a9f4:	a3001917 	ldw	r12,100(r20)
   4a9f8:	a2c00717 	ldw	r11,28(r20)
   4a9fc:	a2800917 	ldw	r10,36(r20)
   4aa00:	d9012017 	ldw	r4,1152(sp)
   4aa04:	d9c12117 	ldw	r7,1156(sp)
   4aa08:	02410004 	movi	r9,1024
   4aa0c:	18ffff4c 	andi	r3,r3,65533
   4aa10:	da4b883a 	add	r5,sp,r9
   4aa14:	b00d883a 	mov	r6,r22
   4aa18:	d8c1030d 	sth	r3,1036(sp)
   4aa1c:	db011915 	stw	r12,1124(sp)
   4aa20:	d881038d 	sth	r2,1038(sp)
   4aa24:	dac10715 	stw	r11,1052(sp)
   4aa28:	da810915 	stw	r10,1060(sp)
   4aa2c:	dec10015 	stw	sp,1024(sp)
   4aa30:	dec10415 	stw	sp,1040(sp)
   4aa34:	da410215 	stw	r9,1032(sp)
   4aa38:	da410515 	stw	r9,1044(sp)
   4aa3c:	d8010615 	stw	zero,1048(sp)
   4aa40:	004a31c0 	call	4a31c <___vfiprintf_internal_r>
   4aa44:	1021883a 	mov	r16,r2
   4aa48:	10000416 	blt	r2,zero,4aa5c <___vfiprintf_internal_r+0x740>
   4aa4c:	d9012017 	ldw	r4,1152(sp)
   4aa50:	d9410004 	addi	r5,sp,1024
   4aa54:	00477300 	call	47730 <_fflush_r>
   4aa58:	1002fc1e 	bne	r2,zero,4b64c <___vfiprintf_internal_r+0x1330>
   4aa5c:	d881030b 	ldhu	r2,1036(sp)
   4aa60:	1080100c 	andi	r2,r2,64
   4aa64:	10000326 	beq	r2,zero,4aa74 <___vfiprintf_internal_r+0x758>
   4aa68:	a080030b 	ldhu	r2,12(r20)
   4aa6c:	10801014 	ori	r2,r2,64
   4aa70:	a080030d 	sth	r2,12(r20)
   4aa74:	8005883a 	mov	r2,r16
   4aa78:	00000106 	br	4aa80 <___vfiprintf_internal_r+0x764>
   4aa7c:	00bfffc4 	movi	r2,-1
   4aa80:	dfc13517 	ldw	ra,1236(sp)
   4aa84:	df013417 	ldw	fp,1232(sp)
   4aa88:	ddc13317 	ldw	r23,1228(sp)
   4aa8c:	dd813217 	ldw	r22,1224(sp)
   4aa90:	dd413117 	ldw	r21,1220(sp)
   4aa94:	dd013017 	ldw	r20,1216(sp)
   4aa98:	dcc12f17 	ldw	r19,1212(sp)
   4aa9c:	dc812e17 	ldw	r18,1208(sp)
   4aaa0:	dc412d17 	ldw	r17,1204(sp)
   4aaa4:	dc012c17 	ldw	r16,1200(sp)
   4aaa8:	dec13604 	addi	sp,sp,1240
   4aaac:	f800283a 	ret
   4aab0:	0047cd80 	call	47cd8 <__sinit>
   4aab4:	003e2b06 	br	4a364 <__alt_data_end+0xfffcf9e4>
   4aab8:	04e7c83a 	sub	r19,zero,r19
   4aabc:	d8812115 	stw	r2,1156(sp)
   4aac0:	ad400114 	ori	r21,r21,4
   4aac4:	80c00007 	ldb	r3,0(r16)
   4aac8:	003e7306 	br	4a498 <__alt_data_end+0xfffcfb18>
   4aacc:	a880040c 	andi	r2,r21,16
   4aad0:	1000e41e 	bne	r2,zero,4ae64 <___vfiprintf_internal_r+0xb48>
   4aad4:	a880100c 	andi	r2,r21,64
   4aad8:	1000e226 	beq	r2,zero,4ae64 <___vfiprintf_internal_r+0xb48>
   4aadc:	da812117 	ldw	r10,1156(sp)
   4aae0:	002d883a 	mov	r22,zero
   4aae4:	0005883a 	mov	r2,zero
   4aae8:	5480000b 	ldhu	r18,0(r10)
   4aaec:	52800104 	addi	r10,r10,4
   4aaf0:	da812115 	stw	r10,1156(sp)
   4aaf4:	9009883a 	mov	r4,r18
   4aaf8:	003ee706 	br	4a698 <__alt_data_end+0xfffcfd18>
   4aafc:	da812117 	ldw	r10,1156(sp)
   4ab00:	00800044 	movi	r2,1
   4ab04:	54800017 	ldw	r18,0(r10)
   4ab08:	55800117 	ldw	r22,4(r10)
   4ab0c:	52800204 	addi	r10,r10,8
   4ab10:	da812115 	stw	r10,1156(sp)
   4ab14:	9588b03a 	or	r4,r18,r22
   4ab18:	003edf06 	br	4a698 <__alt_data_end+0xfffcfd18>
   4ab1c:	02c00174 	movhi	r11,5
   4ab20:	5ac93204 	addi	r11,r11,9416
   4ab24:	d9811d85 	stb	r6,1142(sp)
   4ab28:	dac12615 	stw	r11,1176(sp)
   4ab2c:	a900080c 	andi	r4,r21,32
   4ab30:	d8812117 	ldw	r2,1156(sp)
   4ab34:	2000a526 	beq	r4,zero,4adcc <___vfiprintf_internal_r+0xab0>
   4ab38:	da812117 	ldw	r10,1156(sp)
   4ab3c:	14800017 	ldw	r18,0(r2)
   4ab40:	15800117 	ldw	r22,4(r2)
   4ab44:	52800204 	addi	r10,r10,8
   4ab48:	da812115 	stw	r10,1156(sp)
   4ab4c:	a880004c 	andi	r2,r21,1
   4ab50:	1001d926 	beq	r2,zero,4b2b8 <___vfiprintf_internal_r+0xf9c>
   4ab54:	9588b03a 	or	r4,r18,r22
   4ab58:	20024426 	beq	r4,zero,4b46c <___vfiprintf_internal_r+0x1150>
   4ab5c:	00800c04 	movi	r2,48
   4ab60:	d8811d05 	stb	r2,1140(sp)
   4ab64:	d8c11d45 	stb	r3,1141(sp)
   4ab68:	ad400094 	ori	r21,r21,2
   4ab6c:	00800084 	movi	r2,2
   4ab70:	003ec906 	br	4a698 <__alt_data_end+0xfffcfd18>
   4ab74:	da812117 	ldw	r10,1156(sp)
   4ab78:	04800044 	movi	r18,1
   4ab7c:	dac10004 	addi	r11,sp,1024
   4ab80:	50800017 	ldw	r2,0(r10)
   4ab84:	52800104 	addi	r10,r10,4
   4ab88:	d8011d85 	stb	zero,1142(sp)
   4ab8c:	d8810005 	stb	r2,1024(sp)
   4ab90:	da812115 	stw	r10,1156(sp)
   4ab94:	9023883a 	mov	r17,r18
   4ab98:	dac12415 	stw	r11,1168(sp)
   4ab9c:	0013883a 	mov	r9,zero
   4aba0:	003ee206 	br	4a72c <__alt_data_end+0xfffcfdac>
   4aba4:	ad402014 	ori	r21,r21,128
   4aba8:	80c00007 	ldb	r3,0(r16)
   4abac:	003e3a06 	br	4a498 <__alt_data_end+0xfffcfb18>
   4abb0:	8015883a 	mov	r10,r16
   4abb4:	0027883a 	mov	r19,zero
   4abb8:	18bff404 	addi	r2,r3,-48
   4abbc:	50c00007 	ldb	r3,0(r10)
   4abc0:	9cc002a4 	muli	r19,r19,10
   4abc4:	84000044 	addi	r16,r16,1
   4abc8:	8015883a 	mov	r10,r16
   4abcc:	98a7883a 	add	r19,r19,r2
   4abd0:	18bff404 	addi	r2,r3,-48
   4abd4:	28bff92e 	bgeu	r5,r2,4abbc <__alt_data_end+0xfffd023c>
   4abd8:	003e3006 	br	4a49c <__alt_data_end+0xfffcfb1c>
   4abdc:	ad400414 	ori	r21,r21,16
   4abe0:	d9811d85 	stb	r6,1142(sp)
   4abe4:	a880080c 	andi	r2,r21,32
   4abe8:	d8c12117 	ldw	r3,1156(sp)
   4abec:	10004b26 	beq	r2,zero,4ad1c <___vfiprintf_internal_r+0xa00>
   4abf0:	da812117 	ldw	r10,1156(sp)
   4abf4:	18800117 	ldw	r2,4(r3)
   4abf8:	1c800017 	ldw	r18,0(r3)
   4abfc:	52800204 	addi	r10,r10,8
   4ac00:	da812115 	stw	r10,1156(sp)
   4ac04:	102d883a 	mov	r22,r2
   4ac08:	1001f116 	blt	r2,zero,4b3d0 <___vfiprintf_internal_r+0x10b4>
   4ac0c:	db011d83 	ldbu	r12,1142(sp)
   4ac10:	4823883a 	mov	r17,r9
   4ac14:	00800044 	movi	r2,1
   4ac18:	9588b03a 	or	r4,r18,r22
   4ac1c:	003ea106 	br	4a6a4 <__alt_data_end+0xfffcfd24>
   4ac20:	80c00007 	ldb	r3,0(r16)
   4ac24:	82800044 	addi	r10,r16,1
   4ac28:	1b027f26 	beq	r3,r12,4b628 <___vfiprintf_internal_r+0x130c>
   4ac2c:	18bff404 	addi	r2,r3,-48
   4ac30:	5021883a 	mov	r16,r10
   4ac34:	0013883a 	mov	r9,zero
   4ac38:	28be1836 	bltu	r5,r2,4a49c <__alt_data_end+0xfffcfb1c>
   4ac3c:	80c00007 	ldb	r3,0(r16)
   4ac40:	4a4002a4 	muli	r9,r9,10
   4ac44:	84000044 	addi	r16,r16,1
   4ac48:	1253883a 	add	r9,r2,r9
   4ac4c:	18bff404 	addi	r2,r3,-48
   4ac50:	28bffa2e 	bgeu	r5,r2,4ac3c <__alt_data_end+0xfffd02bc>
   4ac54:	483e110e 	bge	r9,zero,4a49c <__alt_data_end+0xfffcfb1c>
   4ac58:	027fffc4 	movi	r9,-1
   4ac5c:	003e0f06 	br	4a49c <__alt_data_end+0xfffcfb1c>
   4ac60:	d9811d85 	stb	r6,1142(sp)
   4ac64:	a880080c 	andi	r2,r21,32
   4ac68:	1001ee26 	beq	r2,zero,4b424 <___vfiprintf_internal_r+0x1108>
   4ac6c:	da812117 	ldw	r10,1156(sp)
   4ac70:	dac12217 	ldw	r11,1160(sp)
   4ac74:	50800017 	ldw	r2,0(r10)
   4ac78:	5807d7fa 	srai	r3,r11,31
   4ac7c:	52800104 	addi	r10,r10,4
   4ac80:	da812115 	stw	r10,1156(sp)
   4ac84:	12c00015 	stw	r11,0(r2)
   4ac88:	10c00115 	stw	r3,4(r2)
   4ac8c:	003dd806 	br	4a3f0 <__alt_data_end+0xfffcfa70>
   4ac90:	30803fcc 	andi	r2,r6,255
   4ac94:	1080201c 	xori	r2,r2,128
   4ac98:	10bfe004 	addi	r2,r2,-128
   4ac9c:	1001df1e 	bne	r2,zero,4b41c <___vfiprintf_internal_r+0x1100>
   4aca0:	01800804 	movi	r6,32
   4aca4:	80c00007 	ldb	r3,0(r16)
   4aca8:	003dfb06 	br	4a498 <__alt_data_end+0xfffcfb18>
   4acac:	da812117 	ldw	r10,1156(sp)
   4acb0:	dac12117 	ldw	r11,1156(sp)
   4acb4:	d8011d85 	stb	zero,1142(sp)
   4acb8:	52800017 	ldw	r10,0(r10)
   4acbc:	5d800104 	addi	r22,r11,4
   4acc0:	da812415 	stw	r10,1168(sp)
   4acc4:	50023b26 	beq	r10,zero,4b5b4 <___vfiprintf_internal_r+0x1298>
   4acc8:	d9012417 	ldw	r4,1168(sp)
   4accc:	48021f16 	blt	r9,zero,4b54c <___vfiprintf_internal_r+0x1230>
   4acd0:	480d883a 	mov	r6,r9
   4acd4:	000b883a 	mov	r5,zero
   4acd8:	da012a15 	stw	r8,1192(sp)
   4acdc:	da412b15 	stw	r9,1196(sp)
   4ace0:	0048cec0 	call	48cec <memchr>
   4ace4:	da012a17 	ldw	r8,1192(sp)
   4ace8:	da412b17 	ldw	r9,1196(sp)
   4acec:	10024726 	beq	r2,zero,4b60c <___vfiprintf_internal_r+0x12f0>
   4acf0:	d8c12417 	ldw	r3,1168(sp)
   4acf4:	10e3c83a 	sub	r17,r2,r3
   4acf8:	4c41f616 	blt	r9,r17,4b4d4 <___vfiprintf_internal_r+0x11b8>
   4acfc:	db011d83 	ldbu	r12,1142(sp)
   4ad00:	dd812115 	stw	r22,1156(sp)
   4ad04:	0013883a 	mov	r9,zero
   4ad08:	003e8006 	br	4a70c <__alt_data_end+0xfffcfd8c>
   4ad0c:	d9811d85 	stb	r6,1142(sp)
   4ad10:	a880080c 	andi	r2,r21,32
   4ad14:	d8c12117 	ldw	r3,1156(sp)
   4ad18:	103fb51e 	bne	r2,zero,4abf0 <__alt_data_end+0xfffd0270>
   4ad1c:	a880040c 	andi	r2,r21,16
   4ad20:	10015e1e 	bne	r2,zero,4b29c <___vfiprintf_internal_r+0xf80>
   4ad24:	a880100c 	andi	r2,r21,64
   4ad28:	10015c26 	beq	r2,zero,4b29c <___vfiprintf_internal_r+0xf80>
   4ad2c:	1c80000f 	ldh	r18,0(r3)
   4ad30:	da812117 	ldw	r10,1156(sp)
   4ad34:	902dd7fa 	srai	r22,r18,31
   4ad38:	52800104 	addi	r10,r10,4
   4ad3c:	da812115 	stw	r10,1156(sp)
   4ad40:	b005883a 	mov	r2,r22
   4ad44:	003fb006 	br	4ac08 <__alt_data_end+0xfffd0288>
   4ad48:	da812117 	ldw	r10,1156(sp)
   4ad4c:	00800c04 	movi	r2,48
   4ad50:	02c00174 	movhi	r11,5
   4ad54:	54800017 	ldw	r18,0(r10)
   4ad58:	d8811d05 	stb	r2,1140(sp)
   4ad5c:	52800104 	addi	r10,r10,4
   4ad60:	00801e04 	movi	r2,120
   4ad64:	5ac93704 	addi	r11,r11,9436
   4ad68:	d8811d45 	stb	r2,1141(sp)
   4ad6c:	002d883a 	mov	r22,zero
   4ad70:	ad400094 	ori	r21,r21,2
   4ad74:	da812115 	stw	r10,1156(sp)
   4ad78:	dac12615 	stw	r11,1176(sp)
   4ad7c:	00800084 	movi	r2,2
   4ad80:	9009883a 	mov	r4,r18
   4ad84:	003e4406 	br	4a698 <__alt_data_end+0xfffcfd18>
   4ad88:	ad400814 	ori	r21,r21,32
   4ad8c:	80c00007 	ldb	r3,0(r16)
   4ad90:	003dc106 	br	4a498 <__alt_data_end+0xfffcfb18>
   4ad94:	ad401014 	ori	r21,r21,64
   4ad98:	80c00007 	ldb	r3,0(r16)
   4ad9c:	003dbe06 	br	4a498 <__alt_data_end+0xfffcfb18>
   4ada0:	80c00007 	ldb	r3,0(r16)
   4ada4:	19c1de26 	beq	r3,r7,4b520 <___vfiprintf_internal_r+0x1204>
   4ada8:	ad400414 	ori	r21,r21,16
   4adac:	003dba06 	br	4a498 <__alt_data_end+0xfffcfb18>
   4adb0:	00800174 	movhi	r2,5
   4adb4:	10893704 	addi	r2,r2,9436
   4adb8:	d8812615 	stw	r2,1176(sp)
   4adbc:	d9811d85 	stb	r6,1142(sp)
   4adc0:	a900080c 	andi	r4,r21,32
   4adc4:	d8812117 	ldw	r2,1156(sp)
   4adc8:	203f5b1e 	bne	r4,zero,4ab38 <__alt_data_end+0xfffd01b8>
   4adcc:	a900040c 	andi	r4,r21,16
   4add0:	2001a826 	beq	r4,zero,4b474 <___vfiprintf_internal_r+0x1158>
   4add4:	dac12117 	ldw	r11,1156(sp)
   4add8:	14800017 	ldw	r18,0(r2)
   4addc:	002d883a 	mov	r22,zero
   4ade0:	5ac00104 	addi	r11,r11,4
   4ade4:	dac12115 	stw	r11,1156(sp)
   4ade8:	003f5806 	br	4ab4c <__alt_data_end+0xfffd01cc>
   4adec:	da812117 	ldw	r10,1156(sp)
   4adf0:	54c00017 	ldw	r19,0(r10)
   4adf4:	50800104 	addi	r2,r10,4
   4adf8:	983f2f16 	blt	r19,zero,4aab8 <__alt_data_end+0xfffd0138>
   4adfc:	d8812115 	stw	r2,1156(sp)
   4ae00:	80c00007 	ldb	r3,0(r16)
   4ae04:	003da406 	br	4a498 <__alt_data_end+0xfffcfb18>
   4ae08:	01800ac4 	movi	r6,43
   4ae0c:	80c00007 	ldb	r3,0(r16)
   4ae10:	003da106 	br	4a498 <__alt_data_end+0xfffcfb18>
   4ae14:	ad400054 	ori	r21,r21,1
   4ae18:	80c00007 	ldb	r3,0(r16)
   4ae1c:	003d9e06 	br	4a498 <__alt_data_end+0xfffcfb18>
   4ae20:	d9811d85 	stb	r6,1142(sp)
   4ae24:	18007126 	beq	r3,zero,4afec <___vfiprintf_internal_r+0xcd0>
   4ae28:	04800044 	movi	r18,1
   4ae2c:	d8c10005 	stb	r3,1024(sp)
   4ae30:	d8c10004 	addi	r3,sp,1024
   4ae34:	d8011d85 	stb	zero,1142(sp)
   4ae38:	9023883a 	mov	r17,r18
   4ae3c:	d8c12415 	stw	r3,1168(sp)
   4ae40:	003f5606 	br	4ab9c <__alt_data_end+0xfffd021c>
   4ae44:	dac12117 	ldw	r11,1156(sp)
   4ae48:	002d883a 	mov	r22,zero
   4ae4c:	00800044 	movi	r2,1
   4ae50:	5c800017 	ldw	r18,0(r11)
   4ae54:	5ac00104 	addi	r11,r11,4
   4ae58:	dac12115 	stw	r11,1156(sp)
   4ae5c:	9009883a 	mov	r4,r18
   4ae60:	003e0d06 	br	4a698 <__alt_data_end+0xfffcfd18>
   4ae64:	dac12117 	ldw	r11,1156(sp)
   4ae68:	002d883a 	mov	r22,zero
   4ae6c:	0005883a 	mov	r2,zero
   4ae70:	5c800017 	ldw	r18,0(r11)
   4ae74:	5ac00104 	addi	r11,r11,4
   4ae78:	dac12115 	stw	r11,1156(sp)
   4ae7c:	9009883a 	mov	r4,r18
   4ae80:	003e0506 	br	4a698 <__alt_data_end+0xfffcfd18>
   4ae84:	d9012017 	ldw	r4,1152(sp)
   4ae88:	a00b883a 	mov	r5,r20
   4ae8c:	d9811a04 	addi	r6,sp,1128
   4ae90:	d8c12a15 	stw	r3,1192(sp)
   4ae94:	db012b15 	stw	r12,1196(sp)
   4ae98:	004a2080 	call	4a208 <__sprint_r.part.0>
   4ae9c:	d8c12a17 	ldw	r3,1192(sp)
   4aea0:	db012b17 	ldw	r12,1196(sp)
   4aea4:	1000571e 	bne	r2,zero,4b004 <___vfiprintf_internal_r+0xce8>
   4aea8:	d9811b17 	ldw	r6,1132(sp)
   4aeac:	d8811c17 	ldw	r2,1136(sp)
   4aeb0:	d811883a 	mov	r8,sp
   4aeb4:	31400044 	addi	r5,r6,1
   4aeb8:	003e3306 	br	4a788 <__alt_data_end+0xfffcfe08>
   4aebc:	d9411b17 	ldw	r5,1132(sp)
   4aec0:	d8c11c17 	ldw	r3,1136(sp)
   4aec4:	28800044 	addi	r2,r5,1
   4aec8:	d9011d87 	ldb	r4,1142(sp)
   4aecc:	203e4d26 	beq	r4,zero,4a804 <__alt_data_end+0xfffcfe84>
   4aed0:	01000044 	movi	r4,1
   4aed4:	d9411d84 	addi	r5,sp,1142
   4aed8:	1907883a 	add	r3,r3,r4
   4aedc:	41400015 	stw	r5,0(r8)
   4aee0:	41000115 	stw	r4,4(r8)
   4aee4:	d8c11c15 	stw	r3,1136(sp)
   4aee8:	d8811b15 	stw	r2,1132(sp)
   4aeec:	014001c4 	movi	r5,7
   4aef0:	2880aa16 	blt	r5,r2,4b19c <___vfiprintf_internal_r+0xe80>
   4aef4:	100b883a 	mov	r5,r2
   4aef8:	42000204 	addi	r8,r8,8
   4aefc:	10800044 	addi	r2,r2,1
   4af00:	003e4006 	br	4a804 <__alt_data_end+0xfffcfe84>
   4af04:	d9012017 	ldw	r4,1152(sp)
   4af08:	a00b883a 	mov	r5,r20
   4af0c:	d9811a04 	addi	r6,sp,1128
   4af10:	d9c12a15 	stw	r7,1192(sp)
   4af14:	db012b15 	stw	r12,1196(sp)
   4af18:	004a2080 	call	4a208 <__sprint_r.part.0>
   4af1c:	d9c12a17 	ldw	r7,1192(sp)
   4af20:	db012b17 	ldw	r12,1196(sp)
   4af24:	1000371e 	bne	r2,zero,4b004 <___vfiprintf_internal_r+0xce8>
   4af28:	d9411b17 	ldw	r5,1132(sp)
   4af2c:	d8c11c17 	ldw	r3,1136(sp)
   4af30:	d811883a 	mov	r8,sp
   4af34:	28800044 	addi	r2,r5,1
   4af38:	003e4d06 	br	4a870 <__alt_data_end+0xfffcfef0>
   4af3c:	10803fcc 	andi	r2,r2,255
   4af40:	00c00044 	movi	r3,1
   4af44:	10fddf1e 	bne	r2,r3,4a6c4 <__alt_data_end+0xfffcfd44>
   4af48:	b000021e 	bne	r22,zero,4af54 <___vfiprintf_internal_r+0xc38>
   4af4c:	00800244 	movi	r2,9
   4af50:	1480202e 	bgeu	r2,r18,4afd4 <___vfiprintf_internal_r+0xcb8>
   4af54:	dc012515 	stw	r16,1172(sp)
   4af58:	dc410a04 	addi	r17,sp,1064
   4af5c:	9021883a 	mov	r16,r18
   4af60:	da012415 	stw	r8,1168(sp)
   4af64:	b025883a 	mov	r18,r22
   4af68:	da412315 	stw	r9,1164(sp)
   4af6c:	602d883a 	mov	r22,r12
   4af70:	8009883a 	mov	r4,r16
   4af74:	900b883a 	mov	r5,r18
   4af78:	01800284 	movi	r6,10
   4af7c:	000f883a 	mov	r7,zero
   4af80:	004d1340 	call	4d134 <__umoddi3>
   4af84:	10800c04 	addi	r2,r2,48
   4af88:	8c7fffc4 	addi	r17,r17,-1
   4af8c:	8009883a 	mov	r4,r16
   4af90:	900b883a 	mov	r5,r18
   4af94:	01800284 	movi	r6,10
   4af98:	000f883a 	mov	r7,zero
   4af9c:	88800005 	stb	r2,0(r17)
   4afa0:	004cb740 	call	4cb74 <__udivdi3>
   4afa4:	1021883a 	mov	r16,r2
   4afa8:	10c4b03a 	or	r2,r2,r3
   4afac:	1825883a 	mov	r18,r3
   4afb0:	103fef1e 	bne	r2,zero,4af70 <__alt_data_end+0xfffd05f0>
   4afb4:	da811e17 	ldw	r10,1144(sp)
   4afb8:	da012417 	ldw	r8,1168(sp)
   4afbc:	da412317 	ldw	r9,1164(sp)
   4afc0:	dc412415 	stw	r17,1168(sp)
   4afc4:	b019883a 	mov	r12,r22
   4afc8:	dc012517 	ldw	r16,1172(sp)
   4afcc:	5463c83a 	sub	r17,r10,r17
   4afd0:	003dce06 	br	4a70c <__alt_data_end+0xfffcfd8c>
   4afd4:	94800c04 	addi	r18,r18,48
   4afd8:	d8c109c4 	addi	r3,sp,1063
   4afdc:	dc8109c5 	stb	r18,1063(sp)
   4afe0:	dc412717 	ldw	r17,1180(sp)
   4afe4:	d8c12415 	stw	r3,1168(sp)
   4afe8:	003dc806 	br	4a70c <__alt_data_end+0xfffcfd8c>
   4afec:	d8811c17 	ldw	r2,1136(sp)
   4aff0:	10000426 	beq	r2,zero,4b004 <___vfiprintf_internal_r+0xce8>
   4aff4:	d9012017 	ldw	r4,1152(sp)
   4aff8:	a00b883a 	mov	r5,r20
   4affc:	d9811a04 	addi	r6,sp,1128
   4b000:	004a2080 	call	4a208 <__sprint_r.part.0>
   4b004:	a080030b 	ldhu	r2,12(r20)
   4b008:	1080100c 	andi	r2,r2,64
   4b00c:	103e9b1e 	bne	r2,zero,4aa7c <__alt_data_end+0xfffd00fc>
   4b010:	d8812217 	ldw	r2,1160(sp)
   4b014:	003e9a06 	br	4aa80 <__alt_data_end+0xfffd0100>
   4b018:	d9012017 	ldw	r4,1152(sp)
   4b01c:	a00b883a 	mov	r5,r20
   4b020:	d9811a04 	addi	r6,sp,1128
   4b024:	004a2080 	call	4a208 <__sprint_r.part.0>
   4b028:	103ff61e 	bne	r2,zero,4b004 <__alt_data_end+0xfffd0684>
   4b02c:	d9011b17 	ldw	r4,1132(sp)
   4b030:	d8c11c17 	ldw	r3,1136(sp)
   4b034:	d811883a 	mov	r8,sp
   4b038:	21400044 	addi	r5,r4,1
   4b03c:	003e4006 	br	4a940 <__alt_data_end+0xfffcffc0>
   4b040:	1800d61e 	bne	r3,zero,4b39c <___vfiprintf_internal_r+0x1080>
   4b044:	dac12417 	ldw	r11,1168(sp)
   4b048:	00800044 	movi	r2,1
   4b04c:	dc400115 	stw	r17,4(sp)
   4b050:	dac00015 	stw	r11,0(sp)
   4b054:	dc411c15 	stw	r17,1136(sp)
   4b058:	d8811b15 	stw	r2,1132(sp)
   4b05c:	8807883a 	mov	r3,r17
   4b060:	d811883a 	mov	r8,sp
   4b064:	42000204 	addi	r8,r8,8
   4b068:	aac0010c 	andi	r11,r21,4
   4b06c:	58000226 	beq	r11,zero,4b078 <___vfiprintf_internal_r+0xd5c>
   4b070:	9ca3c83a 	sub	r17,r19,r18
   4b074:	047e2616 	blt	zero,r17,4a910 <__alt_data_end+0xfffcff90>
   4b078:	94c0010e 	bge	r18,r19,4b080 <___vfiprintf_internal_r+0xd64>
   4b07c:	9825883a 	mov	r18,r19
   4b080:	da812217 	ldw	r10,1160(sp)
   4b084:	5495883a 	add	r10,r10,r18
   4b088:	da812215 	stw	r10,1160(sp)
   4b08c:	183e4826 	beq	r3,zero,4a9b0 <__alt_data_end+0xfffd0030>
   4b090:	d9012017 	ldw	r4,1152(sp)
   4b094:	a00b883a 	mov	r5,r20
   4b098:	d9811a04 	addi	r6,sp,1128
   4b09c:	004a2080 	call	4a208 <__sprint_r.part.0>
   4b0a0:	103e4326 	beq	r2,zero,4a9b0 <__alt_data_end+0xfffd0030>
   4b0a4:	003fd706 	br	4b004 <__alt_data_end+0xfffd0684>
   4b0a8:	9cadc83a 	sub	r22,r19,r18
   4b0ac:	05bde40e 	bge	zero,r22,4a840 <__alt_data_end+0xfffcfec0>
   4b0b0:	03000404 	movi	r12,16
   4b0b4:	6581500e 	bge	r12,r22,4b5f8 <___vfiprintf_internal_r+0x12dc>
   4b0b8:	00800174 	movhi	r2,5
   4b0bc:	10899804 	addi	r2,r2,9824
   4b0c0:	d8812315 	stw	r2,1164(sp)
   4b0c4:	8005883a 	mov	r2,r16
   4b0c8:	038001c4 	movi	r14,7
   4b0cc:	b021883a 	mov	r16,r22
   4b0d0:	da412515 	stw	r9,1172(sp)
   4b0d4:	102d883a 	mov	r22,r2
   4b0d8:	00000506 	br	4b0f0 <___vfiprintf_internal_r+0xdd4>
   4b0dc:	29000084 	addi	r4,r5,2
   4b0e0:	42000204 	addi	r8,r8,8
   4b0e4:	100b883a 	mov	r5,r2
   4b0e8:	843ffc04 	addi	r16,r16,-16
   4b0ec:	64000d0e 	bge	r12,r16,4b124 <___vfiprintf_internal_r+0xe08>
   4b0f0:	18c00404 	addi	r3,r3,16
   4b0f4:	28800044 	addi	r2,r5,1
   4b0f8:	45c00015 	stw	r23,0(r8)
   4b0fc:	43000115 	stw	r12,4(r8)
   4b100:	d8c11c15 	stw	r3,1136(sp)
   4b104:	d8811b15 	stw	r2,1132(sp)
   4b108:	70bff40e 	bge	r14,r2,4b0dc <__alt_data_end+0xfffd075c>
   4b10c:	1800151e 	bne	r3,zero,4b164 <___vfiprintf_internal_r+0xe48>
   4b110:	843ffc04 	addi	r16,r16,-16
   4b114:	000b883a 	mov	r5,zero
   4b118:	01000044 	movi	r4,1
   4b11c:	d811883a 	mov	r8,sp
   4b120:	643ff316 	blt	r12,r16,4b0f0 <__alt_data_end+0xfffd0770>
   4b124:	da412517 	ldw	r9,1172(sp)
   4b128:	b005883a 	mov	r2,r22
   4b12c:	802d883a 	mov	r22,r16
   4b130:	1021883a 	mov	r16,r2
   4b134:	da812317 	ldw	r10,1164(sp)
   4b138:	1d87883a 	add	r3,r3,r22
   4b13c:	45800115 	stw	r22,4(r8)
   4b140:	42800015 	stw	r10,0(r8)
   4b144:	d8c11c15 	stw	r3,1136(sp)
   4b148:	d9011b15 	stw	r4,1132(sp)
   4b14c:	008001c4 	movi	r2,7
   4b150:	11008d16 	blt	r2,r4,4b388 <___vfiprintf_internal_r+0x106c>
   4b154:	42000204 	addi	r8,r8,8
   4b158:	20800044 	addi	r2,r4,1
   4b15c:	200b883a 	mov	r5,r4
   4b160:	003db706 	br	4a840 <__alt_data_end+0xfffcfec0>
   4b164:	d9012017 	ldw	r4,1152(sp)
   4b168:	a00b883a 	mov	r5,r20
   4b16c:	d9811a04 	addi	r6,sp,1128
   4b170:	db012b15 	stw	r12,1196(sp)
   4b174:	db812a15 	stw	r14,1192(sp)
   4b178:	004a2080 	call	4a208 <__sprint_r.part.0>
   4b17c:	db012b17 	ldw	r12,1196(sp)
   4b180:	db812a17 	ldw	r14,1192(sp)
   4b184:	103f9f1e 	bne	r2,zero,4b004 <__alt_data_end+0xfffd0684>
   4b188:	d9411b17 	ldw	r5,1132(sp)
   4b18c:	d8c11c17 	ldw	r3,1136(sp)
   4b190:	d811883a 	mov	r8,sp
   4b194:	29000044 	addi	r4,r5,1
   4b198:	003fd306 	br	4b0e8 <__alt_data_end+0xfffd0768>
   4b19c:	18006c1e 	bne	r3,zero,4b350 <___vfiprintf_internal_r+0x1034>
   4b1a0:	70004f26 	beq	r14,zero,4b2e0 <___vfiprintf_internal_r+0xfc4>
   4b1a4:	d8811d04 	addi	r2,sp,1140
   4b1a8:	00c00084 	movi	r3,2
   4b1ac:	d8800015 	stw	r2,0(sp)
   4b1b0:	d8c00115 	stw	r3,4(sp)
   4b1b4:	2005883a 	mov	r2,r4
   4b1b8:	d811883a 	mov	r8,sp
   4b1bc:	003d9b06 	br	4a82c <__alt_data_end+0xfffcfeac>
   4b1c0:	1800571e 	bne	r3,zero,4b320 <___vfiprintf_internal_r+0x1004>
   4b1c4:	000b883a 	mov	r5,zero
   4b1c8:	00800044 	movi	r2,1
   4b1cc:	d811883a 	mov	r8,sp
   4b1d0:	003d9906 	br	4a838 <__alt_data_end+0xfffcfeb8>
   4b1d4:	10803fcc 	andi	r2,r2,255
   4b1d8:	1000251e 	bne	r2,zero,4b270 <___vfiprintf_internal_r+0xf54>
   4b1dc:	a880004c 	andi	r2,r21,1
   4b1e0:	10007826 	beq	r2,zero,4b3c4 <___vfiprintf_internal_r+0x10a8>
   4b1e4:	00800c04 	movi	r2,48
   4b1e8:	d8c109c4 	addi	r3,sp,1063
   4b1ec:	d88109c5 	stb	r2,1063(sp)
   4b1f0:	dc412717 	ldw	r17,1180(sp)
   4b1f4:	d8c12415 	stw	r3,1168(sp)
   4b1f8:	003d4406 	br	4a70c <__alt_data_end+0xfffcfd8c>
   4b1fc:	d9012617 	ldw	r4,1176(sp)
   4b200:	dc410a04 	addi	r17,sp,1064
   4b204:	908003cc 	andi	r2,r18,15
   4b208:	b006973a 	slli	r3,r22,28
   4b20c:	2085883a 	add	r2,r4,r2
   4b210:	9024d13a 	srli	r18,r18,4
   4b214:	10800003 	ldbu	r2,0(r2)
   4b218:	b02cd13a 	srli	r22,r22,4
   4b21c:	8c7fffc4 	addi	r17,r17,-1
   4b220:	1ca4b03a 	or	r18,r3,r18
   4b224:	88800005 	stb	r2,0(r17)
   4b228:	9584b03a 	or	r2,r18,r22
   4b22c:	103ff51e 	bne	r2,zero,4b204 <__alt_data_end+0xfffd0884>
   4b230:	dac11e17 	ldw	r11,1144(sp)
   4b234:	dc412415 	stw	r17,1168(sp)
   4b238:	5c63c83a 	sub	r17,r11,r17
   4b23c:	003d3306 	br	4a70c <__alt_data_end+0xfffcfd8c>
   4b240:	1800941e 	bne	r3,zero,4b494 <___vfiprintf_internal_r+0x1178>
   4b244:	d8811d87 	ldb	r2,1142(sp)
   4b248:	10006b26 	beq	r2,zero,4b3f8 <___vfiprintf_internal_r+0x10dc>
   4b24c:	00c00044 	movi	r3,1
   4b250:	d9011d84 	addi	r4,sp,1142
   4b254:	1805883a 	mov	r2,r3
   4b258:	d9000015 	stw	r4,0(sp)
   4b25c:	d8c00115 	stw	r3,4(sp)
   4b260:	d811883a 	mov	r8,sp
   4b264:	003f2306 	br	4aef4 <__alt_data_end+0xfffd0574>
   4b268:	8023883a 	mov	r17,r16
   4b26c:	003c7d06 	br	4a464 <__alt_data_end+0xfffcfae4>
   4b270:	da810a04 	addi	r10,sp,1064
   4b274:	da812415 	stw	r10,1168(sp)
   4b278:	003d2406 	br	4a70c <__alt_data_end+0xfffcfd8c>
   4b27c:	d9012017 	ldw	r4,1152(sp)
   4b280:	a00b883a 	mov	r5,r20
   4b284:	d9811a04 	addi	r6,sp,1128
   4b288:	004a2080 	call	4a208 <__sprint_r.part.0>
   4b28c:	103f5d1e 	bne	r2,zero,4b004 <__alt_data_end+0xfffd0684>
   4b290:	d8c11c17 	ldw	r3,1136(sp)
   4b294:	d811883a 	mov	r8,sp
   4b298:	003f7306 	br	4b068 <__alt_data_end+0xfffd06e8>
   4b29c:	1c800017 	ldw	r18,0(r3)
   4b2a0:	dac12117 	ldw	r11,1156(sp)
   4b2a4:	902dd7fa 	srai	r22,r18,31
   4b2a8:	5ac00104 	addi	r11,r11,4
   4b2ac:	dac12115 	stw	r11,1156(sp)
   4b2b0:	b005883a 	mov	r2,r22
   4b2b4:	003e5406 	br	4ac08 <__alt_data_end+0xfffd0288>
   4b2b8:	00800084 	movi	r2,2
   4b2bc:	9588b03a 	or	r4,r18,r22
   4b2c0:	003cf506 	br	4a698 <__alt_data_end+0xfffcfd18>
   4b2c4:	d9012017 	ldw	r4,1152(sp)
   4b2c8:	a00b883a 	mov	r5,r20
   4b2cc:	d9811a04 	addi	r6,sp,1128
   4b2d0:	004a2080 	call	4a208 <__sprint_r.part.0>
   4b2d4:	103f4b1e 	bne	r2,zero,4b004 <__alt_data_end+0xfffd0684>
   4b2d8:	d811883a 	mov	r8,sp
   4b2dc:	003cd106 	br	4a624 <__alt_data_end+0xfffcfca4>
   4b2e0:	000b883a 	mov	r5,zero
   4b2e4:	2005883a 	mov	r2,r4
   4b2e8:	d811883a 	mov	r8,sp
   4b2ec:	003d5206 	br	4a838 <__alt_data_end+0xfffcfeb8>
   4b2f0:	10803fcc 	andi	r2,r2,255
   4b2f4:	1080201c 	xori	r2,r2,128
   4b2f8:	10bfe004 	addi	r2,r2,-128
   4b2fc:	01000c04 	movi	r4,48
   4b300:	11008e26 	beq	r2,r4,4b53c <___vfiprintf_internal_r+0x1220>
   4b304:	da812417 	ldw	r10,1168(sp)
   4b308:	dac11e17 	ldw	r11,1144(sp)
   4b30c:	193fffc5 	stb	r4,-1(r3)
   4b310:	52bfffc4 	addi	r10,r10,-1
   4b314:	da812415 	stw	r10,1168(sp)
   4b318:	5aa3c83a 	sub	r17,r11,r10
   4b31c:	003cfb06 	br	4a70c <__alt_data_end+0xfffcfd8c>
   4b320:	d9012017 	ldw	r4,1152(sp)
   4b324:	a00b883a 	mov	r5,r20
   4b328:	d9811a04 	addi	r6,sp,1128
   4b32c:	da412b15 	stw	r9,1196(sp)
   4b330:	004a2080 	call	4a208 <__sprint_r.part.0>
   4b334:	da412b17 	ldw	r9,1196(sp)
   4b338:	103f321e 	bne	r2,zero,4b004 <__alt_data_end+0xfffd0684>
   4b33c:	d9411b17 	ldw	r5,1132(sp)
   4b340:	d8c11c17 	ldw	r3,1136(sp)
   4b344:	d811883a 	mov	r8,sp
   4b348:	28800044 	addi	r2,r5,1
   4b34c:	003d3a06 	br	4a838 <__alt_data_end+0xfffcfeb8>
   4b350:	d9012017 	ldw	r4,1152(sp)
   4b354:	a00b883a 	mov	r5,r20
   4b358:	d9811a04 	addi	r6,sp,1128
   4b35c:	da412b15 	stw	r9,1196(sp)
   4b360:	db812a15 	stw	r14,1192(sp)
   4b364:	004a2080 	call	4a208 <__sprint_r.part.0>
   4b368:	da412b17 	ldw	r9,1196(sp)
   4b36c:	db812a17 	ldw	r14,1192(sp)
   4b370:	103f241e 	bne	r2,zero,4b004 <__alt_data_end+0xfffd0684>
   4b374:	d9411b17 	ldw	r5,1132(sp)
   4b378:	d8c11c17 	ldw	r3,1136(sp)
   4b37c:	d811883a 	mov	r8,sp
   4b380:	28800044 	addi	r2,r5,1
   4b384:	003d1f06 	br	4a804 <__alt_data_end+0xfffcfe84>
   4b388:	1800781e 	bne	r3,zero,4b56c <___vfiprintf_internal_r+0x1250>
   4b38c:	000b883a 	mov	r5,zero
   4b390:	00800044 	movi	r2,1
   4b394:	d811883a 	mov	r8,sp
   4b398:	003d2906 	br	4a840 <__alt_data_end+0xfffcfec0>
   4b39c:	d9012017 	ldw	r4,1152(sp)
   4b3a0:	a00b883a 	mov	r5,r20
   4b3a4:	d9811a04 	addi	r6,sp,1128
   4b3a8:	004a2080 	call	4a208 <__sprint_r.part.0>
   4b3ac:	103f151e 	bne	r2,zero,4b004 <__alt_data_end+0xfffd0684>
   4b3b0:	d8811b17 	ldw	r2,1132(sp)
   4b3b4:	d8c11c17 	ldw	r3,1136(sp)
   4b3b8:	d811883a 	mov	r8,sp
   4b3bc:	10800044 	addi	r2,r2,1
   4b3c0:	003d4406 	br	4a8d4 <__alt_data_end+0xfffcff54>
   4b3c4:	dac10a04 	addi	r11,sp,1064
   4b3c8:	dac12415 	stw	r11,1168(sp)
   4b3cc:	003ccf06 	br	4a70c <__alt_data_end+0xfffcfd8c>
   4b3d0:	04a5c83a 	sub	r18,zero,r18
   4b3d4:	9004c03a 	cmpne	r2,r18,zero
   4b3d8:	05adc83a 	sub	r22,zero,r22
   4b3dc:	b0adc83a 	sub	r22,r22,r2
   4b3e0:	03000b44 	movi	r12,45
   4b3e4:	db011d85 	stb	r12,1142(sp)
   4b3e8:	4823883a 	mov	r17,r9
   4b3ec:	00800044 	movi	r2,1
   4b3f0:	9588b03a 	or	r4,r18,r22
   4b3f4:	003cab06 	br	4a6a4 <__alt_data_end+0xfffcfd24>
   4b3f8:	000b883a 	mov	r5,zero
   4b3fc:	00800044 	movi	r2,1
   4b400:	d811883a 	mov	r8,sp
   4b404:	703d0c26 	beq	r14,zero,4a838 <__alt_data_end+0xfffcfeb8>
   4b408:	00c00084 	movi	r3,2
   4b40c:	d9011d04 	addi	r4,sp,1140
   4b410:	d9000015 	stw	r4,0(sp)
   4b414:	d8c00115 	stw	r3,4(sp)
   4b418:	003d0406 	br	4a82c <__alt_data_end+0xfffcfeac>
   4b41c:	80c00007 	ldb	r3,0(r16)
   4b420:	003c1d06 	br	4a498 <__alt_data_end+0xfffcfb18>
   4b424:	a880040c 	andi	r2,r21,16
   4b428:	1000091e 	bne	r2,zero,4b450 <___vfiprintf_internal_r+0x1134>
   4b42c:	aac0100c 	andi	r11,r21,64
   4b430:	58000726 	beq	r11,zero,4b450 <___vfiprintf_internal_r+0x1134>
   4b434:	da812117 	ldw	r10,1156(sp)
   4b438:	dac12217 	ldw	r11,1160(sp)
   4b43c:	50800017 	ldw	r2,0(r10)
   4b440:	52800104 	addi	r10,r10,4
   4b444:	da812115 	stw	r10,1156(sp)
   4b448:	12c0000d 	sth	r11,0(r2)
   4b44c:	003be806 	br	4a3f0 <__alt_data_end+0xfffcfa70>
   4b450:	da812117 	ldw	r10,1156(sp)
   4b454:	dac12217 	ldw	r11,1160(sp)
   4b458:	50800017 	ldw	r2,0(r10)
   4b45c:	52800104 	addi	r10,r10,4
   4b460:	da812115 	stw	r10,1156(sp)
   4b464:	12c00015 	stw	r11,0(r2)
   4b468:	003be106 	br	4a3f0 <__alt_data_end+0xfffcfa70>
   4b46c:	00800084 	movi	r2,2
   4b470:	003c8906 	br	4a698 <__alt_data_end+0xfffcfd18>
   4b474:	a900100c 	andi	r4,r21,64
   4b478:	20001f26 	beq	r4,zero,4b4f8 <___vfiprintf_internal_r+0x11dc>
   4b47c:	da812117 	ldw	r10,1156(sp)
   4b480:	1480000b 	ldhu	r18,0(r2)
   4b484:	002d883a 	mov	r22,zero
   4b488:	52800104 	addi	r10,r10,4
   4b48c:	da812115 	stw	r10,1156(sp)
   4b490:	003dae06 	br	4ab4c <__alt_data_end+0xfffd01cc>
   4b494:	d9012017 	ldw	r4,1152(sp)
   4b498:	a00b883a 	mov	r5,r20
   4b49c:	d9811a04 	addi	r6,sp,1128
   4b4a0:	da412b15 	stw	r9,1196(sp)
   4b4a4:	db812a15 	stw	r14,1192(sp)
   4b4a8:	004a2080 	call	4a208 <__sprint_r.part.0>
   4b4ac:	da412b17 	ldw	r9,1196(sp)
   4b4b0:	db812a17 	ldw	r14,1192(sp)
   4b4b4:	103ed31e 	bne	r2,zero,4b004 <__alt_data_end+0xfffd0684>
   4b4b8:	d9411b17 	ldw	r5,1132(sp)
   4b4bc:	d8c11c17 	ldw	r3,1136(sp)
   4b4c0:	d811883a 	mov	r8,sp
   4b4c4:	28800044 	addi	r2,r5,1
   4b4c8:	003e7f06 	br	4aec8 <__alt_data_end+0xfffd0548>
   4b4cc:	9825883a 	mov	r18,r19
   4b4d0:	003d3406 	br	4a9a4 <__alt_data_end+0xfffd0024>
   4b4d4:	4823883a 	mov	r17,r9
   4b4d8:	003e0806 	br	4acfc <__alt_data_end+0xfffd037c>
   4b4dc:	d9012017 	ldw	r4,1152(sp)
   4b4e0:	a00b883a 	mov	r5,r20
   4b4e4:	d9811a04 	addi	r6,sp,1128
   4b4e8:	004a2080 	call	4a208 <__sprint_r.part.0>
   4b4ec:	103ec51e 	bne	r2,zero,4b004 <__alt_data_end+0xfffd0684>
   4b4f0:	d8c11c17 	ldw	r3,1136(sp)
   4b4f4:	003ee006 	br	4b078 <__alt_data_end+0xfffd06f8>
   4b4f8:	dac12117 	ldw	r11,1156(sp)
   4b4fc:	14800017 	ldw	r18,0(r2)
   4b500:	002d883a 	mov	r22,zero
   4b504:	5ac00104 	addi	r11,r11,4
   4b508:	dac12115 	stw	r11,1156(sp)
   4b50c:	003d8f06 	br	4ab4c <__alt_data_end+0xfffd01cc>
   4b510:	02c00174 	movhi	r11,5
   4b514:	5ac99804 	addi	r11,r11,9824
   4b518:	dac12315 	stw	r11,1164(sp)
   4b51c:	003ce306 	br	4a8ac <__alt_data_end+0xfffcff2c>
   4b520:	80c00043 	ldbu	r3,1(r16)
   4b524:	ad400814 	ori	r21,r21,32
   4b528:	84000044 	addi	r16,r16,1
   4b52c:	18c03fcc 	andi	r3,r3,255
   4b530:	18c0201c 	xori	r3,r3,128
   4b534:	18ffe004 	addi	r3,r3,-128
   4b538:	003bd706 	br	4a498 <__alt_data_end+0xfffcfb18>
   4b53c:	dac11e17 	ldw	r11,1144(sp)
   4b540:	d8c12417 	ldw	r3,1168(sp)
   4b544:	58e3c83a 	sub	r17,r11,r3
   4b548:	003c7006 	br	4a70c <__alt_data_end+0xfffcfd8c>
   4b54c:	da012a15 	stw	r8,1192(sp)
   4b550:	004a1700 	call	4a170 <strlen>
   4b554:	1023883a 	mov	r17,r2
   4b558:	db011d83 	ldbu	r12,1142(sp)
   4b55c:	dd812115 	stw	r22,1156(sp)
   4b560:	0013883a 	mov	r9,zero
   4b564:	da012a17 	ldw	r8,1192(sp)
   4b568:	003c6806 	br	4a70c <__alt_data_end+0xfffcfd8c>
   4b56c:	d9012017 	ldw	r4,1152(sp)
   4b570:	a00b883a 	mov	r5,r20
   4b574:	d9811a04 	addi	r6,sp,1128
   4b578:	da412b15 	stw	r9,1196(sp)
   4b57c:	004a2080 	call	4a208 <__sprint_r.part.0>
   4b580:	da412b17 	ldw	r9,1196(sp)
   4b584:	103e9f1e 	bne	r2,zero,4b004 <__alt_data_end+0xfffd0684>
   4b588:	d9411b17 	ldw	r5,1132(sp)
   4b58c:	d8c11c17 	ldw	r3,1136(sp)
   4b590:	d811883a 	mov	r8,sp
   4b594:	28800044 	addi	r2,r5,1
   4b598:	003ca906 	br	4a840 <__alt_data_end+0xfffcfec0>
   4b59c:	d9411b17 	ldw	r5,1132(sp)
   4b5a0:	01000174 	movhi	r4,5
   4b5a4:	21099c04 	addi	r4,r4,9840
   4b5a8:	d9012315 	stw	r4,1164(sp)
   4b5ac:	29400044 	addi	r5,r5,1
   4b5b0:	003c8806 	br	4a7d4 <__alt_data_end+0xfffcfe54>
   4b5b4:	00800184 	movi	r2,6
   4b5b8:	1240012e 	bgeu	r2,r9,4b5c0 <___vfiprintf_internal_r+0x12a4>
   4b5bc:	1013883a 	mov	r9,r2
   4b5c0:	4823883a 	mov	r17,r9
   4b5c4:	4825883a 	mov	r18,r9
   4b5c8:	48001516 	blt	r9,zero,4b620 <___vfiprintf_internal_r+0x1304>
   4b5cc:	00800174 	movhi	r2,5
   4b5d0:	10893c04 	addi	r2,r2,9456
   4b5d4:	dd812115 	stw	r22,1156(sp)
   4b5d8:	d8812415 	stw	r2,1168(sp)
   4b5dc:	003d6f06 	br	4ab9c <__alt_data_end+0xfffd021c>
   4b5e0:	d9411b17 	ldw	r5,1132(sp)
   4b5e4:	02c00174 	movhi	r11,5
   4b5e8:	5ac99c04 	addi	r11,r11,9840
   4b5ec:	dac12315 	stw	r11,1164(sp)
   4b5f0:	29400044 	addi	r5,r5,1
   4b5f4:	003ce106 	br	4a97c <__alt_data_end+0xfffcfffc>
   4b5f8:	01000174 	movhi	r4,5
   4b5fc:	21099804 	addi	r4,r4,9824
   4b600:	d9012315 	stw	r4,1164(sp)
   4b604:	1009883a 	mov	r4,r2
   4b608:	003eca06 	br	4b134 <__alt_data_end+0xfffd07b4>
   4b60c:	4823883a 	mov	r17,r9
   4b610:	db011d83 	ldbu	r12,1142(sp)
   4b614:	dd812115 	stw	r22,1156(sp)
   4b618:	0013883a 	mov	r9,zero
   4b61c:	003c3b06 	br	4a70c <__alt_data_end+0xfffcfd8c>
   4b620:	0025883a 	mov	r18,zero
   4b624:	003fe906 	br	4b5cc <__alt_data_end+0xfffd0c4c>
   4b628:	dac12117 	ldw	r11,1156(sp)
   4b62c:	8005883a 	mov	r2,r16
   4b630:	5021883a 	mov	r16,r10
   4b634:	5a400017 	ldw	r9,0(r11)
   4b638:	58c00104 	addi	r3,r11,4
   4b63c:	d8c12115 	stw	r3,1156(sp)
   4b640:	48000a16 	blt	r9,zero,4b66c <___vfiprintf_internal_r+0x1350>
   4b644:	10c00047 	ldb	r3,1(r2)
   4b648:	003b9306 	br	4a498 <__alt_data_end+0xfffcfb18>
   4b64c:	043fffc4 	movi	r16,-1
   4b650:	003d0206 	br	4aa5c <__alt_data_end+0xfffd00dc>
   4b654:	94c0010e 	bge	r18,r19,4b65c <___vfiprintf_internal_r+0x1340>
   4b658:	9825883a 	mov	r18,r19
   4b65c:	da812217 	ldw	r10,1160(sp)
   4b660:	5495883a 	add	r10,r10,r18
   4b664:	da812215 	stw	r10,1160(sp)
   4b668:	003cd106 	br	4a9b0 <__alt_data_end+0xfffd0030>
   4b66c:	027fffc4 	movi	r9,-1
   4b670:	10c00047 	ldb	r3,1(r2)
   4b674:	003b8806 	br	4a498 <__alt_data_end+0xfffcfb18>

0004b678 <__vfiprintf_internal>:
   4b678:	2007883a 	mov	r3,r4
   4b67c:	01000174 	movhi	r4,5
   4b680:	21109a04 	addi	r4,r4,17000
   4b684:	21000017 	ldw	r4,0(r4)
   4b688:	2805883a 	mov	r2,r5
   4b68c:	300f883a 	mov	r7,r6
   4b690:	180b883a 	mov	r5,r3
   4b694:	100d883a 	mov	r6,r2
   4b698:	004a31c1 	jmpi	4a31c <___vfiprintf_internal_r>

0004b69c <__swbuf_r>:
   4b69c:	defffc04 	addi	sp,sp,-16
   4b6a0:	dc800215 	stw	r18,8(sp)
   4b6a4:	dc400115 	stw	r17,4(sp)
   4b6a8:	dc000015 	stw	r16,0(sp)
   4b6ac:	dfc00315 	stw	ra,12(sp)
   4b6b0:	2025883a 	mov	r18,r4
   4b6b4:	2823883a 	mov	r17,r5
   4b6b8:	3021883a 	mov	r16,r6
   4b6bc:	20000226 	beq	r4,zero,4b6c8 <__swbuf_r+0x2c>
   4b6c0:	20800e17 	ldw	r2,56(r4)
   4b6c4:	10004126 	beq	r2,zero,4b7cc <__swbuf_r+0x130>
   4b6c8:	80c00617 	ldw	r3,24(r16)
   4b6cc:	8180030b 	ldhu	r6,12(r16)
   4b6d0:	80c00215 	stw	r3,8(r16)
   4b6d4:	30c0020c 	andi	r3,r6,8
   4b6d8:	18003526 	beq	r3,zero,4b7b0 <__swbuf_r+0x114>
   4b6dc:	80c00417 	ldw	r3,16(r16)
   4b6e0:	18003326 	beq	r3,zero,4b7b0 <__swbuf_r+0x114>
   4b6e4:	3088000c 	andi	r2,r6,8192
   4b6e8:	8c403fcc 	andi	r17,r17,255
   4b6ec:	10001726 	beq	r2,zero,4b74c <__swbuf_r+0xb0>
   4b6f0:	80800017 	ldw	r2,0(r16)
   4b6f4:	81000517 	ldw	r4,20(r16)
   4b6f8:	10c7c83a 	sub	r3,r2,r3
   4b6fc:	19001d0e 	bge	r3,r4,4b774 <__swbuf_r+0xd8>
   4b700:	18c00044 	addi	r3,r3,1
   4b704:	81400217 	ldw	r5,8(r16)
   4b708:	11000044 	addi	r4,r2,1
   4b70c:	81000015 	stw	r4,0(r16)
   4b710:	297fffc4 	addi	r5,r5,-1
   4b714:	81400215 	stw	r5,8(r16)
   4b718:	14400005 	stb	r17,0(r2)
   4b71c:	80800517 	ldw	r2,20(r16)
   4b720:	10c01d26 	beq	r2,r3,4b798 <__swbuf_r+0xfc>
   4b724:	8080030b 	ldhu	r2,12(r16)
   4b728:	1080004c 	andi	r2,r2,1
   4b72c:	1000181e 	bne	r2,zero,4b790 <__swbuf_r+0xf4>
   4b730:	8805883a 	mov	r2,r17
   4b734:	dfc00317 	ldw	ra,12(sp)
   4b738:	dc800217 	ldw	r18,8(sp)
   4b73c:	dc400117 	ldw	r17,4(sp)
   4b740:	dc000017 	ldw	r16,0(sp)
   4b744:	dec00404 	addi	sp,sp,16
   4b748:	f800283a 	ret
   4b74c:	81001917 	ldw	r4,100(r16)
   4b750:	00b7ffc4 	movi	r2,-8193
   4b754:	31880014 	ori	r6,r6,8192
   4b758:	2084703a 	and	r2,r4,r2
   4b75c:	80801915 	stw	r2,100(r16)
   4b760:	80800017 	ldw	r2,0(r16)
   4b764:	81000517 	ldw	r4,20(r16)
   4b768:	8180030d 	sth	r6,12(r16)
   4b76c:	10c7c83a 	sub	r3,r2,r3
   4b770:	193fe316 	blt	r3,r4,4b700 <__alt_data_end+0xfffd0d80>
   4b774:	9009883a 	mov	r4,r18
   4b778:	800b883a 	mov	r5,r16
   4b77c:	00477300 	call	47730 <_fflush_r>
   4b780:	1000091e 	bne	r2,zero,4b7a8 <__swbuf_r+0x10c>
   4b784:	80800017 	ldw	r2,0(r16)
   4b788:	00c00044 	movi	r3,1
   4b78c:	003fdd06 	br	4b704 <__alt_data_end+0xfffd0d84>
   4b790:	00800284 	movi	r2,10
   4b794:	88bfe61e 	bne	r17,r2,4b730 <__alt_data_end+0xfffd0db0>
   4b798:	9009883a 	mov	r4,r18
   4b79c:	800b883a 	mov	r5,r16
   4b7a0:	00477300 	call	47730 <_fflush_r>
   4b7a4:	103fe226 	beq	r2,zero,4b730 <__alt_data_end+0xfffd0db0>
   4b7a8:	00bfffc4 	movi	r2,-1
   4b7ac:	003fe106 	br	4b734 <__alt_data_end+0xfffd0db4>
   4b7b0:	9009883a 	mov	r4,r18
   4b7b4:	800b883a 	mov	r5,r16
   4b7b8:	0045cd80 	call	45cd8 <__swsetup_r>
   4b7bc:	1000051e 	bne	r2,zero,4b7d4 <__swbuf_r+0x138>
   4b7c0:	8180030b 	ldhu	r6,12(r16)
   4b7c4:	80c00417 	ldw	r3,16(r16)
   4b7c8:	003fc606 	br	4b6e4 <__alt_data_end+0xfffd0d64>
   4b7cc:	0047cd80 	call	47cd8 <__sinit>
   4b7d0:	003fbd06 	br	4b6c8 <__alt_data_end+0xfffd0d48>
   4b7d4:	80c0030b 	ldhu	r3,12(r16)
   4b7d8:	00bfffc4 	movi	r2,-1
   4b7dc:	18c01014 	ori	r3,r3,64
   4b7e0:	80c0030d 	sth	r3,12(r16)
   4b7e4:	00c00244 	movi	r3,9
   4b7e8:	90c00015 	stw	r3,0(r18)
   4b7ec:	003fd106 	br	4b734 <__alt_data_end+0xfffd0db4>

0004b7f0 <__swbuf>:
   4b7f0:	00c00174 	movhi	r3,5
   4b7f4:	18d09a04 	addi	r3,r3,17000
   4b7f8:	2005883a 	mov	r2,r4
   4b7fc:	19000017 	ldw	r4,0(r3)
   4b800:	280d883a 	mov	r6,r5
   4b804:	100b883a 	mov	r5,r2
   4b808:	004b69c1 	jmpi	4b69c <__swbuf_r>

0004b80c <_write_r>:
   4b80c:	defffd04 	addi	sp,sp,-12
   4b810:	dc000015 	stw	r16,0(sp)
   4b814:	04000174 	movhi	r16,5
   4b818:	dc400115 	stw	r17,4(sp)
   4b81c:	84178204 	addi	r16,r16,24072
   4b820:	2023883a 	mov	r17,r4
   4b824:	2809883a 	mov	r4,r5
   4b828:	300b883a 	mov	r5,r6
   4b82c:	380d883a 	mov	r6,r7
   4b830:	dfc00215 	stw	ra,8(sp)
   4b834:	80000015 	stw	zero,0(r16)
   4b838:	005087c0 	call	5087c <write>
   4b83c:	00ffffc4 	movi	r3,-1
   4b840:	10c00526 	beq	r2,r3,4b858 <_write_r+0x4c>
   4b844:	dfc00217 	ldw	ra,8(sp)
   4b848:	dc400117 	ldw	r17,4(sp)
   4b84c:	dc000017 	ldw	r16,0(sp)
   4b850:	dec00304 	addi	sp,sp,12
   4b854:	f800283a 	ret
   4b858:	80c00017 	ldw	r3,0(r16)
   4b85c:	183ff926 	beq	r3,zero,4b844 <__alt_data_end+0xfffd0ec4>
   4b860:	88c00015 	stw	r3,0(r17)
   4b864:	003ff706 	br	4b844 <__alt_data_end+0xfffd0ec4>

0004b868 <_close_r>:
   4b868:	defffd04 	addi	sp,sp,-12
   4b86c:	dc000015 	stw	r16,0(sp)
   4b870:	04000174 	movhi	r16,5
   4b874:	dc400115 	stw	r17,4(sp)
   4b878:	84178204 	addi	r16,r16,24072
   4b87c:	2023883a 	mov	r17,r4
   4b880:	2809883a 	mov	r4,r5
   4b884:	dfc00215 	stw	ra,8(sp)
   4b888:	80000015 	stw	zero,0(r16)
   4b88c:	004fe400 	call	4fe40 <close>
   4b890:	00ffffc4 	movi	r3,-1
   4b894:	10c00526 	beq	r2,r3,4b8ac <_close_r+0x44>
   4b898:	dfc00217 	ldw	ra,8(sp)
   4b89c:	dc400117 	ldw	r17,4(sp)
   4b8a0:	dc000017 	ldw	r16,0(sp)
   4b8a4:	dec00304 	addi	sp,sp,12
   4b8a8:	f800283a 	ret
   4b8ac:	80c00017 	ldw	r3,0(r16)
   4b8b0:	183ff926 	beq	r3,zero,4b898 <__alt_data_end+0xfffd0f18>
   4b8b4:	88c00015 	stw	r3,0(r17)
   4b8b8:	003ff706 	br	4b898 <__alt_data_end+0xfffd0f18>

0004b8bc <_calloc_r>:
   4b8bc:	298b383a 	mul	r5,r5,r6
   4b8c0:	defffe04 	addi	sp,sp,-8
   4b8c4:	dc000015 	stw	r16,0(sp)
   4b8c8:	dfc00115 	stw	ra,4(sp)
   4b8cc:	00485440 	call	48544 <_malloc_r>
   4b8d0:	1021883a 	mov	r16,r2
   4b8d4:	10002826 	beq	r2,zero,4b978 <_calloc_r+0xbc>
   4b8d8:	11bfff17 	ldw	r6,-4(r2)
   4b8dc:	00bfff04 	movi	r2,-4
   4b8e0:	00c00904 	movi	r3,36
   4b8e4:	308c703a 	and	r6,r6,r2
   4b8e8:	308d883a 	add	r6,r6,r2
   4b8ec:	19801436 	bltu	r3,r6,4b940 <_calloc_r+0x84>
   4b8f0:	008004c4 	movi	r2,19
   4b8f4:	11800936 	bltu	r2,r6,4b91c <_calloc_r+0x60>
   4b8f8:	8005883a 	mov	r2,r16
   4b8fc:	10000015 	stw	zero,0(r2)
   4b900:	10000115 	stw	zero,4(r2)
   4b904:	10000215 	stw	zero,8(r2)
   4b908:	8005883a 	mov	r2,r16
   4b90c:	dfc00117 	ldw	ra,4(sp)
   4b910:	dc000017 	ldw	r16,0(sp)
   4b914:	dec00204 	addi	sp,sp,8
   4b918:	f800283a 	ret
   4b91c:	80000015 	stw	zero,0(r16)
   4b920:	80000115 	stw	zero,4(r16)
   4b924:	008006c4 	movi	r2,27
   4b928:	11800d2e 	bgeu	r2,r6,4b960 <_calloc_r+0xa4>
   4b92c:	80000215 	stw	zero,8(r16)
   4b930:	80000315 	stw	zero,12(r16)
   4b934:	30c00c26 	beq	r6,r3,4b968 <_calloc_r+0xac>
   4b938:	80800404 	addi	r2,r16,16
   4b93c:	003fef06 	br	4b8fc <__alt_data_end+0xfffd0f7c>
   4b940:	8009883a 	mov	r4,r16
   4b944:	000b883a 	mov	r5,zero
   4b948:	0043a200 	call	43a20 <memset>
   4b94c:	8005883a 	mov	r2,r16
   4b950:	dfc00117 	ldw	ra,4(sp)
   4b954:	dc000017 	ldw	r16,0(sp)
   4b958:	dec00204 	addi	sp,sp,8
   4b95c:	f800283a 	ret
   4b960:	80800204 	addi	r2,r16,8
   4b964:	003fe506 	br	4b8fc <__alt_data_end+0xfffd0f7c>
   4b968:	80000415 	stw	zero,16(r16)
   4b96c:	80800604 	addi	r2,r16,24
   4b970:	80000515 	stw	zero,20(r16)
   4b974:	003fe106 	br	4b8fc <__alt_data_end+0xfffd0f7c>
   4b978:	0005883a 	mov	r2,zero
   4b97c:	003fe306 	br	4b90c <__alt_data_end+0xfffd0f8c>

0004b980 <_fclose_r>:
   4b980:	28003226 	beq	r5,zero,4ba4c <_fclose_r+0xcc>
   4b984:	defffc04 	addi	sp,sp,-16
   4b988:	dc400115 	stw	r17,4(sp)
   4b98c:	2023883a 	mov	r17,r4
   4b990:	dc000015 	stw	r16,0(sp)
   4b994:	dfc00315 	stw	ra,12(sp)
   4b998:	dc800215 	stw	r18,8(sp)
   4b99c:	2821883a 	mov	r16,r5
   4b9a0:	0047ce80 	call	47ce8 <__sfp_lock_acquire>
   4b9a4:	88000226 	beq	r17,zero,4b9b0 <_fclose_r+0x30>
   4b9a8:	88800e17 	ldw	r2,56(r17)
   4b9ac:	10002926 	beq	r2,zero,4ba54 <_fclose_r+0xd4>
   4b9b0:	8080030f 	ldh	r2,12(r16)
   4b9b4:	10002226 	beq	r2,zero,4ba40 <_fclose_r+0xc0>
   4b9b8:	8809883a 	mov	r4,r17
   4b9bc:	800b883a 	mov	r5,r16
   4b9c0:	00477300 	call	47730 <_fflush_r>
   4b9c4:	1025883a 	mov	r18,r2
   4b9c8:	80800b17 	ldw	r2,44(r16)
   4b9cc:	10000426 	beq	r2,zero,4b9e0 <_fclose_r+0x60>
   4b9d0:	81400717 	ldw	r5,28(r16)
   4b9d4:	8809883a 	mov	r4,r17
   4b9d8:	103ee83a 	callr	r2
   4b9dc:	10002616 	blt	r2,zero,4ba78 <_fclose_r+0xf8>
   4b9e0:	8080030b 	ldhu	r2,12(r16)
   4b9e4:	1080200c 	andi	r2,r2,128
   4b9e8:	10001f1e 	bne	r2,zero,4ba68 <_fclose_r+0xe8>
   4b9ec:	81400c17 	ldw	r5,48(r16)
   4b9f0:	28000526 	beq	r5,zero,4ba08 <_fclose_r+0x88>
   4b9f4:	80801004 	addi	r2,r16,64
   4b9f8:	28800226 	beq	r5,r2,4ba04 <_fclose_r+0x84>
   4b9fc:	8809883a 	mov	r4,r17
   4ba00:	0047e4c0 	call	47e4c <_free_r>
   4ba04:	80000c15 	stw	zero,48(r16)
   4ba08:	81401117 	ldw	r5,68(r16)
   4ba0c:	28000326 	beq	r5,zero,4ba1c <_fclose_r+0x9c>
   4ba10:	8809883a 	mov	r4,r17
   4ba14:	0047e4c0 	call	47e4c <_free_r>
   4ba18:	80001115 	stw	zero,68(r16)
   4ba1c:	8000030d 	sth	zero,12(r16)
   4ba20:	0047cec0 	call	47cec <__sfp_lock_release>
   4ba24:	9005883a 	mov	r2,r18
   4ba28:	dfc00317 	ldw	ra,12(sp)
   4ba2c:	dc800217 	ldw	r18,8(sp)
   4ba30:	dc400117 	ldw	r17,4(sp)
   4ba34:	dc000017 	ldw	r16,0(sp)
   4ba38:	dec00404 	addi	sp,sp,16
   4ba3c:	f800283a 	ret
   4ba40:	0047cec0 	call	47cec <__sfp_lock_release>
   4ba44:	0005883a 	mov	r2,zero
   4ba48:	003ff706 	br	4ba28 <__alt_data_end+0xfffd10a8>
   4ba4c:	0005883a 	mov	r2,zero
   4ba50:	f800283a 	ret
   4ba54:	8809883a 	mov	r4,r17
   4ba58:	0047cd80 	call	47cd8 <__sinit>
   4ba5c:	8080030f 	ldh	r2,12(r16)
   4ba60:	103fd51e 	bne	r2,zero,4b9b8 <__alt_data_end+0xfffd1038>
   4ba64:	003ff606 	br	4ba40 <__alt_data_end+0xfffd10c0>
   4ba68:	81400417 	ldw	r5,16(r16)
   4ba6c:	8809883a 	mov	r4,r17
   4ba70:	0047e4c0 	call	47e4c <_free_r>
   4ba74:	003fdd06 	br	4b9ec <__alt_data_end+0xfffd106c>
   4ba78:	04bfffc4 	movi	r18,-1
   4ba7c:	003fd806 	br	4b9e0 <__alt_data_end+0xfffd1060>

0004ba80 <fclose>:
   4ba80:	00800174 	movhi	r2,5
   4ba84:	10909a04 	addi	r2,r2,17000
   4ba88:	200b883a 	mov	r5,r4
   4ba8c:	11000017 	ldw	r4,0(r2)
   4ba90:	004b9801 	jmpi	4b980 <_fclose_r>

0004ba94 <_fputwc_r>:
   4ba94:	3080030b 	ldhu	r2,12(r6)
   4ba98:	defff804 	addi	sp,sp,-32
   4ba9c:	dcc00415 	stw	r19,16(sp)
   4baa0:	dc800315 	stw	r18,12(sp)
   4baa4:	dc000115 	stw	r16,4(sp)
   4baa8:	dfc00715 	stw	ra,28(sp)
   4baac:	dd400615 	stw	r21,24(sp)
   4bab0:	dd000515 	stw	r20,20(sp)
   4bab4:	dc400215 	stw	r17,8(sp)
   4bab8:	10c8000c 	andi	r3,r2,8192
   4babc:	3021883a 	mov	r16,r6
   4bac0:	2027883a 	mov	r19,r4
   4bac4:	2825883a 	mov	r18,r5
   4bac8:	1800051e 	bne	r3,zero,4bae0 <_fputwc_r+0x4c>
   4bacc:	30c01917 	ldw	r3,100(r6)
   4bad0:	10880014 	ori	r2,r2,8192
   4bad4:	3080030d 	sth	r2,12(r6)
   4bad8:	18880014 	ori	r2,r3,8192
   4badc:	30801915 	stw	r2,100(r6)
   4bae0:	00483340 	call	48334 <__locale_mb_cur_max>
   4bae4:	00c00044 	movi	r3,1
   4bae8:	10c03e26 	beq	r2,r3,4bbe4 <_fputwc_r+0x150>
   4baec:	9809883a 	mov	r4,r19
   4baf0:	d80b883a 	mov	r5,sp
   4baf4:	900d883a 	mov	r6,r18
   4baf8:	81c01704 	addi	r7,r16,92
   4bafc:	004c9740 	call	4c974 <_wcrtomb_r>
   4bb00:	1029883a 	mov	r20,r2
   4bb04:	00bfffc4 	movi	r2,-1
   4bb08:	a0802026 	beq	r20,r2,4bb8c <_fputwc_r+0xf8>
   4bb0c:	d9400003 	ldbu	r5,0(sp)
   4bb10:	a0001c26 	beq	r20,zero,4bb84 <_fputwc_r+0xf0>
   4bb14:	0023883a 	mov	r17,zero
   4bb18:	05400284 	movi	r21,10
   4bb1c:	00000906 	br	4bb44 <_fputwc_r+0xb0>
   4bb20:	80800017 	ldw	r2,0(r16)
   4bb24:	11400005 	stb	r5,0(r2)
   4bb28:	80c00017 	ldw	r3,0(r16)
   4bb2c:	18c00044 	addi	r3,r3,1
   4bb30:	80c00015 	stw	r3,0(r16)
   4bb34:	8c400044 	addi	r17,r17,1
   4bb38:	dc45883a 	add	r2,sp,r17
   4bb3c:	8d00112e 	bgeu	r17,r20,4bb84 <_fputwc_r+0xf0>
   4bb40:	11400003 	ldbu	r5,0(r2)
   4bb44:	80c00217 	ldw	r3,8(r16)
   4bb48:	18ffffc4 	addi	r3,r3,-1
   4bb4c:	80c00215 	stw	r3,8(r16)
   4bb50:	183ff30e 	bge	r3,zero,4bb20 <__alt_data_end+0xfffd11a0>
   4bb54:	80800617 	ldw	r2,24(r16)
   4bb58:	18801916 	blt	r3,r2,4bbc0 <_fputwc_r+0x12c>
   4bb5c:	80800017 	ldw	r2,0(r16)
   4bb60:	11400005 	stb	r5,0(r2)
   4bb64:	80800017 	ldw	r2,0(r16)
   4bb68:	10c00003 	ldbu	r3,0(r2)
   4bb6c:	10800044 	addi	r2,r2,1
   4bb70:	1d402326 	beq	r3,r21,4bc00 <_fputwc_r+0x16c>
   4bb74:	80800015 	stw	r2,0(r16)
   4bb78:	8c400044 	addi	r17,r17,1
   4bb7c:	dc45883a 	add	r2,sp,r17
   4bb80:	8d3fef36 	bltu	r17,r20,4bb40 <__alt_data_end+0xfffd11c0>
   4bb84:	9005883a 	mov	r2,r18
   4bb88:	00000406 	br	4bb9c <_fputwc_r+0x108>
   4bb8c:	80c0030b 	ldhu	r3,12(r16)
   4bb90:	a005883a 	mov	r2,r20
   4bb94:	18c01014 	ori	r3,r3,64
   4bb98:	80c0030d 	sth	r3,12(r16)
   4bb9c:	dfc00717 	ldw	ra,28(sp)
   4bba0:	dd400617 	ldw	r21,24(sp)
   4bba4:	dd000517 	ldw	r20,20(sp)
   4bba8:	dcc00417 	ldw	r19,16(sp)
   4bbac:	dc800317 	ldw	r18,12(sp)
   4bbb0:	dc400217 	ldw	r17,8(sp)
   4bbb4:	dc000117 	ldw	r16,4(sp)
   4bbb8:	dec00804 	addi	sp,sp,32
   4bbbc:	f800283a 	ret
   4bbc0:	9809883a 	mov	r4,r19
   4bbc4:	29403fcc 	andi	r5,r5,255
   4bbc8:	800d883a 	mov	r6,r16
   4bbcc:	004b69c0 	call	4b69c <__swbuf_r>
   4bbd0:	10bfffe0 	cmpeqi	r2,r2,-1
   4bbd4:	10803fcc 	andi	r2,r2,255
   4bbd8:	103fd626 	beq	r2,zero,4bb34 <__alt_data_end+0xfffd11b4>
   4bbdc:	00bfffc4 	movi	r2,-1
   4bbe0:	003fee06 	br	4bb9c <__alt_data_end+0xfffd121c>
   4bbe4:	90ffffc4 	addi	r3,r18,-1
   4bbe8:	01003f84 	movi	r4,254
   4bbec:	20ffbf36 	bltu	r4,r3,4baec <__alt_data_end+0xfffd116c>
   4bbf0:	900b883a 	mov	r5,r18
   4bbf4:	dc800005 	stb	r18,0(sp)
   4bbf8:	1029883a 	mov	r20,r2
   4bbfc:	003fc506 	br	4bb14 <__alt_data_end+0xfffd1194>
   4bc00:	9809883a 	mov	r4,r19
   4bc04:	a80b883a 	mov	r5,r21
   4bc08:	800d883a 	mov	r6,r16
   4bc0c:	004b69c0 	call	4b69c <__swbuf_r>
   4bc10:	10bfffe0 	cmpeqi	r2,r2,-1
   4bc14:	003fef06 	br	4bbd4 <__alt_data_end+0xfffd1254>

0004bc18 <fputwc>:
   4bc18:	defffc04 	addi	sp,sp,-16
   4bc1c:	dc000115 	stw	r16,4(sp)
   4bc20:	04000174 	movhi	r16,5
   4bc24:	84109a04 	addi	r16,r16,17000
   4bc28:	dc400215 	stw	r17,8(sp)
   4bc2c:	2023883a 	mov	r17,r4
   4bc30:	81000017 	ldw	r4,0(r16)
   4bc34:	dfc00315 	stw	ra,12(sp)
   4bc38:	280d883a 	mov	r6,r5
   4bc3c:	20000626 	beq	r4,zero,4bc58 <fputwc+0x40>
   4bc40:	20800e17 	ldw	r2,56(r4)
   4bc44:	1000041e 	bne	r2,zero,4bc58 <fputwc+0x40>
   4bc48:	d9400015 	stw	r5,0(sp)
   4bc4c:	0047cd80 	call	47cd8 <__sinit>
   4bc50:	81000017 	ldw	r4,0(r16)
   4bc54:	d9800017 	ldw	r6,0(sp)
   4bc58:	880b883a 	mov	r5,r17
   4bc5c:	dfc00317 	ldw	ra,12(sp)
   4bc60:	dc400217 	ldw	r17,8(sp)
   4bc64:	dc000117 	ldw	r16,4(sp)
   4bc68:	dec00404 	addi	sp,sp,16
   4bc6c:	004ba941 	jmpi	4ba94 <_fputwc_r>

0004bc70 <_fstat_r>:
   4bc70:	defffd04 	addi	sp,sp,-12
   4bc74:	dc000015 	stw	r16,0(sp)
   4bc78:	04000174 	movhi	r16,5
   4bc7c:	dc400115 	stw	r17,4(sp)
   4bc80:	84178204 	addi	r16,r16,24072
   4bc84:	2023883a 	mov	r17,r4
   4bc88:	2809883a 	mov	r4,r5
   4bc8c:	300b883a 	mov	r5,r6
   4bc90:	dfc00215 	stw	ra,8(sp)
   4bc94:	80000015 	stw	zero,0(r16)
   4bc98:	004ff8c0 	call	4ff8c <fstat>
   4bc9c:	00ffffc4 	movi	r3,-1
   4bca0:	10c00526 	beq	r2,r3,4bcb8 <_fstat_r+0x48>
   4bca4:	dfc00217 	ldw	ra,8(sp)
   4bca8:	dc400117 	ldw	r17,4(sp)
   4bcac:	dc000017 	ldw	r16,0(sp)
   4bcb0:	dec00304 	addi	sp,sp,12
   4bcb4:	f800283a 	ret
   4bcb8:	80c00017 	ldw	r3,0(r16)
   4bcbc:	183ff926 	beq	r3,zero,4bca4 <__alt_data_end+0xfffd1324>
   4bcc0:	88c00015 	stw	r3,0(r17)
   4bcc4:	003ff706 	br	4bca4 <__alt_data_end+0xfffd1324>

0004bcc8 <__sfvwrite_r>:
   4bcc8:	30800217 	ldw	r2,8(r6)
   4bccc:	10004526 	beq	r2,zero,4bde4 <__sfvwrite_r+0x11c>
   4bcd0:	28c0030b 	ldhu	r3,12(r5)
   4bcd4:	defff404 	addi	sp,sp,-48
   4bcd8:	dd400715 	stw	r21,28(sp)
   4bcdc:	dcc00515 	stw	r19,20(sp)
   4bce0:	dc000215 	stw	r16,8(sp)
   4bce4:	dfc00b15 	stw	ra,44(sp)
   4bce8:	df000a15 	stw	fp,40(sp)
   4bcec:	ddc00915 	stw	r23,36(sp)
   4bcf0:	dd800815 	stw	r22,32(sp)
   4bcf4:	dd000615 	stw	r20,24(sp)
   4bcf8:	dc800415 	stw	r18,16(sp)
   4bcfc:	dc400315 	stw	r17,12(sp)
   4bd00:	1880020c 	andi	r2,r3,8
   4bd04:	2821883a 	mov	r16,r5
   4bd08:	202b883a 	mov	r21,r4
   4bd0c:	3027883a 	mov	r19,r6
   4bd10:	10002526 	beq	r2,zero,4bda8 <__sfvwrite_r+0xe0>
   4bd14:	28800417 	ldw	r2,16(r5)
   4bd18:	10002326 	beq	r2,zero,4bda8 <__sfvwrite_r+0xe0>
   4bd1c:	1880008c 	andi	r2,r3,2
   4bd20:	9c400017 	ldw	r17,0(r19)
   4bd24:	10003126 	beq	r2,zero,4bdec <__sfvwrite_r+0x124>
   4bd28:	0029883a 	mov	r20,zero
   4bd2c:	0025883a 	mov	r18,zero
   4bd30:	05810004 	movi	r22,1024
   4bd34:	a00d883a 	mov	r6,r20
   4bd38:	a809883a 	mov	r4,r21
   4bd3c:	90002526 	beq	r18,zero,4bdd4 <__sfvwrite_r+0x10c>
   4bd40:	900f883a 	mov	r7,r18
   4bd44:	81400717 	ldw	r5,28(r16)
   4bd48:	b480012e 	bgeu	r22,r18,4bd50 <__sfvwrite_r+0x88>
   4bd4c:	01c10004 	movi	r7,1024
   4bd50:	80800917 	ldw	r2,36(r16)
   4bd54:	103ee83a 	callr	r2
   4bd58:	0080510e 	bge	zero,r2,4bea0 <__sfvwrite_r+0x1d8>
   4bd5c:	98c00217 	ldw	r3,8(r19)
   4bd60:	a0a9883a 	add	r20,r20,r2
   4bd64:	90a5c83a 	sub	r18,r18,r2
   4bd68:	1885c83a 	sub	r2,r3,r2
   4bd6c:	98800215 	stw	r2,8(r19)
   4bd70:	103ff01e 	bne	r2,zero,4bd34 <__alt_data_end+0xfffd13b4>
   4bd74:	0005883a 	mov	r2,zero
   4bd78:	dfc00b17 	ldw	ra,44(sp)
   4bd7c:	df000a17 	ldw	fp,40(sp)
   4bd80:	ddc00917 	ldw	r23,36(sp)
   4bd84:	dd800817 	ldw	r22,32(sp)
   4bd88:	dd400717 	ldw	r21,28(sp)
   4bd8c:	dd000617 	ldw	r20,24(sp)
   4bd90:	dcc00517 	ldw	r19,20(sp)
   4bd94:	dc800417 	ldw	r18,16(sp)
   4bd98:	dc400317 	ldw	r17,12(sp)
   4bd9c:	dc000217 	ldw	r16,8(sp)
   4bda0:	dec00c04 	addi	sp,sp,48
   4bda4:	f800283a 	ret
   4bda8:	a809883a 	mov	r4,r21
   4bdac:	800b883a 	mov	r5,r16
   4bdb0:	0045cd80 	call	45cd8 <__swsetup_r>
   4bdb4:	80c0030b 	ldhu	r3,12(r16)
   4bdb8:	103fd826 	beq	r2,zero,4bd1c <__alt_data_end+0xfffd139c>
   4bdbc:	18c01014 	ori	r3,r3,64
   4bdc0:	80c0030d 	sth	r3,12(r16)
   4bdc4:	00c00244 	movi	r3,9
   4bdc8:	00bfffc4 	movi	r2,-1
   4bdcc:	a8c00015 	stw	r3,0(r21)
   4bdd0:	003fe906 	br	4bd78 <__alt_data_end+0xfffd13f8>
   4bdd4:	8d000017 	ldw	r20,0(r17)
   4bdd8:	8c800117 	ldw	r18,4(r17)
   4bddc:	8c400204 	addi	r17,r17,8
   4bde0:	003fd406 	br	4bd34 <__alt_data_end+0xfffd13b4>
   4bde4:	0005883a 	mov	r2,zero
   4bde8:	f800283a 	ret
   4bdec:	1880004c 	andi	r2,r3,1
   4bdf0:	1000301e 	bne	r2,zero,4beb4 <__sfvwrite_r+0x1ec>
   4bdf4:	002f883a 	mov	r23,zero
   4bdf8:	0025883a 	mov	r18,zero
   4bdfc:	90001c26 	beq	r18,zero,4be70 <__sfvwrite_r+0x1a8>
   4be00:	1880800c 	andi	r2,r3,512
   4be04:	85000217 	ldw	r20,8(r16)
   4be08:	10006c26 	beq	r2,zero,4bfbc <__sfvwrite_r+0x2f4>
   4be0c:	a02d883a 	mov	r22,r20
   4be10:	95008536 	bltu	r18,r20,4c028 <__sfvwrite_r+0x360>
   4be14:	1881200c 	andi	r2,r3,1152
   4be18:	10009d1e 	bne	r2,zero,4c090 <__sfvwrite_r+0x3c8>
   4be1c:	81000017 	ldw	r4,0(r16)
   4be20:	a039883a 	mov	fp,r20
   4be24:	9029883a 	mov	r20,r18
   4be28:	b80b883a 	mov	r5,r23
   4be2c:	b00d883a 	mov	r6,r22
   4be30:	004c21c0 	call	4c21c <memmove>
   4be34:	80c00217 	ldw	r3,8(r16)
   4be38:	81000017 	ldw	r4,0(r16)
   4be3c:	9005883a 	mov	r2,r18
   4be40:	1f39c83a 	sub	fp,r3,fp
   4be44:	258f883a 	add	r7,r4,r22
   4be48:	87000215 	stw	fp,8(r16)
   4be4c:	81c00015 	stw	r7,0(r16)
   4be50:	98c00217 	ldw	r3,8(r19)
   4be54:	b8af883a 	add	r23,r23,r2
   4be58:	90a5c83a 	sub	r18,r18,r2
   4be5c:	1d05c83a 	sub	r2,r3,r20
   4be60:	98800215 	stw	r2,8(r19)
   4be64:	103fc326 	beq	r2,zero,4bd74 <__alt_data_end+0xfffd13f4>
   4be68:	80c0030b 	ldhu	r3,12(r16)
   4be6c:	903fe41e 	bne	r18,zero,4be00 <__alt_data_end+0xfffd1480>
   4be70:	8dc00017 	ldw	r23,0(r17)
   4be74:	8c800117 	ldw	r18,4(r17)
   4be78:	8c400204 	addi	r17,r17,8
   4be7c:	003fdf06 	br	4bdfc <__alt_data_end+0xfffd147c>
   4be80:	004c3d40 	call	4c3d4 <_realloc_r>
   4be84:	102d883a 	mov	r22,r2
   4be88:	1000a01e 	bne	r2,zero,4c10c <__sfvwrite_r+0x444>
   4be8c:	81400417 	ldw	r5,16(r16)
   4be90:	a809883a 	mov	r4,r21
   4be94:	0047e4c0 	call	47e4c <_free_r>
   4be98:	00800304 	movi	r2,12
   4be9c:	a8800015 	stw	r2,0(r21)
   4bea0:	80c0030b 	ldhu	r3,12(r16)
   4bea4:	00bfffc4 	movi	r2,-1
   4bea8:	18c01014 	ori	r3,r3,64
   4beac:	80c0030d 	sth	r3,12(r16)
   4beb0:	003fb106 	br	4bd78 <__alt_data_end+0xfffd13f8>
   4beb4:	0029883a 	mov	r20,zero
   4beb8:	0011883a 	mov	r8,zero
   4bebc:	0039883a 	mov	fp,zero
   4bec0:	0025883a 	mov	r18,zero
   4bec4:	90001f26 	beq	r18,zero,4bf44 <__sfvwrite_r+0x27c>
   4bec8:	40006826 	beq	r8,zero,4c06c <__sfvwrite_r+0x3a4>
   4becc:	a02f883a 	mov	r23,r20
   4bed0:	9500012e 	bgeu	r18,r20,4bed8 <__sfvwrite_r+0x210>
   4bed4:	902f883a 	mov	r23,r18
   4bed8:	81000017 	ldw	r4,0(r16)
   4bedc:	80800417 	ldw	r2,16(r16)
   4bee0:	b82d883a 	mov	r22,r23
   4bee4:	81800217 	ldw	r6,8(r16)
   4bee8:	81c00517 	ldw	r7,20(r16)
   4beec:	1100022e 	bgeu	r2,r4,4bef8 <__sfvwrite_r+0x230>
   4bef0:	31c7883a 	add	r3,r6,r7
   4bef4:	1dc01816 	blt	r3,r23,4bf58 <__sfvwrite_r+0x290>
   4bef8:	b9c03f16 	blt	r23,r7,4bff8 <__sfvwrite_r+0x330>
   4befc:	80800917 	ldw	r2,36(r16)
   4bf00:	81400717 	ldw	r5,28(r16)
   4bf04:	a809883a 	mov	r4,r21
   4bf08:	da000115 	stw	r8,4(sp)
   4bf0c:	e00d883a 	mov	r6,fp
   4bf10:	103ee83a 	callr	r2
   4bf14:	102d883a 	mov	r22,r2
   4bf18:	da000117 	ldw	r8,4(sp)
   4bf1c:	00bfe00e 	bge	zero,r2,4bea0 <__alt_data_end+0xfffd1520>
   4bf20:	a5a9c83a 	sub	r20,r20,r22
   4bf24:	a0001f26 	beq	r20,zero,4bfa4 <__sfvwrite_r+0x2dc>
   4bf28:	98800217 	ldw	r2,8(r19)
   4bf2c:	e5b9883a 	add	fp,fp,r22
   4bf30:	95a5c83a 	sub	r18,r18,r22
   4bf34:	15adc83a 	sub	r22,r2,r22
   4bf38:	9d800215 	stw	r22,8(r19)
   4bf3c:	b03f8d26 	beq	r22,zero,4bd74 <__alt_data_end+0xfffd13f4>
   4bf40:	903fe11e 	bne	r18,zero,4bec8 <__alt_data_end+0xfffd1548>
   4bf44:	8f000017 	ldw	fp,0(r17)
   4bf48:	8c800117 	ldw	r18,4(r17)
   4bf4c:	0011883a 	mov	r8,zero
   4bf50:	8c400204 	addi	r17,r17,8
   4bf54:	003fdb06 	br	4bec4 <__alt_data_end+0xfffd1544>
   4bf58:	180d883a 	mov	r6,r3
   4bf5c:	e00b883a 	mov	r5,fp
   4bf60:	da000115 	stw	r8,4(sp)
   4bf64:	d8c00015 	stw	r3,0(sp)
   4bf68:	004c21c0 	call	4c21c <memmove>
   4bf6c:	d8c00017 	ldw	r3,0(sp)
   4bf70:	80800017 	ldw	r2,0(r16)
   4bf74:	a809883a 	mov	r4,r21
   4bf78:	800b883a 	mov	r5,r16
   4bf7c:	10c5883a 	add	r2,r2,r3
   4bf80:	80800015 	stw	r2,0(r16)
   4bf84:	d8c00015 	stw	r3,0(sp)
   4bf88:	00477300 	call	47730 <_fflush_r>
   4bf8c:	d8c00017 	ldw	r3,0(sp)
   4bf90:	da000117 	ldw	r8,4(sp)
   4bf94:	103fc21e 	bne	r2,zero,4bea0 <__alt_data_end+0xfffd1520>
   4bf98:	182d883a 	mov	r22,r3
   4bf9c:	a5a9c83a 	sub	r20,r20,r22
   4bfa0:	a03fe11e 	bne	r20,zero,4bf28 <__alt_data_end+0xfffd15a8>
   4bfa4:	a809883a 	mov	r4,r21
   4bfa8:	800b883a 	mov	r5,r16
   4bfac:	00477300 	call	47730 <_fflush_r>
   4bfb0:	103fbb1e 	bne	r2,zero,4bea0 <__alt_data_end+0xfffd1520>
   4bfb4:	0011883a 	mov	r8,zero
   4bfb8:	003fdb06 	br	4bf28 <__alt_data_end+0xfffd15a8>
   4bfbc:	81000017 	ldw	r4,0(r16)
   4bfc0:	80800417 	ldw	r2,16(r16)
   4bfc4:	1100012e 	bgeu	r2,r4,4bfcc <__sfvwrite_r+0x304>
   4bfc8:	a4805a36 	bltu	r20,r18,4c134 <__sfvwrite_r+0x46c>
   4bfcc:	81c00517 	ldw	r7,20(r16)
   4bfd0:	91c01a36 	bltu	r18,r7,4c03c <__sfvwrite_r+0x374>
   4bfd4:	80800917 	ldw	r2,36(r16)
   4bfd8:	81400717 	ldw	r5,28(r16)
   4bfdc:	a809883a 	mov	r4,r21
   4bfe0:	b80d883a 	mov	r6,r23
   4bfe4:	103ee83a 	callr	r2
   4bfe8:	1029883a 	mov	r20,r2
   4bfec:	00bfac0e 	bge	zero,r2,4bea0 <__alt_data_end+0xfffd1520>
   4bff0:	a005883a 	mov	r2,r20
   4bff4:	003f9606 	br	4be50 <__alt_data_end+0xfffd14d0>
   4bff8:	b80d883a 	mov	r6,r23
   4bffc:	e00b883a 	mov	r5,fp
   4c000:	da000115 	stw	r8,4(sp)
   4c004:	004c21c0 	call	4c21c <memmove>
   4c008:	80800217 	ldw	r2,8(r16)
   4c00c:	80c00017 	ldw	r3,0(r16)
   4c010:	da000117 	ldw	r8,4(sp)
   4c014:	15c5c83a 	sub	r2,r2,r23
   4c018:	1def883a 	add	r23,r3,r23
   4c01c:	80800215 	stw	r2,8(r16)
   4c020:	85c00015 	stw	r23,0(r16)
   4c024:	003fbe06 	br	4bf20 <__alt_data_end+0xfffd15a0>
   4c028:	81000017 	ldw	r4,0(r16)
   4c02c:	9039883a 	mov	fp,r18
   4c030:	9029883a 	mov	r20,r18
   4c034:	902d883a 	mov	r22,r18
   4c038:	003f7b06 	br	4be28 <__alt_data_end+0xfffd14a8>
   4c03c:	b80b883a 	mov	r5,r23
   4c040:	900d883a 	mov	r6,r18
   4c044:	004c21c0 	call	4c21c <memmove>
   4c048:	80c00217 	ldw	r3,8(r16)
   4c04c:	80800017 	ldw	r2,0(r16)
   4c050:	9029883a 	mov	r20,r18
   4c054:	1c87c83a 	sub	r3,r3,r18
   4c058:	1485883a 	add	r2,r2,r18
   4c05c:	80800015 	stw	r2,0(r16)
   4c060:	80c00215 	stw	r3,8(r16)
   4c064:	9005883a 	mov	r2,r18
   4c068:	003f7906 	br	4be50 <__alt_data_end+0xfffd14d0>
   4c06c:	e009883a 	mov	r4,fp
   4c070:	01400284 	movi	r5,10
   4c074:	900d883a 	mov	r6,r18
   4c078:	0048cec0 	call	48cec <memchr>
   4c07c:	10003826 	beq	r2,zero,4c160 <__sfvwrite_r+0x498>
   4c080:	10800044 	addi	r2,r2,1
   4c084:	1729c83a 	sub	r20,r2,fp
   4c088:	02000044 	movi	r8,1
   4c08c:	003f8f06 	br	4becc <__alt_data_end+0xfffd154c>
   4c090:	80800517 	ldw	r2,20(r16)
   4c094:	81400417 	ldw	r5,16(r16)
   4c098:	87000017 	ldw	fp,0(r16)
   4c09c:	10a9883a 	add	r20,r2,r2
   4c0a0:	a085883a 	add	r2,r20,r2
   4c0a4:	1028d7fa 	srli	r20,r2,31
   4c0a8:	e179c83a 	sub	fp,fp,r5
   4c0ac:	e1000044 	addi	r4,fp,1
   4c0b0:	a085883a 	add	r2,r20,r2
   4c0b4:	1029d07a 	srai	r20,r2,1
   4c0b8:	2485883a 	add	r2,r4,r18
   4c0bc:	a00d883a 	mov	r6,r20
   4c0c0:	a080022e 	bgeu	r20,r2,4c0cc <__sfvwrite_r+0x404>
   4c0c4:	1029883a 	mov	r20,r2
   4c0c8:	100d883a 	mov	r6,r2
   4c0cc:	18c1000c 	andi	r3,r3,1024
   4c0d0:	a809883a 	mov	r4,r21
   4c0d4:	183f6a26 	beq	r3,zero,4be80 <__alt_data_end+0xfffd1500>
   4c0d8:	300b883a 	mov	r5,r6
   4c0dc:	00485440 	call	48544 <_malloc_r>
   4c0e0:	102d883a 	mov	r22,r2
   4c0e4:	103f6c26 	beq	r2,zero,4be98 <__alt_data_end+0xfffd1518>
   4c0e8:	81400417 	ldw	r5,16(r16)
   4c0ec:	1009883a 	mov	r4,r2
   4c0f0:	e00d883a 	mov	r6,fp
   4c0f4:	00438e80 	call	438e8 <memcpy>
   4c0f8:	8080030b 	ldhu	r2,12(r16)
   4c0fc:	00fedfc4 	movi	r3,-1153
   4c100:	10c4703a 	and	r2,r2,r3
   4c104:	10802014 	ori	r2,r2,128
   4c108:	8080030d 	sth	r2,12(r16)
   4c10c:	b709883a 	add	r4,r22,fp
   4c110:	a707c83a 	sub	r3,r20,fp
   4c114:	85800415 	stw	r22,16(r16)
   4c118:	85000515 	stw	r20,20(r16)
   4c11c:	81000015 	stw	r4,0(r16)
   4c120:	9039883a 	mov	fp,r18
   4c124:	80c00215 	stw	r3,8(r16)
   4c128:	9029883a 	mov	r20,r18
   4c12c:	902d883a 	mov	r22,r18
   4c130:	003f3d06 	br	4be28 <__alt_data_end+0xfffd14a8>
   4c134:	b80b883a 	mov	r5,r23
   4c138:	a00d883a 	mov	r6,r20
   4c13c:	004c21c0 	call	4c21c <memmove>
   4c140:	80800017 	ldw	r2,0(r16)
   4c144:	a809883a 	mov	r4,r21
   4c148:	800b883a 	mov	r5,r16
   4c14c:	1505883a 	add	r2,r2,r20
   4c150:	80800015 	stw	r2,0(r16)
   4c154:	00477300 	call	47730 <_fflush_r>
   4c158:	103fa526 	beq	r2,zero,4bff0 <__alt_data_end+0xfffd1670>
   4c15c:	003f5006 	br	4bea0 <__alt_data_end+0xfffd1520>
   4c160:	95000044 	addi	r20,r18,1
   4c164:	02000044 	movi	r8,1
   4c168:	003f5806 	br	4becc <__alt_data_end+0xfffd154c>

0004c16c <_isatty_r>:
   4c16c:	defffd04 	addi	sp,sp,-12
   4c170:	dc000015 	stw	r16,0(sp)
   4c174:	04000174 	movhi	r16,5
   4c178:	dc400115 	stw	r17,4(sp)
   4c17c:	84178204 	addi	r16,r16,24072
   4c180:	2023883a 	mov	r17,r4
   4c184:	2809883a 	mov	r4,r5
   4c188:	dfc00215 	stw	ra,8(sp)
   4c18c:	80000015 	stw	zero,0(r16)
   4c190:	005026c0 	call	5026c <isatty>
   4c194:	00ffffc4 	movi	r3,-1
   4c198:	10c00526 	beq	r2,r3,4c1b0 <_isatty_r+0x44>
   4c19c:	dfc00217 	ldw	ra,8(sp)
   4c1a0:	dc400117 	ldw	r17,4(sp)
   4c1a4:	dc000017 	ldw	r16,0(sp)
   4c1a8:	dec00304 	addi	sp,sp,12
   4c1ac:	f800283a 	ret
   4c1b0:	80c00017 	ldw	r3,0(r16)
   4c1b4:	183ff926 	beq	r3,zero,4c19c <__alt_data_end+0xfffd181c>
   4c1b8:	88c00015 	stw	r3,0(r17)
   4c1bc:	003ff706 	br	4c19c <__alt_data_end+0xfffd181c>

0004c1c0 <_lseek_r>:
   4c1c0:	defffd04 	addi	sp,sp,-12
   4c1c4:	dc000015 	stw	r16,0(sp)
   4c1c8:	04000174 	movhi	r16,5
   4c1cc:	dc400115 	stw	r17,4(sp)
   4c1d0:	84178204 	addi	r16,r16,24072
   4c1d4:	2023883a 	mov	r17,r4
   4c1d8:	2809883a 	mov	r4,r5
   4c1dc:	300b883a 	mov	r5,r6
   4c1e0:	380d883a 	mov	r6,r7
   4c1e4:	dfc00215 	stw	ra,8(sp)
   4c1e8:	80000015 	stw	zero,0(r16)
   4c1ec:	00504440 	call	50444 <lseek>
   4c1f0:	00ffffc4 	movi	r3,-1
   4c1f4:	10c00526 	beq	r2,r3,4c20c <_lseek_r+0x4c>
   4c1f8:	dfc00217 	ldw	ra,8(sp)
   4c1fc:	dc400117 	ldw	r17,4(sp)
   4c200:	dc000017 	ldw	r16,0(sp)
   4c204:	dec00304 	addi	sp,sp,12
   4c208:	f800283a 	ret
   4c20c:	80c00017 	ldw	r3,0(r16)
   4c210:	183ff926 	beq	r3,zero,4c1f8 <__alt_data_end+0xfffd1878>
   4c214:	88c00015 	stw	r3,0(r17)
   4c218:	003ff706 	br	4c1f8 <__alt_data_end+0xfffd1878>

0004c21c <memmove>:
   4c21c:	2005883a 	mov	r2,r4
   4c220:	29000b2e 	bgeu	r5,r4,4c250 <memmove+0x34>
   4c224:	298f883a 	add	r7,r5,r6
   4c228:	21c0092e 	bgeu	r4,r7,4c250 <memmove+0x34>
   4c22c:	2187883a 	add	r3,r4,r6
   4c230:	198bc83a 	sub	r5,r3,r6
   4c234:	30004b26 	beq	r6,zero,4c364 <memmove+0x148>
   4c238:	39ffffc4 	addi	r7,r7,-1
   4c23c:	39000003 	ldbu	r4,0(r7)
   4c240:	18ffffc4 	addi	r3,r3,-1
   4c244:	19000005 	stb	r4,0(r3)
   4c248:	197ffb1e 	bne	r3,r5,4c238 <__alt_data_end+0xfffd18b8>
   4c24c:	f800283a 	ret
   4c250:	00c003c4 	movi	r3,15
   4c254:	1980412e 	bgeu	r3,r6,4c35c <memmove+0x140>
   4c258:	1146b03a 	or	r3,r2,r5
   4c25c:	18c000cc 	andi	r3,r3,3
   4c260:	1800411e 	bne	r3,zero,4c368 <memmove+0x14c>
   4c264:	33fffc04 	addi	r15,r6,-16
   4c268:	781ed13a 	srli	r15,r15,4
   4c26c:	28c00104 	addi	r3,r5,4
   4c270:	13400104 	addi	r13,r2,4
   4c274:	781c913a 	slli	r14,r15,4
   4c278:	2b000204 	addi	r12,r5,8
   4c27c:	12c00204 	addi	r11,r2,8
   4c280:	73800504 	addi	r14,r14,20
   4c284:	2a800304 	addi	r10,r5,12
   4c288:	12400304 	addi	r9,r2,12
   4c28c:	2b9d883a 	add	r14,r5,r14
   4c290:	2811883a 	mov	r8,r5
   4c294:	100f883a 	mov	r7,r2
   4c298:	41000017 	ldw	r4,0(r8)
   4c29c:	39c00404 	addi	r7,r7,16
   4c2a0:	18c00404 	addi	r3,r3,16
   4c2a4:	393ffc15 	stw	r4,-16(r7)
   4c2a8:	193ffc17 	ldw	r4,-16(r3)
   4c2ac:	6b400404 	addi	r13,r13,16
   4c2b0:	5ac00404 	addi	r11,r11,16
   4c2b4:	693ffc15 	stw	r4,-16(r13)
   4c2b8:	61000017 	ldw	r4,0(r12)
   4c2bc:	4a400404 	addi	r9,r9,16
   4c2c0:	42000404 	addi	r8,r8,16
   4c2c4:	593ffc15 	stw	r4,-16(r11)
   4c2c8:	51000017 	ldw	r4,0(r10)
   4c2cc:	63000404 	addi	r12,r12,16
   4c2d0:	52800404 	addi	r10,r10,16
   4c2d4:	493ffc15 	stw	r4,-16(r9)
   4c2d8:	1bbfef1e 	bne	r3,r14,4c298 <__alt_data_end+0xfffd1918>
   4c2dc:	79000044 	addi	r4,r15,1
   4c2e0:	2008913a 	slli	r4,r4,4
   4c2e4:	328003cc 	andi	r10,r6,15
   4c2e8:	02c000c4 	movi	r11,3
   4c2ec:	1107883a 	add	r3,r2,r4
   4c2f0:	290b883a 	add	r5,r5,r4
   4c2f4:	5a801e2e 	bgeu	r11,r10,4c370 <memmove+0x154>
   4c2f8:	1813883a 	mov	r9,r3
   4c2fc:	2811883a 	mov	r8,r5
   4c300:	500f883a 	mov	r7,r10
   4c304:	41000017 	ldw	r4,0(r8)
   4c308:	4a400104 	addi	r9,r9,4
   4c30c:	39ffff04 	addi	r7,r7,-4
   4c310:	493fff15 	stw	r4,-4(r9)
   4c314:	42000104 	addi	r8,r8,4
   4c318:	59fffa36 	bltu	r11,r7,4c304 <__alt_data_end+0xfffd1984>
   4c31c:	513fff04 	addi	r4,r10,-4
   4c320:	2008d0ba 	srli	r4,r4,2
   4c324:	318000cc 	andi	r6,r6,3
   4c328:	21000044 	addi	r4,r4,1
   4c32c:	2109883a 	add	r4,r4,r4
   4c330:	2109883a 	add	r4,r4,r4
   4c334:	1907883a 	add	r3,r3,r4
   4c338:	290b883a 	add	r5,r5,r4
   4c33c:	30000926 	beq	r6,zero,4c364 <memmove+0x148>
   4c340:	198d883a 	add	r6,r3,r6
   4c344:	29c00003 	ldbu	r7,0(r5)
   4c348:	18c00044 	addi	r3,r3,1
   4c34c:	29400044 	addi	r5,r5,1
   4c350:	19ffffc5 	stb	r7,-1(r3)
   4c354:	19bffb1e 	bne	r3,r6,4c344 <__alt_data_end+0xfffd19c4>
   4c358:	f800283a 	ret
   4c35c:	1007883a 	mov	r3,r2
   4c360:	003ff606 	br	4c33c <__alt_data_end+0xfffd19bc>
   4c364:	f800283a 	ret
   4c368:	1007883a 	mov	r3,r2
   4c36c:	003ff406 	br	4c340 <__alt_data_end+0xfffd19c0>
   4c370:	500d883a 	mov	r6,r10
   4c374:	003ff106 	br	4c33c <__alt_data_end+0xfffd19bc>

0004c378 <_read_r>:
   4c378:	defffd04 	addi	sp,sp,-12
   4c37c:	dc000015 	stw	r16,0(sp)
   4c380:	04000174 	movhi	r16,5
   4c384:	dc400115 	stw	r17,4(sp)
   4c388:	84178204 	addi	r16,r16,24072
   4c38c:	2023883a 	mov	r17,r4
   4c390:	2809883a 	mov	r4,r5
   4c394:	300b883a 	mov	r5,r6
   4c398:	380d883a 	mov	r6,r7
   4c39c:	dfc00215 	stw	ra,8(sp)
   4c3a0:	80000015 	stw	zero,0(r16)
   4c3a4:	00506200 	call	50620 <read>
   4c3a8:	00ffffc4 	movi	r3,-1
   4c3ac:	10c00526 	beq	r2,r3,4c3c4 <_read_r+0x4c>
   4c3b0:	dfc00217 	ldw	ra,8(sp)
   4c3b4:	dc400117 	ldw	r17,4(sp)
   4c3b8:	dc000017 	ldw	r16,0(sp)
   4c3bc:	dec00304 	addi	sp,sp,12
   4c3c0:	f800283a 	ret
   4c3c4:	80c00017 	ldw	r3,0(r16)
   4c3c8:	183ff926 	beq	r3,zero,4c3b0 <__alt_data_end+0xfffd1a30>
   4c3cc:	88c00015 	stw	r3,0(r17)
   4c3d0:	003ff706 	br	4c3b0 <__alt_data_end+0xfffd1a30>

0004c3d4 <_realloc_r>:
   4c3d4:	defff604 	addi	sp,sp,-40
   4c3d8:	dcc00315 	stw	r19,12(sp)
   4c3dc:	dc400115 	stw	r17,4(sp)
   4c3e0:	dfc00915 	stw	ra,36(sp)
   4c3e4:	df000815 	stw	fp,32(sp)
   4c3e8:	ddc00715 	stw	r23,28(sp)
   4c3ec:	dd800615 	stw	r22,24(sp)
   4c3f0:	dd400515 	stw	r21,20(sp)
   4c3f4:	dd000415 	stw	r20,16(sp)
   4c3f8:	dc800215 	stw	r18,8(sp)
   4c3fc:	dc000015 	stw	r16,0(sp)
   4c400:	2827883a 	mov	r19,r5
   4c404:	3023883a 	mov	r17,r6
   4c408:	2800bf26 	beq	r5,zero,4c708 <_realloc_r+0x334>
   4c40c:	2025883a 	mov	r18,r4
   4c410:	00505900 	call	50590 <__malloc_lock>
   4c414:	98ffff17 	ldw	r3,-4(r19)
   4c418:	01bfff04 	movi	r6,-4
   4c41c:	890002c4 	addi	r4,r17,11
   4c420:	01c00584 	movi	r7,22
   4c424:	9d7ffe04 	addi	r21,r19,-8
   4c428:	19a0703a 	and	r16,r3,r6
   4c42c:	39003f2e 	bgeu	r7,r4,4c52c <_realloc_r+0x158>
   4c430:	053ffe04 	movi	r20,-8
   4c434:	2528703a 	and	r20,r4,r20
   4c438:	a00f883a 	mov	r7,r20
   4c43c:	a0008216 	blt	r20,zero,4c648 <_realloc_r+0x274>
   4c440:	a4408136 	bltu	r20,r17,4c648 <_realloc_r+0x274>
   4c444:	81c03c0e 	bge	r16,r7,4c538 <_realloc_r+0x164>
   4c448:	07000174 	movhi	fp,5
   4c44c:	e70b1204 	addi	fp,fp,11336
   4c450:	e1000217 	ldw	r4,8(fp)
   4c454:	ac05883a 	add	r2,r21,r16
   4c458:	2080bf26 	beq	r4,r2,4c758 <_realloc_r+0x384>
   4c45c:	11000117 	ldw	r4,4(r2)
   4c460:	023fff84 	movi	r8,-2
   4c464:	2210703a 	and	r8,r4,r8
   4c468:	1211883a 	add	r8,r2,r8
   4c46c:	41400117 	ldw	r5,4(r8)
   4c470:	2940004c 	andi	r5,r5,1
   4c474:	28004a1e 	bne	r5,zero,4c5a0 <_realloc_r+0x1cc>
   4c478:	017fff04 	movi	r5,-4
   4c47c:	2148703a 	and	r4,r4,r5
   4c480:	2409883a 	add	r4,r4,r16
   4c484:	21c0ad0e 	bge	r4,r7,4c73c <_realloc_r+0x368>
   4c488:	18c0004c 	andi	r3,r3,1
   4c48c:	18007f1e 	bne	r3,zero,4c68c <_realloc_r+0x2b8>
   4c490:	9dfffe17 	ldw	r23,-8(r19)
   4c494:	adefc83a 	sub	r23,r21,r23
   4c498:	bd800117 	ldw	r22,4(r23)
   4c49c:	b14a703a 	and	r5,r22,r5
   4c4a0:	216d883a 	add	r22,r4,r5
   4c4a4:	b1c04516 	blt	r22,r7,4c5bc <_realloc_r+0x1e8>
   4c4a8:	10c00317 	ldw	r3,12(r2)
   4c4ac:	10800217 	ldw	r2,8(r2)
   4c4b0:	81bfff04 	addi	r6,r16,-4
   4c4b4:	bc400204 	addi	r17,r23,8
   4c4b8:	10c00315 	stw	r3,12(r2)
   4c4bc:	18800215 	stw	r2,8(r3)
   4c4c0:	b9400217 	ldw	r5,8(r23)
   4c4c4:	b8c00317 	ldw	r3,12(r23)
   4c4c8:	00800904 	movi	r2,36
   4c4cc:	28c00315 	stw	r3,12(r5)
   4c4d0:	19400215 	stw	r5,8(r3)
   4c4d4:	1180ef36 	bltu	r2,r6,4c894 <_realloc_r+0x4c0>
   4c4d8:	008004c4 	movi	r2,19
   4c4dc:	1180da2e 	bgeu	r2,r6,4c848 <_realloc_r+0x474>
   4c4e0:	98800017 	ldw	r2,0(r19)
   4c4e4:	b8800215 	stw	r2,8(r23)
   4c4e8:	98800117 	ldw	r2,4(r19)
   4c4ec:	b8800315 	stw	r2,12(r23)
   4c4f0:	008006c4 	movi	r2,27
   4c4f4:	1180fc2e 	bgeu	r2,r6,4c8e8 <_realloc_r+0x514>
   4c4f8:	98800217 	ldw	r2,8(r19)
   4c4fc:	b8800415 	stw	r2,16(r23)
   4c500:	98800317 	ldw	r2,12(r19)
   4c504:	b8800515 	stw	r2,20(r23)
   4c508:	00800904 	movi	r2,36
   4c50c:	3080421e 	bne	r6,r2,4c618 <_realloc_r+0x244>
   4c510:	98800417 	ldw	r2,16(r19)
   4c514:	9cc00604 	addi	r19,r19,24
   4c518:	b8c00804 	addi	r3,r23,32
   4c51c:	b8800615 	stw	r2,24(r23)
   4c520:	98bfff17 	ldw	r2,-4(r19)
   4c524:	b8800715 	stw	r2,28(r23)
   4c528:	00003d06 	br	4c620 <_realloc_r+0x24c>
   4c52c:	01c00404 	movi	r7,16
   4c530:	3829883a 	mov	r20,r7
   4c534:	003fc206 	br	4c440 <__alt_data_end+0xfffd1ac0>
   4c538:	9823883a 	mov	r17,r19
   4c53c:	850fc83a 	sub	r7,r16,r20
   4c540:	008003c4 	movi	r2,15
   4c544:	18c0004c 	andi	r3,r3,1
   4c548:	11c04336 	bltu	r2,r7,4c658 <_realloc_r+0x284>
   4c54c:	1c06b03a 	or	r3,r3,r16
   4c550:	a8c00115 	stw	r3,4(r21)
   4c554:	ac21883a 	add	r16,r21,r16
   4c558:	80c00117 	ldw	r3,4(r16)
   4c55c:	18c00054 	ori	r3,r3,1
   4c560:	80c00115 	stw	r3,4(r16)
   4c564:	9009883a 	mov	r4,r18
   4c568:	00505b00 	call	505b0 <__malloc_unlock>
   4c56c:	8805883a 	mov	r2,r17
   4c570:	dfc00917 	ldw	ra,36(sp)
   4c574:	df000817 	ldw	fp,32(sp)
   4c578:	ddc00717 	ldw	r23,28(sp)
   4c57c:	dd800617 	ldw	r22,24(sp)
   4c580:	dd400517 	ldw	r21,20(sp)
   4c584:	dd000417 	ldw	r20,16(sp)
   4c588:	dcc00317 	ldw	r19,12(sp)
   4c58c:	dc800217 	ldw	r18,8(sp)
   4c590:	dc400117 	ldw	r17,4(sp)
   4c594:	dc000017 	ldw	r16,0(sp)
   4c598:	dec00a04 	addi	sp,sp,40
   4c59c:	f800283a 	ret
   4c5a0:	18c0004c 	andi	r3,r3,1
   4c5a4:	1800391e 	bne	r3,zero,4c68c <_realloc_r+0x2b8>
   4c5a8:	9dfffe17 	ldw	r23,-8(r19)
   4c5ac:	00bfff04 	movi	r2,-4
   4c5b0:	adefc83a 	sub	r23,r21,r23
   4c5b4:	b9400117 	ldw	r5,4(r23)
   4c5b8:	288a703a 	and	r5,r5,r2
   4c5bc:	2c2d883a 	add	r22,r5,r16
   4c5c0:	b1c03216 	blt	r22,r7,4c68c <_realloc_r+0x2b8>
   4c5c4:	b8800317 	ldw	r2,12(r23)
   4c5c8:	b8c00217 	ldw	r3,8(r23)
   4c5cc:	81bfff04 	addi	r6,r16,-4
   4c5d0:	01000904 	movi	r4,36
   4c5d4:	18800315 	stw	r2,12(r3)
   4c5d8:	10c00215 	stw	r3,8(r2)
   4c5dc:	bc400204 	addi	r17,r23,8
   4c5e0:	2180ac36 	bltu	r4,r6,4c894 <_realloc_r+0x4c0>
   4c5e4:	008004c4 	movi	r2,19
   4c5e8:	1180972e 	bgeu	r2,r6,4c848 <_realloc_r+0x474>
   4c5ec:	98800017 	ldw	r2,0(r19)
   4c5f0:	b8800215 	stw	r2,8(r23)
   4c5f4:	98800117 	ldw	r2,4(r19)
   4c5f8:	b8800315 	stw	r2,12(r23)
   4c5fc:	008006c4 	movi	r2,27
   4c600:	1180b92e 	bgeu	r2,r6,4c8e8 <_realloc_r+0x514>
   4c604:	98800217 	ldw	r2,8(r19)
   4c608:	b8800415 	stw	r2,16(r23)
   4c60c:	98800317 	ldw	r2,12(r19)
   4c610:	b8800515 	stw	r2,20(r23)
   4c614:	313fbe26 	beq	r6,r4,4c510 <__alt_data_end+0xfffd1b90>
   4c618:	b8c00604 	addi	r3,r23,24
   4c61c:	9cc00404 	addi	r19,r19,16
   4c620:	98800017 	ldw	r2,0(r19)
   4c624:	b021883a 	mov	r16,r22
   4c628:	b82b883a 	mov	r21,r23
   4c62c:	18800015 	stw	r2,0(r3)
   4c630:	98800117 	ldw	r2,4(r19)
   4c634:	18800115 	stw	r2,4(r3)
   4c638:	98800217 	ldw	r2,8(r19)
   4c63c:	18800215 	stw	r2,8(r3)
   4c640:	b8c00117 	ldw	r3,4(r23)
   4c644:	003fbd06 	br	4c53c <__alt_data_end+0xfffd1bbc>
   4c648:	00800304 	movi	r2,12
   4c64c:	90800015 	stw	r2,0(r18)
   4c650:	0005883a 	mov	r2,zero
   4c654:	003fc606 	br	4c570 <__alt_data_end+0xfffd1bf0>
   4c658:	1d06b03a 	or	r3,r3,r20
   4c65c:	ad0b883a 	add	r5,r21,r20
   4c660:	a8c00115 	stw	r3,4(r21)
   4c664:	38800054 	ori	r2,r7,1
   4c668:	28800115 	stw	r2,4(r5)
   4c66c:	29cf883a 	add	r7,r5,r7
   4c670:	38800117 	ldw	r2,4(r7)
   4c674:	9009883a 	mov	r4,r18
   4c678:	29400204 	addi	r5,r5,8
   4c67c:	10800054 	ori	r2,r2,1
   4c680:	38800115 	stw	r2,4(r7)
   4c684:	0047e4c0 	call	47e4c <_free_r>
   4c688:	003fb606 	br	4c564 <__alt_data_end+0xfffd1be4>
   4c68c:	880b883a 	mov	r5,r17
   4c690:	9009883a 	mov	r4,r18
   4c694:	00485440 	call	48544 <_malloc_r>
   4c698:	1023883a 	mov	r17,r2
   4c69c:	1000aa26 	beq	r2,zero,4c948 <_realloc_r+0x574>
   4c6a0:	98ffff17 	ldw	r3,-4(r19)
   4c6a4:	113ffe04 	addi	r4,r2,-8
   4c6a8:	00bfff84 	movi	r2,-2
   4c6ac:	1884703a 	and	r2,r3,r2
   4c6b0:	a885883a 	add	r2,r21,r2
   4c6b4:	20808626 	beq	r4,r2,4c8d0 <_realloc_r+0x4fc>
   4c6b8:	81bfff04 	addi	r6,r16,-4
   4c6bc:	00800904 	movi	r2,36
   4c6c0:	11807036 	bltu	r2,r6,4c884 <_realloc_r+0x4b0>
   4c6c4:	00c004c4 	movi	r3,19
   4c6c8:	19805636 	bltu	r3,r6,4c824 <_realloc_r+0x450>
   4c6cc:	8805883a 	mov	r2,r17
   4c6d0:	9807883a 	mov	r3,r19
   4c6d4:	19000017 	ldw	r4,0(r3)
   4c6d8:	11000015 	stw	r4,0(r2)
   4c6dc:	19000117 	ldw	r4,4(r3)
   4c6e0:	11000115 	stw	r4,4(r2)
   4c6e4:	18c00217 	ldw	r3,8(r3)
   4c6e8:	10c00215 	stw	r3,8(r2)
   4c6ec:	980b883a 	mov	r5,r19
   4c6f0:	9009883a 	mov	r4,r18
   4c6f4:	0047e4c0 	call	47e4c <_free_r>
   4c6f8:	9009883a 	mov	r4,r18
   4c6fc:	00505b00 	call	505b0 <__malloc_unlock>
   4c700:	8805883a 	mov	r2,r17
   4c704:	003f9a06 	br	4c570 <__alt_data_end+0xfffd1bf0>
   4c708:	300b883a 	mov	r5,r6
   4c70c:	dfc00917 	ldw	ra,36(sp)
   4c710:	df000817 	ldw	fp,32(sp)
   4c714:	ddc00717 	ldw	r23,28(sp)
   4c718:	dd800617 	ldw	r22,24(sp)
   4c71c:	dd400517 	ldw	r21,20(sp)
   4c720:	dd000417 	ldw	r20,16(sp)
   4c724:	dcc00317 	ldw	r19,12(sp)
   4c728:	dc800217 	ldw	r18,8(sp)
   4c72c:	dc400117 	ldw	r17,4(sp)
   4c730:	dc000017 	ldw	r16,0(sp)
   4c734:	dec00a04 	addi	sp,sp,40
   4c738:	00485441 	jmpi	48544 <_malloc_r>
   4c73c:	11400317 	ldw	r5,12(r2)
   4c740:	10800217 	ldw	r2,8(r2)
   4c744:	9823883a 	mov	r17,r19
   4c748:	2021883a 	mov	r16,r4
   4c74c:	11400315 	stw	r5,12(r2)
   4c750:	28800215 	stw	r2,8(r5)
   4c754:	003f7906 	br	4c53c <__alt_data_end+0xfffd1bbc>
   4c758:	21000117 	ldw	r4,4(r4)
   4c75c:	00bfff04 	movi	r2,-4
   4c760:	a1800404 	addi	r6,r20,16
   4c764:	2088703a 	and	r4,r4,r2
   4c768:	2409883a 	add	r4,r4,r16
   4c76c:	2180380e 	bge	r4,r6,4c850 <_realloc_r+0x47c>
   4c770:	18c0004c 	andi	r3,r3,1
   4c774:	183fc51e 	bne	r3,zero,4c68c <__alt_data_end+0xfffd1d0c>
   4c778:	9dfffe17 	ldw	r23,-8(r19)
   4c77c:	adefc83a 	sub	r23,r21,r23
   4c780:	b9400117 	ldw	r5,4(r23)
   4c784:	288a703a 	and	r5,r5,r2
   4c788:	216d883a 	add	r22,r4,r5
   4c78c:	b1bf8b16 	blt	r22,r6,4c5bc <__alt_data_end+0xfffd1c3c>
   4c790:	b8800317 	ldw	r2,12(r23)
   4c794:	b8c00217 	ldw	r3,8(r23)
   4c798:	81bfff04 	addi	r6,r16,-4
   4c79c:	01000904 	movi	r4,36
   4c7a0:	18800315 	stw	r2,12(r3)
   4c7a4:	10c00215 	stw	r3,8(r2)
   4c7a8:	bc400204 	addi	r17,r23,8
   4c7ac:	21805a36 	bltu	r4,r6,4c918 <_realloc_r+0x544>
   4c7b0:	008004c4 	movi	r2,19
   4c7b4:	1180562e 	bgeu	r2,r6,4c910 <_realloc_r+0x53c>
   4c7b8:	98800017 	ldw	r2,0(r19)
   4c7bc:	b8800215 	stw	r2,8(r23)
   4c7c0:	98800117 	ldw	r2,4(r19)
   4c7c4:	b8800315 	stw	r2,12(r23)
   4c7c8:	008006c4 	movi	r2,27
   4c7cc:	11805636 	bltu	r2,r6,4c928 <_realloc_r+0x554>
   4c7d0:	b8800404 	addi	r2,r23,16
   4c7d4:	9cc00204 	addi	r19,r19,8
   4c7d8:	98c00017 	ldw	r3,0(r19)
   4c7dc:	10c00015 	stw	r3,0(r2)
   4c7e0:	98c00117 	ldw	r3,4(r19)
   4c7e4:	10c00115 	stw	r3,4(r2)
   4c7e8:	98c00217 	ldw	r3,8(r19)
   4c7ec:	10c00215 	stw	r3,8(r2)
   4c7f0:	bd07883a 	add	r3,r23,r20
   4c7f4:	b505c83a 	sub	r2,r22,r20
   4c7f8:	e0c00215 	stw	r3,8(fp)
   4c7fc:	10800054 	ori	r2,r2,1
   4c800:	18800115 	stw	r2,4(r3)
   4c804:	b8800117 	ldw	r2,4(r23)
   4c808:	9009883a 	mov	r4,r18
   4c80c:	1080004c 	andi	r2,r2,1
   4c810:	a0a8b03a 	or	r20,r20,r2
   4c814:	bd000115 	stw	r20,4(r23)
   4c818:	00505b00 	call	505b0 <__malloc_unlock>
   4c81c:	8805883a 	mov	r2,r17
   4c820:	003f5306 	br	4c570 <__alt_data_end+0xfffd1bf0>
   4c824:	98c00017 	ldw	r3,0(r19)
   4c828:	88c00015 	stw	r3,0(r17)
   4c82c:	98c00117 	ldw	r3,4(r19)
   4c830:	88c00115 	stw	r3,4(r17)
   4c834:	00c006c4 	movi	r3,27
   4c838:	19801d36 	bltu	r3,r6,4c8b0 <_realloc_r+0x4dc>
   4c83c:	88800204 	addi	r2,r17,8
   4c840:	98c00204 	addi	r3,r19,8
   4c844:	003fa306 	br	4c6d4 <__alt_data_end+0xfffd1d54>
   4c848:	8807883a 	mov	r3,r17
   4c84c:	003f7406 	br	4c620 <__alt_data_end+0xfffd1ca0>
   4c850:	ad2b883a 	add	r21,r21,r20
   4c854:	2505c83a 	sub	r2,r4,r20
   4c858:	e5400215 	stw	r21,8(fp)
   4c85c:	10800054 	ori	r2,r2,1
   4c860:	a8800115 	stw	r2,4(r21)
   4c864:	98bfff17 	ldw	r2,-4(r19)
   4c868:	9009883a 	mov	r4,r18
   4c86c:	1080004c 	andi	r2,r2,1
   4c870:	a0a8b03a 	or	r20,r20,r2
   4c874:	9d3fff15 	stw	r20,-4(r19)
   4c878:	00505b00 	call	505b0 <__malloc_unlock>
   4c87c:	9805883a 	mov	r2,r19
   4c880:	003f3b06 	br	4c570 <__alt_data_end+0xfffd1bf0>
   4c884:	8809883a 	mov	r4,r17
   4c888:	980b883a 	mov	r5,r19
   4c88c:	004c21c0 	call	4c21c <memmove>
   4c890:	003f9606 	br	4c6ec <__alt_data_end+0xfffd1d6c>
   4c894:	8809883a 	mov	r4,r17
   4c898:	980b883a 	mov	r5,r19
   4c89c:	004c21c0 	call	4c21c <memmove>
   4c8a0:	b8c00117 	ldw	r3,4(r23)
   4c8a4:	b021883a 	mov	r16,r22
   4c8a8:	b82b883a 	mov	r21,r23
   4c8ac:	003f2306 	br	4c53c <__alt_data_end+0xfffd1bbc>
   4c8b0:	98c00217 	ldw	r3,8(r19)
   4c8b4:	88c00215 	stw	r3,8(r17)
   4c8b8:	98c00317 	ldw	r3,12(r19)
   4c8bc:	88c00315 	stw	r3,12(r17)
   4c8c0:	30800c26 	beq	r6,r2,4c8f4 <_realloc_r+0x520>
   4c8c4:	88800404 	addi	r2,r17,16
   4c8c8:	98c00404 	addi	r3,r19,16
   4c8cc:	003f8106 	br	4c6d4 <__alt_data_end+0xfffd1d54>
   4c8d0:	893fff17 	ldw	r4,-4(r17)
   4c8d4:	00bfff04 	movi	r2,-4
   4c8d8:	9823883a 	mov	r17,r19
   4c8dc:	2084703a 	and	r2,r4,r2
   4c8e0:	80a1883a 	add	r16,r16,r2
   4c8e4:	003f1506 	br	4c53c <__alt_data_end+0xfffd1bbc>
   4c8e8:	b8c00404 	addi	r3,r23,16
   4c8ec:	9cc00204 	addi	r19,r19,8
   4c8f0:	003f4b06 	br	4c620 <__alt_data_end+0xfffd1ca0>
   4c8f4:	99000417 	ldw	r4,16(r19)
   4c8f8:	88800604 	addi	r2,r17,24
   4c8fc:	98c00604 	addi	r3,r19,24
   4c900:	89000415 	stw	r4,16(r17)
   4c904:	99000517 	ldw	r4,20(r19)
   4c908:	89000515 	stw	r4,20(r17)
   4c90c:	003f7106 	br	4c6d4 <__alt_data_end+0xfffd1d54>
   4c910:	8805883a 	mov	r2,r17
   4c914:	003fb006 	br	4c7d8 <__alt_data_end+0xfffd1e58>
   4c918:	8809883a 	mov	r4,r17
   4c91c:	980b883a 	mov	r5,r19
   4c920:	004c21c0 	call	4c21c <memmove>
   4c924:	003fb206 	br	4c7f0 <__alt_data_end+0xfffd1e70>
   4c928:	98800217 	ldw	r2,8(r19)
   4c92c:	b8800415 	stw	r2,16(r23)
   4c930:	98800317 	ldw	r2,12(r19)
   4c934:	b8800515 	stw	r2,20(r23)
   4c938:	31000726 	beq	r6,r4,4c958 <_realloc_r+0x584>
   4c93c:	b8800604 	addi	r2,r23,24
   4c940:	9cc00404 	addi	r19,r19,16
   4c944:	003fa406 	br	4c7d8 <__alt_data_end+0xfffd1e58>
   4c948:	9009883a 	mov	r4,r18
   4c94c:	00505b00 	call	505b0 <__malloc_unlock>
   4c950:	0005883a 	mov	r2,zero
   4c954:	003f0606 	br	4c570 <__alt_data_end+0xfffd1bf0>
   4c958:	98c00417 	ldw	r3,16(r19)
   4c95c:	9cc00604 	addi	r19,r19,24
   4c960:	b8800804 	addi	r2,r23,32
   4c964:	b8c00615 	stw	r3,24(r23)
   4c968:	98ffff17 	ldw	r3,-4(r19)
   4c96c:	b8c00715 	stw	r3,28(r23)
   4c970:	003f9906 	br	4c7d8 <__alt_data_end+0xfffd1e58>

0004c974 <_wcrtomb_r>:
   4c974:	defff604 	addi	sp,sp,-40
   4c978:	00800174 	movhi	r2,5
   4c97c:	dc800815 	stw	r18,32(sp)
   4c980:	dc400715 	stw	r17,28(sp)
   4c984:	dc000615 	stw	r16,24(sp)
   4c988:	10909e04 	addi	r2,r2,17016
   4c98c:	dfc00915 	stw	ra,36(sp)
   4c990:	2021883a 	mov	r16,r4
   4c994:	3823883a 	mov	r17,r7
   4c998:	14800017 	ldw	r18,0(r2)
   4c99c:	28001426 	beq	r5,zero,4c9f0 <_wcrtomb_r+0x7c>
   4c9a0:	d9400415 	stw	r5,16(sp)
   4c9a4:	d9800515 	stw	r6,20(sp)
   4c9a8:	00483280 	call	48328 <__locale_charset>
   4c9ac:	d9400417 	ldw	r5,16(sp)
   4c9b0:	d9800517 	ldw	r6,20(sp)
   4c9b4:	8009883a 	mov	r4,r16
   4c9b8:	dc400015 	stw	r17,0(sp)
   4c9bc:	100f883a 	mov	r7,r2
   4c9c0:	903ee83a 	callr	r18
   4c9c4:	00ffffc4 	movi	r3,-1
   4c9c8:	10c0031e 	bne	r2,r3,4c9d8 <_wcrtomb_r+0x64>
   4c9cc:	88000015 	stw	zero,0(r17)
   4c9d0:	00c02284 	movi	r3,138
   4c9d4:	80c00015 	stw	r3,0(r16)
   4c9d8:	dfc00917 	ldw	ra,36(sp)
   4c9dc:	dc800817 	ldw	r18,32(sp)
   4c9e0:	dc400717 	ldw	r17,28(sp)
   4c9e4:	dc000617 	ldw	r16,24(sp)
   4c9e8:	dec00a04 	addi	sp,sp,40
   4c9ec:	f800283a 	ret
   4c9f0:	00483280 	call	48328 <__locale_charset>
   4c9f4:	8009883a 	mov	r4,r16
   4c9f8:	dc400015 	stw	r17,0(sp)
   4c9fc:	d9400104 	addi	r5,sp,4
   4ca00:	000d883a 	mov	r6,zero
   4ca04:	100f883a 	mov	r7,r2
   4ca08:	903ee83a 	callr	r18
   4ca0c:	003fed06 	br	4c9c4 <__alt_data_end+0xfffd2044>

0004ca10 <wcrtomb>:
   4ca10:	defff504 	addi	sp,sp,-44
   4ca14:	dc400515 	stw	r17,20(sp)
   4ca18:	dc000415 	stw	r16,16(sp)
   4ca1c:	dfc00a15 	stw	ra,40(sp)
   4ca20:	dd400915 	stw	r21,36(sp)
   4ca24:	dd000815 	stw	r20,32(sp)
   4ca28:	dcc00715 	stw	r19,28(sp)
   4ca2c:	dc800615 	stw	r18,24(sp)
   4ca30:	2021883a 	mov	r16,r4
   4ca34:	3023883a 	mov	r17,r6
   4ca38:	20001d26 	beq	r4,zero,4cab0 <wcrtomb+0xa0>
   4ca3c:	04800174 	movhi	r18,5
   4ca40:	94909a04 	addi	r18,r18,17000
   4ca44:	00800174 	movhi	r2,5
   4ca48:	95400017 	ldw	r21,0(r18)
   4ca4c:	10909e04 	addi	r2,r2,17016
   4ca50:	15000017 	ldw	r20,0(r2)
   4ca54:	2827883a 	mov	r19,r5
   4ca58:	00483280 	call	48328 <__locale_charset>
   4ca5c:	a809883a 	mov	r4,r21
   4ca60:	dc400015 	stw	r17,0(sp)
   4ca64:	800b883a 	mov	r5,r16
   4ca68:	980d883a 	mov	r6,r19
   4ca6c:	100f883a 	mov	r7,r2
   4ca70:	a03ee83a 	callr	r20
   4ca74:	00ffffc4 	movi	r3,-1
   4ca78:	10c0041e 	bne	r2,r3,4ca8c <wcrtomb+0x7c>
   4ca7c:	90c00017 	ldw	r3,0(r18)
   4ca80:	01002284 	movi	r4,138
   4ca84:	88000015 	stw	zero,0(r17)
   4ca88:	19000015 	stw	r4,0(r3)
   4ca8c:	dfc00a17 	ldw	ra,40(sp)
   4ca90:	dd400917 	ldw	r21,36(sp)
   4ca94:	dd000817 	ldw	r20,32(sp)
   4ca98:	dcc00717 	ldw	r19,28(sp)
   4ca9c:	dc800617 	ldw	r18,24(sp)
   4caa0:	dc400517 	ldw	r17,20(sp)
   4caa4:	dc000417 	ldw	r16,16(sp)
   4caa8:	dec00b04 	addi	sp,sp,44
   4caac:	f800283a 	ret
   4cab0:	04800174 	movhi	r18,5
   4cab4:	94909a04 	addi	r18,r18,17000
   4cab8:	00800174 	movhi	r2,5
   4cabc:	94c00017 	ldw	r19,0(r18)
   4cac0:	10909e04 	addi	r2,r2,17016
   4cac4:	14000017 	ldw	r16,0(r2)
   4cac8:	00483280 	call	48328 <__locale_charset>
   4cacc:	9809883a 	mov	r4,r19
   4cad0:	dc400015 	stw	r17,0(sp)
   4cad4:	d9400104 	addi	r5,sp,4
   4cad8:	000d883a 	mov	r6,zero
   4cadc:	100f883a 	mov	r7,r2
   4cae0:	803ee83a 	callr	r16
   4cae4:	003fe306 	br	4ca74 <__alt_data_end+0xfffd20f4>

0004cae8 <__ascii_wctomb>:
   4cae8:	28000526 	beq	r5,zero,4cb00 <__ascii_wctomb+0x18>
   4caec:	00803fc4 	movi	r2,255
   4caf0:	11800536 	bltu	r2,r6,4cb08 <__ascii_wctomb+0x20>
   4caf4:	29800005 	stb	r6,0(r5)
   4caf8:	00800044 	movi	r2,1
   4cafc:	f800283a 	ret
   4cb00:	0005883a 	mov	r2,zero
   4cb04:	f800283a 	ret
   4cb08:	00802284 	movi	r2,138
   4cb0c:	20800015 	stw	r2,0(r4)
   4cb10:	00bfffc4 	movi	r2,-1
   4cb14:	f800283a 	ret

0004cb18 <_wctomb_r>:
   4cb18:	00800174 	movhi	r2,5
   4cb1c:	defff904 	addi	sp,sp,-28
   4cb20:	10909e04 	addi	r2,r2,17016
   4cb24:	dfc00615 	stw	ra,24(sp)
   4cb28:	dc400515 	stw	r17,20(sp)
   4cb2c:	dc000415 	stw	r16,16(sp)
   4cb30:	3823883a 	mov	r17,r7
   4cb34:	14000017 	ldw	r16,0(r2)
   4cb38:	d9000115 	stw	r4,4(sp)
   4cb3c:	d9400215 	stw	r5,8(sp)
   4cb40:	d9800315 	stw	r6,12(sp)
   4cb44:	00483280 	call	48328 <__locale_charset>
   4cb48:	d9000117 	ldw	r4,4(sp)
   4cb4c:	d9400217 	ldw	r5,8(sp)
   4cb50:	d9800317 	ldw	r6,12(sp)
   4cb54:	dc400015 	stw	r17,0(sp)
   4cb58:	100f883a 	mov	r7,r2
   4cb5c:	803ee83a 	callr	r16
   4cb60:	dfc00617 	ldw	ra,24(sp)
   4cb64:	dc400517 	ldw	r17,20(sp)
   4cb68:	dc000417 	ldw	r16,16(sp)
   4cb6c:	dec00704 	addi	sp,sp,28
   4cb70:	f800283a 	ret

0004cb74 <__udivdi3>:
   4cb74:	defff504 	addi	sp,sp,-44
   4cb78:	dcc00415 	stw	r19,16(sp)
   4cb7c:	dc000115 	stw	r16,4(sp)
   4cb80:	dfc00a15 	stw	ra,40(sp)
   4cb84:	df000915 	stw	fp,36(sp)
   4cb88:	ddc00815 	stw	r23,32(sp)
   4cb8c:	dd800715 	stw	r22,28(sp)
   4cb90:	dd400615 	stw	r21,24(sp)
   4cb94:	dd000515 	stw	r20,20(sp)
   4cb98:	dc800315 	stw	r18,12(sp)
   4cb9c:	dc400215 	stw	r17,8(sp)
   4cba0:	2027883a 	mov	r19,r4
   4cba4:	2821883a 	mov	r16,r5
   4cba8:	3800421e 	bne	r7,zero,4ccb4 <__udivdi3+0x140>
   4cbac:	3025883a 	mov	r18,r6
   4cbb0:	2023883a 	mov	r17,r4
   4cbb4:	2980542e 	bgeu	r5,r6,4cd08 <__udivdi3+0x194>
   4cbb8:	00bfffd4 	movui	r2,65535
   4cbbc:	282d883a 	mov	r22,r5
   4cbc0:	1180a836 	bltu	r2,r6,4ce64 <__udivdi3+0x2f0>
   4cbc4:	00803fc4 	movi	r2,255
   4cbc8:	1181422e 	bgeu	r2,r6,4d0d4 <__udivdi3+0x560>
   4cbcc:	00800204 	movi	r2,8
   4cbd0:	1007883a 	mov	r3,r2
   4cbd4:	3084d83a 	srl	r2,r6,r2
   4cbd8:	01000174 	movhi	r4,5
   4cbdc:	2109a004 	addi	r4,r4,9856
   4cbe0:	2085883a 	add	r2,r4,r2
   4cbe4:	10800003 	ldbu	r2,0(r2)
   4cbe8:	10c7883a 	add	r3,r2,r3
   4cbec:	00800804 	movi	r2,32
   4cbf0:	10c5c83a 	sub	r2,r2,r3
   4cbf4:	10000526 	beq	r2,zero,4cc0c <__udivdi3+0x98>
   4cbf8:	80a0983a 	sll	r16,r16,r2
   4cbfc:	98c6d83a 	srl	r3,r19,r3
   4cc00:	30a4983a 	sll	r18,r6,r2
   4cc04:	98a2983a 	sll	r17,r19,r2
   4cc08:	80ecb03a 	or	r22,r16,r3
   4cc0c:	902ad43a 	srli	r21,r18,16
   4cc10:	b009883a 	mov	r4,r22
   4cc14:	953fffcc 	andi	r20,r18,65535
   4cc18:	a80b883a 	mov	r5,r21
   4cc1c:	004d7e80 	call	4d7e8 <__umodsi3>
   4cc20:	b009883a 	mov	r4,r22
   4cc24:	a80b883a 	mov	r5,r21
   4cc28:	1027883a 	mov	r19,r2
   4cc2c:	004d7e00 	call	4d7e0 <__udivsi3>
   4cc30:	1021883a 	mov	r16,r2
   4cc34:	8806d43a 	srli	r3,r17,16
   4cc38:	9804943a 	slli	r2,r19,16
   4cc3c:	8527383a 	mul	r19,r16,r20
   4cc40:	10c4b03a 	or	r2,r2,r3
   4cc44:	14c0052e 	bgeu	r2,r19,4cc5c <__udivdi3+0xe8>
   4cc48:	1485883a 	add	r2,r2,r18
   4cc4c:	80ffffc4 	addi	r3,r16,-1
   4cc50:	14800136 	bltu	r2,r18,4cc58 <__udivdi3+0xe4>
   4cc54:	14c13436 	bltu	r2,r19,4d128 <__udivdi3+0x5b4>
   4cc58:	1821883a 	mov	r16,r3
   4cc5c:	14e7c83a 	sub	r19,r2,r19
   4cc60:	9809883a 	mov	r4,r19
   4cc64:	a80b883a 	mov	r5,r21
   4cc68:	004d7e80 	call	4d7e8 <__umodsi3>
   4cc6c:	102d883a 	mov	r22,r2
   4cc70:	9809883a 	mov	r4,r19
   4cc74:	a80b883a 	mov	r5,r21
   4cc78:	004d7e00 	call	4d7e0 <__udivsi3>
   4cc7c:	b02c943a 	slli	r22,r22,16
   4cc80:	1529383a 	mul	r20,r2,r20
   4cc84:	8c7fffcc 	andi	r17,r17,65535
   4cc88:	b462b03a 	or	r17,r22,r17
   4cc8c:	8d00052e 	bgeu	r17,r20,4cca4 <__udivdi3+0x130>
   4cc90:	8ca3883a 	add	r17,r17,r18
   4cc94:	10ffffc4 	addi	r3,r2,-1
   4cc98:	8c80f636 	bltu	r17,r18,4d074 <__udivdi3+0x500>
   4cc9c:	8d00f52e 	bgeu	r17,r20,4d074 <__udivdi3+0x500>
   4cca0:	10bfff84 	addi	r2,r2,-2
   4cca4:	8020943a 	slli	r16,r16,16
   4cca8:	0007883a 	mov	r3,zero
   4ccac:	1404b03a 	or	r2,r2,r16
   4ccb0:	00005b06 	br	4ce20 <__udivdi3+0x2ac>
   4ccb4:	29c05836 	bltu	r5,r7,4ce18 <__udivdi3+0x2a4>
   4ccb8:	00bfffd4 	movui	r2,65535
   4ccbc:	11c0642e 	bgeu	r2,r7,4ce50 <__udivdi3+0x2dc>
   4ccc0:	00804034 	movhi	r2,256
   4ccc4:	10bfffc4 	addi	r2,r2,-1
   4ccc8:	11c0f32e 	bgeu	r2,r7,4d098 <__udivdi3+0x524>
   4cccc:	00c00604 	movi	r3,24
   4ccd0:	180b883a 	mov	r5,r3
   4ccd4:	38c6d83a 	srl	r3,r7,r3
   4ccd8:	00800174 	movhi	r2,5
   4ccdc:	1089a004 	addi	r2,r2,9856
   4cce0:	10c7883a 	add	r3,r2,r3
   4cce4:	18c00003 	ldbu	r3,0(r3)
   4cce8:	01000804 	movi	r4,32
   4ccec:	1947883a 	add	r3,r3,r5
   4ccf0:	20e5c83a 	sub	r18,r4,r3
   4ccf4:	9000661e 	bne	r18,zero,4ce90 <__udivdi3+0x31c>
   4ccf8:	3c00f936 	bltu	r7,r16,4d0e0 <__udivdi3+0x56c>
   4ccfc:	9985403a 	cmpgeu	r2,r19,r6
   4cd00:	0007883a 	mov	r3,zero
   4cd04:	00004606 	br	4ce20 <__udivdi3+0x2ac>
   4cd08:	3000041e 	bne	r6,zero,4cd1c <__udivdi3+0x1a8>
   4cd0c:	01000044 	movi	r4,1
   4cd10:	000b883a 	mov	r5,zero
   4cd14:	004d7e00 	call	4d7e0 <__udivsi3>
   4cd18:	1025883a 	mov	r18,r2
   4cd1c:	00bfffd4 	movui	r2,65535
   4cd20:	1480562e 	bgeu	r2,r18,4ce7c <__udivdi3+0x308>
   4cd24:	00804034 	movhi	r2,256
   4cd28:	10bfffc4 	addi	r2,r2,-1
   4cd2c:	1480e32e 	bgeu	r2,r18,4d0bc <__udivdi3+0x548>
   4cd30:	00800604 	movi	r2,24
   4cd34:	1007883a 	mov	r3,r2
   4cd38:	9084d83a 	srl	r2,r18,r2
   4cd3c:	01000174 	movhi	r4,5
   4cd40:	2109a004 	addi	r4,r4,9856
   4cd44:	2085883a 	add	r2,r4,r2
   4cd48:	10800003 	ldbu	r2,0(r2)
   4cd4c:	10c5883a 	add	r2,r2,r3
   4cd50:	00c00804 	movi	r3,32
   4cd54:	1887c83a 	sub	r3,r3,r2
   4cd58:	1800911e 	bne	r3,zero,4cfa0 <__udivdi3+0x42c>
   4cd5c:	9028d43a 	srli	r20,r18,16
   4cd60:	84a1c83a 	sub	r16,r16,r18
   4cd64:	957fffcc 	andi	r21,r18,65535
   4cd68:	00c00044 	movi	r3,1
   4cd6c:	8009883a 	mov	r4,r16
   4cd70:	a00b883a 	mov	r5,r20
   4cd74:	d8c00015 	stw	r3,0(sp)
   4cd78:	004d7e80 	call	4d7e8 <__umodsi3>
   4cd7c:	8009883a 	mov	r4,r16
   4cd80:	a00b883a 	mov	r5,r20
   4cd84:	1027883a 	mov	r19,r2
   4cd88:	004d7e00 	call	4d7e0 <__udivsi3>
   4cd8c:	1021883a 	mov	r16,r2
   4cd90:	880cd43a 	srli	r6,r17,16
   4cd94:	9804943a 	slli	r2,r19,16
   4cd98:	8567383a 	mul	r19,r16,r21
   4cd9c:	d8c00017 	ldw	r3,0(sp)
   4cda0:	1188b03a 	or	r4,r2,r6
   4cda4:	24c0052e 	bgeu	r4,r19,4cdbc <__udivdi3+0x248>
   4cda8:	2489883a 	add	r4,r4,r18
   4cdac:	80bfffc4 	addi	r2,r16,-1
   4cdb0:	24800136 	bltu	r4,r18,4cdb8 <__udivdi3+0x244>
   4cdb4:	24c0d936 	bltu	r4,r19,4d11c <__udivdi3+0x5a8>
   4cdb8:	1021883a 	mov	r16,r2
   4cdbc:	24e7c83a 	sub	r19,r4,r19
   4cdc0:	9809883a 	mov	r4,r19
   4cdc4:	a00b883a 	mov	r5,r20
   4cdc8:	d8c00015 	stw	r3,0(sp)
   4cdcc:	004d7e80 	call	4d7e8 <__umodsi3>
   4cdd0:	102d883a 	mov	r22,r2
   4cdd4:	9809883a 	mov	r4,r19
   4cdd8:	a00b883a 	mov	r5,r20
   4cddc:	004d7e00 	call	4d7e0 <__udivsi3>
   4cde0:	b02c943a 	slli	r22,r22,16
   4cde4:	156b383a 	mul	r21,r2,r21
   4cde8:	8c7fffcc 	andi	r17,r17,65535
   4cdec:	b462b03a 	or	r17,r22,r17
   4cdf0:	d8c00017 	ldw	r3,0(sp)
   4cdf4:	8d40052e 	bgeu	r17,r21,4ce0c <__udivdi3+0x298>
   4cdf8:	8ca3883a 	add	r17,r17,r18
   4cdfc:	113fffc4 	addi	r4,r2,-1
   4ce00:	8c809a36 	bltu	r17,r18,4d06c <__udivdi3+0x4f8>
   4ce04:	8d40992e 	bgeu	r17,r21,4d06c <__udivdi3+0x4f8>
   4ce08:	10bfff84 	addi	r2,r2,-2
   4ce0c:	8020943a 	slli	r16,r16,16
   4ce10:	1404b03a 	or	r2,r2,r16
   4ce14:	00000206 	br	4ce20 <__udivdi3+0x2ac>
   4ce18:	0007883a 	mov	r3,zero
   4ce1c:	0005883a 	mov	r2,zero
   4ce20:	dfc00a17 	ldw	ra,40(sp)
   4ce24:	df000917 	ldw	fp,36(sp)
   4ce28:	ddc00817 	ldw	r23,32(sp)
   4ce2c:	dd800717 	ldw	r22,28(sp)
   4ce30:	dd400617 	ldw	r21,24(sp)
   4ce34:	dd000517 	ldw	r20,20(sp)
   4ce38:	dcc00417 	ldw	r19,16(sp)
   4ce3c:	dc800317 	ldw	r18,12(sp)
   4ce40:	dc400217 	ldw	r17,8(sp)
   4ce44:	dc000117 	ldw	r16,4(sp)
   4ce48:	dec00b04 	addi	sp,sp,44
   4ce4c:	f800283a 	ret
   4ce50:	00803fc4 	movi	r2,255
   4ce54:	11c0932e 	bgeu	r2,r7,4d0a4 <__udivdi3+0x530>
   4ce58:	00c00204 	movi	r3,8
   4ce5c:	180b883a 	mov	r5,r3
   4ce60:	003f9c06 	br	4ccd4 <__alt_data_end+0xfffd2354>
   4ce64:	00804034 	movhi	r2,256
   4ce68:	10bfffc4 	addi	r2,r2,-1
   4ce6c:	1180902e 	bgeu	r2,r6,4d0b0 <__udivdi3+0x53c>
   4ce70:	00800604 	movi	r2,24
   4ce74:	1007883a 	mov	r3,r2
   4ce78:	003f5606 	br	4cbd4 <__alt_data_end+0xfffd2254>
   4ce7c:	00803fc4 	movi	r2,255
   4ce80:	1480912e 	bgeu	r2,r18,4d0c8 <__udivdi3+0x554>
   4ce84:	00800204 	movi	r2,8
   4ce88:	1007883a 	mov	r3,r2
   4ce8c:	003faa06 	br	4cd38 <__alt_data_end+0xfffd23b8>
   4ce90:	30eed83a 	srl	r23,r6,r3
   4ce94:	3c8e983a 	sll	r7,r7,r18
   4ce98:	80f8d83a 	srl	fp,r16,r3
   4ce9c:	98c6d83a 	srl	r3,r19,r3
   4cea0:	3deeb03a 	or	r23,r7,r23
   4cea4:	b828d43a 	srli	r20,r23,16
   4cea8:	84a0983a 	sll	r16,r16,r18
   4ceac:	e009883a 	mov	r4,fp
   4ceb0:	a00b883a 	mov	r5,r20
   4ceb4:	80e2b03a 	or	r17,r16,r3
   4ceb8:	34aa983a 	sll	r21,r6,r18
   4cebc:	004d7e80 	call	4d7e8 <__umodsi3>
   4cec0:	e009883a 	mov	r4,fp
   4cec4:	a00b883a 	mov	r5,r20
   4cec8:	102d883a 	mov	r22,r2
   4cecc:	004d7e00 	call	4d7e0 <__udivsi3>
   4ced0:	1021883a 	mov	r16,r2
   4ced4:	bf3fffcc 	andi	fp,r23,65535
   4ced8:	b004943a 	slli	r2,r22,16
   4cedc:	8808d43a 	srli	r4,r17,16
   4cee0:	872d383a 	mul	r22,r16,fp
   4cee4:	1104b03a 	or	r2,r2,r4
   4cee8:	1580042e 	bgeu	r2,r22,4cefc <__udivdi3+0x388>
   4ceec:	15c5883a 	add	r2,r2,r23
   4cef0:	80ffffc4 	addi	r3,r16,-1
   4cef4:	15c0812e 	bgeu	r2,r23,4d0fc <__udivdi3+0x588>
   4cef8:	1821883a 	mov	r16,r3
   4cefc:	15adc83a 	sub	r22,r2,r22
   4cf00:	b009883a 	mov	r4,r22
   4cf04:	a00b883a 	mov	r5,r20
   4cf08:	004d7e80 	call	4d7e8 <__umodsi3>
   4cf0c:	a00b883a 	mov	r5,r20
   4cf10:	b009883a 	mov	r4,r22
   4cf14:	d8800015 	stw	r2,0(sp)
   4cf18:	004d7e00 	call	4d7e0 <__udivsi3>
   4cf1c:	d8c00017 	ldw	r3,0(sp)
   4cf20:	170b383a 	mul	r5,r2,fp
   4cf24:	8c7fffcc 	andi	r17,r17,65535
   4cf28:	1806943a 	slli	r3,r3,16
   4cf2c:	1c46b03a 	or	r3,r3,r17
   4cf30:	1940042e 	bgeu	r3,r5,4cf44 <__udivdi3+0x3d0>
   4cf34:	1dc7883a 	add	r3,r3,r23
   4cf38:	113fffc4 	addi	r4,r2,-1
   4cf3c:	1dc06b2e 	bgeu	r3,r23,4d0ec <__udivdi3+0x578>
   4cf40:	2005883a 	mov	r2,r4
   4cf44:	8020943a 	slli	r16,r16,16
   4cf48:	a9ffffcc 	andi	r7,r21,65535
   4cf4c:	a82ad43a 	srli	r21,r21,16
   4cf50:	1404b03a 	or	r2,r2,r16
   4cf54:	113fffcc 	andi	r4,r2,65535
   4cf58:	100cd43a 	srli	r6,r2,16
   4cf5c:	21d3383a 	mul	r9,r4,r7
   4cf60:	2549383a 	mul	r4,r4,r21
   4cf64:	31cf383a 	mul	r7,r6,r7
   4cf68:	4810d43a 	srli	r8,r9,16
   4cf6c:	1947c83a 	sub	r3,r3,r5
   4cf70:	3909883a 	add	r4,r7,r4
   4cf74:	2209883a 	add	r4,r4,r8
   4cf78:	354d383a 	mul	r6,r6,r21
   4cf7c:	21c0022e 	bgeu	r4,r7,4cf88 <__udivdi3+0x414>
   4cf80:	01400074 	movhi	r5,1
   4cf84:	314d883a 	add	r6,r6,r5
   4cf88:	202ad43a 	srli	r21,r4,16
   4cf8c:	354d883a 	add	r6,r6,r21
   4cf90:	19803f36 	bltu	r3,r6,4d090 <__udivdi3+0x51c>
   4cf94:	19803926 	beq	r3,r6,4d07c <__udivdi3+0x508>
   4cf98:	0007883a 	mov	r3,zero
   4cf9c:	003fa006 	br	4ce20 <__alt_data_end+0xfffd24a0>
   4cfa0:	90e4983a 	sll	r18,r18,r3
   4cfa4:	80aad83a 	srl	r21,r16,r2
   4cfa8:	80e0983a 	sll	r16,r16,r3
   4cfac:	9028d43a 	srli	r20,r18,16
   4cfb0:	9884d83a 	srl	r2,r19,r2
   4cfb4:	a809883a 	mov	r4,r21
   4cfb8:	a00b883a 	mov	r5,r20
   4cfbc:	80acb03a 	or	r22,r16,r2
   4cfc0:	98e2983a 	sll	r17,r19,r3
   4cfc4:	004d7e80 	call	4d7e8 <__umodsi3>
   4cfc8:	a809883a 	mov	r4,r21
   4cfcc:	a00b883a 	mov	r5,r20
   4cfd0:	1021883a 	mov	r16,r2
   4cfd4:	004d7e00 	call	4d7e0 <__udivsi3>
   4cfd8:	957fffcc 	andi	r21,r18,65535
   4cfdc:	8020943a 	slli	r16,r16,16
   4cfe0:	b00ad43a 	srli	r5,r22,16
   4cfe4:	1567383a 	mul	r19,r2,r21
   4cfe8:	102f883a 	mov	r23,r2
   4cfec:	8148b03a 	or	r4,r16,r5
   4cff0:	24c0062e 	bgeu	r4,r19,4d00c <__udivdi3+0x498>
   4cff4:	2489883a 	add	r4,r4,r18
   4cff8:	10bfffc4 	addi	r2,r2,-1
   4cffc:	24804536 	bltu	r4,r18,4d114 <__udivdi3+0x5a0>
   4d000:	24c0442e 	bgeu	r4,r19,4d114 <__udivdi3+0x5a0>
   4d004:	bdffff84 	addi	r23,r23,-2
   4d008:	2489883a 	add	r4,r4,r18
   4d00c:	24e7c83a 	sub	r19,r4,r19
   4d010:	9809883a 	mov	r4,r19
   4d014:	a00b883a 	mov	r5,r20
   4d018:	004d7e80 	call	4d7e8 <__umodsi3>
   4d01c:	1021883a 	mov	r16,r2
   4d020:	9809883a 	mov	r4,r19
   4d024:	a00b883a 	mov	r5,r20
   4d028:	004d7e00 	call	4d7e0 <__udivsi3>
   4d02c:	8020943a 	slli	r16,r16,16
   4d030:	1007883a 	mov	r3,r2
   4d034:	1545383a 	mul	r2,r2,r21
   4d038:	b13fffcc 	andi	r4,r22,65535
   4d03c:	8108b03a 	or	r4,r16,r4
   4d040:	2080062e 	bgeu	r4,r2,4d05c <__udivdi3+0x4e8>
   4d044:	2489883a 	add	r4,r4,r18
   4d048:	197fffc4 	addi	r5,r3,-1
   4d04c:	24802f36 	bltu	r4,r18,4d10c <__udivdi3+0x598>
   4d050:	20802e2e 	bgeu	r4,r2,4d10c <__udivdi3+0x598>
   4d054:	18ffff84 	addi	r3,r3,-2
   4d058:	2489883a 	add	r4,r4,r18
   4d05c:	b82e943a 	slli	r23,r23,16
   4d060:	20a1c83a 	sub	r16,r4,r2
   4d064:	1dc6b03a 	or	r3,r3,r23
   4d068:	003f4006 	br	4cd6c <__alt_data_end+0xfffd23ec>
   4d06c:	2005883a 	mov	r2,r4
   4d070:	003f6606 	br	4ce0c <__alt_data_end+0xfffd248c>
   4d074:	1805883a 	mov	r2,r3
   4d078:	003f0a06 	br	4cca4 <__alt_data_end+0xfffd2324>
   4d07c:	2006943a 	slli	r3,r4,16
   4d080:	9c88983a 	sll	r4,r19,r18
   4d084:	4a7fffcc 	andi	r9,r9,65535
   4d088:	1a47883a 	add	r3,r3,r9
   4d08c:	20ffc22e 	bgeu	r4,r3,4cf98 <__alt_data_end+0xfffd2618>
   4d090:	10bfffc4 	addi	r2,r2,-1
   4d094:	003fc006 	br	4cf98 <__alt_data_end+0xfffd2618>
   4d098:	00c00404 	movi	r3,16
   4d09c:	180b883a 	mov	r5,r3
   4d0a0:	003f0c06 	br	4ccd4 <__alt_data_end+0xfffd2354>
   4d0a4:	0007883a 	mov	r3,zero
   4d0a8:	000b883a 	mov	r5,zero
   4d0ac:	003f0906 	br	4ccd4 <__alt_data_end+0xfffd2354>
   4d0b0:	00800404 	movi	r2,16
   4d0b4:	1007883a 	mov	r3,r2
   4d0b8:	003ec606 	br	4cbd4 <__alt_data_end+0xfffd2254>
   4d0bc:	00800404 	movi	r2,16
   4d0c0:	1007883a 	mov	r3,r2
   4d0c4:	003f1c06 	br	4cd38 <__alt_data_end+0xfffd23b8>
   4d0c8:	0005883a 	mov	r2,zero
   4d0cc:	0007883a 	mov	r3,zero
   4d0d0:	003f1906 	br	4cd38 <__alt_data_end+0xfffd23b8>
   4d0d4:	0005883a 	mov	r2,zero
   4d0d8:	0007883a 	mov	r3,zero
   4d0dc:	003ebd06 	br	4cbd4 <__alt_data_end+0xfffd2254>
   4d0e0:	0007883a 	mov	r3,zero
   4d0e4:	00800044 	movi	r2,1
   4d0e8:	003f4d06 	br	4ce20 <__alt_data_end+0xfffd24a0>
   4d0ec:	197f942e 	bgeu	r3,r5,4cf40 <__alt_data_end+0xfffd25c0>
   4d0f0:	10bfff84 	addi	r2,r2,-2
   4d0f4:	1dc7883a 	add	r3,r3,r23
   4d0f8:	003f9206 	br	4cf44 <__alt_data_end+0xfffd25c4>
   4d0fc:	15bf7e2e 	bgeu	r2,r22,4cef8 <__alt_data_end+0xfffd2578>
   4d100:	843fff84 	addi	r16,r16,-2
   4d104:	15c5883a 	add	r2,r2,r23
   4d108:	003f7c06 	br	4cefc <__alt_data_end+0xfffd257c>
   4d10c:	2807883a 	mov	r3,r5
   4d110:	003fd206 	br	4d05c <__alt_data_end+0xfffd26dc>
   4d114:	102f883a 	mov	r23,r2
   4d118:	003fbc06 	br	4d00c <__alt_data_end+0xfffd268c>
   4d11c:	843fff84 	addi	r16,r16,-2
   4d120:	2489883a 	add	r4,r4,r18
   4d124:	003f2506 	br	4cdbc <__alt_data_end+0xfffd243c>
   4d128:	843fff84 	addi	r16,r16,-2
   4d12c:	1485883a 	add	r2,r2,r18
   4d130:	003eca06 	br	4cc5c <__alt_data_end+0xfffd22dc>

0004d134 <__umoddi3>:
   4d134:	defff404 	addi	sp,sp,-48
   4d138:	ddc00915 	stw	r23,36(sp)
   4d13c:	dc400315 	stw	r17,12(sp)
   4d140:	dc000215 	stw	r16,8(sp)
   4d144:	dfc00b15 	stw	ra,44(sp)
   4d148:	df000a15 	stw	fp,40(sp)
   4d14c:	dd800815 	stw	r22,32(sp)
   4d150:	dd400715 	stw	r21,28(sp)
   4d154:	dd000615 	stw	r20,24(sp)
   4d158:	dcc00515 	stw	r19,20(sp)
   4d15c:	dc800415 	stw	r18,16(sp)
   4d160:	2021883a 	mov	r16,r4
   4d164:	2823883a 	mov	r17,r5
   4d168:	282f883a 	mov	r23,r5
   4d16c:	3800381e 	bne	r7,zero,4d250 <__umoddi3+0x11c>
   4d170:	3027883a 	mov	r19,r6
   4d174:	2029883a 	mov	r20,r4
   4d178:	29804e2e 	bgeu	r5,r6,4d2b4 <__umoddi3+0x180>
   4d17c:	00bfffd4 	movui	r2,65535
   4d180:	11809c36 	bltu	r2,r6,4d3f4 <__umoddi3+0x2c0>
   4d184:	00803fc4 	movi	r2,255
   4d188:	11813b2e 	bgeu	r2,r6,4d678 <__umoddi3+0x544>
   4d18c:	01400204 	movi	r5,8
   4d190:	2805883a 	mov	r2,r5
   4d194:	314ad83a 	srl	r5,r6,r5
   4d198:	00c00174 	movhi	r3,5
   4d19c:	18c9a004 	addi	r3,r3,9856
   4d1a0:	194b883a 	add	r5,r3,r5
   4d1a4:	29000003 	ldbu	r4,0(r5)
   4d1a8:	2089883a 	add	r4,r4,r2
   4d1ac:	00800804 	movi	r2,32
   4d1b0:	1105c83a 	sub	r2,r2,r4
   4d1b4:	1000ec26 	beq	r2,zero,4d568 <__umoddi3+0x434>
   4d1b8:	88a2983a 	sll	r17,r17,r2
   4d1bc:	8108d83a 	srl	r4,r16,r4
   4d1c0:	30a6983a 	sll	r19,r6,r2
   4d1c4:	80a8983a 	sll	r20,r16,r2
   4d1c8:	1025883a 	mov	r18,r2
   4d1cc:	892eb03a 	or	r23,r17,r4
   4d1d0:	982cd43a 	srli	r22,r19,16
   4d1d4:	b809883a 	mov	r4,r23
   4d1d8:	9d7fffcc 	andi	r21,r19,65535
   4d1dc:	b00b883a 	mov	r5,r22
   4d1e0:	004d7e80 	call	4d7e8 <__umodsi3>
   4d1e4:	b809883a 	mov	r4,r23
   4d1e8:	b00b883a 	mov	r5,r22
   4d1ec:	1021883a 	mov	r16,r2
   4d1f0:	004d7e00 	call	4d7e0 <__udivsi3>
   4d1f4:	8020943a 	slli	r16,r16,16
   4d1f8:	a00cd43a 	srli	r6,r20,16
   4d1fc:	1545383a 	mul	r2,r2,r21
   4d200:	8188b03a 	or	r4,r16,r6
   4d204:	2080042e 	bgeu	r4,r2,4d218 <__umoddi3+0xe4>
   4d208:	24c9883a 	add	r4,r4,r19
   4d20c:	24c00236 	bltu	r4,r19,4d218 <__umoddi3+0xe4>
   4d210:	2080012e 	bgeu	r4,r2,4d218 <__umoddi3+0xe4>
   4d214:	24c9883a 	add	r4,r4,r19
   4d218:	20a3c83a 	sub	r17,r4,r2
   4d21c:	8809883a 	mov	r4,r17
   4d220:	b00b883a 	mov	r5,r22
   4d224:	004d7e80 	call	4d7e8 <__umodsi3>
   4d228:	8809883a 	mov	r4,r17
   4d22c:	b00b883a 	mov	r5,r22
   4d230:	1021883a 	mov	r16,r2
   4d234:	004d7e00 	call	4d7e0 <__udivsi3>
   4d238:	8006943a 	slli	r3,r16,16
   4d23c:	1545383a 	mul	r2,r2,r21
   4d240:	a13fffcc 	andi	r4,r20,65535
   4d244:	1906b03a 	or	r3,r3,r4
   4d248:	1880532e 	bgeu	r3,r2,4d398 <__umoddi3+0x264>
   4d24c:	00004e06 	br	4d388 <__umoddi3+0x254>
   4d250:	29c05536 	bltu	r5,r7,4d3a8 <__umoddi3+0x274>
   4d254:	00bfffd4 	movui	r2,65535
   4d258:	11c0612e 	bgeu	r2,r7,4d3e0 <__umoddi3+0x2ac>
   4d25c:	00804034 	movhi	r2,256
   4d260:	10bfffc4 	addi	r2,r2,-1
   4d264:	11c0f82e 	bgeu	r2,r7,4d648 <__umoddi3+0x514>
   4d268:	01400604 	movi	r5,24
   4d26c:	282b883a 	mov	r21,r5
   4d270:	394ad83a 	srl	r5,r7,r5
   4d274:	00c00174 	movhi	r3,5
   4d278:	18c9a004 	addi	r3,r3,9856
   4d27c:	194b883a 	add	r5,r3,r5
   4d280:	28800003 	ldbu	r2,0(r5)
   4d284:	00c00804 	movi	r3,32
   4d288:	156b883a 	add	r21,r2,r21
   4d28c:	1d69c83a 	sub	r20,r3,r21
   4d290:	a000631e 	bne	r20,zero,4d420 <__umoddi3+0x2ec>
   4d294:	3c400136 	bltu	r7,r17,4d29c <__umoddi3+0x168>
   4d298:	81810436 	bltu	r16,r6,4d6ac <__umoddi3+0x578>
   4d29c:	8185c83a 	sub	r2,r16,r6
   4d2a0:	89e3c83a 	sub	r17,r17,r7
   4d2a4:	8087803a 	cmpltu	r3,r16,r2
   4d2a8:	88efc83a 	sub	r23,r17,r3
   4d2ac:	b807883a 	mov	r3,r23
   4d2b0:	00003f06 	br	4d3b0 <__umoddi3+0x27c>
   4d2b4:	3000041e 	bne	r6,zero,4d2c8 <__umoddi3+0x194>
   4d2b8:	01000044 	movi	r4,1
   4d2bc:	000b883a 	mov	r5,zero
   4d2c0:	004d7e00 	call	4d7e0 <__udivsi3>
   4d2c4:	1027883a 	mov	r19,r2
   4d2c8:	00bfffd4 	movui	r2,65535
   4d2cc:	14c04f2e 	bgeu	r2,r19,4d40c <__umoddi3+0x2d8>
   4d2d0:	00804034 	movhi	r2,256
   4d2d4:	10bfffc4 	addi	r2,r2,-1
   4d2d8:	14c0e42e 	bgeu	r2,r19,4d66c <__umoddi3+0x538>
   4d2dc:	00800604 	movi	r2,24
   4d2e0:	1007883a 	mov	r3,r2
   4d2e4:	9884d83a 	srl	r2,r19,r2
   4d2e8:	01000174 	movhi	r4,5
   4d2ec:	2109a004 	addi	r4,r4,9856
   4d2f0:	2085883a 	add	r2,r4,r2
   4d2f4:	11000003 	ldbu	r4,0(r2)
   4d2f8:	00800804 	movi	r2,32
   4d2fc:	20c7883a 	add	r3,r4,r3
   4d300:	10c5c83a 	sub	r2,r2,r3
   4d304:	10009a1e 	bne	r2,zero,4d570 <__umoddi3+0x43c>
   4d308:	982cd43a 	srli	r22,r19,16
   4d30c:	8ce3c83a 	sub	r17,r17,r19
   4d310:	9c3fffcc 	andi	r16,r19,65535
   4d314:	0025883a 	mov	r18,zero
   4d318:	8809883a 	mov	r4,r17
   4d31c:	b00b883a 	mov	r5,r22
   4d320:	004d7e80 	call	4d7e8 <__umodsi3>
   4d324:	8809883a 	mov	r4,r17
   4d328:	b00b883a 	mov	r5,r22
   4d32c:	102b883a 	mov	r21,r2
   4d330:	004d7e00 	call	4d7e0 <__udivsi3>
   4d334:	a806943a 	slli	r3,r21,16
   4d338:	a008d43a 	srli	r4,r20,16
   4d33c:	1405383a 	mul	r2,r2,r16
   4d340:	190cb03a 	or	r6,r3,r4
   4d344:	3080032e 	bgeu	r6,r2,4d354 <__umoddi3+0x220>
   4d348:	34cd883a 	add	r6,r6,r19
   4d34c:	34c00136 	bltu	r6,r19,4d354 <__umoddi3+0x220>
   4d350:	3080d436 	bltu	r6,r2,4d6a4 <__umoddi3+0x570>
   4d354:	30abc83a 	sub	r21,r6,r2
   4d358:	a809883a 	mov	r4,r21
   4d35c:	b00b883a 	mov	r5,r22
   4d360:	004d7e80 	call	4d7e8 <__umodsi3>
   4d364:	1023883a 	mov	r17,r2
   4d368:	a809883a 	mov	r4,r21
   4d36c:	b00b883a 	mov	r5,r22
   4d370:	004d7e00 	call	4d7e0 <__udivsi3>
   4d374:	8822943a 	slli	r17,r17,16
   4d378:	1405383a 	mul	r2,r2,r16
   4d37c:	a13fffcc 	andi	r4,r20,65535
   4d380:	8906b03a 	or	r3,r17,r4
   4d384:	1880042e 	bgeu	r3,r2,4d398 <__umoddi3+0x264>
   4d388:	1cc7883a 	add	r3,r3,r19
   4d38c:	1cc00236 	bltu	r3,r19,4d398 <__umoddi3+0x264>
   4d390:	1880012e 	bgeu	r3,r2,4d398 <__umoddi3+0x264>
   4d394:	1cc7883a 	add	r3,r3,r19
   4d398:	1887c83a 	sub	r3,r3,r2
   4d39c:	1c84d83a 	srl	r2,r3,r18
   4d3a0:	0007883a 	mov	r3,zero
   4d3a4:	00000206 	br	4d3b0 <__umoddi3+0x27c>
   4d3a8:	2005883a 	mov	r2,r4
   4d3ac:	2807883a 	mov	r3,r5
   4d3b0:	dfc00b17 	ldw	ra,44(sp)
   4d3b4:	df000a17 	ldw	fp,40(sp)
   4d3b8:	ddc00917 	ldw	r23,36(sp)
   4d3bc:	dd800817 	ldw	r22,32(sp)
   4d3c0:	dd400717 	ldw	r21,28(sp)
   4d3c4:	dd000617 	ldw	r20,24(sp)
   4d3c8:	dcc00517 	ldw	r19,20(sp)
   4d3cc:	dc800417 	ldw	r18,16(sp)
   4d3d0:	dc400317 	ldw	r17,12(sp)
   4d3d4:	dc000217 	ldw	r16,8(sp)
   4d3d8:	dec00c04 	addi	sp,sp,48
   4d3dc:	f800283a 	ret
   4d3e0:	00803fc4 	movi	r2,255
   4d3e4:	11c0952e 	bgeu	r2,r7,4d63c <__umoddi3+0x508>
   4d3e8:	01400204 	movi	r5,8
   4d3ec:	282b883a 	mov	r21,r5
   4d3f0:	003f9f06 	br	4d270 <__alt_data_end+0xfffd28f0>
   4d3f4:	00804034 	movhi	r2,256
   4d3f8:	10bfffc4 	addi	r2,r2,-1
   4d3fc:	1180952e 	bgeu	r2,r6,4d654 <__umoddi3+0x520>
   4d400:	01400604 	movi	r5,24
   4d404:	2805883a 	mov	r2,r5
   4d408:	003f6206 	br	4d194 <__alt_data_end+0xfffd2814>
   4d40c:	00803fc4 	movi	r2,255
   4d410:	14c0932e 	bgeu	r2,r19,4d660 <__umoddi3+0x52c>
   4d414:	00800204 	movi	r2,8
   4d418:	1007883a 	mov	r3,r2
   4d41c:	003fb106 	br	4d2e4 <__alt_data_end+0xfffd2964>
   4d420:	3548d83a 	srl	r4,r6,r21
   4d424:	3d0e983a 	sll	r7,r7,r20
   4d428:	8d10983a 	sll	r8,r17,r20
   4d42c:	8d6cd83a 	srl	r22,r17,r21
   4d430:	3922b03a 	or	r17,r7,r4
   4d434:	882ed43a 	srli	r23,r17,16
   4d438:	8564d83a 	srl	r18,r16,r21
   4d43c:	b009883a 	mov	r4,r22
   4d440:	b80b883a 	mov	r5,r23
   4d444:	44a4b03a 	or	r18,r8,r18
   4d448:	3526983a 	sll	r19,r6,r20
   4d44c:	004d7e80 	call	4d7e8 <__umodsi3>
   4d450:	b009883a 	mov	r4,r22
   4d454:	b80b883a 	mov	r5,r23
   4d458:	1039883a 	mov	fp,r2
   4d45c:	004d7e00 	call	4d7e0 <__udivsi3>
   4d460:	102d883a 	mov	r22,r2
   4d464:	8a3fffcc 	andi	r8,r17,65535
   4d468:	e004943a 	slli	r2,fp,16
   4d46c:	900cd43a 	srli	r6,r18,16
   4d470:	b239383a 	mul	fp,r22,r8
   4d474:	8520983a 	sll	r16,r16,r20
   4d478:	118ab03a 	or	r5,r2,r6
   4d47c:	2f00042e 	bgeu	r5,fp,4d490 <__umoddi3+0x35c>
   4d480:	2c4b883a 	add	r5,r5,r17
   4d484:	b0bfffc4 	addi	r2,r22,-1
   4d488:	2c40822e 	bgeu	r5,r17,4d694 <__umoddi3+0x560>
   4d48c:	102d883a 	mov	r22,r2
   4d490:	2f39c83a 	sub	fp,r5,fp
   4d494:	e009883a 	mov	r4,fp
   4d498:	b80b883a 	mov	r5,r23
   4d49c:	da000115 	stw	r8,4(sp)
   4d4a0:	004d7e80 	call	4d7e8 <__umodsi3>
   4d4a4:	e009883a 	mov	r4,fp
   4d4a8:	b80b883a 	mov	r5,r23
   4d4ac:	d8800015 	stw	r2,0(sp)
   4d4b0:	004d7e00 	call	4d7e0 <__udivsi3>
   4d4b4:	d9800017 	ldw	r6,0(sp)
   4d4b8:	da000117 	ldw	r8,4(sp)
   4d4bc:	94bfffcc 	andi	r18,r18,65535
   4d4c0:	300c943a 	slli	r6,r6,16
   4d4c4:	1209383a 	mul	r4,r2,r8
   4d4c8:	3490b03a 	or	r8,r6,r18
   4d4cc:	4100042e 	bgeu	r8,r4,4d4e0 <__umoddi3+0x3ac>
   4d4d0:	4451883a 	add	r8,r8,r17
   4d4d4:	10ffffc4 	addi	r3,r2,-1
   4d4d8:	44406a2e 	bgeu	r8,r17,4d684 <__umoddi3+0x550>
   4d4dc:	1805883a 	mov	r2,r3
   4d4e0:	b012943a 	slli	r9,r22,16
   4d4e4:	9abfffcc 	andi	r10,r19,65535
   4d4e8:	980ed43a 	srli	r7,r19,16
   4d4ec:	124ab03a 	or	r5,r2,r9
   4d4f0:	2a7fffcc 	andi	r9,r5,65535
   4d4f4:	280ad43a 	srli	r5,r5,16
   4d4f8:	4a8d383a 	mul	r6,r9,r10
   4d4fc:	49d3383a 	mul	r9,r9,r7
   4d500:	2a95383a 	mul	r10,r5,r10
   4d504:	3004d43a 	srli	r2,r6,16
   4d508:	4111c83a 	sub	r8,r8,r4
   4d50c:	5253883a 	add	r9,r10,r9
   4d510:	4893883a 	add	r9,r9,r2
   4d514:	29cb383a 	mul	r5,r5,r7
   4d518:	4a80022e 	bgeu	r9,r10,4d524 <__umoddi3+0x3f0>
   4d51c:	00800074 	movhi	r2,1
   4d520:	288b883a 	add	r5,r5,r2
   4d524:	4808d43a 	srli	r4,r9,16
   4d528:	4812943a 	slli	r9,r9,16
   4d52c:	31bfffcc 	andi	r6,r6,65535
   4d530:	290b883a 	add	r5,r5,r4
   4d534:	498d883a 	add	r6,r9,r6
   4d538:	41403a36 	bltu	r8,r5,4d624 <__umoddi3+0x4f0>
   4d53c:	41405d26 	beq	r8,r5,4d6b4 <__umoddi3+0x580>
   4d540:	4149c83a 	sub	r4,r8,r5
   4d544:	300f883a 	mov	r7,r6
   4d548:	81cfc83a 	sub	r7,r16,r7
   4d54c:	81c7803a 	cmpltu	r3,r16,r7
   4d550:	20c7c83a 	sub	r3,r4,r3
   4d554:	1d44983a 	sll	r2,r3,r21
   4d558:	3d0ed83a 	srl	r7,r7,r20
   4d55c:	1d06d83a 	srl	r3,r3,r20
   4d560:	11c4b03a 	or	r2,r2,r7
   4d564:	003f9206 	br	4d3b0 <__alt_data_end+0xfffd2a30>
   4d568:	0025883a 	mov	r18,zero
   4d56c:	003f1806 	br	4d1d0 <__alt_data_end+0xfffd2850>
   4d570:	98a6983a 	sll	r19,r19,r2
   4d574:	88e8d83a 	srl	r20,r17,r3
   4d578:	80c6d83a 	srl	r3,r16,r3
   4d57c:	982cd43a 	srli	r22,r19,16
   4d580:	88a2983a 	sll	r17,r17,r2
   4d584:	a009883a 	mov	r4,r20
   4d588:	b00b883a 	mov	r5,r22
   4d58c:	88eab03a 	or	r21,r17,r3
   4d590:	1025883a 	mov	r18,r2
   4d594:	004d7e80 	call	4d7e8 <__umodsi3>
   4d598:	a009883a 	mov	r4,r20
   4d59c:	b00b883a 	mov	r5,r22
   4d5a0:	1023883a 	mov	r17,r2
   4d5a4:	004d7e00 	call	4d7e0 <__udivsi3>
   4d5a8:	9f3fffcc 	andi	fp,r19,65535
   4d5ac:	8822943a 	slli	r17,r17,16
   4d5b0:	a80ad43a 	srli	r5,r21,16
   4d5b4:	1705383a 	mul	r2,r2,fp
   4d5b8:	84a8983a 	sll	r20,r16,r18
   4d5bc:	8948b03a 	or	r4,r17,r5
   4d5c0:	2080042e 	bgeu	r4,r2,4d5d4 <__umoddi3+0x4a0>
   4d5c4:	24c9883a 	add	r4,r4,r19
   4d5c8:	24c00236 	bltu	r4,r19,4d5d4 <__umoddi3+0x4a0>
   4d5cc:	2080012e 	bgeu	r4,r2,4d5d4 <__umoddi3+0x4a0>
   4d5d0:	24c9883a 	add	r4,r4,r19
   4d5d4:	20afc83a 	sub	r23,r4,r2
   4d5d8:	b809883a 	mov	r4,r23
   4d5dc:	b00b883a 	mov	r5,r22
   4d5e0:	004d7e80 	call	4d7e8 <__umodsi3>
   4d5e4:	1023883a 	mov	r17,r2
   4d5e8:	b809883a 	mov	r4,r23
   4d5ec:	b00b883a 	mov	r5,r22
   4d5f0:	004d7e00 	call	4d7e0 <__udivsi3>
   4d5f4:	8822943a 	slli	r17,r17,16
   4d5f8:	1705383a 	mul	r2,r2,fp
   4d5fc:	a93fffcc 	andi	r4,r21,65535
   4d600:	8908b03a 	or	r4,r17,r4
   4d604:	2080042e 	bgeu	r4,r2,4d618 <__umoddi3+0x4e4>
   4d608:	24c9883a 	add	r4,r4,r19
   4d60c:	24c00236 	bltu	r4,r19,4d618 <__umoddi3+0x4e4>
   4d610:	2080012e 	bgeu	r4,r2,4d618 <__umoddi3+0x4e4>
   4d614:	24c9883a 	add	r4,r4,r19
   4d618:	20a3c83a 	sub	r17,r4,r2
   4d61c:	e021883a 	mov	r16,fp
   4d620:	003f3d06 	br	4d318 <__alt_data_end+0xfffd2998>
   4d624:	34cfc83a 	sub	r7,r6,r19
   4d628:	2c4bc83a 	sub	r5,r5,r17
   4d62c:	31cd803a 	cmpltu	r6,r6,r7
   4d630:	298dc83a 	sub	r6,r5,r6
   4d634:	4189c83a 	sub	r4,r8,r6
   4d638:	003fc306 	br	4d548 <__alt_data_end+0xfffd2bc8>
   4d63c:	000b883a 	mov	r5,zero
   4d640:	002b883a 	mov	r21,zero
   4d644:	003f0a06 	br	4d270 <__alt_data_end+0xfffd28f0>
   4d648:	01400404 	movi	r5,16
   4d64c:	282b883a 	mov	r21,r5
   4d650:	003f0706 	br	4d270 <__alt_data_end+0xfffd28f0>
   4d654:	01400404 	movi	r5,16
   4d658:	2805883a 	mov	r2,r5
   4d65c:	003ecd06 	br	4d194 <__alt_data_end+0xfffd2814>
   4d660:	0005883a 	mov	r2,zero
   4d664:	0007883a 	mov	r3,zero
   4d668:	003f1e06 	br	4d2e4 <__alt_data_end+0xfffd2964>
   4d66c:	00800404 	movi	r2,16
   4d670:	1007883a 	mov	r3,r2
   4d674:	003f1b06 	br	4d2e4 <__alt_data_end+0xfffd2964>
   4d678:	000b883a 	mov	r5,zero
   4d67c:	0005883a 	mov	r2,zero
   4d680:	003ec406 	br	4d194 <__alt_data_end+0xfffd2814>
   4d684:	413f952e 	bgeu	r8,r4,4d4dc <__alt_data_end+0xfffd2b5c>
   4d688:	10bfff84 	addi	r2,r2,-2
   4d68c:	4451883a 	add	r8,r8,r17
   4d690:	003f9306 	br	4d4e0 <__alt_data_end+0xfffd2b60>
   4d694:	2f3f7d2e 	bgeu	r5,fp,4d48c <__alt_data_end+0xfffd2b0c>
   4d698:	b5bfff84 	addi	r22,r22,-2
   4d69c:	2c4b883a 	add	r5,r5,r17
   4d6a0:	003f7b06 	br	4d490 <__alt_data_end+0xfffd2b10>
   4d6a4:	34cd883a 	add	r6,r6,r19
   4d6a8:	003f2a06 	br	4d354 <__alt_data_end+0xfffd29d4>
   4d6ac:	8005883a 	mov	r2,r16
   4d6b0:	003efe06 	br	4d2ac <__alt_data_end+0xfffd292c>
   4d6b4:	81bfdb36 	bltu	r16,r6,4d624 <__alt_data_end+0xfffd2ca4>
   4d6b8:	300f883a 	mov	r7,r6
   4d6bc:	0009883a 	mov	r4,zero
   4d6c0:	003fa106 	br	4d548 <__alt_data_end+0xfffd2bc8>

0004d6c4 <udivmodsi4>:
   4d6c4:	2900182e 	bgeu	r5,r4,4d728 <udivmodsi4+0x64>
   4d6c8:	28001716 	blt	r5,zero,4d728 <udivmodsi4+0x64>
   4d6cc:	00800804 	movi	r2,32
   4d6d0:	00c00044 	movi	r3,1
   4d6d4:	00000206 	br	4d6e0 <udivmodsi4+0x1c>
   4d6d8:	10001126 	beq	r2,zero,4d720 <udivmodsi4+0x5c>
   4d6dc:	28000516 	blt	r5,zero,4d6f4 <udivmodsi4+0x30>
   4d6e0:	294b883a 	add	r5,r5,r5
   4d6e4:	10bfffc4 	addi	r2,r2,-1
   4d6e8:	18c7883a 	add	r3,r3,r3
   4d6ec:	293ffa36 	bltu	r5,r4,4d6d8 <__alt_data_end+0xfffd2d58>
   4d6f0:	18000b26 	beq	r3,zero,4d720 <udivmodsi4+0x5c>
   4d6f4:	0005883a 	mov	r2,zero
   4d6f8:	21400236 	bltu	r4,r5,4d704 <udivmodsi4+0x40>
   4d6fc:	2149c83a 	sub	r4,r4,r5
   4d700:	10c4b03a 	or	r2,r2,r3
   4d704:	1806d07a 	srli	r3,r3,1
   4d708:	280ad07a 	srli	r5,r5,1
   4d70c:	183ffa1e 	bne	r3,zero,4d6f8 <__alt_data_end+0xfffd2d78>
   4d710:	3000011e 	bne	r6,zero,4d718 <udivmodsi4+0x54>
   4d714:	f800283a 	ret
   4d718:	2005883a 	mov	r2,r4
   4d71c:	f800283a 	ret
   4d720:	0005883a 	mov	r2,zero
   4d724:	003ffa06 	br	4d710 <__alt_data_end+0xfffd2d90>
   4d728:	00c00044 	movi	r3,1
   4d72c:	003ff106 	br	4d6f4 <__alt_data_end+0xfffd2d74>

0004d730 <__divsi3>:
   4d730:	defffe04 	addi	sp,sp,-8
   4d734:	dfc00115 	stw	ra,4(sp)
   4d738:	dc000015 	stw	r16,0(sp)
   4d73c:	20000b16 	blt	r4,zero,4d76c <__divsi3+0x3c>
   4d740:	0021883a 	mov	r16,zero
   4d744:	28000c16 	blt	r5,zero,4d778 <__divsi3+0x48>
   4d748:	000d883a 	mov	r6,zero
   4d74c:	004d6c40 	call	4d6c4 <udivmodsi4>
   4d750:	0407c83a 	sub	r3,zero,r16
   4d754:	1884f03a 	xor	r2,r3,r2
   4d758:	1405883a 	add	r2,r2,r16
   4d75c:	dfc00117 	ldw	ra,4(sp)
   4d760:	dc000017 	ldw	r16,0(sp)
   4d764:	dec00204 	addi	sp,sp,8
   4d768:	f800283a 	ret
   4d76c:	0109c83a 	sub	r4,zero,r4
   4d770:	04000044 	movi	r16,1
   4d774:	283ff40e 	bge	r5,zero,4d748 <__alt_data_end+0xfffd2dc8>
   4d778:	014bc83a 	sub	r5,zero,r5
   4d77c:	8400005c 	xori	r16,r16,1
   4d780:	003ff106 	br	4d748 <__alt_data_end+0xfffd2dc8>

0004d784 <__modsi3>:
   4d784:	defffd04 	addi	sp,sp,-12
   4d788:	dfc00215 	stw	ra,8(sp)
   4d78c:	dc400115 	stw	r17,4(sp)
   4d790:	dc000015 	stw	r16,0(sp)
   4d794:	20000c16 	blt	r4,zero,4d7c8 <__modsi3+0x44>
   4d798:	0023883a 	mov	r17,zero
   4d79c:	0021883a 	mov	r16,zero
   4d7a0:	28000d16 	blt	r5,zero,4d7d8 <__modsi3+0x54>
   4d7a4:	01800044 	movi	r6,1
   4d7a8:	004d6c40 	call	4d6c4 <udivmodsi4>
   4d7ac:	1404f03a 	xor	r2,r2,r16
   4d7b0:	8885883a 	add	r2,r17,r2
   4d7b4:	dfc00217 	ldw	ra,8(sp)
   4d7b8:	dc400117 	ldw	r17,4(sp)
   4d7bc:	dc000017 	ldw	r16,0(sp)
   4d7c0:	dec00304 	addi	sp,sp,12
   4d7c4:	f800283a 	ret
   4d7c8:	0109c83a 	sub	r4,zero,r4
   4d7cc:	04400044 	movi	r17,1
   4d7d0:	043fffc4 	movi	r16,-1
   4d7d4:	283ff30e 	bge	r5,zero,4d7a4 <__alt_data_end+0xfffd2e24>
   4d7d8:	014bc83a 	sub	r5,zero,r5
   4d7dc:	003ff106 	br	4d7a4 <__alt_data_end+0xfffd2e24>

0004d7e0 <__udivsi3>:
   4d7e0:	000d883a 	mov	r6,zero
   4d7e4:	004d6c41 	jmpi	4d6c4 <udivmodsi4>

0004d7e8 <__umodsi3>:
   4d7e8:	01800044 	movi	r6,1
   4d7ec:	004d6c41 	jmpi	4d6c4 <udivmodsi4>

0004d7f0 <__adddf3>:
   4d7f0:	02000434 	movhi	r8,16
   4d7f4:	423fffc4 	addi	r8,r8,-1
   4d7f8:	defffb04 	addi	sp,sp,-20
   4d7fc:	2a12703a 	and	r9,r5,r8
   4d800:	2806d7fa 	srli	r3,r5,31
   4d804:	3a10703a 	and	r8,r7,r8
   4d808:	3804d53a 	srli	r2,r7,20
   4d80c:	3014d77a 	srli	r10,r6,29
   4d810:	dc000015 	stw	r16,0(sp)
   4d814:	481290fa 	slli	r9,r9,3
   4d818:	2820d53a 	srli	r16,r5,20
   4d81c:	401090fa 	slli	r8,r8,3
   4d820:	200ad77a 	srli	r5,r4,29
   4d824:	380ed7fa 	srli	r7,r7,31
   4d828:	dc800215 	stw	r18,8(sp)
   4d82c:	dc400115 	stw	r17,4(sp)
   4d830:	dfc00415 	stw	ra,16(sp)
   4d834:	dcc00315 	stw	r19,12(sp)
   4d838:	1c803fcc 	andi	r18,r3,255
   4d83c:	8401ffcc 	andi	r16,r16,2047
   4d840:	494ab03a 	or	r5,r9,r5
   4d844:	202290fa 	slli	r17,r4,3
   4d848:	1081ffcc 	andi	r2,r2,2047
   4d84c:	4290b03a 	or	r8,r8,r10
   4d850:	300c90fa 	slli	r6,r6,3
   4d854:	91c07026 	beq	r18,r7,4da18 <__adddf3+0x228>
   4d858:	8087c83a 	sub	r3,r16,r2
   4d85c:	00c0b30e 	bge	zero,r3,4db2c <__adddf3+0x33c>
   4d860:	10002a1e 	bne	r2,zero,4d90c <__adddf3+0x11c>
   4d864:	4184b03a 	or	r2,r8,r6
   4d868:	1000991e 	bne	r2,zero,4dad0 <__adddf3+0x2e0>
   4d86c:	888001cc 	andi	r2,r17,7
   4d870:	10005b26 	beq	r2,zero,4d9e0 <__adddf3+0x1f0>
   4d874:	88c003cc 	andi	r3,r17,15
   4d878:	00800104 	movi	r2,4
   4d87c:	18805826 	beq	r3,r2,4d9e0 <__adddf3+0x1f0>
   4d880:	89800104 	addi	r6,r17,4
   4d884:	3463803a 	cmpltu	r17,r6,r17
   4d888:	2c4b883a 	add	r5,r5,r17
   4d88c:	2880202c 	andhi	r2,r5,128
   4d890:	9007883a 	mov	r3,r18
   4d894:	3023883a 	mov	r17,r6
   4d898:	10005426 	beq	r2,zero,4d9ec <__adddf3+0x1fc>
   4d89c:	84000044 	addi	r16,r16,1
   4d8a0:	0081ffc4 	movi	r2,2047
   4d8a4:	8080c126 	beq	r16,r2,4dbac <__adddf3+0x3bc>
   4d8a8:	013fe034 	movhi	r4,65408
   4d8ac:	213fffc4 	addi	r4,r4,-1
   4d8b0:	290a703a 	and	r5,r5,r4
   4d8b4:	2804977a 	slli	r2,r5,29
   4d8b8:	280a927a 	slli	r5,r5,9
   4d8bc:	8822d0fa 	srli	r17,r17,3
   4d8c0:	8401ffcc 	andi	r16,r16,2047
   4d8c4:	2808d33a 	srli	r4,r5,12
   4d8c8:	1444b03a 	or	r2,r2,r17
   4d8cc:	8401ffcc 	andi	r16,r16,2047
   4d8d0:	800a953a 	slli	r5,r16,20
   4d8d4:	18c03fcc 	andi	r3,r3,255
   4d8d8:	04000434 	movhi	r16,16
   4d8dc:	180697fa 	slli	r3,r3,31
   4d8e0:	843fffc4 	addi	r16,r16,-1
   4d8e4:	2420703a 	and	r16,r4,r16
   4d8e8:	8160b03a 	or	r16,r16,r5
   4d8ec:	80c6b03a 	or	r3,r16,r3
   4d8f0:	dfc00417 	ldw	ra,16(sp)
   4d8f4:	dcc00317 	ldw	r19,12(sp)
   4d8f8:	dc800217 	ldw	r18,8(sp)
   4d8fc:	dc400117 	ldw	r17,4(sp)
   4d900:	dc000017 	ldw	r16,0(sp)
   4d904:	dec00504 	addi	sp,sp,20
   4d908:	f800283a 	ret
   4d90c:	0081ffc4 	movi	r2,2047
   4d910:	80bfd626 	beq	r16,r2,4d86c <__alt_data_end+0xfffd2eec>
   4d914:	42002034 	orhi	r8,r8,128
   4d918:	00800e04 	movi	r2,56
   4d91c:	10c0a616 	blt	r2,r3,4dbb8 <__adddf3+0x3c8>
   4d920:	008007c4 	movi	r2,31
   4d924:	10c0c916 	blt	r2,r3,4dc4c <__adddf3+0x45c>
   4d928:	00800804 	movi	r2,32
   4d92c:	10c5c83a 	sub	r2,r2,r3
   4d930:	408e983a 	sll	r7,r8,r2
   4d934:	30c8d83a 	srl	r4,r6,r3
   4d938:	3084983a 	sll	r2,r6,r2
   4d93c:	40c6d83a 	srl	r3,r8,r3
   4d940:	390cb03a 	or	r6,r7,r4
   4d944:	1004c03a 	cmpne	r2,r2,zero
   4d948:	308cb03a 	or	r6,r6,r2
   4d94c:	898dc83a 	sub	r6,r17,r6
   4d950:	89a3803a 	cmpltu	r17,r17,r6
   4d954:	28cbc83a 	sub	r5,r5,r3
   4d958:	2c4bc83a 	sub	r5,r5,r17
   4d95c:	3023883a 	mov	r17,r6
   4d960:	2880202c 	andhi	r2,r5,128
   4d964:	10006d26 	beq	r2,zero,4db1c <__adddf3+0x32c>
   4d968:	04c02034 	movhi	r19,128
   4d96c:	9cffffc4 	addi	r19,r19,-1
   4d970:	2ce6703a 	and	r19,r5,r19
   4d974:	98007e26 	beq	r19,zero,4db70 <__adddf3+0x380>
   4d978:	9809883a 	mov	r4,r19
   4d97c:	004fd8c0 	call	4fd8c <__clzsi2>
   4d980:	10fffe04 	addi	r3,r2,-8
   4d984:	010007c4 	movi	r4,31
   4d988:	20c07f16 	blt	r4,r3,4db88 <__adddf3+0x398>
   4d98c:	01400a04 	movi	r5,40
   4d990:	2885c83a 	sub	r2,r5,r2
   4d994:	888ad83a 	srl	r5,r17,r2
   4d998:	98e6983a 	sll	r19,r19,r3
   4d99c:	88e2983a 	sll	r17,r17,r3
   4d9a0:	2ce6b03a 	or	r19,r5,r19
   4d9a4:	1c007c16 	blt	r3,r16,4db98 <__adddf3+0x3a8>
   4d9a8:	1c21c83a 	sub	r16,r3,r16
   4d9ac:	81400044 	addi	r5,r16,1
   4d9b0:	00c007c4 	movi	r3,31
   4d9b4:	19409816 	blt	r3,r5,4dc18 <__adddf3+0x428>
   4d9b8:	1c21c83a 	sub	r16,r3,r16
   4d9bc:	8c08983a 	sll	r4,r17,r16
   4d9c0:	8946d83a 	srl	r3,r17,r5
   4d9c4:	9c20983a 	sll	r16,r19,r16
   4d9c8:	2008c03a 	cmpne	r4,r4,zero
   4d9cc:	994ad83a 	srl	r5,r19,r5
   4d9d0:	1c06b03a 	or	r3,r3,r16
   4d9d4:	1922b03a 	or	r17,r3,r4
   4d9d8:	0021883a 	mov	r16,zero
   4d9dc:	003fa306 	br	4d86c <__alt_data_end+0xfffd2eec>
   4d9e0:	2880202c 	andhi	r2,r5,128
   4d9e4:	9007883a 	mov	r3,r18
   4d9e8:	103fac1e 	bne	r2,zero,4d89c <__alt_data_end+0xfffd2f1c>
   4d9ec:	2804977a 	slli	r2,r5,29
   4d9f0:	8822d0fa 	srli	r17,r17,3
   4d9f4:	0101ffc4 	movi	r4,2047
   4d9f8:	280ad0fa 	srli	r5,r5,3
   4d9fc:	1444b03a 	or	r2,r2,r17
   4da00:	81002c26 	beq	r16,r4,4dab4 <__adddf3+0x2c4>
   4da04:	8120703a 	and	r16,r16,r4
   4da08:	01000434 	movhi	r4,16
   4da0c:	213fffc4 	addi	r4,r4,-1
   4da10:	2908703a 	and	r4,r5,r4
   4da14:	003fad06 	br	4d8cc <__alt_data_end+0xfffd2f4c>
   4da18:	8089c83a 	sub	r4,r16,r2
   4da1c:	01006a0e 	bge	zero,r4,4dbc8 <__adddf3+0x3d8>
   4da20:	10003326 	beq	r2,zero,4daf0 <__adddf3+0x300>
   4da24:	0081ffc4 	movi	r2,2047
   4da28:	80bf9026 	beq	r16,r2,4d86c <__alt_data_end+0xfffd2eec>
   4da2c:	42002034 	orhi	r8,r8,128
   4da30:	00800e04 	movi	r2,56
   4da34:	1100b116 	blt	r2,r4,4dcfc <__adddf3+0x50c>
   4da38:	008007c4 	movi	r2,31
   4da3c:	1100e216 	blt	r2,r4,4ddc8 <__adddf3+0x5d8>
   4da40:	00800804 	movi	r2,32
   4da44:	1105c83a 	sub	r2,r2,r4
   4da48:	4092983a 	sll	r9,r8,r2
   4da4c:	310ed83a 	srl	r7,r6,r4
   4da50:	3084983a 	sll	r2,r6,r2
   4da54:	4110d83a 	srl	r8,r8,r4
   4da58:	49ccb03a 	or	r6,r9,r7
   4da5c:	1004c03a 	cmpne	r2,r2,zero
   4da60:	308cb03a 	or	r6,r6,r2
   4da64:	344d883a 	add	r6,r6,r17
   4da68:	3463803a 	cmpltu	r17,r6,r17
   4da6c:	414b883a 	add	r5,r8,r5
   4da70:	2c4b883a 	add	r5,r5,r17
   4da74:	3023883a 	mov	r17,r6
   4da78:	2880202c 	andhi	r2,r5,128
   4da7c:	10002726 	beq	r2,zero,4db1c <__adddf3+0x32c>
   4da80:	84000044 	addi	r16,r16,1
   4da84:	0081ffc4 	movi	r2,2047
   4da88:	8080ae26 	beq	r16,r2,4dd44 <__adddf3+0x554>
   4da8c:	00bfe034 	movhi	r2,65408
   4da90:	10bfffc4 	addi	r2,r2,-1
   4da94:	288a703a 	and	r5,r5,r2
   4da98:	880cd07a 	srli	r6,r17,1
   4da9c:	280897fa 	slli	r4,r5,31
   4daa0:	88c0004c 	andi	r3,r17,1
   4daa4:	30e2b03a 	or	r17,r6,r3
   4daa8:	280ad07a 	srli	r5,r5,1
   4daac:	8922b03a 	or	r17,r17,r4
   4dab0:	003f6e06 	br	4d86c <__alt_data_end+0xfffd2eec>
   4dab4:	1148b03a 	or	r4,r2,r5
   4dab8:	20003c26 	beq	r4,zero,4dbac <__adddf3+0x3bc>
   4dabc:	29000234 	orhi	r4,r5,8
   4dac0:	01400434 	movhi	r5,16
   4dac4:	297fffc4 	addi	r5,r5,-1
   4dac8:	2148703a 	and	r4,r4,r5
   4dacc:	003f7f06 	br	4d8cc <__alt_data_end+0xfffd2f4c>
   4dad0:	18ffffc4 	addi	r3,r3,-1
   4dad4:	18004d1e 	bne	r3,zero,4dc0c <__adddf3+0x41c>
   4dad8:	898dc83a 	sub	r6,r17,r6
   4dadc:	89a3803a 	cmpltu	r17,r17,r6
   4dae0:	2a0bc83a 	sub	r5,r5,r8
   4dae4:	2c4bc83a 	sub	r5,r5,r17
   4dae8:	3023883a 	mov	r17,r6
   4daec:	003f9c06 	br	4d960 <__alt_data_end+0xfffd2fe0>
   4daf0:	4184b03a 	or	r2,r8,r6
   4daf4:	103f5d26 	beq	r2,zero,4d86c <__alt_data_end+0xfffd2eec>
   4daf8:	213fffc4 	addi	r4,r4,-1
   4dafc:	203fd926 	beq	r4,zero,4da64 <__alt_data_end+0xfffd30e4>
   4db00:	0081ffc4 	movi	r2,2047
   4db04:	80bfca1e 	bne	r16,r2,4da30 <__alt_data_end+0xfffd30b0>
   4db08:	003f5806 	br	4d86c <__alt_data_end+0xfffd2eec>
   4db0c:	10c8b03a 	or	r4,r2,r3
   4db10:	20008b26 	beq	r4,zero,4dd40 <__adddf3+0x550>
   4db14:	100b883a 	mov	r5,r2
   4db18:	1823883a 	mov	r17,r3
   4db1c:	888001cc 	andi	r2,r17,7
   4db20:	103f541e 	bne	r2,zero,4d874 <__alt_data_end+0xfffd2ef4>
   4db24:	9007883a 	mov	r3,r18
   4db28:	003fb006 	br	4d9ec <__alt_data_end+0xfffd306c>
   4db2c:	1800531e 	bne	r3,zero,4dc7c <__adddf3+0x48c>
   4db30:	80800044 	addi	r2,r16,1
   4db34:	1081ffcc 	andi	r2,r2,2047
   4db38:	00c00044 	movi	r3,1
   4db3c:	1880990e 	bge	r3,r2,4dda4 <__adddf3+0x5b4>
   4db40:	8985c83a 	sub	r2,r17,r6
   4db44:	8887803a 	cmpltu	r3,r17,r2
   4db48:	2a27c83a 	sub	r19,r5,r8
   4db4c:	98e7c83a 	sub	r19,r19,r3
   4db50:	98c0202c 	andhi	r3,r19,128
   4db54:	18006226 	beq	r3,zero,4dce0 <__adddf3+0x4f0>
   4db58:	3463c83a 	sub	r17,r6,r17
   4db5c:	4151c83a 	sub	r8,r8,r5
   4db60:	344d803a 	cmpltu	r6,r6,r17
   4db64:	41a7c83a 	sub	r19,r8,r6
   4db68:	3825883a 	mov	r18,r7
   4db6c:	983f821e 	bne	r19,zero,4d978 <__alt_data_end+0xfffd2ff8>
   4db70:	8809883a 	mov	r4,r17
   4db74:	004fd8c0 	call	4fd8c <__clzsi2>
   4db78:	10800804 	addi	r2,r2,32
   4db7c:	10fffe04 	addi	r3,r2,-8
   4db80:	010007c4 	movi	r4,31
   4db84:	20ff810e 	bge	r4,r3,4d98c <__alt_data_end+0xfffd300c>
   4db88:	14fff604 	addi	r19,r2,-40
   4db8c:	8ce6983a 	sll	r19,r17,r19
   4db90:	0023883a 	mov	r17,zero
   4db94:	1c3f840e 	bge	r3,r16,4d9a8 <__alt_data_end+0xfffd3028>
   4db98:	017fe034 	movhi	r5,65408
   4db9c:	297fffc4 	addi	r5,r5,-1
   4dba0:	80e1c83a 	sub	r16,r16,r3
   4dba4:	994a703a 	and	r5,r19,r5
   4dba8:	003f3006 	br	4d86c <__alt_data_end+0xfffd2eec>
   4dbac:	0009883a 	mov	r4,zero
   4dbb0:	0005883a 	mov	r2,zero
   4dbb4:	003f4506 	br	4d8cc <__alt_data_end+0xfffd2f4c>
   4dbb8:	418cb03a 	or	r6,r8,r6
   4dbbc:	300cc03a 	cmpne	r6,r6,zero
   4dbc0:	0007883a 	mov	r3,zero
   4dbc4:	003f6106 	br	4d94c <__alt_data_end+0xfffd2fcc>
   4dbc8:	2000921e 	bne	r4,zero,4de14 <__adddf3+0x624>
   4dbcc:	80800044 	addi	r2,r16,1
   4dbd0:	11c1ffcc 	andi	r7,r2,2047
   4dbd4:	01000044 	movi	r4,1
   4dbd8:	21c0610e 	bge	r4,r7,4dd60 <__adddf3+0x570>
   4dbdc:	0101ffc4 	movi	r4,2047
   4dbe0:	1100a326 	beq	r2,r4,4de70 <__adddf3+0x680>
   4dbe4:	344d883a 	add	r6,r6,r17
   4dbe8:	3463803a 	cmpltu	r17,r6,r17
   4dbec:	414b883a 	add	r5,r8,r5
   4dbf0:	2c4b883a 	add	r5,r5,r17
   4dbf4:	282297fa 	slli	r17,r5,31
   4dbf8:	300cd07a 	srli	r6,r6,1
   4dbfc:	280ad07a 	srli	r5,r5,1
   4dc00:	1021883a 	mov	r16,r2
   4dc04:	89a2b03a 	or	r17,r17,r6
   4dc08:	003f1806 	br	4d86c <__alt_data_end+0xfffd2eec>
   4dc0c:	0081ffc4 	movi	r2,2047
   4dc10:	80bf411e 	bne	r16,r2,4d918 <__alt_data_end+0xfffd2f98>
   4dc14:	003f1506 	br	4d86c <__alt_data_end+0xfffd2eec>
   4dc18:	80bff844 	addi	r2,r16,-31
   4dc1c:	00c00804 	movi	r3,32
   4dc20:	9884d83a 	srl	r2,r19,r2
   4dc24:	28c04a26 	beq	r5,r3,4dd50 <__adddf3+0x560>
   4dc28:	00c00fc4 	movi	r3,63
   4dc2c:	1c21c83a 	sub	r16,r3,r16
   4dc30:	9c26983a 	sll	r19,r19,r16
   4dc34:	9c62b03a 	or	r17,r19,r17
   4dc38:	8822c03a 	cmpne	r17,r17,zero
   4dc3c:	88a2b03a 	or	r17,r17,r2
   4dc40:	000b883a 	mov	r5,zero
   4dc44:	0021883a 	mov	r16,zero
   4dc48:	003fb406 	br	4db1c <__alt_data_end+0xfffd319c>
   4dc4c:	18bff804 	addi	r2,r3,-32
   4dc50:	01000804 	movi	r4,32
   4dc54:	4084d83a 	srl	r2,r8,r2
   4dc58:	19003f26 	beq	r3,r4,4dd58 <__adddf3+0x568>
   4dc5c:	01001004 	movi	r4,64
   4dc60:	20c7c83a 	sub	r3,r4,r3
   4dc64:	40d0983a 	sll	r8,r8,r3
   4dc68:	418cb03a 	or	r6,r8,r6
   4dc6c:	300cc03a 	cmpne	r6,r6,zero
   4dc70:	308cb03a 	or	r6,r6,r2
   4dc74:	0007883a 	mov	r3,zero
   4dc78:	003f3406 	br	4d94c <__alt_data_end+0xfffd2fcc>
   4dc7c:	80002326 	beq	r16,zero,4dd0c <__adddf3+0x51c>
   4dc80:	0101ffc4 	movi	r4,2047
   4dc84:	11005e26 	beq	r2,r4,4de00 <__adddf3+0x610>
   4dc88:	00c7c83a 	sub	r3,zero,r3
   4dc8c:	29402034 	orhi	r5,r5,128
   4dc90:	01000e04 	movi	r4,56
   4dc94:	20c07216 	blt	r4,r3,4de60 <__adddf3+0x670>
   4dc98:	010007c4 	movi	r4,31
   4dc9c:	20c0ce16 	blt	r4,r3,4dfd8 <__adddf3+0x7e8>
   4dca0:	01000804 	movi	r4,32
   4dca4:	20c9c83a 	sub	r4,r4,r3
   4dca8:	2914983a 	sll	r10,r5,r4
   4dcac:	88d2d83a 	srl	r9,r17,r3
   4dcb0:	8908983a 	sll	r4,r17,r4
   4dcb4:	28c6d83a 	srl	r3,r5,r3
   4dcb8:	5262b03a 	or	r17,r10,r9
   4dcbc:	2008c03a 	cmpne	r4,r4,zero
   4dcc0:	8922b03a 	or	r17,r17,r4
   4dcc4:	3463c83a 	sub	r17,r6,r17
   4dcc8:	40c7c83a 	sub	r3,r8,r3
   4dccc:	344d803a 	cmpltu	r6,r6,r17
   4dcd0:	198bc83a 	sub	r5,r3,r6
   4dcd4:	1021883a 	mov	r16,r2
   4dcd8:	3825883a 	mov	r18,r7
   4dcdc:	003f2006 	br	4d960 <__alt_data_end+0xfffd2fe0>
   4dce0:	9886b03a 	or	r3,r19,r2
   4dce4:	1800141e 	bne	r3,zero,4dd38 <__adddf3+0x548>
   4dce8:	0007883a 	mov	r3,zero
   4dcec:	000b883a 	mov	r5,zero
   4dcf0:	0023883a 	mov	r17,zero
   4dcf4:	0021883a 	mov	r16,zero
   4dcf8:	003f3c06 	br	4d9ec <__alt_data_end+0xfffd306c>
   4dcfc:	418cb03a 	or	r6,r8,r6
   4dd00:	300cc03a 	cmpne	r6,r6,zero
   4dd04:	0011883a 	mov	r8,zero
   4dd08:	003f5606 	br	4da64 <__alt_data_end+0xfffd30e4>
   4dd0c:	2c48b03a 	or	r4,r5,r17
   4dd10:	20003b26 	beq	r4,zero,4de00 <__adddf3+0x610>
   4dd14:	00c6303a 	nor	r3,zero,r3
   4dd18:	1800371e 	bne	r3,zero,4ddf8 <__adddf3+0x608>
   4dd1c:	3463c83a 	sub	r17,r6,r17
   4dd20:	414bc83a 	sub	r5,r8,r5
   4dd24:	344d803a 	cmpltu	r6,r6,r17
   4dd28:	298bc83a 	sub	r5,r5,r6
   4dd2c:	1021883a 	mov	r16,r2
   4dd30:	3825883a 	mov	r18,r7
   4dd34:	003f0a06 	br	4d960 <__alt_data_end+0xfffd2fe0>
   4dd38:	1023883a 	mov	r17,r2
   4dd3c:	003f0d06 	br	4d974 <__alt_data_end+0xfffd2ff4>
   4dd40:	0007883a 	mov	r3,zero
   4dd44:	000b883a 	mov	r5,zero
   4dd48:	0023883a 	mov	r17,zero
   4dd4c:	003f2706 	br	4d9ec <__alt_data_end+0xfffd306c>
   4dd50:	0027883a 	mov	r19,zero
   4dd54:	003fb706 	br	4dc34 <__alt_data_end+0xfffd32b4>
   4dd58:	0011883a 	mov	r8,zero
   4dd5c:	003fc206 	br	4dc68 <__alt_data_end+0xfffd32e8>
   4dd60:	2c44b03a 	or	r2,r5,r17
   4dd64:	8000871e 	bne	r16,zero,4df84 <__adddf3+0x794>
   4dd68:	1000b126 	beq	r2,zero,4e030 <__adddf3+0x840>
   4dd6c:	4184b03a 	or	r2,r8,r6
   4dd70:	103ebe26 	beq	r2,zero,4d86c <__alt_data_end+0xfffd2eec>
   4dd74:	3445883a 	add	r2,r6,r17
   4dd78:	1463803a 	cmpltu	r17,r2,r17
   4dd7c:	414b883a 	add	r5,r8,r5
   4dd80:	2c4b883a 	add	r5,r5,r17
   4dd84:	28c0202c 	andhi	r3,r5,128
   4dd88:	1023883a 	mov	r17,r2
   4dd8c:	183f6326 	beq	r3,zero,4db1c <__alt_data_end+0xfffd319c>
   4dd90:	00bfe034 	movhi	r2,65408
   4dd94:	10bfffc4 	addi	r2,r2,-1
   4dd98:	2021883a 	mov	r16,r4
   4dd9c:	288a703a 	and	r5,r5,r2
   4dda0:	003eb206 	br	4d86c <__alt_data_end+0xfffd2eec>
   4dda4:	2c44b03a 	or	r2,r5,r17
   4dda8:	8000251e 	bne	r16,zero,4de40 <__adddf3+0x650>
   4ddac:	10004b1e 	bne	r2,zero,4dedc <__adddf3+0x6ec>
   4ddb0:	4184b03a 	or	r2,r8,r6
   4ddb4:	103fe226 	beq	r2,zero,4dd40 <__alt_data_end+0xfffd33c0>
   4ddb8:	400b883a 	mov	r5,r8
   4ddbc:	3023883a 	mov	r17,r6
   4ddc0:	3825883a 	mov	r18,r7
   4ddc4:	003ea906 	br	4d86c <__alt_data_end+0xfffd2eec>
   4ddc8:	20bff804 	addi	r2,r4,-32
   4ddcc:	01c00804 	movi	r7,32
   4ddd0:	4084d83a 	srl	r2,r8,r2
   4ddd4:	21c07e26 	beq	r4,r7,4dfd0 <__adddf3+0x7e0>
   4ddd8:	01c01004 	movi	r7,64
   4dddc:	3909c83a 	sub	r4,r7,r4
   4dde0:	4110983a 	sll	r8,r8,r4
   4dde4:	418cb03a 	or	r6,r8,r6
   4dde8:	300cc03a 	cmpne	r6,r6,zero
   4ddec:	308cb03a 	or	r6,r6,r2
   4ddf0:	0011883a 	mov	r8,zero
   4ddf4:	003f1b06 	br	4da64 <__alt_data_end+0xfffd30e4>
   4ddf8:	0101ffc4 	movi	r4,2047
   4ddfc:	113fa41e 	bne	r2,r4,4dc90 <__alt_data_end+0xfffd3310>
   4de00:	400b883a 	mov	r5,r8
   4de04:	3023883a 	mov	r17,r6
   4de08:	1021883a 	mov	r16,r2
   4de0c:	3825883a 	mov	r18,r7
   4de10:	003e9606 	br	4d86c <__alt_data_end+0xfffd2eec>
   4de14:	80001a1e 	bne	r16,zero,4de80 <__adddf3+0x690>
   4de18:	2c4eb03a 	or	r7,r5,r17
   4de1c:	38005526 	beq	r7,zero,4df74 <__adddf3+0x784>
   4de20:	0108303a 	nor	r4,zero,r4
   4de24:	2000511e 	bne	r4,zero,4df6c <__adddf3+0x77c>
   4de28:	89a3883a 	add	r17,r17,r6
   4de2c:	414b883a 	add	r5,r8,r5
   4de30:	898d803a 	cmpltu	r6,r17,r6
   4de34:	298b883a 	add	r5,r5,r6
   4de38:	1021883a 	mov	r16,r2
   4de3c:	003f0e06 	br	4da78 <__alt_data_end+0xfffd30f8>
   4de40:	1000341e 	bne	r2,zero,4df14 <__adddf3+0x724>
   4de44:	4184b03a 	or	r2,r8,r6
   4de48:	10006f26 	beq	r2,zero,4e008 <__adddf3+0x818>
   4de4c:	400b883a 	mov	r5,r8
   4de50:	3023883a 	mov	r17,r6
   4de54:	3825883a 	mov	r18,r7
   4de58:	0401ffc4 	movi	r16,2047
   4de5c:	003e8306 	br	4d86c <__alt_data_end+0xfffd2eec>
   4de60:	2c62b03a 	or	r17,r5,r17
   4de64:	8822c03a 	cmpne	r17,r17,zero
   4de68:	0007883a 	mov	r3,zero
   4de6c:	003f9506 	br	4dcc4 <__alt_data_end+0xfffd3344>
   4de70:	1021883a 	mov	r16,r2
   4de74:	000b883a 	mov	r5,zero
   4de78:	0023883a 	mov	r17,zero
   4de7c:	003edb06 	br	4d9ec <__alt_data_end+0xfffd306c>
   4de80:	01c1ffc4 	movi	r7,2047
   4de84:	11c03b26 	beq	r2,r7,4df74 <__adddf3+0x784>
   4de88:	0109c83a 	sub	r4,zero,r4
   4de8c:	29402034 	orhi	r5,r5,128
   4de90:	01c00e04 	movi	r7,56
   4de94:	39006216 	blt	r7,r4,4e020 <__adddf3+0x830>
   4de98:	01c007c4 	movi	r7,31
   4de9c:	39006b16 	blt	r7,r4,4e04c <__adddf3+0x85c>
   4dea0:	01c00804 	movi	r7,32
   4dea4:	390fc83a 	sub	r7,r7,r4
   4dea8:	29d4983a 	sll	r10,r5,r7
   4deac:	8912d83a 	srl	r9,r17,r4
   4deb0:	89ce983a 	sll	r7,r17,r7
   4deb4:	2908d83a 	srl	r4,r5,r4
   4deb8:	5262b03a 	or	r17,r10,r9
   4debc:	380ac03a 	cmpne	r5,r7,zero
   4dec0:	8962b03a 	or	r17,r17,r5
   4dec4:	89a3883a 	add	r17,r17,r6
   4dec8:	2211883a 	add	r8,r4,r8
   4decc:	898d803a 	cmpltu	r6,r17,r6
   4ded0:	418b883a 	add	r5,r8,r6
   4ded4:	1021883a 	mov	r16,r2
   4ded8:	003ee706 	br	4da78 <__alt_data_end+0xfffd30f8>
   4dedc:	4184b03a 	or	r2,r8,r6
   4dee0:	103e6226 	beq	r2,zero,4d86c <__alt_data_end+0xfffd2eec>
   4dee4:	8987c83a 	sub	r3,r17,r6
   4dee8:	88c9803a 	cmpltu	r4,r17,r3
   4deec:	2a05c83a 	sub	r2,r5,r8
   4def0:	1105c83a 	sub	r2,r2,r4
   4def4:	1100202c 	andhi	r4,r2,128
   4def8:	203f0426 	beq	r4,zero,4db0c <__alt_data_end+0xfffd318c>
   4defc:	3463c83a 	sub	r17,r6,r17
   4df00:	414bc83a 	sub	r5,r8,r5
   4df04:	344d803a 	cmpltu	r6,r6,r17
   4df08:	298bc83a 	sub	r5,r5,r6
   4df0c:	3825883a 	mov	r18,r7
   4df10:	003e5606 	br	4d86c <__alt_data_end+0xfffd2eec>
   4df14:	4184b03a 	or	r2,r8,r6
   4df18:	10002b26 	beq	r2,zero,4dfc8 <__adddf3+0x7d8>
   4df1c:	2804d0fa 	srli	r2,r5,3
   4df20:	8822d0fa 	srli	r17,r17,3
   4df24:	280a977a 	slli	r5,r5,29
   4df28:	10c0022c 	andhi	r3,r2,8
   4df2c:	2c62b03a 	or	r17,r5,r17
   4df30:	18000826 	beq	r3,zero,4df54 <__adddf3+0x764>
   4df34:	4008d0fa 	srli	r4,r8,3
   4df38:	20c0022c 	andhi	r3,r4,8
   4df3c:	1800051e 	bne	r3,zero,4df54 <__adddf3+0x764>
   4df40:	300cd0fa 	srli	r6,r6,3
   4df44:	4010977a 	slli	r8,r8,29
   4df48:	2005883a 	mov	r2,r4
   4df4c:	3825883a 	mov	r18,r7
   4df50:	41a2b03a 	or	r17,r8,r6
   4df54:	880ad77a 	srli	r5,r17,29
   4df58:	100490fa 	slli	r2,r2,3
   4df5c:	882290fa 	slli	r17,r17,3
   4df60:	0401ffc4 	movi	r16,2047
   4df64:	288ab03a 	or	r5,r5,r2
   4df68:	003e4006 	br	4d86c <__alt_data_end+0xfffd2eec>
   4df6c:	01c1ffc4 	movi	r7,2047
   4df70:	11ffc71e 	bne	r2,r7,4de90 <__alt_data_end+0xfffd3510>
   4df74:	400b883a 	mov	r5,r8
   4df78:	3023883a 	mov	r17,r6
   4df7c:	1021883a 	mov	r16,r2
   4df80:	003e3a06 	br	4d86c <__alt_data_end+0xfffd2eec>
   4df84:	10002d26 	beq	r2,zero,4e03c <__adddf3+0x84c>
   4df88:	4184b03a 	or	r2,r8,r6
   4df8c:	10000e26 	beq	r2,zero,4dfc8 <__adddf3+0x7d8>
   4df90:	2804d0fa 	srli	r2,r5,3
   4df94:	8822d0fa 	srli	r17,r17,3
   4df98:	280a977a 	slli	r5,r5,29
   4df9c:	10c0022c 	andhi	r3,r2,8
   4dfa0:	2c62b03a 	or	r17,r5,r17
   4dfa4:	183feb26 	beq	r3,zero,4df54 <__alt_data_end+0xfffd35d4>
   4dfa8:	4008d0fa 	srli	r4,r8,3
   4dfac:	20c0022c 	andhi	r3,r4,8
   4dfb0:	183fe81e 	bne	r3,zero,4df54 <__alt_data_end+0xfffd35d4>
   4dfb4:	300cd0fa 	srli	r6,r6,3
   4dfb8:	4010977a 	slli	r8,r8,29
   4dfbc:	2005883a 	mov	r2,r4
   4dfc0:	41a2b03a 	or	r17,r8,r6
   4dfc4:	003fe306 	br	4df54 <__alt_data_end+0xfffd35d4>
   4dfc8:	0401ffc4 	movi	r16,2047
   4dfcc:	003e2706 	br	4d86c <__alt_data_end+0xfffd2eec>
   4dfd0:	0011883a 	mov	r8,zero
   4dfd4:	003f8306 	br	4dde4 <__alt_data_end+0xfffd3464>
   4dfd8:	193ff804 	addi	r4,r3,-32
   4dfdc:	02400804 	movi	r9,32
   4dfe0:	2908d83a 	srl	r4,r5,r4
   4dfe4:	1a402526 	beq	r3,r9,4e07c <__adddf3+0x88c>
   4dfe8:	02401004 	movi	r9,64
   4dfec:	48c7c83a 	sub	r3,r9,r3
   4dff0:	28ca983a 	sll	r5,r5,r3
   4dff4:	2c62b03a 	or	r17,r5,r17
   4dff8:	8822c03a 	cmpne	r17,r17,zero
   4dffc:	8922b03a 	or	r17,r17,r4
   4e000:	0007883a 	mov	r3,zero
   4e004:	003f2f06 	br	4dcc4 <__alt_data_end+0xfffd3344>
   4e008:	01402034 	movhi	r5,128
   4e00c:	0007883a 	mov	r3,zero
   4e010:	297fffc4 	addi	r5,r5,-1
   4e014:	047ffe04 	movi	r17,-8
   4e018:	0401ffc4 	movi	r16,2047
   4e01c:	003e7306 	br	4d9ec <__alt_data_end+0xfffd306c>
   4e020:	2c62b03a 	or	r17,r5,r17
   4e024:	8822c03a 	cmpne	r17,r17,zero
   4e028:	0009883a 	mov	r4,zero
   4e02c:	003fa506 	br	4dec4 <__alt_data_end+0xfffd3544>
   4e030:	400b883a 	mov	r5,r8
   4e034:	3023883a 	mov	r17,r6
   4e038:	003e0c06 	br	4d86c <__alt_data_end+0xfffd2eec>
   4e03c:	400b883a 	mov	r5,r8
   4e040:	3023883a 	mov	r17,r6
   4e044:	0401ffc4 	movi	r16,2047
   4e048:	003e0806 	br	4d86c <__alt_data_end+0xfffd2eec>
   4e04c:	21fff804 	addi	r7,r4,-32
   4e050:	02400804 	movi	r9,32
   4e054:	29ced83a 	srl	r7,r5,r7
   4e058:	22400a26 	beq	r4,r9,4e084 <__adddf3+0x894>
   4e05c:	02401004 	movi	r9,64
   4e060:	4909c83a 	sub	r4,r9,r4
   4e064:	290a983a 	sll	r5,r5,r4
   4e068:	2c62b03a 	or	r17,r5,r17
   4e06c:	8822c03a 	cmpne	r17,r17,zero
   4e070:	89e2b03a 	or	r17,r17,r7
   4e074:	0009883a 	mov	r4,zero
   4e078:	003f9206 	br	4dec4 <__alt_data_end+0xfffd3544>
   4e07c:	000b883a 	mov	r5,zero
   4e080:	003fdc06 	br	4dff4 <__alt_data_end+0xfffd3674>
   4e084:	000b883a 	mov	r5,zero
   4e088:	003ff706 	br	4e068 <__alt_data_end+0xfffd36e8>

0004e08c <__divdf3>:
   4e08c:	defff204 	addi	sp,sp,-56
   4e090:	dd000815 	stw	r20,32(sp)
   4e094:	2828d53a 	srli	r20,r5,20
   4e098:	dd800a15 	stw	r22,40(sp)
   4e09c:	282cd7fa 	srli	r22,r5,31
   4e0a0:	dc000415 	stw	r16,16(sp)
   4e0a4:	04000434 	movhi	r16,16
   4e0a8:	df000c15 	stw	fp,48(sp)
   4e0ac:	dcc00715 	stw	r19,28(sp)
   4e0b0:	dc800615 	stw	r18,24(sp)
   4e0b4:	dc400515 	stw	r17,20(sp)
   4e0b8:	843fffc4 	addi	r16,r16,-1
   4e0bc:	dfc00d15 	stw	ra,52(sp)
   4e0c0:	ddc00b15 	stw	r23,44(sp)
   4e0c4:	dd400915 	stw	r21,36(sp)
   4e0c8:	a501ffcc 	andi	r20,r20,2047
   4e0cc:	2025883a 	mov	r18,r4
   4e0d0:	2027883a 	mov	r19,r4
   4e0d4:	2c22703a 	and	r17,r5,r16
   4e0d8:	b7003fcc 	andi	fp,r22,255
   4e0dc:	a0005e26 	beq	r20,zero,4e258 <__divdf3+0x1cc>
   4e0e0:	0081ffc4 	movi	r2,2047
   4e0e4:	a0803526 	beq	r20,r2,4e1bc <__divdf3+0x130>
   4e0e8:	8c000434 	orhi	r16,r17,16
   4e0ec:	2004d77a 	srli	r2,r4,29
   4e0f0:	802090fa 	slli	r16,r16,3
   4e0f4:	202690fa 	slli	r19,r4,3
   4e0f8:	a53f0044 	addi	r20,r20,-1023
   4e0fc:	80a2b03a 	or	r17,r16,r2
   4e100:	0025883a 	mov	r18,zero
   4e104:	0011883a 	mov	r8,zero
   4e108:	380ad53a 	srli	r5,r7,20
   4e10c:	382ed7fa 	srli	r23,r7,31
   4e110:	04000434 	movhi	r16,16
   4e114:	843fffc4 	addi	r16,r16,-1
   4e118:	2941ffcc 	andi	r5,r5,2047
   4e11c:	302b883a 	mov	r21,r6
   4e120:	3c20703a 	and	r16,r7,r16
   4e124:	ba403fcc 	andi	r9,r23,255
   4e128:	28006726 	beq	r5,zero,4e2c8 <__divdf3+0x23c>
   4e12c:	0081ffc4 	movi	r2,2047
   4e130:	28805f26 	beq	r5,r2,4e2b0 <__divdf3+0x224>
   4e134:	84000434 	orhi	r16,r16,16
   4e138:	3004d77a 	srli	r2,r6,29
   4e13c:	802090fa 	slli	r16,r16,3
   4e140:	302a90fa 	slli	r21,r6,3
   4e144:	297f0044 	addi	r5,r5,-1023
   4e148:	80a0b03a 	or	r16,r16,r2
   4e14c:	000f883a 	mov	r7,zero
   4e150:	3c86b03a 	or	r3,r7,r18
   4e154:	180690ba 	slli	r3,r3,2
   4e158:	00800174 	movhi	r2,5
   4e15c:	10b85f04 	addi	r2,r2,-7812
   4e160:	1887883a 	add	r3,r3,r2
   4e164:	18c00017 	ldw	r3,0(r3)
   4e168:	b5c8f03a 	xor	r4,r22,r23
   4e16c:	200d883a 	mov	r6,r4
   4e170:	24803fcc 	andi	r18,r4,255
   4e174:	a169c83a 	sub	r20,r20,r5
   4e178:	1800683a 	jmp	r3
   4e17c:	0004e3c4 	movi	zero,5007
   4e180:	0004e1f4 	movhi	zero,4999
   4e184:	0004e388 	cmpgei	zero,zero,5006
   4e188:	0004e1d8 	cmpnei	zero,zero,4999
   4e18c:	0004e388 	cmpgei	zero,zero,5006
   4e190:	0004e35c 	xori	zero,zero,5005
   4e194:	0004e388 	cmpgei	zero,zero,5006
   4e198:	0004e1d8 	cmpnei	zero,zero,4999
   4e19c:	0004e1f4 	movhi	zero,4999
   4e1a0:	0004e1f4 	movhi	zero,4999
   4e1a4:	0004e35c 	xori	zero,zero,5005
   4e1a8:	0004e1d8 	cmpnei	zero,zero,4999
   4e1ac:	0004e1e8 	cmpgeui	zero,zero,4999
   4e1b0:	0004e1e8 	cmpgeui	zero,zero,4999
   4e1b4:	0004e1e8 	cmpgeui	zero,zero,4999
   4e1b8:	0004e398 	cmpnei	zero,zero,5006
   4e1bc:	8904b03a 	or	r2,r17,r4
   4e1c0:	1000631e 	bne	r2,zero,4e350 <__divdf3+0x2c4>
   4e1c4:	04800204 	movi	r18,8
   4e1c8:	0023883a 	mov	r17,zero
   4e1cc:	0027883a 	mov	r19,zero
   4e1d0:	02000084 	movi	r8,2
   4e1d4:	003fcc06 	br	4e108 <__alt_data_end+0xfffd3788>
   4e1d8:	8023883a 	mov	r17,r16
   4e1dc:	a827883a 	mov	r19,r21
   4e1e0:	4839883a 	mov	fp,r9
   4e1e4:	3811883a 	mov	r8,r7
   4e1e8:	00800084 	movi	r2,2
   4e1ec:	40812a1e 	bne	r8,r2,4e698 <__divdf3+0x60c>
   4e1f0:	e025883a 	mov	r18,fp
   4e1f4:	9180004c 	andi	r6,r18,1
   4e1f8:	0101ffc4 	movi	r4,2047
   4e1fc:	000b883a 	mov	r5,zero
   4e200:	0027883a 	mov	r19,zero
   4e204:	2008953a 	slli	r4,r4,20
   4e208:	30c03fcc 	andi	r3,r6,255
   4e20c:	04000434 	movhi	r16,16
   4e210:	180697fa 	slli	r3,r3,31
   4e214:	843fffc4 	addi	r16,r16,-1
   4e218:	2c20703a 	and	r16,r5,r16
   4e21c:	8120b03a 	or	r16,r16,r4
   4e220:	80c6b03a 	or	r3,r16,r3
   4e224:	9805883a 	mov	r2,r19
   4e228:	dfc00d17 	ldw	ra,52(sp)
   4e22c:	df000c17 	ldw	fp,48(sp)
   4e230:	ddc00b17 	ldw	r23,44(sp)
   4e234:	dd800a17 	ldw	r22,40(sp)
   4e238:	dd400917 	ldw	r21,36(sp)
   4e23c:	dd000817 	ldw	r20,32(sp)
   4e240:	dcc00717 	ldw	r19,28(sp)
   4e244:	dc800617 	ldw	r18,24(sp)
   4e248:	dc400517 	ldw	r17,20(sp)
   4e24c:	dc000417 	ldw	r16,16(sp)
   4e250:	dec00e04 	addi	sp,sp,56
   4e254:	f800283a 	ret
   4e258:	8904b03a 	or	r2,r17,r4
   4e25c:	10003726 	beq	r2,zero,4e33c <__divdf3+0x2b0>
   4e260:	88011c26 	beq	r17,zero,4e6d4 <__divdf3+0x648>
   4e264:	8809883a 	mov	r4,r17
   4e268:	d9800315 	stw	r6,12(sp)
   4e26c:	d9c00115 	stw	r7,4(sp)
   4e270:	004fd8c0 	call	4fd8c <__clzsi2>
   4e274:	d9800317 	ldw	r6,12(sp)
   4e278:	d9c00117 	ldw	r7,4(sp)
   4e27c:	1007883a 	mov	r3,r2
   4e280:	01000a04 	movi	r4,40
   4e284:	1cfffe04 	addi	r19,r3,-8
   4e288:	20c9c83a 	sub	r4,r4,r3
   4e28c:	8cca983a 	sll	r5,r17,r19
   4e290:	9108d83a 	srl	r4,r18,r4
   4e294:	94e6983a 	sll	r19,r18,r19
   4e298:	2162b03a 	or	r17,r4,r5
   4e29c:	053f0344 	movi	r20,-1011
   4e2a0:	a0e9c83a 	sub	r20,r20,r3
   4e2a4:	0025883a 	mov	r18,zero
   4e2a8:	0011883a 	mov	r8,zero
   4e2ac:	003f9606 	br	4e108 <__alt_data_end+0xfffd3788>
   4e2b0:	8184b03a 	or	r2,r16,r6
   4e2b4:	10001f1e 	bne	r2,zero,4e334 <__divdf3+0x2a8>
   4e2b8:	0021883a 	mov	r16,zero
   4e2bc:	002b883a 	mov	r21,zero
   4e2c0:	01c00084 	movi	r7,2
   4e2c4:	003fa206 	br	4e150 <__alt_data_end+0xfffd37d0>
   4e2c8:	8184b03a 	or	r2,r16,r6
   4e2cc:	10001526 	beq	r2,zero,4e324 <__divdf3+0x298>
   4e2d0:	80010c26 	beq	r16,zero,4e704 <__divdf3+0x678>
   4e2d4:	8009883a 	mov	r4,r16
   4e2d8:	d9800315 	stw	r6,12(sp)
   4e2dc:	da000215 	stw	r8,8(sp)
   4e2e0:	da400015 	stw	r9,0(sp)
   4e2e4:	004fd8c0 	call	4fd8c <__clzsi2>
   4e2e8:	d9800317 	ldw	r6,12(sp)
   4e2ec:	da000217 	ldw	r8,8(sp)
   4e2f0:	da400017 	ldw	r9,0(sp)
   4e2f4:	1007883a 	mov	r3,r2
   4e2f8:	01000a04 	movi	r4,40
   4e2fc:	1d7ffe04 	addi	r21,r3,-8
   4e300:	20c9c83a 	sub	r4,r4,r3
   4e304:	8560983a 	sll	r16,r16,r21
   4e308:	3108d83a 	srl	r4,r6,r4
   4e30c:	356a983a 	sll	r21,r6,r21
   4e310:	2420b03a 	or	r16,r4,r16
   4e314:	017f0344 	movi	r5,-1011
   4e318:	28cbc83a 	sub	r5,r5,r3
   4e31c:	000f883a 	mov	r7,zero
   4e320:	003f8b06 	br	4e150 <__alt_data_end+0xfffd37d0>
   4e324:	0021883a 	mov	r16,zero
   4e328:	002b883a 	mov	r21,zero
   4e32c:	01c00044 	movi	r7,1
   4e330:	003f8706 	br	4e150 <__alt_data_end+0xfffd37d0>
   4e334:	01c000c4 	movi	r7,3
   4e338:	003f8506 	br	4e150 <__alt_data_end+0xfffd37d0>
   4e33c:	04800104 	movi	r18,4
   4e340:	0023883a 	mov	r17,zero
   4e344:	0027883a 	mov	r19,zero
   4e348:	02000044 	movi	r8,1
   4e34c:	003f6e06 	br	4e108 <__alt_data_end+0xfffd3788>
   4e350:	04800304 	movi	r18,12
   4e354:	020000c4 	movi	r8,3
   4e358:	003f6b06 	br	4e108 <__alt_data_end+0xfffd3788>
   4e35c:	01400434 	movhi	r5,16
   4e360:	000d883a 	mov	r6,zero
   4e364:	297fffc4 	addi	r5,r5,-1
   4e368:	04ffffc4 	movi	r19,-1
   4e36c:	0101ffc4 	movi	r4,2047
   4e370:	003fa406 	br	4e204 <__alt_data_end+0xfffd3884>
   4e374:	043f0084 	movi	r16,-1022
   4e378:	8521c83a 	sub	r16,r16,r20
   4e37c:	00800e04 	movi	r2,56
   4e380:	1401200e 	bge	r2,r16,4e804 <__divdf3+0x778>
   4e384:	9180004c 	andi	r6,r18,1
   4e388:	0009883a 	mov	r4,zero
   4e38c:	000b883a 	mov	r5,zero
   4e390:	0027883a 	mov	r19,zero
   4e394:	003f9b06 	br	4e204 <__alt_data_end+0xfffd3884>
   4e398:	8880022c 	andhi	r2,r17,8
   4e39c:	1000c726 	beq	r2,zero,4e6bc <__divdf3+0x630>
   4e3a0:	8080022c 	andhi	r2,r16,8
   4e3a4:	1000c51e 	bne	r2,zero,4e6bc <__divdf3+0x630>
   4e3a8:	00800434 	movhi	r2,16
   4e3ac:	81400234 	orhi	r5,r16,8
   4e3b0:	10bfffc4 	addi	r2,r2,-1
   4e3b4:	b80d883a 	mov	r6,r23
   4e3b8:	288a703a 	and	r5,r5,r2
   4e3bc:	a827883a 	mov	r19,r21
   4e3c0:	003fea06 	br	4e36c <__alt_data_end+0xfffd39ec>
   4e3c4:	8440ea36 	bltu	r16,r17,4e770 <__divdf3+0x6e4>
   4e3c8:	8c00e826 	beq	r17,r16,4e76c <__divdf3+0x6e0>
   4e3cc:	a53fffc4 	addi	r20,r20,-1
   4e3d0:	882d883a 	mov	r22,r17
   4e3d4:	000d883a 	mov	r6,zero
   4e3d8:	a804d63a 	srli	r2,r21,24
   4e3dc:	8020923a 	slli	r16,r16,8
   4e3e0:	b009883a 	mov	r4,r22
   4e3e4:	d9800315 	stw	r6,12(sp)
   4e3e8:	1420b03a 	or	r16,r2,r16
   4e3ec:	802ed43a 	srli	r23,r16,16
   4e3f0:	873fffcc 	andi	fp,r16,65535
   4e3f4:	a82a923a 	slli	r21,r21,8
   4e3f8:	b80b883a 	mov	r5,r23
   4e3fc:	004d7e00 	call	4d7e0 <__udivsi3>
   4e400:	b009883a 	mov	r4,r22
   4e404:	b80b883a 	mov	r5,r23
   4e408:	1023883a 	mov	r17,r2
   4e40c:	004d7e80 	call	4d7e8 <__umodsi3>
   4e410:	1004943a 	slli	r2,r2,16
   4e414:	9808d43a 	srli	r4,r19,16
   4e418:	8f2d383a 	mul	r22,r17,fp
   4e41c:	d9800317 	ldw	r6,12(sp)
   4e420:	1106b03a 	or	r3,r2,r4
   4e424:	1d80062e 	bgeu	r3,r22,4e440 <__divdf3+0x3b4>
   4e428:	1c07883a 	add	r3,r3,r16
   4e42c:	88bfffc4 	addi	r2,r17,-1
   4e430:	1c00dc36 	bltu	r3,r16,4e7a4 <__divdf3+0x718>
   4e434:	1d80db2e 	bgeu	r3,r22,4e7a4 <__divdf3+0x718>
   4e438:	8c7fff84 	addi	r17,r17,-2
   4e43c:	1c07883a 	add	r3,r3,r16
   4e440:	1dadc83a 	sub	r22,r3,r22
   4e444:	b009883a 	mov	r4,r22
   4e448:	b80b883a 	mov	r5,r23
   4e44c:	d9800315 	stw	r6,12(sp)
   4e450:	004d7e00 	call	4d7e0 <__udivsi3>
   4e454:	b009883a 	mov	r4,r22
   4e458:	b80b883a 	mov	r5,r23
   4e45c:	d8800015 	stw	r2,0(sp)
   4e460:	004d7e80 	call	4d7e8 <__umodsi3>
   4e464:	da400017 	ldw	r9,0(sp)
   4e468:	1004943a 	slli	r2,r2,16
   4e46c:	9cffffcc 	andi	r19,r19,65535
   4e470:	4f07383a 	mul	r3,r9,fp
   4e474:	14c8b03a 	or	r4,r2,r19
   4e478:	d9800317 	ldw	r6,12(sp)
   4e47c:	20c0062e 	bgeu	r4,r3,4e498 <__divdf3+0x40c>
   4e480:	2409883a 	add	r4,r4,r16
   4e484:	48bfffc4 	addi	r2,r9,-1
   4e488:	2400c436 	bltu	r4,r16,4e79c <__divdf3+0x710>
   4e48c:	20c0c32e 	bgeu	r4,r3,4e79c <__divdf3+0x710>
   4e490:	4a7fff84 	addi	r9,r9,-2
   4e494:	2409883a 	add	r4,r4,r16
   4e498:	8822943a 	slli	r17,r17,16
   4e49c:	a80ed43a 	srli	r7,r21,16
   4e4a0:	aa3fffcc 	andi	r8,r21,65535
   4e4a4:	4c62b03a 	or	r17,r9,r17
   4e4a8:	8816d43a 	srli	r11,r17,16
   4e4ac:	897fffcc 	andi	r5,r17,65535
   4e4b0:	2a15383a 	mul	r10,r5,r8
   4e4b4:	5a19383a 	mul	r12,r11,r8
   4e4b8:	29cb383a 	mul	r5,r5,r7
   4e4bc:	5012d43a 	srli	r9,r10,16
   4e4c0:	20c5c83a 	sub	r2,r4,r3
   4e4c4:	614b883a 	add	r5,r12,r5
   4e4c8:	2a4b883a 	add	r5,r5,r9
   4e4cc:	59c7383a 	mul	r3,r11,r7
   4e4d0:	2b00022e 	bgeu	r5,r12,4e4dc <__divdf3+0x450>
   4e4d4:	01000074 	movhi	r4,1
   4e4d8:	1907883a 	add	r3,r3,r4
   4e4dc:	2808d43a 	srli	r4,r5,16
   4e4e0:	280a943a 	slli	r5,r5,16
   4e4e4:	54ffffcc 	andi	r19,r10,65535
   4e4e8:	1907883a 	add	r3,r3,r4
   4e4ec:	2ccb883a 	add	r5,r5,r19
   4e4f0:	10c09336 	bltu	r2,r3,4e740 <__divdf3+0x6b4>
   4e4f4:	10c0ad26 	beq	r2,r3,4e7ac <__divdf3+0x720>
   4e4f8:	10c7c83a 	sub	r3,r2,r3
   4e4fc:	3167c83a 	sub	r19,r6,r5
   4e500:	34ed803a 	cmpltu	r22,r6,r19
   4e504:	1dadc83a 	sub	r22,r3,r22
   4e508:	b400b226 	beq	r22,r16,4e7d4 <__divdf3+0x748>
   4e50c:	b009883a 	mov	r4,r22
   4e510:	b80b883a 	mov	r5,r23
   4e514:	d9c00115 	stw	r7,4(sp)
   4e518:	da000215 	stw	r8,8(sp)
   4e51c:	004d7e00 	call	4d7e0 <__udivsi3>
   4e520:	b009883a 	mov	r4,r22
   4e524:	b80b883a 	mov	r5,r23
   4e528:	d8800315 	stw	r2,12(sp)
   4e52c:	004d7e80 	call	4d7e8 <__umodsi3>
   4e530:	d9800317 	ldw	r6,12(sp)
   4e534:	1004943a 	slli	r2,r2,16
   4e538:	9808d43a 	srli	r4,r19,16
   4e53c:	372d383a 	mul	r22,r6,fp
   4e540:	d9c00117 	ldw	r7,4(sp)
   4e544:	1106b03a 	or	r3,r2,r4
   4e548:	da000217 	ldw	r8,8(sp)
   4e54c:	1d80062e 	bgeu	r3,r22,4e568 <__divdf3+0x4dc>
   4e550:	1c07883a 	add	r3,r3,r16
   4e554:	30bfffc4 	addi	r2,r6,-1
   4e558:	1c00a036 	bltu	r3,r16,4e7dc <__divdf3+0x750>
   4e55c:	1d809f2e 	bgeu	r3,r22,4e7dc <__divdf3+0x750>
   4e560:	31bfff84 	addi	r6,r6,-2
   4e564:	1c07883a 	add	r3,r3,r16
   4e568:	1dadc83a 	sub	r22,r3,r22
   4e56c:	b009883a 	mov	r4,r22
   4e570:	b80b883a 	mov	r5,r23
   4e574:	d9800315 	stw	r6,12(sp)
   4e578:	d9c00115 	stw	r7,4(sp)
   4e57c:	da000215 	stw	r8,8(sp)
   4e580:	004d7e00 	call	4d7e0 <__udivsi3>
   4e584:	b009883a 	mov	r4,r22
   4e588:	b80b883a 	mov	r5,r23
   4e58c:	d8800015 	stw	r2,0(sp)
   4e590:	004d7e80 	call	4d7e8 <__umodsi3>
   4e594:	da400017 	ldw	r9,0(sp)
   4e598:	1004943a 	slli	r2,r2,16
   4e59c:	993fffcc 	andi	r4,r19,65535
   4e5a0:	4f39383a 	mul	fp,r9,fp
   4e5a4:	1106b03a 	or	r3,r2,r4
   4e5a8:	d9800317 	ldw	r6,12(sp)
   4e5ac:	d9c00117 	ldw	r7,4(sp)
   4e5b0:	da000217 	ldw	r8,8(sp)
   4e5b4:	1f00062e 	bgeu	r3,fp,4e5d0 <__divdf3+0x544>
   4e5b8:	1c07883a 	add	r3,r3,r16
   4e5bc:	48bfffc4 	addi	r2,r9,-1
   4e5c0:	1c008836 	bltu	r3,r16,4e7e4 <__divdf3+0x758>
   4e5c4:	1f00872e 	bgeu	r3,fp,4e7e4 <__divdf3+0x758>
   4e5c8:	4a7fff84 	addi	r9,r9,-2
   4e5cc:	1c07883a 	add	r3,r3,r16
   4e5d0:	3008943a 	slli	r4,r6,16
   4e5d4:	1f07c83a 	sub	r3,r3,fp
   4e5d8:	4926b03a 	or	r19,r9,r4
   4e5dc:	993fffcc 	andi	r4,r19,65535
   4e5e0:	980cd43a 	srli	r6,r19,16
   4e5e4:	220b383a 	mul	r5,r4,r8
   4e5e8:	21c5383a 	mul	r2,r4,r7
   4e5ec:	3211383a 	mul	r8,r6,r8
   4e5f0:	2808d43a 	srli	r4,r5,16
   4e5f4:	31cf383a 	mul	r7,r6,r7
   4e5f8:	4085883a 	add	r2,r8,r2
   4e5fc:	1105883a 	add	r2,r2,r4
   4e600:	1200022e 	bgeu	r2,r8,4e60c <__divdf3+0x580>
   4e604:	01000074 	movhi	r4,1
   4e608:	390f883a 	add	r7,r7,r4
   4e60c:	1008d43a 	srli	r4,r2,16
   4e610:	1004943a 	slli	r2,r2,16
   4e614:	297fffcc 	andi	r5,r5,65535
   4e618:	390f883a 	add	r7,r7,r4
   4e61c:	1145883a 	add	r2,r2,r5
   4e620:	19c06536 	bltu	r3,r7,4e7b8 <__divdf3+0x72c>
   4e624:	19c09f26 	beq	r3,r7,4e8a4 <__divdf3+0x818>
   4e628:	9cc00054 	ori	r19,r19,1
   4e62c:	a100ffc4 	addi	r4,r20,1023
   4e630:	013f500e 	bge	zero,r4,4e374 <__alt_data_end+0xfffd39f4>
   4e634:	988001cc 	andi	r2,r19,7
   4e638:	10000726 	beq	r2,zero,4e658 <__divdf3+0x5cc>
   4e63c:	98c003cc 	andi	r3,r19,15
   4e640:	00800104 	movi	r2,4
   4e644:	18800426 	beq	r3,r2,4e658 <__divdf3+0x5cc>
   4e648:	9885883a 	add	r2,r19,r2
   4e64c:	14e1803a 	cmpltu	r16,r2,r19
   4e650:	8c23883a 	add	r17,r17,r16
   4e654:	1027883a 	mov	r19,r2
   4e658:	8880402c 	andhi	r2,r17,256
   4e65c:	10000426 	beq	r2,zero,4e670 <__divdf3+0x5e4>
   4e660:	00bfc034 	movhi	r2,65280
   4e664:	10bfffc4 	addi	r2,r2,-1
   4e668:	a1010004 	addi	r4,r20,1024
   4e66c:	88a2703a 	and	r17,r17,r2
   4e670:	0081ff84 	movi	r2,2046
   4e674:	113edf16 	blt	r2,r4,4e1f4 <__alt_data_end+0xfffd3874>
   4e678:	9826d0fa 	srli	r19,r19,3
   4e67c:	8804977a 	slli	r2,r17,29
   4e680:	8820927a 	slli	r16,r17,9
   4e684:	2101ffcc 	andi	r4,r4,2047
   4e688:	14e6b03a 	or	r19,r2,r19
   4e68c:	800ad33a 	srli	r5,r16,12
   4e690:	9180004c 	andi	r6,r18,1
   4e694:	003edb06 	br	4e204 <__alt_data_end+0xfffd3884>
   4e698:	008000c4 	movi	r2,3
   4e69c:	4080a826 	beq	r8,r2,4e940 <__divdf3+0x8b4>
   4e6a0:	00800044 	movi	r2,1
   4e6a4:	4080551e 	bne	r8,r2,4e7fc <__divdf3+0x770>
   4e6a8:	e00d883a 	mov	r6,fp
   4e6ac:	0009883a 	mov	r4,zero
   4e6b0:	000b883a 	mov	r5,zero
   4e6b4:	0027883a 	mov	r19,zero
   4e6b8:	003ed206 	br	4e204 <__alt_data_end+0xfffd3884>
   4e6bc:	00800434 	movhi	r2,16
   4e6c0:	89400234 	orhi	r5,r17,8
   4e6c4:	10bfffc4 	addi	r2,r2,-1
   4e6c8:	b00d883a 	mov	r6,r22
   4e6cc:	288a703a 	and	r5,r5,r2
   4e6d0:	003f2606 	br	4e36c <__alt_data_end+0xfffd39ec>
   4e6d4:	d9800315 	stw	r6,12(sp)
   4e6d8:	d9c00115 	stw	r7,4(sp)
   4e6dc:	004fd8c0 	call	4fd8c <__clzsi2>
   4e6e0:	10c00804 	addi	r3,r2,32
   4e6e4:	010009c4 	movi	r4,39
   4e6e8:	d9800317 	ldw	r6,12(sp)
   4e6ec:	d9c00117 	ldw	r7,4(sp)
   4e6f0:	20fee30e 	bge	r4,r3,4e280 <__alt_data_end+0xfffd3900>
   4e6f4:	117ffe04 	addi	r5,r2,-8
   4e6f8:	9162983a 	sll	r17,r18,r5
   4e6fc:	0027883a 	mov	r19,zero
   4e700:	003ee606 	br	4e29c <__alt_data_end+0xfffd391c>
   4e704:	3009883a 	mov	r4,r6
   4e708:	d9800315 	stw	r6,12(sp)
   4e70c:	da000215 	stw	r8,8(sp)
   4e710:	da400015 	stw	r9,0(sp)
   4e714:	004fd8c0 	call	4fd8c <__clzsi2>
   4e718:	10c00804 	addi	r3,r2,32
   4e71c:	010009c4 	movi	r4,39
   4e720:	d9800317 	ldw	r6,12(sp)
   4e724:	da000217 	ldw	r8,8(sp)
   4e728:	da400017 	ldw	r9,0(sp)
   4e72c:	20fef20e 	bge	r4,r3,4e2f8 <__alt_data_end+0xfffd3978>
   4e730:	10bffe04 	addi	r2,r2,-8
   4e734:	a8a0983a 	sll	r16,r21,r2
   4e738:	002b883a 	mov	r21,zero
   4e73c:	003ef506 	br	4e314 <__alt_data_end+0xfffd3994>
   4e740:	354d883a 	add	r6,r6,r21
   4e744:	3549803a 	cmpltu	r4,r6,r21
   4e748:	2409883a 	add	r4,r4,r16
   4e74c:	2089883a 	add	r4,r4,r2
   4e750:	88bfffc4 	addi	r2,r17,-1
   4e754:	81000c2e 	bgeu	r16,r4,4e788 <__divdf3+0x6fc>
   4e758:	20c04436 	bltu	r4,r3,4e86c <__divdf3+0x7e0>
   4e75c:	19006f26 	beq	r3,r4,4e91c <__divdf3+0x890>
   4e760:	20c7c83a 	sub	r3,r4,r3
   4e764:	1023883a 	mov	r17,r2
   4e768:	003f6406 	br	4e4fc <__alt_data_end+0xfffd3b7c>
   4e76c:	9d7f1736 	bltu	r19,r21,4e3cc <__alt_data_end+0xfffd3a4c>
   4e770:	9806d07a 	srli	r3,r19,1
   4e774:	880497fa 	slli	r2,r17,31
   4e778:	980c97fa 	slli	r6,r19,31
   4e77c:	882cd07a 	srli	r22,r17,1
   4e780:	18a6b03a 	or	r19,r3,r2
   4e784:	003f1406 	br	4e3d8 <__alt_data_end+0xfffd3a58>
   4e788:	243ff51e 	bne	r4,r16,4e760 <__alt_data_end+0xfffd3de0>
   4e78c:	357ff22e 	bgeu	r6,r21,4e758 <__alt_data_end+0xfffd3dd8>
   4e790:	80c7c83a 	sub	r3,r16,r3
   4e794:	1023883a 	mov	r17,r2
   4e798:	003f5806 	br	4e4fc <__alt_data_end+0xfffd3b7c>
   4e79c:	1013883a 	mov	r9,r2
   4e7a0:	003f3d06 	br	4e498 <__alt_data_end+0xfffd3b18>
   4e7a4:	1023883a 	mov	r17,r2
   4e7a8:	003f2506 	br	4e440 <__alt_data_end+0xfffd3ac0>
   4e7ac:	317fe436 	bltu	r6,r5,4e740 <__alt_data_end+0xfffd3dc0>
   4e7b0:	0007883a 	mov	r3,zero
   4e7b4:	003f5106 	br	4e4fc <__alt_data_end+0xfffd3b7c>
   4e7b8:	1c07883a 	add	r3,r3,r16
   4e7bc:	993fffc4 	addi	r4,r19,-1
   4e7c0:	1c000a2e 	bgeu	r3,r16,4e7ec <__divdf3+0x760>
   4e7c4:	2027883a 	mov	r19,r4
   4e7c8:	19ff971e 	bne	r3,r7,4e628 <__alt_data_end+0xfffd3ca8>
   4e7cc:	a8bf961e 	bne	r21,r2,4e628 <__alt_data_end+0xfffd3ca8>
   4e7d0:	003f9606 	br	4e62c <__alt_data_end+0xfffd3cac>
   4e7d4:	04ffffc4 	movi	r19,-1
   4e7d8:	003f9406 	br	4e62c <__alt_data_end+0xfffd3cac>
   4e7dc:	100d883a 	mov	r6,r2
   4e7e0:	003f6106 	br	4e568 <__alt_data_end+0xfffd3be8>
   4e7e4:	1013883a 	mov	r9,r2
   4e7e8:	003f7906 	br	4e5d0 <__alt_data_end+0xfffd3c50>
   4e7ec:	19c02636 	bltu	r3,r7,4e888 <__divdf3+0x7fc>
   4e7f0:	38c04d26 	beq	r7,r3,4e928 <__divdf3+0x89c>
   4e7f4:	2027883a 	mov	r19,r4
   4e7f8:	003f8b06 	br	4e628 <__alt_data_end+0xfffd3ca8>
   4e7fc:	e025883a 	mov	r18,fp
   4e800:	003f8a06 	br	4e62c <__alt_data_end+0xfffd3cac>
   4e804:	008007c4 	movi	r2,31
   4e808:	14002a16 	blt	r2,r16,4e8b4 <__divdf3+0x828>
   4e80c:	a5010784 	addi	r20,r20,1054
   4e810:	8d04983a 	sll	r2,r17,r20
   4e814:	9c06d83a 	srl	r3,r19,r16
   4e818:	9d28983a 	sll	r20,r19,r20
   4e81c:	8c20d83a 	srl	r16,r17,r16
   4e820:	1886b03a 	or	r3,r3,r2
   4e824:	a004c03a 	cmpne	r2,r20,zero
   4e828:	1884b03a 	or	r2,r3,r2
   4e82c:	10c001cc 	andi	r3,r2,7
   4e830:	18000726 	beq	r3,zero,4e850 <__divdf3+0x7c4>
   4e834:	110003cc 	andi	r4,r2,15
   4e838:	00c00104 	movi	r3,4
   4e83c:	20c00426 	beq	r4,r3,4e850 <__divdf3+0x7c4>
   4e840:	10c00104 	addi	r3,r2,4
   4e844:	1885803a 	cmpltu	r2,r3,r2
   4e848:	80a1883a 	add	r16,r16,r2
   4e84c:	1805883a 	mov	r2,r3
   4e850:	80c0202c 	andhi	r3,r16,128
   4e854:	18002d26 	beq	r3,zero,4e90c <__divdf3+0x880>
   4e858:	9180004c 	andi	r6,r18,1
   4e85c:	01000044 	movi	r4,1
   4e860:	000b883a 	mov	r5,zero
   4e864:	0027883a 	mov	r19,zero
   4e868:	003e6606 	br	4e204 <__alt_data_end+0xfffd3884>
   4e86c:	354d883a 	add	r6,r6,r21
   4e870:	356d803a 	cmpltu	r22,r6,r21
   4e874:	b42d883a 	add	r22,r22,r16
   4e878:	b12d883a 	add	r22,r22,r4
   4e87c:	8c7fff84 	addi	r17,r17,-2
   4e880:	b0c7c83a 	sub	r3,r22,r3
   4e884:	003f1d06 	br	4e4fc <__alt_data_end+0xfffd3b7c>
   4e888:	ad4b883a 	add	r5,r21,r21
   4e88c:	2d6b803a 	cmpltu	r21,r5,r21
   4e890:	ac2b883a 	add	r21,r21,r16
   4e894:	1d47883a 	add	r3,r3,r21
   4e898:	993fff84 	addi	r4,r19,-2
   4e89c:	282b883a 	mov	r21,r5
   4e8a0:	003fc806 	br	4e7c4 <__alt_data_end+0xfffd3e44>
   4e8a4:	103fc41e 	bne	r2,zero,4e7b8 <__alt_data_end+0xfffd3e38>
   4e8a8:	002b883a 	mov	r21,zero
   4e8ac:	a8bf5e1e 	bne	r21,r2,4e628 <__alt_data_end+0xfffd3ca8>
   4e8b0:	003f5e06 	br	4e62c <__alt_data_end+0xfffd3cac>
   4e8b4:	00bef884 	movi	r2,-1054
   4e8b8:	1505c83a 	sub	r2,r2,r20
   4e8bc:	00c00804 	movi	r3,32
   4e8c0:	8884d83a 	srl	r2,r17,r2
   4e8c4:	80c01c26 	beq	r16,r3,4e938 <__divdf3+0x8ac>
   4e8c8:	a0c10f84 	addi	r3,r20,1086
   4e8cc:	88c6983a 	sll	r3,r17,r3
   4e8d0:	1cc6b03a 	or	r3,r3,r19
   4e8d4:	1806c03a 	cmpne	r3,r3,zero
   4e8d8:	1884b03a 	or	r2,r3,r2
   4e8dc:	140001cc 	andi	r16,r2,7
   4e8e0:	8000061e 	bne	r16,zero,4e8fc <__divdf3+0x870>
   4e8e4:	000b883a 	mov	r5,zero
   4e8e8:	1004d0fa 	srli	r2,r2,3
   4e8ec:	9180004c 	andi	r6,r18,1
   4e8f0:	0009883a 	mov	r4,zero
   4e8f4:	1426b03a 	or	r19,r2,r16
   4e8f8:	003e4206 	br	4e204 <__alt_data_end+0xfffd3884>
   4e8fc:	110003cc 	andi	r4,r2,15
   4e900:	00c00104 	movi	r3,4
   4e904:	0021883a 	mov	r16,zero
   4e908:	20ffcd1e 	bne	r4,r3,4e840 <__alt_data_end+0xfffd3ec0>
   4e90c:	800a927a 	slli	r5,r16,9
   4e910:	8020977a 	slli	r16,r16,29
   4e914:	280ad33a 	srli	r5,r5,12
   4e918:	003ff306 	br	4e8e8 <__alt_data_end+0xfffd3f68>
   4e91c:	317fd336 	bltu	r6,r5,4e86c <__alt_data_end+0xfffd3eec>
   4e920:	1023883a 	mov	r17,r2
   4e924:	003fa206 	br	4e7b0 <__alt_data_end+0xfffd3e30>
   4e928:	a8bfd736 	bltu	r21,r2,4e888 <__alt_data_end+0xfffd3f08>
   4e92c:	2027883a 	mov	r19,r4
   4e930:	a8bf3d1e 	bne	r21,r2,4e628 <__alt_data_end+0xfffd3ca8>
   4e934:	003f3d06 	br	4e62c <__alt_data_end+0xfffd3cac>
   4e938:	0007883a 	mov	r3,zero
   4e93c:	003fe406 	br	4e8d0 <__alt_data_end+0xfffd3f50>
   4e940:	00800434 	movhi	r2,16
   4e944:	89400234 	orhi	r5,r17,8
   4e948:	10bfffc4 	addi	r2,r2,-1
   4e94c:	e00d883a 	mov	r6,fp
   4e950:	288a703a 	and	r5,r5,r2
   4e954:	003e8506 	br	4e36c <__alt_data_end+0xfffd39ec>

0004e958 <__eqdf2>:
   4e958:	2804d53a 	srli	r2,r5,20
   4e95c:	3806d53a 	srli	r3,r7,20
   4e960:	02000434 	movhi	r8,16
   4e964:	423fffc4 	addi	r8,r8,-1
   4e968:	1081ffcc 	andi	r2,r2,2047
   4e96c:	0241ffc4 	movi	r9,2047
   4e970:	2a14703a 	and	r10,r5,r8
   4e974:	18c1ffcc 	andi	r3,r3,2047
   4e978:	3a10703a 	and	r8,r7,r8
   4e97c:	280ad7fa 	srli	r5,r5,31
   4e980:	380ed7fa 	srli	r7,r7,31
   4e984:	12400f26 	beq	r2,r9,4e9c4 <__eqdf2+0x6c>
   4e988:	0241ffc4 	movi	r9,2047
   4e98c:	1a400326 	beq	r3,r9,4e99c <__eqdf2+0x44>
   4e990:	10c00526 	beq	r2,r3,4e9a8 <__eqdf2+0x50>
   4e994:	00800044 	movi	r2,1
   4e998:	f800283a 	ret
   4e99c:	4192b03a 	or	r9,r8,r6
   4e9a0:	483ffc1e 	bne	r9,zero,4e994 <__alt_data_end+0xfffd4014>
   4e9a4:	10fffb1e 	bne	r2,r3,4e994 <__alt_data_end+0xfffd4014>
   4e9a8:	523ffa1e 	bne	r10,r8,4e994 <__alt_data_end+0xfffd4014>
   4e9ac:	21bff91e 	bne	r4,r6,4e994 <__alt_data_end+0xfffd4014>
   4e9b0:	29c00826 	beq	r5,r7,4e9d4 <__eqdf2+0x7c>
   4e9b4:	103ff71e 	bne	r2,zero,4e994 <__alt_data_end+0xfffd4014>
   4e9b8:	5104b03a 	or	r2,r10,r4
   4e9bc:	1004c03a 	cmpne	r2,r2,zero
   4e9c0:	f800283a 	ret
   4e9c4:	5112b03a 	or	r9,r10,r4
   4e9c8:	483fef26 	beq	r9,zero,4e988 <__alt_data_end+0xfffd4008>
   4e9cc:	00800044 	movi	r2,1
   4e9d0:	f800283a 	ret
   4e9d4:	0005883a 	mov	r2,zero
   4e9d8:	f800283a 	ret

0004e9dc <__gedf2>:
   4e9dc:	2804d53a 	srli	r2,r5,20
   4e9e0:	3806d53a 	srli	r3,r7,20
   4e9e4:	02000434 	movhi	r8,16
   4e9e8:	423fffc4 	addi	r8,r8,-1
   4e9ec:	0241ffc4 	movi	r9,2047
   4e9f0:	1081ffcc 	andi	r2,r2,2047
   4e9f4:	2a14703a 	and	r10,r5,r8
   4e9f8:	1a46703a 	and	r3,r3,r9
   4e9fc:	3a10703a 	and	r8,r7,r8
   4ea00:	280ad7fa 	srli	r5,r5,31
   4ea04:	380ed7fa 	srli	r7,r7,31
   4ea08:	12400b26 	beq	r2,r9,4ea38 <__gedf2+0x5c>
   4ea0c:	1a401626 	beq	r3,r9,4ea68 <__gedf2+0x8c>
   4ea10:	10000c1e 	bne	r2,zero,4ea44 <__gedf2+0x68>
   4ea14:	5112b03a 	or	r9,r10,r4
   4ea18:	4813003a 	cmpeq	r9,r9,zero
   4ea1c:	4817883a 	mov	r11,r9
   4ea20:	18000c1e 	bne	r3,zero,4ea54 <__gedf2+0x78>
   4ea24:	4198b03a 	or	r12,r8,r6
   4ea28:	60000a1e 	bne	r12,zero,4ea54 <__gedf2+0x78>
   4ea2c:	48001326 	beq	r9,zero,4ea7c <__gedf2+0xa0>
   4ea30:	0005883a 	mov	r2,zero
   4ea34:	f800283a 	ret
   4ea38:	5112b03a 	or	r9,r10,r4
   4ea3c:	4800191e 	bne	r9,zero,4eaa4 <__gedf2+0xc8>
   4ea40:	18800926 	beq	r3,r2,4ea68 <__gedf2+0x8c>
   4ea44:	18000b1e 	bne	r3,zero,4ea74 <__gedf2+0x98>
   4ea48:	4192b03a 	or	r9,r8,r6
   4ea4c:	0017883a 	mov	r11,zero
   4ea50:	48000a26 	beq	r9,zero,4ea7c <__gedf2+0xa0>
   4ea54:	39c03fcc 	andi	r7,r7,255
   4ea58:	58000726 	beq	r11,zero,4ea78 <__gedf2+0x9c>
   4ea5c:	3800081e 	bne	r7,zero,4ea80 <__gedf2+0xa4>
   4ea60:	00bfffc4 	movi	r2,-1
   4ea64:	f800283a 	ret
   4ea68:	4192b03a 	or	r9,r8,r6
   4ea6c:	48000d1e 	bne	r9,zero,4eaa4 <__gedf2+0xc8>
   4ea70:	103fe826 	beq	r2,zero,4ea14 <__alt_data_end+0xfffd4094>
   4ea74:	39c03fcc 	andi	r7,r7,255
   4ea78:	29c00326 	beq	r5,r7,4ea88 <__gedf2+0xac>
   4ea7c:	283ff81e 	bne	r5,zero,4ea60 <__alt_data_end+0xfffd40e0>
   4ea80:	00800044 	movi	r2,1
   4ea84:	f800283a 	ret
   4ea88:	18bffc16 	blt	r3,r2,4ea7c <__alt_data_end+0xfffd40fc>
   4ea8c:	10c00316 	blt	r2,r3,4ea9c <__gedf2+0xc0>
   4ea90:	42bffa36 	bltu	r8,r10,4ea7c <__alt_data_end+0xfffd40fc>
   4ea94:	52000526 	beq	r10,r8,4eaac <__gedf2+0xd0>
   4ea98:	523fe52e 	bgeu	r10,r8,4ea30 <__alt_data_end+0xfffd40b0>
   4ea9c:	283ff026 	beq	r5,zero,4ea60 <__alt_data_end+0xfffd40e0>
   4eaa0:	003ff706 	br	4ea80 <__alt_data_end+0xfffd4100>
   4eaa4:	00bfff84 	movi	r2,-2
   4eaa8:	f800283a 	ret
   4eaac:	313ff336 	bltu	r6,r4,4ea7c <__alt_data_end+0xfffd40fc>
   4eab0:	21bfdf2e 	bgeu	r4,r6,4ea30 <__alt_data_end+0xfffd40b0>
   4eab4:	283fea26 	beq	r5,zero,4ea60 <__alt_data_end+0xfffd40e0>
   4eab8:	003ff106 	br	4ea80 <__alt_data_end+0xfffd4100>

0004eabc <__ledf2>:
   4eabc:	2804d53a 	srli	r2,r5,20
   4eac0:	3810d53a 	srli	r8,r7,20
   4eac4:	00c00434 	movhi	r3,16
   4eac8:	18ffffc4 	addi	r3,r3,-1
   4eacc:	0241ffc4 	movi	r9,2047
   4ead0:	1081ffcc 	andi	r2,r2,2047
   4ead4:	28d4703a 	and	r10,r5,r3
   4ead8:	4250703a 	and	r8,r8,r9
   4eadc:	38c6703a 	and	r3,r7,r3
   4eae0:	280ad7fa 	srli	r5,r5,31
   4eae4:	380ed7fa 	srli	r7,r7,31
   4eae8:	12400b26 	beq	r2,r9,4eb18 <__ledf2+0x5c>
   4eaec:	42401926 	beq	r8,r9,4eb54 <__ledf2+0x98>
   4eaf0:	10000c1e 	bne	r2,zero,4eb24 <__ledf2+0x68>
   4eaf4:	5112b03a 	or	r9,r10,r4
   4eaf8:	4813003a 	cmpeq	r9,r9,zero
   4eafc:	4817883a 	mov	r11,r9
   4eb00:	40000f26 	beq	r8,zero,4eb40 <__ledf2+0x84>
   4eb04:	39c03fcc 	andi	r7,r7,255
   4eb08:	58001826 	beq	r11,zero,4eb6c <__ledf2+0xb0>
   4eb0c:	38000a1e 	bne	r7,zero,4eb38 <__ledf2+0x7c>
   4eb10:	00bfffc4 	movi	r2,-1
   4eb14:	f800283a 	ret
   4eb18:	5112b03a 	or	r9,r10,r4
   4eb1c:	48000f1e 	bne	r9,zero,4eb5c <__ledf2+0xa0>
   4eb20:	40800c26 	beq	r8,r2,4eb54 <__ledf2+0x98>
   4eb24:	4000101e 	bne	r8,zero,4eb68 <__ledf2+0xac>
   4eb28:	1992b03a 	or	r9,r3,r6
   4eb2c:	0017883a 	mov	r11,zero
   4eb30:	483ff41e 	bne	r9,zero,4eb04 <__alt_data_end+0xfffd4184>
   4eb34:	283ff61e 	bne	r5,zero,4eb10 <__alt_data_end+0xfffd4190>
   4eb38:	00800044 	movi	r2,1
   4eb3c:	f800283a 	ret
   4eb40:	1998b03a 	or	r12,r3,r6
   4eb44:	603fef1e 	bne	r12,zero,4eb04 <__alt_data_end+0xfffd4184>
   4eb48:	483ffa26 	beq	r9,zero,4eb34 <__alt_data_end+0xfffd41b4>
   4eb4c:	0005883a 	mov	r2,zero
   4eb50:	f800283a 	ret
   4eb54:	1992b03a 	or	r9,r3,r6
   4eb58:	48000226 	beq	r9,zero,4eb64 <__ledf2+0xa8>
   4eb5c:	00800084 	movi	r2,2
   4eb60:	f800283a 	ret
   4eb64:	103fe326 	beq	r2,zero,4eaf4 <__alt_data_end+0xfffd4174>
   4eb68:	39c03fcc 	andi	r7,r7,255
   4eb6c:	29fff11e 	bne	r5,r7,4eb34 <__alt_data_end+0xfffd41b4>
   4eb70:	40bff016 	blt	r8,r2,4eb34 <__alt_data_end+0xfffd41b4>
   4eb74:	12000316 	blt	r2,r8,4eb84 <__ledf2+0xc8>
   4eb78:	1abfee36 	bltu	r3,r10,4eb34 <__alt_data_end+0xfffd41b4>
   4eb7c:	50c00326 	beq	r10,r3,4eb8c <__ledf2+0xd0>
   4eb80:	50fff22e 	bgeu	r10,r3,4eb4c <__alt_data_end+0xfffd41cc>
   4eb84:	283fe226 	beq	r5,zero,4eb10 <__alt_data_end+0xfffd4190>
   4eb88:	003feb06 	br	4eb38 <__alt_data_end+0xfffd41b8>
   4eb8c:	313fe936 	bltu	r6,r4,4eb34 <__alt_data_end+0xfffd41b4>
   4eb90:	21bfee2e 	bgeu	r4,r6,4eb4c <__alt_data_end+0xfffd41cc>
   4eb94:	283fde26 	beq	r5,zero,4eb10 <__alt_data_end+0xfffd4190>
   4eb98:	003fe706 	br	4eb38 <__alt_data_end+0xfffd41b8>

0004eb9c <__muldf3>:
   4eb9c:	defff204 	addi	sp,sp,-56
   4eba0:	2804d53a 	srli	r2,r5,20
   4eba4:	dd800a15 	stw	r22,40(sp)
   4eba8:	282cd7fa 	srli	r22,r5,31
   4ebac:	dc000415 	stw	r16,16(sp)
   4ebb0:	04000434 	movhi	r16,16
   4ebb4:	df000c15 	stw	fp,48(sp)
   4ebb8:	dd000815 	stw	r20,32(sp)
   4ebbc:	dcc00715 	stw	r19,28(sp)
   4ebc0:	dc800615 	stw	r18,24(sp)
   4ebc4:	dc400515 	stw	r17,20(sp)
   4ebc8:	843fffc4 	addi	r16,r16,-1
   4ebcc:	dfc00d15 	stw	ra,52(sp)
   4ebd0:	ddc00b15 	stw	r23,44(sp)
   4ebd4:	dd400915 	stw	r21,36(sp)
   4ebd8:	1501ffcc 	andi	r20,r2,2047
   4ebdc:	2023883a 	mov	r17,r4
   4ebe0:	2025883a 	mov	r18,r4
   4ebe4:	2c20703a 	and	r16,r5,r16
   4ebe8:	b027883a 	mov	r19,r22
   4ebec:	b7003fcc 	andi	fp,r22,255
   4ebf0:	a0005926 	beq	r20,zero,4ed58 <__muldf3+0x1bc>
   4ebf4:	0081ffc4 	movi	r2,2047
   4ebf8:	a0803426 	beq	r20,r2,4eccc <__muldf3+0x130>
   4ebfc:	84000434 	orhi	r16,r16,16
   4ec00:	2004d77a 	srli	r2,r4,29
   4ec04:	802090fa 	slli	r16,r16,3
   4ec08:	202490fa 	slli	r18,r4,3
   4ec0c:	a53f0044 	addi	r20,r20,-1023
   4ec10:	80a0b03a 	or	r16,r16,r2
   4ec14:	002b883a 	mov	r21,zero
   4ec18:	0015883a 	mov	r10,zero
   4ec1c:	3812d53a 	srli	r9,r7,20
   4ec20:	3806d7fa 	srli	r3,r7,31
   4ec24:	02000434 	movhi	r8,16
   4ec28:	423fffc4 	addi	r8,r8,-1
   4ec2c:	4941ffcc 	andi	r5,r9,2047
   4ec30:	302f883a 	mov	r23,r6
   4ec34:	3a22703a 	and	r17,r7,r8
   4ec38:	1ac03fcc 	andi	r11,r3,255
   4ec3c:	28006226 	beq	r5,zero,4edc8 <__muldf3+0x22c>
   4ec40:	0081ffc4 	movi	r2,2047
   4ec44:	28805a26 	beq	r5,r2,4edb0 <__muldf3+0x214>
   4ec48:	8a000434 	orhi	r8,r17,16
   4ec4c:	3004d77a 	srli	r2,r6,29
   4ec50:	401090fa 	slli	r8,r8,3
   4ec54:	302e90fa 	slli	r23,r6,3
   4ec58:	297f0044 	addi	r5,r5,-1023
   4ec5c:	40a2b03a 	or	r17,r8,r2
   4ec60:	0013883a 	mov	r9,zero
   4ec64:	4d4cb03a 	or	r6,r9,r21
   4ec68:	300c90ba 	slli	r6,r6,2
   4ec6c:	02000174 	movhi	r8,5
   4ec70:	423b2304 	addi	r8,r8,-4980
   4ec74:	320d883a 	add	r6,r6,r8
   4ec78:	31800017 	ldw	r6,0(r6)
   4ec7c:	a14b883a 	add	r5,r20,r5
   4ec80:	1dacf03a 	xor	r22,r3,r22
   4ec84:	2b000044 	addi	r12,r5,1
   4ec88:	3000683a 	jmp	r6
   4ec8c:	0004eec8 	cmpgei	zero,zero,5051
   4ec90:	0004eeb4 	movhi	zero,5050
   4ec94:	0004eeb4 	movhi	zero,5050
   4ec98:	0004eea0 	cmpeqi	zero,zero,5050
   4ec9c:	0004ece8 	cmpgeui	zero,zero,5043
   4eca0:	0004ece8 	cmpgeui	zero,zero,5043
   4eca4:	0004ee88 	cmpgei	zero,zero,5050
   4eca8:	0004eea0 	cmpeqi	zero,zero,5050
   4ecac:	0004ece8 	cmpgeui	zero,zero,5043
   4ecb0:	0004ee88 	cmpgei	zero,zero,5050
   4ecb4:	0004ece8 	cmpgeui	zero,zero,5043
   4ecb8:	0004eea0 	cmpeqi	zero,zero,5050
   4ecbc:	0004ecec 	andhi	zero,zero,5043
   4ecc0:	0004ecec 	andhi	zero,zero,5043
   4ecc4:	0004ecec 	andhi	zero,zero,5043
   4ecc8:	0004f0c4 	movi	zero,5059
   4eccc:	8104b03a 	or	r2,r16,r4
   4ecd0:	10006a1e 	bne	r2,zero,4ee7c <__muldf3+0x2e0>
   4ecd4:	05400204 	movi	r21,8
   4ecd8:	0021883a 	mov	r16,zero
   4ecdc:	0025883a 	mov	r18,zero
   4ece0:	02800084 	movi	r10,2
   4ece4:	003fcd06 	br	4ec1c <__alt_data_end+0xfffd429c>
   4ece8:	b039883a 	mov	fp,r22
   4ecec:	00800084 	movi	r2,2
   4ecf0:	50804e1e 	bne	r10,r2,4ee2c <__muldf3+0x290>
   4ecf4:	e4c0004c 	andi	r19,fp,1
   4ecf8:	0101ffc4 	movi	r4,2047
   4ecfc:	0021883a 	mov	r16,zero
   4ed00:	0025883a 	mov	r18,zero
   4ed04:	2008953a 	slli	r4,r4,20
   4ed08:	98c03fcc 	andi	r3,r19,255
   4ed0c:	01400434 	movhi	r5,16
   4ed10:	297fffc4 	addi	r5,r5,-1
   4ed14:	180697fa 	slli	r3,r3,31
   4ed18:	8160703a 	and	r16,r16,r5
   4ed1c:	8120b03a 	or	r16,r16,r4
   4ed20:	80c6b03a 	or	r3,r16,r3
   4ed24:	9005883a 	mov	r2,r18
   4ed28:	dfc00d17 	ldw	ra,52(sp)
   4ed2c:	df000c17 	ldw	fp,48(sp)
   4ed30:	ddc00b17 	ldw	r23,44(sp)
   4ed34:	dd800a17 	ldw	r22,40(sp)
   4ed38:	dd400917 	ldw	r21,36(sp)
   4ed3c:	dd000817 	ldw	r20,32(sp)
   4ed40:	dcc00717 	ldw	r19,28(sp)
   4ed44:	dc800617 	ldw	r18,24(sp)
   4ed48:	dc400517 	ldw	r17,20(sp)
   4ed4c:	dc000417 	ldw	r16,16(sp)
   4ed50:	dec00e04 	addi	sp,sp,56
   4ed54:	f800283a 	ret
   4ed58:	8104b03a 	or	r2,r16,r4
   4ed5c:	10004226 	beq	r2,zero,4ee68 <__muldf3+0x2cc>
   4ed60:	8000f926 	beq	r16,zero,4f148 <__muldf3+0x5ac>
   4ed64:	8009883a 	mov	r4,r16
   4ed68:	d9800315 	stw	r6,12(sp)
   4ed6c:	d9c00015 	stw	r7,0(sp)
   4ed70:	004fd8c0 	call	4fd8c <__clzsi2>
   4ed74:	d9800317 	ldw	r6,12(sp)
   4ed78:	d9c00017 	ldw	r7,0(sp)
   4ed7c:	1007883a 	mov	r3,r2
   4ed80:	01000a04 	movi	r4,40
   4ed84:	18bffe04 	addi	r2,r3,-8
   4ed88:	20c9c83a 	sub	r4,r4,r3
   4ed8c:	80a0983a 	sll	r16,r16,r2
   4ed90:	8908d83a 	srl	r4,r17,r4
   4ed94:	88a4983a 	sll	r18,r17,r2
   4ed98:	2420b03a 	or	r16,r4,r16
   4ed9c:	017f0344 	movi	r5,-1011
   4eda0:	28e9c83a 	sub	r20,r5,r3
   4eda4:	002b883a 	mov	r21,zero
   4eda8:	0015883a 	mov	r10,zero
   4edac:	003f9b06 	br	4ec1c <__alt_data_end+0xfffd429c>
   4edb0:	8984b03a 	or	r2,r17,r6
   4edb4:	10002a1e 	bne	r2,zero,4ee60 <__muldf3+0x2c4>
   4edb8:	0023883a 	mov	r17,zero
   4edbc:	002f883a 	mov	r23,zero
   4edc0:	02400084 	movi	r9,2
   4edc4:	003fa706 	br	4ec64 <__alt_data_end+0xfffd42e4>
   4edc8:	8984b03a 	or	r2,r17,r6
   4edcc:	10002026 	beq	r2,zero,4ee50 <__muldf3+0x2b4>
   4edd0:	8800cc26 	beq	r17,zero,4f104 <__muldf3+0x568>
   4edd4:	8809883a 	mov	r4,r17
   4edd8:	d8c00215 	stw	r3,8(sp)
   4eddc:	d9800315 	stw	r6,12(sp)
   4ede0:	da800015 	stw	r10,0(sp)
   4ede4:	dac00115 	stw	r11,4(sp)
   4ede8:	004fd8c0 	call	4fd8c <__clzsi2>
   4edec:	d8c00217 	ldw	r3,8(sp)
   4edf0:	d9800317 	ldw	r6,12(sp)
   4edf4:	da800017 	ldw	r10,0(sp)
   4edf8:	dac00117 	ldw	r11,4(sp)
   4edfc:	1009883a 	mov	r4,r2
   4ee00:	01400a04 	movi	r5,40
   4ee04:	25fffe04 	addi	r23,r4,-8
   4ee08:	290bc83a 	sub	r5,r5,r4
   4ee0c:	8dd0983a 	sll	r8,r17,r23
   4ee10:	314ad83a 	srl	r5,r6,r5
   4ee14:	35ee983a 	sll	r23,r6,r23
   4ee18:	2a22b03a 	or	r17,r5,r8
   4ee1c:	017f0344 	movi	r5,-1011
   4ee20:	290bc83a 	sub	r5,r5,r4
   4ee24:	0013883a 	mov	r9,zero
   4ee28:	003f8e06 	br	4ec64 <__alt_data_end+0xfffd42e4>
   4ee2c:	008000c4 	movi	r2,3
   4ee30:	50811d26 	beq	r10,r2,4f2a8 <__muldf3+0x70c>
   4ee34:	00800044 	movi	r2,1
   4ee38:	5080e01e 	bne	r10,r2,4f1bc <__muldf3+0x620>
   4ee3c:	e0a6703a 	and	r19,fp,r2
   4ee40:	0009883a 	mov	r4,zero
   4ee44:	0021883a 	mov	r16,zero
   4ee48:	0025883a 	mov	r18,zero
   4ee4c:	003fad06 	br	4ed04 <__alt_data_end+0xfffd4384>
   4ee50:	0023883a 	mov	r17,zero
   4ee54:	002f883a 	mov	r23,zero
   4ee58:	02400044 	movi	r9,1
   4ee5c:	003f8106 	br	4ec64 <__alt_data_end+0xfffd42e4>
   4ee60:	024000c4 	movi	r9,3
   4ee64:	003f7f06 	br	4ec64 <__alt_data_end+0xfffd42e4>
   4ee68:	05400104 	movi	r21,4
   4ee6c:	0021883a 	mov	r16,zero
   4ee70:	0025883a 	mov	r18,zero
   4ee74:	02800044 	movi	r10,1
   4ee78:	003f6806 	br	4ec1c <__alt_data_end+0xfffd429c>
   4ee7c:	05400304 	movi	r21,12
   4ee80:	028000c4 	movi	r10,3
   4ee84:	003f6506 	br	4ec1c <__alt_data_end+0xfffd429c>
   4ee88:	04000434 	movhi	r16,16
   4ee8c:	0027883a 	mov	r19,zero
   4ee90:	843fffc4 	addi	r16,r16,-1
   4ee94:	04bfffc4 	movi	r18,-1
   4ee98:	0101ffc4 	movi	r4,2047
   4ee9c:	003f9906 	br	4ed04 <__alt_data_end+0xfffd4384>
   4eea0:	8821883a 	mov	r16,r17
   4eea4:	b825883a 	mov	r18,r23
   4eea8:	5839883a 	mov	fp,r11
   4eeac:	4815883a 	mov	r10,r9
   4eeb0:	003f8e06 	br	4ecec <__alt_data_end+0xfffd436c>
   4eeb4:	8821883a 	mov	r16,r17
   4eeb8:	b825883a 	mov	r18,r23
   4eebc:	b039883a 	mov	fp,r22
   4eec0:	4815883a 	mov	r10,r9
   4eec4:	003f8906 	br	4ecec <__alt_data_end+0xfffd436c>
   4eec8:	b80cd43a 	srli	r6,r23,16
   4eecc:	9006d43a 	srli	r3,r18,16
   4eed0:	90bfffcc 	andi	r2,r18,65535
   4eed4:	bdffffcc 	andi	r23,r23,65535
   4eed8:	b891383a 	mul	r8,r23,r2
   4eedc:	b8c9383a 	mul	r4,r23,r3
   4eee0:	309b383a 	mul	r13,r6,r2
   4eee4:	400ed43a 	srli	r7,r8,16
   4eee8:	30df383a 	mul	r15,r6,r3
   4eeec:	235b883a 	add	r13,r4,r13
   4eef0:	69db883a 	add	r13,r13,r7
   4eef4:	6900022e 	bgeu	r13,r4,4ef00 <__muldf3+0x364>
   4eef8:	01000074 	movhi	r4,1
   4eefc:	791f883a 	add	r15,r15,r4
   4ef00:	8828d43a 	srli	r20,r17,16
   4ef04:	8c7fffcc 	andi	r17,r17,65535
   4ef08:	888f383a 	mul	r7,r17,r2
   4ef0c:	88d3383a 	mul	r9,r17,r3
   4ef10:	a0a5383a 	mul	r18,r20,r2
   4ef14:	3816d43a 	srli	r11,r7,16
   4ef18:	6814943a 	slli	r10,r13,16
   4ef1c:	4ca5883a 	add	r18,r9,r18
   4ef20:	423fffcc 	andi	r8,r8,65535
   4ef24:	92e5883a 	add	r18,r18,r11
   4ef28:	6808d43a 	srli	r4,r13,16
   4ef2c:	5215883a 	add	r10,r10,r8
   4ef30:	a0c7383a 	mul	r3,r20,r3
   4ef34:	9240022e 	bgeu	r18,r9,4ef40 <__muldf3+0x3a4>
   4ef38:	00800074 	movhi	r2,1
   4ef3c:	1887883a 	add	r3,r3,r2
   4ef40:	802ad43a 	srli	r21,r16,16
   4ef44:	80bfffcc 	andi	r2,r16,65535
   4ef48:	b893383a 	mul	r9,r23,r2
   4ef4c:	3091383a 	mul	r8,r6,r2
   4ef50:	bd6f383a 	mul	r23,r23,r21
   4ef54:	9026943a 	slli	r19,r18,16
   4ef58:	481ad43a 	srli	r13,r9,16
   4ef5c:	9024d43a 	srli	r18,r18,16
   4ef60:	39ffffcc 	andi	r7,r7,65535
   4ef64:	ba11883a 	add	r8,r23,r8
   4ef68:	99e7883a 	add	r19,r19,r7
   4ef6c:	4351883a 	add	r8,r8,r13
   4ef70:	1c97883a 	add	r11,r3,r18
   4ef74:	354d383a 	mul	r6,r6,r21
   4ef78:	9925883a 	add	r18,r19,r4
   4ef7c:	45c0022e 	bgeu	r8,r23,4ef88 <__muldf3+0x3ec>
   4ef80:	00c00074 	movhi	r3,1
   4ef84:	30cd883a 	add	r6,r6,r3
   4ef88:	8889383a 	mul	r4,r17,r2
   4ef8c:	8d63383a 	mul	r17,r17,r21
   4ef90:	a085383a 	mul	r2,r20,r2
   4ef94:	200ed43a 	srli	r7,r4,16
   4ef98:	401cd43a 	srli	r14,r8,16
   4ef9c:	401a943a 	slli	r13,r8,16
   4efa0:	8885883a 	add	r2,r17,r2
   4efa4:	4a3fffcc 	andi	r8,r9,65535
   4efa8:	11c5883a 	add	r2,r2,r7
   4efac:	339d883a 	add	r14,r6,r14
   4efb0:	6a11883a 	add	r8,r13,r8
   4efb4:	a561383a 	mul	r16,r20,r21
   4efb8:	1440022e 	bgeu	r2,r17,4efc4 <__muldf3+0x428>
   4efbc:	00c00074 	movhi	r3,1
   4efc0:	80e1883a 	add	r16,r16,r3
   4efc4:	1006943a 	slli	r3,r2,16
   4efc8:	213fffcc 	andi	r4,r4,65535
   4efcc:	93db883a 	add	r13,r18,r15
   4efd0:	1909883a 	add	r4,r3,r4
   4efd4:	22c7883a 	add	r3,r4,r11
   4efd8:	6cd3803a 	cmpltu	r9,r13,r19
   4efdc:	6a09883a 	add	r4,r13,r8
   4efe0:	1a5b883a 	add	r13,r3,r9
   4efe4:	2211803a 	cmpltu	r8,r4,r8
   4efe8:	734d883a 	add	r6,r14,r13
   4efec:	100ed43a 	srli	r7,r2,16
   4eff0:	6a53803a 	cmpltu	r9,r13,r9
   4eff4:	3205883a 	add	r2,r6,r8
   4eff8:	1ac7803a 	cmpltu	r3,r3,r11
   4effc:	1211803a 	cmpltu	r8,r2,r8
   4f000:	48c6b03a 	or	r3,r9,r3
   4f004:	338d803a 	cmpltu	r6,r6,r14
   4f008:	19c7883a 	add	r3,r3,r7
   4f00c:	418cb03a 	or	r6,r8,r6
   4f010:	1987883a 	add	r3,r3,r6
   4f014:	2024927a 	slli	r18,r4,9
   4f018:	1c07883a 	add	r3,r3,r16
   4f01c:	1806927a 	slli	r3,r3,9
   4f020:	1020d5fa 	srli	r16,r2,23
   4f024:	2008d5fa 	srli	r4,r4,23
   4f028:	9294b03a 	or	r10,r18,r10
   4f02c:	1004927a 	slli	r2,r2,9
   4f030:	5024c03a 	cmpne	r18,r10,zero
   4f034:	1c20b03a 	or	r16,r3,r16
   4f038:	9108b03a 	or	r4,r18,r4
   4f03c:	80c0402c 	andhi	r3,r16,256
   4f040:	20a4b03a 	or	r18,r4,r2
   4f044:	18000726 	beq	r3,zero,4f064 <__muldf3+0x4c8>
   4f048:	9006d07a 	srli	r3,r18,1
   4f04c:	800897fa 	slli	r4,r16,31
   4f050:	9080004c 	andi	r2,r18,1
   4f054:	8020d07a 	srli	r16,r16,1
   4f058:	10c4b03a 	or	r2,r2,r3
   4f05c:	1124b03a 	or	r18,r2,r4
   4f060:	600b883a 	mov	r5,r12
   4f064:	2900ffc4 	addi	r4,r5,1023
   4f068:	01004b0e 	bge	zero,r4,4f198 <__muldf3+0x5fc>
   4f06c:	908001cc 	andi	r2,r18,7
   4f070:	10000726 	beq	r2,zero,4f090 <__muldf3+0x4f4>
   4f074:	90c003cc 	andi	r3,r18,15
   4f078:	00800104 	movi	r2,4
   4f07c:	18800426 	beq	r3,r2,4f090 <__muldf3+0x4f4>
   4f080:	9087883a 	add	r3,r18,r2
   4f084:	1c85803a 	cmpltu	r2,r3,r18
   4f088:	80a1883a 	add	r16,r16,r2
   4f08c:	1825883a 	mov	r18,r3
   4f090:	8080402c 	andhi	r2,r16,256
   4f094:	10000426 	beq	r2,zero,4f0a8 <__muldf3+0x50c>
   4f098:	00bfc034 	movhi	r2,65280
   4f09c:	10bfffc4 	addi	r2,r2,-1
   4f0a0:	29010004 	addi	r4,r5,1024
   4f0a4:	80a0703a 	and	r16,r16,r2
   4f0a8:	0081ff84 	movi	r2,2046
   4f0ac:	1100320e 	bge	r2,r4,4f178 <__muldf3+0x5dc>
   4f0b0:	b4c0004c 	andi	r19,r22,1
   4f0b4:	0101ffc4 	movi	r4,2047
   4f0b8:	0021883a 	mov	r16,zero
   4f0bc:	0025883a 	mov	r18,zero
   4f0c0:	003f1006 	br	4ed04 <__alt_data_end+0xfffd4384>
   4f0c4:	8080022c 	andhi	r2,r16,8
   4f0c8:	10000926 	beq	r2,zero,4f0f0 <__muldf3+0x554>
   4f0cc:	8880022c 	andhi	r2,r17,8
   4f0d0:	1000071e 	bne	r2,zero,4f0f0 <__muldf3+0x554>
   4f0d4:	00800434 	movhi	r2,16
   4f0d8:	8c000234 	orhi	r16,r17,8
   4f0dc:	10bfffc4 	addi	r2,r2,-1
   4f0e0:	1827883a 	mov	r19,r3
   4f0e4:	80a0703a 	and	r16,r16,r2
   4f0e8:	b825883a 	mov	r18,r23
   4f0ec:	003f6a06 	br	4ee98 <__alt_data_end+0xfffd4518>
   4f0f0:	00800434 	movhi	r2,16
   4f0f4:	84000234 	orhi	r16,r16,8
   4f0f8:	10bfffc4 	addi	r2,r2,-1
   4f0fc:	80a0703a 	and	r16,r16,r2
   4f100:	003f6506 	br	4ee98 <__alt_data_end+0xfffd4518>
   4f104:	3009883a 	mov	r4,r6
   4f108:	d8c00215 	stw	r3,8(sp)
   4f10c:	d9800315 	stw	r6,12(sp)
   4f110:	da800015 	stw	r10,0(sp)
   4f114:	dac00115 	stw	r11,4(sp)
   4f118:	004fd8c0 	call	4fd8c <__clzsi2>
   4f11c:	11000804 	addi	r4,r2,32
   4f120:	014009c4 	movi	r5,39
   4f124:	d8c00217 	ldw	r3,8(sp)
   4f128:	d9800317 	ldw	r6,12(sp)
   4f12c:	da800017 	ldw	r10,0(sp)
   4f130:	dac00117 	ldw	r11,4(sp)
   4f134:	293f320e 	bge	r5,r4,4ee00 <__alt_data_end+0xfffd4480>
   4f138:	10bffe04 	addi	r2,r2,-8
   4f13c:	b8a2983a 	sll	r17,r23,r2
   4f140:	002f883a 	mov	r23,zero
   4f144:	003f3506 	br	4ee1c <__alt_data_end+0xfffd449c>
   4f148:	d9800315 	stw	r6,12(sp)
   4f14c:	d9c00015 	stw	r7,0(sp)
   4f150:	004fd8c0 	call	4fd8c <__clzsi2>
   4f154:	10c00804 	addi	r3,r2,32
   4f158:	010009c4 	movi	r4,39
   4f15c:	d9800317 	ldw	r6,12(sp)
   4f160:	d9c00017 	ldw	r7,0(sp)
   4f164:	20ff060e 	bge	r4,r3,4ed80 <__alt_data_end+0xfffd4400>
   4f168:	10bffe04 	addi	r2,r2,-8
   4f16c:	88a0983a 	sll	r16,r17,r2
   4f170:	0025883a 	mov	r18,zero
   4f174:	003f0906 	br	4ed9c <__alt_data_end+0xfffd441c>
   4f178:	9004d0fa 	srli	r2,r18,3
   4f17c:	8024977a 	slli	r18,r16,29
   4f180:	8020927a 	slli	r16,r16,9
   4f184:	2101ffcc 	andi	r4,r4,2047
   4f188:	90a4b03a 	or	r18,r18,r2
   4f18c:	8020d33a 	srli	r16,r16,12
   4f190:	b4c0004c 	andi	r19,r22,1
   4f194:	003edb06 	br	4ed04 <__alt_data_end+0xfffd4384>
   4f198:	00ff0084 	movi	r3,-1022
   4f19c:	1947c83a 	sub	r3,r3,r5
   4f1a0:	00800e04 	movi	r2,56
   4f1a4:	10c0080e 	bge	r2,r3,4f1c8 <__muldf3+0x62c>
   4f1a8:	b4c0004c 	andi	r19,r22,1
   4f1ac:	0009883a 	mov	r4,zero
   4f1b0:	0021883a 	mov	r16,zero
   4f1b4:	0025883a 	mov	r18,zero
   4f1b8:	003ed206 	br	4ed04 <__alt_data_end+0xfffd4384>
   4f1bc:	600b883a 	mov	r5,r12
   4f1c0:	e02d883a 	mov	r22,fp
   4f1c4:	003fa706 	br	4f064 <__alt_data_end+0xfffd46e4>
   4f1c8:	008007c4 	movi	r2,31
   4f1cc:	10c01816 	blt	r2,r3,4f230 <__muldf3+0x694>
   4f1d0:	29410784 	addi	r5,r5,1054
   4f1d4:	8144983a 	sll	r2,r16,r5
   4f1d8:	90c8d83a 	srl	r4,r18,r3
   4f1dc:	914a983a 	sll	r5,r18,r5
   4f1e0:	80c6d83a 	srl	r3,r16,r3
   4f1e4:	2088b03a 	or	r4,r4,r2
   4f1e8:	2804c03a 	cmpne	r2,r5,zero
   4f1ec:	2084b03a 	or	r2,r4,r2
   4f1f0:	110001cc 	andi	r4,r2,7
   4f1f4:	20000726 	beq	r4,zero,4f214 <__muldf3+0x678>
   4f1f8:	114003cc 	andi	r5,r2,15
   4f1fc:	01000104 	movi	r4,4
   4f200:	29000426 	beq	r5,r4,4f214 <__muldf3+0x678>
   4f204:	11000104 	addi	r4,r2,4
   4f208:	2085803a 	cmpltu	r2,r4,r2
   4f20c:	1887883a 	add	r3,r3,r2
   4f210:	2005883a 	mov	r2,r4
   4f214:	1900202c 	andhi	r4,r3,128
   4f218:	20001826 	beq	r4,zero,4f27c <__muldf3+0x6e0>
   4f21c:	b4c0004c 	andi	r19,r22,1
   4f220:	01000044 	movi	r4,1
   4f224:	0021883a 	mov	r16,zero
   4f228:	0025883a 	mov	r18,zero
   4f22c:	003eb506 	br	4ed04 <__alt_data_end+0xfffd4384>
   4f230:	00bef884 	movi	r2,-1054
   4f234:	1145c83a 	sub	r2,r2,r5
   4f238:	8088d83a 	srl	r4,r16,r2
   4f23c:	00800804 	movi	r2,32
   4f240:	18801726 	beq	r3,r2,4f2a0 <__muldf3+0x704>
   4f244:	28810f84 	addi	r2,r5,1086
   4f248:	8084983a 	sll	r2,r16,r2
   4f24c:	1484b03a 	or	r2,r2,r18
   4f250:	1004c03a 	cmpne	r2,r2,zero
   4f254:	1104b03a 	or	r2,r2,r4
   4f258:	10c001cc 	andi	r3,r2,7
   4f25c:	18000b1e 	bne	r3,zero,4f28c <__muldf3+0x6f0>
   4f260:	0021883a 	mov	r16,zero
   4f264:	1004d0fa 	srli	r2,r2,3
   4f268:	b4c0004c 	andi	r19,r22,1
   4f26c:	0009883a 	mov	r4,zero
   4f270:	10e4b03a 	or	r18,r2,r3
   4f274:	003ea306 	br	4ed04 <__alt_data_end+0xfffd4384>
   4f278:	0007883a 	mov	r3,zero
   4f27c:	1820927a 	slli	r16,r3,9
   4f280:	1806977a 	slli	r3,r3,29
   4f284:	8020d33a 	srli	r16,r16,12
   4f288:	003ff606 	br	4f264 <__alt_data_end+0xfffd48e4>
   4f28c:	110003cc 	andi	r4,r2,15
   4f290:	00c00104 	movi	r3,4
   4f294:	20fff826 	beq	r4,r3,4f278 <__alt_data_end+0xfffd48f8>
   4f298:	0007883a 	mov	r3,zero
   4f29c:	003fd906 	br	4f204 <__alt_data_end+0xfffd4884>
   4f2a0:	0005883a 	mov	r2,zero
   4f2a4:	003fe906 	br	4f24c <__alt_data_end+0xfffd48cc>
   4f2a8:	00800434 	movhi	r2,16
   4f2ac:	84000234 	orhi	r16,r16,8
   4f2b0:	10bfffc4 	addi	r2,r2,-1
   4f2b4:	e4c0004c 	andi	r19,fp,1
   4f2b8:	80a0703a 	and	r16,r16,r2
   4f2bc:	003ef606 	br	4ee98 <__alt_data_end+0xfffd4518>

0004f2c0 <__subdf3>:
   4f2c0:	00c00434 	movhi	r3,16
   4f2c4:	18ffffc4 	addi	r3,r3,-1
   4f2c8:	defffb04 	addi	sp,sp,-20
   4f2cc:	28d2703a 	and	r9,r5,r3
   4f2d0:	3814d53a 	srli	r10,r7,20
   4f2d4:	38c6703a 	and	r3,r7,r3
   4f2d8:	3004d77a 	srli	r2,r6,29
   4f2dc:	dc800215 	stw	r18,8(sp)
   4f2e0:	dc000015 	stw	r16,0(sp)
   4f2e4:	2824d7fa 	srli	r18,r5,31
   4f2e8:	2820d53a 	srli	r16,r5,20
   4f2ec:	481290fa 	slli	r9,r9,3
   4f2f0:	200ad77a 	srli	r5,r4,29
   4f2f4:	180690fa 	slli	r3,r3,3
   4f2f8:	dc400115 	stw	r17,4(sp)
   4f2fc:	dfc00415 	stw	ra,16(sp)
   4f300:	202290fa 	slli	r17,r4,3
   4f304:	dcc00315 	stw	r19,12(sp)
   4f308:	5281ffcc 	andi	r10,r10,2047
   4f30c:	0101ffc4 	movi	r4,2047
   4f310:	9011883a 	mov	r8,r18
   4f314:	8401ffcc 	andi	r16,r16,2047
   4f318:	94803fcc 	andi	r18,r18,255
   4f31c:	494ab03a 	or	r5,r9,r5
   4f320:	380ed7fa 	srli	r7,r7,31
   4f324:	1886b03a 	or	r3,r3,r2
   4f328:	300c90fa 	slli	r6,r6,3
   4f32c:	51009026 	beq	r10,r4,4f570 <__subdf3+0x2b0>
   4f330:	39c0005c 	xori	r7,r7,1
   4f334:	8285c83a 	sub	r2,r16,r10
   4f338:	91c06f26 	beq	r18,r7,4f4f8 <__subdf3+0x238>
   4f33c:	0080b10e 	bge	zero,r2,4f604 <__subdf3+0x344>
   4f340:	50002a1e 	bne	r10,zero,4f3ec <__subdf3+0x12c>
   4f344:	1988b03a 	or	r4,r3,r6
   4f348:	2000941e 	bne	r4,zero,4f59c <__subdf3+0x2dc>
   4f34c:	888001cc 	andi	r2,r17,7
   4f350:	10005b26 	beq	r2,zero,4f4c0 <__subdf3+0x200>
   4f354:	88c003cc 	andi	r3,r17,15
   4f358:	00800104 	movi	r2,4
   4f35c:	18805826 	beq	r3,r2,4f4c0 <__subdf3+0x200>
   4f360:	88c00104 	addi	r3,r17,4
   4f364:	1c63803a 	cmpltu	r17,r3,r17
   4f368:	2c4b883a 	add	r5,r5,r17
   4f36c:	2880202c 	andhi	r2,r5,128
   4f370:	9200004c 	andi	r8,r18,1
   4f374:	1823883a 	mov	r17,r3
   4f378:	10005426 	beq	r2,zero,4f4cc <__subdf3+0x20c>
   4f37c:	84000044 	addi	r16,r16,1
   4f380:	0081ffc4 	movi	r2,2047
   4f384:	8080bf26 	beq	r16,r2,4f684 <__subdf3+0x3c4>
   4f388:	013fe034 	movhi	r4,65408
   4f38c:	213fffc4 	addi	r4,r4,-1
   4f390:	290a703a 	and	r5,r5,r4
   4f394:	2804977a 	slli	r2,r5,29
   4f398:	280a927a 	slli	r5,r5,9
   4f39c:	8822d0fa 	srli	r17,r17,3
   4f3a0:	8401ffcc 	andi	r16,r16,2047
   4f3a4:	2808d33a 	srli	r4,r5,12
   4f3a8:	1444b03a 	or	r2,r2,r17
   4f3ac:	8401ffcc 	andi	r16,r16,2047
   4f3b0:	800a953a 	slli	r5,r16,20
   4f3b4:	40c03fcc 	andi	r3,r8,255
   4f3b8:	04000434 	movhi	r16,16
   4f3bc:	180697fa 	slli	r3,r3,31
   4f3c0:	843fffc4 	addi	r16,r16,-1
   4f3c4:	2420703a 	and	r16,r4,r16
   4f3c8:	8160b03a 	or	r16,r16,r5
   4f3cc:	80c6b03a 	or	r3,r16,r3
   4f3d0:	dfc00417 	ldw	ra,16(sp)
   4f3d4:	dcc00317 	ldw	r19,12(sp)
   4f3d8:	dc800217 	ldw	r18,8(sp)
   4f3dc:	dc400117 	ldw	r17,4(sp)
   4f3e0:	dc000017 	ldw	r16,0(sp)
   4f3e4:	dec00504 	addi	sp,sp,20
   4f3e8:	f800283a 	ret
   4f3ec:	0101ffc4 	movi	r4,2047
   4f3f0:	813fd626 	beq	r16,r4,4f34c <__alt_data_end+0xfffd49cc>
   4f3f4:	18c02034 	orhi	r3,r3,128
   4f3f8:	01000e04 	movi	r4,56
   4f3fc:	2080a416 	blt	r4,r2,4f690 <__subdf3+0x3d0>
   4f400:	010007c4 	movi	r4,31
   4f404:	2080c716 	blt	r4,r2,4f724 <__subdf3+0x464>
   4f408:	01000804 	movi	r4,32
   4f40c:	2089c83a 	sub	r4,r4,r2
   4f410:	1910983a 	sll	r8,r3,r4
   4f414:	308ed83a 	srl	r7,r6,r2
   4f418:	3108983a 	sll	r4,r6,r4
   4f41c:	1884d83a 	srl	r2,r3,r2
   4f420:	41ccb03a 	or	r6,r8,r7
   4f424:	2008c03a 	cmpne	r4,r4,zero
   4f428:	310cb03a 	or	r6,r6,r4
   4f42c:	898dc83a 	sub	r6,r17,r6
   4f430:	89a3803a 	cmpltu	r17,r17,r6
   4f434:	288bc83a 	sub	r5,r5,r2
   4f438:	2c4bc83a 	sub	r5,r5,r17
   4f43c:	3023883a 	mov	r17,r6
   4f440:	2880202c 	andhi	r2,r5,128
   4f444:	10006b26 	beq	r2,zero,4f5f4 <__subdf3+0x334>
   4f448:	04c02034 	movhi	r19,128
   4f44c:	9cffffc4 	addi	r19,r19,-1
   4f450:	2ce6703a 	and	r19,r5,r19
   4f454:	98007c26 	beq	r19,zero,4f648 <__subdf3+0x388>
   4f458:	9809883a 	mov	r4,r19
   4f45c:	004fd8c0 	call	4fd8c <__clzsi2>
   4f460:	10fffe04 	addi	r3,r2,-8
   4f464:	010007c4 	movi	r4,31
   4f468:	20c07d16 	blt	r4,r3,4f660 <__subdf3+0x3a0>
   4f46c:	01400a04 	movi	r5,40
   4f470:	2885c83a 	sub	r2,r5,r2
   4f474:	888ad83a 	srl	r5,r17,r2
   4f478:	98e6983a 	sll	r19,r19,r3
   4f47c:	88e2983a 	sll	r17,r17,r3
   4f480:	2ce6b03a 	or	r19,r5,r19
   4f484:	1c007a16 	blt	r3,r16,4f670 <__subdf3+0x3b0>
   4f488:	1c21c83a 	sub	r16,r3,r16
   4f48c:	81400044 	addi	r5,r16,1
   4f490:	00c007c4 	movi	r3,31
   4f494:	19409616 	blt	r3,r5,4f6f0 <__subdf3+0x430>
   4f498:	1c21c83a 	sub	r16,r3,r16
   4f49c:	8c08983a 	sll	r4,r17,r16
   4f4a0:	8946d83a 	srl	r3,r17,r5
   4f4a4:	9c20983a 	sll	r16,r19,r16
   4f4a8:	2008c03a 	cmpne	r4,r4,zero
   4f4ac:	994ad83a 	srl	r5,r19,r5
   4f4b0:	1c06b03a 	or	r3,r3,r16
   4f4b4:	1922b03a 	or	r17,r3,r4
   4f4b8:	0021883a 	mov	r16,zero
   4f4bc:	003fa306 	br	4f34c <__alt_data_end+0xfffd49cc>
   4f4c0:	2880202c 	andhi	r2,r5,128
   4f4c4:	9200004c 	andi	r8,r18,1
   4f4c8:	103fac1e 	bne	r2,zero,4f37c <__alt_data_end+0xfffd49fc>
   4f4cc:	2804977a 	slli	r2,r5,29
   4f4d0:	8822d0fa 	srli	r17,r17,3
   4f4d4:	00c1ffc4 	movi	r3,2047
   4f4d8:	280ad0fa 	srli	r5,r5,3
   4f4dc:	1444b03a 	or	r2,r2,r17
   4f4e0:	80c02726 	beq	r16,r3,4f580 <__subdf3+0x2c0>
   4f4e4:	01000434 	movhi	r4,16
   4f4e8:	213fffc4 	addi	r4,r4,-1
   4f4ec:	80e0703a 	and	r16,r16,r3
   4f4f0:	2908703a 	and	r4,r5,r4
   4f4f4:	003fad06 	br	4f3ac <__alt_data_end+0xfffd4a2c>
   4f4f8:	0080690e 	bge	zero,r2,4f6a0 <__subdf3+0x3e0>
   4f4fc:	50002f26 	beq	r10,zero,4f5bc <__subdf3+0x2fc>
   4f500:	0101ffc4 	movi	r4,2047
   4f504:	813f9126 	beq	r16,r4,4f34c <__alt_data_end+0xfffd49cc>
   4f508:	18c02034 	orhi	r3,r3,128
   4f50c:	01000e04 	movi	r4,56
   4f510:	2080b00e 	bge	r4,r2,4f7d4 <__subdf3+0x514>
   4f514:	198cb03a 	or	r6,r3,r6
   4f518:	300ec03a 	cmpne	r7,r6,zero
   4f51c:	0005883a 	mov	r2,zero
   4f520:	3c4f883a 	add	r7,r7,r17
   4f524:	3c63803a 	cmpltu	r17,r7,r17
   4f528:	114b883a 	add	r5,r2,r5
   4f52c:	2c4b883a 	add	r5,r5,r17
   4f530:	3823883a 	mov	r17,r7
   4f534:	2880202c 	andhi	r2,r5,128
   4f538:	10002e26 	beq	r2,zero,4f5f4 <__subdf3+0x334>
   4f53c:	84000044 	addi	r16,r16,1
   4f540:	0081ffc4 	movi	r2,2047
   4f544:	8080de26 	beq	r16,r2,4f8c0 <__subdf3+0x600>
   4f548:	00bfe034 	movhi	r2,65408
   4f54c:	10bfffc4 	addi	r2,r2,-1
   4f550:	288a703a 	and	r5,r5,r2
   4f554:	880cd07a 	srli	r6,r17,1
   4f558:	280897fa 	slli	r4,r5,31
   4f55c:	88c0004c 	andi	r3,r17,1
   4f560:	30e2b03a 	or	r17,r6,r3
   4f564:	280ad07a 	srli	r5,r5,1
   4f568:	8922b03a 	or	r17,r17,r4
   4f56c:	003f7706 	br	4f34c <__alt_data_end+0xfffd49cc>
   4f570:	1984b03a 	or	r2,r3,r6
   4f574:	103f6e26 	beq	r2,zero,4f330 <__alt_data_end+0xfffd49b0>
   4f578:	39c03fcc 	andi	r7,r7,255
   4f57c:	003f6d06 	br	4f334 <__alt_data_end+0xfffd49b4>
   4f580:	1146b03a 	or	r3,r2,r5
   4f584:	18003f26 	beq	r3,zero,4f684 <__subdf3+0x3c4>
   4f588:	00c00434 	movhi	r3,16
   4f58c:	29000234 	orhi	r4,r5,8
   4f590:	18ffffc4 	addi	r3,r3,-1
   4f594:	20c8703a 	and	r4,r4,r3
   4f598:	003f8406 	br	4f3ac <__alt_data_end+0xfffd4a2c>
   4f59c:	10bfffc4 	addi	r2,r2,-1
   4f5a0:	1000501e 	bne	r2,zero,4f6e4 <__subdf3+0x424>
   4f5a4:	898fc83a 	sub	r7,r17,r6
   4f5a8:	89e3803a 	cmpltu	r17,r17,r7
   4f5ac:	28cbc83a 	sub	r5,r5,r3
   4f5b0:	2c4bc83a 	sub	r5,r5,r17
   4f5b4:	3823883a 	mov	r17,r7
   4f5b8:	003fa106 	br	4f440 <__alt_data_end+0xfffd4ac0>
   4f5bc:	1988b03a 	or	r4,r3,r6
   4f5c0:	203f6226 	beq	r4,zero,4f34c <__alt_data_end+0xfffd49cc>
   4f5c4:	10bfffc4 	addi	r2,r2,-1
   4f5c8:	10009b1e 	bne	r2,zero,4f838 <__subdf3+0x578>
   4f5cc:	344d883a 	add	r6,r6,r17
   4f5d0:	3463803a 	cmpltu	r17,r6,r17
   4f5d4:	194b883a 	add	r5,r3,r5
   4f5d8:	2c4b883a 	add	r5,r5,r17
   4f5dc:	3023883a 	mov	r17,r6
   4f5e0:	003fd406 	br	4f534 <__alt_data_end+0xfffd4bb4>
   4f5e4:	1106b03a 	or	r3,r2,r4
   4f5e8:	1800b426 	beq	r3,zero,4f8bc <__subdf3+0x5fc>
   4f5ec:	100b883a 	mov	r5,r2
   4f5f0:	2023883a 	mov	r17,r4
   4f5f4:	888001cc 	andi	r2,r17,7
   4f5f8:	103f561e 	bne	r2,zero,4f354 <__alt_data_end+0xfffd49d4>
   4f5fc:	9200004c 	andi	r8,r18,1
   4f600:	003fb206 	br	4f4cc <__alt_data_end+0xfffd4b4c>
   4f604:	1000531e 	bne	r2,zero,4f754 <__subdf3+0x494>
   4f608:	80800044 	addi	r2,r16,1
   4f60c:	1081ffcc 	andi	r2,r2,2047
   4f610:	01000044 	movi	r4,1
   4f614:	2080a00e 	bge	r4,r2,4f898 <__subdf3+0x5d8>
   4f618:	8985c83a 	sub	r2,r17,r6
   4f61c:	8889803a 	cmpltu	r4,r17,r2
   4f620:	28e7c83a 	sub	r19,r5,r3
   4f624:	9927c83a 	sub	r19,r19,r4
   4f628:	9900202c 	andhi	r4,r19,128
   4f62c:	20006226 	beq	r4,zero,4f7b8 <__subdf3+0x4f8>
   4f630:	3463c83a 	sub	r17,r6,r17
   4f634:	194bc83a 	sub	r5,r3,r5
   4f638:	344d803a 	cmpltu	r6,r6,r17
   4f63c:	29a7c83a 	sub	r19,r5,r6
   4f640:	3825883a 	mov	r18,r7
   4f644:	983f841e 	bne	r19,zero,4f458 <__alt_data_end+0xfffd4ad8>
   4f648:	8809883a 	mov	r4,r17
   4f64c:	004fd8c0 	call	4fd8c <__clzsi2>
   4f650:	10800804 	addi	r2,r2,32
   4f654:	10fffe04 	addi	r3,r2,-8
   4f658:	010007c4 	movi	r4,31
   4f65c:	20ff830e 	bge	r4,r3,4f46c <__alt_data_end+0xfffd4aec>
   4f660:	14fff604 	addi	r19,r2,-40
   4f664:	8ce6983a 	sll	r19,r17,r19
   4f668:	0023883a 	mov	r17,zero
   4f66c:	1c3f860e 	bge	r3,r16,4f488 <__alt_data_end+0xfffd4b08>
   4f670:	017fe034 	movhi	r5,65408
   4f674:	297fffc4 	addi	r5,r5,-1
   4f678:	80e1c83a 	sub	r16,r16,r3
   4f67c:	994a703a 	and	r5,r19,r5
   4f680:	003f3206 	br	4f34c <__alt_data_end+0xfffd49cc>
   4f684:	0009883a 	mov	r4,zero
   4f688:	0005883a 	mov	r2,zero
   4f68c:	003f4706 	br	4f3ac <__alt_data_end+0xfffd4a2c>
   4f690:	198cb03a 	or	r6,r3,r6
   4f694:	300cc03a 	cmpne	r6,r6,zero
   4f698:	0005883a 	mov	r2,zero
   4f69c:	003f6306 	br	4f42c <__alt_data_end+0xfffd4aac>
   4f6a0:	10009d1e 	bne	r2,zero,4f918 <__subdf3+0x658>
   4f6a4:	81c00044 	addi	r7,r16,1
   4f6a8:	3881ffcc 	andi	r2,r7,2047
   4f6ac:	02400044 	movi	r9,1
   4f6b0:	4880680e 	bge	r9,r2,4f854 <__subdf3+0x594>
   4f6b4:	0081ffc4 	movi	r2,2047
   4f6b8:	3880ae26 	beq	r7,r2,4f974 <__subdf3+0x6b4>
   4f6bc:	344d883a 	add	r6,r6,r17
   4f6c0:	3463803a 	cmpltu	r17,r6,r17
   4f6c4:	194b883a 	add	r5,r3,r5
   4f6c8:	2c4b883a 	add	r5,r5,r17
   4f6cc:	282297fa 	slli	r17,r5,31
   4f6d0:	300cd07a 	srli	r6,r6,1
   4f6d4:	280ad07a 	srli	r5,r5,1
   4f6d8:	3821883a 	mov	r16,r7
   4f6dc:	89a2b03a 	or	r17,r17,r6
   4f6e0:	003f1a06 	br	4f34c <__alt_data_end+0xfffd49cc>
   4f6e4:	0101ffc4 	movi	r4,2047
   4f6e8:	813f431e 	bne	r16,r4,4f3f8 <__alt_data_end+0xfffd4a78>
   4f6ec:	003f1706 	br	4f34c <__alt_data_end+0xfffd49cc>
   4f6f0:	80bff844 	addi	r2,r16,-31
   4f6f4:	00c00804 	movi	r3,32
   4f6f8:	9884d83a 	srl	r2,r19,r2
   4f6fc:	28c05126 	beq	r5,r3,4f844 <__subdf3+0x584>
   4f700:	00c00fc4 	movi	r3,63
   4f704:	1c21c83a 	sub	r16,r3,r16
   4f708:	9c26983a 	sll	r19,r19,r16
   4f70c:	9c62b03a 	or	r17,r19,r17
   4f710:	8822c03a 	cmpne	r17,r17,zero
   4f714:	88a2b03a 	or	r17,r17,r2
   4f718:	000b883a 	mov	r5,zero
   4f71c:	0021883a 	mov	r16,zero
   4f720:	003fb406 	br	4f5f4 <__alt_data_end+0xfffd4c74>
   4f724:	113ff804 	addi	r4,r2,-32
   4f728:	01c00804 	movi	r7,32
   4f72c:	1908d83a 	srl	r4,r3,r4
   4f730:	11c04626 	beq	r2,r7,4f84c <__subdf3+0x58c>
   4f734:	01c01004 	movi	r7,64
   4f738:	3885c83a 	sub	r2,r7,r2
   4f73c:	1884983a 	sll	r2,r3,r2
   4f740:	118cb03a 	or	r6,r2,r6
   4f744:	300cc03a 	cmpne	r6,r6,zero
   4f748:	310cb03a 	or	r6,r6,r4
   4f74c:	0005883a 	mov	r2,zero
   4f750:	003f3606 	br	4f42c <__alt_data_end+0xfffd4aac>
   4f754:	80002b26 	beq	r16,zero,4f804 <__subdf3+0x544>
   4f758:	0101ffc4 	movi	r4,2047
   4f75c:	51006926 	beq	r10,r4,4f904 <__subdf3+0x644>
   4f760:	0085c83a 	sub	r2,zero,r2
   4f764:	29402034 	orhi	r5,r5,128
   4f768:	01000e04 	movi	r4,56
   4f76c:	20807d16 	blt	r4,r2,4f964 <__subdf3+0x6a4>
   4f770:	010007c4 	movi	r4,31
   4f774:	2080d916 	blt	r4,r2,4fadc <__subdf3+0x81c>
   4f778:	01000804 	movi	r4,32
   4f77c:	2089c83a 	sub	r4,r4,r2
   4f780:	2912983a 	sll	r9,r5,r4
   4f784:	8890d83a 	srl	r8,r17,r2
   4f788:	8908983a 	sll	r4,r17,r4
   4f78c:	2884d83a 	srl	r2,r5,r2
   4f790:	4a22b03a 	or	r17,r9,r8
   4f794:	2008c03a 	cmpne	r4,r4,zero
   4f798:	8922b03a 	or	r17,r17,r4
   4f79c:	3463c83a 	sub	r17,r6,r17
   4f7a0:	1885c83a 	sub	r2,r3,r2
   4f7a4:	344d803a 	cmpltu	r6,r6,r17
   4f7a8:	118bc83a 	sub	r5,r2,r6
   4f7ac:	5021883a 	mov	r16,r10
   4f7b0:	3825883a 	mov	r18,r7
   4f7b4:	003f2206 	br	4f440 <__alt_data_end+0xfffd4ac0>
   4f7b8:	9886b03a 	or	r3,r19,r2
   4f7bc:	18001c1e 	bne	r3,zero,4f830 <__subdf3+0x570>
   4f7c0:	0011883a 	mov	r8,zero
   4f7c4:	000b883a 	mov	r5,zero
   4f7c8:	0023883a 	mov	r17,zero
   4f7cc:	0021883a 	mov	r16,zero
   4f7d0:	003f3e06 	br	4f4cc <__alt_data_end+0xfffd4b4c>
   4f7d4:	010007c4 	movi	r4,31
   4f7d8:	20803c16 	blt	r4,r2,4f8cc <__subdf3+0x60c>
   4f7dc:	01000804 	movi	r4,32
   4f7e0:	2089c83a 	sub	r4,r4,r2
   4f7e4:	1912983a 	sll	r9,r3,r4
   4f7e8:	308ed83a 	srl	r7,r6,r2
   4f7ec:	3108983a 	sll	r4,r6,r4
   4f7f0:	1884d83a 	srl	r2,r3,r2
   4f7f4:	49ceb03a 	or	r7,r9,r7
   4f7f8:	2008c03a 	cmpne	r4,r4,zero
   4f7fc:	390eb03a 	or	r7,r7,r4
   4f800:	003f4706 	br	4f520 <__alt_data_end+0xfffd4ba0>
   4f804:	2c48b03a 	or	r4,r5,r17
   4f808:	20003e26 	beq	r4,zero,4f904 <__subdf3+0x644>
   4f80c:	0084303a 	nor	r2,zero,r2
   4f810:	10003a1e 	bne	r2,zero,4f8fc <__subdf3+0x63c>
   4f814:	3463c83a 	sub	r17,r6,r17
   4f818:	194bc83a 	sub	r5,r3,r5
   4f81c:	344d803a 	cmpltu	r6,r6,r17
   4f820:	298bc83a 	sub	r5,r5,r6
   4f824:	5021883a 	mov	r16,r10
   4f828:	3825883a 	mov	r18,r7
   4f82c:	003f0406 	br	4f440 <__alt_data_end+0xfffd4ac0>
   4f830:	1023883a 	mov	r17,r2
   4f834:	003f0706 	br	4f454 <__alt_data_end+0xfffd4ad4>
   4f838:	0101ffc4 	movi	r4,2047
   4f83c:	813f331e 	bne	r16,r4,4f50c <__alt_data_end+0xfffd4b8c>
   4f840:	003ec206 	br	4f34c <__alt_data_end+0xfffd49cc>
   4f844:	0027883a 	mov	r19,zero
   4f848:	003fb006 	br	4f70c <__alt_data_end+0xfffd4d8c>
   4f84c:	0005883a 	mov	r2,zero
   4f850:	003fbb06 	br	4f740 <__alt_data_end+0xfffd4dc0>
   4f854:	2c44b03a 	or	r2,r5,r17
   4f858:	80008b1e 	bne	r16,zero,4fa88 <__subdf3+0x7c8>
   4f85c:	1000b526 	beq	r2,zero,4fb34 <__subdf3+0x874>
   4f860:	1984b03a 	or	r2,r3,r6
   4f864:	103eb926 	beq	r2,zero,4f34c <__alt_data_end+0xfffd49cc>
   4f868:	3449883a 	add	r4,r6,r17
   4f86c:	2463803a 	cmpltu	r17,r4,r17
   4f870:	194b883a 	add	r5,r3,r5
   4f874:	2c4b883a 	add	r5,r5,r17
   4f878:	2880202c 	andhi	r2,r5,128
   4f87c:	2023883a 	mov	r17,r4
   4f880:	103f5c26 	beq	r2,zero,4f5f4 <__alt_data_end+0xfffd4c74>
   4f884:	00bfe034 	movhi	r2,65408
   4f888:	10bfffc4 	addi	r2,r2,-1
   4f88c:	4821883a 	mov	r16,r9
   4f890:	288a703a 	and	r5,r5,r2
   4f894:	003ead06 	br	4f34c <__alt_data_end+0xfffd49cc>
   4f898:	2c44b03a 	or	r2,r5,r17
   4f89c:	8000291e 	bne	r16,zero,4f944 <__subdf3+0x684>
   4f8a0:	10004f1e 	bne	r2,zero,4f9e0 <__subdf3+0x720>
   4f8a4:	1984b03a 	or	r2,r3,r6
   4f8a8:	10000426 	beq	r2,zero,4f8bc <__subdf3+0x5fc>
   4f8ac:	180b883a 	mov	r5,r3
   4f8b0:	3023883a 	mov	r17,r6
   4f8b4:	3825883a 	mov	r18,r7
   4f8b8:	003ea406 	br	4f34c <__alt_data_end+0xfffd49cc>
   4f8bc:	0011883a 	mov	r8,zero
   4f8c0:	000b883a 	mov	r5,zero
   4f8c4:	0023883a 	mov	r17,zero
   4f8c8:	003f0006 	br	4f4cc <__alt_data_end+0xfffd4b4c>
   4f8cc:	11fff804 	addi	r7,r2,-32
   4f8d0:	19c8d83a 	srl	r4,r3,r7
   4f8d4:	01c00804 	movi	r7,32
   4f8d8:	11c07e26 	beq	r2,r7,4fad4 <__subdf3+0x814>
   4f8dc:	01c01004 	movi	r7,64
   4f8e0:	3885c83a 	sub	r2,r7,r2
   4f8e4:	1884983a 	sll	r2,r3,r2
   4f8e8:	118cb03a 	or	r6,r2,r6
   4f8ec:	300ec03a 	cmpne	r7,r6,zero
   4f8f0:	390eb03a 	or	r7,r7,r4
   4f8f4:	0005883a 	mov	r2,zero
   4f8f8:	003f0906 	br	4f520 <__alt_data_end+0xfffd4ba0>
   4f8fc:	0101ffc4 	movi	r4,2047
   4f900:	513f991e 	bne	r10,r4,4f768 <__alt_data_end+0xfffd4de8>
   4f904:	180b883a 	mov	r5,r3
   4f908:	3023883a 	mov	r17,r6
   4f90c:	5021883a 	mov	r16,r10
   4f910:	3825883a 	mov	r18,r7
   4f914:	003e8d06 	br	4f34c <__alt_data_end+0xfffd49cc>
   4f918:	80001a1e 	bne	r16,zero,4f984 <__subdf3+0x6c4>
   4f91c:	2c48b03a 	or	r4,r5,r17
   4f920:	20005526 	beq	r4,zero,4fa78 <__subdf3+0x7b8>
   4f924:	0084303a 	nor	r2,zero,r2
   4f928:	1000511e 	bne	r2,zero,4fa70 <__subdf3+0x7b0>
   4f92c:	89a3883a 	add	r17,r17,r6
   4f930:	194b883a 	add	r5,r3,r5
   4f934:	898d803a 	cmpltu	r6,r17,r6
   4f938:	298b883a 	add	r5,r5,r6
   4f93c:	5021883a 	mov	r16,r10
   4f940:	003efc06 	br	4f534 <__alt_data_end+0xfffd4bb4>
   4f944:	1000341e 	bne	r2,zero,4fa18 <__subdf3+0x758>
   4f948:	1984b03a 	or	r2,r3,r6
   4f94c:	10006f26 	beq	r2,zero,4fb0c <__subdf3+0x84c>
   4f950:	180b883a 	mov	r5,r3
   4f954:	3023883a 	mov	r17,r6
   4f958:	3825883a 	mov	r18,r7
   4f95c:	0401ffc4 	movi	r16,2047
   4f960:	003e7a06 	br	4f34c <__alt_data_end+0xfffd49cc>
   4f964:	2c62b03a 	or	r17,r5,r17
   4f968:	8822c03a 	cmpne	r17,r17,zero
   4f96c:	0005883a 	mov	r2,zero
   4f970:	003f8a06 	br	4f79c <__alt_data_end+0xfffd4e1c>
   4f974:	3821883a 	mov	r16,r7
   4f978:	000b883a 	mov	r5,zero
   4f97c:	0023883a 	mov	r17,zero
   4f980:	003ed206 	br	4f4cc <__alt_data_end+0xfffd4b4c>
   4f984:	0101ffc4 	movi	r4,2047
   4f988:	51003b26 	beq	r10,r4,4fa78 <__subdf3+0x7b8>
   4f98c:	0085c83a 	sub	r2,zero,r2
   4f990:	29402034 	orhi	r5,r5,128
   4f994:	01000e04 	movi	r4,56
   4f998:	20806216 	blt	r4,r2,4fb24 <__subdf3+0x864>
   4f99c:	010007c4 	movi	r4,31
   4f9a0:	20806b16 	blt	r4,r2,4fb50 <__subdf3+0x890>
   4f9a4:	01000804 	movi	r4,32
   4f9a8:	2089c83a 	sub	r4,r4,r2
   4f9ac:	2912983a 	sll	r9,r5,r4
   4f9b0:	888ed83a 	srl	r7,r17,r2
   4f9b4:	8908983a 	sll	r4,r17,r4
   4f9b8:	2884d83a 	srl	r2,r5,r2
   4f9bc:	49e2b03a 	or	r17,r9,r7
   4f9c0:	2008c03a 	cmpne	r4,r4,zero
   4f9c4:	8922b03a 	or	r17,r17,r4
   4f9c8:	89a3883a 	add	r17,r17,r6
   4f9cc:	10c5883a 	add	r2,r2,r3
   4f9d0:	898d803a 	cmpltu	r6,r17,r6
   4f9d4:	118b883a 	add	r5,r2,r6
   4f9d8:	5021883a 	mov	r16,r10
   4f9dc:	003ed506 	br	4f534 <__alt_data_end+0xfffd4bb4>
   4f9e0:	1984b03a 	or	r2,r3,r6
   4f9e4:	103e5926 	beq	r2,zero,4f34c <__alt_data_end+0xfffd49cc>
   4f9e8:	8989c83a 	sub	r4,r17,r6
   4f9ec:	8911803a 	cmpltu	r8,r17,r4
   4f9f0:	28c5c83a 	sub	r2,r5,r3
   4f9f4:	1205c83a 	sub	r2,r2,r8
   4f9f8:	1200202c 	andhi	r8,r2,128
   4f9fc:	403ef926 	beq	r8,zero,4f5e4 <__alt_data_end+0xfffd4c64>
   4fa00:	3463c83a 	sub	r17,r6,r17
   4fa04:	194bc83a 	sub	r5,r3,r5
   4fa08:	344d803a 	cmpltu	r6,r6,r17
   4fa0c:	298bc83a 	sub	r5,r5,r6
   4fa10:	3825883a 	mov	r18,r7
   4fa14:	003e4d06 	br	4f34c <__alt_data_end+0xfffd49cc>
   4fa18:	1984b03a 	or	r2,r3,r6
   4fa1c:	10002b26 	beq	r2,zero,4facc <__subdf3+0x80c>
   4fa20:	2808d0fa 	srli	r4,r5,3
   4fa24:	8822d0fa 	srli	r17,r17,3
   4fa28:	280a977a 	slli	r5,r5,29
   4fa2c:	2080022c 	andhi	r2,r4,8
   4fa30:	2c62b03a 	or	r17,r5,r17
   4fa34:	10000826 	beq	r2,zero,4fa58 <__subdf3+0x798>
   4fa38:	1810d0fa 	srli	r8,r3,3
   4fa3c:	4080022c 	andhi	r2,r8,8
   4fa40:	1000051e 	bne	r2,zero,4fa58 <__subdf3+0x798>
   4fa44:	300cd0fa 	srli	r6,r6,3
   4fa48:	1804977a 	slli	r2,r3,29
   4fa4c:	4009883a 	mov	r4,r8
   4fa50:	3825883a 	mov	r18,r7
   4fa54:	11a2b03a 	or	r17,r2,r6
   4fa58:	880ad77a 	srli	r5,r17,29
   4fa5c:	200890fa 	slli	r4,r4,3
   4fa60:	882290fa 	slli	r17,r17,3
   4fa64:	0401ffc4 	movi	r16,2047
   4fa68:	290ab03a 	or	r5,r5,r4
   4fa6c:	003e3706 	br	4f34c <__alt_data_end+0xfffd49cc>
   4fa70:	0101ffc4 	movi	r4,2047
   4fa74:	513fc71e 	bne	r10,r4,4f994 <__alt_data_end+0xfffd5014>
   4fa78:	180b883a 	mov	r5,r3
   4fa7c:	3023883a 	mov	r17,r6
   4fa80:	5021883a 	mov	r16,r10
   4fa84:	003e3106 	br	4f34c <__alt_data_end+0xfffd49cc>
   4fa88:	10002d26 	beq	r2,zero,4fb40 <__subdf3+0x880>
   4fa8c:	1984b03a 	or	r2,r3,r6
   4fa90:	10000e26 	beq	r2,zero,4facc <__subdf3+0x80c>
   4fa94:	2808d0fa 	srli	r4,r5,3
   4fa98:	8822d0fa 	srli	r17,r17,3
   4fa9c:	280a977a 	slli	r5,r5,29
   4faa0:	2080022c 	andhi	r2,r4,8
   4faa4:	2c62b03a 	or	r17,r5,r17
   4faa8:	103feb26 	beq	r2,zero,4fa58 <__alt_data_end+0xfffd50d8>
   4faac:	180ed0fa 	srli	r7,r3,3
   4fab0:	3880022c 	andhi	r2,r7,8
   4fab4:	103fe81e 	bne	r2,zero,4fa58 <__alt_data_end+0xfffd50d8>
   4fab8:	300cd0fa 	srli	r6,r6,3
   4fabc:	1804977a 	slli	r2,r3,29
   4fac0:	3809883a 	mov	r4,r7
   4fac4:	11a2b03a 	or	r17,r2,r6
   4fac8:	003fe306 	br	4fa58 <__alt_data_end+0xfffd50d8>
   4facc:	0401ffc4 	movi	r16,2047
   4fad0:	003e1e06 	br	4f34c <__alt_data_end+0xfffd49cc>
   4fad4:	0005883a 	mov	r2,zero
   4fad8:	003f8306 	br	4f8e8 <__alt_data_end+0xfffd4f68>
   4fadc:	113ff804 	addi	r4,r2,-32
   4fae0:	02000804 	movi	r8,32
   4fae4:	2908d83a 	srl	r4,r5,r4
   4fae8:	12002526 	beq	r2,r8,4fb80 <__subdf3+0x8c0>
   4faec:	02001004 	movi	r8,64
   4faf0:	4085c83a 	sub	r2,r8,r2
   4faf4:	288a983a 	sll	r5,r5,r2
   4faf8:	2c62b03a 	or	r17,r5,r17
   4fafc:	8822c03a 	cmpne	r17,r17,zero
   4fb00:	8922b03a 	or	r17,r17,r4
   4fb04:	0005883a 	mov	r2,zero
   4fb08:	003f2406 	br	4f79c <__alt_data_end+0xfffd4e1c>
   4fb0c:	01402034 	movhi	r5,128
   4fb10:	0011883a 	mov	r8,zero
   4fb14:	297fffc4 	addi	r5,r5,-1
   4fb18:	047ffe04 	movi	r17,-8
   4fb1c:	0401ffc4 	movi	r16,2047
   4fb20:	003e6a06 	br	4f4cc <__alt_data_end+0xfffd4b4c>
   4fb24:	2c62b03a 	or	r17,r5,r17
   4fb28:	8822c03a 	cmpne	r17,r17,zero
   4fb2c:	0005883a 	mov	r2,zero
   4fb30:	003fa506 	br	4f9c8 <__alt_data_end+0xfffd5048>
   4fb34:	180b883a 	mov	r5,r3
   4fb38:	3023883a 	mov	r17,r6
   4fb3c:	003e0306 	br	4f34c <__alt_data_end+0xfffd49cc>
   4fb40:	180b883a 	mov	r5,r3
   4fb44:	3023883a 	mov	r17,r6
   4fb48:	0401ffc4 	movi	r16,2047
   4fb4c:	003dff06 	br	4f34c <__alt_data_end+0xfffd49cc>
   4fb50:	113ff804 	addi	r4,r2,-32
   4fb54:	01c00804 	movi	r7,32
   4fb58:	2908d83a 	srl	r4,r5,r4
   4fb5c:	11c00a26 	beq	r2,r7,4fb88 <__subdf3+0x8c8>
   4fb60:	01c01004 	movi	r7,64
   4fb64:	3885c83a 	sub	r2,r7,r2
   4fb68:	288a983a 	sll	r5,r5,r2
   4fb6c:	2c62b03a 	or	r17,r5,r17
   4fb70:	8822c03a 	cmpne	r17,r17,zero
   4fb74:	8922b03a 	or	r17,r17,r4
   4fb78:	0005883a 	mov	r2,zero
   4fb7c:	003f9206 	br	4f9c8 <__alt_data_end+0xfffd5048>
   4fb80:	000b883a 	mov	r5,zero
   4fb84:	003fdc06 	br	4faf8 <__alt_data_end+0xfffd5178>
   4fb88:	000b883a 	mov	r5,zero
   4fb8c:	003ff706 	br	4fb6c <__alt_data_end+0xfffd51ec>

0004fb90 <__fixdfsi>:
   4fb90:	2806d53a 	srli	r3,r5,20
   4fb94:	00800434 	movhi	r2,16
   4fb98:	10bfffc4 	addi	r2,r2,-1
   4fb9c:	18c1ffcc 	andi	r3,r3,2047
   4fba0:	0180ff84 	movi	r6,1022
   4fba4:	2884703a 	and	r2,r5,r2
   4fba8:	280ad7fa 	srli	r5,r5,31
   4fbac:	30c0130e 	bge	r6,r3,4fbfc <__fixdfsi+0x6c>
   4fbb0:	01810744 	movi	r6,1053
   4fbb4:	30c00d16 	blt	r6,r3,4fbec <__fixdfsi+0x5c>
   4fbb8:	01810cc4 	movi	r6,1075
   4fbbc:	30cdc83a 	sub	r6,r6,r3
   4fbc0:	01c007c4 	movi	r7,31
   4fbc4:	10800434 	orhi	r2,r2,16
   4fbc8:	39800e0e 	bge	r7,r6,4fc04 <__fixdfsi+0x74>
   4fbcc:	010104c4 	movi	r4,1043
   4fbd0:	20c7c83a 	sub	r3,r4,r3
   4fbd4:	10c6d83a 	srl	r3,r2,r3
   4fbd8:	29403fcc 	andi	r5,r5,255
   4fbdc:	0145c83a 	sub	r2,zero,r5
   4fbe0:	1884f03a 	xor	r2,r3,r2
   4fbe4:	1145883a 	add	r2,r2,r5
   4fbe8:	f800283a 	ret
   4fbec:	00a00034 	movhi	r2,32768
   4fbf0:	10bfffc4 	addi	r2,r2,-1
   4fbf4:	2885883a 	add	r2,r5,r2
   4fbf8:	f800283a 	ret
   4fbfc:	0005883a 	mov	r2,zero
   4fc00:	f800283a 	ret
   4fc04:	18fefb44 	addi	r3,r3,-1043
   4fc08:	2188d83a 	srl	r4,r4,r6
   4fc0c:	10c6983a 	sll	r3,r2,r3
   4fc10:	20c6b03a 	or	r3,r4,r3
   4fc14:	003ff006 	br	4fbd8 <__alt_data_end+0xfffd5258>

0004fc18 <__floatsidf>:
   4fc18:	defffd04 	addi	sp,sp,-12
   4fc1c:	dc400115 	stw	r17,4(sp)
   4fc20:	dfc00215 	stw	ra,8(sp)
   4fc24:	dc000015 	stw	r16,0(sp)
   4fc28:	2023883a 	mov	r17,r4
   4fc2c:	20001426 	beq	r4,zero,4fc80 <__floatsidf+0x68>
   4fc30:	2020d7fa 	srli	r16,r4,31
   4fc34:	80000126 	beq	r16,zero,4fc3c <__floatsidf+0x24>
   4fc38:	0123c83a 	sub	r17,zero,r4
   4fc3c:	8809883a 	mov	r4,r17
   4fc40:	004fd8c0 	call	4fd8c <__clzsi2>
   4fc44:	01410784 	movi	r5,1054
   4fc48:	00c00284 	movi	r3,10
   4fc4c:	288bc83a 	sub	r5,r5,r2
   4fc50:	18801c16 	blt	r3,r2,4fcc4 <__floatsidf+0xac>
   4fc54:	00c002c4 	movi	r3,11
   4fc58:	1887c83a 	sub	r3,r3,r2
   4fc5c:	88c8d83a 	srl	r4,r17,r3
   4fc60:	00c00434 	movhi	r3,16
   4fc64:	18ffffc4 	addi	r3,r3,-1
   4fc68:	10800544 	addi	r2,r2,21
   4fc6c:	20c8703a 	and	r4,r4,r3
   4fc70:	8884983a 	sll	r2,r17,r2
   4fc74:	28c1ffcc 	andi	r3,r5,2047
   4fc78:	800d883a 	mov	r6,r16
   4fc7c:	00000406 	br	4fc90 <__floatsidf+0x78>
   4fc80:	000d883a 	mov	r6,zero
   4fc84:	0007883a 	mov	r3,zero
   4fc88:	0009883a 	mov	r4,zero
   4fc8c:	0005883a 	mov	r2,zero
   4fc90:	180a953a 	slli	r5,r3,20
   4fc94:	31803fcc 	andi	r6,r6,255
   4fc98:	00c00434 	movhi	r3,16
   4fc9c:	300c97fa 	slli	r6,r6,31
   4fca0:	18ffffc4 	addi	r3,r3,-1
   4fca4:	20c6703a 	and	r3,r4,r3
   4fca8:	1946b03a 	or	r3,r3,r5
   4fcac:	1986b03a 	or	r3,r3,r6
   4fcb0:	dfc00217 	ldw	ra,8(sp)
   4fcb4:	dc400117 	ldw	r17,4(sp)
   4fcb8:	dc000017 	ldw	r16,0(sp)
   4fcbc:	dec00304 	addi	sp,sp,12
   4fcc0:	f800283a 	ret
   4fcc4:	10fffd44 	addi	r3,r2,-11
   4fcc8:	88c8983a 	sll	r4,r17,r3
   4fccc:	00800434 	movhi	r2,16
   4fcd0:	10bfffc4 	addi	r2,r2,-1
   4fcd4:	2088703a 	and	r4,r4,r2
   4fcd8:	28c1ffcc 	andi	r3,r5,2047
   4fcdc:	800d883a 	mov	r6,r16
   4fce0:	0005883a 	mov	r2,zero
   4fce4:	003fea06 	br	4fc90 <__alt_data_end+0xfffd5310>

0004fce8 <__floatunsidf>:
   4fce8:	defffe04 	addi	sp,sp,-8
   4fcec:	dc000015 	stw	r16,0(sp)
   4fcf0:	dfc00115 	stw	ra,4(sp)
   4fcf4:	2021883a 	mov	r16,r4
   4fcf8:	20001026 	beq	r4,zero,4fd3c <__floatunsidf+0x54>
   4fcfc:	004fd8c0 	call	4fd8c <__clzsi2>
   4fd00:	01410784 	movi	r5,1054
   4fd04:	100d883a 	mov	r6,r2
   4fd08:	288bc83a 	sub	r5,r5,r2
   4fd0c:	00800284 	movi	r2,10
   4fd10:	11801616 	blt	r2,r6,4fd6c <__floatunsidf+0x84>
   4fd14:	008002c4 	movi	r2,11
   4fd18:	1185c83a 	sub	r2,r2,r6
   4fd1c:	8084d83a 	srl	r2,r16,r2
   4fd20:	00c00434 	movhi	r3,16
   4fd24:	31c00544 	addi	r7,r6,21
   4fd28:	18ffffc4 	addi	r3,r3,-1
   4fd2c:	81e0983a 	sll	r16,r16,r7
   4fd30:	10cc703a 	and	r6,r2,r3
   4fd34:	2941ffcc 	andi	r5,r5,2047
   4fd38:	00000206 	br	4fd44 <__floatunsidf+0x5c>
   4fd3c:	000b883a 	mov	r5,zero
   4fd40:	000d883a 	mov	r6,zero
   4fd44:	280a953a 	slli	r5,r5,20
   4fd48:	00c00434 	movhi	r3,16
   4fd4c:	18ffffc4 	addi	r3,r3,-1
   4fd50:	30c6703a 	and	r3,r6,r3
   4fd54:	8005883a 	mov	r2,r16
   4fd58:	1946b03a 	or	r3,r3,r5
   4fd5c:	dfc00117 	ldw	ra,4(sp)
   4fd60:	dc000017 	ldw	r16,0(sp)
   4fd64:	dec00204 	addi	sp,sp,8
   4fd68:	f800283a 	ret
   4fd6c:	31bffd44 	addi	r6,r6,-11
   4fd70:	818c983a 	sll	r6,r16,r6
   4fd74:	00800434 	movhi	r2,16
   4fd78:	10bfffc4 	addi	r2,r2,-1
   4fd7c:	2941ffcc 	andi	r5,r5,2047
   4fd80:	0021883a 	mov	r16,zero
   4fd84:	308c703a 	and	r6,r6,r2
   4fd88:	003fee06 	br	4fd44 <__alt_data_end+0xfffd53c4>

0004fd8c <__clzsi2>:
   4fd8c:	00bfffd4 	movui	r2,65535
   4fd90:	11000b36 	bltu	r2,r4,4fdc0 <__clzsi2+0x34>
   4fd94:	00803fc4 	movi	r2,255
   4fd98:	1100122e 	bgeu	r2,r4,4fde4 <__clzsi2+0x58>
   4fd9c:	00c00204 	movi	r3,8
   4fda0:	01400604 	movi	r5,24
   4fda4:	20c8d83a 	srl	r4,r4,r3
   4fda8:	00800174 	movhi	r2,5
   4fdac:	1089a004 	addi	r2,r2,9856
   4fdb0:	1109883a 	add	r4,r2,r4
   4fdb4:	20800003 	ldbu	r2,0(r4)
   4fdb8:	2885c83a 	sub	r2,r5,r2
   4fdbc:	f800283a 	ret
   4fdc0:	00804034 	movhi	r2,256
   4fdc4:	10bfffc4 	addi	r2,r2,-1
   4fdc8:	11000336 	bltu	r2,r4,4fdd8 <__clzsi2+0x4c>
   4fdcc:	00c00404 	movi	r3,16
   4fdd0:	180b883a 	mov	r5,r3
   4fdd4:	003ff306 	br	4fda4 <__alt_data_end+0xfffd5424>
   4fdd8:	00c00604 	movi	r3,24
   4fddc:	01400204 	movi	r5,8
   4fde0:	003ff006 	br	4fda4 <__alt_data_end+0xfffd5424>
   4fde4:	0007883a 	mov	r3,zero
   4fde8:	01400804 	movi	r5,32
   4fdec:	003fed06 	br	4fda4 <__alt_data_end+0xfffd5424>

0004fdf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4fdf0:	defffe04 	addi	sp,sp,-8
   4fdf4:	dfc00115 	stw	ra,4(sp)
   4fdf8:	df000015 	stw	fp,0(sp)
   4fdfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4fe00:	00800174 	movhi	r2,5
   4fe04:	1090a404 	addi	r2,r2,17040
   4fe08:	10800017 	ldw	r2,0(r2)
   4fe0c:	10000526 	beq	r2,zero,4fe24 <alt_get_errno+0x34>
   4fe10:	00800174 	movhi	r2,5
   4fe14:	1090a404 	addi	r2,r2,17040
   4fe18:	10800017 	ldw	r2,0(r2)
   4fe1c:	103ee83a 	callr	r2
   4fe20:	00000206 	br	4fe2c <alt_get_errno+0x3c>
   4fe24:	00800174 	movhi	r2,5
   4fe28:	10978204 	addi	r2,r2,24072
}
   4fe2c:	e037883a 	mov	sp,fp
   4fe30:	dfc00117 	ldw	ra,4(sp)
   4fe34:	df000017 	ldw	fp,0(sp)
   4fe38:	dec00204 	addi	sp,sp,8
   4fe3c:	f800283a 	ret

0004fe40 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4fe40:	defffb04 	addi	sp,sp,-20
   4fe44:	dfc00415 	stw	ra,16(sp)
   4fe48:	df000315 	stw	fp,12(sp)
   4fe4c:	df000304 	addi	fp,sp,12
   4fe50:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4fe54:	e0bfff17 	ldw	r2,-4(fp)
   4fe58:	10000616 	blt	r2,zero,4fe74 <close+0x34>
   4fe5c:	e0bfff17 	ldw	r2,-4(fp)
   4fe60:	10c00324 	muli	r3,r2,12
   4fe64:	00800174 	movhi	r2,5
   4fe68:	108c1e04 	addi	r2,r2,12408
   4fe6c:	1885883a 	add	r2,r3,r2
   4fe70:	00000106 	br	4fe78 <close+0x38>
   4fe74:	0005883a 	mov	r2,zero
   4fe78:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4fe7c:	e0bffd17 	ldw	r2,-12(fp)
   4fe80:	10001926 	beq	r2,zero,4fee8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4fe84:	e0bffd17 	ldw	r2,-12(fp)
   4fe88:	10800017 	ldw	r2,0(r2)
   4fe8c:	10800417 	ldw	r2,16(r2)
   4fe90:	10000626 	beq	r2,zero,4feac <close+0x6c>
   4fe94:	e0bffd17 	ldw	r2,-12(fp)
   4fe98:	10800017 	ldw	r2,0(r2)
   4fe9c:	10800417 	ldw	r2,16(r2)
   4fea0:	e13ffd17 	ldw	r4,-12(fp)
   4fea4:	103ee83a 	callr	r2
   4fea8:	00000106 	br	4feb0 <close+0x70>
   4feac:	0005883a 	mov	r2,zero
   4feb0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4feb4:	e13fff17 	ldw	r4,-4(fp)
   4feb8:	005071c0 	call	5071c <alt_release_fd>
    if (rval < 0)
   4febc:	e0bffe17 	ldw	r2,-8(fp)
   4fec0:	1000070e 	bge	r2,zero,4fee0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4fec4:	004fdf00 	call	4fdf0 <alt_get_errno>
   4fec8:	1007883a 	mov	r3,r2
   4fecc:	e0bffe17 	ldw	r2,-8(fp)
   4fed0:	0085c83a 	sub	r2,zero,r2
   4fed4:	18800015 	stw	r2,0(r3)
      return -1;
   4fed8:	00bfffc4 	movi	r2,-1
   4fedc:	00000706 	br	4fefc <close+0xbc>
    }
    return 0;
   4fee0:	0005883a 	mov	r2,zero
   4fee4:	00000506 	br	4fefc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4fee8:	004fdf00 	call	4fdf0 <alt_get_errno>
   4feec:	1007883a 	mov	r3,r2
   4fef0:	00801444 	movi	r2,81
   4fef4:	18800015 	stw	r2,0(r3)
    return -1;
   4fef8:	00bfffc4 	movi	r2,-1
  }
}
   4fefc:	e037883a 	mov	sp,fp
   4ff00:	dfc00117 	ldw	ra,4(sp)
   4ff04:	df000017 	ldw	fp,0(sp)
   4ff08:	dec00204 	addi	sp,sp,8
   4ff0c:	f800283a 	ret

0004ff10 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4ff10:	defffc04 	addi	sp,sp,-16
   4ff14:	df000315 	stw	fp,12(sp)
   4ff18:	df000304 	addi	fp,sp,12
   4ff1c:	e13ffd15 	stw	r4,-12(fp)
   4ff20:	e17ffe15 	stw	r5,-8(fp)
   4ff24:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4ff28:	e0bfff17 	ldw	r2,-4(fp)
}
   4ff2c:	e037883a 	mov	sp,fp
   4ff30:	df000017 	ldw	fp,0(sp)
   4ff34:	dec00104 	addi	sp,sp,4
   4ff38:	f800283a 	ret

0004ff3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ff3c:	defffe04 	addi	sp,sp,-8
   4ff40:	dfc00115 	stw	ra,4(sp)
   4ff44:	df000015 	stw	fp,0(sp)
   4ff48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ff4c:	00800174 	movhi	r2,5
   4ff50:	1090a404 	addi	r2,r2,17040
   4ff54:	10800017 	ldw	r2,0(r2)
   4ff58:	10000526 	beq	r2,zero,4ff70 <alt_get_errno+0x34>
   4ff5c:	00800174 	movhi	r2,5
   4ff60:	1090a404 	addi	r2,r2,17040
   4ff64:	10800017 	ldw	r2,0(r2)
   4ff68:	103ee83a 	callr	r2
   4ff6c:	00000206 	br	4ff78 <alt_get_errno+0x3c>
   4ff70:	00800174 	movhi	r2,5
   4ff74:	10978204 	addi	r2,r2,24072
}
   4ff78:	e037883a 	mov	sp,fp
   4ff7c:	dfc00117 	ldw	ra,4(sp)
   4ff80:	df000017 	ldw	fp,0(sp)
   4ff84:	dec00204 	addi	sp,sp,8
   4ff88:	f800283a 	ret

0004ff8c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4ff8c:	defffb04 	addi	sp,sp,-20
   4ff90:	dfc00415 	stw	ra,16(sp)
   4ff94:	df000315 	stw	fp,12(sp)
   4ff98:	df000304 	addi	fp,sp,12
   4ff9c:	e13ffe15 	stw	r4,-8(fp)
   4ffa0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ffa4:	e0bffe17 	ldw	r2,-8(fp)
   4ffa8:	10000616 	blt	r2,zero,4ffc4 <fstat+0x38>
   4ffac:	e0bffe17 	ldw	r2,-8(fp)
   4ffb0:	10c00324 	muli	r3,r2,12
   4ffb4:	00800174 	movhi	r2,5
   4ffb8:	108c1e04 	addi	r2,r2,12408
   4ffbc:	1885883a 	add	r2,r3,r2
   4ffc0:	00000106 	br	4ffc8 <fstat+0x3c>
   4ffc4:	0005883a 	mov	r2,zero
   4ffc8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4ffcc:	e0bffd17 	ldw	r2,-12(fp)
   4ffd0:	10001026 	beq	r2,zero,50014 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4ffd4:	e0bffd17 	ldw	r2,-12(fp)
   4ffd8:	10800017 	ldw	r2,0(r2)
   4ffdc:	10800817 	ldw	r2,32(r2)
   4ffe0:	10000726 	beq	r2,zero,50000 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   4ffe4:	e0bffd17 	ldw	r2,-12(fp)
   4ffe8:	10800017 	ldw	r2,0(r2)
   4ffec:	10800817 	ldw	r2,32(r2)
   4fff0:	e13ffd17 	ldw	r4,-12(fp)
   4fff4:	e17fff17 	ldw	r5,-4(fp)
   4fff8:	103ee83a 	callr	r2
   4fffc:	00000a06 	br	50028 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   50000:	e0bfff17 	ldw	r2,-4(fp)
   50004:	00c80004 	movi	r3,8192
   50008:	10c00115 	stw	r3,4(r2)
      return 0;
   5000c:	0005883a 	mov	r2,zero
   50010:	00000506 	br	50028 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   50014:	004ff3c0 	call	4ff3c <alt_get_errno>
   50018:	1007883a 	mov	r3,r2
   5001c:	00801444 	movi	r2,81
   50020:	18800015 	stw	r2,0(r3)
    return -1;
   50024:	00bfffc4 	movi	r2,-1
  }
}
   50028:	e037883a 	mov	sp,fp
   5002c:	dfc00117 	ldw	ra,4(sp)
   50030:	df000017 	ldw	fp,0(sp)
   50034:	dec00204 	addi	sp,sp,8
   50038:	f800283a 	ret

0005003c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   5003c:	defff904 	addi	sp,sp,-28
   50040:	dfc00615 	stw	ra,24(sp)
   50044:	df000515 	stw	fp,20(sp)
   50048:	df000504 	addi	fp,sp,20
   5004c:	e13ffc15 	stw	r4,-16(fp)
   50050:	e17ffd15 	stw	r5,-12(fp)
   50054:	e1bffe15 	stw	r6,-8(fp)
   50058:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   5005c:	e0800217 	ldw	r2,8(fp)
   50060:	d8800015 	stw	r2,0(sp)
   50064:	e13ffc17 	ldw	r4,-16(fp)
   50068:	e17ffd17 	ldw	r5,-12(fp)
   5006c:	e1bffe17 	ldw	r6,-8(fp)
   50070:	e1ffff17 	ldw	r7,-4(fp)
   50074:	00408f80 	call	408f8 <alt_iic_isr_register>
}  
   50078:	e037883a 	mov	sp,fp
   5007c:	dfc00117 	ldw	ra,4(sp)
   50080:	df000017 	ldw	fp,0(sp)
   50084:	dec00204 	addi	sp,sp,8
   50088:	f800283a 	ret

0005008c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   5008c:	defff904 	addi	sp,sp,-28
   50090:	df000615 	stw	fp,24(sp)
   50094:	df000604 	addi	fp,sp,24
   50098:	e13ffe15 	stw	r4,-8(fp)
   5009c:	e17fff15 	stw	r5,-4(fp)
   500a0:	e0bfff17 	ldw	r2,-4(fp)
   500a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   500a8:	0005303a 	rdctl	r2,status
   500ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   500b0:	e0fffb17 	ldw	r3,-20(fp)
   500b4:	00bfff84 	movi	r2,-2
   500b8:	1884703a 	and	r2,r3,r2
   500bc:	1001703a 	wrctl	status,r2
  
  return context;
   500c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   500c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   500c8:	e0bffa17 	ldw	r2,-24(fp)
   500cc:	00c00044 	movi	r3,1
   500d0:	1884983a 	sll	r2,r3,r2
   500d4:	1007883a 	mov	r3,r2
   500d8:	00800174 	movhi	r2,5
   500dc:	10978304 	addi	r2,r2,24076
   500e0:	10800017 	ldw	r2,0(r2)
   500e4:	1886b03a 	or	r3,r3,r2
   500e8:	00800174 	movhi	r2,5
   500ec:	10978304 	addi	r2,r2,24076
   500f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   500f4:	00800174 	movhi	r2,5
   500f8:	10978304 	addi	r2,r2,24076
   500fc:	10800017 	ldw	r2,0(r2)
   50100:	100170fa 	wrctl	ienable,r2
   50104:	e0bffc17 	ldw	r2,-16(fp)
   50108:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5010c:	e0bffd17 	ldw	r2,-12(fp)
   50110:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   50114:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   50118:	0001883a 	nop
}
   5011c:	e037883a 	mov	sp,fp
   50120:	df000017 	ldw	fp,0(sp)
   50124:	dec00104 	addi	sp,sp,4
   50128:	f800283a 	ret

0005012c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   5012c:	defff904 	addi	sp,sp,-28
   50130:	df000615 	stw	fp,24(sp)
   50134:	df000604 	addi	fp,sp,24
   50138:	e13ffe15 	stw	r4,-8(fp)
   5013c:	e17fff15 	stw	r5,-4(fp)
   50140:	e0bfff17 	ldw	r2,-4(fp)
   50144:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50148:	0005303a 	rdctl	r2,status
   5014c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50150:	e0fffb17 	ldw	r3,-20(fp)
   50154:	00bfff84 	movi	r2,-2
   50158:	1884703a 	and	r2,r3,r2
   5015c:	1001703a 	wrctl	status,r2
  
  return context;
   50160:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   50164:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   50168:	e0bffa17 	ldw	r2,-24(fp)
   5016c:	00c00044 	movi	r3,1
   50170:	1884983a 	sll	r2,r3,r2
   50174:	0084303a 	nor	r2,zero,r2
   50178:	1007883a 	mov	r3,r2
   5017c:	00800174 	movhi	r2,5
   50180:	10978304 	addi	r2,r2,24076
   50184:	10800017 	ldw	r2,0(r2)
   50188:	1886703a 	and	r3,r3,r2
   5018c:	00800174 	movhi	r2,5
   50190:	10978304 	addi	r2,r2,24076
   50194:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   50198:	00800174 	movhi	r2,5
   5019c:	10978304 	addi	r2,r2,24076
   501a0:	10800017 	ldw	r2,0(r2)
   501a4:	100170fa 	wrctl	ienable,r2
   501a8:	e0bffc17 	ldw	r2,-16(fp)
   501ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   501b0:	e0bffd17 	ldw	r2,-12(fp)
   501b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   501b8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   501bc:	0001883a 	nop
}
   501c0:	e037883a 	mov	sp,fp
   501c4:	df000017 	ldw	fp,0(sp)
   501c8:	dec00104 	addi	sp,sp,4
   501cc:	f800283a 	ret

000501d0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   501d0:	defffc04 	addi	sp,sp,-16
   501d4:	df000315 	stw	fp,12(sp)
   501d8:	df000304 	addi	fp,sp,12
   501dc:	e13ffe15 	stw	r4,-8(fp)
   501e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   501e4:	000530fa 	rdctl	r2,ienable
   501e8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   501ec:	e0bfff17 	ldw	r2,-4(fp)
   501f0:	00c00044 	movi	r3,1
   501f4:	1884983a 	sll	r2,r3,r2
   501f8:	1007883a 	mov	r3,r2
   501fc:	e0bffd17 	ldw	r2,-12(fp)
   50200:	1884703a 	and	r2,r3,r2
   50204:	1004c03a 	cmpne	r2,r2,zero
   50208:	10803fcc 	andi	r2,r2,255
}
   5020c:	e037883a 	mov	sp,fp
   50210:	df000017 	ldw	fp,0(sp)
   50214:	dec00104 	addi	sp,sp,4
   50218:	f800283a 	ret

0005021c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5021c:	defffe04 	addi	sp,sp,-8
   50220:	dfc00115 	stw	ra,4(sp)
   50224:	df000015 	stw	fp,0(sp)
   50228:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5022c:	00800174 	movhi	r2,5
   50230:	1090a404 	addi	r2,r2,17040
   50234:	10800017 	ldw	r2,0(r2)
   50238:	10000526 	beq	r2,zero,50250 <alt_get_errno+0x34>
   5023c:	00800174 	movhi	r2,5
   50240:	1090a404 	addi	r2,r2,17040
   50244:	10800017 	ldw	r2,0(r2)
   50248:	103ee83a 	callr	r2
   5024c:	00000206 	br	50258 <alt_get_errno+0x3c>
   50250:	00800174 	movhi	r2,5
   50254:	10978204 	addi	r2,r2,24072
}
   50258:	e037883a 	mov	sp,fp
   5025c:	dfc00117 	ldw	ra,4(sp)
   50260:	df000017 	ldw	fp,0(sp)
   50264:	dec00204 	addi	sp,sp,8
   50268:	f800283a 	ret

0005026c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   5026c:	deffed04 	addi	sp,sp,-76
   50270:	dfc01215 	stw	ra,72(sp)
   50274:	df001115 	stw	fp,68(sp)
   50278:	df001104 	addi	fp,sp,68
   5027c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   50280:	e0bfff17 	ldw	r2,-4(fp)
   50284:	10000616 	blt	r2,zero,502a0 <isatty+0x34>
   50288:	e0bfff17 	ldw	r2,-4(fp)
   5028c:	10c00324 	muli	r3,r2,12
   50290:	00800174 	movhi	r2,5
   50294:	108c1e04 	addi	r2,r2,12408
   50298:	1885883a 	add	r2,r3,r2
   5029c:	00000106 	br	502a4 <isatty+0x38>
   502a0:	0005883a 	mov	r2,zero
   502a4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   502a8:	e0bfef17 	ldw	r2,-68(fp)
   502ac:	10000e26 	beq	r2,zero,502e8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   502b0:	e0bfef17 	ldw	r2,-68(fp)
   502b4:	10800017 	ldw	r2,0(r2)
   502b8:	10800817 	ldw	r2,32(r2)
   502bc:	1000021e 	bne	r2,zero,502c8 <isatty+0x5c>
    {
      return 1;
   502c0:	00800044 	movi	r2,1
   502c4:	00000d06 	br	502fc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   502c8:	e0bff004 	addi	r2,fp,-64
   502cc:	e13fff17 	ldw	r4,-4(fp)
   502d0:	100b883a 	mov	r5,r2
   502d4:	004ff8c0 	call	4ff8c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   502d8:	e0bff117 	ldw	r2,-60(fp)
   502dc:	10880020 	cmpeqi	r2,r2,8192
   502e0:	10803fcc 	andi	r2,r2,255
   502e4:	00000506 	br	502fc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   502e8:	005021c0 	call	5021c <alt_get_errno>
   502ec:	1007883a 	mov	r3,r2
   502f0:	00801444 	movi	r2,81
   502f4:	18800015 	stw	r2,0(r3)
    return 0;
   502f8:	0005883a 	mov	r2,zero
  }
}
   502fc:	e037883a 	mov	sp,fp
   50300:	dfc00117 	ldw	ra,4(sp)
   50304:	df000017 	ldw	fp,0(sp)
   50308:	dec00204 	addi	sp,sp,8
   5030c:	f800283a 	ret

00050310 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   50310:	defffc04 	addi	sp,sp,-16
   50314:	df000315 	stw	fp,12(sp)
   50318:	df000304 	addi	fp,sp,12
   5031c:	e13ffd15 	stw	r4,-12(fp)
   50320:	e17ffe15 	stw	r5,-8(fp)
   50324:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   50328:	e0fffe17 	ldw	r3,-8(fp)
   5032c:	e0bffd17 	ldw	r2,-12(fp)
   50330:	18800c26 	beq	r3,r2,50364 <alt_load_section+0x54>
  {
    while( to != end )
   50334:	00000806 	br	50358 <alt_load_section+0x48>
    {
      *to++ = *from++;
   50338:	e0bffe17 	ldw	r2,-8(fp)
   5033c:	10c00104 	addi	r3,r2,4
   50340:	e0fffe15 	stw	r3,-8(fp)
   50344:	e0fffd17 	ldw	r3,-12(fp)
   50348:	19000104 	addi	r4,r3,4
   5034c:	e13ffd15 	stw	r4,-12(fp)
   50350:	18c00017 	ldw	r3,0(r3)
   50354:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   50358:	e0fffe17 	ldw	r3,-8(fp)
   5035c:	e0bfff17 	ldw	r2,-4(fp)
   50360:	18bff51e 	bne	r3,r2,50338 <__alt_data_end+0xfffd59b8>
    {
      *to++ = *from++;
    }
  }
}
   50364:	e037883a 	mov	sp,fp
   50368:	df000017 	ldw	fp,0(sp)
   5036c:	dec00104 	addi	sp,sp,4
   50370:	f800283a 	ret

00050374 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   50374:	defffe04 	addi	sp,sp,-8
   50378:	dfc00115 	stw	ra,4(sp)
   5037c:	df000015 	stw	fp,0(sp)
   50380:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   50384:	01000174 	movhi	r4,5
   50388:	2110a904 	addi	r4,r4,17060
   5038c:	01400174 	movhi	r5,5
   50390:	2949eb04 	addi	r5,r5,10156
   50394:	01800174 	movhi	r6,5
   50398:	3190a904 	addi	r6,r6,17060
   5039c:	00503100 	call	50310 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   503a0:	01000134 	movhi	r4,4
   503a4:	21000804 	addi	r4,r4,32
   503a8:	01400134 	movhi	r5,4
   503ac:	29400804 	addi	r5,r5,32
   503b0:	01800134 	movhi	r6,4
   503b4:	31809304 	addi	r6,r6,588
   503b8:	00503100 	call	50310 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   503bc:	01000174 	movhi	r4,5
   503c0:	21091704 	addi	r4,r4,9308
   503c4:	01400174 	movhi	r5,5
   503c8:	29491704 	addi	r5,r5,9308
   503cc:	01800174 	movhi	r6,5
   503d0:	3189eb04 	addi	r6,r6,10156
   503d4:	00503100 	call	50310 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   503d8:	00516c80 	call	516c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   503dc:	00518b80 	call	518b8 <alt_icache_flush_all>
}
   503e0:	e037883a 	mov	sp,fp
   503e4:	dfc00117 	ldw	ra,4(sp)
   503e8:	df000017 	ldw	fp,0(sp)
   503ec:	dec00204 	addi	sp,sp,8
   503f0:	f800283a 	ret

000503f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   503f4:	defffe04 	addi	sp,sp,-8
   503f8:	dfc00115 	stw	ra,4(sp)
   503fc:	df000015 	stw	fp,0(sp)
   50400:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   50404:	00800174 	movhi	r2,5
   50408:	1090a404 	addi	r2,r2,17040
   5040c:	10800017 	ldw	r2,0(r2)
   50410:	10000526 	beq	r2,zero,50428 <alt_get_errno+0x34>
   50414:	00800174 	movhi	r2,5
   50418:	1090a404 	addi	r2,r2,17040
   5041c:	10800017 	ldw	r2,0(r2)
   50420:	103ee83a 	callr	r2
   50424:	00000206 	br	50430 <alt_get_errno+0x3c>
   50428:	00800174 	movhi	r2,5
   5042c:	10978204 	addi	r2,r2,24072
}
   50430:	e037883a 	mov	sp,fp
   50434:	dfc00117 	ldw	ra,4(sp)
   50438:	df000017 	ldw	fp,0(sp)
   5043c:	dec00204 	addi	sp,sp,8
   50440:	f800283a 	ret

00050444 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   50444:	defff904 	addi	sp,sp,-28
   50448:	dfc00615 	stw	ra,24(sp)
   5044c:	df000515 	stw	fp,20(sp)
   50450:	df000504 	addi	fp,sp,20
   50454:	e13ffd15 	stw	r4,-12(fp)
   50458:	e17ffe15 	stw	r5,-8(fp)
   5045c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   50460:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   50464:	e0bffd17 	ldw	r2,-12(fp)
   50468:	10000616 	blt	r2,zero,50484 <lseek+0x40>
   5046c:	e0bffd17 	ldw	r2,-12(fp)
   50470:	10c00324 	muli	r3,r2,12
   50474:	00800174 	movhi	r2,5
   50478:	108c1e04 	addi	r2,r2,12408
   5047c:	1885883a 	add	r2,r3,r2
   50480:	00000106 	br	50488 <lseek+0x44>
   50484:	0005883a 	mov	r2,zero
   50488:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   5048c:	e0bffc17 	ldw	r2,-16(fp)
   50490:	10001026 	beq	r2,zero,504d4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   50494:	e0bffc17 	ldw	r2,-16(fp)
   50498:	10800017 	ldw	r2,0(r2)
   5049c:	10800717 	ldw	r2,28(r2)
   504a0:	10000926 	beq	r2,zero,504c8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   504a4:	e0bffc17 	ldw	r2,-16(fp)
   504a8:	10800017 	ldw	r2,0(r2)
   504ac:	10800717 	ldw	r2,28(r2)
   504b0:	e13ffc17 	ldw	r4,-16(fp)
   504b4:	e17ffe17 	ldw	r5,-8(fp)
   504b8:	e1bfff17 	ldw	r6,-4(fp)
   504bc:	103ee83a 	callr	r2
   504c0:	e0bffb15 	stw	r2,-20(fp)
   504c4:	00000506 	br	504dc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   504c8:	00bfde84 	movi	r2,-134
   504cc:	e0bffb15 	stw	r2,-20(fp)
   504d0:	00000206 	br	504dc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   504d4:	00bfebc4 	movi	r2,-81
   504d8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   504dc:	e0bffb17 	ldw	r2,-20(fp)
   504e0:	1000070e 	bge	r2,zero,50500 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   504e4:	00503f40 	call	503f4 <alt_get_errno>
   504e8:	1007883a 	mov	r3,r2
   504ec:	e0bffb17 	ldw	r2,-20(fp)
   504f0:	0085c83a 	sub	r2,zero,r2
   504f4:	18800015 	stw	r2,0(r3)
    rc = -1;
   504f8:	00bfffc4 	movi	r2,-1
   504fc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   50500:	e0bffb17 	ldw	r2,-20(fp)
}
   50504:	e037883a 	mov	sp,fp
   50508:	dfc00117 	ldw	ra,4(sp)
   5050c:	df000017 	ldw	fp,0(sp)
   50510:	dec00204 	addi	sp,sp,8
   50514:	f800283a 	ret

00050518 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   50518:	defffd04 	addi	sp,sp,-12
   5051c:	dfc00215 	stw	ra,8(sp)
   50520:	df000115 	stw	fp,4(sp)
   50524:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   50528:	0009883a 	mov	r4,zero
   5052c:	00509ac0 	call	509ac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   50530:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   50534:	00509e00 	call	509e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   50538:	01000174 	movhi	r4,5
   5053c:	2109e304 	addi	r4,r4,10124
   50540:	01400174 	movhi	r5,5
   50544:	2949e304 	addi	r5,r5,10124
   50548:	01800174 	movhi	r6,5
   5054c:	3189e304 	addi	r6,r6,10124
   50550:	00519a80 	call	519a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   50554:	00518000 	call	51800 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   50558:	01000174 	movhi	r4,5
   5055c:	21061704 	addi	r4,r4,6236
   50560:	00521340 	call	52134 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   50564:	d126ee17 	ldw	r4,-25672(gp)
   50568:	d0e6ef17 	ldw	r3,-25668(gp)
   5056c:	d0a6f017 	ldw	r2,-25664(gp)
   50570:	180b883a 	mov	r5,r3
   50574:	100d883a 	mov	r6,r2
   50578:	00437900 	call	43790 <main>
   5057c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   50580:	01000044 	movi	r4,1
   50584:	004fe400 	call	4fe40 <close>
  exit (result);
   50588:	e13fff17 	ldw	r4,-4(fp)
   5058c:	00521480 	call	52148 <exit>

00050590 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   50590:	defffe04 	addi	sp,sp,-8
   50594:	df000115 	stw	fp,4(sp)
   50598:	df000104 	addi	fp,sp,4
   5059c:	e13fff15 	stw	r4,-4(fp)
}
   505a0:	e037883a 	mov	sp,fp
   505a4:	df000017 	ldw	fp,0(sp)
   505a8:	dec00104 	addi	sp,sp,4
   505ac:	f800283a 	ret

000505b0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   505b0:	defffe04 	addi	sp,sp,-8
   505b4:	df000115 	stw	fp,4(sp)
   505b8:	df000104 	addi	fp,sp,4
   505bc:	e13fff15 	stw	r4,-4(fp)
}
   505c0:	e037883a 	mov	sp,fp
   505c4:	df000017 	ldw	fp,0(sp)
   505c8:	dec00104 	addi	sp,sp,4
   505cc:	f800283a 	ret

000505d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   505d0:	defffe04 	addi	sp,sp,-8
   505d4:	dfc00115 	stw	ra,4(sp)
   505d8:	df000015 	stw	fp,0(sp)
   505dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   505e0:	00800174 	movhi	r2,5
   505e4:	1090a404 	addi	r2,r2,17040
   505e8:	10800017 	ldw	r2,0(r2)
   505ec:	10000526 	beq	r2,zero,50604 <alt_get_errno+0x34>
   505f0:	00800174 	movhi	r2,5
   505f4:	1090a404 	addi	r2,r2,17040
   505f8:	10800017 	ldw	r2,0(r2)
   505fc:	103ee83a 	callr	r2
   50600:	00000206 	br	5060c <alt_get_errno+0x3c>
   50604:	00800174 	movhi	r2,5
   50608:	10978204 	addi	r2,r2,24072
}
   5060c:	e037883a 	mov	sp,fp
   50610:	dfc00117 	ldw	ra,4(sp)
   50614:	df000017 	ldw	fp,0(sp)
   50618:	dec00204 	addi	sp,sp,8
   5061c:	f800283a 	ret

00050620 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   50620:	defff904 	addi	sp,sp,-28
   50624:	dfc00615 	stw	ra,24(sp)
   50628:	df000515 	stw	fp,20(sp)
   5062c:	df000504 	addi	fp,sp,20
   50630:	e13ffd15 	stw	r4,-12(fp)
   50634:	e17ffe15 	stw	r5,-8(fp)
   50638:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   5063c:	e0bffd17 	ldw	r2,-12(fp)
   50640:	10000616 	blt	r2,zero,5065c <read+0x3c>
   50644:	e0bffd17 	ldw	r2,-12(fp)
   50648:	10c00324 	muli	r3,r2,12
   5064c:	00800174 	movhi	r2,5
   50650:	108c1e04 	addi	r2,r2,12408
   50654:	1885883a 	add	r2,r3,r2
   50658:	00000106 	br	50660 <read+0x40>
   5065c:	0005883a 	mov	r2,zero
   50660:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   50664:	e0bffb17 	ldw	r2,-20(fp)
   50668:	10002226 	beq	r2,zero,506f4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   5066c:	e0bffb17 	ldw	r2,-20(fp)
   50670:	10800217 	ldw	r2,8(r2)
   50674:	108000cc 	andi	r2,r2,3
   50678:	10800060 	cmpeqi	r2,r2,1
   5067c:	1000181e 	bne	r2,zero,506e0 <read+0xc0>
        (fd->dev->read))
   50680:	e0bffb17 	ldw	r2,-20(fp)
   50684:	10800017 	ldw	r2,0(r2)
   50688:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   5068c:	10001426 	beq	r2,zero,506e0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   50690:	e0bffb17 	ldw	r2,-20(fp)
   50694:	10800017 	ldw	r2,0(r2)
   50698:	10800517 	ldw	r2,20(r2)
   5069c:	e0ffff17 	ldw	r3,-4(fp)
   506a0:	e13ffb17 	ldw	r4,-20(fp)
   506a4:	e17ffe17 	ldw	r5,-8(fp)
   506a8:	180d883a 	mov	r6,r3
   506ac:	103ee83a 	callr	r2
   506b0:	e0bffc15 	stw	r2,-16(fp)
   506b4:	e0bffc17 	ldw	r2,-16(fp)
   506b8:	1000070e 	bge	r2,zero,506d8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   506bc:	00505d00 	call	505d0 <alt_get_errno>
   506c0:	1007883a 	mov	r3,r2
   506c4:	e0bffc17 	ldw	r2,-16(fp)
   506c8:	0085c83a 	sub	r2,zero,r2
   506cc:	18800015 	stw	r2,0(r3)
          return -1;
   506d0:	00bfffc4 	movi	r2,-1
   506d4:	00000c06 	br	50708 <read+0xe8>
        }
        return rval;
   506d8:	e0bffc17 	ldw	r2,-16(fp)
   506dc:	00000a06 	br	50708 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   506e0:	00505d00 	call	505d0 <alt_get_errno>
   506e4:	1007883a 	mov	r3,r2
   506e8:	00800344 	movi	r2,13
   506ec:	18800015 	stw	r2,0(r3)
   506f0:	00000406 	br	50704 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   506f4:	00505d00 	call	505d0 <alt_get_errno>
   506f8:	1007883a 	mov	r3,r2
   506fc:	00801444 	movi	r2,81
   50700:	18800015 	stw	r2,0(r3)
  }
  return -1;
   50704:	00bfffc4 	movi	r2,-1
}
   50708:	e037883a 	mov	sp,fp
   5070c:	dfc00117 	ldw	ra,4(sp)
   50710:	df000017 	ldw	fp,0(sp)
   50714:	dec00204 	addi	sp,sp,8
   50718:	f800283a 	ret

0005071c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   5071c:	defffe04 	addi	sp,sp,-8
   50720:	df000115 	stw	fp,4(sp)
   50724:	df000104 	addi	fp,sp,4
   50728:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   5072c:	e0bfff17 	ldw	r2,-4(fp)
   50730:	108000d0 	cmplti	r2,r2,3
   50734:	10000d1e 	bne	r2,zero,5076c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   50738:	00800174 	movhi	r2,5
   5073c:	108c1e04 	addi	r2,r2,12408
   50740:	e0ffff17 	ldw	r3,-4(fp)
   50744:	18c00324 	muli	r3,r3,12
   50748:	10c5883a 	add	r2,r2,r3
   5074c:	10800204 	addi	r2,r2,8
   50750:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   50754:	00800174 	movhi	r2,5
   50758:	108c1e04 	addi	r2,r2,12408
   5075c:	e0ffff17 	ldw	r3,-4(fp)
   50760:	18c00324 	muli	r3,r3,12
   50764:	10c5883a 	add	r2,r2,r3
   50768:	10000015 	stw	zero,0(r2)
  }
}
   5076c:	e037883a 	mov	sp,fp
   50770:	df000017 	ldw	fp,0(sp)
   50774:	dec00104 	addi	sp,sp,4
   50778:	f800283a 	ret

0005077c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   5077c:	defff904 	addi	sp,sp,-28
   50780:	df000615 	stw	fp,24(sp)
   50784:	df000604 	addi	fp,sp,24
   50788:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5078c:	0005303a 	rdctl	r2,status
   50790:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50794:	e0fffc17 	ldw	r3,-16(fp)
   50798:	00bfff84 	movi	r2,-2
   5079c:	1884703a 	and	r2,r3,r2
   507a0:	1001703a 	wrctl	status,r2
  
  return context;
   507a4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   507a8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   507ac:	d0a01017 	ldw	r2,-32704(gp)
   507b0:	10c000c4 	addi	r3,r2,3
   507b4:	00bfff04 	movi	r2,-4
   507b8:	1884703a 	and	r2,r3,r2
   507bc:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   507c0:	d0e01017 	ldw	r3,-32704(gp)
   507c4:	e0bfff17 	ldw	r2,-4(fp)
   507c8:	1887883a 	add	r3,r3,r2
   507cc:	00800234 	movhi	r2,8
   507d0:	10aa6004 	addi	r2,r2,-22144
   507d4:	10c0062e 	bgeu	r2,r3,507f0 <sbrk+0x74>
   507d8:	e0bffa17 	ldw	r2,-24(fp)
   507dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   507e0:	e0bffd17 	ldw	r2,-12(fp)
   507e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   507e8:	00bfffc4 	movi	r2,-1
   507ec:	00000b06 	br	5081c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   507f0:	d0a01017 	ldw	r2,-32704(gp)
   507f4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   507f8:	d0e01017 	ldw	r3,-32704(gp)
   507fc:	e0bfff17 	ldw	r2,-4(fp)
   50800:	1885883a 	add	r2,r3,r2
   50804:	d0a01015 	stw	r2,-32704(gp)
   50808:	e0bffa17 	ldw	r2,-24(fp)
   5080c:	e0bffe15 	stw	r2,-8(fp)
   50810:	e0bffe17 	ldw	r2,-8(fp)
   50814:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   50818:	e0bffb17 	ldw	r2,-20(fp)
} 
   5081c:	e037883a 	mov	sp,fp
   50820:	df000017 	ldw	fp,0(sp)
   50824:	dec00104 	addi	sp,sp,4
   50828:	f800283a 	ret

0005082c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5082c:	defffe04 	addi	sp,sp,-8
   50830:	dfc00115 	stw	ra,4(sp)
   50834:	df000015 	stw	fp,0(sp)
   50838:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5083c:	00800174 	movhi	r2,5
   50840:	1090a404 	addi	r2,r2,17040
   50844:	10800017 	ldw	r2,0(r2)
   50848:	10000526 	beq	r2,zero,50860 <alt_get_errno+0x34>
   5084c:	00800174 	movhi	r2,5
   50850:	1090a404 	addi	r2,r2,17040
   50854:	10800017 	ldw	r2,0(r2)
   50858:	103ee83a 	callr	r2
   5085c:	00000206 	br	50868 <alt_get_errno+0x3c>
   50860:	00800174 	movhi	r2,5
   50864:	10978204 	addi	r2,r2,24072
}
   50868:	e037883a 	mov	sp,fp
   5086c:	dfc00117 	ldw	ra,4(sp)
   50870:	df000017 	ldw	fp,0(sp)
   50874:	dec00204 	addi	sp,sp,8
   50878:	f800283a 	ret

0005087c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   5087c:	defff904 	addi	sp,sp,-28
   50880:	dfc00615 	stw	ra,24(sp)
   50884:	df000515 	stw	fp,20(sp)
   50888:	df000504 	addi	fp,sp,20
   5088c:	e13ffd15 	stw	r4,-12(fp)
   50890:	e17ffe15 	stw	r5,-8(fp)
   50894:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   50898:	e0bffd17 	ldw	r2,-12(fp)
   5089c:	10000616 	blt	r2,zero,508b8 <write+0x3c>
   508a0:	e0bffd17 	ldw	r2,-12(fp)
   508a4:	10c00324 	muli	r3,r2,12
   508a8:	00800174 	movhi	r2,5
   508ac:	108c1e04 	addi	r2,r2,12408
   508b0:	1885883a 	add	r2,r3,r2
   508b4:	00000106 	br	508bc <write+0x40>
   508b8:	0005883a 	mov	r2,zero
   508bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   508c0:	e0bffb17 	ldw	r2,-20(fp)
   508c4:	10002126 	beq	r2,zero,5094c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   508c8:	e0bffb17 	ldw	r2,-20(fp)
   508cc:	10800217 	ldw	r2,8(r2)
   508d0:	108000cc 	andi	r2,r2,3
   508d4:	10001826 	beq	r2,zero,50938 <write+0xbc>
   508d8:	e0bffb17 	ldw	r2,-20(fp)
   508dc:	10800017 	ldw	r2,0(r2)
   508e0:	10800617 	ldw	r2,24(r2)
   508e4:	10001426 	beq	r2,zero,50938 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   508e8:	e0bffb17 	ldw	r2,-20(fp)
   508ec:	10800017 	ldw	r2,0(r2)
   508f0:	10800617 	ldw	r2,24(r2)
   508f4:	e0ffff17 	ldw	r3,-4(fp)
   508f8:	e13ffb17 	ldw	r4,-20(fp)
   508fc:	e17ffe17 	ldw	r5,-8(fp)
   50900:	180d883a 	mov	r6,r3
   50904:	103ee83a 	callr	r2
   50908:	e0bffc15 	stw	r2,-16(fp)
   5090c:	e0bffc17 	ldw	r2,-16(fp)
   50910:	1000070e 	bge	r2,zero,50930 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   50914:	005082c0 	call	5082c <alt_get_errno>
   50918:	1007883a 	mov	r3,r2
   5091c:	e0bffc17 	ldw	r2,-16(fp)
   50920:	0085c83a 	sub	r2,zero,r2
   50924:	18800015 	stw	r2,0(r3)
        return -1;
   50928:	00bfffc4 	movi	r2,-1
   5092c:	00000c06 	br	50960 <write+0xe4>
      }
      return rval;
   50930:	e0bffc17 	ldw	r2,-16(fp)
   50934:	00000a06 	br	50960 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   50938:	005082c0 	call	5082c <alt_get_errno>
   5093c:	1007883a 	mov	r3,r2
   50940:	00800344 	movi	r2,13
   50944:	18800015 	stw	r2,0(r3)
   50948:	00000406 	br	5095c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   5094c:	005082c0 	call	5082c <alt_get_errno>
   50950:	1007883a 	mov	r3,r2
   50954:	00801444 	movi	r2,81
   50958:	18800015 	stw	r2,0(r3)
  }
  return -1;
   5095c:	00bfffc4 	movi	r2,-1
}
   50960:	e037883a 	mov	sp,fp
   50964:	dfc00117 	ldw	ra,4(sp)
   50968:	df000017 	ldw	fp,0(sp)
   5096c:	dec00204 	addi	sp,sp,8
   50970:	f800283a 	ret

00050974 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   50974:	defffd04 	addi	sp,sp,-12
   50978:	dfc00215 	stw	ra,8(sp)
   5097c:	df000115 	stw	fp,4(sp)
   50980:	df000104 	addi	fp,sp,4
   50984:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   50988:	e13fff17 	ldw	r4,-4(fp)
   5098c:	01400174 	movhi	r5,5
   50990:	2950a104 	addi	r5,r5,17028
   50994:	005175c0 	call	5175c <alt_dev_llist_insert>
}
   50998:	e037883a 	mov	sp,fp
   5099c:	dfc00117 	ldw	ra,4(sp)
   509a0:	df000017 	ldw	fp,0(sp)
   509a4:	dec00204 	addi	sp,sp,8
   509a8:	f800283a 	ret

000509ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   509ac:	defffd04 	addi	sp,sp,-12
   509b0:	dfc00215 	stw	ra,8(sp)
   509b4:	df000115 	stw	fp,4(sp)
   509b8:	df000104 	addi	fp,sp,4
   509bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   509c0:	0051e300 	call	51e30 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   509c4:	00800044 	movi	r2,1
   509c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   509cc:	e037883a 	mov	sp,fp
   509d0:	dfc00117 	ldw	ra,4(sp)
   509d4:	df000017 	ldw	fp,0(sp)
   509d8:	dec00204 	addi	sp,sp,8
   509dc:	f800283a 	ret

000509e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   509e0:	defffe04 	addi	sp,sp,-8
   509e4:	dfc00115 	stw	ra,4(sp)
   509e8:	df000015 	stw	fp,0(sp)
   509ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK, sys_clk);
   509f0:	01000234 	movhi	r4,8
   509f4:	21041804 	addi	r4,r4,4192
   509f8:	000b883a 	mov	r5,zero
   509fc:	018000c4 	movi	r6,3
   50a00:	01c0fa04 	movi	r7,1000
   50a04:	00515000 	call	51500 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   50a08:	01000174 	movhi	r4,5
   50a0c:	210c8804 	addi	r4,r4,12832
   50a10:	000b883a 	mov	r5,zero
   50a14:	000d883a 	mov	r6,zero
   50a18:	0050ba40 	call	50ba4 <altera_avalon_jtag_uart_init>
   50a1c:	01000174 	movhi	r4,5
   50a20:	210c7e04 	addi	r4,r4,12792
   50a24:	00509740 	call	50974 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   50a28:	0001883a 	nop
}
   50a2c:	e037883a 	mov	sp,fp
   50a30:	dfc00117 	ldw	ra,4(sp)
   50a34:	df000017 	ldw	fp,0(sp)
   50a38:	dec00204 	addi	sp,sp,8
   50a3c:	f800283a 	ret

00050a40 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   50a40:	defffa04 	addi	sp,sp,-24
   50a44:	dfc00515 	stw	ra,20(sp)
   50a48:	df000415 	stw	fp,16(sp)
   50a4c:	df000404 	addi	fp,sp,16
   50a50:	e13ffd15 	stw	r4,-12(fp)
   50a54:	e17ffe15 	stw	r5,-8(fp)
   50a58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   50a5c:	e0bffd17 	ldw	r2,-12(fp)
   50a60:	10800017 	ldw	r2,0(r2)
   50a64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   50a68:	e0bffc17 	ldw	r2,-16(fp)
   50a6c:	10c00a04 	addi	r3,r2,40
   50a70:	e0bffd17 	ldw	r2,-12(fp)
   50a74:	10800217 	ldw	r2,8(r2)
   50a78:	1809883a 	mov	r4,r3
   50a7c:	e17ffe17 	ldw	r5,-8(fp)
   50a80:	e1bfff17 	ldw	r6,-4(fp)
   50a84:	100f883a 	mov	r7,r2
   50a88:	00510680 	call	51068 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   50a8c:	e037883a 	mov	sp,fp
   50a90:	dfc00117 	ldw	ra,4(sp)
   50a94:	df000017 	ldw	fp,0(sp)
   50a98:	dec00204 	addi	sp,sp,8
   50a9c:	f800283a 	ret

00050aa0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   50aa0:	defffa04 	addi	sp,sp,-24
   50aa4:	dfc00515 	stw	ra,20(sp)
   50aa8:	df000415 	stw	fp,16(sp)
   50aac:	df000404 	addi	fp,sp,16
   50ab0:	e13ffd15 	stw	r4,-12(fp)
   50ab4:	e17ffe15 	stw	r5,-8(fp)
   50ab8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   50abc:	e0bffd17 	ldw	r2,-12(fp)
   50ac0:	10800017 	ldw	r2,0(r2)
   50ac4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   50ac8:	e0bffc17 	ldw	r2,-16(fp)
   50acc:	10c00a04 	addi	r3,r2,40
   50ad0:	e0bffd17 	ldw	r2,-12(fp)
   50ad4:	10800217 	ldw	r2,8(r2)
   50ad8:	1809883a 	mov	r4,r3
   50adc:	e17ffe17 	ldw	r5,-8(fp)
   50ae0:	e1bfff17 	ldw	r6,-4(fp)
   50ae4:	100f883a 	mov	r7,r2
   50ae8:	00512740 	call	51274 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   50aec:	e037883a 	mov	sp,fp
   50af0:	dfc00117 	ldw	ra,4(sp)
   50af4:	df000017 	ldw	fp,0(sp)
   50af8:	dec00204 	addi	sp,sp,8
   50afc:	f800283a 	ret

00050b00 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   50b00:	defffc04 	addi	sp,sp,-16
   50b04:	dfc00315 	stw	ra,12(sp)
   50b08:	df000215 	stw	fp,8(sp)
   50b0c:	df000204 	addi	fp,sp,8
   50b10:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   50b14:	e0bfff17 	ldw	r2,-4(fp)
   50b18:	10800017 	ldw	r2,0(r2)
   50b1c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   50b20:	e0bffe17 	ldw	r2,-8(fp)
   50b24:	10c00a04 	addi	r3,r2,40
   50b28:	e0bfff17 	ldw	r2,-4(fp)
   50b2c:	10800217 	ldw	r2,8(r2)
   50b30:	1809883a 	mov	r4,r3
   50b34:	100b883a 	mov	r5,r2
   50b38:	0050f140 	call	50f14 <altera_avalon_jtag_uart_close>
}
   50b3c:	e037883a 	mov	sp,fp
   50b40:	dfc00117 	ldw	ra,4(sp)
   50b44:	df000017 	ldw	fp,0(sp)
   50b48:	dec00204 	addi	sp,sp,8
   50b4c:	f800283a 	ret

00050b50 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   50b50:	defffa04 	addi	sp,sp,-24
   50b54:	dfc00515 	stw	ra,20(sp)
   50b58:	df000415 	stw	fp,16(sp)
   50b5c:	df000404 	addi	fp,sp,16
   50b60:	e13ffd15 	stw	r4,-12(fp)
   50b64:	e17ffe15 	stw	r5,-8(fp)
   50b68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   50b6c:	e0bffd17 	ldw	r2,-12(fp)
   50b70:	10800017 	ldw	r2,0(r2)
   50b74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   50b78:	e0bffc17 	ldw	r2,-16(fp)
   50b7c:	10800a04 	addi	r2,r2,40
   50b80:	1009883a 	mov	r4,r2
   50b84:	e17ffe17 	ldw	r5,-8(fp)
   50b88:	e1bfff17 	ldw	r6,-4(fp)
   50b8c:	0050f7c0 	call	50f7c <altera_avalon_jtag_uart_ioctl>
}
   50b90:	e037883a 	mov	sp,fp
   50b94:	dfc00117 	ldw	ra,4(sp)
   50b98:	df000017 	ldw	fp,0(sp)
   50b9c:	dec00204 	addi	sp,sp,8
   50ba0:	f800283a 	ret

00050ba4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   50ba4:	defffa04 	addi	sp,sp,-24
   50ba8:	dfc00515 	stw	ra,20(sp)
   50bac:	df000415 	stw	fp,16(sp)
   50bb0:	df000404 	addi	fp,sp,16
   50bb4:	e13ffd15 	stw	r4,-12(fp)
   50bb8:	e17ffe15 	stw	r5,-8(fp)
   50bbc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   50bc0:	e0bffd17 	ldw	r2,-12(fp)
   50bc4:	00c00044 	movi	r3,1
   50bc8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   50bcc:	e0bffd17 	ldw	r2,-12(fp)
   50bd0:	10800017 	ldw	r2,0(r2)
   50bd4:	10800104 	addi	r2,r2,4
   50bd8:	1007883a 	mov	r3,r2
   50bdc:	e0bffd17 	ldw	r2,-12(fp)
   50be0:	10800817 	ldw	r2,32(r2)
   50be4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   50be8:	e0fffe17 	ldw	r3,-8(fp)
   50bec:	e0bfff17 	ldw	r2,-4(fp)
   50bf0:	d8000015 	stw	zero,0(sp)
   50bf4:	1809883a 	mov	r4,r3
   50bf8:	100b883a 	mov	r5,r2
   50bfc:	01800174 	movhi	r6,5
   50c00:	31831a04 	addi	r6,r6,3176
   50c04:	e1fffd17 	ldw	r7,-12(fp)
   50c08:	005003c0 	call	5003c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   50c0c:	e0bffd17 	ldw	r2,-12(fp)
   50c10:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   50c14:	e0bffd17 	ldw	r2,-12(fp)
   50c18:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   50c1c:	00800174 	movhi	r2,5
   50c20:	10978704 	addi	r2,r2,24092
   50c24:	10800017 	ldw	r2,0(r2)
   50c28:	1809883a 	mov	r4,r3
   50c2c:	100b883a 	mov	r5,r2
   50c30:	01800174 	movhi	r6,5
   50c34:	31839b04 	addi	r6,r6,3692
   50c38:	e1fffd17 	ldw	r7,-12(fp)
   50c3c:	00515880 	call	51588 <alt_alarm_start>
   50c40:	1000040e 	bge	r2,zero,50c54 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   50c44:	e0fffd17 	ldw	r3,-12(fp)
   50c48:	00a00034 	movhi	r2,32768
   50c4c:	10bfffc4 	addi	r2,r2,-1
   50c50:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   50c54:	e037883a 	mov	sp,fp
   50c58:	dfc00117 	ldw	ra,4(sp)
   50c5c:	df000017 	ldw	fp,0(sp)
   50c60:	dec00204 	addi	sp,sp,8
   50c64:	f800283a 	ret

00050c68 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   50c68:	defff804 	addi	sp,sp,-32
   50c6c:	df000715 	stw	fp,28(sp)
   50c70:	df000704 	addi	fp,sp,28
   50c74:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   50c78:	e0bfff17 	ldw	r2,-4(fp)
   50c7c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   50c80:	e0bffb17 	ldw	r2,-20(fp)
   50c84:	10800017 	ldw	r2,0(r2)
   50c88:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   50c8c:	e0bffc17 	ldw	r2,-16(fp)
   50c90:	10800104 	addi	r2,r2,4
   50c94:	10800037 	ldwio	r2,0(r2)
   50c98:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   50c9c:	e0bffd17 	ldw	r2,-12(fp)
   50ca0:	1080c00c 	andi	r2,r2,768
   50ca4:	1000011e 	bne	r2,zero,50cac <altera_avalon_jtag_uart_irq+0x44>
      break;
   50ca8:	00006c06 	br	50e5c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   50cac:	e0bffd17 	ldw	r2,-12(fp)
   50cb0:	1080400c 	andi	r2,r2,256
   50cb4:	10003426 	beq	r2,zero,50d88 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   50cb8:	00800074 	movhi	r2,1
   50cbc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   50cc0:	e0bffb17 	ldw	r2,-20(fp)
   50cc4:	10800a17 	ldw	r2,40(r2)
   50cc8:	10800044 	addi	r2,r2,1
   50ccc:	1081ffcc 	andi	r2,r2,2047
   50cd0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   50cd4:	e0bffb17 	ldw	r2,-20(fp)
   50cd8:	10c00b17 	ldw	r3,44(r2)
   50cdc:	e0bffe17 	ldw	r2,-8(fp)
   50ce0:	1880011e 	bne	r3,r2,50ce8 <altera_avalon_jtag_uart_irq+0x80>
          break;
   50ce4:	00001606 	br	50d40 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   50ce8:	e0bffc17 	ldw	r2,-16(fp)
   50cec:	10800037 	ldwio	r2,0(r2)
   50cf0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   50cf4:	e0bff917 	ldw	r2,-28(fp)
   50cf8:	10a0000c 	andi	r2,r2,32768
   50cfc:	1000011e 	bne	r2,zero,50d04 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   50d00:	00000f06 	br	50d40 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   50d04:	e0bffb17 	ldw	r2,-20(fp)
   50d08:	10800a17 	ldw	r2,40(r2)
   50d0c:	e0fff917 	ldw	r3,-28(fp)
   50d10:	1809883a 	mov	r4,r3
   50d14:	e0fffb17 	ldw	r3,-20(fp)
   50d18:	1885883a 	add	r2,r3,r2
   50d1c:	10800e04 	addi	r2,r2,56
   50d20:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   50d24:	e0bffb17 	ldw	r2,-20(fp)
   50d28:	10800a17 	ldw	r2,40(r2)
   50d2c:	10800044 	addi	r2,r2,1
   50d30:	10c1ffcc 	andi	r3,r2,2047
   50d34:	e0bffb17 	ldw	r2,-20(fp)
   50d38:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   50d3c:	003fe006 	br	50cc0 <__alt_data_end+0xfffd6340>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   50d40:	e0bff917 	ldw	r2,-28(fp)
   50d44:	10bfffec 	andhi	r2,r2,65535
   50d48:	10000f26 	beq	r2,zero,50d88 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   50d4c:	e0bffb17 	ldw	r2,-20(fp)
   50d50:	10c00817 	ldw	r3,32(r2)
   50d54:	00bfff84 	movi	r2,-2
   50d58:	1886703a 	and	r3,r3,r2
   50d5c:	e0bffb17 	ldw	r2,-20(fp)
   50d60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   50d64:	e0bffc17 	ldw	r2,-16(fp)
   50d68:	10800104 	addi	r2,r2,4
   50d6c:	1007883a 	mov	r3,r2
   50d70:	e0bffb17 	ldw	r2,-20(fp)
   50d74:	10800817 	ldw	r2,32(r2)
   50d78:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   50d7c:	e0bffc17 	ldw	r2,-16(fp)
   50d80:	10800104 	addi	r2,r2,4
   50d84:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   50d88:	e0bffd17 	ldw	r2,-12(fp)
   50d8c:	1080800c 	andi	r2,r2,512
   50d90:	10003126 	beq	r2,zero,50e58 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   50d94:	e0bffd17 	ldw	r2,-12(fp)
   50d98:	1004d43a 	srli	r2,r2,16
   50d9c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   50da0:	00001406 	br	50df4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   50da4:	e0bffc17 	ldw	r2,-16(fp)
   50da8:	e0fffb17 	ldw	r3,-20(fp)
   50dac:	18c00d17 	ldw	r3,52(r3)
   50db0:	e13ffb17 	ldw	r4,-20(fp)
   50db4:	20c7883a 	add	r3,r4,r3
   50db8:	18c20e04 	addi	r3,r3,2104
   50dbc:	18c00003 	ldbu	r3,0(r3)
   50dc0:	18c03fcc 	andi	r3,r3,255
   50dc4:	18c0201c 	xori	r3,r3,128
   50dc8:	18ffe004 	addi	r3,r3,-128
   50dcc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   50dd0:	e0bffb17 	ldw	r2,-20(fp)
   50dd4:	10800d17 	ldw	r2,52(r2)
   50dd8:	10800044 	addi	r2,r2,1
   50ddc:	10c1ffcc 	andi	r3,r2,2047
   50de0:	e0bffb17 	ldw	r2,-20(fp)
   50de4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   50de8:	e0bffa17 	ldw	r2,-24(fp)
   50dec:	10bfffc4 	addi	r2,r2,-1
   50df0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   50df4:	e0bffa17 	ldw	r2,-24(fp)
   50df8:	10000526 	beq	r2,zero,50e10 <altera_avalon_jtag_uart_irq+0x1a8>
   50dfc:	e0bffb17 	ldw	r2,-20(fp)
   50e00:	10c00d17 	ldw	r3,52(r2)
   50e04:	e0bffb17 	ldw	r2,-20(fp)
   50e08:	10800c17 	ldw	r2,48(r2)
   50e0c:	18bfe51e 	bne	r3,r2,50da4 <__alt_data_end+0xfffd6424>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   50e10:	e0bffa17 	ldw	r2,-24(fp)
   50e14:	10001026 	beq	r2,zero,50e58 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   50e18:	e0bffb17 	ldw	r2,-20(fp)
   50e1c:	10c00817 	ldw	r3,32(r2)
   50e20:	00bfff44 	movi	r2,-3
   50e24:	1886703a 	and	r3,r3,r2
   50e28:	e0bffb17 	ldw	r2,-20(fp)
   50e2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   50e30:	e0bffb17 	ldw	r2,-20(fp)
   50e34:	10800017 	ldw	r2,0(r2)
   50e38:	10800104 	addi	r2,r2,4
   50e3c:	1007883a 	mov	r3,r2
   50e40:	e0bffb17 	ldw	r2,-20(fp)
   50e44:	10800817 	ldw	r2,32(r2)
   50e48:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   50e4c:	e0bffc17 	ldw	r2,-16(fp)
   50e50:	10800104 	addi	r2,r2,4
   50e54:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   50e58:	003f8c06 	br	50c8c <__alt_data_end+0xfffd630c>
}
   50e5c:	e037883a 	mov	sp,fp
   50e60:	df000017 	ldw	fp,0(sp)
   50e64:	dec00104 	addi	sp,sp,4
   50e68:	f800283a 	ret

00050e6c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   50e6c:	defff804 	addi	sp,sp,-32
   50e70:	df000715 	stw	fp,28(sp)
   50e74:	df000704 	addi	fp,sp,28
   50e78:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   50e7c:	e0bffb17 	ldw	r2,-20(fp)
   50e80:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   50e84:	e0bff917 	ldw	r2,-28(fp)
   50e88:	10800017 	ldw	r2,0(r2)
   50e8c:	10800104 	addi	r2,r2,4
   50e90:	10800037 	ldwio	r2,0(r2)
   50e94:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   50e98:	e0bffa17 	ldw	r2,-24(fp)
   50e9c:	1081000c 	andi	r2,r2,1024
   50ea0:	10000b26 	beq	r2,zero,50ed0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   50ea4:	e0bff917 	ldw	r2,-28(fp)
   50ea8:	10800017 	ldw	r2,0(r2)
   50eac:	10800104 	addi	r2,r2,4
   50eb0:	1007883a 	mov	r3,r2
   50eb4:	e0bff917 	ldw	r2,-28(fp)
   50eb8:	10800817 	ldw	r2,32(r2)
   50ebc:	10810014 	ori	r2,r2,1024
   50ec0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   50ec4:	e0bff917 	ldw	r2,-28(fp)
   50ec8:	10000915 	stw	zero,36(r2)
   50ecc:	00000a06 	br	50ef8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   50ed0:	e0bff917 	ldw	r2,-28(fp)
   50ed4:	10c00917 	ldw	r3,36(r2)
   50ed8:	00a00034 	movhi	r2,32768
   50edc:	10bfff04 	addi	r2,r2,-4
   50ee0:	10c00536 	bltu	r2,r3,50ef8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   50ee4:	e0bff917 	ldw	r2,-28(fp)
   50ee8:	10800917 	ldw	r2,36(r2)
   50eec:	10c00044 	addi	r3,r2,1
   50ef0:	e0bff917 	ldw	r2,-28(fp)
   50ef4:	10c00915 	stw	r3,36(r2)
   50ef8:	00800174 	movhi	r2,5
   50efc:	10978704 	addi	r2,r2,24092
   50f00:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   50f04:	e037883a 	mov	sp,fp
   50f08:	df000017 	ldw	fp,0(sp)
   50f0c:	dec00104 	addi	sp,sp,4
   50f10:	f800283a 	ret

00050f14 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   50f14:	defffd04 	addi	sp,sp,-12
   50f18:	df000215 	stw	fp,8(sp)
   50f1c:	df000204 	addi	fp,sp,8
   50f20:	e13ffe15 	stw	r4,-8(fp)
   50f24:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   50f28:	00000506 	br	50f40 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   50f2c:	e0bfff17 	ldw	r2,-4(fp)
   50f30:	1090000c 	andi	r2,r2,16384
   50f34:	10000226 	beq	r2,zero,50f40 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   50f38:	00bffd44 	movi	r2,-11
   50f3c:	00000b06 	br	50f6c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   50f40:	e0bffe17 	ldw	r2,-8(fp)
   50f44:	10c00d17 	ldw	r3,52(r2)
   50f48:	e0bffe17 	ldw	r2,-8(fp)
   50f4c:	10800c17 	ldw	r2,48(r2)
   50f50:	18800526 	beq	r3,r2,50f68 <altera_avalon_jtag_uart_close+0x54>
   50f54:	e0bffe17 	ldw	r2,-8(fp)
   50f58:	10c00917 	ldw	r3,36(r2)
   50f5c:	e0bffe17 	ldw	r2,-8(fp)
   50f60:	10800117 	ldw	r2,4(r2)
   50f64:	18bff136 	bltu	r3,r2,50f2c <__alt_data_end+0xfffd65ac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   50f68:	0005883a 	mov	r2,zero
}
   50f6c:	e037883a 	mov	sp,fp
   50f70:	df000017 	ldw	fp,0(sp)
   50f74:	dec00104 	addi	sp,sp,4
   50f78:	f800283a 	ret

00050f7c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   50f7c:	defffa04 	addi	sp,sp,-24
   50f80:	df000515 	stw	fp,20(sp)
   50f84:	df000504 	addi	fp,sp,20
   50f88:	e13ffd15 	stw	r4,-12(fp)
   50f8c:	e17ffe15 	stw	r5,-8(fp)
   50f90:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   50f94:	00bff9c4 	movi	r2,-25
   50f98:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   50f9c:	e0bffe17 	ldw	r2,-8(fp)
   50fa0:	10da8060 	cmpeqi	r3,r2,27137
   50fa4:	1800031e 	bne	r3,zero,50fb4 <altera_avalon_jtag_uart_ioctl+0x38>
   50fa8:	109a80a0 	cmpeqi	r2,r2,27138
   50fac:	1000191e 	bne	r2,zero,51014 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   50fb0:	00002806 	br	51054 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   50fb4:	e0bffd17 	ldw	r2,-12(fp)
   50fb8:	10c00117 	ldw	r3,4(r2)
   50fbc:	00a00034 	movhi	r2,32768
   50fc0:	10bfffc4 	addi	r2,r2,-1
   50fc4:	18801226 	beq	r3,r2,51010 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   50fc8:	e0bfff17 	ldw	r2,-4(fp)
   50fcc:	10800017 	ldw	r2,0(r2)
   50fd0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   50fd4:	e0bffc17 	ldw	r2,-16(fp)
   50fd8:	10800090 	cmplti	r2,r2,2
   50fdc:	1000061e 	bne	r2,zero,50ff8 <altera_avalon_jtag_uart_ioctl+0x7c>
   50fe0:	e0fffc17 	ldw	r3,-16(fp)
   50fe4:	00a00034 	movhi	r2,32768
   50fe8:	10bfffc4 	addi	r2,r2,-1
   50fec:	18800226 	beq	r3,r2,50ff8 <altera_avalon_jtag_uart_ioctl+0x7c>
   50ff0:	e0bffc17 	ldw	r2,-16(fp)
   50ff4:	00000206 	br	51000 <altera_avalon_jtag_uart_ioctl+0x84>
   50ff8:	00a00034 	movhi	r2,32768
   50ffc:	10bfff84 	addi	r2,r2,-2
   51000:	e0fffd17 	ldw	r3,-12(fp)
   51004:	18800115 	stw	r2,4(r3)
      rc = 0;
   51008:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   5100c:	00001106 	br	51054 <altera_avalon_jtag_uart_ioctl+0xd8>
   51010:	00001006 	br	51054 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   51014:	e0bffd17 	ldw	r2,-12(fp)
   51018:	10c00117 	ldw	r3,4(r2)
   5101c:	00a00034 	movhi	r2,32768
   51020:	10bfffc4 	addi	r2,r2,-1
   51024:	18800a26 	beq	r3,r2,51050 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   51028:	e0bffd17 	ldw	r2,-12(fp)
   5102c:	10c00917 	ldw	r3,36(r2)
   51030:	e0bffd17 	ldw	r2,-12(fp)
   51034:	10800117 	ldw	r2,4(r2)
   51038:	1885803a 	cmpltu	r2,r3,r2
   5103c:	10c03fcc 	andi	r3,r2,255
   51040:	e0bfff17 	ldw	r2,-4(fp)
   51044:	10c00015 	stw	r3,0(r2)
      rc = 0;
   51048:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   5104c:	00000006 	br	51050 <altera_avalon_jtag_uart_ioctl+0xd4>
   51050:	0001883a 	nop

  default:
    break;
  }

  return rc;
   51054:	e0bffb17 	ldw	r2,-20(fp)
}
   51058:	e037883a 	mov	sp,fp
   5105c:	df000017 	ldw	fp,0(sp)
   51060:	dec00104 	addi	sp,sp,4
   51064:	f800283a 	ret

00051068 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   51068:	defff304 	addi	sp,sp,-52
   5106c:	dfc00c15 	stw	ra,48(sp)
   51070:	df000b15 	stw	fp,44(sp)
   51074:	df000b04 	addi	fp,sp,44
   51078:	e13ffc15 	stw	r4,-16(fp)
   5107c:	e17ffd15 	stw	r5,-12(fp)
   51080:	e1bffe15 	stw	r6,-8(fp)
   51084:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   51088:	e0bffd17 	ldw	r2,-12(fp)
   5108c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   51090:	00004906 	br	511b8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   51094:	e0bffc17 	ldw	r2,-16(fp)
   51098:	10800a17 	ldw	r2,40(r2)
   5109c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   510a0:	e0bffc17 	ldw	r2,-16(fp)
   510a4:	10800b17 	ldw	r2,44(r2)
   510a8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   510ac:	e0fff717 	ldw	r3,-36(fp)
   510b0:	e0bff817 	ldw	r2,-32(fp)
   510b4:	18800536 	bltu	r3,r2,510cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   510b8:	e0fff717 	ldw	r3,-36(fp)
   510bc:	e0bff817 	ldw	r2,-32(fp)
   510c0:	1885c83a 	sub	r2,r3,r2
   510c4:	e0bff615 	stw	r2,-40(fp)
   510c8:	00000406 	br	510dc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   510cc:	00c20004 	movi	r3,2048
   510d0:	e0bff817 	ldw	r2,-32(fp)
   510d4:	1885c83a 	sub	r2,r3,r2
   510d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   510dc:	e0bff617 	ldw	r2,-40(fp)
   510e0:	1000011e 	bne	r2,zero,510e8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   510e4:	00001d06 	br	5115c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   510e8:	e0fffe17 	ldw	r3,-8(fp)
   510ec:	e0bff617 	ldw	r2,-40(fp)
   510f0:	1880022e 	bgeu	r3,r2,510fc <altera_avalon_jtag_uart_read+0x94>
        n = space;
   510f4:	e0bffe17 	ldw	r2,-8(fp)
   510f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   510fc:	e0bff817 	ldw	r2,-32(fp)
   51100:	10800e04 	addi	r2,r2,56
   51104:	e0fffc17 	ldw	r3,-16(fp)
   51108:	1885883a 	add	r2,r3,r2
   5110c:	e13ff517 	ldw	r4,-44(fp)
   51110:	100b883a 	mov	r5,r2
   51114:	e1bff617 	ldw	r6,-40(fp)
   51118:	00438e80 	call	438e8 <memcpy>
      ptr   += n;
   5111c:	e0fff517 	ldw	r3,-44(fp)
   51120:	e0bff617 	ldw	r2,-40(fp)
   51124:	1885883a 	add	r2,r3,r2
   51128:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   5112c:	e0fffe17 	ldw	r3,-8(fp)
   51130:	e0bff617 	ldw	r2,-40(fp)
   51134:	1885c83a 	sub	r2,r3,r2
   51138:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5113c:	e0fff817 	ldw	r3,-32(fp)
   51140:	e0bff617 	ldw	r2,-40(fp)
   51144:	1885883a 	add	r2,r3,r2
   51148:	10c1ffcc 	andi	r3,r2,2047
   5114c:	e0bffc17 	ldw	r2,-16(fp)
   51150:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   51154:	e0bffe17 	ldw	r2,-8(fp)
   51158:	00bfce16 	blt	zero,r2,51094 <__alt_data_end+0xfffd6714>

    /* If we read any data then return it */
    if (ptr != buffer)
   5115c:	e0fff517 	ldw	r3,-44(fp)
   51160:	e0bffd17 	ldw	r2,-12(fp)
   51164:	18800126 	beq	r3,r2,5116c <altera_avalon_jtag_uart_read+0x104>
      break;
   51168:	00001506 	br	511c0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   5116c:	e0bfff17 	ldw	r2,-4(fp)
   51170:	1090000c 	andi	r2,r2,16384
   51174:	10000126 	beq	r2,zero,5117c <altera_avalon_jtag_uart_read+0x114>
      break;
   51178:	00001106 	br	511c0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   5117c:	0001883a 	nop
   51180:	e0bffc17 	ldw	r2,-16(fp)
   51184:	10c00a17 	ldw	r3,40(r2)
   51188:	e0bff717 	ldw	r2,-36(fp)
   5118c:	1880051e 	bne	r3,r2,511a4 <altera_avalon_jtag_uart_read+0x13c>
   51190:	e0bffc17 	ldw	r2,-16(fp)
   51194:	10c00917 	ldw	r3,36(r2)
   51198:	e0bffc17 	ldw	r2,-16(fp)
   5119c:	10800117 	ldw	r2,4(r2)
   511a0:	18bff736 	bltu	r3,r2,51180 <__alt_data_end+0xfffd6800>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   511a4:	e0bffc17 	ldw	r2,-16(fp)
   511a8:	10c00a17 	ldw	r3,40(r2)
   511ac:	e0bff717 	ldw	r2,-36(fp)
   511b0:	1880011e 	bne	r3,r2,511b8 <altera_avalon_jtag_uart_read+0x150>
      break;
   511b4:	00000206 	br	511c0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   511b8:	e0bffe17 	ldw	r2,-8(fp)
   511bc:	00bfb516 	blt	zero,r2,51094 <__alt_data_end+0xfffd6714>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   511c0:	e0fff517 	ldw	r3,-44(fp)
   511c4:	e0bffd17 	ldw	r2,-12(fp)
   511c8:	18801826 	beq	r3,r2,5122c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   511cc:	0005303a 	rdctl	r2,status
   511d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   511d4:	e0fffa17 	ldw	r3,-24(fp)
   511d8:	00bfff84 	movi	r2,-2
   511dc:	1884703a 	and	r2,r3,r2
   511e0:	1001703a 	wrctl	status,r2
  
  return context;
   511e4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   511e8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   511ec:	e0bffc17 	ldw	r2,-16(fp)
   511f0:	10800817 	ldw	r2,32(r2)
   511f4:	10c00054 	ori	r3,r2,1
   511f8:	e0bffc17 	ldw	r2,-16(fp)
   511fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   51200:	e0bffc17 	ldw	r2,-16(fp)
   51204:	10800017 	ldw	r2,0(r2)
   51208:	10800104 	addi	r2,r2,4
   5120c:	1007883a 	mov	r3,r2
   51210:	e0bffc17 	ldw	r2,-16(fp)
   51214:	10800817 	ldw	r2,32(r2)
   51218:	18800035 	stwio	r2,0(r3)
   5121c:	e0bff917 	ldw	r2,-28(fp)
   51220:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51224:	e0bffb17 	ldw	r2,-20(fp)
   51228:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   5122c:	e0fff517 	ldw	r3,-44(fp)
   51230:	e0bffd17 	ldw	r2,-12(fp)
   51234:	18800426 	beq	r3,r2,51248 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   51238:	e0fff517 	ldw	r3,-44(fp)
   5123c:	e0bffd17 	ldw	r2,-12(fp)
   51240:	1885c83a 	sub	r2,r3,r2
   51244:	00000606 	br	51260 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   51248:	e0bfff17 	ldw	r2,-4(fp)
   5124c:	1090000c 	andi	r2,r2,16384
   51250:	10000226 	beq	r2,zero,5125c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   51254:	00bffd44 	movi	r2,-11
   51258:	00000106 	br	51260 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   5125c:	00bffec4 	movi	r2,-5
}
   51260:	e037883a 	mov	sp,fp
   51264:	dfc00117 	ldw	ra,4(sp)
   51268:	df000017 	ldw	fp,0(sp)
   5126c:	dec00204 	addi	sp,sp,8
   51270:	f800283a 	ret

00051274 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   51274:	defff304 	addi	sp,sp,-52
   51278:	dfc00c15 	stw	ra,48(sp)
   5127c:	df000b15 	stw	fp,44(sp)
   51280:	df000b04 	addi	fp,sp,44
   51284:	e13ffc15 	stw	r4,-16(fp)
   51288:	e17ffd15 	stw	r5,-12(fp)
   5128c:	e1bffe15 	stw	r6,-8(fp)
   51290:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   51294:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   51298:	e0bffd17 	ldw	r2,-12(fp)
   5129c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   512a0:	00003806 	br	51384 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   512a4:	e0bffc17 	ldw	r2,-16(fp)
   512a8:	10800c17 	ldw	r2,48(r2)
   512ac:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   512b0:	e0bffc17 	ldw	r2,-16(fp)
   512b4:	10800d17 	ldw	r2,52(r2)
   512b8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   512bc:	e0fff817 	ldw	r3,-32(fp)
   512c0:	e0bff517 	ldw	r2,-44(fp)
   512c4:	1880062e 	bgeu	r3,r2,512e0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   512c8:	e0fff517 	ldw	r3,-44(fp)
   512cc:	e0bff817 	ldw	r2,-32(fp)
   512d0:	1885c83a 	sub	r2,r3,r2
   512d4:	10bfffc4 	addi	r2,r2,-1
   512d8:	e0bff615 	stw	r2,-40(fp)
   512dc:	00000b06 	br	5130c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   512e0:	e0bff517 	ldw	r2,-44(fp)
   512e4:	10000526 	beq	r2,zero,512fc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   512e8:	00c20004 	movi	r3,2048
   512ec:	e0bff817 	ldw	r2,-32(fp)
   512f0:	1885c83a 	sub	r2,r3,r2
   512f4:	e0bff615 	stw	r2,-40(fp)
   512f8:	00000406 	br	5130c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   512fc:	00c1ffc4 	movi	r3,2047
   51300:	e0bff817 	ldw	r2,-32(fp)
   51304:	1885c83a 	sub	r2,r3,r2
   51308:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   5130c:	e0bff617 	ldw	r2,-40(fp)
   51310:	1000011e 	bne	r2,zero,51318 <altera_avalon_jtag_uart_write+0xa4>
        break;
   51314:	00001d06 	br	5138c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   51318:	e0fffe17 	ldw	r3,-8(fp)
   5131c:	e0bff617 	ldw	r2,-40(fp)
   51320:	1880022e 	bgeu	r3,r2,5132c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   51324:	e0bffe17 	ldw	r2,-8(fp)
   51328:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   5132c:	e0bff817 	ldw	r2,-32(fp)
   51330:	10820e04 	addi	r2,r2,2104
   51334:	e0fffc17 	ldw	r3,-16(fp)
   51338:	1885883a 	add	r2,r3,r2
   5133c:	1009883a 	mov	r4,r2
   51340:	e17ffd17 	ldw	r5,-12(fp)
   51344:	e1bff617 	ldw	r6,-40(fp)
   51348:	00438e80 	call	438e8 <memcpy>
      ptr   += n;
   5134c:	e0fffd17 	ldw	r3,-12(fp)
   51350:	e0bff617 	ldw	r2,-40(fp)
   51354:	1885883a 	add	r2,r3,r2
   51358:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   5135c:	e0fffe17 	ldw	r3,-8(fp)
   51360:	e0bff617 	ldw	r2,-40(fp)
   51364:	1885c83a 	sub	r2,r3,r2
   51368:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5136c:	e0fff817 	ldw	r3,-32(fp)
   51370:	e0bff617 	ldw	r2,-40(fp)
   51374:	1885883a 	add	r2,r3,r2
   51378:	10c1ffcc 	andi	r3,r2,2047
   5137c:	e0bffc17 	ldw	r2,-16(fp)
   51380:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   51384:	e0bffe17 	ldw	r2,-8(fp)
   51388:	00bfc616 	blt	zero,r2,512a4 <__alt_data_end+0xfffd6924>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5138c:	0005303a 	rdctl	r2,status
   51390:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51394:	e0fffa17 	ldw	r3,-24(fp)
   51398:	00bfff84 	movi	r2,-2
   5139c:	1884703a 	and	r2,r3,r2
   513a0:	1001703a 	wrctl	status,r2
  
  return context;
   513a4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   513a8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   513ac:	e0bffc17 	ldw	r2,-16(fp)
   513b0:	10800817 	ldw	r2,32(r2)
   513b4:	10c00094 	ori	r3,r2,2
   513b8:	e0bffc17 	ldw	r2,-16(fp)
   513bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   513c0:	e0bffc17 	ldw	r2,-16(fp)
   513c4:	10800017 	ldw	r2,0(r2)
   513c8:	10800104 	addi	r2,r2,4
   513cc:	1007883a 	mov	r3,r2
   513d0:	e0bffc17 	ldw	r2,-16(fp)
   513d4:	10800817 	ldw	r2,32(r2)
   513d8:	18800035 	stwio	r2,0(r3)
   513dc:	e0bff917 	ldw	r2,-28(fp)
   513e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   513e4:	e0bffb17 	ldw	r2,-20(fp)
   513e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   513ec:	e0bffe17 	ldw	r2,-8(fp)
   513f0:	0080120e 	bge	zero,r2,5143c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   513f4:	e0bfff17 	ldw	r2,-4(fp)
   513f8:	1090000c 	andi	r2,r2,16384
   513fc:	10000126 	beq	r2,zero,51404 <altera_avalon_jtag_uart_write+0x190>
        break;
   51400:	00001006 	br	51444 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   51404:	0001883a 	nop
   51408:	e0bffc17 	ldw	r2,-16(fp)
   5140c:	10c00d17 	ldw	r3,52(r2)
   51410:	e0bff517 	ldw	r2,-44(fp)
   51414:	1880051e 	bne	r3,r2,5142c <altera_avalon_jtag_uart_write+0x1b8>
   51418:	e0bffc17 	ldw	r2,-16(fp)
   5141c:	10c00917 	ldw	r3,36(r2)
   51420:	e0bffc17 	ldw	r2,-16(fp)
   51424:	10800117 	ldw	r2,4(r2)
   51428:	18bff736 	bltu	r3,r2,51408 <__alt_data_end+0xfffd6a88>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   5142c:	e0bffc17 	ldw	r2,-16(fp)
   51430:	10800917 	ldw	r2,36(r2)
   51434:	10000126 	beq	r2,zero,5143c <altera_avalon_jtag_uart_write+0x1c8>
         break;
   51438:	00000206 	br	51444 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   5143c:	e0bffe17 	ldw	r2,-8(fp)
   51440:	00bf9716 	blt	zero,r2,512a0 <__alt_data_end+0xfffd6920>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   51444:	e0fffd17 	ldw	r3,-12(fp)
   51448:	e0bff717 	ldw	r2,-36(fp)
   5144c:	18800426 	beq	r3,r2,51460 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   51450:	e0fffd17 	ldw	r3,-12(fp)
   51454:	e0bff717 	ldw	r2,-36(fp)
   51458:	1885c83a 	sub	r2,r3,r2
   5145c:	00000606 	br	51478 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   51460:	e0bfff17 	ldw	r2,-4(fp)
   51464:	1090000c 	andi	r2,r2,16384
   51468:	10000226 	beq	r2,zero,51474 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   5146c:	00bffd44 	movi	r2,-11
   51470:	00000106 	br	51478 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   51474:	00bffec4 	movi	r2,-5
}
   51478:	e037883a 	mov	sp,fp
   5147c:	dfc00117 	ldw	ra,4(sp)
   51480:	df000017 	ldw	fp,0(sp)
   51484:	dec00204 	addi	sp,sp,8
   51488:	f800283a 	ret

0005148c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   5148c:	defffa04 	addi	sp,sp,-24
   51490:	dfc00515 	stw	ra,20(sp)
   51494:	df000415 	stw	fp,16(sp)
   51498:	df000404 	addi	fp,sp,16
   5149c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   514a0:	0007883a 	mov	r3,zero
   514a4:	e0bfff17 	ldw	r2,-4(fp)
   514a8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   514ac:	e0bfff17 	ldw	r2,-4(fp)
   514b0:	10800104 	addi	r2,r2,4
   514b4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   514b8:	0005303a 	rdctl	r2,status
   514bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   514c0:	e0fffd17 	ldw	r3,-12(fp)
   514c4:	00bfff84 	movi	r2,-2
   514c8:	1884703a 	and	r2,r3,r2
   514cc:	1001703a 	wrctl	status,r2
  
  return context;
   514d0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   514d4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   514d8:	0051d2c0 	call	51d2c <alt_tick>
   514dc:	e0bffc17 	ldw	r2,-16(fp)
   514e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   514e4:	e0bffe17 	ldw	r2,-8(fp)
   514e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   514ec:	e037883a 	mov	sp,fp
   514f0:	dfc00117 	ldw	ra,4(sp)
   514f4:	df000017 	ldw	fp,0(sp)
   514f8:	dec00204 	addi	sp,sp,8
   514fc:	f800283a 	ret

00051500 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   51500:	defff804 	addi	sp,sp,-32
   51504:	dfc00715 	stw	ra,28(sp)
   51508:	df000615 	stw	fp,24(sp)
   5150c:	df000604 	addi	fp,sp,24
   51510:	e13ffc15 	stw	r4,-16(fp)
   51514:	e17ffd15 	stw	r5,-12(fp)
   51518:	e1bffe15 	stw	r6,-8(fp)
   5151c:	e1ffff15 	stw	r7,-4(fp)
   51520:	e0bfff17 	ldw	r2,-4(fp)
   51524:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   51528:	00800174 	movhi	r2,5
   5152c:	10978704 	addi	r2,r2,24092
   51530:	10800017 	ldw	r2,0(r2)
   51534:	1000041e 	bne	r2,zero,51548 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   51538:	00800174 	movhi	r2,5
   5153c:	10978704 	addi	r2,r2,24092
   51540:	e0fffb17 	ldw	r3,-20(fp)
   51544:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   51548:	e0bffc17 	ldw	r2,-16(fp)
   5154c:	10800104 	addi	r2,r2,4
   51550:	00c001c4 	movi	r3,7
   51554:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   51558:	d8000015 	stw	zero,0(sp)
   5155c:	e13ffd17 	ldw	r4,-12(fp)
   51560:	e17ffe17 	ldw	r5,-8(fp)
   51564:	01800174 	movhi	r6,5
   51568:	31852304 	addi	r6,r6,5260
   5156c:	e1fffc17 	ldw	r7,-16(fp)
   51570:	005003c0 	call	5003c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   51574:	e037883a 	mov	sp,fp
   51578:	dfc00117 	ldw	ra,4(sp)
   5157c:	df000017 	ldw	fp,0(sp)
   51580:	dec00204 	addi	sp,sp,8
   51584:	f800283a 	ret

00051588 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   51588:	defff504 	addi	sp,sp,-44
   5158c:	df000a15 	stw	fp,40(sp)
   51590:	df000a04 	addi	fp,sp,40
   51594:	e13ffc15 	stw	r4,-16(fp)
   51598:	e17ffd15 	stw	r5,-12(fp)
   5159c:	e1bffe15 	stw	r6,-8(fp)
   515a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   515a4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   515a8:	00800174 	movhi	r2,5
   515ac:	10978704 	addi	r2,r2,24092
   515b0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   515b4:	10003f26 	beq	r2,zero,516b4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   515b8:	e0bffc17 	ldw	r2,-16(fp)
   515bc:	10003b26 	beq	r2,zero,516ac <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   515c0:	e0bffc17 	ldw	r2,-16(fp)
   515c4:	e0fffe17 	ldw	r3,-8(fp)
   515c8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   515cc:	e0bffc17 	ldw	r2,-16(fp)
   515d0:	e0ffff17 	ldw	r3,-4(fp)
   515d4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   515d8:	0005303a 	rdctl	r2,status
   515dc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   515e0:	e0fff817 	ldw	r3,-32(fp)
   515e4:	00bfff84 	movi	r2,-2
   515e8:	1884703a 	and	r2,r3,r2
   515ec:	1001703a 	wrctl	status,r2
  
  return context;
   515f0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   515f4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   515f8:	00800174 	movhi	r2,5
   515fc:	10978804 	addi	r2,r2,24096
   51600:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   51604:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   51608:	e0fffd17 	ldw	r3,-12(fp)
   5160c:	e0bff617 	ldw	r2,-40(fp)
   51610:	1885883a 	add	r2,r3,r2
   51614:	10c00044 	addi	r3,r2,1
   51618:	e0bffc17 	ldw	r2,-16(fp)
   5161c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   51620:	e0bffc17 	ldw	r2,-16(fp)
   51624:	10c00217 	ldw	r3,8(r2)
   51628:	e0bff617 	ldw	r2,-40(fp)
   5162c:	1880042e 	bgeu	r3,r2,51640 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   51630:	e0bffc17 	ldw	r2,-16(fp)
   51634:	00c00044 	movi	r3,1
   51638:	10c00405 	stb	r3,16(r2)
   5163c:	00000206 	br	51648 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   51640:	e0bffc17 	ldw	r2,-16(fp)
   51644:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   51648:	e0fffc17 	ldw	r3,-16(fp)
   5164c:	00800174 	movhi	r2,5
   51650:	1090a704 	addi	r2,r2,17052
   51654:	e0bff915 	stw	r2,-28(fp)
   51658:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   5165c:	e0bffa17 	ldw	r2,-24(fp)
   51660:	e0fff917 	ldw	r3,-28(fp)
   51664:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   51668:	e0bff917 	ldw	r2,-28(fp)
   5166c:	10c00017 	ldw	r3,0(r2)
   51670:	e0bffa17 	ldw	r2,-24(fp)
   51674:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   51678:	e0bff917 	ldw	r2,-28(fp)
   5167c:	10800017 	ldw	r2,0(r2)
   51680:	e0fffa17 	ldw	r3,-24(fp)
   51684:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   51688:	e0bff917 	ldw	r2,-28(fp)
   5168c:	e0fffa17 	ldw	r3,-24(fp)
   51690:	10c00015 	stw	r3,0(r2)
   51694:	e0bff717 	ldw	r2,-36(fp)
   51698:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5169c:	e0bffb17 	ldw	r2,-20(fp)
   516a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   516a4:	0005883a 	mov	r2,zero
   516a8:	00000306 	br	516b8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   516ac:	00bffa84 	movi	r2,-22
   516b0:	00000106 	br	516b8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   516b4:	00bfde84 	movi	r2,-134
  }
}
   516b8:	e037883a 	mov	sp,fp
   516bc:	df000017 	ldw	fp,0(sp)
   516c0:	dec00104 	addi	sp,sp,4
   516c4:	f800283a 	ret

000516c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   516c8:	defffe04 	addi	sp,sp,-8
   516cc:	df000115 	stw	fp,4(sp)
   516d0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   516d4:	e03fff15 	stw	zero,-4(fp)
   516d8:	00000506 	br	516f0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   516dc:	e0bfff17 	ldw	r2,-4(fp)
   516e0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   516e4:	e0bfff17 	ldw	r2,-4(fp)
   516e8:	10800804 	addi	r2,r2,32
   516ec:	e0bfff15 	stw	r2,-4(fp)
   516f0:	e0bfff17 	ldw	r2,-4(fp)
   516f4:	10820030 	cmpltui	r2,r2,2048
   516f8:	103ff81e 	bne	r2,zero,516dc <__alt_data_end+0xfffd6d5c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   516fc:	e037883a 	mov	sp,fp
   51700:	df000017 	ldw	fp,0(sp)
   51704:	dec00104 	addi	sp,sp,4
   51708:	f800283a 	ret

0005170c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5170c:	defffe04 	addi	sp,sp,-8
   51710:	dfc00115 	stw	ra,4(sp)
   51714:	df000015 	stw	fp,0(sp)
   51718:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5171c:	00800174 	movhi	r2,5
   51720:	1090a404 	addi	r2,r2,17040
   51724:	10800017 	ldw	r2,0(r2)
   51728:	10000526 	beq	r2,zero,51740 <alt_get_errno+0x34>
   5172c:	00800174 	movhi	r2,5
   51730:	1090a404 	addi	r2,r2,17040
   51734:	10800017 	ldw	r2,0(r2)
   51738:	103ee83a 	callr	r2
   5173c:	00000206 	br	51748 <alt_get_errno+0x3c>
   51740:	00800174 	movhi	r2,5
   51744:	10978204 	addi	r2,r2,24072
}
   51748:	e037883a 	mov	sp,fp
   5174c:	dfc00117 	ldw	ra,4(sp)
   51750:	df000017 	ldw	fp,0(sp)
   51754:	dec00204 	addi	sp,sp,8
   51758:	f800283a 	ret

0005175c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   5175c:	defffa04 	addi	sp,sp,-24
   51760:	dfc00515 	stw	ra,20(sp)
   51764:	df000415 	stw	fp,16(sp)
   51768:	df000404 	addi	fp,sp,16
   5176c:	e13ffe15 	stw	r4,-8(fp)
   51770:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   51774:	e0bffe17 	ldw	r2,-8(fp)
   51778:	10000326 	beq	r2,zero,51788 <alt_dev_llist_insert+0x2c>
   5177c:	e0bffe17 	ldw	r2,-8(fp)
   51780:	10800217 	ldw	r2,8(r2)
   51784:	1000061e 	bne	r2,zero,517a0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   51788:	005170c0 	call	5170c <alt_get_errno>
   5178c:	1007883a 	mov	r3,r2
   51790:	00800584 	movi	r2,22
   51794:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   51798:	00bffa84 	movi	r2,-22
   5179c:	00001306 	br	517ec <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   517a0:	e0bffe17 	ldw	r2,-8(fp)
   517a4:	e0ffff17 	ldw	r3,-4(fp)
   517a8:	e0fffc15 	stw	r3,-16(fp)
   517ac:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   517b0:	e0bffd17 	ldw	r2,-12(fp)
   517b4:	e0fffc17 	ldw	r3,-16(fp)
   517b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   517bc:	e0bffc17 	ldw	r2,-16(fp)
   517c0:	10c00017 	ldw	r3,0(r2)
   517c4:	e0bffd17 	ldw	r2,-12(fp)
   517c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   517cc:	e0bffc17 	ldw	r2,-16(fp)
   517d0:	10800017 	ldw	r2,0(r2)
   517d4:	e0fffd17 	ldw	r3,-12(fp)
   517d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   517dc:	e0bffc17 	ldw	r2,-16(fp)
   517e0:	e0fffd17 	ldw	r3,-12(fp)
   517e4:	10c00015 	stw	r3,0(r2)

  return 0;  
   517e8:	0005883a 	mov	r2,zero
}
   517ec:	e037883a 	mov	sp,fp
   517f0:	dfc00117 	ldw	ra,4(sp)
   517f4:	df000017 	ldw	fp,0(sp)
   517f8:	dec00204 	addi	sp,sp,8
   517fc:	f800283a 	ret

00051800 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   51800:	defffd04 	addi	sp,sp,-12
   51804:	dfc00215 	stw	ra,8(sp)
   51808:	df000115 	stw	fp,4(sp)
   5180c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   51810:	00800174 	movhi	r2,5
   51814:	10891604 	addi	r2,r2,9304
   51818:	e0bfff15 	stw	r2,-4(fp)
   5181c:	00000606 	br	51838 <_do_ctors+0x38>
        (*ctor) (); 
   51820:	e0bfff17 	ldw	r2,-4(fp)
   51824:	10800017 	ldw	r2,0(r2)
   51828:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   5182c:	e0bfff17 	ldw	r2,-4(fp)
   51830:	10bfff04 	addi	r2,r2,-4
   51834:	e0bfff15 	stw	r2,-4(fp)
   51838:	e0ffff17 	ldw	r3,-4(fp)
   5183c:	00800174 	movhi	r2,5
   51840:	10891704 	addi	r2,r2,9308
   51844:	18bff62e 	bgeu	r3,r2,51820 <__alt_data_end+0xfffd6ea0>
        (*ctor) (); 
}
   51848:	e037883a 	mov	sp,fp
   5184c:	dfc00117 	ldw	ra,4(sp)
   51850:	df000017 	ldw	fp,0(sp)
   51854:	dec00204 	addi	sp,sp,8
   51858:	f800283a 	ret

0005185c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   5185c:	defffd04 	addi	sp,sp,-12
   51860:	dfc00215 	stw	ra,8(sp)
   51864:	df000115 	stw	fp,4(sp)
   51868:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   5186c:	00800174 	movhi	r2,5
   51870:	10891604 	addi	r2,r2,9304
   51874:	e0bfff15 	stw	r2,-4(fp)
   51878:	00000606 	br	51894 <_do_dtors+0x38>
        (*dtor) (); 
   5187c:	e0bfff17 	ldw	r2,-4(fp)
   51880:	10800017 	ldw	r2,0(r2)
   51884:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   51888:	e0bfff17 	ldw	r2,-4(fp)
   5188c:	10bfff04 	addi	r2,r2,-4
   51890:	e0bfff15 	stw	r2,-4(fp)
   51894:	e0ffff17 	ldw	r3,-4(fp)
   51898:	00800174 	movhi	r2,5
   5189c:	10891704 	addi	r2,r2,9308
   518a0:	18bff62e 	bgeu	r3,r2,5187c <__alt_data_end+0xfffd6efc>
        (*dtor) (); 
}
   518a4:	e037883a 	mov	sp,fp
   518a8:	dfc00117 	ldw	ra,4(sp)
   518ac:	df000017 	ldw	fp,0(sp)
   518b0:	dec00204 	addi	sp,sp,8
   518b4:	f800283a 	ret

000518b8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   518b8:	defffe04 	addi	sp,sp,-8
   518bc:	dfc00115 	stw	ra,4(sp)
   518c0:	df000015 	stw	fp,0(sp)
   518c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   518c8:	0009883a 	mov	r4,zero
   518cc:	01440004 	movi	r5,4096
   518d0:	00520a80 	call	520a8 <alt_icache_flush>
#endif
}
   518d4:	e037883a 	mov	sp,fp
   518d8:	dfc00117 	ldw	ra,4(sp)
   518dc:	df000017 	ldw	fp,0(sp)
   518e0:	dec00204 	addi	sp,sp,8
   518e4:	f800283a 	ret

000518e8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   518e8:	defff904 	addi	sp,sp,-28
   518ec:	dfc00615 	stw	ra,24(sp)
   518f0:	df000515 	stw	fp,20(sp)
   518f4:	df000504 	addi	fp,sp,20
   518f8:	e13ffc15 	stw	r4,-16(fp)
   518fc:	e17ffd15 	stw	r5,-12(fp)
   51900:	e1bffe15 	stw	r6,-8(fp)
   51904:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   51908:	e13ffd17 	ldw	r4,-12(fp)
   5190c:	e17ffe17 	ldw	r5,-8(fp)
   51910:	e1bfff17 	ldw	r6,-4(fp)
   51914:	0051b3c0 	call	51b3c <open>
   51918:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   5191c:	e0bffb17 	ldw	r2,-20(fp)
   51920:	10001c16 	blt	r2,zero,51994 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   51924:	00800174 	movhi	r2,5
   51928:	108c1e04 	addi	r2,r2,12408
   5192c:	e0fffb17 	ldw	r3,-20(fp)
   51930:	18c00324 	muli	r3,r3,12
   51934:	10c5883a 	add	r2,r2,r3
   51938:	10c00017 	ldw	r3,0(r2)
   5193c:	e0bffc17 	ldw	r2,-16(fp)
   51940:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   51944:	00800174 	movhi	r2,5
   51948:	108c1e04 	addi	r2,r2,12408
   5194c:	e0fffb17 	ldw	r3,-20(fp)
   51950:	18c00324 	muli	r3,r3,12
   51954:	10c5883a 	add	r2,r2,r3
   51958:	10800104 	addi	r2,r2,4
   5195c:	10c00017 	ldw	r3,0(r2)
   51960:	e0bffc17 	ldw	r2,-16(fp)
   51964:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   51968:	00800174 	movhi	r2,5
   5196c:	108c1e04 	addi	r2,r2,12408
   51970:	e0fffb17 	ldw	r3,-20(fp)
   51974:	18c00324 	muli	r3,r3,12
   51978:	10c5883a 	add	r2,r2,r3
   5197c:	10800204 	addi	r2,r2,8
   51980:	10c00017 	ldw	r3,0(r2)
   51984:	e0bffc17 	ldw	r2,-16(fp)
   51988:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   5198c:	e13ffb17 	ldw	r4,-20(fp)
   51990:	005071c0 	call	5071c <alt_release_fd>
  }
} 
   51994:	e037883a 	mov	sp,fp
   51998:	dfc00117 	ldw	ra,4(sp)
   5199c:	df000017 	ldw	fp,0(sp)
   519a0:	dec00204 	addi	sp,sp,8
   519a4:	f800283a 	ret

000519a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   519a8:	defffb04 	addi	sp,sp,-20
   519ac:	dfc00415 	stw	ra,16(sp)
   519b0:	df000315 	stw	fp,12(sp)
   519b4:	df000304 	addi	fp,sp,12
   519b8:	e13ffd15 	stw	r4,-12(fp)
   519bc:	e17ffe15 	stw	r5,-8(fp)
   519c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   519c4:	01000174 	movhi	r4,5
   519c8:	210c2104 	addi	r4,r4,12420
   519cc:	e17ffd17 	ldw	r5,-12(fp)
   519d0:	01800044 	movi	r6,1
   519d4:	01c07fc4 	movi	r7,511
   519d8:	00518e80 	call	518e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   519dc:	01000174 	movhi	r4,5
   519e0:	210c1e04 	addi	r4,r4,12408
   519e4:	e17ffe17 	ldw	r5,-8(fp)
   519e8:	000d883a 	mov	r6,zero
   519ec:	01c07fc4 	movi	r7,511
   519f0:	00518e80 	call	518e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   519f4:	01000174 	movhi	r4,5
   519f8:	210c2404 	addi	r4,r4,12432
   519fc:	e17fff17 	ldw	r5,-4(fp)
   51a00:	01800044 	movi	r6,1
   51a04:	01c07fc4 	movi	r7,511
   51a08:	00518e80 	call	518e8 <alt_open_fd>
}  
   51a0c:	e037883a 	mov	sp,fp
   51a10:	dfc00117 	ldw	ra,4(sp)
   51a14:	df000017 	ldw	fp,0(sp)
   51a18:	dec00204 	addi	sp,sp,8
   51a1c:	f800283a 	ret

00051a20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51a20:	defffe04 	addi	sp,sp,-8
   51a24:	dfc00115 	stw	ra,4(sp)
   51a28:	df000015 	stw	fp,0(sp)
   51a2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51a30:	00800174 	movhi	r2,5
   51a34:	1090a404 	addi	r2,r2,17040
   51a38:	10800017 	ldw	r2,0(r2)
   51a3c:	10000526 	beq	r2,zero,51a54 <alt_get_errno+0x34>
   51a40:	00800174 	movhi	r2,5
   51a44:	1090a404 	addi	r2,r2,17040
   51a48:	10800017 	ldw	r2,0(r2)
   51a4c:	103ee83a 	callr	r2
   51a50:	00000206 	br	51a5c <alt_get_errno+0x3c>
   51a54:	00800174 	movhi	r2,5
   51a58:	10978204 	addi	r2,r2,24072
}
   51a5c:	e037883a 	mov	sp,fp
   51a60:	dfc00117 	ldw	ra,4(sp)
   51a64:	df000017 	ldw	fp,0(sp)
   51a68:	dec00204 	addi	sp,sp,8
   51a6c:	f800283a 	ret

00051a70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   51a70:	defffd04 	addi	sp,sp,-12
   51a74:	df000215 	stw	fp,8(sp)
   51a78:	df000204 	addi	fp,sp,8
   51a7c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   51a80:	e0bfff17 	ldw	r2,-4(fp)
   51a84:	10800217 	ldw	r2,8(r2)
   51a88:	10d00034 	orhi	r3,r2,16384
   51a8c:	e0bfff17 	ldw	r2,-4(fp)
   51a90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   51a94:	e03ffe15 	stw	zero,-8(fp)
   51a98:	00001d06 	br	51b10 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   51a9c:	00800174 	movhi	r2,5
   51aa0:	108c1e04 	addi	r2,r2,12408
   51aa4:	e0fffe17 	ldw	r3,-8(fp)
   51aa8:	18c00324 	muli	r3,r3,12
   51aac:	10c5883a 	add	r2,r2,r3
   51ab0:	10c00017 	ldw	r3,0(r2)
   51ab4:	e0bfff17 	ldw	r2,-4(fp)
   51ab8:	10800017 	ldw	r2,0(r2)
   51abc:	1880111e 	bne	r3,r2,51b04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   51ac0:	00800174 	movhi	r2,5
   51ac4:	108c1e04 	addi	r2,r2,12408
   51ac8:	e0fffe17 	ldw	r3,-8(fp)
   51acc:	18c00324 	muli	r3,r3,12
   51ad0:	10c5883a 	add	r2,r2,r3
   51ad4:	10800204 	addi	r2,r2,8
   51ad8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   51adc:	1000090e 	bge	r2,zero,51b04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   51ae0:	e0bffe17 	ldw	r2,-8(fp)
   51ae4:	10c00324 	muli	r3,r2,12
   51ae8:	00800174 	movhi	r2,5
   51aec:	108c1e04 	addi	r2,r2,12408
   51af0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   51af4:	e0bfff17 	ldw	r2,-4(fp)
   51af8:	18800226 	beq	r3,r2,51b04 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   51afc:	00bffcc4 	movi	r2,-13
   51b00:	00000a06 	br	51b2c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   51b04:	e0bffe17 	ldw	r2,-8(fp)
   51b08:	10800044 	addi	r2,r2,1
   51b0c:	e0bffe15 	stw	r2,-8(fp)
   51b10:	00800174 	movhi	r2,5
   51b14:	1090a304 	addi	r2,r2,17036
   51b18:	10800017 	ldw	r2,0(r2)
   51b1c:	1007883a 	mov	r3,r2
   51b20:	e0bffe17 	ldw	r2,-8(fp)
   51b24:	18bfdd2e 	bgeu	r3,r2,51a9c <__alt_data_end+0xfffd711c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   51b28:	0005883a 	mov	r2,zero
}
   51b2c:	e037883a 	mov	sp,fp
   51b30:	df000017 	ldw	fp,0(sp)
   51b34:	dec00104 	addi	sp,sp,4
   51b38:	f800283a 	ret

00051b3c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   51b3c:	defff604 	addi	sp,sp,-40
   51b40:	dfc00915 	stw	ra,36(sp)
   51b44:	df000815 	stw	fp,32(sp)
   51b48:	df000804 	addi	fp,sp,32
   51b4c:	e13ffd15 	stw	r4,-12(fp)
   51b50:	e17ffe15 	stw	r5,-8(fp)
   51b54:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   51b58:	00bfffc4 	movi	r2,-1
   51b5c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   51b60:	00bffb44 	movi	r2,-19
   51b64:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   51b68:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   51b6c:	e13ffd17 	ldw	r4,-12(fp)
   51b70:	01400174 	movhi	r5,5
   51b74:	2950a104 	addi	r5,r5,17028
   51b78:	0051e500 	call	51e50 <alt_find_dev>
   51b7c:	e0bff815 	stw	r2,-32(fp)
   51b80:	e0bff817 	ldw	r2,-32(fp)
   51b84:	1000051e 	bne	r2,zero,51b9c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   51b88:	e13ffd17 	ldw	r4,-12(fp)
   51b8c:	0051ee00 	call	51ee0 <alt_find_file>
   51b90:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   51b94:	00800044 	movi	r2,1
   51b98:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   51b9c:	e0bff817 	ldw	r2,-32(fp)
   51ba0:	10002926 	beq	r2,zero,51c48 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   51ba4:	e13ff817 	ldw	r4,-32(fp)
   51ba8:	0051ff40 	call	51ff4 <alt_get_fd>
   51bac:	e0bff915 	stw	r2,-28(fp)
   51bb0:	e0bff917 	ldw	r2,-28(fp)
   51bb4:	1000030e 	bge	r2,zero,51bc4 <open+0x88>
    {
      status = index;
   51bb8:	e0bff917 	ldw	r2,-28(fp)
   51bbc:	e0bffa15 	stw	r2,-24(fp)
   51bc0:	00002306 	br	51c50 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   51bc4:	e0bff917 	ldw	r2,-28(fp)
   51bc8:	10c00324 	muli	r3,r2,12
   51bcc:	00800174 	movhi	r2,5
   51bd0:	108c1e04 	addi	r2,r2,12408
   51bd4:	1885883a 	add	r2,r3,r2
   51bd8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   51bdc:	e0fffe17 	ldw	r3,-8(fp)
   51be0:	00900034 	movhi	r2,16384
   51be4:	10bfffc4 	addi	r2,r2,-1
   51be8:	1886703a 	and	r3,r3,r2
   51bec:	e0bffc17 	ldw	r2,-16(fp)
   51bf0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   51bf4:	e0bffb17 	ldw	r2,-20(fp)
   51bf8:	1000051e 	bne	r2,zero,51c10 <open+0xd4>
   51bfc:	e13ffc17 	ldw	r4,-16(fp)
   51c00:	0051a700 	call	51a70 <alt_file_locked>
   51c04:	e0bffa15 	stw	r2,-24(fp)
   51c08:	e0bffa17 	ldw	r2,-24(fp)
   51c0c:	10001016 	blt	r2,zero,51c50 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   51c10:	e0bff817 	ldw	r2,-32(fp)
   51c14:	10800317 	ldw	r2,12(r2)
   51c18:	10000826 	beq	r2,zero,51c3c <open+0x100>
   51c1c:	e0bff817 	ldw	r2,-32(fp)
   51c20:	10800317 	ldw	r2,12(r2)
   51c24:	e13ffc17 	ldw	r4,-16(fp)
   51c28:	e17ffd17 	ldw	r5,-12(fp)
   51c2c:	e1bffe17 	ldw	r6,-8(fp)
   51c30:	e1ffff17 	ldw	r7,-4(fp)
   51c34:	103ee83a 	callr	r2
   51c38:	00000106 	br	51c40 <open+0x104>
   51c3c:	0005883a 	mov	r2,zero
   51c40:	e0bffa15 	stw	r2,-24(fp)
   51c44:	00000206 	br	51c50 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   51c48:	00bffb44 	movi	r2,-19
   51c4c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   51c50:	e0bffa17 	ldw	r2,-24(fp)
   51c54:	1000090e 	bge	r2,zero,51c7c <open+0x140>
  {
    alt_release_fd (index);  
   51c58:	e13ff917 	ldw	r4,-28(fp)
   51c5c:	005071c0 	call	5071c <alt_release_fd>
    ALT_ERRNO = -status;
   51c60:	0051a200 	call	51a20 <alt_get_errno>
   51c64:	1007883a 	mov	r3,r2
   51c68:	e0bffa17 	ldw	r2,-24(fp)
   51c6c:	0085c83a 	sub	r2,zero,r2
   51c70:	18800015 	stw	r2,0(r3)
    return -1;
   51c74:	00bfffc4 	movi	r2,-1
   51c78:	00000106 	br	51c80 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   51c7c:	e0bff917 	ldw	r2,-28(fp)
}
   51c80:	e037883a 	mov	sp,fp
   51c84:	dfc00117 	ldw	ra,4(sp)
   51c88:	df000017 	ldw	fp,0(sp)
   51c8c:	dec00204 	addi	sp,sp,8
   51c90:	f800283a 	ret

00051c94 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   51c94:	defffa04 	addi	sp,sp,-24
   51c98:	df000515 	stw	fp,20(sp)
   51c9c:	df000504 	addi	fp,sp,20
   51ca0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51ca4:	0005303a 	rdctl	r2,status
   51ca8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51cac:	e0fffc17 	ldw	r3,-16(fp)
   51cb0:	00bfff84 	movi	r2,-2
   51cb4:	1884703a 	and	r2,r3,r2
   51cb8:	1001703a 	wrctl	status,r2
  
  return context;
   51cbc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   51cc0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   51cc4:	e0bfff17 	ldw	r2,-4(fp)
   51cc8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   51ccc:	e0bffd17 	ldw	r2,-12(fp)
   51cd0:	10800017 	ldw	r2,0(r2)
   51cd4:	e0fffd17 	ldw	r3,-12(fp)
   51cd8:	18c00117 	ldw	r3,4(r3)
   51cdc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   51ce0:	e0bffd17 	ldw	r2,-12(fp)
   51ce4:	10800117 	ldw	r2,4(r2)
   51ce8:	e0fffd17 	ldw	r3,-12(fp)
   51cec:	18c00017 	ldw	r3,0(r3)
   51cf0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   51cf4:	e0bffd17 	ldw	r2,-12(fp)
   51cf8:	e0fffd17 	ldw	r3,-12(fp)
   51cfc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   51d00:	e0bffd17 	ldw	r2,-12(fp)
   51d04:	e0fffd17 	ldw	r3,-12(fp)
   51d08:	10c00015 	stw	r3,0(r2)
   51d0c:	e0bffb17 	ldw	r2,-20(fp)
   51d10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51d14:	e0bffe17 	ldw	r2,-8(fp)
   51d18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   51d1c:	e037883a 	mov	sp,fp
   51d20:	df000017 	ldw	fp,0(sp)
   51d24:	dec00104 	addi	sp,sp,4
   51d28:	f800283a 	ret

00051d2c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   51d2c:	defffb04 	addi	sp,sp,-20
   51d30:	dfc00415 	stw	ra,16(sp)
   51d34:	df000315 	stw	fp,12(sp)
   51d38:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   51d3c:	d0a01117 	ldw	r2,-32700(gp)
   51d40:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   51d44:	d0a6f217 	ldw	r2,-25656(gp)
   51d48:	10800044 	addi	r2,r2,1
   51d4c:	d0a6f215 	stw	r2,-25656(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   51d50:	00002e06 	br	51e0c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   51d54:	e0bffd17 	ldw	r2,-12(fp)
   51d58:	10800017 	ldw	r2,0(r2)
   51d5c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   51d60:	e0bffd17 	ldw	r2,-12(fp)
   51d64:	10800403 	ldbu	r2,16(r2)
   51d68:	10803fcc 	andi	r2,r2,255
   51d6c:	10000426 	beq	r2,zero,51d80 <alt_tick+0x54>
   51d70:	d0a6f217 	ldw	r2,-25656(gp)
   51d74:	1000021e 	bne	r2,zero,51d80 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   51d78:	e0bffd17 	ldw	r2,-12(fp)
   51d7c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   51d80:	e0bffd17 	ldw	r2,-12(fp)
   51d84:	10800217 	ldw	r2,8(r2)
   51d88:	d0e6f217 	ldw	r3,-25656(gp)
   51d8c:	18801d36 	bltu	r3,r2,51e04 <alt_tick+0xd8>
   51d90:	e0bffd17 	ldw	r2,-12(fp)
   51d94:	10800403 	ldbu	r2,16(r2)
   51d98:	10803fcc 	andi	r2,r2,255
   51d9c:	1000191e 	bne	r2,zero,51e04 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   51da0:	e0bffd17 	ldw	r2,-12(fp)
   51da4:	10800317 	ldw	r2,12(r2)
   51da8:	e0fffd17 	ldw	r3,-12(fp)
   51dac:	18c00517 	ldw	r3,20(r3)
   51db0:	1809883a 	mov	r4,r3
   51db4:	103ee83a 	callr	r2
   51db8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   51dbc:	e0bfff17 	ldw	r2,-4(fp)
   51dc0:	1000031e 	bne	r2,zero,51dd0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   51dc4:	e13ffd17 	ldw	r4,-12(fp)
   51dc8:	0051c940 	call	51c94 <alt_alarm_stop>
   51dcc:	00000d06 	br	51e04 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   51dd0:	e0bffd17 	ldw	r2,-12(fp)
   51dd4:	10c00217 	ldw	r3,8(r2)
   51dd8:	e0bfff17 	ldw	r2,-4(fp)
   51ddc:	1887883a 	add	r3,r3,r2
   51de0:	e0bffd17 	ldw	r2,-12(fp)
   51de4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   51de8:	e0bffd17 	ldw	r2,-12(fp)
   51dec:	10c00217 	ldw	r3,8(r2)
   51df0:	d0a6f217 	ldw	r2,-25656(gp)
   51df4:	1880032e 	bgeu	r3,r2,51e04 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   51df8:	e0bffd17 	ldw	r2,-12(fp)
   51dfc:	00c00044 	movi	r3,1
   51e00:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   51e04:	e0bffe17 	ldw	r2,-8(fp)
   51e08:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   51e0c:	e0fffd17 	ldw	r3,-12(fp)
   51e10:	d0a01104 	addi	r2,gp,-32700
   51e14:	18bfcf1e 	bne	r3,r2,51d54 <__alt_data_end+0xfffd73d4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   51e18:	0001883a 	nop
}
   51e1c:	e037883a 	mov	sp,fp
   51e20:	dfc00117 	ldw	ra,4(sp)
   51e24:	df000017 	ldw	fp,0(sp)
   51e28:	dec00204 	addi	sp,sp,8
   51e2c:	f800283a 	ret

00051e30 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   51e30:	deffff04 	addi	sp,sp,-4
   51e34:	df000015 	stw	fp,0(sp)
   51e38:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   51e3c:	000170fa 	wrctl	ienable,zero
}
   51e40:	e037883a 	mov	sp,fp
   51e44:	df000017 	ldw	fp,0(sp)
   51e48:	dec00104 	addi	sp,sp,4
   51e4c:	f800283a 	ret

00051e50 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   51e50:	defffa04 	addi	sp,sp,-24
   51e54:	dfc00515 	stw	ra,20(sp)
   51e58:	df000415 	stw	fp,16(sp)
   51e5c:	df000404 	addi	fp,sp,16
   51e60:	e13ffe15 	stw	r4,-8(fp)
   51e64:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   51e68:	e0bfff17 	ldw	r2,-4(fp)
   51e6c:	10800017 	ldw	r2,0(r2)
   51e70:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   51e74:	e13ffe17 	ldw	r4,-8(fp)
   51e78:	004a1700 	call	4a170 <strlen>
   51e7c:	10800044 	addi	r2,r2,1
   51e80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   51e84:	00000d06 	br	51ebc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   51e88:	e0bffc17 	ldw	r2,-16(fp)
   51e8c:	10c00217 	ldw	r3,8(r2)
   51e90:	e0bffd17 	ldw	r2,-12(fp)
   51e94:	1809883a 	mov	r4,r3
   51e98:	e17ffe17 	ldw	r5,-8(fp)
   51e9c:	100d883a 	mov	r6,r2
   51ea0:	004386c0 	call	4386c <memcmp>
   51ea4:	1000021e 	bne	r2,zero,51eb0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   51ea8:	e0bffc17 	ldw	r2,-16(fp)
   51eac:	00000706 	br	51ecc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   51eb0:	e0bffc17 	ldw	r2,-16(fp)
   51eb4:	10800017 	ldw	r2,0(r2)
   51eb8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   51ebc:	e0fffc17 	ldw	r3,-16(fp)
   51ec0:	e0bfff17 	ldw	r2,-4(fp)
   51ec4:	18bff01e 	bne	r3,r2,51e88 <__alt_data_end+0xfffd7508>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   51ec8:	0005883a 	mov	r2,zero
}
   51ecc:	e037883a 	mov	sp,fp
   51ed0:	dfc00117 	ldw	ra,4(sp)
   51ed4:	df000017 	ldw	fp,0(sp)
   51ed8:	dec00204 	addi	sp,sp,8
   51edc:	f800283a 	ret

00051ee0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   51ee0:	defffb04 	addi	sp,sp,-20
   51ee4:	dfc00415 	stw	ra,16(sp)
   51ee8:	df000315 	stw	fp,12(sp)
   51eec:	df000304 	addi	fp,sp,12
   51ef0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   51ef4:	00800174 	movhi	r2,5
   51ef8:	10909f04 	addi	r2,r2,17020
   51efc:	10800017 	ldw	r2,0(r2)
   51f00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   51f04:	00003106 	br	51fcc <alt_find_file+0xec>
  {
    len = strlen(next->name);
   51f08:	e0bffd17 	ldw	r2,-12(fp)
   51f0c:	10800217 	ldw	r2,8(r2)
   51f10:	1009883a 	mov	r4,r2
   51f14:	004a1700 	call	4a170 <strlen>
   51f18:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   51f1c:	e0bffd17 	ldw	r2,-12(fp)
   51f20:	10c00217 	ldw	r3,8(r2)
   51f24:	e0bffe17 	ldw	r2,-8(fp)
   51f28:	10bfffc4 	addi	r2,r2,-1
   51f2c:	1885883a 	add	r2,r3,r2
   51f30:	10800003 	ldbu	r2,0(r2)
   51f34:	10803fcc 	andi	r2,r2,255
   51f38:	1080201c 	xori	r2,r2,128
   51f3c:	10bfe004 	addi	r2,r2,-128
   51f40:	10800bd8 	cmpnei	r2,r2,47
   51f44:	1000031e 	bne	r2,zero,51f54 <alt_find_file+0x74>
    {
      len -= 1;
   51f48:	e0bffe17 	ldw	r2,-8(fp)
   51f4c:	10bfffc4 	addi	r2,r2,-1
   51f50:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   51f54:	e0bffe17 	ldw	r2,-8(fp)
   51f58:	e0ffff17 	ldw	r3,-4(fp)
   51f5c:	1885883a 	add	r2,r3,r2
   51f60:	10800003 	ldbu	r2,0(r2)
   51f64:	10803fcc 	andi	r2,r2,255
   51f68:	1080201c 	xori	r2,r2,128
   51f6c:	10bfe004 	addi	r2,r2,-128
   51f70:	10800be0 	cmpeqi	r2,r2,47
   51f74:	1000081e 	bne	r2,zero,51f98 <alt_find_file+0xb8>
   51f78:	e0bffe17 	ldw	r2,-8(fp)
   51f7c:	e0ffff17 	ldw	r3,-4(fp)
   51f80:	1885883a 	add	r2,r3,r2
   51f84:	10800003 	ldbu	r2,0(r2)
   51f88:	10803fcc 	andi	r2,r2,255
   51f8c:	1080201c 	xori	r2,r2,128
   51f90:	10bfe004 	addi	r2,r2,-128
   51f94:	10000a1e 	bne	r2,zero,51fc0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   51f98:	e0bffd17 	ldw	r2,-12(fp)
   51f9c:	10c00217 	ldw	r3,8(r2)
   51fa0:	e0bffe17 	ldw	r2,-8(fp)
   51fa4:	1809883a 	mov	r4,r3
   51fa8:	e17fff17 	ldw	r5,-4(fp)
   51fac:	100d883a 	mov	r6,r2
   51fb0:	004386c0 	call	4386c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   51fb4:	1000021e 	bne	r2,zero,51fc0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   51fb8:	e0bffd17 	ldw	r2,-12(fp)
   51fbc:	00000806 	br	51fe0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   51fc0:	e0bffd17 	ldw	r2,-12(fp)
   51fc4:	10800017 	ldw	r2,0(r2)
   51fc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   51fcc:	e0fffd17 	ldw	r3,-12(fp)
   51fd0:	00800174 	movhi	r2,5
   51fd4:	10909f04 	addi	r2,r2,17020
   51fd8:	18bfcb1e 	bne	r3,r2,51f08 <__alt_data_end+0xfffd7588>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   51fdc:	0005883a 	mov	r2,zero
}
   51fe0:	e037883a 	mov	sp,fp
   51fe4:	dfc00117 	ldw	ra,4(sp)
   51fe8:	df000017 	ldw	fp,0(sp)
   51fec:	dec00204 	addi	sp,sp,8
   51ff0:	f800283a 	ret

00051ff4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   51ff4:	defffc04 	addi	sp,sp,-16
   51ff8:	df000315 	stw	fp,12(sp)
   51ffc:	df000304 	addi	fp,sp,12
   52000:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   52004:	00bffa04 	movi	r2,-24
   52008:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   5200c:	e03ffd15 	stw	zero,-12(fp)
   52010:	00001d06 	br	52088 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   52014:	00800174 	movhi	r2,5
   52018:	108c1e04 	addi	r2,r2,12408
   5201c:	e0fffd17 	ldw	r3,-12(fp)
   52020:	18c00324 	muli	r3,r3,12
   52024:	10c5883a 	add	r2,r2,r3
   52028:	10800017 	ldw	r2,0(r2)
   5202c:	1000131e 	bne	r2,zero,5207c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   52030:	00800174 	movhi	r2,5
   52034:	108c1e04 	addi	r2,r2,12408
   52038:	e0fffd17 	ldw	r3,-12(fp)
   5203c:	18c00324 	muli	r3,r3,12
   52040:	10c5883a 	add	r2,r2,r3
   52044:	e0ffff17 	ldw	r3,-4(fp)
   52048:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   5204c:	00800174 	movhi	r2,5
   52050:	1090a304 	addi	r2,r2,17036
   52054:	10c00017 	ldw	r3,0(r2)
   52058:	e0bffd17 	ldw	r2,-12(fp)
   5205c:	1880040e 	bge	r3,r2,52070 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   52060:	00800174 	movhi	r2,5
   52064:	1090a304 	addi	r2,r2,17036
   52068:	e0fffd17 	ldw	r3,-12(fp)
   5206c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   52070:	e0bffd17 	ldw	r2,-12(fp)
   52074:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   52078:	00000606 	br	52094 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   5207c:	e0bffd17 	ldw	r2,-12(fp)
   52080:	10800044 	addi	r2,r2,1
   52084:	e0bffd15 	stw	r2,-12(fp)
   52088:	e0bffd17 	ldw	r2,-12(fp)
   5208c:	10800810 	cmplti	r2,r2,32
   52090:	103fe01e 	bne	r2,zero,52014 <__alt_data_end+0xfffd7694>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   52094:	e0bffe17 	ldw	r2,-8(fp)
}
   52098:	e037883a 	mov	sp,fp
   5209c:	df000017 	ldw	fp,0(sp)
   520a0:	dec00104 	addi	sp,sp,4
   520a4:	f800283a 	ret

000520a8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   520a8:	defffb04 	addi	sp,sp,-20
   520ac:	df000415 	stw	fp,16(sp)
   520b0:	df000404 	addi	fp,sp,16
   520b4:	e13ffe15 	stw	r4,-8(fp)
   520b8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   520bc:	e0bfff17 	ldw	r2,-4(fp)
   520c0:	10840070 	cmpltui	r2,r2,4097
   520c4:	1000021e 	bne	r2,zero,520d0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   520c8:	00840004 	movi	r2,4096
   520cc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   520d0:	e0fffe17 	ldw	r3,-8(fp)
   520d4:	e0bfff17 	ldw	r2,-4(fp)
   520d8:	1885883a 	add	r2,r3,r2
   520dc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   520e0:	e0bffe17 	ldw	r2,-8(fp)
   520e4:	e0bffc15 	stw	r2,-16(fp)
   520e8:	00000506 	br	52100 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   520ec:	e0bffc17 	ldw	r2,-16(fp)
   520f0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   520f4:	e0bffc17 	ldw	r2,-16(fp)
   520f8:	10800804 	addi	r2,r2,32
   520fc:	e0bffc15 	stw	r2,-16(fp)
   52100:	e0fffc17 	ldw	r3,-16(fp)
   52104:	e0bffd17 	ldw	r2,-12(fp)
   52108:	18bff836 	bltu	r3,r2,520ec <__alt_data_end+0xfffd776c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   5210c:	e0bffe17 	ldw	r2,-8(fp)
   52110:	108007cc 	andi	r2,r2,31
   52114:	10000226 	beq	r2,zero,52120 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   52118:	e0bffc17 	ldw	r2,-16(fp)
   5211c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   52120:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   52124:	e037883a 	mov	sp,fp
   52128:	df000017 	ldw	fp,0(sp)
   5212c:	dec00104 	addi	sp,sp,4
   52130:	f800283a 	ret

00052134 <atexit>:
   52134:	200b883a 	mov	r5,r4
   52138:	000d883a 	mov	r6,zero
   5213c:	0009883a 	mov	r4,zero
   52140:	000f883a 	mov	r7,zero
   52144:	00521801 	jmpi	52180 <__register_exitproc>

00052148 <exit>:
   52148:	defffe04 	addi	sp,sp,-8
   5214c:	000b883a 	mov	r5,zero
   52150:	dc000015 	stw	r16,0(sp)
   52154:	dfc00115 	stw	ra,4(sp)
   52158:	2021883a 	mov	r16,r4
   5215c:	00522940 	call	52294 <__call_exitprocs>
   52160:	00800174 	movhi	r2,5
   52164:	10909904 	addi	r2,r2,16996
   52168:	11000017 	ldw	r4,0(r2)
   5216c:	20800f17 	ldw	r2,60(r4)
   52170:	10000126 	beq	r2,zero,52178 <exit+0x30>
   52174:	103ee83a 	callr	r2
   52178:	8009883a 	mov	r4,r16
   5217c:	00524280 	call	52428 <_exit>

00052180 <__register_exitproc>:
   52180:	00800174 	movhi	r2,5
   52184:	defffa04 	addi	sp,sp,-24
   52188:	10909904 	addi	r2,r2,16996
   5218c:	dc000315 	stw	r16,12(sp)
   52190:	14000017 	ldw	r16,0(r2)
   52194:	dc400415 	stw	r17,16(sp)
   52198:	dfc00515 	stw	ra,20(sp)
   5219c:	80805217 	ldw	r2,328(r16)
   521a0:	2023883a 	mov	r17,r4
   521a4:	10003626 	beq	r2,zero,52280 <__register_exitproc+0x100>
   521a8:	10c00117 	ldw	r3,4(r2)
   521ac:	010007c4 	movi	r4,31
   521b0:	20c00e16 	blt	r4,r3,521ec <__register_exitproc+0x6c>
   521b4:	1a400044 	addi	r9,r3,1
   521b8:	8800211e 	bne	r17,zero,52240 <__register_exitproc+0xc0>
   521bc:	18c00084 	addi	r3,r3,2
   521c0:	18c7883a 	add	r3,r3,r3
   521c4:	18c7883a 	add	r3,r3,r3
   521c8:	12400115 	stw	r9,4(r2)
   521cc:	10c7883a 	add	r3,r2,r3
   521d0:	19400015 	stw	r5,0(r3)
   521d4:	0005883a 	mov	r2,zero
   521d8:	dfc00517 	ldw	ra,20(sp)
   521dc:	dc400417 	ldw	r17,16(sp)
   521e0:	dc000317 	ldw	r16,12(sp)
   521e4:	dec00604 	addi	sp,sp,24
   521e8:	f800283a 	ret
   521ec:	00800034 	movhi	r2,0
   521f0:	10800004 	addi	r2,r2,0
   521f4:	10002526 	beq	r2,zero,5228c <__register_exitproc+0x10c>
   521f8:	01006404 	movi	r4,400
   521fc:	d9400015 	stw	r5,0(sp)
   52200:	d9800115 	stw	r6,4(sp)
   52204:	d9c00215 	stw	r7,8(sp)
   52208:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   5220c:	d9400017 	ldw	r5,0(sp)
   52210:	d9800117 	ldw	r6,4(sp)
   52214:	d9c00217 	ldw	r7,8(sp)
   52218:	10001c26 	beq	r2,zero,5228c <__register_exitproc+0x10c>
   5221c:	80c05217 	ldw	r3,328(r16)
   52220:	10000115 	stw	zero,4(r2)
   52224:	02400044 	movi	r9,1
   52228:	10c00015 	stw	r3,0(r2)
   5222c:	80805215 	stw	r2,328(r16)
   52230:	10006215 	stw	zero,392(r2)
   52234:	10006315 	stw	zero,396(r2)
   52238:	0007883a 	mov	r3,zero
   5223c:	883fdf26 	beq	r17,zero,521bc <__alt_data_end+0xfffd783c>
   52240:	18d1883a 	add	r8,r3,r3
   52244:	4211883a 	add	r8,r8,r8
   52248:	1211883a 	add	r8,r2,r8
   5224c:	41802215 	stw	r6,136(r8)
   52250:	01000044 	movi	r4,1
   52254:	11806217 	ldw	r6,392(r2)
   52258:	20c8983a 	sll	r4,r4,r3
   5225c:	310cb03a 	or	r6,r6,r4
   52260:	11806215 	stw	r6,392(r2)
   52264:	41c04215 	stw	r7,264(r8)
   52268:	01800084 	movi	r6,2
   5226c:	89bfd31e 	bne	r17,r6,521bc <__alt_data_end+0xfffd783c>
   52270:	11806317 	ldw	r6,396(r2)
   52274:	3108b03a 	or	r4,r6,r4
   52278:	11006315 	stw	r4,396(r2)
   5227c:	003fcf06 	br	521bc <__alt_data_end+0xfffd783c>
   52280:	80805304 	addi	r2,r16,332
   52284:	80805215 	stw	r2,328(r16)
   52288:	003fc706 	br	521a8 <__alt_data_end+0xfffd7828>
   5228c:	00bfffc4 	movi	r2,-1
   52290:	003fd106 	br	521d8 <__alt_data_end+0xfffd7858>

00052294 <__call_exitprocs>:
   52294:	00800174 	movhi	r2,5
   52298:	10909904 	addi	r2,r2,16996
   5229c:	10800017 	ldw	r2,0(r2)
   522a0:	defff404 	addi	sp,sp,-48
   522a4:	dd800815 	stw	r22,32(sp)
   522a8:	d8800015 	stw	r2,0(sp)
   522ac:	10805204 	addi	r2,r2,328
   522b0:	dd000615 	stw	r20,24(sp)
   522b4:	dc800415 	stw	r18,16(sp)
   522b8:	dfc00b15 	stw	ra,44(sp)
   522bc:	df000a15 	stw	fp,40(sp)
   522c0:	ddc00915 	stw	r23,36(sp)
   522c4:	dd400715 	stw	r21,28(sp)
   522c8:	dcc00515 	stw	r19,20(sp)
   522cc:	dc400315 	stw	r17,12(sp)
   522d0:	dc000215 	stw	r16,8(sp)
   522d4:	2025883a 	mov	r18,r4
   522d8:	2829883a 	mov	r20,r5
   522dc:	d8800115 	stw	r2,4(sp)
   522e0:	05bfffc4 	movi	r22,-1
   522e4:	d8800017 	ldw	r2,0(sp)
   522e8:	14c05217 	ldw	r19,328(r2)
   522ec:	98001d26 	beq	r19,zero,52364 <__call_exitprocs+0xd0>
   522f0:	dd400117 	ldw	r21,4(sp)
   522f4:	98800117 	ldw	r2,4(r19)
   522f8:	173fffc4 	addi	fp,r2,-1
   522fc:	e0000d16 	blt	fp,zero,52334 <__call_exitprocs+0xa0>
   52300:	14000044 	addi	r16,r2,1
   52304:	8421883a 	add	r16,r16,r16
   52308:	8421883a 	add	r16,r16,r16
   5230c:	84402004 	addi	r17,r16,128
   52310:	9c63883a 	add	r17,r19,r17
   52314:	9c21883a 	add	r16,r19,r16
   52318:	a0001e26 	beq	r20,zero,52394 <__call_exitprocs+0x100>
   5231c:	80804017 	ldw	r2,256(r16)
   52320:	15001c26 	beq	r2,r20,52394 <__call_exitprocs+0x100>
   52324:	e73fffc4 	addi	fp,fp,-1
   52328:	843fff04 	addi	r16,r16,-4
   5232c:	8c7fff04 	addi	r17,r17,-4
   52330:	e5bff91e 	bne	fp,r22,52318 <__alt_data_end+0xfffd7998>
   52334:	00800034 	movhi	r2,0
   52338:	10800004 	addi	r2,r2,0
   5233c:	10000926 	beq	r2,zero,52364 <__call_exitprocs+0xd0>
   52340:	98800117 	ldw	r2,4(r19)
   52344:	1000311e 	bne	r2,zero,5240c <__call_exitprocs+0x178>
   52348:	98800017 	ldw	r2,0(r19)
   5234c:	10003426 	beq	r2,zero,52420 <__call_exitprocs+0x18c>
   52350:	9809883a 	mov	r4,r19
   52354:	a8800015 	stw	r2,0(r21)
   52358:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   5235c:	acc00017 	ldw	r19,0(r21)
   52360:	983fe41e 	bne	r19,zero,522f4 <__alt_data_end+0xfffd7974>
   52364:	dfc00b17 	ldw	ra,44(sp)
   52368:	df000a17 	ldw	fp,40(sp)
   5236c:	ddc00917 	ldw	r23,36(sp)
   52370:	dd800817 	ldw	r22,32(sp)
   52374:	dd400717 	ldw	r21,28(sp)
   52378:	dd000617 	ldw	r20,24(sp)
   5237c:	dcc00517 	ldw	r19,20(sp)
   52380:	dc800417 	ldw	r18,16(sp)
   52384:	dc400317 	ldw	r17,12(sp)
   52388:	dc000217 	ldw	r16,8(sp)
   5238c:	dec00c04 	addi	sp,sp,48
   52390:	f800283a 	ret
   52394:	98800117 	ldw	r2,4(r19)
   52398:	80c00017 	ldw	r3,0(r16)
   5239c:	10bfffc4 	addi	r2,r2,-1
   523a0:	17001526 	beq	r2,fp,523f8 <__call_exitprocs+0x164>
   523a4:	80000015 	stw	zero,0(r16)
   523a8:	183fde26 	beq	r3,zero,52324 <__alt_data_end+0xfffd79a4>
   523ac:	00800044 	movi	r2,1
   523b0:	1708983a 	sll	r4,r2,fp
   523b4:	98806217 	ldw	r2,392(r19)
   523b8:	9dc00117 	ldw	r23,4(r19)
   523bc:	2084703a 	and	r2,r4,r2
   523c0:	1000061e 	bne	r2,zero,523dc <__call_exitprocs+0x148>
   523c4:	183ee83a 	callr	r3
   523c8:	98800117 	ldw	r2,4(r19)
   523cc:	15ffc51e 	bne	r2,r23,522e4 <__alt_data_end+0xfffd7964>
   523d0:	a8800017 	ldw	r2,0(r21)
   523d4:	14ffd326 	beq	r2,r19,52324 <__alt_data_end+0xfffd79a4>
   523d8:	003fc206 	br	522e4 <__alt_data_end+0xfffd7964>
   523dc:	98806317 	ldw	r2,396(r19)
   523e0:	2084703a 	and	r2,r4,r2
   523e4:	1000061e 	bne	r2,zero,52400 <__call_exitprocs+0x16c>
   523e8:	89400017 	ldw	r5,0(r17)
   523ec:	9009883a 	mov	r4,r18
   523f0:	183ee83a 	callr	r3
   523f4:	003ff406 	br	523c8 <__alt_data_end+0xfffd7a48>
   523f8:	9f000115 	stw	fp,4(r19)
   523fc:	003fea06 	br	523a8 <__alt_data_end+0xfffd7a28>
   52400:	89000017 	ldw	r4,0(r17)
   52404:	183ee83a 	callr	r3
   52408:	003fef06 	br	523c8 <__alt_data_end+0xfffd7a48>
   5240c:	98800017 	ldw	r2,0(r19)
   52410:	982b883a 	mov	r21,r19
   52414:	1027883a 	mov	r19,r2
   52418:	983fb61e 	bne	r19,zero,522f4 <__alt_data_end+0xfffd7974>
   5241c:	003fd106 	br	52364 <__alt_data_end+0xfffd79e4>
   52420:	0005883a 	mov	r2,zero
   52424:	003ffa06 	br	52410 <__alt_data_end+0xfffd7a90>

00052428 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   52428:	defffd04 	addi	sp,sp,-12
   5242c:	df000215 	stw	fp,8(sp)
   52430:	df000204 	addi	fp,sp,8
   52434:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   52438:	0001883a 	nop
   5243c:	e0bfff17 	ldw	r2,-4(fp)
   52440:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   52444:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   52448:	10000226 	beq	r2,zero,52454 <_exit+0x2c>
    ALT_SIM_FAIL();
   5244c:	002af070 	cmpltui	zero,zero,43969
   52450:	00000106 	br	52458 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   52454:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   52458:	003fff06 	br	52458 <__alt_data_end+0xfffd7ad8>
