
cancion_doble.elf:     file format elf32-littlenios2
cancion_doble.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0004022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000f47c memsz 0x0000f47c flags r-x
    LOAD off    0x0001049c vaddr 0x0004f49c paddr 0x00051060 align 2**12
         filesz 0x00001bc4 memsz 0x00001bc4 flags rw-
    LOAD off    0x00012c24 vaddr 0x00052c24 paddr 0x00052c24 align 2**12
         filesz 0x00000000 memsz 0x000093dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f0f4  0004022c  0004022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000017c  0004f320  0004f320  00010320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc4  0004f49c  00051060  0001049c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000093dc  00052c24  00052c24  00012c24  2**2
                  ALLOC, SMALL_DATA
  6 .RAM_jesus    00000000  0005c000  0005c000  00012060  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012060  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b78  00000000  00000000  00012088  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000213e3  00000000  00000000  00012c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008151  00000000  00000000  00033fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00009783  00000000  00000000  0003c134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002894  00000000  00000000  000458b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003b2f  00000000  00000000  0004814c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004721  00000000  00000000  0004bc7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0005039c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000328  00000000  00000000  000503b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000547b6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000547bc  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000547bf  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000547c0  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000547c1  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000547ca  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000547d3  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  000547dc  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000044  00000000  00000000  000547e9  2**0
                  CONTENTS, READONLY
 26 .jdi          00003b78  00000000  00000000  0005482d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000717e6  00000000  00000000  000583a5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
0004022c l    d  .text	00000000 .text
0004f320 l    d  .rodata	00000000 .rodata
0004f49c l    d  .rwdata	00000000 .rwdata
00052c24 l    d  .bss	00000000 .bss
0005c000 l    d  .RAM_jesus	00000000 .RAM_jesus
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cancion_doble_bsp//obj/HAL/src/crt0.o
00040264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0004f49c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00042598 l     F .text	00000008 __fp_lock
000425a0 l     F .text	00000008 __fp_unlock
000425b4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00043638 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00043760 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004378c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00043894 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043990 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043a74 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00043c74 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00050fd4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00043ef8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00050fd8 l     O .rwdata	00000004 lockid
00052c44 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00050fdc l     O .rwdata	00000004 lockid
00052c4c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00045934 l     F .text	00000044 OS_InitMisc
00045978 l     F .text	00000068 OS_InitRdyList
00045ad8 l     F .text	000000e0 OS_InitTCBList
00045858 l     F .text	000000dc OS_InitEventList
000459e0 l     F .text	0000007c OS_InitTaskIdle
00045a5c l     F .text	0000007c OS_InitTaskStat
00045d38 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00047b2c l     F .text	00000110 OS_FlagTaskRdy
00047884 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004bffc l     F .text	00000038 alt_dev_reg
0004fe70 l     O .rwdata	0000106c jtag_uart
00050edc l     O .rwdata	000000d0 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004c390 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0004c634 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004ce0c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0004d174 l     F .text	00000098 altera_avalon_uart_irq
0004d20c l     F .text	00000138 altera_avalon_uart_rxirq
0004d344 l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0004d53c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0004d7f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004dbd8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004e070 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004e1c8 l     F .text	00000050 alt_get_errno
0004e218 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0004f1b8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00052cb0 g     O .bss	00000004 alt_instruction_exception_handler
0005102a g     O .rwdata	00000002 OSTaskNameSize
00043504 g     F .text	00000054 _isatty_r
00043ba0 g     F .text	000000d4 alt_main
00040af0 g     F .text	000000b8 _puts_r
0005bf00 g     O .bss	00000100 alt_irq
00043558 g     F .text	0000005c _lseek_r
00048390 g     F .text	000000dc OS_MemInit
00051060 g       *ABS*	00000000 __flash_rwdata_start
0004bf98 g     F .text	00000064 OSTimeSet
000445b0 g     F .text	00000610 OSEventPendMulti
0005c000 g       *ABS*	00000000 __alt_heap_start
0004e9ec g     F .text	00000020 OSTaskCreateHook
00052cdc g     O .bss	00002000 task1_stk
00051002 g     O .rwdata	00000002 OSMboxEn
00044c14 g     F .text	0000007c OSIntEnter
00043284 g     F .text	0000005c __sseek
000428fc g     F .text	00000010 __sinit
00051012 g     O .rwdata	00000002 OSQEn
00042754 g     F .text	00000078 __sfmoreglue
00044284 g     F .text	000000d0 __malloc_unlock
0004ea48 g     F .text	0000001c OSTaskStatHook
00052c54 g     O .bss	00000001 OSLockNesting
00051050 g     O .rwdata	00000002 OSDataSize
00052c55 g     O .bss	00000001 OSRunning
00041ac0 g     F .text	0000015c memmove
0004ea80 g     F .text	0000001c OSInitHookBegin
00051048 g     O .rwdata	00000002 OSTmrSize
000428e4 g     F .text	00000018 _cleanup
00052c58 g     O .bss	00000004 OSIdleCtr
0004e608 g     F .text	00000020 altera_nios2_gen2_irq_init
0004e6d4 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00046060 g     F .text	000002d4 OS_TCBInit
00040000 g     F .entry	0000000c __reset
0005104e g     O .rwdata	00000002 OSTmrWheelTblSize
00040020 g       *ABS*	00000000 __flash_exceptions_start
00050fee g     O .rwdata	00000002 OSEventSize
00052c5c g     O .bss	00000001 OSPrioHighRdy
000434ac g     F .text	00000058 _fstat_r
0004ea0c g     F .text	00000020 OSTaskDelHook
00052c30 g     O .bss	00000004 errno
00043200 g     F .text	00000008 __seofread
0004e6b4 g       .text	00000000 OSStartHighRdy
0004a880 g     F .text	000001ec OSTaskCreateExt
000473d0 g     F .text	00000068 OSFlagPendGetFlagsRdy
0005102e g     O .rwdata	00000002 OSTaskStatStkSize
000464c0 g     F .text	00000308 OSFlagAccept
00048a70 g     F .text	000000b8 OSQFlush
0004846c g     F .text	00000140 OSQAccept
00052c3c g     O .bss	00000004 alt_argv
00058fac g       *ABS*	00000000 _gp
0004a6c4 g     F .text	000001bc OSTaskCreate
0004a184 g     F .text	00000540 OSTaskChangePrio
00052c50 g     O .bss	00000004 alt_heapsem
000402e0 g     F .text	00000078 play_tone1
00046334 g     F .text	0000018c OSDebugInit
0004aa6c g     F .text	000003e0 OSTaskDel
0004fcf0 g     O .rwdata	00000180 alt_fd_list
00058cdc g     O .bss	00000370 OSFlagTbl
00045644 g     F .text	000000b4 OS_EventTaskRemove
0004eaf4 g     F .text	00000090 alt_find_dev
00041988 g     F .text	00000138 memcpy
00051018 g     O .rwdata	00000002 OSRdyTblSize
000425a8 g     F .text	0000000c _cleanup_r
0004e150 g     F .text	00000078 alt_io_redirect
0004f320 g       *ABS*	00000000 __DTOR_END__
00040ba8 g     F .text	00000014 puts
0004edac g     F .text	0000009c alt_exception_cause_generated_bad_addr
00044354 g     F .text	00000120 OSEventNameGet
00050ffc g     O .rwdata	00000002 OSFlagMax
00044c90 g     F .text	000000f4 OSIntExit
00051036 g     O .rwdata	00000002 OSTCBSize
00052c5d g     O .bss	00000001 OSPrioCur
0004c898 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0004f2d4 g     F .text	00000008 .hidden __udivsi3
000438e4 g     F .text	000000ac isatty
0005101c g     O .rwdata	00000002 OSStkWidth
00051010 g     O .rwdata	00000002 OSPtrSize
00050ff0 g     O .rwdata	00000002 OSEventTblSize
0004e628 g       .text	00000000 OSCtxSw
00052c2c g     O .bss	00000004 __malloc_top_pad
00052c60 g     O .bss	00000004 OSTCBList
00052c34 g     O .bss	00000004 alt_fd_list_lock
00040c54 g     F .text	000004a4 __sfvwrite_r
0005904c g     O .bss	00000c30 OSMemTbl
00052c64 g     O .bss	00000001 OSTickStepState
000421bc g     F .text	00000054 _sbrk_r
00051014 g     O .rwdata	00000002 OSQMax
00059c7c g     O .bss	00000800 OSTaskStatStk
00047fc0 g     F .text	000000f8 OSMemNameGet
00050ff4 g     O .rwdata	00000002 OSFlagEn
000435b4 g     F .text	0000005c _read_r
0005103a g     O .rwdata	00000002 OSTimeTickHookEn
00048f90 g     F .text	00000168 OSQPost
00047c3c g     F .text	000000a0 OS_FlagUnlink
00050fcc g     O .rwdata	00000004 alt_max_fd
00045c08 g     F .text	00000064 OS_MemCopy
00045c6c g     F .text	000000cc OS_Sched
00043398 g     F .text	00000100 _fclose_r
00047ed0 g     F .text	000000f0 OSMemGet
0004b14c g     F .text	000001c0 OSTaskNameSet
00042568 g     F .text	00000030 fflush
00052c28 g     O .bss	00000004 __malloc_max_sbrked_mem
00052c68 g     O .bss	00000004 OSCtxSwCtr
0004ea64 g     F .text	0000001c OSTimeTickHook
00050ffe g     O .rwdata	00000002 OSFlagNameSize
000456f8 g     F .text	000000fc OS_EventTaskRemoveMulti
000454f8 g     F .text	0000014c OS_EventTaskWaitMulti
00051016 g     O .rwdata	00000002 OSQSize
00043ac4 g     F .text	000000dc lseek
00049a94 g     F .text	00000268 OSSemPend
00050fac g     O .rwdata	00000004 _global_impure_ptr
00041c1c g     F .text	000005a0 _realloc_r
00051000 g     O .rwdata	00000002 OSLowestPrio
0005c000 g       *ABS*	00000000 __bss_end
0004df80 g     F .text	000000f0 alt_iic_isr_register
0004ead4 g     F .text	00000020 OSTCBInitHook
00051046 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0004e504 g     F .text	00000104 alt_tick
00050fe8 g     O .rwdata	00000002 OSEventEn
00051042 g     O .rwdata	00000002 OSTmrCfgNameSize
0004d018 g     F .text	0000015c altera_avalon_uart_init
0004291c g     F .text	00000018 __fp_lock_all
0004df34 g     F .text	0000004c alt_ic_irq_enabled
00047a48 g     F .text	000000e4 OS_FlagInit
0004e46c g     F .text	00000098 alt_alarm_stop
00051024 g     O .rwdata	00000002 OSTaskIdleStkSize
00052ca4 g     O .bss	00000004 alt_irq_active
0004967c g     F .text	000000b0 OSSemAccept
000481d0 g     F .text	000000d8 OSMemPut
00047cdc g     F .text	000001f4 OSMemCreate
00052c6c g     O .bss	00000004 OSIdleCtrMax
000400fc g     F .exceptions	000000d0 alt_irq_handler
0004fcc8 g     O .rwdata	00000028 alt_dev_null
00051038 g     O .rwdata	00000002 OSTicksPerSec
0004e628 g       .text	00000000 OSIntCtxSw
0004dbbc g     F .text	0000001c alt_dcache_flush_all
00052c70 g     O .bss	00000004 OSTCBFreeList
00051060 g       *ABS*	00000000 __ram_rwdata_end
00049cfc g     F .text	0000016c OSSemPendAbort
00050fc4 g     O .rwdata	00000008 alt_dev_list
00043f48 g     F .text	00000100 write
0005103c g     O .rwdata	00000002 OSVersionNbr
0004f49c g       *ABS*	00000000 __ram_rodata_end
000437dc g     F .text	000000b8 fstat
00050fe4 g     O .rwdata	00000004 OSEndiannessTest
0004f2dc g     F .text	00000008 .hidden __umodsi3
00050ff6 g     O .rwdata	00000002 OSFlagGrpSize
0005c000 g       *ABS*	00000000 end
0004d844 g     F .text	00000238 altera_avalon_uart_write
0004c244 g     F .text	0000014c altera_avalon_jtag_uart_init
00045ecc g     F .text	000000cc OS_TaskStat
000401cc g     F .exceptions	00000060 alt_instruction_exception_entry
00040268 g     F .text	00000078 play_tone
0004f320 g       *ABS*	00000000 __CTOR_LIST__
00075b60 g       *ABS*	00000000 __alt_stack_pointer
0004ce80 g     F .text	00000088 alt_avalon_timer_sc_init
0004cf68 g     F .text	00000060 altera_avalon_uart_write_fd
0004cfc8 g     F .text	00000050 altera_avalon_uart_close_fd
0004cb4c g     F .text	000002c0 altera_avalon_jtag_uart_write
0004290c g     F .text	00000004 __sfp_lock_acquire
000418a0 g     F .text	000000e8 memchr
00045bb8 g     F .text	00000050 OS_MemClr
0004e6f8 g     F .text	000002f4 OSTaskStkInit
00040358 g     F .text	000000a4 task1
00042a70 g     F .text	000002f0 _free_r
00045254 g     F .text	00000198 OS_EventTaskRdy
0004f024 g     F .text	00000194 __call_exitprocs
00052c74 g     O .bss	00000001 OSCPUUsage
00050fb4 g     O .rwdata	00000004 __malloc_sbrk_base
0004022c g     F .text	0000003c _start
000403fc g     F .text	00000390 task2
00052ca8 g     O .bss	00000004 _alt_tick_rate
00048b28 g     F .text	000002fc OSQPend
0004ba78 g     F .text	00000148 OSTimeDly
00052cac g     O .bss	00000004 _alt_nticks
00043cc4 g     F .text	00000104 read
0004c068 g     F .text	00000078 alt_sys_init
0004ef10 g     F .text	00000114 __register_exitproc
00052c75 g     O .bss	00000001 OSTaskCtr
0004bbc0 g     F .text	00000184 OSTimeDlyHMSM
0004c744 g     F .text	00000068 altera_avalon_jtag_uart_close
00043610 g     F .text	00000028 .hidden __mulsi3
0004f49c g       *ABS*	00000000 __ram_rwdata_start
0004f320 g       *ABS*	00000000 __ram_rodata_start
00052cb4 g     O .bss	00000028 __malloc_current_mallinfo
00050fea g     O .rwdata	00000002 OSEventMax
00049e68 g     F .text	00000110 OSSemPost
00044e0c g     F .text	000000d8 OSSchedUnlock
0004c0e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004ec98 g     F .text	00000114 alt_get_fd
00052c78 g     O .bss	00000004 OSMemFreeList
00044f50 g     F .text	000000ac OSStatInit
000477c0 g     F .text	000000c4 OSFlagQuery
00051020 g     O .rwdata	00000002 OSTaskCreateExtEn
00043344 g     F .text	00000054 _close_r
0004ee94 g     F .text	0000007c memcmp
00045238 g     F .text	0000001c OS_Dummy
0004c1a0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0005c000 g       *ABS*	00000000 __alt_stack_base
0004c1f0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0004078c g     F .text	00000278 leds_task
00042210 g     F .text	00000130 __swsetup_r
0005a47c g     O .bss	000001e0 OSQTbl
000427cc g     F .text	00000118 __sfp
0004f8c0 g     O .rwdata	00000408 __malloc_av_
00042918 g     F .text	00000004 __sinit_lock_release
00052c7c g     O .bss	00000004 OSTCBHighRdy
000431ac g     F .text	00000054 __sread
00052c80 g     O .bss	00000004 OSQFreeList
0004eb84 g     F .text	00000114 alt_find_file
0004dc28 g     F .text	000000a4 alt_dev_llist_insert
00044164 g     F .text	00000120 __malloc_lock
00043e48 g     F .text	000000b0 sbrk
00044474 g     F .text	0000013c OSEventNameSet
00042340 g     F .text	00000228 _fflush_r
00052c84 g     O .bss	00000001 OSRdyGrp
00052c24 g       *ABS*	00000000 __bss_start
00043088 g     F .text	00000124 memset
00040a04 g     F .text	000000ec main
00052c40 g     O .bss	00000004 alt_envp
00052c24 g     O .bss	00000004 __malloc_max_total_mem
0004c140 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004f35c g     O .rodata	00000100 OSUnMapTbl
00040000 g       *ABS*	00000000 __alt_mem_RAM_jesus
0005101a g     O .rwdata	00000002 OSSemEn
00047438 g     F .text	00000388 OSFlagPost
000432e0 g     F .text	00000008 __sclose
00075b60 g       *ABS*	00000000 __alt_heap_limit
00043498 g     F .text	00000014 fclose
000453ec g     F .text	0000010c OS_EventTaskWait
00054cdc g     O .bss	00002000 task2_stk
00045f98 g     F .text	000000c8 OS_TaskStatStkChk
0004ae4c g     F .text	00000158 OSTaskDelReq
000410f8 g     F .text	000007a8 _malloc_r
00050fd0 g     O .rwdata	00000004 alt_errno
00044ee4 g     F .text	0000006c OSStart
00044108 g     F .text	0000005c __env_unlock
00042d60 g     F .text	000000b8 _fwalk
0004b30c g     F .text	000001f8 OSTaskResume
000482a8 g     F .text	000000e8 OSMemQuery
0005102c g     O .rwdata	00000002 OSTaskStatEn
00051006 g     O .rwdata	00000002 OSMemMax
000490f8 g     F .text	00000170 OSQPostFront
0004f224 g     F .text	00000054 .hidden __divsi3
00052c85 g     O .bss	00000003 OSRdyTbl
00050fe0 g     O .rwdata	00000002 OSDebugEn
0004294c g     F .text	00000124 _malloc_trim_r
0004f320 g       *ABS*	00000000 __CTOR_END__
00050ff8 g     O .rwdata	00000002 OSFlagNodeSize
00051040 g     O .rwdata	00000002 OSTmrCfgMax
000485ac g     F .text	000001fc OSQCreate
0004afa4 g     F .text	000001a8 OSTaskNameGet
0004f320 g       *ABS*	00000000 __flash_rodata_start
00049268 g     F .text	0000020c OSQPostOpt
00044ffc g     F .text	0000021c OSTimeTick
00051028 g     O .rwdata	00000002 OSTaskMax
0004f320 g       *ABS*	00000000 __DTOR_LIST__
0004972c g     F .text	00000100 OSSemCreate
0005104c g     O .rwdata	00000002 OSTmrWheelSize
00051022 g     O .rwdata	00000002 OSTaskDelEn
00049f78 g     F .text	00000110 OSSemQuery
000487a8 g     F .text	000002c8 OSQDel
00048e24 g     F .text	0000016c OSQPendAbort
0004c034 g     F .text	00000034 alt_irq_init
00043dc8 g     F .text	00000080 alt_release_fd
0004ee48 g     F .text	00000014 atexit
000432e8 g     F .text	0000005c _write_r
00044d84 g     F .text	00000088 OSSchedLock
000467c8 g     F .text	00000128 OSFlagCreate
00050fb0 g     O .rwdata	00000004 _impure_ptr
00052c38 g     O .bss	00000004 alt_argc
0004dd28 g     F .text	0000005c _do_dtors
00050ff2 g     O .rwdata	00000002 OSEventMultiEn
000468f0 g     F .text	00000270 OSFlagDel
00052c88 g     O .bss	00000004 OSEventFreeList
00040020 g       .exceptions	00000000 alt_irq_entry
00046de0 g     F .text	000005f0 OSFlagPend
0005103e g     O .rwdata	00000002 OSTmrEn
00042934 g     F .text	00000018 __fp_unlock_all
00050fbc g     O .rwdata	00000008 alt_fs_list
00045da8 g     F .text	00000074 OS_StrCopy
00051008 g     O .rwdata	00000002 OSMemNameSize
0004ea9c g     F .text	0000001c OSInitHookEnd
00040020 g       *ABS*	00000000 __ram_exceptions_start
00051034 g     O .rwdata	00000002 OSTCBPrioTblMax
00051030 g     O .rwdata	00000002 OSTaskStatStkChkEn
0004dda0 g     F .text	00000050 alt_ic_isr_register
00051004 g     O .rwdata	00000002 OSMemEn
0005100e g     O .rwdata	00000002 OSMutexEn
00051060 g       *ABS*	00000000 _edata
0004cf08 g     F .text	00000060 altera_avalon_uart_read_fd
0005c000 g       *ABS*	00000000 _end
00052c8c g     O .bss	00000001 OSIntNesting
0004022c g       *ABS*	00000000 __ram_exceptions_end
0004c7ac g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0004bd44 g     F .text	000001f0 OSTimeDlyResume
00046c90 g     F .text	00000150 OSFlagNameSet
0004b504 g     F .text	000001c8 OSTaskStkChk
0004de90 g     F .text	000000a4 alt_ic_irq_disable
0005100a g     O .rwdata	00000002 OSMemSize
00043208 g     F .text	0000007c __swrite
00050fb8 g     O .rwdata	00000004 __malloc_trim_threshold
00052c90 g     O .bss	00000004 OSTCBCur
0004ee5c g     F .text	00000038 exit
0005100c g     O .rwdata	00000002 OSMemTblSize
00042e18 g     F .text	000000b8 _fwalk_reent
0004f278 g     F .text	0000005c .hidden __modsi3
00075b60 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00042910 g     F .text	00000004 __sfp_lock_release
00056cdc g     O .bss	00002000 leds_stk
00044bc0 g     F .text	00000054 OSInit
0004b8e0 g     F .text	0000012c OSTaskQuery
000495d0 g     F .text	000000ac OS_QInit
00045e1c g     F .text	00000054 OS_StrLen
000480b8 g     F .text	00000118 OSMemNameSet
00051026 g     O .rwdata	00000002 OSTaskProfileEn
00052c94 g     O .bss	00000004 OSTime
0004d4e8 g     F .text	00000054 altera_avalon_uart_close
0005a65c g     O .bss	00000800 OSTaskIdleStk
0004f2e4 g     F .text	0000003c _exit
0004da7c g     F .text	00000140 alt_alarm_start
00046b60 g     F .text	00000130 OSFlagNameGet
0004bf34 g     F .text	00000064 OSTimeGet
00042ed0 g     F .text	000001b8 __smakebuf_r
00040bbc g     F .text	00000098 strlen
0004ea2c g     F .text	0000001c OSTaskSwHook
0004e30c g     F .text	00000160 open
0005ae5c g     O .bss	00000b40 OSEventTbl
0005b99c g     O .bss	00000510 OSTCBTbl
0004a088 g     F .text	000000fc OSSemSet
0004dd84 g     F .text	0000001c alt_icache_flush_all
00051054 g     O .rwdata	00000004 alt_priority_mask
0004982c g     F .text	00000268 OSSemDel
00052c98 g     O .bss	00000004 OSFlagFreeList
0004ddf0 g     F .text	000000a0 alt_ic_irq_enable
00050fec g     O .rwdata	00000002 OSEventNameSize
00052c9c g     O .bss	00000001 OSStatRdy
0005beac g     O .bss	00000054 OSTCBPrioTbl
0004d58c g     F .text	00000268 altera_avalon_uart_read
00044048 g     F .text	000000c0 __env_lock
00051032 g     O .rwdata	00000002 OSTaskSwHookEn
00051058 g     O .rwdata	00000008 alt_alarm_list
00050ffa g     O .rwdata	00000002 OSFlagWidth
0004dccc g     F .text	0000005c _do_ctors
00043688 g     F .text	000000d8 close
00052c48 g     O .bss	00000004 alt_envsem
00052ca0 g     O .bss	00000004 OSIdleCtrRun
00045218 g     F .text	00000020 OSVersion
00051044 g     O .rwdata	00000002 OSTmrCfgWheelSize
000439f4 g     F .text	00000080 alt_load
0004ba0c g     F .text	0000006c OS_TaskStkClr
0005101e g     O .rwdata	00000002 OSTaskCreateEn
000457f4 g     F .text	00000064 OS_EventWaitListInit
0004eab8 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00042914 g     F .text	00000004 __sinit_lock_acquire
0004b6cc g     F .text	00000214 OSTaskSuspend
00045e70 g     F .text	0000005c OS_TaskIdle
0005104a g     O .rwdata	00000002 OSTmrTblSize
00049474 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408b14 	ori	at,at,556
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401cc0 	call	401cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0044c140 	call	44c14 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001b4 	movhi	r2,6
   40140:	10afc004 	addi	r2,r2,-16640
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001b4 	movhi	r2,6
   40158:	10afc004 	addi	r2,r2,-16640
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffca5cc>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffca5c0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0044c900 	call	44c90 <OSIntExit>
}
   401b8:	e037883a 	mov	sp,fp
   401bc:	dfc00117 	ldw	ra,4(sp)
   401c0:	df000017 	ldw	fp,0(sp)
   401c4:	dec00204 	addi	sp,sp,8
   401c8:	f800283a 	ret

000401cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401cc:	defffb04 	addi	sp,sp,-20
   401d0:	dfc00415 	stw	ra,16(sp)
   401d4:	df000315 	stw	fp,12(sp)
   401d8:	df000304 	addi	fp,sp,12
   401dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e0:	00bfffc4 	movi	r2,-1
   401e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401ec:	d0a74117 	ldw	r2,-25340(gp)
   401f0:	10000726 	beq	r2,zero,40210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f4:	d0a74117 	ldw	r2,-25340(gp)
   401f8:	e0fffd17 	ldw	r3,-12(fp)
   401fc:	1809883a 	mov	r4,r3
   40200:	e17fff17 	ldw	r5,-4(fp)
   40204:	e1bffe17 	ldw	r6,-8(fp)
   40208:	103ee83a 	callr	r2
   4020c:	00000206 	br	40218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40214:	0005883a 	mov	r2,zero
}
   40218:	e037883a 	mov	sp,fp
   4021c:	dfc00117 	ldw	ra,4(sp)
   40220:	df000017 	ldw	fp,0(sp)
   40224:	dec00204 	addi	sp,sp,8
   40228:	f800283a 	ret

Disassembly of section .text:

0004022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   4022c:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40230:	ded6d814 	ori	sp,sp,23392
    movhi gp, %hi(_gp)
   40234:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40238:	d6a3eb14 	ori	gp,gp,36780
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   4023c:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40240:	108b0914 	ori	r2,r2,11300

    movhi r3, %hi(__bss_end)
   40244:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   40248:	18f00014 	ori	r3,r3,49152

    beq r2, r3, 1f
   4024c:	10c00326 	beq	r2,r3,4025c <_start+0x30>

0:
    stw zero, (r2)
   40250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40258:	10fffd36 	bltu	r2,r3,40250 <__alt_data_end+0xfffca6f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   4025c:	00439f40 	call	439f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40260:	0043ba00 	call	43ba0 <alt_main>

00040264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40264:	003fff06 	br	40264 <__alt_data_end+0xfffca704>

00040268 <play_tone>:

#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2
#define LEDS_PRIORITY       3

void play_tone(int nota, int time_ms){
   40268:	defffc04 	addi	sp,sp,-16
   4026c:	dfc00315 	stw	ra,12(sp)
   40270:	df000215 	stw	fp,8(sp)
   40274:	df000204 	addi	fp,sp,8
   40278:	e13ffe15 	stw	r4,-8(fp)
   4027c:	e17fff15 	stw	r5,-4(fp)
	IOWR(DIV_FREQ_BASE,0,nota);
   40280:	00841c04 	movi	r2,4208
   40284:	e0fffe17 	ldw	r3,-8(fp)
   40288:	10c00035 	stwio	r3,0(r2)
	OSTimeDlyHMSM(0, 0, 0, time_ms*2);
   4028c:	e0bfff17 	ldw	r2,-4(fp)
   40290:	1085883a 	add	r2,r2,r2
   40294:	10bfffcc 	andi	r2,r2,65535
   40298:	0009883a 	mov	r4,zero
   4029c:	000b883a 	mov	r5,zero
   402a0:	000d883a 	mov	r6,zero
   402a4:	100f883a 	mov	r7,r2
   402a8:	004bbc00 	call	4bbc0 <OSTimeDlyHMSM>
	IOWR(DIV_FREQ_BASE,0,silence);
   402ac:	00c00044 	movi	r3,1
   402b0:	00841c04 	movi	r2,4208
   402b4:	10c00035 	stwio	r3,0(r2)
	OSTimeDlyHMSM(0, 0, 0, 10);
   402b8:	0009883a 	mov	r4,zero
   402bc:	000b883a 	mov	r5,zero
   402c0:	000d883a 	mov	r6,zero
   402c4:	01c00284 	movi	r7,10
   402c8:	004bbc00 	call	4bbc0 <OSTimeDlyHMSM>
}
   402cc:	e037883a 	mov	sp,fp
   402d0:	dfc00117 	ldw	ra,4(sp)
   402d4:	df000017 	ldw	fp,0(sp)
   402d8:	dec00204 	addi	sp,sp,8
   402dc:	f800283a 	ret

000402e0 <play_tone1>:
void play_tone1(int nota, int time_ms){
   402e0:	defffc04 	addi	sp,sp,-16
   402e4:	dfc00315 	stw	ra,12(sp)
   402e8:	df000215 	stw	fp,8(sp)
   402ec:	df000204 	addi	fp,sp,8
   402f0:	e13ffe15 	stw	r4,-8(fp)
   402f4:	e17fff15 	stw	r5,-4(fp)
	IOWR(DIV_FREQ1_BASE,0,nota);
   402f8:	00841804 	movi	r2,4192
   402fc:	e0fffe17 	ldw	r3,-8(fp)
   40300:	10c00035 	stwio	r3,0(r2)
	OSTimeDlyHMSM(0, 0, 0, time_ms*2);
   40304:	e0bfff17 	ldw	r2,-4(fp)
   40308:	1085883a 	add	r2,r2,r2
   4030c:	10bfffcc 	andi	r2,r2,65535
   40310:	0009883a 	mov	r4,zero
   40314:	000b883a 	mov	r5,zero
   40318:	000d883a 	mov	r6,zero
   4031c:	100f883a 	mov	r7,r2
   40320:	004bbc00 	call	4bbc0 <OSTimeDlyHMSM>
	IOWR(DIV_FREQ1_BASE,0,silence);
   40324:	00c00044 	movi	r3,1
   40328:	00841804 	movi	r2,4192
   4032c:	10c00035 	stwio	r3,0(r2)
	OSTimeDlyHMSM(0, 0, 0, 10);
   40330:	0009883a 	mov	r4,zero
   40334:	000b883a 	mov	r5,zero
   40338:	000d883a 	mov	r6,zero
   4033c:	01c00284 	movi	r7,10
   40340:	004bbc00 	call	4bbc0 <OSTimeDlyHMSM>
}
   40344:	e037883a 	mov	sp,fp
   40348:	dfc00117 	ldw	ra,4(sp)
   4034c:	df000017 	ldw	fp,0(sp)
   40350:	dec00204 	addi	sp,sp,8
   40354:	f800283a 	ret

00040358 <task1>:
/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
   40358:	defffb04 	addi	sp,sp,-20
   4035c:	dfc00415 	stw	ra,16(sp)
   40360:	df000315 	stw	fp,12(sp)
   40364:	df000304 	addi	fp,sp,12
   40368:	e13fff15 	stw	r4,-4(fp)
	unsigned char counter=0;
   4036c:	e03ffd05 	stb	zero,-12(fp)
	  while (1)
	  {
		  int est= IORD(SW_BASE,0);
   40370:	00842404 	movi	r2,4240
   40374:	10800037 	ldwio	r2,0(r2)
   40378:	e0bffe15 	stw	r2,-8(fp)
		//  counter= IORD(LEDS_BASE,0);
		  if(est==0){
   4037c:	e0bffe17 	ldw	r2,-8(fp)
   40380:	10000f1e 	bne	r2,zero,403c0 <task1+0x68>
			printf("Hola led ++\n");
   40384:	01000174 	movhi	r4,5
   40388:	213cc804 	addi	r4,r4,-3296
   4038c:	0040ba80 	call	40ba8 <puts>
			IOWR(LEDS_BASE,0,counter);
   40390:	e0fffd03 	ldbu	r3,-12(fp)
   40394:	00842004 	movi	r2,4224
   40398:	10c00035 	stwio	r3,0(r2)
			counter++;
   4039c:	e0bffd03 	ldbu	r2,-12(fp)
   403a0:	10800044 	addi	r2,r2,1
   403a4:	e0bffd05 	stb	r2,-12(fp)
			OSTimeDlyHMSM(0, 0, 0, 100);
   403a8:	0009883a 	mov	r4,zero
   403ac:	000b883a 	mov	r5,zero
   403b0:	000d883a 	mov	r6,zero
   403b4:	01c01904 	movi	r7,100
   403b8:	004bbc00 	call	4bbc0 <OSTimeDlyHMSM>
   403bc:	00000e06 	br	403f8 <task1+0xa0>
		  }
		  else{
			printf("Hola led --\n");
   403c0:	01000174 	movhi	r4,5
   403c4:	213ccb04 	addi	r4,r4,-3284
   403c8:	0040ba80 	call	40ba8 <puts>
			IOWR(LEDS_BASE,0,counter);
   403cc:	e0fffd03 	ldbu	r3,-12(fp)
   403d0:	00842004 	movi	r2,4224
   403d4:	10c00035 	stwio	r3,0(r2)
			counter--;
   403d8:	e0bffd03 	ldbu	r2,-12(fp)
   403dc:	10bfffc4 	addi	r2,r2,-1
   403e0:	e0bffd05 	stb	r2,-12(fp)
			OSTimeDlyHMSM(0, 0, 0, 100);
   403e4:	0009883a 	mov	r4,zero
   403e8:	000b883a 	mov	r5,zero
   403ec:	000d883a 	mov	r6,zero
   403f0:	01c01904 	movi	r7,100
   403f4:	004bbc00 	call	4bbc0 <OSTimeDlyHMSM>

		  }
	  }
   403f8:	003fdd06 	br	40370 <__alt_data_end+0xfffca810>

000403fc <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
   403fc:	defffd04 	addi	sp,sp,-12
   40400:	dfc00215 	stw	ra,8(sp)
   40404:	df000115 	stw	fp,4(sp)
   40408:	df000104 	addi	fp,sp,4
   4040c:	e13fff15 	stw	r4,-4(fp)

		  while (1)
		  {


			  play_tone(la, 500);
   40410:	01377c54 	movui	r4,56817
   40414:	01407d04 	movi	r5,500
   40418:	00402680 	call	40268 <play_tone>
			  	play_tone(la, 500);
   4041c:	01377c54 	movui	r4,56817
   40420:	01407d04 	movi	r5,500
   40424:	00402680 	call	40268 <play_tone>
			  	play_tone(la, 500);
   40428:	01377c54 	movui	r4,56817
   4042c:	01407d04 	movi	r5,500
   40430:	00402680 	call	40268 <play_tone>
			  	play_tone(fa, 350);
   40434:	01000074 	movhi	r4,1
   40438:	2105e844 	addi	r4,r4,6049
   4043c:	01405784 	movi	r5,350
   40440:	00402680 	call	40268 <play_tone>
			  	play_tone(doh, 150);
   40444:	012eabd4 	movui	r4,47791
   40448:	01402584 	movi	r5,150
   4044c:	00402680 	call	40268 <play_tone>

			  	play_tone(la, 500);
   40450:	01377c54 	movui	r4,56817
   40454:	01407d04 	movi	r5,500
   40458:	00402680 	call	40268 <play_tone>
			  	play_tone(fa, 350);
   4045c:	01000074 	movhi	r4,1
   40460:	2105e844 	addi	r4,r4,6049
   40464:	01405784 	movi	r5,350
   40468:	00402680 	call	40268 <play_tone>
			  	play_tone(doh, 150);
   4046c:	012eabd4 	movui	r4,47791
   40470:	01402584 	movi	r5,150
   40474:	00402680 	call	40268 <play_tone>
			  	play_tone(la, 1000);
   40478:	01377c54 	movui	r4,56817
   4047c:	0140fa04 	movi	r5,1000
   40480:	00402680 	call	40268 <play_tone>
			  	//first bi

			  	play_tone(mih, 500);
   40484:	01250bd4 	movui	r4,37935
   40488:	01407d04 	movi	r5,500
   4048c:	00402680 	call	40268 <play_tone>
			  	play_tone(mih, 500);
   40490:	01250bd4 	movui	r4,37935
   40494:	01407d04 	movi	r5,500
   40498:	00402680 	call	40268 <play_tone>
			  	play_tone(mih, 500);
   4049c:	01250bd4 	movui	r4,37935
   404a0:	01407d04 	movi	r5,500
   404a4:	00402680 	call	40268 <play_tone>
			  	play_tone(fah, 350);
   404a8:	0122f9d4 	movui	r4,35815
   404ac:	01405784 	movi	r5,350
   404b0:	00402680 	call	40268 <play_tone>
			  	play_tone(doh, 150);
   404b4:	012eabd4 	movui	r4,47791
   404b8:	01402584 	movi	r5,150
   404bc:	00402680 	call	40268 <play_tone>

			  	play_tone(sols, 500);
   404c0:	013ad194 	movui	r4,60230
   404c4:	01407d04 	movi	r5,500
   404c8:	00402680 	call	40268 <play_tone>
			  	play_tone(fa, 350);
   404cc:	01000074 	movhi	r4,1
   404d0:	2105e844 	addi	r4,r4,6049
   404d4:	01405784 	movi	r5,350
   404d8:	00402680 	call	40268 <play_tone>
			  	play_tone(doh, 150);
   404dc:	012eabd4 	movui	r4,47791
   404e0:	01402584 	movi	r5,150
   404e4:	00402680 	call	40268 <play_tone>
			  	play_tone(la, 1000);
   404e8:	01377c54 	movui	r4,56817
   404ec:	0140fa04 	movi	r5,1000
   404f0:	00402680 	call	40268 <play_tone>
			  	//second b..

			  	play_tone(lah, 500);
   404f4:	011bbe04 	movi	r4,28408
   404f8:	01407d04 	movi	r5,500
   404fc:	00402680 	call	40268 <play_tone>
			  	play_tone(la, 350);
   40500:	01377c54 	movui	r4,56817
   40504:	01405784 	movi	r5,350
   40508:	00402680 	call	40268 <play_tone>
			  	play_tone(la, 150);
   4050c:	01377c54 	movui	r4,56817
   40510:	01402584 	movi	r5,150
   40514:	00402680 	call	40268 <play_tone>
			  	play_tone(lah, 500);
   40518:	011bbe04 	movi	r4,28408
   4051c:	01407d04 	movi	r5,500
   40520:	00402680 	call	40268 <play_tone>
			  	play_tone(solsh, 250);
   40524:	011d69c4 	movi	r4,30119
   40528:	01403e84 	movi	r5,250
   4052c:	00402680 	call	40268 <play_tone>
			  	play_tone(solh, 250);
   40530:	011f2384 	movi	r4,31886
   40534:	01403e84 	movi	r5,250
   40538:	00402680 	call	40268 <play_tone>

			  	play_tone(fash, 125);
   4053c:	0120fd94 	movui	r4,33782
   40540:	01401f44 	movi	r5,125
   40544:	00402680 	call	40268 <play_tone>
			  	play_tone(fah, 125);
   40548:	0122f9d4 	movui	r4,35815
   4054c:	01401f44 	movi	r5,125
   40550:	00402680 	call	40268 <play_tone>
			  	play_tone(fash, 250);
   40554:	0120fd94 	movui	r4,33782
   40558:	01403e84 	movi	r5,250
   4055c:	00402680 	call	40268 <play_tone>
			  	play_tone(silence,250);
   40560:	01000044 	movi	r4,1
   40564:	01403e84 	movi	r5,250
   40568:	00402680 	call	40268 <play_tone>
			  	play_tone(las, 250);
   4056c:	0135a5d4 	movui	r4,54935
   40570:	01403e84 	movi	r5,250
   40574:	00402680 	call	40268 <play_tone>
			  	play_tone(resh, 500);
   40578:	01273fd4 	movui	r4,40191
   4057c:	01407d04 	movi	r5,500
   40580:	00402680 	call	40268 <play_tone>
			  	play_tone(reh, 250);
   40584:	01250bd4 	movui	r4,37935
   40588:	01403e84 	movi	r5,250
   4058c:	00402680 	call	40268 <play_tone>
			  	play_tone(dosh, 250);
   40590:	012c0f14 	movui	r4,45116
   40594:	01403e84 	movi	r5,250
   40598:	00402680 	call	40268 <play_tone>
			  	//start of the interesting bit

			  	play_tone(doh, 125);
   4059c:	012eabd4 	movui	r4,47791
   405a0:	01401f44 	movi	r5,125
   405a4:	00402680 	call	40268 <play_tone>
			  	play_tone(si, 125);
   405a8:	01316ed4 	movui	r4,50619
   405ac:	01401f44 	movi	r5,125
   405b0:	00402680 	call	40268 <play_tone>
			  	play_tone(doh, 250);
   405b4:	012eabd4 	movui	r4,47791
   405b8:	01403e84 	movi	r5,250
   405bc:	00402680 	call	40268 <play_tone>
			  	play_tone(silence,250);
   405c0:	01000044 	movi	r4,1
   405c4:	01403e84 	movi	r5,250
   405c8:	00402680 	call	40268 <play_tone>
			  	play_tone(fa, 125);
   405cc:	01000074 	movhi	r4,1
   405d0:	2105e844 	addi	r4,r4,6049
   405d4:	01401f44 	movi	r5,125
   405d8:	00402680 	call	40268 <play_tone>
			  	play_tone(sols, 500);
   405dc:	013ad194 	movui	r4,60230
   405e0:	01407d04 	movi	r5,500
   405e4:	00402680 	call	40268 <play_tone>
			  	play_tone(fa, 375);
   405e8:	01000074 	movhi	r4,1
   405ec:	2105e844 	addi	r4,r4,6049
   405f0:	01405dc4 	movi	r5,375
   405f4:	00402680 	call	40268 <play_tone>
			  	play_tone(la, 125);
   405f8:	01377c54 	movui	r4,56817
   405fc:	01401f44 	movi	r5,125
   40600:	00402680 	call	40268 <play_tone>

			  	play_tone(doh, 500);
   40604:	012eabd4 	movui	r4,47791
   40608:	01407d04 	movi	r5,500
   4060c:	00402680 	call	40268 <play_tone>
			  	play_tone(la, 375);
   40610:	01377c54 	movui	r4,56817
   40614:	01405dc4 	movi	r5,375
   40618:	00402680 	call	40268 <play_tone>
			  	play_tone(doh, 125);
   4061c:	012eabd4 	movui	r4,47791
   40620:	01401f44 	movi	r5,125
   40624:	00402680 	call	40268 <play_tone>
			  	play_tone(mih, 1000);
   40628:	01250bd4 	movui	r4,37935
   4062c:	0140fa04 	movi	r5,1000
   40630:	00402680 	call	40268 <play_tone>
			  	//more interesting stuff (this doesn't quite get it right somehow)

			  	play_tone(lah, 500);
   40634:	011bbe04 	movi	r4,28408
   40638:	01407d04 	movi	r5,500
   4063c:	00402680 	call	40268 <play_tone>
			  	play_tone(la, 350);
   40640:	01377c54 	movui	r4,56817
   40644:	01405784 	movi	r5,350
   40648:	00402680 	call	40268 <play_tone>
			  	play_tone(la, 150);
   4064c:	01377c54 	movui	r4,56817
   40650:	01402584 	movi	r5,150
   40654:	00402680 	call	40268 <play_tone>
			  	play_tone(lah, 500);
   40658:	011bbe04 	movi	r4,28408
   4065c:	01407d04 	movi	r5,500
   40660:	00402680 	call	40268 <play_tone>
			  	play_tone(solsh, 250);
   40664:	011d69c4 	movi	r4,30119
   40668:	01403e84 	movi	r5,250
   4066c:	00402680 	call	40268 <play_tone>
			  	play_tone(solh, 250);
   40670:	011f2384 	movi	r4,31886
   40674:	01403e84 	movi	r5,250
   40678:	00402680 	call	40268 <play_tone>

			  	play_tone(fash, 125);
   4067c:	0120fd94 	movui	r4,33782
   40680:	01401f44 	movi	r5,125
   40684:	00402680 	call	40268 <play_tone>
			  	play_tone(fah, 125);
   40688:	0122f9d4 	movui	r4,35815
   4068c:	01401f44 	movi	r5,125
   40690:	00402680 	call	40268 <play_tone>
			  	play_tone(fash, 250);
   40694:	0120fd94 	movui	r4,33782
   40698:	01403e84 	movi	r5,250
   4069c:	00402680 	call	40268 <play_tone>
			  	play_tone(silence,250);
   406a0:	01000044 	movi	r4,1
   406a4:	01403e84 	movi	r5,250
   406a8:	00402680 	call	40268 <play_tone>
			  	play_tone(las, 250);
   406ac:	0135a5d4 	movui	r4,54935
   406b0:	01403e84 	movi	r5,250
   406b4:	00402680 	call	40268 <play_tone>
			  	play_tone(resh, 500);
   406b8:	01273fd4 	movui	r4,40191
   406bc:	01407d04 	movi	r5,500
   406c0:	00402680 	call	40268 <play_tone>
			  	play_tone(reh, 250);
   406c4:	01250bd4 	movui	r4,37935
   406c8:	01403e84 	movi	r5,250
   406cc:	00402680 	call	40268 <play_tone>
			  	play_tone(dosh, 250);
   406d0:	012c0f14 	movui	r4,45116
   406d4:	01403e84 	movi	r5,250
   406d8:	00402680 	call	40268 <play_tone>
			  	//repeat... repeat

			  	play_tone(doh, 125);
   406dc:	012eabd4 	movui	r4,47791
   406e0:	01401f44 	movi	r5,125
   406e4:	00402680 	call	40268 <play_tone>
			  	play_tone(si, 125);
   406e8:	01316ed4 	movui	r4,50619
   406ec:	01401f44 	movi	r5,125
   406f0:	00402680 	call	40268 <play_tone>
			  	play_tone(doh, 250);
   406f4:	012eabd4 	movui	r4,47791
   406f8:	01403e84 	movi	r5,250
   406fc:	00402680 	call	40268 <play_tone>
			  	play_tone(silence,250);
   40700:	01000044 	movi	r4,1
   40704:	01403e84 	movi	r5,250
   40708:	00402680 	call	40268 <play_tone>
			  	play_tone(fa, 250);
   4070c:	01000074 	movhi	r4,1
   40710:	2105e844 	addi	r4,r4,6049
   40714:	01403e84 	movi	r5,250
   40718:	00402680 	call	40268 <play_tone>
			  	play_tone(sols, 500);
   4071c:	013ad194 	movui	r4,60230
   40720:	01407d04 	movi	r5,500
   40724:	00402680 	call	40268 <play_tone>
			  	play_tone(fa, 375);
   40728:	01000074 	movhi	r4,1
   4072c:	2105e844 	addi	r4,r4,6049
   40730:	01405dc4 	movi	r5,375
   40734:	00402680 	call	40268 <play_tone>
			  	play_tone(doh, 125);
   40738:	012eabd4 	movui	r4,47791
   4073c:	01401f44 	movi	r5,125
   40740:	00402680 	call	40268 <play_tone>

			  	play_tone(la, 500);
   40744:	01377c54 	movui	r4,56817
   40748:	01407d04 	movi	r5,500
   4074c:	00402680 	call	40268 <play_tone>
			  	play_tone(fa, 375);
   40750:	01000074 	movhi	r4,1
   40754:	2105e844 	addi	r4,r4,6049
   40758:	01405dc4 	movi	r5,375
   4075c:	00402680 	call	40268 <play_tone>
			  	play_tone(do, 125);
   40760:	01000074 	movhi	r4,1
   40764:	211d5344 	addi	r4,r4,30029
   40768:	01401f44 	movi	r5,125
   4076c:	00402680 	call	40268 <play_tone>
			  	play_tone(la, 1000);
   40770:	01377c54 	movui	r4,56817
   40774:	0140fa04 	movi	r5,1000
   40778:	00402680 	call	40268 <play_tone>
			  	play_tone(silence,400);
   4077c:	01000044 	movi	r4,1
   40780:	01406404 	movi	r5,400
   40784:	00402680 	call	40268 <play_tone>
		  }
   40788:	003f2106 	br	40410 <__alt_data_end+0xfffca8b0>

0004078c <leds_task>:
}
void leds_task(void* pdata)
{
   4078c:	defffd04 	addi	sp,sp,-12
   40790:	dfc00215 	stw	ra,8(sp)
   40794:	df000115 	stw	fp,4(sp)
   40798:	df000104 	addi	fp,sp,4
   4079c:	e13fff15 	stw	r4,-4(fp)

  while (1)
  {
	    play_tone1(do,400);
   407a0:	01000074 	movhi	r4,1
   407a4:	211d5344 	addi	r4,r4,30029
   407a8:	01406404 	movi	r5,400
   407ac:	00402e00 	call	402e0 <play_tone1>
		play_tone1(fa,200);
   407b0:	01000074 	movhi	r4,1
   407b4:	2105e844 	addi	r4,r4,6049
   407b8:	01403204 	movi	r5,200
   407bc:	00402e00 	call	402e0 <play_tone1>
		play_tone1(fa,200);
   407c0:	01000074 	movhi	r4,1
   407c4:	2105e844 	addi	r4,r4,6049
   407c8:	01403204 	movi	r5,200
   407cc:	00402e00 	call	402e0 <play_tone1>
		play_tone1(fa,600);
   407d0:	01000074 	movhi	r4,1
   407d4:	2105e844 	addi	r4,r4,6049
   407d8:	01409604 	movi	r5,600
   407dc:	00402e00 	call	402e0 <play_tone1>
		play_tone1(sol,400);
   407e0:	013e47d4 	movui	r4,63775
   407e4:	01406404 	movi	r5,400
   407e8:	00402e00 	call	402e0 <play_tone1>
		play_tone1(la,200);
   407ec:	01377c54 	movui	r4,56817
   407f0:	01403204 	movi	r5,200
   407f4:	00402e00 	call	402e0 <play_tone1>
		play_tone1(la,200);
   407f8:	01377c54 	movui	r4,56817
   407fc:	01403204 	movi	r5,200
   40800:	00402e00 	call	402e0 <play_tone1>
		play_tone1(la,600);
   40804:	01377c54 	movui	r4,56817
   40808:	01409604 	movi	r5,600
   4080c:	00402e00 	call	402e0 <play_tone1>
		play_tone1(la,200);
   40810:	01377c54 	movui	r4,56817
   40814:	01403204 	movi	r5,200
   40818:	00402e00 	call	402e0 <play_tone1>
		play_tone1(sol,200);
   4081c:	013e47d4 	movui	r4,63775
   40820:	01403204 	movi	r5,200
   40824:	00402e00 	call	402e0 <play_tone1>
		play_tone1(sol,200);
   40828:	013e47d4 	movui	r4,63775
   4082c:	01403204 	movi	r5,200
   40830:	00402e00 	call	402e0 <play_tone1>
		play_tone1(si,600);
   40834:	01316ed4 	movui	r4,50619
   40838:	01409604 	movi	r5,600
   4083c:	00402e00 	call	402e0 <play_tone1>
		play_tone1(mi,400);
   40840:	01000074 	movhi	r4,1
   40844:	210a1084 	addi	r4,r4,10306
   40848:	01406404 	movi	r5,400
   4084c:	00402e00 	call	402e0 <play_tone1>
		play_tone1(sol,400);
   40850:	013e47d4 	movui	r4,63775
   40854:	01406404 	movi	r5,400
   40858:	00402e00 	call	402e0 <play_tone1>
		play_tone1(fa,1000);
   4085c:	01000074 	movhi	r4,1
   40860:	2105e844 	addi	r4,r4,6049
   40864:	0140fa04 	movi	r5,1000
   40868:	00402e00 	call	402e0 <play_tone1>
		play_tone1(do,400);
   4086c:	01000074 	movhi	r4,1
   40870:	211d5344 	addi	r4,r4,30029
   40874:	01406404 	movi	r5,400
   40878:	00402e00 	call	402e0 <play_tone1>
		play_tone1(fa,200);
   4087c:	01000074 	movhi	r4,1
   40880:	2105e844 	addi	r4,r4,6049
   40884:	01403204 	movi	r5,200
   40888:	00402e00 	call	402e0 <play_tone1>
		play_tone1(fa,200);
   4088c:	01000074 	movhi	r4,1
   40890:	2105e844 	addi	r4,r4,6049
   40894:	01403204 	movi	r5,200
   40898:	00402e00 	call	402e0 <play_tone1>
		play_tone1(fa,600);
   4089c:	01000074 	movhi	r4,1
   408a0:	2105e844 	addi	r4,r4,6049
   408a4:	01409604 	movi	r5,600
   408a8:	00402e00 	call	402e0 <play_tone1>
		play_tone1(sol,400);
   408ac:	013e47d4 	movui	r4,63775
   408b0:	01406404 	movi	r5,400
   408b4:	00402e00 	call	402e0 <play_tone1>
		play_tone1(la,200);
   408b8:	01377c54 	movui	r4,56817
   408bc:	01403204 	movi	r5,200
   408c0:	00402e00 	call	402e0 <play_tone1>
		play_tone1(la,200);
   408c4:	01377c54 	movui	r4,56817
   408c8:	01403204 	movi	r5,200
   408cc:	00402e00 	call	402e0 <play_tone1>
		play_tone1(la,600);
   408d0:	01377c54 	movui	r4,56817
   408d4:	01409604 	movi	r5,600
   408d8:	00402e00 	call	402e0 <play_tone1>
		play_tone1(la,200);
   408dc:	01377c54 	movui	r4,56817
   408e0:	01403204 	movi	r5,200
   408e4:	00402e00 	call	402e0 <play_tone1>
		play_tone1(sol,200);
   408e8:	013e47d4 	movui	r4,63775
   408ec:	01403204 	movi	r5,200
   408f0:	00402e00 	call	402e0 <play_tone1>
		play_tone1(la,200);
   408f4:	01377c54 	movui	r4,56817
   408f8:	01403204 	movi	r5,200
   408fc:	00402e00 	call	402e0 <play_tone1>
		play_tone1(si,600);
   40900:	01316ed4 	movui	r4,50619
   40904:	01409604 	movi	r5,600
   40908:	00402e00 	call	402e0 <play_tone1>
		play_tone1(mi,400);
   4090c:	01000074 	movhi	r4,1
   40910:	210a1084 	addi	r4,r4,10306
   40914:	01406404 	movi	r5,400
   40918:	00402e00 	call	402e0 <play_tone1>
		play_tone1(sol,400);
   4091c:	013e47d4 	movui	r4,63775
   40920:	01406404 	movi	r5,400
   40924:	00402e00 	call	402e0 <play_tone1>
		play_tone1(fa,1000);
   40928:	01000074 	movhi	r4,1
   4092c:	2105e844 	addi	r4,r4,6049
   40930:	0140fa04 	movi	r5,1000
   40934:	00402e00 	call	402e0 <play_tone1>
		//
		play_tone1(do,200);
   40938:	01000074 	movhi	r4,1
   4093c:	211d5344 	addi	r4,r4,30029
   40940:	01403204 	movi	r5,200
   40944:	00402e00 	call	402e0 <play_tone1>
		play_tone1(do,200);
   40948:	01000074 	movhi	r4,1
   4094c:	211d5344 	addi	r4,r4,30029
   40950:	01403204 	movi	r5,200
   40954:	00402e00 	call	402e0 <play_tone1>
		play_tone1(la,200);
   40958:	01377c54 	movui	r4,56817
   4095c:	01403204 	movi	r5,200
   40960:	00402e00 	call	402e0 <play_tone1>
		play_tone1(rem,400);
   40964:	01299154 	movui	r4,42565
   40968:	01406404 	movi	r5,400
   4096c:	00402e00 	call	402e0 <play_tone1>
		play_tone1(dom,200);
   40970:	012ea854 	movui	r4,47777
   40974:	01403204 	movi	r5,200
   40978:	00402e00 	call	402e0 <play_tone1>
		play_tone1(dom,200);
   4097c:	012ea854 	movui	r4,47777
   40980:	01403204 	movi	r5,200
   40984:	00402e00 	call	402e0 <play_tone1>
		play_tone1(si,200);
   40988:	01316ed4 	movui	r4,50619
   4098c:	01403204 	movi	r5,200
   40990:	00402e00 	call	402e0 <play_tone1>
		play_tone1(si,400);
   40994:	01316ed4 	movui	r4,50619
   40998:	01406404 	movi	r5,400
   4099c:	00402e00 	call	402e0 <play_tone1>
		play_tone1(si,200);
   409a0:	01316ed4 	movui	r4,50619
   409a4:	01403204 	movi	r5,200
   409a8:	00402e00 	call	402e0 <play_tone1>
		play_tone1(si,200);
   409ac:	01316ed4 	movui	r4,50619
   409b0:	01403204 	movi	r5,200
   409b4:	00402e00 	call	402e0 <play_tone1>
		play_tone1(sol,200);
   409b8:	013e47d4 	movui	r4,63775
   409bc:	01403204 	movi	r5,200
   409c0:	00402e00 	call	402e0 <play_tone1>
		play_tone1(dom,400);
   409c4:	012ea854 	movui	r4,47777
   409c8:	01406404 	movi	r5,400
   409cc:	00402e00 	call	402e0 <play_tone1>
		play_tone1(si,200);
   409d0:	01316ed4 	movui	r4,50619
   409d4:	01403204 	movi	r5,200
   409d8:	00402e00 	call	402e0 <play_tone1>
		play_tone1(si,200);
   409dc:	01316ed4 	movui	r4,50619
   409e0:	01403204 	movi	r5,200
   409e4:	00402e00 	call	402e0 <play_tone1>
		play_tone1(la,200);
   409e8:	01377c54 	movui	r4,56817
   409ec:	01403204 	movi	r5,200
   409f0:	00402e00 	call	402e0 <play_tone1>
		play_tone1(la,400);
   409f4:	01377c54 	movui	r4,56817
   409f8:	01406404 	movi	r5,400
   409fc:	00402e00 	call	402e0 <play_tone1>
  }
   40a00:	003f6706 	br	407a0 <__alt_data_end+0xfffcac40>

00040a04 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
   40a04:	defff904 	addi	sp,sp,-28
   40a08:	dfc00615 	stw	ra,24(sp)
   40a0c:	df000515 	stw	fp,20(sp)
   40a10:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
   40a14:	00800044 	movi	r2,1
   40a18:	d8800015 	stw	r2,0(sp)
   40a1c:	00800174 	movhi	r2,5
   40a20:	108b3704 	addi	r2,r2,11484
   40a24:	d8800115 	stw	r2,4(sp)
   40a28:	00820004 	movi	r2,2048
   40a2c:	d8800215 	stw	r2,8(sp)
   40a30:	d8000315 	stw	zero,12(sp)
   40a34:	d8000415 	stw	zero,16(sp)
   40a38:	01000134 	movhi	r4,4
   40a3c:	2100d604 	addi	r4,r4,856
   40a40:	000b883a 	mov	r5,zero
   40a44:	01800174 	movhi	r6,5
   40a48:	31933604 	addi	r6,r6,19672
   40a4c:	01c00044 	movi	r7,1
   40a50:	004a8800 	call	4a880 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
   40a54:	00800084 	movi	r2,2
   40a58:	d8800015 	stw	r2,0(sp)
   40a5c:	00800174 	movhi	r2,5
   40a60:	10933704 	addi	r2,r2,19676
   40a64:	d8800115 	stw	r2,4(sp)
   40a68:	00820004 	movi	r2,2048
   40a6c:	d8800215 	stw	r2,8(sp)
   40a70:	d8000315 	stw	zero,12(sp)
   40a74:	d8000415 	stw	zero,16(sp)
   40a78:	01000134 	movhi	r4,4
   40a7c:	2100ff04 	addi	r4,r4,1020
   40a80:	000b883a 	mov	r5,zero
   40a84:	01800174 	movhi	r6,5
   40a88:	319b3604 	addi	r6,r6,27864
   40a8c:	01c00084 	movi	r7,2
   40a90:	004a8800 	call	4a880 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSTaskCreateExt(leds_task,
   40a94:	008000c4 	movi	r2,3
   40a98:	d8800015 	stw	r2,0(sp)
   40a9c:	00800174 	movhi	r2,5
   40aa0:	109b3704 	addi	r2,r2,27868
   40aa4:	d8800115 	stw	r2,4(sp)
   40aa8:	00820004 	movi	r2,2048
   40aac:	d8800215 	stw	r2,8(sp)
   40ab0:	d8000315 	stw	zero,12(sp)
   40ab4:	d8000415 	stw	zero,16(sp)
   40ab8:	01000134 	movhi	r4,4
   40abc:	2101e304 	addi	r4,r4,1932
   40ac0:	000b883a 	mov	r5,zero
   40ac4:	018001b4 	movhi	r6,6
   40ac8:	31a33604 	addi	r6,r6,-29480
   40acc:	01c000c4 	movi	r7,3
   40ad0:	004a8800 	call	4a880 <OSTaskCreateExt>
                   LEDS_PRIORITY,
                   leds_stk,
                   TASK_STACKSIZE,
                   NULL,
                   0);
  OSStart();
   40ad4:	0044ee40 	call	44ee4 <OSStart>
  return 0;
   40ad8:	0005883a 	mov	r2,zero
}
   40adc:	e037883a 	mov	sp,fp
   40ae0:	dfc00117 	ldw	ra,4(sp)
   40ae4:	df000017 	ldw	fp,0(sp)
   40ae8:	dec00204 	addi	sp,sp,8
   40aec:	f800283a 	ret

00040af0 <_puts_r>:
   40af0:	defff604 	addi	sp,sp,-40
   40af4:	dc000715 	stw	r16,28(sp)
   40af8:	2021883a 	mov	r16,r4
   40afc:	2809883a 	mov	r4,r5
   40b00:	dc400815 	stw	r17,32(sp)
   40b04:	dfc00915 	stw	ra,36(sp)
   40b08:	2823883a 	mov	r17,r5
   40b0c:	0040bbc0 	call	40bbc <strlen>
   40b10:	00c00174 	movhi	r3,5
   40b14:	18c3ec04 	addi	r3,r3,4016
   40b18:	18c00017 	ldw	r3,0(r3)
   40b1c:	11000044 	addi	r4,r2,1
   40b20:	d8800115 	stw	r2,4(sp)
   40b24:	18c00217 	ldw	r3,8(r3)
   40b28:	01400174 	movhi	r5,5
   40b2c:	297cce04 	addi	r5,r5,-3272
   40b30:	1880030b 	ldhu	r2,12(r3)
   40b34:	d9400215 	stw	r5,8(sp)
   40b38:	d9000615 	stw	r4,24(sp)
   40b3c:	01400044 	movi	r5,1
   40b40:	01000084 	movi	r4,2
   40b44:	d9000515 	stw	r4,20(sp)
   40b48:	dc400015 	stw	r17,0(sp)
   40b4c:	d9400315 	stw	r5,12(sp)
   40b50:	dec00415 	stw	sp,16(sp)
   40b54:	1108000c 	andi	r4,r2,8192
   40b58:	2000061e 	bne	r4,zero,40b74 <_puts_r+0x84>
   40b5c:	19401917 	ldw	r5,100(r3)
   40b60:	0137ffc4 	movi	r4,-8193
   40b64:	10880014 	ori	r2,r2,8192
   40b68:	2908703a 	and	r4,r5,r4
   40b6c:	1880030d 	sth	r2,12(r3)
   40b70:	19001915 	stw	r4,100(r3)
   40b74:	81400217 	ldw	r5,8(r16)
   40b78:	8009883a 	mov	r4,r16
   40b7c:	d9800404 	addi	r6,sp,16
   40b80:	0040c540 	call	40c54 <__sfvwrite_r>
   40b84:	1000061e 	bne	r2,zero,40ba0 <_puts_r+0xb0>
   40b88:	00800284 	movi	r2,10
   40b8c:	dfc00917 	ldw	ra,36(sp)
   40b90:	dc400817 	ldw	r17,32(sp)
   40b94:	dc000717 	ldw	r16,28(sp)
   40b98:	dec00a04 	addi	sp,sp,40
   40b9c:	f800283a 	ret
   40ba0:	00bfffc4 	movi	r2,-1
   40ba4:	003ff906 	br	40b8c <__alt_data_end+0xfffcb02c>

00040ba8 <puts>:
   40ba8:	00800174 	movhi	r2,5
   40bac:	1083ec04 	addi	r2,r2,4016
   40bb0:	200b883a 	mov	r5,r4
   40bb4:	11000017 	ldw	r4,0(r2)
   40bb8:	0040af01 	jmpi	40af0 <_puts_r>

00040bbc <strlen>:
   40bbc:	208000cc 	andi	r2,r4,3
   40bc0:	10002026 	beq	r2,zero,40c44 <strlen+0x88>
   40bc4:	20800007 	ldb	r2,0(r4)
   40bc8:	10002026 	beq	r2,zero,40c4c <strlen+0x90>
   40bcc:	2005883a 	mov	r2,r4
   40bd0:	00000206 	br	40bdc <strlen+0x20>
   40bd4:	10c00007 	ldb	r3,0(r2)
   40bd8:	18001826 	beq	r3,zero,40c3c <strlen+0x80>
   40bdc:	10800044 	addi	r2,r2,1
   40be0:	10c000cc 	andi	r3,r2,3
   40be4:	183ffb1e 	bne	r3,zero,40bd4 <__alt_data_end+0xfffcb074>
   40be8:	10c00017 	ldw	r3,0(r2)
   40bec:	01ffbff4 	movhi	r7,65279
   40bf0:	39ffbfc4 	addi	r7,r7,-257
   40bf4:	00ca303a 	nor	r5,zero,r3
   40bf8:	01a02074 	movhi	r6,32897
   40bfc:	19c7883a 	add	r3,r3,r7
   40c00:	31a02004 	addi	r6,r6,-32640
   40c04:	1946703a 	and	r3,r3,r5
   40c08:	1986703a 	and	r3,r3,r6
   40c0c:	1800091e 	bne	r3,zero,40c34 <strlen+0x78>
   40c10:	10800104 	addi	r2,r2,4
   40c14:	10c00017 	ldw	r3,0(r2)
   40c18:	19cb883a 	add	r5,r3,r7
   40c1c:	00c6303a 	nor	r3,zero,r3
   40c20:	28c6703a 	and	r3,r5,r3
   40c24:	1986703a 	and	r3,r3,r6
   40c28:	183ff926 	beq	r3,zero,40c10 <__alt_data_end+0xfffcb0b0>
   40c2c:	00000106 	br	40c34 <strlen+0x78>
   40c30:	10800044 	addi	r2,r2,1
   40c34:	10c00007 	ldb	r3,0(r2)
   40c38:	183ffd1e 	bne	r3,zero,40c30 <__alt_data_end+0xfffcb0d0>
   40c3c:	1105c83a 	sub	r2,r2,r4
   40c40:	f800283a 	ret
   40c44:	2005883a 	mov	r2,r4
   40c48:	003fe706 	br	40be8 <__alt_data_end+0xfffcb088>
   40c4c:	0005883a 	mov	r2,zero
   40c50:	f800283a 	ret

00040c54 <__sfvwrite_r>:
   40c54:	30800217 	ldw	r2,8(r6)
   40c58:	10004526 	beq	r2,zero,40d70 <__sfvwrite_r+0x11c>
   40c5c:	28c0030b 	ldhu	r3,12(r5)
   40c60:	defff404 	addi	sp,sp,-48
   40c64:	dd400715 	stw	r21,28(sp)
   40c68:	dcc00515 	stw	r19,20(sp)
   40c6c:	dc000215 	stw	r16,8(sp)
   40c70:	dfc00b15 	stw	ra,44(sp)
   40c74:	df000a15 	stw	fp,40(sp)
   40c78:	ddc00915 	stw	r23,36(sp)
   40c7c:	dd800815 	stw	r22,32(sp)
   40c80:	dd000615 	stw	r20,24(sp)
   40c84:	dc800415 	stw	r18,16(sp)
   40c88:	dc400315 	stw	r17,12(sp)
   40c8c:	1880020c 	andi	r2,r3,8
   40c90:	2821883a 	mov	r16,r5
   40c94:	202b883a 	mov	r21,r4
   40c98:	3027883a 	mov	r19,r6
   40c9c:	10002526 	beq	r2,zero,40d34 <__sfvwrite_r+0xe0>
   40ca0:	28800417 	ldw	r2,16(r5)
   40ca4:	10002326 	beq	r2,zero,40d34 <__sfvwrite_r+0xe0>
   40ca8:	1880008c 	andi	r2,r3,2
   40cac:	9c400017 	ldw	r17,0(r19)
   40cb0:	10003126 	beq	r2,zero,40d78 <__sfvwrite_r+0x124>
   40cb4:	0029883a 	mov	r20,zero
   40cb8:	0025883a 	mov	r18,zero
   40cbc:	05810004 	movi	r22,1024
   40cc0:	a00d883a 	mov	r6,r20
   40cc4:	a809883a 	mov	r4,r21
   40cc8:	90002526 	beq	r18,zero,40d60 <__sfvwrite_r+0x10c>
   40ccc:	900f883a 	mov	r7,r18
   40cd0:	81400717 	ldw	r5,28(r16)
   40cd4:	b480012e 	bgeu	r22,r18,40cdc <__sfvwrite_r+0x88>
   40cd8:	01c10004 	movi	r7,1024
   40cdc:	80800917 	ldw	r2,36(r16)
   40ce0:	103ee83a 	callr	r2
   40ce4:	0080510e 	bge	zero,r2,40e2c <__sfvwrite_r+0x1d8>
   40ce8:	98c00217 	ldw	r3,8(r19)
   40cec:	a0a9883a 	add	r20,r20,r2
   40cf0:	90a5c83a 	sub	r18,r18,r2
   40cf4:	1885c83a 	sub	r2,r3,r2
   40cf8:	98800215 	stw	r2,8(r19)
   40cfc:	103ff01e 	bne	r2,zero,40cc0 <__alt_data_end+0xfffcb160>
   40d00:	0005883a 	mov	r2,zero
   40d04:	dfc00b17 	ldw	ra,44(sp)
   40d08:	df000a17 	ldw	fp,40(sp)
   40d0c:	ddc00917 	ldw	r23,36(sp)
   40d10:	dd800817 	ldw	r22,32(sp)
   40d14:	dd400717 	ldw	r21,28(sp)
   40d18:	dd000617 	ldw	r20,24(sp)
   40d1c:	dcc00517 	ldw	r19,20(sp)
   40d20:	dc800417 	ldw	r18,16(sp)
   40d24:	dc400317 	ldw	r17,12(sp)
   40d28:	dc000217 	ldw	r16,8(sp)
   40d2c:	dec00c04 	addi	sp,sp,48
   40d30:	f800283a 	ret
   40d34:	a809883a 	mov	r4,r21
   40d38:	800b883a 	mov	r5,r16
   40d3c:	00422100 	call	42210 <__swsetup_r>
   40d40:	80c0030b 	ldhu	r3,12(r16)
   40d44:	103fd826 	beq	r2,zero,40ca8 <__alt_data_end+0xfffcb148>
   40d48:	18c01014 	ori	r3,r3,64
   40d4c:	80c0030d 	sth	r3,12(r16)
   40d50:	00c00244 	movi	r3,9
   40d54:	00bfffc4 	movi	r2,-1
   40d58:	a8c00015 	stw	r3,0(r21)
   40d5c:	003fe906 	br	40d04 <__alt_data_end+0xfffcb1a4>
   40d60:	8d000017 	ldw	r20,0(r17)
   40d64:	8c800117 	ldw	r18,4(r17)
   40d68:	8c400204 	addi	r17,r17,8
   40d6c:	003fd406 	br	40cc0 <__alt_data_end+0xfffcb160>
   40d70:	0005883a 	mov	r2,zero
   40d74:	f800283a 	ret
   40d78:	1880004c 	andi	r2,r3,1
   40d7c:	1000301e 	bne	r2,zero,40e40 <__sfvwrite_r+0x1ec>
   40d80:	002f883a 	mov	r23,zero
   40d84:	0025883a 	mov	r18,zero
   40d88:	90001c26 	beq	r18,zero,40dfc <__sfvwrite_r+0x1a8>
   40d8c:	1880800c 	andi	r2,r3,512
   40d90:	85000217 	ldw	r20,8(r16)
   40d94:	10006c26 	beq	r2,zero,40f48 <__sfvwrite_r+0x2f4>
   40d98:	a02d883a 	mov	r22,r20
   40d9c:	95008536 	bltu	r18,r20,40fb4 <__sfvwrite_r+0x360>
   40da0:	1881200c 	andi	r2,r3,1152
   40da4:	10009d1e 	bne	r2,zero,4101c <__sfvwrite_r+0x3c8>
   40da8:	81000017 	ldw	r4,0(r16)
   40dac:	a039883a 	mov	fp,r20
   40db0:	9029883a 	mov	r20,r18
   40db4:	b80b883a 	mov	r5,r23
   40db8:	b00d883a 	mov	r6,r22
   40dbc:	0041ac00 	call	41ac0 <memmove>
   40dc0:	80c00217 	ldw	r3,8(r16)
   40dc4:	81000017 	ldw	r4,0(r16)
   40dc8:	9005883a 	mov	r2,r18
   40dcc:	1f39c83a 	sub	fp,r3,fp
   40dd0:	258f883a 	add	r7,r4,r22
   40dd4:	87000215 	stw	fp,8(r16)
   40dd8:	81c00015 	stw	r7,0(r16)
   40ddc:	98c00217 	ldw	r3,8(r19)
   40de0:	b8af883a 	add	r23,r23,r2
   40de4:	90a5c83a 	sub	r18,r18,r2
   40de8:	1d05c83a 	sub	r2,r3,r20
   40dec:	98800215 	stw	r2,8(r19)
   40df0:	103fc326 	beq	r2,zero,40d00 <__alt_data_end+0xfffcb1a0>
   40df4:	80c0030b 	ldhu	r3,12(r16)
   40df8:	903fe41e 	bne	r18,zero,40d8c <__alt_data_end+0xfffcb22c>
   40dfc:	8dc00017 	ldw	r23,0(r17)
   40e00:	8c800117 	ldw	r18,4(r17)
   40e04:	8c400204 	addi	r17,r17,8
   40e08:	003fdf06 	br	40d88 <__alt_data_end+0xfffcb228>
   40e0c:	0041c1c0 	call	41c1c <_realloc_r>
   40e10:	102d883a 	mov	r22,r2
   40e14:	1000a01e 	bne	r2,zero,41098 <__sfvwrite_r+0x444>
   40e18:	81400417 	ldw	r5,16(r16)
   40e1c:	a809883a 	mov	r4,r21
   40e20:	0042a700 	call	42a70 <_free_r>
   40e24:	00800304 	movi	r2,12
   40e28:	a8800015 	stw	r2,0(r21)
   40e2c:	80c0030b 	ldhu	r3,12(r16)
   40e30:	00bfffc4 	movi	r2,-1
   40e34:	18c01014 	ori	r3,r3,64
   40e38:	80c0030d 	sth	r3,12(r16)
   40e3c:	003fb106 	br	40d04 <__alt_data_end+0xfffcb1a4>
   40e40:	0029883a 	mov	r20,zero
   40e44:	0011883a 	mov	r8,zero
   40e48:	0039883a 	mov	fp,zero
   40e4c:	0025883a 	mov	r18,zero
   40e50:	90001f26 	beq	r18,zero,40ed0 <__sfvwrite_r+0x27c>
   40e54:	40006826 	beq	r8,zero,40ff8 <__sfvwrite_r+0x3a4>
   40e58:	a02f883a 	mov	r23,r20
   40e5c:	9500012e 	bgeu	r18,r20,40e64 <__sfvwrite_r+0x210>
   40e60:	902f883a 	mov	r23,r18
   40e64:	81000017 	ldw	r4,0(r16)
   40e68:	80800417 	ldw	r2,16(r16)
   40e6c:	b82d883a 	mov	r22,r23
   40e70:	81800217 	ldw	r6,8(r16)
   40e74:	81c00517 	ldw	r7,20(r16)
   40e78:	1100022e 	bgeu	r2,r4,40e84 <__sfvwrite_r+0x230>
   40e7c:	31c7883a 	add	r3,r6,r7
   40e80:	1dc01816 	blt	r3,r23,40ee4 <__sfvwrite_r+0x290>
   40e84:	b9c03f16 	blt	r23,r7,40f84 <__sfvwrite_r+0x330>
   40e88:	80800917 	ldw	r2,36(r16)
   40e8c:	81400717 	ldw	r5,28(r16)
   40e90:	a809883a 	mov	r4,r21
   40e94:	da000115 	stw	r8,4(sp)
   40e98:	e00d883a 	mov	r6,fp
   40e9c:	103ee83a 	callr	r2
   40ea0:	102d883a 	mov	r22,r2
   40ea4:	da000117 	ldw	r8,4(sp)
   40ea8:	00bfe00e 	bge	zero,r2,40e2c <__alt_data_end+0xfffcb2cc>
   40eac:	a5a9c83a 	sub	r20,r20,r22
   40eb0:	a0001f26 	beq	r20,zero,40f30 <__sfvwrite_r+0x2dc>
   40eb4:	98800217 	ldw	r2,8(r19)
   40eb8:	e5b9883a 	add	fp,fp,r22
   40ebc:	95a5c83a 	sub	r18,r18,r22
   40ec0:	15adc83a 	sub	r22,r2,r22
   40ec4:	9d800215 	stw	r22,8(r19)
   40ec8:	b03f8d26 	beq	r22,zero,40d00 <__alt_data_end+0xfffcb1a0>
   40ecc:	903fe11e 	bne	r18,zero,40e54 <__alt_data_end+0xfffcb2f4>
   40ed0:	8f000017 	ldw	fp,0(r17)
   40ed4:	8c800117 	ldw	r18,4(r17)
   40ed8:	0011883a 	mov	r8,zero
   40edc:	8c400204 	addi	r17,r17,8
   40ee0:	003fdb06 	br	40e50 <__alt_data_end+0xfffcb2f0>
   40ee4:	180d883a 	mov	r6,r3
   40ee8:	e00b883a 	mov	r5,fp
   40eec:	da000115 	stw	r8,4(sp)
   40ef0:	d8c00015 	stw	r3,0(sp)
   40ef4:	0041ac00 	call	41ac0 <memmove>
   40ef8:	d8c00017 	ldw	r3,0(sp)
   40efc:	80800017 	ldw	r2,0(r16)
   40f00:	a809883a 	mov	r4,r21
   40f04:	800b883a 	mov	r5,r16
   40f08:	10c5883a 	add	r2,r2,r3
   40f0c:	80800015 	stw	r2,0(r16)
   40f10:	d8c00015 	stw	r3,0(sp)
   40f14:	00423400 	call	42340 <_fflush_r>
   40f18:	d8c00017 	ldw	r3,0(sp)
   40f1c:	da000117 	ldw	r8,4(sp)
   40f20:	103fc21e 	bne	r2,zero,40e2c <__alt_data_end+0xfffcb2cc>
   40f24:	182d883a 	mov	r22,r3
   40f28:	a5a9c83a 	sub	r20,r20,r22
   40f2c:	a03fe11e 	bne	r20,zero,40eb4 <__alt_data_end+0xfffcb354>
   40f30:	a809883a 	mov	r4,r21
   40f34:	800b883a 	mov	r5,r16
   40f38:	00423400 	call	42340 <_fflush_r>
   40f3c:	103fbb1e 	bne	r2,zero,40e2c <__alt_data_end+0xfffcb2cc>
   40f40:	0011883a 	mov	r8,zero
   40f44:	003fdb06 	br	40eb4 <__alt_data_end+0xfffcb354>
   40f48:	81000017 	ldw	r4,0(r16)
   40f4c:	80800417 	ldw	r2,16(r16)
   40f50:	1100012e 	bgeu	r2,r4,40f58 <__sfvwrite_r+0x304>
   40f54:	a4805a36 	bltu	r20,r18,410c0 <__sfvwrite_r+0x46c>
   40f58:	81c00517 	ldw	r7,20(r16)
   40f5c:	91c01a36 	bltu	r18,r7,40fc8 <__sfvwrite_r+0x374>
   40f60:	80800917 	ldw	r2,36(r16)
   40f64:	81400717 	ldw	r5,28(r16)
   40f68:	a809883a 	mov	r4,r21
   40f6c:	b80d883a 	mov	r6,r23
   40f70:	103ee83a 	callr	r2
   40f74:	1029883a 	mov	r20,r2
   40f78:	00bfac0e 	bge	zero,r2,40e2c <__alt_data_end+0xfffcb2cc>
   40f7c:	a005883a 	mov	r2,r20
   40f80:	003f9606 	br	40ddc <__alt_data_end+0xfffcb27c>
   40f84:	b80d883a 	mov	r6,r23
   40f88:	e00b883a 	mov	r5,fp
   40f8c:	da000115 	stw	r8,4(sp)
   40f90:	0041ac00 	call	41ac0 <memmove>
   40f94:	80800217 	ldw	r2,8(r16)
   40f98:	80c00017 	ldw	r3,0(r16)
   40f9c:	da000117 	ldw	r8,4(sp)
   40fa0:	15c5c83a 	sub	r2,r2,r23
   40fa4:	1def883a 	add	r23,r3,r23
   40fa8:	80800215 	stw	r2,8(r16)
   40fac:	85c00015 	stw	r23,0(r16)
   40fb0:	003fbe06 	br	40eac <__alt_data_end+0xfffcb34c>
   40fb4:	81000017 	ldw	r4,0(r16)
   40fb8:	9039883a 	mov	fp,r18
   40fbc:	9029883a 	mov	r20,r18
   40fc0:	902d883a 	mov	r22,r18
   40fc4:	003f7b06 	br	40db4 <__alt_data_end+0xfffcb254>
   40fc8:	b80b883a 	mov	r5,r23
   40fcc:	900d883a 	mov	r6,r18
   40fd0:	0041ac00 	call	41ac0 <memmove>
   40fd4:	80c00217 	ldw	r3,8(r16)
   40fd8:	80800017 	ldw	r2,0(r16)
   40fdc:	9029883a 	mov	r20,r18
   40fe0:	1c87c83a 	sub	r3,r3,r18
   40fe4:	1485883a 	add	r2,r2,r18
   40fe8:	80800015 	stw	r2,0(r16)
   40fec:	80c00215 	stw	r3,8(r16)
   40ff0:	9005883a 	mov	r2,r18
   40ff4:	003f7906 	br	40ddc <__alt_data_end+0xfffcb27c>
   40ff8:	e009883a 	mov	r4,fp
   40ffc:	01400284 	movi	r5,10
   41000:	900d883a 	mov	r6,r18
   41004:	00418a00 	call	418a0 <memchr>
   41008:	10003826 	beq	r2,zero,410ec <__sfvwrite_r+0x498>
   4100c:	10800044 	addi	r2,r2,1
   41010:	1729c83a 	sub	r20,r2,fp
   41014:	02000044 	movi	r8,1
   41018:	003f8f06 	br	40e58 <__alt_data_end+0xfffcb2f8>
   4101c:	80800517 	ldw	r2,20(r16)
   41020:	81400417 	ldw	r5,16(r16)
   41024:	87000017 	ldw	fp,0(r16)
   41028:	10a9883a 	add	r20,r2,r2
   4102c:	a085883a 	add	r2,r20,r2
   41030:	1028d7fa 	srli	r20,r2,31
   41034:	e179c83a 	sub	fp,fp,r5
   41038:	e1000044 	addi	r4,fp,1
   4103c:	a085883a 	add	r2,r20,r2
   41040:	1029d07a 	srai	r20,r2,1
   41044:	2485883a 	add	r2,r4,r18
   41048:	a00d883a 	mov	r6,r20
   4104c:	a080022e 	bgeu	r20,r2,41058 <__sfvwrite_r+0x404>
   41050:	1029883a 	mov	r20,r2
   41054:	100d883a 	mov	r6,r2
   41058:	18c1000c 	andi	r3,r3,1024
   4105c:	a809883a 	mov	r4,r21
   41060:	183f6a26 	beq	r3,zero,40e0c <__alt_data_end+0xfffcb2ac>
   41064:	300b883a 	mov	r5,r6
   41068:	00410f80 	call	410f8 <_malloc_r>
   4106c:	102d883a 	mov	r22,r2
   41070:	103f6c26 	beq	r2,zero,40e24 <__alt_data_end+0xfffcb2c4>
   41074:	81400417 	ldw	r5,16(r16)
   41078:	1009883a 	mov	r4,r2
   4107c:	e00d883a 	mov	r6,fp
   41080:	00419880 	call	41988 <memcpy>
   41084:	8080030b 	ldhu	r2,12(r16)
   41088:	00fedfc4 	movi	r3,-1153
   4108c:	10c4703a 	and	r2,r2,r3
   41090:	10802014 	ori	r2,r2,128
   41094:	8080030d 	sth	r2,12(r16)
   41098:	b709883a 	add	r4,r22,fp
   4109c:	a707c83a 	sub	r3,r20,fp
   410a0:	85800415 	stw	r22,16(r16)
   410a4:	85000515 	stw	r20,20(r16)
   410a8:	81000015 	stw	r4,0(r16)
   410ac:	9039883a 	mov	fp,r18
   410b0:	80c00215 	stw	r3,8(r16)
   410b4:	9029883a 	mov	r20,r18
   410b8:	902d883a 	mov	r22,r18
   410bc:	003f3d06 	br	40db4 <__alt_data_end+0xfffcb254>
   410c0:	b80b883a 	mov	r5,r23
   410c4:	a00d883a 	mov	r6,r20
   410c8:	0041ac00 	call	41ac0 <memmove>
   410cc:	80800017 	ldw	r2,0(r16)
   410d0:	a809883a 	mov	r4,r21
   410d4:	800b883a 	mov	r5,r16
   410d8:	1505883a 	add	r2,r2,r20
   410dc:	80800015 	stw	r2,0(r16)
   410e0:	00423400 	call	42340 <_fflush_r>
   410e4:	103fa526 	beq	r2,zero,40f7c <__alt_data_end+0xfffcb41c>
   410e8:	003f5006 	br	40e2c <__alt_data_end+0xfffcb2cc>
   410ec:	95000044 	addi	r20,r18,1
   410f0:	02000044 	movi	r8,1
   410f4:	003f5806 	br	40e58 <__alt_data_end+0xfffcb2f8>

000410f8 <_malloc_r>:
   410f8:	defff504 	addi	sp,sp,-44
   410fc:	dc800315 	stw	r18,12(sp)
   41100:	dfc00a15 	stw	ra,40(sp)
   41104:	df000915 	stw	fp,36(sp)
   41108:	ddc00815 	stw	r23,32(sp)
   4110c:	dd800715 	stw	r22,28(sp)
   41110:	dd400615 	stw	r21,24(sp)
   41114:	dd000515 	stw	r20,20(sp)
   41118:	dcc00415 	stw	r19,16(sp)
   4111c:	dc400215 	stw	r17,8(sp)
   41120:	dc000115 	stw	r16,4(sp)
   41124:	288002c4 	addi	r2,r5,11
   41128:	00c00584 	movi	r3,22
   4112c:	2025883a 	mov	r18,r4
   41130:	18802a2e 	bgeu	r3,r2,411dc <_malloc_r+0xe4>
   41134:	047ffe04 	movi	r17,-8
   41138:	1462703a 	and	r17,r2,r17
   4113c:	88009e16 	blt	r17,zero,413b8 <_malloc_r+0x2c0>
   41140:	89409d36 	bltu	r17,r5,413b8 <_malloc_r+0x2c0>
   41144:	00441640 	call	44164 <__malloc_lock>
   41148:	00807dc4 	movi	r2,503
   4114c:	14402736 	bltu	r2,r17,411ec <_malloc_r+0xf4>
   41150:	8806d0fa 	srli	r3,r17,3
   41154:	04c00174 	movhi	r19,5
   41158:	9cfe3004 	addi	r19,r19,-1856
   4115c:	18c5883a 	add	r2,r3,r3
   41160:	1085883a 	add	r2,r2,r2
   41164:	1085883a 	add	r2,r2,r2
   41168:	9885883a 	add	r2,r19,r2
   4116c:	14000317 	ldw	r16,12(r2)
   41170:	80814a26 	beq	r16,r2,4169c <_malloc_r+0x5a4>
   41174:	80c00117 	ldw	r3,4(r16)
   41178:	81000317 	ldw	r4,12(r16)
   4117c:	00bfff04 	movi	r2,-4
   41180:	1884703a 	and	r2,r3,r2
   41184:	81400217 	ldw	r5,8(r16)
   41188:	8085883a 	add	r2,r16,r2
   4118c:	10c00117 	ldw	r3,4(r2)
   41190:	29000315 	stw	r4,12(r5)
   41194:	21400215 	stw	r5,8(r4)
   41198:	18c00054 	ori	r3,r3,1
   4119c:	10c00115 	stw	r3,4(r2)
   411a0:	9009883a 	mov	r4,r18
   411a4:	00442840 	call	44284 <__malloc_unlock>
   411a8:	80800204 	addi	r2,r16,8
   411ac:	dfc00a17 	ldw	ra,40(sp)
   411b0:	df000917 	ldw	fp,36(sp)
   411b4:	ddc00817 	ldw	r23,32(sp)
   411b8:	dd800717 	ldw	r22,28(sp)
   411bc:	dd400617 	ldw	r21,24(sp)
   411c0:	dd000517 	ldw	r20,20(sp)
   411c4:	dcc00417 	ldw	r19,16(sp)
   411c8:	dc800317 	ldw	r18,12(sp)
   411cc:	dc400217 	ldw	r17,8(sp)
   411d0:	dc000117 	ldw	r16,4(sp)
   411d4:	dec00b04 	addi	sp,sp,44
   411d8:	f800283a 	ret
   411dc:	04400404 	movi	r17,16
   411e0:	89407536 	bltu	r17,r5,413b8 <_malloc_r+0x2c0>
   411e4:	00441640 	call	44164 <__malloc_lock>
   411e8:	003fd906 	br	41150 <__alt_data_end+0xfffcb5f0>
   411ec:	8806d27a 	srli	r3,r17,9
   411f0:	18007526 	beq	r3,zero,413c8 <_malloc_r+0x2d0>
   411f4:	00800104 	movi	r2,4
   411f8:	10c0ef36 	bltu	r2,r3,415b8 <_malloc_r+0x4c0>
   411fc:	8806d1ba 	srli	r3,r17,6
   41200:	19c00e04 	addi	r7,r3,56
   41204:	39cb883a 	add	r5,r7,r7
   41208:	04c00174 	movhi	r19,5
   4120c:	294b883a 	add	r5,r5,r5
   41210:	9cfe3004 	addi	r19,r19,-1856
   41214:	294b883a 	add	r5,r5,r5
   41218:	994b883a 	add	r5,r19,r5
   4121c:	2c000317 	ldw	r16,12(r5)
   41220:	2c000e26 	beq	r5,r16,4125c <_malloc_r+0x164>
   41224:	80800117 	ldw	r2,4(r16)
   41228:	01bfff04 	movi	r6,-4
   4122c:	010003c4 	movi	r4,15
   41230:	1184703a 	and	r2,r2,r6
   41234:	1447c83a 	sub	r3,r2,r17
   41238:	20c00716 	blt	r4,r3,41258 <_malloc_r+0x160>
   4123c:	1800650e 	bge	r3,zero,413d4 <_malloc_r+0x2dc>
   41240:	84000317 	ldw	r16,12(r16)
   41244:	2c000526 	beq	r5,r16,4125c <_malloc_r+0x164>
   41248:	80800117 	ldw	r2,4(r16)
   4124c:	1184703a 	and	r2,r2,r6
   41250:	1447c83a 	sub	r3,r2,r17
   41254:	20fff90e 	bge	r4,r3,4123c <__alt_data_end+0xfffcb6dc>
   41258:	39ffffc4 	addi	r7,r7,-1
   4125c:	38c00044 	addi	r3,r7,1
   41260:	01800174 	movhi	r6,5
   41264:	9c000417 	ldw	r16,16(r19)
   41268:	31be3004 	addi	r6,r6,-1856
   4126c:	32400204 	addi	r9,r6,8
   41270:	82410326 	beq	r16,r9,41680 <_malloc_r+0x588>
   41274:	81000117 	ldw	r4,4(r16)
   41278:	00bfff04 	movi	r2,-4
   4127c:	208e703a 	and	r7,r4,r2
   41280:	3c45c83a 	sub	r2,r7,r17
   41284:	010003c4 	movi	r4,15
   41288:	2080ee16 	blt	r4,r2,41644 <_malloc_r+0x54c>
   4128c:	32400515 	stw	r9,20(r6)
   41290:	32400415 	stw	r9,16(r6)
   41294:	1000510e 	bge	r2,zero,413dc <_malloc_r+0x2e4>
   41298:	00807fc4 	movi	r2,511
   4129c:	11c0ce36 	bltu	r2,r7,415d8 <_malloc_r+0x4e0>
   412a0:	3808d0fa 	srli	r4,r7,3
   412a4:	01c00044 	movi	r7,1
   412a8:	30800117 	ldw	r2,4(r6)
   412ac:	210b883a 	add	r5,r4,r4
   412b0:	294b883a 	add	r5,r5,r5
   412b4:	2009d0ba 	srai	r4,r4,2
   412b8:	294b883a 	add	r5,r5,r5
   412bc:	298b883a 	add	r5,r5,r6
   412c0:	2a000217 	ldw	r8,8(r5)
   412c4:	3908983a 	sll	r4,r7,r4
   412c8:	81400315 	stw	r5,12(r16)
   412cc:	82000215 	stw	r8,8(r16)
   412d0:	2088b03a 	or	r4,r4,r2
   412d4:	2c000215 	stw	r16,8(r5)
   412d8:	31000115 	stw	r4,4(r6)
   412dc:	44000315 	stw	r16,12(r8)
   412e0:	1805d0ba 	srai	r2,r3,2
   412e4:	01400044 	movi	r5,1
   412e8:	288a983a 	sll	r5,r5,r2
   412ec:	21404336 	bltu	r4,r5,413fc <_malloc_r+0x304>
   412f0:	2144703a 	and	r2,r4,r5
   412f4:	10000a1e 	bne	r2,zero,41320 <_malloc_r+0x228>
   412f8:	00bfff04 	movi	r2,-4
   412fc:	294b883a 	add	r5,r5,r5
   41300:	1886703a 	and	r3,r3,r2
   41304:	2144703a 	and	r2,r4,r5
   41308:	18c00104 	addi	r3,r3,4
   4130c:	1000041e 	bne	r2,zero,41320 <_malloc_r+0x228>
   41310:	294b883a 	add	r5,r5,r5
   41314:	2144703a 	and	r2,r4,r5
   41318:	18c00104 	addi	r3,r3,4
   4131c:	103ffc26 	beq	r2,zero,41310 <__alt_data_end+0xfffcb7b0>
   41320:	023fff04 	movi	r8,-4
   41324:	01c003c4 	movi	r7,15
   41328:	18c5883a 	add	r2,r3,r3
   4132c:	1085883a 	add	r2,r2,r2
   41330:	1085883a 	add	r2,r2,r2
   41334:	9895883a 	add	r10,r19,r2
   41338:	52c00304 	addi	r11,r10,12
   4133c:	1819883a 	mov	r12,r3
   41340:	5c000017 	ldw	r16,0(r11)
   41344:	59bffd04 	addi	r6,r11,-12
   41348:	8180041e 	bne	r16,r6,4135c <_malloc_r+0x264>
   4134c:	0000ce06 	br	41688 <_malloc_r+0x590>
   41350:	2000d70e 	bge	r4,zero,416b0 <_malloc_r+0x5b8>
   41354:	84000317 	ldw	r16,12(r16)
   41358:	8180cb26 	beq	r16,r6,41688 <_malloc_r+0x590>
   4135c:	80800117 	ldw	r2,4(r16)
   41360:	1204703a 	and	r2,r2,r8
   41364:	1449c83a 	sub	r4,r2,r17
   41368:	393ff90e 	bge	r7,r4,41350 <__alt_data_end+0xfffcb7f0>
   4136c:	80800317 	ldw	r2,12(r16)
   41370:	80c00217 	ldw	r3,8(r16)
   41374:	89400054 	ori	r5,r17,1
   41378:	81400115 	stw	r5,4(r16)
   4137c:	18800315 	stw	r2,12(r3)
   41380:	10c00215 	stw	r3,8(r2)
   41384:	8463883a 	add	r17,r16,r17
   41388:	9c400515 	stw	r17,20(r19)
   4138c:	9c400415 	stw	r17,16(r19)
   41390:	20800054 	ori	r2,r4,1
   41394:	88800115 	stw	r2,4(r17)
   41398:	8a400315 	stw	r9,12(r17)
   4139c:	8a400215 	stw	r9,8(r17)
   413a0:	8923883a 	add	r17,r17,r4
   413a4:	89000015 	stw	r4,0(r17)
   413a8:	9009883a 	mov	r4,r18
   413ac:	00442840 	call	44284 <__malloc_unlock>
   413b0:	80800204 	addi	r2,r16,8
   413b4:	003f7d06 	br	411ac <__alt_data_end+0xfffcb64c>
   413b8:	00800304 	movi	r2,12
   413bc:	90800015 	stw	r2,0(r18)
   413c0:	0005883a 	mov	r2,zero
   413c4:	003f7906 	br	411ac <__alt_data_end+0xfffcb64c>
   413c8:	01401f84 	movi	r5,126
   413cc:	01c00fc4 	movi	r7,63
   413d0:	003f8d06 	br	41208 <__alt_data_end+0xfffcb6a8>
   413d4:	81000317 	ldw	r4,12(r16)
   413d8:	003f6a06 	br	41184 <__alt_data_end+0xfffcb624>
   413dc:	81c5883a 	add	r2,r16,r7
   413e0:	10c00117 	ldw	r3,4(r2)
   413e4:	9009883a 	mov	r4,r18
   413e8:	18c00054 	ori	r3,r3,1
   413ec:	10c00115 	stw	r3,4(r2)
   413f0:	00442840 	call	44284 <__malloc_unlock>
   413f4:	80800204 	addi	r2,r16,8
   413f8:	003f6c06 	br	411ac <__alt_data_end+0xfffcb64c>
   413fc:	9c000217 	ldw	r16,8(r19)
   41400:	00bfff04 	movi	r2,-4
   41404:	85800117 	ldw	r22,4(r16)
   41408:	b0ac703a 	and	r22,r22,r2
   4140c:	b4400336 	bltu	r22,r17,4141c <_malloc_r+0x324>
   41410:	b445c83a 	sub	r2,r22,r17
   41414:	00c003c4 	movi	r3,15
   41418:	18805d16 	blt	r3,r2,41590 <_malloc_r+0x498>
   4141c:	05c00174 	movhi	r23,5
   41420:	00800174 	movhi	r2,5
   41424:	bdc3ed04 	addi	r23,r23,4020
   41428:	108b0b04 	addi	r2,r2,11308
   4142c:	15400017 	ldw	r21,0(r2)
   41430:	b9000017 	ldw	r4,0(r23)
   41434:	00ffffc4 	movi	r3,-1
   41438:	858d883a 	add	r6,r16,r22
   4143c:	8d6b883a 	add	r21,r17,r21
   41440:	20c0e426 	beq	r4,r3,417d4 <_malloc_r+0x6dc>
   41444:	ad4403c4 	addi	r21,r21,4111
   41448:	00fc0004 	movi	r3,-4096
   4144c:	a8ea703a 	and	r21,r21,r3
   41450:	9009883a 	mov	r4,r18
   41454:	a80b883a 	mov	r5,r21
   41458:	d9800015 	stw	r6,0(sp)
   4145c:	00421bc0 	call	421bc <_sbrk_r>
   41460:	00ffffc4 	movi	r3,-1
   41464:	1029883a 	mov	r20,r2
   41468:	d9800017 	ldw	r6,0(sp)
   4146c:	10c0a426 	beq	r2,r3,41700 <_malloc_r+0x608>
   41470:	1180a236 	bltu	r2,r6,416fc <_malloc_r+0x604>
   41474:	07000174 	movhi	fp,5
   41478:	e70b2d04 	addi	fp,fp,11444
   4147c:	e0c00017 	ldw	r3,0(fp)
   41480:	a8c7883a 	add	r3,r21,r3
   41484:	e0c00015 	stw	r3,0(fp)
   41488:	3500da26 	beq	r6,r20,417f4 <_malloc_r+0x6fc>
   4148c:	b9000017 	ldw	r4,0(r23)
   41490:	00bfffc4 	movi	r2,-1
   41494:	2080e426 	beq	r4,r2,41828 <_malloc_r+0x730>
   41498:	a185c83a 	sub	r2,r20,r6
   4149c:	1885883a 	add	r2,r3,r2
   414a0:	e0800015 	stw	r2,0(fp)
   414a4:	a0c001cc 	andi	r3,r20,7
   414a8:	1800b526 	beq	r3,zero,41780 <_malloc_r+0x688>
   414ac:	a0e9c83a 	sub	r20,r20,r3
   414b0:	00840204 	movi	r2,4104
   414b4:	a5000204 	addi	r20,r20,8
   414b8:	10c7c83a 	sub	r3,r2,r3
   414bc:	a545883a 	add	r2,r20,r21
   414c0:	1083ffcc 	andi	r2,r2,4095
   414c4:	18abc83a 	sub	r21,r3,r2
   414c8:	9009883a 	mov	r4,r18
   414cc:	a80b883a 	mov	r5,r21
   414d0:	00421bc0 	call	421bc <_sbrk_r>
   414d4:	00ffffc4 	movi	r3,-1
   414d8:	10c0d026 	beq	r2,r3,4181c <_malloc_r+0x724>
   414dc:	1507c83a 	sub	r3,r2,r20
   414e0:	a8c7883a 	add	r3,r21,r3
   414e4:	18c00054 	ori	r3,r3,1
   414e8:	e0800017 	ldw	r2,0(fp)
   414ec:	9d000215 	stw	r20,8(r19)
   414f0:	a0c00115 	stw	r3,4(r20)
   414f4:	a887883a 	add	r3,r21,r2
   414f8:	e0c00015 	stw	r3,0(fp)
   414fc:	84c00e26 	beq	r16,r19,41538 <_malloc_r+0x440>
   41500:	018003c4 	movi	r6,15
   41504:	3580a02e 	bgeu	r6,r22,41788 <_malloc_r+0x690>
   41508:	81400117 	ldw	r5,4(r16)
   4150c:	013ffe04 	movi	r4,-8
   41510:	b0bffd04 	addi	r2,r22,-12
   41514:	1104703a 	and	r2,r2,r4
   41518:	2900004c 	andi	r4,r5,1
   4151c:	1108b03a 	or	r4,r2,r4
   41520:	81000115 	stw	r4,4(r16)
   41524:	01400144 	movi	r5,5
   41528:	8089883a 	add	r4,r16,r2
   4152c:	21400115 	stw	r5,4(r4)
   41530:	21400215 	stw	r5,8(r4)
   41534:	3080c036 	bltu	r6,r2,41838 <_malloc_r+0x740>
   41538:	00800174 	movhi	r2,5
   4153c:	108b0a04 	addi	r2,r2,11304
   41540:	11000017 	ldw	r4,0(r2)
   41544:	20c0012e 	bgeu	r4,r3,4154c <_malloc_r+0x454>
   41548:	10c00015 	stw	r3,0(r2)
   4154c:	00800174 	movhi	r2,5
   41550:	108b0904 	addi	r2,r2,11300
   41554:	11000017 	ldw	r4,0(r2)
   41558:	9c000217 	ldw	r16,8(r19)
   4155c:	20c0012e 	bgeu	r4,r3,41564 <_malloc_r+0x46c>
   41560:	10c00015 	stw	r3,0(r2)
   41564:	80c00117 	ldw	r3,4(r16)
   41568:	00bfff04 	movi	r2,-4
   4156c:	1886703a 	and	r3,r3,r2
   41570:	1c45c83a 	sub	r2,r3,r17
   41574:	1c400236 	bltu	r3,r17,41580 <_malloc_r+0x488>
   41578:	00c003c4 	movi	r3,15
   4157c:	18800416 	blt	r3,r2,41590 <_malloc_r+0x498>
   41580:	9009883a 	mov	r4,r18
   41584:	00442840 	call	44284 <__malloc_unlock>
   41588:	0005883a 	mov	r2,zero
   4158c:	003f0706 	br	411ac <__alt_data_end+0xfffcb64c>
   41590:	88c00054 	ori	r3,r17,1
   41594:	80c00115 	stw	r3,4(r16)
   41598:	8463883a 	add	r17,r16,r17
   4159c:	10800054 	ori	r2,r2,1
   415a0:	9c400215 	stw	r17,8(r19)
   415a4:	88800115 	stw	r2,4(r17)
   415a8:	9009883a 	mov	r4,r18
   415ac:	00442840 	call	44284 <__malloc_unlock>
   415b0:	80800204 	addi	r2,r16,8
   415b4:	003efd06 	br	411ac <__alt_data_end+0xfffcb64c>
   415b8:	00800504 	movi	r2,20
   415bc:	10c0482e 	bgeu	r2,r3,416e0 <_malloc_r+0x5e8>
   415c0:	00801504 	movi	r2,84
   415c4:	10c06836 	bltu	r2,r3,41768 <_malloc_r+0x670>
   415c8:	8806d33a 	srli	r3,r17,12
   415cc:	19c01b84 	addi	r7,r3,110
   415d0:	39cb883a 	add	r5,r7,r7
   415d4:	003f0c06 	br	41208 <__alt_data_end+0xfffcb6a8>
   415d8:	3804d27a 	srli	r2,r7,9
   415dc:	01000104 	movi	r4,4
   415e0:	2080422e 	bgeu	r4,r2,416ec <_malloc_r+0x5f4>
   415e4:	01000504 	movi	r4,20
   415e8:	20807c36 	bltu	r4,r2,417dc <_malloc_r+0x6e4>
   415ec:	110016c4 	addi	r4,r2,91
   415f0:	210b883a 	add	r5,r4,r4
   415f4:	294b883a 	add	r5,r5,r5
   415f8:	294b883a 	add	r5,r5,r5
   415fc:	994b883a 	add	r5,r19,r5
   41600:	28800217 	ldw	r2,8(r5)
   41604:	02000174 	movhi	r8,5
   41608:	423e3004 	addi	r8,r8,-1856
   4160c:	11406326 	beq	r2,r5,4179c <_malloc_r+0x6a4>
   41610:	01bfff04 	movi	r6,-4
   41614:	11000117 	ldw	r4,4(r2)
   41618:	2188703a 	and	r4,r4,r6
   4161c:	3900022e 	bgeu	r7,r4,41628 <_malloc_r+0x530>
   41620:	10800217 	ldw	r2,8(r2)
   41624:	28bffb1e 	bne	r5,r2,41614 <__alt_data_end+0xfffcbab4>
   41628:	11800317 	ldw	r6,12(r2)
   4162c:	99000117 	ldw	r4,4(r19)
   41630:	81800315 	stw	r6,12(r16)
   41634:	80800215 	stw	r2,8(r16)
   41638:	34000215 	stw	r16,8(r6)
   4163c:	14000315 	stw	r16,12(r2)
   41640:	003f2706 	br	412e0 <__alt_data_end+0xfffcb780>
   41644:	88c00054 	ori	r3,r17,1
   41648:	80c00115 	stw	r3,4(r16)
   4164c:	8463883a 	add	r17,r16,r17
   41650:	34400515 	stw	r17,20(r6)
   41654:	34400415 	stw	r17,16(r6)
   41658:	10c00054 	ori	r3,r2,1
   4165c:	8a400315 	stw	r9,12(r17)
   41660:	8a400215 	stw	r9,8(r17)
   41664:	88c00115 	stw	r3,4(r17)
   41668:	88a3883a 	add	r17,r17,r2
   4166c:	88800015 	stw	r2,0(r17)
   41670:	9009883a 	mov	r4,r18
   41674:	00442840 	call	44284 <__malloc_unlock>
   41678:	80800204 	addi	r2,r16,8
   4167c:	003ecb06 	br	411ac <__alt_data_end+0xfffcb64c>
   41680:	31000117 	ldw	r4,4(r6)
   41684:	003f1606 	br	412e0 <__alt_data_end+0xfffcb780>
   41688:	63000044 	addi	r12,r12,1
   4168c:	608000cc 	andi	r2,r12,3
   41690:	5ac00204 	addi	r11,r11,8
   41694:	103f2a1e 	bne	r2,zero,41340 <__alt_data_end+0xfffcb7e0>
   41698:	00002106 	br	41720 <_malloc_r+0x628>
   4169c:	80800204 	addi	r2,r16,8
   416a0:	84000517 	ldw	r16,20(r16)
   416a4:	143eb31e 	bne	r2,r16,41174 <__alt_data_end+0xfffcb614>
   416a8:	18c00084 	addi	r3,r3,2
   416ac:	003eec06 	br	41260 <__alt_data_end+0xfffcb700>
   416b0:	8085883a 	add	r2,r16,r2
   416b4:	10c00117 	ldw	r3,4(r2)
   416b8:	81000317 	ldw	r4,12(r16)
   416bc:	81400217 	ldw	r5,8(r16)
   416c0:	18c00054 	ori	r3,r3,1
   416c4:	10c00115 	stw	r3,4(r2)
   416c8:	29000315 	stw	r4,12(r5)
   416cc:	21400215 	stw	r5,8(r4)
   416d0:	9009883a 	mov	r4,r18
   416d4:	00442840 	call	44284 <__malloc_unlock>
   416d8:	80800204 	addi	r2,r16,8
   416dc:	003eb306 	br	411ac <__alt_data_end+0xfffcb64c>
   416e0:	19c016c4 	addi	r7,r3,91
   416e4:	39cb883a 	add	r5,r7,r7
   416e8:	003ec706 	br	41208 <__alt_data_end+0xfffcb6a8>
   416ec:	3804d1ba 	srli	r2,r7,6
   416f0:	11000e04 	addi	r4,r2,56
   416f4:	210b883a 	add	r5,r4,r4
   416f8:	003fbe06 	br	415f4 <__alt_data_end+0xfffcba94>
   416fc:	84ff5d26 	beq	r16,r19,41474 <__alt_data_end+0xfffcb914>
   41700:	9c000217 	ldw	r16,8(r19)
   41704:	00bfff04 	movi	r2,-4
   41708:	80c00117 	ldw	r3,4(r16)
   4170c:	1886703a 	and	r3,r3,r2
   41710:	003f9706 	br	41570 <__alt_data_end+0xfffcba10>
   41714:	52800017 	ldw	r10,0(r10)
   41718:	18ffffc4 	addi	r3,r3,-1
   4171c:	50805c1e 	bne	r10,r2,41890 <_malloc_r+0x798>
   41720:	190000cc 	andi	r4,r3,3
   41724:	50bffe04 	addi	r2,r10,-8
   41728:	203ffa1e 	bne	r4,zero,41714 <__alt_data_end+0xfffcbbb4>
   4172c:	98800117 	ldw	r2,4(r19)
   41730:	0146303a 	nor	r3,zero,r5
   41734:	1884703a 	and	r2,r3,r2
   41738:	98800115 	stw	r2,4(r19)
   4173c:	294b883a 	add	r5,r5,r5
   41740:	117f2e36 	bltu	r2,r5,413fc <__alt_data_end+0xfffcb89c>
   41744:	283f2d26 	beq	r5,zero,413fc <__alt_data_end+0xfffcb89c>
   41748:	1146703a 	and	r3,r2,r5
   4174c:	1800521e 	bne	r3,zero,41898 <_malloc_r+0x7a0>
   41750:	6007883a 	mov	r3,r12
   41754:	294b883a 	add	r5,r5,r5
   41758:	1148703a 	and	r4,r2,r5
   4175c:	18c00104 	addi	r3,r3,4
   41760:	203ffc26 	beq	r4,zero,41754 <__alt_data_end+0xfffcbbf4>
   41764:	003ef006 	br	41328 <__alt_data_end+0xfffcb7c8>
   41768:	00805504 	movi	r2,340
   4176c:	10c01336 	bltu	r2,r3,417bc <_malloc_r+0x6c4>
   41770:	8806d3fa 	srli	r3,r17,15
   41774:	19c01dc4 	addi	r7,r3,119
   41778:	39cb883a 	add	r5,r7,r7
   4177c:	003ea206 	br	41208 <__alt_data_end+0xfffcb6a8>
   41780:	00c40004 	movi	r3,4096
   41784:	003f4d06 	br	414bc <__alt_data_end+0xfffcb95c>
   41788:	00800044 	movi	r2,1
   4178c:	a0800115 	stw	r2,4(r20)
   41790:	a021883a 	mov	r16,r20
   41794:	0007883a 	mov	r3,zero
   41798:	003f7506 	br	41570 <__alt_data_end+0xfffcba10>
   4179c:	200bd0ba 	srai	r5,r4,2
   417a0:	01800044 	movi	r6,1
   417a4:	41000117 	ldw	r4,4(r8)
   417a8:	314a983a 	sll	r5,r6,r5
   417ac:	100d883a 	mov	r6,r2
   417b0:	2908b03a 	or	r4,r5,r4
   417b4:	41000115 	stw	r4,4(r8)
   417b8:	003f9d06 	br	41630 <__alt_data_end+0xfffcbad0>
   417bc:	00815504 	movi	r2,1364
   417c0:	10c01336 	bltu	r2,r3,41810 <_malloc_r+0x718>
   417c4:	8806d4ba 	srli	r3,r17,18
   417c8:	19c01f04 	addi	r7,r3,124
   417cc:	39cb883a 	add	r5,r7,r7
   417d0:	003e8d06 	br	41208 <__alt_data_end+0xfffcb6a8>
   417d4:	ad400404 	addi	r21,r21,16
   417d8:	003f1d06 	br	41450 <__alt_data_end+0xfffcb8f0>
   417dc:	01001504 	movi	r4,84
   417e0:	20801c36 	bltu	r4,r2,41854 <_malloc_r+0x75c>
   417e4:	3804d33a 	srli	r2,r7,12
   417e8:	11001b84 	addi	r4,r2,110
   417ec:	210b883a 	add	r5,r4,r4
   417f0:	003f8006 	br	415f4 <__alt_data_end+0xfffcba94>
   417f4:	3083ffcc 	andi	r2,r6,4095
   417f8:	103f241e 	bne	r2,zero,4148c <__alt_data_end+0xfffcb92c>
   417fc:	99000217 	ldw	r4,8(r19)
   41800:	ad85883a 	add	r2,r21,r22
   41804:	10800054 	ori	r2,r2,1
   41808:	20800115 	stw	r2,4(r4)
   4180c:	003f4a06 	br	41538 <__alt_data_end+0xfffcb9d8>
   41810:	01403f04 	movi	r5,252
   41814:	01c01f84 	movi	r7,126
   41818:	003e7b06 	br	41208 <__alt_data_end+0xfffcb6a8>
   4181c:	00c00044 	movi	r3,1
   41820:	002b883a 	mov	r21,zero
   41824:	003f3006 	br	414e8 <__alt_data_end+0xfffcb988>
   41828:	00800174 	movhi	r2,5
   4182c:	1083ed04 	addi	r2,r2,4020
   41830:	15000015 	stw	r20,0(r2)
   41834:	003f1b06 	br	414a4 <__alt_data_end+0xfffcb944>
   41838:	9009883a 	mov	r4,r18
   4183c:	81400204 	addi	r5,r16,8
   41840:	0042a700 	call	42a70 <_free_r>
   41844:	00800174 	movhi	r2,5
   41848:	108b2d04 	addi	r2,r2,11444
   4184c:	10c00017 	ldw	r3,0(r2)
   41850:	003f3906 	br	41538 <__alt_data_end+0xfffcb9d8>
   41854:	01005504 	movi	r4,340
   41858:	20800436 	bltu	r4,r2,4186c <_malloc_r+0x774>
   4185c:	3804d3fa 	srli	r2,r7,15
   41860:	11001dc4 	addi	r4,r2,119
   41864:	210b883a 	add	r5,r4,r4
   41868:	003f6206 	br	415f4 <__alt_data_end+0xfffcba94>
   4186c:	01015504 	movi	r4,1364
   41870:	20800436 	bltu	r4,r2,41884 <_malloc_r+0x78c>
   41874:	3804d4ba 	srli	r2,r7,18
   41878:	11001f04 	addi	r4,r2,124
   4187c:	210b883a 	add	r5,r4,r4
   41880:	003f5c06 	br	415f4 <__alt_data_end+0xfffcba94>
   41884:	01403f04 	movi	r5,252
   41888:	01001f84 	movi	r4,126
   4188c:	003f5906 	br	415f4 <__alt_data_end+0xfffcba94>
   41890:	98800117 	ldw	r2,4(r19)
   41894:	003fa906 	br	4173c <__alt_data_end+0xfffcbbdc>
   41898:	6007883a 	mov	r3,r12
   4189c:	003ea206 	br	41328 <__alt_data_end+0xfffcb7c8>

000418a0 <memchr>:
   418a0:	208000cc 	andi	r2,r4,3
   418a4:	280f883a 	mov	r7,r5
   418a8:	10003526 	beq	r2,zero,41980 <memchr+0xe0>
   418ac:	30bfffc4 	addi	r2,r6,-1
   418b0:	30001b26 	beq	r6,zero,41920 <memchr+0x80>
   418b4:	21800003 	ldbu	r6,0(r4)
   418b8:	28c03fcc 	andi	r3,r5,255
   418bc:	30c01a26 	beq	r6,r3,41928 <memchr+0x88>
   418c0:	180d883a 	mov	r6,r3
   418c4:	00000406 	br	418d8 <memchr+0x38>
   418c8:	10001526 	beq	r2,zero,41920 <memchr+0x80>
   418cc:	20c00003 	ldbu	r3,0(r4)
   418d0:	10bfffc4 	addi	r2,r2,-1
   418d4:	19801426 	beq	r3,r6,41928 <memchr+0x88>
   418d8:	21000044 	addi	r4,r4,1
   418dc:	20c000cc 	andi	r3,r4,3
   418e0:	183ff91e 	bne	r3,zero,418c8 <__alt_data_end+0xfffcbd68>
   418e4:	024000c4 	movi	r9,3
   418e8:	48801136 	bltu	r9,r2,41930 <memchr+0x90>
   418ec:	10000c26 	beq	r2,zero,41920 <memchr+0x80>
   418f0:	20c00003 	ldbu	r3,0(r4)
   418f4:	29403fcc 	andi	r5,r5,255
   418f8:	19400b26 	beq	r3,r5,41928 <memchr+0x88>
   418fc:	20c00044 	addi	r3,r4,1
   41900:	2085883a 	add	r2,r4,r2
   41904:	39803fcc 	andi	r6,r7,255
   41908:	00000306 	br	41918 <memchr+0x78>
   4190c:	18c00044 	addi	r3,r3,1
   41910:	197fffc3 	ldbu	r5,-1(r3)
   41914:	29800426 	beq	r5,r6,41928 <memchr+0x88>
   41918:	1809883a 	mov	r4,r3
   4191c:	18bffb1e 	bne	r3,r2,4190c <__alt_data_end+0xfffcbdac>
   41920:	0005883a 	mov	r2,zero
   41924:	f800283a 	ret
   41928:	2005883a 	mov	r2,r4
   4192c:	f800283a 	ret
   41930:	28c03fcc 	andi	r3,r5,255
   41934:	1810923a 	slli	r8,r3,8
   41938:	02ffbff4 	movhi	r11,65279
   4193c:	02a02074 	movhi	r10,32897
   41940:	40c6b03a 	or	r3,r8,r3
   41944:	1810943a 	slli	r8,r3,16
   41948:	5affbfc4 	addi	r11,r11,-257
   4194c:	52a02004 	addi	r10,r10,-32640
   41950:	40d0b03a 	or	r8,r8,r3
   41954:	20c00017 	ldw	r3,0(r4)
   41958:	40c6f03a 	xor	r3,r8,r3
   4195c:	1acd883a 	add	r6,r3,r11
   41960:	00c6303a 	nor	r3,zero,r3
   41964:	30c6703a 	and	r3,r6,r3
   41968:	1a86703a 	and	r3,r3,r10
   4196c:	183fdf1e 	bne	r3,zero,418ec <__alt_data_end+0xfffcbd8c>
   41970:	10bfff04 	addi	r2,r2,-4
   41974:	21000104 	addi	r4,r4,4
   41978:	48bff636 	bltu	r9,r2,41954 <__alt_data_end+0xfffcbdf4>
   4197c:	003fdb06 	br	418ec <__alt_data_end+0xfffcbd8c>
   41980:	3005883a 	mov	r2,r6
   41984:	003fd706 	br	418e4 <__alt_data_end+0xfffcbd84>

00041988 <memcpy>:
   41988:	deffff04 	addi	sp,sp,-4
   4198c:	dc000015 	stw	r16,0(sp)
   41990:	00c003c4 	movi	r3,15
   41994:	2005883a 	mov	r2,r4
   41998:	1980432e 	bgeu	r3,r6,41aa8 <memcpy+0x120>
   4199c:	2146b03a 	or	r3,r4,r5
   419a0:	18c000cc 	andi	r3,r3,3
   419a4:	1800421e 	bne	r3,zero,41ab0 <memcpy+0x128>
   419a8:	343ffc04 	addi	r16,r6,-16
   419ac:	8020d13a 	srli	r16,r16,4
   419b0:	28c00104 	addi	r3,r5,4
   419b4:	23400104 	addi	r13,r4,4
   419b8:	801e913a 	slli	r15,r16,4
   419bc:	2b000204 	addi	r12,r5,8
   419c0:	22c00204 	addi	r11,r4,8
   419c4:	7bc00504 	addi	r15,r15,20
   419c8:	2a800304 	addi	r10,r5,12
   419cc:	22400304 	addi	r9,r4,12
   419d0:	2bdf883a 	add	r15,r5,r15
   419d4:	2811883a 	mov	r8,r5
   419d8:	200f883a 	mov	r7,r4
   419dc:	41000017 	ldw	r4,0(r8)
   419e0:	39c00404 	addi	r7,r7,16
   419e4:	18c00404 	addi	r3,r3,16
   419e8:	393ffc15 	stw	r4,-16(r7)
   419ec:	1bbffc17 	ldw	r14,-16(r3)
   419f0:	6b400404 	addi	r13,r13,16
   419f4:	5ac00404 	addi	r11,r11,16
   419f8:	6bbffc15 	stw	r14,-16(r13)
   419fc:	63800017 	ldw	r14,0(r12)
   41a00:	4a400404 	addi	r9,r9,16
   41a04:	42000404 	addi	r8,r8,16
   41a08:	5bbffc15 	stw	r14,-16(r11)
   41a0c:	53800017 	ldw	r14,0(r10)
   41a10:	63000404 	addi	r12,r12,16
   41a14:	52800404 	addi	r10,r10,16
   41a18:	4bbffc15 	stw	r14,-16(r9)
   41a1c:	1bffef1e 	bne	r3,r15,419dc <__alt_data_end+0xfffcbe7c>
   41a20:	81c00044 	addi	r7,r16,1
   41a24:	380e913a 	slli	r7,r7,4
   41a28:	310003cc 	andi	r4,r6,15
   41a2c:	02c000c4 	movi	r11,3
   41a30:	11c7883a 	add	r3,r2,r7
   41a34:	29cb883a 	add	r5,r5,r7
   41a38:	59001f2e 	bgeu	r11,r4,41ab8 <memcpy+0x130>
   41a3c:	1813883a 	mov	r9,r3
   41a40:	2811883a 	mov	r8,r5
   41a44:	200f883a 	mov	r7,r4
   41a48:	42800017 	ldw	r10,0(r8)
   41a4c:	4a400104 	addi	r9,r9,4
   41a50:	39ffff04 	addi	r7,r7,-4
   41a54:	4abfff15 	stw	r10,-4(r9)
   41a58:	42000104 	addi	r8,r8,4
   41a5c:	59fffa36 	bltu	r11,r7,41a48 <__alt_data_end+0xfffcbee8>
   41a60:	213fff04 	addi	r4,r4,-4
   41a64:	2008d0ba 	srli	r4,r4,2
   41a68:	318000cc 	andi	r6,r6,3
   41a6c:	21000044 	addi	r4,r4,1
   41a70:	2109883a 	add	r4,r4,r4
   41a74:	2109883a 	add	r4,r4,r4
   41a78:	1907883a 	add	r3,r3,r4
   41a7c:	290b883a 	add	r5,r5,r4
   41a80:	30000626 	beq	r6,zero,41a9c <memcpy+0x114>
   41a84:	198d883a 	add	r6,r3,r6
   41a88:	29c00003 	ldbu	r7,0(r5)
   41a8c:	18c00044 	addi	r3,r3,1
   41a90:	29400044 	addi	r5,r5,1
   41a94:	19ffffc5 	stb	r7,-1(r3)
   41a98:	19bffb1e 	bne	r3,r6,41a88 <__alt_data_end+0xfffcbf28>
   41a9c:	dc000017 	ldw	r16,0(sp)
   41aa0:	dec00104 	addi	sp,sp,4
   41aa4:	f800283a 	ret
   41aa8:	2007883a 	mov	r3,r4
   41aac:	003ff406 	br	41a80 <__alt_data_end+0xfffcbf20>
   41ab0:	2007883a 	mov	r3,r4
   41ab4:	003ff306 	br	41a84 <__alt_data_end+0xfffcbf24>
   41ab8:	200d883a 	mov	r6,r4
   41abc:	003ff006 	br	41a80 <__alt_data_end+0xfffcbf20>

00041ac0 <memmove>:
   41ac0:	2005883a 	mov	r2,r4
   41ac4:	29000b2e 	bgeu	r5,r4,41af4 <memmove+0x34>
   41ac8:	298f883a 	add	r7,r5,r6
   41acc:	21c0092e 	bgeu	r4,r7,41af4 <memmove+0x34>
   41ad0:	2187883a 	add	r3,r4,r6
   41ad4:	198bc83a 	sub	r5,r3,r6
   41ad8:	30004b26 	beq	r6,zero,41c08 <memmove+0x148>
   41adc:	39ffffc4 	addi	r7,r7,-1
   41ae0:	39000003 	ldbu	r4,0(r7)
   41ae4:	18ffffc4 	addi	r3,r3,-1
   41ae8:	19000005 	stb	r4,0(r3)
   41aec:	197ffb1e 	bne	r3,r5,41adc <__alt_data_end+0xfffcbf7c>
   41af0:	f800283a 	ret
   41af4:	00c003c4 	movi	r3,15
   41af8:	1980412e 	bgeu	r3,r6,41c00 <memmove+0x140>
   41afc:	1146b03a 	or	r3,r2,r5
   41b00:	18c000cc 	andi	r3,r3,3
   41b04:	1800411e 	bne	r3,zero,41c0c <memmove+0x14c>
   41b08:	33fffc04 	addi	r15,r6,-16
   41b0c:	781ed13a 	srli	r15,r15,4
   41b10:	28c00104 	addi	r3,r5,4
   41b14:	13400104 	addi	r13,r2,4
   41b18:	781c913a 	slli	r14,r15,4
   41b1c:	2b000204 	addi	r12,r5,8
   41b20:	12c00204 	addi	r11,r2,8
   41b24:	73800504 	addi	r14,r14,20
   41b28:	2a800304 	addi	r10,r5,12
   41b2c:	12400304 	addi	r9,r2,12
   41b30:	2b9d883a 	add	r14,r5,r14
   41b34:	2811883a 	mov	r8,r5
   41b38:	100f883a 	mov	r7,r2
   41b3c:	41000017 	ldw	r4,0(r8)
   41b40:	39c00404 	addi	r7,r7,16
   41b44:	18c00404 	addi	r3,r3,16
   41b48:	393ffc15 	stw	r4,-16(r7)
   41b4c:	193ffc17 	ldw	r4,-16(r3)
   41b50:	6b400404 	addi	r13,r13,16
   41b54:	5ac00404 	addi	r11,r11,16
   41b58:	693ffc15 	stw	r4,-16(r13)
   41b5c:	61000017 	ldw	r4,0(r12)
   41b60:	4a400404 	addi	r9,r9,16
   41b64:	42000404 	addi	r8,r8,16
   41b68:	593ffc15 	stw	r4,-16(r11)
   41b6c:	51000017 	ldw	r4,0(r10)
   41b70:	63000404 	addi	r12,r12,16
   41b74:	52800404 	addi	r10,r10,16
   41b78:	493ffc15 	stw	r4,-16(r9)
   41b7c:	1bbfef1e 	bne	r3,r14,41b3c <__alt_data_end+0xfffcbfdc>
   41b80:	79000044 	addi	r4,r15,1
   41b84:	2008913a 	slli	r4,r4,4
   41b88:	328003cc 	andi	r10,r6,15
   41b8c:	02c000c4 	movi	r11,3
   41b90:	1107883a 	add	r3,r2,r4
   41b94:	290b883a 	add	r5,r5,r4
   41b98:	5a801e2e 	bgeu	r11,r10,41c14 <memmove+0x154>
   41b9c:	1813883a 	mov	r9,r3
   41ba0:	2811883a 	mov	r8,r5
   41ba4:	500f883a 	mov	r7,r10
   41ba8:	41000017 	ldw	r4,0(r8)
   41bac:	4a400104 	addi	r9,r9,4
   41bb0:	39ffff04 	addi	r7,r7,-4
   41bb4:	493fff15 	stw	r4,-4(r9)
   41bb8:	42000104 	addi	r8,r8,4
   41bbc:	59fffa36 	bltu	r11,r7,41ba8 <__alt_data_end+0xfffcc048>
   41bc0:	513fff04 	addi	r4,r10,-4
   41bc4:	2008d0ba 	srli	r4,r4,2
   41bc8:	318000cc 	andi	r6,r6,3
   41bcc:	21000044 	addi	r4,r4,1
   41bd0:	2109883a 	add	r4,r4,r4
   41bd4:	2109883a 	add	r4,r4,r4
   41bd8:	1907883a 	add	r3,r3,r4
   41bdc:	290b883a 	add	r5,r5,r4
   41be0:	30000926 	beq	r6,zero,41c08 <memmove+0x148>
   41be4:	198d883a 	add	r6,r3,r6
   41be8:	29c00003 	ldbu	r7,0(r5)
   41bec:	18c00044 	addi	r3,r3,1
   41bf0:	29400044 	addi	r5,r5,1
   41bf4:	19ffffc5 	stb	r7,-1(r3)
   41bf8:	19bffb1e 	bne	r3,r6,41be8 <__alt_data_end+0xfffcc088>
   41bfc:	f800283a 	ret
   41c00:	1007883a 	mov	r3,r2
   41c04:	003ff606 	br	41be0 <__alt_data_end+0xfffcc080>
   41c08:	f800283a 	ret
   41c0c:	1007883a 	mov	r3,r2
   41c10:	003ff406 	br	41be4 <__alt_data_end+0xfffcc084>
   41c14:	500d883a 	mov	r6,r10
   41c18:	003ff106 	br	41be0 <__alt_data_end+0xfffcc080>

00041c1c <_realloc_r>:
   41c1c:	defff604 	addi	sp,sp,-40
   41c20:	dcc00315 	stw	r19,12(sp)
   41c24:	dc400115 	stw	r17,4(sp)
   41c28:	dfc00915 	stw	ra,36(sp)
   41c2c:	df000815 	stw	fp,32(sp)
   41c30:	ddc00715 	stw	r23,28(sp)
   41c34:	dd800615 	stw	r22,24(sp)
   41c38:	dd400515 	stw	r21,20(sp)
   41c3c:	dd000415 	stw	r20,16(sp)
   41c40:	dc800215 	stw	r18,8(sp)
   41c44:	dc000015 	stw	r16,0(sp)
   41c48:	2827883a 	mov	r19,r5
   41c4c:	3023883a 	mov	r17,r6
   41c50:	2800bf26 	beq	r5,zero,41f50 <_realloc_r+0x334>
   41c54:	2025883a 	mov	r18,r4
   41c58:	00441640 	call	44164 <__malloc_lock>
   41c5c:	98ffff17 	ldw	r3,-4(r19)
   41c60:	01bfff04 	movi	r6,-4
   41c64:	890002c4 	addi	r4,r17,11
   41c68:	01c00584 	movi	r7,22
   41c6c:	9d7ffe04 	addi	r21,r19,-8
   41c70:	19a0703a 	and	r16,r3,r6
   41c74:	39003f2e 	bgeu	r7,r4,41d74 <_realloc_r+0x158>
   41c78:	053ffe04 	movi	r20,-8
   41c7c:	2528703a 	and	r20,r4,r20
   41c80:	a00f883a 	mov	r7,r20
   41c84:	a0008216 	blt	r20,zero,41e90 <_realloc_r+0x274>
   41c88:	a4408136 	bltu	r20,r17,41e90 <_realloc_r+0x274>
   41c8c:	81c03c0e 	bge	r16,r7,41d80 <_realloc_r+0x164>
   41c90:	07000174 	movhi	fp,5
   41c94:	e73e3004 	addi	fp,fp,-1856
   41c98:	e1000217 	ldw	r4,8(fp)
   41c9c:	ac05883a 	add	r2,r21,r16
   41ca0:	2080bf26 	beq	r4,r2,41fa0 <_realloc_r+0x384>
   41ca4:	11000117 	ldw	r4,4(r2)
   41ca8:	023fff84 	movi	r8,-2
   41cac:	2210703a 	and	r8,r4,r8
   41cb0:	1211883a 	add	r8,r2,r8
   41cb4:	41400117 	ldw	r5,4(r8)
   41cb8:	2940004c 	andi	r5,r5,1
   41cbc:	28004a1e 	bne	r5,zero,41de8 <_realloc_r+0x1cc>
   41cc0:	017fff04 	movi	r5,-4
   41cc4:	2148703a 	and	r4,r4,r5
   41cc8:	2409883a 	add	r4,r4,r16
   41ccc:	21c0ad0e 	bge	r4,r7,41f84 <_realloc_r+0x368>
   41cd0:	18c0004c 	andi	r3,r3,1
   41cd4:	18007f1e 	bne	r3,zero,41ed4 <_realloc_r+0x2b8>
   41cd8:	9dfffe17 	ldw	r23,-8(r19)
   41cdc:	adefc83a 	sub	r23,r21,r23
   41ce0:	bd800117 	ldw	r22,4(r23)
   41ce4:	b14a703a 	and	r5,r22,r5
   41ce8:	216d883a 	add	r22,r4,r5
   41cec:	b1c04516 	blt	r22,r7,41e04 <_realloc_r+0x1e8>
   41cf0:	10c00317 	ldw	r3,12(r2)
   41cf4:	10800217 	ldw	r2,8(r2)
   41cf8:	81bfff04 	addi	r6,r16,-4
   41cfc:	bc400204 	addi	r17,r23,8
   41d00:	10c00315 	stw	r3,12(r2)
   41d04:	18800215 	stw	r2,8(r3)
   41d08:	b9400217 	ldw	r5,8(r23)
   41d0c:	b8c00317 	ldw	r3,12(r23)
   41d10:	00800904 	movi	r2,36
   41d14:	28c00315 	stw	r3,12(r5)
   41d18:	19400215 	stw	r5,8(r3)
   41d1c:	1180ef36 	bltu	r2,r6,420dc <_realloc_r+0x4c0>
   41d20:	008004c4 	movi	r2,19
   41d24:	1180da2e 	bgeu	r2,r6,42090 <_realloc_r+0x474>
   41d28:	98800017 	ldw	r2,0(r19)
   41d2c:	b8800215 	stw	r2,8(r23)
   41d30:	98800117 	ldw	r2,4(r19)
   41d34:	b8800315 	stw	r2,12(r23)
   41d38:	008006c4 	movi	r2,27
   41d3c:	1180fc2e 	bgeu	r2,r6,42130 <_realloc_r+0x514>
   41d40:	98800217 	ldw	r2,8(r19)
   41d44:	b8800415 	stw	r2,16(r23)
   41d48:	98800317 	ldw	r2,12(r19)
   41d4c:	b8800515 	stw	r2,20(r23)
   41d50:	00800904 	movi	r2,36
   41d54:	3080421e 	bne	r6,r2,41e60 <_realloc_r+0x244>
   41d58:	98800417 	ldw	r2,16(r19)
   41d5c:	9cc00604 	addi	r19,r19,24
   41d60:	b8c00804 	addi	r3,r23,32
   41d64:	b8800615 	stw	r2,24(r23)
   41d68:	98bfff17 	ldw	r2,-4(r19)
   41d6c:	b8800715 	stw	r2,28(r23)
   41d70:	00003d06 	br	41e68 <_realloc_r+0x24c>
   41d74:	01c00404 	movi	r7,16
   41d78:	3829883a 	mov	r20,r7
   41d7c:	003fc206 	br	41c88 <__alt_data_end+0xfffcc128>
   41d80:	9823883a 	mov	r17,r19
   41d84:	850fc83a 	sub	r7,r16,r20
   41d88:	008003c4 	movi	r2,15
   41d8c:	18c0004c 	andi	r3,r3,1
   41d90:	11c04336 	bltu	r2,r7,41ea0 <_realloc_r+0x284>
   41d94:	1c06b03a 	or	r3,r3,r16
   41d98:	a8c00115 	stw	r3,4(r21)
   41d9c:	ac21883a 	add	r16,r21,r16
   41da0:	80c00117 	ldw	r3,4(r16)
   41da4:	18c00054 	ori	r3,r3,1
   41da8:	80c00115 	stw	r3,4(r16)
   41dac:	9009883a 	mov	r4,r18
   41db0:	00442840 	call	44284 <__malloc_unlock>
   41db4:	8805883a 	mov	r2,r17
   41db8:	dfc00917 	ldw	ra,36(sp)
   41dbc:	df000817 	ldw	fp,32(sp)
   41dc0:	ddc00717 	ldw	r23,28(sp)
   41dc4:	dd800617 	ldw	r22,24(sp)
   41dc8:	dd400517 	ldw	r21,20(sp)
   41dcc:	dd000417 	ldw	r20,16(sp)
   41dd0:	dcc00317 	ldw	r19,12(sp)
   41dd4:	dc800217 	ldw	r18,8(sp)
   41dd8:	dc400117 	ldw	r17,4(sp)
   41ddc:	dc000017 	ldw	r16,0(sp)
   41de0:	dec00a04 	addi	sp,sp,40
   41de4:	f800283a 	ret
   41de8:	18c0004c 	andi	r3,r3,1
   41dec:	1800391e 	bne	r3,zero,41ed4 <_realloc_r+0x2b8>
   41df0:	9dfffe17 	ldw	r23,-8(r19)
   41df4:	00bfff04 	movi	r2,-4
   41df8:	adefc83a 	sub	r23,r21,r23
   41dfc:	b9400117 	ldw	r5,4(r23)
   41e00:	288a703a 	and	r5,r5,r2
   41e04:	2c2d883a 	add	r22,r5,r16
   41e08:	b1c03216 	blt	r22,r7,41ed4 <_realloc_r+0x2b8>
   41e0c:	b8800317 	ldw	r2,12(r23)
   41e10:	b8c00217 	ldw	r3,8(r23)
   41e14:	81bfff04 	addi	r6,r16,-4
   41e18:	01000904 	movi	r4,36
   41e1c:	18800315 	stw	r2,12(r3)
   41e20:	10c00215 	stw	r3,8(r2)
   41e24:	bc400204 	addi	r17,r23,8
   41e28:	2180ac36 	bltu	r4,r6,420dc <_realloc_r+0x4c0>
   41e2c:	008004c4 	movi	r2,19
   41e30:	1180972e 	bgeu	r2,r6,42090 <_realloc_r+0x474>
   41e34:	98800017 	ldw	r2,0(r19)
   41e38:	b8800215 	stw	r2,8(r23)
   41e3c:	98800117 	ldw	r2,4(r19)
   41e40:	b8800315 	stw	r2,12(r23)
   41e44:	008006c4 	movi	r2,27
   41e48:	1180b92e 	bgeu	r2,r6,42130 <_realloc_r+0x514>
   41e4c:	98800217 	ldw	r2,8(r19)
   41e50:	b8800415 	stw	r2,16(r23)
   41e54:	98800317 	ldw	r2,12(r19)
   41e58:	b8800515 	stw	r2,20(r23)
   41e5c:	313fbe26 	beq	r6,r4,41d58 <__alt_data_end+0xfffcc1f8>
   41e60:	b8c00604 	addi	r3,r23,24
   41e64:	9cc00404 	addi	r19,r19,16
   41e68:	98800017 	ldw	r2,0(r19)
   41e6c:	b021883a 	mov	r16,r22
   41e70:	b82b883a 	mov	r21,r23
   41e74:	18800015 	stw	r2,0(r3)
   41e78:	98800117 	ldw	r2,4(r19)
   41e7c:	18800115 	stw	r2,4(r3)
   41e80:	98800217 	ldw	r2,8(r19)
   41e84:	18800215 	stw	r2,8(r3)
   41e88:	b8c00117 	ldw	r3,4(r23)
   41e8c:	003fbd06 	br	41d84 <__alt_data_end+0xfffcc224>
   41e90:	00800304 	movi	r2,12
   41e94:	90800015 	stw	r2,0(r18)
   41e98:	0005883a 	mov	r2,zero
   41e9c:	003fc606 	br	41db8 <__alt_data_end+0xfffcc258>
   41ea0:	1d06b03a 	or	r3,r3,r20
   41ea4:	ad0b883a 	add	r5,r21,r20
   41ea8:	a8c00115 	stw	r3,4(r21)
   41eac:	38800054 	ori	r2,r7,1
   41eb0:	28800115 	stw	r2,4(r5)
   41eb4:	29cf883a 	add	r7,r5,r7
   41eb8:	38800117 	ldw	r2,4(r7)
   41ebc:	9009883a 	mov	r4,r18
   41ec0:	29400204 	addi	r5,r5,8
   41ec4:	10800054 	ori	r2,r2,1
   41ec8:	38800115 	stw	r2,4(r7)
   41ecc:	0042a700 	call	42a70 <_free_r>
   41ed0:	003fb606 	br	41dac <__alt_data_end+0xfffcc24c>
   41ed4:	880b883a 	mov	r5,r17
   41ed8:	9009883a 	mov	r4,r18
   41edc:	00410f80 	call	410f8 <_malloc_r>
   41ee0:	1023883a 	mov	r17,r2
   41ee4:	1000aa26 	beq	r2,zero,42190 <_realloc_r+0x574>
   41ee8:	98ffff17 	ldw	r3,-4(r19)
   41eec:	113ffe04 	addi	r4,r2,-8
   41ef0:	00bfff84 	movi	r2,-2
   41ef4:	1884703a 	and	r2,r3,r2
   41ef8:	a885883a 	add	r2,r21,r2
   41efc:	20808626 	beq	r4,r2,42118 <_realloc_r+0x4fc>
   41f00:	81bfff04 	addi	r6,r16,-4
   41f04:	00800904 	movi	r2,36
   41f08:	11807036 	bltu	r2,r6,420cc <_realloc_r+0x4b0>
   41f0c:	00c004c4 	movi	r3,19
   41f10:	19805636 	bltu	r3,r6,4206c <_realloc_r+0x450>
   41f14:	8805883a 	mov	r2,r17
   41f18:	9807883a 	mov	r3,r19
   41f1c:	19000017 	ldw	r4,0(r3)
   41f20:	11000015 	stw	r4,0(r2)
   41f24:	19000117 	ldw	r4,4(r3)
   41f28:	11000115 	stw	r4,4(r2)
   41f2c:	18c00217 	ldw	r3,8(r3)
   41f30:	10c00215 	stw	r3,8(r2)
   41f34:	980b883a 	mov	r5,r19
   41f38:	9009883a 	mov	r4,r18
   41f3c:	0042a700 	call	42a70 <_free_r>
   41f40:	9009883a 	mov	r4,r18
   41f44:	00442840 	call	44284 <__malloc_unlock>
   41f48:	8805883a 	mov	r2,r17
   41f4c:	003f9a06 	br	41db8 <__alt_data_end+0xfffcc258>
   41f50:	300b883a 	mov	r5,r6
   41f54:	dfc00917 	ldw	ra,36(sp)
   41f58:	df000817 	ldw	fp,32(sp)
   41f5c:	ddc00717 	ldw	r23,28(sp)
   41f60:	dd800617 	ldw	r22,24(sp)
   41f64:	dd400517 	ldw	r21,20(sp)
   41f68:	dd000417 	ldw	r20,16(sp)
   41f6c:	dcc00317 	ldw	r19,12(sp)
   41f70:	dc800217 	ldw	r18,8(sp)
   41f74:	dc400117 	ldw	r17,4(sp)
   41f78:	dc000017 	ldw	r16,0(sp)
   41f7c:	dec00a04 	addi	sp,sp,40
   41f80:	00410f81 	jmpi	410f8 <_malloc_r>
   41f84:	11400317 	ldw	r5,12(r2)
   41f88:	10800217 	ldw	r2,8(r2)
   41f8c:	9823883a 	mov	r17,r19
   41f90:	2021883a 	mov	r16,r4
   41f94:	11400315 	stw	r5,12(r2)
   41f98:	28800215 	stw	r2,8(r5)
   41f9c:	003f7906 	br	41d84 <__alt_data_end+0xfffcc224>
   41fa0:	21000117 	ldw	r4,4(r4)
   41fa4:	00bfff04 	movi	r2,-4
   41fa8:	a1800404 	addi	r6,r20,16
   41fac:	2088703a 	and	r4,r4,r2
   41fb0:	2409883a 	add	r4,r4,r16
   41fb4:	2180380e 	bge	r4,r6,42098 <_realloc_r+0x47c>
   41fb8:	18c0004c 	andi	r3,r3,1
   41fbc:	183fc51e 	bne	r3,zero,41ed4 <__alt_data_end+0xfffcc374>
   41fc0:	9dfffe17 	ldw	r23,-8(r19)
   41fc4:	adefc83a 	sub	r23,r21,r23
   41fc8:	b9400117 	ldw	r5,4(r23)
   41fcc:	288a703a 	and	r5,r5,r2
   41fd0:	216d883a 	add	r22,r4,r5
   41fd4:	b1bf8b16 	blt	r22,r6,41e04 <__alt_data_end+0xfffcc2a4>
   41fd8:	b8800317 	ldw	r2,12(r23)
   41fdc:	b8c00217 	ldw	r3,8(r23)
   41fe0:	81bfff04 	addi	r6,r16,-4
   41fe4:	01000904 	movi	r4,36
   41fe8:	18800315 	stw	r2,12(r3)
   41fec:	10c00215 	stw	r3,8(r2)
   41ff0:	bc400204 	addi	r17,r23,8
   41ff4:	21805a36 	bltu	r4,r6,42160 <_realloc_r+0x544>
   41ff8:	008004c4 	movi	r2,19
   41ffc:	1180562e 	bgeu	r2,r6,42158 <_realloc_r+0x53c>
   42000:	98800017 	ldw	r2,0(r19)
   42004:	b8800215 	stw	r2,8(r23)
   42008:	98800117 	ldw	r2,4(r19)
   4200c:	b8800315 	stw	r2,12(r23)
   42010:	008006c4 	movi	r2,27
   42014:	11805636 	bltu	r2,r6,42170 <_realloc_r+0x554>
   42018:	b8800404 	addi	r2,r23,16
   4201c:	9cc00204 	addi	r19,r19,8
   42020:	98c00017 	ldw	r3,0(r19)
   42024:	10c00015 	stw	r3,0(r2)
   42028:	98c00117 	ldw	r3,4(r19)
   4202c:	10c00115 	stw	r3,4(r2)
   42030:	98c00217 	ldw	r3,8(r19)
   42034:	10c00215 	stw	r3,8(r2)
   42038:	bd07883a 	add	r3,r23,r20
   4203c:	b505c83a 	sub	r2,r22,r20
   42040:	e0c00215 	stw	r3,8(fp)
   42044:	10800054 	ori	r2,r2,1
   42048:	18800115 	stw	r2,4(r3)
   4204c:	b8800117 	ldw	r2,4(r23)
   42050:	9009883a 	mov	r4,r18
   42054:	1080004c 	andi	r2,r2,1
   42058:	a0a8b03a 	or	r20,r20,r2
   4205c:	bd000115 	stw	r20,4(r23)
   42060:	00442840 	call	44284 <__malloc_unlock>
   42064:	8805883a 	mov	r2,r17
   42068:	003f5306 	br	41db8 <__alt_data_end+0xfffcc258>
   4206c:	98c00017 	ldw	r3,0(r19)
   42070:	88c00015 	stw	r3,0(r17)
   42074:	98c00117 	ldw	r3,4(r19)
   42078:	88c00115 	stw	r3,4(r17)
   4207c:	00c006c4 	movi	r3,27
   42080:	19801d36 	bltu	r3,r6,420f8 <_realloc_r+0x4dc>
   42084:	88800204 	addi	r2,r17,8
   42088:	98c00204 	addi	r3,r19,8
   4208c:	003fa306 	br	41f1c <__alt_data_end+0xfffcc3bc>
   42090:	8807883a 	mov	r3,r17
   42094:	003f7406 	br	41e68 <__alt_data_end+0xfffcc308>
   42098:	ad2b883a 	add	r21,r21,r20
   4209c:	2505c83a 	sub	r2,r4,r20
   420a0:	e5400215 	stw	r21,8(fp)
   420a4:	10800054 	ori	r2,r2,1
   420a8:	a8800115 	stw	r2,4(r21)
   420ac:	98bfff17 	ldw	r2,-4(r19)
   420b0:	9009883a 	mov	r4,r18
   420b4:	1080004c 	andi	r2,r2,1
   420b8:	a0a8b03a 	or	r20,r20,r2
   420bc:	9d3fff15 	stw	r20,-4(r19)
   420c0:	00442840 	call	44284 <__malloc_unlock>
   420c4:	9805883a 	mov	r2,r19
   420c8:	003f3b06 	br	41db8 <__alt_data_end+0xfffcc258>
   420cc:	8809883a 	mov	r4,r17
   420d0:	980b883a 	mov	r5,r19
   420d4:	0041ac00 	call	41ac0 <memmove>
   420d8:	003f9606 	br	41f34 <__alt_data_end+0xfffcc3d4>
   420dc:	8809883a 	mov	r4,r17
   420e0:	980b883a 	mov	r5,r19
   420e4:	0041ac00 	call	41ac0 <memmove>
   420e8:	b8c00117 	ldw	r3,4(r23)
   420ec:	b021883a 	mov	r16,r22
   420f0:	b82b883a 	mov	r21,r23
   420f4:	003f2306 	br	41d84 <__alt_data_end+0xfffcc224>
   420f8:	98c00217 	ldw	r3,8(r19)
   420fc:	88c00215 	stw	r3,8(r17)
   42100:	98c00317 	ldw	r3,12(r19)
   42104:	88c00315 	stw	r3,12(r17)
   42108:	30800c26 	beq	r6,r2,4213c <_realloc_r+0x520>
   4210c:	88800404 	addi	r2,r17,16
   42110:	98c00404 	addi	r3,r19,16
   42114:	003f8106 	br	41f1c <__alt_data_end+0xfffcc3bc>
   42118:	893fff17 	ldw	r4,-4(r17)
   4211c:	00bfff04 	movi	r2,-4
   42120:	9823883a 	mov	r17,r19
   42124:	2084703a 	and	r2,r4,r2
   42128:	80a1883a 	add	r16,r16,r2
   4212c:	003f1506 	br	41d84 <__alt_data_end+0xfffcc224>
   42130:	b8c00404 	addi	r3,r23,16
   42134:	9cc00204 	addi	r19,r19,8
   42138:	003f4b06 	br	41e68 <__alt_data_end+0xfffcc308>
   4213c:	99000417 	ldw	r4,16(r19)
   42140:	88800604 	addi	r2,r17,24
   42144:	98c00604 	addi	r3,r19,24
   42148:	89000415 	stw	r4,16(r17)
   4214c:	99000517 	ldw	r4,20(r19)
   42150:	89000515 	stw	r4,20(r17)
   42154:	003f7106 	br	41f1c <__alt_data_end+0xfffcc3bc>
   42158:	8805883a 	mov	r2,r17
   4215c:	003fb006 	br	42020 <__alt_data_end+0xfffcc4c0>
   42160:	8809883a 	mov	r4,r17
   42164:	980b883a 	mov	r5,r19
   42168:	0041ac00 	call	41ac0 <memmove>
   4216c:	003fb206 	br	42038 <__alt_data_end+0xfffcc4d8>
   42170:	98800217 	ldw	r2,8(r19)
   42174:	b8800415 	stw	r2,16(r23)
   42178:	98800317 	ldw	r2,12(r19)
   4217c:	b8800515 	stw	r2,20(r23)
   42180:	31000726 	beq	r6,r4,421a0 <_realloc_r+0x584>
   42184:	b8800604 	addi	r2,r23,24
   42188:	9cc00404 	addi	r19,r19,16
   4218c:	003fa406 	br	42020 <__alt_data_end+0xfffcc4c0>
   42190:	9009883a 	mov	r4,r18
   42194:	00442840 	call	44284 <__malloc_unlock>
   42198:	0005883a 	mov	r2,zero
   4219c:	003f0606 	br	41db8 <__alt_data_end+0xfffcc258>
   421a0:	98c00417 	ldw	r3,16(r19)
   421a4:	9cc00604 	addi	r19,r19,24
   421a8:	b8800804 	addi	r2,r23,32
   421ac:	b8c00615 	stw	r3,24(r23)
   421b0:	98ffff17 	ldw	r3,-4(r19)
   421b4:	b8c00715 	stw	r3,28(r23)
   421b8:	003f9906 	br	42020 <__alt_data_end+0xfffcc4c0>

000421bc <_sbrk_r>:
   421bc:	defffd04 	addi	sp,sp,-12
   421c0:	dc000015 	stw	r16,0(sp)
   421c4:	04000174 	movhi	r16,5
   421c8:	dc400115 	stw	r17,4(sp)
   421cc:	840b0c04 	addi	r16,r16,11312
   421d0:	2023883a 	mov	r17,r4
   421d4:	2809883a 	mov	r4,r5
   421d8:	dfc00215 	stw	ra,8(sp)
   421dc:	80000015 	stw	zero,0(r16)
   421e0:	0043e480 	call	43e48 <sbrk>
   421e4:	00ffffc4 	movi	r3,-1
   421e8:	10c00526 	beq	r2,r3,42200 <_sbrk_r+0x44>
   421ec:	dfc00217 	ldw	ra,8(sp)
   421f0:	dc400117 	ldw	r17,4(sp)
   421f4:	dc000017 	ldw	r16,0(sp)
   421f8:	dec00304 	addi	sp,sp,12
   421fc:	f800283a 	ret
   42200:	80c00017 	ldw	r3,0(r16)
   42204:	183ff926 	beq	r3,zero,421ec <__alt_data_end+0xfffcc68c>
   42208:	88c00015 	stw	r3,0(r17)
   4220c:	003ff706 	br	421ec <__alt_data_end+0xfffcc68c>

00042210 <__swsetup_r>:
   42210:	00800174 	movhi	r2,5
   42214:	defffd04 	addi	sp,sp,-12
   42218:	1083ec04 	addi	r2,r2,4016
   4221c:	dc400115 	stw	r17,4(sp)
   42220:	2023883a 	mov	r17,r4
   42224:	11000017 	ldw	r4,0(r2)
   42228:	dc000015 	stw	r16,0(sp)
   4222c:	dfc00215 	stw	ra,8(sp)
   42230:	2821883a 	mov	r16,r5
   42234:	20000226 	beq	r4,zero,42240 <__swsetup_r+0x30>
   42238:	20c00e17 	ldw	r3,56(r4)
   4223c:	18002e26 	beq	r3,zero,422f8 <__swsetup_r+0xe8>
   42240:	8080030b 	ldhu	r2,12(r16)
   42244:	10c0020c 	andi	r3,r2,8
   42248:	100d883a 	mov	r6,r2
   4224c:	18000f26 	beq	r3,zero,4228c <__swsetup_r+0x7c>
   42250:	80c00417 	ldw	r3,16(r16)
   42254:	18001526 	beq	r3,zero,422ac <__swsetup_r+0x9c>
   42258:	1100004c 	andi	r4,r2,1
   4225c:	20001c1e 	bne	r4,zero,422d0 <__swsetup_r+0xc0>
   42260:	1080008c 	andi	r2,r2,2
   42264:	1000261e 	bne	r2,zero,42300 <__swsetup_r+0xf0>
   42268:	80800517 	ldw	r2,20(r16)
   4226c:	80800215 	stw	r2,8(r16)
   42270:	18001c26 	beq	r3,zero,422e4 <__swsetup_r+0xd4>
   42274:	0005883a 	mov	r2,zero
   42278:	dfc00217 	ldw	ra,8(sp)
   4227c:	dc400117 	ldw	r17,4(sp)
   42280:	dc000017 	ldw	r16,0(sp)
   42284:	dec00304 	addi	sp,sp,12
   42288:	f800283a 	ret
   4228c:	3080040c 	andi	r2,r6,16
   42290:	10001726 	beq	r2,zero,422f0 <__swsetup_r+0xe0>
   42294:	3080010c 	andi	r2,r6,4
   42298:	10001b1e 	bne	r2,zero,42308 <__swsetup_r+0xf8>
   4229c:	80c00417 	ldw	r3,16(r16)
   422a0:	30800214 	ori	r2,r6,8
   422a4:	8080030d 	sth	r2,12(r16)
   422a8:	183feb1e 	bne	r3,zero,42258 <__alt_data_end+0xfffcc6f8>
   422ac:	1140a00c 	andi	r5,r2,640
   422b0:	01008004 	movi	r4,512
   422b4:	293fe826 	beq	r5,r4,42258 <__alt_data_end+0xfffcc6f8>
   422b8:	8809883a 	mov	r4,r17
   422bc:	800b883a 	mov	r5,r16
   422c0:	0042ed00 	call	42ed0 <__smakebuf_r>
   422c4:	8080030b 	ldhu	r2,12(r16)
   422c8:	80c00417 	ldw	r3,16(r16)
   422cc:	003fe206 	br	42258 <__alt_data_end+0xfffcc6f8>
   422d0:	80800517 	ldw	r2,20(r16)
   422d4:	80000215 	stw	zero,8(r16)
   422d8:	0085c83a 	sub	r2,zero,r2
   422dc:	80800615 	stw	r2,24(r16)
   422e0:	183fe41e 	bne	r3,zero,42274 <__alt_data_end+0xfffcc714>
   422e4:	8080030b 	ldhu	r2,12(r16)
   422e8:	1080200c 	andi	r2,r2,128
   422ec:	103fe226 	beq	r2,zero,42278 <__alt_data_end+0xfffcc718>
   422f0:	00bfffc4 	movi	r2,-1
   422f4:	003fe006 	br	42278 <__alt_data_end+0xfffcc718>
   422f8:	00428fc0 	call	428fc <__sinit>
   422fc:	003fd006 	br	42240 <__alt_data_end+0xfffcc6e0>
   42300:	0005883a 	mov	r2,zero
   42304:	003fd906 	br	4226c <__alt_data_end+0xfffcc70c>
   42308:	81400c17 	ldw	r5,48(r16)
   4230c:	28000626 	beq	r5,zero,42328 <__swsetup_r+0x118>
   42310:	80801004 	addi	r2,r16,64
   42314:	28800326 	beq	r5,r2,42324 <__swsetup_r+0x114>
   42318:	8809883a 	mov	r4,r17
   4231c:	0042a700 	call	42a70 <_free_r>
   42320:	8180030b 	ldhu	r6,12(r16)
   42324:	80000c15 	stw	zero,48(r16)
   42328:	80c00417 	ldw	r3,16(r16)
   4232c:	00bff6c4 	movi	r2,-37
   42330:	118c703a 	and	r6,r2,r6
   42334:	80000115 	stw	zero,4(r16)
   42338:	80c00015 	stw	r3,0(r16)
   4233c:	003fd806 	br	422a0 <__alt_data_end+0xfffcc740>

00042340 <_fflush_r>:
   42340:	defffb04 	addi	sp,sp,-20
   42344:	dcc00315 	stw	r19,12(sp)
   42348:	dc000015 	stw	r16,0(sp)
   4234c:	dfc00415 	stw	ra,16(sp)
   42350:	dc800215 	stw	r18,8(sp)
   42354:	dc400115 	stw	r17,4(sp)
   42358:	2027883a 	mov	r19,r4
   4235c:	2821883a 	mov	r16,r5
   42360:	20000226 	beq	r4,zero,4236c <_fflush_r+0x2c>
   42364:	20800e17 	ldw	r2,56(r4)
   42368:	10005326 	beq	r2,zero,424b8 <_fflush_r+0x178>
   4236c:	8080030b 	ldhu	r2,12(r16)
   42370:	10ffffcc 	andi	r3,r2,65535
   42374:	18e0001c 	xori	r3,r3,32768
   42378:	18e00004 	addi	r3,r3,-32768
   4237c:	18002c26 	beq	r3,zero,42430 <_fflush_r+0xf0>
   42380:	10c0020c 	andi	r3,r2,8
   42384:	1800321e 	bne	r3,zero,42450 <_fflush_r+0x110>
   42388:	80c00117 	ldw	r3,4(r16)
   4238c:	10820014 	ori	r2,r2,2048
   42390:	8080030d 	sth	r2,12(r16)
   42394:	00c0570e 	bge	zero,r3,424f4 <_fflush_r+0x1b4>
   42398:	82000a17 	ldw	r8,40(r16)
   4239c:	40002426 	beq	r8,zero,42430 <_fflush_r+0xf0>
   423a0:	9c400017 	ldw	r17,0(r19)
   423a4:	10c4000c 	andi	r3,r2,4096
   423a8:	98000015 	stw	zero,0(r19)
   423ac:	18004626 	beq	r3,zero,424c8 <_fflush_r+0x188>
   423b0:	81801417 	ldw	r6,80(r16)
   423b4:	10c0010c 	andi	r3,r2,4
   423b8:	18000626 	beq	r3,zero,423d4 <_fflush_r+0x94>
   423bc:	80c00117 	ldw	r3,4(r16)
   423c0:	80800c17 	ldw	r2,48(r16)
   423c4:	30cdc83a 	sub	r6,r6,r3
   423c8:	10000226 	beq	r2,zero,423d4 <_fflush_r+0x94>
   423cc:	80800f17 	ldw	r2,60(r16)
   423d0:	308dc83a 	sub	r6,r6,r2
   423d4:	81400717 	ldw	r5,28(r16)
   423d8:	9809883a 	mov	r4,r19
   423dc:	000f883a 	mov	r7,zero
   423e0:	403ee83a 	callr	r8
   423e4:	00ffffc4 	movi	r3,-1
   423e8:	10c04526 	beq	r2,r3,42500 <_fflush_r+0x1c0>
   423ec:	80c0030b 	ldhu	r3,12(r16)
   423f0:	81000417 	ldw	r4,16(r16)
   423f4:	80000115 	stw	zero,4(r16)
   423f8:	197dffcc 	andi	r5,r3,63487
   423fc:	8140030d 	sth	r5,12(r16)
   42400:	81000015 	stw	r4,0(r16)
   42404:	18c4000c 	andi	r3,r3,4096
   42408:	18000126 	beq	r3,zero,42410 <_fflush_r+0xd0>
   4240c:	80801415 	stw	r2,80(r16)
   42410:	81400c17 	ldw	r5,48(r16)
   42414:	9c400015 	stw	r17,0(r19)
   42418:	28000526 	beq	r5,zero,42430 <_fflush_r+0xf0>
   4241c:	80801004 	addi	r2,r16,64
   42420:	28800226 	beq	r5,r2,4242c <_fflush_r+0xec>
   42424:	9809883a 	mov	r4,r19
   42428:	0042a700 	call	42a70 <_free_r>
   4242c:	80000c15 	stw	zero,48(r16)
   42430:	0005883a 	mov	r2,zero
   42434:	dfc00417 	ldw	ra,16(sp)
   42438:	dcc00317 	ldw	r19,12(sp)
   4243c:	dc800217 	ldw	r18,8(sp)
   42440:	dc400117 	ldw	r17,4(sp)
   42444:	dc000017 	ldw	r16,0(sp)
   42448:	dec00504 	addi	sp,sp,20
   4244c:	f800283a 	ret
   42450:	84800417 	ldw	r18,16(r16)
   42454:	903ff626 	beq	r18,zero,42430 <__alt_data_end+0xfffcc8d0>
   42458:	84400017 	ldw	r17,0(r16)
   4245c:	108000cc 	andi	r2,r2,3
   42460:	84800015 	stw	r18,0(r16)
   42464:	8ca3c83a 	sub	r17,r17,r18
   42468:	10001526 	beq	r2,zero,424c0 <_fflush_r+0x180>
   4246c:	0005883a 	mov	r2,zero
   42470:	80800215 	stw	r2,8(r16)
   42474:	04400316 	blt	zero,r17,42484 <_fflush_r+0x144>
   42478:	003fed06 	br	42430 <__alt_data_end+0xfffcc8d0>
   4247c:	90a5883a 	add	r18,r18,r2
   42480:	047feb0e 	bge	zero,r17,42430 <__alt_data_end+0xfffcc8d0>
   42484:	80800917 	ldw	r2,36(r16)
   42488:	81400717 	ldw	r5,28(r16)
   4248c:	880f883a 	mov	r7,r17
   42490:	900d883a 	mov	r6,r18
   42494:	9809883a 	mov	r4,r19
   42498:	103ee83a 	callr	r2
   4249c:	88a3c83a 	sub	r17,r17,r2
   424a0:	00bff616 	blt	zero,r2,4247c <__alt_data_end+0xfffcc91c>
   424a4:	80c0030b 	ldhu	r3,12(r16)
   424a8:	00bfffc4 	movi	r2,-1
   424ac:	18c01014 	ori	r3,r3,64
   424b0:	80c0030d 	sth	r3,12(r16)
   424b4:	003fdf06 	br	42434 <__alt_data_end+0xfffcc8d4>
   424b8:	00428fc0 	call	428fc <__sinit>
   424bc:	003fab06 	br	4236c <__alt_data_end+0xfffcc80c>
   424c0:	80800517 	ldw	r2,20(r16)
   424c4:	003fea06 	br	42470 <__alt_data_end+0xfffcc910>
   424c8:	81400717 	ldw	r5,28(r16)
   424cc:	000d883a 	mov	r6,zero
   424d0:	9809883a 	mov	r4,r19
   424d4:	01c00044 	movi	r7,1
   424d8:	403ee83a 	callr	r8
   424dc:	100d883a 	mov	r6,r2
   424e0:	00bfffc4 	movi	r2,-1
   424e4:	30801326 	beq	r6,r2,42534 <_fflush_r+0x1f4>
   424e8:	8080030b 	ldhu	r2,12(r16)
   424ec:	82000a17 	ldw	r8,40(r16)
   424f0:	003fb006 	br	423b4 <__alt_data_end+0xfffcc854>
   424f4:	80c00f17 	ldw	r3,60(r16)
   424f8:	00ffa716 	blt	zero,r3,42398 <__alt_data_end+0xfffcc838>
   424fc:	003fcc06 	br	42430 <__alt_data_end+0xfffcc8d0>
   42500:	98c00017 	ldw	r3,0(r19)
   42504:	183fb926 	beq	r3,zero,423ec <__alt_data_end+0xfffcc88c>
   42508:	01000744 	movi	r4,29
   4250c:	19000226 	beq	r3,r4,42518 <_fflush_r+0x1d8>
   42510:	01000584 	movi	r4,22
   42514:	1900101e 	bne	r3,r4,42558 <_fflush_r+0x218>
   42518:	8080030b 	ldhu	r2,12(r16)
   4251c:	80c00417 	ldw	r3,16(r16)
   42520:	80000115 	stw	zero,4(r16)
   42524:	10bdffcc 	andi	r2,r2,63487
   42528:	8080030d 	sth	r2,12(r16)
   4252c:	80c00015 	stw	r3,0(r16)
   42530:	003fb706 	br	42410 <__alt_data_end+0xfffcc8b0>
   42534:	98800017 	ldw	r2,0(r19)
   42538:	103feb26 	beq	r2,zero,424e8 <__alt_data_end+0xfffcc988>
   4253c:	00c00744 	movi	r3,29
   42540:	10c00226 	beq	r2,r3,4254c <_fflush_r+0x20c>
   42544:	00c00584 	movi	r3,22
   42548:	10ffd61e 	bne	r2,r3,424a4 <__alt_data_end+0xfffcc944>
   4254c:	9c400015 	stw	r17,0(r19)
   42550:	0005883a 	mov	r2,zero
   42554:	003fb706 	br	42434 <__alt_data_end+0xfffcc8d4>
   42558:	80c0030b 	ldhu	r3,12(r16)
   4255c:	18c01014 	ori	r3,r3,64
   42560:	80c0030d 	sth	r3,12(r16)
   42564:	003fb306 	br	42434 <__alt_data_end+0xfffcc8d4>

00042568 <fflush>:
   42568:	20000526 	beq	r4,zero,42580 <fflush+0x18>
   4256c:	00800174 	movhi	r2,5
   42570:	1083ec04 	addi	r2,r2,4016
   42574:	200b883a 	mov	r5,r4
   42578:	11000017 	ldw	r4,0(r2)
   4257c:	00423401 	jmpi	42340 <_fflush_r>
   42580:	00800174 	movhi	r2,5
   42584:	1083eb04 	addi	r2,r2,4012
   42588:	11000017 	ldw	r4,0(r2)
   4258c:	01400134 	movhi	r5,4
   42590:	2948d004 	addi	r5,r5,9024
   42594:	0042e181 	jmpi	42e18 <_fwalk_reent>

00042598 <__fp_lock>:
   42598:	0005883a 	mov	r2,zero
   4259c:	f800283a 	ret

000425a0 <__fp_unlock>:
   425a0:	0005883a 	mov	r2,zero
   425a4:	f800283a 	ret

000425a8 <_cleanup_r>:
   425a8:	01400134 	movhi	r5,4
   425ac:	294d2604 	addi	r5,r5,13464
   425b0:	0042d601 	jmpi	42d60 <_fwalk>

000425b4 <__sinit.part.1>:
   425b4:	defff604 	addi	sp,sp,-40
   425b8:	00c00134 	movhi	r3,4
   425bc:	dfc00915 	stw	ra,36(sp)
   425c0:	df000815 	stw	fp,32(sp)
   425c4:	ddc00715 	stw	r23,28(sp)
   425c8:	dd800615 	stw	r22,24(sp)
   425cc:	dd400515 	stw	r21,20(sp)
   425d0:	dd000415 	stw	r20,16(sp)
   425d4:	dcc00315 	stw	r19,12(sp)
   425d8:	dc800215 	stw	r18,8(sp)
   425dc:	dc400115 	stw	r17,4(sp)
   425e0:	dc000015 	stw	r16,0(sp)
   425e4:	18c96a04 	addi	r3,r3,9640
   425e8:	24000117 	ldw	r16,4(r4)
   425ec:	20c00f15 	stw	r3,60(r4)
   425f0:	07000044 	movi	fp,1
   425f4:	00c000c4 	movi	r3,3
   425f8:	2080bb04 	addi	r2,r4,748
   425fc:	20c0b915 	stw	r3,740(r4)
   42600:	27000e15 	stw	fp,56(r4)
   42604:	2080ba15 	stw	r2,744(r4)
   42608:	2000b815 	stw	zero,736(r4)
   4260c:	05c00204 	movi	r23,8
   42610:	00800104 	movi	r2,4
   42614:	2025883a 	mov	r18,r4
   42618:	b80d883a 	mov	r6,r23
   4261c:	81001704 	addi	r4,r16,92
   42620:	000b883a 	mov	r5,zero
   42624:	80000015 	stw	zero,0(r16)
   42628:	80000115 	stw	zero,4(r16)
   4262c:	80000215 	stw	zero,8(r16)
   42630:	8080030d 	sth	r2,12(r16)
   42634:	80001915 	stw	zero,100(r16)
   42638:	8000038d 	sth	zero,14(r16)
   4263c:	80000415 	stw	zero,16(r16)
   42640:	80000515 	stw	zero,20(r16)
   42644:	80000615 	stw	zero,24(r16)
   42648:	00430880 	call	43088 <memset>
   4264c:	05800134 	movhi	r22,4
   42650:	94400217 	ldw	r17,8(r18)
   42654:	05400134 	movhi	r21,4
   42658:	05000134 	movhi	r20,4
   4265c:	04c00134 	movhi	r19,4
   42660:	b58c6b04 	addi	r22,r22,12716
   42664:	ad4c8204 	addi	r21,r21,12808
   42668:	a50ca104 	addi	r20,r20,12932
   4266c:	9cccb804 	addi	r19,r19,13024
   42670:	85800815 	stw	r22,32(r16)
   42674:	85400915 	stw	r21,36(r16)
   42678:	85000a15 	stw	r20,40(r16)
   4267c:	84c00b15 	stw	r19,44(r16)
   42680:	84000715 	stw	r16,28(r16)
   42684:	00800284 	movi	r2,10
   42688:	89001704 	addi	r4,r17,92
   4268c:	b80d883a 	mov	r6,r23
   42690:	000b883a 	mov	r5,zero
   42694:	88000015 	stw	zero,0(r17)
   42698:	88000115 	stw	zero,4(r17)
   4269c:	88000215 	stw	zero,8(r17)
   426a0:	8880030d 	sth	r2,12(r17)
   426a4:	88001915 	stw	zero,100(r17)
   426a8:	8f00038d 	sth	fp,14(r17)
   426ac:	88000415 	stw	zero,16(r17)
   426b0:	88000515 	stw	zero,20(r17)
   426b4:	88000615 	stw	zero,24(r17)
   426b8:	00430880 	call	43088 <memset>
   426bc:	94000317 	ldw	r16,12(r18)
   426c0:	00800484 	movi	r2,18
   426c4:	8c400715 	stw	r17,28(r17)
   426c8:	8d800815 	stw	r22,32(r17)
   426cc:	8d400915 	stw	r21,36(r17)
   426d0:	8d000a15 	stw	r20,40(r17)
   426d4:	8cc00b15 	stw	r19,44(r17)
   426d8:	8080030d 	sth	r2,12(r16)
   426dc:	00800084 	movi	r2,2
   426e0:	80000015 	stw	zero,0(r16)
   426e4:	80000115 	stw	zero,4(r16)
   426e8:	80000215 	stw	zero,8(r16)
   426ec:	80001915 	stw	zero,100(r16)
   426f0:	8080038d 	sth	r2,14(r16)
   426f4:	80000415 	stw	zero,16(r16)
   426f8:	80000515 	stw	zero,20(r16)
   426fc:	80000615 	stw	zero,24(r16)
   42700:	81001704 	addi	r4,r16,92
   42704:	000b883a 	mov	r5,zero
   42708:	b80d883a 	mov	r6,r23
   4270c:	00430880 	call	43088 <memset>
   42710:	84000715 	stw	r16,28(r16)
   42714:	85800815 	stw	r22,32(r16)
   42718:	85400915 	stw	r21,36(r16)
   4271c:	85000a15 	stw	r20,40(r16)
   42720:	84c00b15 	stw	r19,44(r16)
   42724:	dfc00917 	ldw	ra,36(sp)
   42728:	df000817 	ldw	fp,32(sp)
   4272c:	ddc00717 	ldw	r23,28(sp)
   42730:	dd800617 	ldw	r22,24(sp)
   42734:	dd400517 	ldw	r21,20(sp)
   42738:	dd000417 	ldw	r20,16(sp)
   4273c:	dcc00317 	ldw	r19,12(sp)
   42740:	dc800217 	ldw	r18,8(sp)
   42744:	dc400117 	ldw	r17,4(sp)
   42748:	dc000017 	ldw	r16,0(sp)
   4274c:	dec00a04 	addi	sp,sp,40
   42750:	f800283a 	ret

00042754 <__sfmoreglue>:
   42754:	defffc04 	addi	sp,sp,-16
   42758:	dc800215 	stw	r18,8(sp)
   4275c:	2825883a 	mov	r18,r5
   42760:	dc000015 	stw	r16,0(sp)
   42764:	01401a04 	movi	r5,104
   42768:	2021883a 	mov	r16,r4
   4276c:	9009883a 	mov	r4,r18
   42770:	dfc00315 	stw	ra,12(sp)
   42774:	dc400115 	stw	r17,4(sp)
   42778:	00436100 	call	43610 <__mulsi3>
   4277c:	8009883a 	mov	r4,r16
   42780:	11400304 	addi	r5,r2,12
   42784:	1023883a 	mov	r17,r2
   42788:	00410f80 	call	410f8 <_malloc_r>
   4278c:	1021883a 	mov	r16,r2
   42790:	10000726 	beq	r2,zero,427b0 <__sfmoreglue+0x5c>
   42794:	11000304 	addi	r4,r2,12
   42798:	10000015 	stw	zero,0(r2)
   4279c:	14800115 	stw	r18,4(r2)
   427a0:	11000215 	stw	r4,8(r2)
   427a4:	000b883a 	mov	r5,zero
   427a8:	880d883a 	mov	r6,r17
   427ac:	00430880 	call	43088 <memset>
   427b0:	8005883a 	mov	r2,r16
   427b4:	dfc00317 	ldw	ra,12(sp)
   427b8:	dc800217 	ldw	r18,8(sp)
   427bc:	dc400117 	ldw	r17,4(sp)
   427c0:	dc000017 	ldw	r16,0(sp)
   427c4:	dec00404 	addi	sp,sp,16
   427c8:	f800283a 	ret

000427cc <__sfp>:
   427cc:	00800174 	movhi	r2,5
   427d0:	defffb04 	addi	sp,sp,-20
   427d4:	1083eb04 	addi	r2,r2,4012
   427d8:	dc800215 	stw	r18,8(sp)
   427dc:	14800017 	ldw	r18,0(r2)
   427e0:	dcc00315 	stw	r19,12(sp)
   427e4:	dfc00415 	stw	ra,16(sp)
   427e8:	90800e17 	ldw	r2,56(r18)
   427ec:	dc400115 	stw	r17,4(sp)
   427f0:	dc000015 	stw	r16,0(sp)
   427f4:	2027883a 	mov	r19,r4
   427f8:	1000021e 	bne	r2,zero,42804 <__sfp+0x38>
   427fc:	9009883a 	mov	r4,r18
   42800:	00425b40 	call	425b4 <__sinit.part.1>
   42804:	9480b804 	addi	r18,r18,736
   42808:	047fffc4 	movi	r17,-1
   4280c:	91400117 	ldw	r5,4(r18)
   42810:	94000217 	ldw	r16,8(r18)
   42814:	297fffc4 	addi	r5,r5,-1
   42818:	28000a16 	blt	r5,zero,42844 <__sfp+0x78>
   4281c:	8080030f 	ldh	r2,12(r16)
   42820:	10000c26 	beq	r2,zero,42854 <__sfp+0x88>
   42824:	80c01d04 	addi	r3,r16,116
   42828:	00000206 	br	42834 <__sfp+0x68>
   4282c:	18bfe60f 	ldh	r2,-104(r3)
   42830:	10000826 	beq	r2,zero,42854 <__sfp+0x88>
   42834:	297fffc4 	addi	r5,r5,-1
   42838:	1c3ffd04 	addi	r16,r3,-12
   4283c:	18c01a04 	addi	r3,r3,104
   42840:	2c7ffa1e 	bne	r5,r17,4282c <__alt_data_end+0xfffccccc>
   42844:	90800017 	ldw	r2,0(r18)
   42848:	10001d26 	beq	r2,zero,428c0 <__sfp+0xf4>
   4284c:	1025883a 	mov	r18,r2
   42850:	003fee06 	br	4280c <__alt_data_end+0xfffcccac>
   42854:	00bfffc4 	movi	r2,-1
   42858:	8080038d 	sth	r2,14(r16)
   4285c:	00800044 	movi	r2,1
   42860:	8080030d 	sth	r2,12(r16)
   42864:	80001915 	stw	zero,100(r16)
   42868:	80000015 	stw	zero,0(r16)
   4286c:	80000215 	stw	zero,8(r16)
   42870:	80000115 	stw	zero,4(r16)
   42874:	80000415 	stw	zero,16(r16)
   42878:	80000515 	stw	zero,20(r16)
   4287c:	80000615 	stw	zero,24(r16)
   42880:	81001704 	addi	r4,r16,92
   42884:	000b883a 	mov	r5,zero
   42888:	01800204 	movi	r6,8
   4288c:	00430880 	call	43088 <memset>
   42890:	8005883a 	mov	r2,r16
   42894:	80000c15 	stw	zero,48(r16)
   42898:	80000d15 	stw	zero,52(r16)
   4289c:	80001115 	stw	zero,68(r16)
   428a0:	80001215 	stw	zero,72(r16)
   428a4:	dfc00417 	ldw	ra,16(sp)
   428a8:	dcc00317 	ldw	r19,12(sp)
   428ac:	dc800217 	ldw	r18,8(sp)
   428b0:	dc400117 	ldw	r17,4(sp)
   428b4:	dc000017 	ldw	r16,0(sp)
   428b8:	dec00504 	addi	sp,sp,20
   428bc:	f800283a 	ret
   428c0:	9809883a 	mov	r4,r19
   428c4:	01400104 	movi	r5,4
   428c8:	00427540 	call	42754 <__sfmoreglue>
   428cc:	90800015 	stw	r2,0(r18)
   428d0:	103fde1e 	bne	r2,zero,4284c <__alt_data_end+0xfffcccec>
   428d4:	00800304 	movi	r2,12
   428d8:	98800015 	stw	r2,0(r19)
   428dc:	0005883a 	mov	r2,zero
   428e0:	003ff006 	br	428a4 <__alt_data_end+0xfffccd44>

000428e4 <_cleanup>:
   428e4:	00800174 	movhi	r2,5
   428e8:	1083eb04 	addi	r2,r2,4012
   428ec:	11000017 	ldw	r4,0(r2)
   428f0:	01400134 	movhi	r5,4
   428f4:	294d2604 	addi	r5,r5,13464
   428f8:	0042d601 	jmpi	42d60 <_fwalk>

000428fc <__sinit>:
   428fc:	20800e17 	ldw	r2,56(r4)
   42900:	10000126 	beq	r2,zero,42908 <__sinit+0xc>
   42904:	f800283a 	ret
   42908:	00425b41 	jmpi	425b4 <__sinit.part.1>

0004290c <__sfp_lock_acquire>:
   4290c:	f800283a 	ret

00042910 <__sfp_lock_release>:
   42910:	f800283a 	ret

00042914 <__sinit_lock_acquire>:
   42914:	f800283a 	ret

00042918 <__sinit_lock_release>:
   42918:	f800283a 	ret

0004291c <__fp_lock_all>:
   4291c:	00800174 	movhi	r2,5
   42920:	1083ec04 	addi	r2,r2,4016
   42924:	11000017 	ldw	r4,0(r2)
   42928:	01400134 	movhi	r5,4
   4292c:	29496604 	addi	r5,r5,9624
   42930:	0042d601 	jmpi	42d60 <_fwalk>

00042934 <__fp_unlock_all>:
   42934:	00800174 	movhi	r2,5
   42938:	1083ec04 	addi	r2,r2,4016
   4293c:	11000017 	ldw	r4,0(r2)
   42940:	01400134 	movhi	r5,4
   42944:	29496804 	addi	r5,r5,9632
   42948:	0042d601 	jmpi	42d60 <_fwalk>

0004294c <_malloc_trim_r>:
   4294c:	defffb04 	addi	sp,sp,-20
   42950:	dcc00315 	stw	r19,12(sp)
   42954:	04c00174 	movhi	r19,5
   42958:	dc800215 	stw	r18,8(sp)
   4295c:	dc400115 	stw	r17,4(sp)
   42960:	dc000015 	stw	r16,0(sp)
   42964:	dfc00415 	stw	ra,16(sp)
   42968:	2821883a 	mov	r16,r5
   4296c:	9cfe3004 	addi	r19,r19,-1856
   42970:	2025883a 	mov	r18,r4
   42974:	00441640 	call	44164 <__malloc_lock>
   42978:	98800217 	ldw	r2,8(r19)
   4297c:	14400117 	ldw	r17,4(r2)
   42980:	00bfff04 	movi	r2,-4
   42984:	88a2703a 	and	r17,r17,r2
   42988:	8c21c83a 	sub	r16,r17,r16
   4298c:	8403fbc4 	addi	r16,r16,4079
   42990:	8020d33a 	srli	r16,r16,12
   42994:	0083ffc4 	movi	r2,4095
   42998:	843fffc4 	addi	r16,r16,-1
   4299c:	8020933a 	slli	r16,r16,12
   429a0:	1400060e 	bge	r2,r16,429bc <_malloc_trim_r+0x70>
   429a4:	9009883a 	mov	r4,r18
   429a8:	000b883a 	mov	r5,zero
   429ac:	00421bc0 	call	421bc <_sbrk_r>
   429b0:	98c00217 	ldw	r3,8(r19)
   429b4:	1c47883a 	add	r3,r3,r17
   429b8:	10c00a26 	beq	r2,r3,429e4 <_malloc_trim_r+0x98>
   429bc:	9009883a 	mov	r4,r18
   429c0:	00442840 	call	44284 <__malloc_unlock>
   429c4:	0005883a 	mov	r2,zero
   429c8:	dfc00417 	ldw	ra,16(sp)
   429cc:	dcc00317 	ldw	r19,12(sp)
   429d0:	dc800217 	ldw	r18,8(sp)
   429d4:	dc400117 	ldw	r17,4(sp)
   429d8:	dc000017 	ldw	r16,0(sp)
   429dc:	dec00504 	addi	sp,sp,20
   429e0:	f800283a 	ret
   429e4:	9009883a 	mov	r4,r18
   429e8:	040bc83a 	sub	r5,zero,r16
   429ec:	00421bc0 	call	421bc <_sbrk_r>
   429f0:	00ffffc4 	movi	r3,-1
   429f4:	10c00d26 	beq	r2,r3,42a2c <_malloc_trim_r+0xe0>
   429f8:	00c00174 	movhi	r3,5
   429fc:	18cb2d04 	addi	r3,r3,11444
   42a00:	18800017 	ldw	r2,0(r3)
   42a04:	99000217 	ldw	r4,8(r19)
   42a08:	8c23c83a 	sub	r17,r17,r16
   42a0c:	8c400054 	ori	r17,r17,1
   42a10:	1421c83a 	sub	r16,r2,r16
   42a14:	24400115 	stw	r17,4(r4)
   42a18:	9009883a 	mov	r4,r18
   42a1c:	1c000015 	stw	r16,0(r3)
   42a20:	00442840 	call	44284 <__malloc_unlock>
   42a24:	00800044 	movi	r2,1
   42a28:	003fe706 	br	429c8 <__alt_data_end+0xfffcce68>
   42a2c:	9009883a 	mov	r4,r18
   42a30:	000b883a 	mov	r5,zero
   42a34:	00421bc0 	call	421bc <_sbrk_r>
   42a38:	99000217 	ldw	r4,8(r19)
   42a3c:	014003c4 	movi	r5,15
   42a40:	1107c83a 	sub	r3,r2,r4
   42a44:	28ffdd0e 	bge	r5,r3,429bc <__alt_data_end+0xfffcce5c>
   42a48:	01400174 	movhi	r5,5
   42a4c:	2943ed04 	addi	r5,r5,4020
   42a50:	29400017 	ldw	r5,0(r5)
   42a54:	18c00054 	ori	r3,r3,1
   42a58:	20c00115 	stw	r3,4(r4)
   42a5c:	00c00174 	movhi	r3,5
   42a60:	1145c83a 	sub	r2,r2,r5
   42a64:	18cb2d04 	addi	r3,r3,11444
   42a68:	18800015 	stw	r2,0(r3)
   42a6c:	003fd306 	br	429bc <__alt_data_end+0xfffcce5c>

00042a70 <_free_r>:
   42a70:	28004c26 	beq	r5,zero,42ba4 <_free_r+0x134>
   42a74:	defffd04 	addi	sp,sp,-12
   42a78:	dc400115 	stw	r17,4(sp)
   42a7c:	dc000015 	stw	r16,0(sp)
   42a80:	2023883a 	mov	r17,r4
   42a84:	2821883a 	mov	r16,r5
   42a88:	dfc00215 	stw	ra,8(sp)
   42a8c:	00441640 	call	44164 <__malloc_lock>
   42a90:	813fff17 	ldw	r4,-4(r16)
   42a94:	00bfff84 	movi	r2,-2
   42a98:	02400174 	movhi	r9,5
   42a9c:	81bffe04 	addi	r6,r16,-8
   42aa0:	2084703a 	and	r2,r4,r2
   42aa4:	4a7e3004 	addi	r9,r9,-1856
   42aa8:	308b883a 	add	r5,r6,r2
   42aac:	2a000117 	ldw	r8,4(r5)
   42ab0:	49c00217 	ldw	r7,8(r9)
   42ab4:	00ffff04 	movi	r3,-4
   42ab8:	40c6703a 	and	r3,r8,r3
   42abc:	39405326 	beq	r7,r5,42c0c <_free_r+0x19c>
   42ac0:	28c00115 	stw	r3,4(r5)
   42ac4:	2100004c 	andi	r4,r4,1
   42ac8:	2000091e 	bne	r4,zero,42af0 <_free_r+0x80>
   42acc:	81fffe17 	ldw	r7,-8(r16)
   42ad0:	4a000204 	addi	r8,r9,8
   42ad4:	31cdc83a 	sub	r6,r6,r7
   42ad8:	31000217 	ldw	r4,8(r6)
   42adc:	11c5883a 	add	r2,r2,r7
   42ae0:	22006126 	beq	r4,r8,42c68 <_free_r+0x1f8>
   42ae4:	31c00317 	ldw	r7,12(r6)
   42ae8:	21c00315 	stw	r7,12(r4)
   42aec:	39000215 	stw	r4,8(r7)
   42af0:	28c9883a 	add	r4,r5,r3
   42af4:	21c00117 	ldw	r7,4(r4)
   42af8:	39c0004c 	andi	r7,r7,1
   42afc:	38000d1e 	bne	r7,zero,42b34 <_free_r+0xc4>
   42b00:	29000217 	ldw	r4,8(r5)
   42b04:	10c5883a 	add	r2,r2,r3
   42b08:	00c00174 	movhi	r3,5
   42b0c:	18fe3204 	addi	r3,r3,-1848
   42b10:	20c07526 	beq	r4,r3,42ce8 <_free_r+0x278>
   42b14:	29c00317 	ldw	r7,12(r5)
   42b18:	11400054 	ori	r5,r2,1
   42b1c:	3087883a 	add	r3,r6,r2
   42b20:	21c00315 	stw	r7,12(r4)
   42b24:	39000215 	stw	r4,8(r7)
   42b28:	31400115 	stw	r5,4(r6)
   42b2c:	18800015 	stw	r2,0(r3)
   42b30:	00000406 	br	42b44 <_free_r+0xd4>
   42b34:	10c00054 	ori	r3,r2,1
   42b38:	30c00115 	stw	r3,4(r6)
   42b3c:	3087883a 	add	r3,r6,r2
   42b40:	18800015 	stw	r2,0(r3)
   42b44:	00c07fc4 	movi	r3,511
   42b48:	18801736 	bltu	r3,r2,42ba8 <_free_r+0x138>
   42b4c:	1004d0fa 	srli	r2,r2,3
   42b50:	01400044 	movi	r5,1
   42b54:	49000117 	ldw	r4,4(r9)
   42b58:	1087883a 	add	r3,r2,r2
   42b5c:	18c7883a 	add	r3,r3,r3
   42b60:	1005d0ba 	srai	r2,r2,2
   42b64:	18c7883a 	add	r3,r3,r3
   42b68:	1a47883a 	add	r3,r3,r9
   42b6c:	19c00217 	ldw	r7,8(r3)
   42b70:	2884983a 	sll	r2,r5,r2
   42b74:	30c00315 	stw	r3,12(r6)
   42b78:	31c00215 	stw	r7,8(r6)
   42b7c:	1104b03a 	or	r2,r2,r4
   42b80:	19800215 	stw	r6,8(r3)
   42b84:	48800115 	stw	r2,4(r9)
   42b88:	39800315 	stw	r6,12(r7)
   42b8c:	8809883a 	mov	r4,r17
   42b90:	dfc00217 	ldw	ra,8(sp)
   42b94:	dc400117 	ldw	r17,4(sp)
   42b98:	dc000017 	ldw	r16,0(sp)
   42b9c:	dec00304 	addi	sp,sp,12
   42ba0:	00442841 	jmpi	44284 <__malloc_unlock>
   42ba4:	f800283a 	ret
   42ba8:	1006d27a 	srli	r3,r2,9
   42bac:	01000104 	movi	r4,4
   42bb0:	20c04036 	bltu	r4,r3,42cb4 <_free_r+0x244>
   42bb4:	1006d1ba 	srli	r3,r2,6
   42bb8:	19400e04 	addi	r5,r3,56
   42bbc:	2947883a 	add	r3,r5,r5
   42bc0:	18c7883a 	add	r3,r3,r3
   42bc4:	18c7883a 	add	r3,r3,r3
   42bc8:	1a49883a 	add	r4,r3,r9
   42bcc:	20c00217 	ldw	r3,8(r4)
   42bd0:	01c00174 	movhi	r7,5
   42bd4:	39fe3004 	addi	r7,r7,-1856
   42bd8:	19003b26 	beq	r3,r4,42cc8 <_free_r+0x258>
   42bdc:	01ffff04 	movi	r7,-4
   42be0:	19400117 	ldw	r5,4(r3)
   42be4:	29ca703a 	and	r5,r5,r7
   42be8:	1140022e 	bgeu	r2,r5,42bf4 <_free_r+0x184>
   42bec:	18c00217 	ldw	r3,8(r3)
   42bf0:	20fffb1e 	bne	r4,r3,42be0 <__alt_data_end+0xfffcd080>
   42bf4:	18800317 	ldw	r2,12(r3)
   42bf8:	30800315 	stw	r2,12(r6)
   42bfc:	30c00215 	stw	r3,8(r6)
   42c00:	11800215 	stw	r6,8(r2)
   42c04:	19800315 	stw	r6,12(r3)
   42c08:	003fe006 	br	42b8c <__alt_data_end+0xfffcd02c>
   42c0c:	2100004c 	andi	r4,r4,1
   42c10:	1885883a 	add	r2,r3,r2
   42c14:	2000071e 	bne	r4,zero,42c34 <_free_r+0x1c4>
   42c18:	817ffe17 	ldw	r5,-8(r16)
   42c1c:	314dc83a 	sub	r6,r6,r5
   42c20:	30c00317 	ldw	r3,12(r6)
   42c24:	31000217 	ldw	r4,8(r6)
   42c28:	1145883a 	add	r2,r2,r5
   42c2c:	20c00315 	stw	r3,12(r4)
   42c30:	19000215 	stw	r4,8(r3)
   42c34:	10c00054 	ori	r3,r2,1
   42c38:	30c00115 	stw	r3,4(r6)
   42c3c:	00c00174 	movhi	r3,5
   42c40:	18c3ee04 	addi	r3,r3,4024
   42c44:	18c00017 	ldw	r3,0(r3)
   42c48:	49800215 	stw	r6,8(r9)
   42c4c:	10ffcf36 	bltu	r2,r3,42b8c <__alt_data_end+0xfffcd02c>
   42c50:	00800174 	movhi	r2,5
   42c54:	108b0b04 	addi	r2,r2,11308
   42c58:	11400017 	ldw	r5,0(r2)
   42c5c:	8809883a 	mov	r4,r17
   42c60:	004294c0 	call	4294c <_malloc_trim_r>
   42c64:	003fc906 	br	42b8c <__alt_data_end+0xfffcd02c>
   42c68:	28c9883a 	add	r4,r5,r3
   42c6c:	21000117 	ldw	r4,4(r4)
   42c70:	2100004c 	andi	r4,r4,1
   42c74:	20000a1e 	bne	r4,zero,42ca0 <_free_r+0x230>
   42c78:	29000317 	ldw	r4,12(r5)
   42c7c:	29400217 	ldw	r5,8(r5)
   42c80:	10c5883a 	add	r2,r2,r3
   42c84:	10c00054 	ori	r3,r2,1
   42c88:	29000315 	stw	r4,12(r5)
   42c8c:	21400215 	stw	r5,8(r4)
   42c90:	30c00115 	stw	r3,4(r6)
   42c94:	308d883a 	add	r6,r6,r2
   42c98:	30800015 	stw	r2,0(r6)
   42c9c:	003fbb06 	br	42b8c <__alt_data_end+0xfffcd02c>
   42ca0:	10c00054 	ori	r3,r2,1
   42ca4:	30c00115 	stw	r3,4(r6)
   42ca8:	308d883a 	add	r6,r6,r2
   42cac:	30800015 	stw	r2,0(r6)
   42cb0:	003fb606 	br	42b8c <__alt_data_end+0xfffcd02c>
   42cb4:	01000504 	movi	r4,20
   42cb8:	20c01436 	bltu	r4,r3,42d0c <_free_r+0x29c>
   42cbc:	194016c4 	addi	r5,r3,91
   42cc0:	2947883a 	add	r3,r5,r5
   42cc4:	003fbe06 	br	42bc0 <__alt_data_end+0xfffcd060>
   42cc8:	280bd0ba 	srai	r5,r5,2
   42ccc:	00800044 	movi	r2,1
   42cd0:	39000117 	ldw	r4,4(r7)
   42cd4:	114a983a 	sll	r5,r2,r5
   42cd8:	1805883a 	mov	r2,r3
   42cdc:	2908b03a 	or	r4,r5,r4
   42ce0:	39000115 	stw	r4,4(r7)
   42ce4:	003fc406 	br	42bf8 <__alt_data_end+0xfffcd098>
   42ce8:	49800515 	stw	r6,20(r9)
   42cec:	49800415 	stw	r6,16(r9)
   42cf0:	10c00054 	ori	r3,r2,1
   42cf4:	31000315 	stw	r4,12(r6)
   42cf8:	31000215 	stw	r4,8(r6)
   42cfc:	30c00115 	stw	r3,4(r6)
   42d00:	308d883a 	add	r6,r6,r2
   42d04:	30800015 	stw	r2,0(r6)
   42d08:	003fa006 	br	42b8c <__alt_data_end+0xfffcd02c>
   42d0c:	01001504 	movi	r4,84
   42d10:	20c00436 	bltu	r4,r3,42d24 <_free_r+0x2b4>
   42d14:	1006d33a 	srli	r3,r2,12
   42d18:	19401b84 	addi	r5,r3,110
   42d1c:	2947883a 	add	r3,r5,r5
   42d20:	003fa706 	br	42bc0 <__alt_data_end+0xfffcd060>
   42d24:	01005504 	movi	r4,340
   42d28:	20c00436 	bltu	r4,r3,42d3c <_free_r+0x2cc>
   42d2c:	1006d3fa 	srli	r3,r2,15
   42d30:	19401dc4 	addi	r5,r3,119
   42d34:	2947883a 	add	r3,r5,r5
   42d38:	003fa106 	br	42bc0 <__alt_data_end+0xfffcd060>
   42d3c:	01015504 	movi	r4,1364
   42d40:	20c00436 	bltu	r4,r3,42d54 <_free_r+0x2e4>
   42d44:	1006d4ba 	srli	r3,r2,18
   42d48:	19401f04 	addi	r5,r3,124
   42d4c:	2947883a 	add	r3,r5,r5
   42d50:	003f9b06 	br	42bc0 <__alt_data_end+0xfffcd060>
   42d54:	00c03f04 	movi	r3,252
   42d58:	01401f84 	movi	r5,126
   42d5c:	003f9806 	br	42bc0 <__alt_data_end+0xfffcd060>

00042d60 <_fwalk>:
   42d60:	defff804 	addi	sp,sp,-32
   42d64:	dd400515 	stw	r21,20(sp)
   42d68:	2540b804 	addi	r21,r4,736
   42d6c:	dd800615 	stw	r22,24(sp)
   42d70:	dd000415 	stw	r20,16(sp)
   42d74:	dfc00715 	stw	ra,28(sp)
   42d78:	dcc00315 	stw	r19,12(sp)
   42d7c:	dc800215 	stw	r18,8(sp)
   42d80:	dc400115 	stw	r17,4(sp)
   42d84:	dc000015 	stw	r16,0(sp)
   42d88:	2829883a 	mov	r20,r5
   42d8c:	002d883a 	mov	r22,zero
   42d90:	004290c0 	call	4290c <__sfp_lock_acquire>
   42d94:	a8001426 	beq	r21,zero,42de8 <_fwalk+0x88>
   42d98:	04ffffc4 	movi	r19,-1
   42d9c:	ac400117 	ldw	r17,4(r21)
   42da0:	ac800217 	ldw	r18,8(r21)
   42da4:	8c7fffc4 	addi	r17,r17,-1
   42da8:	88000d16 	blt	r17,zero,42de0 <_fwalk+0x80>
   42dac:	94000304 	addi	r16,r18,12
   42db0:	94800384 	addi	r18,r18,14
   42db4:	80c0000f 	ldh	r3,0(r16)
   42db8:	8c7fffc4 	addi	r17,r17,-1
   42dbc:	813ffd04 	addi	r4,r16,-12
   42dc0:	18000426 	beq	r3,zero,42dd4 <_fwalk+0x74>
   42dc4:	90c0000f 	ldh	r3,0(r18)
   42dc8:	1cc00226 	beq	r3,r19,42dd4 <_fwalk+0x74>
   42dcc:	a03ee83a 	callr	r20
   42dd0:	b0acb03a 	or	r22,r22,r2
   42dd4:	84001a04 	addi	r16,r16,104
   42dd8:	94801a04 	addi	r18,r18,104
   42ddc:	8cfff51e 	bne	r17,r19,42db4 <__alt_data_end+0xfffcd254>
   42de0:	ad400017 	ldw	r21,0(r21)
   42de4:	a83fed1e 	bne	r21,zero,42d9c <__alt_data_end+0xfffcd23c>
   42de8:	00429100 	call	42910 <__sfp_lock_release>
   42dec:	b005883a 	mov	r2,r22
   42df0:	dfc00717 	ldw	ra,28(sp)
   42df4:	dd800617 	ldw	r22,24(sp)
   42df8:	dd400517 	ldw	r21,20(sp)
   42dfc:	dd000417 	ldw	r20,16(sp)
   42e00:	dcc00317 	ldw	r19,12(sp)
   42e04:	dc800217 	ldw	r18,8(sp)
   42e08:	dc400117 	ldw	r17,4(sp)
   42e0c:	dc000017 	ldw	r16,0(sp)
   42e10:	dec00804 	addi	sp,sp,32
   42e14:	f800283a 	ret

00042e18 <_fwalk_reent>:
   42e18:	defff804 	addi	sp,sp,-32
   42e1c:	dd400515 	stw	r21,20(sp)
   42e20:	2540b804 	addi	r21,r4,736
   42e24:	dd800615 	stw	r22,24(sp)
   42e28:	dd000415 	stw	r20,16(sp)
   42e2c:	dcc00315 	stw	r19,12(sp)
   42e30:	dfc00715 	stw	ra,28(sp)
   42e34:	dc800215 	stw	r18,8(sp)
   42e38:	dc400115 	stw	r17,4(sp)
   42e3c:	dc000015 	stw	r16,0(sp)
   42e40:	2027883a 	mov	r19,r4
   42e44:	2829883a 	mov	r20,r5
   42e48:	002d883a 	mov	r22,zero
   42e4c:	004290c0 	call	4290c <__sfp_lock_acquire>
   42e50:	a8001326 	beq	r21,zero,42ea0 <_fwalk_reent+0x88>
   42e54:	04bfffc4 	movi	r18,-1
   42e58:	ac400117 	ldw	r17,4(r21)
   42e5c:	ac000217 	ldw	r16,8(r21)
   42e60:	8c7fffc4 	addi	r17,r17,-1
   42e64:	88000c16 	blt	r17,zero,42e98 <_fwalk_reent+0x80>
   42e68:	84000304 	addi	r16,r16,12
   42e6c:	80c0000f 	ldh	r3,0(r16)
   42e70:	8c7fffc4 	addi	r17,r17,-1
   42e74:	817ffd04 	addi	r5,r16,-12
   42e78:	18000526 	beq	r3,zero,42e90 <_fwalk_reent+0x78>
   42e7c:	80c0008f 	ldh	r3,2(r16)
   42e80:	9809883a 	mov	r4,r19
   42e84:	1c800226 	beq	r3,r18,42e90 <_fwalk_reent+0x78>
   42e88:	a03ee83a 	callr	r20
   42e8c:	b0acb03a 	or	r22,r22,r2
   42e90:	84001a04 	addi	r16,r16,104
   42e94:	8cbff51e 	bne	r17,r18,42e6c <__alt_data_end+0xfffcd30c>
   42e98:	ad400017 	ldw	r21,0(r21)
   42e9c:	a83fee1e 	bne	r21,zero,42e58 <__alt_data_end+0xfffcd2f8>
   42ea0:	00429100 	call	42910 <__sfp_lock_release>
   42ea4:	b005883a 	mov	r2,r22
   42ea8:	dfc00717 	ldw	ra,28(sp)
   42eac:	dd800617 	ldw	r22,24(sp)
   42eb0:	dd400517 	ldw	r21,20(sp)
   42eb4:	dd000417 	ldw	r20,16(sp)
   42eb8:	dcc00317 	ldw	r19,12(sp)
   42ebc:	dc800217 	ldw	r18,8(sp)
   42ec0:	dc400117 	ldw	r17,4(sp)
   42ec4:	dc000017 	ldw	r16,0(sp)
   42ec8:	dec00804 	addi	sp,sp,32
   42ecc:	f800283a 	ret

00042ed0 <__smakebuf_r>:
   42ed0:	2880030b 	ldhu	r2,12(r5)
   42ed4:	10c0008c 	andi	r3,r2,2
   42ed8:	1800401e 	bne	r3,zero,42fdc <__smakebuf_r+0x10c>
   42edc:	deffec04 	addi	sp,sp,-80
   42ee0:	dc000f15 	stw	r16,60(sp)
   42ee4:	2821883a 	mov	r16,r5
   42ee8:	2940038f 	ldh	r5,14(r5)
   42eec:	dc401015 	stw	r17,64(sp)
   42ef0:	dfc01315 	stw	ra,76(sp)
   42ef4:	dcc01215 	stw	r19,72(sp)
   42ef8:	dc801115 	stw	r18,68(sp)
   42efc:	2023883a 	mov	r17,r4
   42f00:	28001b16 	blt	r5,zero,42f70 <__smakebuf_r+0xa0>
   42f04:	d80d883a 	mov	r6,sp
   42f08:	00434ac0 	call	434ac <_fstat_r>
   42f0c:	10001716 	blt	r2,zero,42f6c <__smakebuf_r+0x9c>
   42f10:	d8800117 	ldw	r2,4(sp)
   42f14:	00e00014 	movui	r3,32768
   42f18:	10bc000c 	andi	r2,r2,61440
   42f1c:	10c03726 	beq	r2,r3,42ffc <__smakebuf_r+0x12c>
   42f20:	80c0030b 	ldhu	r3,12(r16)
   42f24:	18c20014 	ori	r3,r3,2048
   42f28:	80c0030d 	sth	r3,12(r16)
   42f2c:	00c80004 	movi	r3,8192
   42f30:	10c03c1e 	bne	r2,r3,43024 <__smakebuf_r+0x154>
   42f34:	8140038f 	ldh	r5,14(r16)
   42f38:	8809883a 	mov	r4,r17
   42f3c:	00435040 	call	43504 <_isatty_r>
   42f40:	10004e26 	beq	r2,zero,4307c <__smakebuf_r+0x1ac>
   42f44:	8080030b 	ldhu	r2,12(r16)
   42f48:	04c00044 	movi	r19,1
   42f4c:	80c010c4 	addi	r3,r16,67
   42f50:	14c4b03a 	or	r2,r2,r19
   42f54:	8080030d 	sth	r2,12(r16)
   42f58:	80c00015 	stw	r3,0(r16)
   42f5c:	80c00415 	stw	r3,16(r16)
   42f60:	84c00515 	stw	r19,20(r16)
   42f64:	04810004 	movi	r18,1024
   42f68:	00000706 	br	42f88 <__smakebuf_r+0xb8>
   42f6c:	8080030b 	ldhu	r2,12(r16)
   42f70:	10c0200c 	andi	r3,r2,128
   42f74:	18001f1e 	bne	r3,zero,42ff4 <__smakebuf_r+0x124>
   42f78:	04810004 	movi	r18,1024
   42f7c:	10820014 	ori	r2,r2,2048
   42f80:	8080030d 	sth	r2,12(r16)
   42f84:	0027883a 	mov	r19,zero
   42f88:	8809883a 	mov	r4,r17
   42f8c:	900b883a 	mov	r5,r18
   42f90:	00410f80 	call	410f8 <_malloc_r>
   42f94:	10002e26 	beq	r2,zero,43050 <__smakebuf_r+0x180>
   42f98:	80c0030b 	ldhu	r3,12(r16)
   42f9c:	01000134 	movhi	r4,4
   42fa0:	21096a04 	addi	r4,r4,9640
   42fa4:	89000f15 	stw	r4,60(r17)
   42fa8:	18c02014 	ori	r3,r3,128
   42fac:	80c0030d 	sth	r3,12(r16)
   42fb0:	80800015 	stw	r2,0(r16)
   42fb4:	80800415 	stw	r2,16(r16)
   42fb8:	84800515 	stw	r18,20(r16)
   42fbc:	98001c1e 	bne	r19,zero,43030 <__smakebuf_r+0x160>
   42fc0:	dfc01317 	ldw	ra,76(sp)
   42fc4:	dcc01217 	ldw	r19,72(sp)
   42fc8:	dc801117 	ldw	r18,68(sp)
   42fcc:	dc401017 	ldw	r17,64(sp)
   42fd0:	dc000f17 	ldw	r16,60(sp)
   42fd4:	dec01404 	addi	sp,sp,80
   42fd8:	f800283a 	ret
   42fdc:	288010c4 	addi	r2,r5,67
   42fe0:	28800015 	stw	r2,0(r5)
   42fe4:	28800415 	stw	r2,16(r5)
   42fe8:	00800044 	movi	r2,1
   42fec:	28800515 	stw	r2,20(r5)
   42ff0:	f800283a 	ret
   42ff4:	04801004 	movi	r18,64
   42ff8:	003fe006 	br	42f7c <__alt_data_end+0xfffcd41c>
   42ffc:	81000a17 	ldw	r4,40(r16)
   43000:	00c00134 	movhi	r3,4
   43004:	18cca104 	addi	r3,r3,12932
   43008:	20ffc51e 	bne	r4,r3,42f20 <__alt_data_end+0xfffcd3c0>
   4300c:	80c0030b 	ldhu	r3,12(r16)
   43010:	01010004 	movi	r4,1024
   43014:	81001315 	stw	r4,76(r16)
   43018:	1906b03a 	or	r3,r3,r4
   4301c:	80c0030d 	sth	r3,12(r16)
   43020:	003fc206 	br	42f2c <__alt_data_end+0xfffcd3cc>
   43024:	0027883a 	mov	r19,zero
   43028:	04810004 	movi	r18,1024
   4302c:	003fd606 	br	42f88 <__alt_data_end+0xfffcd428>
   43030:	8140038f 	ldh	r5,14(r16)
   43034:	8809883a 	mov	r4,r17
   43038:	00435040 	call	43504 <_isatty_r>
   4303c:	103fe026 	beq	r2,zero,42fc0 <__alt_data_end+0xfffcd460>
   43040:	8080030b 	ldhu	r2,12(r16)
   43044:	10800054 	ori	r2,r2,1
   43048:	8080030d 	sth	r2,12(r16)
   4304c:	003fdc06 	br	42fc0 <__alt_data_end+0xfffcd460>
   43050:	8080030b 	ldhu	r2,12(r16)
   43054:	10c0800c 	andi	r3,r2,512
   43058:	183fd91e 	bne	r3,zero,42fc0 <__alt_data_end+0xfffcd460>
   4305c:	10800094 	ori	r2,r2,2
   43060:	80c010c4 	addi	r3,r16,67
   43064:	8080030d 	sth	r2,12(r16)
   43068:	00800044 	movi	r2,1
   4306c:	80c00015 	stw	r3,0(r16)
   43070:	80c00415 	stw	r3,16(r16)
   43074:	80800515 	stw	r2,20(r16)
   43078:	003fd106 	br	42fc0 <__alt_data_end+0xfffcd460>
   4307c:	04c00044 	movi	r19,1
   43080:	04810004 	movi	r18,1024
   43084:	003fc006 	br	42f88 <__alt_data_end+0xfffcd428>

00043088 <memset>:
   43088:	20c000cc 	andi	r3,r4,3
   4308c:	2005883a 	mov	r2,r4
   43090:	18004326 	beq	r3,zero,431a0 <memset+0x118>
   43094:	31ffffc4 	addi	r7,r6,-1
   43098:	30004026 	beq	r6,zero,4319c <memset+0x114>
   4309c:	2813883a 	mov	r9,r5
   430a0:	200d883a 	mov	r6,r4
   430a4:	2007883a 	mov	r3,r4
   430a8:	00000406 	br	430bc <memset+0x34>
   430ac:	3a3fffc4 	addi	r8,r7,-1
   430b0:	31800044 	addi	r6,r6,1
   430b4:	38003926 	beq	r7,zero,4319c <memset+0x114>
   430b8:	400f883a 	mov	r7,r8
   430bc:	18c00044 	addi	r3,r3,1
   430c0:	32400005 	stb	r9,0(r6)
   430c4:	1a0000cc 	andi	r8,r3,3
   430c8:	403ff81e 	bne	r8,zero,430ac <__alt_data_end+0xfffcd54c>
   430cc:	010000c4 	movi	r4,3
   430d0:	21c02d2e 	bgeu	r4,r7,43188 <memset+0x100>
   430d4:	29803fcc 	andi	r6,r5,255
   430d8:	3008923a 	slli	r4,r6,8
   430dc:	218cb03a 	or	r6,r4,r6
   430e0:	3008943a 	slli	r4,r6,16
   430e4:	218cb03a 	or	r6,r4,r6
   430e8:	010003c4 	movi	r4,15
   430ec:	21c0182e 	bgeu	r4,r7,43150 <memset+0xc8>
   430f0:	3b3ffc04 	addi	r12,r7,-16
   430f4:	6018d13a 	srli	r12,r12,4
   430f8:	1a000104 	addi	r8,r3,4
   430fc:	1ac00204 	addi	r11,r3,8
   43100:	6008913a 	slli	r4,r12,4
   43104:	1a800304 	addi	r10,r3,12
   43108:	1813883a 	mov	r9,r3
   4310c:	21000504 	addi	r4,r4,20
   43110:	1909883a 	add	r4,r3,r4
   43114:	49800015 	stw	r6,0(r9)
   43118:	41800015 	stw	r6,0(r8)
   4311c:	59800015 	stw	r6,0(r11)
   43120:	51800015 	stw	r6,0(r10)
   43124:	42000404 	addi	r8,r8,16
   43128:	4a400404 	addi	r9,r9,16
   4312c:	5ac00404 	addi	r11,r11,16
   43130:	52800404 	addi	r10,r10,16
   43134:	413ff71e 	bne	r8,r4,43114 <__alt_data_end+0xfffcd5b4>
   43138:	63000044 	addi	r12,r12,1
   4313c:	6018913a 	slli	r12,r12,4
   43140:	39c003cc 	andi	r7,r7,15
   43144:	010000c4 	movi	r4,3
   43148:	1b07883a 	add	r3,r3,r12
   4314c:	21c00e2e 	bgeu	r4,r7,43188 <memset+0x100>
   43150:	1813883a 	mov	r9,r3
   43154:	3811883a 	mov	r8,r7
   43158:	010000c4 	movi	r4,3
   4315c:	49800015 	stw	r6,0(r9)
   43160:	423fff04 	addi	r8,r8,-4
   43164:	4a400104 	addi	r9,r9,4
   43168:	223ffc36 	bltu	r4,r8,4315c <__alt_data_end+0xfffcd5fc>
   4316c:	393fff04 	addi	r4,r7,-4
   43170:	2008d0ba 	srli	r4,r4,2
   43174:	39c000cc 	andi	r7,r7,3
   43178:	21000044 	addi	r4,r4,1
   4317c:	2109883a 	add	r4,r4,r4
   43180:	2109883a 	add	r4,r4,r4
   43184:	1907883a 	add	r3,r3,r4
   43188:	38000426 	beq	r7,zero,4319c <memset+0x114>
   4318c:	19cf883a 	add	r7,r3,r7
   43190:	19400005 	stb	r5,0(r3)
   43194:	18c00044 	addi	r3,r3,1
   43198:	19fffd1e 	bne	r3,r7,43190 <__alt_data_end+0xfffcd630>
   4319c:	f800283a 	ret
   431a0:	2007883a 	mov	r3,r4
   431a4:	300f883a 	mov	r7,r6
   431a8:	003fc806 	br	430cc <__alt_data_end+0xfffcd56c>

000431ac <__sread>:
   431ac:	defffe04 	addi	sp,sp,-8
   431b0:	dc000015 	stw	r16,0(sp)
   431b4:	2821883a 	mov	r16,r5
   431b8:	2940038f 	ldh	r5,14(r5)
   431bc:	dfc00115 	stw	ra,4(sp)
   431c0:	00435b40 	call	435b4 <_read_r>
   431c4:	10000716 	blt	r2,zero,431e4 <__sread+0x38>
   431c8:	80c01417 	ldw	r3,80(r16)
   431cc:	1887883a 	add	r3,r3,r2
   431d0:	80c01415 	stw	r3,80(r16)
   431d4:	dfc00117 	ldw	ra,4(sp)
   431d8:	dc000017 	ldw	r16,0(sp)
   431dc:	dec00204 	addi	sp,sp,8
   431e0:	f800283a 	ret
   431e4:	80c0030b 	ldhu	r3,12(r16)
   431e8:	18fbffcc 	andi	r3,r3,61439
   431ec:	80c0030d 	sth	r3,12(r16)
   431f0:	dfc00117 	ldw	ra,4(sp)
   431f4:	dc000017 	ldw	r16,0(sp)
   431f8:	dec00204 	addi	sp,sp,8
   431fc:	f800283a 	ret

00043200 <__seofread>:
   43200:	0005883a 	mov	r2,zero
   43204:	f800283a 	ret

00043208 <__swrite>:
   43208:	2880030b 	ldhu	r2,12(r5)
   4320c:	defffb04 	addi	sp,sp,-20
   43210:	dcc00315 	stw	r19,12(sp)
   43214:	dc800215 	stw	r18,8(sp)
   43218:	dc400115 	stw	r17,4(sp)
   4321c:	dc000015 	stw	r16,0(sp)
   43220:	dfc00415 	stw	ra,16(sp)
   43224:	10c0400c 	andi	r3,r2,256
   43228:	2821883a 	mov	r16,r5
   4322c:	2027883a 	mov	r19,r4
   43230:	3025883a 	mov	r18,r6
   43234:	3823883a 	mov	r17,r7
   43238:	18000526 	beq	r3,zero,43250 <__swrite+0x48>
   4323c:	2940038f 	ldh	r5,14(r5)
   43240:	000d883a 	mov	r6,zero
   43244:	01c00084 	movi	r7,2
   43248:	00435580 	call	43558 <_lseek_r>
   4324c:	8080030b 	ldhu	r2,12(r16)
   43250:	8140038f 	ldh	r5,14(r16)
   43254:	10bbffcc 	andi	r2,r2,61439
   43258:	9809883a 	mov	r4,r19
   4325c:	900d883a 	mov	r6,r18
   43260:	880f883a 	mov	r7,r17
   43264:	8080030d 	sth	r2,12(r16)
   43268:	dfc00417 	ldw	ra,16(sp)
   4326c:	dcc00317 	ldw	r19,12(sp)
   43270:	dc800217 	ldw	r18,8(sp)
   43274:	dc400117 	ldw	r17,4(sp)
   43278:	dc000017 	ldw	r16,0(sp)
   4327c:	dec00504 	addi	sp,sp,20
   43280:	00432e81 	jmpi	432e8 <_write_r>

00043284 <__sseek>:
   43284:	defffe04 	addi	sp,sp,-8
   43288:	dc000015 	stw	r16,0(sp)
   4328c:	2821883a 	mov	r16,r5
   43290:	2940038f 	ldh	r5,14(r5)
   43294:	dfc00115 	stw	ra,4(sp)
   43298:	00435580 	call	43558 <_lseek_r>
   4329c:	00ffffc4 	movi	r3,-1
   432a0:	10c00826 	beq	r2,r3,432c4 <__sseek+0x40>
   432a4:	80c0030b 	ldhu	r3,12(r16)
   432a8:	80801415 	stw	r2,80(r16)
   432ac:	18c40014 	ori	r3,r3,4096
   432b0:	80c0030d 	sth	r3,12(r16)
   432b4:	dfc00117 	ldw	ra,4(sp)
   432b8:	dc000017 	ldw	r16,0(sp)
   432bc:	dec00204 	addi	sp,sp,8
   432c0:	f800283a 	ret
   432c4:	80c0030b 	ldhu	r3,12(r16)
   432c8:	18fbffcc 	andi	r3,r3,61439
   432cc:	80c0030d 	sth	r3,12(r16)
   432d0:	dfc00117 	ldw	ra,4(sp)
   432d4:	dc000017 	ldw	r16,0(sp)
   432d8:	dec00204 	addi	sp,sp,8
   432dc:	f800283a 	ret

000432e0 <__sclose>:
   432e0:	2940038f 	ldh	r5,14(r5)
   432e4:	00433441 	jmpi	43344 <_close_r>

000432e8 <_write_r>:
   432e8:	defffd04 	addi	sp,sp,-12
   432ec:	dc000015 	stw	r16,0(sp)
   432f0:	04000174 	movhi	r16,5
   432f4:	dc400115 	stw	r17,4(sp)
   432f8:	840b0c04 	addi	r16,r16,11312
   432fc:	2023883a 	mov	r17,r4
   43300:	2809883a 	mov	r4,r5
   43304:	300b883a 	mov	r5,r6
   43308:	380d883a 	mov	r6,r7
   4330c:	dfc00215 	stw	ra,8(sp)
   43310:	80000015 	stw	zero,0(r16)
   43314:	0043f480 	call	43f48 <write>
   43318:	00ffffc4 	movi	r3,-1
   4331c:	10c00526 	beq	r2,r3,43334 <_write_r+0x4c>
   43320:	dfc00217 	ldw	ra,8(sp)
   43324:	dc400117 	ldw	r17,4(sp)
   43328:	dc000017 	ldw	r16,0(sp)
   4332c:	dec00304 	addi	sp,sp,12
   43330:	f800283a 	ret
   43334:	80c00017 	ldw	r3,0(r16)
   43338:	183ff926 	beq	r3,zero,43320 <__alt_data_end+0xfffcd7c0>
   4333c:	88c00015 	stw	r3,0(r17)
   43340:	003ff706 	br	43320 <__alt_data_end+0xfffcd7c0>

00043344 <_close_r>:
   43344:	defffd04 	addi	sp,sp,-12
   43348:	dc000015 	stw	r16,0(sp)
   4334c:	04000174 	movhi	r16,5
   43350:	dc400115 	stw	r17,4(sp)
   43354:	840b0c04 	addi	r16,r16,11312
   43358:	2023883a 	mov	r17,r4
   4335c:	2809883a 	mov	r4,r5
   43360:	dfc00215 	stw	ra,8(sp)
   43364:	80000015 	stw	zero,0(r16)
   43368:	00436880 	call	43688 <close>
   4336c:	00ffffc4 	movi	r3,-1
   43370:	10c00526 	beq	r2,r3,43388 <_close_r+0x44>
   43374:	dfc00217 	ldw	ra,8(sp)
   43378:	dc400117 	ldw	r17,4(sp)
   4337c:	dc000017 	ldw	r16,0(sp)
   43380:	dec00304 	addi	sp,sp,12
   43384:	f800283a 	ret
   43388:	80c00017 	ldw	r3,0(r16)
   4338c:	183ff926 	beq	r3,zero,43374 <__alt_data_end+0xfffcd814>
   43390:	88c00015 	stw	r3,0(r17)
   43394:	003ff706 	br	43374 <__alt_data_end+0xfffcd814>

00043398 <_fclose_r>:
   43398:	28003226 	beq	r5,zero,43464 <_fclose_r+0xcc>
   4339c:	defffc04 	addi	sp,sp,-16
   433a0:	dc400115 	stw	r17,4(sp)
   433a4:	2023883a 	mov	r17,r4
   433a8:	dc000015 	stw	r16,0(sp)
   433ac:	dfc00315 	stw	ra,12(sp)
   433b0:	dc800215 	stw	r18,8(sp)
   433b4:	2821883a 	mov	r16,r5
   433b8:	004290c0 	call	4290c <__sfp_lock_acquire>
   433bc:	88000226 	beq	r17,zero,433c8 <_fclose_r+0x30>
   433c0:	88800e17 	ldw	r2,56(r17)
   433c4:	10002926 	beq	r2,zero,4346c <_fclose_r+0xd4>
   433c8:	8080030f 	ldh	r2,12(r16)
   433cc:	10002226 	beq	r2,zero,43458 <_fclose_r+0xc0>
   433d0:	8809883a 	mov	r4,r17
   433d4:	800b883a 	mov	r5,r16
   433d8:	00423400 	call	42340 <_fflush_r>
   433dc:	1025883a 	mov	r18,r2
   433e0:	80800b17 	ldw	r2,44(r16)
   433e4:	10000426 	beq	r2,zero,433f8 <_fclose_r+0x60>
   433e8:	81400717 	ldw	r5,28(r16)
   433ec:	8809883a 	mov	r4,r17
   433f0:	103ee83a 	callr	r2
   433f4:	10002616 	blt	r2,zero,43490 <_fclose_r+0xf8>
   433f8:	8080030b 	ldhu	r2,12(r16)
   433fc:	1080200c 	andi	r2,r2,128
   43400:	10001f1e 	bne	r2,zero,43480 <_fclose_r+0xe8>
   43404:	81400c17 	ldw	r5,48(r16)
   43408:	28000526 	beq	r5,zero,43420 <_fclose_r+0x88>
   4340c:	80801004 	addi	r2,r16,64
   43410:	28800226 	beq	r5,r2,4341c <_fclose_r+0x84>
   43414:	8809883a 	mov	r4,r17
   43418:	0042a700 	call	42a70 <_free_r>
   4341c:	80000c15 	stw	zero,48(r16)
   43420:	81401117 	ldw	r5,68(r16)
   43424:	28000326 	beq	r5,zero,43434 <_fclose_r+0x9c>
   43428:	8809883a 	mov	r4,r17
   4342c:	0042a700 	call	42a70 <_free_r>
   43430:	80001115 	stw	zero,68(r16)
   43434:	8000030d 	sth	zero,12(r16)
   43438:	00429100 	call	42910 <__sfp_lock_release>
   4343c:	9005883a 	mov	r2,r18
   43440:	dfc00317 	ldw	ra,12(sp)
   43444:	dc800217 	ldw	r18,8(sp)
   43448:	dc400117 	ldw	r17,4(sp)
   4344c:	dc000017 	ldw	r16,0(sp)
   43450:	dec00404 	addi	sp,sp,16
   43454:	f800283a 	ret
   43458:	00429100 	call	42910 <__sfp_lock_release>
   4345c:	0005883a 	mov	r2,zero
   43460:	003ff706 	br	43440 <__alt_data_end+0xfffcd8e0>
   43464:	0005883a 	mov	r2,zero
   43468:	f800283a 	ret
   4346c:	8809883a 	mov	r4,r17
   43470:	00428fc0 	call	428fc <__sinit>
   43474:	8080030f 	ldh	r2,12(r16)
   43478:	103fd51e 	bne	r2,zero,433d0 <__alt_data_end+0xfffcd870>
   4347c:	003ff606 	br	43458 <__alt_data_end+0xfffcd8f8>
   43480:	81400417 	ldw	r5,16(r16)
   43484:	8809883a 	mov	r4,r17
   43488:	0042a700 	call	42a70 <_free_r>
   4348c:	003fdd06 	br	43404 <__alt_data_end+0xfffcd8a4>
   43490:	04bfffc4 	movi	r18,-1
   43494:	003fd806 	br	433f8 <__alt_data_end+0xfffcd898>

00043498 <fclose>:
   43498:	00800174 	movhi	r2,5
   4349c:	1083ec04 	addi	r2,r2,4016
   434a0:	200b883a 	mov	r5,r4
   434a4:	11000017 	ldw	r4,0(r2)
   434a8:	00433981 	jmpi	43398 <_fclose_r>

000434ac <_fstat_r>:
   434ac:	defffd04 	addi	sp,sp,-12
   434b0:	dc000015 	stw	r16,0(sp)
   434b4:	04000174 	movhi	r16,5
   434b8:	dc400115 	stw	r17,4(sp)
   434bc:	840b0c04 	addi	r16,r16,11312
   434c0:	2023883a 	mov	r17,r4
   434c4:	2809883a 	mov	r4,r5
   434c8:	300b883a 	mov	r5,r6
   434cc:	dfc00215 	stw	ra,8(sp)
   434d0:	80000015 	stw	zero,0(r16)
   434d4:	00437dc0 	call	437dc <fstat>
   434d8:	00ffffc4 	movi	r3,-1
   434dc:	10c00526 	beq	r2,r3,434f4 <_fstat_r+0x48>
   434e0:	dfc00217 	ldw	ra,8(sp)
   434e4:	dc400117 	ldw	r17,4(sp)
   434e8:	dc000017 	ldw	r16,0(sp)
   434ec:	dec00304 	addi	sp,sp,12
   434f0:	f800283a 	ret
   434f4:	80c00017 	ldw	r3,0(r16)
   434f8:	183ff926 	beq	r3,zero,434e0 <__alt_data_end+0xfffcd980>
   434fc:	88c00015 	stw	r3,0(r17)
   43500:	003ff706 	br	434e0 <__alt_data_end+0xfffcd980>

00043504 <_isatty_r>:
   43504:	defffd04 	addi	sp,sp,-12
   43508:	dc000015 	stw	r16,0(sp)
   4350c:	04000174 	movhi	r16,5
   43510:	dc400115 	stw	r17,4(sp)
   43514:	840b0c04 	addi	r16,r16,11312
   43518:	2023883a 	mov	r17,r4
   4351c:	2809883a 	mov	r4,r5
   43520:	dfc00215 	stw	ra,8(sp)
   43524:	80000015 	stw	zero,0(r16)
   43528:	00438e40 	call	438e4 <isatty>
   4352c:	00ffffc4 	movi	r3,-1
   43530:	10c00526 	beq	r2,r3,43548 <_isatty_r+0x44>
   43534:	dfc00217 	ldw	ra,8(sp)
   43538:	dc400117 	ldw	r17,4(sp)
   4353c:	dc000017 	ldw	r16,0(sp)
   43540:	dec00304 	addi	sp,sp,12
   43544:	f800283a 	ret
   43548:	80c00017 	ldw	r3,0(r16)
   4354c:	183ff926 	beq	r3,zero,43534 <__alt_data_end+0xfffcd9d4>
   43550:	88c00015 	stw	r3,0(r17)
   43554:	003ff706 	br	43534 <__alt_data_end+0xfffcd9d4>

00043558 <_lseek_r>:
   43558:	defffd04 	addi	sp,sp,-12
   4355c:	dc000015 	stw	r16,0(sp)
   43560:	04000174 	movhi	r16,5
   43564:	dc400115 	stw	r17,4(sp)
   43568:	840b0c04 	addi	r16,r16,11312
   4356c:	2023883a 	mov	r17,r4
   43570:	2809883a 	mov	r4,r5
   43574:	300b883a 	mov	r5,r6
   43578:	380d883a 	mov	r6,r7
   4357c:	dfc00215 	stw	ra,8(sp)
   43580:	80000015 	stw	zero,0(r16)
   43584:	0043ac40 	call	43ac4 <lseek>
   43588:	00ffffc4 	movi	r3,-1
   4358c:	10c00526 	beq	r2,r3,435a4 <_lseek_r+0x4c>
   43590:	dfc00217 	ldw	ra,8(sp)
   43594:	dc400117 	ldw	r17,4(sp)
   43598:	dc000017 	ldw	r16,0(sp)
   4359c:	dec00304 	addi	sp,sp,12
   435a0:	f800283a 	ret
   435a4:	80c00017 	ldw	r3,0(r16)
   435a8:	183ff926 	beq	r3,zero,43590 <__alt_data_end+0xfffcda30>
   435ac:	88c00015 	stw	r3,0(r17)
   435b0:	003ff706 	br	43590 <__alt_data_end+0xfffcda30>

000435b4 <_read_r>:
   435b4:	defffd04 	addi	sp,sp,-12
   435b8:	dc000015 	stw	r16,0(sp)
   435bc:	04000174 	movhi	r16,5
   435c0:	dc400115 	stw	r17,4(sp)
   435c4:	840b0c04 	addi	r16,r16,11312
   435c8:	2023883a 	mov	r17,r4
   435cc:	2809883a 	mov	r4,r5
   435d0:	300b883a 	mov	r5,r6
   435d4:	380d883a 	mov	r6,r7
   435d8:	dfc00215 	stw	ra,8(sp)
   435dc:	80000015 	stw	zero,0(r16)
   435e0:	0043cc40 	call	43cc4 <read>
   435e4:	00ffffc4 	movi	r3,-1
   435e8:	10c00526 	beq	r2,r3,43600 <_read_r+0x4c>
   435ec:	dfc00217 	ldw	ra,8(sp)
   435f0:	dc400117 	ldw	r17,4(sp)
   435f4:	dc000017 	ldw	r16,0(sp)
   435f8:	dec00304 	addi	sp,sp,12
   435fc:	f800283a 	ret
   43600:	80c00017 	ldw	r3,0(r16)
   43604:	183ff926 	beq	r3,zero,435ec <__alt_data_end+0xfffcda8c>
   43608:	88c00015 	stw	r3,0(r17)
   4360c:	003ff706 	br	435ec <__alt_data_end+0xfffcda8c>

00043610 <__mulsi3>:
   43610:	0005883a 	mov	r2,zero
   43614:	20000726 	beq	r4,zero,43634 <__mulsi3+0x24>
   43618:	20c0004c 	andi	r3,r4,1
   4361c:	2008d07a 	srli	r4,r4,1
   43620:	18000126 	beq	r3,zero,43628 <__mulsi3+0x18>
   43624:	1145883a 	add	r2,r2,r5
   43628:	294b883a 	add	r5,r5,r5
   4362c:	203ffa1e 	bne	r4,zero,43618 <__alt_data_end+0xfffcdab8>
   43630:	f800283a 	ret
   43634:	f800283a 	ret

00043638 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43638:	defffe04 	addi	sp,sp,-8
   4363c:	dfc00115 	stw	ra,4(sp)
   43640:	df000015 	stw	fp,0(sp)
   43644:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43648:	00800174 	movhi	r2,5
   4364c:	1083f404 	addi	r2,r2,4048
   43650:	10800017 	ldw	r2,0(r2)
   43654:	10000526 	beq	r2,zero,4366c <alt_get_errno+0x34>
   43658:	00800174 	movhi	r2,5
   4365c:	1083f404 	addi	r2,r2,4048
   43660:	10800017 	ldw	r2,0(r2)
   43664:	103ee83a 	callr	r2
   43668:	00000206 	br	43674 <alt_get_errno+0x3c>
   4366c:	00800174 	movhi	r2,5
   43670:	108b0c04 	addi	r2,r2,11312
}
   43674:	e037883a 	mov	sp,fp
   43678:	dfc00117 	ldw	ra,4(sp)
   4367c:	df000017 	ldw	fp,0(sp)
   43680:	dec00204 	addi	sp,sp,8
   43684:	f800283a 	ret

00043688 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   43688:	defffb04 	addi	sp,sp,-20
   4368c:	dfc00415 	stw	ra,16(sp)
   43690:	df000315 	stw	fp,12(sp)
   43694:	df000304 	addi	fp,sp,12
   43698:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4369c:	e0bfff17 	ldw	r2,-4(fp)
   436a0:	10000816 	blt	r2,zero,436c4 <close+0x3c>
   436a4:	e13fff17 	ldw	r4,-4(fp)
   436a8:	01400304 	movi	r5,12
   436ac:	00436100 	call	43610 <__mulsi3>
   436b0:	1007883a 	mov	r3,r2
   436b4:	00800174 	movhi	r2,5
   436b8:	10bf3c04 	addi	r2,r2,-784
   436bc:	1885883a 	add	r2,r3,r2
   436c0:	00000106 	br	436c8 <close+0x40>
   436c4:	0005883a 	mov	r2,zero
   436c8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   436cc:	e0bffd17 	ldw	r2,-12(fp)
   436d0:	10001926 	beq	r2,zero,43738 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   436d4:	e0bffd17 	ldw	r2,-12(fp)
   436d8:	10800017 	ldw	r2,0(r2)
   436dc:	10800417 	ldw	r2,16(r2)
   436e0:	10000626 	beq	r2,zero,436fc <close+0x74>
   436e4:	e0bffd17 	ldw	r2,-12(fp)
   436e8:	10800017 	ldw	r2,0(r2)
   436ec:	10800417 	ldw	r2,16(r2)
   436f0:	e13ffd17 	ldw	r4,-12(fp)
   436f4:	103ee83a 	callr	r2
   436f8:	00000106 	br	43700 <close+0x78>
   436fc:	0005883a 	mov	r2,zero
   43700:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43704:	e13fff17 	ldw	r4,-4(fp)
   43708:	0043dc80 	call	43dc8 <alt_release_fd>
    if (rval < 0)
   4370c:	e0bffe17 	ldw	r2,-8(fp)
   43710:	1000070e 	bge	r2,zero,43730 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   43714:	00436380 	call	43638 <alt_get_errno>
   43718:	1007883a 	mov	r3,r2
   4371c:	e0bffe17 	ldw	r2,-8(fp)
   43720:	0085c83a 	sub	r2,zero,r2
   43724:	18800015 	stw	r2,0(r3)
      return -1;
   43728:	00bfffc4 	movi	r2,-1
   4372c:	00000706 	br	4374c <close+0xc4>
    }
    return 0;
   43730:	0005883a 	mov	r2,zero
   43734:	00000506 	br	4374c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43738:	00436380 	call	43638 <alt_get_errno>
   4373c:	1007883a 	mov	r3,r2
   43740:	00801444 	movi	r2,81
   43744:	18800015 	stw	r2,0(r3)
    return -1;
   43748:	00bfffc4 	movi	r2,-1
  }
}
   4374c:	e037883a 	mov	sp,fp
   43750:	dfc00117 	ldw	ra,4(sp)
   43754:	df000017 	ldw	fp,0(sp)
   43758:	dec00204 	addi	sp,sp,8
   4375c:	f800283a 	ret

00043760 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   43760:	defffc04 	addi	sp,sp,-16
   43764:	df000315 	stw	fp,12(sp)
   43768:	df000304 	addi	fp,sp,12
   4376c:	e13ffd15 	stw	r4,-12(fp)
   43770:	e17ffe15 	stw	r5,-8(fp)
   43774:	e1bfff15 	stw	r6,-4(fp)
  return len;
   43778:	e0bfff17 	ldw	r2,-4(fp)
}
   4377c:	e037883a 	mov	sp,fp
   43780:	df000017 	ldw	fp,0(sp)
   43784:	dec00104 	addi	sp,sp,4
   43788:	f800283a 	ret

0004378c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4378c:	defffe04 	addi	sp,sp,-8
   43790:	dfc00115 	stw	ra,4(sp)
   43794:	df000015 	stw	fp,0(sp)
   43798:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4379c:	00800174 	movhi	r2,5
   437a0:	1083f404 	addi	r2,r2,4048
   437a4:	10800017 	ldw	r2,0(r2)
   437a8:	10000526 	beq	r2,zero,437c0 <alt_get_errno+0x34>
   437ac:	00800174 	movhi	r2,5
   437b0:	1083f404 	addi	r2,r2,4048
   437b4:	10800017 	ldw	r2,0(r2)
   437b8:	103ee83a 	callr	r2
   437bc:	00000206 	br	437c8 <alt_get_errno+0x3c>
   437c0:	00800174 	movhi	r2,5
   437c4:	108b0c04 	addi	r2,r2,11312
}
   437c8:	e037883a 	mov	sp,fp
   437cc:	dfc00117 	ldw	ra,4(sp)
   437d0:	df000017 	ldw	fp,0(sp)
   437d4:	dec00204 	addi	sp,sp,8
   437d8:	f800283a 	ret

000437dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   437dc:	defffb04 	addi	sp,sp,-20
   437e0:	dfc00415 	stw	ra,16(sp)
   437e4:	df000315 	stw	fp,12(sp)
   437e8:	df000304 	addi	fp,sp,12
   437ec:	e13ffe15 	stw	r4,-8(fp)
   437f0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   437f4:	e0bffe17 	ldw	r2,-8(fp)
   437f8:	10000816 	blt	r2,zero,4381c <fstat+0x40>
   437fc:	e13ffe17 	ldw	r4,-8(fp)
   43800:	01400304 	movi	r5,12
   43804:	00436100 	call	43610 <__mulsi3>
   43808:	1007883a 	mov	r3,r2
   4380c:	00800174 	movhi	r2,5
   43810:	10bf3c04 	addi	r2,r2,-784
   43814:	1885883a 	add	r2,r3,r2
   43818:	00000106 	br	43820 <fstat+0x44>
   4381c:	0005883a 	mov	r2,zero
   43820:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   43824:	e0bffd17 	ldw	r2,-12(fp)
   43828:	10001026 	beq	r2,zero,4386c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4382c:	e0bffd17 	ldw	r2,-12(fp)
   43830:	10800017 	ldw	r2,0(r2)
   43834:	10800817 	ldw	r2,32(r2)
   43838:	10000726 	beq	r2,zero,43858 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   4383c:	e0bffd17 	ldw	r2,-12(fp)
   43840:	10800017 	ldw	r2,0(r2)
   43844:	10800817 	ldw	r2,32(r2)
   43848:	e13ffd17 	ldw	r4,-12(fp)
   4384c:	e17fff17 	ldw	r5,-4(fp)
   43850:	103ee83a 	callr	r2
   43854:	00000a06 	br	43880 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43858:	e0bfff17 	ldw	r2,-4(fp)
   4385c:	00c80004 	movi	r3,8192
   43860:	10c00115 	stw	r3,4(r2)
      return 0;
   43864:	0005883a 	mov	r2,zero
   43868:	00000506 	br	43880 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4386c:	004378c0 	call	4378c <alt_get_errno>
   43870:	1007883a 	mov	r3,r2
   43874:	00801444 	movi	r2,81
   43878:	18800015 	stw	r2,0(r3)
    return -1;
   4387c:	00bfffc4 	movi	r2,-1
  }
}
   43880:	e037883a 	mov	sp,fp
   43884:	dfc00117 	ldw	ra,4(sp)
   43888:	df000017 	ldw	fp,0(sp)
   4388c:	dec00204 	addi	sp,sp,8
   43890:	f800283a 	ret

00043894 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43894:	defffe04 	addi	sp,sp,-8
   43898:	dfc00115 	stw	ra,4(sp)
   4389c:	df000015 	stw	fp,0(sp)
   438a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   438a4:	00800174 	movhi	r2,5
   438a8:	1083f404 	addi	r2,r2,4048
   438ac:	10800017 	ldw	r2,0(r2)
   438b0:	10000526 	beq	r2,zero,438c8 <alt_get_errno+0x34>
   438b4:	00800174 	movhi	r2,5
   438b8:	1083f404 	addi	r2,r2,4048
   438bc:	10800017 	ldw	r2,0(r2)
   438c0:	103ee83a 	callr	r2
   438c4:	00000206 	br	438d0 <alt_get_errno+0x3c>
   438c8:	00800174 	movhi	r2,5
   438cc:	108b0c04 	addi	r2,r2,11312
}
   438d0:	e037883a 	mov	sp,fp
   438d4:	dfc00117 	ldw	ra,4(sp)
   438d8:	df000017 	ldw	fp,0(sp)
   438dc:	dec00204 	addi	sp,sp,8
   438e0:	f800283a 	ret

000438e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   438e4:	deffed04 	addi	sp,sp,-76
   438e8:	dfc01215 	stw	ra,72(sp)
   438ec:	df001115 	stw	fp,68(sp)
   438f0:	df001104 	addi	fp,sp,68
   438f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   438f8:	e0bfff17 	ldw	r2,-4(fp)
   438fc:	10000816 	blt	r2,zero,43920 <isatty+0x3c>
   43900:	e13fff17 	ldw	r4,-4(fp)
   43904:	01400304 	movi	r5,12
   43908:	00436100 	call	43610 <__mulsi3>
   4390c:	1007883a 	mov	r3,r2
   43910:	00800174 	movhi	r2,5
   43914:	10bf3c04 	addi	r2,r2,-784
   43918:	1885883a 	add	r2,r3,r2
   4391c:	00000106 	br	43924 <isatty+0x40>
   43920:	0005883a 	mov	r2,zero
   43924:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   43928:	e0bfef17 	ldw	r2,-68(fp)
   4392c:	10000e26 	beq	r2,zero,43968 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43930:	e0bfef17 	ldw	r2,-68(fp)
   43934:	10800017 	ldw	r2,0(r2)
   43938:	10800817 	ldw	r2,32(r2)
   4393c:	1000021e 	bne	r2,zero,43948 <isatty+0x64>
    {
      return 1;
   43940:	00800044 	movi	r2,1
   43944:	00000d06 	br	4397c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43948:	e0bff004 	addi	r2,fp,-64
   4394c:	e13fff17 	ldw	r4,-4(fp)
   43950:	100b883a 	mov	r5,r2
   43954:	00437dc0 	call	437dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43958:	e0bff117 	ldw	r2,-60(fp)
   4395c:	10880020 	cmpeqi	r2,r2,8192
   43960:	10803fcc 	andi	r2,r2,255
   43964:	00000506 	br	4397c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43968:	00438940 	call	43894 <alt_get_errno>
   4396c:	1007883a 	mov	r3,r2
   43970:	00801444 	movi	r2,81
   43974:	18800015 	stw	r2,0(r3)
    return 0;
   43978:	0005883a 	mov	r2,zero
  }
}
   4397c:	e037883a 	mov	sp,fp
   43980:	dfc00117 	ldw	ra,4(sp)
   43984:	df000017 	ldw	fp,0(sp)
   43988:	dec00204 	addi	sp,sp,8
   4398c:	f800283a 	ret

00043990 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43990:	defffc04 	addi	sp,sp,-16
   43994:	df000315 	stw	fp,12(sp)
   43998:	df000304 	addi	fp,sp,12
   4399c:	e13ffd15 	stw	r4,-12(fp)
   439a0:	e17ffe15 	stw	r5,-8(fp)
   439a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   439a8:	e0fffe17 	ldw	r3,-8(fp)
   439ac:	e0bffd17 	ldw	r2,-12(fp)
   439b0:	18800c26 	beq	r3,r2,439e4 <alt_load_section+0x54>
  {
    while( to != end )
   439b4:	00000806 	br	439d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   439b8:	e0bffe17 	ldw	r2,-8(fp)
   439bc:	10c00104 	addi	r3,r2,4
   439c0:	e0fffe15 	stw	r3,-8(fp)
   439c4:	e0fffd17 	ldw	r3,-12(fp)
   439c8:	19000104 	addi	r4,r3,4
   439cc:	e13ffd15 	stw	r4,-12(fp)
   439d0:	18c00017 	ldw	r3,0(r3)
   439d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   439d8:	e0fffe17 	ldw	r3,-8(fp)
   439dc:	e0bfff17 	ldw	r2,-4(fp)
   439e0:	18bff51e 	bne	r3,r2,439b8 <__alt_data_end+0xfffcde58>
    {
      *to++ = *from++;
    }
  }
}
   439e4:	e037883a 	mov	sp,fp
   439e8:	df000017 	ldw	fp,0(sp)
   439ec:	dec00104 	addi	sp,sp,4
   439f0:	f800283a 	ret

000439f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   439f4:	defffe04 	addi	sp,sp,-8
   439f8:	dfc00115 	stw	ra,4(sp)
   439fc:	df000015 	stw	fp,0(sp)
   43a00:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43a04:	01000174 	movhi	r4,5
   43a08:	21041804 	addi	r4,r4,4192
   43a0c:	01400174 	movhi	r5,5
   43a10:	297d2704 	addi	r5,r5,-2916
   43a14:	01800174 	movhi	r6,5
   43a18:	31841804 	addi	r6,r6,4192
   43a1c:	00439900 	call	43990 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43a20:	01000134 	movhi	r4,4
   43a24:	21000804 	addi	r4,r4,32
   43a28:	01400134 	movhi	r5,4
   43a2c:	29400804 	addi	r5,r5,32
   43a30:	01800134 	movhi	r6,4
   43a34:	31808b04 	addi	r6,r6,556
   43a38:	00439900 	call	43990 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43a3c:	01000174 	movhi	r4,5
   43a40:	213cc804 	addi	r4,r4,-3296
   43a44:	01400174 	movhi	r5,5
   43a48:	297cc804 	addi	r5,r5,-3296
   43a4c:	01800174 	movhi	r6,5
   43a50:	31bd2704 	addi	r6,r6,-2916
   43a54:	00439900 	call	43990 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43a58:	004dbbc0 	call	4dbbc <alt_dcache_flush_all>
  alt_icache_flush_all();
   43a5c:	004dd840 	call	4dd84 <alt_icache_flush_all>
}
   43a60:	e037883a 	mov	sp,fp
   43a64:	dfc00117 	ldw	ra,4(sp)
   43a68:	df000017 	ldw	fp,0(sp)
   43a6c:	dec00204 	addi	sp,sp,8
   43a70:	f800283a 	ret

00043a74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43a74:	defffe04 	addi	sp,sp,-8
   43a78:	dfc00115 	stw	ra,4(sp)
   43a7c:	df000015 	stw	fp,0(sp)
   43a80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43a84:	00800174 	movhi	r2,5
   43a88:	1083f404 	addi	r2,r2,4048
   43a8c:	10800017 	ldw	r2,0(r2)
   43a90:	10000526 	beq	r2,zero,43aa8 <alt_get_errno+0x34>
   43a94:	00800174 	movhi	r2,5
   43a98:	1083f404 	addi	r2,r2,4048
   43a9c:	10800017 	ldw	r2,0(r2)
   43aa0:	103ee83a 	callr	r2
   43aa4:	00000206 	br	43ab0 <alt_get_errno+0x3c>
   43aa8:	00800174 	movhi	r2,5
   43aac:	108b0c04 	addi	r2,r2,11312
}
   43ab0:	e037883a 	mov	sp,fp
   43ab4:	dfc00117 	ldw	ra,4(sp)
   43ab8:	df000017 	ldw	fp,0(sp)
   43abc:	dec00204 	addi	sp,sp,8
   43ac0:	f800283a 	ret

00043ac4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   43ac4:	defff904 	addi	sp,sp,-28
   43ac8:	dfc00615 	stw	ra,24(sp)
   43acc:	df000515 	stw	fp,20(sp)
   43ad0:	df000504 	addi	fp,sp,20
   43ad4:	e13ffd15 	stw	r4,-12(fp)
   43ad8:	e17ffe15 	stw	r5,-8(fp)
   43adc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   43ae0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43ae4:	e0bffd17 	ldw	r2,-12(fp)
   43ae8:	10000816 	blt	r2,zero,43b0c <lseek+0x48>
   43aec:	e13ffd17 	ldw	r4,-12(fp)
   43af0:	01400304 	movi	r5,12
   43af4:	00436100 	call	43610 <__mulsi3>
   43af8:	1007883a 	mov	r3,r2
   43afc:	00800174 	movhi	r2,5
   43b00:	10bf3c04 	addi	r2,r2,-784
   43b04:	1885883a 	add	r2,r3,r2
   43b08:	00000106 	br	43b10 <lseek+0x4c>
   43b0c:	0005883a 	mov	r2,zero
   43b10:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   43b14:	e0bffc17 	ldw	r2,-16(fp)
   43b18:	10001026 	beq	r2,zero,43b5c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43b1c:	e0bffc17 	ldw	r2,-16(fp)
   43b20:	10800017 	ldw	r2,0(r2)
   43b24:	10800717 	ldw	r2,28(r2)
   43b28:	10000926 	beq	r2,zero,43b50 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43b2c:	e0bffc17 	ldw	r2,-16(fp)
   43b30:	10800017 	ldw	r2,0(r2)
   43b34:	10800717 	ldw	r2,28(r2)
   43b38:	e13ffc17 	ldw	r4,-16(fp)
   43b3c:	e17ffe17 	ldw	r5,-8(fp)
   43b40:	e1bfff17 	ldw	r6,-4(fp)
   43b44:	103ee83a 	callr	r2
   43b48:	e0bffb15 	stw	r2,-20(fp)
   43b4c:	00000506 	br	43b64 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43b50:	00bfde84 	movi	r2,-134
   43b54:	e0bffb15 	stw	r2,-20(fp)
   43b58:	00000206 	br	43b64 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   43b5c:	00bfebc4 	movi	r2,-81
   43b60:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   43b64:	e0bffb17 	ldw	r2,-20(fp)
   43b68:	1000070e 	bge	r2,zero,43b88 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   43b6c:	0043a740 	call	43a74 <alt_get_errno>
   43b70:	1007883a 	mov	r3,r2
   43b74:	e0bffb17 	ldw	r2,-20(fp)
   43b78:	0085c83a 	sub	r2,zero,r2
   43b7c:	18800015 	stw	r2,0(r3)
    rc = -1;
   43b80:	00bfffc4 	movi	r2,-1
   43b84:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   43b88:	e0bffb17 	ldw	r2,-20(fp)
}
   43b8c:	e037883a 	mov	sp,fp
   43b90:	dfc00117 	ldw	ra,4(sp)
   43b94:	df000017 	ldw	fp,0(sp)
   43b98:	dec00204 	addi	sp,sp,8
   43b9c:	f800283a 	ret

00043ba0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43ba0:	defff904 	addi	sp,sp,-28
   43ba4:	dfc00615 	stw	ra,24(sp)
   43ba8:	df000515 	stw	fp,20(sp)
   43bac:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43bb0:	0009883a 	mov	r4,zero
   43bb4:	004c0340 	call	4c034 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   43bb8:	0044bc00 	call	44bc0 <OSInit>
   43bbc:	01000044 	movi	r4,1
   43bc0:	004972c0 	call	4972c <OSSemCreate>
   43bc4:	1007883a 	mov	r3,r2
   43bc8:	00800174 	movhi	r2,5
   43bcc:	108b1204 	addi	r2,r2,11336
   43bd0:	10c00015 	stw	r3,0(r2)
   43bd4:	01000044 	movi	r4,1
   43bd8:	004972c0 	call	4972c <OSSemCreate>
   43bdc:	1007883a 	mov	r3,r2
   43be0:	00800174 	movhi	r2,5
   43be4:	108b1404 	addi	r2,r2,11344
   43be8:	10c00015 	stw	r3,0(r2)
   43bec:	00800174 	movhi	r2,5
   43bf0:	108b0d04 	addi	r2,r2,11316
   43bf4:	e0bffc15 	stw	r2,-16(fp)
   43bf8:	00800044 	movi	r2,1
   43bfc:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   43c00:	e0bffd0b 	ldhu	r2,-12(fp)
   43c04:	1009883a 	mov	r4,r2
   43c08:	004972c0 	call	4972c <OSSemCreate>
   43c0c:	1007883a 	mov	r3,r2
   43c10:	e0bffc17 	ldw	r2,-16(fp)
   43c14:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   43c18:	004c0680 	call	4c068 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   43c1c:	01000174 	movhi	r4,5
   43c20:	213cd304 	addi	r4,r4,-3252
   43c24:	01400174 	movhi	r5,5
   43c28:	297cd304 	addi	r5,r5,-3252
   43c2c:	01800174 	movhi	r6,5
   43c30:	31bcd304 	addi	r6,r6,-3252
   43c34:	004e1500 	call	4e150 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   43c38:	004dccc0 	call	4dccc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   43c3c:	01000174 	movhi	r4,5
   43c40:	21374a04 	addi	r4,r4,-8920
   43c44:	004ee480 	call	4ee48 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43c48:	d1272317 	ldw	r4,-25460(gp)
   43c4c:	d0e72417 	ldw	r3,-25456(gp)
   43c50:	d0a72517 	ldw	r2,-25452(gp)
   43c54:	180b883a 	mov	r5,r3
   43c58:	100d883a 	mov	r6,r2
   43c5c:	0040a040 	call	40a04 <main>
   43c60:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   43c64:	01000044 	movi	r4,1
   43c68:	00436880 	call	43688 <close>
  exit (result);
   43c6c:	e13ffb17 	ldw	r4,-20(fp)
   43c70:	004ee5c0 	call	4ee5c <exit>

00043c74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43c74:	defffe04 	addi	sp,sp,-8
   43c78:	dfc00115 	stw	ra,4(sp)
   43c7c:	df000015 	stw	fp,0(sp)
   43c80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43c84:	00800174 	movhi	r2,5
   43c88:	1083f404 	addi	r2,r2,4048
   43c8c:	10800017 	ldw	r2,0(r2)
   43c90:	10000526 	beq	r2,zero,43ca8 <alt_get_errno+0x34>
   43c94:	00800174 	movhi	r2,5
   43c98:	1083f404 	addi	r2,r2,4048
   43c9c:	10800017 	ldw	r2,0(r2)
   43ca0:	103ee83a 	callr	r2
   43ca4:	00000206 	br	43cb0 <alt_get_errno+0x3c>
   43ca8:	00800174 	movhi	r2,5
   43cac:	108b0c04 	addi	r2,r2,11312
}
   43cb0:	e037883a 	mov	sp,fp
   43cb4:	dfc00117 	ldw	ra,4(sp)
   43cb8:	df000017 	ldw	fp,0(sp)
   43cbc:	dec00204 	addi	sp,sp,8
   43cc0:	f800283a 	ret

00043cc4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   43cc4:	defff904 	addi	sp,sp,-28
   43cc8:	dfc00615 	stw	ra,24(sp)
   43ccc:	df000515 	stw	fp,20(sp)
   43cd0:	df000504 	addi	fp,sp,20
   43cd4:	e13ffd15 	stw	r4,-12(fp)
   43cd8:	e17ffe15 	stw	r5,-8(fp)
   43cdc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43ce0:	e0bffd17 	ldw	r2,-12(fp)
   43ce4:	10000816 	blt	r2,zero,43d08 <read+0x44>
   43ce8:	e13ffd17 	ldw	r4,-12(fp)
   43cec:	01400304 	movi	r5,12
   43cf0:	00436100 	call	43610 <__mulsi3>
   43cf4:	1007883a 	mov	r3,r2
   43cf8:	00800174 	movhi	r2,5
   43cfc:	10bf3c04 	addi	r2,r2,-784
   43d00:	1885883a 	add	r2,r3,r2
   43d04:	00000106 	br	43d0c <read+0x48>
   43d08:	0005883a 	mov	r2,zero
   43d0c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43d10:	e0bffb17 	ldw	r2,-20(fp)
   43d14:	10002226 	beq	r2,zero,43da0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43d18:	e0bffb17 	ldw	r2,-20(fp)
   43d1c:	10800217 	ldw	r2,8(r2)
   43d20:	108000cc 	andi	r2,r2,3
   43d24:	10800060 	cmpeqi	r2,r2,1
   43d28:	1000181e 	bne	r2,zero,43d8c <read+0xc8>
        (fd->dev->read))
   43d2c:	e0bffb17 	ldw	r2,-20(fp)
   43d30:	10800017 	ldw	r2,0(r2)
   43d34:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43d38:	10001426 	beq	r2,zero,43d8c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43d3c:	e0bffb17 	ldw	r2,-20(fp)
   43d40:	10800017 	ldw	r2,0(r2)
   43d44:	10800517 	ldw	r2,20(r2)
   43d48:	e0ffff17 	ldw	r3,-4(fp)
   43d4c:	e13ffb17 	ldw	r4,-20(fp)
   43d50:	e17ffe17 	ldw	r5,-8(fp)
   43d54:	180d883a 	mov	r6,r3
   43d58:	103ee83a 	callr	r2
   43d5c:	e0bffc15 	stw	r2,-16(fp)
   43d60:	e0bffc17 	ldw	r2,-16(fp)
   43d64:	1000070e 	bge	r2,zero,43d84 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   43d68:	0043c740 	call	43c74 <alt_get_errno>
   43d6c:	1007883a 	mov	r3,r2
   43d70:	e0bffc17 	ldw	r2,-16(fp)
   43d74:	0085c83a 	sub	r2,zero,r2
   43d78:	18800015 	stw	r2,0(r3)
          return -1;
   43d7c:	00bfffc4 	movi	r2,-1
   43d80:	00000c06 	br	43db4 <read+0xf0>
        }
        return rval;
   43d84:	e0bffc17 	ldw	r2,-16(fp)
   43d88:	00000a06 	br	43db4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43d8c:	0043c740 	call	43c74 <alt_get_errno>
   43d90:	1007883a 	mov	r3,r2
   43d94:	00800344 	movi	r2,13
   43d98:	18800015 	stw	r2,0(r3)
   43d9c:	00000406 	br	43db0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43da0:	0043c740 	call	43c74 <alt_get_errno>
   43da4:	1007883a 	mov	r3,r2
   43da8:	00801444 	movi	r2,81
   43dac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43db0:	00bfffc4 	movi	r2,-1
}
   43db4:	e037883a 	mov	sp,fp
   43db8:	dfc00117 	ldw	ra,4(sp)
   43dbc:	df000017 	ldw	fp,0(sp)
   43dc0:	dec00204 	addi	sp,sp,8
   43dc4:	f800283a 	ret

00043dc8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43dc8:	defffc04 	addi	sp,sp,-16
   43dcc:	dfc00315 	stw	ra,12(sp)
   43dd0:	df000215 	stw	fp,8(sp)
   43dd4:	dc000115 	stw	r16,4(sp)
   43dd8:	df000204 	addi	fp,sp,8
   43ddc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   43de0:	e0bffe17 	ldw	r2,-8(fp)
   43de4:	108000d0 	cmplti	r2,r2,3
   43de8:	1000111e 	bne	r2,zero,43e30 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   43dec:	04000174 	movhi	r16,5
   43df0:	843f3c04 	addi	r16,r16,-784
   43df4:	e0bffe17 	ldw	r2,-8(fp)
   43df8:	1009883a 	mov	r4,r2
   43dfc:	01400304 	movi	r5,12
   43e00:	00436100 	call	43610 <__mulsi3>
   43e04:	8085883a 	add	r2,r16,r2
   43e08:	10800204 	addi	r2,r2,8
   43e0c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43e10:	04000174 	movhi	r16,5
   43e14:	843f3c04 	addi	r16,r16,-784
   43e18:	e0bffe17 	ldw	r2,-8(fp)
   43e1c:	1009883a 	mov	r4,r2
   43e20:	01400304 	movi	r5,12
   43e24:	00436100 	call	43610 <__mulsi3>
   43e28:	8085883a 	add	r2,r16,r2
   43e2c:	10000015 	stw	zero,0(r2)
  }
}
   43e30:	e6ffff04 	addi	sp,fp,-4
   43e34:	dfc00217 	ldw	ra,8(sp)
   43e38:	df000117 	ldw	fp,4(sp)
   43e3c:	dc000017 	ldw	r16,0(sp)
   43e40:	dec00304 	addi	sp,sp,12
   43e44:	f800283a 	ret

00043e48 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43e48:	defff904 	addi	sp,sp,-28
   43e4c:	df000615 	stw	fp,24(sp)
   43e50:	df000604 	addi	fp,sp,24
   43e54:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43e58:	0005303a 	rdctl	r2,status
   43e5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43e60:	e0fffc17 	ldw	r3,-16(fp)
   43e64:	00bfff84 	movi	r2,-2
   43e68:	1884703a 	and	r2,r3,r2
   43e6c:	1001703a 	wrctl	status,r2
  
  return context;
   43e70:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43e74:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43e78:	d0a00a17 	ldw	r2,-32728(gp)
   43e7c:	10c000c4 	addi	r3,r2,3
   43e80:	00bfff04 	movi	r2,-4
   43e84:	1884703a 	and	r2,r3,r2
   43e88:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43e8c:	d0e00a17 	ldw	r3,-32728(gp)
   43e90:	e0bfff17 	ldw	r2,-4(fp)
   43e94:	1887883a 	add	r3,r3,r2
   43e98:	008001f4 	movhi	r2,7
   43e9c:	1096d804 	addi	r2,r2,23392
   43ea0:	10c0062e 	bgeu	r2,r3,43ebc <sbrk+0x74>
   43ea4:	e0bffa17 	ldw	r2,-24(fp)
   43ea8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43eac:	e0bffd17 	ldw	r2,-12(fp)
   43eb0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43eb4:	00bfffc4 	movi	r2,-1
   43eb8:	00000b06 	br	43ee8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   43ebc:	d0a00a17 	ldw	r2,-32728(gp)
   43ec0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   43ec4:	d0e00a17 	ldw	r3,-32728(gp)
   43ec8:	e0bfff17 	ldw	r2,-4(fp)
   43ecc:	1885883a 	add	r2,r3,r2
   43ed0:	d0a00a15 	stw	r2,-32728(gp)
   43ed4:	e0bffa17 	ldw	r2,-24(fp)
   43ed8:	e0bffe15 	stw	r2,-8(fp)
   43edc:	e0bffe17 	ldw	r2,-8(fp)
   43ee0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43ee4:	e0bffb17 	ldw	r2,-20(fp)
} 
   43ee8:	e037883a 	mov	sp,fp
   43eec:	df000017 	ldw	fp,0(sp)
   43ef0:	dec00104 	addi	sp,sp,4
   43ef4:	f800283a 	ret

00043ef8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43ef8:	defffe04 	addi	sp,sp,-8
   43efc:	dfc00115 	stw	ra,4(sp)
   43f00:	df000015 	stw	fp,0(sp)
   43f04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43f08:	00800174 	movhi	r2,5
   43f0c:	1083f404 	addi	r2,r2,4048
   43f10:	10800017 	ldw	r2,0(r2)
   43f14:	10000526 	beq	r2,zero,43f2c <alt_get_errno+0x34>
   43f18:	00800174 	movhi	r2,5
   43f1c:	1083f404 	addi	r2,r2,4048
   43f20:	10800017 	ldw	r2,0(r2)
   43f24:	103ee83a 	callr	r2
   43f28:	00000206 	br	43f34 <alt_get_errno+0x3c>
   43f2c:	00800174 	movhi	r2,5
   43f30:	108b0c04 	addi	r2,r2,11312
}
   43f34:	e037883a 	mov	sp,fp
   43f38:	dfc00117 	ldw	ra,4(sp)
   43f3c:	df000017 	ldw	fp,0(sp)
   43f40:	dec00204 	addi	sp,sp,8
   43f44:	f800283a 	ret

00043f48 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43f48:	defff904 	addi	sp,sp,-28
   43f4c:	dfc00615 	stw	ra,24(sp)
   43f50:	df000515 	stw	fp,20(sp)
   43f54:	df000504 	addi	fp,sp,20
   43f58:	e13ffd15 	stw	r4,-12(fp)
   43f5c:	e17ffe15 	stw	r5,-8(fp)
   43f60:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43f64:	e0bffd17 	ldw	r2,-12(fp)
   43f68:	10000816 	blt	r2,zero,43f8c <write+0x44>
   43f6c:	e13ffd17 	ldw	r4,-12(fp)
   43f70:	01400304 	movi	r5,12
   43f74:	00436100 	call	43610 <__mulsi3>
   43f78:	1007883a 	mov	r3,r2
   43f7c:	00800174 	movhi	r2,5
   43f80:	10bf3c04 	addi	r2,r2,-784
   43f84:	1885883a 	add	r2,r3,r2
   43f88:	00000106 	br	43f90 <write+0x48>
   43f8c:	0005883a 	mov	r2,zero
   43f90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43f94:	e0bffb17 	ldw	r2,-20(fp)
   43f98:	10002126 	beq	r2,zero,44020 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43f9c:	e0bffb17 	ldw	r2,-20(fp)
   43fa0:	10800217 	ldw	r2,8(r2)
   43fa4:	108000cc 	andi	r2,r2,3
   43fa8:	10001826 	beq	r2,zero,4400c <write+0xc4>
   43fac:	e0bffb17 	ldw	r2,-20(fp)
   43fb0:	10800017 	ldw	r2,0(r2)
   43fb4:	10800617 	ldw	r2,24(r2)
   43fb8:	10001426 	beq	r2,zero,4400c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43fbc:	e0bffb17 	ldw	r2,-20(fp)
   43fc0:	10800017 	ldw	r2,0(r2)
   43fc4:	10800617 	ldw	r2,24(r2)
   43fc8:	e0ffff17 	ldw	r3,-4(fp)
   43fcc:	e13ffb17 	ldw	r4,-20(fp)
   43fd0:	e17ffe17 	ldw	r5,-8(fp)
   43fd4:	180d883a 	mov	r6,r3
   43fd8:	103ee83a 	callr	r2
   43fdc:	e0bffc15 	stw	r2,-16(fp)
   43fe0:	e0bffc17 	ldw	r2,-16(fp)
   43fe4:	1000070e 	bge	r2,zero,44004 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   43fe8:	0043ef80 	call	43ef8 <alt_get_errno>
   43fec:	1007883a 	mov	r3,r2
   43ff0:	e0bffc17 	ldw	r2,-16(fp)
   43ff4:	0085c83a 	sub	r2,zero,r2
   43ff8:	18800015 	stw	r2,0(r3)
        return -1;
   43ffc:	00bfffc4 	movi	r2,-1
   44000:	00000c06 	br	44034 <write+0xec>
      }
      return rval;
   44004:	e0bffc17 	ldw	r2,-16(fp)
   44008:	00000a06 	br	44034 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4400c:	0043ef80 	call	43ef8 <alt_get_errno>
   44010:	1007883a 	mov	r3,r2
   44014:	00800344 	movi	r2,13
   44018:	18800015 	stw	r2,0(r3)
   4401c:	00000406 	br	44030 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   44020:	0043ef80 	call	43ef8 <alt_get_errno>
   44024:	1007883a 	mov	r3,r2
   44028:	00801444 	movi	r2,81
   4402c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   44030:	00bfffc4 	movi	r2,-1
}
   44034:	e037883a 	mov	sp,fp
   44038:	dfc00117 	ldw	ra,4(sp)
   4403c:	df000017 	ldw	fp,0(sp)
   44040:	dec00204 	addi	sp,sp,8
   44044:	f800283a 	ret

00044048 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   44048:	deffdf04 	addi	sp,sp,-132
   4404c:	dfc02015 	stw	ra,128(sp)
   44050:	df001f15 	stw	fp,124(sp)
   44054:	df001f04 	addi	fp,sp,124
   44058:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   4405c:	e0bfe204 	addi	r2,fp,-120
   44060:	01003fc4 	movi	r4,255
   44064:	100b883a 	mov	r5,r2
   44068:	004b8e00 	call	4b8e0 <OSTaskQuery>
   4406c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   44070:	e0bffe83 	ldbu	r2,-6(fp)
   44074:	10803fcc 	andi	r2,r2,255
   44078:	10000126 	beq	r2,zero,44080 <__env_lock+0x38>
    return;
   4407c:	00001d06 	br	440f4 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   44080:	e0bfee83 	ldbu	r2,-70(fp)
   44084:	10803fcc 	andi	r2,r2,255
   44088:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   4408c:	d0e72717 	ldw	r3,-25444(gp)
   44090:	e0bffd04 	addi	r2,fp,-12
   44094:	1809883a 	mov	r4,r3
   44098:	100b883a 	mov	r5,r2
   4409c:	0049f780 	call	49f78 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   440a0:	e0bffe43 	ldbu	r2,-7(fp)
   440a4:	10803fcc 	andi	r2,r2,255
   440a8:	10000726 	beq	r2,zero,440c8 <__env_lock+0x80>
   440ac:	d0a00b17 	ldw	r2,-32724(gp)
   440b0:	e0ffe117 	ldw	r3,-124(fp)
   440b4:	1880041e 	bne	r3,r2,440c8 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   440b8:	d0a72617 	ldw	r2,-25448(gp)
   440bc:	10800044 	addi	r2,r2,1
   440c0:	d0a72615 	stw	r2,-25448(gp)
   440c4:	00000a06 	br	440f0 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   440c8:	d0e72717 	ldw	r3,-25444(gp)
   440cc:	e0bffe84 	addi	r2,fp,-6
   440d0:	1809883a 	mov	r4,r3
   440d4:	000b883a 	mov	r5,zero
   440d8:	100d883a 	mov	r6,r2
   440dc:	0049a940 	call	49a94 <OSSemPend>
    locks  = 1;
   440e0:	00800044 	movi	r2,1
   440e4:	d0a72615 	stw	r2,-25448(gp)
    lockid = id;
   440e8:	e0bfe117 	ldw	r2,-124(fp)
   440ec:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   440f0:	0001883a 	nop
}
   440f4:	e037883a 	mov	sp,fp
   440f8:	dfc00117 	ldw	ra,4(sp)
   440fc:	df000017 	ldw	fp,0(sp)
   44100:	dec00204 	addi	sp,sp,8
   44104:	f800283a 	ret

00044108 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   44108:	defffd04 	addi	sp,sp,-12
   4410c:	dfc00215 	stw	ra,8(sp)
   44110:	df000115 	stw	fp,4(sp)
   44114:	df000104 	addi	fp,sp,4
   44118:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   4411c:	d0a72617 	ldw	r2,-25448(gp)
   44120:	1000011e 	bne	r2,zero,44128 <__env_unlock+0x20>
    return;
   44124:	00000a06 	br	44150 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   44128:	d0a72617 	ldw	r2,-25448(gp)
   4412c:	10bfffc4 	addi	r2,r2,-1
   44130:	d0a72615 	stw	r2,-25448(gp)
   44134:	d0a72617 	ldw	r2,-25448(gp)
   44138:	1000051e 	bne	r2,zero,44150 <__env_unlock+0x48>
  {
    lockid = -1;
   4413c:	00bfffc4 	movi	r2,-1
   44140:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
   44144:	d0a72717 	ldw	r2,-25444(gp)
   44148:	1009883a 	mov	r4,r2
   4414c:	0049e680 	call	49e68 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   44150:	e037883a 	mov	sp,fp
   44154:	dfc00117 	ldw	ra,4(sp)
   44158:	df000017 	ldw	fp,0(sp)
   4415c:	dec00204 	addi	sp,sp,8
   44160:	f800283a 	ret

00044164 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   44164:	deffdb04 	addi	sp,sp,-148
   44168:	dfc02415 	stw	ra,144(sp)
   4416c:	df002315 	stw	fp,140(sp)
   44170:	df002304 	addi	fp,sp,140
   44174:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   44178:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   4417c:	00800174 	movhi	r2,5
   44180:	108b1544 	addi	r2,r2,11349
   44184:	10800003 	ldbu	r2,0(r2)
   44188:	10803fcc 	andi	r2,r2,255
   4418c:	10800060 	cmpeqi	r2,r2,1
   44190:	1000011e 	bne	r2,zero,44198 <__malloc_lock+0x34>
      return;
   44194:	00003606 	br	44270 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   44198:	e0bfe204 	addi	r2,fp,-120
   4419c:	01003fc4 	movi	r4,255
   441a0:	100b883a 	mov	r5,r2
   441a4:	004b8e00 	call	4b8e0 <OSTaskQuery>
   441a8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   441ac:	e0bffe83 	ldbu	r2,-6(fp)
   441b0:	10803fcc 	andi	r2,r2,255
   441b4:	10000126 	beq	r2,zero,441bc <__malloc_lock+0x58>
    return;
   441b8:	00002d06 	br	44270 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   441bc:	e0bfee83 	ldbu	r2,-70(fp)
   441c0:	10803fcc 	andi	r2,r2,255
   441c4:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   441c8:	d0e72917 	ldw	r3,-25436(gp)
   441cc:	e0bffd04 	addi	r2,fp,-12
   441d0:	1809883a 	mov	r4,r3
   441d4:	100b883a 	mov	r5,r2
   441d8:	0049f780 	call	49f78 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   441dc:	0005303a 	rdctl	r2,status
   441e0:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   441e4:	e0ffdf17 	ldw	r3,-132(fp)
   441e8:	00bfff84 	movi	r2,-2
   441ec:	1884703a 	and	r2,r3,r2
   441f0:	1001703a 	wrctl	status,r2
  
  return context;
   441f4:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   441f8:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   441fc:	e0bffd0b 	ldhu	r2,-12(fp)
   44200:	10bfffcc 	andi	r2,r2,65535
   44204:	10000b1e 	bne	r2,zero,44234 <__malloc_lock+0xd0>
   44208:	d0a00c17 	ldw	r2,-32720(gp)
   4420c:	e0ffde17 	ldw	r3,-136(fp)
   44210:	1880081e 	bne	r3,r2,44234 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   44214:	d0a72817 	ldw	r2,-25440(gp)
   44218:	10800044 	addi	r2,r2,1
   4421c:	d0a72815 	stw	r2,-25440(gp)
   44220:	e0bfdd17 	ldw	r2,-140(fp)
   44224:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44228:	e0bfe017 	ldw	r2,-128(fp)
   4422c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   44230:	00000e06 	br	4426c <__malloc_lock+0x108>
   44234:	e0bfdd17 	ldw	r2,-140(fp)
   44238:	e0bfe115 	stw	r2,-124(fp)
   4423c:	e0bfe117 	ldw	r2,-124(fp)
   44240:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   44244:	d0e72917 	ldw	r3,-25436(gp)
   44248:	e0bffe84 	addi	r2,fp,-6
   4424c:	1809883a 	mov	r4,r3
   44250:	000b883a 	mov	r5,zero
   44254:	100d883a 	mov	r6,r2
   44258:	0049a940 	call	49a94 <OSSemPend>
    locks  = 1;
   4425c:	00800044 	movi	r2,1
   44260:	d0a72815 	stw	r2,-25440(gp)
    lockid = id;
   44264:	e0bfde17 	ldw	r2,-136(fp)
   44268:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   4426c:	0001883a 	nop
}
   44270:	e037883a 	mov	sp,fp
   44274:	dfc00117 	ldw	ra,4(sp)
   44278:	df000017 	ldw	fp,0(sp)
   4427c:	dec00204 	addi	sp,sp,8
   44280:	f800283a 	ret

00044284 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   44284:	defff804 	addi	sp,sp,-32
   44288:	dfc00715 	stw	ra,28(sp)
   4428c:	df000615 	stw	fp,24(sp)
   44290:	df000604 	addi	fp,sp,24
   44294:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   44298:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   4429c:	00800174 	movhi	r2,5
   442a0:	108b1544 	addi	r2,r2,11349
   442a4:	10800003 	ldbu	r2,0(r2)
   442a8:	10803fcc 	andi	r2,r2,255
   442ac:	10800060 	cmpeqi	r2,r2,1
   442b0:	1000011e 	bne	r2,zero,442b8 <__malloc_unlock+0x34>
      return;
   442b4:	00002206 	br	44340 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   442b8:	0005303a 	rdctl	r2,status
   442bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   442c0:	e0fffb17 	ldw	r3,-20(fp)
   442c4:	00bfff84 	movi	r2,-2
   442c8:	1884703a 	and	r2,r3,r2
   442cc:	1001703a 	wrctl	status,r2
  
  return context;
   442d0:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   442d4:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   442d8:	d0a72817 	ldw	r2,-25440(gp)
   442dc:	1000051e 	bne	r2,zero,442f4 <__malloc_unlock+0x70>
   442e0:	e0bffa17 	ldw	r2,-24(fp)
   442e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   442e8:	e0bffc17 	ldw	r2,-16(fp)
   442ec:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   442f0:	00001306 	br	44340 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   442f4:	d0a72817 	ldw	r2,-25440(gp)
   442f8:	10bfffc4 	addi	r2,r2,-1
   442fc:	d0a72815 	stw	r2,-25440(gp)
   44300:	d0a72817 	ldw	r2,-25440(gp)
   44304:	10000a1e 	bne	r2,zero,44330 <__malloc_unlock+0xac>
  {
    lockid = -1;
   44308:	00bfffc4 	movi	r2,-1
   4430c:	d0a00c15 	stw	r2,-32720(gp)
   44310:	e0bffa17 	ldw	r2,-24(fp)
   44314:	e0bffd15 	stw	r2,-12(fp)
   44318:	e0bffd17 	ldw	r2,-12(fp)
   4431c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   44320:	d0a72917 	ldw	r2,-25436(gp)
   44324:	1009883a 	mov	r4,r2
   44328:	0049e680 	call	49e68 <OSSemPost>
   4432c:	00000406 	br	44340 <__malloc_unlock+0xbc>
   44330:	e0bffa17 	ldw	r2,-24(fp)
   44334:	e0bffe15 	stw	r2,-8(fp)
   44338:	e0bffe17 	ldw	r2,-8(fp)
   4433c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   44340:	e037883a 	mov	sp,fp
   44344:	dfc00117 	ldw	ra,4(sp)
   44348:	df000017 	ldw	fp,0(sp)
   4434c:	dec00204 	addi	sp,sp,8
   44350:	f800283a 	ret

00044354 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   44354:	defff704 	addi	sp,sp,-36
   44358:	dfc00815 	stw	ra,32(sp)
   4435c:	df000715 	stw	fp,28(sp)
   44360:	df000704 	addi	fp,sp,28
   44364:	e13ffd15 	stw	r4,-12(fp)
   44368:	e17ffe15 	stw	r5,-8(fp)
   4436c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   44370:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   44374:	e0bfff17 	ldw	r2,-4(fp)
   44378:	1000021e 	bne	r2,zero,44384 <OSEventNameGet+0x30>
        return (0);
   4437c:	0005883a 	mov	r2,zero
   44380:	00003706 	br	44460 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   44384:	e0bffd17 	ldw	r2,-12(fp)
   44388:	1000051e 	bne	r2,zero,443a0 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   4438c:	e0bfff17 	ldw	r2,-4(fp)
   44390:	00c00104 	movi	r3,4
   44394:	10c00005 	stb	r3,0(r2)
        return (0);
   44398:	0005883a 	mov	r2,zero
   4439c:	00003006 	br	44460 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   443a0:	e0bffe17 	ldw	r2,-8(fp)
   443a4:	1000051e 	bne	r2,zero,443bc <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   443a8:	e0bfff17 	ldw	r2,-4(fp)
   443ac:	00c00304 	movi	r3,12
   443b0:	10c00005 	stb	r3,0(r2)
        return (0);
   443b4:	0005883a 	mov	r2,zero
   443b8:	00002906 	br	44460 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   443bc:	d0a73803 	ldbu	r2,-25376(gp)
   443c0:	10803fcc 	andi	r2,r2,255
   443c4:	10000526 	beq	r2,zero,443dc <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   443c8:	e0bfff17 	ldw	r2,-4(fp)
   443cc:	00c00444 	movi	r3,17
   443d0:	10c00005 	stb	r3,0(r2)
        return (0);
   443d4:	0005883a 	mov	r2,zero
   443d8:	00002106 	br	44460 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   443dc:	e0bffd17 	ldw	r2,-12(fp)
   443e0:	10800003 	ldbu	r2,0(r2)
   443e4:	10803fcc 	andi	r2,r2,255
   443e8:	10bfffc4 	addi	r2,r2,-1
   443ec:	10800128 	cmpgeui	r2,r2,4
   443f0:	10000526 	beq	r2,zero,44408 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   443f4:	e0bfff17 	ldw	r2,-4(fp)
   443f8:	00c00044 	movi	r3,1
   443fc:	10c00005 	stb	r3,0(r2)
             return (0);
   44400:	0005883a 	mov	r2,zero
   44404:	00001606 	br	44460 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   44408:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4440c:	0005303a 	rdctl	r2,status
   44410:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44414:	e0fffb17 	ldw	r3,-20(fp)
   44418:	00bfff84 	movi	r2,-2
   4441c:	1884703a 	and	r2,r3,r2
   44420:	1001703a 	wrctl	status,r2
  
  return context;
   44424:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   44428:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   4442c:	e0bffd17 	ldw	r2,-12(fp)
   44430:	10800384 	addi	r2,r2,14
   44434:	e13ffe17 	ldw	r4,-8(fp)
   44438:	100b883a 	mov	r5,r2
   4443c:	0045da80 	call	45da8 <OS_StrCopy>
   44440:	e0bffa05 	stb	r2,-24(fp)
   44444:	e0bff917 	ldw	r2,-28(fp)
   44448:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4444c:	e0bffc17 	ldw	r2,-16(fp)
   44450:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   44454:	e0bfff17 	ldw	r2,-4(fp)
   44458:	10000005 	stb	zero,0(r2)
    return (len);
   4445c:	e0bffa03 	ldbu	r2,-24(fp)
}
   44460:	e037883a 	mov	sp,fp
   44464:	dfc00117 	ldw	ra,4(sp)
   44468:	df000017 	ldw	fp,0(sp)
   4446c:	dec00204 	addi	sp,sp,8
   44470:	f800283a 	ret

00044474 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   44474:	defff604 	addi	sp,sp,-40
   44478:	dfc00915 	stw	ra,36(sp)
   4447c:	df000815 	stw	fp,32(sp)
   44480:	df000804 	addi	fp,sp,32
   44484:	e13ffd15 	stw	r4,-12(fp)
   44488:	e17ffe15 	stw	r5,-8(fp)
   4448c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   44490:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   44494:	e0bfff17 	ldw	r2,-4(fp)
   44498:	1000011e 	bne	r2,zero,444a0 <OSEventNameSet+0x2c>
        return;
   4449c:	00003f06 	br	4459c <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   444a0:	e0bffd17 	ldw	r2,-12(fp)
   444a4:	1000041e 	bne	r2,zero,444b8 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   444a8:	e0bfff17 	ldw	r2,-4(fp)
   444ac:	00c00104 	movi	r3,4
   444b0:	10c00005 	stb	r3,0(r2)
        return;
   444b4:	00003906 	br	4459c <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   444b8:	e0bffe17 	ldw	r2,-8(fp)
   444bc:	1000041e 	bne	r2,zero,444d0 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   444c0:	e0bfff17 	ldw	r2,-4(fp)
   444c4:	00c00304 	movi	r3,12
   444c8:	10c00005 	stb	r3,0(r2)
        return;
   444cc:	00003306 	br	4459c <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   444d0:	d0a73803 	ldbu	r2,-25376(gp)
   444d4:	10803fcc 	andi	r2,r2,255
   444d8:	10000426 	beq	r2,zero,444ec <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   444dc:	e0bfff17 	ldw	r2,-4(fp)
   444e0:	00c00484 	movi	r3,18
   444e4:	10c00005 	stb	r3,0(r2)
        return;
   444e8:	00002c06 	br	4459c <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   444ec:	e0bffd17 	ldw	r2,-12(fp)
   444f0:	10800003 	ldbu	r2,0(r2)
   444f4:	10803fcc 	andi	r2,r2,255
   444f8:	10bfffc4 	addi	r2,r2,-1
   444fc:	10800128 	cmpgeui	r2,r2,4
   44500:	10000426 	beq	r2,zero,44514 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   44504:	e0bfff17 	ldw	r2,-4(fp)
   44508:	00c00044 	movi	r3,1
   4450c:	10c00005 	stb	r3,0(r2)
             return;
   44510:	00002206 	br	4459c <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   44514:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44518:	0005303a 	rdctl	r2,status
   4451c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44520:	e0fffa17 	ldw	r3,-24(fp)
   44524:	00bfff84 	movi	r2,-2
   44528:	1884703a 	and	r2,r3,r2
   4452c:	1001703a 	wrctl	status,r2
  
  return context;
   44530:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   44534:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   44538:	e13ffe17 	ldw	r4,-8(fp)
   4453c:	0045e1c0 	call	45e1c <OS_StrLen>
   44540:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   44544:	e0bff903 	ldbu	r2,-28(fp)
   44548:	10800830 	cmpltui	r2,r2,32
   4454c:	1000081e 	bne	r2,zero,44570 <OSEventNameSet+0xfc>
   44550:	e0bff817 	ldw	r2,-32(fp)
   44554:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44558:	e0bffb17 	ldw	r2,-20(fp)
   4455c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   44560:	e0bfff17 	ldw	r2,-4(fp)
   44564:	00c002c4 	movi	r3,11
   44568:	10c00005 	stb	r3,0(r2)
        return;
   4456c:	00000b06 	br	4459c <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   44570:	e0bffd17 	ldw	r2,-12(fp)
   44574:	10800384 	addi	r2,r2,14
   44578:	1009883a 	mov	r4,r2
   4457c:	e17ffe17 	ldw	r5,-8(fp)
   44580:	0045da80 	call	45da8 <OS_StrCopy>
   44584:	e0bff817 	ldw	r2,-32(fp)
   44588:	e0bffc15 	stw	r2,-16(fp)
   4458c:	e0bffc17 	ldw	r2,-16(fp)
   44590:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   44594:	e0bfff17 	ldw	r2,-4(fp)
   44598:	10000005 	stb	zero,0(r2)
}
   4459c:	e037883a 	mov	sp,fp
   445a0:	dfc00117 	ldw	ra,4(sp)
   445a4:	df000017 	ldw	fp,0(sp)
   445a8:	dec00204 	addi	sp,sp,8
   445ac:	f800283a 	ret

000445b0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   445b0:	deffed04 	addi	sp,sp,-76
   445b4:	dfc01215 	stw	ra,72(sp)
   445b8:	df001115 	stw	fp,68(sp)
   445bc:	df001104 	addi	fp,sp,68
   445c0:	e13ffc15 	stw	r4,-16(fp)
   445c4:	e17ffd15 	stw	r5,-12(fp)
   445c8:	e1bffe15 	stw	r6,-8(fp)
   445cc:	3805883a 	mov	r2,r7
   445d0:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   445d4:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   445d8:	e0800217 	ldw	r2,8(fp)
   445dc:	1000021e 	bne	r2,zero,445e8 <OSEventPendMulti+0x38>
        return (0);
   445e0:	0005883a 	mov	r2,zero
   445e4:	00017106 	br	44bac <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   445e8:	e0bffc17 	ldw	r2,-16(fp)
   445ec:	1000051e 	bne	r2,zero,44604 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   445f0:	e0800217 	ldw	r2,8(fp)
   445f4:	00c00104 	movi	r3,4
   445f8:	10c00005 	stb	r3,0(r2)
        return (0);
   445fc:	0005883a 	mov	r2,zero
   44600:	00016a06 	br	44bac <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   44604:	e0bffd17 	ldw	r2,-12(fp)
   44608:	1000051e 	bne	r2,zero,44620 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   4460c:	e0800217 	ldw	r2,8(fp)
   44610:	00c00104 	movi	r3,4
   44614:	10c00005 	stb	r3,0(r2)
        return (0);
   44618:	0005883a 	mov	r2,zero
   4461c:	00016306 	br	44bac <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   44620:	e0bffe17 	ldw	r2,-8(fp)
   44624:	1000051e 	bne	r2,zero,4463c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   44628:	e0800217 	ldw	r2,8(fp)
   4462c:	00c00104 	movi	r3,4
   44630:	10c00005 	stb	r3,0(r2)
        return (0);
   44634:	0005883a 	mov	r2,zero
   44638:	00015c06 	br	44bac <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   4463c:	e0bffd17 	ldw	r2,-12(fp)
   44640:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   44644:	e0bffc17 	ldw	r2,-16(fp)
   44648:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   4464c:	e0bfef17 	ldw	r2,-68(fp)
   44650:	10800017 	ldw	r2,0(r2)
   44654:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   44658:	00001906 	br	446c0 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   4465c:	e0bff017 	ldw	r2,-64(fp)
   44660:	10800003 	ldbu	r2,0(r2)
   44664:	10803fcc 	andi	r2,r2,255
   44668:	10c000a0 	cmpeqi	r3,r2,2
   4466c:	1800091e 	bne	r3,zero,44694 <OSEventPendMulti+0xe4>
   44670:	10c000e0 	cmpeqi	r3,r2,3
   44674:	1800091e 	bne	r3,zero,4469c <OSEventPendMulti+0xec>
   44678:	10800060 	cmpeqi	r2,r2,1
   4467c:	1000091e 	bne	r2,zero,446a4 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   44680:	e0800217 	ldw	r2,8(fp)
   44684:	00c00044 	movi	r3,1
   44688:	10c00005 	stb	r3,0(r2)
                 return (0);
   4468c:	0005883a 	mov	r2,zero
   44690:	00014606 	br	44bac <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   44694:	0001883a 	nop
   44698:	00000306 	br	446a8 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   4469c:	0001883a 	nop
   446a0:	00000106 	br	446a8 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   446a4:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   446a8:	e0bfef17 	ldw	r2,-68(fp)
   446ac:	10800104 	addi	r2,r2,4
   446b0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   446b4:	e0bfef17 	ldw	r2,-68(fp)
   446b8:	10800017 	ldw	r2,0(r2)
   446bc:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   446c0:	e0bff017 	ldw	r2,-64(fp)
   446c4:	103fe51e 	bne	r2,zero,4465c <__alt_data_end+0xfffceafc>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   446c8:	d0a73803 	ldbu	r2,-25376(gp)
   446cc:	10803fcc 	andi	r2,r2,255
   446d0:	10000526 	beq	r2,zero,446e8 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   446d4:	e0800217 	ldw	r2,8(fp)
   446d8:	00c00084 	movi	r3,2
   446dc:	10c00005 	stb	r3,0(r2)
        return (0);
   446e0:	0005883a 	mov	r2,zero
   446e4:	00013106 	br	44bac <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   446e8:	d0a72a03 	ldbu	r2,-25432(gp)
   446ec:	10803fcc 	andi	r2,r2,255
   446f0:	10000526 	beq	r2,zero,44708 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   446f4:	e0800217 	ldw	r2,8(fp)
   446f8:	00c00344 	movi	r3,13
   446fc:	10c00005 	stb	r3,0(r2)
        return (0);
   44700:	0005883a 	mov	r2,zero
   44704:	00012906 	br	44bac <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44708:	0005303a 	rdctl	r2,status
   4470c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44710:	e0fff517 	ldw	r3,-44(fp)
   44714:	00bfff84 	movi	r2,-2
   44718:	1884703a 	and	r2,r3,r2
   4471c:	1001703a 	wrctl	status,r2
  
  return context;
   44720:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   44724:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   44728:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   4472c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   44730:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   44734:	e0bffc17 	ldw	r2,-16(fp)
   44738:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   4473c:	e0bfef17 	ldw	r2,-68(fp)
   44740:	10800017 	ldw	r2,0(r2)
   44744:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   44748:	00008106 	br	44950 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   4474c:	e0bff017 	ldw	r2,-64(fp)
   44750:	10800003 	ldbu	r2,0(r2)
   44754:	10803fcc 	andi	r2,r2,255
   44758:	10c000a0 	cmpeqi	r3,r2,2
   4475c:	18003c1e 	bne	r3,zero,44850 <OSEventPendMulti+0x2a0>
   44760:	10c000e0 	cmpeqi	r3,r2,3
   44764:	1800031e 	bne	r3,zero,44774 <OSEventPendMulti+0x1c4>
   44768:	10800060 	cmpeqi	r2,r2,1
   4476c:	10001e1e 	bne	r2,zero,447e8 <OSEventPendMulti+0x238>
   44770:	00006606 	br	4490c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   44774:	e0bff017 	ldw	r2,-64(fp)
   44778:	1080020b 	ldhu	r2,8(r2)
   4477c:	10bfffcc 	andi	r2,r2,65535
   44780:	10001526 	beq	r2,zero,447d8 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   44784:	e0bff017 	ldw	r2,-64(fp)
   44788:	1080020b 	ldhu	r2,8(r2)
   4478c:	10bfffc4 	addi	r2,r2,-1
   44790:	1007883a 	mov	r3,r2
   44794:	e0bff017 	ldw	r2,-64(fp)
   44798:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   4479c:	e0bffd17 	ldw	r2,-12(fp)
   447a0:	10c00104 	addi	r3,r2,4
   447a4:	e0fffd15 	stw	r3,-12(fp)
   447a8:	e0fff017 	ldw	r3,-64(fp)
   447ac:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   447b0:	00800044 	movi	r2,1
   447b4:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   447b8:	e0bffe17 	ldw	r2,-8(fp)
   447bc:	10c00104 	addi	r3,r2,4
   447c0:	e0fffe15 	stw	r3,-8(fp)
   447c4:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   447c8:	e0bff18b 	ldhu	r2,-58(fp)
   447cc:	10800044 	addi	r2,r2,1
   447d0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   447d4:	00005806 	br	44938 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   447d8:	e0bff203 	ldbu	r2,-56(fp)
   447dc:	10800054 	ori	r2,r2,1
   447e0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   447e4:	00005406 	br	44938 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   447e8:	e0bff017 	ldw	r2,-64(fp)
   447ec:	10800117 	ldw	r2,4(r2)
   447f0:	10001326 	beq	r2,zero,44840 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   447f4:	e0bffe17 	ldw	r2,-8(fp)
   447f8:	10c00104 	addi	r3,r2,4
   447fc:	e0fffe15 	stw	r3,-8(fp)
   44800:	e0fff017 	ldw	r3,-64(fp)
   44804:	18c00117 	ldw	r3,4(r3)
   44808:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   4480c:	e0bff017 	ldw	r2,-64(fp)
   44810:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   44814:	e0bffd17 	ldw	r2,-12(fp)
   44818:	10c00104 	addi	r3,r2,4
   4481c:	e0fffd15 	stw	r3,-12(fp)
   44820:	e0fff017 	ldw	r3,-64(fp)
   44824:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   44828:	00800044 	movi	r2,1
   4482c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   44830:	e0bff18b 	ldhu	r2,-58(fp)
   44834:	10800044 	addi	r2,r2,1
   44838:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   4483c:	00003e06 	br	44938 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   44840:	e0bff203 	ldbu	r2,-56(fp)
   44844:	10800094 	ori	r2,r2,2
   44848:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   4484c:	00003a06 	br	44938 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   44850:	e0bff017 	ldw	r2,-64(fp)
   44854:	10800117 	ldw	r2,4(r2)
   44858:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   4485c:	e0bff417 	ldw	r2,-48(fp)
   44860:	1080058b 	ldhu	r2,22(r2)
   44864:	10bfffcc 	andi	r2,r2,65535
   44868:	10002426 	beq	r2,zero,448fc <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   4486c:	e0bffe17 	ldw	r2,-8(fp)
   44870:	10c00104 	addi	r3,r2,4
   44874:	e0fffe15 	stw	r3,-8(fp)
   44878:	e0fff417 	ldw	r3,-48(fp)
   4487c:	18c00417 	ldw	r3,16(r3)
   44880:	19400104 	addi	r5,r3,4
   44884:	e13ff417 	ldw	r4,-48(fp)
   44888:	21400415 	stw	r5,16(r4)
   4488c:	18c00017 	ldw	r3,0(r3)
   44890:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   44894:	e0bff417 	ldw	r2,-48(fp)
   44898:	10c00417 	ldw	r3,16(r2)
   4489c:	e0bff417 	ldw	r2,-48(fp)
   448a0:	10800217 	ldw	r2,8(r2)
   448a4:	1880041e 	bne	r3,r2,448b8 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   448a8:	e0bff417 	ldw	r2,-48(fp)
   448ac:	10c00117 	ldw	r3,4(r2)
   448b0:	e0bff417 	ldw	r2,-48(fp)
   448b4:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   448b8:	e0bff417 	ldw	r2,-48(fp)
   448bc:	1080058b 	ldhu	r2,22(r2)
   448c0:	10bfffc4 	addi	r2,r2,-1
   448c4:	1007883a 	mov	r3,r2
   448c8:	e0bff417 	ldw	r2,-48(fp)
   448cc:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   448d0:	e0bffd17 	ldw	r2,-12(fp)
   448d4:	10c00104 	addi	r3,r2,4
   448d8:	e0fffd15 	stw	r3,-12(fp)
   448dc:	e0fff017 	ldw	r3,-64(fp)
   448e0:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   448e4:	00800044 	movi	r2,1
   448e8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   448ec:	e0bff18b 	ldhu	r2,-58(fp)
   448f0:	10800044 	addi	r2,r2,1
   448f4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   448f8:	00000f06 	br	44938 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   448fc:	e0bff203 	ldbu	r2,-56(fp)
   44900:	10800114 	ori	r2,r2,4
   44904:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   44908:	00000b06 	br	44938 <OSEventPendMulti+0x388>
   4490c:	e0bff317 	ldw	r2,-52(fp)
   44910:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44914:	e0bff617 	ldw	r2,-40(fp)
   44918:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   4491c:	e0bffd17 	ldw	r2,-12(fp)
   44920:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   44924:	e0800217 	ldw	r2,8(fp)
   44928:	00c00044 	movi	r3,1
   4492c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   44930:	e0bff18b 	ldhu	r2,-58(fp)
   44934:	00009d06 	br	44bac <OSEventPendMulti+0x5fc>
        }
        pevents++;
   44938:	e0bfef17 	ldw	r2,-68(fp)
   4493c:	10800104 	addi	r2,r2,4
   44940:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   44944:	e0bfef17 	ldw	r2,-68(fp)
   44948:	10800017 	ldw	r2,0(r2)
   4494c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   44950:	e0bff017 	ldw	r2,-64(fp)
   44954:	103f7d1e 	bne	r2,zero,4474c <__alt_data_end+0xfffcebec>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   44958:	e0bff103 	ldbu	r2,-60(fp)
   4495c:	10800058 	cmpnei	r2,r2,1
   44960:	10000a1e 	bne	r2,zero,4498c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   44964:	e0bffd17 	ldw	r2,-12(fp)
   44968:	10000015 	stw	zero,0(r2)
   4496c:	e0bff317 	ldw	r2,-52(fp)
   44970:	e0bff715 	stw	r2,-36(fp)
   44974:	e0bff717 	ldw	r2,-36(fp)
   44978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   4497c:	e0800217 	ldw	r2,8(fp)
   44980:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   44984:	e0bff18b 	ldhu	r2,-58(fp)
   44988:	00008806 	br	44bac <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   4498c:	d0a73917 	ldw	r2,-25372(gp)
   44990:	d0e73917 	ldw	r3,-25372(gp)
   44994:	19000c03 	ldbu	r4,48(r3)
   44998:	e0fff203 	ldbu	r3,-56(fp)
   4499c:	20c6b03a 	or	r3,r4,r3
   449a0:	1809883a 	mov	r4,r3
   449a4:	00ffe004 	movi	r3,-128
   449a8:	20c6b03a 	or	r3,r4,r3
   449ac:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   449b0:	d0a73917 	ldw	r2,-25372(gp)
   449b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   449b8:	d0a73917 	ldw	r2,-25372(gp)
   449bc:	e0ffff0b 	ldhu	r3,-4(fp)
   449c0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   449c4:	e13ffc17 	ldw	r4,-16(fp)
   449c8:	00454f80 	call	454f8 <OS_EventTaskWaitMulti>
   449cc:	e0bff317 	ldw	r2,-52(fp)
   449d0:	e0bff815 	stw	r2,-32(fp)
   449d4:	e0bff817 	ldw	r2,-32(fp)
   449d8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   449dc:	0045c6c0 	call	45c6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   449e0:	0005303a 	rdctl	r2,status
   449e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   449e8:	e0fff917 	ldw	r3,-28(fp)
   449ec:	00bfff84 	movi	r2,-2
   449f0:	1884703a 	and	r2,r3,r2
   449f4:	1001703a 	wrctl	status,r2
  
  return context;
   449f8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   449fc:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   44a00:	d0a73917 	ldw	r2,-25372(gp)
   44a04:	10800c43 	ldbu	r2,49(r2)
   44a08:	10803fcc 	andi	r2,r2,255
   44a0c:	10000226 	beq	r2,zero,44a18 <OSEventPendMulti+0x468>
   44a10:	108000a0 	cmpeqi	r2,r2,2
   44a14:	10001826 	beq	r2,zero,44a78 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   44a18:	d0a73917 	ldw	r2,-25372(gp)
   44a1c:	10800717 	ldw	r2,28(r2)
   44a20:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   44a24:	e0bff017 	ldw	r2,-64(fp)
   44a28:	10000b26 	beq	r2,zero,44a58 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   44a2c:	e0bffd17 	ldw	r2,-12(fp)
   44a30:	10c00104 	addi	r3,r2,4
   44a34:	e0fffd15 	stw	r3,-12(fp)
   44a38:	e0fff017 	ldw	r3,-64(fp)
   44a3c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   44a40:	e0bffd17 	ldw	r2,-12(fp)
   44a44:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   44a48:	e0bff18b 	ldhu	r2,-58(fp)
   44a4c:	10800044 	addi	r2,r2,1
   44a50:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   44a54:	00000d06 	br	44a8c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   44a58:	d0a73917 	ldw	r2,-25372(gp)
   44a5c:	00c00044 	movi	r3,1
   44a60:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   44a64:	d0a73917 	ldw	r2,-25372(gp)
   44a68:	1009883a 	mov	r4,r2
   44a6c:	e17ffc17 	ldw	r5,-16(fp)
   44a70:	00456f80 	call	456f8 <OS_EventTaskRemoveMulti>
             }
			 break;
   44a74:	00000506 	br	44a8c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   44a78:	d0a73917 	ldw	r2,-25372(gp)
   44a7c:	1009883a 	mov	r4,r2
   44a80:	e17ffc17 	ldw	r5,-16(fp)
   44a84:	00456f80 	call	456f8 <OS_EventTaskRemoveMulti>
             break;
   44a88:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   44a8c:	d0a73917 	ldw	r2,-25372(gp)
   44a90:	10800c43 	ldbu	r2,49(r2)
   44a94:	10803fcc 	andi	r2,r2,255
   44a98:	10000326 	beq	r2,zero,44aa8 <OSEventPendMulti+0x4f8>
   44a9c:	108000a0 	cmpeqi	r2,r2,2
   44aa0:	1000231e 	bne	r2,zero,44b30 <OSEventPendMulti+0x580>
   44aa4:	00002a06 	br	44b50 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   44aa8:	e0bff017 	ldw	r2,-64(fp)
   44aac:	10800003 	ldbu	r2,0(r2)
   44ab0:	10803fcc 	andi	r2,r2,255
   44ab4:	0080100e 	bge	zero,r2,44af8 <OSEventPendMulti+0x548>
   44ab8:	10c000d0 	cmplti	r3,r2,3
   44abc:	1800071e 	bne	r3,zero,44adc <OSEventPendMulti+0x52c>
   44ac0:	108000e0 	cmpeqi	r2,r2,3
   44ac4:	10000c26 	beq	r2,zero,44af8 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   44ac8:	e0bffe17 	ldw	r2,-8(fp)
   44acc:	10c00104 	addi	r3,r2,4
   44ad0:	e0fffe15 	stw	r3,-8(fp)
   44ad4:	10000015 	stw	zero,0(r2)
                      break;
   44ad8:	00001206 	br	44b24 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   44adc:	e0bffe17 	ldw	r2,-8(fp)
   44ae0:	10c00104 	addi	r3,r2,4
   44ae4:	e0fffe15 	stw	r3,-8(fp)
   44ae8:	d0e73917 	ldw	r3,-25372(gp)
   44aec:	18c00917 	ldw	r3,36(r3)
   44af0:	10c00015 	stw	r3,0(r2)
                      break;
   44af4:	00000b06 	br	44b24 <OSEventPendMulti+0x574>
   44af8:	e0bff317 	ldw	r2,-52(fp)
   44afc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44b00:	e0bffa17 	ldw	r2,-24(fp)
   44b04:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   44b08:	e0bffd17 	ldw	r2,-12(fp)
   44b0c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   44b10:	e0800217 	ldw	r2,8(fp)
   44b14:	00c00044 	movi	r3,1
   44b18:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   44b1c:	e0bff18b 	ldhu	r2,-58(fp)
   44b20:	00002206 	br	44bac <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   44b24:	e0800217 	ldw	r2,8(fp)
   44b28:	10000005 	stb	zero,0(r2)
             break;
   44b2c:	00001006 	br	44b70 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   44b30:	e0bffe17 	ldw	r2,-8(fp)
   44b34:	10c00104 	addi	r3,r2,4
   44b38:	e0fffe15 	stw	r3,-8(fp)
   44b3c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   44b40:	e0800217 	ldw	r2,8(fp)
   44b44:	00c00384 	movi	r3,14
   44b48:	10c00005 	stb	r3,0(r2)
             break;
   44b4c:	00000806 	br	44b70 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   44b50:	e0bffe17 	ldw	r2,-8(fp)
   44b54:	10c00104 	addi	r3,r2,4
   44b58:	e0fffe15 	stw	r3,-8(fp)
   44b5c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   44b60:	e0800217 	ldw	r2,8(fp)
   44b64:	00c00284 	movi	r3,10
   44b68:	10c00005 	stb	r3,0(r2)
             break;
   44b6c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   44b70:	d0a73917 	ldw	r2,-25372(gp)
   44b74:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   44b78:	d0a73917 	ldw	r2,-25372(gp)
   44b7c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   44b80:	d0a73917 	ldw	r2,-25372(gp)
   44b84:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   44b88:	d0a73917 	ldw	r2,-25372(gp)
   44b8c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   44b90:	d0a73917 	ldw	r2,-25372(gp)
   44b94:	10000915 	stw	zero,36(r2)
   44b98:	e0bff317 	ldw	r2,-52(fp)
   44b9c:	e0bffb15 	stw	r2,-20(fp)
   44ba0:	e0bffb17 	ldw	r2,-20(fp)
   44ba4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   44ba8:	e0bff18b 	ldhu	r2,-58(fp)
}
   44bac:	e037883a 	mov	sp,fp
   44bb0:	dfc00117 	ldw	ra,4(sp)
   44bb4:	df000017 	ldw	fp,0(sp)
   44bb8:	dec00204 	addi	sp,sp,8
   44bbc:	f800283a 	ret

00044bc0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   44bc0:	defffe04 	addi	sp,sp,-8
   44bc4:	dfc00115 	stw	ra,4(sp)
   44bc8:	df000015 	stw	fp,0(sp)
   44bcc:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   44bd0:	004ea800 	call	4ea80 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   44bd4:	00459340 	call	45934 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   44bd8:	00459780 	call	45978 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   44bdc:	0045ad80 	call	45ad8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   44be0:	00458580 	call	45858 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   44be4:	0047a480 	call	47a48 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   44be8:	00483900 	call	48390 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   44bec:	00495d00 	call	495d0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   44bf0:	00459e00 	call	459e0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   44bf4:	0045a5c0 	call	45a5c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   44bf8:	004ea9c0 	call	4ea9c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   44bfc:	00463340 	call	46334 <OSDebugInit>
#endif
}
   44c00:	e037883a 	mov	sp,fp
   44c04:	dfc00117 	ldw	ra,4(sp)
   44c08:	df000017 	ldw	fp,0(sp)
   44c0c:	dec00204 	addi	sp,sp,8
   44c10:	f800283a 	ret

00044c14 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   44c14:	defffc04 	addi	sp,sp,-16
   44c18:	df000315 	stw	fp,12(sp)
   44c1c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   44c20:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   44c24:	d0a72a43 	ldbu	r2,-25431(gp)
   44c28:	10803fcc 	andi	r2,r2,255
   44c2c:	10800058 	cmpnei	r2,r2,1
   44c30:	1000131e 	bne	r2,zero,44c80 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44c34:	0005303a 	rdctl	r2,status
   44c38:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44c3c:	e0fffe17 	ldw	r3,-8(fp)
   44c40:	00bfff84 	movi	r2,-2
   44c44:	1884703a 	and	r2,r3,r2
   44c48:	1001703a 	wrctl	status,r2
  
  return context;
   44c4c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   44c50:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   44c54:	d0a73803 	ldbu	r2,-25376(gp)
   44c58:	10803fcc 	andi	r2,r2,255
   44c5c:	10803fe0 	cmpeqi	r2,r2,255
   44c60:	1000031e 	bne	r2,zero,44c70 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   44c64:	d0a73803 	ldbu	r2,-25376(gp)
   44c68:	10800044 	addi	r2,r2,1
   44c6c:	d0a73805 	stb	r2,-25376(gp)
   44c70:	e0bffd17 	ldw	r2,-12(fp)
   44c74:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44c78:	e0bfff17 	ldw	r2,-4(fp)
   44c7c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   44c80:	e037883a 	mov	sp,fp
   44c84:	df000017 	ldw	fp,0(sp)
   44c88:	dec00104 	addi	sp,sp,4
   44c8c:	f800283a 	ret

00044c90 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   44c90:	defffb04 	addi	sp,sp,-20
   44c94:	dfc00415 	stw	ra,16(sp)
   44c98:	df000315 	stw	fp,12(sp)
   44c9c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   44ca0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   44ca4:	d0a72a43 	ldbu	r2,-25431(gp)
   44ca8:	10803fcc 	andi	r2,r2,255
   44cac:	10800058 	cmpnei	r2,r2,1
   44cb0:	10002f1e 	bne	r2,zero,44d70 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44cb4:	0005303a 	rdctl	r2,status
   44cb8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44cbc:	e0fffe17 	ldw	r3,-8(fp)
   44cc0:	00bfff84 	movi	r2,-2
   44cc4:	1884703a 	and	r2,r3,r2
   44cc8:	1001703a 	wrctl	status,r2
  
  return context;
   44ccc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   44cd0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   44cd4:	d0a73803 	ldbu	r2,-25376(gp)
   44cd8:	10803fcc 	andi	r2,r2,255
   44cdc:	10000326 	beq	r2,zero,44cec <OSIntExit+0x5c>
            OSIntNesting--;
   44ce0:	d0a73803 	ldbu	r2,-25376(gp)
   44ce4:	10bfffc4 	addi	r2,r2,-1
   44ce8:	d0a73805 	stb	r2,-25376(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   44cec:	d0a73803 	ldbu	r2,-25376(gp)
   44cf0:	10803fcc 	andi	r2,r2,255
   44cf4:	10001a1e 	bne	r2,zero,44d60 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   44cf8:	d0a72a03 	ldbu	r2,-25432(gp)
   44cfc:	10803fcc 	andi	r2,r2,255
   44d00:	1000171e 	bne	r2,zero,44d60 <OSIntExit+0xd0>
                OS_SchedNew();
   44d04:	0045d380 	call	45d38 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   44d08:	d0e72c03 	ldbu	r3,-25424(gp)
   44d0c:	d0a72c43 	ldbu	r2,-25423(gp)
   44d10:	18c03fcc 	andi	r3,r3,255
   44d14:	10803fcc 	andi	r2,r2,255
   44d18:	18801126 	beq	r3,r2,44d60 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   44d1c:	d0a72c03 	ldbu	r2,-25424(gp)
   44d20:	10c03fcc 	andi	r3,r2,255
   44d24:	008001b4 	movhi	r2,6
   44d28:	10afab04 	addi	r2,r2,-16724
   44d2c:	18c7883a 	add	r3,r3,r3
   44d30:	18c7883a 	add	r3,r3,r3
   44d34:	10c5883a 	add	r2,r2,r3
   44d38:	10800017 	ldw	r2,0(r2)
   44d3c:	d0a73415 	stw	r2,-25392(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   44d40:	d0a73417 	ldw	r2,-25392(gp)
   44d44:	10c00e17 	ldw	r3,56(r2)
   44d48:	18c00044 	addi	r3,r3,1
   44d4c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   44d50:	d0a72f17 	ldw	r2,-25412(gp)
   44d54:	10800044 	addi	r2,r2,1
   44d58:	d0a72f15 	stw	r2,-25412(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   44d5c:	004e6280 	call	4e628 <OSCtxSw>
   44d60:	e0bffd17 	ldw	r2,-12(fp)
   44d64:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44d68:	e0bfff17 	ldw	r2,-4(fp)
   44d6c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   44d70:	e037883a 	mov	sp,fp
   44d74:	dfc00117 	ldw	ra,4(sp)
   44d78:	df000017 	ldw	fp,0(sp)
   44d7c:	dec00204 	addi	sp,sp,8
   44d80:	f800283a 	ret

00044d84 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   44d84:	defffc04 	addi	sp,sp,-16
   44d88:	df000315 	stw	fp,12(sp)
   44d8c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   44d90:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   44d94:	d0a72a43 	ldbu	r2,-25431(gp)
   44d98:	10803fcc 	andi	r2,r2,255
   44d9c:	10800058 	cmpnei	r2,r2,1
   44da0:	1000161e 	bne	r2,zero,44dfc <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44da4:	0005303a 	rdctl	r2,status
   44da8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44dac:	e0fffe17 	ldw	r3,-8(fp)
   44db0:	00bfff84 	movi	r2,-2
   44db4:	1884703a 	and	r2,r3,r2
   44db8:	1001703a 	wrctl	status,r2
  
  return context;
   44dbc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   44dc0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   44dc4:	d0a73803 	ldbu	r2,-25376(gp)
   44dc8:	10803fcc 	andi	r2,r2,255
   44dcc:	1000071e 	bne	r2,zero,44dec <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   44dd0:	d0a72a03 	ldbu	r2,-25432(gp)
   44dd4:	10803fcc 	andi	r2,r2,255
   44dd8:	10803fe0 	cmpeqi	r2,r2,255
   44ddc:	1000031e 	bne	r2,zero,44dec <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   44de0:	d0a72a03 	ldbu	r2,-25432(gp)
   44de4:	10800044 	addi	r2,r2,1
   44de8:	d0a72a05 	stb	r2,-25432(gp)
   44dec:	e0bffd17 	ldw	r2,-12(fp)
   44df0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44df4:	e0bfff17 	ldw	r2,-4(fp)
   44df8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   44dfc:	e037883a 	mov	sp,fp
   44e00:	df000017 	ldw	fp,0(sp)
   44e04:	dec00104 	addi	sp,sp,4
   44e08:	f800283a 	ret

00044e0c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   44e0c:	defff804 	addi	sp,sp,-32
   44e10:	dfc00715 	stw	ra,28(sp)
   44e14:	df000615 	stw	fp,24(sp)
   44e18:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   44e1c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   44e20:	d0a72a43 	ldbu	r2,-25431(gp)
   44e24:	10803fcc 	andi	r2,r2,255
   44e28:	10800058 	cmpnei	r2,r2,1
   44e2c:	1000281e 	bne	r2,zero,44ed0 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44e30:	0005303a 	rdctl	r2,status
   44e34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44e38:	e0fffb17 	ldw	r3,-20(fp)
   44e3c:	00bfff84 	movi	r2,-2
   44e40:	1884703a 	and	r2,r3,r2
   44e44:	1001703a 	wrctl	status,r2
  
  return context;
   44e48:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   44e4c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   44e50:	d0a72a03 	ldbu	r2,-25432(gp)
   44e54:	10803fcc 	andi	r2,r2,255
   44e58:	10001926 	beq	r2,zero,44ec0 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   44e5c:	d0a72a03 	ldbu	r2,-25432(gp)
   44e60:	10bfffc4 	addi	r2,r2,-1
   44e64:	d0a72a05 	stb	r2,-25432(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   44e68:	d0a72a03 	ldbu	r2,-25432(gp)
   44e6c:	10803fcc 	andi	r2,r2,255
   44e70:	10000e1e 	bne	r2,zero,44eac <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   44e74:	d0a73803 	ldbu	r2,-25376(gp)
   44e78:	10803fcc 	andi	r2,r2,255
   44e7c:	1000061e 	bne	r2,zero,44e98 <OSSchedUnlock+0x8c>
   44e80:	e0bffa17 	ldw	r2,-24(fp)
   44e84:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44e88:	e0bffc17 	ldw	r2,-16(fp)
   44e8c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   44e90:	0045c6c0 	call	45c6c <OS_Sched>
   44e94:	00000e06 	br	44ed0 <OSSchedUnlock+0xc4>
   44e98:	e0bffa17 	ldw	r2,-24(fp)
   44e9c:	e0bffd15 	stw	r2,-12(fp)
   44ea0:	e0bffd17 	ldw	r2,-12(fp)
   44ea4:	1001703a 	wrctl	status,r2
   44ea8:	00000906 	br	44ed0 <OSSchedUnlock+0xc4>
   44eac:	e0bffa17 	ldw	r2,-24(fp)
   44eb0:	e0bffe15 	stw	r2,-8(fp)
   44eb4:	e0bffe17 	ldw	r2,-8(fp)
   44eb8:	1001703a 	wrctl	status,r2
   44ebc:	00000406 	br	44ed0 <OSSchedUnlock+0xc4>
   44ec0:	e0bffa17 	ldw	r2,-24(fp)
   44ec4:	e0bfff15 	stw	r2,-4(fp)
   44ec8:	e0bfff17 	ldw	r2,-4(fp)
   44ecc:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   44ed0:	e037883a 	mov	sp,fp
   44ed4:	dfc00117 	ldw	ra,4(sp)
   44ed8:	df000017 	ldw	fp,0(sp)
   44edc:	dec00204 	addi	sp,sp,8
   44ee0:	f800283a 	ret

00044ee4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   44ee4:	defffe04 	addi	sp,sp,-8
   44ee8:	dfc00115 	stw	ra,4(sp)
   44eec:	df000015 	stw	fp,0(sp)
   44ef0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   44ef4:	d0a72a43 	ldbu	r2,-25431(gp)
   44ef8:	10803fcc 	andi	r2,r2,255
   44efc:	10000f1e 	bne	r2,zero,44f3c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   44f00:	0045d380 	call	45d38 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   44f04:	d0a72c03 	ldbu	r2,-25424(gp)
   44f08:	d0a72c45 	stb	r2,-25423(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   44f0c:	d0a72c03 	ldbu	r2,-25424(gp)
   44f10:	10c03fcc 	andi	r3,r2,255
   44f14:	008001b4 	movhi	r2,6
   44f18:	10afab04 	addi	r2,r2,-16724
   44f1c:	18c7883a 	add	r3,r3,r3
   44f20:	18c7883a 	add	r3,r3,r3
   44f24:	10c5883a 	add	r2,r2,r3
   44f28:	10800017 	ldw	r2,0(r2)
   44f2c:	d0a73415 	stw	r2,-25392(gp)
        OSTCBCur      = OSTCBHighRdy;
   44f30:	d0a73417 	ldw	r2,-25392(gp)
   44f34:	d0a73915 	stw	r2,-25372(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   44f38:	004e6b40 	call	4e6b4 <OSStartHighRdy>
    }
}
   44f3c:	e037883a 	mov	sp,fp
   44f40:	dfc00117 	ldw	ra,4(sp)
   44f44:	df000017 	ldw	fp,0(sp)
   44f48:	dec00204 	addi	sp,sp,8
   44f4c:	f800283a 	ret

00044f50 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   44f50:	defff904 	addi	sp,sp,-28
   44f54:	dfc00615 	stw	ra,24(sp)
   44f58:	df000515 	stw	fp,20(sp)
   44f5c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   44f60:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   44f64:	01000084 	movi	r4,2
   44f68:	004ba780 	call	4ba78 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44f6c:	0005303a 	rdctl	r2,status
   44f70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44f74:	e0fffc17 	ldw	r3,-16(fp)
   44f78:	00bfff84 	movi	r2,-2
   44f7c:	1884703a 	and	r2,r3,r2
   44f80:	1001703a 	wrctl	status,r2
  
  return context;
   44f84:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   44f88:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   44f8c:	d0272b15 	stw	zero,-25428(gp)
   44f90:	e0bffb17 	ldw	r2,-20(fp)
   44f94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44f98:	e0bffd17 	ldw	r2,-12(fp)
   44f9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   44fa0:	01001904 	movi	r4,100
   44fa4:	004ba780 	call	4ba78 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44fa8:	0005303a 	rdctl	r2,status
   44fac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44fb0:	e0fffe17 	ldw	r3,-8(fp)
   44fb4:	00bfff84 	movi	r2,-2
   44fb8:	1884703a 	and	r2,r3,r2
   44fbc:	1001703a 	wrctl	status,r2
  
  return context;
   44fc0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   44fc4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   44fc8:	d0a72b17 	ldw	r2,-25428(gp)
   44fcc:	d0a73015 	stw	r2,-25408(gp)
    OSStatRdy    = OS_TRUE;
   44fd0:	00800044 	movi	r2,1
   44fd4:	d0a73c05 	stb	r2,-25360(gp)
   44fd8:	e0bffb17 	ldw	r2,-20(fp)
   44fdc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44fe0:	e0bfff17 	ldw	r2,-4(fp)
   44fe4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   44fe8:	e037883a 	mov	sp,fp
   44fec:	dfc00117 	ldw	ra,4(sp)
   44ff0:	df000017 	ldw	fp,0(sp)
   44ff4:	dec00204 	addi	sp,sp,8
   44ff8:	f800283a 	ret

00044ffc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   44ffc:	defff704 	addi	sp,sp,-36
   45000:	dfc00815 	stw	ra,32(sp)
   45004:	df000715 	stw	fp,28(sp)
   45008:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   4500c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   45010:	004ea640 	call	4ea64 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45014:	0005303a 	rdctl	r2,status
   45018:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4501c:	e0fffc17 	ldw	r3,-16(fp)
   45020:	00bfff84 	movi	r2,-2
   45024:	1884703a 	and	r2,r3,r2
   45028:	1001703a 	wrctl	status,r2
  
  return context;
   4502c:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   45030:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   45034:	d0a73a17 	ldw	r2,-25368(gp)
   45038:	10800044 	addi	r2,r2,1
   4503c:	d0a73a15 	stw	r2,-25368(gp)
   45040:	e0bffb17 	ldw	r2,-20(fp)
   45044:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45048:	e0bffd17 	ldw	r2,-12(fp)
   4504c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   45050:	d0a72a43 	ldbu	r2,-25431(gp)
   45054:	10803fcc 	andi	r2,r2,255
   45058:	10800058 	cmpnei	r2,r2,1
   4505c:	1000691e 	bne	r2,zero,45204 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   45060:	d0a72e03 	ldbu	r2,-25416(gp)
   45064:	10803fcc 	andi	r2,r2,255
   45068:	10c00060 	cmpeqi	r3,r2,1
   4506c:	1800061e 	bne	r3,zero,45088 <OSTimeTick+0x8c>
   45070:	10c000a0 	cmpeqi	r3,r2,2
   45074:	1800061e 	bne	r3,zero,45090 <OSTimeTick+0x94>
   45078:	10000a1e 	bne	r2,zero,450a4 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   4507c:	00800044 	movi	r2,1
   45080:	e0bffa05 	stb	r2,-24(fp)
                 break;
   45084:	00000b06 	br	450b4 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   45088:	e03ffa05 	stb	zero,-24(fp)
                 break;
   4508c:	00000906 	br	450b4 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   45090:	00800044 	movi	r2,1
   45094:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   45098:	00800044 	movi	r2,1
   4509c:	d0a72e05 	stb	r2,-25416(gp)
                 break;
   450a0:	00000406 	br	450b4 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   450a4:	00800044 	movi	r2,1
   450a8:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   450ac:	d0272e05 	stb	zero,-25416(gp)
                 break;
   450b0:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   450b4:	e0bffa03 	ldbu	r2,-24(fp)
   450b8:	1000011e 	bne	r2,zero,450c0 <OSTimeTick+0xc4>
            return;
   450bc:	00005106 	br	45204 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   450c0:	d0a72d17 	ldw	r2,-25420(gp)
   450c4:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   450c8:	00004906 	br	451f0 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   450cc:	0005303a 	rdctl	r2,status
   450d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   450d4:	e0fffe17 	ldw	r3,-8(fp)
   450d8:	00bfff84 	movi	r2,-2
   450dc:	1884703a 	and	r2,r3,r2
   450e0:	1001703a 	wrctl	status,r2
  
  return context;
   450e4:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   450e8:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   450ec:	e0bff917 	ldw	r2,-28(fp)
   450f0:	10800b8b 	ldhu	r2,46(r2)
   450f4:	10bfffcc 	andi	r2,r2,65535
   450f8:	10003626 	beq	r2,zero,451d4 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   450fc:	e0bff917 	ldw	r2,-28(fp)
   45100:	10800b8b 	ldhu	r2,46(r2)
   45104:	10bfffc4 	addi	r2,r2,-1
   45108:	1007883a 	mov	r3,r2
   4510c:	e0bff917 	ldw	r2,-28(fp)
   45110:	10c00b8d 	sth	r3,46(r2)
   45114:	e0bff917 	ldw	r2,-28(fp)
   45118:	10800b8b 	ldhu	r2,46(r2)
   4511c:	10bfffcc 	andi	r2,r2,65535
   45120:	10002c1e 	bne	r2,zero,451d4 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   45124:	e0bff917 	ldw	r2,-28(fp)
   45128:	10800c03 	ldbu	r2,48(r2)
   4512c:	10803fcc 	andi	r2,r2,255
   45130:	10800dcc 	andi	r2,r2,55
   45134:	10000b26 	beq	r2,zero,45164 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   45138:	e0bff917 	ldw	r2,-28(fp)
   4513c:	10c00c03 	ldbu	r3,48(r2)
   45140:	00bff204 	movi	r2,-56
   45144:	1884703a 	and	r2,r3,r2
   45148:	1007883a 	mov	r3,r2
   4514c:	e0bff917 	ldw	r2,-28(fp)
   45150:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   45154:	e0bff917 	ldw	r2,-28(fp)
   45158:	00c00044 	movi	r3,1
   4515c:	10c00c45 	stb	r3,49(r2)
   45160:	00000206 	br	4516c <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   45164:	e0bff917 	ldw	r2,-28(fp)
   45168:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   4516c:	e0bff917 	ldw	r2,-28(fp)
   45170:	10800c03 	ldbu	r2,48(r2)
   45174:	10803fcc 	andi	r2,r2,255
   45178:	1080020c 	andi	r2,r2,8
   4517c:	1000151e 	bne	r2,zero,451d4 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   45180:	e0bff917 	ldw	r2,-28(fp)
   45184:	10c00d83 	ldbu	r3,54(r2)
   45188:	d0a73603 	ldbu	r2,-25384(gp)
   4518c:	1884b03a 	or	r2,r3,r2
   45190:	d0a73605 	stb	r2,-25384(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   45194:	e0bff917 	ldw	r2,-28(fp)
   45198:	10800d03 	ldbu	r2,52(r2)
   4519c:	10c03fcc 	andi	r3,r2,255
   451a0:	e0bff917 	ldw	r2,-28(fp)
   451a4:	10800d03 	ldbu	r2,52(r2)
   451a8:	11003fcc 	andi	r4,r2,255
   451ac:	d0a73644 	addi	r2,gp,-25383
   451b0:	2085883a 	add	r2,r4,r2
   451b4:	11000003 	ldbu	r4,0(r2)
   451b8:	e0bff917 	ldw	r2,-28(fp)
   451bc:	10800d43 	ldbu	r2,53(r2)
   451c0:	2084b03a 	or	r2,r4,r2
   451c4:	1009883a 	mov	r4,r2
   451c8:	d0a73644 	addi	r2,gp,-25383
   451cc:	1885883a 	add	r2,r3,r2
   451d0:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   451d4:	e0bff917 	ldw	r2,-28(fp)
   451d8:	10800517 	ldw	r2,20(r2)
   451dc:	e0bff915 	stw	r2,-28(fp)
   451e0:	e0bffb17 	ldw	r2,-20(fp)
   451e4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   451e8:	e0bfff17 	ldw	r2,-4(fp)
   451ec:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   451f0:	e0bff917 	ldw	r2,-28(fp)
   451f4:	10800c83 	ldbu	r2,50(r2)
   451f8:	10803fcc 	andi	r2,r2,255
   451fc:	10800518 	cmpnei	r2,r2,20
   45200:	103fb21e 	bne	r2,zero,450cc <__alt_data_end+0xfffcf56c>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   45204:	e037883a 	mov	sp,fp
   45208:	dfc00117 	ldw	ra,4(sp)
   4520c:	df000017 	ldw	fp,0(sp)
   45210:	dec00204 	addi	sp,sp,8
   45214:	f800283a 	ret

00045218 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   45218:	deffff04 	addi	sp,sp,-4
   4521c:	df000015 	stw	fp,0(sp)
   45220:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   45224:	00804784 	movi	r2,286
}
   45228:	e037883a 	mov	sp,fp
   4522c:	df000017 	ldw	fp,0(sp)
   45230:	dec00104 	addi	sp,sp,4
   45234:	f800283a 	ret

00045238 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   45238:	deffff04 	addi	sp,sp,-4
   4523c:	df000015 	stw	fp,0(sp)
   45240:	d839883a 	mov	fp,sp
}
   45244:	e037883a 	mov	sp,fp
   45248:	df000017 	ldw	fp,0(sp)
   4524c:	dec00104 	addi	sp,sp,4
   45250:	f800283a 	ret

00045254 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   45254:	defff804 	addi	sp,sp,-32
   45258:	dfc00715 	stw	ra,28(sp)
   4525c:	df000615 	stw	fp,24(sp)
   45260:	df000604 	addi	fp,sp,24
   45264:	e13ffc15 	stw	r4,-16(fp)
   45268:	e17ffd15 	stw	r5,-12(fp)
   4526c:	3007883a 	mov	r3,r6
   45270:	3805883a 	mov	r2,r7
   45274:	e0fffe05 	stb	r3,-8(fp)
   45278:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   4527c:	e0bffc17 	ldw	r2,-16(fp)
   45280:	10800283 	ldbu	r2,10(r2)
   45284:	10c03fcc 	andi	r3,r2,255
   45288:	00800174 	movhi	r2,5
   4528c:	10bcd704 	addi	r2,r2,-3236
   45290:	10c5883a 	add	r2,r2,r3
   45294:	10800003 	ldbu	r2,0(r2)
   45298:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   4529c:	e0bffa03 	ldbu	r2,-24(fp)
   452a0:	e0fffc17 	ldw	r3,-16(fp)
   452a4:	1885883a 	add	r2,r3,r2
   452a8:	10800204 	addi	r2,r2,8
   452ac:	108000c3 	ldbu	r2,3(r2)
   452b0:	10c03fcc 	andi	r3,r2,255
   452b4:	00800174 	movhi	r2,5
   452b8:	10bcd704 	addi	r2,r2,-3236
   452bc:	10c5883a 	add	r2,r2,r3
   452c0:	10800003 	ldbu	r2,0(r2)
   452c4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   452c8:	e0bffa03 	ldbu	r2,-24(fp)
   452cc:	100490fa 	slli	r2,r2,3
   452d0:	1007883a 	mov	r3,r2
   452d4:	e0bffa43 	ldbu	r2,-23(fp)
   452d8:	1885883a 	add	r2,r3,r2
   452dc:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   452e0:	e0fffa83 	ldbu	r3,-22(fp)
   452e4:	008001b4 	movhi	r2,6
   452e8:	10afab04 	addi	r2,r2,-16724
   452ec:	18c7883a 	add	r3,r3,r3
   452f0:	18c7883a 	add	r3,r3,r3
   452f4:	10c5883a 	add	r2,r2,r3
   452f8:	10800017 	ldw	r2,0(r2)
   452fc:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   45300:	e0bffb17 	ldw	r2,-20(fp)
   45304:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   45308:	e0bffb17 	ldw	r2,-20(fp)
   4530c:	e0fffd17 	ldw	r3,-12(fp)
   45310:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   45314:	e0bffb17 	ldw	r2,-20(fp)
   45318:	10800c03 	ldbu	r2,48(r2)
   4531c:	1007883a 	mov	r3,r2
   45320:	e0bffe03 	ldbu	r2,-8(fp)
   45324:	0084303a 	nor	r2,zero,r2
   45328:	1884703a 	and	r2,r3,r2
   4532c:	1007883a 	mov	r3,r2
   45330:	e0bffb17 	ldw	r2,-20(fp)
   45334:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   45338:	e0bffb17 	ldw	r2,-20(fp)
   4533c:	e0ffff03 	ldbu	r3,-4(fp)
   45340:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   45344:	e0bffb17 	ldw	r2,-20(fp)
   45348:	10800c03 	ldbu	r2,48(r2)
   4534c:	10803fcc 	andi	r2,r2,255
   45350:	1080020c 	andi	r2,r2,8
   45354:	1000111e 	bne	r2,zero,4539c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   45358:	e0bffb17 	ldw	r2,-20(fp)
   4535c:	10c00d83 	ldbu	r3,54(r2)
   45360:	d0a73603 	ldbu	r2,-25384(gp)
   45364:	1884b03a 	or	r2,r3,r2
   45368:	d0a73605 	stb	r2,-25384(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   4536c:	e0fffa03 	ldbu	r3,-24(fp)
   45370:	e13ffa03 	ldbu	r4,-24(fp)
   45374:	d0a73644 	addi	r2,gp,-25383
   45378:	2085883a 	add	r2,r4,r2
   4537c:	11000003 	ldbu	r4,0(r2)
   45380:	e0bffb17 	ldw	r2,-20(fp)
   45384:	10800d43 	ldbu	r2,53(r2)
   45388:	2084b03a 	or	r2,r4,r2
   4538c:	1009883a 	mov	r4,r2
   45390:	d0a73644 	addi	r2,gp,-25383
   45394:	1885883a 	add	r2,r3,r2
   45398:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   4539c:	e13ffb17 	ldw	r4,-20(fp)
   453a0:	e17ffc17 	ldw	r5,-16(fp)
   453a4:	00456440 	call	45644 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   453a8:	e0bffb17 	ldw	r2,-20(fp)
   453ac:	10800817 	ldw	r2,32(r2)
   453b0:	10000826 	beq	r2,zero,453d4 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   453b4:	e0bffb17 	ldw	r2,-20(fp)
   453b8:	10800817 	ldw	r2,32(r2)
   453bc:	e13ffb17 	ldw	r4,-20(fp)
   453c0:	100b883a 	mov	r5,r2
   453c4:	00456f80 	call	456f8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   453c8:	e0bffb17 	ldw	r2,-20(fp)
   453cc:	e0fffc17 	ldw	r3,-16(fp)
   453d0:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   453d4:	e0bffa83 	ldbu	r2,-22(fp)
}
   453d8:	e037883a 	mov	sp,fp
   453dc:	dfc00117 	ldw	ra,4(sp)
   453e0:	df000017 	ldw	fp,0(sp)
   453e4:	dec00204 	addi	sp,sp,8
   453e8:	f800283a 	ret

000453ec <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   453ec:	defffd04 	addi	sp,sp,-12
   453f0:	df000215 	stw	fp,8(sp)
   453f4:	df000204 	addi	fp,sp,8
   453f8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   453fc:	d0a73917 	ldw	r2,-25372(gp)
   45400:	e0ffff17 	ldw	r3,-4(fp)
   45404:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   45408:	d0a73917 	ldw	r2,-25372(gp)
   4540c:	10800d03 	ldbu	r2,52(r2)
   45410:	10803fcc 	andi	r2,r2,255
   45414:	d0e73917 	ldw	r3,-25372(gp)
   45418:	18c00d03 	ldbu	r3,52(r3)
   4541c:	18c03fcc 	andi	r3,r3,255
   45420:	e13fff17 	ldw	r4,-4(fp)
   45424:	20c7883a 	add	r3,r4,r3
   45428:	18c00204 	addi	r3,r3,8
   4542c:	190000c3 	ldbu	r4,3(r3)
   45430:	d0e73917 	ldw	r3,-25372(gp)
   45434:	18c00d43 	ldbu	r3,53(r3)
   45438:	20c6b03a 	or	r3,r4,r3
   4543c:	1809883a 	mov	r4,r3
   45440:	e0ffff17 	ldw	r3,-4(fp)
   45444:	1885883a 	add	r2,r3,r2
   45448:	10800204 	addi	r2,r2,8
   4544c:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   45450:	e0bfff17 	ldw	r2,-4(fp)
   45454:	10c00283 	ldbu	r3,10(r2)
   45458:	d0a73917 	ldw	r2,-25372(gp)
   4545c:	10800d83 	ldbu	r2,54(r2)
   45460:	1884b03a 	or	r2,r3,r2
   45464:	1007883a 	mov	r3,r2
   45468:	e0bfff17 	ldw	r2,-4(fp)
   4546c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   45470:	d0a73917 	ldw	r2,-25372(gp)
   45474:	10800d03 	ldbu	r2,52(r2)
   45478:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   4547c:	e0fffe03 	ldbu	r3,-8(fp)
   45480:	e13ffe03 	ldbu	r4,-8(fp)
   45484:	d0a73644 	addi	r2,gp,-25383
   45488:	2085883a 	add	r2,r4,r2
   4548c:	10800003 	ldbu	r2,0(r2)
   45490:	1009883a 	mov	r4,r2
   45494:	d0a73917 	ldw	r2,-25372(gp)
   45498:	10800d43 	ldbu	r2,53(r2)
   4549c:	0084303a 	nor	r2,zero,r2
   454a0:	2084703a 	and	r2,r4,r2
   454a4:	1009883a 	mov	r4,r2
   454a8:	d0a73644 	addi	r2,gp,-25383
   454ac:	1885883a 	add	r2,r3,r2
   454b0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   454b4:	e0fffe03 	ldbu	r3,-8(fp)
   454b8:	d0a73644 	addi	r2,gp,-25383
   454bc:	1885883a 	add	r2,r3,r2
   454c0:	10800003 	ldbu	r2,0(r2)
   454c4:	10803fcc 	andi	r2,r2,255
   454c8:	1000071e 	bne	r2,zero,454e8 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   454cc:	d0a73917 	ldw	r2,-25372(gp)
   454d0:	10800d83 	ldbu	r2,54(r2)
   454d4:	0084303a 	nor	r2,zero,r2
   454d8:	1007883a 	mov	r3,r2
   454dc:	d0a73603 	ldbu	r2,-25384(gp)
   454e0:	1884703a 	and	r2,r3,r2
   454e4:	d0a73605 	stb	r2,-25384(gp)
    }
}
   454e8:	e037883a 	mov	sp,fp
   454ec:	df000017 	ldw	fp,0(sp)
   454f0:	dec00104 	addi	sp,sp,4
   454f4:	f800283a 	ret

000454f8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   454f8:	defffb04 	addi	sp,sp,-20
   454fc:	df000415 	stw	fp,16(sp)
   45500:	df000404 	addi	fp,sp,16
   45504:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   45508:	d0a73917 	ldw	r2,-25372(gp)
   4550c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   45510:	d0a73917 	ldw	r2,-25372(gp)
   45514:	e0ffff17 	ldw	r3,-4(fp)
   45518:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   4551c:	e0bfff17 	ldw	r2,-4(fp)
   45520:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   45524:	e0bffc17 	ldw	r2,-16(fp)
   45528:	10800017 	ldw	r2,0(r2)
   4552c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   45530:	00002006 	br	455b4 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   45534:	d0a73917 	ldw	r2,-25372(gp)
   45538:	10800d03 	ldbu	r2,52(r2)
   4553c:	10803fcc 	andi	r2,r2,255
   45540:	d0e73917 	ldw	r3,-25372(gp)
   45544:	18c00d03 	ldbu	r3,52(r3)
   45548:	18c03fcc 	andi	r3,r3,255
   4554c:	e13ffd17 	ldw	r4,-12(fp)
   45550:	20c7883a 	add	r3,r4,r3
   45554:	18c00204 	addi	r3,r3,8
   45558:	190000c3 	ldbu	r4,3(r3)
   4555c:	d0e73917 	ldw	r3,-25372(gp)
   45560:	18c00d43 	ldbu	r3,53(r3)
   45564:	20c6b03a 	or	r3,r4,r3
   45568:	1809883a 	mov	r4,r3
   4556c:	e0fffd17 	ldw	r3,-12(fp)
   45570:	1885883a 	add	r2,r3,r2
   45574:	10800204 	addi	r2,r2,8
   45578:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   4557c:	e0bffd17 	ldw	r2,-12(fp)
   45580:	10c00283 	ldbu	r3,10(r2)
   45584:	d0a73917 	ldw	r2,-25372(gp)
   45588:	10800d83 	ldbu	r2,54(r2)
   4558c:	1884b03a 	or	r2,r3,r2
   45590:	1007883a 	mov	r3,r2
   45594:	e0bffd17 	ldw	r2,-12(fp)
   45598:	10c00285 	stb	r3,10(r2)
        pevents++;
   4559c:	e0bffc17 	ldw	r2,-16(fp)
   455a0:	10800104 	addi	r2,r2,4
   455a4:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   455a8:	e0bffc17 	ldw	r2,-16(fp)
   455ac:	10800017 	ldw	r2,0(r2)
   455b0:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   455b4:	e0bffd17 	ldw	r2,-12(fp)
   455b8:	103fde1e 	bne	r2,zero,45534 <__alt_data_end+0xfffcf9d4>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   455bc:	d0a73917 	ldw	r2,-25372(gp)
   455c0:	10800d03 	ldbu	r2,52(r2)
   455c4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   455c8:	e0fffe03 	ldbu	r3,-8(fp)
   455cc:	e13ffe03 	ldbu	r4,-8(fp)
   455d0:	d0a73644 	addi	r2,gp,-25383
   455d4:	2085883a 	add	r2,r4,r2
   455d8:	10800003 	ldbu	r2,0(r2)
   455dc:	1009883a 	mov	r4,r2
   455e0:	d0a73917 	ldw	r2,-25372(gp)
   455e4:	10800d43 	ldbu	r2,53(r2)
   455e8:	0084303a 	nor	r2,zero,r2
   455ec:	2084703a 	and	r2,r4,r2
   455f0:	1009883a 	mov	r4,r2
   455f4:	d0a73644 	addi	r2,gp,-25383
   455f8:	1885883a 	add	r2,r3,r2
   455fc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   45600:	e0fffe03 	ldbu	r3,-8(fp)
   45604:	d0a73644 	addi	r2,gp,-25383
   45608:	1885883a 	add	r2,r3,r2
   4560c:	10800003 	ldbu	r2,0(r2)
   45610:	10803fcc 	andi	r2,r2,255
   45614:	1000071e 	bne	r2,zero,45634 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   45618:	d0a73917 	ldw	r2,-25372(gp)
   4561c:	10800d83 	ldbu	r2,54(r2)
   45620:	0084303a 	nor	r2,zero,r2
   45624:	1007883a 	mov	r3,r2
   45628:	d0a73603 	ldbu	r2,-25384(gp)
   4562c:	1884703a 	and	r2,r3,r2
   45630:	d0a73605 	stb	r2,-25384(gp)
    }
}
   45634:	e037883a 	mov	sp,fp
   45638:	df000017 	ldw	fp,0(sp)
   4563c:	dec00104 	addi	sp,sp,4
   45640:	f800283a 	ret

00045644 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   45644:	defffc04 	addi	sp,sp,-16
   45648:	df000315 	stw	fp,12(sp)
   4564c:	df000304 	addi	fp,sp,12
   45650:	e13ffe15 	stw	r4,-8(fp)
   45654:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   45658:	e0bffe17 	ldw	r2,-8(fp)
   4565c:	10800d03 	ldbu	r2,52(r2)
   45660:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   45664:	e0bffd03 	ldbu	r2,-12(fp)
   45668:	e0fffd03 	ldbu	r3,-12(fp)
   4566c:	e13fff17 	ldw	r4,-4(fp)
   45670:	20c7883a 	add	r3,r4,r3
   45674:	18c00204 	addi	r3,r3,8
   45678:	18c000c3 	ldbu	r3,3(r3)
   4567c:	1809883a 	mov	r4,r3
   45680:	e0fffe17 	ldw	r3,-8(fp)
   45684:	18c00d43 	ldbu	r3,53(r3)
   45688:	00c6303a 	nor	r3,zero,r3
   4568c:	20c6703a 	and	r3,r4,r3
   45690:	1809883a 	mov	r4,r3
   45694:	e0ffff17 	ldw	r3,-4(fp)
   45698:	1885883a 	add	r2,r3,r2
   4569c:	10800204 	addi	r2,r2,8
   456a0:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   456a4:	e0bffd03 	ldbu	r2,-12(fp)
   456a8:	e0ffff17 	ldw	r3,-4(fp)
   456ac:	1885883a 	add	r2,r3,r2
   456b0:	10800204 	addi	r2,r2,8
   456b4:	108000c3 	ldbu	r2,3(r2)
   456b8:	10803fcc 	andi	r2,r2,255
   456bc:	10000a1e 	bne	r2,zero,456e8 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   456c0:	e0bfff17 	ldw	r2,-4(fp)
   456c4:	10800283 	ldbu	r2,10(r2)
   456c8:	1007883a 	mov	r3,r2
   456cc:	e0bffe17 	ldw	r2,-8(fp)
   456d0:	10800d83 	ldbu	r2,54(r2)
   456d4:	0084303a 	nor	r2,zero,r2
   456d8:	1884703a 	and	r2,r3,r2
   456dc:	1007883a 	mov	r3,r2
   456e0:	e0bfff17 	ldw	r2,-4(fp)
   456e4:	10c00285 	stb	r3,10(r2)
    }
}
   456e8:	e037883a 	mov	sp,fp
   456ec:	df000017 	ldw	fp,0(sp)
   456f0:	dec00104 	addi	sp,sp,4
   456f4:	f800283a 	ret

000456f8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   456f8:	defffa04 	addi	sp,sp,-24
   456fc:	df000515 	stw	fp,20(sp)
   45700:	df000504 	addi	fp,sp,20
   45704:	e13ffe15 	stw	r4,-8(fp)
   45708:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   4570c:	e0bffe17 	ldw	r2,-8(fp)
   45710:	10800d03 	ldbu	r2,52(r2)
   45714:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   45718:	e0bffe17 	ldw	r2,-8(fp)
   4571c:	10800d83 	ldbu	r2,54(r2)
   45720:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   45724:	e0bffe17 	ldw	r2,-8(fp)
   45728:	10800d43 	ldbu	r2,53(r2)
   4572c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   45730:	e0bfff17 	ldw	r2,-4(fp)
   45734:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   45738:	e0bffb17 	ldw	r2,-20(fp)
   4573c:	10800017 	ldw	r2,0(r2)
   45740:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   45744:	00002506 	br	457dc <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   45748:	e0bffd03 	ldbu	r2,-12(fp)
   4574c:	e0fffd03 	ldbu	r3,-12(fp)
   45750:	e13ffc17 	ldw	r4,-16(fp)
   45754:	20c7883a 	add	r3,r4,r3
   45758:	18c00204 	addi	r3,r3,8
   4575c:	18c000c3 	ldbu	r3,3(r3)
   45760:	1809883a 	mov	r4,r3
   45764:	e0fffd83 	ldbu	r3,-10(fp)
   45768:	00c6303a 	nor	r3,zero,r3
   4576c:	20c6703a 	and	r3,r4,r3
   45770:	1809883a 	mov	r4,r3
   45774:	e0fffc17 	ldw	r3,-16(fp)
   45778:	1885883a 	add	r2,r3,r2
   4577c:	10800204 	addi	r2,r2,8
   45780:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   45784:	e0bffd03 	ldbu	r2,-12(fp)
   45788:	e0fffc17 	ldw	r3,-16(fp)
   4578c:	1885883a 	add	r2,r3,r2
   45790:	10800204 	addi	r2,r2,8
   45794:	108000c3 	ldbu	r2,3(r2)
   45798:	10803fcc 	andi	r2,r2,255
   4579c:	1000091e 	bne	r2,zero,457c4 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   457a0:	e0bffc17 	ldw	r2,-16(fp)
   457a4:	10800283 	ldbu	r2,10(r2)
   457a8:	1007883a 	mov	r3,r2
   457ac:	e0bffd43 	ldbu	r2,-11(fp)
   457b0:	0084303a 	nor	r2,zero,r2
   457b4:	1884703a 	and	r2,r3,r2
   457b8:	1007883a 	mov	r3,r2
   457bc:	e0bffc17 	ldw	r2,-16(fp)
   457c0:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   457c4:	e0bffb17 	ldw	r2,-20(fp)
   457c8:	10800104 	addi	r2,r2,4
   457cc:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   457d0:	e0bffb17 	ldw	r2,-20(fp)
   457d4:	10800017 	ldw	r2,0(r2)
   457d8:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   457dc:	e0bffc17 	ldw	r2,-16(fp)
   457e0:	103fd91e 	bne	r2,zero,45748 <__alt_data_end+0xfffcfbe8>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   457e4:	e037883a 	mov	sp,fp
   457e8:	df000017 	ldw	fp,0(sp)
   457ec:	dec00104 	addi	sp,sp,4
   457f0:	f800283a 	ret

000457f4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   457f4:	defffc04 	addi	sp,sp,-16
   457f8:	df000315 	stw	fp,12(sp)
   457fc:	df000304 	addi	fp,sp,12
   45800:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   45804:	e0bfff17 	ldw	r2,-4(fp)
   45808:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   4580c:	e0bfff17 	ldw	r2,-4(fp)
   45810:	108002c4 	addi	r2,r2,11
   45814:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   45818:	e03ffe05 	stb	zero,-8(fp)
   4581c:	00000706 	br	4583c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   45820:	e0bffd17 	ldw	r2,-12(fp)
   45824:	10c00044 	addi	r3,r2,1
   45828:	e0fffd15 	stw	r3,-12(fp)
   4582c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   45830:	e0bffe03 	ldbu	r2,-8(fp)
   45834:	10800044 	addi	r2,r2,1
   45838:	e0bffe05 	stb	r2,-8(fp)
   4583c:	e0bffe03 	ldbu	r2,-8(fp)
   45840:	108000f0 	cmpltui	r2,r2,3
   45844:	103ff61e 	bne	r2,zero,45820 <__alt_data_end+0xfffcfcc0>
        *ptbl++ = 0;
    }
}
   45848:	e037883a 	mov	sp,fp
   4584c:	df000017 	ldw	fp,0(sp)
   45850:	dec00104 	addi	sp,sp,4
   45854:	f800283a 	ret

00045858 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   45858:	defffb04 	addi	sp,sp,-20
   4585c:	dfc00415 	stw	ra,16(sp)
   45860:	df000315 	stw	fp,12(sp)
   45864:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   45868:	010001b4 	movhi	r4,6
   4586c:	212b9704 	addi	r4,r4,-20900
   45870:	0142d004 	movi	r5,2880
   45874:	0045bb80 	call	45bb8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   45878:	008001b4 	movhi	r2,6
   4587c:	10ab9704 	addi	r2,r2,-20900
   45880:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   45884:	008001b4 	movhi	r2,6
   45888:	10aba304 	addi	r2,r2,-20852
   4588c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   45890:	e03ffd0d 	sth	zero,-12(fp)
   45894:	00001306 	br	458e4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   45898:	e0bffe17 	ldw	r2,-8(fp)
   4589c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   458a0:	e0bffe17 	ldw	r2,-8(fp)
   458a4:	e0ffff17 	ldw	r3,-4(fp)
   458a8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   458ac:	e0bffe17 	ldw	r2,-8(fp)
   458b0:	00c00fc4 	movi	r3,63
   458b4:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   458b8:	e0bffe17 	ldw	r2,-8(fp)
   458bc:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   458c0:	e0bffe17 	ldw	r2,-8(fp)
   458c4:	10800c04 	addi	r2,r2,48
   458c8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   458cc:	e0bfff17 	ldw	r2,-4(fp)
   458d0:	10800c04 	addi	r2,r2,48
   458d4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   458d8:	e0bffd0b 	ldhu	r2,-12(fp)
   458dc:	10800044 	addi	r2,r2,1
   458e0:	e0bffd0d 	sth	r2,-12(fp)
   458e4:	e0bffd0b 	ldhu	r2,-12(fp)
   458e8:	10800ef0 	cmpltui	r2,r2,59
   458ec:	103fea1e 	bne	r2,zero,45898 <__alt_data_end+0xfffcfd38>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   458f0:	e0bffe17 	ldw	r2,-8(fp)
   458f4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   458f8:	e0bffe17 	ldw	r2,-8(fp)
   458fc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   45900:	e0bffe17 	ldw	r2,-8(fp)
   45904:	00c00fc4 	movi	r3,63
   45908:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   4590c:	e0bffe17 	ldw	r2,-8(fp)
   45910:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   45914:	008001b4 	movhi	r2,6
   45918:	10ab9704 	addi	r2,r2,-20900
   4591c:	d0a73715 	stw	r2,-25380(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   45920:	e037883a 	mov	sp,fp
   45924:	dfc00117 	ldw	ra,4(sp)
   45928:	df000017 	ldw	fp,0(sp)
   4592c:	dec00204 	addi	sp,sp,8
   45930:	f800283a 	ret

00045934 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   45934:	deffff04 	addi	sp,sp,-4
   45938:	df000015 	stw	fp,0(sp)
   4593c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   45940:	d0273a15 	stw	zero,-25368(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   45944:	d0273805 	stb	zero,-25376(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   45948:	d0272a05 	stb	zero,-25432(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   4594c:	d0273245 	stb	zero,-25399(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   45950:	d0272a45 	stb	zero,-25431(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   45954:	d0272f15 	stw	zero,-25412(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   45958:	d0272b15 	stw	zero,-25428(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   4595c:	d0273d15 	stw	zero,-25356(gp)
    OSIdleCtrMax  = 0L;
   45960:	d0273015 	stw	zero,-25408(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   45964:	d0273c05 	stb	zero,-25360(gp)
#endif
}
   45968:	e037883a 	mov	sp,fp
   4596c:	df000017 	ldw	fp,0(sp)
   45970:	dec00104 	addi	sp,sp,4
   45974:	f800283a 	ret

00045978 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   45978:	defffd04 	addi	sp,sp,-12
   4597c:	df000215 	stw	fp,8(sp)
   45980:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   45984:	d0273605 	stb	zero,-25384(gp)
    prdytbl       = &OSRdyTbl[0];
   45988:	d0a73644 	addi	r2,gp,-25383
   4598c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   45990:	e03ffe05 	stb	zero,-8(fp)
   45994:	00000706 	br	459b4 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   45998:	e0bfff17 	ldw	r2,-4(fp)
   4599c:	10c00044 	addi	r3,r2,1
   459a0:	e0ffff15 	stw	r3,-4(fp)
   459a4:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   459a8:	e0bffe03 	ldbu	r2,-8(fp)
   459ac:	10800044 	addi	r2,r2,1
   459b0:	e0bffe05 	stb	r2,-8(fp)
   459b4:	e0bffe03 	ldbu	r2,-8(fp)
   459b8:	108000f0 	cmpltui	r2,r2,3
   459bc:	103ff61e 	bne	r2,zero,45998 <__alt_data_end+0xfffcfe38>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   459c0:	d0272c45 	stb	zero,-25423(gp)
    OSPrioHighRdy = 0;
   459c4:	d0272c05 	stb	zero,-25424(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   459c8:	d0273415 	stw	zero,-25392(gp)
    OSTCBCur      = (OS_TCB *)0;
   459cc:	d0273915 	stw	zero,-25372(gp)
}
   459d0:	e037883a 	mov	sp,fp
   459d4:	df000017 	ldw	fp,0(sp)
   459d8:	dec00104 	addi	sp,sp,4
   459dc:	f800283a 	ret

000459e0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   459e0:	defff804 	addi	sp,sp,-32
   459e4:	dfc00715 	stw	ra,28(sp)
   459e8:	df000615 	stw	fp,24(sp)
   459ec:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   459f0:	00bfffd4 	movui	r2,65535
   459f4:	d8800015 	stw	r2,0(sp)
   459f8:	008001b4 	movhi	r2,6
   459fc:	10a99704 	addi	r2,r2,-22948
   45a00:	d8800115 	stw	r2,4(sp)
   45a04:	00808004 	movi	r2,512
   45a08:	d8800215 	stw	r2,8(sp)
   45a0c:	d8000315 	stw	zero,12(sp)
   45a10:	008000c4 	movi	r2,3
   45a14:	d8800415 	stw	r2,16(sp)
   45a18:	01000134 	movhi	r4,4
   45a1c:	21179c04 	addi	r4,r4,24176
   45a20:	000b883a 	mov	r5,zero
   45a24:	018001b4 	movhi	r6,6
   45a28:	31ab9604 	addi	r6,r6,-20904
   45a2c:	01c00504 	movi	r7,20
   45a30:	004a8800 	call	4a880 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   45a34:	01000504 	movi	r4,20
   45a38:	01400174 	movhi	r5,5
   45a3c:	297d1704 	addi	r5,r5,-2980
   45a40:	e1bfff04 	addi	r6,fp,-4
   45a44:	004b14c0 	call	4b14c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   45a48:	e037883a 	mov	sp,fp
   45a4c:	dfc00117 	ldw	ra,4(sp)
   45a50:	df000017 	ldw	fp,0(sp)
   45a54:	dec00204 	addi	sp,sp,8
   45a58:	f800283a 	ret

00045a5c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   45a5c:	defff804 	addi	sp,sp,-32
   45a60:	dfc00715 	stw	ra,28(sp)
   45a64:	df000615 	stw	fp,24(sp)
   45a68:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   45a6c:	00bfff94 	movui	r2,65534
   45a70:	d8800015 	stw	r2,0(sp)
   45a74:	008001b4 	movhi	r2,6
   45a78:	10a71f04 	addi	r2,r2,-25476
   45a7c:	d8800115 	stw	r2,4(sp)
   45a80:	00808004 	movi	r2,512
   45a84:	d8800215 	stw	r2,8(sp)
   45a88:	d8000315 	stw	zero,12(sp)
   45a8c:	008000c4 	movi	r2,3
   45a90:	d8800415 	stw	r2,16(sp)
   45a94:	01000134 	movhi	r4,4
   45a98:	2117b304 	addi	r4,r4,24268
   45a9c:	000b883a 	mov	r5,zero
   45aa0:	018001b4 	movhi	r6,6
   45aa4:	31a91e04 	addi	r6,r6,-23432
   45aa8:	01c004c4 	movi	r7,19
   45aac:	004a8800 	call	4a880 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   45ab0:	010004c4 	movi	r4,19
   45ab4:	01400174 	movhi	r5,5
   45ab8:	297d1b04 	addi	r5,r5,-2964
   45abc:	e1bfff04 	addi	r6,fp,-4
   45ac0:	004b14c0 	call	4b14c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   45ac4:	e037883a 	mov	sp,fp
   45ac8:	dfc00117 	ldw	ra,4(sp)
   45acc:	df000017 	ldw	fp,0(sp)
   45ad0:	dec00204 	addi	sp,sp,8
   45ad4:	f800283a 	ret

00045ad8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   45ad8:	defffb04 	addi	sp,sp,-20
   45adc:	dfc00415 	stw	ra,16(sp)
   45ae0:	df000315 	stw	fp,12(sp)
   45ae4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   45ae8:	010001b4 	movhi	r4,6
   45aec:	212e6704 	addi	r4,r4,-18020
   45af0:	01414404 	movi	r5,1296
   45af4:	0045bb80 	call	45bb8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   45af8:	010001b4 	movhi	r4,6
   45afc:	212fab04 	addi	r4,r4,-16724
   45b00:	01401504 	movi	r5,84
   45b04:	0045bb80 	call	45bb8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   45b08:	008001b4 	movhi	r2,6
   45b0c:	10ae6704 	addi	r2,r2,-18020
   45b10:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   45b14:	008001b4 	movhi	r2,6
   45b18:	10ae8204 	addi	r2,r2,-17912
   45b1c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   45b20:	e03ffd05 	stb	zero,-12(fp)
   45b24:	00001106 	br	45b6c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   45b28:	e0bffe17 	ldw	r2,-8(fp)
   45b2c:	e0ffff17 	ldw	r3,-4(fp)
   45b30:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   45b34:	e0bffe17 	ldw	r2,-8(fp)
   45b38:	00c00fc4 	movi	r3,63
   45b3c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   45b40:	e0bffe17 	ldw	r2,-8(fp)
   45b44:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   45b48:	e0bffe17 	ldw	r2,-8(fp)
   45b4c:	10801b04 	addi	r2,r2,108
   45b50:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   45b54:	e0bfff17 	ldw	r2,-4(fp)
   45b58:	10801b04 	addi	r2,r2,108
   45b5c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   45b60:	e0bffd03 	ldbu	r2,-12(fp)
   45b64:	10800044 	addi	r2,r2,1
   45b68:	e0bffd05 	stb	r2,-12(fp)
   45b6c:	e0bffd03 	ldbu	r2,-12(fp)
   45b70:	108002f0 	cmpltui	r2,r2,11
   45b74:	103fec1e 	bne	r2,zero,45b28 <__alt_data_end+0xfffcffc8>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   45b78:	e0bffe17 	ldw	r2,-8(fp)
   45b7c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   45b80:	e0bffe17 	ldw	r2,-8(fp)
   45b84:	00c00fc4 	movi	r3,63
   45b88:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   45b8c:	e0bffe17 	ldw	r2,-8(fp)
   45b90:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   45b94:	d0272d15 	stw	zero,-25420(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   45b98:	008001b4 	movhi	r2,6
   45b9c:	10ae6704 	addi	r2,r2,-18020
   45ba0:	d0a73115 	stw	r2,-25404(gp)
}
   45ba4:	e037883a 	mov	sp,fp
   45ba8:	dfc00117 	ldw	ra,4(sp)
   45bac:	df000017 	ldw	fp,0(sp)
   45bb0:	dec00204 	addi	sp,sp,8
   45bb4:	f800283a 	ret

00045bb8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   45bb8:	defffd04 	addi	sp,sp,-12
   45bbc:	df000215 	stw	fp,8(sp)
   45bc0:	df000204 	addi	fp,sp,8
   45bc4:	e13ffe15 	stw	r4,-8(fp)
   45bc8:	2805883a 	mov	r2,r5
   45bcc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   45bd0:	00000706 	br	45bf0 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   45bd4:	e0bffe17 	ldw	r2,-8(fp)
   45bd8:	10c00044 	addi	r3,r2,1
   45bdc:	e0fffe15 	stw	r3,-8(fp)
   45be0:	10000005 	stb	zero,0(r2)
        size--;
   45be4:	e0bfff0b 	ldhu	r2,-4(fp)
   45be8:	10bfffc4 	addi	r2,r2,-1
   45bec:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   45bf0:	e0bfff0b 	ldhu	r2,-4(fp)
   45bf4:	103ff71e 	bne	r2,zero,45bd4 <__alt_data_end+0xfffd0074>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   45bf8:	e037883a 	mov	sp,fp
   45bfc:	df000017 	ldw	fp,0(sp)
   45c00:	dec00104 	addi	sp,sp,4
   45c04:	f800283a 	ret

00045c08 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   45c08:	defffc04 	addi	sp,sp,-16
   45c0c:	df000315 	stw	fp,12(sp)
   45c10:	df000304 	addi	fp,sp,12
   45c14:	e13ffd15 	stw	r4,-12(fp)
   45c18:	e17ffe15 	stw	r5,-8(fp)
   45c1c:	3005883a 	mov	r2,r6
   45c20:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   45c24:	00000b06 	br	45c54 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   45c28:	e0bffd17 	ldw	r2,-12(fp)
   45c2c:	10c00044 	addi	r3,r2,1
   45c30:	e0fffd15 	stw	r3,-12(fp)
   45c34:	e0fffe17 	ldw	r3,-8(fp)
   45c38:	19000044 	addi	r4,r3,1
   45c3c:	e13ffe15 	stw	r4,-8(fp)
   45c40:	18c00003 	ldbu	r3,0(r3)
   45c44:	10c00005 	stb	r3,0(r2)
        size--;
   45c48:	e0bfff0b 	ldhu	r2,-4(fp)
   45c4c:	10bfffc4 	addi	r2,r2,-1
   45c50:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   45c54:	e0bfff0b 	ldhu	r2,-4(fp)
   45c58:	103ff31e 	bne	r2,zero,45c28 <__alt_data_end+0xfffd00c8>
        *pdest++ = *psrc++;
        size--;
    }
}
   45c5c:	e037883a 	mov	sp,fp
   45c60:	df000017 	ldw	fp,0(sp)
   45c64:	dec00104 	addi	sp,sp,4
   45c68:	f800283a 	ret

00045c6c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   45c6c:	defffb04 	addi	sp,sp,-20
   45c70:	dfc00415 	stw	ra,16(sp)
   45c74:	df000315 	stw	fp,12(sp)
   45c78:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   45c7c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45c80:	0005303a 	rdctl	r2,status
   45c84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45c88:	e0fffe17 	ldw	r3,-8(fp)
   45c8c:	00bfff84 	movi	r2,-2
   45c90:	1884703a 	and	r2,r3,r2
   45c94:	1001703a 	wrctl	status,r2
  
  return context;
   45c98:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   45c9c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   45ca0:	d0a73803 	ldbu	r2,-25376(gp)
   45ca4:	10803fcc 	andi	r2,r2,255
   45ca8:	10001a1e 	bne	r2,zero,45d14 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   45cac:	d0a72a03 	ldbu	r2,-25432(gp)
   45cb0:	10803fcc 	andi	r2,r2,255
   45cb4:	1000171e 	bne	r2,zero,45d14 <OS_Sched+0xa8>
            OS_SchedNew();
   45cb8:	0045d380 	call	45d38 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   45cbc:	d0e72c03 	ldbu	r3,-25424(gp)
   45cc0:	d0a72c43 	ldbu	r2,-25423(gp)
   45cc4:	18c03fcc 	andi	r3,r3,255
   45cc8:	10803fcc 	andi	r2,r2,255
   45ccc:	18801126 	beq	r3,r2,45d14 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   45cd0:	d0a72c03 	ldbu	r2,-25424(gp)
   45cd4:	10c03fcc 	andi	r3,r2,255
   45cd8:	008001b4 	movhi	r2,6
   45cdc:	10afab04 	addi	r2,r2,-16724
   45ce0:	18c7883a 	add	r3,r3,r3
   45ce4:	18c7883a 	add	r3,r3,r3
   45ce8:	10c5883a 	add	r2,r2,r3
   45cec:	10800017 	ldw	r2,0(r2)
   45cf0:	d0a73415 	stw	r2,-25392(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   45cf4:	d0a73417 	ldw	r2,-25392(gp)
   45cf8:	10c00e17 	ldw	r3,56(r2)
   45cfc:	18c00044 	addi	r3,r3,1
   45d00:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   45d04:	d0a72f17 	ldw	r2,-25412(gp)
   45d08:	10800044 	addi	r2,r2,1
   45d0c:	d0a72f15 	stw	r2,-25412(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   45d10:	004e6280 	call	4e628 <OSCtxSw>
   45d14:	e0bffd17 	ldw	r2,-12(fp)
   45d18:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45d1c:	e0bfff17 	ldw	r2,-4(fp)
   45d20:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   45d24:	e037883a 	mov	sp,fp
   45d28:	dfc00117 	ldw	ra,4(sp)
   45d2c:	df000017 	ldw	fp,0(sp)
   45d30:	dec00204 	addi	sp,sp,8
   45d34:	f800283a 	ret

00045d38 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   45d38:	defffe04 	addi	sp,sp,-8
   45d3c:	df000115 	stw	fp,4(sp)
   45d40:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   45d44:	d0a73603 	ldbu	r2,-25384(gp)
   45d48:	10c03fcc 	andi	r3,r2,255
   45d4c:	00800174 	movhi	r2,5
   45d50:	10bcd704 	addi	r2,r2,-3236
   45d54:	10c5883a 	add	r2,r2,r3
   45d58:	10800003 	ldbu	r2,0(r2)
   45d5c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   45d60:	e0bfff03 	ldbu	r2,-4(fp)
   45d64:	100490fa 	slli	r2,r2,3
   45d68:	1009883a 	mov	r4,r2
   45d6c:	e0ffff03 	ldbu	r3,-4(fp)
   45d70:	d0a73644 	addi	r2,gp,-25383
   45d74:	1885883a 	add	r2,r3,r2
   45d78:	10800003 	ldbu	r2,0(r2)
   45d7c:	10c03fcc 	andi	r3,r2,255
   45d80:	00800174 	movhi	r2,5
   45d84:	10bcd704 	addi	r2,r2,-3236
   45d88:	10c5883a 	add	r2,r2,r3
   45d8c:	10800003 	ldbu	r2,0(r2)
   45d90:	2085883a 	add	r2,r4,r2
   45d94:	d0a72c05 	stb	r2,-25424(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   45d98:	e037883a 	mov	sp,fp
   45d9c:	df000017 	ldw	fp,0(sp)
   45da0:	dec00104 	addi	sp,sp,4
   45da4:	f800283a 	ret

00045da8 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   45da8:	defffc04 	addi	sp,sp,-16
   45dac:	df000315 	stw	fp,12(sp)
   45db0:	df000304 	addi	fp,sp,12
   45db4:	e13ffe15 	stw	r4,-8(fp)
   45db8:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   45dbc:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   45dc0:	00000b06 	br	45df0 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   45dc4:	e0bffe17 	ldw	r2,-8(fp)
   45dc8:	10c00044 	addi	r3,r2,1
   45dcc:	e0fffe15 	stw	r3,-8(fp)
   45dd0:	e0ffff17 	ldw	r3,-4(fp)
   45dd4:	19000044 	addi	r4,r3,1
   45dd8:	e13fff15 	stw	r4,-4(fp)
   45ddc:	18c00003 	ldbu	r3,0(r3)
   45de0:	10c00005 	stb	r3,0(r2)
        len++;
   45de4:	e0bffd03 	ldbu	r2,-12(fp)
   45de8:	10800044 	addi	r2,r2,1
   45dec:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   45df0:	e0bfff17 	ldw	r2,-4(fp)
   45df4:	10800003 	ldbu	r2,0(r2)
   45df8:	10803fcc 	andi	r2,r2,255
   45dfc:	103ff11e 	bne	r2,zero,45dc4 <__alt_data_end+0xfffd0264>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   45e00:	e0bffe17 	ldw	r2,-8(fp)
   45e04:	10000005 	stb	zero,0(r2)
    return (len);
   45e08:	e0bffd03 	ldbu	r2,-12(fp)
}
   45e0c:	e037883a 	mov	sp,fp
   45e10:	df000017 	ldw	fp,0(sp)
   45e14:	dec00104 	addi	sp,sp,4
   45e18:	f800283a 	ret

00045e1c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   45e1c:	defffd04 	addi	sp,sp,-12
   45e20:	df000215 	stw	fp,8(sp)
   45e24:	df000204 	addi	fp,sp,8
   45e28:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   45e2c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   45e30:	00000606 	br	45e4c <OS_StrLen+0x30>
        psrc++;
   45e34:	e0bfff17 	ldw	r2,-4(fp)
   45e38:	10800044 	addi	r2,r2,1
   45e3c:	e0bfff15 	stw	r2,-4(fp)
        len++;
   45e40:	e0bffe03 	ldbu	r2,-8(fp)
   45e44:	10800044 	addi	r2,r2,1
   45e48:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   45e4c:	e0bfff17 	ldw	r2,-4(fp)
   45e50:	10800003 	ldbu	r2,0(r2)
   45e54:	10803fcc 	andi	r2,r2,255
   45e58:	103ff61e 	bne	r2,zero,45e34 <__alt_data_end+0xfffd02d4>
        psrc++;
        len++;
    }
    return (len);
   45e5c:	e0bffe03 	ldbu	r2,-8(fp)
}
   45e60:	e037883a 	mov	sp,fp
   45e64:	df000017 	ldw	fp,0(sp)
   45e68:	dec00104 	addi	sp,sp,4
   45e6c:	f800283a 	ret

00045e70 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   45e70:	defffa04 	addi	sp,sp,-24
   45e74:	dfc00515 	stw	ra,20(sp)
   45e78:	df000415 	stw	fp,16(sp)
   45e7c:	df000404 	addi	fp,sp,16
   45e80:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   45e84:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45e88:	0005303a 	rdctl	r2,status
   45e8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45e90:	e0fffd17 	ldw	r3,-12(fp)
   45e94:	00bfff84 	movi	r2,-2
   45e98:	1884703a 	and	r2,r3,r2
   45e9c:	1001703a 	wrctl	status,r2
  
  return context;
   45ea0:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   45ea4:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   45ea8:	d0a72b17 	ldw	r2,-25428(gp)
   45eac:	10800044 	addi	r2,r2,1
   45eb0:	d0a72b15 	stw	r2,-25428(gp)
   45eb4:	e0bffc17 	ldw	r2,-16(fp)
   45eb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45ebc:	e0bffe17 	ldw	r2,-8(fp)
   45ec0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   45ec4:	004eab80 	call	4eab8 <OSTaskIdleHook>
    }
   45ec8:	003fef06 	br	45e88 <__alt_data_end+0xfffd0328>

00045ecc <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   45ecc:	defffa04 	addi	sp,sp,-24
   45ed0:	dfc00515 	stw	ra,20(sp)
   45ed4:	df000415 	stw	fp,16(sp)
   45ed8:	df000404 	addi	fp,sp,16
   45edc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   45ee0:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   45ee4:	00000206 	br	45ef0 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   45ee8:	01003204 	movi	r4,200
   45eec:	004ba780 	call	4ba78 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   45ef0:	d0a73c03 	ldbu	r2,-25360(gp)
   45ef4:	10803fcc 	andi	r2,r2,255
   45ef8:	103ffb26 	beq	r2,zero,45ee8 <__alt_data_end+0xfffd0388>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   45efc:	d0a73017 	ldw	r2,-25408(gp)
   45f00:	1009883a 	mov	r4,r2
   45f04:	01401904 	movi	r5,100
   45f08:	004f2d40 	call	4f2d4 <__udivsi3>
   45f0c:	d0a73015 	stw	r2,-25408(gp)
    if (OSIdleCtrMax == 0L) {
   45f10:	d0a73017 	ldw	r2,-25408(gp)
   45f14:	1000031e 	bne	r2,zero,45f24 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   45f18:	d0273205 	stb	zero,-25400(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   45f1c:	01003fc4 	movi	r4,255
   45f20:	004b6cc0 	call	4b6cc <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45f24:	0005303a 	rdctl	r2,status
   45f28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45f2c:	e0fffd17 	ldw	r3,-12(fp)
   45f30:	00bfff84 	movi	r2,-2
   45f34:	1884703a 	and	r2,r3,r2
   45f38:	1001703a 	wrctl	status,r2
  
  return context;
   45f3c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   45f40:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   45f44:	d0a72b17 	ldw	r2,-25428(gp)
   45f48:	d0a73d15 	stw	r2,-25356(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   45f4c:	d0272b15 	stw	zero,-25428(gp)
   45f50:	e0bffc17 	ldw	r2,-16(fp)
   45f54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45f58:	e0bffe17 	ldw	r2,-8(fp)
   45f5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   45f60:	d0e73d17 	ldw	r3,-25356(gp)
   45f64:	d0a73017 	ldw	r2,-25408(gp)
   45f68:	1809883a 	mov	r4,r3
   45f6c:	100b883a 	mov	r5,r2
   45f70:	004f2d40 	call	4f2d4 <__udivsi3>
   45f74:	1007883a 	mov	r3,r2
   45f78:	00801904 	movi	r2,100
   45f7c:	10c5c83a 	sub	r2,r2,r3
   45f80:	d0a73205 	stb	r2,-25400(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   45f84:	004ea480 	call	4ea48 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   45f88:	0045f980 	call	45f98 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   45f8c:	01001904 	movi	r4,100
   45f90:	004ba780 	call	4ba78 <OSTimeDly>
    }
   45f94:	003fe306 	br	45f24 <__alt_data_end+0xfffd03c4>

00045f98 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   45f98:	defffa04 	addi	sp,sp,-24
   45f9c:	dfc00515 	stw	ra,20(sp)
   45fa0:	df000415 	stw	fp,16(sp)
   45fa4:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   45fa8:	e03ffc05 	stb	zero,-16(fp)
   45fac:	00002406 	br	46040 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   45fb0:	e0fffc03 	ldbu	r3,-16(fp)
   45fb4:	e0bffe04 	addi	r2,fp,-8
   45fb8:	1809883a 	mov	r4,r3
   45fbc:	100b883a 	mov	r5,r2
   45fc0:	004b5040 	call	4b504 <OSTaskStkChk>
   45fc4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   45fc8:	e0bffc43 	ldbu	r2,-15(fp)
   45fcc:	1000191e 	bne	r2,zero,46034 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   45fd0:	e0fffc03 	ldbu	r3,-16(fp)
   45fd4:	008001b4 	movhi	r2,6
   45fd8:	10afab04 	addi	r2,r2,-16724
   45fdc:	18c7883a 	add	r3,r3,r3
   45fe0:	18c7883a 	add	r3,r3,r3
   45fe4:	10c5883a 	add	r2,r2,r3
   45fe8:	10800017 	ldw	r2,0(r2)
   45fec:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   45ff0:	e0bffd17 	ldw	r2,-12(fp)
   45ff4:	10000f26 	beq	r2,zero,46034 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   45ff8:	e0bffd17 	ldw	r2,-12(fp)
   45ffc:	10800060 	cmpeqi	r2,r2,1
   46000:	10000c1e 	bne	r2,zero,46034 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   46004:	e0bffd17 	ldw	r2,-12(fp)
   46008:	10c00217 	ldw	r3,8(r2)
   4600c:	e0bffd17 	ldw	r2,-12(fp)
   46010:	10800317 	ldw	r2,12(r2)
   46014:	1085883a 	add	r2,r2,r2
   46018:	1085883a 	add	r2,r2,r2
   4601c:	1887883a 	add	r3,r3,r2
   46020:	e0bffd17 	ldw	r2,-12(fp)
   46024:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   46028:	e0ffff17 	ldw	r3,-4(fp)
   4602c:	e0bffd17 	ldw	r2,-12(fp)
   46030:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   46034:	e0bffc03 	ldbu	r2,-16(fp)
   46038:	10800044 	addi	r2,r2,1
   4603c:	e0bffc05 	stb	r2,-16(fp)
   46040:	e0bffc03 	ldbu	r2,-16(fp)
   46044:	10800570 	cmpltui	r2,r2,21
   46048:	103fd91e 	bne	r2,zero,45fb0 <__alt_data_end+0xfffd0450>
#endif
                }
            }
        }
    }
}
   4604c:	e037883a 	mov	sp,fp
   46050:	dfc00117 	ldw	ra,4(sp)
   46054:	df000017 	ldw	fp,0(sp)
   46058:	dec00204 	addi	sp,sp,8
   4605c:	f800283a 	ret

00046060 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   46060:	defff204 	addi	sp,sp,-56
   46064:	dfc00d15 	stw	ra,52(sp)
   46068:	df000c15 	stw	fp,48(sp)
   4606c:	df000c04 	addi	fp,sp,48
   46070:	e17ffc15 	stw	r5,-16(fp)
   46074:	e1bffd15 	stw	r6,-12(fp)
   46078:	3807883a 	mov	r3,r7
   4607c:	e0800417 	ldw	r2,16(fp)
   46080:	e13ffb05 	stb	r4,-20(fp)
   46084:	e0fffe0d 	sth	r3,-8(fp)
   46088:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   4608c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46090:	0005303a 	rdctl	r2,status
   46094:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46098:	e0fff617 	ldw	r3,-40(fp)
   4609c:	00bfff84 	movi	r2,-2
   460a0:	1884703a 	and	r2,r3,r2
   460a4:	1001703a 	wrctl	status,r2
  
  return context;
   460a8:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   460ac:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   460b0:	d0a73117 	ldw	r2,-25404(gp)
   460b4:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   460b8:	e0bff517 	ldw	r2,-44(fp)
   460bc:	10009326 	beq	r2,zero,4630c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   460c0:	e0bff517 	ldw	r2,-44(fp)
   460c4:	10800517 	ldw	r2,20(r2)
   460c8:	d0a73115 	stw	r2,-25404(gp)
   460cc:	e0bff417 	ldw	r2,-48(fp)
   460d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   460d4:	e0bff717 	ldw	r2,-36(fp)
   460d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   460dc:	e0bff517 	ldw	r2,-44(fp)
   460e0:	e0fffc17 	ldw	r3,-16(fp)
   460e4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   460e8:	e0bff517 	ldw	r2,-44(fp)
   460ec:	e0fffb03 	ldbu	r3,-20(fp)
   460f0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   460f4:	e0bff517 	ldw	r2,-44(fp)
   460f8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   460fc:	e0bff517 	ldw	r2,-44(fp)
   46100:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   46104:	e0bff517 	ldw	r2,-44(fp)
   46108:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   4610c:	e0bff517 	ldw	r2,-44(fp)
   46110:	e0c00317 	ldw	r3,12(fp)
   46114:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   46118:	e0bff517 	ldw	r2,-44(fp)
   4611c:	e0c00217 	ldw	r3,8(fp)
   46120:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   46124:	e0bff517 	ldw	r2,-44(fp)
   46128:	e0fffd17 	ldw	r3,-12(fp)
   4612c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   46130:	e0bff517 	ldw	r2,-44(fp)
   46134:	e0ffff0b 	ldhu	r3,-4(fp)
   46138:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   4613c:	e0bff517 	ldw	r2,-44(fp)
   46140:	e0fffe0b 	ldhu	r3,-8(fp)
   46144:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   46148:	e0bff517 	ldw	r2,-44(fp)
   4614c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   46150:	e0bffb03 	ldbu	r2,-20(fp)
   46154:	1004d0fa 	srli	r2,r2,3
   46158:	1007883a 	mov	r3,r2
   4615c:	e0bff517 	ldw	r2,-44(fp)
   46160:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   46164:	e0bffb03 	ldbu	r2,-20(fp)
   46168:	108001cc 	andi	r2,r2,7
   4616c:	1007883a 	mov	r3,r2
   46170:	e0bff517 	ldw	r2,-44(fp)
   46174:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   46178:	e0bff517 	ldw	r2,-44(fp)
   4617c:	10800d03 	ldbu	r2,52(r2)
   46180:	10803fcc 	andi	r2,r2,255
   46184:	00c00044 	movi	r3,1
   46188:	1884983a 	sll	r2,r3,r2
   4618c:	1007883a 	mov	r3,r2
   46190:	e0bff517 	ldw	r2,-44(fp)
   46194:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   46198:	e0bff517 	ldw	r2,-44(fp)
   4619c:	10800cc3 	ldbu	r2,51(r2)
   461a0:	10803fcc 	andi	r2,r2,255
   461a4:	00c00044 	movi	r3,1
   461a8:	1884983a 	sll	r2,r3,r2
   461ac:	1007883a 	mov	r3,r2
   461b0:	e0bff517 	ldw	r2,-44(fp)
   461b4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   461b8:	e0bff517 	ldw	r2,-44(fp)
   461bc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   461c0:	e0bff517 	ldw	r2,-44(fp)
   461c4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   461c8:	e0bff517 	ldw	r2,-44(fp)
   461cc:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   461d0:	e0bff517 	ldw	r2,-44(fp)
   461d4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   461d8:	e0bff517 	ldw	r2,-44(fp)
   461dc:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   461e0:	e0bff517 	ldw	r2,-44(fp)
   461e4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   461e8:	e0bff517 	ldw	r2,-44(fp)
   461ec:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   461f0:	e0bff517 	ldw	r2,-44(fp)
   461f4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   461f8:	e0bff517 	ldw	r2,-44(fp)
   461fc:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   46200:	e0bff517 	ldw	r2,-44(fp)
   46204:	00c00fc4 	movi	r3,63
   46208:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   4620c:	e0bff517 	ldw	r2,-44(fp)
   46210:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   46214:	e13ff517 	ldw	r4,-44(fp)
   46218:	004ead40 	call	4ead4 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   4621c:	e13ff517 	ldw	r4,-44(fp)
   46220:	004e9ec0 	call	4e9ec <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46224:	0005303a 	rdctl	r2,status
   46228:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4622c:	e0fff817 	ldw	r3,-32(fp)
   46230:	00bfff84 	movi	r2,-2
   46234:	1884703a 	and	r2,r3,r2
   46238:	1001703a 	wrctl	status,r2
  
  return context;
   4623c:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   46240:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   46244:	e0fffb03 	ldbu	r3,-20(fp)
   46248:	008001b4 	movhi	r2,6
   4624c:	10afab04 	addi	r2,r2,-16724
   46250:	18c7883a 	add	r3,r3,r3
   46254:	18c7883a 	add	r3,r3,r3
   46258:	10c5883a 	add	r2,r2,r3
   4625c:	e0fff517 	ldw	r3,-44(fp)
   46260:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   46264:	d0e72d17 	ldw	r3,-25420(gp)
   46268:	e0bff517 	ldw	r2,-44(fp)
   4626c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   46270:	e0bff517 	ldw	r2,-44(fp)
   46274:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   46278:	d0a72d17 	ldw	r2,-25420(gp)
   4627c:	10000326 	beq	r2,zero,4628c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   46280:	d0a72d17 	ldw	r2,-25420(gp)
   46284:	e0fff517 	ldw	r3,-44(fp)
   46288:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   4628c:	e0bff517 	ldw	r2,-44(fp)
   46290:	d0a72d15 	stw	r2,-25420(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   46294:	e0bff517 	ldw	r2,-44(fp)
   46298:	10c00d83 	ldbu	r3,54(r2)
   4629c:	d0a73603 	ldbu	r2,-25384(gp)
   462a0:	1884b03a 	or	r2,r3,r2
   462a4:	d0a73605 	stb	r2,-25384(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   462a8:	e0bff517 	ldw	r2,-44(fp)
   462ac:	10800d03 	ldbu	r2,52(r2)
   462b0:	10c03fcc 	andi	r3,r2,255
   462b4:	e0bff517 	ldw	r2,-44(fp)
   462b8:	10800d03 	ldbu	r2,52(r2)
   462bc:	11003fcc 	andi	r4,r2,255
   462c0:	d0a73644 	addi	r2,gp,-25383
   462c4:	2085883a 	add	r2,r4,r2
   462c8:	11000003 	ldbu	r4,0(r2)
   462cc:	e0bff517 	ldw	r2,-44(fp)
   462d0:	10800d43 	ldbu	r2,53(r2)
   462d4:	2084b03a 	or	r2,r4,r2
   462d8:	1009883a 	mov	r4,r2
   462dc:	d0a73644 	addi	r2,gp,-25383
   462e0:	1885883a 	add	r2,r3,r2
   462e4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   462e8:	d0a73243 	ldbu	r2,-25399(gp)
   462ec:	10800044 	addi	r2,r2,1
   462f0:	d0a73245 	stb	r2,-25399(gp)
   462f4:	e0bff417 	ldw	r2,-48(fp)
   462f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   462fc:	e0bff917 	ldw	r2,-28(fp)
   46300:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   46304:	0005883a 	mov	r2,zero
   46308:	00000506 	br	46320 <OS_TCBInit+0x2c0>
   4630c:	e0bff417 	ldw	r2,-48(fp)
   46310:	e0bffa15 	stw	r2,-24(fp)
   46314:	e0bffa17 	ldw	r2,-24(fp)
   46318:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   4631c:	00801084 	movi	r2,66
}
   46320:	e037883a 	mov	sp,fp
   46324:	dfc00117 	ldw	ra,4(sp)
   46328:	df000017 	ldw	fp,0(sp)
   4632c:	dec00204 	addi	sp,sp,8
   46330:	f800283a 	ret

00046334 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   46334:	defffe04 	addi	sp,sp,-8
   46338:	df000115 	stw	fp,4(sp)
   4633c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   46340:	d0a00d04 	addi	r2,gp,-32716
   46344:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   46348:	d0a00e04 	addi	r2,gp,-32712
   4634c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   46350:	d0a00f84 	addi	r2,gp,-32706
   46354:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   46358:	d0a01004 	addi	r2,gp,-32704
   4635c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   46360:	d0a00f04 	addi	r2,gp,-32708
   46364:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   46368:	d0a01084 	addi	r2,gp,-32702
   4636c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   46370:	d0a01104 	addi	r2,gp,-32700
   46374:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   46378:	d0a01184 	addi	r2,gp,-32698
   4637c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   46380:	d0a01204 	addi	r2,gp,-32696
   46384:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   46388:	d0a01284 	addi	r2,gp,-32694
   4638c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   46390:	d0a01304 	addi	r2,gp,-32692
   46394:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   46398:	d0a01384 	addi	r2,gp,-32690
   4639c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   463a0:	d0a01404 	addi	r2,gp,-32688
   463a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   463a8:	d0a01484 	addi	r2,gp,-32686
   463ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   463b0:	d0a01504 	addi	r2,gp,-32684
   463b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   463b8:	d0a01584 	addi	r2,gp,-32682
   463bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   463c0:	d0a01604 	addi	r2,gp,-32680
   463c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   463c8:	d0a01684 	addi	r2,gp,-32678
   463cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   463d0:	d0a01704 	addi	r2,gp,-32676
   463d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   463d8:	d0a01784 	addi	r2,gp,-32674
   463dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   463e0:	d0a01804 	addi	r2,gp,-32672
   463e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   463e8:	d0a01884 	addi	r2,gp,-32670
   463ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   463f0:	d0a01904 	addi	r2,gp,-32668
   463f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   463f8:	d0a01984 	addi	r2,gp,-32666
   463fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   46400:	d0a01a04 	addi	r2,gp,-32664
   46404:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   46408:	d0a01a84 	addi	r2,gp,-32662
   4640c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   46410:	d0a01b04 	addi	r2,gp,-32660
   46414:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   46418:	d0a01b84 	addi	r2,gp,-32658
   4641c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   46420:	d0a01c04 	addi	r2,gp,-32656
   46424:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   46428:	d0a01c84 	addi	r2,gp,-32654
   4642c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   46430:	d0a01d04 	addi	r2,gp,-32652
   46434:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   46438:	d0a01d84 	addi	r2,gp,-32650
   4643c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   46440:	d0a01e04 	addi	r2,gp,-32648
   46444:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   46448:	d0a01e84 	addi	r2,gp,-32646
   4644c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   46450:	d0a01f04 	addi	r2,gp,-32644
   46454:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   46458:	d0a01f84 	addi	r2,gp,-32642
   4645c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   46460:	d0a02004 	addi	r2,gp,-32640
   46464:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   46468:	d0a02084 	addi	r2,gp,-32638
   4646c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   46470:	d0a02104 	addi	r2,gp,-32636
   46474:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   46478:	d0a02184 	addi	r2,gp,-32634
   4647c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   46480:	d0a02204 	addi	r2,gp,-32632
   46484:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   46488:	d0a02284 	addi	r2,gp,-32630
   4648c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   46490:	d0a02304 	addi	r2,gp,-32628
   46494:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   46498:	d0a02384 	addi	r2,gp,-32626
   4649c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   464a0:	d0a02404 	addi	r2,gp,-32624
   464a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   464a8:	d0a02904 	addi	r2,gp,-32604
   464ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   464b0:	e037883a 	mov	sp,fp
   464b4:	df000017 	ldw	fp,0(sp)
   464b8:	dec00104 	addi	sp,sp,4
   464bc:	f800283a 	ret

000464c0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   464c0:	defff204 	addi	sp,sp,-56
   464c4:	df000d15 	stw	fp,52(sp)
   464c8:	df000d04 	addi	fp,sp,52
   464cc:	e13ffc15 	stw	r4,-16(fp)
   464d0:	2807883a 	mov	r3,r5
   464d4:	3005883a 	mov	r2,r6
   464d8:	e1ffff15 	stw	r7,-4(fp)
   464dc:	e0fffd0d 	sth	r3,-12(fp)
   464e0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   464e4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   464e8:	e0bfff17 	ldw	r2,-4(fp)
   464ec:	1000021e 	bne	r2,zero,464f8 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   464f0:	0005883a 	mov	r2,zero
   464f4:	0000b006 	br	467b8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   464f8:	e0bffc17 	ldw	r2,-16(fp)
   464fc:	1000051e 	bne	r2,zero,46514 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   46500:	e0bfff17 	ldw	r2,-4(fp)
   46504:	00c01b84 	movi	r3,110
   46508:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   4650c:	0005883a 	mov	r2,zero
   46510:	0000a906 	br	467b8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   46514:	e0bffc17 	ldw	r2,-16(fp)
   46518:	10800003 	ldbu	r2,0(r2)
   4651c:	10803fcc 	andi	r2,r2,255
   46520:	10800160 	cmpeqi	r2,r2,5
   46524:	1000051e 	bne	r2,zero,4653c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   46528:	e0bfff17 	ldw	r2,-4(fp)
   4652c:	00c00044 	movi	r3,1
   46530:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   46534:	0005883a 	mov	r2,zero
   46538:	00009f06 	br	467b8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   4653c:	e0fffe03 	ldbu	r3,-8(fp)
   46540:	00bfe004 	movi	r2,-128
   46544:	1884703a 	and	r2,r3,r2
   46548:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   4654c:	e0bff503 	ldbu	r2,-44(fp)
   46550:	10000626 	beq	r2,zero,4656c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   46554:	e0bffe03 	ldbu	r2,-8(fp)
   46558:	10801fcc 	andi	r2,r2,127
   4655c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   46560:	00800044 	movi	r2,1
   46564:	e0bff385 	stb	r2,-50(fp)
   46568:	00000106 	br	46570 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   4656c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   46570:	e0bfff17 	ldw	r2,-4(fp)
   46574:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46578:	0005303a 	rdctl	r2,status
   4657c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46580:	e0fff617 	ldw	r3,-40(fp)
   46584:	00bfff84 	movi	r2,-2
   46588:	1884703a 	and	r2,r3,r2
   4658c:	1001703a 	wrctl	status,r2
  
  return context;
   46590:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   46594:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   46598:	e0bffe03 	ldbu	r2,-8(fp)
   4659c:	10c00060 	cmpeqi	r3,r2,1
   465a0:	18005f1e 	bne	r3,zero,46720 <OSFlagAccept+0x260>
   465a4:	10c00088 	cmpgei	r3,r2,2
   465a8:	1800021e 	bne	r3,zero,465b4 <OSFlagAccept+0xf4>
   465ac:	10003f26 	beq	r2,zero,466ac <OSFlagAccept+0x1ec>
   465b0:	00007706 	br	46790 <OSFlagAccept+0x2d0>
   465b4:	10c000a0 	cmpeqi	r3,r2,2
   465b8:	1800031e 	bne	r3,zero,465c8 <OSFlagAccept+0x108>
   465bc:	108000e0 	cmpeqi	r2,r2,3
   465c0:	10001e1e 	bne	r2,zero,4663c <OSFlagAccept+0x17c>
   465c4:	00007206 	br	46790 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   465c8:	e0bffc17 	ldw	r2,-16(fp)
   465cc:	10c0020b 	ldhu	r3,8(r2)
   465d0:	e0bffd0b 	ldhu	r2,-12(fp)
   465d4:	1884703a 	and	r2,r3,r2
   465d8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   465dc:	e0fff30b 	ldhu	r3,-52(fp)
   465e0:	e0bffd0b 	ldhu	r2,-12(fp)
   465e4:	18800d1e 	bne	r3,r2,4661c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   465e8:	e0bff383 	ldbu	r2,-50(fp)
   465ec:	10800058 	cmpnei	r2,r2,1
   465f0:	10000d1e 	bne	r2,zero,46628 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   465f4:	e0bffc17 	ldw	r2,-16(fp)
   465f8:	1080020b 	ldhu	r2,8(r2)
   465fc:	1007883a 	mov	r3,r2
   46600:	e0bff30b 	ldhu	r2,-52(fp)
   46604:	0084303a 	nor	r2,zero,r2
   46608:	1884703a 	and	r2,r3,r2
   4660c:	1007883a 	mov	r3,r2
   46610:	e0bffc17 	ldw	r2,-16(fp)
   46614:	10c0020d 	sth	r3,8(r2)
   46618:	00000306 	br	46628 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   4661c:	e0bfff17 	ldw	r2,-4(fp)
   46620:	00c01c04 	movi	r3,112
   46624:	10c00005 	stb	r3,0(r2)
   46628:	e0bff417 	ldw	r2,-48(fp)
   4662c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   46630:	e0bff717 	ldw	r2,-36(fp)
   46634:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   46638:	00005e06 	br	467b4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   4663c:	e0bffc17 	ldw	r2,-16(fp)
   46640:	10c0020b 	ldhu	r3,8(r2)
   46644:	e0bffd0b 	ldhu	r2,-12(fp)
   46648:	1884703a 	and	r2,r3,r2
   4664c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   46650:	e0bff30b 	ldhu	r2,-52(fp)
   46654:	10000d26 	beq	r2,zero,4668c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   46658:	e0bff383 	ldbu	r2,-50(fp)
   4665c:	10800058 	cmpnei	r2,r2,1
   46660:	10000d1e 	bne	r2,zero,46698 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   46664:	e0bffc17 	ldw	r2,-16(fp)
   46668:	1080020b 	ldhu	r2,8(r2)
   4666c:	1007883a 	mov	r3,r2
   46670:	e0bff30b 	ldhu	r2,-52(fp)
   46674:	0084303a 	nor	r2,zero,r2
   46678:	1884703a 	and	r2,r3,r2
   4667c:	1007883a 	mov	r3,r2
   46680:	e0bffc17 	ldw	r2,-16(fp)
   46684:	10c0020d 	sth	r3,8(r2)
   46688:	00000306 	br	46698 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   4668c:	e0bfff17 	ldw	r2,-4(fp)
   46690:	00c01c04 	movi	r3,112
   46694:	10c00005 	stb	r3,0(r2)
   46698:	e0bff417 	ldw	r2,-48(fp)
   4669c:	e0bff815 	stw	r2,-32(fp)
   466a0:	e0bff817 	ldw	r2,-32(fp)
   466a4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   466a8:	00004206 	br	467b4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   466ac:	e0bffc17 	ldw	r2,-16(fp)
   466b0:	1080020b 	ldhu	r2,8(r2)
   466b4:	0084303a 	nor	r2,zero,r2
   466b8:	1007883a 	mov	r3,r2
   466bc:	e0bffd0b 	ldhu	r2,-12(fp)
   466c0:	1884703a 	and	r2,r3,r2
   466c4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   466c8:	e0fff30b 	ldhu	r3,-52(fp)
   466cc:	e0bffd0b 	ldhu	r2,-12(fp)
   466d0:	18800b1e 	bne	r3,r2,46700 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   466d4:	e0bff383 	ldbu	r2,-50(fp)
   466d8:	10800058 	cmpnei	r2,r2,1
   466dc:	10000b1e 	bne	r2,zero,4670c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   466e0:	e0bffc17 	ldw	r2,-16(fp)
   466e4:	10c0020b 	ldhu	r3,8(r2)
   466e8:	e0bff30b 	ldhu	r2,-52(fp)
   466ec:	1884b03a 	or	r2,r3,r2
   466f0:	1007883a 	mov	r3,r2
   466f4:	e0bffc17 	ldw	r2,-16(fp)
   466f8:	10c0020d 	sth	r3,8(r2)
   466fc:	00000306 	br	4670c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   46700:	e0bfff17 	ldw	r2,-4(fp)
   46704:	00c01c04 	movi	r3,112
   46708:	10c00005 	stb	r3,0(r2)
   4670c:	e0bff417 	ldw	r2,-48(fp)
   46710:	e0bff915 	stw	r2,-28(fp)
   46714:	e0bff917 	ldw	r2,-28(fp)
   46718:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   4671c:	00002506 	br	467b4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   46720:	e0bffc17 	ldw	r2,-16(fp)
   46724:	1080020b 	ldhu	r2,8(r2)
   46728:	0084303a 	nor	r2,zero,r2
   4672c:	1007883a 	mov	r3,r2
   46730:	e0bffd0b 	ldhu	r2,-12(fp)
   46734:	1884703a 	and	r2,r3,r2
   46738:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   4673c:	e0bff30b 	ldhu	r2,-52(fp)
   46740:	10000b26 	beq	r2,zero,46770 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   46744:	e0bff383 	ldbu	r2,-50(fp)
   46748:	10800058 	cmpnei	r2,r2,1
   4674c:	10000b1e 	bne	r2,zero,4677c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   46750:	e0bffc17 	ldw	r2,-16(fp)
   46754:	10c0020b 	ldhu	r3,8(r2)
   46758:	e0bff30b 	ldhu	r2,-52(fp)
   4675c:	1884b03a 	or	r2,r3,r2
   46760:	1007883a 	mov	r3,r2
   46764:	e0bffc17 	ldw	r2,-16(fp)
   46768:	10c0020d 	sth	r3,8(r2)
   4676c:	00000306 	br	4677c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   46770:	e0bfff17 	ldw	r2,-4(fp)
   46774:	00c01c04 	movi	r3,112
   46778:	10c00005 	stb	r3,0(r2)
   4677c:	e0bff417 	ldw	r2,-48(fp)
   46780:	e0bffa15 	stw	r2,-24(fp)
   46784:	e0bffa17 	ldw	r2,-24(fp)
   46788:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   4678c:	00000906 	br	467b4 <OSFlagAccept+0x2f4>
   46790:	e0bff417 	ldw	r2,-48(fp)
   46794:	e0bffb15 	stw	r2,-20(fp)
   46798:	e0bffb17 	ldw	r2,-20(fp)
   4679c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   467a0:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   467a4:	e0bfff17 	ldw	r2,-4(fp)
   467a8:	00c01bc4 	movi	r3,111
   467ac:	10c00005 	stb	r3,0(r2)
             break;
   467b0:	0001883a 	nop
    }
    return (flags_rdy);
   467b4:	e0bff30b 	ldhu	r2,-52(fp)
}
   467b8:	e037883a 	mov	sp,fp
   467bc:	df000017 	ldw	fp,0(sp)
   467c0:	dec00104 	addi	sp,sp,4
   467c4:	f800283a 	ret

000467c8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   467c8:	defff804 	addi	sp,sp,-32
   467cc:	df000715 	stw	fp,28(sp)
   467d0:	df000704 	addi	fp,sp,28
   467d4:	2005883a 	mov	r2,r4
   467d8:	e17fff15 	stw	r5,-4(fp)
   467dc:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   467e0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   467e4:	e0bfff17 	ldw	r2,-4(fp)
   467e8:	1000021e 	bne	r2,zero,467f4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   467ec:	0005883a 	mov	r2,zero
   467f0:	00003b06 	br	468e0 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   467f4:	00800174 	movhi	r2,5
   467f8:	108b2304 	addi	r2,r2,11404
   467fc:	10800003 	ldbu	r2,0(r2)
   46800:	10803fcc 	andi	r2,r2,255
   46804:	10000526 	beq	r2,zero,4681c <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   46808:	e0bfff17 	ldw	r2,-4(fp)
   4680c:	00c00404 	movi	r3,16
   46810:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   46814:	0005883a 	mov	r2,zero
   46818:	00003106 	br	468e0 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4681c:	0005303a 	rdctl	r2,status
   46820:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46824:	e0fffb17 	ldw	r3,-20(fp)
   46828:	00bfff84 	movi	r2,-2
   4682c:	1884703a 	and	r2,r3,r2
   46830:	1001703a 	wrctl	status,r2
  
  return context;
   46834:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   46838:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   4683c:	00800174 	movhi	r2,5
   46840:	108b2604 	addi	r2,r2,11416
   46844:	10800017 	ldw	r2,0(r2)
   46848:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   4684c:	e0bffa17 	ldw	r2,-24(fp)
   46850:	10001b26 	beq	r2,zero,468c0 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   46854:	00800174 	movhi	r2,5
   46858:	108b2604 	addi	r2,r2,11416
   4685c:	10800017 	ldw	r2,0(r2)
   46860:	10c00117 	ldw	r3,4(r2)
   46864:	00800174 	movhi	r2,5
   46868:	108b2604 	addi	r2,r2,11416
   4686c:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   46870:	e0bffa17 	ldw	r2,-24(fp)
   46874:	00c00144 	movi	r3,5
   46878:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   4687c:	e0bffa17 	ldw	r2,-24(fp)
   46880:	e0fffe0b 	ldhu	r3,-8(fp)
   46884:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   46888:	e0bffa17 	ldw	r2,-24(fp)
   4688c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   46890:	e0bffa17 	ldw	r2,-24(fp)
   46894:	00c00fc4 	movi	r3,63
   46898:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   4689c:	e0bffa17 	ldw	r2,-24(fp)
   468a0:	100002c5 	stb	zero,11(r2)
   468a4:	e0bff917 	ldw	r2,-28(fp)
   468a8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   468ac:	e0bffc17 	ldw	r2,-16(fp)
   468b0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   468b4:	e0bfff17 	ldw	r2,-4(fp)
   468b8:	10000005 	stb	zero,0(r2)
   468bc:	00000706 	br	468dc <OSFlagCreate+0x114>
   468c0:	e0bff917 	ldw	r2,-28(fp)
   468c4:	e0bffd15 	stw	r2,-12(fp)
   468c8:	e0bffd17 	ldw	r2,-12(fp)
   468cc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   468d0:	e0bfff17 	ldw	r2,-4(fp)
   468d4:	00c01c84 	movi	r3,114
   468d8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   468dc:	e0bffa17 	ldw	r2,-24(fp)
}
   468e0:	e037883a 	mov	sp,fp
   468e4:	df000017 	ldw	fp,0(sp)
   468e8:	dec00104 	addi	sp,sp,4
   468ec:	f800283a 	ret

000468f0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   468f0:	defff204 	addi	sp,sp,-56
   468f4:	dfc00d15 	stw	ra,52(sp)
   468f8:	df000c15 	stw	fp,48(sp)
   468fc:	df000c04 	addi	fp,sp,48
   46900:	e13ffd15 	stw	r4,-12(fp)
   46904:	2805883a 	mov	r2,r5
   46908:	e1bfff15 	stw	r6,-4(fp)
   4690c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   46910:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   46914:	e0bfff17 	ldw	r2,-4(fp)
   46918:	1000021e 	bne	r2,zero,46924 <OSFlagDel+0x34>
        return (pgrp);
   4691c:	e0bffd17 	ldw	r2,-12(fp)
   46920:	00008a06 	br	46b4c <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   46924:	e0bffd17 	ldw	r2,-12(fp)
   46928:	1000051e 	bne	r2,zero,46940 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   4692c:	e0bfff17 	ldw	r2,-4(fp)
   46930:	00c01b84 	movi	r3,110
   46934:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   46938:	e0bffd17 	ldw	r2,-12(fp)
   4693c:	00008306 	br	46b4c <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   46940:	00800174 	movhi	r2,5
   46944:	108b2304 	addi	r2,r2,11404
   46948:	10800003 	ldbu	r2,0(r2)
   4694c:	10803fcc 	andi	r2,r2,255
   46950:	10000526 	beq	r2,zero,46968 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   46954:	e0bfff17 	ldw	r2,-4(fp)
   46958:	00c003c4 	movi	r3,15
   4695c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   46960:	e0bffd17 	ldw	r2,-12(fp)
   46964:	00007906 	br	46b4c <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   46968:	e0bffd17 	ldw	r2,-12(fp)
   4696c:	10800003 	ldbu	r2,0(r2)
   46970:	10803fcc 	andi	r2,r2,255
   46974:	10800160 	cmpeqi	r2,r2,5
   46978:	1000051e 	bne	r2,zero,46990 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   4697c:	e0bfff17 	ldw	r2,-4(fp)
   46980:	00c00044 	movi	r3,1
   46984:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   46988:	e0bffd17 	ldw	r2,-12(fp)
   4698c:	00006f06 	br	46b4c <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46990:	0005303a 	rdctl	r2,status
   46994:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46998:	e0fff817 	ldw	r3,-32(fp)
   4699c:	00bfff84 	movi	r2,-2
   469a0:	1884703a 	and	r2,r3,r2
   469a4:	1001703a 	wrctl	status,r2
  
  return context;
   469a8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   469ac:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   469b0:	e0bffd17 	ldw	r2,-12(fp)
   469b4:	10800117 	ldw	r2,4(r2)
   469b8:	10000326 	beq	r2,zero,469c8 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   469bc:	00800044 	movi	r2,1
   469c0:	e0bff405 	stb	r2,-48(fp)
   469c4:	00000106 	br	469cc <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   469c8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   469cc:	e0bffe03 	ldbu	r2,-8(fp)
   469d0:	10000326 	beq	r2,zero,469e0 <OSFlagDel+0xf0>
   469d4:	10800060 	cmpeqi	r2,r2,1
   469d8:	1000271e 	bne	r2,zero,46a78 <OSFlagDel+0x188>
   469dc:	00005006 	br	46b20 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   469e0:	e0bff403 	ldbu	r2,-48(fp)
   469e4:	10001a1e 	bne	r2,zero,46a50 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   469e8:	e0bffd17 	ldw	r2,-12(fp)
   469ec:	00c00fc4 	movi	r3,63
   469f0:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   469f4:	e0bffd17 	ldw	r2,-12(fp)
   469f8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   469fc:	e0bffd17 	ldw	r2,-12(fp)
   46a00:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   46a04:	00800174 	movhi	r2,5
   46a08:	108b2604 	addi	r2,r2,11416
   46a0c:	10c00017 	ldw	r3,0(r2)
   46a10:	e0bffd17 	ldw	r2,-12(fp)
   46a14:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   46a18:	e0bffd17 	ldw	r2,-12(fp)
   46a1c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   46a20:	00800174 	movhi	r2,5
   46a24:	108b2604 	addi	r2,r2,11416
   46a28:	e0fffd17 	ldw	r3,-12(fp)
   46a2c:	10c00015 	stw	r3,0(r2)
   46a30:	e0bff717 	ldw	r2,-36(fp)
   46a34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   46a38:	e0bff917 	ldw	r2,-28(fp)
   46a3c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   46a40:	e0bfff17 	ldw	r2,-4(fp)
   46a44:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   46a48:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   46a4c:	00003e06 	br	46b48 <OSFlagDel+0x258>
   46a50:	e0bff717 	ldw	r2,-36(fp)
   46a54:	e0bffa15 	stw	r2,-24(fp)
   46a58:	e0bffa17 	ldw	r2,-24(fp)
   46a5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   46a60:	e0bfff17 	ldw	r2,-4(fp)
   46a64:	00c01244 	movi	r3,73
   46a68:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   46a6c:	e0bffd17 	ldw	r2,-12(fp)
   46a70:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   46a74:	00003406 	br	46b48 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   46a78:	e0bffd17 	ldw	r2,-12(fp)
   46a7c:	10800117 	ldw	r2,4(r2)
   46a80:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   46a84:	00000606 	br	46aa0 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   46a88:	e13ff517 	ldw	r4,-44(fp)
   46a8c:	000b883a 	mov	r5,zero
   46a90:	0047b2c0 	call	47b2c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   46a94:	e0bff517 	ldw	r2,-44(fp)
   46a98:	10800017 	ldw	r2,0(r2)
   46a9c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   46aa0:	e0bff517 	ldw	r2,-44(fp)
   46aa4:	103ff81e 	bne	r2,zero,46a88 <__alt_data_end+0xfffd0f28>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   46aa8:	e0bffd17 	ldw	r2,-12(fp)
   46aac:	00c00fc4 	movi	r3,63
   46ab0:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   46ab4:	e0bffd17 	ldw	r2,-12(fp)
   46ab8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   46abc:	e0bffd17 	ldw	r2,-12(fp)
   46ac0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   46ac4:	00800174 	movhi	r2,5
   46ac8:	108b2604 	addi	r2,r2,11416
   46acc:	10c00017 	ldw	r3,0(r2)
   46ad0:	e0bffd17 	ldw	r2,-12(fp)
   46ad4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   46ad8:	e0bffd17 	ldw	r2,-12(fp)
   46adc:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   46ae0:	00800174 	movhi	r2,5
   46ae4:	108b2604 	addi	r2,r2,11416
   46ae8:	e0fffd17 	ldw	r3,-12(fp)
   46aec:	10c00015 	stw	r3,0(r2)
   46af0:	e0bff717 	ldw	r2,-36(fp)
   46af4:	e0bffb15 	stw	r2,-20(fp)
   46af8:	e0bffb17 	ldw	r2,-20(fp)
   46afc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   46b00:	e0bff403 	ldbu	r2,-48(fp)
   46b04:	10800058 	cmpnei	r2,r2,1
   46b08:	1000011e 	bne	r2,zero,46b10 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   46b0c:	0045c6c0 	call	45c6c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   46b10:	e0bfff17 	ldw	r2,-4(fp)
   46b14:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   46b18:	e03ff615 	stw	zero,-40(fp)
             break;
   46b1c:	00000a06 	br	46b48 <OSFlagDel+0x258>
   46b20:	e0bff717 	ldw	r2,-36(fp)
   46b24:	e0bffc15 	stw	r2,-16(fp)
   46b28:	e0bffc17 	ldw	r2,-16(fp)
   46b2c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   46b30:	e0bfff17 	ldw	r2,-4(fp)
   46b34:	00c001c4 	movi	r3,7
   46b38:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   46b3c:	e0bffd17 	ldw	r2,-12(fp)
   46b40:	e0bff615 	stw	r2,-40(fp)
             break;
   46b44:	0001883a 	nop
    }
    return (pgrp_return);
   46b48:	e0bff617 	ldw	r2,-40(fp)
}
   46b4c:	e037883a 	mov	sp,fp
   46b50:	dfc00117 	ldw	ra,4(sp)
   46b54:	df000017 	ldw	fp,0(sp)
   46b58:	dec00204 	addi	sp,sp,8
   46b5c:	f800283a 	ret

00046b60 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   46b60:	defff604 	addi	sp,sp,-40
   46b64:	dfc00915 	stw	ra,36(sp)
   46b68:	df000815 	stw	fp,32(sp)
   46b6c:	df000804 	addi	fp,sp,32
   46b70:	e13ffd15 	stw	r4,-12(fp)
   46b74:	e17ffe15 	stw	r5,-8(fp)
   46b78:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   46b7c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   46b80:	e0bfff17 	ldw	r2,-4(fp)
   46b84:	1000021e 	bne	r2,zero,46b90 <OSFlagNameGet+0x30>
        return (0);
   46b88:	0005883a 	mov	r2,zero
   46b8c:	00003b06 	br	46c7c <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   46b90:	e0bffd17 	ldw	r2,-12(fp)
   46b94:	1000051e 	bne	r2,zero,46bac <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   46b98:	e0bfff17 	ldw	r2,-4(fp)
   46b9c:	00c01b84 	movi	r3,110
   46ba0:	10c00005 	stb	r3,0(r2)
        return (0);
   46ba4:	0005883a 	mov	r2,zero
   46ba8:	00003406 	br	46c7c <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   46bac:	e0bffe17 	ldw	r2,-8(fp)
   46bb0:	1000051e 	bne	r2,zero,46bc8 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   46bb4:	e0bfff17 	ldw	r2,-4(fp)
   46bb8:	00c00304 	movi	r3,12
   46bbc:	10c00005 	stb	r3,0(r2)
        return (0);
   46bc0:	0005883a 	mov	r2,zero
   46bc4:	00002d06 	br	46c7c <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   46bc8:	00800174 	movhi	r2,5
   46bcc:	108b2304 	addi	r2,r2,11404
   46bd0:	10800003 	ldbu	r2,0(r2)
   46bd4:	10803fcc 	andi	r2,r2,255
   46bd8:	10000526 	beq	r2,zero,46bf0 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   46bdc:	e0bfff17 	ldw	r2,-4(fp)
   46be0:	00c00444 	movi	r3,17
   46be4:	10c00005 	stb	r3,0(r2)
        return (0);
   46be8:	0005883a 	mov	r2,zero
   46bec:	00002306 	br	46c7c <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46bf0:	0005303a 	rdctl	r2,status
   46bf4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46bf8:	e0fffa17 	ldw	r3,-24(fp)
   46bfc:	00bfff84 	movi	r2,-2
   46c00:	1884703a 	and	r2,r3,r2
   46c04:	1001703a 	wrctl	status,r2
  
  return context;
   46c08:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   46c0c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   46c10:	e0bffd17 	ldw	r2,-12(fp)
   46c14:	10800003 	ldbu	r2,0(r2)
   46c18:	10803fcc 	andi	r2,r2,255
   46c1c:	10800160 	cmpeqi	r2,r2,5
   46c20:	1000091e 	bne	r2,zero,46c48 <OSFlagNameGet+0xe8>
   46c24:	e0bff817 	ldw	r2,-32(fp)
   46c28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   46c2c:	e0bffb17 	ldw	r2,-20(fp)
   46c30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   46c34:	e0bfff17 	ldw	r2,-4(fp)
   46c38:	00c00044 	movi	r3,1
   46c3c:	10c00005 	stb	r3,0(r2)
        return (0);
   46c40:	0005883a 	mov	r2,zero
   46c44:	00000d06 	br	46c7c <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   46c48:	e0bffd17 	ldw	r2,-12(fp)
   46c4c:	10800284 	addi	r2,r2,10
   46c50:	e13ffe17 	ldw	r4,-8(fp)
   46c54:	100b883a 	mov	r5,r2
   46c58:	0045da80 	call	45da8 <OS_StrCopy>
   46c5c:	e0bff905 	stb	r2,-28(fp)
   46c60:	e0bff817 	ldw	r2,-32(fp)
   46c64:	e0bffc15 	stw	r2,-16(fp)
   46c68:	e0bffc17 	ldw	r2,-16(fp)
   46c6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   46c70:	e0bfff17 	ldw	r2,-4(fp)
   46c74:	10000005 	stb	zero,0(r2)
    return (len);
   46c78:	e0bff903 	ldbu	r2,-28(fp)
}
   46c7c:	e037883a 	mov	sp,fp
   46c80:	dfc00117 	ldw	ra,4(sp)
   46c84:	df000017 	ldw	fp,0(sp)
   46c88:	dec00204 	addi	sp,sp,8
   46c8c:	f800283a 	ret

00046c90 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   46c90:	defff504 	addi	sp,sp,-44
   46c94:	dfc00a15 	stw	ra,40(sp)
   46c98:	df000915 	stw	fp,36(sp)
   46c9c:	df000904 	addi	fp,sp,36
   46ca0:	e13ffd15 	stw	r4,-12(fp)
   46ca4:	e17ffe15 	stw	r5,-8(fp)
   46ca8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   46cac:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   46cb0:	e0bfff17 	ldw	r2,-4(fp)
   46cb4:	1000011e 	bne	r2,zero,46cbc <OSFlagNameSet+0x2c>
        return;
   46cb8:	00004406 	br	46dcc <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   46cbc:	e0bffd17 	ldw	r2,-12(fp)
   46cc0:	1000041e 	bne	r2,zero,46cd4 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   46cc4:	e0bfff17 	ldw	r2,-4(fp)
   46cc8:	00c01b84 	movi	r3,110
   46ccc:	10c00005 	stb	r3,0(r2)
        return;
   46cd0:	00003e06 	br	46dcc <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   46cd4:	e0bffe17 	ldw	r2,-8(fp)
   46cd8:	1000041e 	bne	r2,zero,46cec <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   46cdc:	e0bfff17 	ldw	r2,-4(fp)
   46ce0:	00c00304 	movi	r3,12
   46ce4:	10c00005 	stb	r3,0(r2)
        return;
   46ce8:	00003806 	br	46dcc <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   46cec:	00800174 	movhi	r2,5
   46cf0:	108b2304 	addi	r2,r2,11404
   46cf4:	10800003 	ldbu	r2,0(r2)
   46cf8:	10803fcc 	andi	r2,r2,255
   46cfc:	10000426 	beq	r2,zero,46d10 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   46d00:	e0bfff17 	ldw	r2,-4(fp)
   46d04:	00c00484 	movi	r3,18
   46d08:	10c00005 	stb	r3,0(r2)
        return;
   46d0c:	00002f06 	br	46dcc <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46d10:	0005303a 	rdctl	r2,status
   46d14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46d18:	e0fff917 	ldw	r3,-28(fp)
   46d1c:	00bfff84 	movi	r2,-2
   46d20:	1884703a 	and	r2,r3,r2
   46d24:	1001703a 	wrctl	status,r2
  
  return context;
   46d28:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   46d2c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   46d30:	e0bffd17 	ldw	r2,-12(fp)
   46d34:	10800003 	ldbu	r2,0(r2)
   46d38:	10803fcc 	andi	r2,r2,255
   46d3c:	10800160 	cmpeqi	r2,r2,5
   46d40:	1000081e 	bne	r2,zero,46d64 <OSFlagNameSet+0xd4>
   46d44:	e0bff717 	ldw	r2,-36(fp)
   46d48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   46d4c:	e0bffa17 	ldw	r2,-24(fp)
   46d50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   46d54:	e0bfff17 	ldw	r2,-4(fp)
   46d58:	00c00044 	movi	r3,1
   46d5c:	10c00005 	stb	r3,0(r2)
        return;
   46d60:	00001a06 	br	46dcc <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   46d64:	e13ffe17 	ldw	r4,-8(fp)
   46d68:	0045e1c0 	call	45e1c <OS_StrLen>
   46d6c:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   46d70:	e0bff803 	ldbu	r2,-32(fp)
   46d74:	10800830 	cmpltui	r2,r2,32
   46d78:	1000081e 	bne	r2,zero,46d9c <OSFlagNameSet+0x10c>
   46d7c:	e0bff717 	ldw	r2,-36(fp)
   46d80:	e0bffb15 	stw	r2,-20(fp)
   46d84:	e0bffb17 	ldw	r2,-20(fp)
   46d88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   46d8c:	e0bfff17 	ldw	r2,-4(fp)
   46d90:	00c01cc4 	movi	r3,115
   46d94:	10c00005 	stb	r3,0(r2)
        return;
   46d98:	00000c06 	br	46dcc <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   46d9c:	e0bffd17 	ldw	r2,-12(fp)
   46da0:	10800284 	addi	r2,r2,10
   46da4:	1009883a 	mov	r4,r2
   46da8:	e17ffe17 	ldw	r5,-8(fp)
   46dac:	0045da80 	call	45da8 <OS_StrCopy>
   46db0:	e0bff717 	ldw	r2,-36(fp)
   46db4:	e0bffc15 	stw	r2,-16(fp)
   46db8:	e0bffc17 	ldw	r2,-16(fp)
   46dbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   46dc0:	e0bfff17 	ldw	r2,-4(fp)
   46dc4:	10000005 	stb	zero,0(r2)
    return;
   46dc8:	0001883a 	nop
}
   46dcc:	e037883a 	mov	sp,fp
   46dd0:	dfc00117 	ldw	ra,4(sp)
   46dd4:	df000017 	ldw	fp,0(sp)
   46dd8:	dec00204 	addi	sp,sp,8
   46ddc:	f800283a 	ret

00046de0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   46de0:	deffe204 	addi	sp,sp,-120
   46de4:	dfc01d15 	stw	ra,116(sp)
   46de8:	df001c15 	stw	fp,112(sp)
   46dec:	df001c04 	addi	fp,sp,112
   46df0:	e13ffc15 	stw	r4,-16(fp)
   46df4:	2809883a 	mov	r4,r5
   46df8:	3007883a 	mov	r3,r6
   46dfc:	3805883a 	mov	r2,r7
   46e00:	e13ffd0d 	sth	r4,-12(fp)
   46e04:	e0fffe05 	stb	r3,-8(fp)
   46e08:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   46e0c:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   46e10:	e0800217 	ldw	r2,8(fp)
   46e14:	1000021e 	bne	r2,zero,46e20 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   46e18:	0005883a 	mov	r2,zero
   46e1c:	00016706 	br	473bc <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   46e20:	e0bffc17 	ldw	r2,-16(fp)
   46e24:	1000051e 	bne	r2,zero,46e3c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   46e28:	e0800217 	ldw	r2,8(fp)
   46e2c:	00c01b84 	movi	r3,110
   46e30:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   46e34:	0005883a 	mov	r2,zero
   46e38:	00016006 	br	473bc <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   46e3c:	00800174 	movhi	r2,5
   46e40:	108b2304 	addi	r2,r2,11404
   46e44:	10800003 	ldbu	r2,0(r2)
   46e48:	10803fcc 	andi	r2,r2,255
   46e4c:	10000526 	beq	r2,zero,46e64 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   46e50:	e0800217 	ldw	r2,8(fp)
   46e54:	00c00084 	movi	r3,2
   46e58:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   46e5c:	0005883a 	mov	r2,zero
   46e60:	00015606 	br	473bc <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   46e64:	00800174 	movhi	r2,5
   46e68:	108b1504 	addi	r2,r2,11348
   46e6c:	10800003 	ldbu	r2,0(r2)
   46e70:	10803fcc 	andi	r2,r2,255
   46e74:	10000526 	beq	r2,zero,46e8c <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   46e78:	e0800217 	ldw	r2,8(fp)
   46e7c:	00c00344 	movi	r3,13
   46e80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   46e84:	0005883a 	mov	r2,zero
   46e88:	00014c06 	br	473bc <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   46e8c:	e0bffc17 	ldw	r2,-16(fp)
   46e90:	10800003 	ldbu	r2,0(r2)
   46e94:	10803fcc 	andi	r2,r2,255
   46e98:	10800160 	cmpeqi	r2,r2,5
   46e9c:	1000051e 	bne	r2,zero,46eb4 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   46ea0:	e0800217 	ldw	r2,8(fp)
   46ea4:	00c00044 	movi	r3,1
   46ea8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   46eac:	0005883a 	mov	r2,zero
   46eb0:	00014206 	br	473bc <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   46eb4:	e0fffe03 	ldbu	r3,-8(fp)
   46eb8:	00bfe004 	movi	r2,-128
   46ebc:	1884703a 	and	r2,r3,r2
   46ec0:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   46ec4:	e0bfe703 	ldbu	r2,-100(fp)
   46ec8:	10000626 	beq	r2,zero,46ee4 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   46ecc:	e0bffe03 	ldbu	r2,-8(fp)
   46ed0:	10801fcc 	andi	r2,r2,127
   46ed4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   46ed8:	00800044 	movi	r2,1
   46edc:	e0bfe505 	stb	r2,-108(fp)
   46ee0:	00000106 	br	46ee8 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   46ee4:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46ee8:	0005303a 	rdctl	r2,status
   46eec:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46ef0:	e0ffe917 	ldw	r3,-92(fp)
   46ef4:	00bfff84 	movi	r2,-2
   46ef8:	1884703a 	and	r2,r3,r2
   46efc:	1001703a 	wrctl	status,r2
  
  return context;
   46f00:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   46f04:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   46f08:	e0bffe03 	ldbu	r2,-8(fp)
   46f0c:	10c00060 	cmpeqi	r3,r2,1
   46f10:	1800921e 	bne	r3,zero,4715c <OSFlagPend+0x37c>
   46f14:	10c00088 	cmpgei	r3,r2,2
   46f18:	1800021e 	bne	r3,zero,46f24 <OSFlagPend+0x144>
   46f1c:	10006126 	beq	r2,zero,470a4 <OSFlagPend+0x2c4>
   46f20:	0000bb06 	br	47210 <OSFlagPend+0x430>
   46f24:	10c000a0 	cmpeqi	r3,r2,2
   46f28:	1800031e 	bne	r3,zero,46f38 <OSFlagPend+0x158>
   46f2c:	108000e0 	cmpeqi	r2,r2,3
   46f30:	10002f1e 	bne	r2,zero,46ff0 <OSFlagPend+0x210>
   46f34:	0000b606 	br	47210 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   46f38:	e0bffc17 	ldw	r2,-16(fp)
   46f3c:	10c0020b 	ldhu	r3,8(r2)
   46f40:	e0bffd0b 	ldhu	r2,-12(fp)
   46f44:	1884703a 	and	r2,r3,r2
   46f48:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   46f4c:	e0ffe78b 	ldhu	r3,-98(fp)
   46f50:	e0bffd0b 	ldhu	r2,-12(fp)
   46f54:	1880191e 	bne	r3,r2,46fbc <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   46f58:	e0bfe503 	ldbu	r2,-108(fp)
   46f5c:	10800058 	cmpnei	r2,r2,1
   46f60:	1000091e 	bne	r2,zero,46f88 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   46f64:	e0bffc17 	ldw	r2,-16(fp)
   46f68:	1080020b 	ldhu	r2,8(r2)
   46f6c:	1007883a 	mov	r3,r2
   46f70:	e0bfe78b 	ldhu	r2,-98(fp)
   46f74:	0084303a 	nor	r2,zero,r2
   46f78:	1884703a 	and	r2,r3,r2
   46f7c:	1007883a 	mov	r3,r2
   46f80:	e0bffc17 	ldw	r2,-16(fp)
   46f84:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   46f88:	00800174 	movhi	r2,5
   46f8c:	108b2404 	addi	r2,r2,11408
   46f90:	10800017 	ldw	r2,0(r2)
   46f94:	e0ffe78b 	ldhu	r3,-98(fp)
   46f98:	10c00b0d 	sth	r3,44(r2)
   46f9c:	e0bfe617 	ldw	r2,-104(fp)
   46fa0:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   46fa4:	e0bfea17 	ldw	r2,-88(fp)
   46fa8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   46fac:	e0800217 	ldw	r2,8(fp)
   46fb0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   46fb4:	e0bfe78b 	ldhu	r2,-98(fp)
   46fb8:	00010006 	br	473bc <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   46fbc:	e1bffd0b 	ldhu	r6,-12(fp)
   46fc0:	e0fffe03 	ldbu	r3,-8(fp)
   46fc4:	e0bfff0b 	ldhu	r2,-4(fp)
   46fc8:	e17ff704 	addi	r5,fp,-36
   46fcc:	d8800015 	stw	r2,0(sp)
   46fd0:	e13ffc17 	ldw	r4,-16(fp)
   46fd4:	180f883a 	mov	r7,r3
   46fd8:	00478840 	call	47884 <OS_FlagBlock>
   46fdc:	e0bfe617 	ldw	r2,-104(fp)
   46fe0:	e0bfeb15 	stw	r2,-84(fp)
   46fe4:	e0bfeb17 	ldw	r2,-84(fp)
   46fe8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   46fec:	00009206 	br	47238 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   46ff0:	e0bffc17 	ldw	r2,-16(fp)
   46ff4:	10c0020b 	ldhu	r3,8(r2)
   46ff8:	e0bffd0b 	ldhu	r2,-12(fp)
   46ffc:	1884703a 	and	r2,r3,r2
   47000:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   47004:	e0bfe78b 	ldhu	r2,-98(fp)
   47008:	10001926 	beq	r2,zero,47070 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   4700c:	e0bfe503 	ldbu	r2,-108(fp)
   47010:	10800058 	cmpnei	r2,r2,1
   47014:	1000091e 	bne	r2,zero,4703c <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   47018:	e0bffc17 	ldw	r2,-16(fp)
   4701c:	1080020b 	ldhu	r2,8(r2)
   47020:	1007883a 	mov	r3,r2
   47024:	e0bfe78b 	ldhu	r2,-98(fp)
   47028:	0084303a 	nor	r2,zero,r2
   4702c:	1884703a 	and	r2,r3,r2
   47030:	1007883a 	mov	r3,r2
   47034:	e0bffc17 	ldw	r2,-16(fp)
   47038:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   4703c:	00800174 	movhi	r2,5
   47040:	108b2404 	addi	r2,r2,11408
   47044:	10800017 	ldw	r2,0(r2)
   47048:	e0ffe78b 	ldhu	r3,-98(fp)
   4704c:	10c00b0d 	sth	r3,44(r2)
   47050:	e0bfe617 	ldw	r2,-104(fp)
   47054:	e0bfec15 	stw	r2,-80(fp)
   47058:	e0bfec17 	ldw	r2,-80(fp)
   4705c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   47060:	e0800217 	ldw	r2,8(fp)
   47064:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   47068:	e0bfe78b 	ldhu	r2,-98(fp)
   4706c:	0000d306 	br	473bc <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   47070:	e1bffd0b 	ldhu	r6,-12(fp)
   47074:	e0fffe03 	ldbu	r3,-8(fp)
   47078:	e0bfff0b 	ldhu	r2,-4(fp)
   4707c:	e17ff704 	addi	r5,fp,-36
   47080:	d8800015 	stw	r2,0(sp)
   47084:	e13ffc17 	ldw	r4,-16(fp)
   47088:	180f883a 	mov	r7,r3
   4708c:	00478840 	call	47884 <OS_FlagBlock>
   47090:	e0bfe617 	ldw	r2,-104(fp)
   47094:	e0bfed15 	stw	r2,-76(fp)
   47098:	e0bfed17 	ldw	r2,-76(fp)
   4709c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   470a0:	00006506 	br	47238 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   470a4:	e0bffc17 	ldw	r2,-16(fp)
   470a8:	1080020b 	ldhu	r2,8(r2)
   470ac:	0084303a 	nor	r2,zero,r2
   470b0:	1007883a 	mov	r3,r2
   470b4:	e0bffd0b 	ldhu	r2,-12(fp)
   470b8:	1884703a 	and	r2,r3,r2
   470bc:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   470c0:	e0ffe78b 	ldhu	r3,-98(fp)
   470c4:	e0bffd0b 	ldhu	r2,-12(fp)
   470c8:	1880171e 	bne	r3,r2,47128 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   470cc:	e0bfe503 	ldbu	r2,-108(fp)
   470d0:	10800058 	cmpnei	r2,r2,1
   470d4:	1000071e 	bne	r2,zero,470f4 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   470d8:	e0bffc17 	ldw	r2,-16(fp)
   470dc:	10c0020b 	ldhu	r3,8(r2)
   470e0:	e0bfe78b 	ldhu	r2,-98(fp)
   470e4:	1884b03a 	or	r2,r3,r2
   470e8:	1007883a 	mov	r3,r2
   470ec:	e0bffc17 	ldw	r2,-16(fp)
   470f0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   470f4:	00800174 	movhi	r2,5
   470f8:	108b2404 	addi	r2,r2,11408
   470fc:	10800017 	ldw	r2,0(r2)
   47100:	e0ffe78b 	ldhu	r3,-98(fp)
   47104:	10c00b0d 	sth	r3,44(r2)
   47108:	e0bfe617 	ldw	r2,-104(fp)
   4710c:	e0bfee15 	stw	r2,-72(fp)
   47110:	e0bfee17 	ldw	r2,-72(fp)
   47114:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   47118:	e0800217 	ldw	r2,8(fp)
   4711c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   47120:	e0bfe78b 	ldhu	r2,-98(fp)
   47124:	0000a506 	br	473bc <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   47128:	e1bffd0b 	ldhu	r6,-12(fp)
   4712c:	e0fffe03 	ldbu	r3,-8(fp)
   47130:	e0bfff0b 	ldhu	r2,-4(fp)
   47134:	e17ff704 	addi	r5,fp,-36
   47138:	d8800015 	stw	r2,0(sp)
   4713c:	e13ffc17 	ldw	r4,-16(fp)
   47140:	180f883a 	mov	r7,r3
   47144:	00478840 	call	47884 <OS_FlagBlock>
   47148:	e0bfe617 	ldw	r2,-104(fp)
   4714c:	e0bfef15 	stw	r2,-68(fp)
   47150:	e0bfef17 	ldw	r2,-68(fp)
   47154:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   47158:	00003706 	br	47238 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   4715c:	e0bffc17 	ldw	r2,-16(fp)
   47160:	1080020b 	ldhu	r2,8(r2)
   47164:	0084303a 	nor	r2,zero,r2
   47168:	1007883a 	mov	r3,r2
   4716c:	e0bffd0b 	ldhu	r2,-12(fp)
   47170:	1884703a 	and	r2,r3,r2
   47174:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   47178:	e0bfe78b 	ldhu	r2,-98(fp)
   4717c:	10001726 	beq	r2,zero,471dc <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   47180:	e0bfe503 	ldbu	r2,-108(fp)
   47184:	10800058 	cmpnei	r2,r2,1
   47188:	1000071e 	bne	r2,zero,471a8 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   4718c:	e0bffc17 	ldw	r2,-16(fp)
   47190:	10c0020b 	ldhu	r3,8(r2)
   47194:	e0bfe78b 	ldhu	r2,-98(fp)
   47198:	1884b03a 	or	r2,r3,r2
   4719c:	1007883a 	mov	r3,r2
   471a0:	e0bffc17 	ldw	r2,-16(fp)
   471a4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   471a8:	00800174 	movhi	r2,5
   471ac:	108b2404 	addi	r2,r2,11408
   471b0:	10800017 	ldw	r2,0(r2)
   471b4:	e0ffe78b 	ldhu	r3,-98(fp)
   471b8:	10c00b0d 	sth	r3,44(r2)
   471bc:	e0bfe617 	ldw	r2,-104(fp)
   471c0:	e0bff015 	stw	r2,-64(fp)
   471c4:	e0bff017 	ldw	r2,-64(fp)
   471c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   471cc:	e0800217 	ldw	r2,8(fp)
   471d0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   471d4:	e0bfe78b 	ldhu	r2,-98(fp)
   471d8:	00007806 	br	473bc <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   471dc:	e1bffd0b 	ldhu	r6,-12(fp)
   471e0:	e0fffe03 	ldbu	r3,-8(fp)
   471e4:	e0bfff0b 	ldhu	r2,-4(fp)
   471e8:	e17ff704 	addi	r5,fp,-36
   471ec:	d8800015 	stw	r2,0(sp)
   471f0:	e13ffc17 	ldw	r4,-16(fp)
   471f4:	180f883a 	mov	r7,r3
   471f8:	00478840 	call	47884 <OS_FlagBlock>
   471fc:	e0bfe617 	ldw	r2,-104(fp)
   47200:	e0bff115 	stw	r2,-60(fp)
   47204:	e0bff117 	ldw	r2,-60(fp)
   47208:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   4720c:	00000a06 	br	47238 <OSFlagPend+0x458>
   47210:	e0bfe617 	ldw	r2,-104(fp)
   47214:	e0bff215 	stw	r2,-56(fp)
   47218:	e0bff217 	ldw	r2,-56(fp)
   4721c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   47220:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   47224:	e0800217 	ldw	r2,8(fp)
   47228:	00c01bc4 	movi	r3,111
   4722c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   47230:	e0bfe78b 	ldhu	r2,-98(fp)
   47234:	00006106 	br	473bc <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   47238:	0045c6c0 	call	45c6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4723c:	0005303a 	rdctl	r2,status
   47240:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   47244:	e0fff317 	ldw	r3,-52(fp)
   47248:	00bfff84 	movi	r2,-2
   4724c:	1884703a 	and	r2,r3,r2
   47250:	1001703a 	wrctl	status,r2
  
  return context;
   47254:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   47258:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   4725c:	00800174 	movhi	r2,5
   47260:	108b2404 	addi	r2,r2,11408
   47264:	10800017 	ldw	r2,0(r2)
   47268:	10800c43 	ldbu	r2,49(r2)
   4726c:	10803fcc 	andi	r2,r2,255
   47270:	10002226 	beq	r2,zero,472fc <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   47274:	00800174 	movhi	r2,5
   47278:	108b2404 	addi	r2,r2,11408
   4727c:	10800017 	ldw	r2,0(r2)
   47280:	10800c43 	ldbu	r2,49(r2)
   47284:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   47288:	00800174 	movhi	r2,5
   4728c:	108b2404 	addi	r2,r2,11408
   47290:	10800017 	ldw	r2,0(r2)
   47294:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   47298:	e0bff704 	addi	r2,fp,-36
   4729c:	1009883a 	mov	r4,r2
   472a0:	0047c3c0 	call	47c3c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   472a4:	00800174 	movhi	r2,5
   472a8:	108b2404 	addi	r2,r2,11408
   472ac:	10800017 	ldw	r2,0(r2)
   472b0:	10000c05 	stb	zero,48(r2)
   472b4:	e0bfe617 	ldw	r2,-104(fp)
   472b8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   472bc:	e0bff417 	ldw	r2,-48(fp)
   472c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   472c4:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   472c8:	e0bfe803 	ldbu	r2,-96(fp)
   472cc:	108000a0 	cmpeqi	r2,r2,2
   472d0:	10000426 	beq	r2,zero,472e4 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   472d4:	e0800217 	ldw	r2,8(fp)
   472d8:	00c00384 	movi	r3,14
   472dc:	10c00005 	stb	r3,0(r2)
                 break;
   472e0:	00000406 	br	472f4 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   472e4:	e0800217 	ldw	r2,8(fp)
   472e8:	00c00284 	movi	r3,10
   472ec:	10c00005 	stb	r3,0(r2)
                 break;
   472f0:	0001883a 	nop
        }
        return (flags_rdy);
   472f4:	e0bfe78b 	ldhu	r2,-98(fp)
   472f8:	00003006 	br	473bc <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   472fc:	00800174 	movhi	r2,5
   47300:	108b2404 	addi	r2,r2,11408
   47304:	10800017 	ldw	r2,0(r2)
   47308:	10800b0b 	ldhu	r2,44(r2)
   4730c:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   47310:	e0bfe503 	ldbu	r2,-108(fp)
   47314:	10800058 	cmpnei	r2,r2,1
   47318:	1000211e 	bne	r2,zero,473a0 <OSFlagPend+0x5c0>
        switch (wait_type) {
   4731c:	e0bffe03 	ldbu	r2,-8(fp)
   47320:	10001616 	blt	r2,zero,4737c <OSFlagPend+0x59c>
   47324:	10c00090 	cmplti	r3,r2,2
   47328:	18000c1e 	bne	r3,zero,4735c <OSFlagPend+0x57c>
   4732c:	10800108 	cmpgei	r2,r2,4
   47330:	1000121e 	bne	r2,zero,4737c <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   47334:	e0bffc17 	ldw	r2,-16(fp)
   47338:	1080020b 	ldhu	r2,8(r2)
   4733c:	1007883a 	mov	r3,r2
   47340:	e0bfe78b 	ldhu	r2,-98(fp)
   47344:	0084303a 	nor	r2,zero,r2
   47348:	1884703a 	and	r2,r3,r2
   4734c:	1007883a 	mov	r3,r2
   47350:	e0bffc17 	ldw	r2,-16(fp)
   47354:	10c0020d 	sth	r3,8(r2)
                 break;
   47358:	00001106 	br	473a0 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   4735c:	e0bffc17 	ldw	r2,-16(fp)
   47360:	10c0020b 	ldhu	r3,8(r2)
   47364:	e0bfe78b 	ldhu	r2,-98(fp)
   47368:	1884b03a 	or	r2,r3,r2
   4736c:	1007883a 	mov	r3,r2
   47370:	e0bffc17 	ldw	r2,-16(fp)
   47374:	10c0020d 	sth	r3,8(r2)
                 break;
   47378:	00000906 	br	473a0 <OSFlagPend+0x5c0>
   4737c:	e0bfe617 	ldw	r2,-104(fp)
   47380:	e0bff515 	stw	r2,-44(fp)
   47384:	e0bff517 	ldw	r2,-44(fp)
   47388:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   4738c:	e0800217 	ldw	r2,8(fp)
   47390:	00c01bc4 	movi	r3,111
   47394:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   47398:	0005883a 	mov	r2,zero
   4739c:	00000706 	br	473bc <OSFlagPend+0x5dc>
   473a0:	e0bfe617 	ldw	r2,-104(fp)
   473a4:	e0bff615 	stw	r2,-40(fp)
   473a8:	e0bff617 	ldw	r2,-40(fp)
   473ac:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   473b0:	e0800217 	ldw	r2,8(fp)
   473b4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   473b8:	e0bfe78b 	ldhu	r2,-98(fp)
}
   473bc:	e037883a 	mov	sp,fp
   473c0:	dfc00117 	ldw	ra,4(sp)
   473c4:	df000017 	ldw	fp,0(sp)
   473c8:	dec00204 	addi	sp,sp,8
   473cc:	f800283a 	ret

000473d0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   473d0:	defffb04 	addi	sp,sp,-20
   473d4:	df000415 	stw	fp,16(sp)
   473d8:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   473dc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   473e0:	0005303a 	rdctl	r2,status
   473e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   473e8:	e0fffe17 	ldw	r3,-8(fp)
   473ec:	00bfff84 	movi	r2,-2
   473f0:	1884703a 	and	r2,r3,r2
   473f4:	1001703a 	wrctl	status,r2
  
  return context;
   473f8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   473fc:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   47400:	00800174 	movhi	r2,5
   47404:	108b2404 	addi	r2,r2,11408
   47408:	10800017 	ldw	r2,0(r2)
   4740c:	10800b0b 	ldhu	r2,44(r2)
   47410:	e0bffd0d 	sth	r2,-12(fp)
   47414:	e0bffc17 	ldw	r2,-16(fp)
   47418:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4741c:	e0bfff17 	ldw	r2,-4(fp)
   47420:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   47424:	e0bffd0b 	ldhu	r2,-12(fp)
}
   47428:	e037883a 	mov	sp,fp
   4742c:	df000017 	ldw	fp,0(sp)
   47430:	dec00104 	addi	sp,sp,4
   47434:	f800283a 	ret

00047438 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   47438:	deffef04 	addi	sp,sp,-68
   4743c:	dfc01015 	stw	ra,64(sp)
   47440:	df000f15 	stw	fp,60(sp)
   47444:	df000f04 	addi	fp,sp,60
   47448:	e13ffc15 	stw	r4,-16(fp)
   4744c:	2807883a 	mov	r3,r5
   47450:	3005883a 	mov	r2,r6
   47454:	e1ffff15 	stw	r7,-4(fp)
   47458:	e0fffd0d 	sth	r3,-12(fp)
   4745c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   47460:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   47464:	e0bfff17 	ldw	r2,-4(fp)
   47468:	1000021e 	bne	r2,zero,47474 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   4746c:	0005883a 	mov	r2,zero
   47470:	0000ce06 	br	477ac <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   47474:	e0bffc17 	ldw	r2,-16(fp)
   47478:	1000051e 	bne	r2,zero,47490 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   4747c:	e0bfff17 	ldw	r2,-4(fp)
   47480:	00c01b84 	movi	r3,110
   47484:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   47488:	0005883a 	mov	r2,zero
   4748c:	0000c706 	br	477ac <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   47490:	e0bffc17 	ldw	r2,-16(fp)
   47494:	10800003 	ldbu	r2,0(r2)
   47498:	10803fcc 	andi	r2,r2,255
   4749c:	10800160 	cmpeqi	r2,r2,5
   474a0:	1000051e 	bne	r2,zero,474b8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   474a4:	e0bfff17 	ldw	r2,-4(fp)
   474a8:	00c00044 	movi	r3,1
   474ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   474b0:	0005883a 	mov	r2,zero
   474b4:	0000bd06 	br	477ac <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   474b8:	0005303a 	rdctl	r2,status
   474bc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   474c0:	e0fff617 	ldw	r3,-40(fp)
   474c4:	00bfff84 	movi	r2,-2
   474c8:	1884703a 	and	r2,r3,r2
   474cc:	1001703a 	wrctl	status,r2
  
  return context;
   474d0:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   474d4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   474d8:	e0bffe03 	ldbu	r2,-8(fp)
   474dc:	10000326 	beq	r2,zero,474ec <OSFlagPost+0xb4>
   474e0:	10800060 	cmpeqi	r2,r2,1
   474e4:	10000b1e 	bne	r2,zero,47514 <OSFlagPost+0xdc>
   474e8:	00001206 	br	47534 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   474ec:	e0bffc17 	ldw	r2,-16(fp)
   474f0:	1080020b 	ldhu	r2,8(r2)
   474f4:	1007883a 	mov	r3,r2
   474f8:	e0bffd0b 	ldhu	r2,-12(fp)
   474fc:	0084303a 	nor	r2,zero,r2
   47500:	1884703a 	and	r2,r3,r2
   47504:	1007883a 	mov	r3,r2
   47508:	e0bffc17 	ldw	r2,-16(fp)
   4750c:	10c0020d 	sth	r3,8(r2)
             break;
   47510:	00001106 	br	47558 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   47514:	e0bffc17 	ldw	r2,-16(fp)
   47518:	10c0020b 	ldhu	r3,8(r2)
   4751c:	e0bffd0b 	ldhu	r2,-12(fp)
   47520:	1884b03a 	or	r2,r3,r2
   47524:	1007883a 	mov	r3,r2
   47528:	e0bffc17 	ldw	r2,-16(fp)
   4752c:	10c0020d 	sth	r3,8(r2)
             break;
   47530:	00000906 	br	47558 <OSFlagPost+0x120>
   47534:	e0bff317 	ldw	r2,-52(fp)
   47538:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4753c:	e0bff717 	ldw	r2,-36(fp)
   47540:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   47544:	e0bfff17 	ldw	r2,-4(fp)
   47548:	00c01c44 	movi	r3,113
   4754c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   47550:	0005883a 	mov	r2,zero
   47554:	00009506 	br	477ac <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   47558:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   4755c:	e0bffc17 	ldw	r2,-16(fp)
   47560:	10800117 	ldw	r2,4(r2)
   47564:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   47568:	00007406 	br	4773c <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   4756c:	e0bff117 	ldw	r2,-60(fp)
   47570:	10800483 	ldbu	r2,18(r2)
   47574:	10803fcc 	andi	r2,r2,255
   47578:	10c00060 	cmpeqi	r3,r2,1
   4757c:	18004d1e 	bne	r3,zero,476b4 <OSFlagPost+0x27c>
   47580:	10c00088 	cmpgei	r3,r2,2
   47584:	1800021e 	bne	r3,zero,47590 <OSFlagPost+0x158>
   47588:	10003126 	beq	r2,zero,47650 <OSFlagPost+0x218>
   4758c:	00005f06 	br	4770c <OSFlagPost+0x2d4>
   47590:	10c000a0 	cmpeqi	r3,r2,2
   47594:	1800031e 	bne	r3,zero,475a4 <OSFlagPost+0x16c>
   47598:	108000e0 	cmpeqi	r2,r2,3
   4759c:	1000181e 	bne	r2,zero,47600 <OSFlagPost+0x1c8>
   475a0:	00005a06 	br	4770c <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   475a4:	e0bffc17 	ldw	r2,-16(fp)
   475a8:	10c0020b 	ldhu	r3,8(r2)
   475ac:	e0bff117 	ldw	r2,-60(fp)
   475b0:	1080040b 	ldhu	r2,16(r2)
   475b4:	1884703a 	and	r2,r3,r2
   475b8:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   475bc:	e0bff117 	ldw	r2,-60(fp)
   475c0:	1080040b 	ldhu	r2,16(r2)
   475c4:	10ffffcc 	andi	r3,r2,65535
   475c8:	e0bff40b 	ldhu	r2,-48(fp)
   475cc:	18800b1e 	bne	r3,r2,475fc <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   475d0:	e0bff40b 	ldhu	r2,-48(fp)
   475d4:	e13ff117 	ldw	r4,-60(fp)
   475d8:	100b883a 	mov	r5,r2
   475dc:	0047b2c0 	call	47b2c <OS_FlagTaskRdy>
   475e0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   475e4:	e0bff483 	ldbu	r2,-46(fp)
   475e8:	10800058 	cmpnei	r2,r2,1
   475ec:	1000031e 	bne	r2,zero,475fc <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   475f0:	00800044 	movi	r2,1
   475f4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   475f8:	00004d06 	br	47730 <OSFlagPost+0x2f8>
   475fc:	00004c06 	br	47730 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   47600:	e0bffc17 	ldw	r2,-16(fp)
   47604:	10c0020b 	ldhu	r3,8(r2)
   47608:	e0bff117 	ldw	r2,-60(fp)
   4760c:	1080040b 	ldhu	r2,16(r2)
   47610:	1884703a 	and	r2,r3,r2
   47614:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   47618:	e0bff40b 	ldhu	r2,-48(fp)
   4761c:	10000b26 	beq	r2,zero,4764c <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   47620:	e0bff40b 	ldhu	r2,-48(fp)
   47624:	e13ff117 	ldw	r4,-60(fp)
   47628:	100b883a 	mov	r5,r2
   4762c:	0047b2c0 	call	47b2c <OS_FlagTaskRdy>
   47630:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   47634:	e0bff483 	ldbu	r2,-46(fp)
   47638:	10800058 	cmpnei	r2,r2,1
   4763c:	1000031e 	bne	r2,zero,4764c <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   47640:	00800044 	movi	r2,1
   47644:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   47648:	00003906 	br	47730 <OSFlagPost+0x2f8>
   4764c:	00003806 	br	47730 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   47650:	e0bffc17 	ldw	r2,-16(fp)
   47654:	1080020b 	ldhu	r2,8(r2)
   47658:	0084303a 	nor	r2,zero,r2
   4765c:	1007883a 	mov	r3,r2
   47660:	e0bff117 	ldw	r2,-60(fp)
   47664:	1080040b 	ldhu	r2,16(r2)
   47668:	1884703a 	and	r2,r3,r2
   4766c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   47670:	e0bff117 	ldw	r2,-60(fp)
   47674:	1080040b 	ldhu	r2,16(r2)
   47678:	10ffffcc 	andi	r3,r2,65535
   4767c:	e0bff40b 	ldhu	r2,-48(fp)
   47680:	18800b1e 	bne	r3,r2,476b0 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   47684:	e0bff40b 	ldhu	r2,-48(fp)
   47688:	e13ff117 	ldw	r4,-60(fp)
   4768c:	100b883a 	mov	r5,r2
   47690:	0047b2c0 	call	47b2c <OS_FlagTaskRdy>
   47694:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   47698:	e0bff483 	ldbu	r2,-46(fp)
   4769c:	10800058 	cmpnei	r2,r2,1
   476a0:	1000031e 	bne	r2,zero,476b0 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   476a4:	00800044 	movi	r2,1
   476a8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   476ac:	00002006 	br	47730 <OSFlagPost+0x2f8>
   476b0:	00001f06 	br	47730 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   476b4:	e0bffc17 	ldw	r2,-16(fp)
   476b8:	1080020b 	ldhu	r2,8(r2)
   476bc:	0084303a 	nor	r2,zero,r2
   476c0:	1007883a 	mov	r3,r2
   476c4:	e0bff117 	ldw	r2,-60(fp)
   476c8:	1080040b 	ldhu	r2,16(r2)
   476cc:	1884703a 	and	r2,r3,r2
   476d0:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   476d4:	e0bff40b 	ldhu	r2,-48(fp)
   476d8:	10000b26 	beq	r2,zero,47708 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   476dc:	e0bff40b 	ldhu	r2,-48(fp)
   476e0:	e13ff117 	ldw	r4,-60(fp)
   476e4:	100b883a 	mov	r5,r2
   476e8:	0047b2c0 	call	47b2c <OS_FlagTaskRdy>
   476ec:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   476f0:	e0bff483 	ldbu	r2,-46(fp)
   476f4:	10800058 	cmpnei	r2,r2,1
   476f8:	1000031e 	bne	r2,zero,47708 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   476fc:	00800044 	movi	r2,1
   47700:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   47704:	00000a06 	br	47730 <OSFlagPost+0x2f8>
   47708:	00000906 	br	47730 <OSFlagPost+0x2f8>
   4770c:	e0bff317 	ldw	r2,-52(fp)
   47710:	e0bff815 	stw	r2,-32(fp)
   47714:	e0bff817 	ldw	r2,-32(fp)
   47718:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   4771c:	e0bfff17 	ldw	r2,-4(fp)
   47720:	00c01bc4 	movi	r3,111
   47724:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   47728:	0005883a 	mov	r2,zero
   4772c:	00001f06 	br	477ac <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   47730:	e0bff117 	ldw	r2,-60(fp)
   47734:	10800017 	ldw	r2,0(r2)
   47738:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   4773c:	e0bff117 	ldw	r2,-60(fp)
   47740:	103f8a1e 	bne	r2,zero,4756c <__alt_data_end+0xfffd1a0c>
   47744:	e0bff317 	ldw	r2,-52(fp)
   47748:	e0bff915 	stw	r2,-28(fp)
   4774c:	e0bff917 	ldw	r2,-28(fp)
   47750:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   47754:	e0bff203 	ldbu	r2,-56(fp)
   47758:	10800058 	cmpnei	r2,r2,1
   4775c:	1000011e 	bne	r2,zero,47764 <OSFlagPost+0x32c>
        OS_Sched();
   47760:	0045c6c0 	call	45c6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   47764:	0005303a 	rdctl	r2,status
   47768:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4776c:	e0fffa17 	ldw	r3,-24(fp)
   47770:	00bfff84 	movi	r2,-2
   47774:	1884703a 	and	r2,r3,r2
   47778:	1001703a 	wrctl	status,r2
  
  return context;
   4777c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   47780:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   47784:	e0bffc17 	ldw	r2,-16(fp)
   47788:	1080020b 	ldhu	r2,8(r2)
   4778c:	e0bff50d 	sth	r2,-44(fp)
   47790:	e0bff317 	ldw	r2,-52(fp)
   47794:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   47798:	e0bffb17 	ldw	r2,-20(fp)
   4779c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   477a0:	e0bfff17 	ldw	r2,-4(fp)
   477a4:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   477a8:	e0bff50b 	ldhu	r2,-44(fp)
}
   477ac:	e037883a 	mov	sp,fp
   477b0:	dfc00117 	ldw	ra,4(sp)
   477b4:	df000017 	ldw	fp,0(sp)
   477b8:	dec00204 	addi	sp,sp,8
   477bc:	f800283a 	ret

000477c0 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   477c0:	defff904 	addi	sp,sp,-28
   477c4:	df000615 	stw	fp,24(sp)
   477c8:	df000604 	addi	fp,sp,24
   477cc:	e13ffe15 	stw	r4,-8(fp)
   477d0:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   477d4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   477d8:	e0bfff17 	ldw	r2,-4(fp)
   477dc:	1000021e 	bne	r2,zero,477e8 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   477e0:	0005883a 	mov	r2,zero
   477e4:	00002306 	br	47874 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   477e8:	e0bffe17 	ldw	r2,-8(fp)
   477ec:	1000051e 	bne	r2,zero,47804 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   477f0:	e0bfff17 	ldw	r2,-4(fp)
   477f4:	00c01b84 	movi	r3,110
   477f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   477fc:	0005883a 	mov	r2,zero
   47800:	00001c06 	br	47874 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   47804:	e0bffe17 	ldw	r2,-8(fp)
   47808:	10800003 	ldbu	r2,0(r2)
   4780c:	10803fcc 	andi	r2,r2,255
   47810:	10800160 	cmpeqi	r2,r2,5
   47814:	1000051e 	bne	r2,zero,4782c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   47818:	e0bfff17 	ldw	r2,-4(fp)
   4781c:	00c00044 	movi	r3,1
   47820:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   47824:	0005883a 	mov	r2,zero
   47828:	00001206 	br	47874 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4782c:	0005303a 	rdctl	r2,status
   47830:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   47834:	e0fffc17 	ldw	r3,-16(fp)
   47838:	00bfff84 	movi	r2,-2
   4783c:	1884703a 	and	r2,r3,r2
   47840:	1001703a 	wrctl	status,r2
  
  return context;
   47844:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   47848:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   4784c:	e0bffe17 	ldw	r2,-8(fp)
   47850:	1080020b 	ldhu	r2,8(r2)
   47854:	e0bffb0d 	sth	r2,-20(fp)
   47858:	e0bffa17 	ldw	r2,-24(fp)
   4785c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   47860:	e0bffd17 	ldw	r2,-12(fp)
   47864:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   47868:	e0bfff17 	ldw	r2,-4(fp)
   4786c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   47870:	e0bffb0b 	ldhu	r2,-20(fp)
}
   47874:	e037883a 	mov	sp,fp
   47878:	df000017 	ldw	fp,0(sp)
   4787c:	dec00104 	addi	sp,sp,4
   47880:	f800283a 	ret

00047884 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   47884:	defff804 	addi	sp,sp,-32
   47888:	df000715 	stw	fp,28(sp)
   4788c:	df000704 	addi	fp,sp,28
   47890:	e13ffb15 	stw	r4,-20(fp)
   47894:	e17ffc15 	stw	r5,-16(fp)
   47898:	3009883a 	mov	r4,r6
   4789c:	3807883a 	mov	r3,r7
   478a0:	e0800117 	ldw	r2,4(fp)
   478a4:	e13ffd0d 	sth	r4,-12(fp)
   478a8:	e0fffe05 	stb	r3,-8(fp)
   478ac:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   478b0:	00800174 	movhi	r2,5
   478b4:	108b2404 	addi	r2,r2,11408
   478b8:	10c00017 	ldw	r3,0(r2)
   478bc:	00800174 	movhi	r2,5
   478c0:	108b2404 	addi	r2,r2,11408
   478c4:	10800017 	ldw	r2,0(r2)
   478c8:	10800c03 	ldbu	r2,48(r2)
   478cc:	10800814 	ori	r2,r2,32
   478d0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   478d4:	00800174 	movhi	r2,5
   478d8:	108b2404 	addi	r2,r2,11408
   478dc:	10800017 	ldw	r2,0(r2)
   478e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   478e4:	00800174 	movhi	r2,5
   478e8:	108b2404 	addi	r2,r2,11408
   478ec:	10800017 	ldw	r2,0(r2)
   478f0:	e0ffff0b 	ldhu	r3,-4(fp)
   478f4:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   478f8:	00800174 	movhi	r2,5
   478fc:	108b2404 	addi	r2,r2,11408
   47900:	10800017 	ldw	r2,0(r2)
   47904:	e0fffc17 	ldw	r3,-16(fp)
   47908:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   4790c:	e0bffc17 	ldw	r2,-16(fp)
   47910:	e0fffd0b 	ldhu	r3,-12(fp)
   47914:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   47918:	e0bffc17 	ldw	r2,-16(fp)
   4791c:	e0fffe03 	ldbu	r3,-8(fp)
   47920:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   47924:	00800174 	movhi	r2,5
   47928:	108b2404 	addi	r2,r2,11408
   4792c:	10c00017 	ldw	r3,0(r2)
   47930:	e0bffc17 	ldw	r2,-16(fp)
   47934:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   47938:	e0bffb17 	ldw	r2,-20(fp)
   4793c:	10c00117 	ldw	r3,4(r2)
   47940:	e0bffc17 	ldw	r2,-16(fp)
   47944:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   47948:	e0bffc17 	ldw	r2,-16(fp)
   4794c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   47950:	e0bffc17 	ldw	r2,-16(fp)
   47954:	e0fffb17 	ldw	r3,-20(fp)
   47958:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   4795c:	e0bffb17 	ldw	r2,-20(fp)
   47960:	10800117 	ldw	r2,4(r2)
   47964:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   47968:	e0bff917 	ldw	r2,-28(fp)
   4796c:	10000326 	beq	r2,zero,4797c <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   47970:	e0bff917 	ldw	r2,-28(fp)
   47974:	e0fffc17 	ldw	r3,-16(fp)
   47978:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   4797c:	e0bffb17 	ldw	r2,-20(fp)
   47980:	e0fffc17 	ldw	r3,-16(fp)
   47984:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   47988:	00800174 	movhi	r2,5
   4798c:	108b2404 	addi	r2,r2,11408
   47990:	10800017 	ldw	r2,0(r2)
   47994:	10800d03 	ldbu	r2,52(r2)
   47998:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   4799c:	e0fffa03 	ldbu	r3,-24(fp)
   479a0:	e13ffa03 	ldbu	r4,-24(fp)
   479a4:	00800174 	movhi	r2,5
   479a8:	108b2144 	addi	r2,r2,11397
   479ac:	1105883a 	add	r2,r2,r4
   479b0:	10800003 	ldbu	r2,0(r2)
   479b4:	1009883a 	mov	r4,r2
   479b8:	00800174 	movhi	r2,5
   479bc:	108b2404 	addi	r2,r2,11408
   479c0:	10800017 	ldw	r2,0(r2)
   479c4:	10800d43 	ldbu	r2,53(r2)
   479c8:	0084303a 	nor	r2,zero,r2
   479cc:	2084703a 	and	r2,r4,r2
   479d0:	1009883a 	mov	r4,r2
   479d4:	00800174 	movhi	r2,5
   479d8:	108b2144 	addi	r2,r2,11397
   479dc:	10c5883a 	add	r2,r2,r3
   479e0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   479e4:	e0fffa03 	ldbu	r3,-24(fp)
   479e8:	00800174 	movhi	r2,5
   479ec:	108b2144 	addi	r2,r2,11397
   479f0:	10c5883a 	add	r2,r2,r3
   479f4:	10800003 	ldbu	r2,0(r2)
   479f8:	10803fcc 	andi	r2,r2,255
   479fc:	10000e1e 	bne	r2,zero,47a38 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   47a00:	00800174 	movhi	r2,5
   47a04:	108b2404 	addi	r2,r2,11408
   47a08:	10800017 	ldw	r2,0(r2)
   47a0c:	10800d83 	ldbu	r2,54(r2)
   47a10:	0084303a 	nor	r2,zero,r2
   47a14:	1007883a 	mov	r3,r2
   47a18:	00800174 	movhi	r2,5
   47a1c:	108b2104 	addi	r2,r2,11396
   47a20:	10800003 	ldbu	r2,0(r2)
   47a24:	1884703a 	and	r2,r3,r2
   47a28:	1007883a 	mov	r3,r2
   47a2c:	00800174 	movhi	r2,5
   47a30:	108b2104 	addi	r2,r2,11396
   47a34:	10c00005 	stb	r3,0(r2)
    }
}
   47a38:	e037883a 	mov	sp,fp
   47a3c:	df000017 	ldw	fp,0(sp)
   47a40:	dec00104 	addi	sp,sp,4
   47a44:	f800283a 	ret

00047a48 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   47a48:	defffb04 	addi	sp,sp,-20
   47a4c:	dfc00415 	stw	ra,16(sp)
   47a50:	df000315 	stw	fp,12(sp)
   47a54:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   47a58:	010001b4 	movhi	r4,6
   47a5c:	21233704 	addi	r4,r4,-29476
   47a60:	0140dc04 	movi	r5,880
   47a64:	0045bb80 	call	45bb8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   47a68:	008001b4 	movhi	r2,6
   47a6c:	10a33704 	addi	r2,r2,-29476
   47a70:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   47a74:	008001b4 	movhi	r2,6
   47a78:	10a34204 	addi	r2,r2,-29432
   47a7c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   47a80:	e03ffd0d 	sth	zero,-12(fp)
   47a84:	00001306 	br	47ad4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   47a88:	e0bffe17 	ldw	r2,-8(fp)
   47a8c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   47a90:	e0bffe17 	ldw	r2,-8(fp)
   47a94:	e0ffff17 	ldw	r3,-4(fp)
   47a98:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   47a9c:	e0bffe17 	ldw	r2,-8(fp)
   47aa0:	00c00fc4 	movi	r3,63
   47aa4:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   47aa8:	e0bffe17 	ldw	r2,-8(fp)
   47aac:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   47ab0:	e0bffe17 	ldw	r2,-8(fp)
   47ab4:	10800b04 	addi	r2,r2,44
   47ab8:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   47abc:	e0bfff17 	ldw	r2,-4(fp)
   47ac0:	10800b04 	addi	r2,r2,44
   47ac4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   47ac8:	e0bffd0b 	ldhu	r2,-12(fp)
   47acc:	10800044 	addi	r2,r2,1
   47ad0:	e0bffd0d 	sth	r2,-12(fp)
   47ad4:	e0bffd0b 	ldhu	r2,-12(fp)
   47ad8:	108004f0 	cmpltui	r2,r2,19
   47adc:	103fea1e 	bne	r2,zero,47a88 <__alt_data_end+0xfffd1f28>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   47ae0:	e0bffe17 	ldw	r2,-8(fp)
   47ae4:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   47ae8:	e0bffe17 	ldw	r2,-8(fp)
   47aec:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   47af0:	e0bffe17 	ldw	r2,-8(fp)
   47af4:	00c00fc4 	movi	r3,63
   47af8:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   47afc:	e0bffe17 	ldw	r2,-8(fp)
   47b00:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   47b04:	00800174 	movhi	r2,5
   47b08:	108b2604 	addi	r2,r2,11416
   47b0c:	00c001b4 	movhi	r3,6
   47b10:	18e33704 	addi	r3,r3,-29476
   47b14:	10c00015 	stw	r3,0(r2)
#endif
}
   47b18:	e037883a 	mov	sp,fp
   47b1c:	dfc00117 	ldw	ra,4(sp)
   47b20:	df000017 	ldw	fp,0(sp)
   47b24:	dec00204 	addi	sp,sp,8
   47b28:	f800283a 	ret

00047b2c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   47b2c:	defffa04 	addi	sp,sp,-24
   47b30:	dfc00515 	stw	ra,20(sp)
   47b34:	df000415 	stw	fp,16(sp)
   47b38:	df000404 	addi	fp,sp,16
   47b3c:	e13ffe15 	stw	r4,-8(fp)
   47b40:	2805883a 	mov	r2,r5
   47b44:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   47b48:	e0bffe17 	ldw	r2,-8(fp)
   47b4c:	10800217 	ldw	r2,8(r2)
   47b50:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   47b54:	e0bffd17 	ldw	r2,-12(fp)
   47b58:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   47b5c:	e0bffd17 	ldw	r2,-12(fp)
   47b60:	e0ffff0b 	ldhu	r3,-4(fp)
   47b64:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   47b68:	e0bffd17 	ldw	r2,-12(fp)
   47b6c:	10c00c03 	ldbu	r3,48(r2)
   47b70:	00bff7c4 	movi	r2,-33
   47b74:	1884703a 	and	r2,r3,r2
   47b78:	1007883a 	mov	r3,r2
   47b7c:	e0bffd17 	ldw	r2,-12(fp)
   47b80:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   47b84:	e0bffd17 	ldw	r2,-12(fp)
   47b88:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   47b8c:	e0bffd17 	ldw	r2,-12(fp)
   47b90:	10800c03 	ldbu	r2,48(r2)
   47b94:	10803fcc 	andi	r2,r2,255
   47b98:	10001f1e 	bne	r2,zero,47c18 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   47b9c:	e0bffd17 	ldw	r2,-12(fp)
   47ba0:	10c00d83 	ldbu	r3,54(r2)
   47ba4:	00800174 	movhi	r2,5
   47ba8:	108b2104 	addi	r2,r2,11396
   47bac:	10800003 	ldbu	r2,0(r2)
   47bb0:	1884b03a 	or	r2,r3,r2
   47bb4:	1007883a 	mov	r3,r2
   47bb8:	00800174 	movhi	r2,5
   47bbc:	108b2104 	addi	r2,r2,11396
   47bc0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   47bc4:	e0bffd17 	ldw	r2,-12(fp)
   47bc8:	10800d03 	ldbu	r2,52(r2)
   47bcc:	10c03fcc 	andi	r3,r2,255
   47bd0:	e0bffd17 	ldw	r2,-12(fp)
   47bd4:	10800d03 	ldbu	r2,52(r2)
   47bd8:	11003fcc 	andi	r4,r2,255
   47bdc:	00800174 	movhi	r2,5
   47be0:	108b2144 	addi	r2,r2,11397
   47be4:	1105883a 	add	r2,r2,r4
   47be8:	11000003 	ldbu	r4,0(r2)
   47bec:	e0bffd17 	ldw	r2,-12(fp)
   47bf0:	10800d43 	ldbu	r2,53(r2)
   47bf4:	2084b03a 	or	r2,r4,r2
   47bf8:	1009883a 	mov	r4,r2
   47bfc:	00800174 	movhi	r2,5
   47c00:	108b2144 	addi	r2,r2,11397
   47c04:	10c5883a 	add	r2,r2,r3
   47c08:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   47c0c:	00800044 	movi	r2,1
   47c10:	e0bffc05 	stb	r2,-16(fp)
   47c14:	00000106 	br	47c1c <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   47c18:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   47c1c:	e13ffe17 	ldw	r4,-8(fp)
   47c20:	0047c3c0 	call	47c3c <OS_FlagUnlink>
    return (sched);
   47c24:	e0bffc03 	ldbu	r2,-16(fp)
}
   47c28:	e037883a 	mov	sp,fp
   47c2c:	dfc00117 	ldw	ra,4(sp)
   47c30:	df000017 	ldw	fp,0(sp)
   47c34:	dec00204 	addi	sp,sp,8
   47c38:	f800283a 	ret

00047c3c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   47c3c:	defffa04 	addi	sp,sp,-24
   47c40:	df000515 	stw	fp,20(sp)
   47c44:	df000504 	addi	fp,sp,20
   47c48:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   47c4c:	e0bfff17 	ldw	r2,-4(fp)
   47c50:	10800117 	ldw	r2,4(r2)
   47c54:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   47c58:	e0bfff17 	ldw	r2,-4(fp)
   47c5c:	10800017 	ldw	r2,0(r2)
   47c60:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   47c64:	e0bffb17 	ldw	r2,-20(fp)
   47c68:	10000b1e 	bne	r2,zero,47c98 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   47c6c:	e0bfff17 	ldw	r2,-4(fp)
   47c70:	10800317 	ldw	r2,12(r2)
   47c74:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   47c78:	e0bffd17 	ldw	r2,-12(fp)
   47c7c:	e0fffc17 	ldw	r3,-16(fp)
   47c80:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   47c84:	e0bffc17 	ldw	r2,-16(fp)
   47c88:	10000b26 	beq	r2,zero,47cb8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   47c8c:	e0bffc17 	ldw	r2,-16(fp)
   47c90:	10000115 	stw	zero,4(r2)
   47c94:	00000806 	br	47cb8 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   47c98:	e0bffb17 	ldw	r2,-20(fp)
   47c9c:	e0fffc17 	ldw	r3,-16(fp)
   47ca0:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   47ca4:	e0bffc17 	ldw	r2,-16(fp)
   47ca8:	10000326 	beq	r2,zero,47cb8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   47cac:	e0bffc17 	ldw	r2,-16(fp)
   47cb0:	e0fffb17 	ldw	r3,-20(fp)
   47cb4:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   47cb8:	e0bfff17 	ldw	r2,-4(fp)
   47cbc:	10800217 	ldw	r2,8(r2)
   47cc0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   47cc4:	e0bffe17 	ldw	r2,-8(fp)
   47cc8:	10000a15 	stw	zero,40(r2)
#endif
}
   47ccc:	e037883a 	mov	sp,fp
   47cd0:	df000017 	ldw	fp,0(sp)
   47cd4:	dec00104 	addi	sp,sp,4
   47cd8:	f800283a 	ret

00047cdc <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   47cdc:	defff404 	addi	sp,sp,-48
   47ce0:	df000b15 	stw	fp,44(sp)
   47ce4:	df000b04 	addi	fp,sp,44
   47ce8:	e13ffc15 	stw	r4,-16(fp)
   47cec:	e17ffd15 	stw	r5,-12(fp)
   47cf0:	e1bffe15 	stw	r6,-8(fp)
   47cf4:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   47cf8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   47cfc:	e0bfff17 	ldw	r2,-4(fp)
   47d00:	1000021e 	bne	r2,zero,47d0c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   47d04:	0005883a 	mov	r2,zero
   47d08:	00006d06 	br	47ec0 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   47d0c:	e0bffc17 	ldw	r2,-16(fp)
   47d10:	1000051e 	bne	r2,zero,47d28 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   47d14:	e0bfff17 	ldw	r2,-4(fp)
   47d18:	00c01884 	movi	r3,98
   47d1c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   47d20:	0005883a 	mov	r2,zero
   47d24:	00006606 	br	47ec0 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   47d28:	e0bffc17 	ldw	r2,-16(fp)
   47d2c:	108000cc 	andi	r2,r2,3
   47d30:	10000526 	beq	r2,zero,47d48 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   47d34:	e0bfff17 	ldw	r2,-4(fp)
   47d38:	00c01884 	movi	r3,98
   47d3c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   47d40:	0005883a 	mov	r2,zero
   47d44:	00005e06 	br	47ec0 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   47d48:	e0bffd17 	ldw	r2,-12(fp)
   47d4c:	108000a8 	cmpgeui	r2,r2,2
   47d50:	1000051e 	bne	r2,zero,47d68 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   47d54:	e0bfff17 	ldw	r2,-4(fp)
   47d58:	00c016c4 	movi	r3,91
   47d5c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   47d60:	0005883a 	mov	r2,zero
   47d64:	00005606 	br	47ec0 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   47d68:	e0bffe17 	ldw	r2,-8(fp)
   47d6c:	10800128 	cmpgeui	r2,r2,4
   47d70:	1000051e 	bne	r2,zero,47d88 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   47d74:	e0bfff17 	ldw	r2,-4(fp)
   47d78:	00c01704 	movi	r3,92
   47d7c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   47d80:	0005883a 	mov	r2,zero
   47d84:	00004e06 	br	47ec0 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   47d88:	0005303a 	rdctl	r2,status
   47d8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   47d90:	e0fffa17 	ldw	r3,-24(fp)
   47d94:	00bfff84 	movi	r2,-2
   47d98:	1884703a 	and	r2,r3,r2
   47d9c:	1001703a 	wrctl	status,r2
  
  return context;
   47da0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   47da4:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   47da8:	00800174 	movhi	r2,5
   47dac:	108b1e04 	addi	r2,r2,11384
   47db0:	10800017 	ldw	r2,0(r2)
   47db4:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   47db8:	00800174 	movhi	r2,5
   47dbc:	108b1e04 	addi	r2,r2,11384
   47dc0:	10800017 	ldw	r2,0(r2)
   47dc4:	10000726 	beq	r2,zero,47de4 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   47dc8:	00800174 	movhi	r2,5
   47dcc:	108b1e04 	addi	r2,r2,11384
   47dd0:	10800017 	ldw	r2,0(r2)
   47dd4:	10c00117 	ldw	r3,4(r2)
   47dd8:	00800174 	movhi	r2,5
   47ddc:	108b1e04 	addi	r2,r2,11384
   47de0:	10c00015 	stw	r3,0(r2)
   47de4:	e0bff817 	ldw	r2,-32(fp)
   47de8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   47dec:	e0bffb17 	ldw	r2,-20(fp)
   47df0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   47df4:	e0bff917 	ldw	r2,-28(fp)
   47df8:	1000051e 	bne	r2,zero,47e10 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   47dfc:	e0bfff17 	ldw	r2,-4(fp)
   47e00:	00c01684 	movi	r3,90
   47e04:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   47e08:	0005883a 	mov	r2,zero
   47e0c:	00002c06 	br	47ec0 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   47e10:	e0bffc17 	ldw	r2,-16(fp)
   47e14:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   47e18:	e0fffc17 	ldw	r3,-16(fp)
   47e1c:	e0bffe17 	ldw	r2,-8(fp)
   47e20:	1885883a 	add	r2,r3,r2
   47e24:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   47e28:	e03ff715 	stw	zero,-36(fp)
   47e2c:	00000c06 	br	47e60 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   47e30:	e0bff617 	ldw	r2,-40(fp)
   47e34:	e0fff517 	ldw	r3,-44(fp)
   47e38:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   47e3c:	e0bff517 	ldw	r2,-44(fp)
   47e40:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   47e44:	e0fff517 	ldw	r3,-44(fp)
   47e48:	e0bffe17 	ldw	r2,-8(fp)
   47e4c:	1885883a 	add	r2,r3,r2
   47e50:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   47e54:	e0bff717 	ldw	r2,-36(fp)
   47e58:	10800044 	addi	r2,r2,1
   47e5c:	e0bff715 	stw	r2,-36(fp)
   47e60:	e0bffd17 	ldw	r2,-12(fp)
   47e64:	10bfffc4 	addi	r2,r2,-1
   47e68:	e0fff717 	ldw	r3,-36(fp)
   47e6c:	18bff036 	bltu	r3,r2,47e30 <__alt_data_end+0xfffd22d0>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   47e70:	e0bff617 	ldw	r2,-40(fp)
   47e74:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   47e78:	e0bff917 	ldw	r2,-28(fp)
   47e7c:	e0fffc17 	ldw	r3,-16(fp)
   47e80:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   47e84:	e0bff917 	ldw	r2,-28(fp)
   47e88:	e0fffc17 	ldw	r3,-16(fp)
   47e8c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   47e90:	e0bff917 	ldw	r2,-28(fp)
   47e94:	e0fffd17 	ldw	r3,-12(fp)
   47e98:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   47e9c:	e0bff917 	ldw	r2,-28(fp)
   47ea0:	e0fffd17 	ldw	r3,-12(fp)
   47ea4:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   47ea8:	e0bff917 	ldw	r2,-28(fp)
   47eac:	e0fffe17 	ldw	r3,-8(fp)
   47eb0:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   47eb4:	e0bfff17 	ldw	r2,-4(fp)
   47eb8:	10000005 	stb	zero,0(r2)
    return (pmem);
   47ebc:	e0bff917 	ldw	r2,-28(fp)
}
   47ec0:	e037883a 	mov	sp,fp
   47ec4:	df000017 	ldw	fp,0(sp)
   47ec8:	dec00104 	addi	sp,sp,4
   47ecc:	f800283a 	ret

00047ed0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   47ed0:	defff804 	addi	sp,sp,-32
   47ed4:	df000715 	stw	fp,28(sp)
   47ed8:	df000704 	addi	fp,sp,28
   47edc:	e13ffe15 	stw	r4,-8(fp)
   47ee0:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   47ee4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   47ee8:	e0bfff17 	ldw	r2,-4(fp)
   47eec:	1000021e 	bne	r2,zero,47ef8 <OSMemGet+0x28>
        return ((void *)0);
   47ef0:	0005883a 	mov	r2,zero
   47ef4:	00002e06 	br	47fb0 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   47ef8:	e0bffe17 	ldw	r2,-8(fp)
   47efc:	1000051e 	bne	r2,zero,47f14 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   47f00:	e0bfff17 	ldw	r2,-4(fp)
   47f04:	00c01804 	movi	r3,96
   47f08:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   47f0c:	0005883a 	mov	r2,zero
   47f10:	00002706 	br	47fb0 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   47f14:	0005303a 	rdctl	r2,status
   47f18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   47f1c:	e0fffb17 	ldw	r3,-20(fp)
   47f20:	00bfff84 	movi	r2,-2
   47f24:	1884703a 	and	r2,r3,r2
   47f28:	1001703a 	wrctl	status,r2
  
  return context;
   47f2c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   47f30:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   47f34:	e0bffe17 	ldw	r2,-8(fp)
   47f38:	10800417 	ldw	r2,16(r2)
   47f3c:	10001426 	beq	r2,zero,47f90 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   47f40:	e0bffe17 	ldw	r2,-8(fp)
   47f44:	10800117 	ldw	r2,4(r2)
   47f48:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   47f4c:	e0bffa17 	ldw	r2,-24(fp)
   47f50:	10c00017 	ldw	r3,0(r2)
   47f54:	e0bffe17 	ldw	r2,-8(fp)
   47f58:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   47f5c:	e0bffe17 	ldw	r2,-8(fp)
   47f60:	10800417 	ldw	r2,16(r2)
   47f64:	10ffffc4 	addi	r3,r2,-1
   47f68:	e0bffe17 	ldw	r2,-8(fp)
   47f6c:	10c00415 	stw	r3,16(r2)
   47f70:	e0bff917 	ldw	r2,-28(fp)
   47f74:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   47f78:	e0bffc17 	ldw	r2,-16(fp)
   47f7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   47f80:	e0bfff17 	ldw	r2,-4(fp)
   47f84:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   47f88:	e0bffa17 	ldw	r2,-24(fp)
   47f8c:	00000806 	br	47fb0 <OSMemGet+0xe0>
   47f90:	e0bff917 	ldw	r2,-28(fp)
   47f94:	e0bffd15 	stw	r2,-12(fp)
   47f98:	e0bffd17 	ldw	r2,-12(fp)
   47f9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   47fa0:	e0bfff17 	ldw	r2,-4(fp)
   47fa4:	00c01744 	movi	r3,93
   47fa8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   47fac:	0005883a 	mov	r2,zero
}
   47fb0:	e037883a 	mov	sp,fp
   47fb4:	df000017 	ldw	fp,0(sp)
   47fb8:	dec00104 	addi	sp,sp,4
   47fbc:	f800283a 	ret

00047fc0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   47fc0:	defff704 	addi	sp,sp,-36
   47fc4:	dfc00815 	stw	ra,32(sp)
   47fc8:	df000715 	stw	fp,28(sp)
   47fcc:	df000704 	addi	fp,sp,28
   47fd0:	e13ffd15 	stw	r4,-12(fp)
   47fd4:	e17ffe15 	stw	r5,-8(fp)
   47fd8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   47fdc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   47fe0:	e0bfff17 	ldw	r2,-4(fp)
   47fe4:	1000021e 	bne	r2,zero,47ff0 <OSMemNameGet+0x30>
        return (0);
   47fe8:	0005883a 	mov	r2,zero
   47fec:	00002d06 	br	480a4 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   47ff0:	e0bffd17 	ldw	r2,-12(fp)
   47ff4:	1000051e 	bne	r2,zero,4800c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   47ff8:	e0bfff17 	ldw	r2,-4(fp)
   47ffc:	00c01804 	movi	r3,96
   48000:	10c00005 	stb	r3,0(r2)
        return (0);
   48004:	0005883a 	mov	r2,zero
   48008:	00002606 	br	480a4 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   4800c:	e0bffe17 	ldw	r2,-8(fp)
   48010:	1000051e 	bne	r2,zero,48028 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   48014:	e0bfff17 	ldw	r2,-4(fp)
   48018:	00c00304 	movi	r3,12
   4801c:	10c00005 	stb	r3,0(r2)
        return (0);
   48020:	0005883a 	mov	r2,zero
   48024:	00001f06 	br	480a4 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   48028:	00800174 	movhi	r2,5
   4802c:	108b2304 	addi	r2,r2,11404
   48030:	10800003 	ldbu	r2,0(r2)
   48034:	10803fcc 	andi	r2,r2,255
   48038:	10000526 	beq	r2,zero,48050 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   4803c:	e0bfff17 	ldw	r2,-4(fp)
   48040:	00c00444 	movi	r3,17
   48044:	10c00005 	stb	r3,0(r2)
        return (0);
   48048:	0005883a 	mov	r2,zero
   4804c:	00001506 	br	480a4 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48050:	0005303a 	rdctl	r2,status
   48054:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48058:	e0fffb17 	ldw	r3,-20(fp)
   4805c:	00bfff84 	movi	r2,-2
   48060:	1884703a 	and	r2,r3,r2
   48064:	1001703a 	wrctl	status,r2
  
  return context;
   48068:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   4806c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   48070:	e0bffd17 	ldw	r2,-12(fp)
   48074:	10800504 	addi	r2,r2,20
   48078:	e13ffe17 	ldw	r4,-8(fp)
   4807c:	100b883a 	mov	r5,r2
   48080:	0045da80 	call	45da8 <OS_StrCopy>
   48084:	e0bffa05 	stb	r2,-24(fp)
   48088:	e0bff917 	ldw	r2,-28(fp)
   4808c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48090:	e0bffc17 	ldw	r2,-16(fp)
   48094:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   48098:	e0bfff17 	ldw	r2,-4(fp)
   4809c:	10000005 	stb	zero,0(r2)
    return (len);
   480a0:	e0bffa03 	ldbu	r2,-24(fp)
}
   480a4:	e037883a 	mov	sp,fp
   480a8:	dfc00117 	ldw	ra,4(sp)
   480ac:	df000017 	ldw	fp,0(sp)
   480b0:	dec00204 	addi	sp,sp,8
   480b4:	f800283a 	ret

000480b8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   480b8:	defff604 	addi	sp,sp,-40
   480bc:	dfc00915 	stw	ra,36(sp)
   480c0:	df000815 	stw	fp,32(sp)
   480c4:	df000804 	addi	fp,sp,32
   480c8:	e13ffd15 	stw	r4,-12(fp)
   480cc:	e17ffe15 	stw	r5,-8(fp)
   480d0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   480d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   480d8:	e0bfff17 	ldw	r2,-4(fp)
   480dc:	1000011e 	bne	r2,zero,480e4 <OSMemNameSet+0x2c>
        return;
   480e0:	00003606 	br	481bc <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   480e4:	e0bffd17 	ldw	r2,-12(fp)
   480e8:	1000041e 	bne	r2,zero,480fc <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   480ec:	e0bfff17 	ldw	r2,-4(fp)
   480f0:	00c01804 	movi	r3,96
   480f4:	10c00005 	stb	r3,0(r2)
        return;
   480f8:	00003006 	br	481bc <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   480fc:	e0bffe17 	ldw	r2,-8(fp)
   48100:	1000041e 	bne	r2,zero,48114 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   48104:	e0bfff17 	ldw	r2,-4(fp)
   48108:	00c00304 	movi	r3,12
   4810c:	10c00005 	stb	r3,0(r2)
        return;
   48110:	00002a06 	br	481bc <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   48114:	00800174 	movhi	r2,5
   48118:	108b2304 	addi	r2,r2,11404
   4811c:	10800003 	ldbu	r2,0(r2)
   48120:	10803fcc 	andi	r2,r2,255
   48124:	10000426 	beq	r2,zero,48138 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   48128:	e0bfff17 	ldw	r2,-4(fp)
   4812c:	00c00484 	movi	r3,18
   48130:	10c00005 	stb	r3,0(r2)
        return;
   48134:	00002106 	br	481bc <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48138:	0005303a 	rdctl	r2,status
   4813c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48140:	e0fffa17 	ldw	r3,-24(fp)
   48144:	00bfff84 	movi	r2,-2
   48148:	1884703a 	and	r2,r3,r2
   4814c:	1001703a 	wrctl	status,r2
  
  return context;
   48150:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   48154:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   48158:	e13ffe17 	ldw	r4,-8(fp)
   4815c:	0045e1c0 	call	45e1c <OS_StrLen>
   48160:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   48164:	e0bff903 	ldbu	r2,-28(fp)
   48168:	10800830 	cmpltui	r2,r2,32
   4816c:	1000081e 	bne	r2,zero,48190 <OSMemNameSet+0xd8>
   48170:	e0bff817 	ldw	r2,-32(fp)
   48174:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48178:	e0bffb17 	ldw	r2,-20(fp)
   4817c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   48180:	e0bfff17 	ldw	r2,-4(fp)
   48184:	00c018c4 	movi	r3,99
   48188:	10c00005 	stb	r3,0(r2)
        return;
   4818c:	00000b06 	br	481bc <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   48190:	e0bffd17 	ldw	r2,-12(fp)
   48194:	10800504 	addi	r2,r2,20
   48198:	1009883a 	mov	r4,r2
   4819c:	e17ffe17 	ldw	r5,-8(fp)
   481a0:	0045da80 	call	45da8 <OS_StrCopy>
   481a4:	e0bff817 	ldw	r2,-32(fp)
   481a8:	e0bffc15 	stw	r2,-16(fp)
   481ac:	e0bffc17 	ldw	r2,-16(fp)
   481b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   481b4:	e0bfff17 	ldw	r2,-4(fp)
   481b8:	10000005 	stb	zero,0(r2)
}
   481bc:	e037883a 	mov	sp,fp
   481c0:	dfc00117 	ldw	ra,4(sp)
   481c4:	df000017 	ldw	fp,0(sp)
   481c8:	dec00204 	addi	sp,sp,8
   481cc:	f800283a 	ret

000481d0 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   481d0:	defff904 	addi	sp,sp,-28
   481d4:	df000615 	stw	fp,24(sp)
   481d8:	df000604 	addi	fp,sp,24
   481dc:	e13ffe15 	stw	r4,-8(fp)
   481e0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   481e4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   481e8:	e0bffe17 	ldw	r2,-8(fp)
   481ec:	1000021e 	bne	r2,zero,481f8 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   481f0:	00801804 	movi	r2,96
   481f4:	00002806 	br	48298 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   481f8:	e0bfff17 	ldw	r2,-4(fp)
   481fc:	1000021e 	bne	r2,zero,48208 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   48200:	008017c4 	movi	r2,95
   48204:	00002406 	br	48298 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48208:	0005303a 	rdctl	r2,status
   4820c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48210:	e0fffb17 	ldw	r3,-20(fp)
   48214:	00bfff84 	movi	r2,-2
   48218:	1884703a 	and	r2,r3,r2
   4821c:	1001703a 	wrctl	status,r2
  
  return context;
   48220:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   48224:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   48228:	e0bffe17 	ldw	r2,-8(fp)
   4822c:	10c00417 	ldw	r3,16(r2)
   48230:	e0bffe17 	ldw	r2,-8(fp)
   48234:	10800317 	ldw	r2,12(r2)
   48238:	18800636 	bltu	r3,r2,48254 <OSMemPut+0x84>
   4823c:	e0bffa17 	ldw	r2,-24(fp)
   48240:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48244:	e0bffc17 	ldw	r2,-16(fp)
   48248:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   4824c:	00801784 	movi	r2,94
   48250:	00001106 	br	48298 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   48254:	e0bffe17 	ldw	r2,-8(fp)
   48258:	10c00117 	ldw	r3,4(r2)
   4825c:	e0bfff17 	ldw	r2,-4(fp)
   48260:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   48264:	e0bffe17 	ldw	r2,-8(fp)
   48268:	e0ffff17 	ldw	r3,-4(fp)
   4826c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   48270:	e0bffe17 	ldw	r2,-8(fp)
   48274:	10800417 	ldw	r2,16(r2)
   48278:	10c00044 	addi	r3,r2,1
   4827c:	e0bffe17 	ldw	r2,-8(fp)
   48280:	10c00415 	stw	r3,16(r2)
   48284:	e0bffa17 	ldw	r2,-24(fp)
   48288:	e0bffd15 	stw	r2,-12(fp)
   4828c:	e0bffd17 	ldw	r2,-12(fp)
   48290:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   48294:	0005883a 	mov	r2,zero
}
   48298:	e037883a 	mov	sp,fp
   4829c:	df000017 	ldw	fp,0(sp)
   482a0:	dec00104 	addi	sp,sp,4
   482a4:	f800283a 	ret

000482a8 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   482a8:	defffa04 	addi	sp,sp,-24
   482ac:	df000515 	stw	fp,20(sp)
   482b0:	df000504 	addi	fp,sp,20
   482b4:	e13ffe15 	stw	r4,-8(fp)
   482b8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   482bc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   482c0:	e0bffe17 	ldw	r2,-8(fp)
   482c4:	1000021e 	bne	r2,zero,482d0 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   482c8:	00801804 	movi	r2,96
   482cc:	00002c06 	br	48380 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   482d0:	e0bfff17 	ldw	r2,-4(fp)
   482d4:	1000021e 	bne	r2,zero,482e0 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   482d8:	00801844 	movi	r2,97
   482dc:	00002806 	br	48380 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   482e0:	0005303a 	rdctl	r2,status
   482e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   482e8:	e0fffc17 	ldw	r3,-16(fp)
   482ec:	00bfff84 	movi	r2,-2
   482f0:	1884703a 	and	r2,r3,r2
   482f4:	1001703a 	wrctl	status,r2
  
  return context;
   482f8:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   482fc:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   48300:	e0bffe17 	ldw	r2,-8(fp)
   48304:	10c00017 	ldw	r3,0(r2)
   48308:	e0bfff17 	ldw	r2,-4(fp)
   4830c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   48310:	e0bffe17 	ldw	r2,-8(fp)
   48314:	10c00117 	ldw	r3,4(r2)
   48318:	e0bfff17 	ldw	r2,-4(fp)
   4831c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   48320:	e0bffe17 	ldw	r2,-8(fp)
   48324:	10c00217 	ldw	r3,8(r2)
   48328:	e0bfff17 	ldw	r2,-4(fp)
   4832c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   48330:	e0bffe17 	ldw	r2,-8(fp)
   48334:	10c00317 	ldw	r3,12(r2)
   48338:	e0bfff17 	ldw	r2,-4(fp)
   4833c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   48340:	e0bffe17 	ldw	r2,-8(fp)
   48344:	10c00417 	ldw	r3,16(r2)
   48348:	e0bfff17 	ldw	r2,-4(fp)
   4834c:	10c00415 	stw	r3,16(r2)
   48350:	e0bffb17 	ldw	r2,-20(fp)
   48354:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48358:	e0bffd17 	ldw	r2,-12(fp)
   4835c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   48360:	e0bfff17 	ldw	r2,-4(fp)
   48364:	10c00317 	ldw	r3,12(r2)
   48368:	e0bfff17 	ldw	r2,-4(fp)
   4836c:	10800417 	ldw	r2,16(r2)
   48370:	1887c83a 	sub	r3,r3,r2
   48374:	e0bfff17 	ldw	r2,-4(fp)
   48378:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   4837c:	0005883a 	mov	r2,zero
}
   48380:	e037883a 	mov	sp,fp
   48384:	df000017 	ldw	fp,0(sp)
   48388:	dec00104 	addi	sp,sp,4
   4838c:	f800283a 	ret

00048390 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   48390:	defffc04 	addi	sp,sp,-16
   48394:	dfc00315 	stw	ra,12(sp)
   48398:	df000215 	stw	fp,8(sp)
   4839c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   483a0:	010001b4 	movhi	r4,6
   483a4:	21241304 	addi	r4,r4,-28596
   483a8:	01430c04 	movi	r5,3120
   483ac:	0045bb80 	call	45bb8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   483b0:	008001b4 	movhi	r2,6
   483b4:	10a41304 	addi	r2,r2,-28596
   483b8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   483bc:	e03fff0d 	sth	zero,-4(fp)
   483c0:	00001606 	br	4841c <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   483c4:	e0bfff0b 	ldhu	r2,-4(fp)
   483c8:	10800044 	addi	r2,r2,1
   483cc:	1009883a 	mov	r4,r2
   483d0:	01400d04 	movi	r5,52
   483d4:	00436100 	call	43610 <__mulsi3>
   483d8:	1007883a 	mov	r3,r2
   483dc:	008001b4 	movhi	r2,6
   483e0:	10a41304 	addi	r2,r2,-28596
   483e4:	1887883a 	add	r3,r3,r2
   483e8:	e0bffe17 	ldw	r2,-8(fp)
   483ec:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   483f0:	e0bffe17 	ldw	r2,-8(fp)
   483f4:	00c00fc4 	movi	r3,63
   483f8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   483fc:	e0bffe17 	ldw	r2,-8(fp)
   48400:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   48404:	e0bffe17 	ldw	r2,-8(fp)
   48408:	10800d04 	addi	r2,r2,52
   4840c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   48410:	e0bfff0b 	ldhu	r2,-4(fp)
   48414:	10800044 	addi	r2,r2,1
   48418:	e0bfff0d 	sth	r2,-4(fp)
   4841c:	e0bfff0b 	ldhu	r2,-4(fp)
   48420:	10800ef0 	cmpltui	r2,r2,59
   48424:	103fe71e 	bne	r2,zero,483c4 <__alt_data_end+0xfffd2864>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   48428:	e0bffe17 	ldw	r2,-8(fp)
   4842c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   48430:	e0bffe17 	ldw	r2,-8(fp)
   48434:	00c00fc4 	movi	r3,63
   48438:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   4843c:	e0bffe17 	ldw	r2,-8(fp)
   48440:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   48444:	00800174 	movhi	r2,5
   48448:	108b1e04 	addi	r2,r2,11384
   4844c:	00c001b4 	movhi	r3,6
   48450:	18e41304 	addi	r3,r3,-28596
   48454:	10c00015 	stw	r3,0(r2)
#endif
}
   48458:	e037883a 	mov	sp,fp
   4845c:	dfc00117 	ldw	ra,4(sp)
   48460:	df000017 	ldw	fp,0(sp)
   48464:	dec00204 	addi	sp,sp,8
   48468:	f800283a 	ret

0004846c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   4846c:	defff804 	addi	sp,sp,-32
   48470:	df000715 	stw	fp,28(sp)
   48474:	df000704 	addi	fp,sp,28
   48478:	e13ffe15 	stw	r4,-8(fp)
   4847c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   48480:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   48484:	e0bfff17 	ldw	r2,-4(fp)
   48488:	1000021e 	bne	r2,zero,48494 <OSQAccept+0x28>
        return ((void *)0);
   4848c:	0005883a 	mov	r2,zero
   48490:	00004206 	br	4859c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   48494:	e0bffe17 	ldw	r2,-8(fp)
   48498:	1000051e 	bne	r2,zero,484b0 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   4849c:	e0bfff17 	ldw	r2,-4(fp)
   484a0:	00c00104 	movi	r3,4
   484a4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   484a8:	0005883a 	mov	r2,zero
   484ac:	00003b06 	br	4859c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   484b0:	e0bffe17 	ldw	r2,-8(fp)
   484b4:	10800003 	ldbu	r2,0(r2)
   484b8:	10803fcc 	andi	r2,r2,255
   484bc:	108000a0 	cmpeqi	r2,r2,2
   484c0:	1000051e 	bne	r2,zero,484d8 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   484c4:	e0bfff17 	ldw	r2,-4(fp)
   484c8:	00c00044 	movi	r3,1
   484cc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   484d0:	0005883a 	mov	r2,zero
   484d4:	00003106 	br	4859c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   484d8:	0005303a 	rdctl	r2,status
   484dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   484e0:	e0fffc17 	ldw	r3,-16(fp)
   484e4:	00bfff84 	movi	r2,-2
   484e8:	1884703a 	and	r2,r3,r2
   484ec:	1001703a 	wrctl	status,r2
  
  return context;
   484f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   484f4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   484f8:	e0bffe17 	ldw	r2,-8(fp)
   484fc:	10800117 	ldw	r2,4(r2)
   48500:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   48504:	e0bffb17 	ldw	r2,-20(fp)
   48508:	1080058b 	ldhu	r2,22(r2)
   4850c:	10bfffcc 	andi	r2,r2,65535
   48510:	10001926 	beq	r2,zero,48578 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   48514:	e0bffb17 	ldw	r2,-20(fp)
   48518:	10800417 	ldw	r2,16(r2)
   4851c:	11000104 	addi	r4,r2,4
   48520:	e0fffb17 	ldw	r3,-20(fp)
   48524:	19000415 	stw	r4,16(r3)
   48528:	10800017 	ldw	r2,0(r2)
   4852c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   48530:	e0bffb17 	ldw	r2,-20(fp)
   48534:	1080058b 	ldhu	r2,22(r2)
   48538:	10bfffc4 	addi	r2,r2,-1
   4853c:	1007883a 	mov	r3,r2
   48540:	e0bffb17 	ldw	r2,-20(fp)
   48544:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   48548:	e0bffb17 	ldw	r2,-20(fp)
   4854c:	10c00417 	ldw	r3,16(r2)
   48550:	e0bffb17 	ldw	r2,-20(fp)
   48554:	10800217 	ldw	r2,8(r2)
   48558:	1880041e 	bne	r3,r2,4856c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   4855c:	e0bffb17 	ldw	r2,-20(fp)
   48560:	10c00117 	ldw	r3,4(r2)
   48564:	e0bffb17 	ldw	r2,-20(fp)
   48568:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   4856c:	e0bfff17 	ldw	r2,-4(fp)
   48570:	10000005 	stb	zero,0(r2)
   48574:	00000406 	br	48588 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   48578:	e0bfff17 	ldw	r2,-4(fp)
   4857c:	00c007c4 	movi	r3,31
   48580:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   48584:	e03ff915 	stw	zero,-28(fp)
   48588:	e0bffa17 	ldw	r2,-24(fp)
   4858c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48590:	e0bffd17 	ldw	r2,-12(fp)
   48594:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   48598:	e0bff917 	ldw	r2,-28(fp)
}
   4859c:	e037883a 	mov	sp,fp
   485a0:	df000017 	ldw	fp,0(sp)
   485a4:	dec00104 	addi	sp,sp,4
   485a8:	f800283a 	ret

000485ac <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   485ac:	defff404 	addi	sp,sp,-48
   485b0:	dfc00b15 	stw	ra,44(sp)
   485b4:	df000a15 	stw	fp,40(sp)
   485b8:	df000a04 	addi	fp,sp,40
   485bc:	e13ffe15 	stw	r4,-8(fp)
   485c0:	2805883a 	mov	r2,r5
   485c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   485c8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   485cc:	00800174 	movhi	r2,5
   485d0:	108b2304 	addi	r2,r2,11404
   485d4:	10800003 	ldbu	r2,0(r2)
   485d8:	10803fcc 	andi	r2,r2,255
   485dc:	10000226 	beq	r2,zero,485e8 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   485e0:	0005883a 	mov	r2,zero
   485e4:	00006b06 	br	48794 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   485e8:	0005303a 	rdctl	r2,status
   485ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   485f0:	e0fff917 	ldw	r3,-28(fp)
   485f4:	00bfff84 	movi	r2,-2
   485f8:	1884703a 	and	r2,r3,r2
   485fc:	1001703a 	wrctl	status,r2
  
  return context;
   48600:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   48604:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   48608:	00800174 	movhi	r2,5
   4860c:	108b2204 	addi	r2,r2,11400
   48610:	10800017 	ldw	r2,0(r2)
   48614:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   48618:	00800174 	movhi	r2,5
   4861c:	108b2204 	addi	r2,r2,11400
   48620:	10800017 	ldw	r2,0(r2)
   48624:	10000726 	beq	r2,zero,48644 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   48628:	00800174 	movhi	r2,5
   4862c:	108b2204 	addi	r2,r2,11400
   48630:	10800017 	ldw	r2,0(r2)
   48634:	10c00117 	ldw	r3,4(r2)
   48638:	00800174 	movhi	r2,5
   4863c:	108b2204 	addi	r2,r2,11400
   48640:	10c00015 	stw	r3,0(r2)
   48644:	e0bff717 	ldw	r2,-36(fp)
   48648:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4864c:	e0bffa17 	ldw	r2,-24(fp)
   48650:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   48654:	e0bff617 	ldw	r2,-40(fp)
   48658:	10004d26 	beq	r2,zero,48790 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4865c:	0005303a 	rdctl	r2,status
   48660:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48664:	e0fffb17 	ldw	r3,-20(fp)
   48668:	00bfff84 	movi	r2,-2
   4866c:	1884703a 	and	r2,r3,r2
   48670:	1001703a 	wrctl	status,r2
  
  return context;
   48674:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   48678:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   4867c:	00800174 	movhi	r2,5
   48680:	108b2004 	addi	r2,r2,11392
   48684:	10800017 	ldw	r2,0(r2)
   48688:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   4868c:	e0bff817 	ldw	r2,-32(fp)
   48690:	10003126 	beq	r2,zero,48758 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   48694:	00800174 	movhi	r2,5
   48698:	108b2004 	addi	r2,r2,11392
   4869c:	10800017 	ldw	r2,0(r2)
   486a0:	10c00017 	ldw	r3,0(r2)
   486a4:	00800174 	movhi	r2,5
   486a8:	108b2004 	addi	r2,r2,11392
   486ac:	10c00015 	stw	r3,0(r2)
   486b0:	e0bff717 	ldw	r2,-36(fp)
   486b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   486b8:	e0bffc17 	ldw	r2,-16(fp)
   486bc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   486c0:	e0bff817 	ldw	r2,-32(fp)
   486c4:	e0fffe17 	ldw	r3,-8(fp)
   486c8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   486cc:	e0bfff0b 	ldhu	r2,-4(fp)
   486d0:	1085883a 	add	r2,r2,r2
   486d4:	1085883a 	add	r2,r2,r2
   486d8:	1007883a 	mov	r3,r2
   486dc:	e0bffe17 	ldw	r2,-8(fp)
   486e0:	10c7883a 	add	r3,r2,r3
   486e4:	e0bff817 	ldw	r2,-32(fp)
   486e8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   486ec:	e0bff817 	ldw	r2,-32(fp)
   486f0:	e0fffe17 	ldw	r3,-8(fp)
   486f4:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   486f8:	e0bff817 	ldw	r2,-32(fp)
   486fc:	e0fffe17 	ldw	r3,-8(fp)
   48700:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   48704:	e0bff817 	ldw	r2,-32(fp)
   48708:	e0ffff0b 	ldhu	r3,-4(fp)
   4870c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   48710:	e0bff817 	ldw	r2,-32(fp)
   48714:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   48718:	e0bff617 	ldw	r2,-40(fp)
   4871c:	00c00084 	movi	r3,2
   48720:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   48724:	e0bff617 	ldw	r2,-40(fp)
   48728:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   4872c:	e0bff617 	ldw	r2,-40(fp)
   48730:	e0fff817 	ldw	r3,-32(fp)
   48734:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   48738:	e0bff617 	ldw	r2,-40(fp)
   4873c:	00c00fc4 	movi	r3,63
   48740:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   48744:	e0bff617 	ldw	r2,-40(fp)
   48748:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   4874c:	e13ff617 	ldw	r4,-40(fp)
   48750:	00457f40 	call	457f4 <OS_EventWaitListInit>
   48754:	00000e06 	br	48790 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   48758:	00800174 	movhi	r2,5
   4875c:	108b2204 	addi	r2,r2,11400
   48760:	10c00017 	ldw	r3,0(r2)
   48764:	e0bff617 	ldw	r2,-40(fp)
   48768:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   4876c:	00800174 	movhi	r2,5
   48770:	108b2204 	addi	r2,r2,11400
   48774:	e0fff617 	ldw	r3,-40(fp)
   48778:	10c00015 	stw	r3,0(r2)
   4877c:	e0bff717 	ldw	r2,-36(fp)
   48780:	e0bffd15 	stw	r2,-12(fp)
   48784:	e0bffd17 	ldw	r2,-12(fp)
   48788:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   4878c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   48790:	e0bff617 	ldw	r2,-40(fp)
}
   48794:	e037883a 	mov	sp,fp
   48798:	dfc00117 	ldw	ra,4(sp)
   4879c:	df000017 	ldw	fp,0(sp)
   487a0:	dec00204 	addi	sp,sp,8
   487a4:	f800283a 	ret

000487a8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   487a8:	defff204 	addi	sp,sp,-56
   487ac:	dfc00d15 	stw	ra,52(sp)
   487b0:	df000c15 	stw	fp,48(sp)
   487b4:	df000c04 	addi	fp,sp,48
   487b8:	e13ffd15 	stw	r4,-12(fp)
   487bc:	2805883a 	mov	r2,r5
   487c0:	e1bfff15 	stw	r6,-4(fp)
   487c4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   487c8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   487cc:	e0bfff17 	ldw	r2,-4(fp)
   487d0:	1000021e 	bne	r2,zero,487dc <OSQDel+0x34>
        return (pevent);
   487d4:	e0bffd17 	ldw	r2,-12(fp)
   487d8:	0000a006 	br	48a5c <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   487dc:	e0bffd17 	ldw	r2,-12(fp)
   487e0:	1000051e 	bne	r2,zero,487f8 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   487e4:	e0bfff17 	ldw	r2,-4(fp)
   487e8:	00c00104 	movi	r3,4
   487ec:	10c00005 	stb	r3,0(r2)
        return (pevent);
   487f0:	e0bffd17 	ldw	r2,-12(fp)
   487f4:	00009906 	br	48a5c <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   487f8:	e0bffd17 	ldw	r2,-12(fp)
   487fc:	10800003 	ldbu	r2,0(r2)
   48800:	10803fcc 	andi	r2,r2,255
   48804:	108000a0 	cmpeqi	r2,r2,2
   48808:	1000051e 	bne	r2,zero,48820 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   4880c:	e0bfff17 	ldw	r2,-4(fp)
   48810:	00c00044 	movi	r3,1
   48814:	10c00005 	stb	r3,0(r2)
        return (pevent);
   48818:	e0bffd17 	ldw	r2,-12(fp)
   4881c:	00008f06 	br	48a5c <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   48820:	00800174 	movhi	r2,5
   48824:	108b2304 	addi	r2,r2,11404
   48828:	10800003 	ldbu	r2,0(r2)
   4882c:	10803fcc 	andi	r2,r2,255
   48830:	10000526 	beq	r2,zero,48848 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   48834:	e0bfff17 	ldw	r2,-4(fp)
   48838:	00c003c4 	movi	r3,15
   4883c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   48840:	e0bffd17 	ldw	r2,-12(fp)
   48844:	00008506 	br	48a5c <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48848:	0005303a 	rdctl	r2,status
   4884c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48850:	e0fff817 	ldw	r3,-32(fp)
   48854:	00bfff84 	movi	r2,-2
   48858:	1884703a 	and	r2,r3,r2
   4885c:	1001703a 	wrctl	status,r2
  
  return context;
   48860:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   48864:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   48868:	e0bffd17 	ldw	r2,-12(fp)
   4886c:	10800283 	ldbu	r2,10(r2)
   48870:	10803fcc 	andi	r2,r2,255
   48874:	10000326 	beq	r2,zero,48884 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   48878:	00800044 	movi	r2,1
   4887c:	e0bff405 	stb	r2,-48(fp)
   48880:	00000106 	br	48888 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   48884:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   48888:	e0bffe03 	ldbu	r2,-8(fp)
   4888c:	10000326 	beq	r2,zero,4889c <OSQDel+0xf4>
   48890:	10800060 	cmpeqi	r2,r2,1
   48894:	1000381e 	bne	r2,zero,48978 <OSQDel+0x1d0>
   48898:	00006506 	br	48a30 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   4889c:	e0bff403 	ldbu	r2,-48(fp)
   488a0:	1000261e 	bne	r2,zero,4893c <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   488a4:	e0bffd17 	ldw	r2,-12(fp)
   488a8:	00c00fc4 	movi	r3,63
   488ac:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   488b0:	e0bffd17 	ldw	r2,-12(fp)
   488b4:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   488b8:	e0bffd17 	ldw	r2,-12(fp)
   488bc:	10800117 	ldw	r2,4(r2)
   488c0:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   488c4:	00800174 	movhi	r2,5
   488c8:	108b2004 	addi	r2,r2,11392
   488cc:	10c00017 	ldw	r3,0(r2)
   488d0:	e0bff717 	ldw	r2,-36(fp)
   488d4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   488d8:	00800174 	movhi	r2,5
   488dc:	108b2004 	addi	r2,r2,11392
   488e0:	e0fff717 	ldw	r3,-36(fp)
   488e4:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   488e8:	e0bffd17 	ldw	r2,-12(fp)
   488ec:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   488f0:	00800174 	movhi	r2,5
   488f4:	108b2204 	addi	r2,r2,11400
   488f8:	10c00017 	ldw	r3,0(r2)
   488fc:	e0bffd17 	ldw	r2,-12(fp)
   48900:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   48904:	e0bffd17 	ldw	r2,-12(fp)
   48908:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   4890c:	00800174 	movhi	r2,5
   48910:	108b2204 	addi	r2,r2,11400
   48914:	e0fffd17 	ldw	r3,-12(fp)
   48918:	10c00015 	stw	r3,0(r2)
   4891c:	e0bff617 	ldw	r2,-40(fp)
   48920:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48924:	e0bff917 	ldw	r2,-28(fp)
   48928:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   4892c:	e0bfff17 	ldw	r2,-4(fp)
   48930:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   48934:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   48938:	00004706 	br	48a58 <OSQDel+0x2b0>
   4893c:	e0bff617 	ldw	r2,-40(fp)
   48940:	e0bffa15 	stw	r2,-24(fp)
   48944:	e0bffa17 	ldw	r2,-24(fp)
   48948:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   4894c:	e0bfff17 	ldw	r2,-4(fp)
   48950:	00c01244 	movi	r3,73
   48954:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   48958:	e0bffd17 	ldw	r2,-12(fp)
   4895c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   48960:	00003d06 	br	48a58 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   48964:	e13ffd17 	ldw	r4,-12(fp)
   48968:	000b883a 	mov	r5,zero
   4896c:	01800104 	movi	r6,4
   48970:	000f883a 	mov	r7,zero
   48974:	00452540 	call	45254 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   48978:	e0bffd17 	ldw	r2,-12(fp)
   4897c:	10800283 	ldbu	r2,10(r2)
   48980:	10803fcc 	andi	r2,r2,255
   48984:	103ff71e 	bne	r2,zero,48964 <__alt_data_end+0xfffd2e04>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   48988:	e0bffd17 	ldw	r2,-12(fp)
   4898c:	00c00fc4 	movi	r3,63
   48990:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   48994:	e0bffd17 	ldw	r2,-12(fp)
   48998:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   4899c:	e0bffd17 	ldw	r2,-12(fp)
   489a0:	10800117 	ldw	r2,4(r2)
   489a4:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   489a8:	00800174 	movhi	r2,5
   489ac:	108b2004 	addi	r2,r2,11392
   489b0:	10c00017 	ldw	r3,0(r2)
   489b4:	e0bff717 	ldw	r2,-36(fp)
   489b8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   489bc:	00800174 	movhi	r2,5
   489c0:	108b2004 	addi	r2,r2,11392
   489c4:	e0fff717 	ldw	r3,-36(fp)
   489c8:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   489cc:	e0bffd17 	ldw	r2,-12(fp)
   489d0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   489d4:	00800174 	movhi	r2,5
   489d8:	108b2204 	addi	r2,r2,11400
   489dc:	10c00017 	ldw	r3,0(r2)
   489e0:	e0bffd17 	ldw	r2,-12(fp)
   489e4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   489e8:	e0bffd17 	ldw	r2,-12(fp)
   489ec:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   489f0:	00800174 	movhi	r2,5
   489f4:	108b2204 	addi	r2,r2,11400
   489f8:	e0fffd17 	ldw	r3,-12(fp)
   489fc:	10c00015 	stw	r3,0(r2)
   48a00:	e0bff617 	ldw	r2,-40(fp)
   48a04:	e0bffb15 	stw	r2,-20(fp)
   48a08:	e0bffb17 	ldw	r2,-20(fp)
   48a0c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   48a10:	e0bff403 	ldbu	r2,-48(fp)
   48a14:	10800058 	cmpnei	r2,r2,1
   48a18:	1000011e 	bne	r2,zero,48a20 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   48a1c:	0045c6c0 	call	45c6c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   48a20:	e0bfff17 	ldw	r2,-4(fp)
   48a24:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   48a28:	e03ff515 	stw	zero,-44(fp)
             break;
   48a2c:	00000a06 	br	48a58 <OSQDel+0x2b0>
   48a30:	e0bff617 	ldw	r2,-40(fp)
   48a34:	e0bffc15 	stw	r2,-16(fp)
   48a38:	e0bffc17 	ldw	r2,-16(fp)
   48a3c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   48a40:	e0bfff17 	ldw	r2,-4(fp)
   48a44:	00c001c4 	movi	r3,7
   48a48:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   48a4c:	e0bffd17 	ldw	r2,-12(fp)
   48a50:	e0bff515 	stw	r2,-44(fp)
             break;
   48a54:	0001883a 	nop
    }
    return (pevent_return);
   48a58:	e0bff517 	ldw	r2,-44(fp)
}
   48a5c:	e037883a 	mov	sp,fp
   48a60:	dfc00117 	ldw	ra,4(sp)
   48a64:	df000017 	ldw	fp,0(sp)
   48a68:	dec00204 	addi	sp,sp,8
   48a6c:	f800283a 	ret

00048a70 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   48a70:	defffa04 	addi	sp,sp,-24
   48a74:	df000515 	stw	fp,20(sp)
   48a78:	df000504 	addi	fp,sp,20
   48a7c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   48a80:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   48a84:	e0bfff17 	ldw	r2,-4(fp)
   48a88:	1000021e 	bne	r2,zero,48a94 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   48a8c:	00800104 	movi	r2,4
   48a90:	00002106 	br	48b18 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   48a94:	e0bfff17 	ldw	r2,-4(fp)
   48a98:	10800003 	ldbu	r2,0(r2)
   48a9c:	10803fcc 	andi	r2,r2,255
   48aa0:	108000a0 	cmpeqi	r2,r2,2
   48aa4:	1000021e 	bne	r2,zero,48ab0 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   48aa8:	00800044 	movi	r2,1
   48aac:	00001a06 	br	48b18 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48ab0:	0005303a 	rdctl	r2,status
   48ab4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48ab8:	e0fffd17 	ldw	r3,-12(fp)
   48abc:	00bfff84 	movi	r2,-2
   48ac0:	1884703a 	and	r2,r3,r2
   48ac4:	1001703a 	wrctl	status,r2
  
  return context;
   48ac8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   48acc:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   48ad0:	e0bfff17 	ldw	r2,-4(fp)
   48ad4:	10800117 	ldw	r2,4(r2)
   48ad8:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   48adc:	e0bffc17 	ldw	r2,-16(fp)
   48ae0:	10c00117 	ldw	r3,4(r2)
   48ae4:	e0bffc17 	ldw	r2,-16(fp)
   48ae8:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   48aec:	e0bffc17 	ldw	r2,-16(fp)
   48af0:	10c00117 	ldw	r3,4(r2)
   48af4:	e0bffc17 	ldw	r2,-16(fp)
   48af8:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   48afc:	e0bffc17 	ldw	r2,-16(fp)
   48b00:	1000058d 	sth	zero,22(r2)
   48b04:	e0bffb17 	ldw	r2,-20(fp)
   48b08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48b0c:	e0bffe17 	ldw	r2,-8(fp)
   48b10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   48b14:	0005883a 	mov	r2,zero
}
   48b18:	e037883a 	mov	sp,fp
   48b1c:	df000017 	ldw	fp,0(sp)
   48b20:	dec00104 	addi	sp,sp,4
   48b24:	f800283a 	ret

00048b28 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   48b28:	defff304 	addi	sp,sp,-52
   48b2c:	dfc00c15 	stw	ra,48(sp)
   48b30:	df000b15 	stw	fp,44(sp)
   48b34:	df000b04 	addi	fp,sp,44
   48b38:	e13ffd15 	stw	r4,-12(fp)
   48b3c:	2805883a 	mov	r2,r5
   48b40:	e1bfff15 	stw	r6,-4(fp)
   48b44:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   48b48:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   48b4c:	e0bfff17 	ldw	r2,-4(fp)
   48b50:	1000021e 	bne	r2,zero,48b5c <OSQPend+0x34>
        return ((void *)0);
   48b54:	0005883a 	mov	r2,zero
   48b58:	0000ad06 	br	48e10 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   48b5c:	e0bffd17 	ldw	r2,-12(fp)
   48b60:	1000051e 	bne	r2,zero,48b78 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   48b64:	e0bfff17 	ldw	r2,-4(fp)
   48b68:	00c00104 	movi	r3,4
   48b6c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   48b70:	0005883a 	mov	r2,zero
   48b74:	0000a606 	br	48e10 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   48b78:	e0bffd17 	ldw	r2,-12(fp)
   48b7c:	10800003 	ldbu	r2,0(r2)
   48b80:	10803fcc 	andi	r2,r2,255
   48b84:	108000a0 	cmpeqi	r2,r2,2
   48b88:	1000051e 	bne	r2,zero,48ba0 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   48b8c:	e0bfff17 	ldw	r2,-4(fp)
   48b90:	00c00044 	movi	r3,1
   48b94:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   48b98:	0005883a 	mov	r2,zero
   48b9c:	00009c06 	br	48e10 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   48ba0:	00800174 	movhi	r2,5
   48ba4:	108b2304 	addi	r2,r2,11404
   48ba8:	10800003 	ldbu	r2,0(r2)
   48bac:	10803fcc 	andi	r2,r2,255
   48bb0:	10000526 	beq	r2,zero,48bc8 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   48bb4:	e0bfff17 	ldw	r2,-4(fp)
   48bb8:	00c00084 	movi	r3,2
   48bbc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   48bc0:	0005883a 	mov	r2,zero
   48bc4:	00009206 	br	48e10 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   48bc8:	00800174 	movhi	r2,5
   48bcc:	108b1504 	addi	r2,r2,11348
   48bd0:	10800003 	ldbu	r2,0(r2)
   48bd4:	10803fcc 	andi	r2,r2,255
   48bd8:	10000526 	beq	r2,zero,48bf0 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   48bdc:	e0bfff17 	ldw	r2,-4(fp)
   48be0:	00c00344 	movi	r3,13
   48be4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   48be8:	0005883a 	mov	r2,zero
   48bec:	00008806 	br	48e10 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48bf0:	0005303a 	rdctl	r2,status
   48bf4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48bf8:	e0fff817 	ldw	r3,-32(fp)
   48bfc:	00bfff84 	movi	r2,-2
   48c00:	1884703a 	and	r2,r3,r2
   48c04:	1001703a 	wrctl	status,r2
  
  return context;
   48c08:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   48c0c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   48c10:	e0bffd17 	ldw	r2,-12(fp)
   48c14:	10800117 	ldw	r2,4(r2)
   48c18:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   48c1c:	e0bff717 	ldw	r2,-36(fp)
   48c20:	1080058b 	ldhu	r2,22(r2)
   48c24:	10bfffcc 	andi	r2,r2,65535
   48c28:	10001e26 	beq	r2,zero,48ca4 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   48c2c:	e0bff717 	ldw	r2,-36(fp)
   48c30:	10800417 	ldw	r2,16(r2)
   48c34:	11000104 	addi	r4,r2,4
   48c38:	e0fff717 	ldw	r3,-36(fp)
   48c3c:	19000415 	stw	r4,16(r3)
   48c40:	10800017 	ldw	r2,0(r2)
   48c44:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   48c48:	e0bff717 	ldw	r2,-36(fp)
   48c4c:	1080058b 	ldhu	r2,22(r2)
   48c50:	10bfffc4 	addi	r2,r2,-1
   48c54:	1007883a 	mov	r3,r2
   48c58:	e0bff717 	ldw	r2,-36(fp)
   48c5c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   48c60:	e0bff717 	ldw	r2,-36(fp)
   48c64:	10c00417 	ldw	r3,16(r2)
   48c68:	e0bff717 	ldw	r2,-36(fp)
   48c6c:	10800217 	ldw	r2,8(r2)
   48c70:	1880041e 	bne	r3,r2,48c84 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   48c74:	e0bff717 	ldw	r2,-36(fp)
   48c78:	10c00117 	ldw	r3,4(r2)
   48c7c:	e0bff717 	ldw	r2,-36(fp)
   48c80:	10c00415 	stw	r3,16(r2)
   48c84:	e0bff617 	ldw	r2,-40(fp)
   48c88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48c8c:	e0bff917 	ldw	r2,-28(fp)
   48c90:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   48c94:	e0bfff17 	ldw	r2,-4(fp)
   48c98:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   48c9c:	e0bff517 	ldw	r2,-44(fp)
   48ca0:	00005b06 	br	48e10 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   48ca4:	00800174 	movhi	r2,5
   48ca8:	108b2404 	addi	r2,r2,11408
   48cac:	10c00017 	ldw	r3,0(r2)
   48cb0:	00800174 	movhi	r2,5
   48cb4:	108b2404 	addi	r2,r2,11408
   48cb8:	10800017 	ldw	r2,0(r2)
   48cbc:	10800c03 	ldbu	r2,48(r2)
   48cc0:	10800114 	ori	r2,r2,4
   48cc4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   48cc8:	00800174 	movhi	r2,5
   48ccc:	108b2404 	addi	r2,r2,11408
   48cd0:	10800017 	ldw	r2,0(r2)
   48cd4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   48cd8:	00800174 	movhi	r2,5
   48cdc:	108b2404 	addi	r2,r2,11408
   48ce0:	10800017 	ldw	r2,0(r2)
   48ce4:	e0fffe0b 	ldhu	r3,-8(fp)
   48ce8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   48cec:	e13ffd17 	ldw	r4,-12(fp)
   48cf0:	00453ec0 	call	453ec <OS_EventTaskWait>
   48cf4:	e0bff617 	ldw	r2,-40(fp)
   48cf8:	e0bffa15 	stw	r2,-24(fp)
   48cfc:	e0bffa17 	ldw	r2,-24(fp)
   48d00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   48d04:	0045c6c0 	call	45c6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48d08:	0005303a 	rdctl	r2,status
   48d0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48d10:	e0fffb17 	ldw	r3,-20(fp)
   48d14:	00bfff84 	movi	r2,-2
   48d18:	1884703a 	and	r2,r3,r2
   48d1c:	1001703a 	wrctl	status,r2
  
  return context;
   48d20:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   48d24:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   48d28:	00800174 	movhi	r2,5
   48d2c:	108b2404 	addi	r2,r2,11408
   48d30:	10800017 	ldw	r2,0(r2)
   48d34:	10800c43 	ldbu	r2,49(r2)
   48d38:	10803fcc 	andi	r2,r2,255
   48d3c:	10000326 	beq	r2,zero,48d4c <OSQPend+0x224>
   48d40:	108000a0 	cmpeqi	r2,r2,2
   48d44:	1000091e 	bne	r2,zero,48d6c <OSQPend+0x244>
   48d48:	00000d06 	br	48d80 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   48d4c:	00800174 	movhi	r2,5
   48d50:	108b2404 	addi	r2,r2,11408
   48d54:	10800017 	ldw	r2,0(r2)
   48d58:	10800917 	ldw	r2,36(r2)
   48d5c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   48d60:	e0bfff17 	ldw	r2,-4(fp)
   48d64:	10000005 	stb	zero,0(r2)
             break;
   48d68:	00001006 	br	48dac <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   48d6c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   48d70:	e0bfff17 	ldw	r2,-4(fp)
   48d74:	00c00384 	movi	r3,14
   48d78:	10c00005 	stb	r3,0(r2)
             break;
   48d7c:	00000b06 	br	48dac <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   48d80:	00800174 	movhi	r2,5
   48d84:	108b2404 	addi	r2,r2,11408
   48d88:	10800017 	ldw	r2,0(r2)
   48d8c:	1009883a 	mov	r4,r2
   48d90:	e17ffd17 	ldw	r5,-12(fp)
   48d94:	00456440 	call	45644 <OS_EventTaskRemove>
             pmsg = (void *)0;
   48d98:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   48d9c:	e0bfff17 	ldw	r2,-4(fp)
   48da0:	00c00284 	movi	r3,10
   48da4:	10c00005 	stb	r3,0(r2)
             break;
   48da8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   48dac:	00800174 	movhi	r2,5
   48db0:	108b2404 	addi	r2,r2,11408
   48db4:	10800017 	ldw	r2,0(r2)
   48db8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   48dbc:	00800174 	movhi	r2,5
   48dc0:	108b2404 	addi	r2,r2,11408
   48dc4:	10800017 	ldw	r2,0(r2)
   48dc8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   48dcc:	00800174 	movhi	r2,5
   48dd0:	108b2404 	addi	r2,r2,11408
   48dd4:	10800017 	ldw	r2,0(r2)
   48dd8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   48ddc:	00800174 	movhi	r2,5
   48de0:	108b2404 	addi	r2,r2,11408
   48de4:	10800017 	ldw	r2,0(r2)
   48de8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   48dec:	00800174 	movhi	r2,5
   48df0:	108b2404 	addi	r2,r2,11408
   48df4:	10800017 	ldw	r2,0(r2)
   48df8:	10000915 	stw	zero,36(r2)
   48dfc:	e0bff617 	ldw	r2,-40(fp)
   48e00:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48e04:	e0bffc17 	ldw	r2,-16(fp)
   48e08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   48e0c:	e0bff517 	ldw	r2,-44(fp)
}
   48e10:	e037883a 	mov	sp,fp
   48e14:	dfc00117 	ldw	ra,4(sp)
   48e18:	df000017 	ldw	fp,0(sp)
   48e1c:	dec00204 	addi	sp,sp,8
   48e20:	f800283a 	ret

00048e24 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   48e24:	defff604 	addi	sp,sp,-40
   48e28:	dfc00915 	stw	ra,36(sp)
   48e2c:	df000815 	stw	fp,32(sp)
   48e30:	df000804 	addi	fp,sp,32
   48e34:	e13ffd15 	stw	r4,-12(fp)
   48e38:	2805883a 	mov	r2,r5
   48e3c:	e1bfff15 	stw	r6,-4(fp)
   48e40:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   48e44:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   48e48:	e0bfff17 	ldw	r2,-4(fp)
   48e4c:	1000021e 	bne	r2,zero,48e58 <OSQPendAbort+0x34>
        return (0);
   48e50:	0005883a 	mov	r2,zero
   48e54:	00004906 	br	48f7c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   48e58:	e0bffd17 	ldw	r2,-12(fp)
   48e5c:	1000051e 	bne	r2,zero,48e74 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   48e60:	e0bfff17 	ldw	r2,-4(fp)
   48e64:	00c00104 	movi	r3,4
   48e68:	10c00005 	stb	r3,0(r2)
        return (0);
   48e6c:	0005883a 	mov	r2,zero
   48e70:	00004206 	br	48f7c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   48e74:	e0bffd17 	ldw	r2,-12(fp)
   48e78:	10800003 	ldbu	r2,0(r2)
   48e7c:	10803fcc 	andi	r2,r2,255
   48e80:	108000a0 	cmpeqi	r2,r2,2
   48e84:	1000051e 	bne	r2,zero,48e9c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   48e88:	e0bfff17 	ldw	r2,-4(fp)
   48e8c:	00c00044 	movi	r3,1
   48e90:	10c00005 	stb	r3,0(r2)
        return (0);
   48e94:	0005883a 	mov	r2,zero
   48e98:	00003806 	br	48f7c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48e9c:	0005303a 	rdctl	r2,status
   48ea0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48ea4:	e0fffa17 	ldw	r3,-24(fp)
   48ea8:	00bfff84 	movi	r2,-2
   48eac:	1884703a 	and	r2,r3,r2
   48eb0:	1001703a 	wrctl	status,r2
  
  return context;
   48eb4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   48eb8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   48ebc:	e0bffd17 	ldw	r2,-12(fp)
   48ec0:	10800283 	ldbu	r2,10(r2)
   48ec4:	10803fcc 	andi	r2,r2,255
   48ec8:	10002526 	beq	r2,zero,48f60 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   48ecc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   48ed0:	e0bffe03 	ldbu	r2,-8(fp)
   48ed4:	10800060 	cmpeqi	r2,r2,1
   48ed8:	10000e26 	beq	r2,zero,48f14 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   48edc:	00000806 	br	48f00 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   48ee0:	e13ffd17 	ldw	r4,-12(fp)
   48ee4:	000b883a 	mov	r5,zero
   48ee8:	01800104 	movi	r6,4
   48eec:	01c00084 	movi	r7,2
   48ef0:	00452540 	call	45254 <OS_EventTaskRdy>
                     nbr_tasks++;
   48ef4:	e0bff803 	ldbu	r2,-32(fp)
   48ef8:	10800044 	addi	r2,r2,1
   48efc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   48f00:	e0bffd17 	ldw	r2,-12(fp)
   48f04:	10800283 	ldbu	r2,10(r2)
   48f08:	10803fcc 	andi	r2,r2,255
   48f0c:	103ff41e 	bne	r2,zero,48ee0 <__alt_data_end+0xfffd3380>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   48f10:	00000906 	br	48f38 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   48f14:	e13ffd17 	ldw	r4,-12(fp)
   48f18:	000b883a 	mov	r5,zero
   48f1c:	01800104 	movi	r6,4
   48f20:	01c00084 	movi	r7,2
   48f24:	00452540 	call	45254 <OS_EventTaskRdy>
                 nbr_tasks++;
   48f28:	e0bff803 	ldbu	r2,-32(fp)
   48f2c:	10800044 	addi	r2,r2,1
   48f30:	e0bff805 	stb	r2,-32(fp)
                 break;
   48f34:	0001883a 	nop
   48f38:	e0bff917 	ldw	r2,-28(fp)
   48f3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48f40:	e0bffb17 	ldw	r2,-20(fp)
   48f44:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   48f48:	0045c6c0 	call	45c6c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   48f4c:	e0bfff17 	ldw	r2,-4(fp)
   48f50:	00c00384 	movi	r3,14
   48f54:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   48f58:	e0bff803 	ldbu	r2,-32(fp)
   48f5c:	00000706 	br	48f7c <OSQPendAbort+0x158>
   48f60:	e0bff917 	ldw	r2,-28(fp)
   48f64:	e0bffc15 	stw	r2,-16(fp)
   48f68:	e0bffc17 	ldw	r2,-16(fp)
   48f6c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   48f70:	e0bfff17 	ldw	r2,-4(fp)
   48f74:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   48f78:	0005883a 	mov	r2,zero
}
   48f7c:	e037883a 	mov	sp,fp
   48f80:	dfc00117 	ldw	ra,4(sp)
   48f84:	df000017 	ldw	fp,0(sp)
   48f88:	dec00204 	addi	sp,sp,8
   48f8c:	f800283a 	ret

00048f90 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   48f90:	defff604 	addi	sp,sp,-40
   48f94:	dfc00915 	stw	ra,36(sp)
   48f98:	df000815 	stw	fp,32(sp)
   48f9c:	df000804 	addi	fp,sp,32
   48fa0:	e13ffe15 	stw	r4,-8(fp)
   48fa4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   48fa8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   48fac:	e0bffe17 	ldw	r2,-8(fp)
   48fb0:	1000021e 	bne	r2,zero,48fbc <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   48fb4:	00800104 	movi	r2,4
   48fb8:	00004a06 	br	490e4 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   48fbc:	e0bffe17 	ldw	r2,-8(fp)
   48fc0:	10800003 	ldbu	r2,0(r2)
   48fc4:	10803fcc 	andi	r2,r2,255
   48fc8:	108000a0 	cmpeqi	r2,r2,2
   48fcc:	1000021e 	bne	r2,zero,48fd8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   48fd0:	00800044 	movi	r2,1
   48fd4:	00004306 	br	490e4 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48fd8:	0005303a 	rdctl	r2,status
   48fdc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48fe0:	e0fffa17 	ldw	r3,-24(fp)
   48fe4:	00bfff84 	movi	r2,-2
   48fe8:	1884703a 	and	r2,r3,r2
   48fec:	1001703a 	wrctl	status,r2
  
  return context;
   48ff0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   48ff4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   48ff8:	e0bffe17 	ldw	r2,-8(fp)
   48ffc:	10800283 	ldbu	r2,10(r2)
   49000:	10803fcc 	andi	r2,r2,255
   49004:	10000c26 	beq	r2,zero,49038 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   49008:	e13ffe17 	ldw	r4,-8(fp)
   4900c:	e17fff17 	ldw	r5,-4(fp)
   49010:	01800104 	movi	r6,4
   49014:	000f883a 	mov	r7,zero
   49018:	00452540 	call	45254 <OS_EventTaskRdy>
   4901c:	e0bff817 	ldw	r2,-32(fp)
   49020:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49024:	e0bffb17 	ldw	r2,-20(fp)
   49028:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   4902c:	0045c6c0 	call	45c6c <OS_Sched>
        return (OS_ERR_NONE);
   49030:	0005883a 	mov	r2,zero
   49034:	00002b06 	br	490e4 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   49038:	e0bffe17 	ldw	r2,-8(fp)
   4903c:	10800117 	ldw	r2,4(r2)
   49040:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   49044:	e0bff917 	ldw	r2,-28(fp)
   49048:	10c0058b 	ldhu	r3,22(r2)
   4904c:	e0bff917 	ldw	r2,-28(fp)
   49050:	1080050b 	ldhu	r2,20(r2)
   49054:	18ffffcc 	andi	r3,r3,65535
   49058:	10bfffcc 	andi	r2,r2,65535
   4905c:	18800636 	bltu	r3,r2,49078 <OSQPost+0xe8>
   49060:	e0bff817 	ldw	r2,-32(fp)
   49064:	e0bffc15 	stw	r2,-16(fp)
   49068:	e0bffc17 	ldw	r2,-16(fp)
   4906c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   49070:	00800784 	movi	r2,30
   49074:	00001b06 	br	490e4 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   49078:	e0bff917 	ldw	r2,-28(fp)
   4907c:	10800317 	ldw	r2,12(r2)
   49080:	11000104 	addi	r4,r2,4
   49084:	e0fff917 	ldw	r3,-28(fp)
   49088:	19000315 	stw	r4,12(r3)
   4908c:	e0ffff17 	ldw	r3,-4(fp)
   49090:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   49094:	e0bff917 	ldw	r2,-28(fp)
   49098:	1080058b 	ldhu	r2,22(r2)
   4909c:	10800044 	addi	r2,r2,1
   490a0:	1007883a 	mov	r3,r2
   490a4:	e0bff917 	ldw	r2,-28(fp)
   490a8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   490ac:	e0bff917 	ldw	r2,-28(fp)
   490b0:	10c00317 	ldw	r3,12(r2)
   490b4:	e0bff917 	ldw	r2,-28(fp)
   490b8:	10800217 	ldw	r2,8(r2)
   490bc:	1880041e 	bne	r3,r2,490d0 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   490c0:	e0bff917 	ldw	r2,-28(fp)
   490c4:	10c00117 	ldw	r3,4(r2)
   490c8:	e0bff917 	ldw	r2,-28(fp)
   490cc:	10c00315 	stw	r3,12(r2)
   490d0:	e0bff817 	ldw	r2,-32(fp)
   490d4:	e0bffd15 	stw	r2,-12(fp)
   490d8:	e0bffd17 	ldw	r2,-12(fp)
   490dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   490e0:	0005883a 	mov	r2,zero
}
   490e4:	e037883a 	mov	sp,fp
   490e8:	dfc00117 	ldw	ra,4(sp)
   490ec:	df000017 	ldw	fp,0(sp)
   490f0:	dec00204 	addi	sp,sp,8
   490f4:	f800283a 	ret

000490f8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   490f8:	defff604 	addi	sp,sp,-40
   490fc:	dfc00915 	stw	ra,36(sp)
   49100:	df000815 	stw	fp,32(sp)
   49104:	df000804 	addi	fp,sp,32
   49108:	e13ffe15 	stw	r4,-8(fp)
   4910c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   49110:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   49114:	e0bffe17 	ldw	r2,-8(fp)
   49118:	1000021e 	bne	r2,zero,49124 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   4911c:	00800104 	movi	r2,4
   49120:	00004c06 	br	49254 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   49124:	e0bffe17 	ldw	r2,-8(fp)
   49128:	10800003 	ldbu	r2,0(r2)
   4912c:	10803fcc 	andi	r2,r2,255
   49130:	108000a0 	cmpeqi	r2,r2,2
   49134:	1000021e 	bne	r2,zero,49140 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   49138:	00800044 	movi	r2,1
   4913c:	00004506 	br	49254 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49140:	0005303a 	rdctl	r2,status
   49144:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49148:	e0fffa17 	ldw	r3,-24(fp)
   4914c:	00bfff84 	movi	r2,-2
   49150:	1884703a 	and	r2,r3,r2
   49154:	1001703a 	wrctl	status,r2
  
  return context;
   49158:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   4915c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   49160:	e0bffe17 	ldw	r2,-8(fp)
   49164:	10800283 	ldbu	r2,10(r2)
   49168:	10803fcc 	andi	r2,r2,255
   4916c:	10000c26 	beq	r2,zero,491a0 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   49170:	e13ffe17 	ldw	r4,-8(fp)
   49174:	e17fff17 	ldw	r5,-4(fp)
   49178:	01800104 	movi	r6,4
   4917c:	000f883a 	mov	r7,zero
   49180:	00452540 	call	45254 <OS_EventTaskRdy>
   49184:	e0bff817 	ldw	r2,-32(fp)
   49188:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4918c:	e0bffb17 	ldw	r2,-20(fp)
   49190:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   49194:	0045c6c0 	call	45c6c <OS_Sched>
        return (OS_ERR_NONE);
   49198:	0005883a 	mov	r2,zero
   4919c:	00002d06 	br	49254 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   491a0:	e0bffe17 	ldw	r2,-8(fp)
   491a4:	10800117 	ldw	r2,4(r2)
   491a8:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   491ac:	e0bff917 	ldw	r2,-28(fp)
   491b0:	10c0058b 	ldhu	r3,22(r2)
   491b4:	e0bff917 	ldw	r2,-28(fp)
   491b8:	1080050b 	ldhu	r2,20(r2)
   491bc:	18ffffcc 	andi	r3,r3,65535
   491c0:	10bfffcc 	andi	r2,r2,65535
   491c4:	18800636 	bltu	r3,r2,491e0 <OSQPostFront+0xe8>
   491c8:	e0bff817 	ldw	r2,-32(fp)
   491cc:	e0bffc15 	stw	r2,-16(fp)
   491d0:	e0bffc17 	ldw	r2,-16(fp)
   491d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   491d8:	00800784 	movi	r2,30
   491dc:	00001d06 	br	49254 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   491e0:	e0bff917 	ldw	r2,-28(fp)
   491e4:	10c00417 	ldw	r3,16(r2)
   491e8:	e0bff917 	ldw	r2,-28(fp)
   491ec:	10800117 	ldw	r2,4(r2)
   491f0:	1880041e 	bne	r3,r2,49204 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   491f4:	e0bff917 	ldw	r2,-28(fp)
   491f8:	10c00217 	ldw	r3,8(r2)
   491fc:	e0bff917 	ldw	r2,-28(fp)
   49200:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   49204:	e0bff917 	ldw	r2,-28(fp)
   49208:	10800417 	ldw	r2,16(r2)
   4920c:	10ffff04 	addi	r3,r2,-4
   49210:	e0bff917 	ldw	r2,-28(fp)
   49214:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   49218:	e0bff917 	ldw	r2,-28(fp)
   4921c:	10800417 	ldw	r2,16(r2)
   49220:	e0ffff17 	ldw	r3,-4(fp)
   49224:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   49228:	e0bff917 	ldw	r2,-28(fp)
   4922c:	1080058b 	ldhu	r2,22(r2)
   49230:	10800044 	addi	r2,r2,1
   49234:	1007883a 	mov	r3,r2
   49238:	e0bff917 	ldw	r2,-28(fp)
   4923c:	10c0058d 	sth	r3,22(r2)
   49240:	e0bff817 	ldw	r2,-32(fp)
   49244:	e0bffd15 	stw	r2,-12(fp)
   49248:	e0bffd17 	ldw	r2,-12(fp)
   4924c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   49250:	0005883a 	mov	r2,zero
}
   49254:	e037883a 	mov	sp,fp
   49258:	dfc00117 	ldw	ra,4(sp)
   4925c:	df000017 	ldw	fp,0(sp)
   49260:	dec00204 	addi	sp,sp,8
   49264:	f800283a 	ret

00049268 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   49268:	defff504 	addi	sp,sp,-44
   4926c:	dfc00a15 	stw	ra,40(sp)
   49270:	df000915 	stw	fp,36(sp)
   49274:	df000904 	addi	fp,sp,36
   49278:	e13ffd15 	stw	r4,-12(fp)
   4927c:	e17ffe15 	stw	r5,-8(fp)
   49280:	3005883a 	mov	r2,r6
   49284:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   49288:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   4928c:	e0bffd17 	ldw	r2,-12(fp)
   49290:	1000021e 	bne	r2,zero,4929c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   49294:	00800104 	movi	r2,4
   49298:	00007106 	br	49460 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   4929c:	e0bffd17 	ldw	r2,-12(fp)
   492a0:	10800003 	ldbu	r2,0(r2)
   492a4:	10803fcc 	andi	r2,r2,255
   492a8:	108000a0 	cmpeqi	r2,r2,2
   492ac:	1000021e 	bne	r2,zero,492b8 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   492b0:	00800044 	movi	r2,1
   492b4:	00006a06 	br	49460 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   492b8:	0005303a 	rdctl	r2,status
   492bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   492c0:	e0fff917 	ldw	r3,-28(fp)
   492c4:	00bfff84 	movi	r2,-2
   492c8:	1884703a 	and	r2,r3,r2
   492cc:	1001703a 	wrctl	status,r2
  
  return context;
   492d0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   492d4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   492d8:	e0bffd17 	ldw	r2,-12(fp)
   492dc:	10800283 	ldbu	r2,10(r2)
   492e0:	10803fcc 	andi	r2,r2,255
   492e4:	10001d26 	beq	r2,zero,4935c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   492e8:	e0bfff03 	ldbu	r2,-4(fp)
   492ec:	1080004c 	andi	r2,r2,1
   492f0:	10000b26 	beq	r2,zero,49320 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   492f4:	00000506 	br	4930c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   492f8:	e13ffd17 	ldw	r4,-12(fp)
   492fc:	e17ffe17 	ldw	r5,-8(fp)
   49300:	01800104 	movi	r6,4
   49304:	000f883a 	mov	r7,zero
   49308:	00452540 	call	45254 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   4930c:	e0bffd17 	ldw	r2,-12(fp)
   49310:	10800283 	ldbu	r2,10(r2)
   49314:	10803fcc 	andi	r2,r2,255
   49318:	103ff71e 	bne	r2,zero,492f8 <__alt_data_end+0xfffd3798>
   4931c:	00000506 	br	49334 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   49320:	e13ffd17 	ldw	r4,-12(fp)
   49324:	e17ffe17 	ldw	r5,-8(fp)
   49328:	01800104 	movi	r6,4
   4932c:	000f883a 	mov	r7,zero
   49330:	00452540 	call	45254 <OS_EventTaskRdy>
   49334:	e0bff717 	ldw	r2,-36(fp)
   49338:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4933c:	e0bffa17 	ldw	r2,-24(fp)
   49340:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   49344:	e0bfff03 	ldbu	r2,-4(fp)
   49348:	1080010c 	andi	r2,r2,4
   4934c:	1000011e 	bne	r2,zero,49354 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   49350:	0045c6c0 	call	45c6c <OS_Sched>
        }
        return (OS_ERR_NONE);
   49354:	0005883a 	mov	r2,zero
   49358:	00004106 	br	49460 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   4935c:	e0bffd17 	ldw	r2,-12(fp)
   49360:	10800117 	ldw	r2,4(r2)
   49364:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   49368:	e0bff817 	ldw	r2,-32(fp)
   4936c:	10c0058b 	ldhu	r3,22(r2)
   49370:	e0bff817 	ldw	r2,-32(fp)
   49374:	1080050b 	ldhu	r2,20(r2)
   49378:	18ffffcc 	andi	r3,r3,65535
   4937c:	10bfffcc 	andi	r2,r2,65535
   49380:	18800636 	bltu	r3,r2,4939c <OSQPostOpt+0x134>
   49384:	e0bff717 	ldw	r2,-36(fp)
   49388:	e0bffb15 	stw	r2,-20(fp)
   4938c:	e0bffb17 	ldw	r2,-20(fp)
   49390:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   49394:	00800784 	movi	r2,30
   49398:	00003106 	br	49460 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   4939c:	e0bfff03 	ldbu	r2,-4(fp)
   493a0:	1080008c 	andi	r2,r2,2
   493a4:	10001326 	beq	r2,zero,493f4 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   493a8:	e0bff817 	ldw	r2,-32(fp)
   493ac:	10c00417 	ldw	r3,16(r2)
   493b0:	e0bff817 	ldw	r2,-32(fp)
   493b4:	10800117 	ldw	r2,4(r2)
   493b8:	1880041e 	bne	r3,r2,493cc <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   493bc:	e0bff817 	ldw	r2,-32(fp)
   493c0:	10c00217 	ldw	r3,8(r2)
   493c4:	e0bff817 	ldw	r2,-32(fp)
   493c8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   493cc:	e0bff817 	ldw	r2,-32(fp)
   493d0:	10800417 	ldw	r2,16(r2)
   493d4:	10ffff04 	addi	r3,r2,-4
   493d8:	e0bff817 	ldw	r2,-32(fp)
   493dc:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   493e0:	e0bff817 	ldw	r2,-32(fp)
   493e4:	10800417 	ldw	r2,16(r2)
   493e8:	e0fffe17 	ldw	r3,-8(fp)
   493ec:	10c00015 	stw	r3,0(r2)
   493f0:	00001006 	br	49434 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   493f4:	e0bff817 	ldw	r2,-32(fp)
   493f8:	10800317 	ldw	r2,12(r2)
   493fc:	11000104 	addi	r4,r2,4
   49400:	e0fff817 	ldw	r3,-32(fp)
   49404:	19000315 	stw	r4,12(r3)
   49408:	e0fffe17 	ldw	r3,-8(fp)
   4940c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   49410:	e0bff817 	ldw	r2,-32(fp)
   49414:	10c00317 	ldw	r3,12(r2)
   49418:	e0bff817 	ldw	r2,-32(fp)
   4941c:	10800217 	ldw	r2,8(r2)
   49420:	1880041e 	bne	r3,r2,49434 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   49424:	e0bff817 	ldw	r2,-32(fp)
   49428:	10c00117 	ldw	r3,4(r2)
   4942c:	e0bff817 	ldw	r2,-32(fp)
   49430:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   49434:	e0bff817 	ldw	r2,-32(fp)
   49438:	1080058b 	ldhu	r2,22(r2)
   4943c:	10800044 	addi	r2,r2,1
   49440:	1007883a 	mov	r3,r2
   49444:	e0bff817 	ldw	r2,-32(fp)
   49448:	10c0058d 	sth	r3,22(r2)
   4944c:	e0bff717 	ldw	r2,-36(fp)
   49450:	e0bffc15 	stw	r2,-16(fp)
   49454:	e0bffc17 	ldw	r2,-16(fp)
   49458:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   4945c:	0005883a 	mov	r2,zero
}
   49460:	e037883a 	mov	sp,fp
   49464:	dfc00117 	ldw	ra,4(sp)
   49468:	df000017 	ldw	fp,0(sp)
   4946c:	dec00204 	addi	sp,sp,8
   49470:	f800283a 	ret

00049474 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   49474:	defff604 	addi	sp,sp,-40
   49478:	df000915 	stw	fp,36(sp)
   4947c:	df000904 	addi	fp,sp,36
   49480:	e13ffe15 	stw	r4,-8(fp)
   49484:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   49488:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   4948c:	e0bffe17 	ldw	r2,-8(fp)
   49490:	1000021e 	bne	r2,zero,4949c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   49494:	00800104 	movi	r2,4
   49498:	00004906 	br	495c0 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   4949c:	e0bfff17 	ldw	r2,-4(fp)
   494a0:	1000021e 	bne	r2,zero,494ac <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   494a4:	00800244 	movi	r2,9
   494a8:	00004506 	br	495c0 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   494ac:	e0bffe17 	ldw	r2,-8(fp)
   494b0:	10800003 	ldbu	r2,0(r2)
   494b4:	10803fcc 	andi	r2,r2,255
   494b8:	108000a0 	cmpeqi	r2,r2,2
   494bc:	1000021e 	bne	r2,zero,494c8 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   494c0:	00800044 	movi	r2,1
   494c4:	00003e06 	br	495c0 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   494c8:	0005303a 	rdctl	r2,status
   494cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   494d0:	e0fffc17 	ldw	r3,-16(fp)
   494d4:	00bfff84 	movi	r2,-2
   494d8:	1884703a 	and	r2,r3,r2
   494dc:	1001703a 	wrctl	status,r2
  
  return context;
   494e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   494e4:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   494e8:	e0bffe17 	ldw	r2,-8(fp)
   494ec:	10c00283 	ldbu	r3,10(r2)
   494f0:	e0bfff17 	ldw	r2,-4(fp)
   494f4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   494f8:	e0bffe17 	ldw	r2,-8(fp)
   494fc:	108002c4 	addi	r2,r2,11
   49500:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   49504:	e0bfff17 	ldw	r2,-4(fp)
   49508:	10800204 	addi	r2,r2,8
   4950c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   49510:	e03ff705 	stb	zero,-36(fp)
   49514:	00000b06 	br	49544 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   49518:	e0bff917 	ldw	r2,-28(fp)
   4951c:	10c00044 	addi	r3,r2,1
   49520:	e0fff915 	stw	r3,-28(fp)
   49524:	e0fff817 	ldw	r3,-32(fp)
   49528:	19000044 	addi	r4,r3,1
   4952c:	e13ff815 	stw	r4,-32(fp)
   49530:	18c00003 	ldbu	r3,0(r3)
   49534:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   49538:	e0bff703 	ldbu	r2,-36(fp)
   4953c:	10800044 	addi	r2,r2,1
   49540:	e0bff705 	stb	r2,-36(fp)
   49544:	e0bff703 	ldbu	r2,-36(fp)
   49548:	108000f0 	cmpltui	r2,r2,3
   4954c:	103ff21e 	bne	r2,zero,49518 <__alt_data_end+0xfffd39b8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   49550:	e0bffe17 	ldw	r2,-8(fp)
   49554:	10800117 	ldw	r2,4(r2)
   49558:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   4955c:	e0bffb17 	ldw	r2,-20(fp)
   49560:	1080058b 	ldhu	r2,22(r2)
   49564:	10bfffcc 	andi	r2,r2,65535
   49568:	10000626 	beq	r2,zero,49584 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   4956c:	e0bffb17 	ldw	r2,-20(fp)
   49570:	10800417 	ldw	r2,16(r2)
   49574:	10c00017 	ldw	r3,0(r2)
   49578:	e0bfff17 	ldw	r2,-4(fp)
   4957c:	10c00015 	stw	r3,0(r2)
   49580:	00000206 	br	4958c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   49584:	e0bfff17 	ldw	r2,-4(fp)
   49588:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   4958c:	e0bffb17 	ldw	r2,-20(fp)
   49590:	10c0058b 	ldhu	r3,22(r2)
   49594:	e0bfff17 	ldw	r2,-4(fp)
   49598:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   4959c:	e0bffb17 	ldw	r2,-20(fp)
   495a0:	10c0050b 	ldhu	r3,20(r2)
   495a4:	e0bfff17 	ldw	r2,-4(fp)
   495a8:	10c0018d 	sth	r3,6(r2)
   495ac:	e0bffa17 	ldw	r2,-24(fp)
   495b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   495b4:	e0bffd17 	ldw	r2,-12(fp)
   495b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   495bc:	0005883a 	mov	r2,zero
}
   495c0:	e037883a 	mov	sp,fp
   495c4:	df000017 	ldw	fp,0(sp)
   495c8:	dec00104 	addi	sp,sp,4
   495cc:	f800283a 	ret

000495d0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   495d0:	defffb04 	addi	sp,sp,-20
   495d4:	dfc00415 	stw	ra,16(sp)
   495d8:	df000315 	stw	fp,12(sp)
   495dc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   495e0:	010001b4 	movhi	r4,6
   495e4:	21291f04 	addi	r4,r4,-23428
   495e8:	01407804 	movi	r5,480
   495ec:	0045bb80 	call	45bb8 <OS_MemClr>
    pq1 = &OSQTbl[0];
   495f0:	008001b4 	movhi	r2,6
   495f4:	10a91f04 	addi	r2,r2,-23428
   495f8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   495fc:	008001b4 	movhi	r2,6
   49600:	10a92504 	addi	r2,r2,-23404
   49604:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   49608:	e03ffd0d 	sth	zero,-12(fp)
   4960c:	00000c06 	br	49640 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   49610:	e0bffe17 	ldw	r2,-8(fp)
   49614:	e0ffff17 	ldw	r3,-4(fp)
   49618:	10c00015 	stw	r3,0(r2)
        pq1++;
   4961c:	e0bffe17 	ldw	r2,-8(fp)
   49620:	10800604 	addi	r2,r2,24
   49624:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   49628:	e0bfff17 	ldw	r2,-4(fp)
   4962c:	10800604 	addi	r2,r2,24
   49630:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   49634:	e0bffd0b 	ldhu	r2,-12(fp)
   49638:	10800044 	addi	r2,r2,1
   4963c:	e0bffd0d 	sth	r2,-12(fp)
   49640:	e0bffd0b 	ldhu	r2,-12(fp)
   49644:	108004f0 	cmpltui	r2,r2,19
   49648:	103ff11e 	bne	r2,zero,49610 <__alt_data_end+0xfffd3ab0>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   4964c:	e0bffe17 	ldw	r2,-8(fp)
   49650:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   49654:	00800174 	movhi	r2,5
   49658:	108b2004 	addi	r2,r2,11392
   4965c:	00c001b4 	movhi	r3,6
   49660:	18e91f04 	addi	r3,r3,-23428
   49664:	10c00015 	stw	r3,0(r2)
#endif
}
   49668:	e037883a 	mov	sp,fp
   4966c:	dfc00117 	ldw	ra,4(sp)
   49670:	df000017 	ldw	fp,0(sp)
   49674:	dec00204 	addi	sp,sp,8
   49678:	f800283a 	ret

0004967c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   4967c:	defffa04 	addi	sp,sp,-24
   49680:	df000515 	stw	fp,20(sp)
   49684:	df000504 	addi	fp,sp,20
   49688:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   4968c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   49690:	e0bfff17 	ldw	r2,-4(fp)
   49694:	1000021e 	bne	r2,zero,496a0 <OSSemAccept+0x24>
        return (0);
   49698:	0005883a 	mov	r2,zero
   4969c:	00001f06 	br	4971c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   496a0:	e0bfff17 	ldw	r2,-4(fp)
   496a4:	10800003 	ldbu	r2,0(r2)
   496a8:	10803fcc 	andi	r2,r2,255
   496ac:	108000e0 	cmpeqi	r2,r2,3
   496b0:	1000021e 	bne	r2,zero,496bc <OSSemAccept+0x40>
        return (0);
   496b4:	0005883a 	mov	r2,zero
   496b8:	00001806 	br	4971c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   496bc:	0005303a 	rdctl	r2,status
   496c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   496c4:	e0fffd17 	ldw	r3,-12(fp)
   496c8:	00bfff84 	movi	r2,-2
   496cc:	1884703a 	and	r2,r3,r2
   496d0:	1001703a 	wrctl	status,r2
  
  return context;
   496d4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   496d8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   496dc:	e0bfff17 	ldw	r2,-4(fp)
   496e0:	1080020b 	ldhu	r2,8(r2)
   496e4:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   496e8:	e0bffc0b 	ldhu	r2,-16(fp)
   496ec:	10000626 	beq	r2,zero,49708 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   496f0:	e0bfff17 	ldw	r2,-4(fp)
   496f4:	1080020b 	ldhu	r2,8(r2)
   496f8:	10bfffc4 	addi	r2,r2,-1
   496fc:	1007883a 	mov	r3,r2
   49700:	e0bfff17 	ldw	r2,-4(fp)
   49704:	10c0020d 	sth	r3,8(r2)
   49708:	e0bffb17 	ldw	r2,-20(fp)
   4970c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49710:	e0bffe17 	ldw	r2,-8(fp)
   49714:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   49718:	e0bffc0b 	ldhu	r2,-16(fp)
}
   4971c:	e037883a 	mov	sp,fp
   49720:	df000017 	ldw	fp,0(sp)
   49724:	dec00104 	addi	sp,sp,4
   49728:	f800283a 	ret

0004972c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   4972c:	defff904 	addi	sp,sp,-28
   49730:	dfc00615 	stw	ra,24(sp)
   49734:	df000515 	stw	fp,20(sp)
   49738:	df000504 	addi	fp,sp,20
   4973c:	2005883a 	mov	r2,r4
   49740:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   49744:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   49748:	00800174 	movhi	r2,5
   4974c:	108b2304 	addi	r2,r2,11404
   49750:	10800003 	ldbu	r2,0(r2)
   49754:	10803fcc 	andi	r2,r2,255
   49758:	10000226 	beq	r2,zero,49764 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   4975c:	0005883a 	mov	r2,zero
   49760:	00002d06 	br	49818 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49764:	0005303a 	rdctl	r2,status
   49768:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4976c:	e0fffd17 	ldw	r3,-12(fp)
   49770:	00bfff84 	movi	r2,-2
   49774:	1884703a 	and	r2,r3,r2
   49778:	1001703a 	wrctl	status,r2
  
  return context;
   4977c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   49780:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   49784:	00800174 	movhi	r2,5
   49788:	108b2204 	addi	r2,r2,11400
   4978c:	10800017 	ldw	r2,0(r2)
   49790:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   49794:	00800174 	movhi	r2,5
   49798:	108b2204 	addi	r2,r2,11400
   4979c:	10800017 	ldw	r2,0(r2)
   497a0:	10000726 	beq	r2,zero,497c0 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   497a4:	00800174 	movhi	r2,5
   497a8:	108b2204 	addi	r2,r2,11400
   497ac:	10800017 	ldw	r2,0(r2)
   497b0:	10c00117 	ldw	r3,4(r2)
   497b4:	00800174 	movhi	r2,5
   497b8:	108b2204 	addi	r2,r2,11400
   497bc:	10c00015 	stw	r3,0(r2)
   497c0:	e0bffb17 	ldw	r2,-20(fp)
   497c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   497c8:	e0bffe17 	ldw	r2,-8(fp)
   497cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   497d0:	e0bffc17 	ldw	r2,-16(fp)
   497d4:	10000f26 	beq	r2,zero,49814 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   497d8:	e0bffc17 	ldw	r2,-16(fp)
   497dc:	00c000c4 	movi	r3,3
   497e0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   497e4:	e0bffc17 	ldw	r2,-16(fp)
   497e8:	e0ffff0b 	ldhu	r3,-4(fp)
   497ec:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   497f0:	e0bffc17 	ldw	r2,-16(fp)
   497f4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   497f8:	e0bffc17 	ldw	r2,-16(fp)
   497fc:	00c00fc4 	movi	r3,63
   49800:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   49804:	e0bffc17 	ldw	r2,-16(fp)
   49808:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   4980c:	e13ffc17 	ldw	r4,-16(fp)
   49810:	00457f40 	call	457f4 <OS_EventWaitListInit>
    }
    return (pevent);
   49814:	e0bffc17 	ldw	r2,-16(fp)
}
   49818:	e037883a 	mov	sp,fp
   4981c:	dfc00117 	ldw	ra,4(sp)
   49820:	df000017 	ldw	fp,0(sp)
   49824:	dec00204 	addi	sp,sp,8
   49828:	f800283a 	ret

0004982c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   4982c:	defff304 	addi	sp,sp,-52
   49830:	dfc00c15 	stw	ra,48(sp)
   49834:	df000b15 	stw	fp,44(sp)
   49838:	df000b04 	addi	fp,sp,44
   4983c:	e13ffd15 	stw	r4,-12(fp)
   49840:	2805883a 	mov	r2,r5
   49844:	e1bfff15 	stw	r6,-4(fp)
   49848:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   4984c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   49850:	e0bfff17 	ldw	r2,-4(fp)
   49854:	1000021e 	bne	r2,zero,49860 <OSSemDel+0x34>
        return (pevent);
   49858:	e0bffd17 	ldw	r2,-12(fp)
   4985c:	00008806 	br	49a80 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   49860:	e0bffd17 	ldw	r2,-12(fp)
   49864:	1000051e 	bne	r2,zero,4987c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   49868:	e0bfff17 	ldw	r2,-4(fp)
   4986c:	00c00104 	movi	r3,4
   49870:	10c00005 	stb	r3,0(r2)
        return (pevent);
   49874:	e0bffd17 	ldw	r2,-12(fp)
   49878:	00008106 	br	49a80 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   4987c:	e0bffd17 	ldw	r2,-12(fp)
   49880:	10800003 	ldbu	r2,0(r2)
   49884:	10803fcc 	andi	r2,r2,255
   49888:	108000e0 	cmpeqi	r2,r2,3
   4988c:	1000051e 	bne	r2,zero,498a4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   49890:	e0bfff17 	ldw	r2,-4(fp)
   49894:	00c00044 	movi	r3,1
   49898:	10c00005 	stb	r3,0(r2)
        return (pevent);
   4989c:	e0bffd17 	ldw	r2,-12(fp)
   498a0:	00007706 	br	49a80 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   498a4:	00800174 	movhi	r2,5
   498a8:	108b2304 	addi	r2,r2,11404
   498ac:	10800003 	ldbu	r2,0(r2)
   498b0:	10803fcc 	andi	r2,r2,255
   498b4:	10000526 	beq	r2,zero,498cc <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   498b8:	e0bfff17 	ldw	r2,-4(fp)
   498bc:	00c003c4 	movi	r3,15
   498c0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   498c4:	e0bffd17 	ldw	r2,-12(fp)
   498c8:	00006d06 	br	49a80 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   498cc:	0005303a 	rdctl	r2,status
   498d0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   498d4:	e0fff817 	ldw	r3,-32(fp)
   498d8:	00bfff84 	movi	r2,-2
   498dc:	1884703a 	and	r2,r3,r2
   498e0:	1001703a 	wrctl	status,r2
  
  return context;
   498e4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   498e8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   498ec:	e0bffd17 	ldw	r2,-12(fp)
   498f0:	10800283 	ldbu	r2,10(r2)
   498f4:	10803fcc 	andi	r2,r2,255
   498f8:	10000326 	beq	r2,zero,49908 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   498fc:	00800044 	movi	r2,1
   49900:	e0bff505 	stb	r2,-44(fp)
   49904:	00000106 	br	4990c <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   49908:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   4990c:	e0bffe03 	ldbu	r2,-8(fp)
   49910:	10000326 	beq	r2,zero,49920 <OSSemDel+0xf4>
   49914:	10800060 	cmpeqi	r2,r2,1
   49918:	10002c1e 	bne	r2,zero,499cc <OSSemDel+0x1a0>
   4991c:	00004d06 	br	49a54 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   49920:	e0bff503 	ldbu	r2,-44(fp)
   49924:	10001a1e 	bne	r2,zero,49990 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   49928:	e0bffd17 	ldw	r2,-12(fp)
   4992c:	00c00fc4 	movi	r3,63
   49930:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   49934:	e0bffd17 	ldw	r2,-12(fp)
   49938:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   4993c:	e0bffd17 	ldw	r2,-12(fp)
   49940:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   49944:	00800174 	movhi	r2,5
   49948:	108b2204 	addi	r2,r2,11400
   4994c:	10c00017 	ldw	r3,0(r2)
   49950:	e0bffd17 	ldw	r2,-12(fp)
   49954:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   49958:	e0bffd17 	ldw	r2,-12(fp)
   4995c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   49960:	00800174 	movhi	r2,5
   49964:	108b2204 	addi	r2,r2,11400
   49968:	e0fffd17 	ldw	r3,-12(fp)
   4996c:	10c00015 	stw	r3,0(r2)
   49970:	e0bff717 	ldw	r2,-36(fp)
   49974:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49978:	e0bff917 	ldw	r2,-28(fp)
   4997c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   49980:	e0bfff17 	ldw	r2,-4(fp)
   49984:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   49988:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   4998c:	00003b06 	br	49a7c <OSSemDel+0x250>
   49990:	e0bff717 	ldw	r2,-36(fp)
   49994:	e0bffa15 	stw	r2,-24(fp)
   49998:	e0bffa17 	ldw	r2,-24(fp)
   4999c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   499a0:	e0bfff17 	ldw	r2,-4(fp)
   499a4:	00c01244 	movi	r3,73
   499a8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   499ac:	e0bffd17 	ldw	r2,-12(fp)
   499b0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   499b4:	00003106 	br	49a7c <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   499b8:	e13ffd17 	ldw	r4,-12(fp)
   499bc:	000b883a 	mov	r5,zero
   499c0:	01800044 	movi	r6,1
   499c4:	000f883a 	mov	r7,zero
   499c8:	00452540 	call	45254 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   499cc:	e0bffd17 	ldw	r2,-12(fp)
   499d0:	10800283 	ldbu	r2,10(r2)
   499d4:	10803fcc 	andi	r2,r2,255
   499d8:	103ff71e 	bne	r2,zero,499b8 <__alt_data_end+0xfffd3e58>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   499dc:	e0bffd17 	ldw	r2,-12(fp)
   499e0:	00c00fc4 	movi	r3,63
   499e4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   499e8:	e0bffd17 	ldw	r2,-12(fp)
   499ec:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   499f0:	e0bffd17 	ldw	r2,-12(fp)
   499f4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   499f8:	00800174 	movhi	r2,5
   499fc:	108b2204 	addi	r2,r2,11400
   49a00:	10c00017 	ldw	r3,0(r2)
   49a04:	e0bffd17 	ldw	r2,-12(fp)
   49a08:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   49a0c:	e0bffd17 	ldw	r2,-12(fp)
   49a10:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   49a14:	00800174 	movhi	r2,5
   49a18:	108b2204 	addi	r2,r2,11400
   49a1c:	e0fffd17 	ldw	r3,-12(fp)
   49a20:	10c00015 	stw	r3,0(r2)
   49a24:	e0bff717 	ldw	r2,-36(fp)
   49a28:	e0bffb15 	stw	r2,-20(fp)
   49a2c:	e0bffb17 	ldw	r2,-20(fp)
   49a30:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   49a34:	e0bff503 	ldbu	r2,-44(fp)
   49a38:	10800058 	cmpnei	r2,r2,1
   49a3c:	1000011e 	bne	r2,zero,49a44 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   49a40:	0045c6c0 	call	45c6c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   49a44:	e0bfff17 	ldw	r2,-4(fp)
   49a48:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   49a4c:	e03ff615 	stw	zero,-40(fp)
             break;
   49a50:	00000a06 	br	49a7c <OSSemDel+0x250>
   49a54:	e0bff717 	ldw	r2,-36(fp)
   49a58:	e0bffc15 	stw	r2,-16(fp)
   49a5c:	e0bffc17 	ldw	r2,-16(fp)
   49a60:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   49a64:	e0bfff17 	ldw	r2,-4(fp)
   49a68:	00c001c4 	movi	r3,7
   49a6c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   49a70:	e0bffd17 	ldw	r2,-12(fp)
   49a74:	e0bff615 	stw	r2,-40(fp)
             break;
   49a78:	0001883a 	nop
    }
    return (pevent_return);
   49a7c:	e0bff617 	ldw	r2,-40(fp)
}
   49a80:	e037883a 	mov	sp,fp
   49a84:	dfc00117 	ldw	ra,4(sp)
   49a88:	df000017 	ldw	fp,0(sp)
   49a8c:	dec00204 	addi	sp,sp,8
   49a90:	f800283a 	ret

00049a94 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   49a94:	defff504 	addi	sp,sp,-44
   49a98:	dfc00a15 	stw	ra,40(sp)
   49a9c:	df000915 	stw	fp,36(sp)
   49aa0:	df000904 	addi	fp,sp,36
   49aa4:	e13ffd15 	stw	r4,-12(fp)
   49aa8:	2805883a 	mov	r2,r5
   49aac:	e1bfff15 	stw	r6,-4(fp)
   49ab0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   49ab4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   49ab8:	e0bfff17 	ldw	r2,-4(fp)
   49abc:	1000011e 	bne	r2,zero,49ac4 <OSSemPend+0x30>
        return;
   49ac0:	00008906 	br	49ce8 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   49ac4:	e0bffd17 	ldw	r2,-12(fp)
   49ac8:	1000041e 	bne	r2,zero,49adc <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   49acc:	e0bfff17 	ldw	r2,-4(fp)
   49ad0:	00c00104 	movi	r3,4
   49ad4:	10c00005 	stb	r3,0(r2)
        return;
   49ad8:	00008306 	br	49ce8 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   49adc:	e0bffd17 	ldw	r2,-12(fp)
   49ae0:	10800003 	ldbu	r2,0(r2)
   49ae4:	10803fcc 	andi	r2,r2,255
   49ae8:	108000e0 	cmpeqi	r2,r2,3
   49aec:	1000041e 	bne	r2,zero,49b00 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   49af0:	e0bfff17 	ldw	r2,-4(fp)
   49af4:	00c00044 	movi	r3,1
   49af8:	10c00005 	stb	r3,0(r2)
        return;
   49afc:	00007a06 	br	49ce8 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   49b00:	00800174 	movhi	r2,5
   49b04:	108b2304 	addi	r2,r2,11404
   49b08:	10800003 	ldbu	r2,0(r2)
   49b0c:	10803fcc 	andi	r2,r2,255
   49b10:	10000426 	beq	r2,zero,49b24 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   49b14:	e0bfff17 	ldw	r2,-4(fp)
   49b18:	00c00084 	movi	r3,2
   49b1c:	10c00005 	stb	r3,0(r2)
        return;
   49b20:	00007106 	br	49ce8 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   49b24:	00800174 	movhi	r2,5
   49b28:	108b1504 	addi	r2,r2,11348
   49b2c:	10800003 	ldbu	r2,0(r2)
   49b30:	10803fcc 	andi	r2,r2,255
   49b34:	10000426 	beq	r2,zero,49b48 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   49b38:	e0bfff17 	ldw	r2,-4(fp)
   49b3c:	00c00344 	movi	r3,13
   49b40:	10c00005 	stb	r3,0(r2)
        return;
   49b44:	00006806 	br	49ce8 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49b48:	0005303a 	rdctl	r2,status
   49b4c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49b50:	e0fff817 	ldw	r3,-32(fp)
   49b54:	00bfff84 	movi	r2,-2
   49b58:	1884703a 	and	r2,r3,r2
   49b5c:	1001703a 	wrctl	status,r2
  
  return context;
   49b60:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   49b64:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   49b68:	e0bffd17 	ldw	r2,-12(fp)
   49b6c:	1080020b 	ldhu	r2,8(r2)
   49b70:	10bfffcc 	andi	r2,r2,65535
   49b74:	10000d26 	beq	r2,zero,49bac <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   49b78:	e0bffd17 	ldw	r2,-12(fp)
   49b7c:	1080020b 	ldhu	r2,8(r2)
   49b80:	10bfffc4 	addi	r2,r2,-1
   49b84:	1007883a 	mov	r3,r2
   49b88:	e0bffd17 	ldw	r2,-12(fp)
   49b8c:	10c0020d 	sth	r3,8(r2)
   49b90:	e0bff717 	ldw	r2,-36(fp)
   49b94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49b98:	e0bff917 	ldw	r2,-28(fp)
   49b9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   49ba0:	e0bfff17 	ldw	r2,-4(fp)
   49ba4:	10000005 	stb	zero,0(r2)
        return;
   49ba8:	00004f06 	br	49ce8 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   49bac:	00800174 	movhi	r2,5
   49bb0:	108b2404 	addi	r2,r2,11408
   49bb4:	10c00017 	ldw	r3,0(r2)
   49bb8:	00800174 	movhi	r2,5
   49bbc:	108b2404 	addi	r2,r2,11408
   49bc0:	10800017 	ldw	r2,0(r2)
   49bc4:	10800c03 	ldbu	r2,48(r2)
   49bc8:	10800054 	ori	r2,r2,1
   49bcc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   49bd0:	00800174 	movhi	r2,5
   49bd4:	108b2404 	addi	r2,r2,11408
   49bd8:	10800017 	ldw	r2,0(r2)
   49bdc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   49be0:	00800174 	movhi	r2,5
   49be4:	108b2404 	addi	r2,r2,11408
   49be8:	10800017 	ldw	r2,0(r2)
   49bec:	e0fffe0b 	ldhu	r3,-8(fp)
   49bf0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   49bf4:	e13ffd17 	ldw	r4,-12(fp)
   49bf8:	00453ec0 	call	453ec <OS_EventTaskWait>
   49bfc:	e0bff717 	ldw	r2,-36(fp)
   49c00:	e0bffa15 	stw	r2,-24(fp)
   49c04:	e0bffa17 	ldw	r2,-24(fp)
   49c08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   49c0c:	0045c6c0 	call	45c6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49c10:	0005303a 	rdctl	r2,status
   49c14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49c18:	e0fffb17 	ldw	r3,-20(fp)
   49c1c:	00bfff84 	movi	r2,-2
   49c20:	1884703a 	and	r2,r3,r2
   49c24:	1001703a 	wrctl	status,r2
  
  return context;
   49c28:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   49c2c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   49c30:	00800174 	movhi	r2,5
   49c34:	108b2404 	addi	r2,r2,11408
   49c38:	10800017 	ldw	r2,0(r2)
   49c3c:	10800c43 	ldbu	r2,49(r2)
   49c40:	10803fcc 	andi	r2,r2,255
   49c44:	10000326 	beq	r2,zero,49c54 <OSSemPend+0x1c0>
   49c48:	108000a0 	cmpeqi	r2,r2,2
   49c4c:	1000041e 	bne	r2,zero,49c60 <OSSemPend+0x1cc>
   49c50:	00000706 	br	49c70 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   49c54:	e0bfff17 	ldw	r2,-4(fp)
   49c58:	10000005 	stb	zero,0(r2)
             break;
   49c5c:	00000e06 	br	49c98 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   49c60:	e0bfff17 	ldw	r2,-4(fp)
   49c64:	00c00384 	movi	r3,14
   49c68:	10c00005 	stb	r3,0(r2)
             break;
   49c6c:	00000a06 	br	49c98 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   49c70:	00800174 	movhi	r2,5
   49c74:	108b2404 	addi	r2,r2,11408
   49c78:	10800017 	ldw	r2,0(r2)
   49c7c:	1009883a 	mov	r4,r2
   49c80:	e17ffd17 	ldw	r5,-12(fp)
   49c84:	00456440 	call	45644 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   49c88:	e0bfff17 	ldw	r2,-4(fp)
   49c8c:	00c00284 	movi	r3,10
   49c90:	10c00005 	stb	r3,0(r2)
             break;
   49c94:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   49c98:	00800174 	movhi	r2,5
   49c9c:	108b2404 	addi	r2,r2,11408
   49ca0:	10800017 	ldw	r2,0(r2)
   49ca4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   49ca8:	00800174 	movhi	r2,5
   49cac:	108b2404 	addi	r2,r2,11408
   49cb0:	10800017 	ldw	r2,0(r2)
   49cb4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   49cb8:	00800174 	movhi	r2,5
   49cbc:	108b2404 	addi	r2,r2,11408
   49cc0:	10800017 	ldw	r2,0(r2)
   49cc4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   49cc8:	00800174 	movhi	r2,5
   49ccc:	108b2404 	addi	r2,r2,11408
   49cd0:	10800017 	ldw	r2,0(r2)
   49cd4:	10000815 	stw	zero,32(r2)
   49cd8:	e0bff717 	ldw	r2,-36(fp)
   49cdc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49ce0:	e0bffc17 	ldw	r2,-16(fp)
   49ce4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   49ce8:	e037883a 	mov	sp,fp
   49cec:	dfc00117 	ldw	ra,4(sp)
   49cf0:	df000017 	ldw	fp,0(sp)
   49cf4:	dec00204 	addi	sp,sp,8
   49cf8:	f800283a 	ret

00049cfc <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   49cfc:	defff604 	addi	sp,sp,-40
   49d00:	dfc00915 	stw	ra,36(sp)
   49d04:	df000815 	stw	fp,32(sp)
   49d08:	df000804 	addi	fp,sp,32
   49d0c:	e13ffd15 	stw	r4,-12(fp)
   49d10:	2805883a 	mov	r2,r5
   49d14:	e1bfff15 	stw	r6,-4(fp)
   49d18:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   49d1c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   49d20:	e0bfff17 	ldw	r2,-4(fp)
   49d24:	1000021e 	bne	r2,zero,49d30 <OSSemPendAbort+0x34>
        return (0);
   49d28:	0005883a 	mov	r2,zero
   49d2c:	00004906 	br	49e54 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   49d30:	e0bffd17 	ldw	r2,-12(fp)
   49d34:	1000051e 	bne	r2,zero,49d4c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   49d38:	e0bfff17 	ldw	r2,-4(fp)
   49d3c:	00c00104 	movi	r3,4
   49d40:	10c00005 	stb	r3,0(r2)
        return (0);
   49d44:	0005883a 	mov	r2,zero
   49d48:	00004206 	br	49e54 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   49d4c:	e0bffd17 	ldw	r2,-12(fp)
   49d50:	10800003 	ldbu	r2,0(r2)
   49d54:	10803fcc 	andi	r2,r2,255
   49d58:	108000e0 	cmpeqi	r2,r2,3
   49d5c:	1000051e 	bne	r2,zero,49d74 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   49d60:	e0bfff17 	ldw	r2,-4(fp)
   49d64:	00c00044 	movi	r3,1
   49d68:	10c00005 	stb	r3,0(r2)
        return (0);
   49d6c:	0005883a 	mov	r2,zero
   49d70:	00003806 	br	49e54 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49d74:	0005303a 	rdctl	r2,status
   49d78:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49d7c:	e0fffa17 	ldw	r3,-24(fp)
   49d80:	00bfff84 	movi	r2,-2
   49d84:	1884703a 	and	r2,r3,r2
   49d88:	1001703a 	wrctl	status,r2
  
  return context;
   49d8c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   49d90:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   49d94:	e0bffd17 	ldw	r2,-12(fp)
   49d98:	10800283 	ldbu	r2,10(r2)
   49d9c:	10803fcc 	andi	r2,r2,255
   49da0:	10002526 	beq	r2,zero,49e38 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   49da4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   49da8:	e0bffe03 	ldbu	r2,-8(fp)
   49dac:	10800060 	cmpeqi	r2,r2,1
   49db0:	10000e26 	beq	r2,zero,49dec <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   49db4:	00000806 	br	49dd8 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   49db8:	e13ffd17 	ldw	r4,-12(fp)
   49dbc:	000b883a 	mov	r5,zero
   49dc0:	01800044 	movi	r6,1
   49dc4:	01c00084 	movi	r7,2
   49dc8:	00452540 	call	45254 <OS_EventTaskRdy>
                     nbr_tasks++;
   49dcc:	e0bff803 	ldbu	r2,-32(fp)
   49dd0:	10800044 	addi	r2,r2,1
   49dd4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   49dd8:	e0bffd17 	ldw	r2,-12(fp)
   49ddc:	10800283 	ldbu	r2,10(r2)
   49de0:	10803fcc 	andi	r2,r2,255
   49de4:	103ff41e 	bne	r2,zero,49db8 <__alt_data_end+0xfffd4258>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   49de8:	00000906 	br	49e10 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   49dec:	e13ffd17 	ldw	r4,-12(fp)
   49df0:	000b883a 	mov	r5,zero
   49df4:	01800044 	movi	r6,1
   49df8:	01c00084 	movi	r7,2
   49dfc:	00452540 	call	45254 <OS_EventTaskRdy>
                 nbr_tasks++;
   49e00:	e0bff803 	ldbu	r2,-32(fp)
   49e04:	10800044 	addi	r2,r2,1
   49e08:	e0bff805 	stb	r2,-32(fp)
                 break;
   49e0c:	0001883a 	nop
   49e10:	e0bff917 	ldw	r2,-28(fp)
   49e14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49e18:	e0bffb17 	ldw	r2,-20(fp)
   49e1c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   49e20:	0045c6c0 	call	45c6c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   49e24:	e0bfff17 	ldw	r2,-4(fp)
   49e28:	00c00384 	movi	r3,14
   49e2c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   49e30:	e0bff803 	ldbu	r2,-32(fp)
   49e34:	00000706 	br	49e54 <OSSemPendAbort+0x158>
   49e38:	e0bff917 	ldw	r2,-28(fp)
   49e3c:	e0bffc15 	stw	r2,-16(fp)
   49e40:	e0bffc17 	ldw	r2,-16(fp)
   49e44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   49e48:	e0bfff17 	ldw	r2,-4(fp)
   49e4c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   49e50:	0005883a 	mov	r2,zero
}
   49e54:	e037883a 	mov	sp,fp
   49e58:	dfc00117 	ldw	ra,4(sp)
   49e5c:	df000017 	ldw	fp,0(sp)
   49e60:	dec00204 	addi	sp,sp,8
   49e64:	f800283a 	ret

00049e68 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   49e68:	defff804 	addi	sp,sp,-32
   49e6c:	dfc00715 	stw	ra,28(sp)
   49e70:	df000615 	stw	fp,24(sp)
   49e74:	df000604 	addi	fp,sp,24
   49e78:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   49e7c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   49e80:	e0bfff17 	ldw	r2,-4(fp)
   49e84:	1000021e 	bne	r2,zero,49e90 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   49e88:	00800104 	movi	r2,4
   49e8c:	00003506 	br	49f64 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   49e90:	e0bfff17 	ldw	r2,-4(fp)
   49e94:	10800003 	ldbu	r2,0(r2)
   49e98:	10803fcc 	andi	r2,r2,255
   49e9c:	108000e0 	cmpeqi	r2,r2,3
   49ea0:	1000021e 	bne	r2,zero,49eac <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   49ea4:	00800044 	movi	r2,1
   49ea8:	00002e06 	br	49f64 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49eac:	0005303a 	rdctl	r2,status
   49eb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49eb4:	e0fffb17 	ldw	r3,-20(fp)
   49eb8:	00bfff84 	movi	r2,-2
   49ebc:	1884703a 	and	r2,r3,r2
   49ec0:	1001703a 	wrctl	status,r2
  
  return context;
   49ec4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   49ec8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   49ecc:	e0bfff17 	ldw	r2,-4(fp)
   49ed0:	10800283 	ldbu	r2,10(r2)
   49ed4:	10803fcc 	andi	r2,r2,255
   49ed8:	10000c26 	beq	r2,zero,49f0c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   49edc:	e13fff17 	ldw	r4,-4(fp)
   49ee0:	000b883a 	mov	r5,zero
   49ee4:	01800044 	movi	r6,1
   49ee8:	000f883a 	mov	r7,zero
   49eec:	00452540 	call	45254 <OS_EventTaskRdy>
   49ef0:	e0bffa17 	ldw	r2,-24(fp)
   49ef4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49ef8:	e0bffc17 	ldw	r2,-16(fp)
   49efc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   49f00:	0045c6c0 	call	45c6c <OS_Sched>
        return (OS_ERR_NONE);
   49f04:	0005883a 	mov	r2,zero
   49f08:	00001606 	br	49f64 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   49f0c:	e0bfff17 	ldw	r2,-4(fp)
   49f10:	1080020b 	ldhu	r2,8(r2)
   49f14:	10ffffcc 	andi	r3,r2,65535
   49f18:	00bfffd4 	movui	r2,65535
   49f1c:	18800c26 	beq	r3,r2,49f50 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   49f20:	e0bfff17 	ldw	r2,-4(fp)
   49f24:	1080020b 	ldhu	r2,8(r2)
   49f28:	10800044 	addi	r2,r2,1
   49f2c:	1007883a 	mov	r3,r2
   49f30:	e0bfff17 	ldw	r2,-4(fp)
   49f34:	10c0020d 	sth	r3,8(r2)
   49f38:	e0bffa17 	ldw	r2,-24(fp)
   49f3c:	e0bffd15 	stw	r2,-12(fp)
   49f40:	e0bffd17 	ldw	r2,-12(fp)
   49f44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   49f48:	0005883a 	mov	r2,zero
   49f4c:	00000506 	br	49f64 <OSSemPost+0xfc>
   49f50:	e0bffa17 	ldw	r2,-24(fp)
   49f54:	e0bffe15 	stw	r2,-8(fp)
   49f58:	e0bffe17 	ldw	r2,-8(fp)
   49f5c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   49f60:	00800c84 	movi	r2,50
}
   49f64:	e037883a 	mov	sp,fp
   49f68:	dfc00117 	ldw	ra,4(sp)
   49f6c:	df000017 	ldw	fp,0(sp)
   49f70:	dec00204 	addi	sp,sp,8
   49f74:	f800283a 	ret

00049f78 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   49f78:	defff704 	addi	sp,sp,-36
   49f7c:	df000815 	stw	fp,32(sp)
   49f80:	df000804 	addi	fp,sp,32
   49f84:	e13ffe15 	stw	r4,-8(fp)
   49f88:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   49f8c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   49f90:	e0bffe17 	ldw	r2,-8(fp)
   49f94:	1000021e 	bne	r2,zero,49fa0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   49f98:	00800104 	movi	r2,4
   49f9c:	00003606 	br	4a078 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   49fa0:	e0bfff17 	ldw	r2,-4(fp)
   49fa4:	1000021e 	bne	r2,zero,49fb0 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   49fa8:	00800244 	movi	r2,9
   49fac:	00003206 	br	4a078 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   49fb0:	e0bffe17 	ldw	r2,-8(fp)
   49fb4:	10800003 	ldbu	r2,0(r2)
   49fb8:	10803fcc 	andi	r2,r2,255
   49fbc:	108000e0 	cmpeqi	r2,r2,3
   49fc0:	1000021e 	bne	r2,zero,49fcc <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   49fc4:	00800044 	movi	r2,1
   49fc8:	00002b06 	br	4a078 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49fcc:	0005303a 	rdctl	r2,status
   49fd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49fd4:	e0fffc17 	ldw	r3,-16(fp)
   49fd8:	00bfff84 	movi	r2,-2
   49fdc:	1884703a 	and	r2,r3,r2
   49fe0:	1001703a 	wrctl	status,r2
  
  return context;
   49fe4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   49fe8:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   49fec:	e0bffe17 	ldw	r2,-8(fp)
   49ff0:	10c00283 	ldbu	r3,10(r2)
   49ff4:	e0bfff17 	ldw	r2,-4(fp)
   49ff8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   49ffc:	e0bffe17 	ldw	r2,-8(fp)
   4a000:	108002c4 	addi	r2,r2,11
   4a004:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   4a008:	e0bfff17 	ldw	r2,-4(fp)
   4a00c:	10800084 	addi	r2,r2,2
   4a010:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   4a014:	e03ffa05 	stb	zero,-24(fp)
   4a018:	00000b06 	br	4a048 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   4a01c:	e0bff917 	ldw	r2,-28(fp)
   4a020:	10c00044 	addi	r3,r2,1
   4a024:	e0fff915 	stw	r3,-28(fp)
   4a028:	e0fff817 	ldw	r3,-32(fp)
   4a02c:	19000044 	addi	r4,r3,1
   4a030:	e13ff815 	stw	r4,-32(fp)
   4a034:	18c00003 	ldbu	r3,0(r3)
   4a038:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   4a03c:	e0bffa03 	ldbu	r2,-24(fp)
   4a040:	10800044 	addi	r2,r2,1
   4a044:	e0bffa05 	stb	r2,-24(fp)
   4a048:	e0bffa03 	ldbu	r2,-24(fp)
   4a04c:	108000f0 	cmpltui	r2,r2,3
   4a050:	103ff21e 	bne	r2,zero,4a01c <__alt_data_end+0xfffd44bc>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   4a054:	e0bffe17 	ldw	r2,-8(fp)
   4a058:	10c0020b 	ldhu	r3,8(r2)
   4a05c:	e0bfff17 	ldw	r2,-4(fp)
   4a060:	10c0000d 	sth	r3,0(r2)
   4a064:	e0bffb17 	ldw	r2,-20(fp)
   4a068:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a06c:	e0bffd17 	ldw	r2,-12(fp)
   4a070:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   4a074:	0005883a 	mov	r2,zero
}
   4a078:	e037883a 	mov	sp,fp
   4a07c:	df000017 	ldw	fp,0(sp)
   4a080:	dec00104 	addi	sp,sp,4
   4a084:	f800283a 	ret

0004a088 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   4a088:	defff904 	addi	sp,sp,-28
   4a08c:	df000615 	stw	fp,24(sp)
   4a090:	df000604 	addi	fp,sp,24
   4a094:	e13ffd15 	stw	r4,-12(fp)
   4a098:	2805883a 	mov	r2,r5
   4a09c:	e1bfff15 	stw	r6,-4(fp)
   4a0a0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   4a0a4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   4a0a8:	e0bfff17 	ldw	r2,-4(fp)
   4a0ac:	1000011e 	bne	r2,zero,4a0b4 <OSSemSet+0x2c>
        return;
   4a0b0:	00003006 	br	4a174 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   4a0b4:	e0bffd17 	ldw	r2,-12(fp)
   4a0b8:	1000041e 	bne	r2,zero,4a0cc <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   4a0bc:	e0bfff17 	ldw	r2,-4(fp)
   4a0c0:	00c00104 	movi	r3,4
   4a0c4:	10c00005 	stb	r3,0(r2)
        return;
   4a0c8:	00002a06 	br	4a174 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   4a0cc:	e0bffd17 	ldw	r2,-12(fp)
   4a0d0:	10800003 	ldbu	r2,0(r2)
   4a0d4:	10803fcc 	andi	r2,r2,255
   4a0d8:	108000e0 	cmpeqi	r2,r2,3
   4a0dc:	1000041e 	bne	r2,zero,4a0f0 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   4a0e0:	e0bfff17 	ldw	r2,-4(fp)
   4a0e4:	00c00044 	movi	r3,1
   4a0e8:	10c00005 	stb	r3,0(r2)
        return;
   4a0ec:	00002106 	br	4a174 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a0f0:	0005303a 	rdctl	r2,status
   4a0f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a0f8:	e0fffb17 	ldw	r3,-20(fp)
   4a0fc:	00bfff84 	movi	r2,-2
   4a100:	1884703a 	and	r2,r3,r2
   4a104:	1001703a 	wrctl	status,r2
  
  return context;
   4a108:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   4a10c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   4a110:	e0bfff17 	ldw	r2,-4(fp)
   4a114:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   4a118:	e0bffd17 	ldw	r2,-12(fp)
   4a11c:	1080020b 	ldhu	r2,8(r2)
   4a120:	10bfffcc 	andi	r2,r2,65535
   4a124:	10000426 	beq	r2,zero,4a138 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   4a128:	e0bffd17 	ldw	r2,-12(fp)
   4a12c:	e0fffe0b 	ldhu	r3,-8(fp)
   4a130:	10c0020d 	sth	r3,8(r2)
   4a134:	00000b06 	br	4a164 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   4a138:	e0bffd17 	ldw	r2,-12(fp)
   4a13c:	10800283 	ldbu	r2,10(r2)
   4a140:	10803fcc 	andi	r2,r2,255
   4a144:	1000041e 	bne	r2,zero,4a158 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   4a148:	e0bffd17 	ldw	r2,-12(fp)
   4a14c:	e0fffe0b 	ldhu	r3,-8(fp)
   4a150:	10c0020d 	sth	r3,8(r2)
   4a154:	00000306 	br	4a164 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   4a158:	e0bfff17 	ldw	r2,-4(fp)
   4a15c:	00c01244 	movi	r3,73
   4a160:	10c00005 	stb	r3,0(r2)
   4a164:	e0bffa17 	ldw	r2,-24(fp)
   4a168:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a16c:	e0bffc17 	ldw	r2,-16(fp)
   4a170:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   4a174:	e037883a 	mov	sp,fp
   4a178:	df000017 	ldw	fp,0(sp)
   4a17c:	dec00104 	addi	sp,sp,4
   4a180:	f800283a 	ret

0004a184 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   4a184:	defff104 	addi	sp,sp,-60
   4a188:	dfc00e15 	stw	ra,56(sp)
   4a18c:	df000d15 	stw	fp,52(sp)
   4a190:	df000d04 	addi	fp,sp,52
   4a194:	2007883a 	mov	r3,r4
   4a198:	2805883a 	mov	r2,r5
   4a19c:	e0fffe05 	stb	r3,-8(fp)
   4a1a0:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   4a1a4:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   4a1a8:	e0bffe03 	ldbu	r2,-8(fp)
   4a1ac:	10800530 	cmpltui	r2,r2,20
   4a1b0:	1000051e 	bne	r2,zero,4a1c8 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   4a1b4:	e0bffe03 	ldbu	r2,-8(fp)
   4a1b8:	10803fe0 	cmpeqi	r2,r2,255
   4a1bc:	1000021e 	bne	r2,zero,4a1c8 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   4a1c0:	00800a84 	movi	r2,42
   4a1c4:	00013a06 	br	4a6b0 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   4a1c8:	e0bfff03 	ldbu	r2,-4(fp)
   4a1cc:	10800530 	cmpltui	r2,r2,20
   4a1d0:	1000021e 	bne	r2,zero,4a1dc <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   4a1d4:	00800a84 	movi	r2,42
   4a1d8:	00013506 	br	4a6b0 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a1dc:	0005303a 	rdctl	r2,status
   4a1e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a1e4:	e0fff917 	ldw	r3,-28(fp)
   4a1e8:	00bfff84 	movi	r2,-2
   4a1ec:	1884703a 	and	r2,r3,r2
   4a1f0:	1001703a 	wrctl	status,r2
  
  return context;
   4a1f4:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   4a1f8:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   4a1fc:	e0ffff03 	ldbu	r3,-4(fp)
   4a200:	008001b4 	movhi	r2,6
   4a204:	10afab04 	addi	r2,r2,-16724
   4a208:	18c7883a 	add	r3,r3,r3
   4a20c:	18c7883a 	add	r3,r3,r3
   4a210:	10c5883a 	add	r2,r2,r3
   4a214:	10800017 	ldw	r2,0(r2)
   4a218:	10000626 	beq	r2,zero,4a234 <OSTaskChangePrio+0xb0>
   4a21c:	e0bff517 	ldw	r2,-44(fp)
   4a220:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a224:	e0bffa17 	ldw	r2,-24(fp)
   4a228:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   4a22c:	00800a04 	movi	r2,40
   4a230:	00011f06 	br	4a6b0 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   4a234:	e0bffe03 	ldbu	r2,-8(fp)
   4a238:	10803fd8 	cmpnei	r2,r2,255
   4a23c:	1000051e 	bne	r2,zero,4a254 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   4a240:	00800174 	movhi	r2,5
   4a244:	108b2404 	addi	r2,r2,11408
   4a248:	10800017 	ldw	r2,0(r2)
   4a24c:	10800c83 	ldbu	r2,50(r2)
   4a250:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   4a254:	e0fffe03 	ldbu	r3,-8(fp)
   4a258:	008001b4 	movhi	r2,6
   4a25c:	10afab04 	addi	r2,r2,-16724
   4a260:	18c7883a 	add	r3,r3,r3
   4a264:	18c7883a 	add	r3,r3,r3
   4a268:	10c5883a 	add	r2,r2,r3
   4a26c:	10800017 	ldw	r2,0(r2)
   4a270:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   4a274:	e0bff617 	ldw	r2,-40(fp)
   4a278:	1000061e 	bne	r2,zero,4a294 <OSTaskChangePrio+0x110>
   4a27c:	e0bff517 	ldw	r2,-44(fp)
   4a280:	e0bffb15 	stw	r2,-20(fp)
   4a284:	e0bffb17 	ldw	r2,-20(fp)
   4a288:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   4a28c:	00800a44 	movi	r2,41
   4a290:	00010706 	br	4a6b0 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   4a294:	e0bff617 	ldw	r2,-40(fp)
   4a298:	10800058 	cmpnei	r2,r2,1
   4a29c:	1000061e 	bne	r2,zero,4a2b8 <OSTaskChangePrio+0x134>
   4a2a0:	e0bff517 	ldw	r2,-44(fp)
   4a2a4:	e0bffc15 	stw	r2,-16(fp)
   4a2a8:	e0bffc17 	ldw	r2,-16(fp)
   4a2ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   4a2b0:	008010c4 	movi	r2,67
   4a2b4:	0000fe06 	br	4a6b0 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   4a2b8:	e0bfff03 	ldbu	r2,-4(fp)
   4a2bc:	1004d0fa 	srli	r2,r2,3
   4a2c0:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   4a2c4:	e0bfff03 	ldbu	r2,-4(fp)
   4a2c8:	108001cc 	andi	r2,r2,7
   4a2cc:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   4a2d0:	e0bff703 	ldbu	r2,-36(fp)
   4a2d4:	00c00044 	movi	r3,1
   4a2d8:	1884983a 	sll	r2,r3,r2
   4a2dc:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   4a2e0:	e0bff743 	ldbu	r2,-35(fp)
   4a2e4:	00c00044 	movi	r3,1
   4a2e8:	1884983a 	sll	r2,r3,r2
   4a2ec:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   4a2f0:	e0fffe03 	ldbu	r3,-8(fp)
   4a2f4:	008001b4 	movhi	r2,6
   4a2f8:	10afab04 	addi	r2,r2,-16724
   4a2fc:	18c7883a 	add	r3,r3,r3
   4a300:	18c7883a 	add	r3,r3,r3
   4a304:	10c5883a 	add	r2,r2,r3
   4a308:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   4a30c:	e0ffff03 	ldbu	r3,-4(fp)
   4a310:	008001b4 	movhi	r2,6
   4a314:	10afab04 	addi	r2,r2,-16724
   4a318:	18c7883a 	add	r3,r3,r3
   4a31c:	18c7883a 	add	r3,r3,r3
   4a320:	10c5883a 	add	r2,r2,r3
   4a324:	e0fff617 	ldw	r3,-40(fp)
   4a328:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   4a32c:	e0bff617 	ldw	r2,-40(fp)
   4a330:	10800d03 	ldbu	r2,52(r2)
   4a334:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   4a338:	e0bff617 	ldw	r2,-40(fp)
   4a33c:	10800d83 	ldbu	r2,54(r2)
   4a340:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   4a344:	e0bff617 	ldw	r2,-40(fp)
   4a348:	10800d43 	ldbu	r2,53(r2)
   4a34c:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   4a350:	e0fff803 	ldbu	r3,-32(fp)
   4a354:	00800174 	movhi	r2,5
   4a358:	108b2144 	addi	r2,r2,11397
   4a35c:	10c5883a 	add	r2,r2,r3
   4a360:	10c00003 	ldbu	r3,0(r2)
   4a364:	e0bff883 	ldbu	r2,-30(fp)
   4a368:	1884703a 	and	r2,r3,r2
   4a36c:	10803fcc 	andi	r2,r2,255
   4a370:	10003726 	beq	r2,zero,4a450 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   4a374:	e0fff803 	ldbu	r3,-32(fp)
   4a378:	e13ff803 	ldbu	r4,-32(fp)
   4a37c:	00800174 	movhi	r2,5
   4a380:	108b2144 	addi	r2,r2,11397
   4a384:	1105883a 	add	r2,r2,r4
   4a388:	10800003 	ldbu	r2,0(r2)
   4a38c:	1009883a 	mov	r4,r2
   4a390:	e0bff883 	ldbu	r2,-30(fp)
   4a394:	0084303a 	nor	r2,zero,r2
   4a398:	2084703a 	and	r2,r4,r2
   4a39c:	1009883a 	mov	r4,r2
   4a3a0:	00800174 	movhi	r2,5
   4a3a4:	108b2144 	addi	r2,r2,11397
   4a3a8:	10c5883a 	add	r2,r2,r3
   4a3ac:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   4a3b0:	e0fff803 	ldbu	r3,-32(fp)
   4a3b4:	00800174 	movhi	r2,5
   4a3b8:	108b2144 	addi	r2,r2,11397
   4a3bc:	10c5883a 	add	r2,r2,r3
   4a3c0:	10800003 	ldbu	r2,0(r2)
   4a3c4:	10803fcc 	andi	r2,r2,255
   4a3c8:	10000b1e 	bne	r2,zero,4a3f8 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   4a3cc:	e0bff843 	ldbu	r2,-31(fp)
   4a3d0:	0084303a 	nor	r2,zero,r2
   4a3d4:	1007883a 	mov	r3,r2
   4a3d8:	00800174 	movhi	r2,5
   4a3dc:	108b2104 	addi	r2,r2,11396
   4a3e0:	10800003 	ldbu	r2,0(r2)
   4a3e4:	1884703a 	and	r2,r3,r2
   4a3e8:	1007883a 	mov	r3,r2
   4a3ec:	00800174 	movhi	r2,5
   4a3f0:	108b2104 	addi	r2,r2,11396
   4a3f4:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   4a3f8:	00800174 	movhi	r2,5
   4a3fc:	108b2104 	addi	r2,r2,11396
   4a400:	10c00003 	ldbu	r3,0(r2)
   4a404:	e0bff783 	ldbu	r2,-34(fp)
   4a408:	1884b03a 	or	r2,r3,r2
   4a40c:	1007883a 	mov	r3,r2
   4a410:	00800174 	movhi	r2,5
   4a414:	108b2104 	addi	r2,r2,11396
   4a418:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   4a41c:	e0fff703 	ldbu	r3,-36(fp)
   4a420:	e13ff703 	ldbu	r4,-36(fp)
   4a424:	00800174 	movhi	r2,5
   4a428:	108b2144 	addi	r2,r2,11397
   4a42c:	1105883a 	add	r2,r2,r4
   4a430:	11000003 	ldbu	r4,0(r2)
   4a434:	e0bff7c3 	ldbu	r2,-33(fp)
   4a438:	2084b03a 	or	r2,r4,r2
   4a43c:	1009883a 	mov	r4,r2
   4a440:	00800174 	movhi	r2,5
   4a444:	108b2144 	addi	r2,r2,11397
   4a448:	10c5883a 	add	r2,r2,r3
   4a44c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   4a450:	e0bff617 	ldw	r2,-40(fp)
   4a454:	10800717 	ldw	r2,28(r2)
   4a458:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   4a45c:	e0bff317 	ldw	r2,-52(fp)
   4a460:	10003326 	beq	r2,zero,4a530 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   4a464:	e0bff803 	ldbu	r2,-32(fp)
   4a468:	e0fff803 	ldbu	r3,-32(fp)
   4a46c:	e13ff317 	ldw	r4,-52(fp)
   4a470:	20c7883a 	add	r3,r4,r3
   4a474:	18c00204 	addi	r3,r3,8
   4a478:	18c000c3 	ldbu	r3,3(r3)
   4a47c:	1809883a 	mov	r4,r3
   4a480:	e0fff883 	ldbu	r3,-30(fp)
   4a484:	00c6303a 	nor	r3,zero,r3
   4a488:	20c6703a 	and	r3,r4,r3
   4a48c:	1809883a 	mov	r4,r3
   4a490:	e0fff317 	ldw	r3,-52(fp)
   4a494:	1885883a 	add	r2,r3,r2
   4a498:	10800204 	addi	r2,r2,8
   4a49c:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   4a4a0:	e0bff803 	ldbu	r2,-32(fp)
   4a4a4:	e0fff317 	ldw	r3,-52(fp)
   4a4a8:	1885883a 	add	r2,r3,r2
   4a4ac:	10800204 	addi	r2,r2,8
   4a4b0:	108000c3 	ldbu	r2,3(r2)
   4a4b4:	10803fcc 	andi	r2,r2,255
   4a4b8:	1000091e 	bne	r2,zero,4a4e0 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   4a4bc:	e0bff317 	ldw	r2,-52(fp)
   4a4c0:	10800283 	ldbu	r2,10(r2)
   4a4c4:	1007883a 	mov	r3,r2
   4a4c8:	e0bff843 	ldbu	r2,-31(fp)
   4a4cc:	0084303a 	nor	r2,zero,r2
   4a4d0:	1884703a 	and	r2,r3,r2
   4a4d4:	1007883a 	mov	r3,r2
   4a4d8:	e0bff317 	ldw	r2,-52(fp)
   4a4dc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   4a4e0:	e0bff317 	ldw	r2,-52(fp)
   4a4e4:	10c00283 	ldbu	r3,10(r2)
   4a4e8:	e0bff783 	ldbu	r2,-34(fp)
   4a4ec:	1884b03a 	or	r2,r3,r2
   4a4f0:	1007883a 	mov	r3,r2
   4a4f4:	e0bff317 	ldw	r2,-52(fp)
   4a4f8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   4a4fc:	e0bff703 	ldbu	r2,-36(fp)
   4a500:	e0fff703 	ldbu	r3,-36(fp)
   4a504:	e13ff317 	ldw	r4,-52(fp)
   4a508:	20c7883a 	add	r3,r4,r3
   4a50c:	18c00204 	addi	r3,r3,8
   4a510:	190000c3 	ldbu	r4,3(r3)
   4a514:	e0fff7c3 	ldbu	r3,-33(fp)
   4a518:	20c6b03a 	or	r3,r4,r3
   4a51c:	1809883a 	mov	r4,r3
   4a520:	e0fff317 	ldw	r3,-52(fp)
   4a524:	1885883a 	add	r2,r3,r2
   4a528:	10800204 	addi	r2,r2,8
   4a52c:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   4a530:	e0bff617 	ldw	r2,-40(fp)
   4a534:	10800817 	ldw	r2,32(r2)
   4a538:	10004226 	beq	r2,zero,4a644 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   4a53c:	e0bff617 	ldw	r2,-40(fp)
   4a540:	10800817 	ldw	r2,32(r2)
   4a544:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   4a548:	e0bff417 	ldw	r2,-48(fp)
   4a54c:	10800017 	ldw	r2,0(r2)
   4a550:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   4a554:	00003906 	br	4a63c <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   4a558:	e0bff803 	ldbu	r2,-32(fp)
   4a55c:	e0fff803 	ldbu	r3,-32(fp)
   4a560:	e13ff317 	ldw	r4,-52(fp)
   4a564:	20c7883a 	add	r3,r4,r3
   4a568:	18c00204 	addi	r3,r3,8
   4a56c:	18c000c3 	ldbu	r3,3(r3)
   4a570:	1809883a 	mov	r4,r3
   4a574:	e0fff883 	ldbu	r3,-30(fp)
   4a578:	00c6303a 	nor	r3,zero,r3
   4a57c:	20c6703a 	and	r3,r4,r3
   4a580:	1809883a 	mov	r4,r3
   4a584:	e0fff317 	ldw	r3,-52(fp)
   4a588:	1885883a 	add	r2,r3,r2
   4a58c:	10800204 	addi	r2,r2,8
   4a590:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   4a594:	e0bff803 	ldbu	r2,-32(fp)
   4a598:	e0fff317 	ldw	r3,-52(fp)
   4a59c:	1885883a 	add	r2,r3,r2
   4a5a0:	10800204 	addi	r2,r2,8
   4a5a4:	108000c3 	ldbu	r2,3(r2)
   4a5a8:	10803fcc 	andi	r2,r2,255
   4a5ac:	1000091e 	bne	r2,zero,4a5d4 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   4a5b0:	e0bff317 	ldw	r2,-52(fp)
   4a5b4:	10800283 	ldbu	r2,10(r2)
   4a5b8:	1007883a 	mov	r3,r2
   4a5bc:	e0bff843 	ldbu	r2,-31(fp)
   4a5c0:	0084303a 	nor	r2,zero,r2
   4a5c4:	1884703a 	and	r2,r3,r2
   4a5c8:	1007883a 	mov	r3,r2
   4a5cc:	e0bff317 	ldw	r2,-52(fp)
   4a5d0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   4a5d4:	e0bff317 	ldw	r2,-52(fp)
   4a5d8:	10c00283 	ldbu	r3,10(r2)
   4a5dc:	e0bff783 	ldbu	r2,-34(fp)
   4a5e0:	1884b03a 	or	r2,r3,r2
   4a5e4:	1007883a 	mov	r3,r2
   4a5e8:	e0bff317 	ldw	r2,-52(fp)
   4a5ec:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   4a5f0:	e0bff703 	ldbu	r2,-36(fp)
   4a5f4:	e0fff703 	ldbu	r3,-36(fp)
   4a5f8:	e13ff317 	ldw	r4,-52(fp)
   4a5fc:	20c7883a 	add	r3,r4,r3
   4a600:	18c00204 	addi	r3,r3,8
   4a604:	190000c3 	ldbu	r4,3(r3)
   4a608:	e0fff7c3 	ldbu	r3,-33(fp)
   4a60c:	20c6b03a 	or	r3,r4,r3
   4a610:	1809883a 	mov	r4,r3
   4a614:	e0fff317 	ldw	r3,-52(fp)
   4a618:	1885883a 	add	r2,r3,r2
   4a61c:	10800204 	addi	r2,r2,8
   4a620:	110000c5 	stb	r4,3(r2)
            pevents++;
   4a624:	e0bff417 	ldw	r2,-48(fp)
   4a628:	10800104 	addi	r2,r2,4
   4a62c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   4a630:	e0bff417 	ldw	r2,-48(fp)
   4a634:	10800017 	ldw	r2,0(r2)
   4a638:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   4a63c:	e0bff317 	ldw	r2,-52(fp)
   4a640:	103fc51e 	bne	r2,zero,4a558 <__alt_data_end+0xfffd49f8>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   4a644:	e0bff617 	ldw	r2,-40(fp)
   4a648:	e0ffff03 	ldbu	r3,-4(fp)
   4a64c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   4a650:	e0bff617 	ldw	r2,-40(fp)
   4a654:	e0fff703 	ldbu	r3,-36(fp)
   4a658:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   4a65c:	e0bff617 	ldw	r2,-40(fp)
   4a660:	e0fff743 	ldbu	r3,-35(fp)
   4a664:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   4a668:	e0bff617 	ldw	r2,-40(fp)
   4a66c:	e0fff783 	ldbu	r3,-34(fp)
   4a670:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   4a674:	e0bff617 	ldw	r2,-40(fp)
   4a678:	e0fff7c3 	ldbu	r3,-33(fp)
   4a67c:	10c00d45 	stb	r3,53(r2)
   4a680:	e0bff517 	ldw	r2,-44(fp)
   4a684:	e0bffd15 	stw	r2,-12(fp)
   4a688:	e0bffd17 	ldw	r2,-12(fp)
   4a68c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   4a690:	00800174 	movhi	r2,5
   4a694:	108b1544 	addi	r2,r2,11349
   4a698:	10800003 	ldbu	r2,0(r2)
   4a69c:	10803fcc 	andi	r2,r2,255
   4a6a0:	10800058 	cmpnei	r2,r2,1
   4a6a4:	1000011e 	bne	r2,zero,4a6ac <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   4a6a8:	0045c6c0 	call	45c6c <OS_Sched>
    }
    return (OS_ERR_NONE);
   4a6ac:	0005883a 	mov	r2,zero
}
   4a6b0:	e037883a 	mov	sp,fp
   4a6b4:	dfc00117 	ldw	ra,4(sp)
   4a6b8:	df000017 	ldw	fp,0(sp)
   4a6bc:	dec00204 	addi	sp,sp,8
   4a6c0:	f800283a 	ret

0004a6c4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   4a6c4:	deffee04 	addi	sp,sp,-72
   4a6c8:	dfc01115 	stw	ra,68(sp)
   4a6cc:	df001015 	stw	fp,64(sp)
   4a6d0:	df001004 	addi	fp,sp,64
   4a6d4:	e13ffc15 	stw	r4,-16(fp)
   4a6d8:	e17ffd15 	stw	r5,-12(fp)
   4a6dc:	e1bffe15 	stw	r6,-8(fp)
   4a6e0:	3805883a 	mov	r2,r7
   4a6e4:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   4a6e8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   4a6ec:	e0bfff03 	ldbu	r2,-4(fp)
   4a6f0:	10800570 	cmpltui	r2,r2,21
   4a6f4:	1000021e 	bne	r2,zero,4a700 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   4a6f8:	00800a84 	movi	r2,42
   4a6fc:	00005b06 	br	4a86c <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a700:	0005303a 	rdctl	r2,status
   4a704:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a708:	e0fff617 	ldw	r3,-40(fp)
   4a70c:	00bfff84 	movi	r2,-2
   4a710:	1884703a 	and	r2,r3,r2
   4a714:	1001703a 	wrctl	status,r2
  
  return context;
   4a718:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   4a71c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   4a720:	00800174 	movhi	r2,5
   4a724:	108b2304 	addi	r2,r2,11404
   4a728:	10800003 	ldbu	r2,0(r2)
   4a72c:	10803fcc 	andi	r2,r2,255
   4a730:	10000626 	beq	r2,zero,4a74c <OSTaskCreate+0x88>
   4a734:	e0bff317 	ldw	r2,-52(fp)
   4a738:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a73c:	e0bff717 	ldw	r2,-36(fp)
   4a740:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   4a744:	00800f04 	movi	r2,60
   4a748:	00004806 	br	4a86c <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   4a74c:	e0ffff03 	ldbu	r3,-4(fp)
   4a750:	008001b4 	movhi	r2,6
   4a754:	10afab04 	addi	r2,r2,-16724
   4a758:	18c7883a 	add	r3,r3,r3
   4a75c:	18c7883a 	add	r3,r3,r3
   4a760:	10c5883a 	add	r2,r2,r3
   4a764:	10800017 	ldw	r2,0(r2)
   4a768:	10003b1e 	bne	r2,zero,4a858 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   4a76c:	e0ffff03 	ldbu	r3,-4(fp)
   4a770:	008001b4 	movhi	r2,6
   4a774:	10afab04 	addi	r2,r2,-16724
   4a778:	18c7883a 	add	r3,r3,r3
   4a77c:	18c7883a 	add	r3,r3,r3
   4a780:	10c5883a 	add	r2,r2,r3
   4a784:	00c00044 	movi	r3,1
   4a788:	10c00015 	stw	r3,0(r2)
   4a78c:	e0bff317 	ldw	r2,-52(fp)
   4a790:	e0bff815 	stw	r2,-32(fp)
   4a794:	e0bff817 	ldw	r2,-32(fp)
   4a798:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   4a79c:	e13ffc17 	ldw	r4,-16(fp)
   4a7a0:	e17ffd17 	ldw	r5,-12(fp)
   4a7a4:	e1bffe17 	ldw	r6,-8(fp)
   4a7a8:	000f883a 	mov	r7,zero
   4a7ac:	004e6f80 	call	4e6f8 <OSTaskStkInit>
   4a7b0:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   4a7b4:	e0bfff03 	ldbu	r2,-4(fp)
   4a7b8:	d8000015 	stw	zero,0(sp)
   4a7bc:	d8000115 	stw	zero,4(sp)
   4a7c0:	d8000215 	stw	zero,8(sp)
   4a7c4:	1009883a 	mov	r4,r2
   4a7c8:	e17ff417 	ldw	r5,-48(fp)
   4a7cc:	000d883a 	mov	r6,zero
   4a7d0:	000f883a 	mov	r7,zero
   4a7d4:	00460600 	call	46060 <OS_TCBInit>
   4a7d8:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   4a7dc:	e0bff503 	ldbu	r2,-44(fp)
   4a7e0:	1000081e 	bne	r2,zero,4a804 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   4a7e4:	00800174 	movhi	r2,5
   4a7e8:	108b1544 	addi	r2,r2,11349
   4a7ec:	10800003 	ldbu	r2,0(r2)
   4a7f0:	10803fcc 	andi	r2,r2,255
   4a7f4:	10800058 	cmpnei	r2,r2,1
   4a7f8:	1000151e 	bne	r2,zero,4a850 <OSTaskCreate+0x18c>
                OS_Sched();
   4a7fc:	0045c6c0 	call	45c6c <OS_Sched>
   4a800:	00001306 	br	4a850 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a804:	0005303a 	rdctl	r2,status
   4a808:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a80c:	e0fff917 	ldw	r3,-28(fp)
   4a810:	00bfff84 	movi	r2,-2
   4a814:	1884703a 	and	r2,r3,r2
   4a818:	1001703a 	wrctl	status,r2
  
  return context;
   4a81c:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   4a820:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   4a824:	e0ffff03 	ldbu	r3,-4(fp)
   4a828:	008001b4 	movhi	r2,6
   4a82c:	10afab04 	addi	r2,r2,-16724
   4a830:	18c7883a 	add	r3,r3,r3
   4a834:	18c7883a 	add	r3,r3,r3
   4a838:	10c5883a 	add	r2,r2,r3
   4a83c:	10000015 	stw	zero,0(r2)
   4a840:	e0bff317 	ldw	r2,-52(fp)
   4a844:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a848:	e0bffa17 	ldw	r2,-24(fp)
   4a84c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   4a850:	e0bff503 	ldbu	r2,-44(fp)
   4a854:	00000506 	br	4a86c <OSTaskCreate+0x1a8>
   4a858:	e0bff317 	ldw	r2,-52(fp)
   4a85c:	e0bffb15 	stw	r2,-20(fp)
   4a860:	e0bffb17 	ldw	r2,-20(fp)
   4a864:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   4a868:	00800a04 	movi	r2,40
}
   4a86c:	e037883a 	mov	sp,fp
   4a870:	dfc00117 	ldw	ra,4(sp)
   4a874:	df000017 	ldw	fp,0(sp)
   4a878:	dec00204 	addi	sp,sp,8
   4a87c:	f800283a 	ret

0004a880 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   4a880:	deffec04 	addi	sp,sp,-80
   4a884:	dfc01315 	stw	ra,76(sp)
   4a888:	df001215 	stw	fp,72(sp)
   4a88c:	df001204 	addi	fp,sp,72
   4a890:	e13ffa15 	stw	r4,-24(fp)
   4a894:	e17ffb15 	stw	r5,-20(fp)
   4a898:	e1bffc15 	stw	r6,-16(fp)
   4a89c:	3809883a 	mov	r4,r7
   4a8a0:	e0c00217 	ldw	r3,8(fp)
   4a8a4:	e0800617 	ldw	r2,24(fp)
   4a8a8:	e13ffd05 	stb	r4,-12(fp)
   4a8ac:	e0fffe0d 	sth	r3,-8(fp)
   4a8b0:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   4a8b4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   4a8b8:	e0bffd03 	ldbu	r2,-12(fp)
   4a8bc:	10800570 	cmpltui	r2,r2,21
   4a8c0:	1000021e 	bne	r2,zero,4a8cc <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   4a8c4:	00800a84 	movi	r2,42
   4a8c8:	00006306 	br	4aa58 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a8cc:	0005303a 	rdctl	r2,status
   4a8d0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a8d4:	e0fff417 	ldw	r3,-48(fp)
   4a8d8:	00bfff84 	movi	r2,-2
   4a8dc:	1884703a 	and	r2,r3,r2
   4a8e0:	1001703a 	wrctl	status,r2
  
  return context;
   4a8e4:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   4a8e8:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   4a8ec:	00800174 	movhi	r2,5
   4a8f0:	108b2304 	addi	r2,r2,11404
   4a8f4:	10800003 	ldbu	r2,0(r2)
   4a8f8:	10803fcc 	andi	r2,r2,255
   4a8fc:	10000626 	beq	r2,zero,4a918 <OSTaskCreateExt+0x98>
   4a900:	e0bff117 	ldw	r2,-60(fp)
   4a904:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a908:	e0bff517 	ldw	r2,-44(fp)
   4a90c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   4a910:	00800f04 	movi	r2,60
   4a914:	00005006 	br	4aa58 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   4a918:	e0fffd03 	ldbu	r3,-12(fp)
   4a91c:	008001b4 	movhi	r2,6
   4a920:	10afab04 	addi	r2,r2,-16724
   4a924:	18c7883a 	add	r3,r3,r3
   4a928:	18c7883a 	add	r3,r3,r3
   4a92c:	10c5883a 	add	r2,r2,r3
   4a930:	10800017 	ldw	r2,0(r2)
   4a934:	1000431e 	bne	r2,zero,4aa44 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   4a938:	e0fffd03 	ldbu	r3,-12(fp)
   4a93c:	008001b4 	movhi	r2,6
   4a940:	10afab04 	addi	r2,r2,-16724
   4a944:	18c7883a 	add	r3,r3,r3
   4a948:	18c7883a 	add	r3,r3,r3
   4a94c:	10c5883a 	add	r2,r2,r3
   4a950:	00c00044 	movi	r3,1
   4a954:	10c00015 	stw	r3,0(r2)
   4a958:	e0bff117 	ldw	r2,-60(fp)
   4a95c:	e0bff615 	stw	r2,-40(fp)
   4a960:	e0bff617 	ldw	r2,-40(fp)
   4a964:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   4a968:	e0bfff0b 	ldhu	r2,-4(fp)
   4a96c:	e1000317 	ldw	r4,12(fp)
   4a970:	e1400417 	ldw	r5,16(fp)
   4a974:	100d883a 	mov	r6,r2
   4a978:	004ba0c0 	call	4ba0c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   4a97c:	e0bfff0b 	ldhu	r2,-4(fp)
   4a980:	e13ffa17 	ldw	r4,-24(fp)
   4a984:	e17ffb17 	ldw	r5,-20(fp)
   4a988:	e1bffc17 	ldw	r6,-16(fp)
   4a98c:	100f883a 	mov	r7,r2
   4a990:	004e6f80 	call	4e6f8 <OSTaskStkInit>
   4a994:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   4a998:	e13ffd03 	ldbu	r4,-12(fp)
   4a99c:	e1fffe0b 	ldhu	r7,-8(fp)
   4a9a0:	e0bfff0b 	ldhu	r2,-4(fp)
   4a9a4:	e0c00417 	ldw	r3,16(fp)
   4a9a8:	d8c00015 	stw	r3,0(sp)
   4a9ac:	e0c00517 	ldw	r3,20(fp)
   4a9b0:	d8c00115 	stw	r3,4(sp)
   4a9b4:	d8800215 	stw	r2,8(sp)
   4a9b8:	e17ff217 	ldw	r5,-56(fp)
   4a9bc:	e1800317 	ldw	r6,12(fp)
   4a9c0:	00460600 	call	46060 <OS_TCBInit>
   4a9c4:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   4a9c8:	e0bff303 	ldbu	r2,-52(fp)
   4a9cc:	1000081e 	bne	r2,zero,4a9f0 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   4a9d0:	00800174 	movhi	r2,5
   4a9d4:	108b1544 	addi	r2,r2,11349
   4a9d8:	10800003 	ldbu	r2,0(r2)
   4a9dc:	10803fcc 	andi	r2,r2,255
   4a9e0:	10800058 	cmpnei	r2,r2,1
   4a9e4:	1000151e 	bne	r2,zero,4aa3c <OSTaskCreateExt+0x1bc>
                OS_Sched();
   4a9e8:	0045c6c0 	call	45c6c <OS_Sched>
   4a9ec:	00001306 	br	4aa3c <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a9f0:	0005303a 	rdctl	r2,status
   4a9f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a9f8:	e0fff717 	ldw	r3,-36(fp)
   4a9fc:	00bfff84 	movi	r2,-2
   4aa00:	1884703a 	and	r2,r3,r2
   4aa04:	1001703a 	wrctl	status,r2
  
  return context;
   4aa08:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   4aa0c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   4aa10:	e0fffd03 	ldbu	r3,-12(fp)
   4aa14:	008001b4 	movhi	r2,6
   4aa18:	10afab04 	addi	r2,r2,-16724
   4aa1c:	18c7883a 	add	r3,r3,r3
   4aa20:	18c7883a 	add	r3,r3,r3
   4aa24:	10c5883a 	add	r2,r2,r3
   4aa28:	10000015 	stw	zero,0(r2)
   4aa2c:	e0bff117 	ldw	r2,-60(fp)
   4aa30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4aa34:	e0bff817 	ldw	r2,-32(fp)
   4aa38:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   4aa3c:	e0bff303 	ldbu	r2,-52(fp)
   4aa40:	00000506 	br	4aa58 <OSTaskCreateExt+0x1d8>
   4aa44:	e0bff117 	ldw	r2,-60(fp)
   4aa48:	e0bff915 	stw	r2,-28(fp)
   4aa4c:	e0bff917 	ldw	r2,-28(fp)
   4aa50:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   4aa54:	00800a04 	movi	r2,40
}
   4aa58:	e037883a 	mov	sp,fp
   4aa5c:	dfc00117 	ldw	ra,4(sp)
   4aa60:	df000017 	ldw	fp,0(sp)
   4aa64:	dec00204 	addi	sp,sp,8
   4aa68:	f800283a 	ret

0004aa6c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   4aa6c:	defff404 	addi	sp,sp,-48
   4aa70:	dfc00b15 	stw	ra,44(sp)
   4aa74:	df000a15 	stw	fp,40(sp)
   4aa78:	df000a04 	addi	fp,sp,40
   4aa7c:	2005883a 	mov	r2,r4
   4aa80:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   4aa84:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   4aa88:	00800174 	movhi	r2,5
   4aa8c:	108b2304 	addi	r2,r2,11404
   4aa90:	10800003 	ldbu	r2,0(r2)
   4aa94:	10803fcc 	andi	r2,r2,255
   4aa98:	10000226 	beq	r2,zero,4aaa4 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   4aa9c:	00801004 	movi	r2,64
   4aaa0:	0000e506 	br	4ae38 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   4aaa4:	e0bfff03 	ldbu	r2,-4(fp)
   4aaa8:	10800518 	cmpnei	r2,r2,20
   4aaac:	1000021e 	bne	r2,zero,4aab8 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   4aab0:	00800f84 	movi	r2,62
   4aab4:	0000e006 	br	4ae38 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   4aab8:	e0bfff03 	ldbu	r2,-4(fp)
   4aabc:	10800530 	cmpltui	r2,r2,20
   4aac0:	1000051e 	bne	r2,zero,4aad8 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   4aac4:	e0bfff03 	ldbu	r2,-4(fp)
   4aac8:	10803fe0 	cmpeqi	r2,r2,255
   4aacc:	1000021e 	bne	r2,zero,4aad8 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   4aad0:	00800a84 	movi	r2,42
   4aad4:	0000d806 	br	4ae38 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4aad8:	0005303a 	rdctl	r2,status
   4aadc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4aae0:	e0fff917 	ldw	r3,-28(fp)
   4aae4:	00bfff84 	movi	r2,-2
   4aae8:	1884703a 	and	r2,r3,r2
   4aaec:	1001703a 	wrctl	status,r2
  
  return context;
   4aaf0:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   4aaf4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   4aaf8:	e0bfff03 	ldbu	r2,-4(fp)
   4aafc:	10803fd8 	cmpnei	r2,r2,255
   4ab00:	1000051e 	bne	r2,zero,4ab18 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   4ab04:	00800174 	movhi	r2,5
   4ab08:	108b2404 	addi	r2,r2,11408
   4ab0c:	10800017 	ldw	r2,0(r2)
   4ab10:	10800c83 	ldbu	r2,50(r2)
   4ab14:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   4ab18:	e0ffff03 	ldbu	r3,-4(fp)
   4ab1c:	008001b4 	movhi	r2,6
   4ab20:	10afab04 	addi	r2,r2,-16724
   4ab24:	18c7883a 	add	r3,r3,r3
   4ab28:	18c7883a 	add	r3,r3,r3
   4ab2c:	10c5883a 	add	r2,r2,r3
   4ab30:	10800017 	ldw	r2,0(r2)
   4ab34:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   4ab38:	e0bff717 	ldw	r2,-36(fp)
   4ab3c:	1000061e 	bne	r2,zero,4ab58 <OSTaskDel+0xec>
   4ab40:	e0bff617 	ldw	r2,-40(fp)
   4ab44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ab48:	e0bffa17 	ldw	r2,-24(fp)
   4ab4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   4ab50:	008010c4 	movi	r2,67
   4ab54:	0000b806 	br	4ae38 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   4ab58:	e0bff717 	ldw	r2,-36(fp)
   4ab5c:	10800058 	cmpnei	r2,r2,1
   4ab60:	1000061e 	bne	r2,zero,4ab7c <OSTaskDel+0x110>
   4ab64:	e0bff617 	ldw	r2,-40(fp)
   4ab68:	e0bffb15 	stw	r2,-20(fp)
   4ab6c:	e0bffb17 	ldw	r2,-20(fp)
   4ab70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   4ab74:	00800f44 	movi	r2,61
   4ab78:	0000af06 	br	4ae38 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   4ab7c:	e0bff717 	ldw	r2,-36(fp)
   4ab80:	10800d03 	ldbu	r2,52(r2)
   4ab84:	10c03fcc 	andi	r3,r2,255
   4ab88:	e0bff717 	ldw	r2,-36(fp)
   4ab8c:	10800d03 	ldbu	r2,52(r2)
   4ab90:	11003fcc 	andi	r4,r2,255
   4ab94:	00800174 	movhi	r2,5
   4ab98:	108b2144 	addi	r2,r2,11397
   4ab9c:	1105883a 	add	r2,r2,r4
   4aba0:	10800003 	ldbu	r2,0(r2)
   4aba4:	1009883a 	mov	r4,r2
   4aba8:	e0bff717 	ldw	r2,-36(fp)
   4abac:	10800d43 	ldbu	r2,53(r2)
   4abb0:	0084303a 	nor	r2,zero,r2
   4abb4:	2084703a 	and	r2,r4,r2
   4abb8:	1009883a 	mov	r4,r2
   4abbc:	00800174 	movhi	r2,5
   4abc0:	108b2144 	addi	r2,r2,11397
   4abc4:	10c5883a 	add	r2,r2,r3
   4abc8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   4abcc:	e0bff717 	ldw	r2,-36(fp)
   4abd0:	10800d03 	ldbu	r2,52(r2)
   4abd4:	10c03fcc 	andi	r3,r2,255
   4abd8:	00800174 	movhi	r2,5
   4abdc:	108b2144 	addi	r2,r2,11397
   4abe0:	10c5883a 	add	r2,r2,r3
   4abe4:	10800003 	ldbu	r2,0(r2)
   4abe8:	10803fcc 	andi	r2,r2,255
   4abec:	10000c1e 	bne	r2,zero,4ac20 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   4abf0:	e0bff717 	ldw	r2,-36(fp)
   4abf4:	10800d83 	ldbu	r2,54(r2)
   4abf8:	0084303a 	nor	r2,zero,r2
   4abfc:	1007883a 	mov	r3,r2
   4ac00:	00800174 	movhi	r2,5
   4ac04:	108b2104 	addi	r2,r2,11396
   4ac08:	10800003 	ldbu	r2,0(r2)
   4ac0c:	1884703a 	and	r2,r3,r2
   4ac10:	1007883a 	mov	r3,r2
   4ac14:	00800174 	movhi	r2,5
   4ac18:	108b2104 	addi	r2,r2,11396
   4ac1c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   4ac20:	e0bff717 	ldw	r2,-36(fp)
   4ac24:	10800717 	ldw	r2,28(r2)
   4ac28:	10000526 	beq	r2,zero,4ac40 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   4ac2c:	e0bff717 	ldw	r2,-36(fp)
   4ac30:	10800717 	ldw	r2,28(r2)
   4ac34:	e13ff717 	ldw	r4,-36(fp)
   4ac38:	100b883a 	mov	r5,r2
   4ac3c:	00456440 	call	45644 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   4ac40:	e0bff717 	ldw	r2,-36(fp)
   4ac44:	10800817 	ldw	r2,32(r2)
   4ac48:	10000526 	beq	r2,zero,4ac60 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   4ac4c:	e0bff717 	ldw	r2,-36(fp)
   4ac50:	10800817 	ldw	r2,32(r2)
   4ac54:	e13ff717 	ldw	r4,-36(fp)
   4ac58:	100b883a 	mov	r5,r2
   4ac5c:	00456f80 	call	456f8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   4ac60:	e0bff717 	ldw	r2,-36(fp)
   4ac64:	10800a17 	ldw	r2,40(r2)
   4ac68:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   4ac6c:	e0bff817 	ldw	r2,-32(fp)
   4ac70:	10000226 	beq	r2,zero,4ac7c <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   4ac74:	e13ff817 	ldw	r4,-32(fp)
   4ac78:	0047c3c0 	call	47c3c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   4ac7c:	e0bff717 	ldw	r2,-36(fp)
   4ac80:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   4ac84:	e0bff717 	ldw	r2,-36(fp)
   4ac88:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   4ac8c:	e0bff717 	ldw	r2,-36(fp)
   4ac90:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   4ac94:	00800174 	movhi	r2,5
   4ac98:	108b1504 	addi	r2,r2,11348
   4ac9c:	10800003 	ldbu	r2,0(r2)
   4aca0:	10803fcc 	andi	r2,r2,255
   4aca4:	10803fe0 	cmpeqi	r2,r2,255
   4aca8:	1000081e 	bne	r2,zero,4accc <OSTaskDel+0x260>
        OSLockNesting++;
   4acac:	00800174 	movhi	r2,5
   4acb0:	108b1504 	addi	r2,r2,11348
   4acb4:	10800003 	ldbu	r2,0(r2)
   4acb8:	10800044 	addi	r2,r2,1
   4acbc:	1007883a 	mov	r3,r2
   4acc0:	00800174 	movhi	r2,5
   4acc4:	108b1504 	addi	r2,r2,11348
   4acc8:	10c00005 	stb	r3,0(r2)
   4accc:	e0bff617 	ldw	r2,-40(fp)
   4acd0:	e0bffc15 	stw	r2,-16(fp)
   4acd4:	e0bffc17 	ldw	r2,-16(fp)
   4acd8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   4acdc:	00452380 	call	45238 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ace0:	0005303a 	rdctl	r2,status
   4ace4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ace8:	e0fffd17 	ldw	r3,-12(fp)
   4acec:	00bfff84 	movi	r2,-2
   4acf0:	1884703a 	and	r2,r3,r2
   4acf4:	1001703a 	wrctl	status,r2
  
  return context;
   4acf8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   4acfc:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   4ad00:	00800174 	movhi	r2,5
   4ad04:	108b1504 	addi	r2,r2,11348
   4ad08:	10800003 	ldbu	r2,0(r2)
   4ad0c:	10803fcc 	andi	r2,r2,255
   4ad10:	10000826 	beq	r2,zero,4ad34 <OSTaskDel+0x2c8>
        OSLockNesting--;
   4ad14:	00800174 	movhi	r2,5
   4ad18:	108b1504 	addi	r2,r2,11348
   4ad1c:	10800003 	ldbu	r2,0(r2)
   4ad20:	10bfffc4 	addi	r2,r2,-1
   4ad24:	1007883a 	mov	r3,r2
   4ad28:	00800174 	movhi	r2,5
   4ad2c:	108b1504 	addi	r2,r2,11348
   4ad30:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   4ad34:	e13ff717 	ldw	r4,-36(fp)
   4ad38:	004ea0c0 	call	4ea0c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   4ad3c:	00800174 	movhi	r2,5
   4ad40:	108b1d44 	addi	r2,r2,11381
   4ad44:	10800003 	ldbu	r2,0(r2)
   4ad48:	10bfffc4 	addi	r2,r2,-1
   4ad4c:	1007883a 	mov	r3,r2
   4ad50:	00800174 	movhi	r2,5
   4ad54:	108b1d44 	addi	r2,r2,11381
   4ad58:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   4ad5c:	e0ffff03 	ldbu	r3,-4(fp)
   4ad60:	008001b4 	movhi	r2,6
   4ad64:	10afab04 	addi	r2,r2,-16724
   4ad68:	18c7883a 	add	r3,r3,r3
   4ad6c:	18c7883a 	add	r3,r3,r3
   4ad70:	10c5883a 	add	r2,r2,r3
   4ad74:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   4ad78:	e0bff717 	ldw	r2,-36(fp)
   4ad7c:	10800617 	ldw	r2,24(r2)
   4ad80:	1000091e 	bne	r2,zero,4ada8 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   4ad84:	e0bff717 	ldw	r2,-36(fp)
   4ad88:	10800517 	ldw	r2,20(r2)
   4ad8c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   4ad90:	e0bff717 	ldw	r2,-36(fp)
   4ad94:	10c00517 	ldw	r3,20(r2)
   4ad98:	00800174 	movhi	r2,5
   4ad9c:	108b1804 	addi	r2,r2,11360
   4ada0:	10c00015 	stw	r3,0(r2)
   4ada4:	00000a06 	br	4add0 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   4ada8:	e0bff717 	ldw	r2,-36(fp)
   4adac:	10800617 	ldw	r2,24(r2)
   4adb0:	e0fff717 	ldw	r3,-36(fp)
   4adb4:	18c00517 	ldw	r3,20(r3)
   4adb8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   4adbc:	e0bff717 	ldw	r2,-36(fp)
   4adc0:	10800517 	ldw	r2,20(r2)
   4adc4:	e0fff717 	ldw	r3,-36(fp)
   4adc8:	18c00617 	ldw	r3,24(r3)
   4adcc:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   4add0:	00800174 	movhi	r2,5
   4add4:	108b1c04 	addi	r2,r2,11376
   4add8:	10c00017 	ldw	r3,0(r2)
   4addc:	e0bff717 	ldw	r2,-36(fp)
   4ade0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   4ade4:	00800174 	movhi	r2,5
   4ade8:	108b1c04 	addi	r2,r2,11376
   4adec:	e0fff717 	ldw	r3,-36(fp)
   4adf0:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   4adf4:	e0bff717 	ldw	r2,-36(fp)
   4adf8:	00c00fc4 	movi	r3,63
   4adfc:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   4ae00:	e0bff717 	ldw	r2,-36(fp)
   4ae04:	10001345 	stb	zero,77(r2)
   4ae08:	e0bff617 	ldw	r2,-40(fp)
   4ae0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ae10:	e0bffe17 	ldw	r2,-8(fp)
   4ae14:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   4ae18:	00800174 	movhi	r2,5
   4ae1c:	108b1544 	addi	r2,r2,11349
   4ae20:	10800003 	ldbu	r2,0(r2)
   4ae24:	10803fcc 	andi	r2,r2,255
   4ae28:	10800058 	cmpnei	r2,r2,1
   4ae2c:	1000011e 	bne	r2,zero,4ae34 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   4ae30:	0045c6c0 	call	45c6c <OS_Sched>
    }
    return (OS_ERR_NONE);
   4ae34:	0005883a 	mov	r2,zero
}
   4ae38:	e037883a 	mov	sp,fp
   4ae3c:	dfc00117 	ldw	ra,4(sp)
   4ae40:	df000017 	ldw	fp,0(sp)
   4ae44:	dec00204 	addi	sp,sp,8
   4ae48:	f800283a 	ret

0004ae4c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   4ae4c:	defff504 	addi	sp,sp,-44
   4ae50:	df000a15 	stw	fp,40(sp)
   4ae54:	df000a04 	addi	fp,sp,40
   4ae58:	2005883a 	mov	r2,r4
   4ae5c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4ae60:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   4ae64:	e0bfff03 	ldbu	r2,-4(fp)
   4ae68:	10800518 	cmpnei	r2,r2,20
   4ae6c:	1000021e 	bne	r2,zero,4ae78 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   4ae70:	00800f84 	movi	r2,62
   4ae74:	00004706 	br	4af94 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   4ae78:	e0bfff03 	ldbu	r2,-4(fp)
   4ae7c:	10800530 	cmpltui	r2,r2,20
   4ae80:	1000051e 	bne	r2,zero,4ae98 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   4ae84:	e0bfff03 	ldbu	r2,-4(fp)
   4ae88:	10803fe0 	cmpeqi	r2,r2,255
   4ae8c:	1000021e 	bne	r2,zero,4ae98 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   4ae90:	00800a84 	movi	r2,42
   4ae94:	00003f06 	br	4af94 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   4ae98:	e0bfff03 	ldbu	r2,-4(fp)
   4ae9c:	10803fd8 	cmpnei	r2,r2,255
   4aea0:	1000131e 	bne	r2,zero,4aef0 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4aea4:	0005303a 	rdctl	r2,status
   4aea8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4aeac:	e0fff917 	ldw	r3,-28(fp)
   4aeb0:	00bfff84 	movi	r2,-2
   4aeb4:	1884703a 	and	r2,r3,r2
   4aeb8:	1001703a 	wrctl	status,r2
  
  return context;
   4aebc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   4aec0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   4aec4:	00800174 	movhi	r2,5
   4aec8:	108b2404 	addi	r2,r2,11408
   4aecc:	10800017 	ldw	r2,0(r2)
   4aed0:	10800dc3 	ldbu	r2,55(r2)
   4aed4:	e0bff705 	stb	r2,-36(fp)
   4aed8:	e0bff617 	ldw	r2,-40(fp)
   4aedc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4aee0:	e0bffa17 	ldw	r2,-24(fp)
   4aee4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   4aee8:	e0bff703 	ldbu	r2,-36(fp)
   4aeec:	00002906 	br	4af94 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4aef0:	0005303a 	rdctl	r2,status
   4aef4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4aef8:	e0fffb17 	ldw	r3,-20(fp)
   4aefc:	00bfff84 	movi	r2,-2
   4af00:	1884703a 	and	r2,r3,r2
   4af04:	1001703a 	wrctl	status,r2
  
  return context;
   4af08:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   4af0c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   4af10:	e0ffff03 	ldbu	r3,-4(fp)
   4af14:	008001b4 	movhi	r2,6
   4af18:	10afab04 	addi	r2,r2,-16724
   4af1c:	18c7883a 	add	r3,r3,r3
   4af20:	18c7883a 	add	r3,r3,r3
   4af24:	10c5883a 	add	r2,r2,r3
   4af28:	10800017 	ldw	r2,0(r2)
   4af2c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   4af30:	e0bff817 	ldw	r2,-32(fp)
   4af34:	1000061e 	bne	r2,zero,4af50 <OSTaskDelReq+0x104>
   4af38:	e0bff617 	ldw	r2,-40(fp)
   4af3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4af40:	e0bffc17 	ldw	r2,-16(fp)
   4af44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   4af48:	008010c4 	movi	r2,67
   4af4c:	00001106 	br	4af94 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   4af50:	e0bff817 	ldw	r2,-32(fp)
   4af54:	10800058 	cmpnei	r2,r2,1
   4af58:	1000061e 	bne	r2,zero,4af74 <OSTaskDelReq+0x128>
   4af5c:	e0bff617 	ldw	r2,-40(fp)
   4af60:	e0bffd15 	stw	r2,-12(fp)
   4af64:	e0bffd17 	ldw	r2,-12(fp)
   4af68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   4af6c:	00800f44 	movi	r2,61
   4af70:	00000806 	br	4af94 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   4af74:	e0bff817 	ldw	r2,-32(fp)
   4af78:	00c00fc4 	movi	r3,63
   4af7c:	10c00dc5 	stb	r3,55(r2)
   4af80:	e0bff617 	ldw	r2,-40(fp)
   4af84:	e0bffe15 	stw	r2,-8(fp)
   4af88:	e0bffe17 	ldw	r2,-8(fp)
   4af8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   4af90:	0005883a 	mov	r2,zero
}
   4af94:	e037883a 	mov	sp,fp
   4af98:	df000017 	ldw	fp,0(sp)
   4af9c:	dec00104 	addi	sp,sp,4
   4afa0:	f800283a 	ret

0004afa4 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   4afa4:	defff404 	addi	sp,sp,-48
   4afa8:	dfc00b15 	stw	ra,44(sp)
   4afac:	df000a15 	stw	fp,40(sp)
   4afb0:	df000a04 	addi	fp,sp,40
   4afb4:	2005883a 	mov	r2,r4
   4afb8:	e17ffe15 	stw	r5,-8(fp)
   4afbc:	e1bfff15 	stw	r6,-4(fp)
   4afc0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   4afc4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   4afc8:	e0bfff17 	ldw	r2,-4(fp)
   4afcc:	1000021e 	bne	r2,zero,4afd8 <OSTaskNameGet+0x34>
        return (0);
   4afd0:	0005883a 	mov	r2,zero
   4afd4:	00005806 	br	4b138 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   4afd8:	e0bffd03 	ldbu	r2,-12(fp)
   4afdc:	10800570 	cmpltui	r2,r2,21
   4afe0:	1000081e 	bne	r2,zero,4b004 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   4afe4:	e0bffd03 	ldbu	r2,-12(fp)
   4afe8:	10803fe0 	cmpeqi	r2,r2,255
   4afec:	1000051e 	bne	r2,zero,4b004 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   4aff0:	e0bfff17 	ldw	r2,-4(fp)
   4aff4:	00c00a84 	movi	r3,42
   4aff8:	10c00005 	stb	r3,0(r2)
            return (0);
   4affc:	0005883a 	mov	r2,zero
   4b000:	00004d06 	br	4b138 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   4b004:	e0bffe17 	ldw	r2,-8(fp)
   4b008:	1000051e 	bne	r2,zero,4b020 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   4b00c:	e0bfff17 	ldw	r2,-4(fp)
   4b010:	00c00304 	movi	r3,12
   4b014:	10c00005 	stb	r3,0(r2)
        return (0);
   4b018:	0005883a 	mov	r2,zero
   4b01c:	00004606 	br	4b138 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   4b020:	00800174 	movhi	r2,5
   4b024:	108b2304 	addi	r2,r2,11404
   4b028:	10800003 	ldbu	r2,0(r2)
   4b02c:	10803fcc 	andi	r2,r2,255
   4b030:	10000526 	beq	r2,zero,4b048 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   4b034:	e0bfff17 	ldw	r2,-4(fp)
   4b038:	00c00444 	movi	r3,17
   4b03c:	10c00005 	stb	r3,0(r2)
        return (0);
   4b040:	0005883a 	mov	r2,zero
   4b044:	00003c06 	br	4b138 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b048:	0005303a 	rdctl	r2,status
   4b04c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b050:	e0fff917 	ldw	r3,-28(fp)
   4b054:	00bfff84 	movi	r2,-2
   4b058:	1884703a 	and	r2,r3,r2
   4b05c:	1001703a 	wrctl	status,r2
  
  return context;
   4b060:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   4b064:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   4b068:	e0bffd03 	ldbu	r2,-12(fp)
   4b06c:	10803fd8 	cmpnei	r2,r2,255
   4b070:	1000051e 	bne	r2,zero,4b088 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   4b074:	00800174 	movhi	r2,5
   4b078:	108b2404 	addi	r2,r2,11408
   4b07c:	10800017 	ldw	r2,0(r2)
   4b080:	10800c83 	ldbu	r2,50(r2)
   4b084:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   4b088:	e0fffd03 	ldbu	r3,-12(fp)
   4b08c:	008001b4 	movhi	r2,6
   4b090:	10afab04 	addi	r2,r2,-16724
   4b094:	18c7883a 	add	r3,r3,r3
   4b098:	18c7883a 	add	r3,r3,r3
   4b09c:	10c5883a 	add	r2,r2,r3
   4b0a0:	10800017 	ldw	r2,0(r2)
   4b0a4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   4b0a8:	e0bff717 	ldw	r2,-36(fp)
   4b0ac:	1000091e 	bne	r2,zero,4b0d4 <OSTaskNameGet+0x130>
   4b0b0:	e0bff617 	ldw	r2,-40(fp)
   4b0b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b0b8:	e0bffa17 	ldw	r2,-24(fp)
   4b0bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   4b0c0:	e0bfff17 	ldw	r2,-4(fp)
   4b0c4:	00c010c4 	movi	r3,67
   4b0c8:	10c00005 	stb	r3,0(r2)
        return (0);
   4b0cc:	0005883a 	mov	r2,zero
   4b0d0:	00001906 	br	4b138 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   4b0d4:	e0bff717 	ldw	r2,-36(fp)
   4b0d8:	10800058 	cmpnei	r2,r2,1
   4b0dc:	1000091e 	bne	r2,zero,4b104 <OSTaskNameGet+0x160>
   4b0e0:	e0bff617 	ldw	r2,-40(fp)
   4b0e4:	e0bffb15 	stw	r2,-20(fp)
   4b0e8:	e0bffb17 	ldw	r2,-20(fp)
   4b0ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   4b0f0:	e0bfff17 	ldw	r2,-4(fp)
   4b0f4:	00c010c4 	movi	r3,67
   4b0f8:	10c00005 	stb	r3,0(r2)
        return (0);
   4b0fc:	0005883a 	mov	r2,zero
   4b100:	00000d06 	br	4b138 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   4b104:	e0bff717 	ldw	r2,-36(fp)
   4b108:	10801304 	addi	r2,r2,76
   4b10c:	e13ffe17 	ldw	r4,-8(fp)
   4b110:	100b883a 	mov	r5,r2
   4b114:	0045da80 	call	45da8 <OS_StrCopy>
   4b118:	e0bff805 	stb	r2,-32(fp)
   4b11c:	e0bff617 	ldw	r2,-40(fp)
   4b120:	e0bffc15 	stw	r2,-16(fp)
   4b124:	e0bffc17 	ldw	r2,-16(fp)
   4b128:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   4b12c:	e0bfff17 	ldw	r2,-4(fp)
   4b130:	10000005 	stb	zero,0(r2)
    return (len);
   4b134:	e0bff803 	ldbu	r2,-32(fp)
}
   4b138:	e037883a 	mov	sp,fp
   4b13c:	dfc00117 	ldw	ra,4(sp)
   4b140:	df000017 	ldw	fp,0(sp)
   4b144:	dec00204 	addi	sp,sp,8
   4b148:	f800283a 	ret

0004b14c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   4b14c:	defff304 	addi	sp,sp,-52
   4b150:	dfc00c15 	stw	ra,48(sp)
   4b154:	df000b15 	stw	fp,44(sp)
   4b158:	df000b04 	addi	fp,sp,44
   4b15c:	2005883a 	mov	r2,r4
   4b160:	e17ffe15 	stw	r5,-8(fp)
   4b164:	e1bfff15 	stw	r6,-4(fp)
   4b168:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   4b16c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   4b170:	e0bfff17 	ldw	r2,-4(fp)
   4b174:	1000011e 	bne	r2,zero,4b17c <OSTaskNameSet+0x30>
        return;
   4b178:	00005f06 	br	4b2f8 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   4b17c:	e0bffd03 	ldbu	r2,-12(fp)
   4b180:	10800570 	cmpltui	r2,r2,21
   4b184:	1000071e 	bne	r2,zero,4b1a4 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   4b188:	e0bffd03 	ldbu	r2,-12(fp)
   4b18c:	10803fe0 	cmpeqi	r2,r2,255
   4b190:	1000041e 	bne	r2,zero,4b1a4 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   4b194:	e0bfff17 	ldw	r2,-4(fp)
   4b198:	00c00a84 	movi	r3,42
   4b19c:	10c00005 	stb	r3,0(r2)
            return;
   4b1a0:	00005506 	br	4b2f8 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   4b1a4:	e0bffe17 	ldw	r2,-8(fp)
   4b1a8:	1000041e 	bne	r2,zero,4b1bc <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   4b1ac:	e0bfff17 	ldw	r2,-4(fp)
   4b1b0:	00c00304 	movi	r3,12
   4b1b4:	10c00005 	stb	r3,0(r2)
        return;
   4b1b8:	00004f06 	br	4b2f8 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   4b1bc:	00800174 	movhi	r2,5
   4b1c0:	108b2304 	addi	r2,r2,11404
   4b1c4:	10800003 	ldbu	r2,0(r2)
   4b1c8:	10803fcc 	andi	r2,r2,255
   4b1cc:	10000426 	beq	r2,zero,4b1e0 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   4b1d0:	e0bfff17 	ldw	r2,-4(fp)
   4b1d4:	00c00484 	movi	r3,18
   4b1d8:	10c00005 	stb	r3,0(r2)
        return;
   4b1dc:	00004606 	br	4b2f8 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b1e0:	0005303a 	rdctl	r2,status
   4b1e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b1e8:	e0fff817 	ldw	r3,-32(fp)
   4b1ec:	00bfff84 	movi	r2,-2
   4b1f0:	1884703a 	and	r2,r3,r2
   4b1f4:	1001703a 	wrctl	status,r2
  
  return context;
   4b1f8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   4b1fc:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   4b200:	e0bffd03 	ldbu	r2,-12(fp)
   4b204:	10803fd8 	cmpnei	r2,r2,255
   4b208:	1000051e 	bne	r2,zero,4b220 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   4b20c:	00800174 	movhi	r2,5
   4b210:	108b2404 	addi	r2,r2,11408
   4b214:	10800017 	ldw	r2,0(r2)
   4b218:	10800c83 	ldbu	r2,50(r2)
   4b21c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   4b220:	e0fffd03 	ldbu	r3,-12(fp)
   4b224:	008001b4 	movhi	r2,6
   4b228:	10afab04 	addi	r2,r2,-16724
   4b22c:	18c7883a 	add	r3,r3,r3
   4b230:	18c7883a 	add	r3,r3,r3
   4b234:	10c5883a 	add	r2,r2,r3
   4b238:	10800017 	ldw	r2,0(r2)
   4b23c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   4b240:	e0bff617 	ldw	r2,-40(fp)
   4b244:	1000081e 	bne	r2,zero,4b268 <OSTaskNameSet+0x11c>
   4b248:	e0bff517 	ldw	r2,-44(fp)
   4b24c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b250:	e0bff917 	ldw	r2,-28(fp)
   4b254:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   4b258:	e0bfff17 	ldw	r2,-4(fp)
   4b25c:	00c010c4 	movi	r3,67
   4b260:	10c00005 	stb	r3,0(r2)
        return;
   4b264:	00002406 	br	4b2f8 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   4b268:	e0bff617 	ldw	r2,-40(fp)
   4b26c:	10800058 	cmpnei	r2,r2,1
   4b270:	1000081e 	bne	r2,zero,4b294 <OSTaskNameSet+0x148>
   4b274:	e0bff517 	ldw	r2,-44(fp)
   4b278:	e0bffa15 	stw	r2,-24(fp)
   4b27c:	e0bffa17 	ldw	r2,-24(fp)
   4b280:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   4b284:	e0bfff17 	ldw	r2,-4(fp)
   4b288:	00c010c4 	movi	r3,67
   4b28c:	10c00005 	stb	r3,0(r2)
        return;
   4b290:	00001906 	br	4b2f8 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   4b294:	e13ffe17 	ldw	r4,-8(fp)
   4b298:	0045e1c0 	call	45e1c <OS_StrLen>
   4b29c:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   4b2a0:	e0bff703 	ldbu	r2,-36(fp)
   4b2a4:	10800830 	cmpltui	r2,r2,32
   4b2a8:	1000081e 	bne	r2,zero,4b2cc <OSTaskNameSet+0x180>
   4b2ac:	e0bff517 	ldw	r2,-44(fp)
   4b2b0:	e0bffb15 	stw	r2,-20(fp)
   4b2b4:	e0bffb17 	ldw	r2,-20(fp)
   4b2b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   4b2bc:	e0bfff17 	ldw	r2,-4(fp)
   4b2c0:	00c01044 	movi	r3,65
   4b2c4:	10c00005 	stb	r3,0(r2)
        return;
   4b2c8:	00000b06 	br	4b2f8 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   4b2cc:	e0bff617 	ldw	r2,-40(fp)
   4b2d0:	10801304 	addi	r2,r2,76
   4b2d4:	1009883a 	mov	r4,r2
   4b2d8:	e17ffe17 	ldw	r5,-8(fp)
   4b2dc:	0045da80 	call	45da8 <OS_StrCopy>
   4b2e0:	e0bff517 	ldw	r2,-44(fp)
   4b2e4:	e0bffc15 	stw	r2,-16(fp)
   4b2e8:	e0bffc17 	ldw	r2,-16(fp)
   4b2ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   4b2f0:	e0bfff17 	ldw	r2,-4(fp)
   4b2f4:	10000005 	stb	zero,0(r2)
}
   4b2f8:	e037883a 	mov	sp,fp
   4b2fc:	dfc00117 	ldw	ra,4(sp)
   4b300:	df000017 	ldw	fp,0(sp)
   4b304:	dec00204 	addi	sp,sp,8
   4b308:	f800283a 	ret

0004b30c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   4b30c:	defff404 	addi	sp,sp,-48
   4b310:	dfc00b15 	stw	ra,44(sp)
   4b314:	df000a15 	stw	fp,40(sp)
   4b318:	df000a04 	addi	fp,sp,40
   4b31c:	2005883a 	mov	r2,r4
   4b320:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   4b324:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   4b328:	e0bfff03 	ldbu	r2,-4(fp)
   4b32c:	10800530 	cmpltui	r2,r2,20
   4b330:	1000021e 	bne	r2,zero,4b33c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   4b334:	00800a84 	movi	r2,42
   4b338:	00006d06 	br	4b4f0 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b33c:	0005303a 	rdctl	r2,status
   4b340:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b344:	e0fff817 	ldw	r3,-32(fp)
   4b348:	00bfff84 	movi	r2,-2
   4b34c:	1884703a 	and	r2,r3,r2
   4b350:	1001703a 	wrctl	status,r2
  
  return context;
   4b354:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   4b358:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   4b35c:	e0ffff03 	ldbu	r3,-4(fp)
   4b360:	008001b4 	movhi	r2,6
   4b364:	10afab04 	addi	r2,r2,-16724
   4b368:	18c7883a 	add	r3,r3,r3
   4b36c:	18c7883a 	add	r3,r3,r3
   4b370:	10c5883a 	add	r2,r2,r3
   4b374:	10800017 	ldw	r2,0(r2)
   4b378:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   4b37c:	e0bff717 	ldw	r2,-36(fp)
   4b380:	1000061e 	bne	r2,zero,4b39c <OSTaskResume+0x90>
   4b384:	e0bff617 	ldw	r2,-40(fp)
   4b388:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b38c:	e0bff917 	ldw	r2,-28(fp)
   4b390:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   4b394:	00801184 	movi	r2,70
   4b398:	00005506 	br	4b4f0 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   4b39c:	e0bff717 	ldw	r2,-36(fp)
   4b3a0:	10800058 	cmpnei	r2,r2,1
   4b3a4:	1000061e 	bne	r2,zero,4b3c0 <OSTaskResume+0xb4>
   4b3a8:	e0bff617 	ldw	r2,-40(fp)
   4b3ac:	e0bffa15 	stw	r2,-24(fp)
   4b3b0:	e0bffa17 	ldw	r2,-24(fp)
   4b3b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   4b3b8:	008010c4 	movi	r2,67
   4b3bc:	00004c06 	br	4b4f0 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   4b3c0:	e0bff717 	ldw	r2,-36(fp)
   4b3c4:	10800c03 	ldbu	r2,48(r2)
   4b3c8:	10803fcc 	andi	r2,r2,255
   4b3cc:	1080020c 	andi	r2,r2,8
   4b3d0:	10004226 	beq	r2,zero,4b4dc <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   4b3d4:	e0bff717 	ldw	r2,-36(fp)
   4b3d8:	10c00c03 	ldbu	r3,48(r2)
   4b3dc:	00bffdc4 	movi	r2,-9
   4b3e0:	1884703a 	and	r2,r3,r2
   4b3e4:	1007883a 	mov	r3,r2
   4b3e8:	e0bff717 	ldw	r2,-36(fp)
   4b3ec:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   4b3f0:	e0bff717 	ldw	r2,-36(fp)
   4b3f4:	10800c03 	ldbu	r2,48(r2)
   4b3f8:	10803fcc 	andi	r2,r2,255
   4b3fc:	1000311e 	bne	r2,zero,4b4c4 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   4b400:	e0bff717 	ldw	r2,-36(fp)
   4b404:	10800b8b 	ldhu	r2,46(r2)
   4b408:	10bfffcc 	andi	r2,r2,65535
   4b40c:	1000281e 	bne	r2,zero,4b4b0 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   4b410:	e0bff717 	ldw	r2,-36(fp)
   4b414:	10c00d83 	ldbu	r3,54(r2)
   4b418:	00800174 	movhi	r2,5
   4b41c:	108b2104 	addi	r2,r2,11396
   4b420:	10800003 	ldbu	r2,0(r2)
   4b424:	1884b03a 	or	r2,r3,r2
   4b428:	1007883a 	mov	r3,r2
   4b42c:	00800174 	movhi	r2,5
   4b430:	108b2104 	addi	r2,r2,11396
   4b434:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   4b438:	e0bff717 	ldw	r2,-36(fp)
   4b43c:	10800d03 	ldbu	r2,52(r2)
   4b440:	10c03fcc 	andi	r3,r2,255
   4b444:	e0bff717 	ldw	r2,-36(fp)
   4b448:	10800d03 	ldbu	r2,52(r2)
   4b44c:	11003fcc 	andi	r4,r2,255
   4b450:	00800174 	movhi	r2,5
   4b454:	108b2144 	addi	r2,r2,11397
   4b458:	1105883a 	add	r2,r2,r4
   4b45c:	11000003 	ldbu	r4,0(r2)
   4b460:	e0bff717 	ldw	r2,-36(fp)
   4b464:	10800d43 	ldbu	r2,53(r2)
   4b468:	2084b03a 	or	r2,r4,r2
   4b46c:	1009883a 	mov	r4,r2
   4b470:	00800174 	movhi	r2,5
   4b474:	108b2144 	addi	r2,r2,11397
   4b478:	10c5883a 	add	r2,r2,r3
   4b47c:	11000005 	stb	r4,0(r2)
   4b480:	e0bff617 	ldw	r2,-40(fp)
   4b484:	e0bffb15 	stw	r2,-20(fp)
   4b488:	e0bffb17 	ldw	r2,-20(fp)
   4b48c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   4b490:	00800174 	movhi	r2,5
   4b494:	108b1544 	addi	r2,r2,11349
   4b498:	10800003 	ldbu	r2,0(r2)
   4b49c:	10803fcc 	andi	r2,r2,255
   4b4a0:	10800058 	cmpnei	r2,r2,1
   4b4a4:	10000b1e 	bne	r2,zero,4b4d4 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   4b4a8:	0045c6c0 	call	45c6c <OS_Sched>
   4b4ac:	00000906 	br	4b4d4 <OSTaskResume+0x1c8>
   4b4b0:	e0bff617 	ldw	r2,-40(fp)
   4b4b4:	e0bffc15 	stw	r2,-16(fp)
   4b4b8:	e0bffc17 	ldw	r2,-16(fp)
   4b4bc:	1001703a 	wrctl	status,r2
   4b4c0:	00000406 	br	4b4d4 <OSTaskResume+0x1c8>
   4b4c4:	e0bff617 	ldw	r2,-40(fp)
   4b4c8:	e0bffd15 	stw	r2,-12(fp)
   4b4cc:	e0bffd17 	ldw	r2,-12(fp)
   4b4d0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   4b4d4:	0005883a 	mov	r2,zero
   4b4d8:	00000506 	br	4b4f0 <OSTaskResume+0x1e4>
   4b4dc:	e0bff617 	ldw	r2,-40(fp)
   4b4e0:	e0bffe15 	stw	r2,-8(fp)
   4b4e4:	e0bffe17 	ldw	r2,-8(fp)
   4b4e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   4b4ec:	00801104 	movi	r2,68
}
   4b4f0:	e037883a 	mov	sp,fp
   4b4f4:	dfc00117 	ldw	ra,4(sp)
   4b4f8:	df000017 	ldw	fp,0(sp)
   4b4fc:	dec00204 	addi	sp,sp,8
   4b500:	f800283a 	ret

0004b504 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   4b504:	defff304 	addi	sp,sp,-52
   4b508:	df000c15 	stw	fp,48(sp)
   4b50c:	df000c04 	addi	fp,sp,48
   4b510:	2005883a 	mov	r2,r4
   4b514:	e17fff15 	stw	r5,-4(fp)
   4b518:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   4b51c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   4b520:	e0bffe03 	ldbu	r2,-8(fp)
   4b524:	10800570 	cmpltui	r2,r2,21
   4b528:	1000051e 	bne	r2,zero,4b540 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   4b52c:	e0bffe03 	ldbu	r2,-8(fp)
   4b530:	10803fe0 	cmpeqi	r2,r2,255
   4b534:	1000021e 	bne	r2,zero,4b540 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   4b538:	00800a84 	movi	r2,42
   4b53c:	00005f06 	br	4b6bc <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   4b540:	e0bfff17 	ldw	r2,-4(fp)
   4b544:	1000021e 	bne	r2,zero,4b550 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   4b548:	00800244 	movi	r2,9
   4b54c:	00005b06 	br	4b6bc <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   4b550:	e0bfff17 	ldw	r2,-4(fp)
   4b554:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   4b558:	e0bfff17 	ldw	r2,-4(fp)
   4b55c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b560:	0005303a 	rdctl	r2,status
   4b564:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b568:	e0fff917 	ldw	r3,-28(fp)
   4b56c:	00bfff84 	movi	r2,-2
   4b570:	1884703a 	and	r2,r3,r2
   4b574:	1001703a 	wrctl	status,r2
  
  return context;
   4b578:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   4b57c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   4b580:	e0bffe03 	ldbu	r2,-8(fp)
   4b584:	10803fd8 	cmpnei	r2,r2,255
   4b588:	1000051e 	bne	r2,zero,4b5a0 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   4b58c:	00800174 	movhi	r2,5
   4b590:	108b2404 	addi	r2,r2,11408
   4b594:	10800017 	ldw	r2,0(r2)
   4b598:	10800c83 	ldbu	r2,50(r2)
   4b59c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   4b5a0:	e0fffe03 	ldbu	r3,-8(fp)
   4b5a4:	008001b4 	movhi	r2,6
   4b5a8:	10afab04 	addi	r2,r2,-16724
   4b5ac:	18c7883a 	add	r3,r3,r3
   4b5b0:	18c7883a 	add	r3,r3,r3
   4b5b4:	10c5883a 	add	r2,r2,r3
   4b5b8:	10800017 	ldw	r2,0(r2)
   4b5bc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   4b5c0:	e0bff717 	ldw	r2,-36(fp)
   4b5c4:	1000061e 	bne	r2,zero,4b5e0 <OSTaskStkChk+0xdc>
   4b5c8:	e0bff617 	ldw	r2,-40(fp)
   4b5cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b5d0:	e0bffa17 	ldw	r2,-24(fp)
   4b5d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   4b5d8:	008010c4 	movi	r2,67
   4b5dc:	00003706 	br	4b6bc <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   4b5e0:	e0bff717 	ldw	r2,-36(fp)
   4b5e4:	10800058 	cmpnei	r2,r2,1
   4b5e8:	1000061e 	bne	r2,zero,4b604 <OSTaskStkChk+0x100>
   4b5ec:	e0bff617 	ldw	r2,-40(fp)
   4b5f0:	e0bffb15 	stw	r2,-20(fp)
   4b5f4:	e0bffb17 	ldw	r2,-20(fp)
   4b5f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   4b5fc:	008010c4 	movi	r2,67
   4b600:	00002e06 	br	4b6bc <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   4b604:	e0bff717 	ldw	r2,-36(fp)
   4b608:	1080040b 	ldhu	r2,16(r2)
   4b60c:	10bfffcc 	andi	r2,r2,65535
   4b610:	1080004c 	andi	r2,r2,1
   4b614:	1000061e 	bne	r2,zero,4b630 <OSTaskStkChk+0x12c>
   4b618:	e0bff617 	ldw	r2,-40(fp)
   4b61c:	e0bffc15 	stw	r2,-16(fp)
   4b620:	e0bffc17 	ldw	r2,-16(fp)
   4b624:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   4b628:	00801144 	movi	r2,69
   4b62c:	00002306 	br	4b6bc <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   4b630:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   4b634:	e0bff717 	ldw	r2,-36(fp)
   4b638:	10800317 	ldw	r2,12(r2)
   4b63c:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   4b640:	e0bff717 	ldw	r2,-36(fp)
   4b644:	10800217 	ldw	r2,8(r2)
   4b648:	e0bff415 	stw	r2,-48(fp)
   4b64c:	e0bff617 	ldw	r2,-40(fp)
   4b650:	e0bffd15 	stw	r2,-12(fp)
   4b654:	e0bffd17 	ldw	r2,-12(fp)
   4b658:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   4b65c:	00000306 	br	4b66c <OSTaskStkChk+0x168>
        nfree++;
   4b660:	e0bff517 	ldw	r2,-44(fp)
   4b664:	10800044 	addi	r2,r2,1
   4b668:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   4b66c:	e0bff417 	ldw	r2,-48(fp)
   4b670:	10c00104 	addi	r3,r2,4
   4b674:	e0fff415 	stw	r3,-48(fp)
   4b678:	10800017 	ldw	r2,0(r2)
   4b67c:	103ff826 	beq	r2,zero,4b660 <__alt_data_end+0xfffd5b00>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   4b680:	e0bff517 	ldw	r2,-44(fp)
   4b684:	1085883a 	add	r2,r2,r2
   4b688:	1085883a 	add	r2,r2,r2
   4b68c:	1007883a 	mov	r3,r2
   4b690:	e0bfff17 	ldw	r2,-4(fp)
   4b694:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   4b698:	e0fff817 	ldw	r3,-32(fp)
   4b69c:	e0bff517 	ldw	r2,-44(fp)
   4b6a0:	1885c83a 	sub	r2,r3,r2
   4b6a4:	1085883a 	add	r2,r2,r2
   4b6a8:	1085883a 	add	r2,r2,r2
   4b6ac:	1007883a 	mov	r3,r2
   4b6b0:	e0bfff17 	ldw	r2,-4(fp)
   4b6b4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   4b6b8:	0005883a 	mov	r2,zero
}
   4b6bc:	e037883a 	mov	sp,fp
   4b6c0:	df000017 	ldw	fp,0(sp)
   4b6c4:	dec00104 	addi	sp,sp,4
   4b6c8:	f800283a 	ret

0004b6cc <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   4b6cc:	defff504 	addi	sp,sp,-44
   4b6d0:	dfc00a15 	stw	ra,40(sp)
   4b6d4:	df000915 	stw	fp,36(sp)
   4b6d8:	df000904 	addi	fp,sp,36
   4b6dc:	2005883a 	mov	r2,r4
   4b6e0:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4b6e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   4b6e8:	e0bfff03 	ldbu	r2,-4(fp)
   4b6ec:	10800518 	cmpnei	r2,r2,20
   4b6f0:	1000021e 	bne	r2,zero,4b6fc <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   4b6f4:	008011c4 	movi	r2,71
   4b6f8:	00007406 	br	4b8cc <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   4b6fc:	e0bfff03 	ldbu	r2,-4(fp)
   4b700:	10800530 	cmpltui	r2,r2,20
   4b704:	1000051e 	bne	r2,zero,4b71c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   4b708:	e0bfff03 	ldbu	r2,-4(fp)
   4b70c:	10803fe0 	cmpeqi	r2,r2,255
   4b710:	1000021e 	bne	r2,zero,4b71c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   4b714:	00800a84 	movi	r2,42
   4b718:	00006c06 	br	4b8cc <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b71c:	0005303a 	rdctl	r2,status
   4b720:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b724:	e0fffb17 	ldw	r3,-20(fp)
   4b728:	00bfff84 	movi	r2,-2
   4b72c:	1884703a 	and	r2,r3,r2
   4b730:	1001703a 	wrctl	status,r2
  
  return context;
   4b734:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   4b738:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   4b73c:	e0bfff03 	ldbu	r2,-4(fp)
   4b740:	10803fd8 	cmpnei	r2,r2,255
   4b744:	1000081e 	bne	r2,zero,4b768 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   4b748:	00800174 	movhi	r2,5
   4b74c:	108b2404 	addi	r2,r2,11408
   4b750:	10800017 	ldw	r2,0(r2)
   4b754:	10800c83 	ldbu	r2,50(r2)
   4b758:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   4b75c:	00800044 	movi	r2,1
   4b760:	e0bff705 	stb	r2,-36(fp)
   4b764:	00000b06 	br	4b794 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   4b768:	00800174 	movhi	r2,5
   4b76c:	108b2404 	addi	r2,r2,11408
   4b770:	10800017 	ldw	r2,0(r2)
   4b774:	10800c83 	ldbu	r2,50(r2)
   4b778:	10c03fcc 	andi	r3,r2,255
   4b77c:	e0bfff03 	ldbu	r2,-4(fp)
   4b780:	1880031e 	bne	r3,r2,4b790 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   4b784:	00800044 	movi	r2,1
   4b788:	e0bff705 	stb	r2,-36(fp)
   4b78c:	00000106 	br	4b794 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   4b790:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   4b794:	e0ffff03 	ldbu	r3,-4(fp)
   4b798:	008001b4 	movhi	r2,6
   4b79c:	10afab04 	addi	r2,r2,-16724
   4b7a0:	18c7883a 	add	r3,r3,r3
   4b7a4:	18c7883a 	add	r3,r3,r3
   4b7a8:	10c5883a 	add	r2,r2,r3
   4b7ac:	10800017 	ldw	r2,0(r2)
   4b7b0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   4b7b4:	e0bff917 	ldw	r2,-28(fp)
   4b7b8:	1000061e 	bne	r2,zero,4b7d4 <OSTaskSuspend+0x108>
   4b7bc:	e0bff817 	ldw	r2,-32(fp)
   4b7c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b7c4:	e0bffc17 	ldw	r2,-16(fp)
   4b7c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   4b7cc:	00801204 	movi	r2,72
   4b7d0:	00003e06 	br	4b8cc <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   4b7d4:	e0bff917 	ldw	r2,-28(fp)
   4b7d8:	10800058 	cmpnei	r2,r2,1
   4b7dc:	1000061e 	bne	r2,zero,4b7f8 <OSTaskSuspend+0x12c>
   4b7e0:	e0bff817 	ldw	r2,-32(fp)
   4b7e4:	e0bffd15 	stw	r2,-12(fp)
   4b7e8:	e0bffd17 	ldw	r2,-12(fp)
   4b7ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   4b7f0:	008010c4 	movi	r2,67
   4b7f4:	00003506 	br	4b8cc <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   4b7f8:	e0bff917 	ldw	r2,-28(fp)
   4b7fc:	10800d03 	ldbu	r2,52(r2)
   4b800:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   4b804:	e0fffa03 	ldbu	r3,-24(fp)
   4b808:	e13ffa03 	ldbu	r4,-24(fp)
   4b80c:	00800174 	movhi	r2,5
   4b810:	108b2144 	addi	r2,r2,11397
   4b814:	1105883a 	add	r2,r2,r4
   4b818:	10800003 	ldbu	r2,0(r2)
   4b81c:	1009883a 	mov	r4,r2
   4b820:	e0bff917 	ldw	r2,-28(fp)
   4b824:	10800d43 	ldbu	r2,53(r2)
   4b828:	0084303a 	nor	r2,zero,r2
   4b82c:	2084703a 	and	r2,r4,r2
   4b830:	1009883a 	mov	r4,r2
   4b834:	00800174 	movhi	r2,5
   4b838:	108b2144 	addi	r2,r2,11397
   4b83c:	10c5883a 	add	r2,r2,r3
   4b840:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   4b844:	e0fffa03 	ldbu	r3,-24(fp)
   4b848:	00800174 	movhi	r2,5
   4b84c:	108b2144 	addi	r2,r2,11397
   4b850:	10c5883a 	add	r2,r2,r3
   4b854:	10800003 	ldbu	r2,0(r2)
   4b858:	10803fcc 	andi	r2,r2,255
   4b85c:	10000c1e 	bne	r2,zero,4b890 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   4b860:	e0bff917 	ldw	r2,-28(fp)
   4b864:	10800d83 	ldbu	r2,54(r2)
   4b868:	0084303a 	nor	r2,zero,r2
   4b86c:	1007883a 	mov	r3,r2
   4b870:	00800174 	movhi	r2,5
   4b874:	108b2104 	addi	r2,r2,11396
   4b878:	10800003 	ldbu	r2,0(r2)
   4b87c:	1884703a 	and	r2,r3,r2
   4b880:	1007883a 	mov	r3,r2
   4b884:	00800174 	movhi	r2,5
   4b888:	108b2104 	addi	r2,r2,11396
   4b88c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   4b890:	e0bff917 	ldw	r2,-28(fp)
   4b894:	10800c03 	ldbu	r2,48(r2)
   4b898:	10800214 	ori	r2,r2,8
   4b89c:	1007883a 	mov	r3,r2
   4b8a0:	e0bff917 	ldw	r2,-28(fp)
   4b8a4:	10c00c05 	stb	r3,48(r2)
   4b8a8:	e0bff817 	ldw	r2,-32(fp)
   4b8ac:	e0bffe15 	stw	r2,-8(fp)
   4b8b0:	e0bffe17 	ldw	r2,-8(fp)
   4b8b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   4b8b8:	e0bff703 	ldbu	r2,-36(fp)
   4b8bc:	10800058 	cmpnei	r2,r2,1
   4b8c0:	1000011e 	bne	r2,zero,4b8c8 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   4b8c4:	0045c6c0 	call	45c6c <OS_Sched>
    }
    return (OS_ERR_NONE);
   4b8c8:	0005883a 	mov	r2,zero
}
   4b8cc:	e037883a 	mov	sp,fp
   4b8d0:	dfc00117 	ldw	ra,4(sp)
   4b8d4:	df000017 	ldw	fp,0(sp)
   4b8d8:	dec00204 	addi	sp,sp,8
   4b8dc:	f800283a 	ret

0004b8e0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   4b8e0:	defff604 	addi	sp,sp,-40
   4b8e4:	dfc00915 	stw	ra,36(sp)
   4b8e8:	df000815 	stw	fp,32(sp)
   4b8ec:	df000804 	addi	fp,sp,32
   4b8f0:	2005883a 	mov	r2,r4
   4b8f4:	e17fff15 	stw	r5,-4(fp)
   4b8f8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4b8fc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   4b900:	e0bffe03 	ldbu	r2,-8(fp)
   4b904:	10800570 	cmpltui	r2,r2,21
   4b908:	1000051e 	bne	r2,zero,4b920 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   4b90c:	e0bffe03 	ldbu	r2,-8(fp)
   4b910:	10803fe0 	cmpeqi	r2,r2,255
   4b914:	1000021e 	bne	r2,zero,4b920 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   4b918:	00800a84 	movi	r2,42
   4b91c:	00003606 	br	4b9f8 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   4b920:	e0bfff17 	ldw	r2,-4(fp)
   4b924:	1000021e 	bne	r2,zero,4b930 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   4b928:	00800244 	movi	r2,9
   4b92c:	00003206 	br	4b9f8 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b930:	0005303a 	rdctl	r2,status
   4b934:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b938:	e0fffa17 	ldw	r3,-24(fp)
   4b93c:	00bfff84 	movi	r2,-2
   4b940:	1884703a 	and	r2,r3,r2
   4b944:	1001703a 	wrctl	status,r2
  
  return context;
   4b948:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   4b94c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   4b950:	e0bffe03 	ldbu	r2,-8(fp)
   4b954:	10803fd8 	cmpnei	r2,r2,255
   4b958:	1000051e 	bne	r2,zero,4b970 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   4b95c:	00800174 	movhi	r2,5
   4b960:	108b2404 	addi	r2,r2,11408
   4b964:	10800017 	ldw	r2,0(r2)
   4b968:	10800c83 	ldbu	r2,50(r2)
   4b96c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   4b970:	e0fffe03 	ldbu	r3,-8(fp)
   4b974:	008001b4 	movhi	r2,6
   4b978:	10afab04 	addi	r2,r2,-16724
   4b97c:	18c7883a 	add	r3,r3,r3
   4b980:	18c7883a 	add	r3,r3,r3
   4b984:	10c5883a 	add	r2,r2,r3
   4b988:	10800017 	ldw	r2,0(r2)
   4b98c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   4b990:	e0bff917 	ldw	r2,-28(fp)
   4b994:	1000061e 	bne	r2,zero,4b9b0 <OSTaskQuery+0xd0>
   4b998:	e0bff817 	ldw	r2,-32(fp)
   4b99c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b9a0:	e0bffb17 	ldw	r2,-20(fp)
   4b9a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   4b9a8:	00800a44 	movi	r2,41
   4b9ac:	00001206 	br	4b9f8 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   4b9b0:	e0bff917 	ldw	r2,-28(fp)
   4b9b4:	10800058 	cmpnei	r2,r2,1
   4b9b8:	1000061e 	bne	r2,zero,4b9d4 <OSTaskQuery+0xf4>
   4b9bc:	e0bff817 	ldw	r2,-32(fp)
   4b9c0:	e0bffc15 	stw	r2,-16(fp)
   4b9c4:	e0bffc17 	ldw	r2,-16(fp)
   4b9c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   4b9cc:	008010c4 	movi	r2,67
   4b9d0:	00000906 	br	4b9f8 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   4b9d4:	e13fff17 	ldw	r4,-4(fp)
   4b9d8:	e17ff917 	ldw	r5,-28(fp)
   4b9dc:	01801b04 	movi	r6,108
   4b9e0:	0045c080 	call	45c08 <OS_MemCopy>
   4b9e4:	e0bff817 	ldw	r2,-32(fp)
   4b9e8:	e0bffd15 	stw	r2,-12(fp)
   4b9ec:	e0bffd17 	ldw	r2,-12(fp)
   4b9f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   4b9f4:	0005883a 	mov	r2,zero
}
   4b9f8:	e037883a 	mov	sp,fp
   4b9fc:	dfc00117 	ldw	ra,4(sp)
   4ba00:	df000017 	ldw	fp,0(sp)
   4ba04:	dec00204 	addi	sp,sp,8
   4ba08:	f800283a 	ret

0004ba0c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   4ba0c:	defffc04 	addi	sp,sp,-16
   4ba10:	df000315 	stw	fp,12(sp)
   4ba14:	df000304 	addi	fp,sp,12
   4ba18:	e13ffd15 	stw	r4,-12(fp)
   4ba1c:	e17ffe15 	stw	r5,-8(fp)
   4ba20:	3005883a 	mov	r2,r6
   4ba24:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   4ba28:	e0bfff0b 	ldhu	r2,-4(fp)
   4ba2c:	1080004c 	andi	r2,r2,1
   4ba30:	10000d26 	beq	r2,zero,4ba68 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   4ba34:	e0bfff0b 	ldhu	r2,-4(fp)
   4ba38:	1080008c 	andi	r2,r2,2
   4ba3c:	10000a26 	beq	r2,zero,4ba68 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   4ba40:	00000706 	br	4ba60 <OS_TaskStkClr+0x54>
                size--;
   4ba44:	e0bffe17 	ldw	r2,-8(fp)
   4ba48:	10bfffc4 	addi	r2,r2,-1
   4ba4c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   4ba50:	e0bffd17 	ldw	r2,-12(fp)
   4ba54:	10c00104 	addi	r3,r2,4
   4ba58:	e0fffd15 	stw	r3,-12(fp)
   4ba5c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   4ba60:	e0bffe17 	ldw	r2,-8(fp)
   4ba64:	103ff71e 	bne	r2,zero,4ba44 <__alt_data_end+0xfffd5ee4>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   4ba68:	e037883a 	mov	sp,fp
   4ba6c:	df000017 	ldw	fp,0(sp)
   4ba70:	dec00104 	addi	sp,sp,4
   4ba74:	f800283a 	ret

0004ba78 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   4ba78:	defff904 	addi	sp,sp,-28
   4ba7c:	dfc00615 	stw	ra,24(sp)
   4ba80:	df000515 	stw	fp,20(sp)
   4ba84:	df000504 	addi	fp,sp,20
   4ba88:	2005883a 	mov	r2,r4
   4ba8c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4ba90:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   4ba94:	00800174 	movhi	r2,5
   4ba98:	108b2304 	addi	r2,r2,11404
   4ba9c:	10800003 	ldbu	r2,0(r2)
   4baa0:	10803fcc 	andi	r2,r2,255
   4baa4:	10000126 	beq	r2,zero,4baac <OSTimeDly+0x34>
        return;
   4baa8:	00004006 	br	4bbac <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   4baac:	e0bfff0b 	ldhu	r2,-4(fp)
   4bab0:	10003e26 	beq	r2,zero,4bbac <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bab4:	0005303a 	rdctl	r2,status
   4bab8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4babc:	e0fffd17 	ldw	r3,-12(fp)
   4bac0:	00bfff84 	movi	r2,-2
   4bac4:	1884703a 	and	r2,r3,r2
   4bac8:	1001703a 	wrctl	status,r2
  
  return context;
   4bacc:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   4bad0:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   4bad4:	00800174 	movhi	r2,5
   4bad8:	108b2404 	addi	r2,r2,11408
   4badc:	10800017 	ldw	r2,0(r2)
   4bae0:	10800d03 	ldbu	r2,52(r2)
   4bae4:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   4bae8:	e0fffc03 	ldbu	r3,-16(fp)
   4baec:	e13ffc03 	ldbu	r4,-16(fp)
   4baf0:	00800174 	movhi	r2,5
   4baf4:	108b2144 	addi	r2,r2,11397
   4baf8:	1105883a 	add	r2,r2,r4
   4bafc:	10800003 	ldbu	r2,0(r2)
   4bb00:	1009883a 	mov	r4,r2
   4bb04:	00800174 	movhi	r2,5
   4bb08:	108b2404 	addi	r2,r2,11408
   4bb0c:	10800017 	ldw	r2,0(r2)
   4bb10:	10800d43 	ldbu	r2,53(r2)
   4bb14:	0084303a 	nor	r2,zero,r2
   4bb18:	2084703a 	and	r2,r4,r2
   4bb1c:	1009883a 	mov	r4,r2
   4bb20:	00800174 	movhi	r2,5
   4bb24:	108b2144 	addi	r2,r2,11397
   4bb28:	10c5883a 	add	r2,r2,r3
   4bb2c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   4bb30:	e0fffc03 	ldbu	r3,-16(fp)
   4bb34:	00800174 	movhi	r2,5
   4bb38:	108b2144 	addi	r2,r2,11397
   4bb3c:	10c5883a 	add	r2,r2,r3
   4bb40:	10800003 	ldbu	r2,0(r2)
   4bb44:	10803fcc 	andi	r2,r2,255
   4bb48:	10000e1e 	bne	r2,zero,4bb84 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   4bb4c:	00800174 	movhi	r2,5
   4bb50:	108b2404 	addi	r2,r2,11408
   4bb54:	10800017 	ldw	r2,0(r2)
   4bb58:	10800d83 	ldbu	r2,54(r2)
   4bb5c:	0084303a 	nor	r2,zero,r2
   4bb60:	1007883a 	mov	r3,r2
   4bb64:	00800174 	movhi	r2,5
   4bb68:	108b2104 	addi	r2,r2,11396
   4bb6c:	10800003 	ldbu	r2,0(r2)
   4bb70:	1884703a 	and	r2,r3,r2
   4bb74:	1007883a 	mov	r3,r2
   4bb78:	00800174 	movhi	r2,5
   4bb7c:	108b2104 	addi	r2,r2,11396
   4bb80:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   4bb84:	00800174 	movhi	r2,5
   4bb88:	108b2404 	addi	r2,r2,11408
   4bb8c:	10800017 	ldw	r2,0(r2)
   4bb90:	e0ffff0b 	ldhu	r3,-4(fp)
   4bb94:	10c00b8d 	sth	r3,46(r2)
   4bb98:	e0bffb17 	ldw	r2,-20(fp)
   4bb9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bba0:	e0bffe17 	ldw	r2,-8(fp)
   4bba4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   4bba8:	0045c6c0 	call	45c6c <OS_Sched>
    }
}
   4bbac:	e037883a 	mov	sp,fp
   4bbb0:	dfc00117 	ldw	ra,4(sp)
   4bbb4:	df000017 	ldw	fp,0(sp)
   4bbb8:	dec00204 	addi	sp,sp,8
   4bbbc:	f800283a 	ret

0004bbc0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   4bbc0:	defff704 	addi	sp,sp,-36
   4bbc4:	dfc00815 	stw	ra,32(sp)
   4bbc8:	df000715 	stw	fp,28(sp)
   4bbcc:	dc000615 	stw	r16,24(sp)
   4bbd0:	df000704 	addi	fp,sp,28
   4bbd4:	2011883a 	mov	r8,r4
   4bbd8:	2809883a 	mov	r4,r5
   4bbdc:	3007883a 	mov	r3,r6
   4bbe0:	3805883a 	mov	r2,r7
   4bbe4:	e23ffb05 	stb	r8,-20(fp)
   4bbe8:	e13ffc05 	stb	r4,-16(fp)
   4bbec:	e0fffd05 	stb	r3,-12(fp)
   4bbf0:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   4bbf4:	00800174 	movhi	r2,5
   4bbf8:	108b2304 	addi	r2,r2,11404
   4bbfc:	10800003 	ldbu	r2,0(r2)
   4bc00:	10803fcc 	andi	r2,r2,255
   4bc04:	10000226 	beq	r2,zero,4bc10 <OSTimeDlyHMSM+0x50>
        return (OS_ERR_TIME_DLY_ISR);
   4bc08:	00801544 	movi	r2,85
   4bc0c:	00004706 	br	4bd2c <OSTimeDlyHMSM+0x16c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   4bc10:	e0bffb03 	ldbu	r2,-20(fp)
   4bc14:	1000081e 	bne	r2,zero,4bc38 <OSTimeDlyHMSM+0x78>
        if (minutes == 0) {
   4bc18:	e0bffc03 	ldbu	r2,-16(fp)
   4bc1c:	1000061e 	bne	r2,zero,4bc38 <OSTimeDlyHMSM+0x78>
            if (seconds == 0) {
   4bc20:	e0bffd03 	ldbu	r2,-12(fp)
   4bc24:	1000041e 	bne	r2,zero,4bc38 <OSTimeDlyHMSM+0x78>
                if (ms == 0) {
   4bc28:	e0bffe0b 	ldhu	r2,-8(fp)
   4bc2c:	1000021e 	bne	r2,zero,4bc38 <OSTimeDlyHMSM+0x78>
                    return (OS_ERR_TIME_ZERO_DLY);
   4bc30:	00801504 	movi	r2,84
   4bc34:	00003d06 	br	4bd2c <OSTimeDlyHMSM+0x16c>
                }
            }
        }
    }
    if (minutes > 59) {
   4bc38:	e0bffc03 	ldbu	r2,-16(fp)
   4bc3c:	10800f30 	cmpltui	r2,r2,60
   4bc40:	1000021e 	bne	r2,zero,4bc4c <OSTimeDlyHMSM+0x8c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   4bc44:	00801444 	movi	r2,81
   4bc48:	00003806 	br	4bd2c <OSTimeDlyHMSM+0x16c>
    }
    if (seconds > 59) {
   4bc4c:	e0bffd03 	ldbu	r2,-12(fp)
   4bc50:	10800f30 	cmpltui	r2,r2,60
   4bc54:	1000021e 	bne	r2,zero,4bc60 <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_SECONDS);
   4bc58:	00801484 	movi	r2,82
   4bc5c:	00003306 	br	4bd2c <OSTimeDlyHMSM+0x16c>
    }
    if (ms > 999) {
   4bc60:	e0bffe0b 	ldhu	r2,-8(fp)
   4bc64:	1080fa30 	cmpltui	r2,r2,1000
   4bc68:	1000021e 	bne	r2,zero,4bc74 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_MS);
   4bc6c:	008014c4 	movi	r2,83
   4bc70:	00002e06 	br	4bd2c <OSTimeDlyHMSM+0x16c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   4bc74:	e0bffb03 	ldbu	r2,-20(fp)
   4bc78:	1009883a 	mov	r4,r2
   4bc7c:	01438404 	movi	r5,3600
   4bc80:	00436100 	call	43610 <__mulsi3>
   4bc84:	1021883a 	mov	r16,r2
   4bc88:	e0bffc03 	ldbu	r2,-16(fp)
   4bc8c:	1009883a 	mov	r4,r2
   4bc90:	01400f04 	movi	r5,60
   4bc94:	00436100 	call	43610 <__mulsi3>
   4bc98:	8087883a 	add	r3,r16,r2
   4bc9c:	e0bffd03 	ldbu	r2,-12(fp)
   4bca0:	1885883a 	add	r2,r3,r2
   4bca4:	1009883a 	mov	r4,r2
   4bca8:	0140fa04 	movi	r5,1000
   4bcac:	00436100 	call	43610 <__mulsi3>
   4bcb0:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   4bcb4:	e0bffe0b 	ldhu	r2,-8(fp)
   4bcb8:	1009883a 	mov	r4,r2
   4bcbc:	0140fa04 	movi	r5,1000
   4bcc0:	00436100 	call	43610 <__mulsi3>
   4bcc4:	1009883a 	mov	r4,r2
   4bcc8:	0140fa04 	movi	r5,1000
   4bccc:	004f2d40 	call	4f2d4 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   4bcd0:	8085883a 	add	r2,r16,r2
   4bcd4:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   4bcd8:	e0bffa17 	ldw	r2,-24(fp)
   4bcdc:	1004d43a 	srli	r2,r2,16
   4bce0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   4bce4:	e0bffa17 	ldw	r2,-24(fp)
   4bce8:	10bfffcc 	andi	r2,r2,65535
   4bcec:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   4bcf0:	e0bffa17 	ldw	r2,-24(fp)
   4bcf4:	10bfffcc 	andi	r2,r2,65535
   4bcf8:	1009883a 	mov	r4,r2
   4bcfc:	004ba780 	call	4ba78 <OSTimeDly>
    while (loops > 0) {
   4bd00:	00000706 	br	4bd20 <OSTimeDlyHMSM+0x160>
        OSTimeDly((INT16U)32768u);
   4bd04:	01200014 	movui	r4,32768
   4bd08:	004ba780 	call	4ba78 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   4bd0c:	01200014 	movui	r4,32768
   4bd10:	004ba780 	call	4ba78 <OSTimeDly>
        loops--;
   4bd14:	e0bff90b 	ldhu	r2,-28(fp)
   4bd18:	10bfffc4 	addi	r2,r2,-1
   4bd1c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   4bd20:	e0bff90b 	ldhu	r2,-28(fp)
   4bd24:	103ff71e 	bne	r2,zero,4bd04 <__alt_data_end+0xfffd61a4>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   4bd28:	0005883a 	mov	r2,zero
}
   4bd2c:	e6ffff04 	addi	sp,fp,-4
   4bd30:	dfc00217 	ldw	ra,8(sp)
   4bd34:	df000117 	ldw	fp,4(sp)
   4bd38:	dc000017 	ldw	r16,0(sp)
   4bd3c:	dec00304 	addi	sp,sp,12
   4bd40:	f800283a 	ret

0004bd44 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   4bd44:	defff504 	addi	sp,sp,-44
   4bd48:	dfc00a15 	stw	ra,40(sp)
   4bd4c:	df000915 	stw	fp,36(sp)
   4bd50:	df000904 	addi	fp,sp,36
   4bd54:	2005883a 	mov	r2,r4
   4bd58:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   4bd5c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   4bd60:	e0bfff03 	ldbu	r2,-4(fp)
   4bd64:	10800530 	cmpltui	r2,r2,20
   4bd68:	1000021e 	bne	r2,zero,4bd74 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   4bd6c:	00800a84 	movi	r2,42
   4bd70:	00006b06 	br	4bf20 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bd74:	0005303a 	rdctl	r2,status
   4bd78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bd7c:	e0fff917 	ldw	r3,-28(fp)
   4bd80:	00bfff84 	movi	r2,-2
   4bd84:	1884703a 	and	r2,r3,r2
   4bd88:	1001703a 	wrctl	status,r2
  
  return context;
   4bd8c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   4bd90:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   4bd94:	e0ffff03 	ldbu	r3,-4(fp)
   4bd98:	008001b4 	movhi	r2,6
   4bd9c:	10afab04 	addi	r2,r2,-16724
   4bda0:	18c7883a 	add	r3,r3,r3
   4bda4:	18c7883a 	add	r3,r3,r3
   4bda8:	10c5883a 	add	r2,r2,r3
   4bdac:	10800017 	ldw	r2,0(r2)
   4bdb0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   4bdb4:	e0bff817 	ldw	r2,-32(fp)
   4bdb8:	1000061e 	bne	r2,zero,4bdd4 <OSTimeDlyResume+0x90>
   4bdbc:	e0bff717 	ldw	r2,-36(fp)
   4bdc0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bdc4:	e0bffa17 	ldw	r2,-24(fp)
   4bdc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   4bdcc:	008010c4 	movi	r2,67
   4bdd0:	00005306 	br	4bf20 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   4bdd4:	e0bff817 	ldw	r2,-32(fp)
   4bdd8:	10800058 	cmpnei	r2,r2,1
   4bddc:	1000061e 	bne	r2,zero,4bdf8 <OSTimeDlyResume+0xb4>
   4bde0:	e0bff717 	ldw	r2,-36(fp)
   4bde4:	e0bffb15 	stw	r2,-20(fp)
   4bde8:	e0bffb17 	ldw	r2,-20(fp)
   4bdec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   4bdf0:	008010c4 	movi	r2,67
   4bdf4:	00004a06 	br	4bf20 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   4bdf8:	e0bff817 	ldw	r2,-32(fp)
   4bdfc:	10800b8b 	ldhu	r2,46(r2)
   4be00:	10bfffcc 	andi	r2,r2,65535
   4be04:	1000061e 	bne	r2,zero,4be20 <OSTimeDlyResume+0xdc>
   4be08:	e0bff717 	ldw	r2,-36(fp)
   4be0c:	e0bffc15 	stw	r2,-16(fp)
   4be10:	e0bffc17 	ldw	r2,-16(fp)
   4be14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   4be18:	00801404 	movi	r2,80
   4be1c:	00004006 	br	4bf20 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   4be20:	e0bff817 	ldw	r2,-32(fp)
   4be24:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   4be28:	e0bff817 	ldw	r2,-32(fp)
   4be2c:	10800c03 	ldbu	r2,48(r2)
   4be30:	10803fcc 	andi	r2,r2,255
   4be34:	10800dcc 	andi	r2,r2,55
   4be38:	10000b26 	beq	r2,zero,4be68 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   4be3c:	e0bff817 	ldw	r2,-32(fp)
   4be40:	10c00c03 	ldbu	r3,48(r2)
   4be44:	00bff204 	movi	r2,-56
   4be48:	1884703a 	and	r2,r3,r2
   4be4c:	1007883a 	mov	r3,r2
   4be50:	e0bff817 	ldw	r2,-32(fp)
   4be54:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   4be58:	e0bff817 	ldw	r2,-32(fp)
   4be5c:	00c00044 	movi	r3,1
   4be60:	10c00c45 	stb	r3,49(r2)
   4be64:	00000206 	br	4be70 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   4be68:	e0bff817 	ldw	r2,-32(fp)
   4be6c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   4be70:	e0bff817 	ldw	r2,-32(fp)
   4be74:	10800c03 	ldbu	r2,48(r2)
   4be78:	10803fcc 	andi	r2,r2,255
   4be7c:	1080020c 	andi	r2,r2,8
   4be80:	1000221e 	bne	r2,zero,4bf0c <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   4be84:	e0bff817 	ldw	r2,-32(fp)
   4be88:	10c00d83 	ldbu	r3,54(r2)
   4be8c:	00800174 	movhi	r2,5
   4be90:	108b2104 	addi	r2,r2,11396
   4be94:	10800003 	ldbu	r2,0(r2)
   4be98:	1884b03a 	or	r2,r3,r2
   4be9c:	1007883a 	mov	r3,r2
   4bea0:	00800174 	movhi	r2,5
   4bea4:	108b2104 	addi	r2,r2,11396
   4bea8:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   4beac:	e0bff817 	ldw	r2,-32(fp)
   4beb0:	10800d03 	ldbu	r2,52(r2)
   4beb4:	10c03fcc 	andi	r3,r2,255
   4beb8:	e0bff817 	ldw	r2,-32(fp)
   4bebc:	10800d03 	ldbu	r2,52(r2)
   4bec0:	11003fcc 	andi	r4,r2,255
   4bec4:	00800174 	movhi	r2,5
   4bec8:	108b2144 	addi	r2,r2,11397
   4becc:	1105883a 	add	r2,r2,r4
   4bed0:	11000003 	ldbu	r4,0(r2)
   4bed4:	e0bff817 	ldw	r2,-32(fp)
   4bed8:	10800d43 	ldbu	r2,53(r2)
   4bedc:	2084b03a 	or	r2,r4,r2
   4bee0:	1009883a 	mov	r4,r2
   4bee4:	00800174 	movhi	r2,5
   4bee8:	108b2144 	addi	r2,r2,11397
   4beec:	10c5883a 	add	r2,r2,r3
   4bef0:	11000005 	stb	r4,0(r2)
   4bef4:	e0bff717 	ldw	r2,-36(fp)
   4bef8:	e0bffd15 	stw	r2,-12(fp)
   4befc:	e0bffd17 	ldw	r2,-12(fp)
   4bf00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   4bf04:	0045c6c0 	call	45c6c <OS_Sched>
   4bf08:	00000406 	br	4bf1c <OSTimeDlyResume+0x1d8>
   4bf0c:	e0bff717 	ldw	r2,-36(fp)
   4bf10:	e0bffe15 	stw	r2,-8(fp)
   4bf14:	e0bffe17 	ldw	r2,-8(fp)
   4bf18:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   4bf1c:	0005883a 	mov	r2,zero
}
   4bf20:	e037883a 	mov	sp,fp
   4bf24:	dfc00117 	ldw	ra,4(sp)
   4bf28:	df000017 	ldw	fp,0(sp)
   4bf2c:	dec00204 	addi	sp,sp,8
   4bf30:	f800283a 	ret

0004bf34 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   4bf34:	defffb04 	addi	sp,sp,-20
   4bf38:	df000415 	stw	fp,16(sp)
   4bf3c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4bf40:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bf44:	0005303a 	rdctl	r2,status
   4bf48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bf4c:	e0fffe17 	ldw	r3,-8(fp)
   4bf50:	00bfff84 	movi	r2,-2
   4bf54:	1884703a 	and	r2,r3,r2
   4bf58:	1001703a 	wrctl	status,r2
  
  return context;
   4bf5c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   4bf60:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   4bf64:	00800174 	movhi	r2,5
   4bf68:	108b2504 	addi	r2,r2,11412
   4bf6c:	10800017 	ldw	r2,0(r2)
   4bf70:	e0bffd15 	stw	r2,-12(fp)
   4bf74:	e0bffc17 	ldw	r2,-16(fp)
   4bf78:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bf7c:	e0bfff17 	ldw	r2,-4(fp)
   4bf80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   4bf84:	e0bffd17 	ldw	r2,-12(fp)
}
   4bf88:	e037883a 	mov	sp,fp
   4bf8c:	df000017 	ldw	fp,0(sp)
   4bf90:	dec00104 	addi	sp,sp,4
   4bf94:	f800283a 	ret

0004bf98 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   4bf98:	defffb04 	addi	sp,sp,-20
   4bf9c:	df000415 	stw	fp,16(sp)
   4bfa0:	df000404 	addi	fp,sp,16
   4bfa4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4bfa8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bfac:	0005303a 	rdctl	r2,status
   4bfb0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bfb4:	e0fffd17 	ldw	r3,-12(fp)
   4bfb8:	00bfff84 	movi	r2,-2
   4bfbc:	1884703a 	and	r2,r3,r2
   4bfc0:	1001703a 	wrctl	status,r2
  
  return context;
   4bfc4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   4bfc8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   4bfcc:	00800174 	movhi	r2,5
   4bfd0:	108b2504 	addi	r2,r2,11412
   4bfd4:	e0ffff17 	ldw	r3,-4(fp)
   4bfd8:	10c00015 	stw	r3,0(r2)
   4bfdc:	e0bffc17 	ldw	r2,-16(fp)
   4bfe0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bfe4:	e0bffe17 	ldw	r2,-8(fp)
   4bfe8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   4bfec:	e037883a 	mov	sp,fp
   4bff0:	df000017 	ldw	fp,0(sp)
   4bff4:	dec00104 	addi	sp,sp,4
   4bff8:	f800283a 	ret

0004bffc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4bffc:	defffd04 	addi	sp,sp,-12
   4c000:	dfc00215 	stw	ra,8(sp)
   4c004:	df000115 	stw	fp,4(sp)
   4c008:	df000104 	addi	fp,sp,4
   4c00c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4c010:	e13fff17 	ldw	r4,-4(fp)
   4c014:	01400174 	movhi	r5,5
   4c018:	2943f104 	addi	r5,r5,4036
   4c01c:	004dc280 	call	4dc28 <alt_dev_llist_insert>
}
   4c020:	e037883a 	mov	sp,fp
   4c024:	dfc00117 	ldw	ra,4(sp)
   4c028:	df000017 	ldw	fp,0(sp)
   4c02c:	dec00204 	addi	sp,sp,8
   4c030:	f800283a 	ret

0004c034 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4c034:	defffd04 	addi	sp,sp,-12
   4c038:	dfc00215 	stw	ra,8(sp)
   4c03c:	df000115 	stw	fp,4(sp)
   4c040:	df000104 	addi	fp,sp,4
   4c044:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   4c048:	004e6080 	call	4e608 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4c04c:	00800044 	movi	r2,1
   4c050:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4c054:	e037883a 	mov	sp,fp
   4c058:	dfc00117 	ldw	ra,4(sp)
   4c05c:	df000017 	ldw	fp,0(sp)
   4c060:	dec00204 	addi	sp,sp,8
   4c064:	f800283a 	ret

0004c068 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4c068:	defffe04 	addi	sp,sp,-8
   4c06c:	dfc00115 	stw	ra,4(sp)
   4c070:	df000015 	stw	fp,0(sp)
   4c074:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK, sys_clk);
   4c078:	01040004 	movi	r4,4096
   4c07c:	000b883a 	mov	r5,zero
   4c080:	01800084 	movi	r6,2
   4c084:	01c0fa04 	movi	r7,1000
   4c088:	004ce800 	call	4ce80 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4c08c:	01000174 	movhi	r4,5
   4c090:	213fa604 	addi	r4,r4,-360
   4c094:	000b883a 	mov	r5,zero
   4c098:	018000c4 	movi	r6,3
   4c09c:	004c2440 	call	4c244 <altera_avalon_jtag_uart_init>
   4c0a0:	01000174 	movhi	r4,5
   4c0a4:	213f9c04 	addi	r4,r4,-400
   4c0a8:	004bffc0 	call	4bffc <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
   4c0ac:	01000174 	movhi	r4,5
   4c0b0:	2103c104 	addi	r4,r4,3844
   4c0b4:	000b883a 	mov	r5,zero
   4c0b8:	01800044 	movi	r6,1
   4c0bc:	004d0180 	call	4d018 <altera_avalon_uart_init>
   4c0c0:	01000174 	movhi	r4,5
   4c0c4:	2103b704 	addi	r4,r4,3804
   4c0c8:	004bffc0 	call	4bffc <alt_dev_reg>
}
   4c0cc:	e037883a 	mov	sp,fp
   4c0d0:	dfc00117 	ldw	ra,4(sp)
   4c0d4:	df000017 	ldw	fp,0(sp)
   4c0d8:	dec00204 	addi	sp,sp,8
   4c0dc:	f800283a 	ret

0004c0e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4c0e0:	defffa04 	addi	sp,sp,-24
   4c0e4:	dfc00515 	stw	ra,20(sp)
   4c0e8:	df000415 	stw	fp,16(sp)
   4c0ec:	df000404 	addi	fp,sp,16
   4c0f0:	e13ffd15 	stw	r4,-12(fp)
   4c0f4:	e17ffe15 	stw	r5,-8(fp)
   4c0f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4c0fc:	e0bffd17 	ldw	r2,-12(fp)
   4c100:	10800017 	ldw	r2,0(r2)
   4c104:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4c108:	e0bffc17 	ldw	r2,-16(fp)
   4c10c:	10c00a04 	addi	r3,r2,40
   4c110:	e0bffd17 	ldw	r2,-12(fp)
   4c114:	10800217 	ldw	r2,8(r2)
   4c118:	1809883a 	mov	r4,r3
   4c11c:	e17ffe17 	ldw	r5,-8(fp)
   4c120:	e1bfff17 	ldw	r6,-4(fp)
   4c124:	100f883a 	mov	r7,r2
   4c128:	004c8980 	call	4c898 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4c12c:	e037883a 	mov	sp,fp
   4c130:	dfc00117 	ldw	ra,4(sp)
   4c134:	df000017 	ldw	fp,0(sp)
   4c138:	dec00204 	addi	sp,sp,8
   4c13c:	f800283a 	ret

0004c140 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4c140:	defffa04 	addi	sp,sp,-24
   4c144:	dfc00515 	stw	ra,20(sp)
   4c148:	df000415 	stw	fp,16(sp)
   4c14c:	df000404 	addi	fp,sp,16
   4c150:	e13ffd15 	stw	r4,-12(fp)
   4c154:	e17ffe15 	stw	r5,-8(fp)
   4c158:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4c15c:	e0bffd17 	ldw	r2,-12(fp)
   4c160:	10800017 	ldw	r2,0(r2)
   4c164:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4c168:	e0bffc17 	ldw	r2,-16(fp)
   4c16c:	10c00a04 	addi	r3,r2,40
   4c170:	e0bffd17 	ldw	r2,-12(fp)
   4c174:	10800217 	ldw	r2,8(r2)
   4c178:	1809883a 	mov	r4,r3
   4c17c:	e17ffe17 	ldw	r5,-8(fp)
   4c180:	e1bfff17 	ldw	r6,-4(fp)
   4c184:	100f883a 	mov	r7,r2
   4c188:	004cb4c0 	call	4cb4c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4c18c:	e037883a 	mov	sp,fp
   4c190:	dfc00117 	ldw	ra,4(sp)
   4c194:	df000017 	ldw	fp,0(sp)
   4c198:	dec00204 	addi	sp,sp,8
   4c19c:	f800283a 	ret

0004c1a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4c1a0:	defffc04 	addi	sp,sp,-16
   4c1a4:	dfc00315 	stw	ra,12(sp)
   4c1a8:	df000215 	stw	fp,8(sp)
   4c1ac:	df000204 	addi	fp,sp,8
   4c1b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4c1b4:	e0bfff17 	ldw	r2,-4(fp)
   4c1b8:	10800017 	ldw	r2,0(r2)
   4c1bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4c1c0:	e0bffe17 	ldw	r2,-8(fp)
   4c1c4:	10c00a04 	addi	r3,r2,40
   4c1c8:	e0bfff17 	ldw	r2,-4(fp)
   4c1cc:	10800217 	ldw	r2,8(r2)
   4c1d0:	1809883a 	mov	r4,r3
   4c1d4:	100b883a 	mov	r5,r2
   4c1d8:	004c7440 	call	4c744 <altera_avalon_jtag_uart_close>
}
   4c1dc:	e037883a 	mov	sp,fp
   4c1e0:	dfc00117 	ldw	ra,4(sp)
   4c1e4:	df000017 	ldw	fp,0(sp)
   4c1e8:	dec00204 	addi	sp,sp,8
   4c1ec:	f800283a 	ret

0004c1f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4c1f0:	defffa04 	addi	sp,sp,-24
   4c1f4:	dfc00515 	stw	ra,20(sp)
   4c1f8:	df000415 	stw	fp,16(sp)
   4c1fc:	df000404 	addi	fp,sp,16
   4c200:	e13ffd15 	stw	r4,-12(fp)
   4c204:	e17ffe15 	stw	r5,-8(fp)
   4c208:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4c20c:	e0bffd17 	ldw	r2,-12(fp)
   4c210:	10800017 	ldw	r2,0(r2)
   4c214:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4c218:	e0bffc17 	ldw	r2,-16(fp)
   4c21c:	10800a04 	addi	r2,r2,40
   4c220:	1009883a 	mov	r4,r2
   4c224:	e17ffe17 	ldw	r5,-8(fp)
   4c228:	e1bfff17 	ldw	r6,-4(fp)
   4c22c:	004c7ac0 	call	4c7ac <altera_avalon_jtag_uart_ioctl>
}
   4c230:	e037883a 	mov	sp,fp
   4c234:	dfc00117 	ldw	ra,4(sp)
   4c238:	df000017 	ldw	fp,0(sp)
   4c23c:	dec00204 	addi	sp,sp,8
   4c240:	f800283a 	ret

0004c244 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4c244:	defff004 	addi	sp,sp,-64
   4c248:	dfc00f15 	stw	ra,60(sp)
   4c24c:	df000e15 	stw	fp,56(sp)
   4c250:	df000e04 	addi	fp,sp,56
   4c254:	e13ff915 	stw	r4,-28(fp)
   4c258:	e17ffa15 	stw	r5,-24(fp)
   4c25c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   4c260:	e0bff917 	ldw	r2,-28(fp)
   4c264:	10800c04 	addi	r2,r2,48
   4c268:	e0bff315 	stw	r2,-52(fp)
   4c26c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   4c270:	e0fff40b 	ldhu	r3,-48(fp)
   4c274:	e0bff884 	addi	r2,fp,-30
   4c278:	1809883a 	mov	r4,r3
   4c27c:	100b883a 	mov	r5,r2
   4c280:	00467c80 	call	467c8 <OSFlagCreate>
   4c284:	1007883a 	mov	r3,r2
   4c288:	e0bff317 	ldw	r2,-52(fp)
   4c28c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   4c290:	e0bff917 	ldw	r2,-28(fp)
   4c294:	10800a04 	addi	r2,r2,40
   4c298:	e0bff515 	stw	r2,-44(fp)
   4c29c:	00800044 	movi	r2,1
   4c2a0:	e0bff60d 	sth	r2,-40(fp)
   4c2a4:	e0bff60b 	ldhu	r2,-40(fp)
   4c2a8:	1009883a 	mov	r4,r2
   4c2ac:	004972c0 	call	4972c <OSSemCreate>
   4c2b0:	1007883a 	mov	r3,r2
   4c2b4:	e0bff517 	ldw	r2,-44(fp)
   4c2b8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   4c2bc:	e0bff917 	ldw	r2,-28(fp)
   4c2c0:	10800b04 	addi	r2,r2,44
   4c2c4:	e0bff715 	stw	r2,-36(fp)
   4c2c8:	00800044 	movi	r2,1
   4c2cc:	e0bff80d 	sth	r2,-32(fp)
   4c2d0:	e0bff80b 	ldhu	r2,-32(fp)
   4c2d4:	1009883a 	mov	r4,r2
   4c2d8:	004972c0 	call	4972c <OSSemCreate>
   4c2dc:	1007883a 	mov	r3,r2
   4c2e0:	e0bff717 	ldw	r2,-36(fp)
   4c2e4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4c2e8:	e0bff917 	ldw	r2,-28(fp)
   4c2ec:	00c00044 	movi	r3,1
   4c2f0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4c2f4:	e0bff917 	ldw	r2,-28(fp)
   4c2f8:	10800017 	ldw	r2,0(r2)
   4c2fc:	10800104 	addi	r2,r2,4
   4c300:	1007883a 	mov	r3,r2
   4c304:	e0bff917 	ldw	r2,-28(fp)
   4c308:	10800817 	ldw	r2,32(r2)
   4c30c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4c310:	e0fffa17 	ldw	r3,-24(fp)
   4c314:	e0bffb17 	ldw	r2,-20(fp)
   4c318:	d8000015 	stw	zero,0(sp)
   4c31c:	1809883a 	mov	r4,r3
   4c320:	100b883a 	mov	r5,r2
   4c324:	01800174 	movhi	r6,5
   4c328:	31b0e404 	addi	r6,r6,-15472
   4c32c:	e1fff917 	ldw	r7,-28(fp)
   4c330:	004dda00 	call	4dda0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4c334:	e0bff917 	ldw	r2,-28(fp)
   4c338:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4c33c:	e0bff917 	ldw	r2,-28(fp)
   4c340:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4c344:	00800174 	movhi	r2,5
   4c348:	108b2a04 	addi	r2,r2,11432
   4c34c:	10800017 	ldw	r2,0(r2)
   4c350:	1809883a 	mov	r4,r3
   4c354:	100b883a 	mov	r5,r2
   4c358:	01800174 	movhi	r6,5
   4c35c:	31b18d04 	addi	r6,r6,-14796
   4c360:	e1fff917 	ldw	r7,-28(fp)
   4c364:	004da7c0 	call	4da7c <alt_alarm_start>
   4c368:	1000040e 	bge	r2,zero,4c37c <altera_avalon_jtag_uart_init+0x138>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4c36c:	e0fff917 	ldw	r3,-28(fp)
   4c370:	00a00034 	movhi	r2,32768
   4c374:	10bfffc4 	addi	r2,r2,-1
   4c378:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4c37c:	e037883a 	mov	sp,fp
   4c380:	dfc00117 	ldw	ra,4(sp)
   4c384:	df000017 	ldw	fp,0(sp)
   4c388:	dec00204 	addi	sp,sp,8
   4c38c:	f800283a 	ret

0004c390 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4c390:	defff204 	addi	sp,sp,-56
   4c394:	dfc00d15 	stw	ra,52(sp)
   4c398:	df000c15 	stw	fp,48(sp)
   4c39c:	df000c04 	addi	fp,sp,48
   4c3a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4c3a4:	e0bfff17 	ldw	r2,-4(fp)
   4c3a8:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   4c3ac:	e0bff617 	ldw	r2,-40(fp)
   4c3b0:	10800017 	ldw	r2,0(r2)
   4c3b4:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4c3b8:	e0bff717 	ldw	r2,-36(fp)
   4c3bc:	10800104 	addi	r2,r2,4
   4c3c0:	10800037 	ldwio	r2,0(r2)
   4c3c4:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4c3c8:	e0bff817 	ldw	r2,-32(fp)
   4c3cc:	1080c00c 	andi	r2,r2,768
   4c3d0:	1000011e 	bne	r2,zero,4c3d8 <altera_avalon_jtag_uart_irq+0x48>
      break;
   4c3d4:	00009206 	br	4c620 <altera_avalon_jtag_uart_irq+0x290>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4c3d8:	e0bff817 	ldw	r2,-32(fp)
   4c3dc:	1080400c 	andi	r2,r2,256
   4c3e0:	10004726 	beq	r2,zero,4c500 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4c3e4:	00800074 	movhi	r2,1
   4c3e8:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c3ec:	e0bff617 	ldw	r2,-40(fp)
   4c3f0:	10800d17 	ldw	r2,52(r2)
   4c3f4:	10800044 	addi	r2,r2,1
   4c3f8:	1081ffcc 	andi	r2,r2,2047
   4c3fc:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   4c400:	e0bff617 	ldw	r2,-40(fp)
   4c404:	10c00e17 	ldw	r3,56(r2)
   4c408:	e0bff917 	ldw	r2,-28(fp)
   4c40c:	1880011e 	bne	r3,r2,4c414 <altera_avalon_jtag_uart_irq+0x84>
          break;
   4c410:	00002906 	br	4c4b8 <altera_avalon_jtag_uart_irq+0x128>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4c414:	e0bff717 	ldw	r2,-36(fp)
   4c418:	10800037 	ldwio	r2,0(r2)
   4c41c:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4c420:	e0bff417 	ldw	r2,-48(fp)
   4c424:	10a0000c 	andi	r2,r2,32768
   4c428:	1000011e 	bne	r2,zero,4c430 <altera_avalon_jtag_uart_irq+0xa0>
          break;
   4c42c:	00002206 	br	4c4b8 <altera_avalon_jtag_uart_irq+0x128>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4c430:	e0bff617 	ldw	r2,-40(fp)
   4c434:	10800d17 	ldw	r2,52(r2)
   4c438:	e0fff417 	ldw	r3,-48(fp)
   4c43c:	1809883a 	mov	r4,r3
   4c440:	e0fff617 	ldw	r3,-40(fp)
   4c444:	1885883a 	add	r2,r3,r2
   4c448:	10801104 	addi	r2,r2,68
   4c44c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c450:	e0bff617 	ldw	r2,-40(fp)
   4c454:	10800d17 	ldw	r2,52(r2)
   4c458:	10800044 	addi	r2,r2,1
   4c45c:	10c1ffcc 	andi	r3,r2,2047
   4c460:	e0bff617 	ldw	r2,-40(fp)
   4c464:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   4c468:	e0bff617 	ldw	r2,-40(fp)
   4c46c:	10800c17 	ldw	r2,48(r2)
   4c470:	e0bffa15 	stw	r2,-24(fp)
   4c474:	00800044 	movi	r2,1
   4c478:	e0bffb0d 	sth	r2,-20(fp)
   4c47c:	00800044 	movi	r2,1
   4c480:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   4c484:	00800174 	movhi	r2,5
   4c488:	108b1544 	addi	r2,r2,11349
   4c48c:	10800003 	ldbu	r2,0(r2)
   4c490:	10803fcc 	andi	r2,r2,255
   4c494:	103fd526 	beq	r2,zero,4c3ec <__alt_data_end+0xfffd688c>
  {
    OSFlagPost (group, flags, opt, &err);
   4c498:	e17ffb0b 	ldhu	r5,-20(fp)
   4c49c:	e0fffb83 	ldbu	r3,-18(fp)
   4c4a0:	e0bffdc4 	addi	r2,fp,-9
   4c4a4:	e13ffa17 	ldw	r4,-24(fp)
   4c4a8:	180d883a 	mov	r6,r3
   4c4ac:	100f883a 	mov	r7,r2
   4c4b0:	00474380 	call	47438 <OSFlagPost>
      }
   4c4b4:	003fcd06 	br	4c3ec <__alt_data_end+0xfffd688c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4c4b8:	e0bff417 	ldw	r2,-48(fp)
   4c4bc:	10bfffec 	andhi	r2,r2,65535
   4c4c0:	10000f26 	beq	r2,zero,4c500 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4c4c4:	e0bff617 	ldw	r2,-40(fp)
   4c4c8:	10c00817 	ldw	r3,32(r2)
   4c4cc:	00bfff84 	movi	r2,-2
   4c4d0:	1886703a 	and	r3,r3,r2
   4c4d4:	e0bff617 	ldw	r2,-40(fp)
   4c4d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4c4dc:	e0bff717 	ldw	r2,-36(fp)
   4c4e0:	10800104 	addi	r2,r2,4
   4c4e4:	1007883a 	mov	r3,r2
   4c4e8:	e0bff617 	ldw	r2,-40(fp)
   4c4ec:	10800817 	ldw	r2,32(r2)
   4c4f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4c4f4:	e0bff717 	ldw	r2,-36(fp)
   4c4f8:	10800104 	addi	r2,r2,4
   4c4fc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4c500:	e0bff817 	ldw	r2,-32(fp)
   4c504:	1080800c 	andi	r2,r2,512
   4c508:	10004426 	beq	r2,zero,4c61c <altera_avalon_jtag_uart_irq+0x28c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4c50c:	e0bff817 	ldw	r2,-32(fp)
   4c510:	1004d43a 	srli	r2,r2,16
   4c514:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4c518:	00002706 	br	4c5b8 <altera_avalon_jtag_uart_irq+0x228>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4c51c:	e0bff717 	ldw	r2,-36(fp)
   4c520:	e0fff617 	ldw	r3,-40(fp)
   4c524:	18c01017 	ldw	r3,64(r3)
   4c528:	e13ff617 	ldw	r4,-40(fp)
   4c52c:	20c7883a 	add	r3,r4,r3
   4c530:	18c21104 	addi	r3,r3,2116
   4c534:	18c00003 	ldbu	r3,0(r3)
   4c538:	18c03fcc 	andi	r3,r3,255
   4c53c:	18c0201c 	xori	r3,r3,128
   4c540:	18ffe004 	addi	r3,r3,-128
   4c544:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c548:	e0bff617 	ldw	r2,-40(fp)
   4c54c:	10801017 	ldw	r2,64(r2)
   4c550:	10800044 	addi	r2,r2,1
   4c554:	10c1ffcc 	andi	r3,r2,2047
   4c558:	e0bff617 	ldw	r2,-40(fp)
   4c55c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   4c560:	e0bff617 	ldw	r2,-40(fp)
   4c564:	10800c17 	ldw	r2,48(r2)
   4c568:	e0bffc15 	stw	r2,-16(fp)
   4c56c:	00800084 	movi	r2,2
   4c570:	e0bffd0d 	sth	r2,-12(fp)
   4c574:	00800044 	movi	r2,1
   4c578:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   4c57c:	00800174 	movhi	r2,5
   4c580:	108b1544 	addi	r2,r2,11349
   4c584:	10800003 	ldbu	r2,0(r2)
   4c588:	10803fcc 	andi	r2,r2,255
   4c58c:	10000726 	beq	r2,zero,4c5ac <altera_avalon_jtag_uart_irq+0x21c>
  {
    OSFlagPost (group, flags, opt, &err);
   4c590:	e17ffd0b 	ldhu	r5,-12(fp)
   4c594:	e0fffd83 	ldbu	r3,-10(fp)
   4c598:	e0bffe04 	addi	r2,fp,-8
   4c59c:	e13ffc17 	ldw	r4,-16(fp)
   4c5a0:	180d883a 	mov	r6,r3
   4c5a4:	100f883a 	mov	r7,r2
   4c5a8:	00474380 	call	47438 <OSFlagPost>

        space--;
   4c5ac:	e0bff517 	ldw	r2,-44(fp)
   4c5b0:	10bfffc4 	addi	r2,r2,-1
   4c5b4:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4c5b8:	e0bff517 	ldw	r2,-44(fp)
   4c5bc:	10000526 	beq	r2,zero,4c5d4 <altera_avalon_jtag_uart_irq+0x244>
   4c5c0:	e0bff617 	ldw	r2,-40(fp)
   4c5c4:	10c01017 	ldw	r3,64(r2)
   4c5c8:	e0bff617 	ldw	r2,-40(fp)
   4c5cc:	10800f17 	ldw	r2,60(r2)
   4c5d0:	18bfd21e 	bne	r3,r2,4c51c <__alt_data_end+0xfffd69bc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4c5d4:	e0bff517 	ldw	r2,-44(fp)
   4c5d8:	10001026 	beq	r2,zero,4c61c <altera_avalon_jtag_uart_irq+0x28c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4c5dc:	e0bff617 	ldw	r2,-40(fp)
   4c5e0:	10c00817 	ldw	r3,32(r2)
   4c5e4:	00bfff44 	movi	r2,-3
   4c5e8:	1886703a 	and	r3,r3,r2
   4c5ec:	e0bff617 	ldw	r2,-40(fp)
   4c5f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4c5f4:	e0bff617 	ldw	r2,-40(fp)
   4c5f8:	10800017 	ldw	r2,0(r2)
   4c5fc:	10800104 	addi	r2,r2,4
   4c600:	1007883a 	mov	r3,r2
   4c604:	e0bff617 	ldw	r2,-40(fp)
   4c608:	10800817 	ldw	r2,32(r2)
   4c60c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4c610:	e0bff717 	ldw	r2,-36(fp)
   4c614:	10800104 	addi	r2,r2,4
   4c618:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4c61c:	003f6606 	br	4c3b8 <__alt_data_end+0xfffd6858>
}
   4c620:	e037883a 	mov	sp,fp
   4c624:	dfc00117 	ldw	ra,4(sp)
   4c628:	df000017 	ldw	fp,0(sp)
   4c62c:	dec00204 	addi	sp,sp,8
   4c630:	f800283a 	ret

0004c634 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4c634:	defff904 	addi	sp,sp,-28
   4c638:	dfc00615 	stw	ra,24(sp)
   4c63c:	df000515 	stw	fp,20(sp)
   4c640:	df000504 	addi	fp,sp,20
   4c644:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4c648:	e0bfff17 	ldw	r2,-4(fp)
   4c64c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4c650:	e0bffb17 	ldw	r2,-20(fp)
   4c654:	10800017 	ldw	r2,0(r2)
   4c658:	10800104 	addi	r2,r2,4
   4c65c:	10800037 	ldwio	r2,0(r2)
   4c660:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4c664:	e0bffc17 	ldw	r2,-16(fp)
   4c668:	1081000c 	andi	r2,r2,1024
   4c66c:	10000b26 	beq	r2,zero,4c69c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4c670:	e0bffb17 	ldw	r2,-20(fp)
   4c674:	10800017 	ldw	r2,0(r2)
   4c678:	10800104 	addi	r2,r2,4
   4c67c:	1007883a 	mov	r3,r2
   4c680:	e0bffb17 	ldw	r2,-20(fp)
   4c684:	10800817 	ldw	r2,32(r2)
   4c688:	10810014 	ori	r2,r2,1024
   4c68c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4c690:	e0bffb17 	ldw	r2,-20(fp)
   4c694:	10000915 	stw	zero,36(r2)
   4c698:	00002206 	br	4c724 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4c69c:	e0bffb17 	ldw	r2,-20(fp)
   4c6a0:	10c00917 	ldw	r3,36(r2)
   4c6a4:	00a00034 	movhi	r2,32768
   4c6a8:	10bfff04 	addi	r2,r2,-4
   4c6ac:	10c01d36 	bltu	r2,r3,4c724 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   4c6b0:	e0bffb17 	ldw	r2,-20(fp)
   4c6b4:	10800917 	ldw	r2,36(r2)
   4c6b8:	10c00044 	addi	r3,r2,1
   4c6bc:	e0bffb17 	ldw	r2,-20(fp)
   4c6c0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   4c6c4:	e0bffb17 	ldw	r2,-20(fp)
   4c6c8:	10c00917 	ldw	r3,36(r2)
   4c6cc:	e0bffb17 	ldw	r2,-20(fp)
   4c6d0:	10800117 	ldw	r2,4(r2)
   4c6d4:	18801336 	bltu	r3,r2,4c724 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   4c6d8:	e0bffb17 	ldw	r2,-20(fp)
   4c6dc:	10800c17 	ldw	r2,48(r2)
   4c6e0:	e0bffd15 	stw	r2,-12(fp)
   4c6e4:	00800104 	movi	r2,4
   4c6e8:	e0bffe0d 	sth	r2,-8(fp)
   4c6ec:	00800044 	movi	r2,1
   4c6f0:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   4c6f4:	00800174 	movhi	r2,5
   4c6f8:	108b1544 	addi	r2,r2,11349
   4c6fc:	10800003 	ldbu	r2,0(r2)
   4c700:	10803fcc 	andi	r2,r2,255
   4c704:	10000726 	beq	r2,zero,4c724 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   4c708:	e17ffe0b 	ldhu	r5,-8(fp)
   4c70c:	e0fffe83 	ldbu	r3,-6(fp)
   4c710:	e0bffec4 	addi	r2,fp,-5
   4c714:	e13ffd17 	ldw	r4,-12(fp)
   4c718:	180d883a 	mov	r6,r3
   4c71c:	100f883a 	mov	r7,r2
   4c720:	00474380 	call	47438 <OSFlagPost>
   4c724:	00800174 	movhi	r2,5
   4c728:	108b2a04 	addi	r2,r2,11432
   4c72c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   4c730:	e037883a 	mov	sp,fp
   4c734:	dfc00117 	ldw	ra,4(sp)
   4c738:	df000017 	ldw	fp,0(sp)
   4c73c:	dec00204 	addi	sp,sp,8
   4c740:	f800283a 	ret

0004c744 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4c744:	defffd04 	addi	sp,sp,-12
   4c748:	df000215 	stw	fp,8(sp)
   4c74c:	df000204 	addi	fp,sp,8
   4c750:	e13ffe15 	stw	r4,-8(fp)
   4c754:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4c758:	00000506 	br	4c770 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4c75c:	e0bfff17 	ldw	r2,-4(fp)
   4c760:	1090000c 	andi	r2,r2,16384
   4c764:	10000226 	beq	r2,zero,4c770 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4c768:	00bffd44 	movi	r2,-11
   4c76c:	00000b06 	br	4c79c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4c770:	e0bffe17 	ldw	r2,-8(fp)
   4c774:	10c01017 	ldw	r3,64(r2)
   4c778:	e0bffe17 	ldw	r2,-8(fp)
   4c77c:	10800f17 	ldw	r2,60(r2)
   4c780:	18800526 	beq	r3,r2,4c798 <altera_avalon_jtag_uart_close+0x54>
   4c784:	e0bffe17 	ldw	r2,-8(fp)
   4c788:	10c00917 	ldw	r3,36(r2)
   4c78c:	e0bffe17 	ldw	r2,-8(fp)
   4c790:	10800117 	ldw	r2,4(r2)
   4c794:	18bff136 	bltu	r3,r2,4c75c <__alt_data_end+0xfffd6bfc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4c798:	0005883a 	mov	r2,zero
}
   4c79c:	e037883a 	mov	sp,fp
   4c7a0:	df000017 	ldw	fp,0(sp)
   4c7a4:	dec00104 	addi	sp,sp,4
   4c7a8:	f800283a 	ret

0004c7ac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4c7ac:	defffa04 	addi	sp,sp,-24
   4c7b0:	df000515 	stw	fp,20(sp)
   4c7b4:	df000504 	addi	fp,sp,20
   4c7b8:	e13ffd15 	stw	r4,-12(fp)
   4c7bc:	e17ffe15 	stw	r5,-8(fp)
   4c7c0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4c7c4:	00bff9c4 	movi	r2,-25
   4c7c8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4c7cc:	e0bffe17 	ldw	r2,-8(fp)
   4c7d0:	10da8060 	cmpeqi	r3,r2,27137
   4c7d4:	1800031e 	bne	r3,zero,4c7e4 <altera_avalon_jtag_uart_ioctl+0x38>
   4c7d8:	109a80a0 	cmpeqi	r2,r2,27138
   4c7dc:	1000191e 	bne	r2,zero,4c844 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   4c7e0:	00002806 	br	4c884 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4c7e4:	e0bffd17 	ldw	r2,-12(fp)
   4c7e8:	10c00117 	ldw	r3,4(r2)
   4c7ec:	00a00034 	movhi	r2,32768
   4c7f0:	10bfffc4 	addi	r2,r2,-1
   4c7f4:	18801226 	beq	r3,r2,4c840 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   4c7f8:	e0bfff17 	ldw	r2,-4(fp)
   4c7fc:	10800017 	ldw	r2,0(r2)
   4c800:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4c804:	e0bffc17 	ldw	r2,-16(fp)
   4c808:	10800090 	cmplti	r2,r2,2
   4c80c:	1000061e 	bne	r2,zero,4c828 <altera_avalon_jtag_uart_ioctl+0x7c>
   4c810:	e0fffc17 	ldw	r3,-16(fp)
   4c814:	00a00034 	movhi	r2,32768
   4c818:	10bfffc4 	addi	r2,r2,-1
   4c81c:	18800226 	beq	r3,r2,4c828 <altera_avalon_jtag_uart_ioctl+0x7c>
   4c820:	e0bffc17 	ldw	r2,-16(fp)
   4c824:	00000206 	br	4c830 <altera_avalon_jtag_uart_ioctl+0x84>
   4c828:	00a00034 	movhi	r2,32768
   4c82c:	10bfff84 	addi	r2,r2,-2
   4c830:	e0fffd17 	ldw	r3,-12(fp)
   4c834:	18800115 	stw	r2,4(r3)
      rc = 0;
   4c838:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4c83c:	00001106 	br	4c884 <altera_avalon_jtag_uart_ioctl+0xd8>
   4c840:	00001006 	br	4c884 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4c844:	e0bffd17 	ldw	r2,-12(fp)
   4c848:	10c00117 	ldw	r3,4(r2)
   4c84c:	00a00034 	movhi	r2,32768
   4c850:	10bfffc4 	addi	r2,r2,-1
   4c854:	18800a26 	beq	r3,r2,4c880 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4c858:	e0bffd17 	ldw	r2,-12(fp)
   4c85c:	10c00917 	ldw	r3,36(r2)
   4c860:	e0bffd17 	ldw	r2,-12(fp)
   4c864:	10800117 	ldw	r2,4(r2)
   4c868:	1885803a 	cmpltu	r2,r3,r2
   4c86c:	10c03fcc 	andi	r3,r2,255
   4c870:	e0bfff17 	ldw	r2,-4(fp)
   4c874:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4c878:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4c87c:	00000006 	br	4c880 <altera_avalon_jtag_uart_ioctl+0xd4>
   4c880:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4c884:	e0bffb17 	ldw	r2,-20(fp)
}
   4c888:	e037883a 	mov	sp,fp
   4c88c:	df000017 	ldw	fp,0(sp)
   4c890:	dec00104 	addi	sp,sp,4
   4c894:	f800283a 	ret

0004c898 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4c898:	deffec04 	addi	sp,sp,-80
   4c89c:	dfc01315 	stw	ra,76(sp)
   4c8a0:	df001215 	stw	fp,72(sp)
   4c8a4:	df001204 	addi	fp,sp,72
   4c8a8:	e13ffc15 	stw	r4,-16(fp)
   4c8ac:	e17ffd15 	stw	r5,-12(fp)
   4c8b0:	e1bffe15 	stw	r6,-8(fp)
   4c8b4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4c8b8:	e0bffd17 	ldw	r2,-12(fp)
   4c8bc:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   4c8c0:	e0bffc17 	ldw	r2,-16(fp)
   4c8c4:	10800a17 	ldw	r2,40(r2)
   4c8c8:	e0bff415 	stw	r2,-48(fp)
   4c8cc:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   4c8d0:	e0fff50b 	ldhu	r3,-44(fp)
   4c8d4:	e0bffb04 	addi	r2,fp,-20
   4c8d8:	e13ff417 	ldw	r4,-48(fp)
   4c8dc:	180b883a 	mov	r5,r3
   4c8e0:	100d883a 	mov	r6,r2
   4c8e4:	0049a940 	call	49a94 <OSSemPend>

  while (space > 0)
   4c8e8:	00006506 	br	4ca80 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4c8ec:	e0bffc17 	ldw	r2,-16(fp)
   4c8f0:	10800d17 	ldw	r2,52(r2)
   4c8f4:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   4c8f8:	e0bffc17 	ldw	r2,-16(fp)
   4c8fc:	10800e17 	ldw	r2,56(r2)
   4c900:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   4c904:	e0fff117 	ldw	r3,-60(fp)
   4c908:	e0bff217 	ldw	r2,-56(fp)
   4c90c:	18800536 	bltu	r3,r2,4c924 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   4c910:	e0fff117 	ldw	r3,-60(fp)
   4c914:	e0bff217 	ldw	r2,-56(fp)
   4c918:	1885c83a 	sub	r2,r3,r2
   4c91c:	e0bff015 	stw	r2,-64(fp)
   4c920:	00000406 	br	4c934 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4c924:	00c20004 	movi	r3,2048
   4c928:	e0bff217 	ldw	r2,-56(fp)
   4c92c:	1885c83a 	sub	r2,r3,r2
   4c930:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   4c934:	e0bff017 	ldw	r2,-64(fp)
   4c938:	1000011e 	bne	r2,zero,4c940 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   4c93c:	00001d06 	br	4c9b4 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   4c940:	e0fffe17 	ldw	r3,-8(fp)
   4c944:	e0bff017 	ldw	r2,-64(fp)
   4c948:	1880022e 	bgeu	r3,r2,4c954 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   4c94c:	e0bffe17 	ldw	r2,-8(fp)
   4c950:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4c954:	e0bff217 	ldw	r2,-56(fp)
   4c958:	10801104 	addi	r2,r2,68
   4c95c:	e0fffc17 	ldw	r3,-16(fp)
   4c960:	1885883a 	add	r2,r3,r2
   4c964:	e13fef17 	ldw	r4,-68(fp)
   4c968:	100b883a 	mov	r5,r2
   4c96c:	e1bff017 	ldw	r6,-64(fp)
   4c970:	00419880 	call	41988 <memcpy>
      ptr   += n;
   4c974:	e0ffef17 	ldw	r3,-68(fp)
   4c978:	e0bff017 	ldw	r2,-64(fp)
   4c97c:	1885883a 	add	r2,r3,r2
   4c980:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   4c984:	e0fffe17 	ldw	r3,-8(fp)
   4c988:	e0bff017 	ldw	r2,-64(fp)
   4c98c:	1885c83a 	sub	r2,r3,r2
   4c990:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c994:	e0fff217 	ldw	r3,-56(fp)
   4c998:	e0bff017 	ldw	r2,-64(fp)
   4c99c:	1885883a 	add	r2,r3,r2
   4c9a0:	10c1ffcc 	andi	r3,r2,2047
   4c9a4:	e0bffc17 	ldw	r2,-16(fp)
   4c9a8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   4c9ac:	e0bffe17 	ldw	r2,-8(fp)
   4c9b0:	00bfce16 	blt	zero,r2,4c8ec <__alt_data_end+0xfffd6d8c>

    /* If we read any data then return it */
    if (ptr != buffer)
   4c9b4:	e0ffef17 	ldw	r3,-68(fp)
   4c9b8:	e0bffd17 	ldw	r2,-12(fp)
   4c9bc:	18800126 	beq	r3,r2,4c9c4 <altera_avalon_jtag_uart_read+0x12c>
      break;
   4c9c0:	00003106 	br	4ca88 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4c9c4:	e0bfff17 	ldw	r2,-4(fp)
   4c9c8:	1090000c 	andi	r2,r2,16384
   4c9cc:	10000126 	beq	r2,zero,4c9d4 <altera_avalon_jtag_uart_read+0x13c>
      break;
   4c9d0:	00002d06 	br	4ca88 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   4c9d4:	00800174 	movhi	r2,5
   4c9d8:	108b1544 	addi	r2,r2,11349
   4c9dc:	10800003 	ldbu	r2,0(r2)
   4c9e0:	10803fcc 	andi	r2,r2,255
   4c9e4:	10800058 	cmpnei	r2,r2,1
   4c9e8:	1000161e 	bne	r2,zero,4ca44 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   4c9ec:	e0bffc17 	ldw	r2,-16(fp)
   4c9f0:	10800c17 	ldw	r2,48(r2)
   4c9f4:	e0bff615 	stw	r2,-40(fp)
   4c9f8:	00800144 	movi	r2,5
   4c9fc:	e0bff70d 	sth	r2,-36(fp)
   4ca00:	00bfe0c4 	movi	r2,-125
   4ca04:	e0bff785 	stb	r2,-34(fp)
   4ca08:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   4ca0c:	00800174 	movhi	r2,5
   4ca10:	108b1544 	addi	r2,r2,11349
   4ca14:	10800003 	ldbu	r2,0(r2)
   4ca18:	10803fcc 	andi	r2,r2,255
   4ca1c:	10001326 	beq	r2,zero,4ca6c <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   4ca20:	e17ff70b 	ldhu	r5,-36(fp)
   4ca24:	e1bff783 	ldbu	r6,-34(fp)
   4ca28:	e0fff80b 	ldhu	r3,-32(fp)
   4ca2c:	e0bffb44 	addi	r2,fp,-19
   4ca30:	d8800015 	stw	r2,0(sp)
   4ca34:	e13ff617 	ldw	r4,-40(fp)
   4ca38:	180f883a 	mov	r7,r3
   4ca3c:	0046de00 	call	46de0 <OSFlagPend>
   4ca40:	00000a06 	br	4ca6c <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4ca44:	0001883a 	nop
   4ca48:	e0bffc17 	ldw	r2,-16(fp)
   4ca4c:	10c00d17 	ldw	r3,52(r2)
   4ca50:	e0bff117 	ldw	r2,-60(fp)
   4ca54:	1880051e 	bne	r3,r2,4ca6c <altera_avalon_jtag_uart_read+0x1d4>
   4ca58:	e0bffc17 	ldw	r2,-16(fp)
   4ca5c:	10c00917 	ldw	r3,36(r2)
   4ca60:	e0bffc17 	ldw	r2,-16(fp)
   4ca64:	10800117 	ldw	r2,4(r2)
   4ca68:	18bff736 	bltu	r3,r2,4ca48 <__alt_data_end+0xfffd6ee8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4ca6c:	e0bffc17 	ldw	r2,-16(fp)
   4ca70:	10c00d17 	ldw	r3,52(r2)
   4ca74:	e0bff117 	ldw	r2,-60(fp)
   4ca78:	1880011e 	bne	r3,r2,4ca80 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   4ca7c:	00000206 	br	4ca88 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4ca80:	e0bffe17 	ldw	r2,-8(fp)
   4ca84:	00bf9916 	blt	zero,r2,4c8ec <__alt_data_end+0xfffd6d8c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   4ca88:	e0bffc17 	ldw	r2,-16(fp)
   4ca8c:	10800a17 	ldw	r2,40(r2)
   4ca90:	1009883a 	mov	r4,r2
   4ca94:	0049e680 	call	49e68 <OSSemPost>

  if (ptr != buffer)
   4ca98:	e0ffef17 	ldw	r3,-68(fp)
   4ca9c:	e0bffd17 	ldw	r2,-12(fp)
   4caa0:	18801826 	beq	r3,r2,4cb04 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4caa4:	0005303a 	rdctl	r2,status
   4caa8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4caac:	e0fff917 	ldw	r3,-28(fp)
   4cab0:	00bfff84 	movi	r2,-2
   4cab4:	1884703a 	and	r2,r3,r2
   4cab8:	1001703a 	wrctl	status,r2
  
  return context;
   4cabc:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4cac0:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4cac4:	e0bffc17 	ldw	r2,-16(fp)
   4cac8:	10800817 	ldw	r2,32(r2)
   4cacc:	10c00054 	ori	r3,r2,1
   4cad0:	e0bffc17 	ldw	r2,-16(fp)
   4cad4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4cad8:	e0bffc17 	ldw	r2,-16(fp)
   4cadc:	10800017 	ldw	r2,0(r2)
   4cae0:	10800104 	addi	r2,r2,4
   4cae4:	1007883a 	mov	r3,r2
   4cae8:	e0bffc17 	ldw	r2,-16(fp)
   4caec:	10800817 	ldw	r2,32(r2)
   4caf0:	18800035 	stwio	r2,0(r3)
   4caf4:	e0bff317 	ldw	r2,-52(fp)
   4caf8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4cafc:	e0bffa17 	ldw	r2,-24(fp)
   4cb00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4cb04:	e0ffef17 	ldw	r3,-68(fp)
   4cb08:	e0bffd17 	ldw	r2,-12(fp)
   4cb0c:	18800426 	beq	r3,r2,4cb20 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   4cb10:	e0ffef17 	ldw	r3,-68(fp)
   4cb14:	e0bffd17 	ldw	r2,-12(fp)
   4cb18:	1885c83a 	sub	r2,r3,r2
   4cb1c:	00000606 	br	4cb38 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   4cb20:	e0bfff17 	ldw	r2,-4(fp)
   4cb24:	1090000c 	andi	r2,r2,16384
   4cb28:	10000226 	beq	r2,zero,4cb34 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   4cb2c:	00bffd44 	movi	r2,-11
   4cb30:	00000106 	br	4cb38 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   4cb34:	00bffec4 	movi	r2,-5
}
   4cb38:	e037883a 	mov	sp,fp
   4cb3c:	dfc00117 	ldw	ra,4(sp)
   4cb40:	df000017 	ldw	fp,0(sp)
   4cb44:	dec00204 	addi	sp,sp,8
   4cb48:	f800283a 	ret

0004cb4c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4cb4c:	deffed04 	addi	sp,sp,-76
   4cb50:	dfc01215 	stw	ra,72(sp)
   4cb54:	df001115 	stw	fp,68(sp)
   4cb58:	df001104 	addi	fp,sp,68
   4cb5c:	e13ffc15 	stw	r4,-16(fp)
   4cb60:	e17ffd15 	stw	r5,-12(fp)
   4cb64:	e1bffe15 	stw	r6,-8(fp)
   4cb68:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4cb6c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4cb70:	e0bffd17 	ldw	r2,-12(fp)
   4cb74:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   4cb78:	e0bffc17 	ldw	r2,-16(fp)
   4cb7c:	10800b17 	ldw	r2,44(r2)
   4cb80:	e0bff515 	stw	r2,-44(fp)
   4cb84:	e03ff60d 	sth	zero,-40(fp)
   4cb88:	e0fff60b 	ldhu	r3,-40(fp)
   4cb8c:	e0bffbc4 	addi	r2,fp,-17
   4cb90:	e13ff517 	ldw	r4,-44(fp)
   4cb94:	180b883a 	mov	r5,r3
   4cb98:	100d883a 	mov	r6,r2
   4cb9c:	0049a940 	call	49a94 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4cba0:	00003806 	br	4cc84 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4cba4:	e0bffc17 	ldw	r2,-16(fp)
   4cba8:	10800f17 	ldw	r2,60(r2)
   4cbac:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   4cbb0:	e0bffc17 	ldw	r2,-16(fp)
   4cbb4:	10801017 	ldw	r2,64(r2)
   4cbb8:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   4cbbc:	e0fff317 	ldw	r3,-52(fp)
   4cbc0:	e0bff017 	ldw	r2,-64(fp)
   4cbc4:	1880062e 	bgeu	r3,r2,4cbe0 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   4cbc8:	e0fff017 	ldw	r3,-64(fp)
   4cbcc:	e0bff317 	ldw	r2,-52(fp)
   4cbd0:	1885c83a 	sub	r2,r3,r2
   4cbd4:	10bfffc4 	addi	r2,r2,-1
   4cbd8:	e0bff115 	stw	r2,-60(fp)
   4cbdc:	00000b06 	br	4cc0c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   4cbe0:	e0bff017 	ldw	r2,-64(fp)
   4cbe4:	10000526 	beq	r2,zero,4cbfc <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4cbe8:	00c20004 	movi	r3,2048
   4cbec:	e0bff317 	ldw	r2,-52(fp)
   4cbf0:	1885c83a 	sub	r2,r3,r2
   4cbf4:	e0bff115 	stw	r2,-60(fp)
   4cbf8:	00000406 	br	4cc0c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4cbfc:	00c1ffc4 	movi	r3,2047
   4cc00:	e0bff317 	ldw	r2,-52(fp)
   4cc04:	1885c83a 	sub	r2,r3,r2
   4cc08:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   4cc0c:	e0bff117 	ldw	r2,-60(fp)
   4cc10:	1000011e 	bne	r2,zero,4cc18 <altera_avalon_jtag_uart_write+0xcc>
        break;
   4cc14:	00001d06 	br	4cc8c <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   4cc18:	e0fffe17 	ldw	r3,-8(fp)
   4cc1c:	e0bff117 	ldw	r2,-60(fp)
   4cc20:	1880022e 	bgeu	r3,r2,4cc2c <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   4cc24:	e0bffe17 	ldw	r2,-8(fp)
   4cc28:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4cc2c:	e0bff317 	ldw	r2,-52(fp)
   4cc30:	10821104 	addi	r2,r2,2116
   4cc34:	e0fffc17 	ldw	r3,-16(fp)
   4cc38:	1885883a 	add	r2,r3,r2
   4cc3c:	1009883a 	mov	r4,r2
   4cc40:	e17ffd17 	ldw	r5,-12(fp)
   4cc44:	e1bff117 	ldw	r6,-60(fp)
   4cc48:	00419880 	call	41988 <memcpy>
      ptr   += n;
   4cc4c:	e0fffd17 	ldw	r3,-12(fp)
   4cc50:	e0bff117 	ldw	r2,-60(fp)
   4cc54:	1885883a 	add	r2,r3,r2
   4cc58:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4cc5c:	e0fffe17 	ldw	r3,-8(fp)
   4cc60:	e0bff117 	ldw	r2,-60(fp)
   4cc64:	1885c83a 	sub	r2,r3,r2
   4cc68:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4cc6c:	e0fff317 	ldw	r3,-52(fp)
   4cc70:	e0bff117 	ldw	r2,-60(fp)
   4cc74:	1885883a 	add	r2,r3,r2
   4cc78:	10c1ffcc 	andi	r3,r2,2047
   4cc7c:	e0bffc17 	ldw	r2,-16(fp)
   4cc80:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4cc84:	e0bffe17 	ldw	r2,-8(fp)
   4cc88:	00bfc616 	blt	zero,r2,4cba4 <__alt_data_end+0xfffd7044>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4cc8c:	0005303a 	rdctl	r2,status
   4cc90:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4cc94:	e0fff717 	ldw	r3,-36(fp)
   4cc98:	00bfff84 	movi	r2,-2
   4cc9c:	1884703a 	and	r2,r3,r2
   4cca0:	1001703a 	wrctl	status,r2
  
  return context;
   4cca4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4cca8:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4ccac:	e0bffc17 	ldw	r2,-16(fp)
   4ccb0:	10800817 	ldw	r2,32(r2)
   4ccb4:	10c00094 	ori	r3,r2,2
   4ccb8:	e0bffc17 	ldw	r2,-16(fp)
   4ccbc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4ccc0:	e0bffc17 	ldw	r2,-16(fp)
   4ccc4:	10800017 	ldw	r2,0(r2)
   4ccc8:	10800104 	addi	r2,r2,4
   4cccc:	1007883a 	mov	r3,r2
   4ccd0:	e0bffc17 	ldw	r2,-16(fp)
   4ccd4:	10800817 	ldw	r2,32(r2)
   4ccd8:	18800035 	stwio	r2,0(r3)
   4ccdc:	e0bff417 	ldw	r2,-48(fp)
   4cce0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4cce4:	e0bff817 	ldw	r2,-32(fp)
   4cce8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4ccec:	e0bffe17 	ldw	r2,-8(fp)
   4ccf0:	00802e0e 	bge	zero,r2,4cdac <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   4ccf4:	e0bfff17 	ldw	r2,-4(fp)
   4ccf8:	1090000c 	andi	r2,r2,16384
   4ccfc:	10000126 	beq	r2,zero,4cd04 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   4cd00:	00002c06 	br	4cdb4 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   4cd04:	00800174 	movhi	r2,5
   4cd08:	108b1544 	addi	r2,r2,11349
   4cd0c:	10800003 	ldbu	r2,0(r2)
   4cd10:	10803fcc 	andi	r2,r2,255
   4cd14:	10800058 	cmpnei	r2,r2,1
   4cd18:	1000161e 	bne	r2,zero,4cd74 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   4cd1c:	e0bffc17 	ldw	r2,-16(fp)
   4cd20:	10800c17 	ldw	r2,48(r2)
   4cd24:	e0bff915 	stw	r2,-28(fp)
   4cd28:	00800184 	movi	r2,6
   4cd2c:	e0bffa0d 	sth	r2,-24(fp)
   4cd30:	00bfe0c4 	movi	r2,-125
   4cd34:	e0bffa85 	stb	r2,-22(fp)
   4cd38:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   4cd3c:	00800174 	movhi	r2,5
   4cd40:	108b1544 	addi	r2,r2,11349
   4cd44:	10800003 	ldbu	r2,0(r2)
   4cd48:	10803fcc 	andi	r2,r2,255
   4cd4c:	10001326 	beq	r2,zero,4cd9c <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   4cd50:	e17ffa0b 	ldhu	r5,-24(fp)
   4cd54:	e1bffa83 	ldbu	r6,-22(fp)
   4cd58:	e0fffb0b 	ldhu	r3,-20(fp)
   4cd5c:	e0bffb84 	addi	r2,fp,-18
   4cd60:	d8800015 	stw	r2,0(sp)
   4cd64:	e13ff917 	ldw	r4,-28(fp)
   4cd68:	180f883a 	mov	r7,r3
   4cd6c:	0046de00 	call	46de0 <OSFlagPend>
   4cd70:	00000a06 	br	4cd9c <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4cd74:	0001883a 	nop
   4cd78:	e0bffc17 	ldw	r2,-16(fp)
   4cd7c:	10c01017 	ldw	r3,64(r2)
   4cd80:	e0bff017 	ldw	r2,-64(fp)
   4cd84:	1880051e 	bne	r3,r2,4cd9c <altera_avalon_jtag_uart_write+0x250>
   4cd88:	e0bffc17 	ldw	r2,-16(fp)
   4cd8c:	10c00917 	ldw	r3,36(r2)
   4cd90:	e0bffc17 	ldw	r2,-16(fp)
   4cd94:	10800117 	ldw	r2,4(r2)
   4cd98:	18bff736 	bltu	r3,r2,4cd78 <__alt_data_end+0xfffd7218>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   4cd9c:	e0bffc17 	ldw	r2,-16(fp)
   4cda0:	10800917 	ldw	r2,36(r2)
   4cda4:	10000126 	beq	r2,zero,4cdac <altera_avalon_jtag_uart_write+0x260>
         break;
   4cda8:	00000206 	br	4cdb4 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   4cdac:	e0bffe17 	ldw	r2,-8(fp)
   4cdb0:	00bf7b16 	blt	zero,r2,4cba0 <__alt_data_end+0xfffd7040>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   4cdb4:	e0bffc17 	ldw	r2,-16(fp)
   4cdb8:	10800b17 	ldw	r2,44(r2)
   4cdbc:	1009883a 	mov	r4,r2
   4cdc0:	0049e680 	call	49e68 <OSSemPost>

  if (ptr != start)
   4cdc4:	e0fffd17 	ldw	r3,-12(fp)
   4cdc8:	e0bff217 	ldw	r2,-56(fp)
   4cdcc:	18800426 	beq	r3,r2,4cde0 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   4cdd0:	e0fffd17 	ldw	r3,-12(fp)
   4cdd4:	e0bff217 	ldw	r2,-56(fp)
   4cdd8:	1885c83a 	sub	r2,r3,r2
   4cddc:	00000606 	br	4cdf8 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   4cde0:	e0bfff17 	ldw	r2,-4(fp)
   4cde4:	1090000c 	andi	r2,r2,16384
   4cde8:	10000226 	beq	r2,zero,4cdf4 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   4cdec:	00bffd44 	movi	r2,-11
   4cdf0:	00000106 	br	4cdf8 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4cdf4:	00bffec4 	movi	r2,-5
}
   4cdf8:	e037883a 	mov	sp,fp
   4cdfc:	dfc00117 	ldw	ra,4(sp)
   4ce00:	df000017 	ldw	fp,0(sp)
   4ce04:	dec00204 	addi	sp,sp,8
   4ce08:	f800283a 	ret

0004ce0c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4ce0c:	defffa04 	addi	sp,sp,-24
   4ce10:	dfc00515 	stw	ra,20(sp)
   4ce14:	df000415 	stw	fp,16(sp)
   4ce18:	df000404 	addi	fp,sp,16
   4ce1c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4ce20:	0007883a 	mov	r3,zero
   4ce24:	e0bfff17 	ldw	r2,-4(fp)
   4ce28:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4ce2c:	e0bfff17 	ldw	r2,-4(fp)
   4ce30:	10800104 	addi	r2,r2,4
   4ce34:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ce38:	0005303a 	rdctl	r2,status
   4ce3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ce40:	e0fffd17 	ldw	r3,-12(fp)
   4ce44:	00bfff84 	movi	r2,-2
   4ce48:	1884703a 	and	r2,r3,r2
   4ce4c:	1001703a 	wrctl	status,r2
  
  return context;
   4ce50:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4ce54:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4ce58:	004e5040 	call	4e504 <alt_tick>
   4ce5c:	e0bffc17 	ldw	r2,-16(fp)
   4ce60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ce64:	e0bffe17 	ldw	r2,-8(fp)
   4ce68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4ce6c:	e037883a 	mov	sp,fp
   4ce70:	dfc00117 	ldw	ra,4(sp)
   4ce74:	df000017 	ldw	fp,0(sp)
   4ce78:	dec00204 	addi	sp,sp,8
   4ce7c:	f800283a 	ret

0004ce80 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4ce80:	defff804 	addi	sp,sp,-32
   4ce84:	dfc00715 	stw	ra,28(sp)
   4ce88:	df000615 	stw	fp,24(sp)
   4ce8c:	df000604 	addi	fp,sp,24
   4ce90:	e13ffc15 	stw	r4,-16(fp)
   4ce94:	e17ffd15 	stw	r5,-12(fp)
   4ce98:	e1bffe15 	stw	r6,-8(fp)
   4ce9c:	e1ffff15 	stw	r7,-4(fp)
   4cea0:	e0bfff17 	ldw	r2,-4(fp)
   4cea4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4cea8:	00800174 	movhi	r2,5
   4ceac:	108b2a04 	addi	r2,r2,11432
   4ceb0:	10800017 	ldw	r2,0(r2)
   4ceb4:	1000041e 	bne	r2,zero,4cec8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   4ceb8:	00800174 	movhi	r2,5
   4cebc:	108b2a04 	addi	r2,r2,11432
   4cec0:	e0fffb17 	ldw	r3,-20(fp)
   4cec4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4cec8:	e0bffc17 	ldw	r2,-16(fp)
   4cecc:	10800104 	addi	r2,r2,4
   4ced0:	00c001c4 	movi	r3,7
   4ced4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4ced8:	d8000015 	stw	zero,0(sp)
   4cedc:	e13ffd17 	ldw	r4,-12(fp)
   4cee0:	e17ffe17 	ldw	r5,-8(fp)
   4cee4:	01800174 	movhi	r6,5
   4cee8:	31b38304 	addi	r6,r6,-12788
   4ceec:	e1fffc17 	ldw	r7,-16(fp)
   4cef0:	004dda00 	call	4dda0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4cef4:	e037883a 	mov	sp,fp
   4cef8:	dfc00117 	ldw	ra,4(sp)
   4cefc:	df000017 	ldw	fp,0(sp)
   4cf00:	dec00204 	addi	sp,sp,8
   4cf04:	f800283a 	ret

0004cf08 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4cf08:	defffa04 	addi	sp,sp,-24
   4cf0c:	dfc00515 	stw	ra,20(sp)
   4cf10:	df000415 	stw	fp,16(sp)
   4cf14:	df000404 	addi	fp,sp,16
   4cf18:	e13ffd15 	stw	r4,-12(fp)
   4cf1c:	e17ffe15 	stw	r5,-8(fp)
   4cf20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4cf24:	e0bffd17 	ldw	r2,-12(fp)
   4cf28:	10800017 	ldw	r2,0(r2)
   4cf2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   4cf30:	e0bffc17 	ldw	r2,-16(fp)
   4cf34:	10c00a04 	addi	r3,r2,40
   4cf38:	e0bffd17 	ldw	r2,-12(fp)
   4cf3c:	10800217 	ldw	r2,8(r2)
   4cf40:	1809883a 	mov	r4,r3
   4cf44:	e17ffe17 	ldw	r5,-8(fp)
   4cf48:	e1bfff17 	ldw	r6,-4(fp)
   4cf4c:	100f883a 	mov	r7,r2
   4cf50:	004d58c0 	call	4d58c <altera_avalon_uart_read>
      fd->fd_flags);
}
   4cf54:	e037883a 	mov	sp,fp
   4cf58:	dfc00117 	ldw	ra,4(sp)
   4cf5c:	df000017 	ldw	fp,0(sp)
   4cf60:	dec00204 	addi	sp,sp,8
   4cf64:	f800283a 	ret

0004cf68 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4cf68:	defffa04 	addi	sp,sp,-24
   4cf6c:	dfc00515 	stw	ra,20(sp)
   4cf70:	df000415 	stw	fp,16(sp)
   4cf74:	df000404 	addi	fp,sp,16
   4cf78:	e13ffd15 	stw	r4,-12(fp)
   4cf7c:	e17ffe15 	stw	r5,-8(fp)
   4cf80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4cf84:	e0bffd17 	ldw	r2,-12(fp)
   4cf88:	10800017 	ldw	r2,0(r2)
   4cf8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   4cf90:	e0bffc17 	ldw	r2,-16(fp)
   4cf94:	10c00a04 	addi	r3,r2,40
   4cf98:	e0bffd17 	ldw	r2,-12(fp)
   4cf9c:	10800217 	ldw	r2,8(r2)
   4cfa0:	1809883a 	mov	r4,r3
   4cfa4:	e17ffe17 	ldw	r5,-8(fp)
   4cfa8:	e1bfff17 	ldw	r6,-4(fp)
   4cfac:	100f883a 	mov	r7,r2
   4cfb0:	004d8440 	call	4d844 <altera_avalon_uart_write>
      fd->fd_flags);
}
   4cfb4:	e037883a 	mov	sp,fp
   4cfb8:	dfc00117 	ldw	ra,4(sp)
   4cfbc:	df000017 	ldw	fp,0(sp)
   4cfc0:	dec00204 	addi	sp,sp,8
   4cfc4:	f800283a 	ret

0004cfc8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   4cfc8:	defffc04 	addi	sp,sp,-16
   4cfcc:	dfc00315 	stw	ra,12(sp)
   4cfd0:	df000215 	stw	fp,8(sp)
   4cfd4:	df000204 	addi	fp,sp,8
   4cfd8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4cfdc:	e0bfff17 	ldw	r2,-4(fp)
   4cfe0:	10800017 	ldw	r2,0(r2)
   4cfe4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   4cfe8:	e0bffe17 	ldw	r2,-8(fp)
   4cfec:	10c00a04 	addi	r3,r2,40
   4cff0:	e0bfff17 	ldw	r2,-4(fp)
   4cff4:	10800217 	ldw	r2,8(r2)
   4cff8:	1809883a 	mov	r4,r3
   4cffc:	100b883a 	mov	r5,r2
   4d000:	004d4e80 	call	4d4e8 <altera_avalon_uart_close>
}
   4d004:	e037883a 	mov	sp,fp
   4d008:	dfc00117 	ldw	ra,4(sp)
   4d00c:	df000017 	ldw	fp,0(sp)
   4d010:	dec00204 	addi	sp,sp,8
   4d014:	f800283a 	ret

0004d018 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   4d018:	defff204 	addi	sp,sp,-56
   4d01c:	dfc00d15 	stw	ra,52(sp)
   4d020:	df000c15 	stw	fp,48(sp)
   4d024:	df000c04 	addi	fp,sp,48
   4d028:	e13ffd15 	stw	r4,-12(fp)
   4d02c:	e17ffe15 	stw	r5,-8(fp)
   4d030:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   4d034:	e0bffd17 	ldw	r2,-12(fp)
   4d038:	10800017 	ldw	r2,0(r2)
   4d03c:	e0bff515 	stw	r2,-44(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   4d040:	e0bffd17 	ldw	r2,-12(fp)
   4d044:	10800704 	addi	r2,r2,28
   4d048:	e0bff715 	stw	r2,-36(fp)
   4d04c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   4d050:	e0fff80b 	ldhu	r3,-32(fp)
   4d054:	e0bffc84 	addi	r2,fp,-14
   4d058:	1809883a 	mov	r4,r3
   4d05c:	100b883a 	mov	r5,r2
   4d060:	00467c80 	call	467c8 <OSFlagCreate>
   4d064:	1007883a 	mov	r3,r2
   4d068:	e0bff717 	ldw	r2,-36(fp)
   4d06c:	10c00015 	stw	r3,0(r2)
  return err;
   4d070:	e0bffc83 	ldbu	r2,-14(fp)
   4d074:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   4d078:	1000241e 	bne	r2,zero,4d10c <altera_avalon_uart_init+0xf4>
   4d07c:	e0bffd17 	ldw	r2,-12(fp)
   4d080:	10800804 	addi	r2,r2,32
   4d084:	e0bff915 	stw	r2,-28(fp)
   4d088:	00800044 	movi	r2,1
   4d08c:	e0bffa0d 	sth	r2,-24(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   4d090:	e0bffa0b 	ldhu	r2,-24(fp)
   4d094:	1009883a 	mov	r4,r2
   4d098:	004972c0 	call	4972c <OSSemCreate>
   4d09c:	1007883a 	mov	r3,r2
   4d0a0:	e0bff917 	ldw	r2,-28(fp)
   4d0a4:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
   4d0a8:	e0bff917 	ldw	r2,-28(fp)
   4d0ac:	10800017 	ldw	r2,0(r2)
   4d0b0:	10000226 	beq	r2,zero,4d0bc <altera_avalon_uart_init+0xa4>
   4d0b4:	0005883a 	mov	r2,zero
   4d0b8:	00000106 	br	4d0c0 <altera_avalon_uart_init+0xa8>
   4d0bc:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   4d0c0:	1000121e 	bne	r2,zero,4d10c <altera_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
   4d0c4:	e0bffd17 	ldw	r2,-12(fp)
   4d0c8:	10800904 	addi	r2,r2,36
   4d0cc:	e0bffb15 	stw	r2,-20(fp)
   4d0d0:	00800044 	movi	r2,1
   4d0d4:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   4d0d8:	e0bffc0b 	ldhu	r2,-16(fp)
   4d0dc:	1009883a 	mov	r4,r2
   4d0e0:	004972c0 	call	4972c <OSSemCreate>
   4d0e4:	1007883a 	mov	r3,r2
   4d0e8:	e0bffb17 	ldw	r2,-20(fp)
   4d0ec:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
   4d0f0:	e0bffb17 	ldw	r2,-20(fp)
   4d0f4:	10800017 	ldw	r2,0(r2)
   4d0f8:	10000226 	beq	r2,zero,4d104 <altera_avalon_uart_init+0xec>
   4d0fc:	0005883a 	mov	r2,zero
   4d100:	00000106 	br	4d108 <altera_avalon_uart_init+0xf0>
   4d104:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   4d108:	10000226 	beq	r2,zero,4d114 <altera_avalon_uart_init+0xfc>
   4d10c:	00800044 	movi	r2,1
   4d110:	00000106 	br	4d118 <altera_avalon_uart_init+0x100>
   4d114:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   4d118:	e0bff615 	stw	r2,-40(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   4d11c:	e0bff617 	ldw	r2,-40(fp)
   4d120:	10000f1e 	bne	r2,zero,4d160 <altera_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   4d124:	e0bffd17 	ldw	r2,-12(fp)
   4d128:	00c32004 	movi	r3,3200
   4d12c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   4d130:	e0bff517 	ldw	r2,-44(fp)
   4d134:	10800304 	addi	r2,r2,12
   4d138:	e0fffd17 	ldw	r3,-12(fp)
   4d13c:	18c00117 	ldw	r3,4(r3)
   4d140:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   4d144:	d8000015 	stw	zero,0(sp)
   4d148:	e13ffe17 	ldw	r4,-8(fp)
   4d14c:	e17fff17 	ldw	r5,-4(fp)
   4d150:	01800174 	movhi	r6,5
   4d154:	31b45d04 	addi	r6,r6,-11916
   4d158:	e1fffd17 	ldw	r7,-12(fp)
   4d15c:	004dda00 	call	4dda0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   4d160:	e037883a 	mov	sp,fp
   4d164:	dfc00117 	ldw	ra,4(sp)
   4d168:	df000017 	ldw	fp,0(sp)
   4d16c:	dec00204 	addi	sp,sp,8
   4d170:	f800283a 	ret

0004d174 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   4d174:	defffa04 	addi	sp,sp,-24
   4d178:	dfc00515 	stw	ra,20(sp)
   4d17c:	df000415 	stw	fp,16(sp)
   4d180:	df000404 	addi	fp,sp,16
   4d184:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   4d188:	e0bfff17 	ldw	r2,-4(fp)
   4d18c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   4d190:	e0bffc17 	ldw	r2,-16(fp)
   4d194:	10800017 	ldw	r2,0(r2)
   4d198:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   4d19c:	e0bffd17 	ldw	r2,-12(fp)
   4d1a0:	10800204 	addi	r2,r2,8
   4d1a4:	10800037 	ldwio	r2,0(r2)
   4d1a8:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   4d1ac:	e0bffd17 	ldw	r2,-12(fp)
   4d1b0:	10800204 	addi	r2,r2,8
   4d1b4:	0007883a 	mov	r3,zero
   4d1b8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   4d1bc:	e0bffd17 	ldw	r2,-12(fp)
   4d1c0:	10800204 	addi	r2,r2,8
   4d1c4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   4d1c8:	e0bffe17 	ldw	r2,-8(fp)
   4d1cc:	1080200c 	andi	r2,r2,128
   4d1d0:	10000326 	beq	r2,zero,4d1e0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   4d1d4:	e13ffc17 	ldw	r4,-16(fp)
   4d1d8:	e17ffe17 	ldw	r5,-8(fp)
   4d1dc:	004d20c0 	call	4d20c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   4d1e0:	e0bffe17 	ldw	r2,-8(fp)
   4d1e4:	1081100c 	andi	r2,r2,1088
   4d1e8:	10000326 	beq	r2,zero,4d1f8 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   4d1ec:	e13ffc17 	ldw	r4,-16(fp)
   4d1f0:	e17ffe17 	ldw	r5,-8(fp)
   4d1f4:	004d3440 	call	4d344 <altera_avalon_uart_txirq>
  }
  

}
   4d1f8:	e037883a 	mov	sp,fp
   4d1fc:	dfc00117 	ldw	ra,4(sp)
   4d200:	df000017 	ldw	fp,0(sp)
   4d204:	dec00204 	addi	sp,sp,8
   4d208:	f800283a 	ret

0004d20c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   4d20c:	defff904 	addi	sp,sp,-28
   4d210:	dfc00615 	stw	ra,24(sp)
   4d214:	df000515 	stw	fp,20(sp)
   4d218:	df000504 	addi	fp,sp,20
   4d21c:	e13ffe15 	stw	r4,-8(fp)
   4d220:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   4d224:	e0bfff17 	ldw	r2,-4(fp)
   4d228:	108000cc 	andi	r2,r2,3
   4d22c:	10000126 	beq	r2,zero,4d234 <altera_avalon_uart_rxirq+0x28>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   4d230:	00003f06 	br	4d330 <altera_avalon_uart_rxirq+0x124>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   4d234:	e0bffe17 	ldw	r2,-8(fp)
   4d238:	10c00317 	ldw	r3,12(r2)
   4d23c:	e0bffe17 	ldw	r2,-8(fp)
   4d240:	10800217 	ldw	r2,8(r2)
   4d244:	1880131e 	bne	r3,r2,4d294 <altera_avalon_uart_rxirq+0x88>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
   4d248:	e0bffe17 	ldw	r2,-8(fp)
   4d24c:	10800717 	ldw	r2,28(r2)
   4d250:	e0bffc15 	stw	r2,-16(fp)
   4d254:	00800044 	movi	r2,1
   4d258:	e0bffd0d 	sth	r2,-12(fp)
   4d25c:	00800044 	movi	r2,1
   4d260:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   4d264:	00800174 	movhi	r2,5
   4d268:	108b1544 	addi	r2,r2,11349
   4d26c:	10800003 	ldbu	r2,0(r2)
   4d270:	10803fcc 	andi	r2,r2,255
   4d274:	10000726 	beq	r2,zero,4d294 <altera_avalon_uart_rxirq+0x88>
  {
    OSFlagPost (group, flags, opt, &err);
   4d278:	e17ffd0b 	ldhu	r5,-12(fp)
   4d27c:	e0fffd83 	ldbu	r3,-10(fp)
   4d280:	e0bffdc4 	addi	r2,fp,-9
   4d284:	e13ffc17 	ldw	r4,-16(fp)
   4d288:	180d883a 	mov	r6,r3
   4d28c:	100f883a 	mov	r7,r2
   4d290:	00474380 	call	47438 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4d294:	e0bffe17 	ldw	r2,-8(fp)
   4d298:	10800317 	ldw	r2,12(r2)
   4d29c:	10800044 	addi	r2,r2,1
   4d2a0:	10800fcc 	andi	r2,r2,63
   4d2a4:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   4d2a8:	e0bffe17 	ldw	r2,-8(fp)
   4d2ac:	10800317 	ldw	r2,12(r2)
   4d2b0:	e0fffe17 	ldw	r3,-8(fp)
   4d2b4:	18c00017 	ldw	r3,0(r3)
   4d2b8:	18c00037 	ldwio	r3,0(r3)
   4d2bc:	1809883a 	mov	r4,r3
   4d2c0:	e0fffe17 	ldw	r3,-8(fp)
   4d2c4:	1885883a 	add	r2,r3,r2
   4d2c8:	10800a04 	addi	r2,r2,40
   4d2cc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   4d2d0:	e0bffe17 	ldw	r2,-8(fp)
   4d2d4:	e0fffb17 	ldw	r3,-20(fp)
   4d2d8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4d2dc:	e0bffe17 	ldw	r2,-8(fp)
   4d2e0:	10800317 	ldw	r2,12(r2)
   4d2e4:	10800044 	addi	r2,r2,1
   4d2e8:	10800fcc 	andi	r2,r2,63
   4d2ec:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   4d2f0:	e0bffe17 	ldw	r2,-8(fp)
   4d2f4:	10c00217 	ldw	r3,8(r2)
   4d2f8:	e0bffb17 	ldw	r2,-20(fp)
   4d2fc:	18800c1e 	bne	r3,r2,4d330 <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4d300:	e0bffe17 	ldw	r2,-8(fp)
   4d304:	10c00117 	ldw	r3,4(r2)
   4d308:	00bfdfc4 	movi	r2,-129
   4d30c:	1886703a 	and	r3,r3,r2
   4d310:	e0bffe17 	ldw	r2,-8(fp)
   4d314:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   4d318:	e0bffe17 	ldw	r2,-8(fp)
   4d31c:	10800017 	ldw	r2,0(r2)
   4d320:	10800304 	addi	r2,r2,12
   4d324:	e0fffe17 	ldw	r3,-8(fp)
   4d328:	18c00117 	ldw	r3,4(r3)
   4d32c:	10c00035 	stwio	r3,0(r2)
  }   
}
   4d330:	e037883a 	mov	sp,fp
   4d334:	dfc00117 	ldw	ra,4(sp)
   4d338:	df000017 	ldw	fp,0(sp)
   4d33c:	dec00204 	addi	sp,sp,8
   4d340:	f800283a 	ret

0004d344 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   4d344:	defffa04 	addi	sp,sp,-24
   4d348:	dfc00515 	stw	ra,20(sp)
   4d34c:	df000415 	stw	fp,16(sp)
   4d350:	df000404 	addi	fp,sp,16
   4d354:	e13ffe15 	stw	r4,-8(fp)
   4d358:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   4d35c:	e0bffe17 	ldw	r2,-8(fp)
   4d360:	10c00417 	ldw	r3,16(r2)
   4d364:	e0bffe17 	ldw	r2,-8(fp)
   4d368:	10800517 	ldw	r2,20(r2)
   4d36c:	18804826 	beq	r3,r2,4d490 <altera_avalon_uart_txirq+0x14c>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   4d370:	e0bffe17 	ldw	r2,-8(fp)
   4d374:	10800617 	ldw	r2,24(r2)
   4d378:	1080008c 	andi	r2,r2,2
   4d37c:	10000326 	beq	r2,zero,4d38c <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   4d380:	e0bfff17 	ldw	r2,-4(fp)
   4d384:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   4d388:	10003326 	beq	r2,zero,4d458 <altera_avalon_uart_txirq+0x114>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   4d38c:	e0bffe17 	ldw	r2,-8(fp)
   4d390:	10c00417 	ldw	r3,16(r2)
   4d394:	e0bffe17 	ldw	r2,-8(fp)
   4d398:	10800517 	ldw	r2,20(r2)
   4d39c:	10800044 	addi	r2,r2,1
   4d3a0:	10800fcc 	andi	r2,r2,63
   4d3a4:	1880131e 	bne	r3,r2,4d3f4 <altera_avalon_uart_txirq+0xb0>
      { 
        ALT_FLAG_POST (sp->events, 
   4d3a8:	e0bffe17 	ldw	r2,-8(fp)
   4d3ac:	10800717 	ldw	r2,28(r2)
   4d3b0:	e0bffc15 	stw	r2,-16(fp)
   4d3b4:	00800084 	movi	r2,2
   4d3b8:	e0bffd0d 	sth	r2,-12(fp)
   4d3bc:	00800044 	movi	r2,1
   4d3c0:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   4d3c4:	00800174 	movhi	r2,5
   4d3c8:	108b1544 	addi	r2,r2,11349
   4d3cc:	10800003 	ldbu	r2,0(r2)
   4d3d0:	10803fcc 	andi	r2,r2,255
   4d3d4:	10000726 	beq	r2,zero,4d3f4 <altera_avalon_uart_txirq+0xb0>
  {
    OSFlagPost (group, flags, opt, &err);
   4d3d8:	e17ffd0b 	ldhu	r5,-12(fp)
   4d3dc:	e0fffd83 	ldbu	r3,-10(fp)
   4d3e0:	e0bffdc4 	addi	r2,fp,-9
   4d3e4:	e13ffc17 	ldw	r4,-16(fp)
   4d3e8:	180d883a 	mov	r6,r3
   4d3ec:	100f883a 	mov	r7,r2
   4d3f0:	00474380 	call	47438 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   4d3f4:	e0bffe17 	ldw	r2,-8(fp)
   4d3f8:	10800017 	ldw	r2,0(r2)
   4d3fc:	10800104 	addi	r2,r2,4
   4d400:	e0fffe17 	ldw	r3,-8(fp)
   4d404:	18c00417 	ldw	r3,16(r3)
   4d408:	e13ffe17 	ldw	r4,-8(fp)
   4d40c:	20c7883a 	add	r3,r4,r3
   4d410:	18c01a04 	addi	r3,r3,104
   4d414:	18c00003 	ldbu	r3,0(r3)
   4d418:	18c03fcc 	andi	r3,r3,255
   4d41c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   4d420:	e0bffe17 	ldw	r2,-8(fp)
   4d424:	10800417 	ldw	r2,16(r2)
   4d428:	10800044 	addi	r2,r2,1
   4d42c:	e0fffe17 	ldw	r3,-8(fp)
   4d430:	18800415 	stw	r2,16(r3)
   4d434:	10c00fcc 	andi	r3,r2,63
   4d438:	e0bffe17 	ldw	r2,-8(fp)
   4d43c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   4d440:	e0bffe17 	ldw	r2,-8(fp)
   4d444:	10800117 	ldw	r2,4(r2)
   4d448:	10c01014 	ori	r3,r2,64
   4d44c:	e0bffe17 	ldw	r2,-8(fp)
   4d450:	10c00115 	stw	r3,4(r2)
   4d454:	00000e06 	br	4d490 <altera_avalon_uart_txirq+0x14c>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   4d458:	e0bffe17 	ldw	r2,-8(fp)
   4d45c:	10800017 	ldw	r2,0(r2)
   4d460:	10800204 	addi	r2,r2,8
   4d464:	10800037 	ldwio	r2,0(r2)
   4d468:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   4d46c:	e0bfff17 	ldw	r2,-4(fp)
   4d470:	1082000c 	andi	r2,r2,2048
   4d474:	1000061e 	bne	r2,zero,4d490 <altera_avalon_uart_txirq+0x14c>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   4d478:	e0bffe17 	ldw	r2,-8(fp)
   4d47c:	10c00117 	ldw	r3,4(r2)
   4d480:	00bfefc4 	movi	r2,-65
   4d484:	1886703a 	and	r3,r3,r2
   4d488:	e0bffe17 	ldw	r2,-8(fp)
   4d48c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   4d490:	e0bffe17 	ldw	r2,-8(fp)
   4d494:	10c00417 	ldw	r3,16(r2)
   4d498:	e0bffe17 	ldw	r2,-8(fp)
   4d49c:	10800517 	ldw	r2,20(r2)
   4d4a0:	1880061e 	bne	r3,r2,4d4bc <altera_avalon_uart_txirq+0x178>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4d4a4:	e0bffe17 	ldw	r2,-8(fp)
   4d4a8:	10c00117 	ldw	r3,4(r2)
   4d4ac:	00beefc4 	movi	r2,-1089
   4d4b0:	1886703a 	and	r3,r3,r2
   4d4b4:	e0bffe17 	ldw	r2,-8(fp)
   4d4b8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4d4bc:	e0bffe17 	ldw	r2,-8(fp)
   4d4c0:	10800017 	ldw	r2,0(r2)
   4d4c4:	10800304 	addi	r2,r2,12
   4d4c8:	e0fffe17 	ldw	r3,-8(fp)
   4d4cc:	18c00117 	ldw	r3,4(r3)
   4d4d0:	10c00035 	stwio	r3,0(r2)
}
   4d4d4:	e037883a 	mov	sp,fp
   4d4d8:	dfc00117 	ldw	ra,4(sp)
   4d4dc:	df000017 	ldw	fp,0(sp)
   4d4e0:	dec00204 	addi	sp,sp,8
   4d4e4:	f800283a 	ret

0004d4e8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   4d4e8:	defffd04 	addi	sp,sp,-12
   4d4ec:	df000215 	stw	fp,8(sp)
   4d4f0:	df000204 	addi	fp,sp,8
   4d4f4:	e13ffe15 	stw	r4,-8(fp)
   4d4f8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   4d4fc:	00000506 	br	4d514 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4d500:	e0bfff17 	ldw	r2,-4(fp)
   4d504:	1090000c 	andi	r2,r2,16384
   4d508:	10000226 	beq	r2,zero,4d514 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4d50c:	00bffd44 	movi	r2,-11
   4d510:	00000606 	br	4d52c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   4d514:	e0bffe17 	ldw	r2,-8(fp)
   4d518:	10c00417 	ldw	r3,16(r2)
   4d51c:	e0bffe17 	ldw	r2,-8(fp)
   4d520:	10800517 	ldw	r2,20(r2)
   4d524:	18bff61e 	bne	r3,r2,4d500 <__alt_data_end+0xfffd79a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4d528:	0005883a 	mov	r2,zero
}
   4d52c:	e037883a 	mov	sp,fp
   4d530:	df000017 	ldw	fp,0(sp)
   4d534:	dec00104 	addi	sp,sp,4
   4d538:	f800283a 	ret

0004d53c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d53c:	defffe04 	addi	sp,sp,-8
   4d540:	dfc00115 	stw	ra,4(sp)
   4d544:	df000015 	stw	fp,0(sp)
   4d548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d54c:	00800174 	movhi	r2,5
   4d550:	1083f404 	addi	r2,r2,4048
   4d554:	10800017 	ldw	r2,0(r2)
   4d558:	10000526 	beq	r2,zero,4d570 <alt_get_errno+0x34>
   4d55c:	00800174 	movhi	r2,5
   4d560:	1083f404 	addi	r2,r2,4048
   4d564:	10800017 	ldw	r2,0(r2)
   4d568:	103ee83a 	callr	r2
   4d56c:	00000206 	br	4d578 <alt_get_errno+0x3c>
   4d570:	00800174 	movhi	r2,5
   4d574:	108b0c04 	addi	r2,r2,11312
}
   4d578:	e037883a 	mov	sp,fp
   4d57c:	dfc00117 	ldw	ra,4(sp)
   4d580:	df000017 	ldw	fp,0(sp)
   4d584:	dec00204 	addi	sp,sp,8
   4d588:	f800283a 	ret

0004d58c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   4d58c:	deffeb04 	addi	sp,sp,-84
   4d590:	dfc01415 	stw	ra,80(sp)
   4d594:	df001315 	stw	fp,76(sp)
   4d598:	df001304 	addi	fp,sp,76
   4d59c:	e13ffc15 	stw	r4,-16(fp)
   4d5a0:	e17ffd15 	stw	r5,-12(fp)
   4d5a4:	e1bffe15 	stw	r6,-8(fp)
   4d5a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   4d5ac:	e03fee05 	stb	zero,-72(fp)
  int             count = 0;
   4d5b0:	e03fef15 	stw	zero,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   4d5b4:	e0bfff17 	ldw	r2,-4(fp)
   4d5b8:	1090000c 	andi	r2,r2,16384
   4d5bc:	1005003a 	cmpeq	r2,r2,zero
   4d5c0:	10803fcc 	andi	r2,r2,255
   4d5c4:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
   4d5c8:	e0bffc17 	ldw	r2,-16(fp)
   4d5cc:	10800817 	ldw	r2,32(r2)
   4d5d0:	e0bff215 	stw	r2,-56(fp)
   4d5d4:	e03ff30d 	sth	zero,-52(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   4d5d8:	e0fff30b 	ldhu	r3,-52(fp)
   4d5dc:	e0bffb44 	addi	r2,fp,-19
   4d5e0:	e13ff217 	ldw	r4,-56(fp)
   4d5e4:	180b883a 	mov	r5,r3
   4d5e8:	100d883a 	mov	r6,r2
   4d5ec:	0049a940 	call	49a94 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   4d5f0:	00001306 	br	4d640 <altera_avalon_uart_read+0xb4>
    {
      count++;
   4d5f4:	e0bfef17 	ldw	r2,-68(fp)
   4d5f8:	10800044 	addi	r2,r2,1
   4d5fc:	e0bfef15 	stw	r2,-68(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   4d600:	e0bffd17 	ldw	r2,-12(fp)
   4d604:	10c00044 	addi	r3,r2,1
   4d608:	e0fffd15 	stw	r3,-12(fp)
   4d60c:	e0fffc17 	ldw	r3,-16(fp)
   4d610:	18c00217 	ldw	r3,8(r3)
   4d614:	e13ffc17 	ldw	r4,-16(fp)
   4d618:	20c7883a 	add	r3,r4,r3
   4d61c:	18c00a04 	addi	r3,r3,40
   4d620:	18c00003 	ldbu	r3,0(r3)
   4d624:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   4d628:	e0bffc17 	ldw	r2,-16(fp)
   4d62c:	10800217 	ldw	r2,8(r2)
   4d630:	10800044 	addi	r2,r2,1
   4d634:	10c00fcc 	andi	r3,r2,63
   4d638:	e0bffc17 	ldw	r2,-16(fp)
   4d63c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   4d640:	e0ffef17 	ldw	r3,-68(fp)
   4d644:	e0bffe17 	ldw	r2,-8(fp)
   4d648:	1880050e 	bge	r3,r2,4d660 <altera_avalon_uart_read+0xd4>
   4d64c:	e0bffc17 	ldw	r2,-16(fp)
   4d650:	10c00217 	ldw	r3,8(r2)
   4d654:	e0bffc17 	ldw	r2,-16(fp)
   4d658:	10800317 	ldw	r2,12(r2)
   4d65c:	18bfe51e 	bne	r3,r2,4d5f4 <__alt_data_end+0xfffd7a94>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   4d660:	e0bfef17 	ldw	r2,-68(fp)
   4d664:	10003a1e 	bne	r2,zero,4d750 <altera_avalon_uart_read+0x1c4>
   4d668:	e0bffc17 	ldw	r2,-16(fp)
   4d66c:	10c00217 	ldw	r3,8(r2)
   4d670:	e0bffc17 	ldw	r2,-16(fp)
   4d674:	10800317 	ldw	r2,12(r2)
   4d678:	1880351e 	bne	r3,r2,4d750 <altera_avalon_uart_read+0x1c4>
    {
      if (!block)
   4d67c:	e0bff017 	ldw	r2,-64(fp)
   4d680:	1000071e 	bne	r2,zero,4d6a0 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   4d684:	004d53c0 	call	4d53c <alt_get_errno>
   4d688:	1007883a 	mov	r3,r2
   4d68c:	008002c4 	movi	r2,11
   4d690:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   4d694:	00800044 	movi	r2,1
   4d698:	e0bfee05 	stb	r2,-72(fp)
        break;
   4d69c:	00003006 	br	4d760 <altera_avalon_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d6a0:	0005303a 	rdctl	r2,status
   4d6a4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d6a8:	e0fff417 	ldw	r3,-48(fp)
   4d6ac:	00bfff84 	movi	r2,-2
   4d6b0:	1884703a 	and	r2,r3,r2
   4d6b4:	1001703a 	wrctl	status,r2
  
  return context;
   4d6b8:	e0bff417 	ldw	r2,-48(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   4d6bc:	e0bff115 	stw	r2,-60(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4d6c0:	e0bffc17 	ldw	r2,-16(fp)
   4d6c4:	10800117 	ldw	r2,4(r2)
   4d6c8:	10c02014 	ori	r3,r2,128
   4d6cc:	e0bffc17 	ldw	r2,-16(fp)
   4d6d0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4d6d4:	e0bffc17 	ldw	r2,-16(fp)
   4d6d8:	10800017 	ldw	r2,0(r2)
   4d6dc:	10800304 	addi	r2,r2,12
   4d6e0:	e0fffc17 	ldw	r3,-16(fp)
   4d6e4:	18c00117 	ldw	r3,4(r3)
   4d6e8:	10c00035 	stwio	r3,0(r2)
   4d6ec:	e0bff117 	ldw	r2,-60(fp)
   4d6f0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d6f4:	e0bff517 	ldw	r2,-44(fp)
   4d6f8:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
   4d6fc:	e0bffc17 	ldw	r2,-16(fp)
   4d700:	10800717 	ldw	r2,28(r2)
   4d704:	e0bff615 	stw	r2,-40(fp)
   4d708:	00800044 	movi	r2,1
   4d70c:	e0bff70d 	sth	r2,-36(fp)
   4d710:	00bfe0c4 	movi	r2,-125
   4d714:	e0bff785 	stb	r2,-34(fp)
   4d718:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   4d71c:	00800174 	movhi	r2,5
   4d720:	108b1544 	addi	r2,r2,11349
   4d724:	10800003 	ldbu	r2,0(r2)
   4d728:	10803fcc 	andi	r2,r2,255
   4d72c:	10000826 	beq	r2,zero,4d750 <altera_avalon_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   4d730:	e17ff70b 	ldhu	r5,-36(fp)
   4d734:	e1bff783 	ldbu	r6,-34(fp)
   4d738:	e0fff80b 	ldhu	r3,-32(fp)
   4d73c:	e0bffb04 	addi	r2,fp,-20
   4d740:	d8800015 	stw	r2,0(sp)
   4d744:	e13ff617 	ldw	r4,-40(fp)
   4d748:	180f883a 	mov	r7,r3
   4d74c:	0046de00 	call	46de0 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   4d750:	e0bfef17 	ldw	r2,-68(fp)
   4d754:	1000021e 	bne	r2,zero,4d760 <altera_avalon_uart_read+0x1d4>
   4d758:	e0bffe17 	ldw	r2,-8(fp)
   4d75c:	103fa41e 	bne	r2,zero,4d5f0 <__alt_data_end+0xfffd7a90>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   4d760:	e0bffc17 	ldw	r2,-16(fp)
   4d764:	10800817 	ldw	r2,32(r2)
   4d768:	1009883a 	mov	r4,r2
   4d76c:	0049e680 	call	49e68 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d770:	0005303a 	rdctl	r2,status
   4d774:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d778:	e0fff917 	ldw	r3,-28(fp)
   4d77c:	00bfff84 	movi	r2,-2
   4d780:	1884703a 	and	r2,r3,r2
   4d784:	1001703a 	wrctl	status,r2
  
  return context;
   4d788:	e0bff917 	ldw	r2,-28(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   4d78c:	e0bff115 	stw	r2,-60(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4d790:	e0bffc17 	ldw	r2,-16(fp)
   4d794:	10800117 	ldw	r2,4(r2)
   4d798:	10c02014 	ori	r3,r2,128
   4d79c:	e0bffc17 	ldw	r2,-16(fp)
   4d7a0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4d7a4:	e0bffc17 	ldw	r2,-16(fp)
   4d7a8:	10800017 	ldw	r2,0(r2)
   4d7ac:	10800304 	addi	r2,r2,12
   4d7b0:	e0fffc17 	ldw	r3,-16(fp)
   4d7b4:	18c00117 	ldw	r3,4(r3)
   4d7b8:	10c00035 	stwio	r3,0(r2)
   4d7bc:	e0bff117 	ldw	r2,-60(fp)
   4d7c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d7c4:	e0bffa17 	ldw	r2,-24(fp)
   4d7c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   4d7cc:	e0bfee03 	ldbu	r2,-72(fp)
   4d7d0:	10000226 	beq	r2,zero,4d7dc <altera_avalon_uart_read+0x250>
    return -EWOULDBLOCK;
   4d7d4:	00bffd44 	movi	r2,-11
   4d7d8:	00000106 	br	4d7e0 <altera_avalon_uart_read+0x254>
  }
  else {
    return count;
   4d7dc:	e0bfef17 	ldw	r2,-68(fp)
  }
}
   4d7e0:	e037883a 	mov	sp,fp
   4d7e4:	dfc00117 	ldw	ra,4(sp)
   4d7e8:	df000017 	ldw	fp,0(sp)
   4d7ec:	dec00204 	addi	sp,sp,8
   4d7f0:	f800283a 	ret

0004d7f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d7f4:	defffe04 	addi	sp,sp,-8
   4d7f8:	dfc00115 	stw	ra,4(sp)
   4d7fc:	df000015 	stw	fp,0(sp)
   4d800:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d804:	00800174 	movhi	r2,5
   4d808:	1083f404 	addi	r2,r2,4048
   4d80c:	10800017 	ldw	r2,0(r2)
   4d810:	10000526 	beq	r2,zero,4d828 <alt_get_errno+0x34>
   4d814:	00800174 	movhi	r2,5
   4d818:	1083f404 	addi	r2,r2,4048
   4d81c:	10800017 	ldw	r2,0(r2)
   4d820:	103ee83a 	callr	r2
   4d824:	00000206 	br	4d830 <alt_get_errno+0x3c>
   4d828:	00800174 	movhi	r2,5
   4d82c:	108b0c04 	addi	r2,r2,11312
}
   4d830:	e037883a 	mov	sp,fp
   4d834:	dfc00117 	ldw	ra,4(sp)
   4d838:	df000017 	ldw	fp,0(sp)
   4d83c:	dec00204 	addi	sp,sp,8
   4d840:	f800283a 	ret

0004d844 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   4d844:	deffeb04 	addi	sp,sp,-84
   4d848:	dfc01415 	stw	ra,80(sp)
   4d84c:	df001315 	stw	fp,76(sp)
   4d850:	df001304 	addi	fp,sp,76
   4d854:	e13ffc15 	stw	r4,-16(fp)
   4d858:	e17ffd15 	stw	r5,-12(fp)
   4d85c:	e1bffe15 	stw	r6,-8(fp)
   4d860:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   4d864:	e0bffe17 	ldw	r2,-8(fp)
   4d868:	e0bfee15 	stw	r2,-72(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   4d86c:	e0bfff17 	ldw	r2,-4(fp)
   4d870:	1090000c 	andi	r2,r2,16384
   4d874:	e0bfef15 	stw	r2,-68(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
   4d878:	e0bffc17 	ldw	r2,-16(fp)
   4d87c:	10800917 	ldw	r2,36(r2)
   4d880:	e0bff215 	stw	r2,-56(fp)
   4d884:	e03ff30d 	sth	zero,-52(fp)
   4d888:	e0fff30b 	ldhu	r3,-52(fp)
   4d88c:	e0bffb44 	addi	r2,fp,-19
   4d890:	e13ff217 	ldw	r4,-56(fp)
   4d894:	180b883a 	mov	r5,r3
   4d898:	100d883a 	mov	r6,r2
   4d89c:	0049a940 	call	49a94 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   4d8a0:	00005106 	br	4d9e8 <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4d8a4:	e0bffc17 	ldw	r2,-16(fp)
   4d8a8:	10800517 	ldw	r2,20(r2)
   4d8ac:	10800044 	addi	r2,r2,1
   4d8b0:	10800fcc 	andi	r2,r2,63
   4d8b4:	e0bff015 	stw	r2,-64(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   4d8b8:	e0bffc17 	ldw	r2,-16(fp)
   4d8bc:	10c00417 	ldw	r3,16(r2)
   4d8c0:	e0bff017 	ldw	r2,-64(fp)
   4d8c4:	1880371e 	bne	r3,r2,4d9a4 <altera_avalon_uart_write+0x160>
    {
      if (no_block)
   4d8c8:	e0bfef17 	ldw	r2,-68(fp)
   4d8cc:	10000526 	beq	r2,zero,4d8e4 <altera_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   4d8d0:	004d7f40 	call	4d7f4 <alt_get_errno>
   4d8d4:	1007883a 	mov	r3,r2
   4d8d8:	008002c4 	movi	r2,11
   4d8dc:	18800015 	stw	r2,0(r3)
        break;
   4d8e0:	00004306 	br	4d9f0 <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d8e4:	0005303a 	rdctl	r2,status
   4d8e8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d8ec:	e0fff417 	ldw	r3,-48(fp)
   4d8f0:	00bfff84 	movi	r2,-2
   4d8f4:	1884703a 	and	r2,r3,r2
   4d8f8:	1001703a 	wrctl	status,r2
  
  return context;
   4d8fc:	e0bff417 	ldw	r2,-48(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   4d900:	e0bff115 	stw	r2,-60(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4d904:	e0bffc17 	ldw	r2,-16(fp)
   4d908:	10800117 	ldw	r2,4(r2)
   4d90c:	10c11014 	ori	r3,r2,1088
   4d910:	e0bffc17 	ldw	r2,-16(fp)
   4d914:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4d918:	e0bffc17 	ldw	r2,-16(fp)
   4d91c:	10800017 	ldw	r2,0(r2)
   4d920:	10800304 	addi	r2,r2,12
   4d924:	e0fffc17 	ldw	r3,-16(fp)
   4d928:	18c00117 	ldw	r3,4(r3)
   4d92c:	10c00035 	stwio	r3,0(r2)
   4d930:	e0bff117 	ldw	r2,-60(fp)
   4d934:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d938:	e0bff517 	ldw	r2,-44(fp)
   4d93c:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
   4d940:	e0bffc17 	ldw	r2,-16(fp)
   4d944:	10800717 	ldw	r2,28(r2)
   4d948:	e0bff615 	stw	r2,-40(fp)
   4d94c:	00800084 	movi	r2,2
   4d950:	e0bff70d 	sth	r2,-36(fp)
   4d954:	00bfe0c4 	movi	r2,-125
   4d958:	e0bff785 	stb	r2,-34(fp)
   4d95c:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   4d960:	00800174 	movhi	r2,5
   4d964:	108b1544 	addi	r2,r2,11349
   4d968:	10800003 	ldbu	r2,0(r2)
   4d96c:	10803fcc 	andi	r2,r2,255
   4d970:	10000826 	beq	r2,zero,4d994 <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   4d974:	e17ff70b 	ldhu	r5,-36(fp)
   4d978:	e1bff783 	ldbu	r6,-34(fp)
   4d97c:	e0fff80b 	ldhu	r3,-32(fp)
   4d980:	e0bffb04 	addi	r2,fp,-20
   4d984:	d8800015 	stw	r2,0(sp)
   4d988:	e13ff617 	ldw	r4,-40(fp)
   4d98c:	180f883a 	mov	r7,r3
   4d990:	0046de00 	call	46de0 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   4d994:	e0bffc17 	ldw	r2,-16(fp)
   4d998:	10c00417 	ldw	r3,16(r2)
   4d99c:	e0bff017 	ldw	r2,-64(fp)
   4d9a0:	18bfe726 	beq	r3,r2,4d940 <__alt_data_end+0xfffd7de0>
      }
    }

    count--;
   4d9a4:	e0bfee17 	ldw	r2,-72(fp)
   4d9a8:	10bfffc4 	addi	r2,r2,-1
   4d9ac:	e0bfee15 	stw	r2,-72(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   4d9b0:	e0bffc17 	ldw	r2,-16(fp)
   4d9b4:	10c00517 	ldw	r3,20(r2)
   4d9b8:	e0bffd17 	ldw	r2,-12(fp)
   4d9bc:	11000044 	addi	r4,r2,1
   4d9c0:	e13ffd15 	stw	r4,-12(fp)
   4d9c4:	10800003 	ldbu	r2,0(r2)
   4d9c8:	1009883a 	mov	r4,r2
   4d9cc:	e0bffc17 	ldw	r2,-16(fp)
   4d9d0:	10c5883a 	add	r2,r2,r3
   4d9d4:	10801a04 	addi	r2,r2,104
   4d9d8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   4d9dc:	e0bffc17 	ldw	r2,-16(fp)
   4d9e0:	e0fff017 	ldw	r3,-64(fp)
   4d9e4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   4d9e8:	e0bfee17 	ldw	r2,-72(fp)
   4d9ec:	103fad1e 	bne	r2,zero,4d8a4 <__alt_data_end+0xfffd7d44>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
   4d9f0:	e0bffc17 	ldw	r2,-16(fp)
   4d9f4:	10800917 	ldw	r2,36(r2)
   4d9f8:	1009883a 	mov	r4,r2
   4d9fc:	0049e680 	call	49e68 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4da00:	0005303a 	rdctl	r2,status
   4da04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4da08:	e0fff917 	ldw	r3,-28(fp)
   4da0c:	00bfff84 	movi	r2,-2
   4da10:	1884703a 	and	r2,r3,r2
   4da14:	1001703a 	wrctl	status,r2
  
  return context;
   4da18:	e0bff917 	ldw	r2,-28(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   4da1c:	e0bff115 	stw	r2,-60(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4da20:	e0bffc17 	ldw	r2,-16(fp)
   4da24:	10800117 	ldw	r2,4(r2)
   4da28:	10c11014 	ori	r3,r2,1088
   4da2c:	e0bffc17 	ldw	r2,-16(fp)
   4da30:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4da34:	e0bffc17 	ldw	r2,-16(fp)
   4da38:	10800017 	ldw	r2,0(r2)
   4da3c:	10800304 	addi	r2,r2,12
   4da40:	e0fffc17 	ldw	r3,-16(fp)
   4da44:	18c00117 	ldw	r3,4(r3)
   4da48:	10c00035 	stwio	r3,0(r2)
   4da4c:	e0bff117 	ldw	r2,-60(fp)
   4da50:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4da54:	e0bffa17 	ldw	r2,-24(fp)
   4da58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   4da5c:	e0fffe17 	ldw	r3,-8(fp)
   4da60:	e0bfee17 	ldw	r2,-72(fp)
   4da64:	1885c83a 	sub	r2,r3,r2
}
   4da68:	e037883a 	mov	sp,fp
   4da6c:	dfc00117 	ldw	ra,4(sp)
   4da70:	df000017 	ldw	fp,0(sp)
   4da74:	dec00204 	addi	sp,sp,8
   4da78:	f800283a 	ret

0004da7c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4da7c:	defff504 	addi	sp,sp,-44
   4da80:	df000a15 	stw	fp,40(sp)
   4da84:	df000a04 	addi	fp,sp,40
   4da88:	e13ffc15 	stw	r4,-16(fp)
   4da8c:	e17ffd15 	stw	r5,-12(fp)
   4da90:	e1bffe15 	stw	r6,-8(fp)
   4da94:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4da98:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4da9c:	00800174 	movhi	r2,5
   4daa0:	108b2a04 	addi	r2,r2,11432
   4daa4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4daa8:	10003f26 	beq	r2,zero,4dba8 <alt_alarm_start+0x12c>
  {
    if (alarm)
   4daac:	e0bffc17 	ldw	r2,-16(fp)
   4dab0:	10003b26 	beq	r2,zero,4dba0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   4dab4:	e0bffc17 	ldw	r2,-16(fp)
   4dab8:	e0fffe17 	ldw	r3,-8(fp)
   4dabc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4dac0:	e0bffc17 	ldw	r2,-16(fp)
   4dac4:	e0ffff17 	ldw	r3,-4(fp)
   4dac8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4dacc:	0005303a 	rdctl	r2,status
   4dad0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4dad4:	e0fff817 	ldw	r3,-32(fp)
   4dad8:	00bfff84 	movi	r2,-2
   4dadc:	1884703a 	and	r2,r3,r2
   4dae0:	1001703a 	wrctl	status,r2
  
  return context;
   4dae4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4dae8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4daec:	00800174 	movhi	r2,5
   4daf0:	108b2b04 	addi	r2,r2,11436
   4daf4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4daf8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4dafc:	e0fffd17 	ldw	r3,-12(fp)
   4db00:	e0bff617 	ldw	r2,-40(fp)
   4db04:	1885883a 	add	r2,r3,r2
   4db08:	10c00044 	addi	r3,r2,1
   4db0c:	e0bffc17 	ldw	r2,-16(fp)
   4db10:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4db14:	e0bffc17 	ldw	r2,-16(fp)
   4db18:	10c00217 	ldw	r3,8(r2)
   4db1c:	e0bff617 	ldw	r2,-40(fp)
   4db20:	1880042e 	bgeu	r3,r2,4db34 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   4db24:	e0bffc17 	ldw	r2,-16(fp)
   4db28:	00c00044 	movi	r3,1
   4db2c:	10c00405 	stb	r3,16(r2)
   4db30:	00000206 	br	4db3c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   4db34:	e0bffc17 	ldw	r2,-16(fp)
   4db38:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4db3c:	e0fffc17 	ldw	r3,-16(fp)
   4db40:	00800174 	movhi	r2,5
   4db44:	10841604 	addi	r2,r2,4184
   4db48:	e0bff915 	stw	r2,-28(fp)
   4db4c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4db50:	e0bffa17 	ldw	r2,-24(fp)
   4db54:	e0fff917 	ldw	r3,-28(fp)
   4db58:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4db5c:	e0bff917 	ldw	r2,-28(fp)
   4db60:	10c00017 	ldw	r3,0(r2)
   4db64:	e0bffa17 	ldw	r2,-24(fp)
   4db68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4db6c:	e0bff917 	ldw	r2,-28(fp)
   4db70:	10800017 	ldw	r2,0(r2)
   4db74:	e0fffa17 	ldw	r3,-24(fp)
   4db78:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4db7c:	e0bff917 	ldw	r2,-28(fp)
   4db80:	e0fffa17 	ldw	r3,-24(fp)
   4db84:	10c00015 	stw	r3,0(r2)
   4db88:	e0bff717 	ldw	r2,-36(fp)
   4db8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4db90:	e0bffb17 	ldw	r2,-20(fp)
   4db94:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4db98:	0005883a 	mov	r2,zero
   4db9c:	00000306 	br	4dbac <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   4dba0:	00bffa84 	movi	r2,-22
   4dba4:	00000106 	br	4dbac <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4dba8:	00bfde84 	movi	r2,-134
  }
}
   4dbac:	e037883a 	mov	sp,fp
   4dbb0:	df000017 	ldw	fp,0(sp)
   4dbb4:	dec00104 	addi	sp,sp,4
   4dbb8:	f800283a 	ret

0004dbbc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4dbbc:	deffff04 	addi	sp,sp,-4
   4dbc0:	df000015 	stw	fp,0(sp)
   4dbc4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4dbc8:	e037883a 	mov	sp,fp
   4dbcc:	df000017 	ldw	fp,0(sp)
   4dbd0:	dec00104 	addi	sp,sp,4
   4dbd4:	f800283a 	ret

0004dbd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4dbd8:	defffe04 	addi	sp,sp,-8
   4dbdc:	dfc00115 	stw	ra,4(sp)
   4dbe0:	df000015 	stw	fp,0(sp)
   4dbe4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4dbe8:	00800174 	movhi	r2,5
   4dbec:	1083f404 	addi	r2,r2,4048
   4dbf0:	10800017 	ldw	r2,0(r2)
   4dbf4:	10000526 	beq	r2,zero,4dc0c <alt_get_errno+0x34>
   4dbf8:	00800174 	movhi	r2,5
   4dbfc:	1083f404 	addi	r2,r2,4048
   4dc00:	10800017 	ldw	r2,0(r2)
   4dc04:	103ee83a 	callr	r2
   4dc08:	00000206 	br	4dc14 <alt_get_errno+0x3c>
   4dc0c:	00800174 	movhi	r2,5
   4dc10:	108b0c04 	addi	r2,r2,11312
}
   4dc14:	e037883a 	mov	sp,fp
   4dc18:	dfc00117 	ldw	ra,4(sp)
   4dc1c:	df000017 	ldw	fp,0(sp)
   4dc20:	dec00204 	addi	sp,sp,8
   4dc24:	f800283a 	ret

0004dc28 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4dc28:	defffa04 	addi	sp,sp,-24
   4dc2c:	dfc00515 	stw	ra,20(sp)
   4dc30:	df000415 	stw	fp,16(sp)
   4dc34:	df000404 	addi	fp,sp,16
   4dc38:	e13ffe15 	stw	r4,-8(fp)
   4dc3c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4dc40:	e0bffe17 	ldw	r2,-8(fp)
   4dc44:	10000326 	beq	r2,zero,4dc54 <alt_dev_llist_insert+0x2c>
   4dc48:	e0bffe17 	ldw	r2,-8(fp)
   4dc4c:	10800217 	ldw	r2,8(r2)
   4dc50:	1000061e 	bne	r2,zero,4dc6c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   4dc54:	004dbd80 	call	4dbd8 <alt_get_errno>
   4dc58:	1007883a 	mov	r3,r2
   4dc5c:	00800584 	movi	r2,22
   4dc60:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4dc64:	00bffa84 	movi	r2,-22
   4dc68:	00001306 	br	4dcb8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4dc6c:	e0bffe17 	ldw	r2,-8(fp)
   4dc70:	e0ffff17 	ldw	r3,-4(fp)
   4dc74:	e0fffc15 	stw	r3,-16(fp)
   4dc78:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4dc7c:	e0bffd17 	ldw	r2,-12(fp)
   4dc80:	e0fffc17 	ldw	r3,-16(fp)
   4dc84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4dc88:	e0bffc17 	ldw	r2,-16(fp)
   4dc8c:	10c00017 	ldw	r3,0(r2)
   4dc90:	e0bffd17 	ldw	r2,-12(fp)
   4dc94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4dc98:	e0bffc17 	ldw	r2,-16(fp)
   4dc9c:	10800017 	ldw	r2,0(r2)
   4dca0:	e0fffd17 	ldw	r3,-12(fp)
   4dca4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4dca8:	e0bffc17 	ldw	r2,-16(fp)
   4dcac:	e0fffd17 	ldw	r3,-12(fp)
   4dcb0:	10c00015 	stw	r3,0(r2)

  return 0;  
   4dcb4:	0005883a 	mov	r2,zero
}
   4dcb8:	e037883a 	mov	sp,fp
   4dcbc:	dfc00117 	ldw	ra,4(sp)
   4dcc0:	df000017 	ldw	fp,0(sp)
   4dcc4:	dec00204 	addi	sp,sp,8
   4dcc8:	f800283a 	ret

0004dccc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4dccc:	defffd04 	addi	sp,sp,-12
   4dcd0:	dfc00215 	stw	ra,8(sp)
   4dcd4:	df000115 	stw	fp,4(sp)
   4dcd8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4dcdc:	00800174 	movhi	r2,5
   4dce0:	10bcc704 	addi	r2,r2,-3300
   4dce4:	e0bfff15 	stw	r2,-4(fp)
   4dce8:	00000606 	br	4dd04 <_do_ctors+0x38>
        (*ctor) (); 
   4dcec:	e0bfff17 	ldw	r2,-4(fp)
   4dcf0:	10800017 	ldw	r2,0(r2)
   4dcf4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4dcf8:	e0bfff17 	ldw	r2,-4(fp)
   4dcfc:	10bfff04 	addi	r2,r2,-4
   4dd00:	e0bfff15 	stw	r2,-4(fp)
   4dd04:	e0ffff17 	ldw	r3,-4(fp)
   4dd08:	00800174 	movhi	r2,5
   4dd0c:	10bcc804 	addi	r2,r2,-3296
   4dd10:	18bff62e 	bgeu	r3,r2,4dcec <__alt_data_end+0xfffd818c>
        (*ctor) (); 
}
   4dd14:	e037883a 	mov	sp,fp
   4dd18:	dfc00117 	ldw	ra,4(sp)
   4dd1c:	df000017 	ldw	fp,0(sp)
   4dd20:	dec00204 	addi	sp,sp,8
   4dd24:	f800283a 	ret

0004dd28 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4dd28:	defffd04 	addi	sp,sp,-12
   4dd2c:	dfc00215 	stw	ra,8(sp)
   4dd30:	df000115 	stw	fp,4(sp)
   4dd34:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4dd38:	00800174 	movhi	r2,5
   4dd3c:	10bcc704 	addi	r2,r2,-3300
   4dd40:	e0bfff15 	stw	r2,-4(fp)
   4dd44:	00000606 	br	4dd60 <_do_dtors+0x38>
        (*dtor) (); 
   4dd48:	e0bfff17 	ldw	r2,-4(fp)
   4dd4c:	10800017 	ldw	r2,0(r2)
   4dd50:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4dd54:	e0bfff17 	ldw	r2,-4(fp)
   4dd58:	10bfff04 	addi	r2,r2,-4
   4dd5c:	e0bfff15 	stw	r2,-4(fp)
   4dd60:	e0ffff17 	ldw	r3,-4(fp)
   4dd64:	00800174 	movhi	r2,5
   4dd68:	10bcc804 	addi	r2,r2,-3296
   4dd6c:	18bff62e 	bgeu	r3,r2,4dd48 <__alt_data_end+0xfffd81e8>
        (*dtor) (); 
}
   4dd70:	e037883a 	mov	sp,fp
   4dd74:	dfc00117 	ldw	ra,4(sp)
   4dd78:	df000017 	ldw	fp,0(sp)
   4dd7c:	dec00204 	addi	sp,sp,8
   4dd80:	f800283a 	ret

0004dd84 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4dd84:	deffff04 	addi	sp,sp,-4
   4dd88:	df000015 	stw	fp,0(sp)
   4dd8c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   4dd90:	e037883a 	mov	sp,fp
   4dd94:	df000017 	ldw	fp,0(sp)
   4dd98:	dec00104 	addi	sp,sp,4
   4dd9c:	f800283a 	ret

0004dda0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4dda0:	defff904 	addi	sp,sp,-28
   4dda4:	dfc00615 	stw	ra,24(sp)
   4dda8:	df000515 	stw	fp,20(sp)
   4ddac:	df000504 	addi	fp,sp,20
   4ddb0:	e13ffc15 	stw	r4,-16(fp)
   4ddb4:	e17ffd15 	stw	r5,-12(fp)
   4ddb8:	e1bffe15 	stw	r6,-8(fp)
   4ddbc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4ddc0:	e0800217 	ldw	r2,8(fp)
   4ddc4:	d8800015 	stw	r2,0(sp)
   4ddc8:	e13ffc17 	ldw	r4,-16(fp)
   4ddcc:	e17ffd17 	ldw	r5,-12(fp)
   4ddd0:	e1bffe17 	ldw	r6,-8(fp)
   4ddd4:	e1ffff17 	ldw	r7,-4(fp)
   4ddd8:	004df800 	call	4df80 <alt_iic_isr_register>
}  
   4dddc:	e037883a 	mov	sp,fp
   4dde0:	dfc00117 	ldw	ra,4(sp)
   4dde4:	df000017 	ldw	fp,0(sp)
   4dde8:	dec00204 	addi	sp,sp,8
   4ddec:	f800283a 	ret

0004ddf0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4ddf0:	defff904 	addi	sp,sp,-28
   4ddf4:	df000615 	stw	fp,24(sp)
   4ddf8:	df000604 	addi	fp,sp,24
   4ddfc:	e13ffe15 	stw	r4,-8(fp)
   4de00:	e17fff15 	stw	r5,-4(fp)
   4de04:	e0bfff17 	ldw	r2,-4(fp)
   4de08:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4de0c:	0005303a 	rdctl	r2,status
   4de10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4de14:	e0fffb17 	ldw	r3,-20(fp)
   4de18:	00bfff84 	movi	r2,-2
   4de1c:	1884703a 	and	r2,r3,r2
   4de20:	1001703a 	wrctl	status,r2
  
  return context;
   4de24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4de28:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4de2c:	e0bffa17 	ldw	r2,-24(fp)
   4de30:	00c00044 	movi	r3,1
   4de34:	1884983a 	sll	r2,r3,r2
   4de38:	1007883a 	mov	r3,r2
   4de3c:	00800174 	movhi	r2,5
   4de40:	108b2904 	addi	r2,r2,11428
   4de44:	10800017 	ldw	r2,0(r2)
   4de48:	1886b03a 	or	r3,r3,r2
   4de4c:	00800174 	movhi	r2,5
   4de50:	108b2904 	addi	r2,r2,11428
   4de54:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4de58:	00800174 	movhi	r2,5
   4de5c:	108b2904 	addi	r2,r2,11428
   4de60:	10800017 	ldw	r2,0(r2)
   4de64:	100170fa 	wrctl	ienable,r2
   4de68:	e0bffc17 	ldw	r2,-16(fp)
   4de6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4de70:	e0bffd17 	ldw	r2,-12(fp)
   4de74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4de78:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4de7c:	0001883a 	nop
}
   4de80:	e037883a 	mov	sp,fp
   4de84:	df000017 	ldw	fp,0(sp)
   4de88:	dec00104 	addi	sp,sp,4
   4de8c:	f800283a 	ret

0004de90 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4de90:	defff904 	addi	sp,sp,-28
   4de94:	df000615 	stw	fp,24(sp)
   4de98:	df000604 	addi	fp,sp,24
   4de9c:	e13ffe15 	stw	r4,-8(fp)
   4dea0:	e17fff15 	stw	r5,-4(fp)
   4dea4:	e0bfff17 	ldw	r2,-4(fp)
   4dea8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4deac:	0005303a 	rdctl	r2,status
   4deb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4deb4:	e0fffb17 	ldw	r3,-20(fp)
   4deb8:	00bfff84 	movi	r2,-2
   4debc:	1884703a 	and	r2,r3,r2
   4dec0:	1001703a 	wrctl	status,r2
  
  return context;
   4dec4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4dec8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4decc:	e0bffa17 	ldw	r2,-24(fp)
   4ded0:	00c00044 	movi	r3,1
   4ded4:	1884983a 	sll	r2,r3,r2
   4ded8:	0084303a 	nor	r2,zero,r2
   4dedc:	1007883a 	mov	r3,r2
   4dee0:	00800174 	movhi	r2,5
   4dee4:	108b2904 	addi	r2,r2,11428
   4dee8:	10800017 	ldw	r2,0(r2)
   4deec:	1886703a 	and	r3,r3,r2
   4def0:	00800174 	movhi	r2,5
   4def4:	108b2904 	addi	r2,r2,11428
   4def8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4defc:	00800174 	movhi	r2,5
   4df00:	108b2904 	addi	r2,r2,11428
   4df04:	10800017 	ldw	r2,0(r2)
   4df08:	100170fa 	wrctl	ienable,r2
   4df0c:	e0bffc17 	ldw	r2,-16(fp)
   4df10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4df14:	e0bffd17 	ldw	r2,-12(fp)
   4df18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4df1c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   4df20:	0001883a 	nop
}
   4df24:	e037883a 	mov	sp,fp
   4df28:	df000017 	ldw	fp,0(sp)
   4df2c:	dec00104 	addi	sp,sp,4
   4df30:	f800283a 	ret

0004df34 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4df34:	defffc04 	addi	sp,sp,-16
   4df38:	df000315 	stw	fp,12(sp)
   4df3c:	df000304 	addi	fp,sp,12
   4df40:	e13ffe15 	stw	r4,-8(fp)
   4df44:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4df48:	000530fa 	rdctl	r2,ienable
   4df4c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4df50:	e0bfff17 	ldw	r2,-4(fp)
   4df54:	00c00044 	movi	r3,1
   4df58:	1884983a 	sll	r2,r3,r2
   4df5c:	1007883a 	mov	r3,r2
   4df60:	e0bffd17 	ldw	r2,-12(fp)
   4df64:	1884703a 	and	r2,r3,r2
   4df68:	1004c03a 	cmpne	r2,r2,zero
   4df6c:	10803fcc 	andi	r2,r2,255
}
   4df70:	e037883a 	mov	sp,fp
   4df74:	df000017 	ldw	fp,0(sp)
   4df78:	dec00104 	addi	sp,sp,4
   4df7c:	f800283a 	ret

0004df80 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4df80:	defff504 	addi	sp,sp,-44
   4df84:	dfc00a15 	stw	ra,40(sp)
   4df88:	df000915 	stw	fp,36(sp)
   4df8c:	df000904 	addi	fp,sp,36
   4df90:	e13ffc15 	stw	r4,-16(fp)
   4df94:	e17ffd15 	stw	r5,-12(fp)
   4df98:	e1bffe15 	stw	r6,-8(fp)
   4df9c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4dfa0:	00bffa84 	movi	r2,-22
   4dfa4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4dfa8:	e0bffd17 	ldw	r2,-12(fp)
   4dfac:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4dfb0:	e0bff817 	ldw	r2,-32(fp)
   4dfb4:	10800808 	cmpgei	r2,r2,32
   4dfb8:	1000271e 	bne	r2,zero,4e058 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4dfbc:	0005303a 	rdctl	r2,status
   4dfc0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4dfc4:	e0fffa17 	ldw	r3,-24(fp)
   4dfc8:	00bfff84 	movi	r2,-2
   4dfcc:	1884703a 	and	r2,r3,r2
   4dfd0:	1001703a 	wrctl	status,r2
  
  return context;
   4dfd4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4dfd8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   4dfdc:	008001b4 	movhi	r2,6
   4dfe0:	10afc004 	addi	r2,r2,-16640
   4dfe4:	e0fff817 	ldw	r3,-32(fp)
   4dfe8:	180690fa 	slli	r3,r3,3
   4dfec:	10c5883a 	add	r2,r2,r3
   4dff0:	e0fffe17 	ldw	r3,-8(fp)
   4dff4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4dff8:	008001b4 	movhi	r2,6
   4dffc:	10afc004 	addi	r2,r2,-16640
   4e000:	e0fff817 	ldw	r3,-32(fp)
   4e004:	180690fa 	slli	r3,r3,3
   4e008:	10c5883a 	add	r2,r2,r3
   4e00c:	10800104 	addi	r2,r2,4
   4e010:	e0ffff17 	ldw	r3,-4(fp)
   4e014:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4e018:	e0bffe17 	ldw	r2,-8(fp)
   4e01c:	10000526 	beq	r2,zero,4e034 <alt_iic_isr_register+0xb4>
   4e020:	e0bff817 	ldw	r2,-32(fp)
   4e024:	e13ffc17 	ldw	r4,-16(fp)
   4e028:	100b883a 	mov	r5,r2
   4e02c:	004ddf00 	call	4ddf0 <alt_ic_irq_enable>
   4e030:	00000406 	br	4e044 <alt_iic_isr_register+0xc4>
   4e034:	e0bff817 	ldw	r2,-32(fp)
   4e038:	e13ffc17 	ldw	r4,-16(fp)
   4e03c:	100b883a 	mov	r5,r2
   4e040:	004de900 	call	4de90 <alt_ic_irq_disable>
   4e044:	e0bff715 	stw	r2,-36(fp)
   4e048:	e0bff917 	ldw	r2,-28(fp)
   4e04c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e050:	e0bffb17 	ldw	r2,-20(fp)
   4e054:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4e058:	e0bff717 	ldw	r2,-36(fp)
}
   4e05c:	e037883a 	mov	sp,fp
   4e060:	dfc00117 	ldw	ra,4(sp)
   4e064:	df000017 	ldw	fp,0(sp)
   4e068:	dec00204 	addi	sp,sp,8
   4e06c:	f800283a 	ret

0004e070 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4e070:	defff804 	addi	sp,sp,-32
   4e074:	dfc00715 	stw	ra,28(sp)
   4e078:	df000615 	stw	fp,24(sp)
   4e07c:	dc000515 	stw	r16,20(sp)
   4e080:	df000604 	addi	fp,sp,24
   4e084:	e13ffb15 	stw	r4,-20(fp)
   4e088:	e17ffc15 	stw	r5,-16(fp)
   4e08c:	e1bffd15 	stw	r6,-12(fp)
   4e090:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   4e094:	e13ffc17 	ldw	r4,-16(fp)
   4e098:	e17ffd17 	ldw	r5,-12(fp)
   4e09c:	e1bffe17 	ldw	r6,-8(fp)
   4e0a0:	004e30c0 	call	4e30c <open>
   4e0a4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   4e0a8:	e0bffa17 	ldw	r2,-24(fp)
   4e0ac:	10002216 	blt	r2,zero,4e138 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   4e0b0:	04000174 	movhi	r16,5
   4e0b4:	843f3c04 	addi	r16,r16,-784
   4e0b8:	e0bffa17 	ldw	r2,-24(fp)
   4e0bc:	1009883a 	mov	r4,r2
   4e0c0:	01400304 	movi	r5,12
   4e0c4:	00436100 	call	43610 <__mulsi3>
   4e0c8:	8085883a 	add	r2,r16,r2
   4e0cc:	10c00017 	ldw	r3,0(r2)
   4e0d0:	e0bffb17 	ldw	r2,-20(fp)
   4e0d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4e0d8:	04000174 	movhi	r16,5
   4e0dc:	843f3c04 	addi	r16,r16,-784
   4e0e0:	e0bffa17 	ldw	r2,-24(fp)
   4e0e4:	1009883a 	mov	r4,r2
   4e0e8:	01400304 	movi	r5,12
   4e0ec:	00436100 	call	43610 <__mulsi3>
   4e0f0:	8085883a 	add	r2,r16,r2
   4e0f4:	10800104 	addi	r2,r2,4
   4e0f8:	10c00017 	ldw	r3,0(r2)
   4e0fc:	e0bffb17 	ldw	r2,-20(fp)
   4e100:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4e104:	04000174 	movhi	r16,5
   4e108:	843f3c04 	addi	r16,r16,-784
   4e10c:	e0bffa17 	ldw	r2,-24(fp)
   4e110:	1009883a 	mov	r4,r2
   4e114:	01400304 	movi	r5,12
   4e118:	00436100 	call	43610 <__mulsi3>
   4e11c:	8085883a 	add	r2,r16,r2
   4e120:	10800204 	addi	r2,r2,8
   4e124:	10c00017 	ldw	r3,0(r2)
   4e128:	e0bffb17 	ldw	r2,-20(fp)
   4e12c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4e130:	e13ffa17 	ldw	r4,-24(fp)
   4e134:	0043dc80 	call	43dc8 <alt_release_fd>
  }
} 
   4e138:	e6ffff04 	addi	sp,fp,-4
   4e13c:	dfc00217 	ldw	ra,8(sp)
   4e140:	df000117 	ldw	fp,4(sp)
   4e144:	dc000017 	ldw	r16,0(sp)
   4e148:	dec00304 	addi	sp,sp,12
   4e14c:	f800283a 	ret

0004e150 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4e150:	defffb04 	addi	sp,sp,-20
   4e154:	dfc00415 	stw	ra,16(sp)
   4e158:	df000315 	stw	fp,12(sp)
   4e15c:	df000304 	addi	fp,sp,12
   4e160:	e13ffd15 	stw	r4,-12(fp)
   4e164:	e17ffe15 	stw	r5,-8(fp)
   4e168:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4e16c:	01000174 	movhi	r4,5
   4e170:	213f3f04 	addi	r4,r4,-772
   4e174:	e17ffd17 	ldw	r5,-12(fp)
   4e178:	01800044 	movi	r6,1
   4e17c:	01c07fc4 	movi	r7,511
   4e180:	004e0700 	call	4e070 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4e184:	01000174 	movhi	r4,5
   4e188:	213f3c04 	addi	r4,r4,-784
   4e18c:	e17ffe17 	ldw	r5,-8(fp)
   4e190:	000d883a 	mov	r6,zero
   4e194:	01c07fc4 	movi	r7,511
   4e198:	004e0700 	call	4e070 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4e19c:	01000174 	movhi	r4,5
   4e1a0:	213f4204 	addi	r4,r4,-760
   4e1a4:	e17fff17 	ldw	r5,-4(fp)
   4e1a8:	01800044 	movi	r6,1
   4e1ac:	01c07fc4 	movi	r7,511
   4e1b0:	004e0700 	call	4e070 <alt_open_fd>
}  
   4e1b4:	e037883a 	mov	sp,fp
   4e1b8:	dfc00117 	ldw	ra,4(sp)
   4e1bc:	df000017 	ldw	fp,0(sp)
   4e1c0:	dec00204 	addi	sp,sp,8
   4e1c4:	f800283a 	ret

0004e1c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e1c8:	defffe04 	addi	sp,sp,-8
   4e1cc:	dfc00115 	stw	ra,4(sp)
   4e1d0:	df000015 	stw	fp,0(sp)
   4e1d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e1d8:	00800174 	movhi	r2,5
   4e1dc:	1083f404 	addi	r2,r2,4048
   4e1e0:	10800017 	ldw	r2,0(r2)
   4e1e4:	10000526 	beq	r2,zero,4e1fc <alt_get_errno+0x34>
   4e1e8:	00800174 	movhi	r2,5
   4e1ec:	1083f404 	addi	r2,r2,4048
   4e1f0:	10800017 	ldw	r2,0(r2)
   4e1f4:	103ee83a 	callr	r2
   4e1f8:	00000206 	br	4e204 <alt_get_errno+0x3c>
   4e1fc:	00800174 	movhi	r2,5
   4e200:	108b0c04 	addi	r2,r2,11312
}
   4e204:	e037883a 	mov	sp,fp
   4e208:	dfc00117 	ldw	ra,4(sp)
   4e20c:	df000017 	ldw	fp,0(sp)
   4e210:	dec00204 	addi	sp,sp,8
   4e214:	f800283a 	ret

0004e218 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4e218:	defffb04 	addi	sp,sp,-20
   4e21c:	dfc00415 	stw	ra,16(sp)
   4e220:	df000315 	stw	fp,12(sp)
   4e224:	dc000215 	stw	r16,8(sp)
   4e228:	df000304 	addi	fp,sp,12
   4e22c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4e230:	e0bffe17 	ldw	r2,-8(fp)
   4e234:	10800217 	ldw	r2,8(r2)
   4e238:	10d00034 	orhi	r3,r2,16384
   4e23c:	e0bffe17 	ldw	r2,-8(fp)
   4e240:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4e244:	e03ffd15 	stw	zero,-12(fp)
   4e248:	00002306 	br	4e2d8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4e24c:	04000174 	movhi	r16,5
   4e250:	843f3c04 	addi	r16,r16,-784
   4e254:	e0bffd17 	ldw	r2,-12(fp)
   4e258:	1009883a 	mov	r4,r2
   4e25c:	01400304 	movi	r5,12
   4e260:	00436100 	call	43610 <__mulsi3>
   4e264:	8085883a 	add	r2,r16,r2
   4e268:	10c00017 	ldw	r3,0(r2)
   4e26c:	e0bffe17 	ldw	r2,-8(fp)
   4e270:	10800017 	ldw	r2,0(r2)
   4e274:	1880151e 	bne	r3,r2,4e2cc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4e278:	04000174 	movhi	r16,5
   4e27c:	843f3c04 	addi	r16,r16,-784
   4e280:	e0bffd17 	ldw	r2,-12(fp)
   4e284:	1009883a 	mov	r4,r2
   4e288:	01400304 	movi	r5,12
   4e28c:	00436100 	call	43610 <__mulsi3>
   4e290:	8085883a 	add	r2,r16,r2
   4e294:	10800204 	addi	r2,r2,8
   4e298:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4e29c:	10000b0e 	bge	r2,zero,4e2cc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4e2a0:	e13ffd17 	ldw	r4,-12(fp)
   4e2a4:	01400304 	movi	r5,12
   4e2a8:	00436100 	call	43610 <__mulsi3>
   4e2ac:	1007883a 	mov	r3,r2
   4e2b0:	00800174 	movhi	r2,5
   4e2b4:	10bf3c04 	addi	r2,r2,-784
   4e2b8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4e2bc:	e0bffe17 	ldw	r2,-8(fp)
   4e2c0:	18800226 	beq	r3,r2,4e2cc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4e2c4:	00bffcc4 	movi	r2,-13
   4e2c8:	00000a06 	br	4e2f4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4e2cc:	e0bffd17 	ldw	r2,-12(fp)
   4e2d0:	10800044 	addi	r2,r2,1
   4e2d4:	e0bffd15 	stw	r2,-12(fp)
   4e2d8:	00800174 	movhi	r2,5
   4e2dc:	1083f304 	addi	r2,r2,4044
   4e2e0:	10800017 	ldw	r2,0(r2)
   4e2e4:	1007883a 	mov	r3,r2
   4e2e8:	e0bffd17 	ldw	r2,-12(fp)
   4e2ec:	18bfd72e 	bgeu	r3,r2,4e24c <__alt_data_end+0xfffd86ec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4e2f0:	0005883a 	mov	r2,zero
}
   4e2f4:	e6ffff04 	addi	sp,fp,-4
   4e2f8:	dfc00217 	ldw	ra,8(sp)
   4e2fc:	df000117 	ldw	fp,4(sp)
   4e300:	dc000017 	ldw	r16,0(sp)
   4e304:	dec00304 	addi	sp,sp,12
   4e308:	f800283a 	ret

0004e30c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4e30c:	defff604 	addi	sp,sp,-40
   4e310:	dfc00915 	stw	ra,36(sp)
   4e314:	df000815 	stw	fp,32(sp)
   4e318:	df000804 	addi	fp,sp,32
   4e31c:	e13ffd15 	stw	r4,-12(fp)
   4e320:	e17ffe15 	stw	r5,-8(fp)
   4e324:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4e328:	00bfffc4 	movi	r2,-1
   4e32c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4e330:	00bffb44 	movi	r2,-19
   4e334:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4e338:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4e33c:	e13ffd17 	ldw	r4,-12(fp)
   4e340:	01400174 	movhi	r5,5
   4e344:	2943f104 	addi	r5,r5,4036
   4e348:	004eaf40 	call	4eaf4 <alt_find_dev>
   4e34c:	e0bff815 	stw	r2,-32(fp)
   4e350:	e0bff817 	ldw	r2,-32(fp)
   4e354:	1000051e 	bne	r2,zero,4e36c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4e358:	e13ffd17 	ldw	r4,-12(fp)
   4e35c:	004eb840 	call	4eb84 <alt_find_file>
   4e360:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4e364:	00800044 	movi	r2,1
   4e368:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4e36c:	e0bff817 	ldw	r2,-32(fp)
   4e370:	10002b26 	beq	r2,zero,4e420 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4e374:	e13ff817 	ldw	r4,-32(fp)
   4e378:	004ec980 	call	4ec98 <alt_get_fd>
   4e37c:	e0bff915 	stw	r2,-28(fp)
   4e380:	e0bff917 	ldw	r2,-28(fp)
   4e384:	1000030e 	bge	r2,zero,4e394 <open+0x88>
    {
      status = index;
   4e388:	e0bff917 	ldw	r2,-28(fp)
   4e38c:	e0bffa15 	stw	r2,-24(fp)
   4e390:	00002506 	br	4e428 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   4e394:	e13ff917 	ldw	r4,-28(fp)
   4e398:	01400304 	movi	r5,12
   4e39c:	00436100 	call	43610 <__mulsi3>
   4e3a0:	1007883a 	mov	r3,r2
   4e3a4:	00800174 	movhi	r2,5
   4e3a8:	10bf3c04 	addi	r2,r2,-784
   4e3ac:	1885883a 	add	r2,r3,r2
   4e3b0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4e3b4:	e0fffe17 	ldw	r3,-8(fp)
   4e3b8:	00900034 	movhi	r2,16384
   4e3bc:	10bfffc4 	addi	r2,r2,-1
   4e3c0:	1886703a 	and	r3,r3,r2
   4e3c4:	e0bffc17 	ldw	r2,-16(fp)
   4e3c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4e3cc:	e0bffb17 	ldw	r2,-20(fp)
   4e3d0:	1000051e 	bne	r2,zero,4e3e8 <open+0xdc>
   4e3d4:	e13ffc17 	ldw	r4,-16(fp)
   4e3d8:	004e2180 	call	4e218 <alt_file_locked>
   4e3dc:	e0bffa15 	stw	r2,-24(fp)
   4e3e0:	e0bffa17 	ldw	r2,-24(fp)
   4e3e4:	10001016 	blt	r2,zero,4e428 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4e3e8:	e0bff817 	ldw	r2,-32(fp)
   4e3ec:	10800317 	ldw	r2,12(r2)
   4e3f0:	10000826 	beq	r2,zero,4e414 <open+0x108>
   4e3f4:	e0bff817 	ldw	r2,-32(fp)
   4e3f8:	10800317 	ldw	r2,12(r2)
   4e3fc:	e13ffc17 	ldw	r4,-16(fp)
   4e400:	e17ffd17 	ldw	r5,-12(fp)
   4e404:	e1bffe17 	ldw	r6,-8(fp)
   4e408:	e1ffff17 	ldw	r7,-4(fp)
   4e40c:	103ee83a 	callr	r2
   4e410:	00000106 	br	4e418 <open+0x10c>
   4e414:	0005883a 	mov	r2,zero
   4e418:	e0bffa15 	stw	r2,-24(fp)
   4e41c:	00000206 	br	4e428 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4e420:	00bffb44 	movi	r2,-19
   4e424:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4e428:	e0bffa17 	ldw	r2,-24(fp)
   4e42c:	1000090e 	bge	r2,zero,4e454 <open+0x148>
  {
    alt_release_fd (index);  
   4e430:	e13ff917 	ldw	r4,-28(fp)
   4e434:	0043dc80 	call	43dc8 <alt_release_fd>
    ALT_ERRNO = -status;
   4e438:	004e1c80 	call	4e1c8 <alt_get_errno>
   4e43c:	1007883a 	mov	r3,r2
   4e440:	e0bffa17 	ldw	r2,-24(fp)
   4e444:	0085c83a 	sub	r2,zero,r2
   4e448:	18800015 	stw	r2,0(r3)
    return -1;
   4e44c:	00bfffc4 	movi	r2,-1
   4e450:	00000106 	br	4e458 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   4e454:	e0bff917 	ldw	r2,-28(fp)
}
   4e458:	e037883a 	mov	sp,fp
   4e45c:	dfc00117 	ldw	ra,4(sp)
   4e460:	df000017 	ldw	fp,0(sp)
   4e464:	dec00204 	addi	sp,sp,8
   4e468:	f800283a 	ret

0004e46c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4e46c:	defffa04 	addi	sp,sp,-24
   4e470:	df000515 	stw	fp,20(sp)
   4e474:	df000504 	addi	fp,sp,20
   4e478:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e47c:	0005303a 	rdctl	r2,status
   4e480:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e484:	e0fffc17 	ldw	r3,-16(fp)
   4e488:	00bfff84 	movi	r2,-2
   4e48c:	1884703a 	and	r2,r3,r2
   4e490:	1001703a 	wrctl	status,r2
  
  return context;
   4e494:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4e498:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4e49c:	e0bfff17 	ldw	r2,-4(fp)
   4e4a0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4e4a4:	e0bffd17 	ldw	r2,-12(fp)
   4e4a8:	10800017 	ldw	r2,0(r2)
   4e4ac:	e0fffd17 	ldw	r3,-12(fp)
   4e4b0:	18c00117 	ldw	r3,4(r3)
   4e4b4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4e4b8:	e0bffd17 	ldw	r2,-12(fp)
   4e4bc:	10800117 	ldw	r2,4(r2)
   4e4c0:	e0fffd17 	ldw	r3,-12(fp)
   4e4c4:	18c00017 	ldw	r3,0(r3)
   4e4c8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4e4cc:	e0bffd17 	ldw	r2,-12(fp)
   4e4d0:	e0fffd17 	ldw	r3,-12(fp)
   4e4d4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4e4d8:	e0bffd17 	ldw	r2,-12(fp)
   4e4dc:	e0fffd17 	ldw	r3,-12(fp)
   4e4e0:	10c00015 	stw	r3,0(r2)
   4e4e4:	e0bffb17 	ldw	r2,-20(fp)
   4e4e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e4ec:	e0bffe17 	ldw	r2,-8(fp)
   4e4f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4e4f4:	e037883a 	mov	sp,fp
   4e4f8:	df000017 	ldw	fp,0(sp)
   4e4fc:	dec00104 	addi	sp,sp,4
   4e500:	f800283a 	ret

0004e504 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4e504:	defffb04 	addi	sp,sp,-20
   4e508:	dfc00415 	stw	ra,16(sp)
   4e50c:	df000315 	stw	fp,12(sp)
   4e510:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4e514:	d0a02b17 	ldw	r2,-32596(gp)
   4e518:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4e51c:	d0a74017 	ldw	r2,-25344(gp)
   4e520:	10800044 	addi	r2,r2,1
   4e524:	d0a74015 	stw	r2,-25344(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4e528:	00002e06 	br	4e5e4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4e52c:	e0bffd17 	ldw	r2,-12(fp)
   4e530:	10800017 	ldw	r2,0(r2)
   4e534:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4e538:	e0bffd17 	ldw	r2,-12(fp)
   4e53c:	10800403 	ldbu	r2,16(r2)
   4e540:	10803fcc 	andi	r2,r2,255
   4e544:	10000426 	beq	r2,zero,4e558 <alt_tick+0x54>
   4e548:	d0a74017 	ldw	r2,-25344(gp)
   4e54c:	1000021e 	bne	r2,zero,4e558 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4e550:	e0bffd17 	ldw	r2,-12(fp)
   4e554:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4e558:	e0bffd17 	ldw	r2,-12(fp)
   4e55c:	10800217 	ldw	r2,8(r2)
   4e560:	d0e74017 	ldw	r3,-25344(gp)
   4e564:	18801d36 	bltu	r3,r2,4e5dc <alt_tick+0xd8>
   4e568:	e0bffd17 	ldw	r2,-12(fp)
   4e56c:	10800403 	ldbu	r2,16(r2)
   4e570:	10803fcc 	andi	r2,r2,255
   4e574:	1000191e 	bne	r2,zero,4e5dc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4e578:	e0bffd17 	ldw	r2,-12(fp)
   4e57c:	10800317 	ldw	r2,12(r2)
   4e580:	e0fffd17 	ldw	r3,-12(fp)
   4e584:	18c00517 	ldw	r3,20(r3)
   4e588:	1809883a 	mov	r4,r3
   4e58c:	103ee83a 	callr	r2
   4e590:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4e594:	e0bfff17 	ldw	r2,-4(fp)
   4e598:	1000031e 	bne	r2,zero,4e5a8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4e59c:	e13ffd17 	ldw	r4,-12(fp)
   4e5a0:	004e46c0 	call	4e46c <alt_alarm_stop>
   4e5a4:	00000d06 	br	4e5dc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4e5a8:	e0bffd17 	ldw	r2,-12(fp)
   4e5ac:	10c00217 	ldw	r3,8(r2)
   4e5b0:	e0bfff17 	ldw	r2,-4(fp)
   4e5b4:	1887883a 	add	r3,r3,r2
   4e5b8:	e0bffd17 	ldw	r2,-12(fp)
   4e5bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4e5c0:	e0bffd17 	ldw	r2,-12(fp)
   4e5c4:	10c00217 	ldw	r3,8(r2)
   4e5c8:	d0a74017 	ldw	r2,-25344(gp)
   4e5cc:	1880032e 	bgeu	r3,r2,4e5dc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4e5d0:	e0bffd17 	ldw	r2,-12(fp)
   4e5d4:	00c00044 	movi	r3,1
   4e5d8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4e5dc:	e0bffe17 	ldw	r2,-8(fp)
   4e5e0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4e5e4:	e0fffd17 	ldw	r3,-12(fp)
   4e5e8:	d0a02b04 	addi	r2,gp,-32596
   4e5ec:	18bfcf1e 	bne	r3,r2,4e52c <__alt_data_end+0xfffd89cc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4e5f0:	0044ffc0 	call	44ffc <OSTimeTick>
}
   4e5f4:	e037883a 	mov	sp,fp
   4e5f8:	dfc00117 	ldw	ra,4(sp)
   4e5fc:	df000017 	ldw	fp,0(sp)
   4e600:	dec00204 	addi	sp,sp,8
   4e604:	f800283a 	ret

0004e608 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4e608:	deffff04 	addi	sp,sp,-4
   4e60c:	df000015 	stw	fp,0(sp)
   4e610:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4e614:	000170fa 	wrctl	ienable,zero
}
   4e618:	e037883a 	mov	sp,fp
   4e61c:	df000017 	ldw	fp,0(sp)
   4e620:	dec00104 	addi	sp,sp,4
   4e624:	f800283a 	ret

0004e628 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   4e628:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   4e62c:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   4e630:	d1273917 	ldw	r4,-25372(gp)

      stw ra,  0(sp)
   4e634:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   4e638:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   4e63c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   4e640:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   4e644:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   4e648:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   4e64c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   4e650:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   4e654:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   4e658:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   4e65c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   4e660:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   4e664:	004ea2c0 	call	4ea2c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   4e668:	d1273417 	ldw	r4,-25392(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   4e66c:	d1672c07 	ldb	r5,-25424(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   4e670:	d1273915 	stw	r4,-25372(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   4e674:	d1672c45 	stb	r5,-25423(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   4e678:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   4e67c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   4e680:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   4e684:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   4e688:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   4e68c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   4e690:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   4e694:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   4e698:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   4e69c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   4e6a0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   4e6a4:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   4e6a8:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   4e6ac:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   4e6b0:	f800283a 	ret

0004e6b4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   4e6b4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   4e6b8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   4e6bc:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   4e6c0:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   4e6c4:	004ea2c0 	call	4ea2c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   4e6c8:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   4e6cc:	d4a72a45 	stb	r18,-25431(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   4e6d0:	003fe506 	br	4e668 <__alt_data_end+0xfffd8b08>

0004e6d4 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   4e6d4:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   4e6d8:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   4e6dc:	10800054 	ori	r2,r2,1
      wrctl status, r2
   4e6e0:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   4e6e4:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   4e6e8:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   4e6ec:	dec00204 	addi	sp,sp,8

      callr r2
   4e6f0:	103ee83a 	callr	r2

      nop
   4e6f4:	0001883a 	nop

0004e6f8 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   4e6f8:	defff704 	addi	sp,sp,-36
   4e6fc:	dfc00815 	stw	ra,32(sp)
   4e700:	df000715 	stw	fp,28(sp)
   4e704:	df000704 	addi	fp,sp,28
   4e708:	e13ffc15 	stw	r4,-16(fp)
   4e70c:	e17ffd15 	stw	r5,-12(fp)
   4e710:	e1bffe15 	stw	r6,-8(fp)
   4e714:	3805883a 	mov	r2,r7
   4e718:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   4e71c:	e0fffe17 	ldw	r3,-8(fp)
   4e720:	00bfff04 	movi	r2,-4
   4e724:	1884703a 	and	r2,r3,r2
   4e728:	10bef704 	addi	r2,r2,-1060
   4e72c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   4e730:	e0bff917 	ldw	r2,-28(fp)
   4e734:	10000015 	stw	zero,0(r2)
   4e738:	e0bff917 	ldw	r2,-28(fp)
   4e73c:	10c0bb04 	addi	r3,r2,748
   4e740:	e0bff917 	ldw	r2,-28(fp)
   4e744:	10c00115 	stw	r3,4(r2)
   4e748:	e0bff917 	ldw	r2,-28(fp)
   4e74c:	10c0d504 	addi	r3,r2,852
   4e750:	e0bff917 	ldw	r2,-28(fp)
   4e754:	10c00215 	stw	r3,8(r2)
   4e758:	e0bff917 	ldw	r2,-28(fp)
   4e75c:	10c0ef04 	addi	r3,r2,956
   4e760:	e0bff917 	ldw	r2,-28(fp)
   4e764:	10c00315 	stw	r3,12(r2)
   4e768:	e0bff917 	ldw	r2,-28(fp)
   4e76c:	10000415 	stw	zero,16(r2)
   4e770:	e0bff917 	ldw	r2,-28(fp)
   4e774:	10800504 	addi	r2,r2,20
   4e778:	1009883a 	mov	r4,r2
   4e77c:	000b883a 	mov	r5,zero
   4e780:	01800644 	movi	r6,25
   4e784:	00430880 	call	43088 <memset>
   4e788:	e0bff917 	ldw	r2,-28(fp)
   4e78c:	10000c15 	stw	zero,48(r2)
   4e790:	e0fff917 	ldw	r3,-28(fp)
   4e794:	00800174 	movhi	r2,5
   4e798:	10bd2604 	addi	r2,r2,-2920
   4e79c:	18800d15 	stw	r2,52(r3)
   4e7a0:	e0bff917 	ldw	r2,-28(fp)
   4e7a4:	10000e15 	stw	zero,56(r2)
   4e7a8:	e0bff917 	ldw	r2,-28(fp)
   4e7ac:	10000f15 	stw	zero,60(r2)
   4e7b0:	e0bff917 	ldw	r2,-28(fp)
   4e7b4:	10001015 	stw	zero,64(r2)
   4e7b8:	e0bff917 	ldw	r2,-28(fp)
   4e7bc:	10001115 	stw	zero,68(r2)
   4e7c0:	e0bff917 	ldw	r2,-28(fp)
   4e7c4:	10001215 	stw	zero,72(r2)
   4e7c8:	e0bff917 	ldw	r2,-28(fp)
   4e7cc:	10001315 	stw	zero,76(r2)
   4e7d0:	e0bff917 	ldw	r2,-28(fp)
   4e7d4:	10001415 	stw	zero,80(r2)
   4e7d8:	e0bff917 	ldw	r2,-28(fp)
   4e7dc:	10001515 	stw	zero,84(r2)
   4e7e0:	e0bff917 	ldw	r2,-28(fp)
   4e7e4:	10001615 	stw	zero,88(r2)
   4e7e8:	e0bff917 	ldw	r2,-28(fp)
   4e7ec:	10001715 	stw	zero,92(r2)
   4e7f0:	e0bff917 	ldw	r2,-28(fp)
   4e7f4:	10001805 	stb	zero,96(r2)
   4e7f8:	e0bff917 	ldw	r2,-28(fp)
   4e7fc:	10801f04 	addi	r2,r2,124
   4e800:	1009883a 	mov	r4,r2
   4e804:	000b883a 	mov	r5,zero
   4e808:	01800904 	movi	r6,36
   4e80c:	00430880 	call	43088 <memset>
   4e810:	e0bff917 	ldw	r2,-28(fp)
   4e814:	10002815 	stw	zero,160(r2)
   4e818:	e0bff917 	ldw	r2,-28(fp)
   4e81c:	00c00044 	movi	r3,1
   4e820:	10c02915 	stw	r3,164(r2)
   4e824:	10002a15 	stw	zero,168(r2)
   4e828:	e0bff917 	ldw	r2,-28(fp)
   4e82c:	00ccc384 	movi	r3,13070
   4e830:	10c02b0d 	sth	r3,172(r2)
   4e834:	e0bff917 	ldw	r2,-28(fp)
   4e838:	00eaf344 	movi	r3,-21555
   4e83c:	10c02b8d 	sth	r3,174(r2)
   4e840:	e0bff917 	ldw	r2,-28(fp)
   4e844:	00c48d04 	movi	r3,4660
   4e848:	10c02c0d 	sth	r3,176(r2)
   4e84c:	e0bff917 	ldw	r2,-28(fp)
   4e850:	00f99b44 	movi	r3,-6547
   4e854:	10c02c8d 	sth	r3,178(r2)
   4e858:	e0bff917 	ldw	r2,-28(fp)
   4e85c:	00f7bb04 	movi	r3,-8468
   4e860:	10c02d0d 	sth	r3,180(r2)
   4e864:	e0bff917 	ldw	r2,-28(fp)
   4e868:	00c00144 	movi	r3,5
   4e86c:	10c02d8d 	sth	r3,182(r2)
   4e870:	e0bff917 	ldw	r2,-28(fp)
   4e874:	00c002c4 	movi	r3,11
   4e878:	10c02e0d 	sth	r3,184(r2)
   4e87c:	e0bff917 	ldw	r2,-28(fp)
   4e880:	10002f15 	stw	zero,188(r2)
   4e884:	e0bff917 	ldw	r2,-28(fp)
   4e888:	10003015 	stw	zero,192(r2)
   4e88c:	e0bff917 	ldw	r2,-28(fp)
   4e890:	10003115 	stw	zero,196(r2)
   4e894:	e0bff917 	ldw	r2,-28(fp)
   4e898:	10003215 	stw	zero,200(r2)
   4e89c:	e0bff917 	ldw	r2,-28(fp)
   4e8a0:	10003315 	stw	zero,204(r2)
   4e8a4:	e0bff917 	ldw	r2,-28(fp)
   4e8a8:	10003415 	stw	zero,208(r2)
   4e8ac:	e0bff917 	ldw	r2,-28(fp)
   4e8b0:	10003e15 	stw	zero,248(r2)
   4e8b4:	e0bff917 	ldw	r2,-28(fp)
   4e8b8:	10003f15 	stw	zero,252(r2)
   4e8bc:	e0bff917 	ldw	r2,-28(fp)
   4e8c0:	10004015 	stw	zero,256(r2)
   4e8c4:	e0bff917 	ldw	r2,-28(fp)
   4e8c8:	10004115 	stw	zero,260(r2)
   4e8cc:	e0bff917 	ldw	r2,-28(fp)
   4e8d0:	10004215 	stw	zero,264(r2)
   4e8d4:	e0bff917 	ldw	r2,-28(fp)
   4e8d8:	10004315 	stw	zero,268(r2)
   4e8dc:	e0bff917 	ldw	r2,-28(fp)
   4e8e0:	10004415 	stw	zero,272(r2)
   4e8e4:	e0bff917 	ldw	r2,-28(fp)
   4e8e8:	10004515 	stw	zero,276(r2)
   4e8ec:	e0bff917 	ldw	r2,-28(fp)
   4e8f0:	10004615 	stw	zero,280(r2)
   4e8f4:	e0bff917 	ldw	r2,-28(fp)
   4e8f8:	10004715 	stw	zero,284(r2)
   4e8fc:	e0bff917 	ldw	r2,-28(fp)
   4e900:	10003505 	stb	zero,212(r2)
   4e904:	e0bff917 	ldw	r2,-28(fp)
   4e908:	10003705 	stb	zero,220(r2)
   4e90c:	e0bff917 	ldw	r2,-28(fp)
   4e910:	10003d15 	stw	zero,244(r2)
   4e914:	e0bff917 	ldw	r2,-28(fp)
   4e918:	10005215 	stw	zero,328(r2)
   4e91c:	e0bff917 	ldw	r2,-28(fp)
   4e920:	10005315 	stw	zero,332(r2)
   4e924:	e0bff917 	ldw	r2,-28(fp)
   4e928:	10005415 	stw	zero,336(r2)
   4e92c:	e0bff917 	ldw	r2,-28(fp)
   4e930:	10005515 	stw	zero,340(r2)
   4e934:	e0bff917 	ldw	r2,-28(fp)
   4e938:	1000b515 	stw	zero,724(r2)
   4e93c:	e0bff917 	ldw	r2,-28(fp)
   4e940:	10007515 	stw	zero,468(r2)
   4e944:	e0bff917 	ldw	r2,-28(fp)
   4e948:	1000b715 	stw	zero,732(r2)
   4e94c:	e0bff917 	ldw	r2,-28(fp)
   4e950:	1000b815 	stw	zero,736(r2)
   4e954:	e0bff917 	ldw	r2,-28(fp)
   4e958:	1000b915 	stw	zero,740(r2)
   4e95c:	e0bff917 	ldw	r2,-28(fp)
   4e960:	1000ba15 	stw	zero,744(r2)
   4e964:	e0bff917 	ldw	r2,-28(fp)
   4e968:	1080bb04 	addi	r2,r2,748
   4e96c:	1009883a 	mov	r4,r2
   4e970:	000b883a 	mov	r5,zero
   4e974:	01804e04 	movi	r6,312
   4e978:	00430880 	call	43088 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   4e97c:	e0bff917 	ldw	r2,-28(fp)
   4e980:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   4e984:	e0bffa17 	ldw	r2,-24(fp)
   4e988:	10bff304 	addi	r2,r2,-52
   4e98c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   4e990:	e0bffb17 	ldw	r2,-20(fp)
   4e994:	10800c04 	addi	r2,r2,48
   4e998:	e0fffc17 	ldw	r3,-16(fp)
   4e99c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   4e9a0:	e0bffb17 	ldw	r2,-20(fp)
   4e9a4:	10800b04 	addi	r2,r2,44
   4e9a8:	e0fffd17 	ldw	r3,-12(fp)
   4e9ac:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   4e9b0:	e0bffb17 	ldw	r2,-20(fp)
   4e9b4:	10800a04 	addi	r2,r2,40
   4e9b8:	e0fff917 	ldw	r3,-28(fp)
   4e9bc:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   4e9c0:	00800174 	movhi	r2,5
   4e9c4:	10b9b504 	addi	r2,r2,-6444
   4e9c8:	10c00104 	addi	r3,r2,4
   4e9cc:	e0bffb17 	ldw	r2,-20(fp)
   4e9d0:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   4e9d4:	e0bffb17 	ldw	r2,-20(fp)
}
   4e9d8:	e037883a 	mov	sp,fp
   4e9dc:	dfc00117 	ldw	ra,4(sp)
   4e9e0:	df000017 	ldw	fp,0(sp)
   4e9e4:	dec00204 	addi	sp,sp,8
   4e9e8:	f800283a 	ret

0004e9ec <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   4e9ec:	defffe04 	addi	sp,sp,-8
   4e9f0:	df000115 	stw	fp,4(sp)
   4e9f4:	df000104 	addi	fp,sp,4
   4e9f8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   4e9fc:	e037883a 	mov	sp,fp
   4ea00:	df000017 	ldw	fp,0(sp)
   4ea04:	dec00104 	addi	sp,sp,4
   4ea08:	f800283a 	ret

0004ea0c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   4ea0c:	defffe04 	addi	sp,sp,-8
   4ea10:	df000115 	stw	fp,4(sp)
   4ea14:	df000104 	addi	fp,sp,4
   4ea18:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   4ea1c:	e037883a 	mov	sp,fp
   4ea20:	df000017 	ldw	fp,0(sp)
   4ea24:	dec00104 	addi	sp,sp,4
   4ea28:	f800283a 	ret

0004ea2c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   4ea2c:	deffff04 	addi	sp,sp,-4
   4ea30:	df000015 	stw	fp,0(sp)
   4ea34:	d839883a 	mov	fp,sp
}
   4ea38:	e037883a 	mov	sp,fp
   4ea3c:	df000017 	ldw	fp,0(sp)
   4ea40:	dec00104 	addi	sp,sp,4
   4ea44:	f800283a 	ret

0004ea48 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   4ea48:	deffff04 	addi	sp,sp,-4
   4ea4c:	df000015 	stw	fp,0(sp)
   4ea50:	d839883a 	mov	fp,sp
}
   4ea54:	e037883a 	mov	sp,fp
   4ea58:	df000017 	ldw	fp,0(sp)
   4ea5c:	dec00104 	addi	sp,sp,4
   4ea60:	f800283a 	ret

0004ea64 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   4ea64:	deffff04 	addi	sp,sp,-4
   4ea68:	df000015 	stw	fp,0(sp)
   4ea6c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   4ea70:	e037883a 	mov	sp,fp
   4ea74:	df000017 	ldw	fp,0(sp)
   4ea78:	dec00104 	addi	sp,sp,4
   4ea7c:	f800283a 	ret

0004ea80 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   4ea80:	deffff04 	addi	sp,sp,-4
   4ea84:	df000015 	stw	fp,0(sp)
   4ea88:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   4ea8c:	e037883a 	mov	sp,fp
   4ea90:	df000017 	ldw	fp,0(sp)
   4ea94:	dec00104 	addi	sp,sp,4
   4ea98:	f800283a 	ret

0004ea9c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   4ea9c:	deffff04 	addi	sp,sp,-4
   4eaa0:	df000015 	stw	fp,0(sp)
   4eaa4:	d839883a 	mov	fp,sp
}
   4eaa8:	e037883a 	mov	sp,fp
   4eaac:	df000017 	ldw	fp,0(sp)
   4eab0:	dec00104 	addi	sp,sp,4
   4eab4:	f800283a 	ret

0004eab8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   4eab8:	deffff04 	addi	sp,sp,-4
   4eabc:	df000015 	stw	fp,0(sp)
   4eac0:	d839883a 	mov	fp,sp
}
   4eac4:	e037883a 	mov	sp,fp
   4eac8:	df000017 	ldw	fp,0(sp)
   4eacc:	dec00104 	addi	sp,sp,4
   4ead0:	f800283a 	ret

0004ead4 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   4ead4:	defffe04 	addi	sp,sp,-8
   4ead8:	df000115 	stw	fp,4(sp)
   4eadc:	df000104 	addi	fp,sp,4
   4eae0:	e13fff15 	stw	r4,-4(fp)
}
   4eae4:	e037883a 	mov	sp,fp
   4eae8:	df000017 	ldw	fp,0(sp)
   4eaec:	dec00104 	addi	sp,sp,4
   4eaf0:	f800283a 	ret

0004eaf4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4eaf4:	defffa04 	addi	sp,sp,-24
   4eaf8:	dfc00515 	stw	ra,20(sp)
   4eafc:	df000415 	stw	fp,16(sp)
   4eb00:	df000404 	addi	fp,sp,16
   4eb04:	e13ffe15 	stw	r4,-8(fp)
   4eb08:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4eb0c:	e0bfff17 	ldw	r2,-4(fp)
   4eb10:	10800017 	ldw	r2,0(r2)
   4eb14:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4eb18:	e13ffe17 	ldw	r4,-8(fp)
   4eb1c:	0040bbc0 	call	40bbc <strlen>
   4eb20:	10800044 	addi	r2,r2,1
   4eb24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4eb28:	00000d06 	br	4eb60 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4eb2c:	e0bffc17 	ldw	r2,-16(fp)
   4eb30:	10c00217 	ldw	r3,8(r2)
   4eb34:	e0bffd17 	ldw	r2,-12(fp)
   4eb38:	1809883a 	mov	r4,r3
   4eb3c:	e17ffe17 	ldw	r5,-8(fp)
   4eb40:	100d883a 	mov	r6,r2
   4eb44:	004ee940 	call	4ee94 <memcmp>
   4eb48:	1000021e 	bne	r2,zero,4eb54 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4eb4c:	e0bffc17 	ldw	r2,-16(fp)
   4eb50:	00000706 	br	4eb70 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4eb54:	e0bffc17 	ldw	r2,-16(fp)
   4eb58:	10800017 	ldw	r2,0(r2)
   4eb5c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4eb60:	e0fffc17 	ldw	r3,-16(fp)
   4eb64:	e0bfff17 	ldw	r2,-4(fp)
   4eb68:	18bff01e 	bne	r3,r2,4eb2c <__alt_data_end+0xfffd8fcc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4eb6c:	0005883a 	mov	r2,zero
}
   4eb70:	e037883a 	mov	sp,fp
   4eb74:	dfc00117 	ldw	ra,4(sp)
   4eb78:	df000017 	ldw	fp,0(sp)
   4eb7c:	dec00204 	addi	sp,sp,8
   4eb80:	f800283a 	ret

0004eb84 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4eb84:	defffb04 	addi	sp,sp,-20
   4eb88:	dfc00415 	stw	ra,16(sp)
   4eb8c:	df000315 	stw	fp,12(sp)
   4eb90:	df000304 	addi	fp,sp,12
   4eb94:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4eb98:	00800174 	movhi	r2,5
   4eb9c:	1083ef04 	addi	r2,r2,4028
   4eba0:	10800017 	ldw	r2,0(r2)
   4eba4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4eba8:	00003106 	br	4ec70 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   4ebac:	e0bffd17 	ldw	r2,-12(fp)
   4ebb0:	10800217 	ldw	r2,8(r2)
   4ebb4:	1009883a 	mov	r4,r2
   4ebb8:	0040bbc0 	call	40bbc <strlen>
   4ebbc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4ebc0:	e0bffd17 	ldw	r2,-12(fp)
   4ebc4:	10c00217 	ldw	r3,8(r2)
   4ebc8:	e0bffe17 	ldw	r2,-8(fp)
   4ebcc:	10bfffc4 	addi	r2,r2,-1
   4ebd0:	1885883a 	add	r2,r3,r2
   4ebd4:	10800003 	ldbu	r2,0(r2)
   4ebd8:	10803fcc 	andi	r2,r2,255
   4ebdc:	1080201c 	xori	r2,r2,128
   4ebe0:	10bfe004 	addi	r2,r2,-128
   4ebe4:	10800bd8 	cmpnei	r2,r2,47
   4ebe8:	1000031e 	bne	r2,zero,4ebf8 <alt_find_file+0x74>
    {
      len -= 1;
   4ebec:	e0bffe17 	ldw	r2,-8(fp)
   4ebf0:	10bfffc4 	addi	r2,r2,-1
   4ebf4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4ebf8:	e0bffe17 	ldw	r2,-8(fp)
   4ebfc:	e0ffff17 	ldw	r3,-4(fp)
   4ec00:	1885883a 	add	r2,r3,r2
   4ec04:	10800003 	ldbu	r2,0(r2)
   4ec08:	10803fcc 	andi	r2,r2,255
   4ec0c:	1080201c 	xori	r2,r2,128
   4ec10:	10bfe004 	addi	r2,r2,-128
   4ec14:	10800be0 	cmpeqi	r2,r2,47
   4ec18:	1000081e 	bne	r2,zero,4ec3c <alt_find_file+0xb8>
   4ec1c:	e0bffe17 	ldw	r2,-8(fp)
   4ec20:	e0ffff17 	ldw	r3,-4(fp)
   4ec24:	1885883a 	add	r2,r3,r2
   4ec28:	10800003 	ldbu	r2,0(r2)
   4ec2c:	10803fcc 	andi	r2,r2,255
   4ec30:	1080201c 	xori	r2,r2,128
   4ec34:	10bfe004 	addi	r2,r2,-128
   4ec38:	10000a1e 	bne	r2,zero,4ec64 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4ec3c:	e0bffd17 	ldw	r2,-12(fp)
   4ec40:	10c00217 	ldw	r3,8(r2)
   4ec44:	e0bffe17 	ldw	r2,-8(fp)
   4ec48:	1809883a 	mov	r4,r3
   4ec4c:	e17fff17 	ldw	r5,-4(fp)
   4ec50:	100d883a 	mov	r6,r2
   4ec54:	004ee940 	call	4ee94 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4ec58:	1000021e 	bne	r2,zero,4ec64 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4ec5c:	e0bffd17 	ldw	r2,-12(fp)
   4ec60:	00000806 	br	4ec84 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   4ec64:	e0bffd17 	ldw	r2,-12(fp)
   4ec68:	10800017 	ldw	r2,0(r2)
   4ec6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4ec70:	e0fffd17 	ldw	r3,-12(fp)
   4ec74:	00800174 	movhi	r2,5
   4ec78:	1083ef04 	addi	r2,r2,4028
   4ec7c:	18bfcb1e 	bne	r3,r2,4ebac <__alt_data_end+0xfffd904c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4ec80:	0005883a 	mov	r2,zero
}
   4ec84:	e037883a 	mov	sp,fp
   4ec88:	dfc00117 	ldw	ra,4(sp)
   4ec8c:	df000017 	ldw	fp,0(sp)
   4ec90:	dec00204 	addi	sp,sp,8
   4ec94:	f800283a 	ret

0004ec98 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4ec98:	defff804 	addi	sp,sp,-32
   4ec9c:	dfc00715 	stw	ra,28(sp)
   4eca0:	df000615 	stw	fp,24(sp)
   4eca4:	dc000515 	stw	r16,20(sp)
   4eca8:	df000604 	addi	fp,sp,24
   4ecac:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   4ecb0:	00bffa04 	movi	r2,-24
   4ecb4:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   4ecb8:	00800174 	movhi	r2,5
   4ecbc:	108b0d04 	addi	r2,r2,11316
   4ecc0:	10800017 	ldw	r2,0(r2)
   4ecc4:	e0bffc15 	stw	r2,-16(fp)
   4ecc8:	e03ffd0d 	sth	zero,-12(fp)
   4eccc:	e0fffd0b 	ldhu	r3,-12(fp)
   4ecd0:	e0bffd84 	addi	r2,fp,-10
   4ecd4:	e13ffc17 	ldw	r4,-16(fp)
   4ecd8:	180b883a 	mov	r5,r3
   4ecdc:	100d883a 	mov	r6,r2
   4ece0:	0049a940 	call	49a94 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4ece4:	e03ffa15 	stw	zero,-24(fp)
   4ece8:	00002106 	br	4ed70 <alt_get_fd+0xd8>
  {
    if (!alt_fd_list[i].dev)
   4ecec:	04000174 	movhi	r16,5
   4ecf0:	843f3c04 	addi	r16,r16,-784
   4ecf4:	e0bffa17 	ldw	r2,-24(fp)
   4ecf8:	1009883a 	mov	r4,r2
   4ecfc:	01400304 	movi	r5,12
   4ed00:	00436100 	call	43610 <__mulsi3>
   4ed04:	8085883a 	add	r2,r16,r2
   4ed08:	10800017 	ldw	r2,0(r2)
   4ed0c:	1000151e 	bne	r2,zero,4ed64 <alt_get_fd+0xcc>
    {
      alt_fd_list[i].dev = dev;
   4ed10:	04000174 	movhi	r16,5
   4ed14:	843f3c04 	addi	r16,r16,-784
   4ed18:	e0bffa17 	ldw	r2,-24(fp)
   4ed1c:	1009883a 	mov	r4,r2
   4ed20:	01400304 	movi	r5,12
   4ed24:	00436100 	call	43610 <__mulsi3>
   4ed28:	8085883a 	add	r2,r16,r2
   4ed2c:	e0fffe17 	ldw	r3,-8(fp)
   4ed30:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4ed34:	00800174 	movhi	r2,5
   4ed38:	1083f304 	addi	r2,r2,4044
   4ed3c:	10c00017 	ldw	r3,0(r2)
   4ed40:	e0bffa17 	ldw	r2,-24(fp)
   4ed44:	1880040e 	bge	r3,r2,4ed58 <alt_get_fd+0xc0>
      {
        alt_max_fd = i;
   4ed48:	00800174 	movhi	r2,5
   4ed4c:	1083f304 	addi	r2,r2,4044
   4ed50:	e0fffa17 	ldw	r3,-24(fp)
   4ed54:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4ed58:	e0bffa17 	ldw	r2,-24(fp)
   4ed5c:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
   4ed60:	00000606 	br	4ed7c <alt_get_fd+0xe4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4ed64:	e0bffa17 	ldw	r2,-24(fp)
   4ed68:	10800044 	addi	r2,r2,1
   4ed6c:	e0bffa15 	stw	r2,-24(fp)
   4ed70:	e0bffa17 	ldw	r2,-24(fp)
   4ed74:	10800810 	cmplti	r2,r2,32
   4ed78:	103fdc1e 	bne	r2,zero,4ecec <__alt_data_end+0xfffd918c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   4ed7c:	00800174 	movhi	r2,5
   4ed80:	108b0d04 	addi	r2,r2,11316
   4ed84:	10800017 	ldw	r2,0(r2)
   4ed88:	1009883a 	mov	r4,r2
   4ed8c:	0049e680 	call	49e68 <OSSemPost>

  return rc;
   4ed90:	e0bffb17 	ldw	r2,-20(fp)
}
   4ed94:	e6ffff04 	addi	sp,fp,-4
   4ed98:	dfc00217 	ldw	ra,8(sp)
   4ed9c:	df000117 	ldw	fp,4(sp)
   4eda0:	dc000017 	ldw	r16,0(sp)
   4eda4:	dec00304 	addi	sp,sp,12
   4eda8:	f800283a 	ret

0004edac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4edac:	defffe04 	addi	sp,sp,-8
   4edb0:	df000115 	stw	fp,4(sp)
   4edb4:	df000104 	addi	fp,sp,4
   4edb8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4edbc:	e0bfff17 	ldw	r2,-4(fp)
   4edc0:	10bffe84 	addi	r2,r2,-6
   4edc4:	10c00428 	cmpgeui	r3,r2,16
   4edc8:	18001a1e 	bne	r3,zero,4ee34 <alt_exception_cause_generated_bad_addr+0x88>
   4edcc:	100690ba 	slli	r3,r2,2
   4edd0:	00800174 	movhi	r2,5
   4edd4:	10bb7904 	addi	r2,r2,-4636
   4edd8:	1885883a 	add	r2,r3,r2
   4eddc:	10800017 	ldw	r2,0(r2)
   4ede0:	1000683a 	jmp	r2
   4ede4:	0004ee24 	muli	zero,zero,5048
   4ede8:	0004ee24 	muli	zero,zero,5048
   4edec:	0004ee34 	movhi	zero,5048
   4edf0:	0004ee34 	movhi	zero,5048
   4edf4:	0004ee34 	movhi	zero,5048
   4edf8:	0004ee24 	muli	zero,zero,5048
   4edfc:	0004ee2c 	andhi	zero,zero,5048
   4ee00:	0004ee34 	movhi	zero,5048
   4ee04:	0004ee24 	muli	zero,zero,5048
   4ee08:	0004ee24 	muli	zero,zero,5048
   4ee0c:	0004ee34 	movhi	zero,5048
   4ee10:	0004ee24 	muli	zero,zero,5048
   4ee14:	0004ee2c 	andhi	zero,zero,5048
   4ee18:	0004ee34 	movhi	zero,5048
   4ee1c:	0004ee34 	movhi	zero,5048
   4ee20:	0004ee24 	muli	zero,zero,5048
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   4ee24:	00800044 	movi	r2,1
   4ee28:	00000306 	br	4ee38 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   4ee2c:	0005883a 	mov	r2,zero
   4ee30:	00000106 	br	4ee38 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   4ee34:	0005883a 	mov	r2,zero
  }
}
   4ee38:	e037883a 	mov	sp,fp
   4ee3c:	df000017 	ldw	fp,0(sp)
   4ee40:	dec00104 	addi	sp,sp,4
   4ee44:	f800283a 	ret

0004ee48 <atexit>:
   4ee48:	200b883a 	mov	r5,r4
   4ee4c:	000d883a 	mov	r6,zero
   4ee50:	0009883a 	mov	r4,zero
   4ee54:	000f883a 	mov	r7,zero
   4ee58:	004ef101 	jmpi	4ef10 <__register_exitproc>

0004ee5c <exit>:
   4ee5c:	defffe04 	addi	sp,sp,-8
   4ee60:	000b883a 	mov	r5,zero
   4ee64:	dc000015 	stw	r16,0(sp)
   4ee68:	dfc00115 	stw	ra,4(sp)
   4ee6c:	2021883a 	mov	r16,r4
   4ee70:	004f0240 	call	4f024 <__call_exitprocs>
   4ee74:	00800174 	movhi	r2,5
   4ee78:	1083eb04 	addi	r2,r2,4012
   4ee7c:	11000017 	ldw	r4,0(r2)
   4ee80:	20800f17 	ldw	r2,60(r4)
   4ee84:	10000126 	beq	r2,zero,4ee8c <exit+0x30>
   4ee88:	103ee83a 	callr	r2
   4ee8c:	8009883a 	mov	r4,r16
   4ee90:	004f2e40 	call	4f2e4 <_exit>

0004ee94 <memcmp>:
   4ee94:	01c000c4 	movi	r7,3
   4ee98:	3980192e 	bgeu	r7,r6,4ef00 <memcmp+0x6c>
   4ee9c:	2144b03a 	or	r2,r4,r5
   4eea0:	11c4703a 	and	r2,r2,r7
   4eea4:	10000f26 	beq	r2,zero,4eee4 <memcmp+0x50>
   4eea8:	20800003 	ldbu	r2,0(r4)
   4eeac:	28c00003 	ldbu	r3,0(r5)
   4eeb0:	10c0151e 	bne	r2,r3,4ef08 <memcmp+0x74>
   4eeb4:	31bfff84 	addi	r6,r6,-2
   4eeb8:	01ffffc4 	movi	r7,-1
   4eebc:	00000406 	br	4eed0 <memcmp+0x3c>
   4eec0:	20800003 	ldbu	r2,0(r4)
   4eec4:	28c00003 	ldbu	r3,0(r5)
   4eec8:	31bfffc4 	addi	r6,r6,-1
   4eecc:	10c00e1e 	bne	r2,r3,4ef08 <memcmp+0x74>
   4eed0:	21000044 	addi	r4,r4,1
   4eed4:	29400044 	addi	r5,r5,1
   4eed8:	31fff91e 	bne	r6,r7,4eec0 <__alt_data_end+0xfffd9360>
   4eedc:	0005883a 	mov	r2,zero
   4eee0:	f800283a 	ret
   4eee4:	20c00017 	ldw	r3,0(r4)
   4eee8:	28800017 	ldw	r2,0(r5)
   4eeec:	1880041e 	bne	r3,r2,4ef00 <memcmp+0x6c>
   4eef0:	31bfff04 	addi	r6,r6,-4
   4eef4:	21000104 	addi	r4,r4,4
   4eef8:	29400104 	addi	r5,r5,4
   4eefc:	39bff936 	bltu	r7,r6,4eee4 <__alt_data_end+0xfffd9384>
   4ef00:	303fe91e 	bne	r6,zero,4eea8 <__alt_data_end+0xfffd9348>
   4ef04:	003ff506 	br	4eedc <__alt_data_end+0xfffd937c>
   4ef08:	10c5c83a 	sub	r2,r2,r3
   4ef0c:	f800283a 	ret

0004ef10 <__register_exitproc>:
   4ef10:	00800174 	movhi	r2,5
   4ef14:	defffa04 	addi	sp,sp,-24
   4ef18:	1083eb04 	addi	r2,r2,4012
   4ef1c:	dc000315 	stw	r16,12(sp)
   4ef20:	14000017 	ldw	r16,0(r2)
   4ef24:	dc400415 	stw	r17,16(sp)
   4ef28:	dfc00515 	stw	ra,20(sp)
   4ef2c:	80805217 	ldw	r2,328(r16)
   4ef30:	2023883a 	mov	r17,r4
   4ef34:	10003626 	beq	r2,zero,4f010 <__register_exitproc+0x100>
   4ef38:	10c00117 	ldw	r3,4(r2)
   4ef3c:	010007c4 	movi	r4,31
   4ef40:	20c00e16 	blt	r4,r3,4ef7c <__register_exitproc+0x6c>
   4ef44:	1a400044 	addi	r9,r3,1
   4ef48:	8800211e 	bne	r17,zero,4efd0 <__register_exitproc+0xc0>
   4ef4c:	18c00084 	addi	r3,r3,2
   4ef50:	18c7883a 	add	r3,r3,r3
   4ef54:	18c7883a 	add	r3,r3,r3
   4ef58:	12400115 	stw	r9,4(r2)
   4ef5c:	10c7883a 	add	r3,r2,r3
   4ef60:	19400015 	stw	r5,0(r3)
   4ef64:	0005883a 	mov	r2,zero
   4ef68:	dfc00517 	ldw	ra,20(sp)
   4ef6c:	dc400417 	ldw	r17,16(sp)
   4ef70:	dc000317 	ldw	r16,12(sp)
   4ef74:	dec00604 	addi	sp,sp,24
   4ef78:	f800283a 	ret
   4ef7c:	00800034 	movhi	r2,0
   4ef80:	10800004 	addi	r2,r2,0
   4ef84:	10002526 	beq	r2,zero,4f01c <__register_exitproc+0x10c>
   4ef88:	01006404 	movi	r4,400
   4ef8c:	d9400015 	stw	r5,0(sp)
   4ef90:	d9800115 	stw	r6,4(sp)
   4ef94:	d9c00215 	stw	r7,8(sp)
   4ef98:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   4ef9c:	d9400017 	ldw	r5,0(sp)
   4efa0:	d9800117 	ldw	r6,4(sp)
   4efa4:	d9c00217 	ldw	r7,8(sp)
   4efa8:	10001c26 	beq	r2,zero,4f01c <__register_exitproc+0x10c>
   4efac:	80c05217 	ldw	r3,328(r16)
   4efb0:	10000115 	stw	zero,4(r2)
   4efb4:	02400044 	movi	r9,1
   4efb8:	10c00015 	stw	r3,0(r2)
   4efbc:	80805215 	stw	r2,328(r16)
   4efc0:	10006215 	stw	zero,392(r2)
   4efc4:	10006315 	stw	zero,396(r2)
   4efc8:	0007883a 	mov	r3,zero
   4efcc:	883fdf26 	beq	r17,zero,4ef4c <__alt_data_end+0xfffd93ec>
   4efd0:	18d1883a 	add	r8,r3,r3
   4efd4:	4211883a 	add	r8,r8,r8
   4efd8:	1211883a 	add	r8,r2,r8
   4efdc:	41802215 	stw	r6,136(r8)
   4efe0:	01000044 	movi	r4,1
   4efe4:	11806217 	ldw	r6,392(r2)
   4efe8:	20c8983a 	sll	r4,r4,r3
   4efec:	310cb03a 	or	r6,r6,r4
   4eff0:	11806215 	stw	r6,392(r2)
   4eff4:	41c04215 	stw	r7,264(r8)
   4eff8:	01800084 	movi	r6,2
   4effc:	89bfd31e 	bne	r17,r6,4ef4c <__alt_data_end+0xfffd93ec>
   4f000:	11806317 	ldw	r6,396(r2)
   4f004:	3108b03a 	or	r4,r6,r4
   4f008:	11006315 	stw	r4,396(r2)
   4f00c:	003fcf06 	br	4ef4c <__alt_data_end+0xfffd93ec>
   4f010:	80805304 	addi	r2,r16,332
   4f014:	80805215 	stw	r2,328(r16)
   4f018:	003fc706 	br	4ef38 <__alt_data_end+0xfffd93d8>
   4f01c:	00bfffc4 	movi	r2,-1
   4f020:	003fd106 	br	4ef68 <__alt_data_end+0xfffd9408>

0004f024 <__call_exitprocs>:
   4f024:	00800174 	movhi	r2,5
   4f028:	1083eb04 	addi	r2,r2,4012
   4f02c:	10800017 	ldw	r2,0(r2)
   4f030:	defff404 	addi	sp,sp,-48
   4f034:	dd800815 	stw	r22,32(sp)
   4f038:	d8800015 	stw	r2,0(sp)
   4f03c:	10805204 	addi	r2,r2,328
   4f040:	dd000615 	stw	r20,24(sp)
   4f044:	dc800415 	stw	r18,16(sp)
   4f048:	dfc00b15 	stw	ra,44(sp)
   4f04c:	df000a15 	stw	fp,40(sp)
   4f050:	ddc00915 	stw	r23,36(sp)
   4f054:	dd400715 	stw	r21,28(sp)
   4f058:	dcc00515 	stw	r19,20(sp)
   4f05c:	dc400315 	stw	r17,12(sp)
   4f060:	dc000215 	stw	r16,8(sp)
   4f064:	2025883a 	mov	r18,r4
   4f068:	2829883a 	mov	r20,r5
   4f06c:	d8800115 	stw	r2,4(sp)
   4f070:	05bfffc4 	movi	r22,-1
   4f074:	d8800017 	ldw	r2,0(sp)
   4f078:	14c05217 	ldw	r19,328(r2)
   4f07c:	98001d26 	beq	r19,zero,4f0f4 <__call_exitprocs+0xd0>
   4f080:	dd400117 	ldw	r21,4(sp)
   4f084:	98800117 	ldw	r2,4(r19)
   4f088:	173fffc4 	addi	fp,r2,-1
   4f08c:	e0000d16 	blt	fp,zero,4f0c4 <__call_exitprocs+0xa0>
   4f090:	14000044 	addi	r16,r2,1
   4f094:	8421883a 	add	r16,r16,r16
   4f098:	8421883a 	add	r16,r16,r16
   4f09c:	84402004 	addi	r17,r16,128
   4f0a0:	9c63883a 	add	r17,r19,r17
   4f0a4:	9c21883a 	add	r16,r19,r16
   4f0a8:	a0001e26 	beq	r20,zero,4f124 <__call_exitprocs+0x100>
   4f0ac:	80804017 	ldw	r2,256(r16)
   4f0b0:	15001c26 	beq	r2,r20,4f124 <__call_exitprocs+0x100>
   4f0b4:	e73fffc4 	addi	fp,fp,-1
   4f0b8:	843fff04 	addi	r16,r16,-4
   4f0bc:	8c7fff04 	addi	r17,r17,-4
   4f0c0:	e5bff91e 	bne	fp,r22,4f0a8 <__alt_data_end+0xfffd9548>
   4f0c4:	00800034 	movhi	r2,0
   4f0c8:	10800004 	addi	r2,r2,0
   4f0cc:	10000926 	beq	r2,zero,4f0f4 <__call_exitprocs+0xd0>
   4f0d0:	98800117 	ldw	r2,4(r19)
   4f0d4:	1000311e 	bne	r2,zero,4f19c <__call_exitprocs+0x178>
   4f0d8:	98800017 	ldw	r2,0(r19)
   4f0dc:	10003426 	beq	r2,zero,4f1b0 <__call_exitprocs+0x18c>
   4f0e0:	9809883a 	mov	r4,r19
   4f0e4:	a8800015 	stw	r2,0(r21)
   4f0e8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   4f0ec:	acc00017 	ldw	r19,0(r21)
   4f0f0:	983fe41e 	bne	r19,zero,4f084 <__alt_data_end+0xfffd9524>
   4f0f4:	dfc00b17 	ldw	ra,44(sp)
   4f0f8:	df000a17 	ldw	fp,40(sp)
   4f0fc:	ddc00917 	ldw	r23,36(sp)
   4f100:	dd800817 	ldw	r22,32(sp)
   4f104:	dd400717 	ldw	r21,28(sp)
   4f108:	dd000617 	ldw	r20,24(sp)
   4f10c:	dcc00517 	ldw	r19,20(sp)
   4f110:	dc800417 	ldw	r18,16(sp)
   4f114:	dc400317 	ldw	r17,12(sp)
   4f118:	dc000217 	ldw	r16,8(sp)
   4f11c:	dec00c04 	addi	sp,sp,48
   4f120:	f800283a 	ret
   4f124:	98800117 	ldw	r2,4(r19)
   4f128:	80c00017 	ldw	r3,0(r16)
   4f12c:	10bfffc4 	addi	r2,r2,-1
   4f130:	17001526 	beq	r2,fp,4f188 <__call_exitprocs+0x164>
   4f134:	80000015 	stw	zero,0(r16)
   4f138:	183fde26 	beq	r3,zero,4f0b4 <__alt_data_end+0xfffd9554>
   4f13c:	00800044 	movi	r2,1
   4f140:	1708983a 	sll	r4,r2,fp
   4f144:	98806217 	ldw	r2,392(r19)
   4f148:	9dc00117 	ldw	r23,4(r19)
   4f14c:	2084703a 	and	r2,r4,r2
   4f150:	1000061e 	bne	r2,zero,4f16c <__call_exitprocs+0x148>
   4f154:	183ee83a 	callr	r3
   4f158:	98800117 	ldw	r2,4(r19)
   4f15c:	15ffc51e 	bne	r2,r23,4f074 <__alt_data_end+0xfffd9514>
   4f160:	a8800017 	ldw	r2,0(r21)
   4f164:	14ffd326 	beq	r2,r19,4f0b4 <__alt_data_end+0xfffd9554>
   4f168:	003fc206 	br	4f074 <__alt_data_end+0xfffd9514>
   4f16c:	98806317 	ldw	r2,396(r19)
   4f170:	2084703a 	and	r2,r4,r2
   4f174:	1000061e 	bne	r2,zero,4f190 <__call_exitprocs+0x16c>
   4f178:	89400017 	ldw	r5,0(r17)
   4f17c:	9009883a 	mov	r4,r18
   4f180:	183ee83a 	callr	r3
   4f184:	003ff406 	br	4f158 <__alt_data_end+0xfffd95f8>
   4f188:	9f000115 	stw	fp,4(r19)
   4f18c:	003fea06 	br	4f138 <__alt_data_end+0xfffd95d8>
   4f190:	89000017 	ldw	r4,0(r17)
   4f194:	183ee83a 	callr	r3
   4f198:	003fef06 	br	4f158 <__alt_data_end+0xfffd95f8>
   4f19c:	98800017 	ldw	r2,0(r19)
   4f1a0:	982b883a 	mov	r21,r19
   4f1a4:	1027883a 	mov	r19,r2
   4f1a8:	983fb61e 	bne	r19,zero,4f084 <__alt_data_end+0xfffd9524>
   4f1ac:	003fd106 	br	4f0f4 <__alt_data_end+0xfffd9594>
   4f1b0:	0005883a 	mov	r2,zero
   4f1b4:	003ffa06 	br	4f1a0 <__alt_data_end+0xfffd9640>

0004f1b8 <udivmodsi4>:
   4f1b8:	2900182e 	bgeu	r5,r4,4f21c <udivmodsi4+0x64>
   4f1bc:	28001716 	blt	r5,zero,4f21c <udivmodsi4+0x64>
   4f1c0:	00800804 	movi	r2,32
   4f1c4:	00c00044 	movi	r3,1
   4f1c8:	00000206 	br	4f1d4 <udivmodsi4+0x1c>
   4f1cc:	10001126 	beq	r2,zero,4f214 <udivmodsi4+0x5c>
   4f1d0:	28000516 	blt	r5,zero,4f1e8 <udivmodsi4+0x30>
   4f1d4:	294b883a 	add	r5,r5,r5
   4f1d8:	10bfffc4 	addi	r2,r2,-1
   4f1dc:	18c7883a 	add	r3,r3,r3
   4f1e0:	293ffa36 	bltu	r5,r4,4f1cc <__alt_data_end+0xfffd966c>
   4f1e4:	18000b26 	beq	r3,zero,4f214 <udivmodsi4+0x5c>
   4f1e8:	0005883a 	mov	r2,zero
   4f1ec:	21400236 	bltu	r4,r5,4f1f8 <udivmodsi4+0x40>
   4f1f0:	2149c83a 	sub	r4,r4,r5
   4f1f4:	10c4b03a 	or	r2,r2,r3
   4f1f8:	1806d07a 	srli	r3,r3,1
   4f1fc:	280ad07a 	srli	r5,r5,1
   4f200:	183ffa1e 	bne	r3,zero,4f1ec <__alt_data_end+0xfffd968c>
   4f204:	3000011e 	bne	r6,zero,4f20c <udivmodsi4+0x54>
   4f208:	f800283a 	ret
   4f20c:	2005883a 	mov	r2,r4
   4f210:	f800283a 	ret
   4f214:	0005883a 	mov	r2,zero
   4f218:	003ffa06 	br	4f204 <__alt_data_end+0xfffd96a4>
   4f21c:	00c00044 	movi	r3,1
   4f220:	003ff106 	br	4f1e8 <__alt_data_end+0xfffd9688>

0004f224 <__divsi3>:
   4f224:	defffe04 	addi	sp,sp,-8
   4f228:	dfc00115 	stw	ra,4(sp)
   4f22c:	dc000015 	stw	r16,0(sp)
   4f230:	20000b16 	blt	r4,zero,4f260 <__divsi3+0x3c>
   4f234:	0021883a 	mov	r16,zero
   4f238:	28000c16 	blt	r5,zero,4f26c <__divsi3+0x48>
   4f23c:	000d883a 	mov	r6,zero
   4f240:	004f1b80 	call	4f1b8 <udivmodsi4>
   4f244:	0407c83a 	sub	r3,zero,r16
   4f248:	1884f03a 	xor	r2,r3,r2
   4f24c:	1405883a 	add	r2,r2,r16
   4f250:	dfc00117 	ldw	ra,4(sp)
   4f254:	dc000017 	ldw	r16,0(sp)
   4f258:	dec00204 	addi	sp,sp,8
   4f25c:	f800283a 	ret
   4f260:	0109c83a 	sub	r4,zero,r4
   4f264:	04000044 	movi	r16,1
   4f268:	283ff40e 	bge	r5,zero,4f23c <__alt_data_end+0xfffd96dc>
   4f26c:	014bc83a 	sub	r5,zero,r5
   4f270:	8400005c 	xori	r16,r16,1
   4f274:	003ff106 	br	4f23c <__alt_data_end+0xfffd96dc>

0004f278 <__modsi3>:
   4f278:	defffd04 	addi	sp,sp,-12
   4f27c:	dfc00215 	stw	ra,8(sp)
   4f280:	dc400115 	stw	r17,4(sp)
   4f284:	dc000015 	stw	r16,0(sp)
   4f288:	20000c16 	blt	r4,zero,4f2bc <__modsi3+0x44>
   4f28c:	0023883a 	mov	r17,zero
   4f290:	0021883a 	mov	r16,zero
   4f294:	28000d16 	blt	r5,zero,4f2cc <__modsi3+0x54>
   4f298:	01800044 	movi	r6,1
   4f29c:	004f1b80 	call	4f1b8 <udivmodsi4>
   4f2a0:	1404f03a 	xor	r2,r2,r16
   4f2a4:	8885883a 	add	r2,r17,r2
   4f2a8:	dfc00217 	ldw	ra,8(sp)
   4f2ac:	dc400117 	ldw	r17,4(sp)
   4f2b0:	dc000017 	ldw	r16,0(sp)
   4f2b4:	dec00304 	addi	sp,sp,12
   4f2b8:	f800283a 	ret
   4f2bc:	0109c83a 	sub	r4,zero,r4
   4f2c0:	04400044 	movi	r17,1
   4f2c4:	043fffc4 	movi	r16,-1
   4f2c8:	283ff30e 	bge	r5,zero,4f298 <__alt_data_end+0xfffd9738>
   4f2cc:	014bc83a 	sub	r5,zero,r5
   4f2d0:	003ff106 	br	4f298 <__alt_data_end+0xfffd9738>

0004f2d4 <__udivsi3>:
   4f2d4:	000d883a 	mov	r6,zero
   4f2d8:	004f1b81 	jmpi	4f1b8 <udivmodsi4>

0004f2dc <__umodsi3>:
   4f2dc:	01800044 	movi	r6,1
   4f2e0:	004f1b81 	jmpi	4f1b8 <udivmodsi4>

0004f2e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4f2e4:	defffd04 	addi	sp,sp,-12
   4f2e8:	df000215 	stw	fp,8(sp)
   4f2ec:	df000204 	addi	fp,sp,8
   4f2f0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4f2f4:	00800174 	movhi	r2,5
   4f2f8:	108b1544 	addi	r2,r2,11349
   4f2fc:	10000005 	stb	zero,0(r2)
   4f300:	e0bfff17 	ldw	r2,-4(fp)
   4f304:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   4f308:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4f30c:	10000226 	beq	r2,zero,4f318 <_exit+0x34>
    ALT_SIM_FAIL();
   4f310:	002af070 	cmpltui	zero,zero,43969
   4f314:	00000106 	br	4f31c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   4f318:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4f31c:	003fff06 	br	4f31c <__alt_data_end+0xfffd97bc>
