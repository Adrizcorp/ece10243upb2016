
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module test_clase1(

	//////////// CLOCK //////////
	input 		          		FPGA_CLK1_50,
	input 		          		FPGA_CLK2_50,
	input 		          		FPGA_CLK3_50,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// SW //////////
	input 		     [3:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

reg clk_25mhz=1'b0;
reg clk_12mhz=1'b0;
wire clk_div_freq;
wire [31:0]salida_rom_jesus;
//=======================================================
//  Structural coding
//=======================================================


always@(posedge FPGA_CLK1_50)
begin
	clk_25mhz<=~clk_25mhz;
end


always@(posedge clk_25mhz)
begin
	clk_12mhz<=~clk_12mhz;
end


ejem_mux multiplexor
(
	.sel(SW[1:0]) ,	// input [1:0] sel_sig
	.out() 	// output [7:0] out_sig
);

romcita romcita_inst
(
	.sel(SW[3:0]) ,	// input [3:0] sel_sig
	.data(salida_rom_jesus[31:0]) 	// output [31:0] data_sig
);

div_freq div_freq_inst
(
	.clk(FPGA_CLK1_50) ,	// input  clk_sig
	.in(salida_rom_jesus[31:0]) ,	// input [31:0] in_sig
	.div(clk_div_freq) 	// output  div_sig
);


contador contador_inst
(
	.clk(clk_div_freq) ,	// input  clk_sig
	.reset(KEY[0]) ,	// input  reset_sig
	.conteo(LED[7:0]) 	// output [7:0] conteo_sig
);


syncro syncro_inst
(
	.async() ,	// input  async_sig
	.clock() ,	// input  clock_sig
	.sync() 	// output  sync_sig
);


endmodule
