
Practica_nios_2.elf:     file format elf32-littlenios2
Practica_nios_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0004022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00010944 memsz 0x00010944 flags r-x
    LOAD off    0x00011964 vaddr 0x00050964 paddr 0x00052514 align 2**12
         filesz 0x00001bb0 memsz 0x00001bb0 flags rw-
    LOAD off    0x000140c4 vaddr 0x000540c4 paddr 0x000540c4 align 2**12
         filesz 0x00000000 memsz 0x00000338 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000103f0  0004022c  0004022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000348  0005061c  0005061c  0001161c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bb0  00050964  00052514  00011964  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000338  000540c4  000540c4  000140c4  2**2
                  ALLOC, SMALL_DATA
  6 .RAM_jesus    00000000  000543fc  000543fc  00013514  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013514  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000df0  00000000  00000000  00013538  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002508f  00000000  00000000  00014328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009821  00000000  00000000  000393b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b803  00000000  00000000  00042bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002350  00000000  00000000  0004e3dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003987  00000000  00000000  0005072c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016ea9  00000000  00000000  000540b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006af5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000013c0  00000000  00000000  0006afa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006f765  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006f768  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006f76b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006f76c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006f76d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0006f776  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0006f77f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  0006f788  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002f  00000000  00000000  0006f795  2**0
                  CONTENTS, READONLY
 26 .jdi          00003b78  00000000  00000000  0006f7c4  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00065f6b  00000000  00000000  0007333c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
0004022c l    d  .text	00000000 .text
0005061c l    d  .rodata	00000000 .rodata
00050964 l    d  .rwdata	00000000 .rwdata
000540c4 l    d  .bss	00000000 .bss
000543fc l    d  .RAM_jesus	00000000 .RAM_jesus
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Practica_nios_2_bsp//obj/HAL/src/crt0.o
00040264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00040830 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000506a6 l     O .rodata	00000010 zeroes.4181
000506b6 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00042e1c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000449c4 l     F .text	00000008 __fp_lock
000449cc l     F .text	00000008 __fp_unlock
000449e0 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00050964 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00050da8 l     O .rwdata	00000020 lc_ctype_charset
00050d88 l     O .rwdata	00000020 lc_message_charset
00050dc8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000506e8 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00047f10 l     F .text	000000fc __sprint_r.part.0
0005081c l     O .rodata	00000010 blanks.4125
0005080c l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0004d31c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004d444 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004d470 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004d578 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004d674 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004d758 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004d93c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00052504 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0004dbf0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004dd40 l     F .text	00000038 alt_dev_reg
000513b0 l     O .rwdata	00001060 jtag_uart
00052410 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004e050 l     F .text	00000204 altera_avalon_jtag_uart_irq
0004e254 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004e874 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0004eb28 l     F .text	00000098 altera_avalon_uart_irq
0004ebc0 l     F .text	000000e0 altera_avalon_uart_rxirq
0004eca0 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0004ee38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0004f064 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004f514 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004f9ac l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004fb04 l     F .text	00000050 alt_get_errno
0004fb54 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000540f8 g     O .bss	00000004 alt_instruction_exception_handler
00047550 g     F .text	00000074 _mprec_log10
0004763c g     F .text	0000008c __any_on
0004993c g     F .text	00000054 _isatty_r
000506f4 g     O .rodata	00000028 __mprec_tinytens
0004d884 g     F .text	00000078 alt_main
000409ec g     F .text	000000b8 _puts_r
000542fc g     O .bss	00000100 alt_irq
00049990 g     F .text	0000005c _lseek_r
00052514 g       *ABS*	00000000 __flash_rwdata_start
0004bd3c g     F .text	00000084 .hidden __eqdf2
000543fc g       *ABS*	00000000 __alt_heap_start
000409b0 g     F .text	0000003c printf
00049bb8 g     F .text	0000009c _wcrtomb_r
00047e08 g     F .text	0000005c __sseek
00044d28 g     F .text	00000010 __sinit
00049a48 g     F .text	00000154 __swbuf_r
000457a0 g     F .text	0000007c _setlocale_r
00044b80 g     F .text	00000078 __sfmoreglue
0004d91c g     F .text	00000020 __malloc_unlock
00046400 g     F .text	0000015c memmove
00044d10 g     F .text	00000018 _cleanup
00046680 g     F .text	000000a8 _Balloc
0004bdc0 g     F .text	000000e0 .hidden __gtdf2
0004ff44 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
000498e4 g     F .text	00000058 _fstat_r
000540dc g     O .bss	00000004 errno
00047d84 g     F .text	00000008 __seofread
000540e4 g     O .bss	00000004 alt_argv
0005a4d4 g       *ABS*	00000000 _gp
0004dbc0 g     F .text	00000030 usleep
00051230 g     O .rwdata	00000180 alt_fd_list
0004ff64 g     F .text	00000090 alt_find_dev
000462c8 g     F .text	00000138 memcpy
000449d4 g     F .text	0000000c _cleanup_r
0004d144 g     F .text	000000d0 .hidden __floatsidf
0004fa8c g     F .text	00000078 alt_io_redirect
0004bea0 g     F .text	000000e0 .hidden __ltdf2
0005061c g       *ABS*	00000000 __DTOR_END__
00040aa4 g     F .text	00000014 puts
000501dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00047c68 g     F .text	00000074 __fpclassifyd
000474ac g     F .text	000000a4 __ratio
00049448 g     F .text	00000024 __vfiprintf_internal
0004e450 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00040984 g     F .text	0000002c _printf_r
0004094c g     F .text	00000008 .hidden __udivsi3
0004d5c8 g     F .text	000000ac isatty
00050744 g     O .rodata	000000c8 __mprec_tens
0004581c g     F .text	0000000c __locale_charset
000540d8 g     O .bss	00000004 __malloc_top_pad
000524dc g     O .rwdata	00000004 __mb_cur_max
0004584c g     F .text	0000000c _localeconv_r
00046aa8 g     F .text	0000003c __i2b
0004518c g     F .text	000004a4 __sfvwrite_r
00047cdc g     F .text	00000054 _sbrk_r
000499ec g     F .text	0000005c _read_r
000524fc g     O .rwdata	00000004 alt_max_fd
000495f4 g     F .text	00000100 _fclose_r
00044994 g     F .text	00000030 fflush
000540d4 g     O .bss	00000004 __malloc_max_sbrked_mem
0004ab20 g     F .text	0000089c .hidden __adddf3
00047254 g     F .text	0000011c __b2d
0004a504 g     F .text	0000061c .hidden __umoddi3
0004d7a8 g     F .text	000000dc lseek
000524d4 g     O .rwdata	00000004 _global_impure_ptr
000476c8 g     F .text	000005a0 _realloc_r
000543fc g       *ABS*	00000000 __bss_end
0004f8bc g     F .text	000000f0 alt_iic_isr_register
0004fe40 g     F .text	00000104 alt_tick
00049ec4 g     F .text	00000640 .hidden __udivdi3
00049708 g     F .text	00000184 _fputwc_r
0005071c g     O .rodata	00000028 __mprec_bigtens
0004688c g     F .text	00000104 __s2b
0004d214 g     F .text	000000a4 .hidden __floatunsidf
00046ffc g     F .text	00000060 __mcmp
0004ea80 g     F .text	000000a8 altera_avalon_uart_init
00044d48 g     F .text	00000018 __fp_lock_all
0004f870 g     F .text	0000004c alt_ic_irq_enabled
0004fda8 g     F .text	00000098 alt_alarm_stop
000540ec g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d0 alt_irq_handler
00051208 g     O .rwdata	00000028 alt_dev_null
0004f4f8 g     F .text	0000001c alt_dcache_flush_all
00046990 g     F .text	00000068 __hi0bits
0004d0bc g     F .text	00000088 .hidden __fixdfsi
00052514 g       *ABS*	00000000 __ram_rwdata_end
000524f4 g     O .rwdata	00000008 alt_dev_list
0004dc40 g     F .text	00000100 write
00050964 g       *ABS*	00000000 __ram_rodata_end
0004d4c0 g     F .text	000000b8 fstat
0004bea0 g     F .text	000000e0 .hidden __ledf2
00046d74 g     F .text	00000140 __pow5mult
00048024 g     F .text	00001424 ___vfiprintf_internal_r
000540cc g     O .bss	00000004 __nlocale_changed
00040954 g     F .text	00000008 .hidden __umodsi3
000543fc g       *ABS*	00000000 end
0004f0b4 g     F .text	000001ac altera_avalon_uart_write
0004df8c g     F .text	000000c4 altera_avalon_jtag_uart_init
000401cc g     F .exceptions	00000060 alt_instruction_exception_entry
0005061c g       *ABS*	00000000 __CTOR_LIST__
00075b60 g       *ABS*	00000000 __alt_stack_pointer
0004e8e8 g     F .text	00000088 alt_avalon_timer_sc_init
0004e9d0 g     F .text	00000060 altera_avalon_uart_write_fd
0004d2b8 g     F .text	00000064 .hidden __clzsi2
0004ea30 g     F .text	00000050 altera_avalon_uart_close_fd
0004e65c g     F .text	00000218 altera_avalon_jtag_uart_write
00044d38 g     F .text	00000004 __sfp_lock_acquire
000461e0 g     F .text	000000e8 memchr
00040bcc g     F .text	000020fc ___vfprintf_internal_r
00044e9c g     F .text	000002f0 _free_r
00045828 g     F .text	00000010 __locale_mb_cur_max
00050454 g     F .text	00000194 __call_exitprocs
000540c8 g     O .bss	00000004 __mlocale_changed
000524e0 g     O .rwdata	00000004 __malloc_sbrk_base
0004022c g     F .text	0000003c _start
000540f0 g     O .bss	00000004 _alt_tick_rate
00040ad0 g     F .text	00000064 rand
00046eb4 g     F .text	00000148 __lshift
000540f4 g     O .bss	00000004 _alt_nticks
0004d98c g     F .text	00000104 read
0004ddac g     F .text	0000007c alt_sys_init
00050340 g     F .text	00000114 __register_exitproc
00046ae4 g     F .text	00000290 __multiply
0004e2fc g     F .text	00000068 altera_avalon_jtag_uart_close
0004095c g     F .text	00000028 .hidden __mulsi3
00050964 g       *ABS*	00000000 __ram_rwdata_start
0005061c g       *ABS*	00000000 __ram_rodata_start
000540fc g     O .bss	00000028 __malloc_current_mallinfo
00047370 g     F .text	0000013c __d2b
0004de28 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00050108 g     F .text	000000d4 alt_get_fd
0004f3a0 g     F .text	00000158 alt_busy_sleep
000494c8 g     F .text	00000054 _close_r
000502c4 g     F .text	0000007c memcmp
0004dee8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000543fc g       *ABS*	00000000 __alt_stack_base
0004df38 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00042cec g     F .text	00000130 __swsetup_r
0004b3bc g     F .text	00000980 .hidden __divdf3
00044bf8 g     F .text	00000118 __sfp
000475c4 g     F .text	00000078 __copybits
00050e00 g     O .rwdata	00000408 __malloc_av_
00044d44 g     F .text	00000004 __sinit_lock_release
0004bf80 g     F .text	0000086c .hidden __muldf3
00047d30 g     F .text	00000054 __sread
0004fff4 g     F .text	00000114 alt_find_file
0004f564 g     F .text	000000a4 alt_dev_llist_insert
0004d8fc g     F .text	00000020 __malloc_lock
0004db10 g     F .text	000000b0 sbrk
0004476c g     F .text	00000228 _fflush_r
0004951c g     F .text	000000d8 _calloc_r
000540c4 g       *ABS*	00000000 __bss_start
0004655c g     F .text	00000124 memset
00040268 g     F .text	000005c8 main
000540e8 g     O .bss	00000004 alt_envp
000540d0 g     O .bss	00000004 __malloc_max_total_mem
0004de88 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00049b9c g     F .text	0000001c __swbuf
00040ab8 g     F .text	00000018 srand
00040000 g       *ABS*	00000000 __alt_mem_RAM_jesus
00047e64 g     F .text	00000008 __sclose
00075b60 g       *ABS*	00000000 __alt_heap_limit
000496f4 g     F .text	00000014 fclose
00043044 g     F .text	00001728 _dtoa_r
00045a38 g     F .text	000007a8 _malloc_r
00049d2c g     F .text	00000030 __ascii_wctomb
00052500 g     O .rwdata	00000004 alt_errno
00045630 g     F .text	000000b8 _fwalk
0004089c g     F .text	00000054 .hidden __divsi3
00044d78 g     F .text	00000124 _malloc_trim_r
0005061c g       *ABS*	00000000 __CTOR_END__
00047e6c g     F .text	000000a4 strcmp
0005061c g       *ABS*	00000000 __flash_rodata_start
0005061c g       *ABS*	00000000 __DTOR_LIST__
0004bd3c g     F .text	00000084 .hidden __nedf2
0004dd78 g     F .text	00000034 alt_irq_init
0004da90 g     F .text	00000080 alt_release_fd
0005082c g     O .rodata	00000100 .hidden __clz_tab
000540c4 g     O .bss	00000004 _PathLocale
00050278 g     F .text	00000014 atexit
0004946c g     F .text	0000005c _write_r
00045858 g     F .text	0000001c setlocale
000524d8 g     O .rwdata	00000004 _impure_ptr
000540e0 g     O .bss	00000004 alt_argc
0004f664 g     F .text	0000005c _do_dtors
00045844 g     F .text	00000008 __locale_cjk_lang
00040020 g       .exceptions	00000000 alt_irq_entry
000471f4 g     F .text	00000060 __ulp
00044d60 g     F .text	00000018 __fp_unlock_all
000524ec g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00045874 g     F .text	0000000c localeconv
0004f6dc g     F .text	00000050 alt_ic_isr_register
00052514 g       *ABS*	00000000 _edata
0004e970 g     F .text	00000060 altera_avalon_uart_read_fd
000543fc g       *ABS*	00000000 _end
0004022c g       *ABS*	00000000 __ram_exceptions_end
0004e364 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0004f7cc g     F .text	000000a4 alt_ic_irq_disable
00047d8c g     F .text	0000007c __swrite
000524e4 g     O .rwdata	00000004 __malloc_trim_threshold
00045838 g     F .text	0000000c __locale_msgcharset
0005028c g     F .text	00000038 exit
000456e8 g     F .text	000000b8 _fwalk_reent
0004705c g     F .text	00000198 __mdiff
000408f0 g     F .text	0000005c .hidden __modsi3
00075b60 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00044d3c g     F .text	00000004 __sfp_lock_release
0004ede4 g     F .text	00000054 altera_avalon_uart_close
000505e8 g     F .text	00000034 _exit
0004f260 g     F .text	00000140 alt_alarm_start
00049db8 g     F .text	0000010c .hidden __muldi3
00045880 g     F .text	000001b8 __smakebuf_r
00040b34 g     F .text	00000098 strlen
0004fc48 g     F .text	00000160 open
0004bdc0 g     F .text	000000e0 .hidden __gedf2
000524e8 g     O .rwdata	00000004 __wctomb
0004800c g     F .text	00000018 __sprint_r
0004f6c0 g     F .text	0000001c alt_icache_flush_all
00054124 g     O .bss	000001d5 sr
00052508 g     O .rwdata	00000004 alt_priority_mask
0004f72c g     F .text	000000a0 alt_ic_irq_enable
00042cc8 g     F .text	00000024 __vfprintf_internal
0004ee88 g     F .text	000001dc altera_avalon_uart_read
00049d5c g     F .text	0000005c _wctomb_r
0004c7ec g     F .text	000008d0 .hidden __subdf3
000469f8 g     F .text	000000b0 __lo0bits
0005250c g     O .rwdata	00000008 alt_alarm_list
0004f608 g     F .text	0000005c _do_ctors
00049c54 g     F .text	000000d8 wcrtomb
0004d36c g     F .text	000000d8 close
0004d6d8 g     F .text	00000080 alt_load
0004988c g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
00044d40 g     F .text	00000004 __sinit_lock_acquire
00046750 g     F .text	0000013c __multadd
00046728 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408b14 	ori	at,at,556
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401cc0 	call	401cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	1090bf04 	addi	r2,r2,17148
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	1090bf04 	addi	r2,r2,17148
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffca5cc>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffca5c0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	e037883a 	mov	sp,fp
   401bc:	dfc00117 	ldw	ra,4(sp)
   401c0:	df000017 	ldw	fp,0(sp)
   401c4:	dec00204 	addi	sp,sp,8
   401c8:	f800283a 	ret

000401cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401cc:	defffb04 	addi	sp,sp,-20
   401d0:	dfc00415 	stw	ra,16(sp)
   401d4:	df000315 	stw	fp,12(sp)
   401d8:	df000304 	addi	fp,sp,12
   401dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e0:	00bfffc4 	movi	r2,-1
   401e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401ec:	d0a70917 	ldw	r2,-25564(gp)
   401f0:	10000726 	beq	r2,zero,40210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f4:	d0a70917 	ldw	r2,-25564(gp)
   401f8:	e0fffd17 	ldw	r3,-12(fp)
   401fc:	1809883a 	mov	r4,r3
   40200:	e17fff17 	ldw	r5,-4(fp)
   40204:	e1bffe17 	ldw	r6,-8(fp)
   40208:	103ee83a 	callr	r2
   4020c:	00000206 	br	40218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40214:	0005883a 	mov	r2,zero
}
   40218:	e037883a 	mov	sp,fp
   4021c:	dfc00117 	ldw	ra,4(sp)
   40220:	df000017 	ldw	fp,0(sp)
   40224:	dec00204 	addi	sp,sp,8
   40228:	f800283a 	ret

Disassembly of section .text:

0004022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   4022c:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40230:	ded6d814 	ori	sp,sp,23392
    movhi gp, %hi(_gp)
   40234:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40238:	d6a93514 	ori	gp,gp,42196
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   4023c:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40240:	10903114 	ori	r2,r2,16580

    movhi r3, %hi(__bss_end)
   40244:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   40248:	18d0ff14 	ori	r3,r3,17404

    beq r2, r3, 1f
   4024c:	10c00326 	beq	r2,r3,4025c <_start+0x30>

0:
    stw zero, (r2)
   40250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40258:	10fffd36 	bltu	r2,r3,40250 <__alt_data_end+0xfffca6f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   4025c:	004d6d80 	call	4d6d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40260:	004d8840 	call	4d884 <alt_main>

00040264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40264:	003fff06 	br	40264 <__alt_data_end+0xfffca704>

00040268 <main>:

unsigned char sr[469];
#define TIME 3

int main()
{//                 Mi  Si  Sol Do  La  Mi
   40268:	defffe04 	addi	sp,sp,-8
   4026c:	dfc00115 	stw	ra,4(sp)
   40270:	df000015 	stw	fp,0(sp)
   40274:	d839883a 	mov	fp,sp
   40278:	023ffff4 	movhi	r8,65535
   4027c:	42214a04 	addi	r8,r8,-31448
   40280:	da37883a 	add	sp,sp,r8
	int p_notas[6]={143,156,197,263,351,469};
   40284:	008023c4 	movi	r2,143
   40288:	00fffff4 	movhi	r3,65535
   4028c:	18e14f04 	addi	r3,r3,-31428
   40290:	1f07883a 	add	r3,r3,fp
   40294:	18800015 	stw	r2,0(r3)
   40298:	00802704 	movi	r2,156
   4029c:	013ffff4 	movhi	r4,65535
   402a0:	21215004 	addi	r4,r4,-31424
   402a4:	2709883a 	add	r4,r4,fp
   402a8:	20800015 	stw	r2,0(r4)
   402ac:	00803144 	movi	r2,197
   402b0:	00fffff4 	movhi	r3,65535
   402b4:	18e15104 	addi	r3,r3,-31420
   402b8:	1f07883a 	add	r3,r3,fp
   402bc:	18800015 	stw	r2,0(r3)
   402c0:	008041c4 	movi	r2,263
   402c4:	013ffff4 	movhi	r4,65535
   402c8:	21215204 	addi	r4,r4,-31416
   402cc:	2709883a 	add	r4,r4,fp
   402d0:	20800015 	stw	r2,0(r4)
   402d4:	008057c4 	movi	r2,351
   402d8:	00fffff4 	movhi	r3,65535
   402dc:	18e15304 	addi	r3,r3,-31412
   402e0:	1f07883a 	add	r3,r3,fp
   402e4:	18800015 	stw	r2,0(r3)
   402e8:	00807544 	movi	r2,469
   402ec:	013ffff4 	movhi	r4,65535
   402f0:	21215404 	addi	r4,r4,-31408
   402f4:	2709883a 	add	r4,r4,fp
   402f8:	20800015 	stw	r2,0(r4)
	int Fs = 16000;
   402fc:	008fa004 	movi	r2,16000
   40300:	00fffff4 	movhi	r3,65535
   40304:	18e14d04 	addi	r3,r3,-31436
   40308:	1f07883a 	add	r3,r3,fp
   4030c:	18800015 	stw	r2,0(r3)
	int ptrout = 2;
   40310:	00800084 	movi	r2,2
   40314:	013ffff4 	movhi	r4,65535
   40318:	21214a04 	addi	r4,r4,-31448
   4031c:	2709883a 	add	r4,r4,fp
   40320:	20800015 	stw	r2,0(r4)
	int ptrin = 1;
   40324:	00800044 	movi	r2,1
   40328:	00fffff4 	movhi	r3,65535
   4032c:	18e14b04 	addi	r3,r3,-31444
   40330:	1f07883a 	add	r3,r3,fp
   40334:	18800015 	stw	r2,0(r3)
	short sr[469];

	short out[16000*TIME];
	unsigned char sw_val=0;
   40338:	013ffff4 	movhi	r4,65535
   4033c:	21214e04 	addi	r4,r4,-31432
   40340:	2709883a 	add	r4,r4,fp
   40344:	20000005 	stb	zero,0(r4)
	int i=0;
   40348:	00bffff4 	movhi	r2,65535
   4034c:	10a14c04 	addi	r2,r2,-31440
   40350:	1705883a 	add	r2,r2,fp
   40354:	10000015 	stw	zero,0(r2)
	char sw3=0;
   40358:	00fffff4 	movhi	r3,65535
   4035c:	18e14e44 	addi	r3,r3,-31431
   40360:	1f07883a 	add	r3,r3,fp
   40364:	18000005 	stb	zero,0(r3)
	printf("Hello from Nios II!\n");
   40368:	01000174 	movhi	r4,5
   4036c:	21018704 	addi	r4,r4,1564
   40370:	0040aa40 	call	40aa4 <puts>
	while(1)
	{
		sw_val=IORD(SW_BASE,0);
   40374:	00800234 	movhi	r2,8
   40378:	10841804 	addi	r2,r2,4192
   4037c:	10800037 	ldwio	r2,0(r2)
   40380:	013ffff4 	movhi	r4,65535
   40384:	21214e04 	addi	r4,r4,-31432
   40388:	2709883a 	add	r4,r4,fp
   4038c:	20800005 	stb	r2,0(r4)
		sw3=(sw_val>>3) &1;
   40390:	00fffff4 	movhi	r3,65535
   40394:	18e14e04 	addi	r3,r3,-31432
   40398:	1f07883a 	add	r3,r3,fp
   4039c:	18800003 	ldbu	r2,0(r3)
   403a0:	1004d0fa 	srli	r2,r2,3
   403a4:	1080004c 	andi	r2,r2,1
   403a8:	013ffff4 	movhi	r4,65535
   403ac:	21214e44 	addi	r4,r4,-31431
   403b0:	2709883a 	add	r4,r4,fp
   403b4:	20800005 	stb	r2,0(r4)
		sw_val=sw_val & 7;
   403b8:	00fffff4 	movhi	r3,65535
   403bc:	18e14e04 	addi	r3,r3,-31432
   403c0:	1f07883a 	add	r3,r3,fp
   403c4:	18800003 	ldbu	r2,0(r3)
   403c8:	108001cc 	andi	r2,r2,7
   403cc:	013ffff4 	movhi	r4,65535
   403d0:	21214e04 	addi	r4,r4,-31432
   403d4:	2709883a 	add	r4,r4,fp
   403d8:	20800005 	stb	r2,0(r4)
		sw_val=(sw_val%6);
   403dc:	00fffff4 	movhi	r3,65535
   403e0:	18e14e04 	addi	r3,r3,-31432
   403e4:	1f07883a 	add	r3,r3,fp
   403e8:	18800003 	ldbu	r2,0(r3)
   403ec:	1009883a 	mov	r4,r2
   403f0:	01400184 	movi	r5,6
   403f4:	00409540 	call	40954 <__umodsi3>
   403f8:	013ffff4 	movhi	r4,65535
   403fc:	21214e04 	addi	r4,r4,-31432
   40400:	2709883a 	add	r4,r4,fp
   40404:	20800005 	stb	r2,0(r4)

		if(sw3){
   40408:	00fffff4 	movhi	r3,65535
   4040c:	18e14e44 	addi	r3,r3,-31431
   40410:	1f07883a 	add	r3,r3,fp
   40414:	18800007 	ldb	r2,0(r3)
   40418:	10010426 	beq	r2,zero,4082c <main+0x5c4>
			// Inicializacion Vector sr
			printf("init\n");
   4041c:	01000174 	movhi	r4,5
   40420:	21018c04 	addi	r4,r4,1584
   40424:	0040aa40 	call	40aa4 <puts>
			for(i=0;i<p_notas[sw_val];i++)
   40428:	013ffff4 	movhi	r4,65535
   4042c:	21214c04 	addi	r4,r4,-31440
   40430:	2709883a 	add	r4,r4,fp
   40434:	20000015 	stw	zero,0(r4)
   40438:	00001906 	br	404a0 <main+0x238>
			{

				sr[i]=rand()*255;
   4043c:	0040ad00 	call	40ad0 <rand>
   40440:	1009883a 	mov	r4,r2
   40444:	01403fc4 	movi	r5,255
   40448:	004095c0 	call	4095c <__mulsi3>
   4044c:	1007883a 	mov	r3,r2
   40450:	013ffff4 	movhi	r4,65535
   40454:	21214c04 	addi	r4,r4,-31440
   40458:	2709883a 	add	r4,r4,fp
   4045c:	20800017 	ldw	r2,0(r4)
   40460:	1085883a 	add	r2,r2,r2
   40464:	013ffff4 	movhi	r4,65535
   40468:	21214a04 	addi	r4,r4,-31448
   4046c:	2709883a 	add	r4,r4,fp
   40470:	2085883a 	add	r2,r4,r2
   40474:	10800b04 	addi	r2,r2,44
   40478:	10c0000d 	sth	r3,0(r2)
		sw_val=(sw_val%6);

		if(sw3){
			// Inicializacion Vector sr
			printf("init\n");
			for(i=0;i<p_notas[sw_val];i++)
   4047c:	00fffff4 	movhi	r3,65535
   40480:	18e14c04 	addi	r3,r3,-31440
   40484:	1f07883a 	add	r3,r3,fp
   40488:	18800017 	ldw	r2,0(r3)
   4048c:	10800044 	addi	r2,r2,1
   40490:	013ffff4 	movhi	r4,65535
   40494:	21214c04 	addi	r4,r4,-31440
   40498:	2709883a 	add	r4,r4,fp
   4049c:	20800015 	stw	r2,0(r4)
   404a0:	00fffff4 	movhi	r3,65535
   404a4:	18e14e04 	addi	r3,r3,-31432
   404a8:	1f07883a 	add	r3,r3,fp
   404ac:	18800003 	ldbu	r2,0(r3)
   404b0:	1085883a 	add	r2,r2,r2
   404b4:	1085883a 	add	r2,r2,r2
   404b8:	013ffff4 	movhi	r4,65535
   404bc:	21214a04 	addi	r4,r4,-31448
   404c0:	2709883a 	add	r4,r4,fp
   404c4:	2085883a 	add	r2,r4,r2
   404c8:	10800504 	addi	r2,r2,20
   404cc:	10800017 	ldw	r2,0(r2)
   404d0:	013ffff4 	movhi	r4,65535
   404d4:	21214c04 	addi	r4,r4,-31440
   404d8:	2709883a 	add	r4,r4,fp
   404dc:	20c00017 	ldw	r3,0(r4)
   404e0:	18bfd616 	blt	r3,r2,4043c <__alt_data_end+0xfffca8dc>
			{

				sr[i]=rand()*255;
			}
			printf("generando muestras para %d\n",sw_val);
   404e4:	00fffff4 	movhi	r3,65535
   404e8:	18e14e04 	addi	r3,r3,-31432
   404ec:	1f07883a 	add	r3,r3,fp
   404f0:	18800003 	ldbu	r2,0(r3)
   404f4:	01000174 	movhi	r4,5
   404f8:	21018e04 	addi	r4,r4,1592
   404fc:	100b883a 	mov	r5,r2
   40500:	00409b00 	call	409b0 <printf>
			for (i=0;i<Fs*TIME;i++)
   40504:	013ffff4 	movhi	r4,65535
   40508:	21214c04 	addi	r4,r4,-31440
   4050c:	2709883a 	add	r4,r4,fp
   40510:	20000015 	stw	zero,0(r4)
   40514:	00008906 	br	4073c <main+0x4d4>
			{

				out[i]=sr[ptrin];
   40518:	00fffff4 	movhi	r3,65535
   4051c:	18e14b04 	addi	r3,r3,-31444
   40520:	1f07883a 	add	r3,r3,fp
   40524:	18800017 	ldw	r2,0(r3)
   40528:	1085883a 	add	r2,r2,r2
   4052c:	013ffff4 	movhi	r4,65535
   40530:	21214a04 	addi	r4,r4,-31448
   40534:	2709883a 	add	r4,r4,fp
   40538:	2085883a 	add	r2,r4,r2
   4053c:	10800b04 	addi	r2,r2,44
   40540:	10c0000b 	ldhu	r3,0(r2)
   40544:	013ffff4 	movhi	r4,65535
   40548:	21214c04 	addi	r4,r4,-31440
   4054c:	2709883a 	add	r4,r4,fp
   40550:	20800017 	ldw	r2,0(r4)
   40554:	1085883a 	add	r2,r2,r2
   40558:	013ffff4 	movhi	r4,65535
   4055c:	21214a04 	addi	r4,r4,-31448
   40560:	2709883a 	add	r4,r4,fp
   40564:	2085883a 	add	r2,r4,r2
   40568:	1080f584 	addi	r2,r2,982
   4056c:	10c0000d 	sth	r3,0(r2)
				sr[ptrin] = (sr[ptrin]+sr[ptrout])/2;
   40570:	00fffff4 	movhi	r3,65535
   40574:	18e14b04 	addi	r3,r3,-31444
   40578:	1f07883a 	add	r3,r3,fp
   4057c:	18800017 	ldw	r2,0(r3)
   40580:	1085883a 	add	r2,r2,r2
   40584:	013ffff4 	movhi	r4,65535
   40588:	21214a04 	addi	r4,r4,-31448
   4058c:	2709883a 	add	r4,r4,fp
   40590:	2085883a 	add	r2,r4,r2
   40594:	10800b04 	addi	r2,r2,44
   40598:	1080000b 	ldhu	r2,0(r2)
   4059c:	10ffffcc 	andi	r3,r2,65535
   405a0:	18e0001c 	xori	r3,r3,32768
   405a4:	18e00004 	addi	r3,r3,-32768
   405a8:	013ffff4 	movhi	r4,65535
   405ac:	21214a04 	addi	r4,r4,-31448
   405b0:	2709883a 	add	r4,r4,fp
   405b4:	20800017 	ldw	r2,0(r4)
   405b8:	1085883a 	add	r2,r2,r2
   405bc:	013ffff4 	movhi	r4,65535
   405c0:	21214a04 	addi	r4,r4,-31448
   405c4:	2709883a 	add	r4,r4,fp
   405c8:	2085883a 	add	r2,r4,r2
   405cc:	10800b04 	addi	r2,r2,44
   405d0:	1080000b 	ldhu	r2,0(r2)
   405d4:	10bfffcc 	andi	r2,r2,65535
   405d8:	10a0001c 	xori	r2,r2,32768
   405dc:	10a00004 	addi	r2,r2,-32768
   405e0:	1885883a 	add	r2,r3,r2
   405e4:	1006d7fa 	srli	r3,r2,31
   405e8:	1885883a 	add	r2,r3,r2
   405ec:	1005d07a 	srai	r2,r2,1
   405f0:	1007883a 	mov	r3,r2
   405f4:	013ffff4 	movhi	r4,65535
   405f8:	21214b04 	addi	r4,r4,-31444
   405fc:	2709883a 	add	r4,r4,fp
   40600:	20800017 	ldw	r2,0(r4)
   40604:	1085883a 	add	r2,r2,r2
   40608:	013ffff4 	movhi	r4,65535
   4060c:	21214a04 	addi	r4,r4,-31448
   40610:	2709883a 	add	r4,r4,fp
   40614:	2085883a 	add	r2,r4,r2
   40618:	10800b04 	addi	r2,r2,44
   4061c:	10c0000d 	sth	r3,0(r2)
				if (ptrin==p_notas[sw_val])
   40620:	00fffff4 	movhi	r3,65535
   40624:	18e14e04 	addi	r3,r3,-31432
   40628:	1f07883a 	add	r3,r3,fp
   4062c:	18800003 	ldbu	r2,0(r3)
   40630:	1085883a 	add	r2,r2,r2
   40634:	1085883a 	add	r2,r2,r2
   40638:	013ffff4 	movhi	r4,65535
   4063c:	21214a04 	addi	r4,r4,-31448
   40640:	2709883a 	add	r4,r4,fp
   40644:	2085883a 	add	r2,r4,r2
   40648:	10800504 	addi	r2,r2,20
   4064c:	10c00017 	ldw	r3,0(r2)
   40650:	013ffff4 	movhi	r4,65535
   40654:	21214b04 	addi	r4,r4,-31444
   40658:	2709883a 	add	r4,r4,fp
   4065c:	20800017 	ldw	r2,0(r4)
   40660:	1880051e 	bne	r3,r2,40678 <main+0x410>
				{
					ptrin=0;
   40664:	00bffff4 	movhi	r2,65535
   40668:	10a14b04 	addi	r2,r2,-31444
   4066c:	1705883a 	add	r2,r2,fp
   40670:	10000015 	stw	zero,0(r2)
   40674:	00000906 	br	4069c <main+0x434>
				}
				else
				{
					ptrin=ptrin+1;
   40678:	00fffff4 	movhi	r3,65535
   4067c:	18e14b04 	addi	r3,r3,-31444
   40680:	1f07883a 	add	r3,r3,fp
   40684:	18800017 	ldw	r2,0(r3)
   40688:	10800044 	addi	r2,r2,1
   4068c:	013ffff4 	movhi	r4,65535
   40690:	21214b04 	addi	r4,r4,-31444
   40694:	2709883a 	add	r4,r4,fp
   40698:	20800015 	stw	r2,0(r4)
				}
				if (ptrout==p_notas[sw_val])
   4069c:	00fffff4 	movhi	r3,65535
   406a0:	18e14e04 	addi	r3,r3,-31432
   406a4:	1f07883a 	add	r3,r3,fp
   406a8:	18800003 	ldbu	r2,0(r3)
   406ac:	1085883a 	add	r2,r2,r2
   406b0:	1085883a 	add	r2,r2,r2
   406b4:	013ffff4 	movhi	r4,65535
   406b8:	21214a04 	addi	r4,r4,-31448
   406bc:	2709883a 	add	r4,r4,fp
   406c0:	2085883a 	add	r2,r4,r2
   406c4:	10800504 	addi	r2,r2,20
   406c8:	10c00017 	ldw	r3,0(r2)
   406cc:	013ffff4 	movhi	r4,65535
   406d0:	21214a04 	addi	r4,r4,-31448
   406d4:	2709883a 	add	r4,r4,fp
   406d8:	20800017 	ldw	r2,0(r4)
   406dc:	1880051e 	bne	r3,r2,406f4 <main+0x48c>
				{
					ptrout=0;
   406e0:	00bffff4 	movhi	r2,65535
   406e4:	10a14a04 	addi	r2,r2,-31448
   406e8:	1705883a 	add	r2,r2,fp
   406ec:	10000015 	stw	zero,0(r2)
   406f0:	00000906 	br	40718 <main+0x4b0>
				}
				else
					{
					ptrout=ptrout+1;
   406f4:	00fffff4 	movhi	r3,65535
   406f8:	18e14a04 	addi	r3,r3,-31448
   406fc:	1f07883a 	add	r3,r3,fp
   40700:	18800017 	ldw	r2,0(r3)
   40704:	10800044 	addi	r2,r2,1
   40708:	013ffff4 	movhi	r4,65535
   4070c:	21214a04 	addi	r4,r4,-31448
   40710:	2709883a 	add	r4,r4,fp
   40714:	20800015 	stw	r2,0(r4)
			{

				sr[i]=rand()*255;
			}
			printf("generando muestras para %d\n",sw_val);
			for (i=0;i<Fs*TIME;i++)
   40718:	00fffff4 	movhi	r3,65535
   4071c:	18e14c04 	addi	r3,r3,-31440
   40720:	1f07883a 	add	r3,r3,fp
   40724:	18800017 	ldw	r2,0(r3)
   40728:	10800044 	addi	r2,r2,1
   4072c:	013ffff4 	movhi	r4,65535
   40730:	21214c04 	addi	r4,r4,-31440
   40734:	2709883a 	add	r4,r4,fp
   40738:	20800015 	stw	r2,0(r4)
   4073c:	00bffff4 	movhi	r2,65535
   40740:	10a14d04 	addi	r2,r2,-31436
   40744:	1705883a 	add	r2,r2,fp
   40748:	10c00017 	ldw	r3,0(r2)
   4074c:	1805883a 	mov	r2,r3
   40750:	1085883a 	add	r2,r2,r2
   40754:	10c5883a 	add	r2,r2,r3
   40758:	013ffff4 	movhi	r4,65535
   4075c:	21214c04 	addi	r4,r4,-31440
   40760:	2709883a 	add	r4,r4,fp
   40764:	20c00017 	ldw	r3,0(r4)
   40768:	18bf6b16 	blt	r3,r2,40518 <__alt_data_end+0xfffca9b8>
					ptrout=ptrout+1;
					}
				//printf("%d,",sr[ptrin]);

			}
			 printf("escuchando\n");
   4076c:	01000174 	movhi	r4,5
   40770:	21019504 	addi	r4,r4,1620
   40774:	0040aa40 	call	40aa4 <puts>
			 int delay;
			 for(i=0; i<Fs*TIME;i++){
   40778:	00bffff4 	movhi	r2,65535
   4077c:	10a14c04 	addi	r2,r2,-31440
   40780:	1705883a 	add	r2,r2,fp
   40784:	10000015 	stw	zero,0(r2)
   40788:	00001c06 	br	407fc <main+0x594>
				 IOWR(DIV_FREQ_BASE,0, out[i]);
   4078c:	00fffff4 	movhi	r3,65535
   40790:	18e14c04 	addi	r3,r3,-31440
   40794:	1f07883a 	add	r3,r3,fp
   40798:	18800017 	ldw	r2,0(r3)
   4079c:	1085883a 	add	r2,r2,r2
   407a0:	013ffff4 	movhi	r4,65535
   407a4:	21214a04 	addi	r4,r4,-31448
   407a8:	2709883a 	add	r4,r4,fp
   407ac:	2085883a 	add	r2,r4,r2
   407b0:	1080f584 	addi	r2,r2,982
   407b4:	1080000b 	ldhu	r2,0(r2)
   407b8:	10ffffcc 	andi	r3,r2,65535
   407bc:	18e0001c 	xori	r3,r3,32768
   407c0:	18e00004 	addi	r3,r3,-32768
   407c4:	00800234 	movhi	r2,8
   407c8:	10841004 	addi	r2,r2,4160
   407cc:	10c00035 	stwio	r3,0(r2)
				 usleep(10);
   407d0:	01000284 	movi	r4,10
   407d4:	004dbc00 	call	4dbc0 <usleep>
				//printf("%d,",sr[ptrin]);

			}
			 printf("escuchando\n");
			 int delay;
			 for(i=0; i<Fs*TIME;i++){
   407d8:	00fffff4 	movhi	r3,65535
   407dc:	18e14c04 	addi	r3,r3,-31440
   407e0:	1f07883a 	add	r3,r3,fp
   407e4:	18800017 	ldw	r2,0(r3)
   407e8:	10800044 	addi	r2,r2,1
   407ec:	013ffff4 	movhi	r4,65535
   407f0:	21214c04 	addi	r4,r4,-31440
   407f4:	2709883a 	add	r4,r4,fp
   407f8:	20800015 	stw	r2,0(r4)
   407fc:	00bffff4 	movhi	r2,65535
   40800:	10a14d04 	addi	r2,r2,-31436
   40804:	1705883a 	add	r2,r2,fp
   40808:	10c00017 	ldw	r3,0(r2)
   4080c:	1805883a 	mov	r2,r3
   40810:	1085883a 	add	r2,r2,r2
   40814:	10c5883a 	add	r2,r2,r3
   40818:	013ffff4 	movhi	r4,65535
   4081c:	21214c04 	addi	r4,r4,-31440
   40820:	2709883a 	add	r4,r4,fp
   40824:	20c00017 	ldw	r3,0(r4)
   40828:	18bfd816 	blt	r3,r2,4078c <__alt_data_end+0xfffcac2c>
				// for(delay=0;delay<15;delay++);
			 }
		}

	//	IOWR(DIV_FREQ_BASE,0,DIV_FREQ_val);	//	usleep(100000);
	}
   4082c:	003ed106 	br	40374 <__alt_data_end+0xfffca814>

00040830 <udivmodsi4>:
   40830:	2900182e 	bgeu	r5,r4,40894 <udivmodsi4+0x64>
   40834:	28001716 	blt	r5,zero,40894 <udivmodsi4+0x64>
   40838:	00800804 	movi	r2,32
   4083c:	00c00044 	movi	r3,1
   40840:	00000206 	br	4084c <udivmodsi4+0x1c>
   40844:	10001126 	beq	r2,zero,4088c <udivmodsi4+0x5c>
   40848:	28000516 	blt	r5,zero,40860 <udivmodsi4+0x30>
   4084c:	294b883a 	add	r5,r5,r5
   40850:	10bfffc4 	addi	r2,r2,-1
   40854:	18c7883a 	add	r3,r3,r3
   40858:	293ffa36 	bltu	r5,r4,40844 <__alt_data_end+0xfffcace4>
   4085c:	18000b26 	beq	r3,zero,4088c <udivmodsi4+0x5c>
   40860:	0005883a 	mov	r2,zero
   40864:	21400236 	bltu	r4,r5,40870 <udivmodsi4+0x40>
   40868:	2149c83a 	sub	r4,r4,r5
   4086c:	10c4b03a 	or	r2,r2,r3
   40870:	1806d07a 	srli	r3,r3,1
   40874:	280ad07a 	srli	r5,r5,1
   40878:	183ffa1e 	bne	r3,zero,40864 <__alt_data_end+0xfffcad04>
   4087c:	3000011e 	bne	r6,zero,40884 <udivmodsi4+0x54>
   40880:	f800283a 	ret
   40884:	2005883a 	mov	r2,r4
   40888:	f800283a 	ret
   4088c:	0005883a 	mov	r2,zero
   40890:	003ffa06 	br	4087c <__alt_data_end+0xfffcad1c>
   40894:	00c00044 	movi	r3,1
   40898:	003ff106 	br	40860 <__alt_data_end+0xfffcad00>

0004089c <__divsi3>:
   4089c:	defffe04 	addi	sp,sp,-8
   408a0:	dfc00115 	stw	ra,4(sp)
   408a4:	dc000015 	stw	r16,0(sp)
   408a8:	20000b16 	blt	r4,zero,408d8 <__divsi3+0x3c>
   408ac:	0021883a 	mov	r16,zero
   408b0:	28000c16 	blt	r5,zero,408e4 <__divsi3+0x48>
   408b4:	000d883a 	mov	r6,zero
   408b8:	00408300 	call	40830 <udivmodsi4>
   408bc:	0407c83a 	sub	r3,zero,r16
   408c0:	1884f03a 	xor	r2,r3,r2
   408c4:	1405883a 	add	r2,r2,r16
   408c8:	dfc00117 	ldw	ra,4(sp)
   408cc:	dc000017 	ldw	r16,0(sp)
   408d0:	dec00204 	addi	sp,sp,8
   408d4:	f800283a 	ret
   408d8:	0109c83a 	sub	r4,zero,r4
   408dc:	04000044 	movi	r16,1
   408e0:	283ff40e 	bge	r5,zero,408b4 <__alt_data_end+0xfffcad54>
   408e4:	014bc83a 	sub	r5,zero,r5
   408e8:	8400005c 	xori	r16,r16,1
   408ec:	003ff106 	br	408b4 <__alt_data_end+0xfffcad54>

000408f0 <__modsi3>:
   408f0:	defffd04 	addi	sp,sp,-12
   408f4:	dfc00215 	stw	ra,8(sp)
   408f8:	dc400115 	stw	r17,4(sp)
   408fc:	dc000015 	stw	r16,0(sp)
   40900:	20000c16 	blt	r4,zero,40934 <__modsi3+0x44>
   40904:	0023883a 	mov	r17,zero
   40908:	0021883a 	mov	r16,zero
   4090c:	28000d16 	blt	r5,zero,40944 <__modsi3+0x54>
   40910:	01800044 	movi	r6,1
   40914:	00408300 	call	40830 <udivmodsi4>
   40918:	1404f03a 	xor	r2,r2,r16
   4091c:	8885883a 	add	r2,r17,r2
   40920:	dfc00217 	ldw	ra,8(sp)
   40924:	dc400117 	ldw	r17,4(sp)
   40928:	dc000017 	ldw	r16,0(sp)
   4092c:	dec00304 	addi	sp,sp,12
   40930:	f800283a 	ret
   40934:	0109c83a 	sub	r4,zero,r4
   40938:	04400044 	movi	r17,1
   4093c:	043fffc4 	movi	r16,-1
   40940:	283ff30e 	bge	r5,zero,40910 <__alt_data_end+0xfffcadb0>
   40944:	014bc83a 	sub	r5,zero,r5
   40948:	003ff106 	br	40910 <__alt_data_end+0xfffcadb0>

0004094c <__udivsi3>:
   4094c:	000d883a 	mov	r6,zero
   40950:	00408301 	jmpi	40830 <udivmodsi4>

00040954 <__umodsi3>:
   40954:	01800044 	movi	r6,1
   40958:	00408301 	jmpi	40830 <udivmodsi4>

0004095c <__mulsi3>:
   4095c:	0005883a 	mov	r2,zero
   40960:	20000726 	beq	r4,zero,40980 <__mulsi3+0x24>
   40964:	20c0004c 	andi	r3,r4,1
   40968:	2008d07a 	srli	r4,r4,1
   4096c:	18000126 	beq	r3,zero,40974 <__mulsi3+0x18>
   40970:	1145883a 	add	r2,r2,r5
   40974:	294b883a 	add	r5,r5,r5
   40978:	203ffa1e 	bne	r4,zero,40964 <__alt_data_end+0xfffcae04>
   4097c:	f800283a 	ret
   40980:	f800283a 	ret

00040984 <_printf_r>:
   40984:	defffd04 	addi	sp,sp,-12
   40988:	dfc00015 	stw	ra,0(sp)
   4098c:	d9800115 	stw	r6,4(sp)
   40990:	d9c00215 	stw	r7,8(sp)
   40994:	280d883a 	mov	r6,r5
   40998:	21400217 	ldw	r5,8(r4)
   4099c:	d9c00104 	addi	r7,sp,4
   409a0:	0040bcc0 	call	40bcc <___vfprintf_internal_r>
   409a4:	dfc00017 	ldw	ra,0(sp)
   409a8:	dec00304 	addi	sp,sp,12
   409ac:	f800283a 	ret

000409b0 <printf>:
   409b0:	defffc04 	addi	sp,sp,-16
   409b4:	dfc00015 	stw	ra,0(sp)
   409b8:	d9400115 	stw	r5,4(sp)
   409bc:	d9800215 	stw	r6,8(sp)
   409c0:	d9c00315 	stw	r7,12(sp)
   409c4:	00800174 	movhi	r2,5
   409c8:	10893604 	addi	r2,r2,9432
   409cc:	10800017 	ldw	r2,0(r2)
   409d0:	200b883a 	mov	r5,r4
   409d4:	d9800104 	addi	r6,sp,4
   409d8:	11000217 	ldw	r4,8(r2)
   409dc:	0042cc80 	call	42cc8 <__vfprintf_internal>
   409e0:	dfc00017 	ldw	ra,0(sp)
   409e4:	dec00404 	addi	sp,sp,16
   409e8:	f800283a 	ret

000409ec <_puts_r>:
   409ec:	defff604 	addi	sp,sp,-40
   409f0:	dc000715 	stw	r16,28(sp)
   409f4:	2021883a 	mov	r16,r4
   409f8:	2809883a 	mov	r4,r5
   409fc:	dc400815 	stw	r17,32(sp)
   40a00:	dfc00915 	stw	ra,36(sp)
   40a04:	2823883a 	mov	r17,r5
   40a08:	0040b340 	call	40b34 <strlen>
   40a0c:	00c00174 	movhi	r3,5
   40a10:	18c93604 	addi	r3,r3,9432
   40a14:	18c00017 	ldw	r3,0(r3)
   40a18:	11000044 	addi	r4,r2,1
   40a1c:	d8800115 	stw	r2,4(sp)
   40a20:	18c00217 	ldw	r3,8(r3)
   40a24:	01400174 	movhi	r5,5
   40a28:	29419804 	addi	r5,r5,1632
   40a2c:	1880030b 	ldhu	r2,12(r3)
   40a30:	d9400215 	stw	r5,8(sp)
   40a34:	d9000615 	stw	r4,24(sp)
   40a38:	01400044 	movi	r5,1
   40a3c:	01000084 	movi	r4,2
   40a40:	d9000515 	stw	r4,20(sp)
   40a44:	dc400015 	stw	r17,0(sp)
   40a48:	d9400315 	stw	r5,12(sp)
   40a4c:	dec00415 	stw	sp,16(sp)
   40a50:	1108000c 	andi	r4,r2,8192
   40a54:	2000061e 	bne	r4,zero,40a70 <_puts_r+0x84>
   40a58:	19401917 	ldw	r5,100(r3)
   40a5c:	0137ffc4 	movi	r4,-8193
   40a60:	10880014 	ori	r2,r2,8192
   40a64:	2908703a 	and	r4,r5,r4
   40a68:	1880030d 	sth	r2,12(r3)
   40a6c:	19001915 	stw	r4,100(r3)
   40a70:	81400217 	ldw	r5,8(r16)
   40a74:	8009883a 	mov	r4,r16
   40a78:	d9800404 	addi	r6,sp,16
   40a7c:	004518c0 	call	4518c <__sfvwrite_r>
   40a80:	1000061e 	bne	r2,zero,40a9c <_puts_r+0xb0>
   40a84:	00800284 	movi	r2,10
   40a88:	dfc00917 	ldw	ra,36(sp)
   40a8c:	dc400817 	ldw	r17,32(sp)
   40a90:	dc000717 	ldw	r16,28(sp)
   40a94:	dec00a04 	addi	sp,sp,40
   40a98:	f800283a 	ret
   40a9c:	00bfffc4 	movi	r2,-1
   40aa0:	003ff906 	br	40a88 <__alt_data_end+0xfffcaf28>

00040aa4 <puts>:
   40aa4:	00800174 	movhi	r2,5
   40aa8:	10893604 	addi	r2,r2,9432
   40aac:	200b883a 	mov	r5,r4
   40ab0:	11000017 	ldw	r4,0(r2)
   40ab4:	00409ec1 	jmpi	409ec <_puts_r>

00040ab8 <srand>:
   40ab8:	00800174 	movhi	r2,5
   40abc:	10893604 	addi	r2,r2,9432
   40ac0:	10800017 	ldw	r2,0(r2)
   40ac4:	11002915 	stw	r4,164(r2)
   40ac8:	10002a15 	stw	zero,168(r2)
   40acc:	f800283a 	ret

00040ad0 <rand>:
   40ad0:	00800174 	movhi	r2,5
   40ad4:	defffe04 	addi	sp,sp,-8
   40ad8:	10893604 	addi	r2,r2,9432
   40adc:	dc000015 	stw	r16,0(sp)
   40ae0:	14000017 	ldw	r16,0(r2)
   40ae4:	dfc00115 	stw	ra,4(sp)
   40ae8:	01932574 	movhi	r6,19605
   40aec:	81002917 	ldw	r4,164(r16)
   40af0:	81402a17 	ldw	r5,168(r16)
   40af4:	01d614b4 	movhi	r7,22610
   40af8:	319fcb44 	addi	r6,r6,32557
   40afc:	39fd0b44 	addi	r7,r7,-3027
   40b00:	0049db80 	call	49db8 <__muldi3>
   40b04:	11000044 	addi	r4,r2,1
   40b08:	2085803a 	cmpltu	r2,r4,r2
   40b0c:	10c7883a 	add	r3,r2,r3
   40b10:	00a00034 	movhi	r2,32768
   40b14:	10bfffc4 	addi	r2,r2,-1
   40b18:	1884703a 	and	r2,r3,r2
   40b1c:	81002915 	stw	r4,164(r16)
   40b20:	80c02a15 	stw	r3,168(r16)
   40b24:	dfc00117 	ldw	ra,4(sp)
   40b28:	dc000017 	ldw	r16,0(sp)
   40b2c:	dec00204 	addi	sp,sp,8
   40b30:	f800283a 	ret

00040b34 <strlen>:
   40b34:	208000cc 	andi	r2,r4,3
   40b38:	10002026 	beq	r2,zero,40bbc <strlen+0x88>
   40b3c:	20800007 	ldb	r2,0(r4)
   40b40:	10002026 	beq	r2,zero,40bc4 <strlen+0x90>
   40b44:	2005883a 	mov	r2,r4
   40b48:	00000206 	br	40b54 <strlen+0x20>
   40b4c:	10c00007 	ldb	r3,0(r2)
   40b50:	18001826 	beq	r3,zero,40bb4 <strlen+0x80>
   40b54:	10800044 	addi	r2,r2,1
   40b58:	10c000cc 	andi	r3,r2,3
   40b5c:	183ffb1e 	bne	r3,zero,40b4c <__alt_data_end+0xfffcafec>
   40b60:	10c00017 	ldw	r3,0(r2)
   40b64:	01ffbff4 	movhi	r7,65279
   40b68:	39ffbfc4 	addi	r7,r7,-257
   40b6c:	00ca303a 	nor	r5,zero,r3
   40b70:	01a02074 	movhi	r6,32897
   40b74:	19c7883a 	add	r3,r3,r7
   40b78:	31a02004 	addi	r6,r6,-32640
   40b7c:	1946703a 	and	r3,r3,r5
   40b80:	1986703a 	and	r3,r3,r6
   40b84:	1800091e 	bne	r3,zero,40bac <strlen+0x78>
   40b88:	10800104 	addi	r2,r2,4
   40b8c:	10c00017 	ldw	r3,0(r2)
   40b90:	19cb883a 	add	r5,r3,r7
   40b94:	00c6303a 	nor	r3,zero,r3
   40b98:	28c6703a 	and	r3,r5,r3
   40b9c:	1986703a 	and	r3,r3,r6
   40ba0:	183ff926 	beq	r3,zero,40b88 <__alt_data_end+0xfffcb028>
   40ba4:	00000106 	br	40bac <strlen+0x78>
   40ba8:	10800044 	addi	r2,r2,1
   40bac:	10c00007 	ldb	r3,0(r2)
   40bb0:	183ffd1e 	bne	r3,zero,40ba8 <__alt_data_end+0xfffcb048>
   40bb4:	1105c83a 	sub	r2,r2,r4
   40bb8:	f800283a 	ret
   40bbc:	2005883a 	mov	r2,r4
   40bc0:	003fe706 	br	40b60 <__alt_data_end+0xfffcb000>
   40bc4:	0005883a 	mov	r2,zero
   40bc8:	f800283a 	ret

00040bcc <___vfprintf_internal_r>:
   40bcc:	defeb604 	addi	sp,sp,-1320
   40bd0:	dfc14915 	stw	ra,1316(sp)
   40bd4:	ddc14715 	stw	r23,1308(sp)
   40bd8:	dd814615 	stw	r22,1304(sp)
   40bdc:	202f883a 	mov	r23,r4
   40be0:	282d883a 	mov	r22,r5
   40be4:	d9812a15 	stw	r6,1192(sp)
   40be8:	d9c12d15 	stw	r7,1204(sp)
   40bec:	df014815 	stw	fp,1312(sp)
   40bf0:	dd414515 	stw	r21,1300(sp)
   40bf4:	dd014415 	stw	r20,1296(sp)
   40bf8:	dcc14315 	stw	r19,1292(sp)
   40bfc:	dc814215 	stw	r18,1288(sp)
   40c00:	dc414115 	stw	r17,1284(sp)
   40c04:	dc014015 	stw	r16,1280(sp)
   40c08:	004584c0 	call	4584c <_localeconv_r>
   40c0c:	10800017 	ldw	r2,0(r2)
   40c10:	1009883a 	mov	r4,r2
   40c14:	d8813515 	stw	r2,1236(sp)
   40c18:	0040b340 	call	40b34 <strlen>
   40c1c:	d8813815 	stw	r2,1248(sp)
   40c20:	b8000226 	beq	r23,zero,40c2c <___vfprintf_internal_r+0x60>
   40c24:	b8800e17 	ldw	r2,56(r23)
   40c28:	10010526 	beq	r2,zero,41040 <___vfprintf_internal_r+0x474>
   40c2c:	b0c0030b 	ldhu	r3,12(r22)
   40c30:	1908000c 	andi	r4,r3,8192
   40c34:	1805883a 	mov	r2,r3
   40c38:	2000071e 	bne	r4,zero,40c58 <___vfprintf_internal_r+0x8c>
   40c3c:	b1001917 	ldw	r4,100(r22)
   40c40:	18880014 	ori	r2,r3,8192
   40c44:	00f7ffc4 	movi	r3,-8193
   40c48:	20c8703a 	and	r4,r4,r3
   40c4c:	b080030d 	sth	r2,12(r22)
   40c50:	1007883a 	mov	r3,r2
   40c54:	b1001915 	stw	r4,100(r22)
   40c58:	1100020c 	andi	r4,r2,8
   40c5c:	2000a826 	beq	r4,zero,40f00 <___vfprintf_internal_r+0x334>
   40c60:	b1000417 	ldw	r4,16(r22)
   40c64:	2000a626 	beq	r4,zero,40f00 <___vfprintf_internal_r+0x334>
   40c68:	1080068c 	andi	r2,r2,26
   40c6c:	01000284 	movi	r4,10
   40c70:	1100ac26 	beq	r2,r4,40f24 <___vfprintf_internal_r+0x358>
   40c74:	d8c10e04 	addi	r3,sp,1080
   40c78:	d9010dc4 	addi	r4,sp,1079
   40c7c:	d9400404 	addi	r5,sp,16
   40c80:	05000174 	movhi	r20,5
   40c84:	1905c83a 	sub	r2,r3,r4
   40c88:	a501a984 	addi	r20,r20,1702
   40c8c:	d8c12815 	stw	r3,1184(sp)
   40c90:	d9012915 	stw	r4,1188(sp)
   40c94:	d9411e15 	stw	r5,1144(sp)
   40c98:	d8012015 	stw	zero,1152(sp)
   40c9c:	d8011f15 	stw	zero,1148(sp)
   40ca0:	d8013315 	stw	zero,1228(sp)
   40ca4:	d8013715 	stw	zero,1244(sp)
   40ca8:	d8013915 	stw	zero,1252(sp)
   40cac:	d8013b15 	stw	zero,1260(sp)
   40cb0:	d8013a15 	stw	zero,1256(sp)
   40cb4:	d8012f15 	stw	zero,1212(sp)
   40cb8:	2811883a 	mov	r8,r5
   40cbc:	d8813c15 	stw	r2,1264(sp)
   40cc0:	d8c12a17 	ldw	r3,1192(sp)
   40cc4:	18800007 	ldb	r2,0(r3)
   40cc8:	10021326 	beq	r2,zero,41518 <___vfprintf_internal_r+0x94c>
   40ccc:	00c00944 	movi	r3,37
   40cd0:	dc012a17 	ldw	r16,1192(sp)
   40cd4:	10c0021e 	bne	r2,r3,40ce0 <___vfprintf_internal_r+0x114>
   40cd8:	00001606 	br	40d34 <___vfprintf_internal_r+0x168>
   40cdc:	10c08526 	beq	r2,r3,40ef4 <___vfprintf_internal_r+0x328>
   40ce0:	84000044 	addi	r16,r16,1
   40ce4:	80800007 	ldb	r2,0(r16)
   40ce8:	103ffc1e 	bne	r2,zero,40cdc <__alt_data_end+0xfffcb17c>
   40cec:	d9012a17 	ldw	r4,1192(sp)
   40cf0:	8123c83a 	sub	r17,r16,r4
   40cf4:	88000f26 	beq	r17,zero,40d34 <___vfprintf_internal_r+0x168>
   40cf8:	d8812a17 	ldw	r2,1192(sp)
   40cfc:	d8c12017 	ldw	r3,1152(sp)
   40d00:	44400115 	stw	r17,4(r8)
   40d04:	40800015 	stw	r2,0(r8)
   40d08:	d8811f17 	ldw	r2,1148(sp)
   40d0c:	1c47883a 	add	r3,r3,r17
   40d10:	d8c12015 	stw	r3,1152(sp)
   40d14:	10800044 	addi	r2,r2,1
   40d18:	d8811f15 	stw	r2,1148(sp)
   40d1c:	00c001c4 	movi	r3,7
   40d20:	1880b516 	blt	r3,r2,40ff8 <___vfprintf_internal_r+0x42c>
   40d24:	42000204 	addi	r8,r8,8
   40d28:	d8c12f17 	ldw	r3,1212(sp)
   40d2c:	1c47883a 	add	r3,r3,r17
   40d30:	d8c12f15 	stw	r3,1212(sp)
   40d34:	80800007 	ldb	r2,0(r16)
   40d38:	1000b626 	beq	r2,zero,41014 <___vfprintf_internal_r+0x448>
   40d3c:	80800044 	addi	r2,r16,1
   40d40:	84000047 	ldb	r16,1(r16)
   40d44:	0027883a 	mov	r19,zero
   40d48:	0039883a 	mov	fp,zero
   40d4c:	dcc12b05 	stb	r19,1196(sp)
   40d50:	d8012785 	stb	zero,1182(sp)
   40d54:	027fffc4 	movi	r9,-1
   40d58:	d8012e15 	stw	zero,1208(sp)
   40d5c:	04401604 	movi	r17,88
   40d60:	04800244 	movi	r18,9
   40d64:	da012a15 	stw	r8,1192(sp)
   40d68:	e027883a 	mov	r19,fp
   40d6c:	17000044 	addi	fp,r2,1
   40d70:	80bff804 	addi	r2,r16,-32
   40d74:	88831236 	bltu	r17,r2,419c0 <___vfprintf_internal_r+0xdf4>
   40d78:	100490ba 	slli	r2,r2,2
   40d7c:	01000134 	movhi	r4,4
   40d80:	21036404 	addi	r4,r4,3472
   40d84:	1105883a 	add	r2,r2,r4
   40d88:	10800017 	ldw	r2,0(r2)
   40d8c:	1000683a 	jmp	r2
   40d90:	000418dc 	xori	zero,zero,4195
   40d94:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40d98:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40d9c:	000418f8 	rdprs	zero,zero,4195
   40da0:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40da4:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40da8:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40dac:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40db0:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40db4:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40db8:	00041908 	cmpgei	zero,zero,4196
   40dbc:	00041930 	cmpltui	zero,zero,4196
   40dc0:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40dc4:	0004104c 	andi	zero,zero,4161
   40dc8:	0004105c 	xori	zero,zero,4161
   40dcc:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40dd0:	000410ac 	andhi	zero,zero,4162
   40dd4:	000410bc 	xorhi	zero,zero,4162
   40dd8:	000410bc 	xorhi	zero,zero,4162
   40ddc:	000410bc 	xorhi	zero,zero,4162
   40de0:	000410bc 	xorhi	zero,zero,4162
   40de4:	000410bc 	xorhi	zero,zero,4162
   40de8:	000410bc 	xorhi	zero,zero,4162
   40dec:	000410bc 	xorhi	zero,zero,4162
   40df0:	000410bc 	xorhi	zero,zero,4162
   40df4:	000410bc 	xorhi	zero,zero,4162
   40df8:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40dfc:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e00:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e04:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e08:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e0c:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e10:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e14:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e18:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e1c:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e20:	00041100 	call	4110 <__alt_mem_RAM_jesus-0x3bef0>
   40e24:	00041520 	cmpeqi	zero,zero,4180
   40e28:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e2c:	00041520 	cmpeqi	zero,zero,4180
   40e30:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e34:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e38:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e3c:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e40:	000415c8 	cmpgei	zero,zero,4183
   40e44:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e48:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e4c:	000415d8 	cmpnei	zero,zero,4183
   40e50:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e54:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e58:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e5c:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e60:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e64:	0004161c 	xori	zero,zero,4184
   40e68:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e6c:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e70:	00041654 	movui	zero,4185
   40e74:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e78:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e7c:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e80:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e84:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e88:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e8c:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e90:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e94:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e98:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40e9c:	00041890 	cmplti	zero,zero,4194
   40ea0:	0004183c 	xorhi	zero,zero,4192
   40ea4:	00041520 	cmpeqi	zero,zero,4180
   40ea8:	00041520 	cmpeqi	zero,zero,4180
   40eac:	00041520 	cmpeqi	zero,zero,4180
   40eb0:	00041880 	call	4188 <__alt_mem_RAM_jesus-0x3be78>
   40eb4:	0004183c 	xorhi	zero,zero,4192
   40eb8:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40ebc:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40ec0:	00041758 	cmpnei	zero,zero,4189
   40ec4:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40ec8:	00041770 	cmpltui	zero,zero,4189
   40ecc:	000417b0 	cmpltui	zero,zero,4190
   40ed0:	000417f0 	cmpltui	zero,zero,4191
   40ed4:	000416bc 	xorhi	zero,zero,4186
   40ed8:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40edc:	00041944 	movi	zero,4197
   40ee0:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40ee4:	000416cc 	andi	zero,zero,4187
   40ee8:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40eec:	000419c0 	call	419c <__alt_mem_RAM_jesus-0x3be64>
   40ef0:	0004170c 	andi	zero,zero,4188
   40ef4:	d9412a17 	ldw	r5,1192(sp)
   40ef8:	8163c83a 	sub	r17,r16,r5
   40efc:	003f7d06 	br	40cf4 <__alt_data_end+0xfffcb194>
   40f00:	b809883a 	mov	r4,r23
   40f04:	b00b883a 	mov	r5,r22
   40f08:	0042cec0 	call	42cec <__swsetup_r>
   40f0c:	10002d1e 	bne	r2,zero,40fc4 <___vfprintf_internal_r+0x3f8>
   40f10:	b0c0030b 	ldhu	r3,12(r22)
   40f14:	01000284 	movi	r4,10
   40f18:	1805883a 	mov	r2,r3
   40f1c:	1080068c 	andi	r2,r2,26
   40f20:	113f541e 	bne	r2,r4,40c74 <__alt_data_end+0xfffcb114>
   40f24:	b080038b 	ldhu	r2,14(r22)
   40f28:	113fffcc 	andi	r4,r2,65535
   40f2c:	2120001c 	xori	r4,r4,32768
   40f30:	21200004 	addi	r4,r4,-32768
   40f34:	203f4f16 	blt	r4,zero,40c74 <__alt_data_end+0xfffcb114>
   40f38:	b2c01917 	ldw	r11,100(r22)
   40f3c:	b2800717 	ldw	r10,28(r22)
   40f40:	b2400917 	ldw	r9,36(r22)
   40f44:	d9812a17 	ldw	r6,1192(sp)
   40f48:	d9c12d17 	ldw	r7,1204(sp)
   40f4c:	02010004 	movi	r8,1024
   40f50:	18ffff4c 	andi	r3,r3,65533
   40f54:	d881078d 	sth	r2,1054(sp)
   40f58:	b809883a 	mov	r4,r23
   40f5c:	d8800404 	addi	r2,sp,16
   40f60:	d9410404 	addi	r5,sp,1040
   40f64:	d8c1070d 	sth	r3,1052(sp)
   40f68:	dac11d15 	stw	r11,1140(sp)
   40f6c:	da810b15 	stw	r10,1068(sp)
   40f70:	da410d15 	stw	r9,1076(sp)
   40f74:	d8810415 	stw	r2,1040(sp)
   40f78:	d8810815 	stw	r2,1056(sp)
   40f7c:	da010615 	stw	r8,1048(sp)
   40f80:	da010915 	stw	r8,1060(sp)
   40f84:	d8010a15 	stw	zero,1064(sp)
   40f88:	0040bcc0 	call	40bcc <___vfprintf_internal_r>
   40f8c:	1021883a 	mov	r16,r2
   40f90:	10000416 	blt	r2,zero,40fa4 <___vfprintf_internal_r+0x3d8>
   40f94:	b809883a 	mov	r4,r23
   40f98:	d9410404 	addi	r5,sp,1040
   40f9c:	004476c0 	call	4476c <_fflush_r>
   40fa0:	1007301e 	bne	r2,zero,42c64 <___vfprintf_internal_r+0x2098>
   40fa4:	d881070b 	ldhu	r2,1052(sp)
   40fa8:	1080100c 	andi	r2,r2,64
   40fac:	10000326 	beq	r2,zero,40fbc <___vfprintf_internal_r+0x3f0>
   40fb0:	b080030b 	ldhu	r2,12(r22)
   40fb4:	10801014 	ori	r2,r2,64
   40fb8:	b080030d 	sth	r2,12(r22)
   40fbc:	8005883a 	mov	r2,r16
   40fc0:	00000106 	br	40fc8 <___vfprintf_internal_r+0x3fc>
   40fc4:	00bfffc4 	movi	r2,-1
   40fc8:	dfc14917 	ldw	ra,1316(sp)
   40fcc:	df014817 	ldw	fp,1312(sp)
   40fd0:	ddc14717 	ldw	r23,1308(sp)
   40fd4:	dd814617 	ldw	r22,1304(sp)
   40fd8:	dd414517 	ldw	r21,1300(sp)
   40fdc:	dd014417 	ldw	r20,1296(sp)
   40fe0:	dcc14317 	ldw	r19,1292(sp)
   40fe4:	dc814217 	ldw	r18,1288(sp)
   40fe8:	dc414117 	ldw	r17,1284(sp)
   40fec:	dc014017 	ldw	r16,1280(sp)
   40ff0:	dec14a04 	addi	sp,sp,1320
   40ff4:	f800283a 	ret
   40ff8:	b809883a 	mov	r4,r23
   40ffc:	b00b883a 	mov	r5,r22
   41000:	d9811e04 	addi	r6,sp,1144
   41004:	004800c0 	call	4800c <__sprint_r>
   41008:	1000081e 	bne	r2,zero,4102c <___vfprintf_internal_r+0x460>
   4100c:	da000404 	addi	r8,sp,16
   41010:	003f4506 	br	40d28 <__alt_data_end+0xfffcb1c8>
   41014:	d8812017 	ldw	r2,1152(sp)
   41018:	10000426 	beq	r2,zero,4102c <___vfprintf_internal_r+0x460>
   4101c:	b809883a 	mov	r4,r23
   41020:	b00b883a 	mov	r5,r22
   41024:	d9811e04 	addi	r6,sp,1144
   41028:	004800c0 	call	4800c <__sprint_r>
   4102c:	b080030b 	ldhu	r2,12(r22)
   41030:	1080100c 	andi	r2,r2,64
   41034:	103fe31e 	bne	r2,zero,40fc4 <__alt_data_end+0xfffcb464>
   41038:	d8812f17 	ldw	r2,1212(sp)
   4103c:	003fe206 	br	40fc8 <__alt_data_end+0xfffcb468>
   41040:	b809883a 	mov	r4,r23
   41044:	0044d280 	call	44d28 <__sinit>
   41048:	003ef806 	br	40c2c <__alt_data_end+0xfffcb0cc>
   4104c:	e005883a 	mov	r2,fp
   41050:	9cc00114 	ori	r19,r19,4
   41054:	e4000007 	ldb	r16,0(fp)
   41058:	003f4406 	br	40d6c <__alt_data_end+0xfffcb20c>
   4105c:	e4000007 	ldb	r16,0(fp)
   41060:	01000a84 	movi	r4,42
   41064:	e0800044 	addi	r2,fp,1
   41068:	8106f626 	beq	r16,r4,42c44 <___vfprintf_internal_r+0x2078>
   4106c:	857ff404 	addi	r21,r16,-48
   41070:	1039883a 	mov	fp,r2
   41074:	0013883a 	mov	r9,zero
   41078:	957f3d36 	bltu	r18,r21,40d70 <__alt_data_end+0xfffcb210>
   4107c:	0009883a 	mov	r4,zero
   41080:	01400284 	movi	r5,10
   41084:	004095c0 	call	4095c <__mulsi3>
   41088:	e4000007 	ldb	r16,0(fp)
   4108c:	a889883a 	add	r4,r21,r2
   41090:	e7000044 	addi	fp,fp,1
   41094:	857ff404 	addi	r21,r16,-48
   41098:	957ff92e 	bgeu	r18,r21,41080 <__alt_data_end+0xfffcb520>
   4109c:	2013883a 	mov	r9,r4
   410a0:	203f330e 	bge	r4,zero,40d70 <__alt_data_end+0xfffcb210>
   410a4:	027fffc4 	movi	r9,-1
   410a8:	003f3106 	br	40d70 <__alt_data_end+0xfffcb210>
   410ac:	9cc02014 	ori	r19,r19,128
   410b0:	e005883a 	mov	r2,fp
   410b4:	e4000007 	ldb	r16,0(fp)
   410b8:	003f2c06 	br	40d6c <__alt_data_end+0xfffcb20c>
   410bc:	857ff404 	addi	r21,r16,-48
   410c0:	d8012e15 	stw	zero,1208(sp)
   410c4:	e021883a 	mov	r16,fp
   410c8:	0009883a 	mov	r4,zero
   410cc:	da412c15 	stw	r9,1200(sp)
   410d0:	01400284 	movi	r5,10
   410d4:	004095c0 	call	4095c <__mulsi3>
   410d8:	81400007 	ldb	r5,0(r16)
   410dc:	1549883a 	add	r4,r2,r21
   410e0:	e7000044 	addi	fp,fp,1
   410e4:	2d7ff404 	addi	r21,r5,-48
   410e8:	e021883a 	mov	r16,fp
   410ec:	957ff82e 	bgeu	r18,r21,410d0 <__alt_data_end+0xfffcb570>
   410f0:	2821883a 	mov	r16,r5
   410f4:	d9012e15 	stw	r4,1208(sp)
   410f8:	da412c17 	ldw	r9,1200(sp)
   410fc:	003f1c06 	br	40d70 <__alt_data_end+0xfffcb210>
   41100:	da012a17 	ldw	r8,1192(sp)
   41104:	df012a15 	stw	fp,1192(sp)
   41108:	9839883a 	mov	fp,r19
   4110c:	dcc12b03 	ldbu	r19,1196(sp)
   41110:	e7000414 	ori	fp,fp,16
   41114:	e080080c 	andi	r2,fp,32
   41118:	dcc12785 	stb	r19,1182(sp)
   4111c:	d8c12d17 	ldw	r3,1204(sp)
   41120:	1001ce26 	beq	r2,zero,4185c <___vfprintf_internal_r+0xc90>
   41124:	d9012d17 	ldw	r4,1204(sp)
   41128:	18800117 	ldw	r2,4(r3)
   4112c:	1c800017 	ldw	r18,0(r3)
   41130:	21000204 	addi	r4,r4,8
   41134:	d9012d15 	stw	r4,1204(sp)
   41138:	102b883a 	mov	r21,r2
   4113c:	10044916 	blt	r2,zero,42264 <___vfprintf_internal_r+0x1698>
   41140:	dcc12783 	ldbu	r19,1182(sp)
   41144:	da413215 	stw	r9,1224(sp)
   41148:	00800044 	movi	r2,1
   4114c:	9546b03a 	or	r3,r18,r21
   41150:	48000216 	blt	r9,zero,4115c <___vfprintf_internal_r+0x590>
   41154:	013fdfc4 	movi	r4,-129
   41158:	e138703a 	and	fp,fp,r4
   4115c:	1802251e 	bne	r3,zero,419f4 <___vfprintf_internal_r+0xe28>
   41160:	48031726 	beq	r9,zero,41dc0 <___vfprintf_internal_r+0x11f4>
   41164:	10803fcc 	andi	r2,r2,255
   41168:	00c00044 	movi	r3,1
   4116c:	10c24526 	beq	r2,r3,41a84 <___vfprintf_internal_r+0xeb8>
   41170:	00c00084 	movi	r3,2
   41174:	10c33426 	beq	r2,r3,41e48 <___vfprintf_internal_r+0x127c>
   41178:	d8c10e04 	addi	r3,sp,1080
   4117c:	9008d0fa 	srli	r4,r18,3
   41180:	a80a977a 	slli	r5,r21,29
   41184:	a82ad0fa 	srli	r21,r21,3
   41188:	948001cc 	andi	r18,r18,7
   4118c:	90800c04 	addi	r2,r18,48
   41190:	18ffffc4 	addi	r3,r3,-1
   41194:	2924b03a 	or	r18,r5,r4
   41198:	18800005 	stb	r2,0(r3)
   4119c:	9548b03a 	or	r4,r18,r21
   411a0:	203ff61e 	bne	r4,zero,4117c <__alt_data_end+0xfffcb61c>
   411a4:	e100004c 	andi	r4,fp,1
   411a8:	d8c13115 	stw	r3,1220(sp)
   411ac:	20039a1e 	bne	r4,zero,42018 <___vfprintf_internal_r+0x144c>
   411b0:	d8812817 	ldw	r2,1184(sp)
   411b4:	10e3c83a 	sub	r17,r2,r3
   411b8:	8805883a 	mov	r2,r17
   411bc:	8a40010e 	bge	r17,r9,411c4 <___vfprintf_internal_r+0x5f8>
   411c0:	4805883a 	mov	r2,r9
   411c4:	d8812b15 	stw	r2,1196(sp)
   411c8:	d8013415 	stw	zero,1232(sp)
   411cc:	98803fcc 	andi	r2,r19,255
   411d0:	1080201c 	xori	r2,r2,128
   411d4:	10bfe004 	addi	r2,r2,-128
   411d8:	10000326 	beq	r2,zero,411e8 <___vfprintf_internal_r+0x61c>
   411dc:	d8c12b17 	ldw	r3,1196(sp)
   411e0:	18c00044 	addi	r3,r3,1
   411e4:	d8c12b15 	stw	r3,1196(sp)
   411e8:	e0c0008c 	andi	r3,fp,2
   411ec:	d8c12c15 	stw	r3,1200(sp)
   411f0:	18000326 	beq	r3,zero,41200 <___vfprintf_internal_r+0x634>
   411f4:	d8c12b17 	ldw	r3,1196(sp)
   411f8:	18c00084 	addi	r3,r3,2
   411fc:	d8c12b15 	stw	r3,1196(sp)
   41200:	e0c0210c 	andi	r3,fp,132
   41204:	d8c13015 	stw	r3,1216(sp)
   41208:	1801f81e 	bne	r3,zero,419ec <___vfprintf_internal_r+0xe20>
   4120c:	d9012e17 	ldw	r4,1208(sp)
   41210:	d8c12b17 	ldw	r3,1196(sp)
   41214:	20ebc83a 	sub	r21,r4,r3
   41218:	0541f40e 	bge	zero,r21,419ec <___vfprintf_internal_r+0xe20>
   4121c:	02400404 	movi	r9,16
   41220:	d8c12017 	ldw	r3,1152(sp)
   41224:	d8811f17 	ldw	r2,1148(sp)
   41228:	4d45750e 	bge	r9,r21,42800 <___vfprintf_internal_r+0x1c34>
   4122c:	01400174 	movhi	r5,5
   41230:	2941ad84 	addi	r5,r5,1718
   41234:	d9413615 	stw	r5,1240(sp)
   41238:	4827883a 	mov	r19,r9
   4123c:	048001c4 	movi	r18,7
   41240:	00000306 	br	41250 <___vfprintf_internal_r+0x684>
   41244:	ad7ffc04 	addi	r21,r21,-16
   41248:	42000204 	addi	r8,r8,8
   4124c:	9d40130e 	bge	r19,r21,4129c <___vfprintf_internal_r+0x6d0>
   41250:	01000174 	movhi	r4,5
   41254:	18c00404 	addi	r3,r3,16
   41258:	10800044 	addi	r2,r2,1
   4125c:	2101ad84 	addi	r4,r4,1718
   41260:	41000015 	stw	r4,0(r8)
   41264:	44c00115 	stw	r19,4(r8)
   41268:	d8c12015 	stw	r3,1152(sp)
   4126c:	d8811f15 	stw	r2,1148(sp)
   41270:	90bff40e 	bge	r18,r2,41244 <__alt_data_end+0xfffcb6e4>
   41274:	b809883a 	mov	r4,r23
   41278:	b00b883a 	mov	r5,r22
   4127c:	d9811e04 	addi	r6,sp,1144
   41280:	004800c0 	call	4800c <__sprint_r>
   41284:	103f691e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   41288:	ad7ffc04 	addi	r21,r21,-16
   4128c:	d8c12017 	ldw	r3,1152(sp)
   41290:	d8811f17 	ldw	r2,1148(sp)
   41294:	da000404 	addi	r8,sp,16
   41298:	9d7fed16 	blt	r19,r21,41250 <__alt_data_end+0xfffcb6f0>
   4129c:	d9413617 	ldw	r5,1240(sp)
   412a0:	a8c7883a 	add	r3,r21,r3
   412a4:	10800044 	addi	r2,r2,1
   412a8:	41400015 	stw	r5,0(r8)
   412ac:	45400115 	stw	r21,4(r8)
   412b0:	d8c12015 	stw	r3,1152(sp)
   412b4:	d8811f15 	stw	r2,1148(sp)
   412b8:	010001c4 	movi	r4,7
   412bc:	20832b16 	blt	r4,r2,41f6c <___vfprintf_internal_r+0x13a0>
   412c0:	d8812787 	ldb	r2,1182(sp)
   412c4:	42000204 	addi	r8,r8,8
   412c8:	10000c26 	beq	r2,zero,412fc <___vfprintf_internal_r+0x730>
   412cc:	d8811f17 	ldw	r2,1148(sp)
   412d0:	d9012784 	addi	r4,sp,1182
   412d4:	18c00044 	addi	r3,r3,1
   412d8:	10800044 	addi	r2,r2,1
   412dc:	41000015 	stw	r4,0(r8)
   412e0:	01000044 	movi	r4,1
   412e4:	41000115 	stw	r4,4(r8)
   412e8:	d8c12015 	stw	r3,1152(sp)
   412ec:	d8811f15 	stw	r2,1148(sp)
   412f0:	010001c4 	movi	r4,7
   412f4:	2082c416 	blt	r4,r2,41e08 <___vfprintf_internal_r+0x123c>
   412f8:	42000204 	addi	r8,r8,8
   412fc:	d8812c17 	ldw	r2,1200(sp)
   41300:	10000c26 	beq	r2,zero,41334 <___vfprintf_internal_r+0x768>
   41304:	d8811f17 	ldw	r2,1148(sp)
   41308:	d9012704 	addi	r4,sp,1180
   4130c:	18c00084 	addi	r3,r3,2
   41310:	10800044 	addi	r2,r2,1
   41314:	41000015 	stw	r4,0(r8)
   41318:	01000084 	movi	r4,2
   4131c:	41000115 	stw	r4,4(r8)
   41320:	d8c12015 	stw	r3,1152(sp)
   41324:	d8811f15 	stw	r2,1148(sp)
   41328:	010001c4 	movi	r4,7
   4132c:	2082be16 	blt	r4,r2,41e28 <___vfprintf_internal_r+0x125c>
   41330:	42000204 	addi	r8,r8,8
   41334:	d9013017 	ldw	r4,1216(sp)
   41338:	00802004 	movi	r2,128
   4133c:	20822026 	beq	r4,r2,41bc0 <___vfprintf_internal_r+0xff4>
   41340:	d9413217 	ldw	r5,1224(sp)
   41344:	2c67c83a 	sub	r19,r5,r17
   41348:	04c0260e 	bge	zero,r19,413e4 <___vfprintf_internal_r+0x818>
   4134c:	05400404 	movi	r21,16
   41350:	d8811f17 	ldw	r2,1148(sp)
   41354:	acc4720e 	bge	r21,r19,42520 <___vfprintf_internal_r+0x1954>
   41358:	01400174 	movhi	r5,5
   4135c:	2941a984 	addi	r5,r5,1702
   41360:	d9412c15 	stw	r5,1200(sp)
   41364:	048001c4 	movi	r18,7
   41368:	00000306 	br	41378 <___vfprintf_internal_r+0x7ac>
   4136c:	9cfffc04 	addi	r19,r19,-16
   41370:	42000204 	addi	r8,r8,8
   41374:	acc0110e 	bge	r21,r19,413bc <___vfprintf_internal_r+0x7f0>
   41378:	18c00404 	addi	r3,r3,16
   4137c:	10800044 	addi	r2,r2,1
   41380:	45000015 	stw	r20,0(r8)
   41384:	45400115 	stw	r21,4(r8)
   41388:	d8c12015 	stw	r3,1152(sp)
   4138c:	d8811f15 	stw	r2,1148(sp)
   41390:	90bff60e 	bge	r18,r2,4136c <__alt_data_end+0xfffcb80c>
   41394:	b809883a 	mov	r4,r23
   41398:	b00b883a 	mov	r5,r22
   4139c:	d9811e04 	addi	r6,sp,1144
   413a0:	004800c0 	call	4800c <__sprint_r>
   413a4:	103f211e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   413a8:	9cfffc04 	addi	r19,r19,-16
   413ac:	d8c12017 	ldw	r3,1152(sp)
   413b0:	d8811f17 	ldw	r2,1148(sp)
   413b4:	da000404 	addi	r8,sp,16
   413b8:	acffef16 	blt	r21,r19,41378 <__alt_data_end+0xfffcb818>
   413bc:	d9012c17 	ldw	r4,1200(sp)
   413c0:	1cc7883a 	add	r3,r3,r19
   413c4:	10800044 	addi	r2,r2,1
   413c8:	41000015 	stw	r4,0(r8)
   413cc:	44c00115 	stw	r19,4(r8)
   413d0:	d8c12015 	stw	r3,1152(sp)
   413d4:	d8811f15 	stw	r2,1148(sp)
   413d8:	010001c4 	movi	r4,7
   413dc:	20828216 	blt	r4,r2,41de8 <___vfprintf_internal_r+0x121c>
   413e0:	42000204 	addi	r8,r8,8
   413e4:	e080400c 	andi	r2,fp,256
   413e8:	1001ac1e 	bne	r2,zero,41a9c <___vfprintf_internal_r+0xed0>
   413ec:	d8811f17 	ldw	r2,1148(sp)
   413f0:	d9413117 	ldw	r5,1220(sp)
   413f4:	1c47883a 	add	r3,r3,r17
   413f8:	10800044 	addi	r2,r2,1
   413fc:	41400015 	stw	r5,0(r8)
   41400:	44400115 	stw	r17,4(r8)
   41404:	d8c12015 	stw	r3,1152(sp)
   41408:	d8811f15 	stw	r2,1148(sp)
   4140c:	010001c4 	movi	r4,7
   41410:	20825d16 	blt	r4,r2,41d88 <___vfprintf_internal_r+0x11bc>
   41414:	42000204 	addi	r8,r8,8
   41418:	e080010c 	andi	r2,fp,4
   4141c:	10003126 	beq	r2,zero,414e4 <___vfprintf_internal_r+0x918>
   41420:	d8812e17 	ldw	r2,1208(sp)
   41424:	d9012b17 	ldw	r4,1196(sp)
   41428:	1121c83a 	sub	r16,r2,r4
   4142c:	04002d0e 	bge	zero,r16,414e4 <___vfprintf_internal_r+0x918>
   41430:	04400404 	movi	r17,16
   41434:	d8811f17 	ldw	r2,1148(sp)
   41438:	8c05340e 	bge	r17,r16,4290c <___vfprintf_internal_r+0x1d40>
   4143c:	01000174 	movhi	r4,5
   41440:	2101ad84 	addi	r4,r4,1718
   41444:	d9013615 	stw	r4,1240(sp)
   41448:	048001c4 	movi	r18,7
   4144c:	00000306 	br	4145c <___vfprintf_internal_r+0x890>
   41450:	843ffc04 	addi	r16,r16,-16
   41454:	42000204 	addi	r8,r8,8
   41458:	8c00130e 	bge	r17,r16,414a8 <___vfprintf_internal_r+0x8dc>
   4145c:	01400174 	movhi	r5,5
   41460:	18c00404 	addi	r3,r3,16
   41464:	10800044 	addi	r2,r2,1
   41468:	2941ad84 	addi	r5,r5,1718
   4146c:	41400015 	stw	r5,0(r8)
   41470:	44400115 	stw	r17,4(r8)
   41474:	d8c12015 	stw	r3,1152(sp)
   41478:	d8811f15 	stw	r2,1148(sp)
   4147c:	90bff40e 	bge	r18,r2,41450 <__alt_data_end+0xfffcb8f0>
   41480:	b809883a 	mov	r4,r23
   41484:	b00b883a 	mov	r5,r22
   41488:	d9811e04 	addi	r6,sp,1144
   4148c:	004800c0 	call	4800c <__sprint_r>
   41490:	103ee61e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   41494:	843ffc04 	addi	r16,r16,-16
   41498:	d8c12017 	ldw	r3,1152(sp)
   4149c:	d8811f17 	ldw	r2,1148(sp)
   414a0:	da000404 	addi	r8,sp,16
   414a4:	8c3fed16 	blt	r17,r16,4145c <__alt_data_end+0xfffcb8fc>
   414a8:	d9013617 	ldw	r4,1240(sp)
   414ac:	1c07883a 	add	r3,r3,r16
   414b0:	10800044 	addi	r2,r2,1
   414b4:	41000015 	stw	r4,0(r8)
   414b8:	44000115 	stw	r16,4(r8)
   414bc:	d8c12015 	stw	r3,1152(sp)
   414c0:	d8811f15 	stw	r2,1148(sp)
   414c4:	010001c4 	movi	r4,7
   414c8:	2080060e 	bge	r4,r2,414e4 <___vfprintf_internal_r+0x918>
   414cc:	b809883a 	mov	r4,r23
   414d0:	b00b883a 	mov	r5,r22
   414d4:	d9811e04 	addi	r6,sp,1144
   414d8:	004800c0 	call	4800c <__sprint_r>
   414dc:	103ed31e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   414e0:	d8c12017 	ldw	r3,1152(sp)
   414e4:	df012b17 	ldw	fp,1196(sp)
   414e8:	d9412e17 	ldw	r5,1208(sp)
   414ec:	e140010e 	bge	fp,r5,414f4 <___vfprintf_internal_r+0x928>
   414f0:	2839883a 	mov	fp,r5
   414f4:	d8812f17 	ldw	r2,1212(sp)
   414f8:	1705883a 	add	r2,r2,fp
   414fc:	d8812f15 	stw	r2,1212(sp)
   41500:	1802291e 	bne	r3,zero,41da8 <___vfprintf_internal_r+0x11dc>
   41504:	d8c12a17 	ldw	r3,1192(sp)
   41508:	d8011f15 	stw	zero,1148(sp)
   4150c:	da000404 	addi	r8,sp,16
   41510:	18800007 	ldb	r2,0(r3)
   41514:	103ded1e 	bne	r2,zero,40ccc <__alt_data_end+0xfffcb16c>
   41518:	dc012a17 	ldw	r16,1192(sp)
   4151c:	003e0506 	br	40d34 <__alt_data_end+0xfffcb1d4>
   41520:	d9012d17 	ldw	r4,1204(sp)
   41524:	d9412d17 	ldw	r5,1204(sp)
   41528:	da012a17 	ldw	r8,1192(sp)
   4152c:	21000017 	ldw	r4,0(r4)
   41530:	29400117 	ldw	r5,4(r5)
   41534:	df012a15 	stw	fp,1192(sp)
   41538:	9839883a 	mov	fp,r19
   4153c:	dcc12b03 	ldbu	r19,1196(sp)
   41540:	d9013715 	stw	r4,1244(sp)
   41544:	d9413915 	stw	r5,1252(sp)
   41548:	da013f15 	stw	r8,1276(sp)
   4154c:	da413e15 	stw	r9,1272(sp)
   41550:	dcc12785 	stb	r19,1182(sp)
   41554:	0047c680 	call	47c68 <__fpclassifyd>
   41558:	d8c12d17 	ldw	r3,1204(sp)
   4155c:	04400044 	movi	r17,1
   41560:	da013f17 	ldw	r8,1276(sp)
   41564:	1c800204 	addi	r18,r3,8
   41568:	da413e17 	ldw	r9,1272(sp)
   4156c:	d9013717 	ldw	r4,1244(sp)
   41570:	d9413917 	ldw	r5,1252(sp)
   41574:	1443451e 	bne	r2,r17,4228c <___vfprintf_internal_r+0x16c0>
   41578:	000d883a 	mov	r6,zero
   4157c:	000f883a 	mov	r7,zero
   41580:	004bea00 	call	4bea0 <__ledf2>
   41584:	da013f17 	ldw	r8,1276(sp)
   41588:	1004fe16 	blt	r2,zero,42984 <___vfprintf_internal_r+0x1db8>
   4158c:	dcc12783 	ldbu	r19,1182(sp)
   41590:	008011c4 	movi	r2,71
   41594:	14045d0e 	bge	r2,r16,4270c <___vfprintf_internal_r+0x1b40>
   41598:	01400174 	movhi	r5,5
   4159c:	29419a04 	addi	r5,r5,1640
   415a0:	d9413115 	stw	r5,1220(sp)
   415a4:	00c000c4 	movi	r3,3
   415a8:	00bfdfc4 	movi	r2,-129
   415ac:	d8c12b15 	stw	r3,1196(sp)
   415b0:	e0b8703a 	and	fp,fp,r2
   415b4:	dc812d15 	stw	r18,1204(sp)
   415b8:	1823883a 	mov	r17,r3
   415bc:	d8013215 	stw	zero,1224(sp)
   415c0:	d8013415 	stw	zero,1232(sp)
   415c4:	003f0106 	br	411cc <__alt_data_end+0xfffcb66c>
   415c8:	9cc00214 	ori	r19,r19,8
   415cc:	e005883a 	mov	r2,fp
   415d0:	e4000007 	ldb	r16,0(fp)
   415d4:	003de506 	br	40d6c <__alt_data_end+0xfffcb20c>
   415d8:	da012a17 	ldw	r8,1192(sp)
   415dc:	df012a15 	stw	fp,1192(sp)
   415e0:	9f000414 	ori	fp,r19,16
   415e4:	e0c0080c 	andi	r3,fp,32
   415e8:	d8812d17 	ldw	r2,1204(sp)
   415ec:	18007626 	beq	r3,zero,417c8 <___vfprintf_internal_r+0xbfc>
   415f0:	d9412d17 	ldw	r5,1204(sp)
   415f4:	14800017 	ldw	r18,0(r2)
   415f8:	15400117 	ldw	r21,4(r2)
   415fc:	29400204 	addi	r5,r5,8
   41600:	d9412d15 	stw	r5,1204(sp)
   41604:	0005883a 	mov	r2,zero
   41608:	9546b03a 	or	r3,r18,r21
   4160c:	d8012785 	stb	zero,1182(sp)
   41610:	da413215 	stw	r9,1224(sp)
   41614:	0027883a 	mov	r19,zero
   41618:	003ecd06 	br	41150 <__alt_data_end+0xfffcb5f0>
   4161c:	da012a17 	ldw	r8,1192(sp)
   41620:	df012a15 	stw	fp,1192(sp)
   41624:	9f000414 	ori	fp,r19,16
   41628:	e0c0080c 	andi	r3,fp,32
   4162c:	d8812d17 	ldw	r2,1204(sp)
   41630:	18002c26 	beq	r3,zero,416e4 <___vfprintf_internal_r+0xb18>
   41634:	d9012d17 	ldw	r4,1204(sp)
   41638:	14800017 	ldw	r18,0(r2)
   4163c:	15400117 	ldw	r21,4(r2)
   41640:	21000204 	addi	r4,r4,8
   41644:	d9012d15 	stw	r4,1204(sp)
   41648:	00800044 	movi	r2,1
   4164c:	9546b03a 	or	r3,r18,r21
   41650:	003fee06 	br	4160c <__alt_data_end+0xfffcbaac>
   41654:	da012a17 	ldw	r8,1192(sp)
   41658:	df012a15 	stw	fp,1192(sp)
   4165c:	9839883a 	mov	fp,r19
   41660:	dcc12b03 	ldbu	r19,1196(sp)
   41664:	01400174 	movhi	r5,5
   41668:	29419d04 	addi	r5,r5,1652
   4166c:	dcc12785 	stb	r19,1182(sp)
   41670:	d9413b15 	stw	r5,1260(sp)
   41674:	e0c0080c 	andi	r3,fp,32
   41678:	d8812d17 	ldw	r2,1204(sp)
   4167c:	18002e26 	beq	r3,zero,41738 <___vfprintf_internal_r+0xb6c>
   41680:	d9412d17 	ldw	r5,1204(sp)
   41684:	14800017 	ldw	r18,0(r2)
   41688:	15400117 	ldw	r21,4(r2)
   4168c:	29400204 	addi	r5,r5,8
   41690:	d9412d15 	stw	r5,1204(sp)
   41694:	e080004c 	andi	r2,fp,1
   41698:	10025c26 	beq	r2,zero,4200c <___vfprintf_internal_r+0x1440>
   4169c:	9546b03a 	or	r3,r18,r21
   416a0:	18038f26 	beq	r3,zero,424e0 <___vfprintf_internal_r+0x1914>
   416a4:	00800c04 	movi	r2,48
   416a8:	d8812705 	stb	r2,1180(sp)
   416ac:	dc012745 	stb	r16,1181(sp)
   416b0:	e7000094 	ori	fp,fp,2
   416b4:	00800084 	movi	r2,2
   416b8:	003fd406 	br	4160c <__alt_data_end+0xfffcbaac>
   416bc:	9cc00814 	ori	r19,r19,32
   416c0:	e005883a 	mov	r2,fp
   416c4:	e4000007 	ldb	r16,0(fp)
   416c8:	003da806 	br	40d6c <__alt_data_end+0xfffcb20c>
   416cc:	da012a17 	ldw	r8,1192(sp)
   416d0:	df012a15 	stw	fp,1192(sp)
   416d4:	9839883a 	mov	fp,r19
   416d8:	e0c0080c 	andi	r3,fp,32
   416dc:	d8812d17 	ldw	r2,1204(sp)
   416e0:	183fd41e 	bne	r3,zero,41634 <__alt_data_end+0xfffcbad4>
   416e4:	e0c0040c 	andi	r3,fp,16
   416e8:	18035f26 	beq	r3,zero,42468 <___vfprintf_internal_r+0x189c>
   416ec:	d9412d17 	ldw	r5,1204(sp)
   416f0:	14800017 	ldw	r18,0(r2)
   416f4:	002b883a 	mov	r21,zero
   416f8:	29400104 	addi	r5,r5,4
   416fc:	d9412d15 	stw	r5,1204(sp)
   41700:	00800044 	movi	r2,1
   41704:	9007883a 	mov	r3,r18
   41708:	003fc006 	br	4160c <__alt_data_end+0xfffcbaac>
   4170c:	da012a17 	ldw	r8,1192(sp)
   41710:	df012a15 	stw	fp,1192(sp)
   41714:	9839883a 	mov	fp,r19
   41718:	dcc12b03 	ldbu	r19,1196(sp)
   4171c:	01000174 	movhi	r4,5
   41720:	2101a204 	addi	r4,r4,1672
   41724:	d9013b15 	stw	r4,1260(sp)
   41728:	dcc12785 	stb	r19,1182(sp)
   4172c:	e0c0080c 	andi	r3,fp,32
   41730:	d8812d17 	ldw	r2,1204(sp)
   41734:	183fd21e 	bne	r3,zero,41680 <__alt_data_end+0xfffcbb20>
   41738:	e0c0040c 	andi	r3,fp,16
   4173c:	18035426 	beq	r3,zero,42490 <___vfprintf_internal_r+0x18c4>
   41740:	d8c12d17 	ldw	r3,1204(sp)
   41744:	14800017 	ldw	r18,0(r2)
   41748:	002b883a 	mov	r21,zero
   4174c:	18c00104 	addi	r3,r3,4
   41750:	d8c12d15 	stw	r3,1204(sp)
   41754:	003fcf06 	br	41694 <__alt_data_end+0xfffcbb34>
   41758:	e4000007 	ldb	r16,0(fp)
   4175c:	00801b04 	movi	r2,108
   41760:	8083f726 	beq	r16,r2,42740 <___vfprintf_internal_r+0x1b74>
   41764:	9cc00414 	ori	r19,r19,16
   41768:	e005883a 	mov	r2,fp
   4176c:	003d7f06 	br	40d6c <__alt_data_end+0xfffcb20c>
   41770:	da012a17 	ldw	r8,1192(sp)
   41774:	df012a15 	stw	fp,1192(sp)
   41778:	9839883a 	mov	fp,r19
   4177c:	dcc12b03 	ldbu	r19,1196(sp)
   41780:	e080080c 	andi	r2,fp,32
   41784:	dcc12785 	stb	r19,1182(sp)
   41788:	10032226 	beq	r2,zero,42414 <___vfprintf_internal_r+0x1848>
   4178c:	d9412d17 	ldw	r5,1204(sp)
   41790:	d9012f17 	ldw	r4,1212(sp)
   41794:	28800017 	ldw	r2,0(r5)
   41798:	2007d7fa 	srai	r3,r4,31
   4179c:	29400104 	addi	r5,r5,4
   417a0:	d9412d15 	stw	r5,1204(sp)
   417a4:	11000015 	stw	r4,0(r2)
   417a8:	10c00115 	stw	r3,4(r2)
   417ac:	003d4406 	br	40cc0 <__alt_data_end+0xfffcb160>
   417b0:	da012a17 	ldw	r8,1192(sp)
   417b4:	df012a15 	stw	fp,1192(sp)
   417b8:	9839883a 	mov	fp,r19
   417bc:	e0c0080c 	andi	r3,fp,32
   417c0:	d8812d17 	ldw	r2,1204(sp)
   417c4:	183f8a1e 	bne	r3,zero,415f0 <__alt_data_end+0xfffcba90>
   417c8:	e0c0040c 	andi	r3,fp,16
   417cc:	18031c26 	beq	r3,zero,42440 <___vfprintf_internal_r+0x1874>
   417d0:	14800017 	ldw	r18,0(r2)
   417d4:	d8812d17 	ldw	r2,1204(sp)
   417d8:	002b883a 	mov	r21,zero
   417dc:	9007883a 	mov	r3,r18
   417e0:	10800104 	addi	r2,r2,4
   417e4:	d8812d15 	stw	r2,1204(sp)
   417e8:	0005883a 	mov	r2,zero
   417ec:	003f8706 	br	4160c <__alt_data_end+0xfffcbaac>
   417f0:	d9412d17 	ldw	r5,1204(sp)
   417f4:	00800c04 	movi	r2,48
   417f8:	d8812705 	stb	r2,1180(sp)
   417fc:	2c800017 	ldw	r18,0(r5)
   41800:	00801e04 	movi	r2,120
   41804:	d8812745 	stb	r2,1181(sp)
   41808:	00800174 	movhi	r2,5
   4180c:	1081a204 	addi	r2,r2,1672
   41810:	29400104 	addi	r5,r5,4
   41814:	da012a17 	ldw	r8,1192(sp)
   41818:	d8813b15 	stw	r2,1260(sp)
   4181c:	df012a15 	stw	fp,1192(sp)
   41820:	002b883a 	mov	r21,zero
   41824:	9f000094 	ori	fp,r19,2
   41828:	d9412d15 	stw	r5,1204(sp)
   4182c:	00800084 	movi	r2,2
   41830:	04001e04 	movi	r16,120
   41834:	9007883a 	mov	r3,r18
   41838:	003f7406 	br	4160c <__alt_data_end+0xfffcbaac>
   4183c:	da012a17 	ldw	r8,1192(sp)
   41840:	df012a15 	stw	fp,1192(sp)
   41844:	9839883a 	mov	fp,r19
   41848:	dcc12b03 	ldbu	r19,1196(sp)
   4184c:	e080080c 	andi	r2,fp,32
   41850:	d8c12d17 	ldw	r3,1204(sp)
   41854:	dcc12785 	stb	r19,1182(sp)
   41858:	103e321e 	bne	r2,zero,41124 <__alt_data_end+0xfffcb5c4>
   4185c:	e080040c 	andi	r2,fp,16
   41860:	10031326 	beq	r2,zero,424b0 <___vfprintf_internal_r+0x18e4>
   41864:	1c800017 	ldw	r18,0(r3)
   41868:	d9412d17 	ldw	r5,1204(sp)
   4186c:	902bd7fa 	srai	r21,r18,31
   41870:	29400104 	addi	r5,r5,4
   41874:	d9412d15 	stw	r5,1204(sp)
   41878:	a805883a 	mov	r2,r21
   4187c:	003e2f06 	br	4113c <__alt_data_end+0xfffcb5dc>
   41880:	9cc01014 	ori	r19,r19,64
   41884:	e005883a 	mov	r2,fp
   41888:	e4000007 	ldb	r16,0(fp)
   4188c:	003d3706 	br	40d6c <__alt_data_end+0xfffcb20c>
   41890:	d8c12d17 	ldw	r3,1204(sp)
   41894:	d9012d17 	ldw	r4,1204(sp)
   41898:	da012a17 	ldw	r8,1192(sp)
   4189c:	18800017 	ldw	r2,0(r3)
   418a0:	21000104 	addi	r4,r4,4
   418a4:	00c00044 	movi	r3,1
   418a8:	df012a15 	stw	fp,1192(sp)
   418ac:	d8c12b15 	stw	r3,1196(sp)
   418b0:	9839883a 	mov	fp,r19
   418b4:	d8012785 	stb	zero,1182(sp)
   418b8:	d8810405 	stb	r2,1040(sp)
   418bc:	d9012d15 	stw	r4,1204(sp)
   418c0:	1823883a 	mov	r17,r3
   418c4:	d8c10404 	addi	r3,sp,1040
   418c8:	d8013215 	stw	zero,1224(sp)
   418cc:	d8013415 	stw	zero,1232(sp)
   418d0:	d8c13115 	stw	r3,1220(sp)
   418d4:	0005883a 	mov	r2,zero
   418d8:	003e4306 	br	411e8 <__alt_data_end+0xfffcb688>
   418dc:	d8812b07 	ldb	r2,1196(sp)
   418e0:	1002fc1e 	bne	r2,zero,424d4 <___vfprintf_internal_r+0x1908>
   418e4:	00c00804 	movi	r3,32
   418e8:	d8c12b05 	stb	r3,1196(sp)
   418ec:	e005883a 	mov	r2,fp
   418f0:	e4000007 	ldb	r16,0(fp)
   418f4:	003d1d06 	br	40d6c <__alt_data_end+0xfffcb20c>
   418f8:	9cc00054 	ori	r19,r19,1
   418fc:	e005883a 	mov	r2,fp
   41900:	e4000007 	ldb	r16,0(fp)
   41904:	003d1906 	br	40d6c <__alt_data_end+0xfffcb20c>
   41908:	d9012d17 	ldw	r4,1204(sp)
   4190c:	d9412d17 	ldw	r5,1204(sp)
   41910:	21000017 	ldw	r4,0(r4)
   41914:	28c00104 	addi	r3,r5,4
   41918:	d9012e15 	stw	r4,1208(sp)
   4191c:	20038c16 	blt	r4,zero,42750 <___vfprintf_internal_r+0x1b84>
   41920:	d8c12d15 	stw	r3,1204(sp)
   41924:	e005883a 	mov	r2,fp
   41928:	e4000007 	ldb	r16,0(fp)
   4192c:	003d0f06 	br	40d6c <__alt_data_end+0xfffcb20c>
   41930:	00c00ac4 	movi	r3,43
   41934:	d8c12b05 	stb	r3,1196(sp)
   41938:	e005883a 	mov	r2,fp
   4193c:	e4000007 	ldb	r16,0(fp)
   41940:	003d0a06 	br	40d6c <__alt_data_end+0xfffcb20c>
   41944:	d8c12d17 	ldw	r3,1204(sp)
   41948:	d9012d17 	ldw	r4,1204(sp)
   4194c:	da012a17 	ldw	r8,1192(sp)
   41950:	18c00017 	ldw	r3,0(r3)
   41954:	df012a15 	stw	fp,1192(sp)
   41958:	d8012785 	stb	zero,1182(sp)
   4195c:	d8c13115 	stw	r3,1220(sp)
   41960:	9839883a 	mov	fp,r19
   41964:	24800104 	addi	r18,r4,4
   41968:	1803f726 	beq	r3,zero,42948 <___vfprintf_internal_r+0x1d7c>
   4196c:	d9013117 	ldw	r4,1220(sp)
   41970:	48038916 	blt	r9,zero,42798 <___vfprintf_internal_r+0x1bcc>
   41974:	480d883a 	mov	r6,r9
   41978:	000b883a 	mov	r5,zero
   4197c:	da013f15 	stw	r8,1276(sp)
   41980:	da413e15 	stw	r9,1272(sp)
   41984:	00461e00 	call	461e0 <memchr>
   41988:	da013f17 	ldw	r8,1276(sp)
   4198c:	da413e17 	ldw	r9,1272(sp)
   41990:	10045926 	beq	r2,zero,42af8 <___vfprintf_internal_r+0x1f2c>
   41994:	d8c13117 	ldw	r3,1220(sp)
   41998:	10e3c83a 	sub	r17,r2,r3
   4199c:	4c433516 	blt	r9,r17,42674 <___vfprintf_internal_r+0x1aa8>
   419a0:	8805883a 	mov	r2,r17
   419a4:	88038116 	blt	r17,zero,427ac <___vfprintf_internal_r+0x1be0>
   419a8:	dcc12783 	ldbu	r19,1182(sp)
   419ac:	d8812b15 	stw	r2,1196(sp)
   419b0:	dc812d15 	stw	r18,1204(sp)
   419b4:	d8013215 	stw	zero,1224(sp)
   419b8:	d8013415 	stw	zero,1232(sp)
   419bc:	003e0306 	br	411cc <__alt_data_end+0xfffcb66c>
   419c0:	da012a17 	ldw	r8,1192(sp)
   419c4:	df012a15 	stw	fp,1192(sp)
   419c8:	9839883a 	mov	fp,r19
   419cc:	dcc12b03 	ldbu	r19,1196(sp)
   419d0:	dcc12785 	stb	r19,1182(sp)
   419d4:	803d8f26 	beq	r16,zero,41014 <__alt_data_end+0xfffcb4b4>
   419d8:	00c00044 	movi	r3,1
   419dc:	d8c12b15 	stw	r3,1196(sp)
   419e0:	dc010405 	stb	r16,1040(sp)
   419e4:	d8012785 	stb	zero,1182(sp)
   419e8:	003fb506 	br	418c0 <__alt_data_end+0xfffcbd60>
   419ec:	d8c12017 	ldw	r3,1152(sp)
   419f0:	003e3506 	br	412c8 <__alt_data_end+0xfffcb768>
   419f4:	10803fcc 	andi	r2,r2,255
   419f8:	00c00044 	movi	r3,1
   419fc:	10fddc1e 	bne	r2,r3,41170 <__alt_data_end+0xfffcb610>
   41a00:	a800021e 	bne	r21,zero,41a0c <___vfprintf_internal_r+0xe40>
   41a04:	00800244 	movi	r2,9
   41a08:	14801e2e 	bgeu	r2,r18,41a84 <___vfprintf_internal_r+0xeb8>
   41a0c:	dc012b15 	stw	r16,1196(sp)
   41a10:	dc410e04 	addi	r17,sp,1080
   41a14:	9021883a 	mov	r16,r18
   41a18:	da012c15 	stw	r8,1200(sp)
   41a1c:	a825883a 	mov	r18,r21
   41a20:	482b883a 	mov	r21,r9
   41a24:	8009883a 	mov	r4,r16
   41a28:	900b883a 	mov	r5,r18
   41a2c:	01800284 	movi	r6,10
   41a30:	000f883a 	mov	r7,zero
   41a34:	004a5040 	call	4a504 <__umoddi3>
   41a38:	10800c04 	addi	r2,r2,48
   41a3c:	8c7fffc4 	addi	r17,r17,-1
   41a40:	8009883a 	mov	r4,r16
   41a44:	900b883a 	mov	r5,r18
   41a48:	01800284 	movi	r6,10
   41a4c:	000f883a 	mov	r7,zero
   41a50:	88800005 	stb	r2,0(r17)
   41a54:	0049ec40 	call	49ec4 <__udivdi3>
   41a58:	1021883a 	mov	r16,r2
   41a5c:	10c4b03a 	or	r2,r2,r3
   41a60:	1825883a 	mov	r18,r3
   41a64:	103fef1e 	bne	r2,zero,41a24 <__alt_data_end+0xfffcbec4>
   41a68:	d9012817 	ldw	r4,1184(sp)
   41a6c:	dc413115 	stw	r17,1220(sp)
   41a70:	dc012b17 	ldw	r16,1196(sp)
   41a74:	da012c17 	ldw	r8,1200(sp)
   41a78:	a813883a 	mov	r9,r21
   41a7c:	2463c83a 	sub	r17,r4,r17
   41a80:	003dcd06 	br	411b8 <__alt_data_end+0xfffcb658>
   41a84:	94800c04 	addi	r18,r18,48
   41a88:	d8c10dc4 	addi	r3,sp,1079
   41a8c:	dc810dc5 	stb	r18,1079(sp)
   41a90:	dc413c17 	ldw	r17,1264(sp)
   41a94:	d8c13115 	stw	r3,1220(sp)
   41a98:	003dc706 	br	411b8 <__alt_data_end+0xfffcb658>
   41a9c:	00801944 	movi	r2,101
   41aa0:	1400720e 	bge	r2,r16,41c6c <___vfprintf_internal_r+0x10a0>
   41aa4:	d9013717 	ldw	r4,1244(sp)
   41aa8:	d9413917 	ldw	r5,1252(sp)
   41aac:	000d883a 	mov	r6,zero
   41ab0:	000f883a 	mov	r7,zero
   41ab4:	d8c13d15 	stw	r3,1268(sp)
   41ab8:	da013f15 	stw	r8,1276(sp)
   41abc:	004bd3c0 	call	4bd3c <__eqdf2>
   41ac0:	d8c13d17 	ldw	r3,1268(sp)
   41ac4:	da013f17 	ldw	r8,1276(sp)
   41ac8:	1000f41e 	bne	r2,zero,41e9c <___vfprintf_internal_r+0x12d0>
   41acc:	d8811f17 	ldw	r2,1148(sp)
   41ad0:	01000174 	movhi	r4,5
   41ad4:	2101a904 	addi	r4,r4,1700
   41ad8:	18c00044 	addi	r3,r3,1
   41adc:	10800044 	addi	r2,r2,1
   41ae0:	41000015 	stw	r4,0(r8)
   41ae4:	01000044 	movi	r4,1
   41ae8:	41000115 	stw	r4,4(r8)
   41aec:	d8c12015 	stw	r3,1152(sp)
   41af0:	d8811f15 	stw	r2,1148(sp)
   41af4:	010001c4 	movi	r4,7
   41af8:	20828d16 	blt	r4,r2,42530 <___vfprintf_internal_r+0x1964>
   41afc:	42000204 	addi	r8,r8,8
   41b00:	d8812617 	ldw	r2,1176(sp)
   41b04:	d9413317 	ldw	r5,1228(sp)
   41b08:	11400216 	blt	r2,r5,41b14 <___vfprintf_internal_r+0xf48>
   41b0c:	e080004c 	andi	r2,fp,1
   41b10:	103e4126 	beq	r2,zero,41418 <__alt_data_end+0xfffcb8b8>
   41b14:	d8813817 	ldw	r2,1248(sp)
   41b18:	d9013517 	ldw	r4,1236(sp)
   41b1c:	d9413817 	ldw	r5,1248(sp)
   41b20:	1887883a 	add	r3,r3,r2
   41b24:	d8811f17 	ldw	r2,1148(sp)
   41b28:	41000015 	stw	r4,0(r8)
   41b2c:	41400115 	stw	r5,4(r8)
   41b30:	10800044 	addi	r2,r2,1
   41b34:	d8c12015 	stw	r3,1152(sp)
   41b38:	d8811f15 	stw	r2,1148(sp)
   41b3c:	010001c4 	movi	r4,7
   41b40:	20830916 	blt	r4,r2,42768 <___vfprintf_internal_r+0x1b9c>
   41b44:	42000204 	addi	r8,r8,8
   41b48:	d8813317 	ldw	r2,1228(sp)
   41b4c:	143fffc4 	addi	r16,r2,-1
   41b50:	043e310e 	bge	zero,r16,41418 <__alt_data_end+0xfffcb8b8>
   41b54:	04400404 	movi	r17,16
   41b58:	d8811f17 	ldw	r2,1148(sp)
   41b5c:	8c007e0e 	bge	r17,r16,41d58 <___vfprintf_internal_r+0x118c>
   41b60:	01400174 	movhi	r5,5
   41b64:	2941a984 	addi	r5,r5,1702
   41b68:	d9412c15 	stw	r5,1200(sp)
   41b6c:	04c001c4 	movi	r19,7
   41b70:	00000306 	br	41b80 <___vfprintf_internal_r+0xfb4>
   41b74:	42000204 	addi	r8,r8,8
   41b78:	843ffc04 	addi	r16,r16,-16
   41b7c:	8c00790e 	bge	r17,r16,41d64 <___vfprintf_internal_r+0x1198>
   41b80:	18c00404 	addi	r3,r3,16
   41b84:	10800044 	addi	r2,r2,1
   41b88:	45000015 	stw	r20,0(r8)
   41b8c:	44400115 	stw	r17,4(r8)
   41b90:	d8c12015 	stw	r3,1152(sp)
   41b94:	d8811f15 	stw	r2,1148(sp)
   41b98:	98bff60e 	bge	r19,r2,41b74 <__alt_data_end+0xfffcc014>
   41b9c:	b809883a 	mov	r4,r23
   41ba0:	b00b883a 	mov	r5,r22
   41ba4:	d9811e04 	addi	r6,sp,1144
   41ba8:	004800c0 	call	4800c <__sprint_r>
   41bac:	103d1f1e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   41bb0:	d8c12017 	ldw	r3,1152(sp)
   41bb4:	d8811f17 	ldw	r2,1148(sp)
   41bb8:	da000404 	addi	r8,sp,16
   41bbc:	003fee06 	br	41b78 <__alt_data_end+0xfffcc018>
   41bc0:	d9412e17 	ldw	r5,1208(sp)
   41bc4:	d8812b17 	ldw	r2,1196(sp)
   41bc8:	28a7c83a 	sub	r19,r5,r2
   41bcc:	04fddc0e 	bge	zero,r19,41340 <__alt_data_end+0xfffcb7e0>
   41bd0:	05400404 	movi	r21,16
   41bd4:	d8811f17 	ldw	r2,1148(sp)
   41bd8:	acc3870e 	bge	r21,r19,429f8 <___vfprintf_internal_r+0x1e2c>
   41bdc:	01400174 	movhi	r5,5
   41be0:	2941a984 	addi	r5,r5,1702
   41be4:	d9412c15 	stw	r5,1200(sp)
   41be8:	048001c4 	movi	r18,7
   41bec:	00000306 	br	41bfc <___vfprintf_internal_r+0x1030>
   41bf0:	9cfffc04 	addi	r19,r19,-16
   41bf4:	42000204 	addi	r8,r8,8
   41bf8:	acc0110e 	bge	r21,r19,41c40 <___vfprintf_internal_r+0x1074>
   41bfc:	18c00404 	addi	r3,r3,16
   41c00:	10800044 	addi	r2,r2,1
   41c04:	45000015 	stw	r20,0(r8)
   41c08:	45400115 	stw	r21,4(r8)
   41c0c:	d8c12015 	stw	r3,1152(sp)
   41c10:	d8811f15 	stw	r2,1148(sp)
   41c14:	90bff60e 	bge	r18,r2,41bf0 <__alt_data_end+0xfffcc090>
   41c18:	b809883a 	mov	r4,r23
   41c1c:	b00b883a 	mov	r5,r22
   41c20:	d9811e04 	addi	r6,sp,1144
   41c24:	004800c0 	call	4800c <__sprint_r>
   41c28:	103d001e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   41c2c:	9cfffc04 	addi	r19,r19,-16
   41c30:	d8c12017 	ldw	r3,1152(sp)
   41c34:	d8811f17 	ldw	r2,1148(sp)
   41c38:	da000404 	addi	r8,sp,16
   41c3c:	acffef16 	blt	r21,r19,41bfc <__alt_data_end+0xfffcc09c>
   41c40:	d9012c17 	ldw	r4,1200(sp)
   41c44:	1cc7883a 	add	r3,r3,r19
   41c48:	10800044 	addi	r2,r2,1
   41c4c:	41000015 	stw	r4,0(r8)
   41c50:	44c00115 	stw	r19,4(r8)
   41c54:	d8c12015 	stw	r3,1152(sp)
   41c58:	d8811f15 	stw	r2,1148(sp)
   41c5c:	010001c4 	movi	r4,7
   41c60:	20817816 	blt	r4,r2,42244 <___vfprintf_internal_r+0x1678>
   41c64:	42000204 	addi	r8,r8,8
   41c68:	003db506 	br	41340 <__alt_data_end+0xfffcb7e0>
   41c6c:	d9413317 	ldw	r5,1228(sp)
   41c70:	00800044 	movi	r2,1
   41c74:	18c00044 	addi	r3,r3,1
   41c78:	11413e0e 	bge	r2,r5,42174 <___vfprintf_internal_r+0x15a8>
   41c7c:	dc011f17 	ldw	r16,1148(sp)
   41c80:	d8813117 	ldw	r2,1220(sp)
   41c84:	d8c12015 	stw	r3,1152(sp)
   41c88:	84000044 	addi	r16,r16,1
   41c8c:	40800015 	stw	r2,0(r8)
   41c90:	00800044 	movi	r2,1
   41c94:	40800115 	stw	r2,4(r8)
   41c98:	dc011f15 	stw	r16,1148(sp)
   41c9c:	008001c4 	movi	r2,7
   41ca0:	14015616 	blt	r2,r16,421fc <___vfprintf_internal_r+0x1630>
   41ca4:	42000204 	addi	r8,r8,8
   41ca8:	d9013817 	ldw	r4,1248(sp)
   41cac:	d9413517 	ldw	r5,1236(sp)
   41cb0:	84000044 	addi	r16,r16,1
   41cb4:	1907883a 	add	r3,r3,r4
   41cb8:	41400015 	stw	r5,0(r8)
   41cbc:	41000115 	stw	r4,4(r8)
   41cc0:	d8c12015 	stw	r3,1152(sp)
   41cc4:	dc011f15 	stw	r16,1148(sp)
   41cc8:	008001c4 	movi	r2,7
   41ccc:	14015416 	blt	r2,r16,42220 <___vfprintf_internal_r+0x1654>
   41cd0:	44400204 	addi	r17,r8,8
   41cd4:	d9013717 	ldw	r4,1244(sp)
   41cd8:	d9413917 	ldw	r5,1252(sp)
   41cdc:	000d883a 	mov	r6,zero
   41ce0:	000f883a 	mov	r7,zero
   41ce4:	d8c13d15 	stw	r3,1268(sp)
   41ce8:	004bd3c0 	call	4bd3c <__eqdf2>
   41cec:	d8c13d17 	ldw	r3,1268(sp)
   41cf0:	1000a726 	beq	r2,zero,41f90 <___vfprintf_internal_r+0x13c4>
   41cf4:	d9013317 	ldw	r4,1228(sp)
   41cf8:	d9413117 	ldw	r5,1220(sp)
   41cfc:	84000044 	addi	r16,r16,1
   41d00:	20bfffc4 	addi	r2,r4,-1
   41d04:	1887883a 	add	r3,r3,r2
   41d08:	29000044 	addi	r4,r5,1
   41d0c:	88800115 	stw	r2,4(r17)
   41d10:	89000015 	stw	r4,0(r17)
   41d14:	d8c12015 	stw	r3,1152(sp)
   41d18:	dc011f15 	stw	r16,1148(sp)
   41d1c:	008001c4 	movi	r2,7
   41d20:	14012d16 	blt	r2,r16,421d8 <___vfprintf_internal_r+0x160c>
   41d24:	8c400204 	addi	r17,r17,8
   41d28:	d9413a17 	ldw	r5,1256(sp)
   41d2c:	dcc122c4 	addi	r19,sp,1163
   41d30:	84000044 	addi	r16,r16,1
   41d34:	28c7883a 	add	r3,r5,r3
   41d38:	8cc00015 	stw	r19,0(r17)
   41d3c:	89400115 	stw	r5,4(r17)
   41d40:	d8c12015 	stw	r3,1152(sp)
   41d44:	dc011f15 	stw	r16,1148(sp)
   41d48:	008001c4 	movi	r2,7
   41d4c:	14000e16 	blt	r2,r16,41d88 <___vfprintf_internal_r+0x11bc>
   41d50:	8a000204 	addi	r8,r17,8
   41d54:	003db006 	br	41418 <__alt_data_end+0xfffcb8b8>
   41d58:	01000174 	movhi	r4,5
   41d5c:	2101a984 	addi	r4,r4,1702
   41d60:	d9012c15 	stw	r4,1200(sp)
   41d64:	d9012c17 	ldw	r4,1200(sp)
   41d68:	1c07883a 	add	r3,r3,r16
   41d6c:	44000115 	stw	r16,4(r8)
   41d70:	41000015 	stw	r4,0(r8)
   41d74:	10800044 	addi	r2,r2,1
   41d78:	d8c12015 	stw	r3,1152(sp)
   41d7c:	d8811f15 	stw	r2,1148(sp)
   41d80:	010001c4 	movi	r4,7
   41d84:	20bda30e 	bge	r4,r2,41414 <__alt_data_end+0xfffcb8b4>
   41d88:	b809883a 	mov	r4,r23
   41d8c:	b00b883a 	mov	r5,r22
   41d90:	d9811e04 	addi	r6,sp,1144
   41d94:	004800c0 	call	4800c <__sprint_r>
   41d98:	103ca41e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   41d9c:	d8c12017 	ldw	r3,1152(sp)
   41da0:	da000404 	addi	r8,sp,16
   41da4:	003d9c06 	br	41418 <__alt_data_end+0xfffcb8b8>
   41da8:	b809883a 	mov	r4,r23
   41dac:	b00b883a 	mov	r5,r22
   41db0:	d9811e04 	addi	r6,sp,1144
   41db4:	004800c0 	call	4800c <__sprint_r>
   41db8:	103dd226 	beq	r2,zero,41504 <__alt_data_end+0xfffcb9a4>
   41dbc:	003c9b06 	br	4102c <__alt_data_end+0xfffcb4cc>
   41dc0:	10803fcc 	andi	r2,r2,255
   41dc4:	1000311e 	bne	r2,zero,41e8c <___vfprintf_internal_r+0x12c0>
   41dc8:	e080004c 	andi	r2,fp,1
   41dcc:	10002f26 	beq	r2,zero,41e8c <___vfprintf_internal_r+0x12c0>
   41dd0:	00800c04 	movi	r2,48
   41dd4:	d8c10dc4 	addi	r3,sp,1079
   41dd8:	d8810dc5 	stb	r2,1079(sp)
   41ddc:	dc413c17 	ldw	r17,1264(sp)
   41de0:	d8c13115 	stw	r3,1220(sp)
   41de4:	003cf406 	br	411b8 <__alt_data_end+0xfffcb658>
   41de8:	b809883a 	mov	r4,r23
   41dec:	b00b883a 	mov	r5,r22
   41df0:	d9811e04 	addi	r6,sp,1144
   41df4:	004800c0 	call	4800c <__sprint_r>
   41df8:	103c8c1e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   41dfc:	d8c12017 	ldw	r3,1152(sp)
   41e00:	da000404 	addi	r8,sp,16
   41e04:	003d7706 	br	413e4 <__alt_data_end+0xfffcb884>
   41e08:	b809883a 	mov	r4,r23
   41e0c:	b00b883a 	mov	r5,r22
   41e10:	d9811e04 	addi	r6,sp,1144
   41e14:	004800c0 	call	4800c <__sprint_r>
   41e18:	103c841e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   41e1c:	d8c12017 	ldw	r3,1152(sp)
   41e20:	da000404 	addi	r8,sp,16
   41e24:	003d3506 	br	412fc <__alt_data_end+0xfffcb79c>
   41e28:	b809883a 	mov	r4,r23
   41e2c:	b00b883a 	mov	r5,r22
   41e30:	d9811e04 	addi	r6,sp,1144
   41e34:	004800c0 	call	4800c <__sprint_r>
   41e38:	103c7c1e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   41e3c:	d8c12017 	ldw	r3,1152(sp)
   41e40:	da000404 	addi	r8,sp,16
   41e44:	003d3b06 	br	41334 <__alt_data_end+0xfffcb7d4>
   41e48:	d9413b17 	ldw	r5,1260(sp)
   41e4c:	d8c10e04 	addi	r3,sp,1080
   41e50:	908003cc 	andi	r2,r18,15
   41e54:	a808973a 	slli	r4,r21,28
   41e58:	2885883a 	add	r2,r5,r2
   41e5c:	9024d13a 	srli	r18,r18,4
   41e60:	10800003 	ldbu	r2,0(r2)
   41e64:	a82ad13a 	srli	r21,r21,4
   41e68:	18ffffc4 	addi	r3,r3,-1
   41e6c:	24a4b03a 	or	r18,r4,r18
   41e70:	18800005 	stb	r2,0(r3)
   41e74:	9544b03a 	or	r2,r18,r21
   41e78:	103ff51e 	bne	r2,zero,41e50 <__alt_data_end+0xfffcc2f0>
   41e7c:	d9412817 	ldw	r5,1184(sp)
   41e80:	d8c13115 	stw	r3,1220(sp)
   41e84:	28e3c83a 	sub	r17,r5,r3
   41e88:	003ccb06 	br	411b8 <__alt_data_end+0xfffcb658>
   41e8c:	d8c10e04 	addi	r3,sp,1080
   41e90:	0023883a 	mov	r17,zero
   41e94:	d8c13115 	stw	r3,1220(sp)
   41e98:	003cc706 	br	411b8 <__alt_data_end+0xfffcb658>
   41e9c:	dc012617 	ldw	r16,1176(sp)
   41ea0:	0401ab0e 	bge	zero,r16,42550 <___vfprintf_internal_r+0x1984>
   41ea4:	d8813317 	ldw	r2,1228(sp)
   41ea8:	d9413117 	ldw	r5,1220(sp)
   41eac:	d9013417 	ldw	r4,1232(sp)
   41eb0:	1023883a 	mov	r17,r2
   41eb4:	28a1883a 	add	r16,r5,r2
   41eb8:	2080010e 	bge	r4,r2,41ec0 <___vfprintf_internal_r+0x12f4>
   41ebc:	2023883a 	mov	r17,r4
   41ec0:	04400b0e 	bge	zero,r17,41ef0 <___vfprintf_internal_r+0x1324>
   41ec4:	d8811f17 	ldw	r2,1148(sp)
   41ec8:	d9413117 	ldw	r5,1220(sp)
   41ecc:	1c47883a 	add	r3,r3,r17
   41ed0:	10800044 	addi	r2,r2,1
   41ed4:	41400015 	stw	r5,0(r8)
   41ed8:	44400115 	stw	r17,4(r8)
   41edc:	d8c12015 	stw	r3,1152(sp)
   41ee0:	d8811f15 	stw	r2,1148(sp)
   41ee4:	010001c4 	movi	r4,7
   41ee8:	20826716 	blt	r4,r2,42888 <___vfprintf_internal_r+0x1cbc>
   41eec:	42000204 	addi	r8,r8,8
   41ef0:	88026316 	blt	r17,zero,42880 <___vfprintf_internal_r+0x1cb4>
   41ef4:	d8813417 	ldw	r2,1232(sp)
   41ef8:	1463c83a 	sub	r17,r2,r17
   41efc:	0440590e 	bge	zero,r17,42064 <___vfprintf_internal_r+0x1498>
   41f00:	04c00404 	movi	r19,16
   41f04:	d8811f17 	ldw	r2,1148(sp)
   41f08:	9c41770e 	bge	r19,r17,424e8 <___vfprintf_internal_r+0x191c>
   41f0c:	01400174 	movhi	r5,5
   41f10:	2941a984 	addi	r5,r5,1702
   41f14:	d9412c15 	stw	r5,1200(sp)
   41f18:	054001c4 	movi	r21,7
   41f1c:	00000306 	br	41f2c <___vfprintf_internal_r+0x1360>
   41f20:	42000204 	addi	r8,r8,8
   41f24:	8c7ffc04 	addi	r17,r17,-16
   41f28:	9c41720e 	bge	r19,r17,424f4 <___vfprintf_internal_r+0x1928>
   41f2c:	18c00404 	addi	r3,r3,16
   41f30:	10800044 	addi	r2,r2,1
   41f34:	45000015 	stw	r20,0(r8)
   41f38:	44c00115 	stw	r19,4(r8)
   41f3c:	d8c12015 	stw	r3,1152(sp)
   41f40:	d8811f15 	stw	r2,1148(sp)
   41f44:	a8bff60e 	bge	r21,r2,41f20 <__alt_data_end+0xfffcc3c0>
   41f48:	b809883a 	mov	r4,r23
   41f4c:	b00b883a 	mov	r5,r22
   41f50:	d9811e04 	addi	r6,sp,1144
   41f54:	004800c0 	call	4800c <__sprint_r>
   41f58:	103c341e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   41f5c:	d8c12017 	ldw	r3,1152(sp)
   41f60:	d8811f17 	ldw	r2,1148(sp)
   41f64:	da000404 	addi	r8,sp,16
   41f68:	003fee06 	br	41f24 <__alt_data_end+0xfffcc3c4>
   41f6c:	b809883a 	mov	r4,r23
   41f70:	b00b883a 	mov	r5,r22
   41f74:	d9811e04 	addi	r6,sp,1144
   41f78:	004800c0 	call	4800c <__sprint_r>
   41f7c:	103c2b1e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   41f80:	d8c12017 	ldw	r3,1152(sp)
   41f84:	d8812787 	ldb	r2,1182(sp)
   41f88:	da000404 	addi	r8,sp,16
   41f8c:	003cce06 	br	412c8 <__alt_data_end+0xfffcb768>
   41f90:	d8813317 	ldw	r2,1228(sp)
   41f94:	14ffffc4 	addi	r19,r2,-1
   41f98:	04ff630e 	bge	zero,r19,41d28 <__alt_data_end+0xfffcc1c8>
   41f9c:	05400404 	movi	r21,16
   41fa0:	acc0810e 	bge	r21,r19,421a8 <___vfprintf_internal_r+0x15dc>
   41fa4:	01400174 	movhi	r5,5
   41fa8:	2941a984 	addi	r5,r5,1702
   41fac:	d9412c15 	stw	r5,1200(sp)
   41fb0:	01c001c4 	movi	r7,7
   41fb4:	00000306 	br	41fc4 <___vfprintf_internal_r+0x13f8>
   41fb8:	8c400204 	addi	r17,r17,8
   41fbc:	9cfffc04 	addi	r19,r19,-16
   41fc0:	acc07c0e 	bge	r21,r19,421b4 <___vfprintf_internal_r+0x15e8>
   41fc4:	18c00404 	addi	r3,r3,16
   41fc8:	84000044 	addi	r16,r16,1
   41fcc:	8d000015 	stw	r20,0(r17)
   41fd0:	8d400115 	stw	r21,4(r17)
   41fd4:	d8c12015 	stw	r3,1152(sp)
   41fd8:	dc011f15 	stw	r16,1148(sp)
   41fdc:	3c3ff60e 	bge	r7,r16,41fb8 <__alt_data_end+0xfffcc458>
   41fe0:	b809883a 	mov	r4,r23
   41fe4:	b00b883a 	mov	r5,r22
   41fe8:	d9811e04 	addi	r6,sp,1144
   41fec:	d9c13d15 	stw	r7,1268(sp)
   41ff0:	004800c0 	call	4800c <__sprint_r>
   41ff4:	d9c13d17 	ldw	r7,1268(sp)
   41ff8:	103c0c1e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   41ffc:	d8c12017 	ldw	r3,1152(sp)
   42000:	dc011f17 	ldw	r16,1148(sp)
   42004:	dc400404 	addi	r17,sp,16
   42008:	003fec06 	br	41fbc <__alt_data_end+0xfffcc45c>
   4200c:	00800084 	movi	r2,2
   42010:	9546b03a 	or	r3,r18,r21
   42014:	003d7d06 	br	4160c <__alt_data_end+0xfffcbaac>
   42018:	10803fcc 	andi	r2,r2,255
   4201c:	1080201c 	xori	r2,r2,128
   42020:	10bfe004 	addi	r2,r2,-128
   42024:	01000c04 	movi	r4,48
   42028:	1101d726 	beq	r2,r4,42788 <___vfprintf_internal_r+0x1bbc>
   4202c:	d9413117 	ldw	r5,1220(sp)
   42030:	d8812817 	ldw	r2,1184(sp)
   42034:	193fffc5 	stb	r4,-1(r3)
   42038:	297fffc4 	addi	r5,r5,-1
   4203c:	d9413115 	stw	r5,1220(sp)
   42040:	1163c83a 	sub	r17,r2,r5
   42044:	003c5c06 	br	411b8 <__alt_data_end+0xfffcb658>
   42048:	b809883a 	mov	r4,r23
   4204c:	b00b883a 	mov	r5,r22
   42050:	d9811e04 	addi	r6,sp,1144
   42054:	004800c0 	call	4800c <__sprint_r>
   42058:	103bf41e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   4205c:	d8c12017 	ldw	r3,1152(sp)
   42060:	da000404 	addi	r8,sp,16
   42064:	d9413117 	ldw	r5,1220(sp)
   42068:	d9013417 	ldw	r4,1232(sp)
   4206c:	d8812617 	ldw	r2,1176(sp)
   42070:	2923883a 	add	r17,r5,r4
   42074:	d9413317 	ldw	r5,1228(sp)
   42078:	11400216 	blt	r2,r5,42084 <___vfprintf_internal_r+0x14b8>
   4207c:	e100004c 	andi	r4,fp,1
   42080:	20000d26 	beq	r4,zero,420b8 <___vfprintf_internal_r+0x14ec>
   42084:	d9013817 	ldw	r4,1248(sp)
   42088:	d9413517 	ldw	r5,1236(sp)
   4208c:	1907883a 	add	r3,r3,r4
   42090:	d9011f17 	ldw	r4,1148(sp)
   42094:	41400015 	stw	r5,0(r8)
   42098:	d9413817 	ldw	r5,1248(sp)
   4209c:	21000044 	addi	r4,r4,1
   420a0:	d8c12015 	stw	r3,1152(sp)
   420a4:	41400115 	stw	r5,4(r8)
   420a8:	d9011f15 	stw	r4,1148(sp)
   420ac:	014001c4 	movi	r5,7
   420b0:	2901fd16 	blt	r5,r4,428a8 <___vfprintf_internal_r+0x1cdc>
   420b4:	42000204 	addi	r8,r8,8
   420b8:	d9013317 	ldw	r4,1228(sp)
   420bc:	2085c83a 	sub	r2,r4,r2
   420c0:	8449c83a 	sub	r4,r16,r17
   420c4:	1021883a 	mov	r16,r2
   420c8:	2080010e 	bge	r4,r2,420d0 <___vfprintf_internal_r+0x1504>
   420cc:	2021883a 	mov	r16,r4
   420d0:	04000a0e 	bge	zero,r16,420fc <___vfprintf_internal_r+0x1530>
   420d4:	d9011f17 	ldw	r4,1148(sp)
   420d8:	1c07883a 	add	r3,r3,r16
   420dc:	44400015 	stw	r17,0(r8)
   420e0:	21000044 	addi	r4,r4,1
   420e4:	44000115 	stw	r16,4(r8)
   420e8:	d8c12015 	stw	r3,1152(sp)
   420ec:	d9011f15 	stw	r4,1148(sp)
   420f0:	014001c4 	movi	r5,7
   420f4:	29020916 	blt	r5,r4,4291c <___vfprintf_internal_r+0x1d50>
   420f8:	42000204 	addi	r8,r8,8
   420fc:	80020116 	blt	r16,zero,42904 <___vfprintf_internal_r+0x1d38>
   42100:	1421c83a 	sub	r16,r2,r16
   42104:	043cc40e 	bge	zero,r16,41418 <__alt_data_end+0xfffcb8b8>
   42108:	04400404 	movi	r17,16
   4210c:	d8811f17 	ldw	r2,1148(sp)
   42110:	8c3f110e 	bge	r17,r16,41d58 <__alt_data_end+0xfffcc1f8>
   42114:	01400174 	movhi	r5,5
   42118:	2941a984 	addi	r5,r5,1702
   4211c:	d9412c15 	stw	r5,1200(sp)
   42120:	04c001c4 	movi	r19,7
   42124:	00000306 	br	42134 <___vfprintf_internal_r+0x1568>
   42128:	42000204 	addi	r8,r8,8
   4212c:	843ffc04 	addi	r16,r16,-16
   42130:	8c3f0c0e 	bge	r17,r16,41d64 <__alt_data_end+0xfffcc204>
   42134:	18c00404 	addi	r3,r3,16
   42138:	10800044 	addi	r2,r2,1
   4213c:	45000015 	stw	r20,0(r8)
   42140:	44400115 	stw	r17,4(r8)
   42144:	d8c12015 	stw	r3,1152(sp)
   42148:	d8811f15 	stw	r2,1148(sp)
   4214c:	98bff60e 	bge	r19,r2,42128 <__alt_data_end+0xfffcc5c8>
   42150:	b809883a 	mov	r4,r23
   42154:	b00b883a 	mov	r5,r22
   42158:	d9811e04 	addi	r6,sp,1144
   4215c:	004800c0 	call	4800c <__sprint_r>
   42160:	103bb21e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   42164:	d8c12017 	ldw	r3,1152(sp)
   42168:	d8811f17 	ldw	r2,1148(sp)
   4216c:	da000404 	addi	r8,sp,16
   42170:	003fee06 	br	4212c <__alt_data_end+0xfffcc5cc>
   42174:	e088703a 	and	r4,fp,r2
   42178:	203ec01e 	bne	r4,zero,41c7c <__alt_data_end+0xfffcc11c>
   4217c:	dc011f17 	ldw	r16,1148(sp)
   42180:	d9013117 	ldw	r4,1220(sp)
   42184:	40800115 	stw	r2,4(r8)
   42188:	84000044 	addi	r16,r16,1
   4218c:	41000015 	stw	r4,0(r8)
   42190:	d8c12015 	stw	r3,1152(sp)
   42194:	dc011f15 	stw	r16,1148(sp)
   42198:	008001c4 	movi	r2,7
   4219c:	14000e16 	blt	r2,r16,421d8 <___vfprintf_internal_r+0x160c>
   421a0:	44400204 	addi	r17,r8,8
   421a4:	003ee006 	br	41d28 <__alt_data_end+0xfffcc1c8>
   421a8:	01000174 	movhi	r4,5
   421ac:	2101a984 	addi	r4,r4,1702
   421b0:	d9012c15 	stw	r4,1200(sp)
   421b4:	d8812c17 	ldw	r2,1200(sp)
   421b8:	1cc7883a 	add	r3,r3,r19
   421bc:	84000044 	addi	r16,r16,1
   421c0:	88800015 	stw	r2,0(r17)
   421c4:	8cc00115 	stw	r19,4(r17)
   421c8:	d8c12015 	stw	r3,1152(sp)
   421cc:	dc011f15 	stw	r16,1148(sp)
   421d0:	008001c4 	movi	r2,7
   421d4:	143ed30e 	bge	r2,r16,41d24 <__alt_data_end+0xfffcc1c4>
   421d8:	b809883a 	mov	r4,r23
   421dc:	b00b883a 	mov	r5,r22
   421e0:	d9811e04 	addi	r6,sp,1144
   421e4:	004800c0 	call	4800c <__sprint_r>
   421e8:	103b901e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   421ec:	d8c12017 	ldw	r3,1152(sp)
   421f0:	dc011f17 	ldw	r16,1148(sp)
   421f4:	dc400404 	addi	r17,sp,16
   421f8:	003ecb06 	br	41d28 <__alt_data_end+0xfffcc1c8>
   421fc:	b809883a 	mov	r4,r23
   42200:	b00b883a 	mov	r5,r22
   42204:	d9811e04 	addi	r6,sp,1144
   42208:	004800c0 	call	4800c <__sprint_r>
   4220c:	103b871e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   42210:	d8c12017 	ldw	r3,1152(sp)
   42214:	dc011f17 	ldw	r16,1148(sp)
   42218:	da000404 	addi	r8,sp,16
   4221c:	003ea206 	br	41ca8 <__alt_data_end+0xfffcc148>
   42220:	b809883a 	mov	r4,r23
   42224:	b00b883a 	mov	r5,r22
   42228:	d9811e04 	addi	r6,sp,1144
   4222c:	004800c0 	call	4800c <__sprint_r>
   42230:	103b7e1e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   42234:	d8c12017 	ldw	r3,1152(sp)
   42238:	dc011f17 	ldw	r16,1148(sp)
   4223c:	dc400404 	addi	r17,sp,16
   42240:	003ea406 	br	41cd4 <__alt_data_end+0xfffcc174>
   42244:	b809883a 	mov	r4,r23
   42248:	b00b883a 	mov	r5,r22
   4224c:	d9811e04 	addi	r6,sp,1144
   42250:	004800c0 	call	4800c <__sprint_r>
   42254:	103b751e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   42258:	d8c12017 	ldw	r3,1152(sp)
   4225c:	da000404 	addi	r8,sp,16
   42260:	003c3706 	br	41340 <__alt_data_end+0xfffcb7e0>
   42264:	04a5c83a 	sub	r18,zero,r18
   42268:	9004c03a 	cmpne	r2,r18,zero
   4226c:	056bc83a 	sub	r21,zero,r21
   42270:	a8abc83a 	sub	r21,r21,r2
   42274:	04c00b44 	movi	r19,45
   42278:	dcc12785 	stb	r19,1182(sp)
   4227c:	da413215 	stw	r9,1224(sp)
   42280:	00800044 	movi	r2,1
   42284:	9546b03a 	or	r3,r18,r21
   42288:	003bb106 	br	41150 <__alt_data_end+0xfffcb5f0>
   4228c:	da013f15 	stw	r8,1276(sp)
   42290:	da413e15 	stw	r9,1272(sp)
   42294:	0047c680 	call	47c68 <__fpclassifyd>
   42298:	da013f17 	ldw	r8,1276(sp)
   4229c:	da413e17 	ldw	r9,1272(sp)
   422a0:	1000e526 	beq	r2,zero,42638 <___vfprintf_internal_r+0x1a6c>
   422a4:	04fff7c4 	movi	r19,-33
   422a8:	00bfffc4 	movi	r2,-1
   422ac:	84e6703a 	and	r19,r16,r19
   422b0:	48822926 	beq	r9,r2,42b58 <___vfprintf_internal_r+0x1f8c>
   422b4:	008011c4 	movi	r2,71
   422b8:	98821626 	beq	r19,r2,42b14 <___vfprintf_internal_r+0x1f48>
   422bc:	d9013917 	ldw	r4,1252(sp)
   422c0:	e0c04014 	ori	r3,fp,256
   422c4:	d8c12d15 	stw	r3,1204(sp)
   422c8:	20021f16 	blt	r4,zero,42b48 <___vfprintf_internal_r+0x1f7c>
   422cc:	dc413917 	ldw	r17,1252(sp)
   422d0:	d8012b05 	stb	zero,1196(sp)
   422d4:	00801984 	movi	r2,102
   422d8:	80814d26 	beq	r16,r2,42810 <___vfprintf_internal_r+0x1c44>
   422dc:	00801184 	movi	r2,70
   422e0:	80814b26 	beq	r16,r2,42810 <___vfprintf_internal_r+0x1c44>
   422e4:	00801144 	movi	r2,69
   422e8:	98821d26 	beq	r19,r2,42b60 <___vfprintf_internal_r+0x1f94>
   422ec:	482b883a 	mov	r21,r9
   422f0:	d8812604 	addi	r2,sp,1176
   422f4:	d8800115 	stw	r2,4(sp)
   422f8:	d9413717 	ldw	r5,1244(sp)
   422fc:	d8812504 	addi	r2,sp,1172
   42300:	d8800215 	stw	r2,8(sp)
   42304:	d8812104 	addi	r2,sp,1156
   42308:	dd400015 	stw	r21,0(sp)
   4230c:	d8800315 	stw	r2,12(sp)
   42310:	b809883a 	mov	r4,r23
   42314:	880d883a 	mov	r6,r17
   42318:	01c00084 	movi	r7,2
   4231c:	da013f15 	stw	r8,1276(sp)
   42320:	da413e15 	stw	r9,1272(sp)
   42324:	00430440 	call	43044 <_dtoa_r>
   42328:	d8813115 	stw	r2,1220(sp)
   4232c:	008019c4 	movi	r2,103
   42330:	da013f17 	ldw	r8,1276(sp)
   42334:	da413e17 	ldw	r9,1272(sp)
   42338:	80800226 	beq	r16,r2,42344 <___vfprintf_internal_r+0x1778>
   4233c:	008011c4 	movi	r2,71
   42340:	8081451e 	bne	r16,r2,42858 <___vfprintf_internal_r+0x1c8c>
   42344:	e080004c 	andi	r2,fp,1
   42348:	10021e26 	beq	r2,zero,42bc4 <___vfprintf_internal_r+0x1ff8>
   4234c:	d8c13117 	ldw	r3,1220(sp)
   42350:	1d55883a 	add	r10,r3,r21
   42354:	d9013717 	ldw	r4,1244(sp)
   42358:	880b883a 	mov	r5,r17
   4235c:	000d883a 	mov	r6,zero
   42360:	000f883a 	mov	r7,zero
   42364:	da013f15 	stw	r8,1276(sp)
   42368:	da413e15 	stw	r9,1272(sp)
   4236c:	da813d15 	stw	r10,1268(sp)
   42370:	004bd3c0 	call	4bd3c <__eqdf2>
   42374:	da013f17 	ldw	r8,1276(sp)
   42378:	da413e17 	ldw	r9,1272(sp)
   4237c:	da813d17 	ldw	r10,1268(sp)
   42380:	1001a126 	beq	r2,zero,42a08 <___vfprintf_internal_r+0x1e3c>
   42384:	d8812117 	ldw	r2,1156(sp)
   42388:	1280062e 	bgeu	r2,r10,423a4 <___vfprintf_internal_r+0x17d8>
   4238c:	01000c04 	movi	r4,48
   42390:	10c00044 	addi	r3,r2,1
   42394:	d8c12115 	stw	r3,1156(sp)
   42398:	11000005 	stb	r4,0(r2)
   4239c:	d8812117 	ldw	r2,1156(sp)
   423a0:	12bffb36 	bltu	r2,r10,42390 <__alt_data_end+0xfffcc830>
   423a4:	d8c13117 	ldw	r3,1220(sp)
   423a8:	10c5c83a 	sub	r2,r2,r3
   423ac:	d8813315 	stw	r2,1228(sp)
   423b0:	008011c4 	movi	r2,71
   423b4:	98818926 	beq	r19,r2,429dc <___vfprintf_internal_r+0x1e10>
   423b8:	00801944 	movi	r2,101
   423bc:	14023c0e 	bge	r2,r16,42cb0 <___vfprintf_internal_r+0x20e4>
   423c0:	d8c12617 	ldw	r3,1176(sp)
   423c4:	00801984 	movi	r2,102
   423c8:	d8c13415 	stw	r3,1232(sp)
   423cc:	8081ef26 	beq	r16,r2,42b8c <___vfprintf_internal_r+0x1fc0>
   423d0:	d8c13417 	ldw	r3,1232(sp)
   423d4:	d9013317 	ldw	r4,1228(sp)
   423d8:	1901e316 	blt	r3,r4,42b68 <___vfprintf_internal_r+0x1f9c>
   423dc:	e080004c 	andi	r2,fp,1
   423e0:	1001f426 	beq	r2,zero,42bb4 <___vfprintf_internal_r+0x1fe8>
   423e4:	d8c13417 	ldw	r3,1232(sp)
   423e8:	1c400044 	addi	r17,r3,1
   423ec:	8839883a 	mov	fp,r17
   423f0:	8801e416 	blt	r17,zero,42b84 <___vfprintf_internal_r+0x1fb8>
   423f4:	dd412b07 	ldb	r21,1196(sp)
   423f8:	a801701e 	bne	r21,zero,429bc <___vfprintf_internal_r+0x1df0>
   423fc:	df012b15 	stw	fp,1196(sp)
   42400:	dcc12783 	ldbu	r19,1182(sp)
   42404:	df012d17 	ldw	fp,1204(sp)
   42408:	d8013215 	stw	zero,1224(sp)
   4240c:	dc812d15 	stw	r18,1204(sp)
   42410:	003b6e06 	br	411cc <__alt_data_end+0xfffcb66c>
   42414:	e080040c 	andi	r2,fp,16
   42418:	1000b51e 	bne	r2,zero,426f0 <___vfprintf_internal_r+0x1b24>
   4241c:	e080100c 	andi	r2,fp,64
   42420:	10015b26 	beq	r2,zero,42990 <___vfprintf_internal_r+0x1dc4>
   42424:	d9012d17 	ldw	r4,1204(sp)
   42428:	d9412f17 	ldw	r5,1212(sp)
   4242c:	20800017 	ldw	r2,0(r4)
   42430:	21000104 	addi	r4,r4,4
   42434:	d9012d15 	stw	r4,1204(sp)
   42438:	1140000d 	sth	r5,0(r2)
   4243c:	003a2006 	br	40cc0 <__alt_data_end+0xfffcb160>
   42440:	e0c0100c 	andi	r3,fp,64
   42444:	1800a226 	beq	r3,zero,426d0 <___vfprintf_internal_r+0x1b04>
   42448:	d8c12d17 	ldw	r3,1204(sp)
   4244c:	1480000b 	ldhu	r18,0(r2)
   42450:	002b883a 	mov	r21,zero
   42454:	18c00104 	addi	r3,r3,4
   42458:	d8c12d15 	stw	r3,1204(sp)
   4245c:	0005883a 	mov	r2,zero
   42460:	9007883a 	mov	r3,r18
   42464:	003c6906 	br	4160c <__alt_data_end+0xfffcbaac>
   42468:	e0c0100c 	andi	r3,fp,64
   4246c:	18009026 	beq	r3,zero,426b0 <___vfprintf_internal_r+0x1ae4>
   42470:	1480000b 	ldhu	r18,0(r2)
   42474:	d8812d17 	ldw	r2,1204(sp)
   42478:	002b883a 	mov	r21,zero
   4247c:	9007883a 	mov	r3,r18
   42480:	10800104 	addi	r2,r2,4
   42484:	d8812d15 	stw	r2,1204(sp)
   42488:	00800044 	movi	r2,1
   4248c:	003c5f06 	br	4160c <__alt_data_end+0xfffcbaac>
   42490:	e0c0100c 	andi	r3,fp,64
   42494:	18008026 	beq	r3,zero,42698 <___vfprintf_internal_r+0x1acc>
   42498:	d9012d17 	ldw	r4,1204(sp)
   4249c:	1480000b 	ldhu	r18,0(r2)
   424a0:	002b883a 	mov	r21,zero
   424a4:	21000104 	addi	r4,r4,4
   424a8:	d9012d15 	stw	r4,1204(sp)
   424ac:	003c7906 	br	41694 <__alt_data_end+0xfffcbb34>
   424b0:	e080100c 	andi	r2,fp,64
   424b4:	10007126 	beq	r2,zero,4267c <___vfprintf_internal_r+0x1ab0>
   424b8:	1c80000f 	ldh	r18,0(r3)
   424bc:	d8812d17 	ldw	r2,1204(sp)
   424c0:	902bd7fa 	srai	r21,r18,31
   424c4:	10800104 	addi	r2,r2,4
   424c8:	d8812d15 	stw	r2,1204(sp)
   424cc:	a805883a 	mov	r2,r21
   424d0:	003b1a06 	br	4113c <__alt_data_end+0xfffcb5dc>
   424d4:	e4000007 	ldb	r16,0(fp)
   424d8:	e005883a 	mov	r2,fp
   424dc:	003a2306 	br	40d6c <__alt_data_end+0xfffcb20c>
   424e0:	00800084 	movi	r2,2
   424e4:	003c4906 	br	4160c <__alt_data_end+0xfffcbaac>
   424e8:	01000174 	movhi	r4,5
   424ec:	2101a984 	addi	r4,r4,1702
   424f0:	d9012c15 	stw	r4,1200(sp)
   424f4:	d9012c17 	ldw	r4,1200(sp)
   424f8:	1c47883a 	add	r3,r3,r17
   424fc:	10800044 	addi	r2,r2,1
   42500:	41000015 	stw	r4,0(r8)
   42504:	44400115 	stw	r17,4(r8)
   42508:	d8c12015 	stw	r3,1152(sp)
   4250c:	d8811f15 	stw	r2,1148(sp)
   42510:	010001c4 	movi	r4,7
   42514:	20becc16 	blt	r4,r2,42048 <__alt_data_end+0xfffcc4e8>
   42518:	42000204 	addi	r8,r8,8
   4251c:	003ed106 	br	42064 <__alt_data_end+0xfffcc504>
   42520:	01000174 	movhi	r4,5
   42524:	2101a984 	addi	r4,r4,1702
   42528:	d9012c15 	stw	r4,1200(sp)
   4252c:	003ba306 	br	413bc <__alt_data_end+0xfffcb85c>
   42530:	b809883a 	mov	r4,r23
   42534:	b00b883a 	mov	r5,r22
   42538:	d9811e04 	addi	r6,sp,1144
   4253c:	004800c0 	call	4800c <__sprint_r>
   42540:	103aba1e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   42544:	d8c12017 	ldw	r3,1152(sp)
   42548:	da000404 	addi	r8,sp,16
   4254c:	003d6c06 	br	41b00 <__alt_data_end+0xfffcbfa0>
   42550:	d8811f17 	ldw	r2,1148(sp)
   42554:	01400174 	movhi	r5,5
   42558:	01000044 	movi	r4,1
   4255c:	18c00044 	addi	r3,r3,1
   42560:	10800044 	addi	r2,r2,1
   42564:	2941a904 	addi	r5,r5,1700
   42568:	41000115 	stw	r4,4(r8)
   4256c:	41400015 	stw	r5,0(r8)
   42570:	d8c12015 	stw	r3,1152(sp)
   42574:	d8811f15 	stw	r2,1148(sp)
   42578:	010001c4 	movi	r4,7
   4257c:	20806716 	blt	r4,r2,4271c <___vfprintf_internal_r+0x1b50>
   42580:	42000204 	addi	r8,r8,8
   42584:	8000041e 	bne	r16,zero,42598 <___vfprintf_internal_r+0x19cc>
   42588:	d8813317 	ldw	r2,1228(sp)
   4258c:	1000021e 	bne	r2,zero,42598 <___vfprintf_internal_r+0x19cc>
   42590:	e080004c 	andi	r2,fp,1
   42594:	103ba026 	beq	r2,zero,41418 <__alt_data_end+0xfffcb8b8>
   42598:	d9013817 	ldw	r4,1248(sp)
   4259c:	d8811f17 	ldw	r2,1148(sp)
   425a0:	d9413517 	ldw	r5,1236(sp)
   425a4:	1907883a 	add	r3,r3,r4
   425a8:	10800044 	addi	r2,r2,1
   425ac:	41000115 	stw	r4,4(r8)
   425b0:	41400015 	stw	r5,0(r8)
   425b4:	d8c12015 	stw	r3,1152(sp)
   425b8:	d8811f15 	stw	r2,1148(sp)
   425bc:	010001c4 	movi	r4,7
   425c0:	20815716 	blt	r4,r2,42b20 <___vfprintf_internal_r+0x1f54>
   425c4:	42000204 	addi	r8,r8,8
   425c8:	0421c83a 	sub	r16,zero,r16
   425cc:	0400810e 	bge	zero,r16,427d4 <___vfprintf_internal_r+0x1c08>
   425d0:	04400404 	movi	r17,16
   425d4:	8c00bd0e 	bge	r17,r16,428cc <___vfprintf_internal_r+0x1d00>
   425d8:	01400174 	movhi	r5,5
   425dc:	2941a984 	addi	r5,r5,1702
   425e0:	d9412c15 	stw	r5,1200(sp)
   425e4:	04c001c4 	movi	r19,7
   425e8:	00000306 	br	425f8 <___vfprintf_internal_r+0x1a2c>
   425ec:	42000204 	addi	r8,r8,8
   425f0:	843ffc04 	addi	r16,r16,-16
   425f4:	8c00b80e 	bge	r17,r16,428d8 <___vfprintf_internal_r+0x1d0c>
   425f8:	18c00404 	addi	r3,r3,16
   425fc:	10800044 	addi	r2,r2,1
   42600:	45000015 	stw	r20,0(r8)
   42604:	44400115 	stw	r17,4(r8)
   42608:	d8c12015 	stw	r3,1152(sp)
   4260c:	d8811f15 	stw	r2,1148(sp)
   42610:	98bff60e 	bge	r19,r2,425ec <__alt_data_end+0xfffcca8c>
   42614:	b809883a 	mov	r4,r23
   42618:	b00b883a 	mov	r5,r22
   4261c:	d9811e04 	addi	r6,sp,1144
   42620:	004800c0 	call	4800c <__sprint_r>
   42624:	103a811e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   42628:	d8c12017 	ldw	r3,1152(sp)
   4262c:	d8811f17 	ldw	r2,1148(sp)
   42630:	da000404 	addi	r8,sp,16
   42634:	003fee06 	br	425f0 <__alt_data_end+0xfffcca90>
   42638:	008011c4 	movi	r2,71
   4263c:	1400db16 	blt	r2,r16,429ac <___vfprintf_internal_r+0x1de0>
   42640:	01000174 	movhi	r4,5
   42644:	21019b04 	addi	r4,r4,1644
   42648:	d9013115 	stw	r4,1220(sp)
   4264c:	00c000c4 	movi	r3,3
   42650:	00bfdfc4 	movi	r2,-129
   42654:	d8c12b15 	stw	r3,1196(sp)
   42658:	e0b8703a 	and	fp,fp,r2
   4265c:	dcc12783 	ldbu	r19,1182(sp)
   42660:	dc812d15 	stw	r18,1204(sp)
   42664:	1823883a 	mov	r17,r3
   42668:	d8013215 	stw	zero,1224(sp)
   4266c:	d8013415 	stw	zero,1232(sp)
   42670:	003ad606 	br	411cc <__alt_data_end+0xfffcb66c>
   42674:	4823883a 	mov	r17,r9
   42678:	003cc906 	br	419a0 <__alt_data_end+0xfffcbe40>
   4267c:	1c800017 	ldw	r18,0(r3)
   42680:	d8c12d17 	ldw	r3,1204(sp)
   42684:	902bd7fa 	srai	r21,r18,31
   42688:	18c00104 	addi	r3,r3,4
   4268c:	d8c12d15 	stw	r3,1204(sp)
   42690:	a805883a 	mov	r2,r21
   42694:	003aa906 	br	4113c <__alt_data_end+0xfffcb5dc>
   42698:	d9412d17 	ldw	r5,1204(sp)
   4269c:	14800017 	ldw	r18,0(r2)
   426a0:	002b883a 	mov	r21,zero
   426a4:	29400104 	addi	r5,r5,4
   426a8:	d9412d15 	stw	r5,1204(sp)
   426ac:	003bf906 	br	41694 <__alt_data_end+0xfffcbb34>
   426b0:	d8c12d17 	ldw	r3,1204(sp)
   426b4:	14800017 	ldw	r18,0(r2)
   426b8:	002b883a 	mov	r21,zero
   426bc:	18c00104 	addi	r3,r3,4
   426c0:	d8c12d15 	stw	r3,1204(sp)
   426c4:	00800044 	movi	r2,1
   426c8:	9007883a 	mov	r3,r18
   426cc:	003bcf06 	br	4160c <__alt_data_end+0xfffcbaac>
   426d0:	d9012d17 	ldw	r4,1204(sp)
   426d4:	14800017 	ldw	r18,0(r2)
   426d8:	002b883a 	mov	r21,zero
   426dc:	21000104 	addi	r4,r4,4
   426e0:	d9012d15 	stw	r4,1204(sp)
   426e4:	0005883a 	mov	r2,zero
   426e8:	9007883a 	mov	r3,r18
   426ec:	003bc706 	br	4160c <__alt_data_end+0xfffcbaac>
   426f0:	d9412d17 	ldw	r5,1204(sp)
   426f4:	d8c12f17 	ldw	r3,1212(sp)
   426f8:	28800017 	ldw	r2,0(r5)
   426fc:	29400104 	addi	r5,r5,4
   42700:	d9412d15 	stw	r5,1204(sp)
   42704:	10c00015 	stw	r3,0(r2)
   42708:	00396d06 	br	40cc0 <__alt_data_end+0xfffcb160>
   4270c:	01000174 	movhi	r4,5
   42710:	21019904 	addi	r4,r4,1636
   42714:	d9013115 	stw	r4,1220(sp)
   42718:	003ba206 	br	415a4 <__alt_data_end+0xfffcba44>
   4271c:	b809883a 	mov	r4,r23
   42720:	b00b883a 	mov	r5,r22
   42724:	d9811e04 	addi	r6,sp,1144
   42728:	004800c0 	call	4800c <__sprint_r>
   4272c:	103a3f1e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   42730:	dc012617 	ldw	r16,1176(sp)
   42734:	d8c12017 	ldw	r3,1152(sp)
   42738:	da000404 	addi	r8,sp,16
   4273c:	003f9106 	br	42584 <__alt_data_end+0xfffcca24>
   42740:	e0800044 	addi	r2,fp,1
   42744:	9cc00814 	ori	r19,r19,32
   42748:	e4000047 	ldb	r16,1(fp)
   4274c:	00398706 	br	40d6c <__alt_data_end+0xfffcb20c>
   42750:	d8812e17 	ldw	r2,1208(sp)
   42754:	d8c12d15 	stw	r3,1204(sp)
   42758:	0085c83a 	sub	r2,zero,r2
   4275c:	d8812e15 	stw	r2,1208(sp)
   42760:	e005883a 	mov	r2,fp
   42764:	003a3a06 	br	41050 <__alt_data_end+0xfffcb4f0>
   42768:	b809883a 	mov	r4,r23
   4276c:	b00b883a 	mov	r5,r22
   42770:	d9811e04 	addi	r6,sp,1144
   42774:	004800c0 	call	4800c <__sprint_r>
   42778:	103a2c1e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   4277c:	d8c12017 	ldw	r3,1152(sp)
   42780:	da000404 	addi	r8,sp,16
   42784:	003cf006 	br	41b48 <__alt_data_end+0xfffcbfe8>
   42788:	d8c12817 	ldw	r3,1184(sp)
   4278c:	d9013117 	ldw	r4,1220(sp)
   42790:	1923c83a 	sub	r17,r3,r4
   42794:	003a8806 	br	411b8 <__alt_data_end+0xfffcb658>
   42798:	da013f15 	stw	r8,1276(sp)
   4279c:	0040b340 	call	40b34 <strlen>
   427a0:	1023883a 	mov	r17,r2
   427a4:	da013f17 	ldw	r8,1276(sp)
   427a8:	883c7f0e 	bge	r17,zero,419a8 <__alt_data_end+0xfffcbe48>
   427ac:	0005883a 	mov	r2,zero
   427b0:	003c7d06 	br	419a8 <__alt_data_end+0xfffcbe48>
   427b4:	b809883a 	mov	r4,r23
   427b8:	b00b883a 	mov	r5,r22
   427bc:	d9811e04 	addi	r6,sp,1144
   427c0:	004800c0 	call	4800c <__sprint_r>
   427c4:	103a191e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   427c8:	d8c12017 	ldw	r3,1152(sp)
   427cc:	d8811f17 	ldw	r2,1148(sp)
   427d0:	da000404 	addi	r8,sp,16
   427d4:	d9413317 	ldw	r5,1228(sp)
   427d8:	d9013117 	ldw	r4,1220(sp)
   427dc:	10800044 	addi	r2,r2,1
   427e0:	28c7883a 	add	r3,r5,r3
   427e4:	41000015 	stw	r4,0(r8)
   427e8:	41400115 	stw	r5,4(r8)
   427ec:	d8c12015 	stw	r3,1152(sp)
   427f0:	d8811f15 	stw	r2,1148(sp)
   427f4:	010001c4 	movi	r4,7
   427f8:	20bb060e 	bge	r4,r2,41414 <__alt_data_end+0xfffcb8b4>
   427fc:	003d6206 	br	41d88 <__alt_data_end+0xfffcc228>
   42800:	01000174 	movhi	r4,5
   42804:	2101ad84 	addi	r4,r4,1718
   42808:	d9013615 	stw	r4,1240(sp)
   4280c:	003aa306 	br	4129c <__alt_data_end+0xfffcb73c>
   42810:	d8812604 	addi	r2,sp,1176
   42814:	d8800115 	stw	r2,4(sp)
   42818:	d9413717 	ldw	r5,1244(sp)
   4281c:	d8812504 	addi	r2,sp,1172
   42820:	d8800215 	stw	r2,8(sp)
   42824:	d8812104 	addi	r2,sp,1156
   42828:	da400015 	stw	r9,0(sp)
   4282c:	d8800315 	stw	r2,12(sp)
   42830:	b809883a 	mov	r4,r23
   42834:	880d883a 	mov	r6,r17
   42838:	01c000c4 	movi	r7,3
   4283c:	da013f15 	stw	r8,1276(sp)
   42840:	da413e15 	stw	r9,1272(sp)
   42844:	00430440 	call	43044 <_dtoa_r>
   42848:	da413e17 	ldw	r9,1272(sp)
   4284c:	da013f17 	ldw	r8,1276(sp)
   42850:	d8813115 	stw	r2,1220(sp)
   42854:	482b883a 	mov	r21,r9
   42858:	d8c13117 	ldw	r3,1220(sp)
   4285c:	00801184 	movi	r2,70
   42860:	1d55883a 	add	r10,r3,r21
   42864:	98bebb1e 	bne	r19,r2,42354 <__alt_data_end+0xfffcc7f4>
   42868:	19000007 	ldb	r4,0(r3)
   4286c:	00800c04 	movi	r2,48
   42870:	2080dd26 	beq	r4,r2,42be8 <___vfprintf_internal_r+0x201c>
   42874:	d8c12617 	ldw	r3,1176(sp)
   42878:	50d5883a 	add	r10,r10,r3
   4287c:	003eb506 	br	42354 <__alt_data_end+0xfffcc7f4>
   42880:	0023883a 	mov	r17,zero
   42884:	003d9b06 	br	41ef4 <__alt_data_end+0xfffcc394>
   42888:	b809883a 	mov	r4,r23
   4288c:	b00b883a 	mov	r5,r22
   42890:	d9811e04 	addi	r6,sp,1144
   42894:	004800c0 	call	4800c <__sprint_r>
   42898:	1039e41e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   4289c:	d8c12017 	ldw	r3,1152(sp)
   428a0:	da000404 	addi	r8,sp,16
   428a4:	003d9206 	br	41ef0 <__alt_data_end+0xfffcc390>
   428a8:	b809883a 	mov	r4,r23
   428ac:	b00b883a 	mov	r5,r22
   428b0:	d9811e04 	addi	r6,sp,1144
   428b4:	004800c0 	call	4800c <__sprint_r>
   428b8:	1039dc1e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   428bc:	d8812617 	ldw	r2,1176(sp)
   428c0:	d8c12017 	ldw	r3,1152(sp)
   428c4:	da000404 	addi	r8,sp,16
   428c8:	003dfb06 	br	420b8 <__alt_data_end+0xfffcc558>
   428cc:	01000174 	movhi	r4,5
   428d0:	2101a984 	addi	r4,r4,1702
   428d4:	d9012c15 	stw	r4,1200(sp)
   428d8:	d9012c17 	ldw	r4,1200(sp)
   428dc:	1c07883a 	add	r3,r3,r16
   428e0:	10800044 	addi	r2,r2,1
   428e4:	41000015 	stw	r4,0(r8)
   428e8:	44000115 	stw	r16,4(r8)
   428ec:	d8c12015 	stw	r3,1152(sp)
   428f0:	d8811f15 	stw	r2,1148(sp)
   428f4:	010001c4 	movi	r4,7
   428f8:	20bfae16 	blt	r4,r2,427b4 <__alt_data_end+0xfffccc54>
   428fc:	42000204 	addi	r8,r8,8
   42900:	003fb406 	br	427d4 <__alt_data_end+0xfffccc74>
   42904:	0021883a 	mov	r16,zero
   42908:	003dfd06 	br	42100 <__alt_data_end+0xfffcc5a0>
   4290c:	01400174 	movhi	r5,5
   42910:	2941ad84 	addi	r5,r5,1718
   42914:	d9413615 	stw	r5,1240(sp)
   42918:	003ae306 	br	414a8 <__alt_data_end+0xfffcb948>
   4291c:	b809883a 	mov	r4,r23
   42920:	b00b883a 	mov	r5,r22
   42924:	d9811e04 	addi	r6,sp,1144
   42928:	004800c0 	call	4800c <__sprint_r>
   4292c:	1039bf1e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   42930:	d8812617 	ldw	r2,1176(sp)
   42934:	d9413317 	ldw	r5,1228(sp)
   42938:	d8c12017 	ldw	r3,1152(sp)
   4293c:	da000404 	addi	r8,sp,16
   42940:	2885c83a 	sub	r2,r5,r2
   42944:	003ded06 	br	420fc <__alt_data_end+0xfffcc59c>
   42948:	00800184 	movi	r2,6
   4294c:	1240012e 	bgeu	r2,r9,42954 <___vfprintf_internal_r+0x1d88>
   42950:	1013883a 	mov	r9,r2
   42954:	4823883a 	mov	r17,r9
   42958:	4805883a 	mov	r2,r9
   4295c:	4800b216 	blt	r9,zero,42c28 <___vfprintf_internal_r+0x205c>
   42960:	01400174 	movhi	r5,5
   42964:	2941a704 	addi	r5,r5,1692
   42968:	d8812b15 	stw	r2,1196(sp)
   4296c:	dc812d15 	stw	r18,1204(sp)
   42970:	d8013215 	stw	zero,1224(sp)
   42974:	d8013415 	stw	zero,1232(sp)
   42978:	d9413115 	stw	r5,1220(sp)
   4297c:	0005883a 	mov	r2,zero
   42980:	003a1906 	br	411e8 <__alt_data_end+0xfffcb688>
   42984:	04c00b44 	movi	r19,45
   42988:	dcc12785 	stb	r19,1182(sp)
   4298c:	003b0006 	br	41590 <__alt_data_end+0xfffcba30>
   42990:	d8c12d17 	ldw	r3,1204(sp)
   42994:	d9012f17 	ldw	r4,1212(sp)
   42998:	18800017 	ldw	r2,0(r3)
   4299c:	18c00104 	addi	r3,r3,4
   429a0:	d8c12d15 	stw	r3,1204(sp)
   429a4:	11000015 	stw	r4,0(r2)
   429a8:	0038c506 	br	40cc0 <__alt_data_end+0xfffcb160>
   429ac:	01400174 	movhi	r5,5
   429b0:	29419c04 	addi	r5,r5,1648
   429b4:	d9413115 	stw	r5,1220(sp)
   429b8:	003f2406 	br	4264c <__alt_data_end+0xfffccaec>
   429bc:	00800b44 	movi	r2,45
   429c0:	d8812785 	stb	r2,1182(sp)
   429c4:	df012b15 	stw	fp,1196(sp)
   429c8:	d8013215 	stw	zero,1224(sp)
   429cc:	df012d17 	ldw	fp,1204(sp)
   429d0:	00800b44 	movi	r2,45
   429d4:	dc812d15 	stw	r18,1204(sp)
   429d8:	003a0006 	br	411dc <__alt_data_end+0xfffcb67c>
   429dc:	d8c12617 	ldw	r3,1176(sp)
   429e0:	00bfff44 	movi	r2,-3
   429e4:	18800a16 	blt	r3,r2,42a10 <___vfprintf_internal_r+0x1e44>
   429e8:	48c00916 	blt	r9,r3,42a10 <___vfprintf_internal_r+0x1e44>
   429ec:	d8c13415 	stw	r3,1232(sp)
   429f0:	040019c4 	movi	r16,103
   429f4:	003e7606 	br	423d0 <__alt_data_end+0xfffcc870>
   429f8:	01000174 	movhi	r4,5
   429fc:	2101a984 	addi	r4,r4,1702
   42a00:	d9012c15 	stw	r4,1200(sp)
   42a04:	003c8e06 	br	41c40 <__alt_data_end+0xfffcc0e0>
   42a08:	5005883a 	mov	r2,r10
   42a0c:	003e6506 	br	423a4 <__alt_data_end+0xfffcc844>
   42a10:	843fff84 	addi	r16,r16,-2
   42a14:	1d7fffc4 	addi	r21,r3,-1
   42a18:	dd412615 	stw	r21,1176(sp)
   42a1c:	dc0122c5 	stb	r16,1163(sp)
   42a20:	a8009216 	blt	r21,zero,42c6c <___vfprintf_internal_r+0x20a0>
   42a24:	00800ac4 	movi	r2,43
   42a28:	d8812305 	stb	r2,1164(sp)
   42a2c:	00800244 	movi	r2,9
   42a30:	1540660e 	bge	r2,r21,42bcc <___vfprintf_internal_r+0x2000>
   42a34:	dcc122c4 	addi	r19,sp,1163
   42a38:	dc012c15 	stw	r16,1200(sp)
   42a3c:	4023883a 	mov	r17,r8
   42a40:	9821883a 	mov	r16,r19
   42a44:	a809883a 	mov	r4,r21
   42a48:	01400284 	movi	r5,10
   42a4c:	00408f00 	call	408f0 <__modsi3>
   42a50:	10800c04 	addi	r2,r2,48
   42a54:	843fffc4 	addi	r16,r16,-1
   42a58:	a809883a 	mov	r4,r21
   42a5c:	01400284 	movi	r5,10
   42a60:	80800005 	stb	r2,0(r16)
   42a64:	004089c0 	call	4089c <__divsi3>
   42a68:	01000244 	movi	r4,9
   42a6c:	102b883a 	mov	r21,r2
   42a70:	20bff416 	blt	r4,r2,42a44 <__alt_data_end+0xfffccee4>
   42a74:	8811883a 	mov	r8,r17
   42a78:	10800c04 	addi	r2,r2,48
   42a7c:	8023883a 	mov	r17,r16
   42a80:	897fffc4 	addi	r5,r17,-1
   42a84:	88bfffc5 	stb	r2,-1(r17)
   42a88:	dc012c17 	ldw	r16,1200(sp)
   42a8c:	2cc08a2e 	bgeu	r5,r19,42cb8 <___vfprintf_internal_r+0x20ec>
   42a90:	d9812384 	addi	r6,sp,1166
   42a94:	344dc83a 	sub	r6,r6,r17
   42a98:	d9012344 	addi	r4,sp,1165
   42a9c:	998d883a 	add	r6,r19,r6
   42aa0:	00000106 	br	42aa8 <___vfprintf_internal_r+0x1edc>
   42aa4:	28800003 	ldbu	r2,0(r5)
   42aa8:	20800005 	stb	r2,0(r4)
   42aac:	21000044 	addi	r4,r4,1
   42ab0:	29400044 	addi	r5,r5,1
   42ab4:	21bffb1e 	bne	r4,r6,42aa4 <__alt_data_end+0xfffccf44>
   42ab8:	d8812304 	addi	r2,sp,1164
   42abc:	1445c83a 	sub	r2,r2,r17
   42ac0:	d9412344 	addi	r5,sp,1165
   42ac4:	2885883a 	add	r2,r5,r2
   42ac8:	14e7c83a 	sub	r19,r2,r19
   42acc:	d8813317 	ldw	r2,1228(sp)
   42ad0:	d8c13317 	ldw	r3,1228(sp)
   42ad4:	dcc13a15 	stw	r19,1256(sp)
   42ad8:	14e3883a 	add	r17,r2,r19
   42adc:	00800044 	movi	r2,1
   42ae0:	10c0550e 	bge	r2,r3,42c38 <___vfprintf_internal_r+0x206c>
   42ae4:	8c400044 	addi	r17,r17,1
   42ae8:	8839883a 	mov	fp,r17
   42aec:	88005016 	blt	r17,zero,42c30 <___vfprintf_internal_r+0x2064>
   42af0:	d8013415 	stw	zero,1232(sp)
   42af4:	003e3f06 	br	423f4 <__alt_data_end+0xfffcc894>
   42af8:	da412b15 	stw	r9,1196(sp)
   42afc:	dcc12783 	ldbu	r19,1182(sp)
   42b00:	4823883a 	mov	r17,r9
   42b04:	dc812d15 	stw	r18,1204(sp)
   42b08:	d8013215 	stw	zero,1224(sp)
   42b0c:	d8013415 	stw	zero,1232(sp)
   42b10:	0039ae06 	br	411cc <__alt_data_end+0xfffcb66c>
   42b14:	483de91e 	bne	r9,zero,422bc <__alt_data_end+0xfffcc75c>
   42b18:	8813883a 	mov	r9,r17
   42b1c:	003de706 	br	422bc <__alt_data_end+0xfffcc75c>
   42b20:	b809883a 	mov	r4,r23
   42b24:	b00b883a 	mov	r5,r22
   42b28:	d9811e04 	addi	r6,sp,1144
   42b2c:	004800c0 	call	4800c <__sprint_r>
   42b30:	10393e1e 	bne	r2,zero,4102c <__alt_data_end+0xfffcb4cc>
   42b34:	dc012617 	ldw	r16,1176(sp)
   42b38:	d8c12017 	ldw	r3,1152(sp)
   42b3c:	d8811f17 	ldw	r2,1148(sp)
   42b40:	da000404 	addi	r8,sp,16
   42b44:	003ea006 	br	425c8 <__alt_data_end+0xfffcca68>
   42b48:	00c00b44 	movi	r3,45
   42b4c:	2460003c 	xorhi	r17,r4,32768
   42b50:	d8c12b05 	stb	r3,1196(sp)
   42b54:	003ddf06 	br	422d4 <__alt_data_end+0xfffcc774>
   42b58:	02400184 	movi	r9,6
   42b5c:	003dd706 	br	422bc <__alt_data_end+0xfffcc75c>
   42b60:	4d400044 	addi	r21,r9,1
   42b64:	003de206 	br	422f0 <__alt_data_end+0xfffcc790>
   42b68:	d8c13417 	ldw	r3,1232(sp)
   42b6c:	00c0490e 	bge	zero,r3,42c94 <___vfprintf_internal_r+0x20c8>
   42b70:	04400044 	movi	r17,1
   42b74:	d9013317 	ldw	r4,1228(sp)
   42b78:	8923883a 	add	r17,r17,r4
   42b7c:	8839883a 	mov	fp,r17
   42b80:	883e1c0e 	bge	r17,zero,423f4 <__alt_data_end+0xfffcc894>
   42b84:	0039883a 	mov	fp,zero
   42b88:	003e1a06 	br	423f4 <__alt_data_end+0xfffcc894>
   42b8c:	00c03b0e 	bge	zero,r3,42c7c <___vfprintf_internal_r+0x20b0>
   42b90:	4800021e 	bne	r9,zero,42b9c <___vfprintf_internal_r+0x1fd0>
   42b94:	e080004c 	andi	r2,fp,1
   42b98:	10000626 	beq	r2,zero,42bb4 <___vfprintf_internal_r+0x1fe8>
   42b9c:	d8c13417 	ldw	r3,1232(sp)
   42ba0:	4a400044 	addi	r9,r9,1
   42ba4:	1a63883a 	add	r17,r3,r9
   42ba8:	8839883a 	mov	fp,r17
   42bac:	883e110e 	bge	r17,zero,423f4 <__alt_data_end+0xfffcc894>
   42bb0:	003ff406 	br	42b84 <__alt_data_end+0xfffcd024>
   42bb4:	1839883a 	mov	fp,r3
   42bb8:	18004116 	blt	r3,zero,42cc0 <___vfprintf_internal_r+0x20f4>
   42bbc:	dc413417 	ldw	r17,1232(sp)
   42bc0:	003e0c06 	br	423f4 <__alt_data_end+0xfffcc894>
   42bc4:	d8812117 	ldw	r2,1156(sp)
   42bc8:	003df606 	br	423a4 <__alt_data_end+0xfffcc844>
   42bcc:	00800c04 	movi	r2,48
   42bd0:	a8c00c04 	addi	r3,r21,48
   42bd4:	d8812345 	stb	r2,1165(sp)
   42bd8:	d8c12385 	stb	r3,1166(sp)
   42bdc:	d88123c4 	addi	r2,sp,1167
   42be0:	dcc122c4 	addi	r19,sp,1163
   42be4:	003fb806 	br	42ac8 <__alt_data_end+0xfffccf68>
   42be8:	d9013717 	ldw	r4,1244(sp)
   42bec:	880b883a 	mov	r5,r17
   42bf0:	000d883a 	mov	r6,zero
   42bf4:	000f883a 	mov	r7,zero
   42bf8:	da013f15 	stw	r8,1276(sp)
   42bfc:	da413e15 	stw	r9,1272(sp)
   42c00:	da813d15 	stw	r10,1268(sp)
   42c04:	004bd3c0 	call	4bd3c <__eqdf2>
   42c08:	da013f17 	ldw	r8,1276(sp)
   42c0c:	da413e17 	ldw	r9,1272(sp)
   42c10:	da813d17 	ldw	r10,1268(sp)
   42c14:	103f1726 	beq	r2,zero,42874 <__alt_data_end+0xfffccd14>
   42c18:	00800044 	movi	r2,1
   42c1c:	1547c83a 	sub	r3,r2,r21
   42c20:	d8c12615 	stw	r3,1176(sp)
   42c24:	003f1406 	br	42878 <__alt_data_end+0xfffccd18>
   42c28:	0005883a 	mov	r2,zero
   42c2c:	003f4c06 	br	42960 <__alt_data_end+0xfffcce00>
   42c30:	0039883a 	mov	fp,zero
   42c34:	003fae06 	br	42af0 <__alt_data_end+0xfffccf90>
   42c38:	e084703a 	and	r2,fp,r2
   42c3c:	103faa26 	beq	r2,zero,42ae8 <__alt_data_end+0xfffccf88>
   42c40:	003fa806 	br	42ae4 <__alt_data_end+0xfffccf84>
   42c44:	d9412d17 	ldw	r5,1204(sp)
   42c48:	2a400017 	ldw	r9,0(r5)
   42c4c:	28c00104 	addi	r3,r5,4
   42c50:	d8c12d15 	stw	r3,1204(sp)
   42c54:	483ebc0e 	bge	r9,zero,42748 <__alt_data_end+0xfffccbe8>
   42c58:	027fffc4 	movi	r9,-1
   42c5c:	e4000047 	ldb	r16,1(fp)
   42c60:	00384206 	br	40d6c <__alt_data_end+0xfffcb20c>
   42c64:	043fffc4 	movi	r16,-1
   42c68:	0038ce06 	br	40fa4 <__alt_data_end+0xfffcb444>
   42c6c:	00800b44 	movi	r2,45
   42c70:	056bc83a 	sub	r21,zero,r21
   42c74:	d8812305 	stb	r2,1164(sp)
   42c78:	003f6c06 	br	42a2c <__alt_data_end+0xfffccecc>
   42c7c:	4800081e 	bne	r9,zero,42ca0 <___vfprintf_internal_r+0x20d4>
   42c80:	e080004c 	andi	r2,fp,1
   42c84:	1000061e 	bne	r2,zero,42ca0 <___vfprintf_internal_r+0x20d4>
   42c88:	07000044 	movi	fp,1
   42c8c:	e023883a 	mov	r17,fp
   42c90:	003dd806 	br	423f4 <__alt_data_end+0xfffcc894>
   42c94:	04400084 	movi	r17,2
   42c98:	88e3c83a 	sub	r17,r17,r3
   42c9c:	003fb506 	br	42b74 <__alt_data_end+0xfffcd014>
   42ca0:	4c400084 	addi	r17,r9,2
   42ca4:	8839883a 	mov	fp,r17
   42ca8:	883dd20e 	bge	r17,zero,423f4 <__alt_data_end+0xfffcc894>
   42cac:	003fb506 	br	42b84 <__alt_data_end+0xfffcd024>
   42cb0:	d8c12617 	ldw	r3,1176(sp)
   42cb4:	003f5706 	br	42a14 <__alt_data_end+0xfffcceb4>
   42cb8:	d8812344 	addi	r2,sp,1165
   42cbc:	003f8206 	br	42ac8 <__alt_data_end+0xfffccf68>
   42cc0:	0039883a 	mov	fp,zero
   42cc4:	003fbd06 	br	42bbc <__alt_data_end+0xfffcd05c>

00042cc8 <__vfprintf_internal>:
   42cc8:	2007883a 	mov	r3,r4
   42ccc:	01000174 	movhi	r4,5
   42cd0:	21093604 	addi	r4,r4,9432
   42cd4:	21000017 	ldw	r4,0(r4)
   42cd8:	2805883a 	mov	r2,r5
   42cdc:	300f883a 	mov	r7,r6
   42ce0:	180b883a 	mov	r5,r3
   42ce4:	100d883a 	mov	r6,r2
   42ce8:	0040bcc1 	jmpi	40bcc <___vfprintf_internal_r>

00042cec <__swsetup_r>:
   42cec:	00800174 	movhi	r2,5
   42cf0:	defffd04 	addi	sp,sp,-12
   42cf4:	10893604 	addi	r2,r2,9432
   42cf8:	dc400115 	stw	r17,4(sp)
   42cfc:	2023883a 	mov	r17,r4
   42d00:	11000017 	ldw	r4,0(r2)
   42d04:	dc000015 	stw	r16,0(sp)
   42d08:	dfc00215 	stw	ra,8(sp)
   42d0c:	2821883a 	mov	r16,r5
   42d10:	20000226 	beq	r4,zero,42d1c <__swsetup_r+0x30>
   42d14:	20c00e17 	ldw	r3,56(r4)
   42d18:	18002e26 	beq	r3,zero,42dd4 <__swsetup_r+0xe8>
   42d1c:	8080030b 	ldhu	r2,12(r16)
   42d20:	10c0020c 	andi	r3,r2,8
   42d24:	100d883a 	mov	r6,r2
   42d28:	18000f26 	beq	r3,zero,42d68 <__swsetup_r+0x7c>
   42d2c:	80c00417 	ldw	r3,16(r16)
   42d30:	18001526 	beq	r3,zero,42d88 <__swsetup_r+0x9c>
   42d34:	1100004c 	andi	r4,r2,1
   42d38:	20001c1e 	bne	r4,zero,42dac <__swsetup_r+0xc0>
   42d3c:	1080008c 	andi	r2,r2,2
   42d40:	1000261e 	bne	r2,zero,42ddc <__swsetup_r+0xf0>
   42d44:	80800517 	ldw	r2,20(r16)
   42d48:	80800215 	stw	r2,8(r16)
   42d4c:	18001c26 	beq	r3,zero,42dc0 <__swsetup_r+0xd4>
   42d50:	0005883a 	mov	r2,zero
   42d54:	dfc00217 	ldw	ra,8(sp)
   42d58:	dc400117 	ldw	r17,4(sp)
   42d5c:	dc000017 	ldw	r16,0(sp)
   42d60:	dec00304 	addi	sp,sp,12
   42d64:	f800283a 	ret
   42d68:	3080040c 	andi	r2,r6,16
   42d6c:	10001726 	beq	r2,zero,42dcc <__swsetup_r+0xe0>
   42d70:	3080010c 	andi	r2,r6,4
   42d74:	10001b1e 	bne	r2,zero,42de4 <__swsetup_r+0xf8>
   42d78:	80c00417 	ldw	r3,16(r16)
   42d7c:	30800214 	ori	r2,r6,8
   42d80:	8080030d 	sth	r2,12(r16)
   42d84:	183feb1e 	bne	r3,zero,42d34 <__alt_data_end+0xfffcd1d4>
   42d88:	1140a00c 	andi	r5,r2,640
   42d8c:	01008004 	movi	r4,512
   42d90:	293fe826 	beq	r5,r4,42d34 <__alt_data_end+0xfffcd1d4>
   42d94:	8809883a 	mov	r4,r17
   42d98:	800b883a 	mov	r5,r16
   42d9c:	00458800 	call	45880 <__smakebuf_r>
   42da0:	8080030b 	ldhu	r2,12(r16)
   42da4:	80c00417 	ldw	r3,16(r16)
   42da8:	003fe206 	br	42d34 <__alt_data_end+0xfffcd1d4>
   42dac:	80800517 	ldw	r2,20(r16)
   42db0:	80000215 	stw	zero,8(r16)
   42db4:	0085c83a 	sub	r2,zero,r2
   42db8:	80800615 	stw	r2,24(r16)
   42dbc:	183fe41e 	bne	r3,zero,42d50 <__alt_data_end+0xfffcd1f0>
   42dc0:	8080030b 	ldhu	r2,12(r16)
   42dc4:	1080200c 	andi	r2,r2,128
   42dc8:	103fe226 	beq	r2,zero,42d54 <__alt_data_end+0xfffcd1f4>
   42dcc:	00bfffc4 	movi	r2,-1
   42dd0:	003fe006 	br	42d54 <__alt_data_end+0xfffcd1f4>
   42dd4:	0044d280 	call	44d28 <__sinit>
   42dd8:	003fd006 	br	42d1c <__alt_data_end+0xfffcd1bc>
   42ddc:	0005883a 	mov	r2,zero
   42de0:	003fd906 	br	42d48 <__alt_data_end+0xfffcd1e8>
   42de4:	81400c17 	ldw	r5,48(r16)
   42de8:	28000626 	beq	r5,zero,42e04 <__swsetup_r+0x118>
   42dec:	80801004 	addi	r2,r16,64
   42df0:	28800326 	beq	r5,r2,42e00 <__swsetup_r+0x114>
   42df4:	8809883a 	mov	r4,r17
   42df8:	0044e9c0 	call	44e9c <_free_r>
   42dfc:	8180030b 	ldhu	r6,12(r16)
   42e00:	80000c15 	stw	zero,48(r16)
   42e04:	80c00417 	ldw	r3,16(r16)
   42e08:	00bff6c4 	movi	r2,-37
   42e0c:	118c703a 	and	r6,r2,r6
   42e10:	80000115 	stw	zero,4(r16)
   42e14:	80c00015 	stw	r3,0(r16)
   42e18:	003fd806 	br	42d7c <__alt_data_end+0xfffcd21c>

00042e1c <quorem>:
   42e1c:	defff204 	addi	sp,sp,-56
   42e20:	ddc00b15 	stw	r23,44(sp)
   42e24:	20800417 	ldw	r2,16(r4)
   42e28:	2dc00417 	ldw	r23,16(r5)
   42e2c:	dfc00d15 	stw	ra,52(sp)
   42e30:	df000c15 	stw	fp,48(sp)
   42e34:	dd800a15 	stw	r22,40(sp)
   42e38:	dd400915 	stw	r21,36(sp)
   42e3c:	dd000815 	stw	r20,32(sp)
   42e40:	dcc00715 	stw	r19,28(sp)
   42e44:	dc800615 	stw	r18,24(sp)
   42e48:	dc400515 	stw	r17,20(sp)
   42e4c:	dc000415 	stw	r16,16(sp)
   42e50:	15c07a16 	blt	r2,r23,4303c <quorem+0x220>
   42e54:	bdffffc4 	addi	r23,r23,-1
   42e58:	bde9883a 	add	r20,r23,r23
   42e5c:	28c00504 	addi	r3,r5,20
   42e60:	a529883a 	add	r20,r20,r20
   42e64:	1d39883a 	add	fp,r3,r20
   42e68:	24c00504 	addi	r19,r4,20
   42e6c:	d9400215 	stw	r5,8(sp)
   42e70:	9d29883a 	add	r20,r19,r20
   42e74:	e1400017 	ldw	r5,0(fp)
   42e78:	d9000015 	stw	r4,0(sp)
   42e7c:	a1000017 	ldw	r4,0(r20)
   42e80:	29400044 	addi	r5,r5,1
   42e84:	d8c00115 	stw	r3,4(sp)
   42e88:	dd000315 	stw	r20,12(sp)
   42e8c:	004094c0 	call	4094c <__udivsi3>
   42e90:	1025883a 	mov	r18,r2
   42e94:	10003026 	beq	r2,zero,42f58 <quorem+0x13c>
   42e98:	dc400117 	ldw	r17,4(sp)
   42e9c:	9829883a 	mov	r20,r19
   42ea0:	002d883a 	mov	r22,zero
   42ea4:	0021883a 	mov	r16,zero
   42ea8:	8d400017 	ldw	r21,0(r17)
   42eac:	900b883a 	mov	r5,r18
   42eb0:	8c400104 	addi	r17,r17,4
   42eb4:	a93fffcc 	andi	r4,r21,65535
   42eb8:	004095c0 	call	4095c <__mulsi3>
   42ebc:	a808d43a 	srli	r4,r21,16
   42ec0:	900b883a 	mov	r5,r18
   42ec4:	b0ad883a 	add	r22,r22,r2
   42ec8:	004095c0 	call	4095c <__mulsi3>
   42ecc:	a1000017 	ldw	r4,0(r20)
   42ed0:	b00cd43a 	srli	r6,r22,16
   42ed4:	b0ffffcc 	andi	r3,r22,65535
   42ed8:	217fffcc 	andi	r5,r4,65535
   42edc:	2c21883a 	add	r16,r5,r16
   42ee0:	80c7c83a 	sub	r3,r16,r3
   42ee4:	2008d43a 	srli	r4,r4,16
   42ee8:	3085883a 	add	r2,r6,r2
   42eec:	1821d43a 	srai	r16,r3,16
   42ef0:	117fffcc 	andi	r5,r2,65535
   42ef4:	2149c83a 	sub	r4,r4,r5
   42ef8:	2421883a 	add	r16,r4,r16
   42efc:	8008943a 	slli	r4,r16,16
   42f00:	18ffffcc 	andi	r3,r3,65535
   42f04:	102cd43a 	srli	r22,r2,16
   42f08:	20c8b03a 	or	r4,r4,r3
   42f0c:	a1000015 	stw	r4,0(r20)
   42f10:	8021d43a 	srai	r16,r16,16
   42f14:	a5000104 	addi	r20,r20,4
   42f18:	e47fe32e 	bgeu	fp,r17,42ea8 <__alt_data_end+0xfffcd348>
   42f1c:	d8c00317 	ldw	r3,12(sp)
   42f20:	18800017 	ldw	r2,0(r3)
   42f24:	10000c1e 	bne	r2,zero,42f58 <quorem+0x13c>
   42f28:	18bfff04 	addi	r2,r3,-4
   42f2c:	9880082e 	bgeu	r19,r2,42f50 <quorem+0x134>
   42f30:	18ffff17 	ldw	r3,-4(r3)
   42f34:	18000326 	beq	r3,zero,42f44 <quorem+0x128>
   42f38:	00000506 	br	42f50 <quorem+0x134>
   42f3c:	10c00017 	ldw	r3,0(r2)
   42f40:	1800031e 	bne	r3,zero,42f50 <quorem+0x134>
   42f44:	10bfff04 	addi	r2,r2,-4
   42f48:	bdffffc4 	addi	r23,r23,-1
   42f4c:	98bffb36 	bltu	r19,r2,42f3c <__alt_data_end+0xfffcd3dc>
   42f50:	d8c00017 	ldw	r3,0(sp)
   42f54:	1dc00415 	stw	r23,16(r3)
   42f58:	d9000017 	ldw	r4,0(sp)
   42f5c:	d9400217 	ldw	r5,8(sp)
   42f60:	0046ffc0 	call	46ffc <__mcmp>
   42f64:	10002816 	blt	r2,zero,43008 <quorem+0x1ec>
   42f68:	dc400117 	ldw	r17,4(sp)
   42f6c:	94800044 	addi	r18,r18,1
   42f70:	980d883a 	mov	r6,r19
   42f74:	0007883a 	mov	r3,zero
   42f78:	31000017 	ldw	r4,0(r6)
   42f7c:	89400017 	ldw	r5,0(r17)
   42f80:	31800104 	addi	r6,r6,4
   42f84:	20bfffcc 	andi	r2,r4,65535
   42f88:	10c7883a 	add	r3,r2,r3
   42f8c:	28bfffcc 	andi	r2,r5,65535
   42f90:	1885c83a 	sub	r2,r3,r2
   42f94:	280ad43a 	srli	r5,r5,16
   42f98:	2008d43a 	srli	r4,r4,16
   42f9c:	1007d43a 	srai	r3,r2,16
   42fa0:	10bfffcc 	andi	r2,r2,65535
   42fa4:	2149c83a 	sub	r4,r4,r5
   42fa8:	20c9883a 	add	r4,r4,r3
   42fac:	200a943a 	slli	r5,r4,16
   42fb0:	8c400104 	addi	r17,r17,4
   42fb4:	2007d43a 	srai	r3,r4,16
   42fb8:	2884b03a 	or	r2,r5,r2
   42fbc:	30bfff15 	stw	r2,-4(r6)
   42fc0:	e47fed2e 	bgeu	fp,r17,42f78 <__alt_data_end+0xfffcd418>
   42fc4:	bdc5883a 	add	r2,r23,r23
   42fc8:	1085883a 	add	r2,r2,r2
   42fcc:	9887883a 	add	r3,r19,r2
   42fd0:	18800017 	ldw	r2,0(r3)
   42fd4:	10000c1e 	bne	r2,zero,43008 <quorem+0x1ec>
   42fd8:	18bfff04 	addi	r2,r3,-4
   42fdc:	9880082e 	bgeu	r19,r2,43000 <quorem+0x1e4>
   42fe0:	18ffff17 	ldw	r3,-4(r3)
   42fe4:	18000326 	beq	r3,zero,42ff4 <quorem+0x1d8>
   42fe8:	00000506 	br	43000 <quorem+0x1e4>
   42fec:	10c00017 	ldw	r3,0(r2)
   42ff0:	1800031e 	bne	r3,zero,43000 <quorem+0x1e4>
   42ff4:	10bfff04 	addi	r2,r2,-4
   42ff8:	bdffffc4 	addi	r23,r23,-1
   42ffc:	98bffb36 	bltu	r19,r2,42fec <__alt_data_end+0xfffcd48c>
   43000:	d8c00017 	ldw	r3,0(sp)
   43004:	1dc00415 	stw	r23,16(r3)
   43008:	9005883a 	mov	r2,r18
   4300c:	dfc00d17 	ldw	ra,52(sp)
   43010:	df000c17 	ldw	fp,48(sp)
   43014:	ddc00b17 	ldw	r23,44(sp)
   43018:	dd800a17 	ldw	r22,40(sp)
   4301c:	dd400917 	ldw	r21,36(sp)
   43020:	dd000817 	ldw	r20,32(sp)
   43024:	dcc00717 	ldw	r19,28(sp)
   43028:	dc800617 	ldw	r18,24(sp)
   4302c:	dc400517 	ldw	r17,20(sp)
   43030:	dc000417 	ldw	r16,16(sp)
   43034:	dec00e04 	addi	sp,sp,56
   43038:	f800283a 	ret
   4303c:	0005883a 	mov	r2,zero
   43040:	003ff206 	br	4300c <__alt_data_end+0xfffcd4ac>

00043044 <_dtoa_r>:
   43044:	20801017 	ldw	r2,64(r4)
   43048:	deffde04 	addi	sp,sp,-136
   4304c:	dd401d15 	stw	r21,116(sp)
   43050:	dcc01b15 	stw	r19,108(sp)
   43054:	dc801a15 	stw	r18,104(sp)
   43058:	dc401915 	stw	r17,100(sp)
   4305c:	dc001815 	stw	r16,96(sp)
   43060:	dfc02115 	stw	ra,132(sp)
   43064:	df002015 	stw	fp,128(sp)
   43068:	ddc01f15 	stw	r23,124(sp)
   4306c:	dd801e15 	stw	r22,120(sp)
   43070:	dd001c15 	stw	r20,112(sp)
   43074:	d9c00315 	stw	r7,12(sp)
   43078:	2021883a 	mov	r16,r4
   4307c:	302b883a 	mov	r21,r6
   43080:	2825883a 	mov	r18,r5
   43084:	dc402417 	ldw	r17,144(sp)
   43088:	3027883a 	mov	r19,r6
   4308c:	10000826 	beq	r2,zero,430b0 <_dtoa_r+0x6c>
   43090:	21801117 	ldw	r6,68(r4)
   43094:	00c00044 	movi	r3,1
   43098:	100b883a 	mov	r5,r2
   4309c:	1986983a 	sll	r3,r3,r6
   430a0:	11800115 	stw	r6,4(r2)
   430a4:	10c00215 	stw	r3,8(r2)
   430a8:	00467280 	call	46728 <_Bfree>
   430ac:	80001015 	stw	zero,64(r16)
   430b0:	a8002d16 	blt	r21,zero,43168 <_dtoa_r+0x124>
   430b4:	88000015 	stw	zero,0(r17)
   430b8:	a8dffc2c 	andhi	r3,r21,32752
   430bc:	009ffc34 	movhi	r2,32752
   430c0:	18801b26 	beq	r3,r2,43130 <_dtoa_r+0xec>
   430c4:	9009883a 	mov	r4,r18
   430c8:	980b883a 	mov	r5,r19
   430cc:	000d883a 	mov	r6,zero
   430d0:	000f883a 	mov	r7,zero
   430d4:	004bd3c0 	call	4bd3c <__eqdf2>
   430d8:	10002a1e 	bne	r2,zero,43184 <_dtoa_r+0x140>
   430dc:	d8c02317 	ldw	r3,140(sp)
   430e0:	d9002517 	ldw	r4,148(sp)
   430e4:	00800044 	movi	r2,1
   430e8:	18800015 	stw	r2,0(r3)
   430ec:	2001a226 	beq	r4,zero,43778 <_dtoa_r+0x734>
   430f0:	00800174 	movhi	r2,5
   430f4:	1081a944 	addi	r2,r2,1701
   430f8:	20800015 	stw	r2,0(r4)
   430fc:	10bfffc4 	addi	r2,r2,-1
   43100:	dfc02117 	ldw	ra,132(sp)
   43104:	df002017 	ldw	fp,128(sp)
   43108:	ddc01f17 	ldw	r23,124(sp)
   4310c:	dd801e17 	ldw	r22,120(sp)
   43110:	dd401d17 	ldw	r21,116(sp)
   43114:	dd001c17 	ldw	r20,112(sp)
   43118:	dcc01b17 	ldw	r19,108(sp)
   4311c:	dc801a17 	ldw	r18,104(sp)
   43120:	dc401917 	ldw	r17,100(sp)
   43124:	dc001817 	ldw	r16,96(sp)
   43128:	dec02204 	addi	sp,sp,136
   4312c:	f800283a 	ret
   43130:	d8c02317 	ldw	r3,140(sp)
   43134:	0089c3c4 	movi	r2,9999
   43138:	18800015 	stw	r2,0(r3)
   4313c:	90017c26 	beq	r18,zero,43730 <_dtoa_r+0x6ec>
   43140:	00800174 	movhi	r2,5
   43144:	1081b504 	addi	r2,r2,1748
   43148:	d9002517 	ldw	r4,148(sp)
   4314c:	203fec26 	beq	r4,zero,43100 <__alt_data_end+0xfffcd5a0>
   43150:	10c000c7 	ldb	r3,3(r2)
   43154:	18017d1e 	bne	r3,zero,4374c <_dtoa_r+0x708>
   43158:	10c000c4 	addi	r3,r2,3
   4315c:	d9802517 	ldw	r6,148(sp)
   43160:	30c00015 	stw	r3,0(r6)
   43164:	003fe606 	br	43100 <__alt_data_end+0xfffcd5a0>
   43168:	04e00034 	movhi	r19,32768
   4316c:	9cffffc4 	addi	r19,r19,-1
   43170:	00800044 	movi	r2,1
   43174:	ace6703a 	and	r19,r21,r19
   43178:	88800015 	stw	r2,0(r17)
   4317c:	982b883a 	mov	r21,r19
   43180:	003fcd06 	br	430b8 <__alt_data_end+0xfffcd558>
   43184:	d8800204 	addi	r2,sp,8
   43188:	a822d53a 	srli	r17,r21,20
   4318c:	d8800015 	stw	r2,0(sp)
   43190:	8009883a 	mov	r4,r16
   43194:	900b883a 	mov	r5,r18
   43198:	980d883a 	mov	r6,r19
   4319c:	d9c00104 	addi	r7,sp,4
   431a0:	00473700 	call	47370 <__d2b>
   431a4:	1039883a 	mov	fp,r2
   431a8:	88016a1e 	bne	r17,zero,43754 <_dtoa_r+0x710>
   431ac:	dd000217 	ldw	r20,8(sp)
   431b0:	dc400117 	ldw	r17,4(sp)
   431b4:	00befbc4 	movi	r2,-1041
   431b8:	a463883a 	add	r17,r20,r17
   431bc:	8882ea16 	blt	r17,r2,43d68 <_dtoa_r+0xd24>
   431c0:	00bf0384 	movi	r2,-1010
   431c4:	1445c83a 	sub	r2,r2,r17
   431c8:	89010484 	addi	r4,r17,1042
   431cc:	a8aa983a 	sll	r21,r21,r2
   431d0:	9108d83a 	srl	r4,r18,r4
   431d4:	a908b03a 	or	r4,r21,r4
   431d8:	004d2140 	call	4d214 <__floatunsidf>
   431dc:	017f8434 	movhi	r5,65040
   431e0:	01800044 	movi	r6,1
   431e4:	1009883a 	mov	r4,r2
   431e8:	194b883a 	add	r5,r3,r5
   431ec:	8c7fffc4 	addi	r17,r17,-1
   431f0:	d9800f15 	stw	r6,60(sp)
   431f4:	000d883a 	mov	r6,zero
   431f8:	01cffe34 	movhi	r7,16376
   431fc:	004c7ec0 	call	4c7ec <__subdf3>
   43200:	0198dbf4 	movhi	r6,25455
   43204:	01cff4f4 	movhi	r7,16339
   43208:	1009883a 	mov	r4,r2
   4320c:	180b883a 	mov	r5,r3
   43210:	3190d844 	addi	r6,r6,17249
   43214:	39e1e9c4 	addi	r7,r7,-30809
   43218:	004bf800 	call	4bf80 <__muldf3>
   4321c:	01a2d874 	movhi	r6,35681
   43220:	01cff1f4 	movhi	r7,16327
   43224:	180b883a 	mov	r5,r3
   43228:	31b22cc4 	addi	r6,r6,-14157
   4322c:	39e28a04 	addi	r7,r7,-30168
   43230:	1009883a 	mov	r4,r2
   43234:	004ab200 	call	4ab20 <__adddf3>
   43238:	8809883a 	mov	r4,r17
   4323c:	102d883a 	mov	r22,r2
   43240:	182b883a 	mov	r21,r3
   43244:	004d1440 	call	4d144 <__floatsidf>
   43248:	019427f4 	movhi	r6,20639
   4324c:	01cff4f4 	movhi	r7,16339
   43250:	1009883a 	mov	r4,r2
   43254:	180b883a 	mov	r5,r3
   43258:	319e7ec4 	addi	r6,r6,31227
   4325c:	39d104c4 	addi	r7,r7,17427
   43260:	004bf800 	call	4bf80 <__muldf3>
   43264:	b009883a 	mov	r4,r22
   43268:	a80b883a 	mov	r5,r21
   4326c:	100d883a 	mov	r6,r2
   43270:	180f883a 	mov	r7,r3
   43274:	004ab200 	call	4ab20 <__adddf3>
   43278:	1009883a 	mov	r4,r2
   4327c:	180b883a 	mov	r5,r3
   43280:	102d883a 	mov	r22,r2
   43284:	182b883a 	mov	r21,r3
   43288:	004d0bc0 	call	4d0bc <__fixdfsi>
   4328c:	b009883a 	mov	r4,r22
   43290:	a80b883a 	mov	r5,r21
   43294:	000d883a 	mov	r6,zero
   43298:	000f883a 	mov	r7,zero
   4329c:	d8800515 	stw	r2,20(sp)
   432a0:	004bea00 	call	4bea0 <__ledf2>
   432a4:	10023116 	blt	r2,zero,43b6c <_dtoa_r+0xb28>
   432a8:	d8c00517 	ldw	r3,20(sp)
   432ac:	00800584 	movi	r2,22
   432b0:	10c21f36 	bltu	r2,r3,43b30 <_dtoa_r+0xaec>
   432b4:	180490fa 	slli	r2,r3,3
   432b8:	00c00174 	movhi	r3,5
   432bc:	18c1d104 	addi	r3,r3,1860
   432c0:	1885883a 	add	r2,r3,r2
   432c4:	11000017 	ldw	r4,0(r2)
   432c8:	11400117 	ldw	r5,4(r2)
   432cc:	900d883a 	mov	r6,r18
   432d0:	980f883a 	mov	r7,r19
   432d4:	004bdc00 	call	4bdc0 <__gedf2>
   432d8:	0082a70e 	bge	zero,r2,43d78 <_dtoa_r+0xd34>
   432dc:	d9000517 	ldw	r4,20(sp)
   432e0:	d8000c15 	stw	zero,48(sp)
   432e4:	213fffc4 	addi	r4,r4,-1
   432e8:	d9000515 	stw	r4,20(sp)
   432ec:	a463c83a 	sub	r17,r20,r17
   432f0:	8dbfffc4 	addi	r22,r17,-1
   432f4:	b0021916 	blt	r22,zero,43b5c <_dtoa_r+0xb18>
   432f8:	d8000815 	stw	zero,32(sp)
   432fc:	d8800517 	ldw	r2,20(sp)
   43300:	10020e16 	blt	r2,zero,43b3c <_dtoa_r+0xaf8>
   43304:	b0ad883a 	add	r22,r22,r2
   43308:	d8800a15 	stw	r2,40(sp)
   4330c:	d8000915 	stw	zero,36(sp)
   43310:	d8c00317 	ldw	r3,12(sp)
   43314:	00800244 	movi	r2,9
   43318:	10c11a36 	bltu	r2,r3,43784 <_dtoa_r+0x740>
   4331c:	00800144 	movi	r2,5
   43320:	10c4fc0e 	bge	r2,r3,44714 <_dtoa_r+0x16d0>
   43324:	18ffff04 	addi	r3,r3,-4
   43328:	d8c00315 	stw	r3,12(sp)
   4332c:	0029883a 	mov	r20,zero
   43330:	d9800317 	ldw	r6,12(sp)
   43334:	008000c4 	movi	r2,3
   43338:	3083bd26 	beq	r6,r2,44230 <_dtoa_r+0x11ec>
   4333c:	1183670e 	bge	r2,r6,440dc <_dtoa_r+0x1098>
   43340:	d8c00317 	ldw	r3,12(sp)
   43344:	00800104 	movi	r2,4
   43348:	1882e726 	beq	r3,r2,43ee8 <_dtoa_r+0xea4>
   4334c:	00800144 	movi	r2,5
   43350:	1884f21e 	bne	r3,r2,4471c <_dtoa_r+0x16d8>
   43354:	00800044 	movi	r2,1
   43358:	d8800b15 	stw	r2,44(sp)
   4335c:	d8c02217 	ldw	r3,136(sp)
   43360:	d9000517 	ldw	r4,20(sp)
   43364:	1907883a 	add	r3,r3,r4
   43368:	19800044 	addi	r6,r3,1
   4336c:	d8c00d15 	stw	r3,52(sp)
   43370:	d9800615 	stw	r6,24(sp)
   43374:	0183c30e 	bge	zero,r6,44284 <_dtoa_r+0x1240>
   43378:	d9800617 	ldw	r6,24(sp)
   4337c:	3023883a 	mov	r17,r6
   43380:	80001115 	stw	zero,68(r16)
   43384:	008005c4 	movi	r2,23
   43388:	1184f62e 	bgeu	r2,r6,44764 <_dtoa_r+0x1720>
   4338c:	00c00044 	movi	r3,1
   43390:	00800104 	movi	r2,4
   43394:	1085883a 	add	r2,r2,r2
   43398:	11000504 	addi	r4,r2,20
   4339c:	180b883a 	mov	r5,r3
   433a0:	18c00044 	addi	r3,r3,1
   433a4:	313ffb2e 	bgeu	r6,r4,43394 <__alt_data_end+0xfffcd834>
   433a8:	81401115 	stw	r5,68(r16)
   433ac:	8009883a 	mov	r4,r16
   433b0:	00466800 	call	46680 <_Balloc>
   433b4:	d8800715 	stw	r2,28(sp)
   433b8:	80801015 	stw	r2,64(r16)
   433bc:	00800384 	movi	r2,14
   433c0:	1440fd36 	bltu	r2,r17,437b8 <_dtoa_r+0x774>
   433c4:	a000fc26 	beq	r20,zero,437b8 <_dtoa_r+0x774>
   433c8:	d8800517 	ldw	r2,20(sp)
   433cc:	0083b90e 	bge	zero,r2,442b4 <_dtoa_r+0x1270>
   433d0:	d8c00517 	ldw	r3,20(sp)
   433d4:	108003cc 	andi	r2,r2,15
   433d8:	100490fa 	slli	r2,r2,3
   433dc:	182fd13a 	srai	r23,r3,4
   433e0:	00c00174 	movhi	r3,5
   433e4:	18c1d104 	addi	r3,r3,1860
   433e8:	1885883a 	add	r2,r3,r2
   433ec:	b8c0040c 	andi	r3,r23,16
   433f0:	12c00017 	ldw	r11,0(r2)
   433f4:	12800117 	ldw	r10,4(r2)
   433f8:	18039726 	beq	r3,zero,44258 <_dtoa_r+0x1214>
   433fc:	00800174 	movhi	r2,5
   43400:	1081c704 	addi	r2,r2,1820
   43404:	11800817 	ldw	r6,32(r2)
   43408:	11c00917 	ldw	r7,36(r2)
   4340c:	9009883a 	mov	r4,r18
   43410:	980b883a 	mov	r5,r19
   43414:	da801615 	stw	r10,88(sp)
   43418:	dac01515 	stw	r11,84(sp)
   4341c:	004b3bc0 	call	4b3bc <__divdf3>
   43420:	da801617 	ldw	r10,88(sp)
   43424:	dac01517 	ldw	r11,84(sp)
   43428:	bdc003cc 	andi	r23,r23,15
   4342c:	044000c4 	movi	r17,3
   43430:	d8800e15 	stw	r2,56(sp)
   43434:	182b883a 	mov	r21,r3
   43438:	b8001126 	beq	r23,zero,43480 <_dtoa_r+0x43c>
   4343c:	05000174 	movhi	r20,5
   43440:	a501c704 	addi	r20,r20,1820
   43444:	5805883a 	mov	r2,r11
   43448:	5007883a 	mov	r3,r10
   4344c:	b980004c 	andi	r6,r23,1
   43450:	1009883a 	mov	r4,r2
   43454:	b82fd07a 	srai	r23,r23,1
   43458:	180b883a 	mov	r5,r3
   4345c:	30000426 	beq	r6,zero,43470 <_dtoa_r+0x42c>
   43460:	a1800017 	ldw	r6,0(r20)
   43464:	a1c00117 	ldw	r7,4(r20)
   43468:	8c400044 	addi	r17,r17,1
   4346c:	004bf800 	call	4bf80 <__muldf3>
   43470:	a5000204 	addi	r20,r20,8
   43474:	b83ff51e 	bne	r23,zero,4344c <__alt_data_end+0xfffcd8ec>
   43478:	1017883a 	mov	r11,r2
   4347c:	1815883a 	mov	r10,r3
   43480:	d9000e17 	ldw	r4,56(sp)
   43484:	a80b883a 	mov	r5,r21
   43488:	580d883a 	mov	r6,r11
   4348c:	500f883a 	mov	r7,r10
   43490:	004b3bc0 	call	4b3bc <__divdf3>
   43494:	1029883a 	mov	r20,r2
   43498:	182b883a 	mov	r21,r3
   4349c:	d9800c17 	ldw	r6,48(sp)
   434a0:	30000626 	beq	r6,zero,434bc <_dtoa_r+0x478>
   434a4:	a009883a 	mov	r4,r20
   434a8:	a80b883a 	mov	r5,r21
   434ac:	000d883a 	mov	r6,zero
   434b0:	01cffc34 	movhi	r7,16368
   434b4:	004bea00 	call	4bea0 <__ledf2>
   434b8:	10043216 	blt	r2,zero,44584 <_dtoa_r+0x1540>
   434bc:	8809883a 	mov	r4,r17
   434c0:	004d1440 	call	4d144 <__floatsidf>
   434c4:	1009883a 	mov	r4,r2
   434c8:	180b883a 	mov	r5,r3
   434cc:	a00d883a 	mov	r6,r20
   434d0:	a80f883a 	mov	r7,r21
   434d4:	004bf800 	call	4bf80 <__muldf3>
   434d8:	000d883a 	mov	r6,zero
   434dc:	1009883a 	mov	r4,r2
   434e0:	180b883a 	mov	r5,r3
   434e4:	01d00734 	movhi	r7,16412
   434e8:	004ab200 	call	4ab20 <__adddf3>
   434ec:	1023883a 	mov	r17,r2
   434f0:	d9800617 	ldw	r6,24(sp)
   434f4:	00bf3034 	movhi	r2,64704
   434f8:	1885883a 	add	r2,r3,r2
   434fc:	d8800e15 	stw	r2,56(sp)
   43500:	30032e26 	beq	r6,zero,441bc <_dtoa_r+0x1178>
   43504:	d8c00517 	ldw	r3,20(sp)
   43508:	da800617 	ldw	r10,24(sp)
   4350c:	d8c01215 	stw	r3,72(sp)
   43510:	d9000b17 	ldw	r4,44(sp)
   43514:	2003b026 	beq	r4,zero,443d8 <_dtoa_r+0x1394>
   43518:	50bfffc4 	addi	r2,r10,-1
   4351c:	100490fa 	slli	r2,r2,3
   43520:	00c00174 	movhi	r3,5
   43524:	18c1d104 	addi	r3,r3,1860
   43528:	1885883a 	add	r2,r3,r2
   4352c:	11800017 	ldw	r6,0(r2)
   43530:	11c00117 	ldw	r7,4(r2)
   43534:	d8800717 	ldw	r2,28(sp)
   43538:	0009883a 	mov	r4,zero
   4353c:	014ff834 	movhi	r5,16352
   43540:	da801615 	stw	r10,88(sp)
   43544:	15c00044 	addi	r23,r2,1
   43548:	004b3bc0 	call	4b3bc <__divdf3>
   4354c:	d9c00e17 	ldw	r7,56(sp)
   43550:	880d883a 	mov	r6,r17
   43554:	1009883a 	mov	r4,r2
   43558:	180b883a 	mov	r5,r3
   4355c:	004c7ec0 	call	4c7ec <__subdf3>
   43560:	a80b883a 	mov	r5,r21
   43564:	a009883a 	mov	r4,r20
   43568:	d8c01015 	stw	r3,64(sp)
   4356c:	d8800e15 	stw	r2,56(sp)
   43570:	004d0bc0 	call	4d0bc <__fixdfsi>
   43574:	1009883a 	mov	r4,r2
   43578:	d8801715 	stw	r2,92(sp)
   4357c:	004d1440 	call	4d144 <__floatsidf>
   43580:	a009883a 	mov	r4,r20
   43584:	a80b883a 	mov	r5,r21
   43588:	100d883a 	mov	r6,r2
   4358c:	180f883a 	mov	r7,r3
   43590:	004c7ec0 	call	4c7ec <__subdf3>
   43594:	da001717 	ldw	r8,92(sp)
   43598:	1829883a 	mov	r20,r3
   4359c:	d8c00717 	ldw	r3,28(sp)
   435a0:	d9000e17 	ldw	r4,56(sp)
   435a4:	d9401017 	ldw	r5,64(sp)
   435a8:	42000c04 	addi	r8,r8,48
   435ac:	1023883a 	mov	r17,r2
   435b0:	1a000005 	stb	r8,0(r3)
   435b4:	880d883a 	mov	r6,r17
   435b8:	a00f883a 	mov	r7,r20
   435bc:	402b883a 	mov	r21,r8
   435c0:	004bdc00 	call	4bdc0 <__gedf2>
   435c4:	00844516 	blt	zero,r2,446dc <_dtoa_r+0x1698>
   435c8:	0009883a 	mov	r4,zero
   435cc:	014ffc34 	movhi	r5,16368
   435d0:	880d883a 	mov	r6,r17
   435d4:	a00f883a 	mov	r7,r20
   435d8:	004c7ec0 	call	4c7ec <__subdf3>
   435dc:	d9000e17 	ldw	r4,56(sp)
   435e0:	d9401017 	ldw	r5,64(sp)
   435e4:	100d883a 	mov	r6,r2
   435e8:	180f883a 	mov	r7,r3
   435ec:	004bdc00 	call	4bdc0 <__gedf2>
   435f0:	da801617 	ldw	r10,88(sp)
   435f4:	00843616 	blt	zero,r2,446d0 <_dtoa_r+0x168c>
   435f8:	00800044 	movi	r2,1
   435fc:	12806e0e 	bge	r2,r10,437b8 <_dtoa_r+0x774>
   43600:	d9000717 	ldw	r4,28(sp)
   43604:	dd801315 	stw	r22,76(sp)
   43608:	dc001115 	stw	r16,68(sp)
   4360c:	2295883a 	add	r10,r4,r10
   43610:	dcc01415 	stw	r19,80(sp)
   43614:	502d883a 	mov	r22,r10
   43618:	dcc01017 	ldw	r19,64(sp)
   4361c:	b821883a 	mov	r16,r23
   43620:	dc801015 	stw	r18,64(sp)
   43624:	dc800e17 	ldw	r18,56(sp)
   43628:	00000906 	br	43650 <_dtoa_r+0x60c>
   4362c:	004c7ec0 	call	4c7ec <__subdf3>
   43630:	1009883a 	mov	r4,r2
   43634:	180b883a 	mov	r5,r3
   43638:	900d883a 	mov	r6,r18
   4363c:	980f883a 	mov	r7,r19
   43640:	004bea00 	call	4bea0 <__ledf2>
   43644:	10040e16 	blt	r2,zero,44680 <_dtoa_r+0x163c>
   43648:	b821883a 	mov	r16,r23
   4364c:	bd841026 	beq	r23,r22,44690 <_dtoa_r+0x164c>
   43650:	9009883a 	mov	r4,r18
   43654:	980b883a 	mov	r5,r19
   43658:	000d883a 	mov	r6,zero
   4365c:	01d00934 	movhi	r7,16420
   43660:	004bf800 	call	4bf80 <__muldf3>
   43664:	000d883a 	mov	r6,zero
   43668:	01d00934 	movhi	r7,16420
   4366c:	8809883a 	mov	r4,r17
   43670:	a00b883a 	mov	r5,r20
   43674:	1025883a 	mov	r18,r2
   43678:	1827883a 	mov	r19,r3
   4367c:	004bf800 	call	4bf80 <__muldf3>
   43680:	180b883a 	mov	r5,r3
   43684:	1009883a 	mov	r4,r2
   43688:	1823883a 	mov	r17,r3
   4368c:	1029883a 	mov	r20,r2
   43690:	004d0bc0 	call	4d0bc <__fixdfsi>
   43694:	1009883a 	mov	r4,r2
   43698:	102b883a 	mov	r21,r2
   4369c:	004d1440 	call	4d144 <__floatsidf>
   436a0:	a009883a 	mov	r4,r20
   436a4:	880b883a 	mov	r5,r17
   436a8:	100d883a 	mov	r6,r2
   436ac:	180f883a 	mov	r7,r3
   436b0:	004c7ec0 	call	4c7ec <__subdf3>
   436b4:	ad400c04 	addi	r21,r21,48
   436b8:	1009883a 	mov	r4,r2
   436bc:	180b883a 	mov	r5,r3
   436c0:	900d883a 	mov	r6,r18
   436c4:	980f883a 	mov	r7,r19
   436c8:	85400005 	stb	r21,0(r16)
   436cc:	1023883a 	mov	r17,r2
   436d0:	1829883a 	mov	r20,r3
   436d4:	004bea00 	call	4bea0 <__ledf2>
   436d8:	bdc00044 	addi	r23,r23,1
   436dc:	0009883a 	mov	r4,zero
   436e0:	014ffc34 	movhi	r5,16368
   436e4:	880d883a 	mov	r6,r17
   436e8:	a00f883a 	mov	r7,r20
   436ec:	103fcf0e 	bge	r2,zero,4362c <__alt_data_end+0xfffcdacc>
   436f0:	d9801217 	ldw	r6,72(sp)
   436f4:	dc001117 	ldw	r16,68(sp)
   436f8:	d9800515 	stw	r6,20(sp)
   436fc:	8009883a 	mov	r4,r16
   43700:	e00b883a 	mov	r5,fp
   43704:	00467280 	call	46728 <_Bfree>
   43708:	d8c00517 	ldw	r3,20(sp)
   4370c:	d9002317 	ldw	r4,140(sp)
   43710:	d9802517 	ldw	r6,148(sp)
   43714:	b8000005 	stb	zero,0(r23)
   43718:	18800044 	addi	r2,r3,1
   4371c:	20800015 	stw	r2,0(r4)
   43720:	30027226 	beq	r6,zero,440ec <_dtoa_r+0x10a8>
   43724:	35c00015 	stw	r23,0(r6)
   43728:	d8800717 	ldw	r2,28(sp)
   4372c:	003e7406 	br	43100 <__alt_data_end+0xfffcd5a0>
   43730:	00800434 	movhi	r2,16
   43734:	10bfffc4 	addi	r2,r2,-1
   43738:	a8aa703a 	and	r21,r21,r2
   4373c:	a83e801e 	bne	r21,zero,43140 <__alt_data_end+0xfffcd5e0>
   43740:	00800174 	movhi	r2,5
   43744:	1081b204 	addi	r2,r2,1736
   43748:	003e7f06 	br	43148 <__alt_data_end+0xfffcd5e8>
   4374c:	10c00204 	addi	r3,r2,8
   43750:	003e8206 	br	4315c <__alt_data_end+0xfffcd5fc>
   43754:	01400434 	movhi	r5,16
   43758:	297fffc4 	addi	r5,r5,-1
   4375c:	994a703a 	and	r5,r19,r5
   43760:	9009883a 	mov	r4,r18
   43764:	8c7f0044 	addi	r17,r17,-1023
   43768:	294ffc34 	orhi	r5,r5,16368
   4376c:	dd000217 	ldw	r20,8(sp)
   43770:	d8000f15 	stw	zero,60(sp)
   43774:	003e9f06 	br	431f4 <__alt_data_end+0xfffcd694>
   43778:	00800174 	movhi	r2,5
   4377c:	1081a904 	addi	r2,r2,1700
   43780:	003e5f06 	br	43100 <__alt_data_end+0xfffcd5a0>
   43784:	80001115 	stw	zero,68(r16)
   43788:	8009883a 	mov	r4,r16
   4378c:	000b883a 	mov	r5,zero
   43790:	00466800 	call	46680 <_Balloc>
   43794:	01bfffc4 	movi	r6,-1
   43798:	d8800715 	stw	r2,28(sp)
   4379c:	80801015 	stw	r2,64(r16)
   437a0:	00800044 	movi	r2,1
   437a4:	d9800615 	stw	r6,24(sp)
   437a8:	d8800b15 	stw	r2,44(sp)
   437ac:	d8002215 	stw	zero,136(sp)
   437b0:	d9800d15 	stw	r6,52(sp)
   437b4:	d8000315 	stw	zero,12(sp)
   437b8:	d8800117 	ldw	r2,4(sp)
   437bc:	10008e16 	blt	r2,zero,439f8 <_dtoa_r+0x9b4>
   437c0:	d9000517 	ldw	r4,20(sp)
   437c4:	00c00384 	movi	r3,14
   437c8:	19008b16 	blt	r3,r4,439f8 <_dtoa_r+0x9b4>
   437cc:	200490fa 	slli	r2,r4,3
   437d0:	00c00174 	movhi	r3,5
   437d4:	d9802217 	ldw	r6,136(sp)
   437d8:	18c1d104 	addi	r3,r3,1860
   437dc:	1885883a 	add	r2,r3,r2
   437e0:	14400017 	ldw	r17,0(r2)
   437e4:	15000117 	ldw	r20,4(r2)
   437e8:	3001c716 	blt	r6,zero,43f08 <_dtoa_r+0xec4>
   437ec:	880d883a 	mov	r6,r17
   437f0:	a00f883a 	mov	r7,r20
   437f4:	9009883a 	mov	r4,r18
   437f8:	980b883a 	mov	r5,r19
   437fc:	004b3bc0 	call	4b3bc <__divdf3>
   43800:	180b883a 	mov	r5,r3
   43804:	1009883a 	mov	r4,r2
   43808:	004d0bc0 	call	4d0bc <__fixdfsi>
   4380c:	1009883a 	mov	r4,r2
   43810:	102d883a 	mov	r22,r2
   43814:	004d1440 	call	4d144 <__floatsidf>
   43818:	1009883a 	mov	r4,r2
   4381c:	180b883a 	mov	r5,r3
   43820:	880d883a 	mov	r6,r17
   43824:	a00f883a 	mov	r7,r20
   43828:	004bf800 	call	4bf80 <__muldf3>
   4382c:	9009883a 	mov	r4,r18
   43830:	980b883a 	mov	r5,r19
   43834:	100d883a 	mov	r6,r2
   43838:	180f883a 	mov	r7,r3
   4383c:	004c7ec0 	call	4c7ec <__subdf3>
   43840:	d9000717 	ldw	r4,28(sp)
   43844:	d9800617 	ldw	r6,24(sp)
   43848:	180b883a 	mov	r5,r3
   4384c:	b0c00c04 	addi	r3,r22,48
   43850:	20c00005 	stb	r3,0(r4)
   43854:	25c00044 	addi	r23,r4,1
   43858:	01000044 	movi	r4,1
   4385c:	1011883a 	mov	r8,r2
   43860:	2807883a 	mov	r3,r5
   43864:	31003d26 	beq	r6,r4,4395c <_dtoa_r+0x918>
   43868:	000d883a 	mov	r6,zero
   4386c:	01d00934 	movhi	r7,16420
   43870:	1009883a 	mov	r4,r2
   43874:	004bf800 	call	4bf80 <__muldf3>
   43878:	1009883a 	mov	r4,r2
   4387c:	180b883a 	mov	r5,r3
   43880:	000d883a 	mov	r6,zero
   43884:	000f883a 	mov	r7,zero
   43888:	1027883a 	mov	r19,r2
   4388c:	182b883a 	mov	r21,r3
   43890:	004bd3c0 	call	4bd3c <__eqdf2>
   43894:	103f9926 	beq	r2,zero,436fc <__alt_data_end+0xfffcdb9c>
   43898:	d8c00617 	ldw	r3,24(sp)
   4389c:	d9000717 	ldw	r4,28(sp)
   438a0:	b825883a 	mov	r18,r23
   438a4:	18bfffc4 	addi	r2,r3,-1
   438a8:	20ad883a 	add	r22,r4,r2
   438ac:	dc000315 	stw	r16,12(sp)
   438b0:	00000a06 	br	438dc <_dtoa_r+0x898>
   438b4:	004bf800 	call	4bf80 <__muldf3>
   438b8:	1009883a 	mov	r4,r2
   438bc:	180b883a 	mov	r5,r3
   438c0:	000d883a 	mov	r6,zero
   438c4:	000f883a 	mov	r7,zero
   438c8:	1027883a 	mov	r19,r2
   438cc:	182b883a 	mov	r21,r3
   438d0:	b825883a 	mov	r18,r23
   438d4:	004bd3c0 	call	4bd3c <__eqdf2>
   438d8:	10022626 	beq	r2,zero,44174 <_dtoa_r+0x1130>
   438dc:	880d883a 	mov	r6,r17
   438e0:	a00f883a 	mov	r7,r20
   438e4:	9809883a 	mov	r4,r19
   438e8:	a80b883a 	mov	r5,r21
   438ec:	004b3bc0 	call	4b3bc <__divdf3>
   438f0:	180b883a 	mov	r5,r3
   438f4:	1009883a 	mov	r4,r2
   438f8:	004d0bc0 	call	4d0bc <__fixdfsi>
   438fc:	1009883a 	mov	r4,r2
   43900:	1021883a 	mov	r16,r2
   43904:	004d1440 	call	4d144 <__floatsidf>
   43908:	1009883a 	mov	r4,r2
   4390c:	180b883a 	mov	r5,r3
   43910:	880d883a 	mov	r6,r17
   43914:	a00f883a 	mov	r7,r20
   43918:	004bf800 	call	4bf80 <__muldf3>
   4391c:	9809883a 	mov	r4,r19
   43920:	a80b883a 	mov	r5,r21
   43924:	100d883a 	mov	r6,r2
   43928:	180f883a 	mov	r7,r3
   4392c:	004c7ec0 	call	4c7ec <__subdf3>
   43930:	82000c04 	addi	r8,r16,48
   43934:	92000005 	stb	r8,0(r18)
   43938:	1009883a 	mov	r4,r2
   4393c:	180b883a 	mov	r5,r3
   43940:	000d883a 	mov	r6,zero
   43944:	01d00934 	movhi	r7,16420
   43948:	1011883a 	mov	r8,r2
   4394c:	bdc00044 	addi	r23,r23,1
   43950:	95bfd81e 	bne	r18,r22,438b4 <__alt_data_end+0xfffcdd54>
   43954:	802d883a 	mov	r22,r16
   43958:	dc000317 	ldw	r16,12(sp)
   4395c:	4009883a 	mov	r4,r8
   43960:	180b883a 	mov	r5,r3
   43964:	400d883a 	mov	r6,r8
   43968:	180f883a 	mov	r7,r3
   4396c:	004ab200 	call	4ab20 <__adddf3>
   43970:	8809883a 	mov	r4,r17
   43974:	a00b883a 	mov	r5,r20
   43978:	100d883a 	mov	r6,r2
   4397c:	180f883a 	mov	r7,r3
   43980:	1027883a 	mov	r19,r2
   43984:	1825883a 	mov	r18,r3
   43988:	004bea00 	call	4bea0 <__ledf2>
   4398c:	10000816 	blt	r2,zero,439b0 <_dtoa_r+0x96c>
   43990:	8809883a 	mov	r4,r17
   43994:	a00b883a 	mov	r5,r20
   43998:	980d883a 	mov	r6,r19
   4399c:	900f883a 	mov	r7,r18
   439a0:	004bd3c0 	call	4bd3c <__eqdf2>
   439a4:	103f551e 	bne	r2,zero,436fc <__alt_data_end+0xfffcdb9c>
   439a8:	b580004c 	andi	r22,r22,1
   439ac:	b03f5326 	beq	r22,zero,436fc <__alt_data_end+0xfffcdb9c>
   439b0:	bd7fffc3 	ldbu	r21,-1(r23)
   439b4:	b8bfffc4 	addi	r2,r23,-1
   439b8:	1007883a 	mov	r3,r2
   439bc:	01400e44 	movi	r5,57
   439c0:	d9800717 	ldw	r6,28(sp)
   439c4:	00000506 	br	439dc <_dtoa_r+0x998>
   439c8:	18ffffc4 	addi	r3,r3,-1
   439cc:	30825e26 	beq	r6,r2,44348 <_dtoa_r+0x1304>
   439d0:	1d400003 	ldbu	r21,0(r3)
   439d4:	102f883a 	mov	r23,r2
   439d8:	10bfffc4 	addi	r2,r2,-1
   439dc:	a9003fcc 	andi	r4,r21,255
   439e0:	2100201c 	xori	r4,r4,128
   439e4:	213fe004 	addi	r4,r4,-128
   439e8:	217ff726 	beq	r4,r5,439c8 <__alt_data_end+0xfffcde68>
   439ec:	aa000044 	addi	r8,r21,1
   439f0:	12000005 	stb	r8,0(r2)
   439f4:	003f4106 	br	436fc <__alt_data_end+0xfffcdb9c>
   439f8:	d8c00b17 	ldw	r3,44(sp)
   439fc:	18006726 	beq	r3,zero,43b9c <_dtoa_r+0xb58>
   43a00:	d9000317 	ldw	r4,12(sp)
   43a04:	00c00044 	movi	r3,1
   43a08:	19016a0e 	bge	r3,r4,43fb4 <_dtoa_r+0xf70>
   43a0c:	d8800617 	ldw	r2,24(sp)
   43a10:	d8c00917 	ldw	r3,36(sp)
   43a14:	157fffc4 	addi	r21,r2,-1
   43a18:	1d420716 	blt	r3,r21,44238 <_dtoa_r+0x11f4>
   43a1c:	1d6bc83a 	sub	r21,r3,r21
   43a20:	d8800617 	ldw	r2,24(sp)
   43a24:	1002c716 	blt	r2,zero,44544 <_dtoa_r+0x1500>
   43a28:	dd000817 	ldw	r20,32(sp)
   43a2c:	d8800617 	ldw	r2,24(sp)
   43a30:	d9800817 	ldw	r6,32(sp)
   43a34:	8009883a 	mov	r4,r16
   43a38:	01400044 	movi	r5,1
   43a3c:	308d883a 	add	r6,r6,r2
   43a40:	d9800815 	stw	r6,32(sp)
   43a44:	b0ad883a 	add	r22,r22,r2
   43a48:	0046aa80 	call	46aa8 <__i2b>
   43a4c:	1023883a 	mov	r17,r2
   43a50:	a0000826 	beq	r20,zero,43a74 <_dtoa_r+0xa30>
   43a54:	0580070e 	bge	zero,r22,43a74 <_dtoa_r+0xa30>
   43a58:	b005883a 	mov	r2,r22
   43a5c:	a5812016 	blt	r20,r22,43ee0 <_dtoa_r+0xe9c>
   43a60:	d8c00817 	ldw	r3,32(sp)
   43a64:	a0a9c83a 	sub	r20,r20,r2
   43a68:	b0adc83a 	sub	r22,r22,r2
   43a6c:	1887c83a 	sub	r3,r3,r2
   43a70:	d8c00815 	stw	r3,32(sp)
   43a74:	d9000917 	ldw	r4,36(sp)
   43a78:	0100140e 	bge	zero,r4,43acc <_dtoa_r+0xa88>
   43a7c:	d9800b17 	ldw	r6,44(sp)
   43a80:	3001e526 	beq	r6,zero,44218 <_dtoa_r+0x11d4>
   43a84:	05400e0e 	bge	zero,r21,43ac0 <_dtoa_r+0xa7c>
   43a88:	880b883a 	mov	r5,r17
   43a8c:	8009883a 	mov	r4,r16
   43a90:	a80d883a 	mov	r6,r21
   43a94:	0046d740 	call	46d74 <__pow5mult>
   43a98:	e00d883a 	mov	r6,fp
   43a9c:	8009883a 	mov	r4,r16
   43aa0:	100b883a 	mov	r5,r2
   43aa4:	1023883a 	mov	r17,r2
   43aa8:	0046ae40 	call	46ae4 <__multiply>
   43aac:	102f883a 	mov	r23,r2
   43ab0:	e00b883a 	mov	r5,fp
   43ab4:	8009883a 	mov	r4,r16
   43ab8:	00467280 	call	46728 <_Bfree>
   43abc:	b839883a 	mov	fp,r23
   43ac0:	d8800917 	ldw	r2,36(sp)
   43ac4:	154dc83a 	sub	r6,r2,r21
   43ac8:	3001281e 	bne	r6,zero,43f6c <_dtoa_r+0xf28>
   43acc:	05c00044 	movi	r23,1
   43ad0:	8009883a 	mov	r4,r16
   43ad4:	b80b883a 	mov	r5,r23
   43ad8:	0046aa80 	call	46aa8 <__i2b>
   43adc:	d8c00a17 	ldw	r3,40(sp)
   43ae0:	102b883a 	mov	r21,r2
   43ae4:	00c0310e 	bge	zero,r3,43bac <_dtoa_r+0xb68>
   43ae8:	8009883a 	mov	r4,r16
   43aec:	100b883a 	mov	r5,r2
   43af0:	180d883a 	mov	r6,r3
   43af4:	0046d740 	call	46d74 <__pow5mult>
   43af8:	d9000317 	ldw	r4,12(sp)
   43afc:	102b883a 	mov	r21,r2
   43b00:	b9011f0e 	bge	r23,r4,43f80 <_dtoa_r+0xf3c>
   43b04:	0027883a 	mov	r19,zero
   43b08:	a8800417 	ldw	r2,16(r21)
   43b0c:	10800104 	addi	r2,r2,4
   43b10:	1085883a 	add	r2,r2,r2
   43b14:	1085883a 	add	r2,r2,r2
   43b18:	a885883a 	add	r2,r21,r2
   43b1c:	11000017 	ldw	r4,0(r2)
   43b20:	00469900 	call	46990 <__hi0bits>
   43b24:	00c00804 	movi	r3,32
   43b28:	1885c83a 	sub	r2,r3,r2
   43b2c:	00002506 	br	43bc4 <_dtoa_r+0xb80>
   43b30:	01800044 	movi	r6,1
   43b34:	d9800c15 	stw	r6,48(sp)
   43b38:	003dec06 	br	432ec <__alt_data_end+0xfffcd78c>
   43b3c:	d8c00817 	ldw	r3,32(sp)
   43b40:	d9000517 	ldw	r4,20(sp)
   43b44:	d8000a15 	stw	zero,40(sp)
   43b48:	1907c83a 	sub	r3,r3,r4
   43b4c:	010dc83a 	sub	r6,zero,r4
   43b50:	d8c00815 	stw	r3,32(sp)
   43b54:	d9800915 	stw	r6,36(sp)
   43b58:	003ded06 	br	43310 <__alt_data_end+0xfffcd7b0>
   43b5c:	05adc83a 	sub	r22,zero,r22
   43b60:	dd800815 	stw	r22,32(sp)
   43b64:	002d883a 	mov	r22,zero
   43b68:	003de406 	br	432fc <__alt_data_end+0xfffcd79c>
   43b6c:	d9000517 	ldw	r4,20(sp)
   43b70:	004d1440 	call	4d144 <__floatsidf>
   43b74:	1009883a 	mov	r4,r2
   43b78:	180b883a 	mov	r5,r3
   43b7c:	b00d883a 	mov	r6,r22
   43b80:	a80f883a 	mov	r7,r21
   43b84:	004bd3c0 	call	4bd3c <__eqdf2>
   43b88:	103dc726 	beq	r2,zero,432a8 <__alt_data_end+0xfffcd748>
   43b8c:	d8800517 	ldw	r2,20(sp)
   43b90:	10bfffc4 	addi	r2,r2,-1
   43b94:	d8800515 	stw	r2,20(sp)
   43b98:	003dc306 	br	432a8 <__alt_data_end+0xfffcd748>
   43b9c:	dd400917 	ldw	r21,36(sp)
   43ba0:	dd000817 	ldw	r20,32(sp)
   43ba4:	0023883a 	mov	r17,zero
   43ba8:	003fa906 	br	43a50 <__alt_data_end+0xfffcdef0>
   43bac:	d9800317 	ldw	r6,12(sp)
   43bb0:	b981670e 	bge	r23,r6,44150 <_dtoa_r+0x110c>
   43bb4:	0027883a 	mov	r19,zero
   43bb8:	d8c00a17 	ldw	r3,40(sp)
   43bbc:	183fd21e 	bne	r3,zero,43b08 <__alt_data_end+0xfffcdfa8>
   43bc0:	00800044 	movi	r2,1
   43bc4:	1585883a 	add	r2,r2,r22
   43bc8:	108007cc 	andi	r2,r2,31
   43bcc:	10005f26 	beq	r2,zero,43d4c <_dtoa_r+0xd08>
   43bd0:	00c00804 	movi	r3,32
   43bd4:	1887c83a 	sub	r3,r3,r2
   43bd8:	01000104 	movi	r4,4
   43bdc:	20c2dd0e 	bge	r4,r3,44754 <_dtoa_r+0x1710>
   43be0:	d9000817 	ldw	r4,32(sp)
   43be4:	00c00704 	movi	r3,28
   43be8:	1885c83a 	sub	r2,r3,r2
   43bec:	2089883a 	add	r4,r4,r2
   43bf0:	d9000815 	stw	r4,32(sp)
   43bf4:	a0a9883a 	add	r20,r20,r2
   43bf8:	b0ad883a 	add	r22,r22,r2
   43bfc:	d8800817 	ldw	r2,32(sp)
   43c00:	0080050e 	bge	zero,r2,43c18 <_dtoa_r+0xbd4>
   43c04:	e00b883a 	mov	r5,fp
   43c08:	8009883a 	mov	r4,r16
   43c0c:	100d883a 	mov	r6,r2
   43c10:	0046eb40 	call	46eb4 <__lshift>
   43c14:	1039883a 	mov	fp,r2
   43c18:	0580050e 	bge	zero,r22,43c30 <_dtoa_r+0xbec>
   43c1c:	a80b883a 	mov	r5,r21
   43c20:	8009883a 	mov	r4,r16
   43c24:	b00d883a 	mov	r6,r22
   43c28:	0046eb40 	call	46eb4 <__lshift>
   43c2c:	102b883a 	mov	r21,r2
   43c30:	d8c00c17 	ldw	r3,48(sp)
   43c34:	1801161e 	bne	r3,zero,44090 <_dtoa_r+0x104c>
   43c38:	d8c00617 	ldw	r3,24(sp)
   43c3c:	00c12d0e 	bge	zero,r3,440f4 <_dtoa_r+0x10b0>
   43c40:	d8c00b17 	ldw	r3,44(sp)
   43c44:	1800571e 	bne	r3,zero,43da4 <_dtoa_r+0xd60>
   43c48:	dc800717 	ldw	r18,28(sp)
   43c4c:	dcc00617 	ldw	r19,24(sp)
   43c50:	9029883a 	mov	r20,r18
   43c54:	00000206 	br	43c60 <_dtoa_r+0xc1c>
   43c58:	00467500 	call	46750 <__multadd>
   43c5c:	1039883a 	mov	fp,r2
   43c60:	e009883a 	mov	r4,fp
   43c64:	a80b883a 	mov	r5,r21
   43c68:	0042e1c0 	call	42e1c <quorem>
   43c6c:	10800c04 	addi	r2,r2,48
   43c70:	90800005 	stb	r2,0(r18)
   43c74:	94800044 	addi	r18,r18,1
   43c78:	9507c83a 	sub	r3,r18,r20
   43c7c:	8009883a 	mov	r4,r16
   43c80:	e00b883a 	mov	r5,fp
   43c84:	01800284 	movi	r6,10
   43c88:	000f883a 	mov	r7,zero
   43c8c:	1cfff216 	blt	r3,r19,43c58 <__alt_data_end+0xfffce0f8>
   43c90:	1011883a 	mov	r8,r2
   43c94:	d8800617 	ldw	r2,24(sp)
   43c98:	00822e0e 	bge	zero,r2,44554 <_dtoa_r+0x1510>
   43c9c:	d9000717 	ldw	r4,28(sp)
   43ca0:	0025883a 	mov	r18,zero
   43ca4:	20af883a 	add	r23,r4,r2
   43ca8:	e00b883a 	mov	r5,fp
   43cac:	01800044 	movi	r6,1
   43cb0:	8009883a 	mov	r4,r16
   43cb4:	da001715 	stw	r8,92(sp)
   43cb8:	0046eb40 	call	46eb4 <__lshift>
   43cbc:	1009883a 	mov	r4,r2
   43cc0:	a80b883a 	mov	r5,r21
   43cc4:	1039883a 	mov	fp,r2
   43cc8:	0046ffc0 	call	46ffc <__mcmp>
   43ccc:	da001717 	ldw	r8,92(sp)
   43cd0:	00816e0e 	bge	zero,r2,4428c <_dtoa_r+0x1248>
   43cd4:	b93fffc3 	ldbu	r4,-1(r23)
   43cd8:	b8bfffc4 	addi	r2,r23,-1
   43cdc:	1007883a 	mov	r3,r2
   43ce0:	01800e44 	movi	r6,57
   43ce4:	d9c00717 	ldw	r7,28(sp)
   43ce8:	00000506 	br	43d00 <_dtoa_r+0xcbc>
   43cec:	18ffffc4 	addi	r3,r3,-1
   43cf0:	38811926 	beq	r7,r2,44158 <_dtoa_r+0x1114>
   43cf4:	19000003 	ldbu	r4,0(r3)
   43cf8:	102f883a 	mov	r23,r2
   43cfc:	10bfffc4 	addi	r2,r2,-1
   43d00:	21403fcc 	andi	r5,r4,255
   43d04:	2940201c 	xori	r5,r5,128
   43d08:	297fe004 	addi	r5,r5,-128
   43d0c:	29bff726 	beq	r5,r6,43cec <__alt_data_end+0xfffce18c>
   43d10:	21000044 	addi	r4,r4,1
   43d14:	11000005 	stb	r4,0(r2)
   43d18:	8009883a 	mov	r4,r16
   43d1c:	a80b883a 	mov	r5,r21
   43d20:	00467280 	call	46728 <_Bfree>
   43d24:	883e7526 	beq	r17,zero,436fc <__alt_data_end+0xfffcdb9c>
   43d28:	90000426 	beq	r18,zero,43d3c <_dtoa_r+0xcf8>
   43d2c:	94400326 	beq	r18,r17,43d3c <_dtoa_r+0xcf8>
   43d30:	8009883a 	mov	r4,r16
   43d34:	900b883a 	mov	r5,r18
   43d38:	00467280 	call	46728 <_Bfree>
   43d3c:	8009883a 	mov	r4,r16
   43d40:	880b883a 	mov	r5,r17
   43d44:	00467280 	call	46728 <_Bfree>
   43d48:	003e6c06 	br	436fc <__alt_data_end+0xfffcdb9c>
   43d4c:	00800704 	movi	r2,28
   43d50:	d9800817 	ldw	r6,32(sp)
   43d54:	a0a9883a 	add	r20,r20,r2
   43d58:	b0ad883a 	add	r22,r22,r2
   43d5c:	308d883a 	add	r6,r6,r2
   43d60:	d9800815 	stw	r6,32(sp)
   43d64:	003fa506 	br	43bfc <__alt_data_end+0xfffce09c>
   43d68:	013efb84 	movi	r4,-1042
   43d6c:	246bc83a 	sub	r21,r4,r17
   43d70:	9548983a 	sll	r4,r18,r21
   43d74:	003d1806 	br	431d8 <__alt_data_end+0xfffcd678>
   43d78:	d8000c15 	stw	zero,48(sp)
   43d7c:	003d5b06 	br	432ec <__alt_data_end+0xfffcd78c>
   43d80:	880b883a 	mov	r5,r17
   43d84:	8009883a 	mov	r4,r16
   43d88:	01800284 	movi	r6,10
   43d8c:	000f883a 	mov	r7,zero
   43d90:	00467500 	call	46750 <__multadd>
   43d94:	1023883a 	mov	r17,r2
   43d98:	d8800d17 	ldw	r2,52(sp)
   43d9c:	0082550e 	bge	zero,r2,446f4 <_dtoa_r+0x16b0>
   43da0:	d8800615 	stw	r2,24(sp)
   43da4:	0500050e 	bge	zero,r20,43dbc <_dtoa_r+0xd78>
   43da8:	880b883a 	mov	r5,r17
   43dac:	8009883a 	mov	r4,r16
   43db0:	a00d883a 	mov	r6,r20
   43db4:	0046eb40 	call	46eb4 <__lshift>
   43db8:	1023883a 	mov	r17,r2
   43dbc:	98016a1e 	bne	r19,zero,44368 <_dtoa_r+0x1324>
   43dc0:	8829883a 	mov	r20,r17
   43dc4:	d9000617 	ldw	r4,24(sp)
   43dc8:	dcc00717 	ldw	r19,28(sp)
   43dcc:	9480004c 	andi	r18,r18,1
   43dd0:	20bfffc4 	addi	r2,r4,-1
   43dd4:	9885883a 	add	r2,r19,r2
   43dd8:	d8800415 	stw	r2,16(sp)
   43ddc:	dc800615 	stw	r18,24(sp)
   43de0:	e009883a 	mov	r4,fp
   43de4:	a80b883a 	mov	r5,r21
   43de8:	0042e1c0 	call	42e1c <quorem>
   43dec:	e009883a 	mov	r4,fp
   43df0:	880b883a 	mov	r5,r17
   43df4:	102f883a 	mov	r23,r2
   43df8:	0046ffc0 	call	46ffc <__mcmp>
   43dfc:	8009883a 	mov	r4,r16
   43e00:	a80b883a 	mov	r5,r21
   43e04:	a00d883a 	mov	r6,r20
   43e08:	102d883a 	mov	r22,r2
   43e0c:	004705c0 	call	4705c <__mdiff>
   43e10:	1007883a 	mov	r3,r2
   43e14:	10800317 	ldw	r2,12(r2)
   43e18:	bc800c04 	addi	r18,r23,48
   43e1c:	1000971e 	bne	r2,zero,4407c <_dtoa_r+0x1038>
   43e20:	180b883a 	mov	r5,r3
   43e24:	e009883a 	mov	r4,fp
   43e28:	d8c01515 	stw	r3,84(sp)
   43e2c:	0046ffc0 	call	46ffc <__mcmp>
   43e30:	d8c01517 	ldw	r3,84(sp)
   43e34:	8009883a 	mov	r4,r16
   43e38:	d8801515 	stw	r2,84(sp)
   43e3c:	180b883a 	mov	r5,r3
   43e40:	00467280 	call	46728 <_Bfree>
   43e44:	d8801517 	ldw	r2,84(sp)
   43e48:	1000041e 	bne	r2,zero,43e5c <_dtoa_r+0xe18>
   43e4c:	d9800317 	ldw	r6,12(sp)
   43e50:	3000021e 	bne	r6,zero,43e5c <_dtoa_r+0xe18>
   43e54:	d8c00617 	ldw	r3,24(sp)
   43e58:	18007626 	beq	r3,zero,44034 <_dtoa_r+0xff0>
   43e5c:	b0005b16 	blt	r22,zero,43fcc <_dtoa_r+0xf88>
   43e60:	b000041e 	bne	r22,zero,43e74 <_dtoa_r+0xe30>
   43e64:	d9000317 	ldw	r4,12(sp)
   43e68:	2000021e 	bne	r4,zero,43e74 <_dtoa_r+0xe30>
   43e6c:	d8c00617 	ldw	r3,24(sp)
   43e70:	18005626 	beq	r3,zero,43fcc <_dtoa_r+0xf88>
   43e74:	00814d16 	blt	zero,r2,443ac <_dtoa_r+0x1368>
   43e78:	d8c00417 	ldw	r3,16(sp)
   43e7c:	9d800044 	addi	r22,r19,1
   43e80:	9c800005 	stb	r18,0(r19)
   43e84:	b02f883a 	mov	r23,r22
   43e88:	98c14c26 	beq	r19,r3,443bc <_dtoa_r+0x1378>
   43e8c:	e00b883a 	mov	r5,fp
   43e90:	8009883a 	mov	r4,r16
   43e94:	01800284 	movi	r6,10
   43e98:	000f883a 	mov	r7,zero
   43e9c:	00467500 	call	46750 <__multadd>
   43ea0:	1039883a 	mov	fp,r2
   43ea4:	8d006d26 	beq	r17,r20,4405c <_dtoa_r+0x1018>
   43ea8:	880b883a 	mov	r5,r17
   43eac:	01800284 	movi	r6,10
   43eb0:	000f883a 	mov	r7,zero
   43eb4:	8009883a 	mov	r4,r16
   43eb8:	00467500 	call	46750 <__multadd>
   43ebc:	a00b883a 	mov	r5,r20
   43ec0:	8009883a 	mov	r4,r16
   43ec4:	01800284 	movi	r6,10
   43ec8:	000f883a 	mov	r7,zero
   43ecc:	1023883a 	mov	r17,r2
   43ed0:	00467500 	call	46750 <__multadd>
   43ed4:	1029883a 	mov	r20,r2
   43ed8:	b027883a 	mov	r19,r22
   43edc:	003fc006 	br	43de0 <__alt_data_end+0xfffce280>
   43ee0:	a005883a 	mov	r2,r20
   43ee4:	003ede06 	br	43a60 <__alt_data_end+0xfffcdf00>
   43ee8:	01000044 	movi	r4,1
   43eec:	d9000b15 	stw	r4,44(sp)
   43ef0:	d9802217 	ldw	r6,136(sp)
   43ef4:	0180dc0e 	bge	zero,r6,44268 <_dtoa_r+0x1224>
   43ef8:	3023883a 	mov	r17,r6
   43efc:	d9800d15 	stw	r6,52(sp)
   43f00:	d9800615 	stw	r6,24(sp)
   43f04:	003d1e06 	br	43380 <__alt_data_end+0xfffcd820>
   43f08:	d8800617 	ldw	r2,24(sp)
   43f0c:	00be3716 	blt	zero,r2,437ec <__alt_data_end+0xfffcdc8c>
   43f10:	1000be1e 	bne	r2,zero,4420c <_dtoa_r+0x11c8>
   43f14:	8809883a 	mov	r4,r17
   43f18:	a00b883a 	mov	r5,r20
   43f1c:	000d883a 	mov	r6,zero
   43f20:	01d00534 	movhi	r7,16404
   43f24:	004bf800 	call	4bf80 <__muldf3>
   43f28:	1009883a 	mov	r4,r2
   43f2c:	180b883a 	mov	r5,r3
   43f30:	900d883a 	mov	r6,r18
   43f34:	980f883a 	mov	r7,r19
   43f38:	004bdc00 	call	4bdc0 <__gedf2>
   43f3c:	002b883a 	mov	r21,zero
   43f40:	0023883a 	mov	r17,zero
   43f44:	10007a16 	blt	r2,zero,44130 <_dtoa_r+0x10ec>
   43f48:	d9002217 	ldw	r4,136(sp)
   43f4c:	ddc00717 	ldw	r23,28(sp)
   43f50:	0108303a 	nor	r4,zero,r4
   43f54:	d9000515 	stw	r4,20(sp)
   43f58:	8009883a 	mov	r4,r16
   43f5c:	a80b883a 	mov	r5,r21
   43f60:	00467280 	call	46728 <_Bfree>
   43f64:	883f751e 	bne	r17,zero,43d3c <__alt_data_end+0xfffce1dc>
   43f68:	003de406 	br	436fc <__alt_data_end+0xfffcdb9c>
   43f6c:	e00b883a 	mov	r5,fp
   43f70:	8009883a 	mov	r4,r16
   43f74:	0046d740 	call	46d74 <__pow5mult>
   43f78:	1039883a 	mov	fp,r2
   43f7c:	003ed306 	br	43acc <__alt_data_end+0xfffcdf6c>
   43f80:	903ee01e 	bne	r18,zero,43b04 <__alt_data_end+0xfffcdfa4>
   43f84:	00800434 	movhi	r2,16
   43f88:	10bfffc4 	addi	r2,r2,-1
   43f8c:	9884703a 	and	r2,r19,r2
   43f90:	103f081e 	bne	r2,zero,43bb4 <__alt_data_end+0xfffce054>
   43f94:	9cdffc2c 	andhi	r19,r19,32752
   43f98:	983f0626 	beq	r19,zero,43bb4 <__alt_data_end+0xfffce054>
   43f9c:	d8800817 	ldw	r2,32(sp)
   43fa0:	b5800044 	addi	r22,r22,1
   43fa4:	04c00044 	movi	r19,1
   43fa8:	10800044 	addi	r2,r2,1
   43fac:	d8800815 	stw	r2,32(sp)
   43fb0:	003f0106 	br	43bb8 <__alt_data_end+0xfffce058>
   43fb4:	d9800f17 	ldw	r6,60(sp)
   43fb8:	30016826 	beq	r6,zero,4455c <_dtoa_r+0x1518>
   43fbc:	10810cc4 	addi	r2,r2,1075
   43fc0:	dd400917 	ldw	r21,36(sp)
   43fc4:	dd000817 	ldw	r20,32(sp)
   43fc8:	003e9906 	br	43a30 <__alt_data_end+0xfffcded0>
   43fcc:	9011883a 	mov	r8,r18
   43fd0:	4007883a 	mov	r3,r8
   43fd4:	e02d883a 	mov	r22,fp
   43fd8:	0080100e 	bge	zero,r2,4401c <_dtoa_r+0xfd8>
   43fdc:	01800044 	movi	r6,1
   43fe0:	8009883a 	mov	r4,r16
   43fe4:	e00b883a 	mov	r5,fp
   43fe8:	da001515 	stw	r8,84(sp)
   43fec:	da001715 	stw	r8,92(sp)
   43ff0:	0046eb40 	call	46eb4 <__lshift>
   43ff4:	1009883a 	mov	r4,r2
   43ff8:	a80b883a 	mov	r5,r21
   43ffc:	102d883a 	mov	r22,r2
   44000:	0046ffc0 	call	46ffc <__mcmp>
   44004:	d8c01517 	ldw	r3,84(sp)
   44008:	da001717 	ldw	r8,92(sp)
   4400c:	0081a50e 	bge	zero,r2,446a4 <_dtoa_r+0x1660>
   44010:	00800e44 	movi	r2,57
   44014:	40817b26 	beq	r8,r2,44604 <_dtoa_r+0x15c0>
   44018:	40c00044 	addi	r3,r8,1
   4401c:	8825883a 	mov	r18,r17
   44020:	9dc00044 	addi	r23,r19,1
   44024:	98c00005 	stb	r3,0(r19)
   44028:	a023883a 	mov	r17,r20
   4402c:	b039883a 	mov	fp,r22
   44030:	003f3906 	br	43d18 <__alt_data_end+0xfffce1b8>
   44034:	00800e44 	movi	r2,57
   44038:	9011883a 	mov	r8,r18
   4403c:	90817226 	beq	r18,r2,44608 <_dtoa_r+0x15c4>
   44040:	0580010e 	bge	zero,r22,44048 <_dtoa_r+0x1004>
   44044:	ba000c44 	addi	r8,r23,49
   44048:	8825883a 	mov	r18,r17
   4404c:	9dc00044 	addi	r23,r19,1
   44050:	9a000005 	stb	r8,0(r19)
   44054:	a023883a 	mov	r17,r20
   44058:	003f2f06 	br	43d18 <__alt_data_end+0xfffce1b8>
   4405c:	880b883a 	mov	r5,r17
   44060:	8009883a 	mov	r4,r16
   44064:	01800284 	movi	r6,10
   44068:	000f883a 	mov	r7,zero
   4406c:	00467500 	call	46750 <__multadd>
   44070:	1023883a 	mov	r17,r2
   44074:	1029883a 	mov	r20,r2
   44078:	003f9706 	br	43ed8 <__alt_data_end+0xfffce378>
   4407c:	8009883a 	mov	r4,r16
   44080:	180b883a 	mov	r5,r3
   44084:	00467280 	call	46728 <_Bfree>
   44088:	00800044 	movi	r2,1
   4408c:	003f7306 	br	43e5c <__alt_data_end+0xfffce2fc>
   44090:	e009883a 	mov	r4,fp
   44094:	a80b883a 	mov	r5,r21
   44098:	0046ffc0 	call	46ffc <__mcmp>
   4409c:	103ee60e 	bge	r2,zero,43c38 <__alt_data_end+0xfffce0d8>
   440a0:	8009883a 	mov	r4,r16
   440a4:	e00b883a 	mov	r5,fp
   440a8:	01800284 	movi	r6,10
   440ac:	000f883a 	mov	r7,zero
   440b0:	00467500 	call	46750 <__multadd>
   440b4:	d9000517 	ldw	r4,20(sp)
   440b8:	d9800b17 	ldw	r6,44(sp)
   440bc:	1039883a 	mov	fp,r2
   440c0:	213fffc4 	addi	r4,r4,-1
   440c4:	d9000515 	stw	r4,20(sp)
   440c8:	303f2d1e 	bne	r6,zero,43d80 <__alt_data_end+0xfffce220>
   440cc:	d9000d17 	ldw	r4,52(sp)
   440d0:	0101780e 	bge	zero,r4,446b4 <_dtoa_r+0x1670>
   440d4:	d9000615 	stw	r4,24(sp)
   440d8:	003edb06 	br	43c48 <__alt_data_end+0xfffce0e8>
   440dc:	00800084 	movi	r2,2
   440e0:	30818e1e 	bne	r6,r2,4471c <_dtoa_r+0x16d8>
   440e4:	d8000b15 	stw	zero,44(sp)
   440e8:	003f8106 	br	43ef0 <__alt_data_end+0xfffce390>
   440ec:	d8800717 	ldw	r2,28(sp)
   440f0:	003c0306 	br	43100 <__alt_data_end+0xfffcd5a0>
   440f4:	d9000317 	ldw	r4,12(sp)
   440f8:	00800084 	movi	r2,2
   440fc:	113ed00e 	bge	r2,r4,43c40 <__alt_data_end+0xfffce0e0>
   44100:	d8c00617 	ldw	r3,24(sp)
   44104:	183f901e 	bne	r3,zero,43f48 <__alt_data_end+0xfffce3e8>
   44108:	a80b883a 	mov	r5,r21
   4410c:	8009883a 	mov	r4,r16
   44110:	01800144 	movi	r6,5
   44114:	000f883a 	mov	r7,zero
   44118:	00467500 	call	46750 <__multadd>
   4411c:	e009883a 	mov	r4,fp
   44120:	100b883a 	mov	r5,r2
   44124:	102b883a 	mov	r21,r2
   44128:	0046ffc0 	call	46ffc <__mcmp>
   4412c:	00bf860e 	bge	zero,r2,43f48 <__alt_data_end+0xfffce3e8>
   44130:	d9800717 	ldw	r6,28(sp)
   44134:	00800c44 	movi	r2,49
   44138:	30800005 	stb	r2,0(r6)
   4413c:	d8800517 	ldw	r2,20(sp)
   44140:	35c00044 	addi	r23,r6,1
   44144:	10800044 	addi	r2,r2,1
   44148:	d8800515 	stw	r2,20(sp)
   4414c:	003f8206 	br	43f58 <__alt_data_end+0xfffce3f8>
   44150:	903e981e 	bne	r18,zero,43bb4 <__alt_data_end+0xfffce054>
   44154:	003f8b06 	br	43f84 <__alt_data_end+0xfffce424>
   44158:	d9800517 	ldw	r6,20(sp)
   4415c:	d8c00717 	ldw	r3,28(sp)
   44160:	00800c44 	movi	r2,49
   44164:	31800044 	addi	r6,r6,1
   44168:	d9800515 	stw	r6,20(sp)
   4416c:	18800005 	stb	r2,0(r3)
   44170:	003ee906 	br	43d18 <__alt_data_end+0xfffce1b8>
   44174:	dc000317 	ldw	r16,12(sp)
   44178:	003d6006 	br	436fc <__alt_data_end+0xfffcdb9c>
   4417c:	8809883a 	mov	r4,r17
   44180:	004d1440 	call	4d144 <__floatsidf>
   44184:	a009883a 	mov	r4,r20
   44188:	a80b883a 	mov	r5,r21
   4418c:	100d883a 	mov	r6,r2
   44190:	180f883a 	mov	r7,r3
   44194:	004bf800 	call	4bf80 <__muldf3>
   44198:	1009883a 	mov	r4,r2
   4419c:	180b883a 	mov	r5,r3
   441a0:	000d883a 	mov	r6,zero
   441a4:	01d00734 	movhi	r7,16412
   441a8:	004ab200 	call	4ab20 <__adddf3>
   441ac:	1023883a 	mov	r17,r2
   441b0:	00bf3034 	movhi	r2,64704
   441b4:	1885883a 	add	r2,r3,r2
   441b8:	d8800e15 	stw	r2,56(sp)
   441bc:	a009883a 	mov	r4,r20
   441c0:	a80b883a 	mov	r5,r21
   441c4:	000d883a 	mov	r6,zero
   441c8:	01d00534 	movhi	r7,16404
   441cc:	004c7ec0 	call	4c7ec <__subdf3>
   441d0:	d9c00e17 	ldw	r7,56(sp)
   441d4:	1009883a 	mov	r4,r2
   441d8:	180b883a 	mov	r5,r3
   441dc:	880d883a 	mov	r6,r17
   441e0:	102b883a 	mov	r21,r2
   441e4:	1829883a 	mov	r20,r3
   441e8:	004bdc00 	call	4bdc0 <__gedf2>
   441ec:	00807716 	blt	zero,r2,443cc <_dtoa_r+0x1388>
   441f0:	d8800e17 	ldw	r2,56(sp)
   441f4:	a809883a 	mov	r4,r21
   441f8:	a00b883a 	mov	r5,r20
   441fc:	11e0003c 	xorhi	r7,r2,32768
   44200:	880d883a 	mov	r6,r17
   44204:	004bea00 	call	4bea0 <__ledf2>
   44208:	103d6b0e 	bge	r2,zero,437b8 <__alt_data_end+0xfffcdc58>
   4420c:	002b883a 	mov	r21,zero
   44210:	0023883a 	mov	r17,zero
   44214:	003f4c06 	br	43f48 <__alt_data_end+0xfffce3e8>
   44218:	d9800917 	ldw	r6,36(sp)
   4421c:	e00b883a 	mov	r5,fp
   44220:	8009883a 	mov	r4,r16
   44224:	0046d740 	call	46d74 <__pow5mult>
   44228:	1039883a 	mov	fp,r2
   4422c:	003e2706 	br	43acc <__alt_data_end+0xfffcdf6c>
   44230:	d8000b15 	stw	zero,44(sp)
   44234:	003c4906 	br	4335c <__alt_data_end+0xfffcd7fc>
   44238:	d9000917 	ldw	r4,36(sp)
   4423c:	d9800a17 	ldw	r6,40(sp)
   44240:	dd400915 	stw	r21,36(sp)
   44244:	a905c83a 	sub	r2,r21,r4
   44248:	308d883a 	add	r6,r6,r2
   4424c:	d9800a15 	stw	r6,40(sp)
   44250:	002b883a 	mov	r21,zero
   44254:	003df206 	br	43a20 <__alt_data_end+0xfffcdec0>
   44258:	dc800e15 	stw	r18,56(sp)
   4425c:	982b883a 	mov	r21,r19
   44260:	04400084 	movi	r17,2
   44264:	003c7406 	br	43438 <__alt_data_end+0xfffcd8d8>
   44268:	04400044 	movi	r17,1
   4426c:	dc400d15 	stw	r17,52(sp)
   44270:	dc400615 	stw	r17,24(sp)
   44274:	dc402215 	stw	r17,136(sp)
   44278:	80001115 	stw	zero,68(r16)
   4427c:	000b883a 	mov	r5,zero
   44280:	003c4a06 	br	433ac <__alt_data_end+0xfffcd84c>
   44284:	3023883a 	mov	r17,r6
   44288:	003ffb06 	br	44278 <__alt_data_end+0xfffce718>
   4428c:	1000021e 	bne	r2,zero,44298 <_dtoa_r+0x1254>
   44290:	4200004c 	andi	r8,r8,1
   44294:	403e8f1e 	bne	r8,zero,43cd4 <__alt_data_end+0xfffce174>
   44298:	01000c04 	movi	r4,48
   4429c:	00000106 	br	442a4 <_dtoa_r+0x1260>
   442a0:	102f883a 	mov	r23,r2
   442a4:	b8bfffc4 	addi	r2,r23,-1
   442a8:	10c00007 	ldb	r3,0(r2)
   442ac:	193ffc26 	beq	r3,r4,442a0 <__alt_data_end+0xfffce740>
   442b0:	003e9906 	br	43d18 <__alt_data_end+0xfffce1b8>
   442b4:	d9000517 	ldw	r4,20(sp)
   442b8:	012fc83a 	sub	r23,zero,r4
   442bc:	b800ad26 	beq	r23,zero,44574 <_dtoa_r+0x1530>
   442c0:	b88003cc 	andi	r2,r23,15
   442c4:	100490fa 	slli	r2,r2,3
   442c8:	00c00174 	movhi	r3,5
   442cc:	18c1d104 	addi	r3,r3,1860
   442d0:	1885883a 	add	r2,r3,r2
   442d4:	11800017 	ldw	r6,0(r2)
   442d8:	11c00117 	ldw	r7,4(r2)
   442dc:	b82fd13a 	srai	r23,r23,4
   442e0:	9009883a 	mov	r4,r18
   442e4:	980b883a 	mov	r5,r19
   442e8:	004bf800 	call	4bf80 <__muldf3>
   442ec:	1029883a 	mov	r20,r2
   442f0:	182b883a 	mov	r21,r3
   442f4:	b800f426 	beq	r23,zero,446c8 <_dtoa_r+0x1684>
   442f8:	02000174 	movhi	r8,5
   442fc:	4201c704 	addi	r8,r8,1820
   44300:	8029883a 	mov	r20,r16
   44304:	04400084 	movi	r17,2
   44308:	4021883a 	mov	r16,r8
   4430c:	b980004c 	andi	r6,r23,1
   44310:	1009883a 	mov	r4,r2
   44314:	b82fd07a 	srai	r23,r23,1
   44318:	180b883a 	mov	r5,r3
   4431c:	30000426 	beq	r6,zero,44330 <_dtoa_r+0x12ec>
   44320:	81800017 	ldw	r6,0(r16)
   44324:	81c00117 	ldw	r7,4(r16)
   44328:	8c400044 	addi	r17,r17,1
   4432c:	004bf800 	call	4bf80 <__muldf3>
   44330:	84000204 	addi	r16,r16,8
   44334:	b83ff51e 	bne	r23,zero,4430c <__alt_data_end+0xfffce7ac>
   44338:	a021883a 	mov	r16,r20
   4433c:	182b883a 	mov	r21,r3
   44340:	1029883a 	mov	r20,r2
   44344:	003c5506 	br	4349c <__alt_data_end+0xfffcd93c>
   44348:	d9800517 	ldw	r6,20(sp)
   4434c:	d9000717 	ldw	r4,28(sp)
   44350:	00c00c04 	movi	r3,48
   44354:	31800044 	addi	r6,r6,1
   44358:	d9800515 	stw	r6,20(sp)
   4435c:	20c00005 	stb	r3,0(r4)
   44360:	02000c44 	movi	r8,49
   44364:	003da206 	br	439f0 <__alt_data_end+0xfffcde90>
   44368:	89400117 	ldw	r5,4(r17)
   4436c:	8009883a 	mov	r4,r16
   44370:	00466800 	call	46680 <_Balloc>
   44374:	89800417 	ldw	r6,16(r17)
   44378:	11000304 	addi	r4,r2,12
   4437c:	89400304 	addi	r5,r17,12
   44380:	31800084 	addi	r6,r6,2
   44384:	318d883a 	add	r6,r6,r6
   44388:	318d883a 	add	r6,r6,r6
   4438c:	1027883a 	mov	r19,r2
   44390:	00462c80 	call	462c8 <memcpy>
   44394:	8009883a 	mov	r4,r16
   44398:	980b883a 	mov	r5,r19
   4439c:	01800044 	movi	r6,1
   443a0:	0046eb40 	call	46eb4 <__lshift>
   443a4:	1029883a 	mov	r20,r2
   443a8:	003e8606 	br	43dc4 <__alt_data_end+0xfffce264>
   443ac:	00800e44 	movi	r2,57
   443b0:	90809526 	beq	r18,r2,44608 <_dtoa_r+0x15c4>
   443b4:	92000044 	addi	r8,r18,1
   443b8:	003f2306 	br	44048 <__alt_data_end+0xfffce4e8>
   443bc:	9011883a 	mov	r8,r18
   443c0:	8825883a 	mov	r18,r17
   443c4:	a023883a 	mov	r17,r20
   443c8:	003e3706 	br	43ca8 <__alt_data_end+0xfffce148>
   443cc:	002b883a 	mov	r21,zero
   443d0:	0023883a 	mov	r17,zero
   443d4:	003f5606 	br	44130 <__alt_data_end+0xfffce5d0>
   443d8:	51bfffc4 	addi	r6,r10,-1
   443dc:	300490fa 	slli	r2,r6,3
   443e0:	00c00174 	movhi	r3,5
   443e4:	18c1d104 	addi	r3,r3,1860
   443e8:	1885883a 	add	r2,r3,r2
   443ec:	d9c00e17 	ldw	r7,56(sp)
   443f0:	11000017 	ldw	r4,0(r2)
   443f4:	11400117 	ldw	r5,4(r2)
   443f8:	d8800717 	ldw	r2,28(sp)
   443fc:	d9801015 	stw	r6,64(sp)
   44400:	880d883a 	mov	r6,r17
   44404:	da801615 	stw	r10,88(sp)
   44408:	15c00044 	addi	r23,r2,1
   4440c:	004bf800 	call	4bf80 <__muldf3>
   44410:	a80b883a 	mov	r5,r21
   44414:	a009883a 	mov	r4,r20
   44418:	d8c01115 	stw	r3,68(sp)
   4441c:	d8800e15 	stw	r2,56(sp)
   44420:	004d0bc0 	call	4d0bc <__fixdfsi>
   44424:	1009883a 	mov	r4,r2
   44428:	1023883a 	mov	r17,r2
   4442c:	004d1440 	call	4d144 <__floatsidf>
   44430:	a009883a 	mov	r4,r20
   44434:	a80b883a 	mov	r5,r21
   44438:	100d883a 	mov	r6,r2
   4443c:	180f883a 	mov	r7,r3
   44440:	004c7ec0 	call	4c7ec <__subdf3>
   44444:	1813883a 	mov	r9,r3
   44448:	d8c00717 	ldw	r3,28(sp)
   4444c:	8c400c04 	addi	r17,r17,48
   44450:	1011883a 	mov	r8,r2
   44454:	1c400005 	stb	r17,0(r3)
   44458:	da801617 	ldw	r10,88(sp)
   4445c:	00800044 	movi	r2,1
   44460:	50802326 	beq	r10,r2,444f0 <_dtoa_r+0x14ac>
   44464:	d8800717 	ldw	r2,28(sp)
   44468:	b82b883a 	mov	r21,r23
   4446c:	dc001315 	stw	r16,76(sp)
   44470:	12a9883a 	add	r20,r2,r10
   44474:	4807883a 	mov	r3,r9
   44478:	4005883a 	mov	r2,r8
   4447c:	dc801415 	stw	r18,80(sp)
   44480:	000d883a 	mov	r6,zero
   44484:	01d00934 	movhi	r7,16420
   44488:	1009883a 	mov	r4,r2
   4448c:	180b883a 	mov	r5,r3
   44490:	004bf800 	call	4bf80 <__muldf3>
   44494:	180b883a 	mov	r5,r3
   44498:	1009883a 	mov	r4,r2
   4449c:	1821883a 	mov	r16,r3
   444a0:	1025883a 	mov	r18,r2
   444a4:	004d0bc0 	call	4d0bc <__fixdfsi>
   444a8:	1009883a 	mov	r4,r2
   444ac:	1023883a 	mov	r17,r2
   444b0:	004d1440 	call	4d144 <__floatsidf>
   444b4:	9009883a 	mov	r4,r18
   444b8:	800b883a 	mov	r5,r16
   444bc:	100d883a 	mov	r6,r2
   444c0:	180f883a 	mov	r7,r3
   444c4:	8c400c04 	addi	r17,r17,48
   444c8:	004c7ec0 	call	4c7ec <__subdf3>
   444cc:	ad400044 	addi	r21,r21,1
   444d0:	ac7fffc5 	stb	r17,-1(r21)
   444d4:	ad3fea1e 	bne	r21,r20,44480 <__alt_data_end+0xfffce920>
   444d8:	1813883a 	mov	r9,r3
   444dc:	d8c01017 	ldw	r3,64(sp)
   444e0:	dc001317 	ldw	r16,76(sp)
   444e4:	dc801417 	ldw	r18,80(sp)
   444e8:	1011883a 	mov	r8,r2
   444ec:	b8ef883a 	add	r23,r23,r3
   444f0:	d9000e17 	ldw	r4,56(sp)
   444f4:	d9401117 	ldw	r5,68(sp)
   444f8:	000d883a 	mov	r6,zero
   444fc:	01cff834 	movhi	r7,16352
   44500:	da001715 	stw	r8,92(sp)
   44504:	da401515 	stw	r9,84(sp)
   44508:	004ab200 	call	4ab20 <__adddf3>
   4450c:	da001717 	ldw	r8,92(sp)
   44510:	da401517 	ldw	r9,84(sp)
   44514:	1009883a 	mov	r4,r2
   44518:	400d883a 	mov	r6,r8
   4451c:	480f883a 	mov	r7,r9
   44520:	180b883a 	mov	r5,r3
   44524:	004bea00 	call	4bea0 <__ledf2>
   44528:	da001717 	ldw	r8,92(sp)
   4452c:	da401517 	ldw	r9,84(sp)
   44530:	10003b0e 	bge	r2,zero,44620 <_dtoa_r+0x15dc>
   44534:	d9001217 	ldw	r4,72(sp)
   44538:	bd7fffc3 	ldbu	r21,-1(r23)
   4453c:	d9000515 	stw	r4,20(sp)
   44540:	003d1c06 	br	439b4 <__alt_data_end+0xfffcde54>
   44544:	d8c00817 	ldw	r3,32(sp)
   44548:	18a9c83a 	sub	r20,r3,r2
   4454c:	0005883a 	mov	r2,zero
   44550:	003d3706 	br	43a30 <__alt_data_end+0xfffcded0>
   44554:	00800044 	movi	r2,1
   44558:	003dd006 	br	43c9c <__alt_data_end+0xfffce13c>
   4455c:	d8c00217 	ldw	r3,8(sp)
   44560:	00800d84 	movi	r2,54
   44564:	dd400917 	ldw	r21,36(sp)
   44568:	10c5c83a 	sub	r2,r2,r3
   4456c:	dd000817 	ldw	r20,32(sp)
   44570:	003d2f06 	br	43a30 <__alt_data_end+0xfffcded0>
   44574:	9029883a 	mov	r20,r18
   44578:	982b883a 	mov	r21,r19
   4457c:	04400084 	movi	r17,2
   44580:	003bc606 	br	4349c <__alt_data_end+0xfffcd93c>
   44584:	d8800617 	ldw	r2,24(sp)
   44588:	103efc26 	beq	r2,zero,4417c <__alt_data_end+0xfffce61c>
   4458c:	d8c00d17 	ldw	r3,52(sp)
   44590:	00fc890e 	bge	zero,r3,437b8 <__alt_data_end+0xfffcdc58>
   44594:	a80b883a 	mov	r5,r21
   44598:	a009883a 	mov	r4,r20
   4459c:	000d883a 	mov	r6,zero
   445a0:	01d00934 	movhi	r7,16420
   445a4:	004bf800 	call	4bf80 <__muldf3>
   445a8:	89000044 	addi	r4,r17,1
   445ac:	1029883a 	mov	r20,r2
   445b0:	182b883a 	mov	r21,r3
   445b4:	004d1440 	call	4d144 <__floatsidf>
   445b8:	a009883a 	mov	r4,r20
   445bc:	a80b883a 	mov	r5,r21
   445c0:	100d883a 	mov	r6,r2
   445c4:	180f883a 	mov	r7,r3
   445c8:	004bf800 	call	4bf80 <__muldf3>
   445cc:	1009883a 	mov	r4,r2
   445d0:	180b883a 	mov	r5,r3
   445d4:	000d883a 	mov	r6,zero
   445d8:	01d00734 	movhi	r7,16412
   445dc:	004ab200 	call	4ab20 <__adddf3>
   445e0:	d9000517 	ldw	r4,20(sp)
   445e4:	1023883a 	mov	r17,r2
   445e8:	00bf3034 	movhi	r2,64704
   445ec:	213fffc4 	addi	r4,r4,-1
   445f0:	1885883a 	add	r2,r3,r2
   445f4:	d9001215 	stw	r4,72(sp)
   445f8:	d8800e15 	stw	r2,56(sp)
   445fc:	da800d17 	ldw	r10,52(sp)
   44600:	003bc306 	br	43510 <__alt_data_end+0xfffcd9b0>
   44604:	b039883a 	mov	fp,r22
   44608:	01000e44 	movi	r4,57
   4460c:	8825883a 	mov	r18,r17
   44610:	9dc00044 	addi	r23,r19,1
   44614:	99000005 	stb	r4,0(r19)
   44618:	a023883a 	mov	r17,r20
   4461c:	003dae06 	br	43cd8 <__alt_data_end+0xfffce178>
   44620:	d9800e17 	ldw	r6,56(sp)
   44624:	d9c01117 	ldw	r7,68(sp)
   44628:	0009883a 	mov	r4,zero
   4462c:	014ff834 	movhi	r5,16352
   44630:	da001715 	stw	r8,92(sp)
   44634:	da401515 	stw	r9,84(sp)
   44638:	004c7ec0 	call	4c7ec <__subdf3>
   4463c:	da001717 	ldw	r8,92(sp)
   44640:	da401517 	ldw	r9,84(sp)
   44644:	1009883a 	mov	r4,r2
   44648:	180b883a 	mov	r5,r3
   4464c:	400d883a 	mov	r6,r8
   44650:	480f883a 	mov	r7,r9
   44654:	004bdc00 	call	4bdc0 <__gedf2>
   44658:	00bc570e 	bge	zero,r2,437b8 <__alt_data_end+0xfffcdc58>
   4465c:	01000c04 	movi	r4,48
   44660:	00000106 	br	44668 <_dtoa_r+0x1624>
   44664:	102f883a 	mov	r23,r2
   44668:	b8bfffc4 	addi	r2,r23,-1
   4466c:	10c00007 	ldb	r3,0(r2)
   44670:	193ffc26 	beq	r3,r4,44664 <__alt_data_end+0xfffceb04>
   44674:	d9801217 	ldw	r6,72(sp)
   44678:	d9800515 	stw	r6,20(sp)
   4467c:	003c1f06 	br	436fc <__alt_data_end+0xfffcdb9c>
   44680:	d8801217 	ldw	r2,72(sp)
   44684:	dc001117 	ldw	r16,68(sp)
   44688:	d8800515 	stw	r2,20(sp)
   4468c:	003cc906 	br	439b4 <__alt_data_end+0xfffcde54>
   44690:	dd801317 	ldw	r22,76(sp)
   44694:	dc001117 	ldw	r16,68(sp)
   44698:	dcc01417 	ldw	r19,80(sp)
   4469c:	dc801017 	ldw	r18,64(sp)
   446a0:	003c4506 	br	437b8 <__alt_data_end+0xfffcdc58>
   446a4:	103e5d1e 	bne	r2,zero,4401c <__alt_data_end+0xfffce4bc>
   446a8:	4080004c 	andi	r2,r8,1
   446ac:	103e5b26 	beq	r2,zero,4401c <__alt_data_end+0xfffce4bc>
   446b0:	003e5706 	br	44010 <__alt_data_end+0xfffce4b0>
   446b4:	d8c00317 	ldw	r3,12(sp)
   446b8:	00800084 	movi	r2,2
   446bc:	10c00a16 	blt	r2,r3,446e8 <_dtoa_r+0x16a4>
   446c0:	d9000d17 	ldw	r4,52(sp)
   446c4:	003e8306 	br	440d4 <__alt_data_end+0xfffce574>
   446c8:	04400084 	movi	r17,2
   446cc:	003b7306 	br	4349c <__alt_data_end+0xfffcd93c>
   446d0:	d9801217 	ldw	r6,72(sp)
   446d4:	d9800515 	stw	r6,20(sp)
   446d8:	003cb606 	br	439b4 <__alt_data_end+0xfffcde54>
   446dc:	d9001217 	ldw	r4,72(sp)
   446e0:	d9000515 	stw	r4,20(sp)
   446e4:	003c0506 	br	436fc <__alt_data_end+0xfffcdb9c>
   446e8:	d9800d17 	ldw	r6,52(sp)
   446ec:	d9800615 	stw	r6,24(sp)
   446f0:	003e8306 	br	44100 <__alt_data_end+0xfffce5a0>
   446f4:	d9800317 	ldw	r6,12(sp)
   446f8:	00800084 	movi	r2,2
   446fc:	11800216 	blt	r2,r6,44708 <_dtoa_r+0x16c4>
   44700:	d8800d17 	ldw	r2,52(sp)
   44704:	003da606 	br	43da0 <__alt_data_end+0xfffce240>
   44708:	d8800d17 	ldw	r2,52(sp)
   4470c:	d8800615 	stw	r2,24(sp)
   44710:	003e7b06 	br	44100 <__alt_data_end+0xfffce5a0>
   44714:	05000044 	movi	r20,1
   44718:	003b0506 	br	43330 <__alt_data_end+0xfffcd7d0>
   4471c:	8009883a 	mov	r4,r16
   44720:	80001115 	stw	zero,68(r16)
   44724:	000b883a 	mov	r5,zero
   44728:	00466800 	call	46680 <_Balloc>
   4472c:	d8800715 	stw	r2,28(sp)
   44730:	d8c00717 	ldw	r3,28(sp)
   44734:	00bfffc4 	movi	r2,-1
   44738:	01000044 	movi	r4,1
   4473c:	d8800615 	stw	r2,24(sp)
   44740:	80c01015 	stw	r3,64(r16)
   44744:	d9000b15 	stw	r4,44(sp)
   44748:	d8002215 	stw	zero,136(sp)
   4474c:	d8800d15 	stw	r2,52(sp)
   44750:	003c1906 	br	437b8 <__alt_data_end+0xfffcdc58>
   44754:	193d2926 	beq	r3,r4,43bfc <__alt_data_end+0xfffce09c>
   44758:	00c00f04 	movi	r3,60
   4475c:	1885c83a 	sub	r2,r3,r2
   44760:	003d7b06 	br	43d50 <__alt_data_end+0xfffce1f0>
   44764:	000b883a 	mov	r5,zero
   44768:	003b1006 	br	433ac <__alt_data_end+0xfffcd84c>

0004476c <_fflush_r>:
   4476c:	defffb04 	addi	sp,sp,-20
   44770:	dcc00315 	stw	r19,12(sp)
   44774:	dc000015 	stw	r16,0(sp)
   44778:	dfc00415 	stw	ra,16(sp)
   4477c:	dc800215 	stw	r18,8(sp)
   44780:	dc400115 	stw	r17,4(sp)
   44784:	2027883a 	mov	r19,r4
   44788:	2821883a 	mov	r16,r5
   4478c:	20000226 	beq	r4,zero,44798 <_fflush_r+0x2c>
   44790:	20800e17 	ldw	r2,56(r4)
   44794:	10005326 	beq	r2,zero,448e4 <_fflush_r+0x178>
   44798:	8080030b 	ldhu	r2,12(r16)
   4479c:	10ffffcc 	andi	r3,r2,65535
   447a0:	18e0001c 	xori	r3,r3,32768
   447a4:	18e00004 	addi	r3,r3,-32768
   447a8:	18002c26 	beq	r3,zero,4485c <_fflush_r+0xf0>
   447ac:	10c0020c 	andi	r3,r2,8
   447b0:	1800321e 	bne	r3,zero,4487c <_fflush_r+0x110>
   447b4:	80c00117 	ldw	r3,4(r16)
   447b8:	10820014 	ori	r2,r2,2048
   447bc:	8080030d 	sth	r2,12(r16)
   447c0:	00c0570e 	bge	zero,r3,44920 <_fflush_r+0x1b4>
   447c4:	82000a17 	ldw	r8,40(r16)
   447c8:	40002426 	beq	r8,zero,4485c <_fflush_r+0xf0>
   447cc:	9c400017 	ldw	r17,0(r19)
   447d0:	10c4000c 	andi	r3,r2,4096
   447d4:	98000015 	stw	zero,0(r19)
   447d8:	18004626 	beq	r3,zero,448f4 <_fflush_r+0x188>
   447dc:	81801417 	ldw	r6,80(r16)
   447e0:	10c0010c 	andi	r3,r2,4
   447e4:	18000626 	beq	r3,zero,44800 <_fflush_r+0x94>
   447e8:	80c00117 	ldw	r3,4(r16)
   447ec:	80800c17 	ldw	r2,48(r16)
   447f0:	30cdc83a 	sub	r6,r6,r3
   447f4:	10000226 	beq	r2,zero,44800 <_fflush_r+0x94>
   447f8:	80800f17 	ldw	r2,60(r16)
   447fc:	308dc83a 	sub	r6,r6,r2
   44800:	81400717 	ldw	r5,28(r16)
   44804:	9809883a 	mov	r4,r19
   44808:	000f883a 	mov	r7,zero
   4480c:	403ee83a 	callr	r8
   44810:	00ffffc4 	movi	r3,-1
   44814:	10c04526 	beq	r2,r3,4492c <_fflush_r+0x1c0>
   44818:	80c0030b 	ldhu	r3,12(r16)
   4481c:	81000417 	ldw	r4,16(r16)
   44820:	80000115 	stw	zero,4(r16)
   44824:	197dffcc 	andi	r5,r3,63487
   44828:	8140030d 	sth	r5,12(r16)
   4482c:	81000015 	stw	r4,0(r16)
   44830:	18c4000c 	andi	r3,r3,4096
   44834:	18000126 	beq	r3,zero,4483c <_fflush_r+0xd0>
   44838:	80801415 	stw	r2,80(r16)
   4483c:	81400c17 	ldw	r5,48(r16)
   44840:	9c400015 	stw	r17,0(r19)
   44844:	28000526 	beq	r5,zero,4485c <_fflush_r+0xf0>
   44848:	80801004 	addi	r2,r16,64
   4484c:	28800226 	beq	r5,r2,44858 <_fflush_r+0xec>
   44850:	9809883a 	mov	r4,r19
   44854:	0044e9c0 	call	44e9c <_free_r>
   44858:	80000c15 	stw	zero,48(r16)
   4485c:	0005883a 	mov	r2,zero
   44860:	dfc00417 	ldw	ra,16(sp)
   44864:	dcc00317 	ldw	r19,12(sp)
   44868:	dc800217 	ldw	r18,8(sp)
   4486c:	dc400117 	ldw	r17,4(sp)
   44870:	dc000017 	ldw	r16,0(sp)
   44874:	dec00504 	addi	sp,sp,20
   44878:	f800283a 	ret
   4487c:	84800417 	ldw	r18,16(r16)
   44880:	903ff626 	beq	r18,zero,4485c <__alt_data_end+0xfffcecfc>
   44884:	84400017 	ldw	r17,0(r16)
   44888:	108000cc 	andi	r2,r2,3
   4488c:	84800015 	stw	r18,0(r16)
   44890:	8ca3c83a 	sub	r17,r17,r18
   44894:	10001526 	beq	r2,zero,448ec <_fflush_r+0x180>
   44898:	0005883a 	mov	r2,zero
   4489c:	80800215 	stw	r2,8(r16)
   448a0:	04400316 	blt	zero,r17,448b0 <_fflush_r+0x144>
   448a4:	003fed06 	br	4485c <__alt_data_end+0xfffcecfc>
   448a8:	90a5883a 	add	r18,r18,r2
   448ac:	047feb0e 	bge	zero,r17,4485c <__alt_data_end+0xfffcecfc>
   448b0:	80800917 	ldw	r2,36(r16)
   448b4:	81400717 	ldw	r5,28(r16)
   448b8:	880f883a 	mov	r7,r17
   448bc:	900d883a 	mov	r6,r18
   448c0:	9809883a 	mov	r4,r19
   448c4:	103ee83a 	callr	r2
   448c8:	88a3c83a 	sub	r17,r17,r2
   448cc:	00bff616 	blt	zero,r2,448a8 <__alt_data_end+0xfffced48>
   448d0:	80c0030b 	ldhu	r3,12(r16)
   448d4:	00bfffc4 	movi	r2,-1
   448d8:	18c01014 	ori	r3,r3,64
   448dc:	80c0030d 	sth	r3,12(r16)
   448e0:	003fdf06 	br	44860 <__alt_data_end+0xfffced00>
   448e4:	0044d280 	call	44d28 <__sinit>
   448e8:	003fab06 	br	44798 <__alt_data_end+0xfffcec38>
   448ec:	80800517 	ldw	r2,20(r16)
   448f0:	003fea06 	br	4489c <__alt_data_end+0xfffced3c>
   448f4:	81400717 	ldw	r5,28(r16)
   448f8:	000d883a 	mov	r6,zero
   448fc:	9809883a 	mov	r4,r19
   44900:	01c00044 	movi	r7,1
   44904:	403ee83a 	callr	r8
   44908:	100d883a 	mov	r6,r2
   4490c:	00bfffc4 	movi	r2,-1
   44910:	30801326 	beq	r6,r2,44960 <_fflush_r+0x1f4>
   44914:	8080030b 	ldhu	r2,12(r16)
   44918:	82000a17 	ldw	r8,40(r16)
   4491c:	003fb006 	br	447e0 <__alt_data_end+0xfffcec80>
   44920:	80c00f17 	ldw	r3,60(r16)
   44924:	00ffa716 	blt	zero,r3,447c4 <__alt_data_end+0xfffcec64>
   44928:	003fcc06 	br	4485c <__alt_data_end+0xfffcecfc>
   4492c:	98c00017 	ldw	r3,0(r19)
   44930:	183fb926 	beq	r3,zero,44818 <__alt_data_end+0xfffcecb8>
   44934:	01000744 	movi	r4,29
   44938:	19000226 	beq	r3,r4,44944 <_fflush_r+0x1d8>
   4493c:	01000584 	movi	r4,22
   44940:	1900101e 	bne	r3,r4,44984 <_fflush_r+0x218>
   44944:	8080030b 	ldhu	r2,12(r16)
   44948:	80c00417 	ldw	r3,16(r16)
   4494c:	80000115 	stw	zero,4(r16)
   44950:	10bdffcc 	andi	r2,r2,63487
   44954:	8080030d 	sth	r2,12(r16)
   44958:	80c00015 	stw	r3,0(r16)
   4495c:	003fb706 	br	4483c <__alt_data_end+0xfffcecdc>
   44960:	98800017 	ldw	r2,0(r19)
   44964:	103feb26 	beq	r2,zero,44914 <__alt_data_end+0xfffcedb4>
   44968:	00c00744 	movi	r3,29
   4496c:	10c00226 	beq	r2,r3,44978 <_fflush_r+0x20c>
   44970:	00c00584 	movi	r3,22
   44974:	10ffd61e 	bne	r2,r3,448d0 <__alt_data_end+0xfffced70>
   44978:	9c400015 	stw	r17,0(r19)
   4497c:	0005883a 	mov	r2,zero
   44980:	003fb706 	br	44860 <__alt_data_end+0xfffced00>
   44984:	80c0030b 	ldhu	r3,12(r16)
   44988:	18c01014 	ori	r3,r3,64
   4498c:	80c0030d 	sth	r3,12(r16)
   44990:	003fb306 	br	44860 <__alt_data_end+0xfffced00>

00044994 <fflush>:
   44994:	20000526 	beq	r4,zero,449ac <fflush+0x18>
   44998:	00800174 	movhi	r2,5
   4499c:	10893604 	addi	r2,r2,9432
   449a0:	200b883a 	mov	r5,r4
   449a4:	11000017 	ldw	r4,0(r2)
   449a8:	004476c1 	jmpi	4476c <_fflush_r>
   449ac:	00800174 	movhi	r2,5
   449b0:	10893504 	addi	r2,r2,9428
   449b4:	11000017 	ldw	r4,0(r2)
   449b8:	01400134 	movhi	r5,4
   449bc:	2951db04 	addi	r5,r5,18284
   449c0:	00456e81 	jmpi	456e8 <_fwalk_reent>

000449c4 <__fp_lock>:
   449c4:	0005883a 	mov	r2,zero
   449c8:	f800283a 	ret

000449cc <__fp_unlock>:
   449cc:	0005883a 	mov	r2,zero
   449d0:	f800283a 	ret

000449d4 <_cleanup_r>:
   449d4:	01400174 	movhi	r5,5
   449d8:	2965bd04 	addi	r5,r5,-26892
   449dc:	00456301 	jmpi	45630 <_fwalk>

000449e0 <__sinit.part.1>:
   449e0:	defff604 	addi	sp,sp,-40
   449e4:	00c00134 	movhi	r3,4
   449e8:	dfc00915 	stw	ra,36(sp)
   449ec:	df000815 	stw	fp,32(sp)
   449f0:	ddc00715 	stw	r23,28(sp)
   449f4:	dd800615 	stw	r22,24(sp)
   449f8:	dd400515 	stw	r21,20(sp)
   449fc:	dd000415 	stw	r20,16(sp)
   44a00:	dcc00315 	stw	r19,12(sp)
   44a04:	dc800215 	stw	r18,8(sp)
   44a08:	dc400115 	stw	r17,4(sp)
   44a0c:	dc000015 	stw	r16,0(sp)
   44a10:	18d27504 	addi	r3,r3,18900
   44a14:	24000117 	ldw	r16,4(r4)
   44a18:	20c00f15 	stw	r3,60(r4)
   44a1c:	07000044 	movi	fp,1
   44a20:	00c000c4 	movi	r3,3
   44a24:	2080bb04 	addi	r2,r4,748
   44a28:	20c0b915 	stw	r3,740(r4)
   44a2c:	27000e15 	stw	fp,56(r4)
   44a30:	2080ba15 	stw	r2,744(r4)
   44a34:	2000b815 	stw	zero,736(r4)
   44a38:	05c00204 	movi	r23,8
   44a3c:	00800104 	movi	r2,4
   44a40:	2025883a 	mov	r18,r4
   44a44:	b80d883a 	mov	r6,r23
   44a48:	81001704 	addi	r4,r16,92
   44a4c:	000b883a 	mov	r5,zero
   44a50:	80000015 	stw	zero,0(r16)
   44a54:	80000115 	stw	zero,4(r16)
   44a58:	80000215 	stw	zero,8(r16)
   44a5c:	8080030d 	sth	r2,12(r16)
   44a60:	80001915 	stw	zero,100(r16)
   44a64:	8000038d 	sth	zero,14(r16)
   44a68:	80000415 	stw	zero,16(r16)
   44a6c:	80000515 	stw	zero,20(r16)
   44a70:	80000615 	stw	zero,24(r16)
   44a74:	004655c0 	call	4655c <memset>
   44a78:	05800134 	movhi	r22,4
   44a7c:	94400217 	ldw	r17,8(r18)
   44a80:	05400134 	movhi	r21,4
   44a84:	05000134 	movhi	r20,4
   44a88:	04c00134 	movhi	r19,4
   44a8c:	b59f4c04 	addi	r22,r22,32048
   44a90:	ad5f6304 	addi	r21,r21,32140
   44a94:	a51f8204 	addi	r20,r20,32264
   44a98:	9cdf9904 	addi	r19,r19,32356
   44a9c:	85800815 	stw	r22,32(r16)
   44aa0:	85400915 	stw	r21,36(r16)
   44aa4:	85000a15 	stw	r20,40(r16)
   44aa8:	84c00b15 	stw	r19,44(r16)
   44aac:	84000715 	stw	r16,28(r16)
   44ab0:	00800284 	movi	r2,10
   44ab4:	89001704 	addi	r4,r17,92
   44ab8:	b80d883a 	mov	r6,r23
   44abc:	000b883a 	mov	r5,zero
   44ac0:	88000015 	stw	zero,0(r17)
   44ac4:	88000115 	stw	zero,4(r17)
   44ac8:	88000215 	stw	zero,8(r17)
   44acc:	8880030d 	sth	r2,12(r17)
   44ad0:	88001915 	stw	zero,100(r17)
   44ad4:	8f00038d 	sth	fp,14(r17)
   44ad8:	88000415 	stw	zero,16(r17)
   44adc:	88000515 	stw	zero,20(r17)
   44ae0:	88000615 	stw	zero,24(r17)
   44ae4:	004655c0 	call	4655c <memset>
   44ae8:	94000317 	ldw	r16,12(r18)
   44aec:	00800484 	movi	r2,18
   44af0:	8c400715 	stw	r17,28(r17)
   44af4:	8d800815 	stw	r22,32(r17)
   44af8:	8d400915 	stw	r21,36(r17)
   44afc:	8d000a15 	stw	r20,40(r17)
   44b00:	8cc00b15 	stw	r19,44(r17)
   44b04:	8080030d 	sth	r2,12(r16)
   44b08:	00800084 	movi	r2,2
   44b0c:	80000015 	stw	zero,0(r16)
   44b10:	80000115 	stw	zero,4(r16)
   44b14:	80000215 	stw	zero,8(r16)
   44b18:	80001915 	stw	zero,100(r16)
   44b1c:	8080038d 	sth	r2,14(r16)
   44b20:	80000415 	stw	zero,16(r16)
   44b24:	80000515 	stw	zero,20(r16)
   44b28:	80000615 	stw	zero,24(r16)
   44b2c:	81001704 	addi	r4,r16,92
   44b30:	000b883a 	mov	r5,zero
   44b34:	b80d883a 	mov	r6,r23
   44b38:	004655c0 	call	4655c <memset>
   44b3c:	84000715 	stw	r16,28(r16)
   44b40:	85800815 	stw	r22,32(r16)
   44b44:	85400915 	stw	r21,36(r16)
   44b48:	85000a15 	stw	r20,40(r16)
   44b4c:	84c00b15 	stw	r19,44(r16)
   44b50:	dfc00917 	ldw	ra,36(sp)
   44b54:	df000817 	ldw	fp,32(sp)
   44b58:	ddc00717 	ldw	r23,28(sp)
   44b5c:	dd800617 	ldw	r22,24(sp)
   44b60:	dd400517 	ldw	r21,20(sp)
   44b64:	dd000417 	ldw	r20,16(sp)
   44b68:	dcc00317 	ldw	r19,12(sp)
   44b6c:	dc800217 	ldw	r18,8(sp)
   44b70:	dc400117 	ldw	r17,4(sp)
   44b74:	dc000017 	ldw	r16,0(sp)
   44b78:	dec00a04 	addi	sp,sp,40
   44b7c:	f800283a 	ret

00044b80 <__sfmoreglue>:
   44b80:	defffc04 	addi	sp,sp,-16
   44b84:	dc800215 	stw	r18,8(sp)
   44b88:	2825883a 	mov	r18,r5
   44b8c:	dc000015 	stw	r16,0(sp)
   44b90:	01401a04 	movi	r5,104
   44b94:	2021883a 	mov	r16,r4
   44b98:	9009883a 	mov	r4,r18
   44b9c:	dfc00315 	stw	ra,12(sp)
   44ba0:	dc400115 	stw	r17,4(sp)
   44ba4:	004095c0 	call	4095c <__mulsi3>
   44ba8:	8009883a 	mov	r4,r16
   44bac:	11400304 	addi	r5,r2,12
   44bb0:	1023883a 	mov	r17,r2
   44bb4:	0045a380 	call	45a38 <_malloc_r>
   44bb8:	1021883a 	mov	r16,r2
   44bbc:	10000726 	beq	r2,zero,44bdc <__sfmoreglue+0x5c>
   44bc0:	11000304 	addi	r4,r2,12
   44bc4:	10000015 	stw	zero,0(r2)
   44bc8:	14800115 	stw	r18,4(r2)
   44bcc:	11000215 	stw	r4,8(r2)
   44bd0:	000b883a 	mov	r5,zero
   44bd4:	880d883a 	mov	r6,r17
   44bd8:	004655c0 	call	4655c <memset>
   44bdc:	8005883a 	mov	r2,r16
   44be0:	dfc00317 	ldw	ra,12(sp)
   44be4:	dc800217 	ldw	r18,8(sp)
   44be8:	dc400117 	ldw	r17,4(sp)
   44bec:	dc000017 	ldw	r16,0(sp)
   44bf0:	dec00404 	addi	sp,sp,16
   44bf4:	f800283a 	ret

00044bf8 <__sfp>:
   44bf8:	00800174 	movhi	r2,5
   44bfc:	defffb04 	addi	sp,sp,-20
   44c00:	10893504 	addi	r2,r2,9428
   44c04:	dc800215 	stw	r18,8(sp)
   44c08:	14800017 	ldw	r18,0(r2)
   44c0c:	dcc00315 	stw	r19,12(sp)
   44c10:	dfc00415 	stw	ra,16(sp)
   44c14:	90800e17 	ldw	r2,56(r18)
   44c18:	dc400115 	stw	r17,4(sp)
   44c1c:	dc000015 	stw	r16,0(sp)
   44c20:	2027883a 	mov	r19,r4
   44c24:	1000021e 	bne	r2,zero,44c30 <__sfp+0x38>
   44c28:	9009883a 	mov	r4,r18
   44c2c:	00449e00 	call	449e0 <__sinit.part.1>
   44c30:	9480b804 	addi	r18,r18,736
   44c34:	047fffc4 	movi	r17,-1
   44c38:	91400117 	ldw	r5,4(r18)
   44c3c:	94000217 	ldw	r16,8(r18)
   44c40:	297fffc4 	addi	r5,r5,-1
   44c44:	28000a16 	blt	r5,zero,44c70 <__sfp+0x78>
   44c48:	8080030f 	ldh	r2,12(r16)
   44c4c:	10000c26 	beq	r2,zero,44c80 <__sfp+0x88>
   44c50:	80c01d04 	addi	r3,r16,116
   44c54:	00000206 	br	44c60 <__sfp+0x68>
   44c58:	18bfe60f 	ldh	r2,-104(r3)
   44c5c:	10000826 	beq	r2,zero,44c80 <__sfp+0x88>
   44c60:	297fffc4 	addi	r5,r5,-1
   44c64:	1c3ffd04 	addi	r16,r3,-12
   44c68:	18c01a04 	addi	r3,r3,104
   44c6c:	2c7ffa1e 	bne	r5,r17,44c58 <__alt_data_end+0xfffcf0f8>
   44c70:	90800017 	ldw	r2,0(r18)
   44c74:	10001d26 	beq	r2,zero,44cec <__sfp+0xf4>
   44c78:	1025883a 	mov	r18,r2
   44c7c:	003fee06 	br	44c38 <__alt_data_end+0xfffcf0d8>
   44c80:	00bfffc4 	movi	r2,-1
   44c84:	8080038d 	sth	r2,14(r16)
   44c88:	00800044 	movi	r2,1
   44c8c:	8080030d 	sth	r2,12(r16)
   44c90:	80001915 	stw	zero,100(r16)
   44c94:	80000015 	stw	zero,0(r16)
   44c98:	80000215 	stw	zero,8(r16)
   44c9c:	80000115 	stw	zero,4(r16)
   44ca0:	80000415 	stw	zero,16(r16)
   44ca4:	80000515 	stw	zero,20(r16)
   44ca8:	80000615 	stw	zero,24(r16)
   44cac:	81001704 	addi	r4,r16,92
   44cb0:	000b883a 	mov	r5,zero
   44cb4:	01800204 	movi	r6,8
   44cb8:	004655c0 	call	4655c <memset>
   44cbc:	8005883a 	mov	r2,r16
   44cc0:	80000c15 	stw	zero,48(r16)
   44cc4:	80000d15 	stw	zero,52(r16)
   44cc8:	80001115 	stw	zero,68(r16)
   44ccc:	80001215 	stw	zero,72(r16)
   44cd0:	dfc00417 	ldw	ra,16(sp)
   44cd4:	dcc00317 	ldw	r19,12(sp)
   44cd8:	dc800217 	ldw	r18,8(sp)
   44cdc:	dc400117 	ldw	r17,4(sp)
   44ce0:	dc000017 	ldw	r16,0(sp)
   44ce4:	dec00504 	addi	sp,sp,20
   44ce8:	f800283a 	ret
   44cec:	9809883a 	mov	r4,r19
   44cf0:	01400104 	movi	r5,4
   44cf4:	0044b800 	call	44b80 <__sfmoreglue>
   44cf8:	90800015 	stw	r2,0(r18)
   44cfc:	103fde1e 	bne	r2,zero,44c78 <__alt_data_end+0xfffcf118>
   44d00:	00800304 	movi	r2,12
   44d04:	98800015 	stw	r2,0(r19)
   44d08:	0005883a 	mov	r2,zero
   44d0c:	003ff006 	br	44cd0 <__alt_data_end+0xfffcf170>

00044d10 <_cleanup>:
   44d10:	00800174 	movhi	r2,5
   44d14:	10893504 	addi	r2,r2,9428
   44d18:	11000017 	ldw	r4,0(r2)
   44d1c:	01400174 	movhi	r5,5
   44d20:	2965bd04 	addi	r5,r5,-26892
   44d24:	00456301 	jmpi	45630 <_fwalk>

00044d28 <__sinit>:
   44d28:	20800e17 	ldw	r2,56(r4)
   44d2c:	10000126 	beq	r2,zero,44d34 <__sinit+0xc>
   44d30:	f800283a 	ret
   44d34:	00449e01 	jmpi	449e0 <__sinit.part.1>

00044d38 <__sfp_lock_acquire>:
   44d38:	f800283a 	ret

00044d3c <__sfp_lock_release>:
   44d3c:	f800283a 	ret

00044d40 <__sinit_lock_acquire>:
   44d40:	f800283a 	ret

00044d44 <__sinit_lock_release>:
   44d44:	f800283a 	ret

00044d48 <__fp_lock_all>:
   44d48:	00800174 	movhi	r2,5
   44d4c:	10893604 	addi	r2,r2,9432
   44d50:	11000017 	ldw	r4,0(r2)
   44d54:	01400134 	movhi	r5,4
   44d58:	29527104 	addi	r5,r5,18884
   44d5c:	00456301 	jmpi	45630 <_fwalk>

00044d60 <__fp_unlock_all>:
   44d60:	00800174 	movhi	r2,5
   44d64:	10893604 	addi	r2,r2,9432
   44d68:	11000017 	ldw	r4,0(r2)
   44d6c:	01400134 	movhi	r5,4
   44d70:	29527304 	addi	r5,r5,18892
   44d74:	00456301 	jmpi	45630 <_fwalk>

00044d78 <_malloc_trim_r>:
   44d78:	defffb04 	addi	sp,sp,-20
   44d7c:	dcc00315 	stw	r19,12(sp)
   44d80:	04c00174 	movhi	r19,5
   44d84:	dc800215 	stw	r18,8(sp)
   44d88:	dc400115 	stw	r17,4(sp)
   44d8c:	dc000015 	stw	r16,0(sp)
   44d90:	dfc00415 	stw	ra,16(sp)
   44d94:	2821883a 	mov	r16,r5
   44d98:	9cc38004 	addi	r19,r19,3584
   44d9c:	2025883a 	mov	r18,r4
   44da0:	004d8fc0 	call	4d8fc <__malloc_lock>
   44da4:	98800217 	ldw	r2,8(r19)
   44da8:	14400117 	ldw	r17,4(r2)
   44dac:	00bfff04 	movi	r2,-4
   44db0:	88a2703a 	and	r17,r17,r2
   44db4:	8c21c83a 	sub	r16,r17,r16
   44db8:	8403fbc4 	addi	r16,r16,4079
   44dbc:	8020d33a 	srli	r16,r16,12
   44dc0:	0083ffc4 	movi	r2,4095
   44dc4:	843fffc4 	addi	r16,r16,-1
   44dc8:	8020933a 	slli	r16,r16,12
   44dcc:	1400060e 	bge	r2,r16,44de8 <_malloc_trim_r+0x70>
   44dd0:	9009883a 	mov	r4,r18
   44dd4:	000b883a 	mov	r5,zero
   44dd8:	0047cdc0 	call	47cdc <_sbrk_r>
   44ddc:	98c00217 	ldw	r3,8(r19)
   44de0:	1c47883a 	add	r3,r3,r17
   44de4:	10c00a26 	beq	r2,r3,44e10 <_malloc_trim_r+0x98>
   44de8:	9009883a 	mov	r4,r18
   44dec:	004d91c0 	call	4d91c <__malloc_unlock>
   44df0:	0005883a 	mov	r2,zero
   44df4:	dfc00417 	ldw	ra,16(sp)
   44df8:	dcc00317 	ldw	r19,12(sp)
   44dfc:	dc800217 	ldw	r18,8(sp)
   44e00:	dc400117 	ldw	r17,4(sp)
   44e04:	dc000017 	ldw	r16,0(sp)
   44e08:	dec00504 	addi	sp,sp,20
   44e0c:	f800283a 	ret
   44e10:	9009883a 	mov	r4,r18
   44e14:	040bc83a 	sub	r5,zero,r16
   44e18:	0047cdc0 	call	47cdc <_sbrk_r>
   44e1c:	00ffffc4 	movi	r3,-1
   44e20:	10c00d26 	beq	r2,r3,44e58 <_malloc_trim_r+0xe0>
   44e24:	00c00174 	movhi	r3,5
   44e28:	18d03f04 	addi	r3,r3,16636
   44e2c:	18800017 	ldw	r2,0(r3)
   44e30:	99000217 	ldw	r4,8(r19)
   44e34:	8c23c83a 	sub	r17,r17,r16
   44e38:	8c400054 	ori	r17,r17,1
   44e3c:	1421c83a 	sub	r16,r2,r16
   44e40:	24400115 	stw	r17,4(r4)
   44e44:	9009883a 	mov	r4,r18
   44e48:	1c000015 	stw	r16,0(r3)
   44e4c:	004d91c0 	call	4d91c <__malloc_unlock>
   44e50:	00800044 	movi	r2,1
   44e54:	003fe706 	br	44df4 <__alt_data_end+0xfffcf294>
   44e58:	9009883a 	mov	r4,r18
   44e5c:	000b883a 	mov	r5,zero
   44e60:	0047cdc0 	call	47cdc <_sbrk_r>
   44e64:	99000217 	ldw	r4,8(r19)
   44e68:	014003c4 	movi	r5,15
   44e6c:	1107c83a 	sub	r3,r2,r4
   44e70:	28ffdd0e 	bge	r5,r3,44de8 <__alt_data_end+0xfffcf288>
   44e74:	01400174 	movhi	r5,5
   44e78:	29493804 	addi	r5,r5,9440
   44e7c:	29400017 	ldw	r5,0(r5)
   44e80:	18c00054 	ori	r3,r3,1
   44e84:	20c00115 	stw	r3,4(r4)
   44e88:	00c00174 	movhi	r3,5
   44e8c:	1145c83a 	sub	r2,r2,r5
   44e90:	18d03f04 	addi	r3,r3,16636
   44e94:	18800015 	stw	r2,0(r3)
   44e98:	003fd306 	br	44de8 <__alt_data_end+0xfffcf288>

00044e9c <_free_r>:
   44e9c:	28004c26 	beq	r5,zero,44fd0 <_free_r+0x134>
   44ea0:	defffd04 	addi	sp,sp,-12
   44ea4:	dc400115 	stw	r17,4(sp)
   44ea8:	dc000015 	stw	r16,0(sp)
   44eac:	2023883a 	mov	r17,r4
   44eb0:	2821883a 	mov	r16,r5
   44eb4:	dfc00215 	stw	ra,8(sp)
   44eb8:	004d8fc0 	call	4d8fc <__malloc_lock>
   44ebc:	813fff17 	ldw	r4,-4(r16)
   44ec0:	00bfff84 	movi	r2,-2
   44ec4:	02400174 	movhi	r9,5
   44ec8:	81bffe04 	addi	r6,r16,-8
   44ecc:	2084703a 	and	r2,r4,r2
   44ed0:	4a438004 	addi	r9,r9,3584
   44ed4:	308b883a 	add	r5,r6,r2
   44ed8:	2a000117 	ldw	r8,4(r5)
   44edc:	49c00217 	ldw	r7,8(r9)
   44ee0:	00ffff04 	movi	r3,-4
   44ee4:	40c6703a 	and	r3,r8,r3
   44ee8:	39405326 	beq	r7,r5,45038 <_free_r+0x19c>
   44eec:	28c00115 	stw	r3,4(r5)
   44ef0:	2100004c 	andi	r4,r4,1
   44ef4:	2000091e 	bne	r4,zero,44f1c <_free_r+0x80>
   44ef8:	81fffe17 	ldw	r7,-8(r16)
   44efc:	4a000204 	addi	r8,r9,8
   44f00:	31cdc83a 	sub	r6,r6,r7
   44f04:	31000217 	ldw	r4,8(r6)
   44f08:	11c5883a 	add	r2,r2,r7
   44f0c:	22006126 	beq	r4,r8,45094 <_free_r+0x1f8>
   44f10:	31c00317 	ldw	r7,12(r6)
   44f14:	21c00315 	stw	r7,12(r4)
   44f18:	39000215 	stw	r4,8(r7)
   44f1c:	28c9883a 	add	r4,r5,r3
   44f20:	21c00117 	ldw	r7,4(r4)
   44f24:	39c0004c 	andi	r7,r7,1
   44f28:	38000d1e 	bne	r7,zero,44f60 <_free_r+0xc4>
   44f2c:	29000217 	ldw	r4,8(r5)
   44f30:	10c5883a 	add	r2,r2,r3
   44f34:	00c00174 	movhi	r3,5
   44f38:	18c38204 	addi	r3,r3,3592
   44f3c:	20c07526 	beq	r4,r3,45114 <_free_r+0x278>
   44f40:	29c00317 	ldw	r7,12(r5)
   44f44:	11400054 	ori	r5,r2,1
   44f48:	3087883a 	add	r3,r6,r2
   44f4c:	21c00315 	stw	r7,12(r4)
   44f50:	39000215 	stw	r4,8(r7)
   44f54:	31400115 	stw	r5,4(r6)
   44f58:	18800015 	stw	r2,0(r3)
   44f5c:	00000406 	br	44f70 <_free_r+0xd4>
   44f60:	10c00054 	ori	r3,r2,1
   44f64:	30c00115 	stw	r3,4(r6)
   44f68:	3087883a 	add	r3,r6,r2
   44f6c:	18800015 	stw	r2,0(r3)
   44f70:	00c07fc4 	movi	r3,511
   44f74:	18801736 	bltu	r3,r2,44fd4 <_free_r+0x138>
   44f78:	1004d0fa 	srli	r2,r2,3
   44f7c:	01400044 	movi	r5,1
   44f80:	49000117 	ldw	r4,4(r9)
   44f84:	1087883a 	add	r3,r2,r2
   44f88:	18c7883a 	add	r3,r3,r3
   44f8c:	1005d0ba 	srai	r2,r2,2
   44f90:	18c7883a 	add	r3,r3,r3
   44f94:	1a47883a 	add	r3,r3,r9
   44f98:	19c00217 	ldw	r7,8(r3)
   44f9c:	2884983a 	sll	r2,r5,r2
   44fa0:	30c00315 	stw	r3,12(r6)
   44fa4:	31c00215 	stw	r7,8(r6)
   44fa8:	1104b03a 	or	r2,r2,r4
   44fac:	19800215 	stw	r6,8(r3)
   44fb0:	48800115 	stw	r2,4(r9)
   44fb4:	39800315 	stw	r6,12(r7)
   44fb8:	8809883a 	mov	r4,r17
   44fbc:	dfc00217 	ldw	ra,8(sp)
   44fc0:	dc400117 	ldw	r17,4(sp)
   44fc4:	dc000017 	ldw	r16,0(sp)
   44fc8:	dec00304 	addi	sp,sp,12
   44fcc:	004d91c1 	jmpi	4d91c <__malloc_unlock>
   44fd0:	f800283a 	ret
   44fd4:	1006d27a 	srli	r3,r2,9
   44fd8:	01000104 	movi	r4,4
   44fdc:	20c04036 	bltu	r4,r3,450e0 <_free_r+0x244>
   44fe0:	1006d1ba 	srli	r3,r2,6
   44fe4:	19400e04 	addi	r5,r3,56
   44fe8:	2947883a 	add	r3,r5,r5
   44fec:	18c7883a 	add	r3,r3,r3
   44ff0:	18c7883a 	add	r3,r3,r3
   44ff4:	1a49883a 	add	r4,r3,r9
   44ff8:	20c00217 	ldw	r3,8(r4)
   44ffc:	01c00174 	movhi	r7,5
   45000:	39c38004 	addi	r7,r7,3584
   45004:	19003b26 	beq	r3,r4,450f4 <_free_r+0x258>
   45008:	01ffff04 	movi	r7,-4
   4500c:	19400117 	ldw	r5,4(r3)
   45010:	29ca703a 	and	r5,r5,r7
   45014:	1140022e 	bgeu	r2,r5,45020 <_free_r+0x184>
   45018:	18c00217 	ldw	r3,8(r3)
   4501c:	20fffb1e 	bne	r4,r3,4500c <__alt_data_end+0xfffcf4ac>
   45020:	18800317 	ldw	r2,12(r3)
   45024:	30800315 	stw	r2,12(r6)
   45028:	30c00215 	stw	r3,8(r6)
   4502c:	11800215 	stw	r6,8(r2)
   45030:	19800315 	stw	r6,12(r3)
   45034:	003fe006 	br	44fb8 <__alt_data_end+0xfffcf458>
   45038:	2100004c 	andi	r4,r4,1
   4503c:	1885883a 	add	r2,r3,r2
   45040:	2000071e 	bne	r4,zero,45060 <_free_r+0x1c4>
   45044:	817ffe17 	ldw	r5,-8(r16)
   45048:	314dc83a 	sub	r6,r6,r5
   4504c:	30c00317 	ldw	r3,12(r6)
   45050:	31000217 	ldw	r4,8(r6)
   45054:	1145883a 	add	r2,r2,r5
   45058:	20c00315 	stw	r3,12(r4)
   4505c:	19000215 	stw	r4,8(r3)
   45060:	10c00054 	ori	r3,r2,1
   45064:	30c00115 	stw	r3,4(r6)
   45068:	00c00174 	movhi	r3,5
   4506c:	18c93904 	addi	r3,r3,9444
   45070:	18c00017 	ldw	r3,0(r3)
   45074:	49800215 	stw	r6,8(r9)
   45078:	10ffcf36 	bltu	r2,r3,44fb8 <__alt_data_end+0xfffcf458>
   4507c:	00800174 	movhi	r2,5
   45080:	10903604 	addi	r2,r2,16600
   45084:	11400017 	ldw	r5,0(r2)
   45088:	8809883a 	mov	r4,r17
   4508c:	0044d780 	call	44d78 <_malloc_trim_r>
   45090:	003fc906 	br	44fb8 <__alt_data_end+0xfffcf458>
   45094:	28c9883a 	add	r4,r5,r3
   45098:	21000117 	ldw	r4,4(r4)
   4509c:	2100004c 	andi	r4,r4,1
   450a0:	20000a1e 	bne	r4,zero,450cc <_free_r+0x230>
   450a4:	29000317 	ldw	r4,12(r5)
   450a8:	29400217 	ldw	r5,8(r5)
   450ac:	10c5883a 	add	r2,r2,r3
   450b0:	10c00054 	ori	r3,r2,1
   450b4:	29000315 	stw	r4,12(r5)
   450b8:	21400215 	stw	r5,8(r4)
   450bc:	30c00115 	stw	r3,4(r6)
   450c0:	308d883a 	add	r6,r6,r2
   450c4:	30800015 	stw	r2,0(r6)
   450c8:	003fbb06 	br	44fb8 <__alt_data_end+0xfffcf458>
   450cc:	10c00054 	ori	r3,r2,1
   450d0:	30c00115 	stw	r3,4(r6)
   450d4:	308d883a 	add	r6,r6,r2
   450d8:	30800015 	stw	r2,0(r6)
   450dc:	003fb606 	br	44fb8 <__alt_data_end+0xfffcf458>
   450e0:	01000504 	movi	r4,20
   450e4:	20c01436 	bltu	r4,r3,45138 <_free_r+0x29c>
   450e8:	194016c4 	addi	r5,r3,91
   450ec:	2947883a 	add	r3,r5,r5
   450f0:	003fbe06 	br	44fec <__alt_data_end+0xfffcf48c>
   450f4:	280bd0ba 	srai	r5,r5,2
   450f8:	00800044 	movi	r2,1
   450fc:	39000117 	ldw	r4,4(r7)
   45100:	114a983a 	sll	r5,r2,r5
   45104:	1805883a 	mov	r2,r3
   45108:	2908b03a 	or	r4,r5,r4
   4510c:	39000115 	stw	r4,4(r7)
   45110:	003fc406 	br	45024 <__alt_data_end+0xfffcf4c4>
   45114:	49800515 	stw	r6,20(r9)
   45118:	49800415 	stw	r6,16(r9)
   4511c:	10c00054 	ori	r3,r2,1
   45120:	31000315 	stw	r4,12(r6)
   45124:	31000215 	stw	r4,8(r6)
   45128:	30c00115 	stw	r3,4(r6)
   4512c:	308d883a 	add	r6,r6,r2
   45130:	30800015 	stw	r2,0(r6)
   45134:	003fa006 	br	44fb8 <__alt_data_end+0xfffcf458>
   45138:	01001504 	movi	r4,84
   4513c:	20c00436 	bltu	r4,r3,45150 <_free_r+0x2b4>
   45140:	1006d33a 	srli	r3,r2,12
   45144:	19401b84 	addi	r5,r3,110
   45148:	2947883a 	add	r3,r5,r5
   4514c:	003fa706 	br	44fec <__alt_data_end+0xfffcf48c>
   45150:	01005504 	movi	r4,340
   45154:	20c00436 	bltu	r4,r3,45168 <_free_r+0x2cc>
   45158:	1006d3fa 	srli	r3,r2,15
   4515c:	19401dc4 	addi	r5,r3,119
   45160:	2947883a 	add	r3,r5,r5
   45164:	003fa106 	br	44fec <__alt_data_end+0xfffcf48c>
   45168:	01015504 	movi	r4,1364
   4516c:	20c00436 	bltu	r4,r3,45180 <_free_r+0x2e4>
   45170:	1006d4ba 	srli	r3,r2,18
   45174:	19401f04 	addi	r5,r3,124
   45178:	2947883a 	add	r3,r5,r5
   4517c:	003f9b06 	br	44fec <__alt_data_end+0xfffcf48c>
   45180:	00c03f04 	movi	r3,252
   45184:	01401f84 	movi	r5,126
   45188:	003f9806 	br	44fec <__alt_data_end+0xfffcf48c>

0004518c <__sfvwrite_r>:
   4518c:	30800217 	ldw	r2,8(r6)
   45190:	10004526 	beq	r2,zero,452a8 <__sfvwrite_r+0x11c>
   45194:	28c0030b 	ldhu	r3,12(r5)
   45198:	defff404 	addi	sp,sp,-48
   4519c:	dd400715 	stw	r21,28(sp)
   451a0:	dcc00515 	stw	r19,20(sp)
   451a4:	dc000215 	stw	r16,8(sp)
   451a8:	dfc00b15 	stw	ra,44(sp)
   451ac:	df000a15 	stw	fp,40(sp)
   451b0:	ddc00915 	stw	r23,36(sp)
   451b4:	dd800815 	stw	r22,32(sp)
   451b8:	dd000615 	stw	r20,24(sp)
   451bc:	dc800415 	stw	r18,16(sp)
   451c0:	dc400315 	stw	r17,12(sp)
   451c4:	1880020c 	andi	r2,r3,8
   451c8:	2821883a 	mov	r16,r5
   451cc:	202b883a 	mov	r21,r4
   451d0:	3027883a 	mov	r19,r6
   451d4:	10002526 	beq	r2,zero,4526c <__sfvwrite_r+0xe0>
   451d8:	28800417 	ldw	r2,16(r5)
   451dc:	10002326 	beq	r2,zero,4526c <__sfvwrite_r+0xe0>
   451e0:	1880008c 	andi	r2,r3,2
   451e4:	9c400017 	ldw	r17,0(r19)
   451e8:	10003126 	beq	r2,zero,452b0 <__sfvwrite_r+0x124>
   451ec:	0029883a 	mov	r20,zero
   451f0:	0025883a 	mov	r18,zero
   451f4:	05810004 	movi	r22,1024
   451f8:	a00d883a 	mov	r6,r20
   451fc:	a809883a 	mov	r4,r21
   45200:	90002526 	beq	r18,zero,45298 <__sfvwrite_r+0x10c>
   45204:	900f883a 	mov	r7,r18
   45208:	81400717 	ldw	r5,28(r16)
   4520c:	b480012e 	bgeu	r22,r18,45214 <__sfvwrite_r+0x88>
   45210:	01c10004 	movi	r7,1024
   45214:	80800917 	ldw	r2,36(r16)
   45218:	103ee83a 	callr	r2
   4521c:	0080510e 	bge	zero,r2,45364 <__sfvwrite_r+0x1d8>
   45220:	98c00217 	ldw	r3,8(r19)
   45224:	a0a9883a 	add	r20,r20,r2
   45228:	90a5c83a 	sub	r18,r18,r2
   4522c:	1885c83a 	sub	r2,r3,r2
   45230:	98800215 	stw	r2,8(r19)
   45234:	103ff01e 	bne	r2,zero,451f8 <__alt_data_end+0xfffcf698>
   45238:	0005883a 	mov	r2,zero
   4523c:	dfc00b17 	ldw	ra,44(sp)
   45240:	df000a17 	ldw	fp,40(sp)
   45244:	ddc00917 	ldw	r23,36(sp)
   45248:	dd800817 	ldw	r22,32(sp)
   4524c:	dd400717 	ldw	r21,28(sp)
   45250:	dd000617 	ldw	r20,24(sp)
   45254:	dcc00517 	ldw	r19,20(sp)
   45258:	dc800417 	ldw	r18,16(sp)
   4525c:	dc400317 	ldw	r17,12(sp)
   45260:	dc000217 	ldw	r16,8(sp)
   45264:	dec00c04 	addi	sp,sp,48
   45268:	f800283a 	ret
   4526c:	a809883a 	mov	r4,r21
   45270:	800b883a 	mov	r5,r16
   45274:	0042cec0 	call	42cec <__swsetup_r>
   45278:	80c0030b 	ldhu	r3,12(r16)
   4527c:	103fd826 	beq	r2,zero,451e0 <__alt_data_end+0xfffcf680>
   45280:	18c01014 	ori	r3,r3,64
   45284:	80c0030d 	sth	r3,12(r16)
   45288:	00c00244 	movi	r3,9
   4528c:	00bfffc4 	movi	r2,-1
   45290:	a8c00015 	stw	r3,0(r21)
   45294:	003fe906 	br	4523c <__alt_data_end+0xfffcf6dc>
   45298:	8d000017 	ldw	r20,0(r17)
   4529c:	8c800117 	ldw	r18,4(r17)
   452a0:	8c400204 	addi	r17,r17,8
   452a4:	003fd406 	br	451f8 <__alt_data_end+0xfffcf698>
   452a8:	0005883a 	mov	r2,zero
   452ac:	f800283a 	ret
   452b0:	1880004c 	andi	r2,r3,1
   452b4:	1000301e 	bne	r2,zero,45378 <__sfvwrite_r+0x1ec>
   452b8:	002f883a 	mov	r23,zero
   452bc:	0025883a 	mov	r18,zero
   452c0:	90001c26 	beq	r18,zero,45334 <__sfvwrite_r+0x1a8>
   452c4:	1880800c 	andi	r2,r3,512
   452c8:	85000217 	ldw	r20,8(r16)
   452cc:	10006c26 	beq	r2,zero,45480 <__sfvwrite_r+0x2f4>
   452d0:	a02d883a 	mov	r22,r20
   452d4:	95008536 	bltu	r18,r20,454ec <__sfvwrite_r+0x360>
   452d8:	1881200c 	andi	r2,r3,1152
   452dc:	10009d1e 	bne	r2,zero,45554 <__sfvwrite_r+0x3c8>
   452e0:	81000017 	ldw	r4,0(r16)
   452e4:	a039883a 	mov	fp,r20
   452e8:	9029883a 	mov	r20,r18
   452ec:	b80b883a 	mov	r5,r23
   452f0:	b00d883a 	mov	r6,r22
   452f4:	00464000 	call	46400 <memmove>
   452f8:	80c00217 	ldw	r3,8(r16)
   452fc:	81000017 	ldw	r4,0(r16)
   45300:	9005883a 	mov	r2,r18
   45304:	1f39c83a 	sub	fp,r3,fp
   45308:	258f883a 	add	r7,r4,r22
   4530c:	87000215 	stw	fp,8(r16)
   45310:	81c00015 	stw	r7,0(r16)
   45314:	98c00217 	ldw	r3,8(r19)
   45318:	b8af883a 	add	r23,r23,r2
   4531c:	90a5c83a 	sub	r18,r18,r2
   45320:	1d05c83a 	sub	r2,r3,r20
   45324:	98800215 	stw	r2,8(r19)
   45328:	103fc326 	beq	r2,zero,45238 <__alt_data_end+0xfffcf6d8>
   4532c:	80c0030b 	ldhu	r3,12(r16)
   45330:	903fe41e 	bne	r18,zero,452c4 <__alt_data_end+0xfffcf764>
   45334:	8dc00017 	ldw	r23,0(r17)
   45338:	8c800117 	ldw	r18,4(r17)
   4533c:	8c400204 	addi	r17,r17,8
   45340:	003fdf06 	br	452c0 <__alt_data_end+0xfffcf760>
   45344:	00476c80 	call	476c8 <_realloc_r>
   45348:	102d883a 	mov	r22,r2
   4534c:	1000a01e 	bne	r2,zero,455d0 <__sfvwrite_r+0x444>
   45350:	81400417 	ldw	r5,16(r16)
   45354:	a809883a 	mov	r4,r21
   45358:	0044e9c0 	call	44e9c <_free_r>
   4535c:	00800304 	movi	r2,12
   45360:	a8800015 	stw	r2,0(r21)
   45364:	80c0030b 	ldhu	r3,12(r16)
   45368:	00bfffc4 	movi	r2,-1
   4536c:	18c01014 	ori	r3,r3,64
   45370:	80c0030d 	sth	r3,12(r16)
   45374:	003fb106 	br	4523c <__alt_data_end+0xfffcf6dc>
   45378:	0029883a 	mov	r20,zero
   4537c:	0011883a 	mov	r8,zero
   45380:	0039883a 	mov	fp,zero
   45384:	0025883a 	mov	r18,zero
   45388:	90001f26 	beq	r18,zero,45408 <__sfvwrite_r+0x27c>
   4538c:	40006826 	beq	r8,zero,45530 <__sfvwrite_r+0x3a4>
   45390:	a02f883a 	mov	r23,r20
   45394:	9500012e 	bgeu	r18,r20,4539c <__sfvwrite_r+0x210>
   45398:	902f883a 	mov	r23,r18
   4539c:	81000017 	ldw	r4,0(r16)
   453a0:	80800417 	ldw	r2,16(r16)
   453a4:	b82d883a 	mov	r22,r23
   453a8:	81800217 	ldw	r6,8(r16)
   453ac:	81c00517 	ldw	r7,20(r16)
   453b0:	1100022e 	bgeu	r2,r4,453bc <__sfvwrite_r+0x230>
   453b4:	31c7883a 	add	r3,r6,r7
   453b8:	1dc01816 	blt	r3,r23,4541c <__sfvwrite_r+0x290>
   453bc:	b9c03f16 	blt	r23,r7,454bc <__sfvwrite_r+0x330>
   453c0:	80800917 	ldw	r2,36(r16)
   453c4:	81400717 	ldw	r5,28(r16)
   453c8:	a809883a 	mov	r4,r21
   453cc:	da000115 	stw	r8,4(sp)
   453d0:	e00d883a 	mov	r6,fp
   453d4:	103ee83a 	callr	r2
   453d8:	102d883a 	mov	r22,r2
   453dc:	da000117 	ldw	r8,4(sp)
   453e0:	00bfe00e 	bge	zero,r2,45364 <__alt_data_end+0xfffcf804>
   453e4:	a5a9c83a 	sub	r20,r20,r22
   453e8:	a0001f26 	beq	r20,zero,45468 <__sfvwrite_r+0x2dc>
   453ec:	98800217 	ldw	r2,8(r19)
   453f0:	e5b9883a 	add	fp,fp,r22
   453f4:	95a5c83a 	sub	r18,r18,r22
   453f8:	15adc83a 	sub	r22,r2,r22
   453fc:	9d800215 	stw	r22,8(r19)
   45400:	b03f8d26 	beq	r22,zero,45238 <__alt_data_end+0xfffcf6d8>
   45404:	903fe11e 	bne	r18,zero,4538c <__alt_data_end+0xfffcf82c>
   45408:	8f000017 	ldw	fp,0(r17)
   4540c:	8c800117 	ldw	r18,4(r17)
   45410:	0011883a 	mov	r8,zero
   45414:	8c400204 	addi	r17,r17,8
   45418:	003fdb06 	br	45388 <__alt_data_end+0xfffcf828>
   4541c:	180d883a 	mov	r6,r3
   45420:	e00b883a 	mov	r5,fp
   45424:	da000115 	stw	r8,4(sp)
   45428:	d8c00015 	stw	r3,0(sp)
   4542c:	00464000 	call	46400 <memmove>
   45430:	d8c00017 	ldw	r3,0(sp)
   45434:	80800017 	ldw	r2,0(r16)
   45438:	a809883a 	mov	r4,r21
   4543c:	800b883a 	mov	r5,r16
   45440:	10c5883a 	add	r2,r2,r3
   45444:	80800015 	stw	r2,0(r16)
   45448:	d8c00015 	stw	r3,0(sp)
   4544c:	004476c0 	call	4476c <_fflush_r>
   45450:	d8c00017 	ldw	r3,0(sp)
   45454:	da000117 	ldw	r8,4(sp)
   45458:	103fc21e 	bne	r2,zero,45364 <__alt_data_end+0xfffcf804>
   4545c:	182d883a 	mov	r22,r3
   45460:	a5a9c83a 	sub	r20,r20,r22
   45464:	a03fe11e 	bne	r20,zero,453ec <__alt_data_end+0xfffcf88c>
   45468:	a809883a 	mov	r4,r21
   4546c:	800b883a 	mov	r5,r16
   45470:	004476c0 	call	4476c <_fflush_r>
   45474:	103fbb1e 	bne	r2,zero,45364 <__alt_data_end+0xfffcf804>
   45478:	0011883a 	mov	r8,zero
   4547c:	003fdb06 	br	453ec <__alt_data_end+0xfffcf88c>
   45480:	81000017 	ldw	r4,0(r16)
   45484:	80800417 	ldw	r2,16(r16)
   45488:	1100012e 	bgeu	r2,r4,45490 <__sfvwrite_r+0x304>
   4548c:	a4805a36 	bltu	r20,r18,455f8 <__sfvwrite_r+0x46c>
   45490:	81c00517 	ldw	r7,20(r16)
   45494:	91c01a36 	bltu	r18,r7,45500 <__sfvwrite_r+0x374>
   45498:	80800917 	ldw	r2,36(r16)
   4549c:	81400717 	ldw	r5,28(r16)
   454a0:	a809883a 	mov	r4,r21
   454a4:	b80d883a 	mov	r6,r23
   454a8:	103ee83a 	callr	r2
   454ac:	1029883a 	mov	r20,r2
   454b0:	00bfac0e 	bge	zero,r2,45364 <__alt_data_end+0xfffcf804>
   454b4:	a005883a 	mov	r2,r20
   454b8:	003f9606 	br	45314 <__alt_data_end+0xfffcf7b4>
   454bc:	b80d883a 	mov	r6,r23
   454c0:	e00b883a 	mov	r5,fp
   454c4:	da000115 	stw	r8,4(sp)
   454c8:	00464000 	call	46400 <memmove>
   454cc:	80800217 	ldw	r2,8(r16)
   454d0:	80c00017 	ldw	r3,0(r16)
   454d4:	da000117 	ldw	r8,4(sp)
   454d8:	15c5c83a 	sub	r2,r2,r23
   454dc:	1def883a 	add	r23,r3,r23
   454e0:	80800215 	stw	r2,8(r16)
   454e4:	85c00015 	stw	r23,0(r16)
   454e8:	003fbe06 	br	453e4 <__alt_data_end+0xfffcf884>
   454ec:	81000017 	ldw	r4,0(r16)
   454f0:	9039883a 	mov	fp,r18
   454f4:	9029883a 	mov	r20,r18
   454f8:	902d883a 	mov	r22,r18
   454fc:	003f7b06 	br	452ec <__alt_data_end+0xfffcf78c>
   45500:	b80b883a 	mov	r5,r23
   45504:	900d883a 	mov	r6,r18
   45508:	00464000 	call	46400 <memmove>
   4550c:	80c00217 	ldw	r3,8(r16)
   45510:	80800017 	ldw	r2,0(r16)
   45514:	9029883a 	mov	r20,r18
   45518:	1c87c83a 	sub	r3,r3,r18
   4551c:	1485883a 	add	r2,r2,r18
   45520:	80800015 	stw	r2,0(r16)
   45524:	80c00215 	stw	r3,8(r16)
   45528:	9005883a 	mov	r2,r18
   4552c:	003f7906 	br	45314 <__alt_data_end+0xfffcf7b4>
   45530:	e009883a 	mov	r4,fp
   45534:	01400284 	movi	r5,10
   45538:	900d883a 	mov	r6,r18
   4553c:	00461e00 	call	461e0 <memchr>
   45540:	10003826 	beq	r2,zero,45624 <__sfvwrite_r+0x498>
   45544:	10800044 	addi	r2,r2,1
   45548:	1729c83a 	sub	r20,r2,fp
   4554c:	02000044 	movi	r8,1
   45550:	003f8f06 	br	45390 <__alt_data_end+0xfffcf830>
   45554:	80800517 	ldw	r2,20(r16)
   45558:	81400417 	ldw	r5,16(r16)
   4555c:	87000017 	ldw	fp,0(r16)
   45560:	10a9883a 	add	r20,r2,r2
   45564:	a085883a 	add	r2,r20,r2
   45568:	1028d7fa 	srli	r20,r2,31
   4556c:	e179c83a 	sub	fp,fp,r5
   45570:	e1000044 	addi	r4,fp,1
   45574:	a085883a 	add	r2,r20,r2
   45578:	1029d07a 	srai	r20,r2,1
   4557c:	2485883a 	add	r2,r4,r18
   45580:	a00d883a 	mov	r6,r20
   45584:	a080022e 	bgeu	r20,r2,45590 <__sfvwrite_r+0x404>
   45588:	1029883a 	mov	r20,r2
   4558c:	100d883a 	mov	r6,r2
   45590:	18c1000c 	andi	r3,r3,1024
   45594:	a809883a 	mov	r4,r21
   45598:	183f6a26 	beq	r3,zero,45344 <__alt_data_end+0xfffcf7e4>
   4559c:	300b883a 	mov	r5,r6
   455a0:	0045a380 	call	45a38 <_malloc_r>
   455a4:	102d883a 	mov	r22,r2
   455a8:	103f6c26 	beq	r2,zero,4535c <__alt_data_end+0xfffcf7fc>
   455ac:	81400417 	ldw	r5,16(r16)
   455b0:	1009883a 	mov	r4,r2
   455b4:	e00d883a 	mov	r6,fp
   455b8:	00462c80 	call	462c8 <memcpy>
   455bc:	8080030b 	ldhu	r2,12(r16)
   455c0:	00fedfc4 	movi	r3,-1153
   455c4:	10c4703a 	and	r2,r2,r3
   455c8:	10802014 	ori	r2,r2,128
   455cc:	8080030d 	sth	r2,12(r16)
   455d0:	b709883a 	add	r4,r22,fp
   455d4:	a707c83a 	sub	r3,r20,fp
   455d8:	85800415 	stw	r22,16(r16)
   455dc:	85000515 	stw	r20,20(r16)
   455e0:	81000015 	stw	r4,0(r16)
   455e4:	9039883a 	mov	fp,r18
   455e8:	80c00215 	stw	r3,8(r16)
   455ec:	9029883a 	mov	r20,r18
   455f0:	902d883a 	mov	r22,r18
   455f4:	003f3d06 	br	452ec <__alt_data_end+0xfffcf78c>
   455f8:	b80b883a 	mov	r5,r23
   455fc:	a00d883a 	mov	r6,r20
   45600:	00464000 	call	46400 <memmove>
   45604:	80800017 	ldw	r2,0(r16)
   45608:	a809883a 	mov	r4,r21
   4560c:	800b883a 	mov	r5,r16
   45610:	1505883a 	add	r2,r2,r20
   45614:	80800015 	stw	r2,0(r16)
   45618:	004476c0 	call	4476c <_fflush_r>
   4561c:	103fa526 	beq	r2,zero,454b4 <__alt_data_end+0xfffcf954>
   45620:	003f5006 	br	45364 <__alt_data_end+0xfffcf804>
   45624:	95000044 	addi	r20,r18,1
   45628:	02000044 	movi	r8,1
   4562c:	003f5806 	br	45390 <__alt_data_end+0xfffcf830>

00045630 <_fwalk>:
   45630:	defff804 	addi	sp,sp,-32
   45634:	dd400515 	stw	r21,20(sp)
   45638:	2540b804 	addi	r21,r4,736
   4563c:	dd800615 	stw	r22,24(sp)
   45640:	dd000415 	stw	r20,16(sp)
   45644:	dfc00715 	stw	ra,28(sp)
   45648:	dcc00315 	stw	r19,12(sp)
   4564c:	dc800215 	stw	r18,8(sp)
   45650:	dc400115 	stw	r17,4(sp)
   45654:	dc000015 	stw	r16,0(sp)
   45658:	2829883a 	mov	r20,r5
   4565c:	002d883a 	mov	r22,zero
   45660:	0044d380 	call	44d38 <__sfp_lock_acquire>
   45664:	a8001426 	beq	r21,zero,456b8 <_fwalk+0x88>
   45668:	04ffffc4 	movi	r19,-1
   4566c:	ac400117 	ldw	r17,4(r21)
   45670:	ac800217 	ldw	r18,8(r21)
   45674:	8c7fffc4 	addi	r17,r17,-1
   45678:	88000d16 	blt	r17,zero,456b0 <_fwalk+0x80>
   4567c:	94000304 	addi	r16,r18,12
   45680:	94800384 	addi	r18,r18,14
   45684:	80c0000f 	ldh	r3,0(r16)
   45688:	8c7fffc4 	addi	r17,r17,-1
   4568c:	813ffd04 	addi	r4,r16,-12
   45690:	18000426 	beq	r3,zero,456a4 <_fwalk+0x74>
   45694:	90c0000f 	ldh	r3,0(r18)
   45698:	1cc00226 	beq	r3,r19,456a4 <_fwalk+0x74>
   4569c:	a03ee83a 	callr	r20
   456a0:	b0acb03a 	or	r22,r22,r2
   456a4:	84001a04 	addi	r16,r16,104
   456a8:	94801a04 	addi	r18,r18,104
   456ac:	8cfff51e 	bne	r17,r19,45684 <__alt_data_end+0xfffcfb24>
   456b0:	ad400017 	ldw	r21,0(r21)
   456b4:	a83fed1e 	bne	r21,zero,4566c <__alt_data_end+0xfffcfb0c>
   456b8:	0044d3c0 	call	44d3c <__sfp_lock_release>
   456bc:	b005883a 	mov	r2,r22
   456c0:	dfc00717 	ldw	ra,28(sp)
   456c4:	dd800617 	ldw	r22,24(sp)
   456c8:	dd400517 	ldw	r21,20(sp)
   456cc:	dd000417 	ldw	r20,16(sp)
   456d0:	dcc00317 	ldw	r19,12(sp)
   456d4:	dc800217 	ldw	r18,8(sp)
   456d8:	dc400117 	ldw	r17,4(sp)
   456dc:	dc000017 	ldw	r16,0(sp)
   456e0:	dec00804 	addi	sp,sp,32
   456e4:	f800283a 	ret

000456e8 <_fwalk_reent>:
   456e8:	defff804 	addi	sp,sp,-32
   456ec:	dd400515 	stw	r21,20(sp)
   456f0:	2540b804 	addi	r21,r4,736
   456f4:	dd800615 	stw	r22,24(sp)
   456f8:	dd000415 	stw	r20,16(sp)
   456fc:	dcc00315 	stw	r19,12(sp)
   45700:	dfc00715 	stw	ra,28(sp)
   45704:	dc800215 	stw	r18,8(sp)
   45708:	dc400115 	stw	r17,4(sp)
   4570c:	dc000015 	stw	r16,0(sp)
   45710:	2027883a 	mov	r19,r4
   45714:	2829883a 	mov	r20,r5
   45718:	002d883a 	mov	r22,zero
   4571c:	0044d380 	call	44d38 <__sfp_lock_acquire>
   45720:	a8001326 	beq	r21,zero,45770 <_fwalk_reent+0x88>
   45724:	04bfffc4 	movi	r18,-1
   45728:	ac400117 	ldw	r17,4(r21)
   4572c:	ac000217 	ldw	r16,8(r21)
   45730:	8c7fffc4 	addi	r17,r17,-1
   45734:	88000c16 	blt	r17,zero,45768 <_fwalk_reent+0x80>
   45738:	84000304 	addi	r16,r16,12
   4573c:	80c0000f 	ldh	r3,0(r16)
   45740:	8c7fffc4 	addi	r17,r17,-1
   45744:	817ffd04 	addi	r5,r16,-12
   45748:	18000526 	beq	r3,zero,45760 <_fwalk_reent+0x78>
   4574c:	80c0008f 	ldh	r3,2(r16)
   45750:	9809883a 	mov	r4,r19
   45754:	1c800226 	beq	r3,r18,45760 <_fwalk_reent+0x78>
   45758:	a03ee83a 	callr	r20
   4575c:	b0acb03a 	or	r22,r22,r2
   45760:	84001a04 	addi	r16,r16,104
   45764:	8cbff51e 	bne	r17,r18,4573c <__alt_data_end+0xfffcfbdc>
   45768:	ad400017 	ldw	r21,0(r21)
   4576c:	a83fee1e 	bne	r21,zero,45728 <__alt_data_end+0xfffcfbc8>
   45770:	0044d3c0 	call	44d3c <__sfp_lock_release>
   45774:	b005883a 	mov	r2,r22
   45778:	dfc00717 	ldw	ra,28(sp)
   4577c:	dd800617 	ldw	r22,24(sp)
   45780:	dd400517 	ldw	r21,20(sp)
   45784:	dd000417 	ldw	r20,16(sp)
   45788:	dcc00317 	ldw	r19,12(sp)
   4578c:	dc800217 	ldw	r18,8(sp)
   45790:	dc400117 	ldw	r17,4(sp)
   45794:	dc000017 	ldw	r16,0(sp)
   45798:	dec00804 	addi	sp,sp,32
   4579c:	f800283a 	ret

000457a0 <_setlocale_r>:
   457a0:	30001b26 	beq	r6,zero,45810 <_setlocale_r+0x70>
   457a4:	01400174 	movhi	r5,5
   457a8:	defffe04 	addi	sp,sp,-8
   457ac:	2941b704 	addi	r5,r5,1756
   457b0:	3009883a 	mov	r4,r6
   457b4:	dc000015 	stw	r16,0(sp)
   457b8:	dfc00115 	stw	ra,4(sp)
   457bc:	3021883a 	mov	r16,r6
   457c0:	0047e6c0 	call	47e6c <strcmp>
   457c4:	1000061e 	bne	r2,zero,457e0 <_setlocale_r+0x40>
   457c8:	00800174 	movhi	r2,5
   457cc:	1081b604 	addi	r2,r2,1752
   457d0:	dfc00117 	ldw	ra,4(sp)
   457d4:	dc000017 	ldw	r16,0(sp)
   457d8:	dec00204 	addi	sp,sp,8
   457dc:	f800283a 	ret
   457e0:	01400174 	movhi	r5,5
   457e4:	2941b604 	addi	r5,r5,1752
   457e8:	8009883a 	mov	r4,r16
   457ec:	0047e6c0 	call	47e6c <strcmp>
   457f0:	103ff526 	beq	r2,zero,457c8 <__alt_data_end+0xfffcfc68>
   457f4:	01400174 	movhi	r5,5
   457f8:	2941a104 	addi	r5,r5,1668
   457fc:	8009883a 	mov	r4,r16
   45800:	0047e6c0 	call	47e6c <strcmp>
   45804:	103ff026 	beq	r2,zero,457c8 <__alt_data_end+0xfffcfc68>
   45808:	0005883a 	mov	r2,zero
   4580c:	003ff006 	br	457d0 <__alt_data_end+0xfffcfc70>
   45810:	00800174 	movhi	r2,5
   45814:	1081b604 	addi	r2,r2,1752
   45818:	f800283a 	ret

0004581c <__locale_charset>:
   4581c:	00800174 	movhi	r2,5
   45820:	10836a04 	addi	r2,r2,3496
   45824:	f800283a 	ret

00045828 <__locale_mb_cur_max>:
   45828:	00800174 	movhi	r2,5
   4582c:	10893704 	addi	r2,r2,9436
   45830:	10800017 	ldw	r2,0(r2)
   45834:	f800283a 	ret

00045838 <__locale_msgcharset>:
   45838:	00800174 	movhi	r2,5
   4583c:	10836204 	addi	r2,r2,3464
   45840:	f800283a 	ret

00045844 <__locale_cjk_lang>:
   45844:	0005883a 	mov	r2,zero
   45848:	f800283a 	ret

0004584c <_localeconv_r>:
   4584c:	00800174 	movhi	r2,5
   45850:	10837204 	addi	r2,r2,3528
   45854:	f800283a 	ret

00045858 <setlocale>:
   45858:	00c00174 	movhi	r3,5
   4585c:	18c93604 	addi	r3,r3,9432
   45860:	2005883a 	mov	r2,r4
   45864:	19000017 	ldw	r4,0(r3)
   45868:	280d883a 	mov	r6,r5
   4586c:	100b883a 	mov	r5,r2
   45870:	00457a01 	jmpi	457a0 <_setlocale_r>

00045874 <localeconv>:
   45874:	00800174 	movhi	r2,5
   45878:	10837204 	addi	r2,r2,3528
   4587c:	f800283a 	ret

00045880 <__smakebuf_r>:
   45880:	2880030b 	ldhu	r2,12(r5)
   45884:	10c0008c 	andi	r3,r2,2
   45888:	1800401e 	bne	r3,zero,4598c <__smakebuf_r+0x10c>
   4588c:	deffec04 	addi	sp,sp,-80
   45890:	dc000f15 	stw	r16,60(sp)
   45894:	2821883a 	mov	r16,r5
   45898:	2940038f 	ldh	r5,14(r5)
   4589c:	dc401015 	stw	r17,64(sp)
   458a0:	dfc01315 	stw	ra,76(sp)
   458a4:	dcc01215 	stw	r19,72(sp)
   458a8:	dc801115 	stw	r18,68(sp)
   458ac:	2023883a 	mov	r17,r4
   458b0:	28001b16 	blt	r5,zero,45920 <__smakebuf_r+0xa0>
   458b4:	d80d883a 	mov	r6,sp
   458b8:	00498e40 	call	498e4 <_fstat_r>
   458bc:	10001716 	blt	r2,zero,4591c <__smakebuf_r+0x9c>
   458c0:	d8800117 	ldw	r2,4(sp)
   458c4:	00e00014 	movui	r3,32768
   458c8:	10bc000c 	andi	r2,r2,61440
   458cc:	10c03726 	beq	r2,r3,459ac <__smakebuf_r+0x12c>
   458d0:	80c0030b 	ldhu	r3,12(r16)
   458d4:	18c20014 	ori	r3,r3,2048
   458d8:	80c0030d 	sth	r3,12(r16)
   458dc:	00c80004 	movi	r3,8192
   458e0:	10c03c1e 	bne	r2,r3,459d4 <__smakebuf_r+0x154>
   458e4:	8140038f 	ldh	r5,14(r16)
   458e8:	8809883a 	mov	r4,r17
   458ec:	004993c0 	call	4993c <_isatty_r>
   458f0:	10004e26 	beq	r2,zero,45a2c <__smakebuf_r+0x1ac>
   458f4:	8080030b 	ldhu	r2,12(r16)
   458f8:	04c00044 	movi	r19,1
   458fc:	80c010c4 	addi	r3,r16,67
   45900:	14c4b03a 	or	r2,r2,r19
   45904:	8080030d 	sth	r2,12(r16)
   45908:	80c00015 	stw	r3,0(r16)
   4590c:	80c00415 	stw	r3,16(r16)
   45910:	84c00515 	stw	r19,20(r16)
   45914:	04810004 	movi	r18,1024
   45918:	00000706 	br	45938 <__smakebuf_r+0xb8>
   4591c:	8080030b 	ldhu	r2,12(r16)
   45920:	10c0200c 	andi	r3,r2,128
   45924:	18001f1e 	bne	r3,zero,459a4 <__smakebuf_r+0x124>
   45928:	04810004 	movi	r18,1024
   4592c:	10820014 	ori	r2,r2,2048
   45930:	8080030d 	sth	r2,12(r16)
   45934:	0027883a 	mov	r19,zero
   45938:	8809883a 	mov	r4,r17
   4593c:	900b883a 	mov	r5,r18
   45940:	0045a380 	call	45a38 <_malloc_r>
   45944:	10002e26 	beq	r2,zero,45a00 <__smakebuf_r+0x180>
   45948:	80c0030b 	ldhu	r3,12(r16)
   4594c:	01000134 	movhi	r4,4
   45950:	21127504 	addi	r4,r4,18900
   45954:	89000f15 	stw	r4,60(r17)
   45958:	18c02014 	ori	r3,r3,128
   4595c:	80c0030d 	sth	r3,12(r16)
   45960:	80800015 	stw	r2,0(r16)
   45964:	80800415 	stw	r2,16(r16)
   45968:	84800515 	stw	r18,20(r16)
   4596c:	98001c1e 	bne	r19,zero,459e0 <__smakebuf_r+0x160>
   45970:	dfc01317 	ldw	ra,76(sp)
   45974:	dcc01217 	ldw	r19,72(sp)
   45978:	dc801117 	ldw	r18,68(sp)
   4597c:	dc401017 	ldw	r17,64(sp)
   45980:	dc000f17 	ldw	r16,60(sp)
   45984:	dec01404 	addi	sp,sp,80
   45988:	f800283a 	ret
   4598c:	288010c4 	addi	r2,r5,67
   45990:	28800015 	stw	r2,0(r5)
   45994:	28800415 	stw	r2,16(r5)
   45998:	00800044 	movi	r2,1
   4599c:	28800515 	stw	r2,20(r5)
   459a0:	f800283a 	ret
   459a4:	04801004 	movi	r18,64
   459a8:	003fe006 	br	4592c <__alt_data_end+0xfffcfdcc>
   459ac:	81000a17 	ldw	r4,40(r16)
   459b0:	00c00134 	movhi	r3,4
   459b4:	18df8204 	addi	r3,r3,32264
   459b8:	20ffc51e 	bne	r4,r3,458d0 <__alt_data_end+0xfffcfd70>
   459bc:	80c0030b 	ldhu	r3,12(r16)
   459c0:	01010004 	movi	r4,1024
   459c4:	81001315 	stw	r4,76(r16)
   459c8:	1906b03a 	or	r3,r3,r4
   459cc:	80c0030d 	sth	r3,12(r16)
   459d0:	003fc206 	br	458dc <__alt_data_end+0xfffcfd7c>
   459d4:	0027883a 	mov	r19,zero
   459d8:	04810004 	movi	r18,1024
   459dc:	003fd606 	br	45938 <__alt_data_end+0xfffcfdd8>
   459e0:	8140038f 	ldh	r5,14(r16)
   459e4:	8809883a 	mov	r4,r17
   459e8:	004993c0 	call	4993c <_isatty_r>
   459ec:	103fe026 	beq	r2,zero,45970 <__alt_data_end+0xfffcfe10>
   459f0:	8080030b 	ldhu	r2,12(r16)
   459f4:	10800054 	ori	r2,r2,1
   459f8:	8080030d 	sth	r2,12(r16)
   459fc:	003fdc06 	br	45970 <__alt_data_end+0xfffcfe10>
   45a00:	8080030b 	ldhu	r2,12(r16)
   45a04:	10c0800c 	andi	r3,r2,512
   45a08:	183fd91e 	bne	r3,zero,45970 <__alt_data_end+0xfffcfe10>
   45a0c:	10800094 	ori	r2,r2,2
   45a10:	80c010c4 	addi	r3,r16,67
   45a14:	8080030d 	sth	r2,12(r16)
   45a18:	00800044 	movi	r2,1
   45a1c:	80c00015 	stw	r3,0(r16)
   45a20:	80c00415 	stw	r3,16(r16)
   45a24:	80800515 	stw	r2,20(r16)
   45a28:	003fd106 	br	45970 <__alt_data_end+0xfffcfe10>
   45a2c:	04c00044 	movi	r19,1
   45a30:	04810004 	movi	r18,1024
   45a34:	003fc006 	br	45938 <__alt_data_end+0xfffcfdd8>

00045a38 <_malloc_r>:
   45a38:	defff504 	addi	sp,sp,-44
   45a3c:	dc800315 	stw	r18,12(sp)
   45a40:	dfc00a15 	stw	ra,40(sp)
   45a44:	df000915 	stw	fp,36(sp)
   45a48:	ddc00815 	stw	r23,32(sp)
   45a4c:	dd800715 	stw	r22,28(sp)
   45a50:	dd400615 	stw	r21,24(sp)
   45a54:	dd000515 	stw	r20,20(sp)
   45a58:	dcc00415 	stw	r19,16(sp)
   45a5c:	dc400215 	stw	r17,8(sp)
   45a60:	dc000115 	stw	r16,4(sp)
   45a64:	288002c4 	addi	r2,r5,11
   45a68:	00c00584 	movi	r3,22
   45a6c:	2025883a 	mov	r18,r4
   45a70:	18802a2e 	bgeu	r3,r2,45b1c <_malloc_r+0xe4>
   45a74:	047ffe04 	movi	r17,-8
   45a78:	1462703a 	and	r17,r2,r17
   45a7c:	88009e16 	blt	r17,zero,45cf8 <_malloc_r+0x2c0>
   45a80:	89409d36 	bltu	r17,r5,45cf8 <_malloc_r+0x2c0>
   45a84:	004d8fc0 	call	4d8fc <__malloc_lock>
   45a88:	00807dc4 	movi	r2,503
   45a8c:	14402736 	bltu	r2,r17,45b2c <_malloc_r+0xf4>
   45a90:	8806d0fa 	srli	r3,r17,3
   45a94:	04c00174 	movhi	r19,5
   45a98:	9cc38004 	addi	r19,r19,3584
   45a9c:	18c5883a 	add	r2,r3,r3
   45aa0:	1085883a 	add	r2,r2,r2
   45aa4:	1085883a 	add	r2,r2,r2
   45aa8:	9885883a 	add	r2,r19,r2
   45aac:	14000317 	ldw	r16,12(r2)
   45ab0:	80814a26 	beq	r16,r2,45fdc <_malloc_r+0x5a4>
   45ab4:	80c00117 	ldw	r3,4(r16)
   45ab8:	81000317 	ldw	r4,12(r16)
   45abc:	00bfff04 	movi	r2,-4
   45ac0:	1884703a 	and	r2,r3,r2
   45ac4:	81400217 	ldw	r5,8(r16)
   45ac8:	8085883a 	add	r2,r16,r2
   45acc:	10c00117 	ldw	r3,4(r2)
   45ad0:	29000315 	stw	r4,12(r5)
   45ad4:	21400215 	stw	r5,8(r4)
   45ad8:	18c00054 	ori	r3,r3,1
   45adc:	10c00115 	stw	r3,4(r2)
   45ae0:	9009883a 	mov	r4,r18
   45ae4:	004d91c0 	call	4d91c <__malloc_unlock>
   45ae8:	80800204 	addi	r2,r16,8
   45aec:	dfc00a17 	ldw	ra,40(sp)
   45af0:	df000917 	ldw	fp,36(sp)
   45af4:	ddc00817 	ldw	r23,32(sp)
   45af8:	dd800717 	ldw	r22,28(sp)
   45afc:	dd400617 	ldw	r21,24(sp)
   45b00:	dd000517 	ldw	r20,20(sp)
   45b04:	dcc00417 	ldw	r19,16(sp)
   45b08:	dc800317 	ldw	r18,12(sp)
   45b0c:	dc400217 	ldw	r17,8(sp)
   45b10:	dc000117 	ldw	r16,4(sp)
   45b14:	dec00b04 	addi	sp,sp,44
   45b18:	f800283a 	ret
   45b1c:	04400404 	movi	r17,16
   45b20:	89407536 	bltu	r17,r5,45cf8 <_malloc_r+0x2c0>
   45b24:	004d8fc0 	call	4d8fc <__malloc_lock>
   45b28:	003fd906 	br	45a90 <__alt_data_end+0xfffcff30>
   45b2c:	8806d27a 	srli	r3,r17,9
   45b30:	18007526 	beq	r3,zero,45d08 <_malloc_r+0x2d0>
   45b34:	00800104 	movi	r2,4
   45b38:	10c0ef36 	bltu	r2,r3,45ef8 <_malloc_r+0x4c0>
   45b3c:	8806d1ba 	srli	r3,r17,6
   45b40:	19c00e04 	addi	r7,r3,56
   45b44:	39cb883a 	add	r5,r7,r7
   45b48:	04c00174 	movhi	r19,5
   45b4c:	294b883a 	add	r5,r5,r5
   45b50:	9cc38004 	addi	r19,r19,3584
   45b54:	294b883a 	add	r5,r5,r5
   45b58:	994b883a 	add	r5,r19,r5
   45b5c:	2c000317 	ldw	r16,12(r5)
   45b60:	2c000e26 	beq	r5,r16,45b9c <_malloc_r+0x164>
   45b64:	80800117 	ldw	r2,4(r16)
   45b68:	01bfff04 	movi	r6,-4
   45b6c:	010003c4 	movi	r4,15
   45b70:	1184703a 	and	r2,r2,r6
   45b74:	1447c83a 	sub	r3,r2,r17
   45b78:	20c00716 	blt	r4,r3,45b98 <_malloc_r+0x160>
   45b7c:	1800650e 	bge	r3,zero,45d14 <_malloc_r+0x2dc>
   45b80:	84000317 	ldw	r16,12(r16)
   45b84:	2c000526 	beq	r5,r16,45b9c <_malloc_r+0x164>
   45b88:	80800117 	ldw	r2,4(r16)
   45b8c:	1184703a 	and	r2,r2,r6
   45b90:	1447c83a 	sub	r3,r2,r17
   45b94:	20fff90e 	bge	r4,r3,45b7c <__alt_data_end+0xfffd001c>
   45b98:	39ffffc4 	addi	r7,r7,-1
   45b9c:	38c00044 	addi	r3,r7,1
   45ba0:	01800174 	movhi	r6,5
   45ba4:	9c000417 	ldw	r16,16(r19)
   45ba8:	31838004 	addi	r6,r6,3584
   45bac:	32400204 	addi	r9,r6,8
   45bb0:	82410326 	beq	r16,r9,45fc0 <_malloc_r+0x588>
   45bb4:	81000117 	ldw	r4,4(r16)
   45bb8:	00bfff04 	movi	r2,-4
   45bbc:	208e703a 	and	r7,r4,r2
   45bc0:	3c45c83a 	sub	r2,r7,r17
   45bc4:	010003c4 	movi	r4,15
   45bc8:	2080ee16 	blt	r4,r2,45f84 <_malloc_r+0x54c>
   45bcc:	32400515 	stw	r9,20(r6)
   45bd0:	32400415 	stw	r9,16(r6)
   45bd4:	1000510e 	bge	r2,zero,45d1c <_malloc_r+0x2e4>
   45bd8:	00807fc4 	movi	r2,511
   45bdc:	11c0ce36 	bltu	r2,r7,45f18 <_malloc_r+0x4e0>
   45be0:	3808d0fa 	srli	r4,r7,3
   45be4:	01c00044 	movi	r7,1
   45be8:	30800117 	ldw	r2,4(r6)
   45bec:	210b883a 	add	r5,r4,r4
   45bf0:	294b883a 	add	r5,r5,r5
   45bf4:	2009d0ba 	srai	r4,r4,2
   45bf8:	294b883a 	add	r5,r5,r5
   45bfc:	298b883a 	add	r5,r5,r6
   45c00:	2a000217 	ldw	r8,8(r5)
   45c04:	3908983a 	sll	r4,r7,r4
   45c08:	81400315 	stw	r5,12(r16)
   45c0c:	82000215 	stw	r8,8(r16)
   45c10:	2088b03a 	or	r4,r4,r2
   45c14:	2c000215 	stw	r16,8(r5)
   45c18:	31000115 	stw	r4,4(r6)
   45c1c:	44000315 	stw	r16,12(r8)
   45c20:	1805d0ba 	srai	r2,r3,2
   45c24:	01400044 	movi	r5,1
   45c28:	288a983a 	sll	r5,r5,r2
   45c2c:	21404336 	bltu	r4,r5,45d3c <_malloc_r+0x304>
   45c30:	2144703a 	and	r2,r4,r5
   45c34:	10000a1e 	bne	r2,zero,45c60 <_malloc_r+0x228>
   45c38:	00bfff04 	movi	r2,-4
   45c3c:	294b883a 	add	r5,r5,r5
   45c40:	1886703a 	and	r3,r3,r2
   45c44:	2144703a 	and	r2,r4,r5
   45c48:	18c00104 	addi	r3,r3,4
   45c4c:	1000041e 	bne	r2,zero,45c60 <_malloc_r+0x228>
   45c50:	294b883a 	add	r5,r5,r5
   45c54:	2144703a 	and	r2,r4,r5
   45c58:	18c00104 	addi	r3,r3,4
   45c5c:	103ffc26 	beq	r2,zero,45c50 <__alt_data_end+0xfffd00f0>
   45c60:	023fff04 	movi	r8,-4
   45c64:	01c003c4 	movi	r7,15
   45c68:	18c5883a 	add	r2,r3,r3
   45c6c:	1085883a 	add	r2,r2,r2
   45c70:	1085883a 	add	r2,r2,r2
   45c74:	9895883a 	add	r10,r19,r2
   45c78:	52c00304 	addi	r11,r10,12
   45c7c:	1819883a 	mov	r12,r3
   45c80:	5c000017 	ldw	r16,0(r11)
   45c84:	59bffd04 	addi	r6,r11,-12
   45c88:	8180041e 	bne	r16,r6,45c9c <_malloc_r+0x264>
   45c8c:	0000ce06 	br	45fc8 <_malloc_r+0x590>
   45c90:	2000d70e 	bge	r4,zero,45ff0 <_malloc_r+0x5b8>
   45c94:	84000317 	ldw	r16,12(r16)
   45c98:	8180cb26 	beq	r16,r6,45fc8 <_malloc_r+0x590>
   45c9c:	80800117 	ldw	r2,4(r16)
   45ca0:	1204703a 	and	r2,r2,r8
   45ca4:	1449c83a 	sub	r4,r2,r17
   45ca8:	393ff90e 	bge	r7,r4,45c90 <__alt_data_end+0xfffd0130>
   45cac:	80800317 	ldw	r2,12(r16)
   45cb0:	80c00217 	ldw	r3,8(r16)
   45cb4:	89400054 	ori	r5,r17,1
   45cb8:	81400115 	stw	r5,4(r16)
   45cbc:	18800315 	stw	r2,12(r3)
   45cc0:	10c00215 	stw	r3,8(r2)
   45cc4:	8463883a 	add	r17,r16,r17
   45cc8:	9c400515 	stw	r17,20(r19)
   45ccc:	9c400415 	stw	r17,16(r19)
   45cd0:	20800054 	ori	r2,r4,1
   45cd4:	88800115 	stw	r2,4(r17)
   45cd8:	8a400315 	stw	r9,12(r17)
   45cdc:	8a400215 	stw	r9,8(r17)
   45ce0:	8923883a 	add	r17,r17,r4
   45ce4:	89000015 	stw	r4,0(r17)
   45ce8:	9009883a 	mov	r4,r18
   45cec:	004d91c0 	call	4d91c <__malloc_unlock>
   45cf0:	80800204 	addi	r2,r16,8
   45cf4:	003f7d06 	br	45aec <__alt_data_end+0xfffcff8c>
   45cf8:	00800304 	movi	r2,12
   45cfc:	90800015 	stw	r2,0(r18)
   45d00:	0005883a 	mov	r2,zero
   45d04:	003f7906 	br	45aec <__alt_data_end+0xfffcff8c>
   45d08:	01401f84 	movi	r5,126
   45d0c:	01c00fc4 	movi	r7,63
   45d10:	003f8d06 	br	45b48 <__alt_data_end+0xfffcffe8>
   45d14:	81000317 	ldw	r4,12(r16)
   45d18:	003f6a06 	br	45ac4 <__alt_data_end+0xfffcff64>
   45d1c:	81c5883a 	add	r2,r16,r7
   45d20:	10c00117 	ldw	r3,4(r2)
   45d24:	9009883a 	mov	r4,r18
   45d28:	18c00054 	ori	r3,r3,1
   45d2c:	10c00115 	stw	r3,4(r2)
   45d30:	004d91c0 	call	4d91c <__malloc_unlock>
   45d34:	80800204 	addi	r2,r16,8
   45d38:	003f6c06 	br	45aec <__alt_data_end+0xfffcff8c>
   45d3c:	9c000217 	ldw	r16,8(r19)
   45d40:	00bfff04 	movi	r2,-4
   45d44:	85800117 	ldw	r22,4(r16)
   45d48:	b0ac703a 	and	r22,r22,r2
   45d4c:	b4400336 	bltu	r22,r17,45d5c <_malloc_r+0x324>
   45d50:	b445c83a 	sub	r2,r22,r17
   45d54:	00c003c4 	movi	r3,15
   45d58:	18805d16 	blt	r3,r2,45ed0 <_malloc_r+0x498>
   45d5c:	05c00174 	movhi	r23,5
   45d60:	00800174 	movhi	r2,5
   45d64:	bdc93804 	addi	r23,r23,9440
   45d68:	10903604 	addi	r2,r2,16600
   45d6c:	15400017 	ldw	r21,0(r2)
   45d70:	b9000017 	ldw	r4,0(r23)
   45d74:	00ffffc4 	movi	r3,-1
   45d78:	858d883a 	add	r6,r16,r22
   45d7c:	8d6b883a 	add	r21,r17,r21
   45d80:	20c0e426 	beq	r4,r3,46114 <_malloc_r+0x6dc>
   45d84:	ad4403c4 	addi	r21,r21,4111
   45d88:	00fc0004 	movi	r3,-4096
   45d8c:	a8ea703a 	and	r21,r21,r3
   45d90:	9009883a 	mov	r4,r18
   45d94:	a80b883a 	mov	r5,r21
   45d98:	d9800015 	stw	r6,0(sp)
   45d9c:	0047cdc0 	call	47cdc <_sbrk_r>
   45da0:	00ffffc4 	movi	r3,-1
   45da4:	1029883a 	mov	r20,r2
   45da8:	d9800017 	ldw	r6,0(sp)
   45dac:	10c0a426 	beq	r2,r3,46040 <_malloc_r+0x608>
   45db0:	1180a236 	bltu	r2,r6,4603c <_malloc_r+0x604>
   45db4:	07000174 	movhi	fp,5
   45db8:	e7103f04 	addi	fp,fp,16636
   45dbc:	e0c00017 	ldw	r3,0(fp)
   45dc0:	a8c7883a 	add	r3,r21,r3
   45dc4:	e0c00015 	stw	r3,0(fp)
   45dc8:	3500da26 	beq	r6,r20,46134 <_malloc_r+0x6fc>
   45dcc:	b9000017 	ldw	r4,0(r23)
   45dd0:	00bfffc4 	movi	r2,-1
   45dd4:	2080e426 	beq	r4,r2,46168 <_malloc_r+0x730>
   45dd8:	a185c83a 	sub	r2,r20,r6
   45ddc:	1885883a 	add	r2,r3,r2
   45de0:	e0800015 	stw	r2,0(fp)
   45de4:	a0c001cc 	andi	r3,r20,7
   45de8:	1800b526 	beq	r3,zero,460c0 <_malloc_r+0x688>
   45dec:	a0e9c83a 	sub	r20,r20,r3
   45df0:	00840204 	movi	r2,4104
   45df4:	a5000204 	addi	r20,r20,8
   45df8:	10c7c83a 	sub	r3,r2,r3
   45dfc:	a545883a 	add	r2,r20,r21
   45e00:	1083ffcc 	andi	r2,r2,4095
   45e04:	18abc83a 	sub	r21,r3,r2
   45e08:	9009883a 	mov	r4,r18
   45e0c:	a80b883a 	mov	r5,r21
   45e10:	0047cdc0 	call	47cdc <_sbrk_r>
   45e14:	00ffffc4 	movi	r3,-1
   45e18:	10c0d026 	beq	r2,r3,4615c <_malloc_r+0x724>
   45e1c:	1507c83a 	sub	r3,r2,r20
   45e20:	a8c7883a 	add	r3,r21,r3
   45e24:	18c00054 	ori	r3,r3,1
   45e28:	e0800017 	ldw	r2,0(fp)
   45e2c:	9d000215 	stw	r20,8(r19)
   45e30:	a0c00115 	stw	r3,4(r20)
   45e34:	a887883a 	add	r3,r21,r2
   45e38:	e0c00015 	stw	r3,0(fp)
   45e3c:	84c00e26 	beq	r16,r19,45e78 <_malloc_r+0x440>
   45e40:	018003c4 	movi	r6,15
   45e44:	3580a02e 	bgeu	r6,r22,460c8 <_malloc_r+0x690>
   45e48:	81400117 	ldw	r5,4(r16)
   45e4c:	013ffe04 	movi	r4,-8
   45e50:	b0bffd04 	addi	r2,r22,-12
   45e54:	1104703a 	and	r2,r2,r4
   45e58:	2900004c 	andi	r4,r5,1
   45e5c:	1108b03a 	or	r4,r2,r4
   45e60:	81000115 	stw	r4,4(r16)
   45e64:	01400144 	movi	r5,5
   45e68:	8089883a 	add	r4,r16,r2
   45e6c:	21400115 	stw	r5,4(r4)
   45e70:	21400215 	stw	r5,8(r4)
   45e74:	3080c036 	bltu	r6,r2,46178 <_malloc_r+0x740>
   45e78:	00800174 	movhi	r2,5
   45e7c:	10903504 	addi	r2,r2,16596
   45e80:	11000017 	ldw	r4,0(r2)
   45e84:	20c0012e 	bgeu	r4,r3,45e8c <_malloc_r+0x454>
   45e88:	10c00015 	stw	r3,0(r2)
   45e8c:	00800174 	movhi	r2,5
   45e90:	10903404 	addi	r2,r2,16592
   45e94:	11000017 	ldw	r4,0(r2)
   45e98:	9c000217 	ldw	r16,8(r19)
   45e9c:	20c0012e 	bgeu	r4,r3,45ea4 <_malloc_r+0x46c>
   45ea0:	10c00015 	stw	r3,0(r2)
   45ea4:	80c00117 	ldw	r3,4(r16)
   45ea8:	00bfff04 	movi	r2,-4
   45eac:	1886703a 	and	r3,r3,r2
   45eb0:	1c45c83a 	sub	r2,r3,r17
   45eb4:	1c400236 	bltu	r3,r17,45ec0 <_malloc_r+0x488>
   45eb8:	00c003c4 	movi	r3,15
   45ebc:	18800416 	blt	r3,r2,45ed0 <_malloc_r+0x498>
   45ec0:	9009883a 	mov	r4,r18
   45ec4:	004d91c0 	call	4d91c <__malloc_unlock>
   45ec8:	0005883a 	mov	r2,zero
   45ecc:	003f0706 	br	45aec <__alt_data_end+0xfffcff8c>
   45ed0:	88c00054 	ori	r3,r17,1
   45ed4:	80c00115 	stw	r3,4(r16)
   45ed8:	8463883a 	add	r17,r16,r17
   45edc:	10800054 	ori	r2,r2,1
   45ee0:	9c400215 	stw	r17,8(r19)
   45ee4:	88800115 	stw	r2,4(r17)
   45ee8:	9009883a 	mov	r4,r18
   45eec:	004d91c0 	call	4d91c <__malloc_unlock>
   45ef0:	80800204 	addi	r2,r16,8
   45ef4:	003efd06 	br	45aec <__alt_data_end+0xfffcff8c>
   45ef8:	00800504 	movi	r2,20
   45efc:	10c0482e 	bgeu	r2,r3,46020 <_malloc_r+0x5e8>
   45f00:	00801504 	movi	r2,84
   45f04:	10c06836 	bltu	r2,r3,460a8 <_malloc_r+0x670>
   45f08:	8806d33a 	srli	r3,r17,12
   45f0c:	19c01b84 	addi	r7,r3,110
   45f10:	39cb883a 	add	r5,r7,r7
   45f14:	003f0c06 	br	45b48 <__alt_data_end+0xfffcffe8>
   45f18:	3804d27a 	srli	r2,r7,9
   45f1c:	01000104 	movi	r4,4
   45f20:	2080422e 	bgeu	r4,r2,4602c <_malloc_r+0x5f4>
   45f24:	01000504 	movi	r4,20
   45f28:	20807c36 	bltu	r4,r2,4611c <_malloc_r+0x6e4>
   45f2c:	110016c4 	addi	r4,r2,91
   45f30:	210b883a 	add	r5,r4,r4
   45f34:	294b883a 	add	r5,r5,r5
   45f38:	294b883a 	add	r5,r5,r5
   45f3c:	994b883a 	add	r5,r19,r5
   45f40:	28800217 	ldw	r2,8(r5)
   45f44:	02000174 	movhi	r8,5
   45f48:	42038004 	addi	r8,r8,3584
   45f4c:	11406326 	beq	r2,r5,460dc <_malloc_r+0x6a4>
   45f50:	01bfff04 	movi	r6,-4
   45f54:	11000117 	ldw	r4,4(r2)
   45f58:	2188703a 	and	r4,r4,r6
   45f5c:	3900022e 	bgeu	r7,r4,45f68 <_malloc_r+0x530>
   45f60:	10800217 	ldw	r2,8(r2)
   45f64:	28bffb1e 	bne	r5,r2,45f54 <__alt_data_end+0xfffd03f4>
   45f68:	11800317 	ldw	r6,12(r2)
   45f6c:	99000117 	ldw	r4,4(r19)
   45f70:	81800315 	stw	r6,12(r16)
   45f74:	80800215 	stw	r2,8(r16)
   45f78:	34000215 	stw	r16,8(r6)
   45f7c:	14000315 	stw	r16,12(r2)
   45f80:	003f2706 	br	45c20 <__alt_data_end+0xfffd00c0>
   45f84:	88c00054 	ori	r3,r17,1
   45f88:	80c00115 	stw	r3,4(r16)
   45f8c:	8463883a 	add	r17,r16,r17
   45f90:	34400515 	stw	r17,20(r6)
   45f94:	34400415 	stw	r17,16(r6)
   45f98:	10c00054 	ori	r3,r2,1
   45f9c:	8a400315 	stw	r9,12(r17)
   45fa0:	8a400215 	stw	r9,8(r17)
   45fa4:	88c00115 	stw	r3,4(r17)
   45fa8:	88a3883a 	add	r17,r17,r2
   45fac:	88800015 	stw	r2,0(r17)
   45fb0:	9009883a 	mov	r4,r18
   45fb4:	004d91c0 	call	4d91c <__malloc_unlock>
   45fb8:	80800204 	addi	r2,r16,8
   45fbc:	003ecb06 	br	45aec <__alt_data_end+0xfffcff8c>
   45fc0:	31000117 	ldw	r4,4(r6)
   45fc4:	003f1606 	br	45c20 <__alt_data_end+0xfffd00c0>
   45fc8:	63000044 	addi	r12,r12,1
   45fcc:	608000cc 	andi	r2,r12,3
   45fd0:	5ac00204 	addi	r11,r11,8
   45fd4:	103f2a1e 	bne	r2,zero,45c80 <__alt_data_end+0xfffd0120>
   45fd8:	00002106 	br	46060 <_malloc_r+0x628>
   45fdc:	80800204 	addi	r2,r16,8
   45fe0:	84000517 	ldw	r16,20(r16)
   45fe4:	143eb31e 	bne	r2,r16,45ab4 <__alt_data_end+0xfffcff54>
   45fe8:	18c00084 	addi	r3,r3,2
   45fec:	003eec06 	br	45ba0 <__alt_data_end+0xfffd0040>
   45ff0:	8085883a 	add	r2,r16,r2
   45ff4:	10c00117 	ldw	r3,4(r2)
   45ff8:	81000317 	ldw	r4,12(r16)
   45ffc:	81400217 	ldw	r5,8(r16)
   46000:	18c00054 	ori	r3,r3,1
   46004:	10c00115 	stw	r3,4(r2)
   46008:	29000315 	stw	r4,12(r5)
   4600c:	21400215 	stw	r5,8(r4)
   46010:	9009883a 	mov	r4,r18
   46014:	004d91c0 	call	4d91c <__malloc_unlock>
   46018:	80800204 	addi	r2,r16,8
   4601c:	003eb306 	br	45aec <__alt_data_end+0xfffcff8c>
   46020:	19c016c4 	addi	r7,r3,91
   46024:	39cb883a 	add	r5,r7,r7
   46028:	003ec706 	br	45b48 <__alt_data_end+0xfffcffe8>
   4602c:	3804d1ba 	srli	r2,r7,6
   46030:	11000e04 	addi	r4,r2,56
   46034:	210b883a 	add	r5,r4,r4
   46038:	003fbe06 	br	45f34 <__alt_data_end+0xfffd03d4>
   4603c:	84ff5d26 	beq	r16,r19,45db4 <__alt_data_end+0xfffd0254>
   46040:	9c000217 	ldw	r16,8(r19)
   46044:	00bfff04 	movi	r2,-4
   46048:	80c00117 	ldw	r3,4(r16)
   4604c:	1886703a 	and	r3,r3,r2
   46050:	003f9706 	br	45eb0 <__alt_data_end+0xfffd0350>
   46054:	52800017 	ldw	r10,0(r10)
   46058:	18ffffc4 	addi	r3,r3,-1
   4605c:	50805c1e 	bne	r10,r2,461d0 <_malloc_r+0x798>
   46060:	190000cc 	andi	r4,r3,3
   46064:	50bffe04 	addi	r2,r10,-8
   46068:	203ffa1e 	bne	r4,zero,46054 <__alt_data_end+0xfffd04f4>
   4606c:	98800117 	ldw	r2,4(r19)
   46070:	0146303a 	nor	r3,zero,r5
   46074:	1884703a 	and	r2,r3,r2
   46078:	98800115 	stw	r2,4(r19)
   4607c:	294b883a 	add	r5,r5,r5
   46080:	117f2e36 	bltu	r2,r5,45d3c <__alt_data_end+0xfffd01dc>
   46084:	283f2d26 	beq	r5,zero,45d3c <__alt_data_end+0xfffd01dc>
   46088:	1146703a 	and	r3,r2,r5
   4608c:	1800521e 	bne	r3,zero,461d8 <_malloc_r+0x7a0>
   46090:	6007883a 	mov	r3,r12
   46094:	294b883a 	add	r5,r5,r5
   46098:	1148703a 	and	r4,r2,r5
   4609c:	18c00104 	addi	r3,r3,4
   460a0:	203ffc26 	beq	r4,zero,46094 <__alt_data_end+0xfffd0534>
   460a4:	003ef006 	br	45c68 <__alt_data_end+0xfffd0108>
   460a8:	00805504 	movi	r2,340
   460ac:	10c01336 	bltu	r2,r3,460fc <_malloc_r+0x6c4>
   460b0:	8806d3fa 	srli	r3,r17,15
   460b4:	19c01dc4 	addi	r7,r3,119
   460b8:	39cb883a 	add	r5,r7,r7
   460bc:	003ea206 	br	45b48 <__alt_data_end+0xfffcffe8>
   460c0:	00c40004 	movi	r3,4096
   460c4:	003f4d06 	br	45dfc <__alt_data_end+0xfffd029c>
   460c8:	00800044 	movi	r2,1
   460cc:	a0800115 	stw	r2,4(r20)
   460d0:	a021883a 	mov	r16,r20
   460d4:	0007883a 	mov	r3,zero
   460d8:	003f7506 	br	45eb0 <__alt_data_end+0xfffd0350>
   460dc:	200bd0ba 	srai	r5,r4,2
   460e0:	01800044 	movi	r6,1
   460e4:	41000117 	ldw	r4,4(r8)
   460e8:	314a983a 	sll	r5,r6,r5
   460ec:	100d883a 	mov	r6,r2
   460f0:	2908b03a 	or	r4,r5,r4
   460f4:	41000115 	stw	r4,4(r8)
   460f8:	003f9d06 	br	45f70 <__alt_data_end+0xfffd0410>
   460fc:	00815504 	movi	r2,1364
   46100:	10c01336 	bltu	r2,r3,46150 <_malloc_r+0x718>
   46104:	8806d4ba 	srli	r3,r17,18
   46108:	19c01f04 	addi	r7,r3,124
   4610c:	39cb883a 	add	r5,r7,r7
   46110:	003e8d06 	br	45b48 <__alt_data_end+0xfffcffe8>
   46114:	ad400404 	addi	r21,r21,16
   46118:	003f1d06 	br	45d90 <__alt_data_end+0xfffd0230>
   4611c:	01001504 	movi	r4,84
   46120:	20801c36 	bltu	r4,r2,46194 <_malloc_r+0x75c>
   46124:	3804d33a 	srli	r2,r7,12
   46128:	11001b84 	addi	r4,r2,110
   4612c:	210b883a 	add	r5,r4,r4
   46130:	003f8006 	br	45f34 <__alt_data_end+0xfffd03d4>
   46134:	3083ffcc 	andi	r2,r6,4095
   46138:	103f241e 	bne	r2,zero,45dcc <__alt_data_end+0xfffd026c>
   4613c:	99000217 	ldw	r4,8(r19)
   46140:	ad85883a 	add	r2,r21,r22
   46144:	10800054 	ori	r2,r2,1
   46148:	20800115 	stw	r2,4(r4)
   4614c:	003f4a06 	br	45e78 <__alt_data_end+0xfffd0318>
   46150:	01403f04 	movi	r5,252
   46154:	01c01f84 	movi	r7,126
   46158:	003e7b06 	br	45b48 <__alt_data_end+0xfffcffe8>
   4615c:	00c00044 	movi	r3,1
   46160:	002b883a 	mov	r21,zero
   46164:	003f3006 	br	45e28 <__alt_data_end+0xfffd02c8>
   46168:	00800174 	movhi	r2,5
   4616c:	10893804 	addi	r2,r2,9440
   46170:	15000015 	stw	r20,0(r2)
   46174:	003f1b06 	br	45de4 <__alt_data_end+0xfffd0284>
   46178:	9009883a 	mov	r4,r18
   4617c:	81400204 	addi	r5,r16,8
   46180:	0044e9c0 	call	44e9c <_free_r>
   46184:	00800174 	movhi	r2,5
   46188:	10903f04 	addi	r2,r2,16636
   4618c:	10c00017 	ldw	r3,0(r2)
   46190:	003f3906 	br	45e78 <__alt_data_end+0xfffd0318>
   46194:	01005504 	movi	r4,340
   46198:	20800436 	bltu	r4,r2,461ac <_malloc_r+0x774>
   4619c:	3804d3fa 	srli	r2,r7,15
   461a0:	11001dc4 	addi	r4,r2,119
   461a4:	210b883a 	add	r5,r4,r4
   461a8:	003f6206 	br	45f34 <__alt_data_end+0xfffd03d4>
   461ac:	01015504 	movi	r4,1364
   461b0:	20800436 	bltu	r4,r2,461c4 <_malloc_r+0x78c>
   461b4:	3804d4ba 	srli	r2,r7,18
   461b8:	11001f04 	addi	r4,r2,124
   461bc:	210b883a 	add	r5,r4,r4
   461c0:	003f5c06 	br	45f34 <__alt_data_end+0xfffd03d4>
   461c4:	01403f04 	movi	r5,252
   461c8:	01001f84 	movi	r4,126
   461cc:	003f5906 	br	45f34 <__alt_data_end+0xfffd03d4>
   461d0:	98800117 	ldw	r2,4(r19)
   461d4:	003fa906 	br	4607c <__alt_data_end+0xfffd051c>
   461d8:	6007883a 	mov	r3,r12
   461dc:	003ea206 	br	45c68 <__alt_data_end+0xfffd0108>

000461e0 <memchr>:
   461e0:	208000cc 	andi	r2,r4,3
   461e4:	280f883a 	mov	r7,r5
   461e8:	10003526 	beq	r2,zero,462c0 <memchr+0xe0>
   461ec:	30bfffc4 	addi	r2,r6,-1
   461f0:	30001b26 	beq	r6,zero,46260 <memchr+0x80>
   461f4:	21800003 	ldbu	r6,0(r4)
   461f8:	28c03fcc 	andi	r3,r5,255
   461fc:	30c01a26 	beq	r6,r3,46268 <memchr+0x88>
   46200:	180d883a 	mov	r6,r3
   46204:	00000406 	br	46218 <memchr+0x38>
   46208:	10001526 	beq	r2,zero,46260 <memchr+0x80>
   4620c:	20c00003 	ldbu	r3,0(r4)
   46210:	10bfffc4 	addi	r2,r2,-1
   46214:	19801426 	beq	r3,r6,46268 <memchr+0x88>
   46218:	21000044 	addi	r4,r4,1
   4621c:	20c000cc 	andi	r3,r4,3
   46220:	183ff91e 	bne	r3,zero,46208 <__alt_data_end+0xfffd06a8>
   46224:	024000c4 	movi	r9,3
   46228:	48801136 	bltu	r9,r2,46270 <memchr+0x90>
   4622c:	10000c26 	beq	r2,zero,46260 <memchr+0x80>
   46230:	20c00003 	ldbu	r3,0(r4)
   46234:	29403fcc 	andi	r5,r5,255
   46238:	19400b26 	beq	r3,r5,46268 <memchr+0x88>
   4623c:	20c00044 	addi	r3,r4,1
   46240:	2085883a 	add	r2,r4,r2
   46244:	39803fcc 	andi	r6,r7,255
   46248:	00000306 	br	46258 <memchr+0x78>
   4624c:	18c00044 	addi	r3,r3,1
   46250:	197fffc3 	ldbu	r5,-1(r3)
   46254:	29800426 	beq	r5,r6,46268 <memchr+0x88>
   46258:	1809883a 	mov	r4,r3
   4625c:	18bffb1e 	bne	r3,r2,4624c <__alt_data_end+0xfffd06ec>
   46260:	0005883a 	mov	r2,zero
   46264:	f800283a 	ret
   46268:	2005883a 	mov	r2,r4
   4626c:	f800283a 	ret
   46270:	28c03fcc 	andi	r3,r5,255
   46274:	1810923a 	slli	r8,r3,8
   46278:	02ffbff4 	movhi	r11,65279
   4627c:	02a02074 	movhi	r10,32897
   46280:	40c6b03a 	or	r3,r8,r3
   46284:	1810943a 	slli	r8,r3,16
   46288:	5affbfc4 	addi	r11,r11,-257
   4628c:	52a02004 	addi	r10,r10,-32640
   46290:	40d0b03a 	or	r8,r8,r3
   46294:	20c00017 	ldw	r3,0(r4)
   46298:	40c6f03a 	xor	r3,r8,r3
   4629c:	1acd883a 	add	r6,r3,r11
   462a0:	00c6303a 	nor	r3,zero,r3
   462a4:	30c6703a 	and	r3,r6,r3
   462a8:	1a86703a 	and	r3,r3,r10
   462ac:	183fdf1e 	bne	r3,zero,4622c <__alt_data_end+0xfffd06cc>
   462b0:	10bfff04 	addi	r2,r2,-4
   462b4:	21000104 	addi	r4,r4,4
   462b8:	48bff636 	bltu	r9,r2,46294 <__alt_data_end+0xfffd0734>
   462bc:	003fdb06 	br	4622c <__alt_data_end+0xfffd06cc>
   462c0:	3005883a 	mov	r2,r6
   462c4:	003fd706 	br	46224 <__alt_data_end+0xfffd06c4>

000462c8 <memcpy>:
   462c8:	deffff04 	addi	sp,sp,-4
   462cc:	dc000015 	stw	r16,0(sp)
   462d0:	00c003c4 	movi	r3,15
   462d4:	2005883a 	mov	r2,r4
   462d8:	1980432e 	bgeu	r3,r6,463e8 <memcpy+0x120>
   462dc:	2146b03a 	or	r3,r4,r5
   462e0:	18c000cc 	andi	r3,r3,3
   462e4:	1800421e 	bne	r3,zero,463f0 <memcpy+0x128>
   462e8:	343ffc04 	addi	r16,r6,-16
   462ec:	8020d13a 	srli	r16,r16,4
   462f0:	28c00104 	addi	r3,r5,4
   462f4:	23400104 	addi	r13,r4,4
   462f8:	801e913a 	slli	r15,r16,4
   462fc:	2b000204 	addi	r12,r5,8
   46300:	22c00204 	addi	r11,r4,8
   46304:	7bc00504 	addi	r15,r15,20
   46308:	2a800304 	addi	r10,r5,12
   4630c:	22400304 	addi	r9,r4,12
   46310:	2bdf883a 	add	r15,r5,r15
   46314:	2811883a 	mov	r8,r5
   46318:	200f883a 	mov	r7,r4
   4631c:	41000017 	ldw	r4,0(r8)
   46320:	39c00404 	addi	r7,r7,16
   46324:	18c00404 	addi	r3,r3,16
   46328:	393ffc15 	stw	r4,-16(r7)
   4632c:	1bbffc17 	ldw	r14,-16(r3)
   46330:	6b400404 	addi	r13,r13,16
   46334:	5ac00404 	addi	r11,r11,16
   46338:	6bbffc15 	stw	r14,-16(r13)
   4633c:	63800017 	ldw	r14,0(r12)
   46340:	4a400404 	addi	r9,r9,16
   46344:	42000404 	addi	r8,r8,16
   46348:	5bbffc15 	stw	r14,-16(r11)
   4634c:	53800017 	ldw	r14,0(r10)
   46350:	63000404 	addi	r12,r12,16
   46354:	52800404 	addi	r10,r10,16
   46358:	4bbffc15 	stw	r14,-16(r9)
   4635c:	1bffef1e 	bne	r3,r15,4631c <__alt_data_end+0xfffd07bc>
   46360:	81c00044 	addi	r7,r16,1
   46364:	380e913a 	slli	r7,r7,4
   46368:	310003cc 	andi	r4,r6,15
   4636c:	02c000c4 	movi	r11,3
   46370:	11c7883a 	add	r3,r2,r7
   46374:	29cb883a 	add	r5,r5,r7
   46378:	59001f2e 	bgeu	r11,r4,463f8 <memcpy+0x130>
   4637c:	1813883a 	mov	r9,r3
   46380:	2811883a 	mov	r8,r5
   46384:	200f883a 	mov	r7,r4
   46388:	42800017 	ldw	r10,0(r8)
   4638c:	4a400104 	addi	r9,r9,4
   46390:	39ffff04 	addi	r7,r7,-4
   46394:	4abfff15 	stw	r10,-4(r9)
   46398:	42000104 	addi	r8,r8,4
   4639c:	59fffa36 	bltu	r11,r7,46388 <__alt_data_end+0xfffd0828>
   463a0:	213fff04 	addi	r4,r4,-4
   463a4:	2008d0ba 	srli	r4,r4,2
   463a8:	318000cc 	andi	r6,r6,3
   463ac:	21000044 	addi	r4,r4,1
   463b0:	2109883a 	add	r4,r4,r4
   463b4:	2109883a 	add	r4,r4,r4
   463b8:	1907883a 	add	r3,r3,r4
   463bc:	290b883a 	add	r5,r5,r4
   463c0:	30000626 	beq	r6,zero,463dc <memcpy+0x114>
   463c4:	198d883a 	add	r6,r3,r6
   463c8:	29c00003 	ldbu	r7,0(r5)
   463cc:	18c00044 	addi	r3,r3,1
   463d0:	29400044 	addi	r5,r5,1
   463d4:	19ffffc5 	stb	r7,-1(r3)
   463d8:	19bffb1e 	bne	r3,r6,463c8 <__alt_data_end+0xfffd0868>
   463dc:	dc000017 	ldw	r16,0(sp)
   463e0:	dec00104 	addi	sp,sp,4
   463e4:	f800283a 	ret
   463e8:	2007883a 	mov	r3,r4
   463ec:	003ff406 	br	463c0 <__alt_data_end+0xfffd0860>
   463f0:	2007883a 	mov	r3,r4
   463f4:	003ff306 	br	463c4 <__alt_data_end+0xfffd0864>
   463f8:	200d883a 	mov	r6,r4
   463fc:	003ff006 	br	463c0 <__alt_data_end+0xfffd0860>

00046400 <memmove>:
   46400:	2005883a 	mov	r2,r4
   46404:	29000b2e 	bgeu	r5,r4,46434 <memmove+0x34>
   46408:	298f883a 	add	r7,r5,r6
   4640c:	21c0092e 	bgeu	r4,r7,46434 <memmove+0x34>
   46410:	2187883a 	add	r3,r4,r6
   46414:	198bc83a 	sub	r5,r3,r6
   46418:	30004b26 	beq	r6,zero,46548 <memmove+0x148>
   4641c:	39ffffc4 	addi	r7,r7,-1
   46420:	39000003 	ldbu	r4,0(r7)
   46424:	18ffffc4 	addi	r3,r3,-1
   46428:	19000005 	stb	r4,0(r3)
   4642c:	197ffb1e 	bne	r3,r5,4641c <__alt_data_end+0xfffd08bc>
   46430:	f800283a 	ret
   46434:	00c003c4 	movi	r3,15
   46438:	1980412e 	bgeu	r3,r6,46540 <memmove+0x140>
   4643c:	1146b03a 	or	r3,r2,r5
   46440:	18c000cc 	andi	r3,r3,3
   46444:	1800411e 	bne	r3,zero,4654c <memmove+0x14c>
   46448:	33fffc04 	addi	r15,r6,-16
   4644c:	781ed13a 	srli	r15,r15,4
   46450:	28c00104 	addi	r3,r5,4
   46454:	13400104 	addi	r13,r2,4
   46458:	781c913a 	slli	r14,r15,4
   4645c:	2b000204 	addi	r12,r5,8
   46460:	12c00204 	addi	r11,r2,8
   46464:	73800504 	addi	r14,r14,20
   46468:	2a800304 	addi	r10,r5,12
   4646c:	12400304 	addi	r9,r2,12
   46470:	2b9d883a 	add	r14,r5,r14
   46474:	2811883a 	mov	r8,r5
   46478:	100f883a 	mov	r7,r2
   4647c:	41000017 	ldw	r4,0(r8)
   46480:	39c00404 	addi	r7,r7,16
   46484:	18c00404 	addi	r3,r3,16
   46488:	393ffc15 	stw	r4,-16(r7)
   4648c:	193ffc17 	ldw	r4,-16(r3)
   46490:	6b400404 	addi	r13,r13,16
   46494:	5ac00404 	addi	r11,r11,16
   46498:	693ffc15 	stw	r4,-16(r13)
   4649c:	61000017 	ldw	r4,0(r12)
   464a0:	4a400404 	addi	r9,r9,16
   464a4:	42000404 	addi	r8,r8,16
   464a8:	593ffc15 	stw	r4,-16(r11)
   464ac:	51000017 	ldw	r4,0(r10)
   464b0:	63000404 	addi	r12,r12,16
   464b4:	52800404 	addi	r10,r10,16
   464b8:	493ffc15 	stw	r4,-16(r9)
   464bc:	1bbfef1e 	bne	r3,r14,4647c <__alt_data_end+0xfffd091c>
   464c0:	79000044 	addi	r4,r15,1
   464c4:	2008913a 	slli	r4,r4,4
   464c8:	328003cc 	andi	r10,r6,15
   464cc:	02c000c4 	movi	r11,3
   464d0:	1107883a 	add	r3,r2,r4
   464d4:	290b883a 	add	r5,r5,r4
   464d8:	5a801e2e 	bgeu	r11,r10,46554 <memmove+0x154>
   464dc:	1813883a 	mov	r9,r3
   464e0:	2811883a 	mov	r8,r5
   464e4:	500f883a 	mov	r7,r10
   464e8:	41000017 	ldw	r4,0(r8)
   464ec:	4a400104 	addi	r9,r9,4
   464f0:	39ffff04 	addi	r7,r7,-4
   464f4:	493fff15 	stw	r4,-4(r9)
   464f8:	42000104 	addi	r8,r8,4
   464fc:	59fffa36 	bltu	r11,r7,464e8 <__alt_data_end+0xfffd0988>
   46500:	513fff04 	addi	r4,r10,-4
   46504:	2008d0ba 	srli	r4,r4,2
   46508:	318000cc 	andi	r6,r6,3
   4650c:	21000044 	addi	r4,r4,1
   46510:	2109883a 	add	r4,r4,r4
   46514:	2109883a 	add	r4,r4,r4
   46518:	1907883a 	add	r3,r3,r4
   4651c:	290b883a 	add	r5,r5,r4
   46520:	30000926 	beq	r6,zero,46548 <memmove+0x148>
   46524:	198d883a 	add	r6,r3,r6
   46528:	29c00003 	ldbu	r7,0(r5)
   4652c:	18c00044 	addi	r3,r3,1
   46530:	29400044 	addi	r5,r5,1
   46534:	19ffffc5 	stb	r7,-1(r3)
   46538:	19bffb1e 	bne	r3,r6,46528 <__alt_data_end+0xfffd09c8>
   4653c:	f800283a 	ret
   46540:	1007883a 	mov	r3,r2
   46544:	003ff606 	br	46520 <__alt_data_end+0xfffd09c0>
   46548:	f800283a 	ret
   4654c:	1007883a 	mov	r3,r2
   46550:	003ff406 	br	46524 <__alt_data_end+0xfffd09c4>
   46554:	500d883a 	mov	r6,r10
   46558:	003ff106 	br	46520 <__alt_data_end+0xfffd09c0>

0004655c <memset>:
   4655c:	20c000cc 	andi	r3,r4,3
   46560:	2005883a 	mov	r2,r4
   46564:	18004326 	beq	r3,zero,46674 <memset+0x118>
   46568:	31ffffc4 	addi	r7,r6,-1
   4656c:	30004026 	beq	r6,zero,46670 <memset+0x114>
   46570:	2813883a 	mov	r9,r5
   46574:	200d883a 	mov	r6,r4
   46578:	2007883a 	mov	r3,r4
   4657c:	00000406 	br	46590 <memset+0x34>
   46580:	3a3fffc4 	addi	r8,r7,-1
   46584:	31800044 	addi	r6,r6,1
   46588:	38003926 	beq	r7,zero,46670 <memset+0x114>
   4658c:	400f883a 	mov	r7,r8
   46590:	18c00044 	addi	r3,r3,1
   46594:	32400005 	stb	r9,0(r6)
   46598:	1a0000cc 	andi	r8,r3,3
   4659c:	403ff81e 	bne	r8,zero,46580 <__alt_data_end+0xfffd0a20>
   465a0:	010000c4 	movi	r4,3
   465a4:	21c02d2e 	bgeu	r4,r7,4665c <memset+0x100>
   465a8:	29803fcc 	andi	r6,r5,255
   465ac:	3008923a 	slli	r4,r6,8
   465b0:	218cb03a 	or	r6,r4,r6
   465b4:	3008943a 	slli	r4,r6,16
   465b8:	218cb03a 	or	r6,r4,r6
   465bc:	010003c4 	movi	r4,15
   465c0:	21c0182e 	bgeu	r4,r7,46624 <memset+0xc8>
   465c4:	3b3ffc04 	addi	r12,r7,-16
   465c8:	6018d13a 	srli	r12,r12,4
   465cc:	1a000104 	addi	r8,r3,4
   465d0:	1ac00204 	addi	r11,r3,8
   465d4:	6008913a 	slli	r4,r12,4
   465d8:	1a800304 	addi	r10,r3,12
   465dc:	1813883a 	mov	r9,r3
   465e0:	21000504 	addi	r4,r4,20
   465e4:	1909883a 	add	r4,r3,r4
   465e8:	49800015 	stw	r6,0(r9)
   465ec:	41800015 	stw	r6,0(r8)
   465f0:	59800015 	stw	r6,0(r11)
   465f4:	51800015 	stw	r6,0(r10)
   465f8:	42000404 	addi	r8,r8,16
   465fc:	4a400404 	addi	r9,r9,16
   46600:	5ac00404 	addi	r11,r11,16
   46604:	52800404 	addi	r10,r10,16
   46608:	413ff71e 	bne	r8,r4,465e8 <__alt_data_end+0xfffd0a88>
   4660c:	63000044 	addi	r12,r12,1
   46610:	6018913a 	slli	r12,r12,4
   46614:	39c003cc 	andi	r7,r7,15
   46618:	010000c4 	movi	r4,3
   4661c:	1b07883a 	add	r3,r3,r12
   46620:	21c00e2e 	bgeu	r4,r7,4665c <memset+0x100>
   46624:	1813883a 	mov	r9,r3
   46628:	3811883a 	mov	r8,r7
   4662c:	010000c4 	movi	r4,3
   46630:	49800015 	stw	r6,0(r9)
   46634:	423fff04 	addi	r8,r8,-4
   46638:	4a400104 	addi	r9,r9,4
   4663c:	223ffc36 	bltu	r4,r8,46630 <__alt_data_end+0xfffd0ad0>
   46640:	393fff04 	addi	r4,r7,-4
   46644:	2008d0ba 	srli	r4,r4,2
   46648:	39c000cc 	andi	r7,r7,3
   4664c:	21000044 	addi	r4,r4,1
   46650:	2109883a 	add	r4,r4,r4
   46654:	2109883a 	add	r4,r4,r4
   46658:	1907883a 	add	r3,r3,r4
   4665c:	38000426 	beq	r7,zero,46670 <memset+0x114>
   46660:	19cf883a 	add	r7,r3,r7
   46664:	19400005 	stb	r5,0(r3)
   46668:	18c00044 	addi	r3,r3,1
   4666c:	19fffd1e 	bne	r3,r7,46664 <__alt_data_end+0xfffd0b04>
   46670:	f800283a 	ret
   46674:	2007883a 	mov	r3,r4
   46678:	300f883a 	mov	r7,r6
   4667c:	003fc806 	br	465a0 <__alt_data_end+0xfffd0a40>

00046680 <_Balloc>:
   46680:	20801317 	ldw	r2,76(r4)
   46684:	defffc04 	addi	sp,sp,-16
   46688:	dc400115 	stw	r17,4(sp)
   4668c:	dc000015 	stw	r16,0(sp)
   46690:	dfc00315 	stw	ra,12(sp)
   46694:	dc800215 	stw	r18,8(sp)
   46698:	2023883a 	mov	r17,r4
   4669c:	2821883a 	mov	r16,r5
   466a0:	10000f26 	beq	r2,zero,466e0 <_Balloc+0x60>
   466a4:	8407883a 	add	r3,r16,r16
   466a8:	18c7883a 	add	r3,r3,r3
   466ac:	10c7883a 	add	r3,r2,r3
   466b0:	18800017 	ldw	r2,0(r3)
   466b4:	10001126 	beq	r2,zero,466fc <_Balloc+0x7c>
   466b8:	11000017 	ldw	r4,0(r2)
   466bc:	19000015 	stw	r4,0(r3)
   466c0:	10000415 	stw	zero,16(r2)
   466c4:	10000315 	stw	zero,12(r2)
   466c8:	dfc00317 	ldw	ra,12(sp)
   466cc:	dc800217 	ldw	r18,8(sp)
   466d0:	dc400117 	ldw	r17,4(sp)
   466d4:	dc000017 	ldw	r16,0(sp)
   466d8:	dec00404 	addi	sp,sp,16
   466dc:	f800283a 	ret
   466e0:	01400104 	movi	r5,4
   466e4:	01800844 	movi	r6,33
   466e8:	004951c0 	call	4951c <_calloc_r>
   466ec:	88801315 	stw	r2,76(r17)
   466f0:	103fec1e 	bne	r2,zero,466a4 <__alt_data_end+0xfffd0b44>
   466f4:	0005883a 	mov	r2,zero
   466f8:	003ff306 	br	466c8 <__alt_data_end+0xfffd0b68>
   466fc:	01400044 	movi	r5,1
   46700:	2c24983a 	sll	r18,r5,r16
   46704:	8809883a 	mov	r4,r17
   46708:	91800144 	addi	r6,r18,5
   4670c:	318d883a 	add	r6,r6,r6
   46710:	318d883a 	add	r6,r6,r6
   46714:	004951c0 	call	4951c <_calloc_r>
   46718:	103ff626 	beq	r2,zero,466f4 <__alt_data_end+0xfffd0b94>
   4671c:	14000115 	stw	r16,4(r2)
   46720:	14800215 	stw	r18,8(r2)
   46724:	003fe606 	br	466c0 <__alt_data_end+0xfffd0b60>

00046728 <_Bfree>:
   46728:	28000826 	beq	r5,zero,4674c <_Bfree+0x24>
   4672c:	28c00117 	ldw	r3,4(r5)
   46730:	20801317 	ldw	r2,76(r4)
   46734:	18c7883a 	add	r3,r3,r3
   46738:	18c7883a 	add	r3,r3,r3
   4673c:	10c5883a 	add	r2,r2,r3
   46740:	10c00017 	ldw	r3,0(r2)
   46744:	28c00015 	stw	r3,0(r5)
   46748:	11400015 	stw	r5,0(r2)
   4674c:	f800283a 	ret

00046750 <__multadd>:
   46750:	defff704 	addi	sp,sp,-36
   46754:	dc800215 	stw	r18,8(sp)
   46758:	2c800417 	ldw	r18,16(r5)
   4675c:	ddc00715 	stw	r23,28(sp)
   46760:	dd800615 	stw	r22,24(sp)
   46764:	dd000415 	stw	r20,16(sp)
   46768:	dcc00315 	stw	r19,12(sp)
   4676c:	dc400115 	stw	r17,4(sp)
   46770:	dc000015 	stw	r16,0(sp)
   46774:	dfc00815 	stw	ra,32(sp)
   46778:	dd400515 	stw	r21,20(sp)
   4677c:	2827883a 	mov	r19,r5
   46780:	2029883a 	mov	r20,r4
   46784:	3023883a 	mov	r17,r6
   46788:	3821883a 	mov	r16,r7
   4678c:	2d800504 	addi	r22,r5,20
   46790:	002f883a 	mov	r23,zero
   46794:	b5400017 	ldw	r21,0(r22)
   46798:	880b883a 	mov	r5,r17
   4679c:	bdc00044 	addi	r23,r23,1
   467a0:	a93fffcc 	andi	r4,r21,65535
   467a4:	004095c0 	call	4095c <__mulsi3>
   467a8:	1421883a 	add	r16,r2,r16
   467ac:	a808d43a 	srli	r4,r21,16
   467b0:	802ad43a 	srli	r21,r16,16
   467b4:	880b883a 	mov	r5,r17
   467b8:	004095c0 	call	4095c <__mulsi3>
   467bc:	a88f883a 	add	r7,r21,r2
   467c0:	3804943a 	slli	r2,r7,16
   467c4:	80ffffcc 	andi	r3,r16,65535
   467c8:	b5800104 	addi	r22,r22,4
   467cc:	10c7883a 	add	r3,r2,r3
   467d0:	b0ffff15 	stw	r3,-4(r22)
   467d4:	3820d43a 	srli	r16,r7,16
   467d8:	bcbfee16 	blt	r23,r18,46794 <__alt_data_end+0xfffd0c34>
   467dc:	80000926 	beq	r16,zero,46804 <__multadd+0xb4>
   467e0:	98800217 	ldw	r2,8(r19)
   467e4:	9080130e 	bge	r18,r2,46834 <__multadd+0xe4>
   467e8:	90800144 	addi	r2,r18,5
   467ec:	1085883a 	add	r2,r2,r2
   467f0:	1085883a 	add	r2,r2,r2
   467f4:	9885883a 	add	r2,r19,r2
   467f8:	14000015 	stw	r16,0(r2)
   467fc:	94800044 	addi	r18,r18,1
   46800:	9c800415 	stw	r18,16(r19)
   46804:	9805883a 	mov	r2,r19
   46808:	dfc00817 	ldw	ra,32(sp)
   4680c:	ddc00717 	ldw	r23,28(sp)
   46810:	dd800617 	ldw	r22,24(sp)
   46814:	dd400517 	ldw	r21,20(sp)
   46818:	dd000417 	ldw	r20,16(sp)
   4681c:	dcc00317 	ldw	r19,12(sp)
   46820:	dc800217 	ldw	r18,8(sp)
   46824:	dc400117 	ldw	r17,4(sp)
   46828:	dc000017 	ldw	r16,0(sp)
   4682c:	dec00904 	addi	sp,sp,36
   46830:	f800283a 	ret
   46834:	99400117 	ldw	r5,4(r19)
   46838:	a009883a 	mov	r4,r20
   4683c:	29400044 	addi	r5,r5,1
   46840:	00466800 	call	46680 <_Balloc>
   46844:	99800417 	ldw	r6,16(r19)
   46848:	99400304 	addi	r5,r19,12
   4684c:	11000304 	addi	r4,r2,12
   46850:	31800084 	addi	r6,r6,2
   46854:	318d883a 	add	r6,r6,r6
   46858:	318d883a 	add	r6,r6,r6
   4685c:	1023883a 	mov	r17,r2
   46860:	00462c80 	call	462c8 <memcpy>
   46864:	99000117 	ldw	r4,4(r19)
   46868:	a0c01317 	ldw	r3,76(r20)
   4686c:	2109883a 	add	r4,r4,r4
   46870:	2109883a 	add	r4,r4,r4
   46874:	1907883a 	add	r3,r3,r4
   46878:	18800017 	ldw	r2,0(r3)
   4687c:	98800015 	stw	r2,0(r19)
   46880:	1cc00015 	stw	r19,0(r3)
   46884:	8827883a 	mov	r19,r17
   46888:	003fd706 	br	467e8 <__alt_data_end+0xfffd0c88>

0004688c <__s2b>:
   4688c:	defff904 	addi	sp,sp,-28
   46890:	dc400115 	stw	r17,4(sp)
   46894:	dc000015 	stw	r16,0(sp)
   46898:	2023883a 	mov	r17,r4
   4689c:	2821883a 	mov	r16,r5
   468a0:	39000204 	addi	r4,r7,8
   468a4:	01400244 	movi	r5,9
   468a8:	dcc00315 	stw	r19,12(sp)
   468ac:	dc800215 	stw	r18,8(sp)
   468b0:	dfc00615 	stw	ra,24(sp)
   468b4:	dd400515 	stw	r21,20(sp)
   468b8:	dd000415 	stw	r20,16(sp)
   468bc:	3825883a 	mov	r18,r7
   468c0:	3027883a 	mov	r19,r6
   468c4:	004089c0 	call	4089c <__divsi3>
   468c8:	00c00044 	movi	r3,1
   468cc:	000b883a 	mov	r5,zero
   468d0:	1880030e 	bge	r3,r2,468e0 <__s2b+0x54>
   468d4:	18c7883a 	add	r3,r3,r3
   468d8:	29400044 	addi	r5,r5,1
   468dc:	18bffd16 	blt	r3,r2,468d4 <__alt_data_end+0xfffd0d74>
   468e0:	8809883a 	mov	r4,r17
   468e4:	00466800 	call	46680 <_Balloc>
   468e8:	d8c00717 	ldw	r3,28(sp)
   468ec:	10c00515 	stw	r3,20(r2)
   468f0:	00c00044 	movi	r3,1
   468f4:	10c00415 	stw	r3,16(r2)
   468f8:	00c00244 	movi	r3,9
   468fc:	1cc0210e 	bge	r3,r19,46984 <__s2b+0xf8>
   46900:	80eb883a 	add	r21,r16,r3
   46904:	a829883a 	mov	r20,r21
   46908:	84e1883a 	add	r16,r16,r19
   4690c:	a1c00007 	ldb	r7,0(r20)
   46910:	8809883a 	mov	r4,r17
   46914:	a5000044 	addi	r20,r20,1
   46918:	100b883a 	mov	r5,r2
   4691c:	01800284 	movi	r6,10
   46920:	39fff404 	addi	r7,r7,-48
   46924:	00467500 	call	46750 <__multadd>
   46928:	a43ff81e 	bne	r20,r16,4690c <__alt_data_end+0xfffd0dac>
   4692c:	ace1883a 	add	r16,r21,r19
   46930:	843ffe04 	addi	r16,r16,-8
   46934:	9c800a0e 	bge	r19,r18,46960 <__s2b+0xd4>
   46938:	94e5c83a 	sub	r18,r18,r19
   4693c:	84a5883a 	add	r18,r16,r18
   46940:	81c00007 	ldb	r7,0(r16)
   46944:	8809883a 	mov	r4,r17
   46948:	84000044 	addi	r16,r16,1
   4694c:	100b883a 	mov	r5,r2
   46950:	01800284 	movi	r6,10
   46954:	39fff404 	addi	r7,r7,-48
   46958:	00467500 	call	46750 <__multadd>
   4695c:	84bff81e 	bne	r16,r18,46940 <__alt_data_end+0xfffd0de0>
   46960:	dfc00617 	ldw	ra,24(sp)
   46964:	dd400517 	ldw	r21,20(sp)
   46968:	dd000417 	ldw	r20,16(sp)
   4696c:	dcc00317 	ldw	r19,12(sp)
   46970:	dc800217 	ldw	r18,8(sp)
   46974:	dc400117 	ldw	r17,4(sp)
   46978:	dc000017 	ldw	r16,0(sp)
   4697c:	dec00704 	addi	sp,sp,28
   46980:	f800283a 	ret
   46984:	84000284 	addi	r16,r16,10
   46988:	1827883a 	mov	r19,r3
   4698c:	003fe906 	br	46934 <__alt_data_end+0xfffd0dd4>

00046990 <__hi0bits>:
   46990:	20bfffec 	andhi	r2,r4,65535
   46994:	1000141e 	bne	r2,zero,469e8 <__hi0bits+0x58>
   46998:	2008943a 	slli	r4,r4,16
   4699c:	00800404 	movi	r2,16
   469a0:	20ffc02c 	andhi	r3,r4,65280
   469a4:	1800021e 	bne	r3,zero,469b0 <__hi0bits+0x20>
   469a8:	2008923a 	slli	r4,r4,8
   469ac:	10800204 	addi	r2,r2,8
   469b0:	20fc002c 	andhi	r3,r4,61440
   469b4:	1800021e 	bne	r3,zero,469c0 <__hi0bits+0x30>
   469b8:	2008913a 	slli	r4,r4,4
   469bc:	10800104 	addi	r2,r2,4
   469c0:	20f0002c 	andhi	r3,r4,49152
   469c4:	1800031e 	bne	r3,zero,469d4 <__hi0bits+0x44>
   469c8:	2109883a 	add	r4,r4,r4
   469cc:	10800084 	addi	r2,r2,2
   469d0:	2109883a 	add	r4,r4,r4
   469d4:	20000316 	blt	r4,zero,469e4 <__hi0bits+0x54>
   469d8:	2110002c 	andhi	r4,r4,16384
   469dc:	2000041e 	bne	r4,zero,469f0 <__hi0bits+0x60>
   469e0:	00800804 	movi	r2,32
   469e4:	f800283a 	ret
   469e8:	0005883a 	mov	r2,zero
   469ec:	003fec06 	br	469a0 <__alt_data_end+0xfffd0e40>
   469f0:	10800044 	addi	r2,r2,1
   469f4:	f800283a 	ret

000469f8 <__lo0bits>:
   469f8:	20c00017 	ldw	r3,0(r4)
   469fc:	188001cc 	andi	r2,r3,7
   46a00:	10000826 	beq	r2,zero,46a24 <__lo0bits+0x2c>
   46a04:	1880004c 	andi	r2,r3,1
   46a08:	1000211e 	bne	r2,zero,46a90 <__lo0bits+0x98>
   46a0c:	1880008c 	andi	r2,r3,2
   46a10:	1000211e 	bne	r2,zero,46a98 <__lo0bits+0xa0>
   46a14:	1806d0ba 	srli	r3,r3,2
   46a18:	00800084 	movi	r2,2
   46a1c:	20c00015 	stw	r3,0(r4)
   46a20:	f800283a 	ret
   46a24:	18bfffcc 	andi	r2,r3,65535
   46a28:	10001326 	beq	r2,zero,46a78 <__lo0bits+0x80>
   46a2c:	0005883a 	mov	r2,zero
   46a30:	19403fcc 	andi	r5,r3,255
   46a34:	2800021e 	bne	r5,zero,46a40 <__lo0bits+0x48>
   46a38:	1806d23a 	srli	r3,r3,8
   46a3c:	10800204 	addi	r2,r2,8
   46a40:	194003cc 	andi	r5,r3,15
   46a44:	2800021e 	bne	r5,zero,46a50 <__lo0bits+0x58>
   46a48:	1806d13a 	srli	r3,r3,4
   46a4c:	10800104 	addi	r2,r2,4
   46a50:	194000cc 	andi	r5,r3,3
   46a54:	2800021e 	bne	r5,zero,46a60 <__lo0bits+0x68>
   46a58:	1806d0ba 	srli	r3,r3,2
   46a5c:	10800084 	addi	r2,r2,2
   46a60:	1940004c 	andi	r5,r3,1
   46a64:	2800081e 	bne	r5,zero,46a88 <__lo0bits+0x90>
   46a68:	1806d07a 	srli	r3,r3,1
   46a6c:	1800051e 	bne	r3,zero,46a84 <__lo0bits+0x8c>
   46a70:	00800804 	movi	r2,32
   46a74:	f800283a 	ret
   46a78:	1806d43a 	srli	r3,r3,16
   46a7c:	00800404 	movi	r2,16
   46a80:	003feb06 	br	46a30 <__alt_data_end+0xfffd0ed0>
   46a84:	10800044 	addi	r2,r2,1
   46a88:	20c00015 	stw	r3,0(r4)
   46a8c:	f800283a 	ret
   46a90:	0005883a 	mov	r2,zero
   46a94:	f800283a 	ret
   46a98:	1806d07a 	srli	r3,r3,1
   46a9c:	00800044 	movi	r2,1
   46aa0:	20c00015 	stw	r3,0(r4)
   46aa4:	f800283a 	ret

00046aa8 <__i2b>:
   46aa8:	defffd04 	addi	sp,sp,-12
   46aac:	dc000015 	stw	r16,0(sp)
   46ab0:	04000044 	movi	r16,1
   46ab4:	dc400115 	stw	r17,4(sp)
   46ab8:	2823883a 	mov	r17,r5
   46abc:	800b883a 	mov	r5,r16
   46ac0:	dfc00215 	stw	ra,8(sp)
   46ac4:	00466800 	call	46680 <_Balloc>
   46ac8:	14400515 	stw	r17,20(r2)
   46acc:	14000415 	stw	r16,16(r2)
   46ad0:	dfc00217 	ldw	ra,8(sp)
   46ad4:	dc400117 	ldw	r17,4(sp)
   46ad8:	dc000017 	ldw	r16,0(sp)
   46adc:	dec00304 	addi	sp,sp,12
   46ae0:	f800283a 	ret

00046ae4 <__multiply>:
   46ae4:	deffef04 	addi	sp,sp,-68
   46ae8:	dc400815 	stw	r17,32(sp)
   46aec:	dc000715 	stw	r16,28(sp)
   46af0:	2c400417 	ldw	r17,16(r5)
   46af4:	34000417 	ldw	r16,16(r6)
   46af8:	dd800d15 	stw	r22,52(sp)
   46afc:	dc800915 	stw	r18,36(sp)
   46b00:	dfc01015 	stw	ra,64(sp)
   46b04:	df000f15 	stw	fp,60(sp)
   46b08:	ddc00e15 	stw	r23,56(sp)
   46b0c:	dd400c15 	stw	r21,48(sp)
   46b10:	dd000b15 	stw	r20,44(sp)
   46b14:	dcc00a15 	stw	r19,40(sp)
   46b18:	2825883a 	mov	r18,r5
   46b1c:	302d883a 	mov	r22,r6
   46b20:	8c009116 	blt	r17,r16,46d68 <__multiply+0x284>
   46b24:	8005883a 	mov	r2,r16
   46b28:	8821883a 	mov	r16,r17
   46b2c:	1023883a 	mov	r17,r2
   46b30:	90800217 	ldw	r2,8(r18)
   46b34:	8447883a 	add	r3,r16,r17
   46b38:	d8c00215 	stw	r3,8(sp)
   46b3c:	91400117 	ldw	r5,4(r18)
   46b40:	10c0010e 	bge	r2,r3,46b48 <__multiply+0x64>
   46b44:	29400044 	addi	r5,r5,1
   46b48:	00466800 	call	46680 <_Balloc>
   46b4c:	d8c00217 	ldw	r3,8(sp)
   46b50:	d8800615 	stw	r2,24(sp)
   46b54:	18eb883a 	add	r21,r3,r3
   46b58:	ad6b883a 	add	r21,r21,r21
   46b5c:	10c00504 	addi	r3,r2,20
   46b60:	1d6b883a 	add	r21,r3,r21
   46b64:	d8c00115 	stw	r3,4(sp)
   46b68:	dd400315 	stw	r21,12(sp)
   46b6c:	1805883a 	mov	r2,r3
   46b70:	1d40042e 	bgeu	r3,r21,46b84 <__multiply+0xa0>
   46b74:	d8c00317 	ldw	r3,12(sp)
   46b78:	10000015 	stw	zero,0(r2)
   46b7c:	10800104 	addi	r2,r2,4
   46b80:	10fffc36 	bltu	r2,r3,46b74 <__alt_data_end+0xfffd1014>
   46b84:	8c63883a 	add	r17,r17,r17
   46b88:	b5800504 	addi	r22,r22,20
   46b8c:	8c63883a 	add	r17,r17,r17
   46b90:	94800504 	addi	r18,r18,20
   46b94:	8421883a 	add	r16,r16,r16
   46b98:	b463883a 	add	r17,r22,r17
   46b9c:	8421883a 	add	r16,r16,r16
   46ba0:	dd800015 	stw	r22,0(sp)
   46ba4:	dc800415 	stw	r18,16(sp)
   46ba8:	dc400515 	stw	r17,20(sp)
   46bac:	9429883a 	add	r20,r18,r16
   46bb0:	b4404f2e 	bgeu	r22,r17,46cf0 <__multiply+0x20c>
   46bb4:	d8c00017 	ldw	r3,0(sp)
   46bb8:	1c800017 	ldw	r18,0(r3)
   46bbc:	943fffcc 	andi	r16,r18,65535
   46bc0:	80001e26 	beq	r16,zero,46c3c <__multiply+0x158>
   46bc4:	dd800117 	ldw	r22,4(sp)
   46bc8:	dd400417 	ldw	r21,16(sp)
   46bcc:	0025883a 	mov	r18,zero
   46bd0:	adc00017 	ldw	r23,0(r21)
   46bd4:	b4c00017 	ldw	r19,0(r22)
   46bd8:	800b883a 	mov	r5,r16
   46bdc:	b93fffcc 	andi	r4,r23,65535
   46be0:	004095c0 	call	4095c <__mulsi3>
   46be4:	9c7fffcc 	andi	r17,r19,65535
   46be8:	8885883a 	add	r2,r17,r2
   46bec:	b808d43a 	srli	r4,r23,16
   46bf0:	14a3883a 	add	r17,r2,r18
   46bf4:	9826d43a 	srli	r19,r19,16
   46bf8:	8824d43a 	srli	r18,r17,16
   46bfc:	800b883a 	mov	r5,r16
   46c00:	004095c0 	call	4095c <__mulsi3>
   46c04:	9885883a 	add	r2,r19,r2
   46c08:	14a7883a 	add	r19,r2,r18
   46c0c:	88ffffcc 	andi	r3,r17,65535
   46c10:	9822943a 	slli	r17,r19,16
   46c14:	ad400104 	addi	r21,r21,4
   46c18:	b005883a 	mov	r2,r22
   46c1c:	88c6b03a 	or	r3,r17,r3
   46c20:	b0c00015 	stw	r3,0(r22)
   46c24:	9824d43a 	srli	r18,r19,16
   46c28:	b5800104 	addi	r22,r22,4
   46c2c:	ad3fe836 	bltu	r21,r20,46bd0 <__alt_data_end+0xfffd1070>
   46c30:	d8c00017 	ldw	r3,0(sp)
   46c34:	14800115 	stw	r18,4(r2)
   46c38:	1c800017 	ldw	r18,0(r3)
   46c3c:	9024d43a 	srli	r18,r18,16
   46c40:	90002226 	beq	r18,zero,46ccc <__multiply+0x1e8>
   46c44:	d8c00117 	ldw	r3,4(sp)
   46c48:	dd800417 	ldw	r22,16(sp)
   46c4c:	002f883a 	mov	r23,zero
   46c50:	1f000017 	ldw	fp,0(r3)
   46c54:	1823883a 	mov	r17,r3
   46c58:	182b883a 	mov	r21,r3
   46c5c:	e021883a 	mov	r16,fp
   46c60:	00000106 	br	46c68 <__multiply+0x184>
   46c64:	982b883a 	mov	r21,r19
   46c68:	b100000b 	ldhu	r4,0(r22)
   46c6c:	8020d43a 	srli	r16,r16,16
   46c70:	900b883a 	mov	r5,r18
   46c74:	004095c0 	call	4095c <__mulsi3>
   46c78:	1405883a 	add	r2,r2,r16
   46c7c:	15ef883a 	add	r23,r2,r23
   46c80:	b804943a 	slli	r2,r23,16
   46c84:	e0ffffcc 	andi	r3,fp,65535
   46c88:	8c400104 	addi	r17,r17,4
   46c8c:	10c6b03a 	or	r3,r2,r3
   46c90:	88ffff15 	stw	r3,-4(r17)
   46c94:	b5800104 	addi	r22,r22,4
   46c98:	b13fff17 	ldw	r4,-4(r22)
   46c9c:	acc00104 	addi	r19,r21,4
   46ca0:	900b883a 	mov	r5,r18
   46ca4:	2008d43a 	srli	r4,r4,16
   46ca8:	9c000017 	ldw	r16,0(r19)
   46cac:	004095c0 	call	4095c <__mulsi3>
   46cb0:	b806d43a 	srli	r3,r23,16
   46cb4:	813fffcc 	andi	r4,r16,65535
   46cb8:	1105883a 	add	r2,r2,r4
   46cbc:	10f9883a 	add	fp,r2,r3
   46cc0:	e02ed43a 	srli	r23,fp,16
   46cc4:	b53fe736 	bltu	r22,r20,46c64 <__alt_data_end+0xfffd1104>
   46cc8:	af000115 	stw	fp,4(r21)
   46ccc:	d8c00017 	ldw	r3,0(sp)
   46cd0:	d9000517 	ldw	r4,20(sp)
   46cd4:	18c00104 	addi	r3,r3,4
   46cd8:	d8c00015 	stw	r3,0(sp)
   46cdc:	d8c00117 	ldw	r3,4(sp)
   46ce0:	18c00104 	addi	r3,r3,4
   46ce4:	d8c00115 	stw	r3,4(sp)
   46ce8:	d8c00017 	ldw	r3,0(sp)
   46cec:	193fb136 	bltu	r3,r4,46bb4 <__alt_data_end+0xfffd1054>
   46cf0:	d8c00217 	ldw	r3,8(sp)
   46cf4:	00c00c0e 	bge	zero,r3,46d28 <__multiply+0x244>
   46cf8:	d8c00317 	ldw	r3,12(sp)
   46cfc:	18bfff17 	ldw	r2,-4(r3)
   46d00:	1d7fff04 	addi	r21,r3,-4
   46d04:	10000326 	beq	r2,zero,46d14 <__multiply+0x230>
   46d08:	00000706 	br	46d28 <__multiply+0x244>
   46d0c:	a8800017 	ldw	r2,0(r21)
   46d10:	1000051e 	bne	r2,zero,46d28 <__multiply+0x244>
   46d14:	d8c00217 	ldw	r3,8(sp)
   46d18:	ad7fff04 	addi	r21,r21,-4
   46d1c:	18ffffc4 	addi	r3,r3,-1
   46d20:	d8c00215 	stw	r3,8(sp)
   46d24:	183ff91e 	bne	r3,zero,46d0c <__alt_data_end+0xfffd11ac>
   46d28:	d8c00617 	ldw	r3,24(sp)
   46d2c:	d9000217 	ldw	r4,8(sp)
   46d30:	1805883a 	mov	r2,r3
   46d34:	19000415 	stw	r4,16(r3)
   46d38:	dfc01017 	ldw	ra,64(sp)
   46d3c:	df000f17 	ldw	fp,60(sp)
   46d40:	ddc00e17 	ldw	r23,56(sp)
   46d44:	dd800d17 	ldw	r22,52(sp)
   46d48:	dd400c17 	ldw	r21,48(sp)
   46d4c:	dd000b17 	ldw	r20,44(sp)
   46d50:	dcc00a17 	ldw	r19,40(sp)
   46d54:	dc800917 	ldw	r18,36(sp)
   46d58:	dc400817 	ldw	r17,32(sp)
   46d5c:	dc000717 	ldw	r16,28(sp)
   46d60:	dec01104 	addi	sp,sp,68
   46d64:	f800283a 	ret
   46d68:	3025883a 	mov	r18,r6
   46d6c:	282d883a 	mov	r22,r5
   46d70:	003f6f06 	br	46b30 <__alt_data_end+0xfffd0fd0>

00046d74 <__pow5mult>:
   46d74:	defffa04 	addi	sp,sp,-24
   46d78:	dcc00315 	stw	r19,12(sp)
   46d7c:	dc800215 	stw	r18,8(sp)
   46d80:	dc000015 	stw	r16,0(sp)
   46d84:	dfc00515 	stw	ra,20(sp)
   46d88:	dd000415 	stw	r20,16(sp)
   46d8c:	dc400115 	stw	r17,4(sp)
   46d90:	308000cc 	andi	r2,r6,3
   46d94:	3021883a 	mov	r16,r6
   46d98:	2027883a 	mov	r19,r4
   46d9c:	2825883a 	mov	r18,r5
   46da0:	10002e1e 	bne	r2,zero,46e5c <__pow5mult+0xe8>
   46da4:	8021d0ba 	srai	r16,r16,2
   46da8:	80001a26 	beq	r16,zero,46e14 <__pow5mult+0xa0>
   46dac:	9c401217 	ldw	r17,72(r19)
   46db0:	8800061e 	bne	r17,zero,46dcc <__pow5mult+0x58>
   46db4:	00003406 	br	46e88 <__pow5mult+0x114>
   46db8:	8021d07a 	srai	r16,r16,1
   46dbc:	80001526 	beq	r16,zero,46e14 <__pow5mult+0xa0>
   46dc0:	88800017 	ldw	r2,0(r17)
   46dc4:	10001c26 	beq	r2,zero,46e38 <__pow5mult+0xc4>
   46dc8:	1023883a 	mov	r17,r2
   46dcc:	80c0004c 	andi	r3,r16,1
   46dd0:	183ff926 	beq	r3,zero,46db8 <__alt_data_end+0xfffd1258>
   46dd4:	900b883a 	mov	r5,r18
   46dd8:	880d883a 	mov	r6,r17
   46ddc:	9809883a 	mov	r4,r19
   46de0:	0046ae40 	call	46ae4 <__multiply>
   46de4:	90001b26 	beq	r18,zero,46e54 <__pow5mult+0xe0>
   46de8:	91c00117 	ldw	r7,4(r18)
   46dec:	98c01317 	ldw	r3,76(r19)
   46df0:	8021d07a 	srai	r16,r16,1
   46df4:	39cf883a 	add	r7,r7,r7
   46df8:	39cf883a 	add	r7,r7,r7
   46dfc:	19c7883a 	add	r3,r3,r7
   46e00:	19000017 	ldw	r4,0(r3)
   46e04:	91000015 	stw	r4,0(r18)
   46e08:	1c800015 	stw	r18,0(r3)
   46e0c:	1025883a 	mov	r18,r2
   46e10:	803feb1e 	bne	r16,zero,46dc0 <__alt_data_end+0xfffd1260>
   46e14:	9005883a 	mov	r2,r18
   46e18:	dfc00517 	ldw	ra,20(sp)
   46e1c:	dd000417 	ldw	r20,16(sp)
   46e20:	dcc00317 	ldw	r19,12(sp)
   46e24:	dc800217 	ldw	r18,8(sp)
   46e28:	dc400117 	ldw	r17,4(sp)
   46e2c:	dc000017 	ldw	r16,0(sp)
   46e30:	dec00604 	addi	sp,sp,24
   46e34:	f800283a 	ret
   46e38:	9809883a 	mov	r4,r19
   46e3c:	880b883a 	mov	r5,r17
   46e40:	880d883a 	mov	r6,r17
   46e44:	0046ae40 	call	46ae4 <__multiply>
   46e48:	88800015 	stw	r2,0(r17)
   46e4c:	10000015 	stw	zero,0(r2)
   46e50:	003fdd06 	br	46dc8 <__alt_data_end+0xfffd1268>
   46e54:	1025883a 	mov	r18,r2
   46e58:	003fd706 	br	46db8 <__alt_data_end+0xfffd1258>
   46e5c:	10bfffc4 	addi	r2,r2,-1
   46e60:	1085883a 	add	r2,r2,r2
   46e64:	00c00174 	movhi	r3,5
   46e68:	18c1ba04 	addi	r3,r3,1768
   46e6c:	1085883a 	add	r2,r2,r2
   46e70:	1885883a 	add	r2,r3,r2
   46e74:	11800017 	ldw	r6,0(r2)
   46e78:	000f883a 	mov	r7,zero
   46e7c:	00467500 	call	46750 <__multadd>
   46e80:	1025883a 	mov	r18,r2
   46e84:	003fc706 	br	46da4 <__alt_data_end+0xfffd1244>
   46e88:	05000044 	movi	r20,1
   46e8c:	9809883a 	mov	r4,r19
   46e90:	a00b883a 	mov	r5,r20
   46e94:	00466800 	call	46680 <_Balloc>
   46e98:	1023883a 	mov	r17,r2
   46e9c:	00809c44 	movi	r2,625
   46ea0:	88800515 	stw	r2,20(r17)
   46ea4:	8d000415 	stw	r20,16(r17)
   46ea8:	9c401215 	stw	r17,72(r19)
   46eac:	88000015 	stw	zero,0(r17)
   46eb0:	003fc606 	br	46dcc <__alt_data_end+0xfffd126c>

00046eb4 <__lshift>:
   46eb4:	defff904 	addi	sp,sp,-28
   46eb8:	dd000415 	stw	r20,16(sp)
   46ebc:	dcc00315 	stw	r19,12(sp)
   46ec0:	3029d17a 	srai	r20,r6,5
   46ec4:	2cc00417 	ldw	r19,16(r5)
   46ec8:	28800217 	ldw	r2,8(r5)
   46ecc:	dd400515 	stw	r21,20(sp)
   46ed0:	a4e7883a 	add	r19,r20,r19
   46ed4:	dc800215 	stw	r18,8(sp)
   46ed8:	dc400115 	stw	r17,4(sp)
   46edc:	dc000015 	stw	r16,0(sp)
   46ee0:	dfc00615 	stw	ra,24(sp)
   46ee4:	9c000044 	addi	r16,r19,1
   46ee8:	2823883a 	mov	r17,r5
   46eec:	302b883a 	mov	r21,r6
   46ef0:	2025883a 	mov	r18,r4
   46ef4:	29400117 	ldw	r5,4(r5)
   46ef8:	1400030e 	bge	r2,r16,46f08 <__lshift+0x54>
   46efc:	1085883a 	add	r2,r2,r2
   46f00:	29400044 	addi	r5,r5,1
   46f04:	143ffd16 	blt	r2,r16,46efc <__alt_data_end+0xfffd139c>
   46f08:	9009883a 	mov	r4,r18
   46f0c:	00466800 	call	46680 <_Balloc>
   46f10:	11c00504 	addi	r7,r2,20
   46f14:	0500090e 	bge	zero,r20,46f3c <__lshift+0x88>
   46f18:	3811883a 	mov	r8,r7
   46f1c:	0007883a 	mov	r3,zero
   46f20:	40000015 	stw	zero,0(r8)
   46f24:	18c00044 	addi	r3,r3,1
   46f28:	42000104 	addi	r8,r8,4
   46f2c:	1d3ffc1e 	bne	r3,r20,46f20 <__alt_data_end+0xfffd13c0>
   46f30:	18c7883a 	add	r3,r3,r3
   46f34:	18c7883a 	add	r3,r3,r3
   46f38:	38cf883a 	add	r7,r7,r3
   46f3c:	89000417 	ldw	r4,16(r17)
   46f40:	88c00504 	addi	r3,r17,20
   46f44:	a98007cc 	andi	r6,r21,31
   46f48:	2109883a 	add	r4,r4,r4
   46f4c:	2109883a 	add	r4,r4,r4
   46f50:	1909883a 	add	r4,r3,r4
   46f54:	30002326 	beq	r6,zero,46fe4 <__lshift+0x130>
   46f58:	01400804 	movi	r5,32
   46f5c:	298bc83a 	sub	r5,r5,r6
   46f60:	0013883a 	mov	r9,zero
   46f64:	1a000017 	ldw	r8,0(r3)
   46f68:	3815883a 	mov	r10,r7
   46f6c:	39c00104 	addi	r7,r7,4
   46f70:	4190983a 	sll	r8,r8,r6
   46f74:	18c00104 	addi	r3,r3,4
   46f78:	4a10b03a 	or	r8,r9,r8
   46f7c:	3a3fff15 	stw	r8,-4(r7)
   46f80:	1a3fff17 	ldw	r8,-4(r3)
   46f84:	4152d83a 	srl	r9,r8,r5
   46f88:	193ff636 	bltu	r3,r4,46f64 <__alt_data_end+0xfffd1404>
   46f8c:	52400115 	stw	r9,4(r10)
   46f90:	48000126 	beq	r9,zero,46f98 <__lshift+0xe4>
   46f94:	9c000084 	addi	r16,r19,2
   46f98:	89000117 	ldw	r4,4(r17)
   46f9c:	90c01317 	ldw	r3,76(r18)
   46fa0:	843fffc4 	addi	r16,r16,-1
   46fa4:	2109883a 	add	r4,r4,r4
   46fa8:	2109883a 	add	r4,r4,r4
   46fac:	1907883a 	add	r3,r3,r4
   46fb0:	19000017 	ldw	r4,0(r3)
   46fb4:	14000415 	stw	r16,16(r2)
   46fb8:	89000015 	stw	r4,0(r17)
   46fbc:	1c400015 	stw	r17,0(r3)
   46fc0:	dfc00617 	ldw	ra,24(sp)
   46fc4:	dd400517 	ldw	r21,20(sp)
   46fc8:	dd000417 	ldw	r20,16(sp)
   46fcc:	dcc00317 	ldw	r19,12(sp)
   46fd0:	dc800217 	ldw	r18,8(sp)
   46fd4:	dc400117 	ldw	r17,4(sp)
   46fd8:	dc000017 	ldw	r16,0(sp)
   46fdc:	dec00704 	addi	sp,sp,28
   46fe0:	f800283a 	ret
   46fe4:	19400017 	ldw	r5,0(r3)
   46fe8:	39c00104 	addi	r7,r7,4
   46fec:	18c00104 	addi	r3,r3,4
   46ff0:	397fff15 	stw	r5,-4(r7)
   46ff4:	193ffb36 	bltu	r3,r4,46fe4 <__alt_data_end+0xfffd1484>
   46ff8:	003fe706 	br	46f98 <__alt_data_end+0xfffd1438>

00046ffc <__mcmp>:
   46ffc:	20800417 	ldw	r2,16(r4)
   47000:	28c00417 	ldw	r3,16(r5)
   47004:	10c5c83a 	sub	r2,r2,r3
   47008:	1000111e 	bne	r2,zero,47050 <__mcmp+0x54>
   4700c:	18c7883a 	add	r3,r3,r3
   47010:	18c7883a 	add	r3,r3,r3
   47014:	21000504 	addi	r4,r4,20
   47018:	29400504 	addi	r5,r5,20
   4701c:	20c5883a 	add	r2,r4,r3
   47020:	28cb883a 	add	r5,r5,r3
   47024:	00000106 	br	4702c <__mcmp+0x30>
   47028:	20800a2e 	bgeu	r4,r2,47054 <__mcmp+0x58>
   4702c:	10bfff04 	addi	r2,r2,-4
   47030:	297fff04 	addi	r5,r5,-4
   47034:	11800017 	ldw	r6,0(r2)
   47038:	28c00017 	ldw	r3,0(r5)
   4703c:	30fffa26 	beq	r6,r3,47028 <__alt_data_end+0xfffd14c8>
   47040:	30c00236 	bltu	r6,r3,4704c <__mcmp+0x50>
   47044:	00800044 	movi	r2,1
   47048:	f800283a 	ret
   4704c:	00bfffc4 	movi	r2,-1
   47050:	f800283a 	ret
   47054:	0005883a 	mov	r2,zero
   47058:	f800283a 	ret

0004705c <__mdiff>:
   4705c:	defffb04 	addi	sp,sp,-20
   47060:	dc000015 	stw	r16,0(sp)
   47064:	2821883a 	mov	r16,r5
   47068:	dcc00315 	stw	r19,12(sp)
   4706c:	300b883a 	mov	r5,r6
   47070:	2027883a 	mov	r19,r4
   47074:	8009883a 	mov	r4,r16
   47078:	dc800215 	stw	r18,8(sp)
   4707c:	dfc00415 	stw	ra,16(sp)
   47080:	dc400115 	stw	r17,4(sp)
   47084:	3025883a 	mov	r18,r6
   47088:	0046ffc0 	call	46ffc <__mcmp>
   4708c:	10005226 	beq	r2,zero,471d8 <__mdiff+0x17c>
   47090:	10004c16 	blt	r2,zero,471c4 <__mdiff+0x168>
   47094:	0023883a 	mov	r17,zero
   47098:	81400117 	ldw	r5,4(r16)
   4709c:	9809883a 	mov	r4,r19
   470a0:	00466800 	call	46680 <_Balloc>
   470a4:	83400417 	ldw	r13,16(r16)
   470a8:	93800417 	ldw	r14,16(r18)
   470ac:	81000504 	addi	r4,r16,20
   470b0:	6b59883a 	add	r12,r13,r13
   470b4:	739d883a 	add	r14,r14,r14
   470b8:	6319883a 	add	r12,r12,r12
   470bc:	91800504 	addi	r6,r18,20
   470c0:	739d883a 	add	r14,r14,r14
   470c4:	14400315 	stw	r17,12(r2)
   470c8:	2319883a 	add	r12,r4,r12
   470cc:	339d883a 	add	r14,r6,r14
   470d0:	12400504 	addi	r9,r2,20
   470d4:	0007883a 	mov	r3,zero
   470d8:	22000017 	ldw	r8,0(r4)
   470dc:	32800017 	ldw	r10,0(r6)
   470e0:	4ac00104 	addi	r11,r9,4
   470e4:	41ffffcc 	andi	r7,r8,65535
   470e8:	38c7883a 	add	r3,r7,r3
   470ec:	51ffffcc 	andi	r7,r10,65535
   470f0:	19cfc83a 	sub	r7,r3,r7
   470f4:	4010d43a 	srli	r8,r8,16
   470f8:	5014d43a 	srli	r10,r10,16
   470fc:	3807d43a 	srai	r3,r7,16
   47100:	39ffffcc 	andi	r7,r7,65535
   47104:	4291c83a 	sub	r8,r8,r10
   47108:	40c7883a 	add	r3,r8,r3
   4710c:	1810943a 	slli	r8,r3,16
   47110:	31800104 	addi	r6,r6,4
   47114:	21000104 	addi	r4,r4,4
   47118:	41ceb03a 	or	r7,r8,r7
   4711c:	49c00015 	stw	r7,0(r9)
   47120:	1807d43a 	srai	r3,r3,16
   47124:	580b883a 	mov	r5,r11
   47128:	5813883a 	mov	r9,r11
   4712c:	33bfea36 	bltu	r6,r14,470d8 <__alt_data_end+0xfffd1578>
   47130:	2011883a 	mov	r8,r4
   47134:	2300152e 	bgeu	r4,r12,4718c <__mdiff+0x130>
   47138:	21400017 	ldw	r5,0(r4)
   4713c:	4a400104 	addi	r9,r9,4
   47140:	21000104 	addi	r4,r4,4
   47144:	29ffffcc 	andi	r7,r5,65535
   47148:	38c7883a 	add	r3,r7,r3
   4714c:	280ad43a 	srli	r5,r5,16
   47150:	180dd43a 	srai	r6,r3,16
   47154:	19ffffcc 	andi	r7,r3,65535
   47158:	3147883a 	add	r3,r6,r5
   4715c:	180a943a 	slli	r5,r3,16
   47160:	1807d43a 	srai	r3,r3,16
   47164:	29ceb03a 	or	r7,r5,r7
   47168:	49ffff15 	stw	r7,-4(r9)
   4716c:	233ff236 	bltu	r4,r12,47138 <__alt_data_end+0xfffd15d8>
   47170:	0206303a 	nor	r3,zero,r8
   47174:	1b07883a 	add	r3,r3,r12
   47178:	1806d0ba 	srli	r3,r3,2
   4717c:	18c00044 	addi	r3,r3,1
   47180:	18c7883a 	add	r3,r3,r3
   47184:	18c7883a 	add	r3,r3,r3
   47188:	58cb883a 	add	r5,r11,r3
   4718c:	28ffff04 	addi	r3,r5,-4
   47190:	3800041e 	bne	r7,zero,471a4 <__mdiff+0x148>
   47194:	18ffff04 	addi	r3,r3,-4
   47198:	19000017 	ldw	r4,0(r3)
   4719c:	6b7fffc4 	addi	r13,r13,-1
   471a0:	203ffc26 	beq	r4,zero,47194 <__alt_data_end+0xfffd1634>
   471a4:	13400415 	stw	r13,16(r2)
   471a8:	dfc00417 	ldw	ra,16(sp)
   471ac:	dcc00317 	ldw	r19,12(sp)
   471b0:	dc800217 	ldw	r18,8(sp)
   471b4:	dc400117 	ldw	r17,4(sp)
   471b8:	dc000017 	ldw	r16,0(sp)
   471bc:	dec00504 	addi	sp,sp,20
   471c0:	f800283a 	ret
   471c4:	8005883a 	mov	r2,r16
   471c8:	04400044 	movi	r17,1
   471cc:	9021883a 	mov	r16,r18
   471d0:	1025883a 	mov	r18,r2
   471d4:	003fb006 	br	47098 <__alt_data_end+0xfffd1538>
   471d8:	9809883a 	mov	r4,r19
   471dc:	000b883a 	mov	r5,zero
   471e0:	00466800 	call	46680 <_Balloc>
   471e4:	00c00044 	movi	r3,1
   471e8:	10c00415 	stw	r3,16(r2)
   471ec:	10000515 	stw	zero,20(r2)
   471f0:	003fed06 	br	471a8 <__alt_data_end+0xfffd1648>

000471f4 <__ulp>:
   471f4:	295ffc2c 	andhi	r5,r5,32752
   471f8:	00bf3034 	movhi	r2,64704
   471fc:	2887883a 	add	r3,r5,r2
   47200:	00c0020e 	bge	zero,r3,4720c <__ulp+0x18>
   47204:	0005883a 	mov	r2,zero
   47208:	f800283a 	ret
   4720c:	00c7c83a 	sub	r3,zero,r3
   47210:	180bd53a 	srai	r5,r3,20
   47214:	008004c4 	movi	r2,19
   47218:	11400a0e 	bge	r2,r5,47244 <__ulp+0x50>
   4721c:	00800c84 	movi	r2,50
   47220:	0007883a 	mov	r3,zero
   47224:	11400516 	blt	r2,r5,4723c <__ulp+0x48>
   47228:	00800cc4 	movi	r2,51
   4722c:	114bc83a 	sub	r5,r2,r5
   47230:	00800044 	movi	r2,1
   47234:	1144983a 	sll	r2,r2,r5
   47238:	f800283a 	ret
   4723c:	00800044 	movi	r2,1
   47240:	f800283a 	ret
   47244:	00800234 	movhi	r2,8
   47248:	1147d83a 	sra	r3,r2,r5
   4724c:	0005883a 	mov	r2,zero
   47250:	f800283a 	ret

00047254 <__b2d>:
   47254:	defffa04 	addi	sp,sp,-24
   47258:	dc000015 	stw	r16,0(sp)
   4725c:	24000417 	ldw	r16,16(r4)
   47260:	dc400115 	stw	r17,4(sp)
   47264:	24400504 	addi	r17,r4,20
   47268:	8421883a 	add	r16,r16,r16
   4726c:	8421883a 	add	r16,r16,r16
   47270:	8c21883a 	add	r16,r17,r16
   47274:	dc800215 	stw	r18,8(sp)
   47278:	84bfff17 	ldw	r18,-4(r16)
   4727c:	dd000415 	stw	r20,16(sp)
   47280:	dcc00315 	stw	r19,12(sp)
   47284:	9009883a 	mov	r4,r18
   47288:	2829883a 	mov	r20,r5
   4728c:	dfc00515 	stw	ra,20(sp)
   47290:	00469900 	call	46990 <__hi0bits>
   47294:	00c00804 	movi	r3,32
   47298:	1887c83a 	sub	r3,r3,r2
   4729c:	a0c00015 	stw	r3,0(r20)
   472a0:	00c00284 	movi	r3,10
   472a4:	84ffff04 	addi	r19,r16,-4
   472a8:	18801216 	blt	r3,r2,472f4 <__b2d+0xa0>
   472ac:	014002c4 	movi	r5,11
   472b0:	2889c83a 	sub	r4,r5,r2
   472b4:	9106d83a 	srl	r3,r18,r4
   472b8:	18cffc34 	orhi	r3,r3,16368
   472bc:	8cc0282e 	bgeu	r17,r19,47360 <__b2d+0x10c>
   472c0:	817ffe17 	ldw	r5,-8(r16)
   472c4:	290ad83a 	srl	r5,r5,r4
   472c8:	10800544 	addi	r2,r2,21
   472cc:	9084983a 	sll	r2,r18,r2
   472d0:	2884b03a 	or	r2,r5,r2
   472d4:	dfc00517 	ldw	ra,20(sp)
   472d8:	dd000417 	ldw	r20,16(sp)
   472dc:	dcc00317 	ldw	r19,12(sp)
   472e0:	dc800217 	ldw	r18,8(sp)
   472e4:	dc400117 	ldw	r17,4(sp)
   472e8:	dc000017 	ldw	r16,0(sp)
   472ec:	dec00604 	addi	sp,sp,24
   472f0:	f800283a 	ret
   472f4:	113ffd44 	addi	r4,r2,-11
   472f8:	8cc00f2e 	bgeu	r17,r19,47338 <__b2d+0xe4>
   472fc:	81bffe04 	addi	r6,r16,-8
   47300:	817ffe17 	ldw	r5,-8(r16)
   47304:	20001326 	beq	r4,zero,47354 <__b2d+0x100>
   47308:	00c00ac4 	movi	r3,43
   4730c:	1885c83a 	sub	r2,r3,r2
   47310:	2886d83a 	srl	r3,r5,r2
   47314:	9124983a 	sll	r18,r18,r4
   47318:	90e4b03a 	or	r18,r18,r3
   4731c:	90cffc34 	orhi	r3,r18,16368
   47320:	8980112e 	bgeu	r17,r6,47368 <__b2d+0x114>
   47324:	81bffd17 	ldw	r6,-12(r16)
   47328:	308cd83a 	srl	r6,r6,r2
   4732c:	2904983a 	sll	r2,r5,r4
   47330:	1184b03a 	or	r2,r2,r6
   47334:	003fe706 	br	472d4 <__alt_data_end+0xfffd1774>
   47338:	20000526 	beq	r4,zero,47350 <__b2d+0xfc>
   4733c:	9124983a 	sll	r18,r18,r4
   47340:	000d883a 	mov	r6,zero
   47344:	000b883a 	mov	r5,zero
   47348:	90cffc34 	orhi	r3,r18,16368
   4734c:	003ff706 	br	4732c <__alt_data_end+0xfffd17cc>
   47350:	000b883a 	mov	r5,zero
   47354:	90cffc34 	orhi	r3,r18,16368
   47358:	2805883a 	mov	r2,r5
   4735c:	003fdd06 	br	472d4 <__alt_data_end+0xfffd1774>
   47360:	000b883a 	mov	r5,zero
   47364:	003fd806 	br	472c8 <__alt_data_end+0xfffd1768>
   47368:	000d883a 	mov	r6,zero
   4736c:	003fef06 	br	4732c <__alt_data_end+0xfffd17cc>

00047370 <__d2b>:
   47370:	defff704 	addi	sp,sp,-36
   47374:	dc000215 	stw	r16,8(sp)
   47378:	3021883a 	mov	r16,r6
   4737c:	dc400315 	stw	r17,12(sp)
   47380:	8022907a 	slli	r17,r16,1
   47384:	dd400715 	stw	r21,28(sp)
   47388:	282b883a 	mov	r21,r5
   4738c:	01400044 	movi	r5,1
   47390:	dd000615 	stw	r20,24(sp)
   47394:	dcc00515 	stw	r19,20(sp)
   47398:	dc800415 	stw	r18,16(sp)
   4739c:	dfc00815 	stw	ra,32(sp)
   473a0:	3829883a 	mov	r20,r7
   473a4:	dc800917 	ldw	r18,36(sp)
   473a8:	8822d57a 	srli	r17,r17,21
   473ac:	00466800 	call	46680 <_Balloc>
   473b0:	1027883a 	mov	r19,r2
   473b4:	00800434 	movhi	r2,16
   473b8:	10bfffc4 	addi	r2,r2,-1
   473bc:	808c703a 	and	r6,r16,r2
   473c0:	88000126 	beq	r17,zero,473c8 <__d2b+0x58>
   473c4:	31800434 	orhi	r6,r6,16
   473c8:	d9800015 	stw	r6,0(sp)
   473cc:	a8001f26 	beq	r21,zero,4744c <__d2b+0xdc>
   473d0:	d9000104 	addi	r4,sp,4
   473d4:	dd400115 	stw	r21,4(sp)
   473d8:	00469f80 	call	469f8 <__lo0bits>
   473dc:	d8c00017 	ldw	r3,0(sp)
   473e0:	1000291e 	bne	r2,zero,47488 <__d2b+0x118>
   473e4:	d9000117 	ldw	r4,4(sp)
   473e8:	99000515 	stw	r4,20(r19)
   473ec:	1820c03a 	cmpne	r16,r3,zero
   473f0:	84000044 	addi	r16,r16,1
   473f4:	98c00615 	stw	r3,24(r19)
   473f8:	9c000415 	stw	r16,16(r19)
   473fc:	88001b1e 	bne	r17,zero,4746c <__d2b+0xfc>
   47400:	800690ba 	slli	r3,r16,2
   47404:	10bef384 	addi	r2,r2,-1074
   47408:	a0800015 	stw	r2,0(r20)
   4740c:	98c5883a 	add	r2,r19,r3
   47410:	11000417 	ldw	r4,16(r2)
   47414:	8020917a 	slli	r16,r16,5
   47418:	00469900 	call	46990 <__hi0bits>
   4741c:	8085c83a 	sub	r2,r16,r2
   47420:	90800015 	stw	r2,0(r18)
   47424:	9805883a 	mov	r2,r19
   47428:	dfc00817 	ldw	ra,32(sp)
   4742c:	dd400717 	ldw	r21,28(sp)
   47430:	dd000617 	ldw	r20,24(sp)
   47434:	dcc00517 	ldw	r19,20(sp)
   47438:	dc800417 	ldw	r18,16(sp)
   4743c:	dc400317 	ldw	r17,12(sp)
   47440:	dc000217 	ldw	r16,8(sp)
   47444:	dec00904 	addi	sp,sp,36
   47448:	f800283a 	ret
   4744c:	d809883a 	mov	r4,sp
   47450:	00469f80 	call	469f8 <__lo0bits>
   47454:	d8c00017 	ldw	r3,0(sp)
   47458:	04000044 	movi	r16,1
   4745c:	9c000415 	stw	r16,16(r19)
   47460:	98c00515 	stw	r3,20(r19)
   47464:	10800804 	addi	r2,r2,32
   47468:	883fe526 	beq	r17,zero,47400 <__alt_data_end+0xfffd18a0>
   4746c:	8c7ef344 	addi	r17,r17,-1075
   47470:	88a3883a 	add	r17,r17,r2
   47474:	00c00d44 	movi	r3,53
   47478:	a4400015 	stw	r17,0(r20)
   4747c:	1885c83a 	sub	r2,r3,r2
   47480:	90800015 	stw	r2,0(r18)
   47484:	003fe706 	br	47424 <__alt_data_end+0xfffd18c4>
   47488:	01000804 	movi	r4,32
   4748c:	2089c83a 	sub	r4,r4,r2
   47490:	1908983a 	sll	r4,r3,r4
   47494:	d9400117 	ldw	r5,4(sp)
   47498:	1886d83a 	srl	r3,r3,r2
   4749c:	2148b03a 	or	r4,r4,r5
   474a0:	99000515 	stw	r4,20(r19)
   474a4:	d8c00015 	stw	r3,0(sp)
   474a8:	003fd006 	br	473ec <__alt_data_end+0xfffd188c>

000474ac <__ratio>:
   474ac:	defff904 	addi	sp,sp,-28
   474b0:	dc400315 	stw	r17,12(sp)
   474b4:	2823883a 	mov	r17,r5
   474b8:	d9400104 	addi	r5,sp,4
   474bc:	dfc00615 	stw	ra,24(sp)
   474c0:	dcc00515 	stw	r19,20(sp)
   474c4:	dc800415 	stw	r18,16(sp)
   474c8:	2027883a 	mov	r19,r4
   474cc:	dc000215 	stw	r16,8(sp)
   474d0:	00472540 	call	47254 <__b2d>
   474d4:	8809883a 	mov	r4,r17
   474d8:	d80b883a 	mov	r5,sp
   474dc:	1025883a 	mov	r18,r2
   474e0:	1821883a 	mov	r16,r3
   474e4:	00472540 	call	47254 <__b2d>
   474e8:	8a400417 	ldw	r9,16(r17)
   474ec:	9a000417 	ldw	r8,16(r19)
   474f0:	100d883a 	mov	r6,r2
   474f4:	d8800017 	ldw	r2,0(sp)
   474f8:	4251c83a 	sub	r8,r8,r9
   474fc:	4012917a 	slli	r9,r8,5
   47500:	da000117 	ldw	r8,4(sp)
   47504:	4091c83a 	sub	r8,r8,r2
   47508:	4251883a 	add	r8,r8,r9
   4750c:	02000d0e 	bge	zero,r8,47544 <__ratio+0x98>
   47510:	4010953a 	slli	r8,r8,20
   47514:	4421883a 	add	r16,r8,r16
   47518:	9009883a 	mov	r4,r18
   4751c:	800b883a 	mov	r5,r16
   47520:	180f883a 	mov	r7,r3
   47524:	004b3bc0 	call	4b3bc <__divdf3>
   47528:	dfc00617 	ldw	ra,24(sp)
   4752c:	dcc00517 	ldw	r19,20(sp)
   47530:	dc800417 	ldw	r18,16(sp)
   47534:	dc400317 	ldw	r17,12(sp)
   47538:	dc000217 	ldw	r16,8(sp)
   4753c:	dec00704 	addi	sp,sp,28
   47540:	f800283a 	ret
   47544:	4010953a 	slli	r8,r8,20
   47548:	1a07c83a 	sub	r3,r3,r8
   4754c:	003ff206 	br	47518 <__alt_data_end+0xfffd19b8>

00047550 <_mprec_log10>:
   47550:	defffe04 	addi	sp,sp,-8
   47554:	dc000015 	stw	r16,0(sp)
   47558:	dfc00115 	stw	ra,4(sp)
   4755c:	008005c4 	movi	r2,23
   47560:	2021883a 	mov	r16,r4
   47564:	11000d0e 	bge	r2,r4,4759c <_mprec_log10+0x4c>
   47568:	0005883a 	mov	r2,zero
   4756c:	00cffc34 	movhi	r3,16368
   47570:	843fffc4 	addi	r16,r16,-1
   47574:	1009883a 	mov	r4,r2
   47578:	180b883a 	mov	r5,r3
   4757c:	000d883a 	mov	r6,zero
   47580:	01d00934 	movhi	r7,16420
   47584:	004bf800 	call	4bf80 <__muldf3>
   47588:	803ff91e 	bne	r16,zero,47570 <__alt_data_end+0xfffd1a10>
   4758c:	dfc00117 	ldw	ra,4(sp)
   47590:	dc000017 	ldw	r16,0(sp)
   47594:	dec00204 	addi	sp,sp,8
   47598:	f800283a 	ret
   4759c:	202090fa 	slli	r16,r4,3
   475a0:	00800174 	movhi	r2,5
   475a4:	1081d104 	addi	r2,r2,1860
   475a8:	1421883a 	add	r16,r2,r16
   475ac:	80800017 	ldw	r2,0(r16)
   475b0:	80c00117 	ldw	r3,4(r16)
   475b4:	dfc00117 	ldw	ra,4(sp)
   475b8:	dc000017 	ldw	r16,0(sp)
   475bc:	dec00204 	addi	sp,sp,8
   475c0:	f800283a 	ret

000475c4 <__copybits>:
   475c4:	297fffc4 	addi	r5,r5,-1
   475c8:	280fd17a 	srai	r7,r5,5
   475cc:	30c00417 	ldw	r3,16(r6)
   475d0:	30800504 	addi	r2,r6,20
   475d4:	39c00044 	addi	r7,r7,1
   475d8:	18c7883a 	add	r3,r3,r3
   475dc:	39cf883a 	add	r7,r7,r7
   475e0:	18c7883a 	add	r3,r3,r3
   475e4:	39cf883a 	add	r7,r7,r7
   475e8:	10c7883a 	add	r3,r2,r3
   475ec:	21cf883a 	add	r7,r4,r7
   475f0:	10c00d2e 	bgeu	r2,r3,47628 <__copybits+0x64>
   475f4:	200b883a 	mov	r5,r4
   475f8:	12000017 	ldw	r8,0(r2)
   475fc:	29400104 	addi	r5,r5,4
   47600:	10800104 	addi	r2,r2,4
   47604:	2a3fff15 	stw	r8,-4(r5)
   47608:	10fffb36 	bltu	r2,r3,475f8 <__alt_data_end+0xfffd1a98>
   4760c:	1985c83a 	sub	r2,r3,r6
   47610:	10bffac4 	addi	r2,r2,-21
   47614:	1004d0ba 	srli	r2,r2,2
   47618:	10800044 	addi	r2,r2,1
   4761c:	1085883a 	add	r2,r2,r2
   47620:	1085883a 	add	r2,r2,r2
   47624:	2089883a 	add	r4,r4,r2
   47628:	21c0032e 	bgeu	r4,r7,47638 <__copybits+0x74>
   4762c:	20000015 	stw	zero,0(r4)
   47630:	21000104 	addi	r4,r4,4
   47634:	21fffd36 	bltu	r4,r7,4762c <__alt_data_end+0xfffd1acc>
   47638:	f800283a 	ret

0004763c <__any_on>:
   4763c:	20c00417 	ldw	r3,16(r4)
   47640:	2805d17a 	srai	r2,r5,5
   47644:	21000504 	addi	r4,r4,20
   47648:	18800d0e 	bge	r3,r2,47680 <__any_on+0x44>
   4764c:	18c7883a 	add	r3,r3,r3
   47650:	18c7883a 	add	r3,r3,r3
   47654:	20c7883a 	add	r3,r4,r3
   47658:	20c0192e 	bgeu	r4,r3,476c0 <__any_on+0x84>
   4765c:	18bfff17 	ldw	r2,-4(r3)
   47660:	18ffff04 	addi	r3,r3,-4
   47664:	1000041e 	bne	r2,zero,47678 <__any_on+0x3c>
   47668:	20c0142e 	bgeu	r4,r3,476bc <__any_on+0x80>
   4766c:	18ffff04 	addi	r3,r3,-4
   47670:	19400017 	ldw	r5,0(r3)
   47674:	283ffc26 	beq	r5,zero,47668 <__alt_data_end+0xfffd1b08>
   47678:	00800044 	movi	r2,1
   4767c:	f800283a 	ret
   47680:	10c00a0e 	bge	r2,r3,476ac <__any_on+0x70>
   47684:	1085883a 	add	r2,r2,r2
   47688:	1085883a 	add	r2,r2,r2
   4768c:	294007cc 	andi	r5,r5,31
   47690:	2087883a 	add	r3,r4,r2
   47694:	283ff026 	beq	r5,zero,47658 <__alt_data_end+0xfffd1af8>
   47698:	19800017 	ldw	r6,0(r3)
   4769c:	3144d83a 	srl	r2,r6,r5
   476a0:	114a983a 	sll	r5,r2,r5
   476a4:	29bff41e 	bne	r5,r6,47678 <__alt_data_end+0xfffd1b18>
   476a8:	003feb06 	br	47658 <__alt_data_end+0xfffd1af8>
   476ac:	1085883a 	add	r2,r2,r2
   476b0:	1085883a 	add	r2,r2,r2
   476b4:	2087883a 	add	r3,r4,r2
   476b8:	003fe706 	br	47658 <__alt_data_end+0xfffd1af8>
   476bc:	f800283a 	ret
   476c0:	0005883a 	mov	r2,zero
   476c4:	f800283a 	ret

000476c8 <_realloc_r>:
   476c8:	defff604 	addi	sp,sp,-40
   476cc:	dcc00315 	stw	r19,12(sp)
   476d0:	dc400115 	stw	r17,4(sp)
   476d4:	dfc00915 	stw	ra,36(sp)
   476d8:	df000815 	stw	fp,32(sp)
   476dc:	ddc00715 	stw	r23,28(sp)
   476e0:	dd800615 	stw	r22,24(sp)
   476e4:	dd400515 	stw	r21,20(sp)
   476e8:	dd000415 	stw	r20,16(sp)
   476ec:	dc800215 	stw	r18,8(sp)
   476f0:	dc000015 	stw	r16,0(sp)
   476f4:	2827883a 	mov	r19,r5
   476f8:	3023883a 	mov	r17,r6
   476fc:	2800bf26 	beq	r5,zero,479fc <_realloc_r+0x334>
   47700:	2025883a 	mov	r18,r4
   47704:	004d8fc0 	call	4d8fc <__malloc_lock>
   47708:	98ffff17 	ldw	r3,-4(r19)
   4770c:	01bfff04 	movi	r6,-4
   47710:	890002c4 	addi	r4,r17,11
   47714:	01c00584 	movi	r7,22
   47718:	9d7ffe04 	addi	r21,r19,-8
   4771c:	19a0703a 	and	r16,r3,r6
   47720:	39003f2e 	bgeu	r7,r4,47820 <_realloc_r+0x158>
   47724:	053ffe04 	movi	r20,-8
   47728:	2528703a 	and	r20,r4,r20
   4772c:	a00f883a 	mov	r7,r20
   47730:	a0008216 	blt	r20,zero,4793c <_realloc_r+0x274>
   47734:	a4408136 	bltu	r20,r17,4793c <_realloc_r+0x274>
   47738:	81c03c0e 	bge	r16,r7,4782c <_realloc_r+0x164>
   4773c:	07000174 	movhi	fp,5
   47740:	e7038004 	addi	fp,fp,3584
   47744:	e1000217 	ldw	r4,8(fp)
   47748:	ac05883a 	add	r2,r21,r16
   4774c:	2080bf26 	beq	r4,r2,47a4c <_realloc_r+0x384>
   47750:	11000117 	ldw	r4,4(r2)
   47754:	023fff84 	movi	r8,-2
   47758:	2210703a 	and	r8,r4,r8
   4775c:	1211883a 	add	r8,r2,r8
   47760:	41400117 	ldw	r5,4(r8)
   47764:	2940004c 	andi	r5,r5,1
   47768:	28004a1e 	bne	r5,zero,47894 <_realloc_r+0x1cc>
   4776c:	017fff04 	movi	r5,-4
   47770:	2148703a 	and	r4,r4,r5
   47774:	2409883a 	add	r4,r4,r16
   47778:	21c0ad0e 	bge	r4,r7,47a30 <_realloc_r+0x368>
   4777c:	18c0004c 	andi	r3,r3,1
   47780:	18007f1e 	bne	r3,zero,47980 <_realloc_r+0x2b8>
   47784:	9dfffe17 	ldw	r23,-8(r19)
   47788:	adefc83a 	sub	r23,r21,r23
   4778c:	bd800117 	ldw	r22,4(r23)
   47790:	b14a703a 	and	r5,r22,r5
   47794:	216d883a 	add	r22,r4,r5
   47798:	b1c04516 	blt	r22,r7,478b0 <_realloc_r+0x1e8>
   4779c:	10c00317 	ldw	r3,12(r2)
   477a0:	10800217 	ldw	r2,8(r2)
   477a4:	81bfff04 	addi	r6,r16,-4
   477a8:	bc400204 	addi	r17,r23,8
   477ac:	10c00315 	stw	r3,12(r2)
   477b0:	18800215 	stw	r2,8(r3)
   477b4:	b9400217 	ldw	r5,8(r23)
   477b8:	b8c00317 	ldw	r3,12(r23)
   477bc:	00800904 	movi	r2,36
   477c0:	28c00315 	stw	r3,12(r5)
   477c4:	19400215 	stw	r5,8(r3)
   477c8:	1180ef36 	bltu	r2,r6,47b88 <_realloc_r+0x4c0>
   477cc:	008004c4 	movi	r2,19
   477d0:	1180da2e 	bgeu	r2,r6,47b3c <_realloc_r+0x474>
   477d4:	98800017 	ldw	r2,0(r19)
   477d8:	b8800215 	stw	r2,8(r23)
   477dc:	98800117 	ldw	r2,4(r19)
   477e0:	b8800315 	stw	r2,12(r23)
   477e4:	008006c4 	movi	r2,27
   477e8:	1180fc2e 	bgeu	r2,r6,47bdc <_realloc_r+0x514>
   477ec:	98800217 	ldw	r2,8(r19)
   477f0:	b8800415 	stw	r2,16(r23)
   477f4:	98800317 	ldw	r2,12(r19)
   477f8:	b8800515 	stw	r2,20(r23)
   477fc:	00800904 	movi	r2,36
   47800:	3080421e 	bne	r6,r2,4790c <_realloc_r+0x244>
   47804:	98800417 	ldw	r2,16(r19)
   47808:	9cc00604 	addi	r19,r19,24
   4780c:	b8c00804 	addi	r3,r23,32
   47810:	b8800615 	stw	r2,24(r23)
   47814:	98bfff17 	ldw	r2,-4(r19)
   47818:	b8800715 	stw	r2,28(r23)
   4781c:	00003d06 	br	47914 <_realloc_r+0x24c>
   47820:	01c00404 	movi	r7,16
   47824:	3829883a 	mov	r20,r7
   47828:	003fc206 	br	47734 <__alt_data_end+0xfffd1bd4>
   4782c:	9823883a 	mov	r17,r19
   47830:	850fc83a 	sub	r7,r16,r20
   47834:	008003c4 	movi	r2,15
   47838:	18c0004c 	andi	r3,r3,1
   4783c:	11c04336 	bltu	r2,r7,4794c <_realloc_r+0x284>
   47840:	1c06b03a 	or	r3,r3,r16
   47844:	a8c00115 	stw	r3,4(r21)
   47848:	ac21883a 	add	r16,r21,r16
   4784c:	80c00117 	ldw	r3,4(r16)
   47850:	18c00054 	ori	r3,r3,1
   47854:	80c00115 	stw	r3,4(r16)
   47858:	9009883a 	mov	r4,r18
   4785c:	004d91c0 	call	4d91c <__malloc_unlock>
   47860:	8805883a 	mov	r2,r17
   47864:	dfc00917 	ldw	ra,36(sp)
   47868:	df000817 	ldw	fp,32(sp)
   4786c:	ddc00717 	ldw	r23,28(sp)
   47870:	dd800617 	ldw	r22,24(sp)
   47874:	dd400517 	ldw	r21,20(sp)
   47878:	dd000417 	ldw	r20,16(sp)
   4787c:	dcc00317 	ldw	r19,12(sp)
   47880:	dc800217 	ldw	r18,8(sp)
   47884:	dc400117 	ldw	r17,4(sp)
   47888:	dc000017 	ldw	r16,0(sp)
   4788c:	dec00a04 	addi	sp,sp,40
   47890:	f800283a 	ret
   47894:	18c0004c 	andi	r3,r3,1
   47898:	1800391e 	bne	r3,zero,47980 <_realloc_r+0x2b8>
   4789c:	9dfffe17 	ldw	r23,-8(r19)
   478a0:	00bfff04 	movi	r2,-4
   478a4:	adefc83a 	sub	r23,r21,r23
   478a8:	b9400117 	ldw	r5,4(r23)
   478ac:	288a703a 	and	r5,r5,r2
   478b0:	2c2d883a 	add	r22,r5,r16
   478b4:	b1c03216 	blt	r22,r7,47980 <_realloc_r+0x2b8>
   478b8:	b8800317 	ldw	r2,12(r23)
   478bc:	b8c00217 	ldw	r3,8(r23)
   478c0:	81bfff04 	addi	r6,r16,-4
   478c4:	01000904 	movi	r4,36
   478c8:	18800315 	stw	r2,12(r3)
   478cc:	10c00215 	stw	r3,8(r2)
   478d0:	bc400204 	addi	r17,r23,8
   478d4:	2180ac36 	bltu	r4,r6,47b88 <_realloc_r+0x4c0>
   478d8:	008004c4 	movi	r2,19
   478dc:	1180972e 	bgeu	r2,r6,47b3c <_realloc_r+0x474>
   478e0:	98800017 	ldw	r2,0(r19)
   478e4:	b8800215 	stw	r2,8(r23)
   478e8:	98800117 	ldw	r2,4(r19)
   478ec:	b8800315 	stw	r2,12(r23)
   478f0:	008006c4 	movi	r2,27
   478f4:	1180b92e 	bgeu	r2,r6,47bdc <_realloc_r+0x514>
   478f8:	98800217 	ldw	r2,8(r19)
   478fc:	b8800415 	stw	r2,16(r23)
   47900:	98800317 	ldw	r2,12(r19)
   47904:	b8800515 	stw	r2,20(r23)
   47908:	313fbe26 	beq	r6,r4,47804 <__alt_data_end+0xfffd1ca4>
   4790c:	b8c00604 	addi	r3,r23,24
   47910:	9cc00404 	addi	r19,r19,16
   47914:	98800017 	ldw	r2,0(r19)
   47918:	b021883a 	mov	r16,r22
   4791c:	b82b883a 	mov	r21,r23
   47920:	18800015 	stw	r2,0(r3)
   47924:	98800117 	ldw	r2,4(r19)
   47928:	18800115 	stw	r2,4(r3)
   4792c:	98800217 	ldw	r2,8(r19)
   47930:	18800215 	stw	r2,8(r3)
   47934:	b8c00117 	ldw	r3,4(r23)
   47938:	003fbd06 	br	47830 <__alt_data_end+0xfffd1cd0>
   4793c:	00800304 	movi	r2,12
   47940:	90800015 	stw	r2,0(r18)
   47944:	0005883a 	mov	r2,zero
   47948:	003fc606 	br	47864 <__alt_data_end+0xfffd1d04>
   4794c:	1d06b03a 	or	r3,r3,r20
   47950:	ad0b883a 	add	r5,r21,r20
   47954:	a8c00115 	stw	r3,4(r21)
   47958:	38800054 	ori	r2,r7,1
   4795c:	28800115 	stw	r2,4(r5)
   47960:	29cf883a 	add	r7,r5,r7
   47964:	38800117 	ldw	r2,4(r7)
   47968:	9009883a 	mov	r4,r18
   4796c:	29400204 	addi	r5,r5,8
   47970:	10800054 	ori	r2,r2,1
   47974:	38800115 	stw	r2,4(r7)
   47978:	0044e9c0 	call	44e9c <_free_r>
   4797c:	003fb606 	br	47858 <__alt_data_end+0xfffd1cf8>
   47980:	880b883a 	mov	r5,r17
   47984:	9009883a 	mov	r4,r18
   47988:	0045a380 	call	45a38 <_malloc_r>
   4798c:	1023883a 	mov	r17,r2
   47990:	1000aa26 	beq	r2,zero,47c3c <_realloc_r+0x574>
   47994:	98ffff17 	ldw	r3,-4(r19)
   47998:	113ffe04 	addi	r4,r2,-8
   4799c:	00bfff84 	movi	r2,-2
   479a0:	1884703a 	and	r2,r3,r2
   479a4:	a885883a 	add	r2,r21,r2
   479a8:	20808626 	beq	r4,r2,47bc4 <_realloc_r+0x4fc>
   479ac:	81bfff04 	addi	r6,r16,-4
   479b0:	00800904 	movi	r2,36
   479b4:	11807036 	bltu	r2,r6,47b78 <_realloc_r+0x4b0>
   479b8:	00c004c4 	movi	r3,19
   479bc:	19805636 	bltu	r3,r6,47b18 <_realloc_r+0x450>
   479c0:	8805883a 	mov	r2,r17
   479c4:	9807883a 	mov	r3,r19
   479c8:	19000017 	ldw	r4,0(r3)
   479cc:	11000015 	stw	r4,0(r2)
   479d0:	19000117 	ldw	r4,4(r3)
   479d4:	11000115 	stw	r4,4(r2)
   479d8:	18c00217 	ldw	r3,8(r3)
   479dc:	10c00215 	stw	r3,8(r2)
   479e0:	980b883a 	mov	r5,r19
   479e4:	9009883a 	mov	r4,r18
   479e8:	0044e9c0 	call	44e9c <_free_r>
   479ec:	9009883a 	mov	r4,r18
   479f0:	004d91c0 	call	4d91c <__malloc_unlock>
   479f4:	8805883a 	mov	r2,r17
   479f8:	003f9a06 	br	47864 <__alt_data_end+0xfffd1d04>
   479fc:	300b883a 	mov	r5,r6
   47a00:	dfc00917 	ldw	ra,36(sp)
   47a04:	df000817 	ldw	fp,32(sp)
   47a08:	ddc00717 	ldw	r23,28(sp)
   47a0c:	dd800617 	ldw	r22,24(sp)
   47a10:	dd400517 	ldw	r21,20(sp)
   47a14:	dd000417 	ldw	r20,16(sp)
   47a18:	dcc00317 	ldw	r19,12(sp)
   47a1c:	dc800217 	ldw	r18,8(sp)
   47a20:	dc400117 	ldw	r17,4(sp)
   47a24:	dc000017 	ldw	r16,0(sp)
   47a28:	dec00a04 	addi	sp,sp,40
   47a2c:	0045a381 	jmpi	45a38 <_malloc_r>
   47a30:	11400317 	ldw	r5,12(r2)
   47a34:	10800217 	ldw	r2,8(r2)
   47a38:	9823883a 	mov	r17,r19
   47a3c:	2021883a 	mov	r16,r4
   47a40:	11400315 	stw	r5,12(r2)
   47a44:	28800215 	stw	r2,8(r5)
   47a48:	003f7906 	br	47830 <__alt_data_end+0xfffd1cd0>
   47a4c:	21000117 	ldw	r4,4(r4)
   47a50:	00bfff04 	movi	r2,-4
   47a54:	a1800404 	addi	r6,r20,16
   47a58:	2088703a 	and	r4,r4,r2
   47a5c:	2409883a 	add	r4,r4,r16
   47a60:	2180380e 	bge	r4,r6,47b44 <_realloc_r+0x47c>
   47a64:	18c0004c 	andi	r3,r3,1
   47a68:	183fc51e 	bne	r3,zero,47980 <__alt_data_end+0xfffd1e20>
   47a6c:	9dfffe17 	ldw	r23,-8(r19)
   47a70:	adefc83a 	sub	r23,r21,r23
   47a74:	b9400117 	ldw	r5,4(r23)
   47a78:	288a703a 	and	r5,r5,r2
   47a7c:	216d883a 	add	r22,r4,r5
   47a80:	b1bf8b16 	blt	r22,r6,478b0 <__alt_data_end+0xfffd1d50>
   47a84:	b8800317 	ldw	r2,12(r23)
   47a88:	b8c00217 	ldw	r3,8(r23)
   47a8c:	81bfff04 	addi	r6,r16,-4
   47a90:	01000904 	movi	r4,36
   47a94:	18800315 	stw	r2,12(r3)
   47a98:	10c00215 	stw	r3,8(r2)
   47a9c:	bc400204 	addi	r17,r23,8
   47aa0:	21805a36 	bltu	r4,r6,47c0c <_realloc_r+0x544>
   47aa4:	008004c4 	movi	r2,19
   47aa8:	1180562e 	bgeu	r2,r6,47c04 <_realloc_r+0x53c>
   47aac:	98800017 	ldw	r2,0(r19)
   47ab0:	b8800215 	stw	r2,8(r23)
   47ab4:	98800117 	ldw	r2,4(r19)
   47ab8:	b8800315 	stw	r2,12(r23)
   47abc:	008006c4 	movi	r2,27
   47ac0:	11805636 	bltu	r2,r6,47c1c <_realloc_r+0x554>
   47ac4:	b8800404 	addi	r2,r23,16
   47ac8:	9cc00204 	addi	r19,r19,8
   47acc:	98c00017 	ldw	r3,0(r19)
   47ad0:	10c00015 	stw	r3,0(r2)
   47ad4:	98c00117 	ldw	r3,4(r19)
   47ad8:	10c00115 	stw	r3,4(r2)
   47adc:	98c00217 	ldw	r3,8(r19)
   47ae0:	10c00215 	stw	r3,8(r2)
   47ae4:	bd07883a 	add	r3,r23,r20
   47ae8:	b505c83a 	sub	r2,r22,r20
   47aec:	e0c00215 	stw	r3,8(fp)
   47af0:	10800054 	ori	r2,r2,1
   47af4:	18800115 	stw	r2,4(r3)
   47af8:	b8800117 	ldw	r2,4(r23)
   47afc:	9009883a 	mov	r4,r18
   47b00:	1080004c 	andi	r2,r2,1
   47b04:	a0a8b03a 	or	r20,r20,r2
   47b08:	bd000115 	stw	r20,4(r23)
   47b0c:	004d91c0 	call	4d91c <__malloc_unlock>
   47b10:	8805883a 	mov	r2,r17
   47b14:	003f5306 	br	47864 <__alt_data_end+0xfffd1d04>
   47b18:	98c00017 	ldw	r3,0(r19)
   47b1c:	88c00015 	stw	r3,0(r17)
   47b20:	98c00117 	ldw	r3,4(r19)
   47b24:	88c00115 	stw	r3,4(r17)
   47b28:	00c006c4 	movi	r3,27
   47b2c:	19801d36 	bltu	r3,r6,47ba4 <_realloc_r+0x4dc>
   47b30:	88800204 	addi	r2,r17,8
   47b34:	98c00204 	addi	r3,r19,8
   47b38:	003fa306 	br	479c8 <__alt_data_end+0xfffd1e68>
   47b3c:	8807883a 	mov	r3,r17
   47b40:	003f7406 	br	47914 <__alt_data_end+0xfffd1db4>
   47b44:	ad2b883a 	add	r21,r21,r20
   47b48:	2505c83a 	sub	r2,r4,r20
   47b4c:	e5400215 	stw	r21,8(fp)
   47b50:	10800054 	ori	r2,r2,1
   47b54:	a8800115 	stw	r2,4(r21)
   47b58:	98bfff17 	ldw	r2,-4(r19)
   47b5c:	9009883a 	mov	r4,r18
   47b60:	1080004c 	andi	r2,r2,1
   47b64:	a0a8b03a 	or	r20,r20,r2
   47b68:	9d3fff15 	stw	r20,-4(r19)
   47b6c:	004d91c0 	call	4d91c <__malloc_unlock>
   47b70:	9805883a 	mov	r2,r19
   47b74:	003f3b06 	br	47864 <__alt_data_end+0xfffd1d04>
   47b78:	8809883a 	mov	r4,r17
   47b7c:	980b883a 	mov	r5,r19
   47b80:	00464000 	call	46400 <memmove>
   47b84:	003f9606 	br	479e0 <__alt_data_end+0xfffd1e80>
   47b88:	8809883a 	mov	r4,r17
   47b8c:	980b883a 	mov	r5,r19
   47b90:	00464000 	call	46400 <memmove>
   47b94:	b8c00117 	ldw	r3,4(r23)
   47b98:	b021883a 	mov	r16,r22
   47b9c:	b82b883a 	mov	r21,r23
   47ba0:	003f2306 	br	47830 <__alt_data_end+0xfffd1cd0>
   47ba4:	98c00217 	ldw	r3,8(r19)
   47ba8:	88c00215 	stw	r3,8(r17)
   47bac:	98c00317 	ldw	r3,12(r19)
   47bb0:	88c00315 	stw	r3,12(r17)
   47bb4:	30800c26 	beq	r6,r2,47be8 <_realloc_r+0x520>
   47bb8:	88800404 	addi	r2,r17,16
   47bbc:	98c00404 	addi	r3,r19,16
   47bc0:	003f8106 	br	479c8 <__alt_data_end+0xfffd1e68>
   47bc4:	893fff17 	ldw	r4,-4(r17)
   47bc8:	00bfff04 	movi	r2,-4
   47bcc:	9823883a 	mov	r17,r19
   47bd0:	2084703a 	and	r2,r4,r2
   47bd4:	80a1883a 	add	r16,r16,r2
   47bd8:	003f1506 	br	47830 <__alt_data_end+0xfffd1cd0>
   47bdc:	b8c00404 	addi	r3,r23,16
   47be0:	9cc00204 	addi	r19,r19,8
   47be4:	003f4b06 	br	47914 <__alt_data_end+0xfffd1db4>
   47be8:	99000417 	ldw	r4,16(r19)
   47bec:	88800604 	addi	r2,r17,24
   47bf0:	98c00604 	addi	r3,r19,24
   47bf4:	89000415 	stw	r4,16(r17)
   47bf8:	99000517 	ldw	r4,20(r19)
   47bfc:	89000515 	stw	r4,20(r17)
   47c00:	003f7106 	br	479c8 <__alt_data_end+0xfffd1e68>
   47c04:	8805883a 	mov	r2,r17
   47c08:	003fb006 	br	47acc <__alt_data_end+0xfffd1f6c>
   47c0c:	8809883a 	mov	r4,r17
   47c10:	980b883a 	mov	r5,r19
   47c14:	00464000 	call	46400 <memmove>
   47c18:	003fb206 	br	47ae4 <__alt_data_end+0xfffd1f84>
   47c1c:	98800217 	ldw	r2,8(r19)
   47c20:	b8800415 	stw	r2,16(r23)
   47c24:	98800317 	ldw	r2,12(r19)
   47c28:	b8800515 	stw	r2,20(r23)
   47c2c:	31000726 	beq	r6,r4,47c4c <_realloc_r+0x584>
   47c30:	b8800604 	addi	r2,r23,24
   47c34:	9cc00404 	addi	r19,r19,16
   47c38:	003fa406 	br	47acc <__alt_data_end+0xfffd1f6c>
   47c3c:	9009883a 	mov	r4,r18
   47c40:	004d91c0 	call	4d91c <__malloc_unlock>
   47c44:	0005883a 	mov	r2,zero
   47c48:	003f0606 	br	47864 <__alt_data_end+0xfffd1d04>
   47c4c:	98c00417 	ldw	r3,16(r19)
   47c50:	9cc00604 	addi	r19,r19,24
   47c54:	b8800804 	addi	r2,r23,32
   47c58:	b8c00615 	stw	r3,24(r23)
   47c5c:	98ffff17 	ldw	r3,-4(r19)
   47c60:	b8c00715 	stw	r3,28(r23)
   47c64:	003f9906 	br	47acc <__alt_data_end+0xfffd1f6c>

00047c68 <__fpclassifyd>:
   47c68:	00a00034 	movhi	r2,32768
   47c6c:	10bfffc4 	addi	r2,r2,-1
   47c70:	2884703a 	and	r2,r5,r2
   47c74:	10000726 	beq	r2,zero,47c94 <__fpclassifyd+0x2c>
   47c78:	00fffc34 	movhi	r3,65520
   47c7c:	019ff834 	movhi	r6,32736
   47c80:	28c7883a 	add	r3,r5,r3
   47c84:	31bfffc4 	addi	r6,r6,-1
   47c88:	30c00536 	bltu	r6,r3,47ca0 <__fpclassifyd+0x38>
   47c8c:	00800104 	movi	r2,4
   47c90:	f800283a 	ret
   47c94:	2000021e 	bne	r4,zero,47ca0 <__fpclassifyd+0x38>
   47c98:	00800084 	movi	r2,2
   47c9c:	f800283a 	ret
   47ca0:	00dffc34 	movhi	r3,32752
   47ca4:	019ff834 	movhi	r6,32736
   47ca8:	28cb883a 	add	r5,r5,r3
   47cac:	31bfffc4 	addi	r6,r6,-1
   47cb0:	317ff62e 	bgeu	r6,r5,47c8c <__alt_data_end+0xfffd212c>
   47cb4:	01400434 	movhi	r5,16
   47cb8:	297fffc4 	addi	r5,r5,-1
   47cbc:	28800236 	bltu	r5,r2,47cc8 <__fpclassifyd+0x60>
   47cc0:	008000c4 	movi	r2,3
   47cc4:	f800283a 	ret
   47cc8:	10c00226 	beq	r2,r3,47cd4 <__fpclassifyd+0x6c>
   47ccc:	0005883a 	mov	r2,zero
   47cd0:	f800283a 	ret
   47cd4:	2005003a 	cmpeq	r2,r4,zero
   47cd8:	f800283a 	ret

00047cdc <_sbrk_r>:
   47cdc:	defffd04 	addi	sp,sp,-12
   47ce0:	dc000015 	stw	r16,0(sp)
   47ce4:	04000174 	movhi	r16,5
   47ce8:	dc400115 	stw	r17,4(sp)
   47cec:	84103704 	addi	r16,r16,16604
   47cf0:	2023883a 	mov	r17,r4
   47cf4:	2809883a 	mov	r4,r5
   47cf8:	dfc00215 	stw	ra,8(sp)
   47cfc:	80000015 	stw	zero,0(r16)
   47d00:	004db100 	call	4db10 <sbrk>
   47d04:	00ffffc4 	movi	r3,-1
   47d08:	10c00526 	beq	r2,r3,47d20 <_sbrk_r+0x44>
   47d0c:	dfc00217 	ldw	ra,8(sp)
   47d10:	dc400117 	ldw	r17,4(sp)
   47d14:	dc000017 	ldw	r16,0(sp)
   47d18:	dec00304 	addi	sp,sp,12
   47d1c:	f800283a 	ret
   47d20:	80c00017 	ldw	r3,0(r16)
   47d24:	183ff926 	beq	r3,zero,47d0c <__alt_data_end+0xfffd21ac>
   47d28:	88c00015 	stw	r3,0(r17)
   47d2c:	003ff706 	br	47d0c <__alt_data_end+0xfffd21ac>

00047d30 <__sread>:
   47d30:	defffe04 	addi	sp,sp,-8
   47d34:	dc000015 	stw	r16,0(sp)
   47d38:	2821883a 	mov	r16,r5
   47d3c:	2940038f 	ldh	r5,14(r5)
   47d40:	dfc00115 	stw	ra,4(sp)
   47d44:	00499ec0 	call	499ec <_read_r>
   47d48:	10000716 	blt	r2,zero,47d68 <__sread+0x38>
   47d4c:	80c01417 	ldw	r3,80(r16)
   47d50:	1887883a 	add	r3,r3,r2
   47d54:	80c01415 	stw	r3,80(r16)
   47d58:	dfc00117 	ldw	ra,4(sp)
   47d5c:	dc000017 	ldw	r16,0(sp)
   47d60:	dec00204 	addi	sp,sp,8
   47d64:	f800283a 	ret
   47d68:	80c0030b 	ldhu	r3,12(r16)
   47d6c:	18fbffcc 	andi	r3,r3,61439
   47d70:	80c0030d 	sth	r3,12(r16)
   47d74:	dfc00117 	ldw	ra,4(sp)
   47d78:	dc000017 	ldw	r16,0(sp)
   47d7c:	dec00204 	addi	sp,sp,8
   47d80:	f800283a 	ret

00047d84 <__seofread>:
   47d84:	0005883a 	mov	r2,zero
   47d88:	f800283a 	ret

00047d8c <__swrite>:
   47d8c:	2880030b 	ldhu	r2,12(r5)
   47d90:	defffb04 	addi	sp,sp,-20
   47d94:	dcc00315 	stw	r19,12(sp)
   47d98:	dc800215 	stw	r18,8(sp)
   47d9c:	dc400115 	stw	r17,4(sp)
   47da0:	dc000015 	stw	r16,0(sp)
   47da4:	dfc00415 	stw	ra,16(sp)
   47da8:	10c0400c 	andi	r3,r2,256
   47dac:	2821883a 	mov	r16,r5
   47db0:	2027883a 	mov	r19,r4
   47db4:	3025883a 	mov	r18,r6
   47db8:	3823883a 	mov	r17,r7
   47dbc:	18000526 	beq	r3,zero,47dd4 <__swrite+0x48>
   47dc0:	2940038f 	ldh	r5,14(r5)
   47dc4:	000d883a 	mov	r6,zero
   47dc8:	01c00084 	movi	r7,2
   47dcc:	00499900 	call	49990 <_lseek_r>
   47dd0:	8080030b 	ldhu	r2,12(r16)
   47dd4:	8140038f 	ldh	r5,14(r16)
   47dd8:	10bbffcc 	andi	r2,r2,61439
   47ddc:	9809883a 	mov	r4,r19
   47de0:	900d883a 	mov	r6,r18
   47de4:	880f883a 	mov	r7,r17
   47de8:	8080030d 	sth	r2,12(r16)
   47dec:	dfc00417 	ldw	ra,16(sp)
   47df0:	dcc00317 	ldw	r19,12(sp)
   47df4:	dc800217 	ldw	r18,8(sp)
   47df8:	dc400117 	ldw	r17,4(sp)
   47dfc:	dc000017 	ldw	r16,0(sp)
   47e00:	dec00504 	addi	sp,sp,20
   47e04:	004946c1 	jmpi	4946c <_write_r>

00047e08 <__sseek>:
   47e08:	defffe04 	addi	sp,sp,-8
   47e0c:	dc000015 	stw	r16,0(sp)
   47e10:	2821883a 	mov	r16,r5
   47e14:	2940038f 	ldh	r5,14(r5)
   47e18:	dfc00115 	stw	ra,4(sp)
   47e1c:	00499900 	call	49990 <_lseek_r>
   47e20:	00ffffc4 	movi	r3,-1
   47e24:	10c00826 	beq	r2,r3,47e48 <__sseek+0x40>
   47e28:	80c0030b 	ldhu	r3,12(r16)
   47e2c:	80801415 	stw	r2,80(r16)
   47e30:	18c40014 	ori	r3,r3,4096
   47e34:	80c0030d 	sth	r3,12(r16)
   47e38:	dfc00117 	ldw	ra,4(sp)
   47e3c:	dc000017 	ldw	r16,0(sp)
   47e40:	dec00204 	addi	sp,sp,8
   47e44:	f800283a 	ret
   47e48:	80c0030b 	ldhu	r3,12(r16)
   47e4c:	18fbffcc 	andi	r3,r3,61439
   47e50:	80c0030d 	sth	r3,12(r16)
   47e54:	dfc00117 	ldw	ra,4(sp)
   47e58:	dc000017 	ldw	r16,0(sp)
   47e5c:	dec00204 	addi	sp,sp,8
   47e60:	f800283a 	ret

00047e64 <__sclose>:
   47e64:	2940038f 	ldh	r5,14(r5)
   47e68:	00494c81 	jmpi	494c8 <_close_r>

00047e6c <strcmp>:
   47e6c:	2144b03a 	or	r2,r4,r5
   47e70:	108000cc 	andi	r2,r2,3
   47e74:	1000171e 	bne	r2,zero,47ed4 <strcmp+0x68>
   47e78:	20800017 	ldw	r2,0(r4)
   47e7c:	28c00017 	ldw	r3,0(r5)
   47e80:	10c0141e 	bne	r2,r3,47ed4 <strcmp+0x68>
   47e84:	027fbff4 	movhi	r9,65279
   47e88:	4a7fbfc4 	addi	r9,r9,-257
   47e8c:	0086303a 	nor	r3,zero,r2
   47e90:	02202074 	movhi	r8,32897
   47e94:	1245883a 	add	r2,r2,r9
   47e98:	42202004 	addi	r8,r8,-32640
   47e9c:	10c4703a 	and	r2,r2,r3
   47ea0:	1204703a 	and	r2,r2,r8
   47ea4:	10000226 	beq	r2,zero,47eb0 <strcmp+0x44>
   47ea8:	00001706 	br	47f08 <strcmp+0x9c>
   47eac:	1000161e 	bne	r2,zero,47f08 <strcmp+0x9c>
   47eb0:	21000104 	addi	r4,r4,4
   47eb4:	20c00017 	ldw	r3,0(r4)
   47eb8:	29400104 	addi	r5,r5,4
   47ebc:	29800017 	ldw	r6,0(r5)
   47ec0:	1a4f883a 	add	r7,r3,r9
   47ec4:	00c4303a 	nor	r2,zero,r3
   47ec8:	3884703a 	and	r2,r7,r2
   47ecc:	1204703a 	and	r2,r2,r8
   47ed0:	19bff626 	beq	r3,r6,47eac <__alt_data_end+0xfffd234c>
   47ed4:	20800007 	ldb	r2,0(r4)
   47ed8:	1000051e 	bne	r2,zero,47ef0 <strcmp+0x84>
   47edc:	00000606 	br	47ef8 <strcmp+0x8c>
   47ee0:	21000044 	addi	r4,r4,1
   47ee4:	20800007 	ldb	r2,0(r4)
   47ee8:	29400044 	addi	r5,r5,1
   47eec:	10000226 	beq	r2,zero,47ef8 <strcmp+0x8c>
   47ef0:	28c00007 	ldb	r3,0(r5)
   47ef4:	10fffa26 	beq	r2,r3,47ee0 <__alt_data_end+0xfffd2380>
   47ef8:	20800003 	ldbu	r2,0(r4)
   47efc:	28c00003 	ldbu	r3,0(r5)
   47f00:	10c5c83a 	sub	r2,r2,r3
   47f04:	f800283a 	ret
   47f08:	0005883a 	mov	r2,zero
   47f0c:	f800283a 	ret

00047f10 <__sprint_r.part.0>:
   47f10:	28801917 	ldw	r2,100(r5)
   47f14:	defff604 	addi	sp,sp,-40
   47f18:	dd400515 	stw	r21,20(sp)
   47f1c:	dcc00315 	stw	r19,12(sp)
   47f20:	dfc00915 	stw	ra,36(sp)
   47f24:	df000815 	stw	fp,32(sp)
   47f28:	ddc00715 	stw	r23,28(sp)
   47f2c:	dd800615 	stw	r22,24(sp)
   47f30:	dd000415 	stw	r20,16(sp)
   47f34:	dc800215 	stw	r18,8(sp)
   47f38:	dc400115 	stw	r17,4(sp)
   47f3c:	dc000015 	stw	r16,0(sp)
   47f40:	1088000c 	andi	r2,r2,8192
   47f44:	2827883a 	mov	r19,r5
   47f48:	302b883a 	mov	r21,r6
   47f4c:	10002d26 	beq	r2,zero,48004 <__sprint_r.part.0+0xf4>
   47f50:	30800217 	ldw	r2,8(r6)
   47f54:	35800017 	ldw	r22,0(r6)
   47f58:	10002826 	beq	r2,zero,47ffc <__sprint_r.part.0+0xec>
   47f5c:	2029883a 	mov	r20,r4
   47f60:	b5c00104 	addi	r23,r22,4
   47f64:	04bfffc4 	movi	r18,-1
   47f68:	bc400017 	ldw	r17,0(r23)
   47f6c:	b4000017 	ldw	r16,0(r22)
   47f70:	0039883a 	mov	fp,zero
   47f74:	8822d0ba 	srli	r17,r17,2
   47f78:	04400316 	blt	zero,r17,47f88 <__sprint_r.part.0+0x78>
   47f7c:	00001706 	br	47fdc <__sprint_r.part.0+0xcc>
   47f80:	84000104 	addi	r16,r16,4
   47f84:	8f001526 	beq	r17,fp,47fdc <__sprint_r.part.0+0xcc>
   47f88:	81400017 	ldw	r5,0(r16)
   47f8c:	a009883a 	mov	r4,r20
   47f90:	980d883a 	mov	r6,r19
   47f94:	00497080 	call	49708 <_fputwc_r>
   47f98:	e7000044 	addi	fp,fp,1
   47f9c:	14bff81e 	bne	r2,r18,47f80 <__alt_data_end+0xfffd2420>
   47fa0:	9005883a 	mov	r2,r18
   47fa4:	a8000215 	stw	zero,8(r21)
   47fa8:	a8000115 	stw	zero,4(r21)
   47fac:	dfc00917 	ldw	ra,36(sp)
   47fb0:	df000817 	ldw	fp,32(sp)
   47fb4:	ddc00717 	ldw	r23,28(sp)
   47fb8:	dd800617 	ldw	r22,24(sp)
   47fbc:	dd400517 	ldw	r21,20(sp)
   47fc0:	dd000417 	ldw	r20,16(sp)
   47fc4:	dcc00317 	ldw	r19,12(sp)
   47fc8:	dc800217 	ldw	r18,8(sp)
   47fcc:	dc400117 	ldw	r17,4(sp)
   47fd0:	dc000017 	ldw	r16,0(sp)
   47fd4:	dec00a04 	addi	sp,sp,40
   47fd8:	f800283a 	ret
   47fdc:	a8c00217 	ldw	r3,8(r21)
   47fe0:	8c63883a 	add	r17,r17,r17
   47fe4:	8c63883a 	add	r17,r17,r17
   47fe8:	1c45c83a 	sub	r2,r3,r17
   47fec:	a8800215 	stw	r2,8(r21)
   47ff0:	b5800204 	addi	r22,r22,8
   47ff4:	bdc00204 	addi	r23,r23,8
   47ff8:	103fdb1e 	bne	r2,zero,47f68 <__alt_data_end+0xfffd2408>
   47ffc:	0005883a 	mov	r2,zero
   48000:	003fe806 	br	47fa4 <__alt_data_end+0xfffd2444>
   48004:	004518c0 	call	4518c <__sfvwrite_r>
   48008:	003fe606 	br	47fa4 <__alt_data_end+0xfffd2444>

0004800c <__sprint_r>:
   4800c:	30c00217 	ldw	r3,8(r6)
   48010:	18000126 	beq	r3,zero,48018 <__sprint_r+0xc>
   48014:	0047f101 	jmpi	47f10 <__sprint_r.part.0>
   48018:	30000115 	stw	zero,4(r6)
   4801c:	0005883a 	mov	r2,zero
   48020:	f800283a 	ret

00048024 <___vfiprintf_internal_r>:
   48024:	defeca04 	addi	sp,sp,-1240
   48028:	dcc12f15 	stw	r19,1212(sp)
   4802c:	dfc13515 	stw	ra,1236(sp)
   48030:	df013415 	stw	fp,1232(sp)
   48034:	ddc13315 	stw	r23,1228(sp)
   48038:	dd813215 	stw	r22,1224(sp)
   4803c:	dd413115 	stw	r21,1220(sp)
   48040:	dd013015 	stw	r20,1216(sp)
   48044:	dc812e15 	stw	r18,1208(sp)
   48048:	dc412d15 	stw	r17,1204(sp)
   4804c:	dc012c15 	stw	r16,1200(sp)
   48050:	d9012115 	stw	r4,1156(sp)
   48054:	d9412015 	stw	r5,1152(sp)
   48058:	d9c12315 	stw	r7,1164(sp)
   4805c:	3027883a 	mov	r19,r6
   48060:	20000226 	beq	r4,zero,4806c <___vfiprintf_internal_r+0x48>
   48064:	20800e17 	ldw	r2,56(r4)
   48068:	1000f726 	beq	r2,zero,48448 <___vfiprintf_internal_r+0x424>
   4806c:	d8812017 	ldw	r2,1152(sp)
   48070:	10c0030b 	ldhu	r3,12(r2)
   48074:	1908000c 	andi	r4,r3,8192
   48078:	1805883a 	mov	r2,r3
   4807c:	2000081e 	bne	r4,zero,480a0 <___vfiprintf_internal_r+0x7c>
   48080:	d9412017 	ldw	r5,1152(sp)
   48084:	18880014 	ori	r2,r3,8192
   48088:	00f7ffc4 	movi	r3,-8193
   4808c:	29001917 	ldw	r4,100(r5)
   48090:	2880030d 	sth	r2,12(r5)
   48094:	20c8703a 	and	r4,r4,r3
   48098:	29001915 	stw	r4,100(r5)
   4809c:	1007883a 	mov	r3,r2
   480a0:	1100020c 	andi	r4,r2,8
   480a4:	2000a726 	beq	r4,zero,48344 <___vfiprintf_internal_r+0x320>
   480a8:	d9412017 	ldw	r5,1152(sp)
   480ac:	29000417 	ldw	r4,16(r5)
   480b0:	2000a426 	beq	r4,zero,48344 <___vfiprintf_internal_r+0x320>
   480b4:	1080068c 	andi	r2,r2,26
   480b8:	01000284 	movi	r4,10
   480bc:	1100ab26 	beq	r2,r4,4836c <___vfiprintf_internal_r+0x348>
   480c0:	d9010a04 	addi	r4,sp,1064
   480c4:	d94109c4 	addi	r5,sp,1063
   480c8:	07000174 	movhi	fp,5
   480cc:	04400174 	movhi	r17,5
   480d0:	2145c83a 	sub	r2,r4,r5
   480d4:	e7020704 	addi	fp,fp,2076
   480d8:	8c420304 	addi	r17,r17,2060
   480dc:	d9011e15 	stw	r4,1144(sp)
   480e0:	d9411f15 	stw	r5,1148(sp)
   480e4:	dec11a15 	stw	sp,1128(sp)
   480e8:	d8011c15 	stw	zero,1136(sp)
   480ec:	d8011b15 	stw	zero,1132(sp)
   480f0:	d8012715 	stw	zero,1180(sp)
   480f4:	d8012515 	stw	zero,1172(sp)
   480f8:	d811883a 	mov	r8,sp
   480fc:	d8812815 	stw	r2,1184(sp)
   48100:	982f883a 	mov	r23,r19
   48104:	b8800007 	ldb	r2,0(r23)
   48108:	1003b026 	beq	r2,zero,48fcc <___vfiprintf_internal_r+0xfa8>
   4810c:	01000944 	movi	r4,37
   48110:	1103ae26 	beq	r2,r4,48fcc <___vfiprintf_internal_r+0xfa8>
   48114:	b805883a 	mov	r2,r23
   48118:	00000106 	br	48120 <___vfiprintf_internal_r+0xfc>
   4811c:	19000326 	beq	r3,r4,4812c <___vfiprintf_internal_r+0x108>
   48120:	10800044 	addi	r2,r2,1
   48124:	10c00007 	ldb	r3,0(r2)
   48128:	183ffc1e 	bne	r3,zero,4811c <__alt_data_end+0xfffd25bc>
   4812c:	15e1c83a 	sub	r16,r2,r23
   48130:	1029883a 	mov	r20,r2
   48134:	80001026 	beq	r16,zero,48178 <___vfiprintf_internal_r+0x154>
   48138:	d8c11c17 	ldw	r3,1136(sp)
   4813c:	d8811b17 	ldw	r2,1132(sp)
   48140:	45c00015 	stw	r23,0(r8)
   48144:	80c7883a 	add	r3,r16,r3
   48148:	10800044 	addi	r2,r2,1
   4814c:	44000115 	stw	r16,4(r8)
   48150:	d8c11c15 	stw	r3,1136(sp)
   48154:	d8811b15 	stw	r2,1132(sp)
   48158:	010001c4 	movi	r4,7
   4815c:	2080740e 	bge	r4,r2,48330 <___vfiprintf_internal_r+0x30c>
   48160:	1803a71e 	bne	r3,zero,49000 <___vfiprintf_internal_r+0xfdc>
   48164:	d8c12517 	ldw	r3,1172(sp)
   48168:	d8011b15 	stw	zero,1132(sp)
   4816c:	d811883a 	mov	r8,sp
   48170:	1c07883a 	add	r3,r3,r16
   48174:	d8c12515 	stw	r3,1172(sp)
   48178:	a0800007 	ldb	r2,0(r20)
   4817c:	1002bf26 	beq	r2,zero,48c7c <___vfiprintf_internal_r+0xc58>
   48180:	a5c00044 	addi	r23,r20,1
   48184:	a1800047 	ldb	r6,1(r20)
   48188:	d8011d85 	stb	zero,1142(sp)
   4818c:	d8012205 	stb	zero,1160(sp)
   48190:	043fffc4 	movi	r16,-1
   48194:	d8012415 	stw	zero,1168(sp)
   48198:	0025883a 	mov	r18,zero
   4819c:	05001604 	movi	r20,88
   481a0:	05400244 	movi	r21,9
   481a4:	4027883a 	mov	r19,r8
   481a8:	bdc00044 	addi	r23,r23,1
   481ac:	30bff804 	addi	r2,r6,-32
   481b0:	a0825636 	bltu	r20,r2,48b0c <___vfiprintf_internal_r+0xae8>
   481b4:	100490ba 	slli	r2,r2,2
   481b8:	01000174 	movhi	r4,5
   481bc:	21207304 	addi	r4,r4,-32308
   481c0:	1105883a 	add	r2,r2,r4
   481c4:	10800017 	ldw	r2,0(r2)
   481c8:	1000683a 	jmp	r2
   481cc:	00048a9c 	xori	zero,zero,4650
   481d0:	00048b0c 	andi	zero,zero,4652
   481d4:	00048b0c 	andi	zero,zero,4652
   481d8:	00048b00 	call	48b0 <__alt_mem_RAM_jesus-0x3b750>
   481dc:	00048b0c 	andi	zero,zero,4652
   481e0:	00048b0c 	andi	zero,zero,4652
   481e4:	00048b0c 	andi	zero,zero,4652
   481e8:	00048b0c 	andi	zero,zero,4652
   481ec:	00048b0c 	andi	zero,zero,4652
   481f0:	00048b0c 	andi	zero,zero,4652
   481f4:	0004888c 	andi	zero,zero,4642
   481f8:	00048ab4 	movhi	zero,4650
   481fc:	00048b0c 	andi	zero,zero,4652
   48200:	00048460 	cmpeqi	zero,zero,4625
   48204:	000488b0 	cmpltui	zero,zero,4642
   48208:	00048b0c 	andi	zero,zero,4652
   4820c:	0004846c 	andhi	zero,zero,4625
   48210:	00048478 	rdprs	zero,zero,4625
   48214:	00048478 	rdprs	zero,zero,4625
   48218:	00048478 	rdprs	zero,zero,4625
   4821c:	00048478 	rdprs	zero,zero,4625
   48220:	00048478 	rdprs	zero,zero,4625
   48224:	00048478 	rdprs	zero,zero,4625
   48228:	00048478 	rdprs	zero,zero,4625
   4822c:	00048478 	rdprs	zero,zero,4625
   48230:	00048478 	rdprs	zero,zero,4625
   48234:	00048b0c 	andi	zero,zero,4652
   48238:	00048b0c 	andi	zero,zero,4652
   4823c:	00048b0c 	andi	zero,zero,4652
   48240:	00048b0c 	andi	zero,zero,4652
   48244:	00048b0c 	andi	zero,zero,4652
   48248:	00048b0c 	andi	zero,zero,4652
   4824c:	00048b0c 	andi	zero,zero,4652
   48250:	00048b0c 	andi	zero,zero,4652
   48254:	00048b0c 	andi	zero,zero,4652
   48258:	00048b0c 	andi	zero,zero,4652
   4825c:	000484b8 	rdprs	zero,zero,4626
   48260:	00048b0c 	andi	zero,zero,4652
   48264:	00048b0c 	andi	zero,zero,4652
   48268:	00048b0c 	andi	zero,zero,4652
   4826c:	00048b0c 	andi	zero,zero,4652
   48270:	00048b0c 	andi	zero,zero,4652
   48274:	00048b0c 	andi	zero,zero,4652
   48278:	00048b0c 	andi	zero,zero,4652
   4827c:	00048b0c 	andi	zero,zero,4652
   48280:	00048b0c 	andi	zero,zero,4652
   48284:	00048b0c 	andi	zero,zero,4652
   48288:	000487a8 	cmpgeui	zero,zero,4638
   4828c:	00048b0c 	andi	zero,zero,4652
   48290:	00048b0c 	andi	zero,zero,4652
   48294:	00048b0c 	andi	zero,zero,4652
   48298:	00048b0c 	andi	zero,zero,4652
   4829c:	00048b0c 	andi	zero,zero,4652
   482a0:	000487e8 	cmpgeui	zero,zero,4639
   482a4:	00048b0c 	andi	zero,zero,4652
   482a8:	00048b0c 	andi	zero,zero,4652
   482ac:	0004882c 	andhi	zero,zero,4640
   482b0:	00048b0c 	andi	zero,zero,4652
   482b4:	00048b0c 	andi	zero,zero,4652
   482b8:	00048b0c 	andi	zero,zero,4652
   482bc:	00048b0c 	andi	zero,zero,4652
   482c0:	00048b0c 	andi	zero,zero,4652
   482c4:	00048b0c 	andi	zero,zero,4652
   482c8:	00048b0c 	andi	zero,zero,4652
   482cc:	00048b0c 	andi	zero,zero,4652
   482d0:	00048b0c 	andi	zero,zero,4652
   482d4:	00048b0c 	andi	zero,zero,4652
   482d8:	00048774 	movhi	zero,4637
   482dc:	00048ac4 	movi	zero,4651
   482e0:	00048b0c 	andi	zero,zero,4652
   482e4:	00048b0c 	andi	zero,zero,4652
   482e8:	00048b0c 	andi	zero,zero,4652
   482ec:	00048900 	call	4890 <__alt_mem_RAM_jesus-0x3b770>
   482f0:	00048ac4 	movi	zero,4651
   482f4:	00048b0c 	andi	zero,zero,4652
   482f8:	00048b0c 	andi	zero,zero,4652
   482fc:	00048818 	cmpnei	zero,zero,4640
   48300:	00048b0c 	andi	zero,zero,4652
   48304:	00048a64 	muli	zero,zero,4649
   48308:	000489ec 	andhi	zero,zero,4647
   4830c:	00048a20 	cmpeqi	zero,zero,4648
   48310:	0004890c 	andi	zero,zero,4644
   48314:	00048b0c 	andi	zero,zero,4652
   48318:	00048918 	cmpnei	zero,zero,4644
   4831c:	00048b0c 	andi	zero,zero,4652
   48320:	00048974 	movhi	zero,4645
   48324:	00048b0c 	andi	zero,zero,4652
   48328:	00048b0c 	andi	zero,zero,4652
   4832c:	000489a8 	cmpgeui	zero,zero,4646
   48330:	42000204 	addi	r8,r8,8
   48334:	d8c12517 	ldw	r3,1172(sp)
   48338:	1c07883a 	add	r3,r3,r16
   4833c:	d8c12515 	stw	r3,1172(sp)
   48340:	003f8d06 	br	48178 <__alt_data_end+0xfffd2618>
   48344:	d9012117 	ldw	r4,1156(sp)
   48348:	d9412017 	ldw	r5,1152(sp)
   4834c:	0042cec0 	call	42cec <__swsetup_r>
   48350:	1000301e 	bne	r2,zero,48414 <___vfiprintf_internal_r+0x3f0>
   48354:	d8812017 	ldw	r2,1152(sp)
   48358:	01000284 	movi	r4,10
   4835c:	10c0030b 	ldhu	r3,12(r2)
   48360:	1805883a 	mov	r2,r3
   48364:	1080068c 	andi	r2,r2,26
   48368:	113f551e 	bne	r2,r4,480c0 <__alt_data_end+0xfffd2560>
   4836c:	d9012017 	ldw	r4,1152(sp)
   48370:	2080038b 	ldhu	r2,14(r4)
   48374:	113fffcc 	andi	r4,r2,65535
   48378:	2120001c 	xori	r4,r4,32768
   4837c:	21200004 	addi	r4,r4,-32768
   48380:	203f4f16 	blt	r4,zero,480c0 <__alt_data_end+0xfffd2560>
   48384:	d9412017 	ldw	r5,1152(sp)
   48388:	d9012117 	ldw	r4,1156(sp)
   4838c:	d9c12317 	ldw	r7,1164(sp)
   48390:	2b001917 	ldw	r12,100(r5)
   48394:	2ac00717 	ldw	r11,28(r5)
   48398:	2a800917 	ldw	r10,36(r5)
   4839c:	02010004 	movi	r8,1024
   483a0:	18ffff4c 	andi	r3,r3,65533
   483a4:	da0b883a 	add	r5,sp,r8
   483a8:	980d883a 	mov	r6,r19
   483ac:	d8c1030d 	sth	r3,1036(sp)
   483b0:	db011915 	stw	r12,1124(sp)
   483b4:	d881038d 	sth	r2,1038(sp)
   483b8:	dac10715 	stw	r11,1052(sp)
   483bc:	da810915 	stw	r10,1060(sp)
   483c0:	dec10015 	stw	sp,1024(sp)
   483c4:	dec10415 	stw	sp,1040(sp)
   483c8:	da010215 	stw	r8,1032(sp)
   483cc:	da010515 	stw	r8,1044(sp)
   483d0:	d8010615 	stw	zero,1048(sp)
   483d4:	00480240 	call	48024 <___vfiprintf_internal_r>
   483d8:	1021883a 	mov	r16,r2
   483dc:	10000416 	blt	r2,zero,483f0 <___vfiprintf_internal_r+0x3cc>
   483e0:	d9012117 	ldw	r4,1156(sp)
   483e4:	d9410004 	addi	r5,sp,1024
   483e8:	004476c0 	call	4476c <_fflush_r>
   483ec:	10040f1e 	bne	r2,zero,4942c <___vfiprintf_internal_r+0x1408>
   483f0:	d881030b 	ldhu	r2,1036(sp)
   483f4:	1080100c 	andi	r2,r2,64
   483f8:	10000426 	beq	r2,zero,4840c <___vfiprintf_internal_r+0x3e8>
   483fc:	d8c12017 	ldw	r3,1152(sp)
   48400:	1880030b 	ldhu	r2,12(r3)
   48404:	10801014 	ori	r2,r2,64
   48408:	1880030d 	sth	r2,12(r3)
   4840c:	8005883a 	mov	r2,r16
   48410:	00000106 	br	48418 <___vfiprintf_internal_r+0x3f4>
   48414:	00bfffc4 	movi	r2,-1
   48418:	dfc13517 	ldw	ra,1236(sp)
   4841c:	df013417 	ldw	fp,1232(sp)
   48420:	ddc13317 	ldw	r23,1228(sp)
   48424:	dd813217 	ldw	r22,1224(sp)
   48428:	dd413117 	ldw	r21,1220(sp)
   4842c:	dd013017 	ldw	r20,1216(sp)
   48430:	dcc12f17 	ldw	r19,1212(sp)
   48434:	dc812e17 	ldw	r18,1208(sp)
   48438:	dc412d17 	ldw	r17,1204(sp)
   4843c:	dc012c17 	ldw	r16,1200(sp)
   48440:	dec13604 	addi	sp,sp,1240
   48444:	f800283a 	ret
   48448:	0044d280 	call	44d28 <__sinit>
   4844c:	003f0706 	br	4806c <__alt_data_end+0xfffd250c>
   48450:	d8c12417 	ldw	r3,1168(sp)
   48454:	d8812315 	stw	r2,1164(sp)
   48458:	00c7c83a 	sub	r3,zero,r3
   4845c:	d8c12415 	stw	r3,1168(sp)
   48460:	94800114 	ori	r18,r18,4
   48464:	b9800007 	ldb	r6,0(r23)
   48468:	003f4f06 	br	481a8 <__alt_data_end+0xfffd2648>
   4846c:	94802014 	ori	r18,r18,128
   48470:	b9800007 	ldb	r6,0(r23)
   48474:	003f4c06 	br	481a8 <__alt_data_end+0xfffd2648>
   48478:	dc012615 	stw	r16,1176(sp)
   4847c:	d8012415 	stw	zero,1168(sp)
   48480:	35bff404 	addi	r22,r6,-48
   48484:	0009883a 	mov	r4,zero
   48488:	b821883a 	mov	r16,r23
   4848c:	01400284 	movi	r5,10
   48490:	004095c0 	call	4095c <__mulsi3>
   48494:	81800007 	ldb	r6,0(r16)
   48498:	1589883a 	add	r4,r2,r22
   4849c:	bdc00044 	addi	r23,r23,1
   484a0:	35bff404 	addi	r22,r6,-48
   484a4:	b821883a 	mov	r16,r23
   484a8:	adbff82e 	bgeu	r21,r22,4848c <__alt_data_end+0xfffd292c>
   484ac:	d9012415 	stw	r4,1168(sp)
   484b0:	dc012617 	ldw	r16,1176(sp)
   484b4:	003f3d06 	br	481ac <__alt_data_end+0xfffd264c>
   484b8:	d8c12203 	ldbu	r3,1160(sp)
   484bc:	94800414 	ori	r18,r18,16
   484c0:	9080080c 	andi	r2,r18,32
   484c4:	d8c11d85 	stb	r3,1142(sp)
   484c8:	9811883a 	mov	r8,r19
   484cc:	d8c12317 	ldw	r3,1164(sp)
   484d0:	10018226 	beq	r2,zero,48adc <___vfiprintf_internal_r+0xab8>
   484d4:	d9012317 	ldw	r4,1164(sp)
   484d8:	18800117 	ldw	r2,4(r3)
   484dc:	1cc00017 	ldw	r19,0(r3)
   484e0:	21000204 	addi	r4,r4,8
   484e4:	d9012315 	stw	r4,1164(sp)
   484e8:	102b883a 	mov	r21,r2
   484ec:	10030016 	blt	r2,zero,490f0 <___vfiprintf_internal_r+0x10cc>
   484f0:	dd811d83 	ldbu	r22,1142(sp)
   484f4:	8029883a 	mov	r20,r16
   484f8:	00800044 	movi	r2,1
   484fc:	9d46b03a 	or	r3,r19,r21
   48500:	80000216 	blt	r16,zero,4850c <___vfiprintf_internal_r+0x4e8>
   48504:	013fdfc4 	movi	r4,-129
   48508:	9124703a 	and	r18,r18,r4
   4850c:	1801b41e 	bne	r3,zero,48be0 <___vfiprintf_internal_r+0xbbc>
   48510:	80028126 	beq	r16,zero,48f18 <___vfiprintf_internal_r+0xef4>
   48514:	10803fcc 	andi	r2,r2,255
   48518:	00c00044 	movi	r3,1
   4851c:	10c1d126 	beq	r2,r3,48c64 <___vfiprintf_internal_r+0xc40>
   48520:	00c00084 	movi	r3,2
   48524:	10c28626 	beq	r2,r3,48f40 <___vfiprintf_internal_r+0xf1c>
   48528:	d8c10a04 	addi	r3,sp,1064
   4852c:	9808d0fa 	srli	r4,r19,3
   48530:	a80a977a 	slli	r5,r21,29
   48534:	a82ad0fa 	srli	r21,r21,3
   48538:	9cc001cc 	andi	r19,r19,7
   4853c:	98800c04 	addi	r2,r19,48
   48540:	18ffffc4 	addi	r3,r3,-1
   48544:	2926b03a 	or	r19,r5,r4
   48548:	18800005 	stb	r2,0(r3)
   4854c:	9d48b03a 	or	r4,r19,r21
   48550:	203ff61e 	bne	r4,zero,4852c <__alt_data_end+0xfffd29cc>
   48554:	9100004c 	andi	r4,r18,1
   48558:	d8c12215 	stw	r3,1160(sp)
   4855c:	2002b31e 	bne	r4,zero,4902c <___vfiprintf_internal_r+0x1008>
   48560:	d9411e17 	ldw	r5,1144(sp)
   48564:	28e9c83a 	sub	r20,r5,r3
   48568:	a02b883a 	mov	r21,r20
   4856c:	a400010e 	bge	r20,r16,48574 <___vfiprintf_internal_r+0x550>
   48570:	802b883a 	mov	r21,r16
   48574:	b5803fcc 	andi	r22,r22,255
   48578:	b580201c 	xori	r22,r22,128
   4857c:	b5bfe004 	addi	r22,r22,-128
   48580:	b0000126 	beq	r22,zero,48588 <___vfiprintf_internal_r+0x564>
   48584:	ad400044 	addi	r21,r21,1
   48588:	9280008c 	andi	r10,r18,2
   4858c:	50000126 	beq	r10,zero,48594 <___vfiprintf_internal_r+0x570>
   48590:	ad400084 	addi	r21,r21,2
   48594:	9580210c 	andi	r22,r18,132
   48598:	b001751e 	bne	r22,zero,48b70 <___vfiprintf_internal_r+0xb4c>
   4859c:	d9012417 	ldw	r4,1168(sp)
   485a0:	2567c83a 	sub	r19,r4,r21
   485a4:	04c1720e 	bge	zero,r19,48b70 <___vfiprintf_internal_r+0xb4c>
   485a8:	01c00404 	movi	r7,16
   485ac:	d8c11c17 	ldw	r3,1136(sp)
   485b0:	3cc36b0e 	bge	r7,r19,49360 <___vfiprintf_internal_r+0x133c>
   485b4:	00800174 	movhi	r2,5
   485b8:	10820704 	addi	r2,r2,2076
   485bc:	dc012915 	stw	r16,1188(sp)
   485c0:	d9011b17 	ldw	r4,1132(sp)
   485c4:	9821883a 	mov	r16,r19
   485c8:	d8812615 	stw	r2,1176(sp)
   485cc:	030001c4 	movi	r12,7
   485d0:	5027883a 	mov	r19,r10
   485d4:	00000506 	br	485ec <___vfiprintf_internal_r+0x5c8>
   485d8:	21400084 	addi	r5,r4,2
   485dc:	42000204 	addi	r8,r8,8
   485e0:	1009883a 	mov	r4,r2
   485e4:	843ffc04 	addi	r16,r16,-16
   485e8:	3c000d0e 	bge	r7,r16,48620 <___vfiprintf_internal_r+0x5fc>
   485ec:	18c00404 	addi	r3,r3,16
   485f0:	20800044 	addi	r2,r4,1
   485f4:	47000015 	stw	fp,0(r8)
   485f8:	41c00115 	stw	r7,4(r8)
   485fc:	d8c11c15 	stw	r3,1136(sp)
   48600:	d8811b15 	stw	r2,1132(sp)
   48604:	60bff40e 	bge	r12,r2,485d8 <__alt_data_end+0xfffd2a78>
   48608:	18014b1e 	bne	r3,zero,48b38 <___vfiprintf_internal_r+0xb14>
   4860c:	843ffc04 	addi	r16,r16,-16
   48610:	0009883a 	mov	r4,zero
   48614:	01400044 	movi	r5,1
   48618:	d811883a 	mov	r8,sp
   4861c:	3c3ff316 	blt	r7,r16,485ec <__alt_data_end+0xfffd2a8c>
   48620:	9815883a 	mov	r10,r19
   48624:	8027883a 	mov	r19,r16
   48628:	dc012917 	ldw	r16,1188(sp)
   4862c:	d9012617 	ldw	r4,1176(sp)
   48630:	98c7883a 	add	r3,r19,r3
   48634:	44c00115 	stw	r19,4(r8)
   48638:	41000015 	stw	r4,0(r8)
   4863c:	d8c11c15 	stw	r3,1136(sp)
   48640:	d9411b15 	stw	r5,1132(sp)
   48644:	008001c4 	movi	r2,7
   48648:	11425116 	blt	r2,r5,48f90 <___vfiprintf_internal_r+0xf6c>
   4864c:	d9011d87 	ldb	r4,1142(sp)
   48650:	42000204 	addi	r8,r8,8
   48654:	28800044 	addi	r2,r5,1
   48658:	20014a1e 	bne	r4,zero,48b84 <___vfiprintf_internal_r+0xb60>
   4865c:	50000c26 	beq	r10,zero,48690 <___vfiprintf_internal_r+0x66c>
   48660:	d9011d04 	addi	r4,sp,1140
   48664:	18c00084 	addi	r3,r3,2
   48668:	41000015 	stw	r4,0(r8)
   4866c:	01000084 	movi	r4,2
   48670:	41000115 	stw	r4,4(r8)
   48674:	d8c11c15 	stw	r3,1136(sp)
   48678:	d8811b15 	stw	r2,1132(sp)
   4867c:	010001c4 	movi	r4,7
   48680:	20822016 	blt	r4,r2,48f04 <___vfiprintf_internal_r+0xee0>
   48684:	100b883a 	mov	r5,r2
   48688:	42000204 	addi	r8,r8,8
   4868c:	10800044 	addi	r2,r2,1
   48690:	01002004 	movi	r4,128
   48694:	b101de26 	beq	r22,r4,48e10 <___vfiprintf_internal_r+0xdec>
   48698:	8521c83a 	sub	r16,r16,r20
   4869c:	0400230e 	bge	zero,r16,4872c <___vfiprintf_internal_r+0x708>
   486a0:	04c00404 	movi	r19,16
   486a4:	9c030d0e 	bge	r19,r16,492dc <___vfiprintf_internal_r+0x12b8>
   486a8:	00800174 	movhi	r2,5
   486ac:	10820304 	addi	r2,r2,2060
   486b0:	d8812615 	stw	r2,1176(sp)
   486b4:	058001c4 	movi	r22,7
   486b8:	00000506 	br	486d0 <___vfiprintf_internal_r+0x6ac>
   486bc:	28800084 	addi	r2,r5,2
   486c0:	42000204 	addi	r8,r8,8
   486c4:	200b883a 	mov	r5,r4
   486c8:	843ffc04 	addi	r16,r16,-16
   486cc:	9c000d0e 	bge	r19,r16,48704 <___vfiprintf_internal_r+0x6e0>
   486d0:	18c00404 	addi	r3,r3,16
   486d4:	29000044 	addi	r4,r5,1
   486d8:	44400015 	stw	r17,0(r8)
   486dc:	44c00115 	stw	r19,4(r8)
   486e0:	d8c11c15 	stw	r3,1136(sp)
   486e4:	d9011b15 	stw	r4,1132(sp)
   486e8:	b13ff40e 	bge	r22,r4,486bc <__alt_data_end+0xfffd2b5c>
   486ec:	1801321e 	bne	r3,zero,48bb8 <___vfiprintf_internal_r+0xb94>
   486f0:	843ffc04 	addi	r16,r16,-16
   486f4:	000b883a 	mov	r5,zero
   486f8:	00800044 	movi	r2,1
   486fc:	d811883a 	mov	r8,sp
   48700:	9c3ff316 	blt	r19,r16,486d0 <__alt_data_end+0xfffd2b70>
   48704:	d9012617 	ldw	r4,1176(sp)
   48708:	1c07883a 	add	r3,r3,r16
   4870c:	44000115 	stw	r16,4(r8)
   48710:	41000015 	stw	r4,0(r8)
   48714:	d8c11c15 	stw	r3,1136(sp)
   48718:	d8811b15 	stw	r2,1132(sp)
   4871c:	010001c4 	movi	r4,7
   48720:	20816216 	blt	r4,r2,48cac <___vfiprintf_internal_r+0xc88>
   48724:	42000204 	addi	r8,r8,8
   48728:	10800044 	addi	r2,r2,1
   4872c:	d9012217 	ldw	r4,1160(sp)
   48730:	1d07883a 	add	r3,r3,r20
   48734:	45000115 	stw	r20,4(r8)
   48738:	41000015 	stw	r4,0(r8)
   4873c:	d8c11c15 	stw	r3,1136(sp)
   48740:	d8811b15 	stw	r2,1132(sp)
   48744:	010001c4 	movi	r4,7
   48748:	2081610e 	bge	r4,r2,48cd0 <___vfiprintf_internal_r+0xcac>
   4874c:	1802211e 	bne	r3,zero,48fd4 <___vfiprintf_internal_r+0xfb0>
   48750:	d8011b15 	stw	zero,1132(sp)
   48754:	9480010c 	andi	r18,r18,4
   48758:	9002171e 	bne	r18,zero,48fb8 <___vfiprintf_internal_r+0xf94>
   4875c:	d9412417 	ldw	r5,1168(sp)
   48760:	a9433716 	blt	r21,r5,49440 <___vfiprintf_internal_r+0x141c>
   48764:	d8812517 	ldw	r2,1172(sp)
   48768:	1545883a 	add	r2,r2,r21
   4876c:	d8812515 	stw	r2,1172(sp)
   48770:	00019a06 	br	48ddc <___vfiprintf_internal_r+0xdb8>
   48774:	d8c12317 	ldw	r3,1164(sp)
   48778:	05400044 	movi	r21,1
   4877c:	9811883a 	mov	r8,r19
   48780:	18800017 	ldw	r2,0(r3)
   48784:	18c00104 	addi	r3,r3,4
   48788:	d8c12315 	stw	r3,1164(sp)
   4878c:	d8c10004 	addi	r3,sp,1024
   48790:	d8011d85 	stb	zero,1142(sp)
   48794:	d8810005 	stb	r2,1024(sp)
   48798:	a829883a 	mov	r20,r21
   4879c:	d8c12215 	stw	r3,1160(sp)
   487a0:	0021883a 	mov	r16,zero
   487a4:	003f7806 	br	48588 <__alt_data_end+0xfffd2a28>
   487a8:	94800414 	ori	r18,r18,16
   487ac:	9080080c 	andi	r2,r18,32
   487b0:	9811883a 	mov	r8,r19
   487b4:	10009026 	beq	r2,zero,489f8 <___vfiprintf_internal_r+0x9d4>
   487b8:	d8812317 	ldw	r2,1164(sp)
   487bc:	d8c12317 	ldw	r3,1164(sp)
   487c0:	14c00017 	ldw	r19,0(r2)
   487c4:	15400117 	ldw	r21,4(r2)
   487c8:	18c00204 	addi	r3,r3,8
   487cc:	d8c12315 	stw	r3,1164(sp)
   487d0:	0005883a 	mov	r2,zero
   487d4:	9d46b03a 	or	r3,r19,r21
   487d8:	d8011d85 	stb	zero,1142(sp)
   487dc:	8029883a 	mov	r20,r16
   487e0:	002d883a 	mov	r22,zero
   487e4:	003f4606 	br	48500 <__alt_data_end+0xfffd29a0>
   487e8:	94800414 	ori	r18,r18,16
   487ec:	9080080c 	andi	r2,r18,32
   487f0:	9811883a 	mov	r8,r19
   487f4:	10006226 	beq	r2,zero,48980 <___vfiprintf_internal_r+0x95c>
   487f8:	d9012317 	ldw	r4,1164(sp)
   487fc:	00800044 	movi	r2,1
   48800:	24c00017 	ldw	r19,0(r4)
   48804:	25400117 	ldw	r21,4(r4)
   48808:	21000204 	addi	r4,r4,8
   4880c:	d9012315 	stw	r4,1164(sp)
   48810:	9d46b03a 	or	r3,r19,r21
   48814:	003ff006 	br	487d8 <__alt_data_end+0xfffd2c78>
   48818:	b9800007 	ldb	r6,0(r23)
   4881c:	00801b04 	movi	r2,108
   48820:	3082b226 	beq	r6,r2,492ec <___vfiprintf_internal_r+0x12c8>
   48824:	94800414 	ori	r18,r18,16
   48828:	003e5f06 	br	481a8 <__alt_data_end+0xfffd2648>
   4882c:	d8c12203 	ldbu	r3,1160(sp)
   48830:	01000174 	movhi	r4,5
   48834:	21019d04 	addi	r4,r4,1652
   48838:	d8c11d85 	stb	r3,1142(sp)
   4883c:	d9012715 	stw	r4,1180(sp)
   48840:	90c0080c 	andi	r3,r18,32
   48844:	9811883a 	mov	r8,r19
   48848:	d8812317 	ldw	r2,1164(sp)
   4884c:	18005f26 	beq	r3,zero,489cc <___vfiprintf_internal_r+0x9a8>
   48850:	d9012317 	ldw	r4,1164(sp)
   48854:	14c00017 	ldw	r19,0(r2)
   48858:	15400117 	ldw	r21,4(r2)
   4885c:	21000204 	addi	r4,r4,8
   48860:	d9012315 	stw	r4,1164(sp)
   48864:	9080004c 	andi	r2,r18,1
   48868:	1001e226 	beq	r2,zero,48ff4 <___vfiprintf_internal_r+0xfd0>
   4886c:	9d46b03a 	or	r3,r19,r21
   48870:	18024e26 	beq	r3,zero,491ac <___vfiprintf_internal_r+0x1188>
   48874:	00800c04 	movi	r2,48
   48878:	d8811d05 	stb	r2,1140(sp)
   4887c:	d9811d45 	stb	r6,1141(sp)
   48880:	94800094 	ori	r18,r18,2
   48884:	00800084 	movi	r2,2
   48888:	003fd306 	br	487d8 <__alt_data_end+0xfffd2c78>
   4888c:	d9012317 	ldw	r4,1164(sp)
   48890:	d9412317 	ldw	r5,1164(sp)
   48894:	21000017 	ldw	r4,0(r4)
   48898:	28800104 	addi	r2,r5,4
   4889c:	d9012415 	stw	r4,1168(sp)
   488a0:	203eeb16 	blt	r4,zero,48450 <__alt_data_end+0xfffd28f0>
   488a4:	d8812315 	stw	r2,1164(sp)
   488a8:	b9800007 	ldb	r6,0(r23)
   488ac:	003e3e06 	br	481a8 <__alt_data_end+0xfffd2648>
   488b0:	b9800007 	ldb	r6,0(r23)
   488b4:	01000a84 	movi	r4,42
   488b8:	b8800044 	addi	r2,r23,1
   488bc:	3102d226 	beq	r6,r4,49408 <___vfiprintf_internal_r+0x13e4>
   488c0:	35bff404 	addi	r22,r6,-48
   488c4:	102f883a 	mov	r23,r2
   488c8:	0021883a 	mov	r16,zero
   488cc:	adbe3736 	bltu	r21,r22,481ac <__alt_data_end+0xfffd264c>
   488d0:	0009883a 	mov	r4,zero
   488d4:	01400284 	movi	r5,10
   488d8:	004095c0 	call	4095c <__mulsi3>
   488dc:	b9800007 	ldb	r6,0(r23)
   488e0:	b089883a 	add	r4,r22,r2
   488e4:	bdc00044 	addi	r23,r23,1
   488e8:	35bff404 	addi	r22,r6,-48
   488ec:	adbff92e 	bgeu	r21,r22,488d4 <__alt_data_end+0xfffd2d74>
   488f0:	2021883a 	mov	r16,r4
   488f4:	203e2d0e 	bge	r4,zero,481ac <__alt_data_end+0xfffd264c>
   488f8:	043fffc4 	movi	r16,-1
   488fc:	003e2b06 	br	481ac <__alt_data_end+0xfffd264c>
   48900:	94801014 	ori	r18,r18,64
   48904:	b9800007 	ldb	r6,0(r23)
   48908:	003e2706 	br	481a8 <__alt_data_end+0xfffd2648>
   4890c:	94800814 	ori	r18,r18,32
   48910:	b9800007 	ldb	r6,0(r23)
   48914:	003e2406 	br	481a8 <__alt_data_end+0xfffd2648>
   48918:	d9412317 	ldw	r5,1164(sp)
   4891c:	d8812317 	ldw	r2,1164(sp)
   48920:	d8011d85 	stb	zero,1142(sp)
   48924:	29400017 	ldw	r5,0(r5)
   48928:	9811883a 	mov	r8,r19
   4892c:	14c00104 	addi	r19,r2,4
   48930:	d9412215 	stw	r5,1160(sp)
   48934:	28029026 	beq	r5,zero,49378 <___vfiprintf_internal_r+0x1354>
   48938:	d9012217 	ldw	r4,1160(sp)
   4893c:	80027616 	blt	r16,zero,49318 <___vfiprintf_internal_r+0x12f4>
   48940:	000b883a 	mov	r5,zero
   48944:	800d883a 	mov	r6,r16
   48948:	da012a15 	stw	r8,1192(sp)
   4894c:	00461e00 	call	461e0 <memchr>
   48950:	da012a17 	ldw	r8,1192(sp)
   48954:	1002a026 	beq	r2,zero,493d8 <___vfiprintf_internal_r+0x13b4>
   48958:	d8c12217 	ldw	r3,1160(sp)
   4895c:	10e9c83a 	sub	r20,r2,r3
   48960:	85023816 	blt	r16,r20,49244 <___vfiprintf_internal_r+0x1220>
   48964:	dd811d83 	ldbu	r22,1142(sp)
   48968:	dcc12315 	stw	r19,1164(sp)
   4896c:	0021883a 	mov	r16,zero
   48970:	003efd06 	br	48568 <__alt_data_end+0xfffd2a08>
   48974:	9080080c 	andi	r2,r18,32
   48978:	9811883a 	mov	r8,r19
   4897c:	103f9e1e 	bne	r2,zero,487f8 <__alt_data_end+0xfffd2c98>
   48980:	9080040c 	andi	r2,r18,16
   48984:	10021726 	beq	r2,zero,491e4 <___vfiprintf_internal_r+0x11c0>
   48988:	d9412317 	ldw	r5,1164(sp)
   4898c:	002b883a 	mov	r21,zero
   48990:	00800044 	movi	r2,1
   48994:	2cc00017 	ldw	r19,0(r5)
   48998:	29400104 	addi	r5,r5,4
   4899c:	d9412315 	stw	r5,1164(sp)
   489a0:	9807883a 	mov	r3,r19
   489a4:	003f8c06 	br	487d8 <__alt_data_end+0xfffd2c78>
   489a8:	d8c12203 	ldbu	r3,1160(sp)
   489ac:	01000174 	movhi	r4,5
   489b0:	2101a204 	addi	r4,r4,1672
   489b4:	d8c11d85 	stb	r3,1142(sp)
   489b8:	d9012715 	stw	r4,1180(sp)
   489bc:	90c0080c 	andi	r3,r18,32
   489c0:	9811883a 	mov	r8,r19
   489c4:	d8812317 	ldw	r2,1164(sp)
   489c8:	183fa11e 	bne	r3,zero,48850 <__alt_data_end+0xfffd2cf0>
   489cc:	90c0040c 	andi	r3,r18,16
   489d0:	1801e526 	beq	r3,zero,49168 <___vfiprintf_internal_r+0x1144>
   489d4:	d9412317 	ldw	r5,1164(sp)
   489d8:	14c00017 	ldw	r19,0(r2)
   489dc:	002b883a 	mov	r21,zero
   489e0:	29400104 	addi	r5,r5,4
   489e4:	d9412315 	stw	r5,1164(sp)
   489e8:	003f9e06 	br	48864 <__alt_data_end+0xfffd2d04>
   489ec:	9080080c 	andi	r2,r18,32
   489f0:	9811883a 	mov	r8,r19
   489f4:	103f701e 	bne	r2,zero,487b8 <__alt_data_end+0xfffd2c58>
   489f8:	9080040c 	andi	r2,r18,16
   489fc:	1001ef26 	beq	r2,zero,491bc <___vfiprintf_internal_r+0x1198>
   48a00:	d9012317 	ldw	r4,1164(sp)
   48a04:	002b883a 	mov	r21,zero
   48a08:	0005883a 	mov	r2,zero
   48a0c:	24c00017 	ldw	r19,0(r4)
   48a10:	21000104 	addi	r4,r4,4
   48a14:	d9012315 	stw	r4,1164(sp)
   48a18:	9807883a 	mov	r3,r19
   48a1c:	003f6e06 	br	487d8 <__alt_data_end+0xfffd2c78>
   48a20:	d8c12317 	ldw	r3,1164(sp)
   48a24:	9811883a 	mov	r8,r19
   48a28:	00800c04 	movi	r2,48
   48a2c:	1cc00017 	ldw	r19,0(r3)
   48a30:	01000174 	movhi	r4,5
   48a34:	18c00104 	addi	r3,r3,4
   48a38:	d8811d05 	stb	r2,1140(sp)
   48a3c:	2101a204 	addi	r4,r4,1672
   48a40:	00801e04 	movi	r2,120
   48a44:	d8811d45 	stb	r2,1141(sp)
   48a48:	d8c12315 	stw	r3,1164(sp)
   48a4c:	002b883a 	mov	r21,zero
   48a50:	94800094 	ori	r18,r18,2
   48a54:	d9012715 	stw	r4,1180(sp)
   48a58:	00800084 	movi	r2,2
   48a5c:	9807883a 	mov	r3,r19
   48a60:	003f5d06 	br	487d8 <__alt_data_end+0xfffd2c78>
   48a64:	d8c12203 	ldbu	r3,1160(sp)
   48a68:	9080080c 	andi	r2,r18,32
   48a6c:	9811883a 	mov	r8,r19
   48a70:	d8c11d85 	stb	r3,1142(sp)
   48a74:	1001b126 	beq	r2,zero,4913c <___vfiprintf_internal_r+0x1118>
   48a78:	d9012317 	ldw	r4,1164(sp)
   48a7c:	d9412517 	ldw	r5,1172(sp)
   48a80:	20800017 	ldw	r2,0(r4)
   48a84:	2807d7fa 	srai	r3,r5,31
   48a88:	21000104 	addi	r4,r4,4
   48a8c:	d9012315 	stw	r4,1164(sp)
   48a90:	11400015 	stw	r5,0(r2)
   48a94:	10c00115 	stw	r3,4(r2)
   48a98:	003d9a06 	br	48104 <__alt_data_end+0xfffd25a4>
   48a9c:	d8812207 	ldb	r2,1160(sp)
   48aa0:	1001c41e 	bne	r2,zero,491b4 <___vfiprintf_internal_r+0x1190>
   48aa4:	00c00804 	movi	r3,32
   48aa8:	d8c12205 	stb	r3,1160(sp)
   48aac:	b9800007 	ldb	r6,0(r23)
   48ab0:	003dbd06 	br	481a8 <__alt_data_end+0xfffd2648>
   48ab4:	00c00ac4 	movi	r3,43
   48ab8:	d8c12205 	stb	r3,1160(sp)
   48abc:	b9800007 	ldb	r6,0(r23)
   48ac0:	003db906 	br	481a8 <__alt_data_end+0xfffd2648>
   48ac4:	d8c12203 	ldbu	r3,1160(sp)
   48ac8:	9080080c 	andi	r2,r18,32
   48acc:	9811883a 	mov	r8,r19
   48ad0:	d8c11d85 	stb	r3,1142(sp)
   48ad4:	d8c12317 	ldw	r3,1164(sp)
   48ad8:	103e7e1e 	bne	r2,zero,484d4 <__alt_data_end+0xfffd2974>
   48adc:	9080040c 	andi	r2,r18,16
   48ae0:	1001a926 	beq	r2,zero,49188 <___vfiprintf_internal_r+0x1164>
   48ae4:	1cc00017 	ldw	r19,0(r3)
   48ae8:	d9412317 	ldw	r5,1164(sp)
   48aec:	982bd7fa 	srai	r21,r19,31
   48af0:	29400104 	addi	r5,r5,4
   48af4:	d9412315 	stw	r5,1164(sp)
   48af8:	a805883a 	mov	r2,r21
   48afc:	003e7b06 	br	484ec <__alt_data_end+0xfffd298c>
   48b00:	94800054 	ori	r18,r18,1
   48b04:	b9800007 	ldb	r6,0(r23)
   48b08:	003da706 	br	481a8 <__alt_data_end+0xfffd2648>
   48b0c:	d8c12203 	ldbu	r3,1160(sp)
   48b10:	9811883a 	mov	r8,r19
   48b14:	d8c11d85 	stb	r3,1142(sp)
   48b18:	30005826 	beq	r6,zero,48c7c <___vfiprintf_internal_r+0xc58>
   48b1c:	05400044 	movi	r21,1
   48b20:	d8c10004 	addi	r3,sp,1024
   48b24:	d9810005 	stb	r6,1024(sp)
   48b28:	d8011d85 	stb	zero,1142(sp)
   48b2c:	a829883a 	mov	r20,r21
   48b30:	d8c12215 	stw	r3,1160(sp)
   48b34:	003f1a06 	br	487a0 <__alt_data_end+0xfffd2c40>
   48b38:	d9012117 	ldw	r4,1156(sp)
   48b3c:	d9412017 	ldw	r5,1152(sp)
   48b40:	d9811a04 	addi	r6,sp,1128
   48b44:	d9c12a15 	stw	r7,1192(sp)
   48b48:	db012b15 	stw	r12,1196(sp)
   48b4c:	0047f100 	call	47f10 <__sprint_r.part.0>
   48b50:	d9c12a17 	ldw	r7,1192(sp)
   48b54:	db012b17 	ldw	r12,1196(sp)
   48b58:	10004e1e 	bne	r2,zero,48c94 <___vfiprintf_internal_r+0xc70>
   48b5c:	d9011b17 	ldw	r4,1132(sp)
   48b60:	d8c11c17 	ldw	r3,1136(sp)
   48b64:	d811883a 	mov	r8,sp
   48b68:	21400044 	addi	r5,r4,1
   48b6c:	003e9d06 	br	485e4 <__alt_data_end+0xfffd2a84>
   48b70:	d9411b17 	ldw	r5,1132(sp)
   48b74:	d8c11c17 	ldw	r3,1136(sp)
   48b78:	28800044 	addi	r2,r5,1
   48b7c:	d9011d87 	ldb	r4,1142(sp)
   48b80:	203eb626 	beq	r4,zero,4865c <__alt_data_end+0xfffd2afc>
   48b84:	01000044 	movi	r4,1
   48b88:	d9411d84 	addi	r5,sp,1142
   48b8c:	1907883a 	add	r3,r3,r4
   48b90:	41400015 	stw	r5,0(r8)
   48b94:	41000115 	stw	r4,4(r8)
   48b98:	d8c11c15 	stw	r3,1136(sp)
   48b9c:	d8811b15 	stw	r2,1132(sp)
   48ba0:	014001c4 	movi	r5,7
   48ba4:	2880ce16 	blt	r5,r2,48ee0 <___vfiprintf_internal_r+0xebc>
   48ba8:	100b883a 	mov	r5,r2
   48bac:	42000204 	addi	r8,r8,8
   48bb0:	10800044 	addi	r2,r2,1
   48bb4:	003ea906 	br	4865c <__alt_data_end+0xfffd2afc>
   48bb8:	d9012117 	ldw	r4,1156(sp)
   48bbc:	d9412017 	ldw	r5,1152(sp)
   48bc0:	d9811a04 	addi	r6,sp,1128
   48bc4:	0047f100 	call	47f10 <__sprint_r.part.0>
   48bc8:	1000321e 	bne	r2,zero,48c94 <___vfiprintf_internal_r+0xc70>
   48bcc:	d9411b17 	ldw	r5,1132(sp)
   48bd0:	d8c11c17 	ldw	r3,1136(sp)
   48bd4:	d811883a 	mov	r8,sp
   48bd8:	28800044 	addi	r2,r5,1
   48bdc:	003eba06 	br	486c8 <__alt_data_end+0xfffd2b68>
   48be0:	10803fcc 	andi	r2,r2,255
   48be4:	00c00044 	movi	r3,1
   48be8:	10fe4d1e 	bne	r2,r3,48520 <__alt_data_end+0xfffd29c0>
   48bec:	a800021e 	bne	r21,zero,48bf8 <___vfiprintf_internal_r+0xbd4>
   48bf0:	00800244 	movi	r2,9
   48bf4:	14c01b2e 	bgeu	r2,r19,48c64 <___vfiprintf_internal_r+0xc40>
   48bf8:	dc012215 	stw	r16,1160(sp)
   48bfc:	dd010a04 	addi	r20,sp,1064
   48c00:	a821883a 	mov	r16,r21
   48c04:	402b883a 	mov	r21,r8
   48c08:	9809883a 	mov	r4,r19
   48c0c:	800b883a 	mov	r5,r16
   48c10:	01800284 	movi	r6,10
   48c14:	000f883a 	mov	r7,zero
   48c18:	004a5040 	call	4a504 <__umoddi3>
   48c1c:	10800c04 	addi	r2,r2,48
   48c20:	a53fffc4 	addi	r20,r20,-1
   48c24:	9809883a 	mov	r4,r19
   48c28:	800b883a 	mov	r5,r16
   48c2c:	01800284 	movi	r6,10
   48c30:	000f883a 	mov	r7,zero
   48c34:	a0800005 	stb	r2,0(r20)
   48c38:	0049ec40 	call	49ec4 <__udivdi3>
   48c3c:	1027883a 	mov	r19,r2
   48c40:	10c4b03a 	or	r2,r2,r3
   48c44:	1821883a 	mov	r16,r3
   48c48:	103fef1e 	bne	r2,zero,48c08 <__alt_data_end+0xfffd30a8>
   48c4c:	d9011e17 	ldw	r4,1144(sp)
   48c50:	dc012217 	ldw	r16,1160(sp)
   48c54:	a811883a 	mov	r8,r21
   48c58:	dd012215 	stw	r20,1160(sp)
   48c5c:	2529c83a 	sub	r20,r4,r20
   48c60:	003e4106 	br	48568 <__alt_data_end+0xfffd2a08>
   48c64:	9cc00c04 	addi	r19,r19,48
   48c68:	d8c109c4 	addi	r3,sp,1063
   48c6c:	dcc109c5 	stb	r19,1063(sp)
   48c70:	dd012817 	ldw	r20,1184(sp)
   48c74:	d8c12215 	stw	r3,1160(sp)
   48c78:	003e3b06 	br	48568 <__alt_data_end+0xfffd2a08>
   48c7c:	d8811c17 	ldw	r2,1136(sp)
   48c80:	10000426 	beq	r2,zero,48c94 <___vfiprintf_internal_r+0xc70>
   48c84:	d9012117 	ldw	r4,1156(sp)
   48c88:	d9412017 	ldw	r5,1152(sp)
   48c8c:	d9811a04 	addi	r6,sp,1128
   48c90:	0047f100 	call	47f10 <__sprint_r.part.0>
   48c94:	d9412017 	ldw	r5,1152(sp)
   48c98:	2880030b 	ldhu	r2,12(r5)
   48c9c:	1080100c 	andi	r2,r2,64
   48ca0:	103ddc1e 	bne	r2,zero,48414 <__alt_data_end+0xfffd28b4>
   48ca4:	d8812517 	ldw	r2,1172(sp)
   48ca8:	003ddb06 	br	48418 <__alt_data_end+0xfffd28b8>
   48cac:	1801061e 	bne	r3,zero,490c8 <___vfiprintf_internal_r+0x10a4>
   48cb0:	d8c12217 	ldw	r3,1160(sp)
   48cb4:	00800044 	movi	r2,1
   48cb8:	dd000115 	stw	r20,4(sp)
   48cbc:	d8c00015 	stw	r3,0(sp)
   48cc0:	dd011c15 	stw	r20,1136(sp)
   48cc4:	d8811b15 	stw	r2,1132(sp)
   48cc8:	a007883a 	mov	r3,r20
   48ccc:	d811883a 	mov	r8,sp
   48cd0:	42000204 	addi	r8,r8,8
   48cd4:	9480010c 	andi	r18,r18,4
   48cd8:	90003426 	beq	r18,zero,48dac <___vfiprintf_internal_r+0xd88>
   48cdc:	d9412417 	ldw	r5,1168(sp)
   48ce0:	2d65c83a 	sub	r18,r5,r21
   48ce4:	0480310e 	bge	zero,r18,48dac <___vfiprintf_internal_r+0xd88>
   48ce8:	04000404 	movi	r16,16
   48cec:	8481ad0e 	bge	r16,r18,493a4 <___vfiprintf_internal_r+0x1380>
   48cf0:	01400174 	movhi	r5,5
   48cf4:	29420704 	addi	r5,r5,2076
   48cf8:	d9011b17 	ldw	r4,1132(sp)
   48cfc:	d9412615 	stw	r5,1176(sp)
   48d00:	04c001c4 	movi	r19,7
   48d04:	dd012117 	ldw	r20,1156(sp)
   48d08:	dd812017 	ldw	r22,1152(sp)
   48d0c:	00000506 	br	48d24 <___vfiprintf_internal_r+0xd00>
   48d10:	21400084 	addi	r5,r4,2
   48d14:	42000204 	addi	r8,r8,8
   48d18:	1009883a 	mov	r4,r2
   48d1c:	94bffc04 	addi	r18,r18,-16
   48d20:	84800d0e 	bge	r16,r18,48d58 <___vfiprintf_internal_r+0xd34>
   48d24:	18c00404 	addi	r3,r3,16
   48d28:	20800044 	addi	r2,r4,1
   48d2c:	47000015 	stw	fp,0(r8)
   48d30:	44000115 	stw	r16,4(r8)
   48d34:	d8c11c15 	stw	r3,1136(sp)
   48d38:	d8811b15 	stw	r2,1132(sp)
   48d3c:	98bff40e 	bge	r19,r2,48d10 <__alt_data_end+0xfffd31b0>
   48d40:	1800291e 	bne	r3,zero,48de8 <___vfiprintf_internal_r+0xdc4>
   48d44:	94bffc04 	addi	r18,r18,-16
   48d48:	0009883a 	mov	r4,zero
   48d4c:	01400044 	movi	r5,1
   48d50:	d811883a 	mov	r8,sp
   48d54:	84bff316 	blt	r16,r18,48d24 <__alt_data_end+0xfffd31c4>
   48d58:	d8812617 	ldw	r2,1176(sp)
   48d5c:	1c87883a 	add	r3,r3,r18
   48d60:	44800115 	stw	r18,4(r8)
   48d64:	40800015 	stw	r2,0(r8)
   48d68:	d8c11c15 	stw	r3,1136(sp)
   48d6c:	d9411b15 	stw	r5,1132(sp)
   48d70:	008001c4 	movi	r2,7
   48d74:	11400d0e 	bge	r2,r5,48dac <___vfiprintf_internal_r+0xd88>
   48d78:	1800061e 	bne	r3,zero,48d94 <___vfiprintf_internal_r+0xd70>
   48d7c:	d8c12417 	ldw	r3,1168(sp)
   48d80:	a8c12e16 	blt	r21,r3,4923c <___vfiprintf_internal_r+0x1218>
   48d84:	d9012517 	ldw	r4,1172(sp)
   48d88:	2549883a 	add	r4,r4,r21
   48d8c:	d9012515 	stw	r4,1172(sp)
   48d90:	00001206 	br	48ddc <___vfiprintf_internal_r+0xdb8>
   48d94:	d9012117 	ldw	r4,1156(sp)
   48d98:	d9412017 	ldw	r5,1152(sp)
   48d9c:	d9811a04 	addi	r6,sp,1128
   48da0:	0047f100 	call	47f10 <__sprint_r.part.0>
   48da4:	103fbb1e 	bne	r2,zero,48c94 <__alt_data_end+0xfffd3134>
   48da8:	d8c11c17 	ldw	r3,1136(sp)
   48dac:	d8812417 	ldw	r2,1168(sp)
   48db0:	a880010e 	bge	r21,r2,48db8 <___vfiprintf_internal_r+0xd94>
   48db4:	102b883a 	mov	r21,r2
   48db8:	d9012517 	ldw	r4,1172(sp)
   48dbc:	2549883a 	add	r4,r4,r21
   48dc0:	d9012515 	stw	r4,1172(sp)
   48dc4:	18000526 	beq	r3,zero,48ddc <___vfiprintf_internal_r+0xdb8>
   48dc8:	d9012117 	ldw	r4,1156(sp)
   48dcc:	d9412017 	ldw	r5,1152(sp)
   48dd0:	d9811a04 	addi	r6,sp,1128
   48dd4:	0047f100 	call	47f10 <__sprint_r.part.0>
   48dd8:	103fae1e 	bne	r2,zero,48c94 <__alt_data_end+0xfffd3134>
   48ddc:	d8011b15 	stw	zero,1132(sp)
   48de0:	d811883a 	mov	r8,sp
   48de4:	003cc706 	br	48104 <__alt_data_end+0xfffd25a4>
   48de8:	a009883a 	mov	r4,r20
   48dec:	b00b883a 	mov	r5,r22
   48df0:	d9811a04 	addi	r6,sp,1128
   48df4:	0047f100 	call	47f10 <__sprint_r.part.0>
   48df8:	103fa61e 	bne	r2,zero,48c94 <__alt_data_end+0xfffd3134>
   48dfc:	d9011b17 	ldw	r4,1132(sp)
   48e00:	d8c11c17 	ldw	r3,1136(sp)
   48e04:	d811883a 	mov	r8,sp
   48e08:	21400044 	addi	r5,r4,1
   48e0c:	003fc306 	br	48d1c <__alt_data_end+0xfffd31bc>
   48e10:	d9012417 	ldw	r4,1168(sp)
   48e14:	256dc83a 	sub	r22,r4,r21
   48e18:	05be1f0e 	bge	zero,r22,48698 <__alt_data_end+0xfffd2b38>
   48e1c:	04c00404 	movi	r19,16
   48e20:	9d81720e 	bge	r19,r22,493ec <___vfiprintf_internal_r+0x13c8>
   48e24:	00800174 	movhi	r2,5
   48e28:	10820304 	addi	r2,r2,2060
   48e2c:	d8812615 	stw	r2,1176(sp)
   48e30:	028001c4 	movi	r10,7
   48e34:	00000506 	br	48e4c <___vfiprintf_internal_r+0xe28>
   48e38:	29000084 	addi	r4,r5,2
   48e3c:	42000204 	addi	r8,r8,8
   48e40:	100b883a 	mov	r5,r2
   48e44:	b5bffc04 	addi	r22,r22,-16
   48e48:	9d800d0e 	bge	r19,r22,48e80 <___vfiprintf_internal_r+0xe5c>
   48e4c:	18c00404 	addi	r3,r3,16
   48e50:	28800044 	addi	r2,r5,1
   48e54:	44400015 	stw	r17,0(r8)
   48e58:	44c00115 	stw	r19,4(r8)
   48e5c:	d8c11c15 	stw	r3,1136(sp)
   48e60:	d8811b15 	stw	r2,1132(sp)
   48e64:	50bff40e 	bge	r10,r2,48e38 <__alt_data_end+0xfffd32d8>
   48e68:	1800111e 	bne	r3,zero,48eb0 <___vfiprintf_internal_r+0xe8c>
   48e6c:	b5bffc04 	addi	r22,r22,-16
   48e70:	000b883a 	mov	r5,zero
   48e74:	01000044 	movi	r4,1
   48e78:	d811883a 	mov	r8,sp
   48e7c:	9dbff316 	blt	r19,r22,48e4c <__alt_data_end+0xfffd32ec>
   48e80:	d9412617 	ldw	r5,1176(sp)
   48e84:	1d87883a 	add	r3,r3,r22
   48e88:	45800115 	stw	r22,4(r8)
   48e8c:	41400015 	stw	r5,0(r8)
   48e90:	d8c11c15 	stw	r3,1136(sp)
   48e94:	d9011b15 	stw	r4,1132(sp)
   48e98:	008001c4 	movi	r2,7
   48e9c:	11008516 	blt	r2,r4,490b4 <___vfiprintf_internal_r+0x1090>
   48ea0:	42000204 	addi	r8,r8,8
   48ea4:	20800044 	addi	r2,r4,1
   48ea8:	200b883a 	mov	r5,r4
   48eac:	003dfa06 	br	48698 <__alt_data_end+0xfffd2b38>
   48eb0:	d9012117 	ldw	r4,1156(sp)
   48eb4:	d9412017 	ldw	r5,1152(sp)
   48eb8:	d9811a04 	addi	r6,sp,1128
   48ebc:	da812a15 	stw	r10,1192(sp)
   48ec0:	0047f100 	call	47f10 <__sprint_r.part.0>
   48ec4:	da812a17 	ldw	r10,1192(sp)
   48ec8:	103f721e 	bne	r2,zero,48c94 <__alt_data_end+0xfffd3134>
   48ecc:	d9411b17 	ldw	r5,1132(sp)
   48ed0:	d8c11c17 	ldw	r3,1136(sp)
   48ed4:	d811883a 	mov	r8,sp
   48ed8:	29000044 	addi	r4,r5,1
   48edc:	003fd906 	br	48e44 <__alt_data_end+0xfffd32e4>
   48ee0:	1800681e 	bne	r3,zero,49084 <___vfiprintf_internal_r+0x1060>
   48ee4:	50004d26 	beq	r10,zero,4901c <___vfiprintf_internal_r+0xff8>
   48ee8:	d8811d04 	addi	r2,sp,1140
   48eec:	00c00084 	movi	r3,2
   48ef0:	d8800015 	stw	r2,0(sp)
   48ef4:	d8c00115 	stw	r3,4(sp)
   48ef8:	2005883a 	mov	r2,r4
   48efc:	d811883a 	mov	r8,sp
   48f00:	003de006 	br	48684 <__alt_data_end+0xfffd2b24>
   48f04:	1800551e 	bne	r3,zero,4905c <___vfiprintf_internal_r+0x1038>
   48f08:	000b883a 	mov	r5,zero
   48f0c:	00800044 	movi	r2,1
   48f10:	d811883a 	mov	r8,sp
   48f14:	003dde06 	br	48690 <__alt_data_end+0xfffd2b30>
   48f18:	10803fcc 	andi	r2,r2,255
   48f1c:	1000191e 	bne	r2,zero,48f84 <___vfiprintf_internal_r+0xf60>
   48f20:	9080004c 	andi	r2,r18,1
   48f24:	10001726 	beq	r2,zero,48f84 <___vfiprintf_internal_r+0xf60>
   48f28:	00800c04 	movi	r2,48
   48f2c:	d8c109c4 	addi	r3,sp,1063
   48f30:	d88109c5 	stb	r2,1063(sp)
   48f34:	dd012817 	ldw	r20,1184(sp)
   48f38:	d8c12215 	stw	r3,1160(sp)
   48f3c:	003d8a06 	br	48568 <__alt_data_end+0xfffd2a08>
   48f40:	d9012717 	ldw	r4,1180(sp)
   48f44:	dd010a04 	addi	r20,sp,1064
   48f48:	988003cc 	andi	r2,r19,15
   48f4c:	a806973a 	slli	r3,r21,28
   48f50:	2085883a 	add	r2,r4,r2
   48f54:	9826d13a 	srli	r19,r19,4
   48f58:	10800003 	ldbu	r2,0(r2)
   48f5c:	a82ad13a 	srli	r21,r21,4
   48f60:	a53fffc4 	addi	r20,r20,-1
   48f64:	1ce6b03a 	or	r19,r3,r19
   48f68:	a0800005 	stb	r2,0(r20)
   48f6c:	9d44b03a 	or	r2,r19,r21
   48f70:	103ff51e 	bne	r2,zero,48f48 <__alt_data_end+0xfffd33e8>
   48f74:	d9411e17 	ldw	r5,1144(sp)
   48f78:	dd012215 	stw	r20,1160(sp)
   48f7c:	2d29c83a 	sub	r20,r5,r20
   48f80:	003d7906 	br	48568 <__alt_data_end+0xfffd2a08>
   48f84:	d8c10a04 	addi	r3,sp,1064
   48f88:	d8c12215 	stw	r3,1160(sp)
   48f8c:	003d7606 	br	48568 <__alt_data_end+0xfffd2a08>
   48f90:	18009e1e 	bne	r3,zero,4920c <___vfiprintf_internal_r+0x11e8>
   48f94:	d8811d87 	ldb	r2,1142(sp)
   48f98:	10005f26 	beq	r2,zero,49118 <___vfiprintf_internal_r+0x10f4>
   48f9c:	00c00044 	movi	r3,1
   48fa0:	d9011d84 	addi	r4,sp,1142
   48fa4:	1805883a 	mov	r2,r3
   48fa8:	d9000015 	stw	r4,0(sp)
   48fac:	d8c00115 	stw	r3,4(sp)
   48fb0:	d811883a 	mov	r8,sp
   48fb4:	003efc06 	br	48ba8 <__alt_data_end+0xfffd3048>
   48fb8:	d9412417 	ldw	r5,1168(sp)
   48fbc:	d811883a 	mov	r8,sp
   48fc0:	2d65c83a 	sub	r18,r5,r21
   48fc4:	04bf4816 	blt	zero,r18,48ce8 <__alt_data_end+0xfffd3188>
   48fc8:	003f6c06 	br	48d7c <__alt_data_end+0xfffd321c>
   48fcc:	b829883a 	mov	r20,r23
   48fd0:	003c6906 	br	48178 <__alt_data_end+0xfffd2618>
   48fd4:	d9012117 	ldw	r4,1156(sp)
   48fd8:	d9412017 	ldw	r5,1152(sp)
   48fdc:	d9811a04 	addi	r6,sp,1128
   48fe0:	0047f100 	call	47f10 <__sprint_r.part.0>
   48fe4:	103f2b1e 	bne	r2,zero,48c94 <__alt_data_end+0xfffd3134>
   48fe8:	d8c11c17 	ldw	r3,1136(sp)
   48fec:	d811883a 	mov	r8,sp
   48ff0:	003f3806 	br	48cd4 <__alt_data_end+0xfffd3174>
   48ff4:	00800084 	movi	r2,2
   48ff8:	9d46b03a 	or	r3,r19,r21
   48ffc:	003df606 	br	487d8 <__alt_data_end+0xfffd2c78>
   49000:	d9012117 	ldw	r4,1156(sp)
   49004:	d9412017 	ldw	r5,1152(sp)
   49008:	d9811a04 	addi	r6,sp,1128
   4900c:	0047f100 	call	47f10 <__sprint_r.part.0>
   49010:	103f201e 	bne	r2,zero,48c94 <__alt_data_end+0xfffd3134>
   49014:	d811883a 	mov	r8,sp
   49018:	003cc606 	br	48334 <__alt_data_end+0xfffd27d4>
   4901c:	000b883a 	mov	r5,zero
   49020:	2005883a 	mov	r2,r4
   49024:	d811883a 	mov	r8,sp
   49028:	003d9906 	br	48690 <__alt_data_end+0xfffd2b30>
   4902c:	10803fcc 	andi	r2,r2,255
   49030:	1080201c 	xori	r2,r2,128
   49034:	10bfe004 	addi	r2,r2,-128
   49038:	01000c04 	movi	r4,48
   4903c:	1100b226 	beq	r2,r4,49308 <___vfiprintf_internal_r+0x12e4>
   49040:	d9412217 	ldw	r5,1160(sp)
   49044:	d8811e17 	ldw	r2,1144(sp)
   49048:	193fffc5 	stb	r4,-1(r3)
   4904c:	297fffc4 	addi	r5,r5,-1
   49050:	d9412215 	stw	r5,1160(sp)
   49054:	1169c83a 	sub	r20,r2,r5
   49058:	003d4306 	br	48568 <__alt_data_end+0xfffd2a08>
   4905c:	d9012117 	ldw	r4,1156(sp)
   49060:	d9412017 	ldw	r5,1152(sp)
   49064:	d9811a04 	addi	r6,sp,1128
   49068:	0047f100 	call	47f10 <__sprint_r.part.0>
   4906c:	103f091e 	bne	r2,zero,48c94 <__alt_data_end+0xfffd3134>
   49070:	d9411b17 	ldw	r5,1132(sp)
   49074:	d8c11c17 	ldw	r3,1136(sp)
   49078:	d811883a 	mov	r8,sp
   4907c:	28800044 	addi	r2,r5,1
   49080:	003d8306 	br	48690 <__alt_data_end+0xfffd2b30>
   49084:	d9012117 	ldw	r4,1156(sp)
   49088:	d9412017 	ldw	r5,1152(sp)
   4908c:	d9811a04 	addi	r6,sp,1128
   49090:	da812a15 	stw	r10,1192(sp)
   49094:	0047f100 	call	47f10 <__sprint_r.part.0>
   49098:	da812a17 	ldw	r10,1192(sp)
   4909c:	103efd1e 	bne	r2,zero,48c94 <__alt_data_end+0xfffd3134>
   490a0:	d9411b17 	ldw	r5,1132(sp)
   490a4:	d8c11c17 	ldw	r3,1136(sp)
   490a8:	d811883a 	mov	r8,sp
   490ac:	28800044 	addi	r2,r5,1
   490b0:	003d6a06 	br	4865c <__alt_data_end+0xfffd2afc>
   490b4:	1800a01e 	bne	r3,zero,49338 <___vfiprintf_internal_r+0x1314>
   490b8:	000b883a 	mov	r5,zero
   490bc:	00800044 	movi	r2,1
   490c0:	d811883a 	mov	r8,sp
   490c4:	003d7406 	br	48698 <__alt_data_end+0xfffd2b38>
   490c8:	d9012117 	ldw	r4,1156(sp)
   490cc:	d9412017 	ldw	r5,1152(sp)
   490d0:	d9811a04 	addi	r6,sp,1128
   490d4:	0047f100 	call	47f10 <__sprint_r.part.0>
   490d8:	103eee1e 	bne	r2,zero,48c94 <__alt_data_end+0xfffd3134>
   490dc:	d8811b17 	ldw	r2,1132(sp)
   490e0:	d8c11c17 	ldw	r3,1136(sp)
   490e4:	d811883a 	mov	r8,sp
   490e8:	10800044 	addi	r2,r2,1
   490ec:	003d8f06 	br	4872c <__alt_data_end+0xfffd2bcc>
   490f0:	04e7c83a 	sub	r19,zero,r19
   490f4:	9804c03a 	cmpne	r2,r19,zero
   490f8:	056bc83a 	sub	r21,zero,r21
   490fc:	a8abc83a 	sub	r21,r21,r2
   49100:	05800b44 	movi	r22,45
   49104:	dd811d85 	stb	r22,1142(sp)
   49108:	8029883a 	mov	r20,r16
   4910c:	00800044 	movi	r2,1
   49110:	9d46b03a 	or	r3,r19,r21
   49114:	003cfa06 	br	48500 <__alt_data_end+0xfffd29a0>
   49118:	000b883a 	mov	r5,zero
   4911c:	00800044 	movi	r2,1
   49120:	d811883a 	mov	r8,sp
   49124:	503d5a26 	beq	r10,zero,48690 <__alt_data_end+0xfffd2b30>
   49128:	00c00084 	movi	r3,2
   4912c:	d9011d04 	addi	r4,sp,1140
   49130:	d9000015 	stw	r4,0(sp)
   49134:	d8c00115 	stw	r3,4(sp)
   49138:	003d5206 	br	48684 <__alt_data_end+0xfffd2b24>
   4913c:	9080040c 	andi	r2,r18,16
   49140:	1000421e 	bne	r2,zero,4924c <___vfiprintf_internal_r+0x1228>
   49144:	9480100c 	andi	r18,r18,64
   49148:	90009c26 	beq	r18,zero,493bc <___vfiprintf_internal_r+0x1398>
   4914c:	d9412317 	ldw	r5,1164(sp)
   49150:	d8c12517 	ldw	r3,1172(sp)
   49154:	28800017 	ldw	r2,0(r5)
   49158:	29400104 	addi	r5,r5,4
   4915c:	d9412315 	stw	r5,1164(sp)
   49160:	10c0000d 	sth	r3,0(r2)
   49164:	003be706 	br	48104 <__alt_data_end+0xfffd25a4>
   49168:	90c0100c 	andi	r3,r18,64
   4916c:	18003e26 	beq	r3,zero,49268 <___vfiprintf_internal_r+0x1244>
   49170:	d8c12317 	ldw	r3,1164(sp)
   49174:	14c0000b 	ldhu	r19,0(r2)
   49178:	002b883a 	mov	r21,zero
   4917c:	18c00104 	addi	r3,r3,4
   49180:	d8c12315 	stw	r3,1164(sp)
   49184:	003db706 	br	48864 <__alt_data_end+0xfffd2d04>
   49188:	9080100c 	andi	r2,r18,64
   4918c:	10004c26 	beq	r2,zero,492c0 <___vfiprintf_internal_r+0x129c>
   49190:	1cc0000f 	ldh	r19,0(r3)
   49194:	d8812317 	ldw	r2,1164(sp)
   49198:	982bd7fa 	srai	r21,r19,31
   4919c:	10800104 	addi	r2,r2,4
   491a0:	d8812315 	stw	r2,1164(sp)
   491a4:	a805883a 	mov	r2,r21
   491a8:	003cd006 	br	484ec <__alt_data_end+0xfffd298c>
   491ac:	00800084 	movi	r2,2
   491b0:	003d8906 	br	487d8 <__alt_data_end+0xfffd2c78>
   491b4:	b9800007 	ldb	r6,0(r23)
   491b8:	003bfb06 	br	481a8 <__alt_data_end+0xfffd2648>
   491bc:	9080100c 	andi	r2,r18,64
   491c0:	10003726 	beq	r2,zero,492a0 <___vfiprintf_internal_r+0x127c>
   491c4:	d9412317 	ldw	r5,1164(sp)
   491c8:	002b883a 	mov	r21,zero
   491cc:	0005883a 	mov	r2,zero
   491d0:	2cc0000b 	ldhu	r19,0(r5)
   491d4:	29400104 	addi	r5,r5,4
   491d8:	d9412315 	stw	r5,1164(sp)
   491dc:	9807883a 	mov	r3,r19
   491e0:	003d7d06 	br	487d8 <__alt_data_end+0xfffd2c78>
   491e4:	9080100c 	andi	r2,r18,64
   491e8:	10002526 	beq	r2,zero,49280 <___vfiprintf_internal_r+0x125c>
   491ec:	d8812317 	ldw	r2,1164(sp)
   491f0:	002b883a 	mov	r21,zero
   491f4:	14c0000b 	ldhu	r19,0(r2)
   491f8:	10800104 	addi	r2,r2,4
   491fc:	d8812315 	stw	r2,1164(sp)
   49200:	9807883a 	mov	r3,r19
   49204:	00800044 	movi	r2,1
   49208:	003d7306 	br	487d8 <__alt_data_end+0xfffd2c78>
   4920c:	d9012117 	ldw	r4,1156(sp)
   49210:	d9412017 	ldw	r5,1152(sp)
   49214:	d9811a04 	addi	r6,sp,1128
   49218:	da812a15 	stw	r10,1192(sp)
   4921c:	0047f100 	call	47f10 <__sprint_r.part.0>
   49220:	da812a17 	ldw	r10,1192(sp)
   49224:	103e9b1e 	bne	r2,zero,48c94 <__alt_data_end+0xfffd3134>
   49228:	d9411b17 	ldw	r5,1132(sp)
   4922c:	d8c11c17 	ldw	r3,1136(sp)
   49230:	d811883a 	mov	r8,sp
   49234:	28800044 	addi	r2,r5,1
   49238:	003e5006 	br	48b7c <__alt_data_end+0xfffd301c>
   4923c:	182b883a 	mov	r21,r3
   49240:	003ed006 	br	48d84 <__alt_data_end+0xfffd3224>
   49244:	8029883a 	mov	r20,r16
   49248:	003dc606 	br	48964 <__alt_data_end+0xfffd2e04>
   4924c:	d8c12317 	ldw	r3,1164(sp)
   49250:	d9012517 	ldw	r4,1172(sp)
   49254:	18800017 	ldw	r2,0(r3)
   49258:	18c00104 	addi	r3,r3,4
   4925c:	d8c12315 	stw	r3,1164(sp)
   49260:	11000015 	stw	r4,0(r2)
   49264:	003ba706 	br	48104 <__alt_data_end+0xfffd25a4>
   49268:	d9012317 	ldw	r4,1164(sp)
   4926c:	14c00017 	ldw	r19,0(r2)
   49270:	002b883a 	mov	r21,zero
   49274:	21000104 	addi	r4,r4,4
   49278:	d9012315 	stw	r4,1164(sp)
   4927c:	003d7906 	br	48864 <__alt_data_end+0xfffd2d04>
   49280:	d8c12317 	ldw	r3,1164(sp)
   49284:	002b883a 	mov	r21,zero
   49288:	00800044 	movi	r2,1
   4928c:	1cc00017 	ldw	r19,0(r3)
   49290:	18c00104 	addi	r3,r3,4
   49294:	d8c12315 	stw	r3,1164(sp)
   49298:	9807883a 	mov	r3,r19
   4929c:	003d4e06 	br	487d8 <__alt_data_end+0xfffd2c78>
   492a0:	d8812317 	ldw	r2,1164(sp)
   492a4:	002b883a 	mov	r21,zero
   492a8:	14c00017 	ldw	r19,0(r2)
   492ac:	10800104 	addi	r2,r2,4
   492b0:	d8812315 	stw	r2,1164(sp)
   492b4:	9807883a 	mov	r3,r19
   492b8:	0005883a 	mov	r2,zero
   492bc:	003d4606 	br	487d8 <__alt_data_end+0xfffd2c78>
   492c0:	1cc00017 	ldw	r19,0(r3)
   492c4:	d8c12317 	ldw	r3,1164(sp)
   492c8:	982bd7fa 	srai	r21,r19,31
   492cc:	18c00104 	addi	r3,r3,4
   492d0:	d8c12315 	stw	r3,1164(sp)
   492d4:	a805883a 	mov	r2,r21
   492d8:	003c8406 	br	484ec <__alt_data_end+0xfffd298c>
   492dc:	01000174 	movhi	r4,5
   492e0:	21020304 	addi	r4,r4,2060
   492e4:	d9012615 	stw	r4,1176(sp)
   492e8:	003d0606 	br	48704 <__alt_data_end+0xfffd2ba4>
   492ec:	b9800043 	ldbu	r6,1(r23)
   492f0:	94800814 	ori	r18,r18,32
   492f4:	bdc00044 	addi	r23,r23,1
   492f8:	31803fcc 	andi	r6,r6,255
   492fc:	3180201c 	xori	r6,r6,128
   49300:	31bfe004 	addi	r6,r6,-128
   49304:	003ba806 	br	481a8 <__alt_data_end+0xfffd2648>
   49308:	d8811e17 	ldw	r2,1144(sp)
   4930c:	d8c12217 	ldw	r3,1160(sp)
   49310:	10e9c83a 	sub	r20,r2,r3
   49314:	003c9406 	br	48568 <__alt_data_end+0xfffd2a08>
   49318:	da012a15 	stw	r8,1192(sp)
   4931c:	0040b340 	call	40b34 <strlen>
   49320:	1029883a 	mov	r20,r2
   49324:	dd811d83 	ldbu	r22,1142(sp)
   49328:	dcc12315 	stw	r19,1164(sp)
   4932c:	0021883a 	mov	r16,zero
   49330:	da012a17 	ldw	r8,1192(sp)
   49334:	003c8c06 	br	48568 <__alt_data_end+0xfffd2a08>
   49338:	d9012117 	ldw	r4,1156(sp)
   4933c:	d9412017 	ldw	r5,1152(sp)
   49340:	d9811a04 	addi	r6,sp,1128
   49344:	0047f100 	call	47f10 <__sprint_r.part.0>
   49348:	103e521e 	bne	r2,zero,48c94 <__alt_data_end+0xfffd3134>
   4934c:	d9411b17 	ldw	r5,1132(sp)
   49350:	d8c11c17 	ldw	r3,1136(sp)
   49354:	d811883a 	mov	r8,sp
   49358:	28800044 	addi	r2,r5,1
   4935c:	003cce06 	br	48698 <__alt_data_end+0xfffd2b38>
   49360:	01400174 	movhi	r5,5
   49364:	29420704 	addi	r5,r5,2076
   49368:	d9412615 	stw	r5,1176(sp)
   4936c:	d9411b17 	ldw	r5,1132(sp)
   49370:	29400044 	addi	r5,r5,1
   49374:	003cad06 	br	4862c <__alt_data_end+0xfffd2acc>
   49378:	00800184 	movi	r2,6
   4937c:	1400012e 	bgeu	r2,r16,49384 <___vfiprintf_internal_r+0x1360>
   49380:	1021883a 	mov	r16,r2
   49384:	8029883a 	mov	r20,r16
   49388:	802b883a 	mov	r21,r16
   4938c:	80001c16 	blt	r16,zero,49400 <___vfiprintf_internal_r+0x13dc>
   49390:	00c00174 	movhi	r3,5
   49394:	18c1a704 	addi	r3,r3,1692
   49398:	dcc12315 	stw	r19,1164(sp)
   4939c:	d8c12215 	stw	r3,1160(sp)
   493a0:	003cff06 	br	487a0 <__alt_data_end+0xfffd2c40>
   493a4:	d9411b17 	ldw	r5,1132(sp)
   493a8:	00800174 	movhi	r2,5
   493ac:	10820704 	addi	r2,r2,2076
   493b0:	d8812615 	stw	r2,1176(sp)
   493b4:	29400044 	addi	r5,r5,1
   493b8:	003e6706 	br	48d58 <__alt_data_end+0xfffd31f8>
   493bc:	d9012317 	ldw	r4,1164(sp)
   493c0:	d9412517 	ldw	r5,1172(sp)
   493c4:	20800017 	ldw	r2,0(r4)
   493c8:	21000104 	addi	r4,r4,4
   493cc:	d9012315 	stw	r4,1164(sp)
   493d0:	11400015 	stw	r5,0(r2)
   493d4:	003b4b06 	br	48104 <__alt_data_end+0xfffd25a4>
   493d8:	8029883a 	mov	r20,r16
   493dc:	dd811d83 	ldbu	r22,1142(sp)
   493e0:	dcc12315 	stw	r19,1164(sp)
   493e4:	0021883a 	mov	r16,zero
   493e8:	003c5f06 	br	48568 <__alt_data_end+0xfffd2a08>
   493ec:	01000174 	movhi	r4,5
   493f0:	21020304 	addi	r4,r4,2060
   493f4:	d9012615 	stw	r4,1176(sp)
   493f8:	1009883a 	mov	r4,r2
   493fc:	003ea006 	br	48e80 <__alt_data_end+0xfffd3320>
   49400:	002b883a 	mov	r21,zero
   49404:	003fe206 	br	49390 <__alt_data_end+0xfffd3830>
   49408:	d9412317 	ldw	r5,1164(sp)
   4940c:	b807883a 	mov	r3,r23
   49410:	102f883a 	mov	r23,r2
   49414:	2c000017 	ldw	r16,0(r5)
   49418:	29000104 	addi	r4,r5,4
   4941c:	d9012315 	stw	r4,1164(sp)
   49420:	80000416 	blt	r16,zero,49434 <___vfiprintf_internal_r+0x1410>
   49424:	19800047 	ldb	r6,1(r3)
   49428:	003b5f06 	br	481a8 <__alt_data_end+0xfffd2648>
   4942c:	043fffc4 	movi	r16,-1
   49430:	003bef06 	br	483f0 <__alt_data_end+0xfffd2890>
   49434:	043fffc4 	movi	r16,-1
   49438:	19800047 	ldb	r6,1(r3)
   4943c:	003b5a06 	br	481a8 <__alt_data_end+0xfffd2648>
   49440:	282b883a 	mov	r21,r5
   49444:	003cc706 	br	48764 <__alt_data_end+0xfffd2c04>

00049448 <__vfiprintf_internal>:
   49448:	2007883a 	mov	r3,r4
   4944c:	01000174 	movhi	r4,5
   49450:	21093604 	addi	r4,r4,9432
   49454:	21000017 	ldw	r4,0(r4)
   49458:	2805883a 	mov	r2,r5
   4945c:	300f883a 	mov	r7,r6
   49460:	180b883a 	mov	r5,r3
   49464:	100d883a 	mov	r6,r2
   49468:	00480241 	jmpi	48024 <___vfiprintf_internal_r>

0004946c <_write_r>:
   4946c:	defffd04 	addi	sp,sp,-12
   49470:	dc000015 	stw	r16,0(sp)
   49474:	04000174 	movhi	r16,5
   49478:	dc400115 	stw	r17,4(sp)
   4947c:	84103704 	addi	r16,r16,16604
   49480:	2023883a 	mov	r17,r4
   49484:	2809883a 	mov	r4,r5
   49488:	300b883a 	mov	r5,r6
   4948c:	380d883a 	mov	r6,r7
   49490:	dfc00215 	stw	ra,8(sp)
   49494:	80000015 	stw	zero,0(r16)
   49498:	004dc400 	call	4dc40 <write>
   4949c:	00ffffc4 	movi	r3,-1
   494a0:	10c00526 	beq	r2,r3,494b8 <_write_r+0x4c>
   494a4:	dfc00217 	ldw	ra,8(sp)
   494a8:	dc400117 	ldw	r17,4(sp)
   494ac:	dc000017 	ldw	r16,0(sp)
   494b0:	dec00304 	addi	sp,sp,12
   494b4:	f800283a 	ret
   494b8:	80c00017 	ldw	r3,0(r16)
   494bc:	183ff926 	beq	r3,zero,494a4 <__alt_data_end+0xfffd3944>
   494c0:	88c00015 	stw	r3,0(r17)
   494c4:	003ff706 	br	494a4 <__alt_data_end+0xfffd3944>

000494c8 <_close_r>:
   494c8:	defffd04 	addi	sp,sp,-12
   494cc:	dc000015 	stw	r16,0(sp)
   494d0:	04000174 	movhi	r16,5
   494d4:	dc400115 	stw	r17,4(sp)
   494d8:	84103704 	addi	r16,r16,16604
   494dc:	2023883a 	mov	r17,r4
   494e0:	2809883a 	mov	r4,r5
   494e4:	dfc00215 	stw	ra,8(sp)
   494e8:	80000015 	stw	zero,0(r16)
   494ec:	004d36c0 	call	4d36c <close>
   494f0:	00ffffc4 	movi	r3,-1
   494f4:	10c00526 	beq	r2,r3,4950c <_close_r+0x44>
   494f8:	dfc00217 	ldw	ra,8(sp)
   494fc:	dc400117 	ldw	r17,4(sp)
   49500:	dc000017 	ldw	r16,0(sp)
   49504:	dec00304 	addi	sp,sp,12
   49508:	f800283a 	ret
   4950c:	80c00017 	ldw	r3,0(r16)
   49510:	183ff926 	beq	r3,zero,494f8 <__alt_data_end+0xfffd3998>
   49514:	88c00015 	stw	r3,0(r17)
   49518:	003ff706 	br	494f8 <__alt_data_end+0xfffd3998>

0004951c <_calloc_r>:
   4951c:	defffe04 	addi	sp,sp,-8
   49520:	dc000015 	stw	r16,0(sp)
   49524:	2021883a 	mov	r16,r4
   49528:	2809883a 	mov	r4,r5
   4952c:	300b883a 	mov	r5,r6
   49530:	dfc00115 	stw	ra,4(sp)
   49534:	004095c0 	call	4095c <__mulsi3>
   49538:	8009883a 	mov	r4,r16
   4953c:	100b883a 	mov	r5,r2
   49540:	0045a380 	call	45a38 <_malloc_r>
   49544:	1021883a 	mov	r16,r2
   49548:	10002826 	beq	r2,zero,495ec <_calloc_r+0xd0>
   4954c:	11bfff17 	ldw	r6,-4(r2)
   49550:	00bfff04 	movi	r2,-4
   49554:	00c00904 	movi	r3,36
   49558:	308c703a 	and	r6,r6,r2
   4955c:	308d883a 	add	r6,r6,r2
   49560:	19801436 	bltu	r3,r6,495b4 <_calloc_r+0x98>
   49564:	008004c4 	movi	r2,19
   49568:	11800936 	bltu	r2,r6,49590 <_calloc_r+0x74>
   4956c:	8005883a 	mov	r2,r16
   49570:	10000015 	stw	zero,0(r2)
   49574:	10000115 	stw	zero,4(r2)
   49578:	10000215 	stw	zero,8(r2)
   4957c:	8005883a 	mov	r2,r16
   49580:	dfc00117 	ldw	ra,4(sp)
   49584:	dc000017 	ldw	r16,0(sp)
   49588:	dec00204 	addi	sp,sp,8
   4958c:	f800283a 	ret
   49590:	80000015 	stw	zero,0(r16)
   49594:	80000115 	stw	zero,4(r16)
   49598:	008006c4 	movi	r2,27
   4959c:	11800d2e 	bgeu	r2,r6,495d4 <_calloc_r+0xb8>
   495a0:	80000215 	stw	zero,8(r16)
   495a4:	80000315 	stw	zero,12(r16)
   495a8:	30c00c26 	beq	r6,r3,495dc <_calloc_r+0xc0>
   495ac:	80800404 	addi	r2,r16,16
   495b0:	003fef06 	br	49570 <__alt_data_end+0xfffd3a10>
   495b4:	8009883a 	mov	r4,r16
   495b8:	000b883a 	mov	r5,zero
   495bc:	004655c0 	call	4655c <memset>
   495c0:	8005883a 	mov	r2,r16
   495c4:	dfc00117 	ldw	ra,4(sp)
   495c8:	dc000017 	ldw	r16,0(sp)
   495cc:	dec00204 	addi	sp,sp,8
   495d0:	f800283a 	ret
   495d4:	80800204 	addi	r2,r16,8
   495d8:	003fe506 	br	49570 <__alt_data_end+0xfffd3a10>
   495dc:	80000415 	stw	zero,16(r16)
   495e0:	80800604 	addi	r2,r16,24
   495e4:	80000515 	stw	zero,20(r16)
   495e8:	003fe106 	br	49570 <__alt_data_end+0xfffd3a10>
   495ec:	0005883a 	mov	r2,zero
   495f0:	003fe306 	br	49580 <__alt_data_end+0xfffd3a20>

000495f4 <_fclose_r>:
   495f4:	28003226 	beq	r5,zero,496c0 <_fclose_r+0xcc>
   495f8:	defffc04 	addi	sp,sp,-16
   495fc:	dc400115 	stw	r17,4(sp)
   49600:	2023883a 	mov	r17,r4
   49604:	dc000015 	stw	r16,0(sp)
   49608:	dfc00315 	stw	ra,12(sp)
   4960c:	dc800215 	stw	r18,8(sp)
   49610:	2821883a 	mov	r16,r5
   49614:	0044d380 	call	44d38 <__sfp_lock_acquire>
   49618:	88000226 	beq	r17,zero,49624 <_fclose_r+0x30>
   4961c:	88800e17 	ldw	r2,56(r17)
   49620:	10002926 	beq	r2,zero,496c8 <_fclose_r+0xd4>
   49624:	8080030f 	ldh	r2,12(r16)
   49628:	10002226 	beq	r2,zero,496b4 <_fclose_r+0xc0>
   4962c:	8809883a 	mov	r4,r17
   49630:	800b883a 	mov	r5,r16
   49634:	004476c0 	call	4476c <_fflush_r>
   49638:	1025883a 	mov	r18,r2
   4963c:	80800b17 	ldw	r2,44(r16)
   49640:	10000426 	beq	r2,zero,49654 <_fclose_r+0x60>
   49644:	81400717 	ldw	r5,28(r16)
   49648:	8809883a 	mov	r4,r17
   4964c:	103ee83a 	callr	r2
   49650:	10002616 	blt	r2,zero,496ec <_fclose_r+0xf8>
   49654:	8080030b 	ldhu	r2,12(r16)
   49658:	1080200c 	andi	r2,r2,128
   4965c:	10001f1e 	bne	r2,zero,496dc <_fclose_r+0xe8>
   49660:	81400c17 	ldw	r5,48(r16)
   49664:	28000526 	beq	r5,zero,4967c <_fclose_r+0x88>
   49668:	80801004 	addi	r2,r16,64
   4966c:	28800226 	beq	r5,r2,49678 <_fclose_r+0x84>
   49670:	8809883a 	mov	r4,r17
   49674:	0044e9c0 	call	44e9c <_free_r>
   49678:	80000c15 	stw	zero,48(r16)
   4967c:	81401117 	ldw	r5,68(r16)
   49680:	28000326 	beq	r5,zero,49690 <_fclose_r+0x9c>
   49684:	8809883a 	mov	r4,r17
   49688:	0044e9c0 	call	44e9c <_free_r>
   4968c:	80001115 	stw	zero,68(r16)
   49690:	8000030d 	sth	zero,12(r16)
   49694:	0044d3c0 	call	44d3c <__sfp_lock_release>
   49698:	9005883a 	mov	r2,r18
   4969c:	dfc00317 	ldw	ra,12(sp)
   496a0:	dc800217 	ldw	r18,8(sp)
   496a4:	dc400117 	ldw	r17,4(sp)
   496a8:	dc000017 	ldw	r16,0(sp)
   496ac:	dec00404 	addi	sp,sp,16
   496b0:	f800283a 	ret
   496b4:	0044d3c0 	call	44d3c <__sfp_lock_release>
   496b8:	0005883a 	mov	r2,zero
   496bc:	003ff706 	br	4969c <__alt_data_end+0xfffd3b3c>
   496c0:	0005883a 	mov	r2,zero
   496c4:	f800283a 	ret
   496c8:	8809883a 	mov	r4,r17
   496cc:	0044d280 	call	44d28 <__sinit>
   496d0:	8080030f 	ldh	r2,12(r16)
   496d4:	103fd51e 	bne	r2,zero,4962c <__alt_data_end+0xfffd3acc>
   496d8:	003ff606 	br	496b4 <__alt_data_end+0xfffd3b54>
   496dc:	81400417 	ldw	r5,16(r16)
   496e0:	8809883a 	mov	r4,r17
   496e4:	0044e9c0 	call	44e9c <_free_r>
   496e8:	003fdd06 	br	49660 <__alt_data_end+0xfffd3b00>
   496ec:	04bfffc4 	movi	r18,-1
   496f0:	003fd806 	br	49654 <__alt_data_end+0xfffd3af4>

000496f4 <fclose>:
   496f4:	00800174 	movhi	r2,5
   496f8:	10893604 	addi	r2,r2,9432
   496fc:	200b883a 	mov	r5,r4
   49700:	11000017 	ldw	r4,0(r2)
   49704:	00495f41 	jmpi	495f4 <_fclose_r>

00049708 <_fputwc_r>:
   49708:	3080030b 	ldhu	r2,12(r6)
   4970c:	defff804 	addi	sp,sp,-32
   49710:	dcc00415 	stw	r19,16(sp)
   49714:	dc800315 	stw	r18,12(sp)
   49718:	dc000115 	stw	r16,4(sp)
   4971c:	dfc00715 	stw	ra,28(sp)
   49720:	dd400615 	stw	r21,24(sp)
   49724:	dd000515 	stw	r20,20(sp)
   49728:	dc400215 	stw	r17,8(sp)
   4972c:	10c8000c 	andi	r3,r2,8192
   49730:	3021883a 	mov	r16,r6
   49734:	2027883a 	mov	r19,r4
   49738:	2825883a 	mov	r18,r5
   4973c:	1800051e 	bne	r3,zero,49754 <_fputwc_r+0x4c>
   49740:	30c01917 	ldw	r3,100(r6)
   49744:	10880014 	ori	r2,r2,8192
   49748:	3080030d 	sth	r2,12(r6)
   4974c:	18880014 	ori	r2,r3,8192
   49750:	30801915 	stw	r2,100(r6)
   49754:	00458280 	call	45828 <__locale_mb_cur_max>
   49758:	00c00044 	movi	r3,1
   4975c:	10c03e26 	beq	r2,r3,49858 <_fputwc_r+0x150>
   49760:	9809883a 	mov	r4,r19
   49764:	d80b883a 	mov	r5,sp
   49768:	900d883a 	mov	r6,r18
   4976c:	81c01704 	addi	r7,r16,92
   49770:	0049bb80 	call	49bb8 <_wcrtomb_r>
   49774:	1029883a 	mov	r20,r2
   49778:	00bfffc4 	movi	r2,-1
   4977c:	a0802026 	beq	r20,r2,49800 <_fputwc_r+0xf8>
   49780:	d9400003 	ldbu	r5,0(sp)
   49784:	a0001c26 	beq	r20,zero,497f8 <_fputwc_r+0xf0>
   49788:	0023883a 	mov	r17,zero
   4978c:	05400284 	movi	r21,10
   49790:	00000906 	br	497b8 <_fputwc_r+0xb0>
   49794:	80800017 	ldw	r2,0(r16)
   49798:	11400005 	stb	r5,0(r2)
   4979c:	80c00017 	ldw	r3,0(r16)
   497a0:	18c00044 	addi	r3,r3,1
   497a4:	80c00015 	stw	r3,0(r16)
   497a8:	8c400044 	addi	r17,r17,1
   497ac:	dc45883a 	add	r2,sp,r17
   497b0:	8d00112e 	bgeu	r17,r20,497f8 <_fputwc_r+0xf0>
   497b4:	11400003 	ldbu	r5,0(r2)
   497b8:	80c00217 	ldw	r3,8(r16)
   497bc:	18ffffc4 	addi	r3,r3,-1
   497c0:	80c00215 	stw	r3,8(r16)
   497c4:	183ff30e 	bge	r3,zero,49794 <__alt_data_end+0xfffd3c34>
   497c8:	80800617 	ldw	r2,24(r16)
   497cc:	18801916 	blt	r3,r2,49834 <_fputwc_r+0x12c>
   497d0:	80800017 	ldw	r2,0(r16)
   497d4:	11400005 	stb	r5,0(r2)
   497d8:	80800017 	ldw	r2,0(r16)
   497dc:	10c00003 	ldbu	r3,0(r2)
   497e0:	10800044 	addi	r2,r2,1
   497e4:	1d402326 	beq	r3,r21,49874 <_fputwc_r+0x16c>
   497e8:	80800015 	stw	r2,0(r16)
   497ec:	8c400044 	addi	r17,r17,1
   497f0:	dc45883a 	add	r2,sp,r17
   497f4:	8d3fef36 	bltu	r17,r20,497b4 <__alt_data_end+0xfffd3c54>
   497f8:	9005883a 	mov	r2,r18
   497fc:	00000406 	br	49810 <_fputwc_r+0x108>
   49800:	80c0030b 	ldhu	r3,12(r16)
   49804:	a005883a 	mov	r2,r20
   49808:	18c01014 	ori	r3,r3,64
   4980c:	80c0030d 	sth	r3,12(r16)
   49810:	dfc00717 	ldw	ra,28(sp)
   49814:	dd400617 	ldw	r21,24(sp)
   49818:	dd000517 	ldw	r20,20(sp)
   4981c:	dcc00417 	ldw	r19,16(sp)
   49820:	dc800317 	ldw	r18,12(sp)
   49824:	dc400217 	ldw	r17,8(sp)
   49828:	dc000117 	ldw	r16,4(sp)
   4982c:	dec00804 	addi	sp,sp,32
   49830:	f800283a 	ret
   49834:	9809883a 	mov	r4,r19
   49838:	29403fcc 	andi	r5,r5,255
   4983c:	800d883a 	mov	r6,r16
   49840:	0049a480 	call	49a48 <__swbuf_r>
   49844:	10bfffe0 	cmpeqi	r2,r2,-1
   49848:	10803fcc 	andi	r2,r2,255
   4984c:	103fd626 	beq	r2,zero,497a8 <__alt_data_end+0xfffd3c48>
   49850:	00bfffc4 	movi	r2,-1
   49854:	003fee06 	br	49810 <__alt_data_end+0xfffd3cb0>
   49858:	90ffffc4 	addi	r3,r18,-1
   4985c:	01003f84 	movi	r4,254
   49860:	20ffbf36 	bltu	r4,r3,49760 <__alt_data_end+0xfffd3c00>
   49864:	900b883a 	mov	r5,r18
   49868:	dc800005 	stb	r18,0(sp)
   4986c:	1029883a 	mov	r20,r2
   49870:	003fc506 	br	49788 <__alt_data_end+0xfffd3c28>
   49874:	9809883a 	mov	r4,r19
   49878:	a80b883a 	mov	r5,r21
   4987c:	800d883a 	mov	r6,r16
   49880:	0049a480 	call	49a48 <__swbuf_r>
   49884:	10bfffe0 	cmpeqi	r2,r2,-1
   49888:	003fef06 	br	49848 <__alt_data_end+0xfffd3ce8>

0004988c <fputwc>:
   4988c:	defffc04 	addi	sp,sp,-16
   49890:	dc000115 	stw	r16,4(sp)
   49894:	04000174 	movhi	r16,5
   49898:	84093604 	addi	r16,r16,9432
   4989c:	dc400215 	stw	r17,8(sp)
   498a0:	2023883a 	mov	r17,r4
   498a4:	81000017 	ldw	r4,0(r16)
   498a8:	dfc00315 	stw	ra,12(sp)
   498ac:	280d883a 	mov	r6,r5
   498b0:	20000626 	beq	r4,zero,498cc <fputwc+0x40>
   498b4:	20800e17 	ldw	r2,56(r4)
   498b8:	1000041e 	bne	r2,zero,498cc <fputwc+0x40>
   498bc:	d9400015 	stw	r5,0(sp)
   498c0:	0044d280 	call	44d28 <__sinit>
   498c4:	81000017 	ldw	r4,0(r16)
   498c8:	d9800017 	ldw	r6,0(sp)
   498cc:	880b883a 	mov	r5,r17
   498d0:	dfc00317 	ldw	ra,12(sp)
   498d4:	dc400217 	ldw	r17,8(sp)
   498d8:	dc000117 	ldw	r16,4(sp)
   498dc:	dec00404 	addi	sp,sp,16
   498e0:	00497081 	jmpi	49708 <_fputwc_r>

000498e4 <_fstat_r>:
   498e4:	defffd04 	addi	sp,sp,-12
   498e8:	dc000015 	stw	r16,0(sp)
   498ec:	04000174 	movhi	r16,5
   498f0:	dc400115 	stw	r17,4(sp)
   498f4:	84103704 	addi	r16,r16,16604
   498f8:	2023883a 	mov	r17,r4
   498fc:	2809883a 	mov	r4,r5
   49900:	300b883a 	mov	r5,r6
   49904:	dfc00215 	stw	ra,8(sp)
   49908:	80000015 	stw	zero,0(r16)
   4990c:	004d4c00 	call	4d4c0 <fstat>
   49910:	00ffffc4 	movi	r3,-1
   49914:	10c00526 	beq	r2,r3,4992c <_fstat_r+0x48>
   49918:	dfc00217 	ldw	ra,8(sp)
   4991c:	dc400117 	ldw	r17,4(sp)
   49920:	dc000017 	ldw	r16,0(sp)
   49924:	dec00304 	addi	sp,sp,12
   49928:	f800283a 	ret
   4992c:	80c00017 	ldw	r3,0(r16)
   49930:	183ff926 	beq	r3,zero,49918 <__alt_data_end+0xfffd3db8>
   49934:	88c00015 	stw	r3,0(r17)
   49938:	003ff706 	br	49918 <__alt_data_end+0xfffd3db8>

0004993c <_isatty_r>:
   4993c:	defffd04 	addi	sp,sp,-12
   49940:	dc000015 	stw	r16,0(sp)
   49944:	04000174 	movhi	r16,5
   49948:	dc400115 	stw	r17,4(sp)
   4994c:	84103704 	addi	r16,r16,16604
   49950:	2023883a 	mov	r17,r4
   49954:	2809883a 	mov	r4,r5
   49958:	dfc00215 	stw	ra,8(sp)
   4995c:	80000015 	stw	zero,0(r16)
   49960:	004d5c80 	call	4d5c8 <isatty>
   49964:	00ffffc4 	movi	r3,-1
   49968:	10c00526 	beq	r2,r3,49980 <_isatty_r+0x44>
   4996c:	dfc00217 	ldw	ra,8(sp)
   49970:	dc400117 	ldw	r17,4(sp)
   49974:	dc000017 	ldw	r16,0(sp)
   49978:	dec00304 	addi	sp,sp,12
   4997c:	f800283a 	ret
   49980:	80c00017 	ldw	r3,0(r16)
   49984:	183ff926 	beq	r3,zero,4996c <__alt_data_end+0xfffd3e0c>
   49988:	88c00015 	stw	r3,0(r17)
   4998c:	003ff706 	br	4996c <__alt_data_end+0xfffd3e0c>

00049990 <_lseek_r>:
   49990:	defffd04 	addi	sp,sp,-12
   49994:	dc000015 	stw	r16,0(sp)
   49998:	04000174 	movhi	r16,5
   4999c:	dc400115 	stw	r17,4(sp)
   499a0:	84103704 	addi	r16,r16,16604
   499a4:	2023883a 	mov	r17,r4
   499a8:	2809883a 	mov	r4,r5
   499ac:	300b883a 	mov	r5,r6
   499b0:	380d883a 	mov	r6,r7
   499b4:	dfc00215 	stw	ra,8(sp)
   499b8:	80000015 	stw	zero,0(r16)
   499bc:	004d7a80 	call	4d7a8 <lseek>
   499c0:	00ffffc4 	movi	r3,-1
   499c4:	10c00526 	beq	r2,r3,499dc <_lseek_r+0x4c>
   499c8:	dfc00217 	ldw	ra,8(sp)
   499cc:	dc400117 	ldw	r17,4(sp)
   499d0:	dc000017 	ldw	r16,0(sp)
   499d4:	dec00304 	addi	sp,sp,12
   499d8:	f800283a 	ret
   499dc:	80c00017 	ldw	r3,0(r16)
   499e0:	183ff926 	beq	r3,zero,499c8 <__alt_data_end+0xfffd3e68>
   499e4:	88c00015 	stw	r3,0(r17)
   499e8:	003ff706 	br	499c8 <__alt_data_end+0xfffd3e68>

000499ec <_read_r>:
   499ec:	defffd04 	addi	sp,sp,-12
   499f0:	dc000015 	stw	r16,0(sp)
   499f4:	04000174 	movhi	r16,5
   499f8:	dc400115 	stw	r17,4(sp)
   499fc:	84103704 	addi	r16,r16,16604
   49a00:	2023883a 	mov	r17,r4
   49a04:	2809883a 	mov	r4,r5
   49a08:	300b883a 	mov	r5,r6
   49a0c:	380d883a 	mov	r6,r7
   49a10:	dfc00215 	stw	ra,8(sp)
   49a14:	80000015 	stw	zero,0(r16)
   49a18:	004d98c0 	call	4d98c <read>
   49a1c:	00ffffc4 	movi	r3,-1
   49a20:	10c00526 	beq	r2,r3,49a38 <_read_r+0x4c>
   49a24:	dfc00217 	ldw	ra,8(sp)
   49a28:	dc400117 	ldw	r17,4(sp)
   49a2c:	dc000017 	ldw	r16,0(sp)
   49a30:	dec00304 	addi	sp,sp,12
   49a34:	f800283a 	ret
   49a38:	80c00017 	ldw	r3,0(r16)
   49a3c:	183ff926 	beq	r3,zero,49a24 <__alt_data_end+0xfffd3ec4>
   49a40:	88c00015 	stw	r3,0(r17)
   49a44:	003ff706 	br	49a24 <__alt_data_end+0xfffd3ec4>

00049a48 <__swbuf_r>:
   49a48:	defffc04 	addi	sp,sp,-16
   49a4c:	dc800215 	stw	r18,8(sp)
   49a50:	dc400115 	stw	r17,4(sp)
   49a54:	dc000015 	stw	r16,0(sp)
   49a58:	dfc00315 	stw	ra,12(sp)
   49a5c:	2025883a 	mov	r18,r4
   49a60:	2823883a 	mov	r17,r5
   49a64:	3021883a 	mov	r16,r6
   49a68:	20000226 	beq	r4,zero,49a74 <__swbuf_r+0x2c>
   49a6c:	20800e17 	ldw	r2,56(r4)
   49a70:	10004126 	beq	r2,zero,49b78 <__swbuf_r+0x130>
   49a74:	80c00617 	ldw	r3,24(r16)
   49a78:	8180030b 	ldhu	r6,12(r16)
   49a7c:	80c00215 	stw	r3,8(r16)
   49a80:	30c0020c 	andi	r3,r6,8
   49a84:	18003526 	beq	r3,zero,49b5c <__swbuf_r+0x114>
   49a88:	80c00417 	ldw	r3,16(r16)
   49a8c:	18003326 	beq	r3,zero,49b5c <__swbuf_r+0x114>
   49a90:	3088000c 	andi	r2,r6,8192
   49a94:	8c403fcc 	andi	r17,r17,255
   49a98:	10001726 	beq	r2,zero,49af8 <__swbuf_r+0xb0>
   49a9c:	80800017 	ldw	r2,0(r16)
   49aa0:	81000517 	ldw	r4,20(r16)
   49aa4:	10c7c83a 	sub	r3,r2,r3
   49aa8:	19001d0e 	bge	r3,r4,49b20 <__swbuf_r+0xd8>
   49aac:	18c00044 	addi	r3,r3,1
   49ab0:	81400217 	ldw	r5,8(r16)
   49ab4:	11000044 	addi	r4,r2,1
   49ab8:	81000015 	stw	r4,0(r16)
   49abc:	297fffc4 	addi	r5,r5,-1
   49ac0:	81400215 	stw	r5,8(r16)
   49ac4:	14400005 	stb	r17,0(r2)
   49ac8:	80800517 	ldw	r2,20(r16)
   49acc:	10c01d26 	beq	r2,r3,49b44 <__swbuf_r+0xfc>
   49ad0:	8080030b 	ldhu	r2,12(r16)
   49ad4:	1080004c 	andi	r2,r2,1
   49ad8:	1000181e 	bne	r2,zero,49b3c <__swbuf_r+0xf4>
   49adc:	8805883a 	mov	r2,r17
   49ae0:	dfc00317 	ldw	ra,12(sp)
   49ae4:	dc800217 	ldw	r18,8(sp)
   49ae8:	dc400117 	ldw	r17,4(sp)
   49aec:	dc000017 	ldw	r16,0(sp)
   49af0:	dec00404 	addi	sp,sp,16
   49af4:	f800283a 	ret
   49af8:	81001917 	ldw	r4,100(r16)
   49afc:	00b7ffc4 	movi	r2,-8193
   49b00:	31880014 	ori	r6,r6,8192
   49b04:	2084703a 	and	r2,r4,r2
   49b08:	80801915 	stw	r2,100(r16)
   49b0c:	80800017 	ldw	r2,0(r16)
   49b10:	81000517 	ldw	r4,20(r16)
   49b14:	8180030d 	sth	r6,12(r16)
   49b18:	10c7c83a 	sub	r3,r2,r3
   49b1c:	193fe316 	blt	r3,r4,49aac <__alt_data_end+0xfffd3f4c>
   49b20:	9009883a 	mov	r4,r18
   49b24:	800b883a 	mov	r5,r16
   49b28:	004476c0 	call	4476c <_fflush_r>
   49b2c:	1000091e 	bne	r2,zero,49b54 <__swbuf_r+0x10c>
   49b30:	80800017 	ldw	r2,0(r16)
   49b34:	00c00044 	movi	r3,1
   49b38:	003fdd06 	br	49ab0 <__alt_data_end+0xfffd3f50>
   49b3c:	00800284 	movi	r2,10
   49b40:	88bfe61e 	bne	r17,r2,49adc <__alt_data_end+0xfffd3f7c>
   49b44:	9009883a 	mov	r4,r18
   49b48:	800b883a 	mov	r5,r16
   49b4c:	004476c0 	call	4476c <_fflush_r>
   49b50:	103fe226 	beq	r2,zero,49adc <__alt_data_end+0xfffd3f7c>
   49b54:	00bfffc4 	movi	r2,-1
   49b58:	003fe106 	br	49ae0 <__alt_data_end+0xfffd3f80>
   49b5c:	9009883a 	mov	r4,r18
   49b60:	800b883a 	mov	r5,r16
   49b64:	0042cec0 	call	42cec <__swsetup_r>
   49b68:	1000051e 	bne	r2,zero,49b80 <__swbuf_r+0x138>
   49b6c:	8180030b 	ldhu	r6,12(r16)
   49b70:	80c00417 	ldw	r3,16(r16)
   49b74:	003fc606 	br	49a90 <__alt_data_end+0xfffd3f30>
   49b78:	0044d280 	call	44d28 <__sinit>
   49b7c:	003fbd06 	br	49a74 <__alt_data_end+0xfffd3f14>
   49b80:	80c0030b 	ldhu	r3,12(r16)
   49b84:	00bfffc4 	movi	r2,-1
   49b88:	18c01014 	ori	r3,r3,64
   49b8c:	80c0030d 	sth	r3,12(r16)
   49b90:	00c00244 	movi	r3,9
   49b94:	90c00015 	stw	r3,0(r18)
   49b98:	003fd106 	br	49ae0 <__alt_data_end+0xfffd3f80>

00049b9c <__swbuf>:
   49b9c:	00c00174 	movhi	r3,5
   49ba0:	18c93604 	addi	r3,r3,9432
   49ba4:	2005883a 	mov	r2,r4
   49ba8:	19000017 	ldw	r4,0(r3)
   49bac:	280d883a 	mov	r6,r5
   49bb0:	100b883a 	mov	r5,r2
   49bb4:	0049a481 	jmpi	49a48 <__swbuf_r>

00049bb8 <_wcrtomb_r>:
   49bb8:	defff604 	addi	sp,sp,-40
   49bbc:	00800174 	movhi	r2,5
   49bc0:	dc800815 	stw	r18,32(sp)
   49bc4:	dc400715 	stw	r17,28(sp)
   49bc8:	dc000615 	stw	r16,24(sp)
   49bcc:	10893a04 	addi	r2,r2,9448
   49bd0:	dfc00915 	stw	ra,36(sp)
   49bd4:	2021883a 	mov	r16,r4
   49bd8:	3823883a 	mov	r17,r7
   49bdc:	14800017 	ldw	r18,0(r2)
   49be0:	28001426 	beq	r5,zero,49c34 <_wcrtomb_r+0x7c>
   49be4:	d9400415 	stw	r5,16(sp)
   49be8:	d9800515 	stw	r6,20(sp)
   49bec:	004581c0 	call	4581c <__locale_charset>
   49bf0:	d9400417 	ldw	r5,16(sp)
   49bf4:	d9800517 	ldw	r6,20(sp)
   49bf8:	8009883a 	mov	r4,r16
   49bfc:	dc400015 	stw	r17,0(sp)
   49c00:	100f883a 	mov	r7,r2
   49c04:	903ee83a 	callr	r18
   49c08:	00ffffc4 	movi	r3,-1
   49c0c:	10c0031e 	bne	r2,r3,49c1c <_wcrtomb_r+0x64>
   49c10:	88000015 	stw	zero,0(r17)
   49c14:	00c02284 	movi	r3,138
   49c18:	80c00015 	stw	r3,0(r16)
   49c1c:	dfc00917 	ldw	ra,36(sp)
   49c20:	dc800817 	ldw	r18,32(sp)
   49c24:	dc400717 	ldw	r17,28(sp)
   49c28:	dc000617 	ldw	r16,24(sp)
   49c2c:	dec00a04 	addi	sp,sp,40
   49c30:	f800283a 	ret
   49c34:	004581c0 	call	4581c <__locale_charset>
   49c38:	8009883a 	mov	r4,r16
   49c3c:	dc400015 	stw	r17,0(sp)
   49c40:	d9400104 	addi	r5,sp,4
   49c44:	000d883a 	mov	r6,zero
   49c48:	100f883a 	mov	r7,r2
   49c4c:	903ee83a 	callr	r18
   49c50:	003fed06 	br	49c08 <__alt_data_end+0xfffd40a8>

00049c54 <wcrtomb>:
   49c54:	defff504 	addi	sp,sp,-44
   49c58:	dc400515 	stw	r17,20(sp)
   49c5c:	dc000415 	stw	r16,16(sp)
   49c60:	dfc00a15 	stw	ra,40(sp)
   49c64:	dd400915 	stw	r21,36(sp)
   49c68:	dd000815 	stw	r20,32(sp)
   49c6c:	dcc00715 	stw	r19,28(sp)
   49c70:	dc800615 	stw	r18,24(sp)
   49c74:	2021883a 	mov	r16,r4
   49c78:	3023883a 	mov	r17,r6
   49c7c:	20001d26 	beq	r4,zero,49cf4 <wcrtomb+0xa0>
   49c80:	04800174 	movhi	r18,5
   49c84:	94893604 	addi	r18,r18,9432
   49c88:	00800174 	movhi	r2,5
   49c8c:	95400017 	ldw	r21,0(r18)
   49c90:	10893a04 	addi	r2,r2,9448
   49c94:	15000017 	ldw	r20,0(r2)
   49c98:	2827883a 	mov	r19,r5
   49c9c:	004581c0 	call	4581c <__locale_charset>
   49ca0:	a809883a 	mov	r4,r21
   49ca4:	dc400015 	stw	r17,0(sp)
   49ca8:	800b883a 	mov	r5,r16
   49cac:	980d883a 	mov	r6,r19
   49cb0:	100f883a 	mov	r7,r2
   49cb4:	a03ee83a 	callr	r20
   49cb8:	00ffffc4 	movi	r3,-1
   49cbc:	10c0041e 	bne	r2,r3,49cd0 <wcrtomb+0x7c>
   49cc0:	90c00017 	ldw	r3,0(r18)
   49cc4:	01002284 	movi	r4,138
   49cc8:	88000015 	stw	zero,0(r17)
   49ccc:	19000015 	stw	r4,0(r3)
   49cd0:	dfc00a17 	ldw	ra,40(sp)
   49cd4:	dd400917 	ldw	r21,36(sp)
   49cd8:	dd000817 	ldw	r20,32(sp)
   49cdc:	dcc00717 	ldw	r19,28(sp)
   49ce0:	dc800617 	ldw	r18,24(sp)
   49ce4:	dc400517 	ldw	r17,20(sp)
   49ce8:	dc000417 	ldw	r16,16(sp)
   49cec:	dec00b04 	addi	sp,sp,44
   49cf0:	f800283a 	ret
   49cf4:	04800174 	movhi	r18,5
   49cf8:	94893604 	addi	r18,r18,9432
   49cfc:	00800174 	movhi	r2,5
   49d00:	94c00017 	ldw	r19,0(r18)
   49d04:	10893a04 	addi	r2,r2,9448
   49d08:	14000017 	ldw	r16,0(r2)
   49d0c:	004581c0 	call	4581c <__locale_charset>
   49d10:	9809883a 	mov	r4,r19
   49d14:	dc400015 	stw	r17,0(sp)
   49d18:	d9400104 	addi	r5,sp,4
   49d1c:	000d883a 	mov	r6,zero
   49d20:	100f883a 	mov	r7,r2
   49d24:	803ee83a 	callr	r16
   49d28:	003fe306 	br	49cb8 <__alt_data_end+0xfffd4158>

00049d2c <__ascii_wctomb>:
   49d2c:	28000526 	beq	r5,zero,49d44 <__ascii_wctomb+0x18>
   49d30:	00803fc4 	movi	r2,255
   49d34:	11800536 	bltu	r2,r6,49d4c <__ascii_wctomb+0x20>
   49d38:	29800005 	stb	r6,0(r5)
   49d3c:	00800044 	movi	r2,1
   49d40:	f800283a 	ret
   49d44:	0005883a 	mov	r2,zero
   49d48:	f800283a 	ret
   49d4c:	00802284 	movi	r2,138
   49d50:	20800015 	stw	r2,0(r4)
   49d54:	00bfffc4 	movi	r2,-1
   49d58:	f800283a 	ret

00049d5c <_wctomb_r>:
   49d5c:	00800174 	movhi	r2,5
   49d60:	defff904 	addi	sp,sp,-28
   49d64:	10893a04 	addi	r2,r2,9448
   49d68:	dfc00615 	stw	ra,24(sp)
   49d6c:	dc400515 	stw	r17,20(sp)
   49d70:	dc000415 	stw	r16,16(sp)
   49d74:	3823883a 	mov	r17,r7
   49d78:	14000017 	ldw	r16,0(r2)
   49d7c:	d9000115 	stw	r4,4(sp)
   49d80:	d9400215 	stw	r5,8(sp)
   49d84:	d9800315 	stw	r6,12(sp)
   49d88:	004581c0 	call	4581c <__locale_charset>
   49d8c:	d9000117 	ldw	r4,4(sp)
   49d90:	d9400217 	ldw	r5,8(sp)
   49d94:	d9800317 	ldw	r6,12(sp)
   49d98:	dc400015 	stw	r17,0(sp)
   49d9c:	100f883a 	mov	r7,r2
   49da0:	803ee83a 	callr	r16
   49da4:	dfc00617 	ldw	ra,24(sp)
   49da8:	dc400517 	ldw	r17,20(sp)
   49dac:	dc000417 	ldw	r16,16(sp)
   49db0:	dec00704 	addi	sp,sp,28
   49db4:	f800283a 	ret

00049db8 <__muldi3>:
   49db8:	defff604 	addi	sp,sp,-40
   49dbc:	dd800615 	stw	r22,24(sp)
   49dc0:	dd400515 	stw	r21,20(sp)
   49dc4:	25bfffcc 	andi	r22,r4,65535
   49dc8:	357fffcc 	andi	r21,r6,65535
   49dcc:	dc400115 	stw	r17,4(sp)
   49dd0:	2022d43a 	srli	r17,r4,16
   49dd4:	dcc00315 	stw	r19,12(sp)
   49dd8:	dc800215 	stw	r18,8(sp)
   49ddc:	2027883a 	mov	r19,r4
   49de0:	2825883a 	mov	r18,r5
   49de4:	a809883a 	mov	r4,r21
   49de8:	b00b883a 	mov	r5,r22
   49dec:	dfc00915 	stw	ra,36(sp)
   49df0:	df000815 	stw	fp,32(sp)
   49df4:	ddc00715 	stw	r23,28(sp)
   49df8:	3839883a 	mov	fp,r7
   49dfc:	302ed43a 	srli	r23,r6,16
   49e00:	dd000415 	stw	r20,16(sp)
   49e04:	dc000015 	stw	r16,0(sp)
   49e08:	3029883a 	mov	r20,r6
   49e0c:	004095c0 	call	4095c <__mulsi3>
   49e10:	a809883a 	mov	r4,r21
   49e14:	880b883a 	mov	r5,r17
   49e18:	1021883a 	mov	r16,r2
   49e1c:	004095c0 	call	4095c <__mulsi3>
   49e20:	880b883a 	mov	r5,r17
   49e24:	b809883a 	mov	r4,r23
   49e28:	102b883a 	mov	r21,r2
   49e2c:	004095c0 	call	4095c <__mulsi3>
   49e30:	b809883a 	mov	r4,r23
   49e34:	b00b883a 	mov	r5,r22
   49e38:	1023883a 	mov	r17,r2
   49e3c:	004095c0 	call	4095c <__mulsi3>
   49e40:	8012d43a 	srli	r9,r16,16
   49e44:	a885883a 	add	r2,r21,r2
   49e48:	1251883a 	add	r8,r2,r9
   49e4c:	4540022e 	bgeu	r8,r21,49e58 <__muldi3+0xa0>
   49e50:	00800074 	movhi	r2,1
   49e54:	88a3883a 	add	r17,r17,r2
   49e58:	4006d43a 	srli	r3,r8,16
   49e5c:	4010943a 	slli	r8,r8,16
   49e60:	9809883a 	mov	r4,r19
   49e64:	e00b883a 	mov	r5,fp
   49e68:	843fffcc 	andi	r16,r16,65535
   49e6c:	88e3883a 	add	r17,r17,r3
   49e70:	4421883a 	add	r16,r8,r16
   49e74:	004095c0 	call	4095c <__mulsi3>
   49e78:	a009883a 	mov	r4,r20
   49e7c:	900b883a 	mov	r5,r18
   49e80:	1027883a 	mov	r19,r2
   49e84:	004095c0 	call	4095c <__mulsi3>
   49e88:	9885883a 	add	r2,r19,r2
   49e8c:	1447883a 	add	r3,r2,r17
   49e90:	8005883a 	mov	r2,r16
   49e94:	dfc00917 	ldw	ra,36(sp)
   49e98:	df000817 	ldw	fp,32(sp)
   49e9c:	ddc00717 	ldw	r23,28(sp)
   49ea0:	dd800617 	ldw	r22,24(sp)
   49ea4:	dd400517 	ldw	r21,20(sp)
   49ea8:	dd000417 	ldw	r20,16(sp)
   49eac:	dcc00317 	ldw	r19,12(sp)
   49eb0:	dc800217 	ldw	r18,8(sp)
   49eb4:	dc400117 	ldw	r17,4(sp)
   49eb8:	dc000017 	ldw	r16,0(sp)
   49ebc:	dec00a04 	addi	sp,sp,40
   49ec0:	f800283a 	ret

00049ec4 <__udivdi3>:
   49ec4:	defff504 	addi	sp,sp,-44
   49ec8:	dcc00415 	stw	r19,16(sp)
   49ecc:	dc000115 	stw	r16,4(sp)
   49ed0:	dfc00a15 	stw	ra,40(sp)
   49ed4:	df000915 	stw	fp,36(sp)
   49ed8:	ddc00815 	stw	r23,32(sp)
   49edc:	dd800715 	stw	r22,28(sp)
   49ee0:	dd400615 	stw	r21,24(sp)
   49ee4:	dd000515 	stw	r20,20(sp)
   49ee8:	dc800315 	stw	r18,12(sp)
   49eec:	dc400215 	stw	r17,8(sp)
   49ef0:	2027883a 	mov	r19,r4
   49ef4:	2821883a 	mov	r16,r5
   49ef8:	3800471e 	bne	r7,zero,4a018 <__udivdi3+0x154>
   49efc:	3025883a 	mov	r18,r6
   49f00:	2023883a 	mov	r17,r4
   49f04:	2980592e 	bgeu	r5,r6,4a06c <__udivdi3+0x1a8>
   49f08:	00bfffd4 	movui	r2,65535
   49f0c:	2829883a 	mov	r20,r5
   49f10:	1180b236 	bltu	r2,r6,4a1dc <__udivdi3+0x318>
   49f14:	00803fc4 	movi	r2,255
   49f18:	1181622e 	bgeu	r2,r6,4a4a4 <__udivdi3+0x5e0>
   49f1c:	00800204 	movi	r2,8
   49f20:	1007883a 	mov	r3,r2
   49f24:	3084d83a 	srl	r2,r6,r2
   49f28:	01000174 	movhi	r4,5
   49f2c:	21020b04 	addi	r4,r4,2092
   49f30:	2085883a 	add	r2,r4,r2
   49f34:	11000003 	ldbu	r4,0(r2)
   49f38:	20c9883a 	add	r4,r4,r3
   49f3c:	00c00804 	movi	r3,32
   49f40:	1907c83a 	sub	r3,r3,r4
   49f44:	18000526 	beq	r3,zero,49f5c <__udivdi3+0x98>
   49f48:	80e0983a 	sll	r16,r16,r3
   49f4c:	9908d83a 	srl	r4,r19,r4
   49f50:	30e4983a 	sll	r18,r6,r3
   49f54:	98e2983a 	sll	r17,r19,r3
   49f58:	8128b03a 	or	r20,r16,r4
   49f5c:	902ad43a 	srli	r21,r18,16
   49f60:	a009883a 	mov	r4,r20
   49f64:	95bfffcc 	andi	r22,r18,65535
   49f68:	a80b883a 	mov	r5,r21
   49f6c:	00409540 	call	40954 <__umodsi3>
   49f70:	a009883a 	mov	r4,r20
   49f74:	a80b883a 	mov	r5,r21
   49f78:	102f883a 	mov	r23,r2
   49f7c:	004094c0 	call	4094c <__udivsi3>
   49f80:	1009883a 	mov	r4,r2
   49f84:	b00b883a 	mov	r5,r22
   49f88:	1021883a 	mov	r16,r2
   49f8c:	004095c0 	call	4095c <__mulsi3>
   49f90:	b82e943a 	slli	r23,r23,16
   49f94:	8808d43a 	srli	r4,r17,16
   49f98:	b906b03a 	or	r3,r23,r4
   49f9c:	1880052e 	bgeu	r3,r2,49fb4 <__udivdi3+0xf0>
   49fa0:	1c87883a 	add	r3,r3,r18
   49fa4:	813fffc4 	addi	r4,r16,-1
   49fa8:	1c800136 	bltu	r3,r18,49fb0 <__udivdi3+0xec>
   49fac:	18815236 	bltu	r3,r2,4a4f8 <__udivdi3+0x634>
   49fb0:	2021883a 	mov	r16,r4
   49fb4:	18a7c83a 	sub	r19,r3,r2
   49fb8:	9809883a 	mov	r4,r19
   49fbc:	a80b883a 	mov	r5,r21
   49fc0:	00409540 	call	40954 <__umodsi3>
   49fc4:	1029883a 	mov	r20,r2
   49fc8:	9809883a 	mov	r4,r19
   49fcc:	a80b883a 	mov	r5,r21
   49fd0:	a028943a 	slli	r20,r20,16
   49fd4:	004094c0 	call	4094c <__udivsi3>
   49fd8:	1009883a 	mov	r4,r2
   49fdc:	b00b883a 	mov	r5,r22
   49fe0:	8c7fffcc 	andi	r17,r17,65535
   49fe4:	1027883a 	mov	r19,r2
   49fe8:	a462b03a 	or	r17,r20,r17
   49fec:	004095c0 	call	4095c <__mulsi3>
   49ff0:	8880052e 	bgeu	r17,r2,4a008 <__udivdi3+0x144>
   49ff4:	8ca3883a 	add	r17,r17,r18
   49ff8:	98ffffc4 	addi	r3,r19,-1
   49ffc:	8c811036 	bltu	r17,r18,4a440 <__udivdi3+0x57c>
   4a000:	88810f2e 	bgeu	r17,r2,4a440 <__udivdi3+0x57c>
   4a004:	9cffff84 	addi	r19,r19,-2
   4a008:	8020943a 	slli	r16,r16,16
   4a00c:	0007883a 	mov	r3,zero
   4a010:	9c04b03a 	or	r2,r19,r16
   4a014:	00006006 	br	4a198 <__udivdi3+0x2d4>
   4a018:	29c05d36 	bltu	r5,r7,4a190 <__udivdi3+0x2cc>
   4a01c:	00bfffd4 	movui	r2,65535
   4a020:	11c0692e 	bgeu	r2,r7,4a1c8 <__udivdi3+0x304>
   4a024:	00804034 	movhi	r2,256
   4a028:	10bfffc4 	addi	r2,r2,-1
   4a02c:	11c10e2e 	bgeu	r2,r7,4a468 <__udivdi3+0x5a4>
   4a030:	01400604 	movi	r5,24
   4a034:	2811883a 	mov	r8,r5
   4a038:	394ad83a 	srl	r5,r7,r5
   4a03c:	00800174 	movhi	r2,5
   4a040:	10820b04 	addi	r2,r2,2092
   4a044:	114b883a 	add	r5,r2,r5
   4a048:	29400003 	ldbu	r5,0(r5)
   4a04c:	00c00804 	movi	r3,32
   4a050:	2a0b883a 	add	r5,r5,r8
   4a054:	196fc83a 	sub	r23,r3,r5
   4a058:	b8006b1e 	bne	r23,zero,4a208 <__udivdi3+0x344>
   4a05c:	3c011436 	bltu	r7,r16,4a4b0 <__udivdi3+0x5ec>
   4a060:	9985403a 	cmpgeu	r2,r19,r6
   4a064:	0007883a 	mov	r3,zero
   4a068:	00004b06 	br	4a198 <__udivdi3+0x2d4>
   4a06c:	3000041e 	bne	r6,zero,4a080 <__udivdi3+0x1bc>
   4a070:	01000044 	movi	r4,1
   4a074:	000b883a 	mov	r5,zero
   4a078:	004094c0 	call	4094c <__udivsi3>
   4a07c:	1025883a 	mov	r18,r2
   4a080:	00bfffd4 	movui	r2,65535
   4a084:	14805b2e 	bgeu	r2,r18,4a1f4 <__udivdi3+0x330>
   4a088:	00804034 	movhi	r2,256
   4a08c:	10bfffc4 	addi	r2,r2,-1
   4a090:	1480fe2e 	bgeu	r2,r18,4a48c <__udivdi3+0x5c8>
   4a094:	00800604 	movi	r2,24
   4a098:	1007883a 	mov	r3,r2
   4a09c:	9084d83a 	srl	r2,r18,r2
   4a0a0:	01000174 	movhi	r4,5
   4a0a4:	21020b04 	addi	r4,r4,2092
   4a0a8:	2085883a 	add	r2,r4,r2
   4a0ac:	11800003 	ldbu	r6,0(r2)
   4a0b0:	01c00804 	movi	r7,32
   4a0b4:	30c7883a 	add	r3,r6,r3
   4a0b8:	38cfc83a 	sub	r7,r7,r3
   4a0bc:	3800a71e 	bne	r7,zero,4a35c <__udivdi3+0x498>
   4a0c0:	9028d43a 	srli	r20,r18,16
   4a0c4:	84a1c83a 	sub	r16,r16,r18
   4a0c8:	957fffcc 	andi	r21,r18,65535
   4a0cc:	00c00044 	movi	r3,1
   4a0d0:	8009883a 	mov	r4,r16
   4a0d4:	a00b883a 	mov	r5,r20
   4a0d8:	d8c00015 	stw	r3,0(sp)
   4a0dc:	00409540 	call	40954 <__umodsi3>
   4a0e0:	8009883a 	mov	r4,r16
   4a0e4:	a00b883a 	mov	r5,r20
   4a0e8:	102d883a 	mov	r22,r2
   4a0ec:	004094c0 	call	4094c <__udivsi3>
   4a0f0:	1009883a 	mov	r4,r2
   4a0f4:	a80b883a 	mov	r5,r21
   4a0f8:	1021883a 	mov	r16,r2
   4a0fc:	004095c0 	call	4095c <__mulsi3>
   4a100:	b02c943a 	slli	r22,r22,16
   4a104:	880ed43a 	srli	r7,r17,16
   4a108:	d8c00017 	ldw	r3,0(sp)
   4a10c:	b1ccb03a 	or	r6,r22,r7
   4a110:	3080052e 	bgeu	r6,r2,4a128 <__udivdi3+0x264>
   4a114:	348d883a 	add	r6,r6,r18
   4a118:	813fffc4 	addi	r4,r16,-1
   4a11c:	34800136 	bltu	r6,r18,4a124 <__udivdi3+0x260>
   4a120:	3080f236 	bltu	r6,r2,4a4ec <__udivdi3+0x628>
   4a124:	2021883a 	mov	r16,r4
   4a128:	30a7c83a 	sub	r19,r6,r2
   4a12c:	9809883a 	mov	r4,r19
   4a130:	a00b883a 	mov	r5,r20
   4a134:	d8c00015 	stw	r3,0(sp)
   4a138:	00409540 	call	40954 <__umodsi3>
   4a13c:	102d883a 	mov	r22,r2
   4a140:	9809883a 	mov	r4,r19
   4a144:	a00b883a 	mov	r5,r20
   4a148:	b02c943a 	slli	r22,r22,16
   4a14c:	004094c0 	call	4094c <__udivsi3>
   4a150:	1009883a 	mov	r4,r2
   4a154:	a80b883a 	mov	r5,r21
   4a158:	8c7fffcc 	andi	r17,r17,65535
   4a15c:	1027883a 	mov	r19,r2
   4a160:	b462b03a 	or	r17,r22,r17
   4a164:	004095c0 	call	4095c <__mulsi3>
   4a168:	d8c00017 	ldw	r3,0(sp)
   4a16c:	8880052e 	bgeu	r17,r2,4a184 <__udivdi3+0x2c0>
   4a170:	8ca3883a 	add	r17,r17,r18
   4a174:	993fffc4 	addi	r4,r19,-1
   4a178:	8c80af36 	bltu	r17,r18,4a438 <__udivdi3+0x574>
   4a17c:	8880ae2e 	bgeu	r17,r2,4a438 <__udivdi3+0x574>
   4a180:	9cffff84 	addi	r19,r19,-2
   4a184:	8020943a 	slli	r16,r16,16
   4a188:	9c04b03a 	or	r2,r19,r16
   4a18c:	00000206 	br	4a198 <__udivdi3+0x2d4>
   4a190:	0007883a 	mov	r3,zero
   4a194:	0005883a 	mov	r2,zero
   4a198:	dfc00a17 	ldw	ra,40(sp)
   4a19c:	df000917 	ldw	fp,36(sp)
   4a1a0:	ddc00817 	ldw	r23,32(sp)
   4a1a4:	dd800717 	ldw	r22,28(sp)
   4a1a8:	dd400617 	ldw	r21,24(sp)
   4a1ac:	dd000517 	ldw	r20,20(sp)
   4a1b0:	dcc00417 	ldw	r19,16(sp)
   4a1b4:	dc800317 	ldw	r18,12(sp)
   4a1b8:	dc400217 	ldw	r17,8(sp)
   4a1bc:	dc000117 	ldw	r16,4(sp)
   4a1c0:	dec00b04 	addi	sp,sp,44
   4a1c4:	f800283a 	ret
   4a1c8:	00803fc4 	movi	r2,255
   4a1cc:	11c0a92e 	bgeu	r2,r7,4a474 <__udivdi3+0x5b0>
   4a1d0:	01400204 	movi	r5,8
   4a1d4:	2811883a 	mov	r8,r5
   4a1d8:	003f9706 	br	4a038 <__alt_data_end+0xfffd44d8>
   4a1dc:	00804034 	movhi	r2,256
   4a1e0:	10bfffc4 	addi	r2,r2,-1
   4a1e4:	1180a62e 	bgeu	r2,r6,4a480 <__udivdi3+0x5bc>
   4a1e8:	00800604 	movi	r2,24
   4a1ec:	1007883a 	mov	r3,r2
   4a1f0:	003f4c06 	br	49f24 <__alt_data_end+0xfffd43c4>
   4a1f4:	00803fc4 	movi	r2,255
   4a1f8:	1480a72e 	bgeu	r2,r18,4a498 <__udivdi3+0x5d4>
   4a1fc:	00800204 	movi	r2,8
   4a200:	1007883a 	mov	r3,r2
   4a204:	003fa506 	br	4a09c <__alt_data_end+0xfffd453c>
   4a208:	3178d83a 	srl	fp,r6,r5
   4a20c:	3dce983a 	sll	r7,r7,r23
   4a210:	8168d83a 	srl	r20,r16,r5
   4a214:	9950d83a 	srl	r8,r19,r5
   4a218:	3f38b03a 	or	fp,r7,fp
   4a21c:	e024d43a 	srli	r18,fp,16
   4a220:	85e0983a 	sll	r16,r16,r23
   4a224:	a009883a 	mov	r4,r20
   4a228:	900b883a 	mov	r5,r18
   4a22c:	8220b03a 	or	r16,r16,r8
   4a230:	35ea983a 	sll	r21,r6,r23
   4a234:	00409540 	call	40954 <__umodsi3>
   4a238:	a009883a 	mov	r4,r20
   4a23c:	900b883a 	mov	r5,r18
   4a240:	1023883a 	mov	r17,r2
   4a244:	e5bfffcc 	andi	r22,fp,65535
   4a248:	004094c0 	call	4094c <__udivsi3>
   4a24c:	1009883a 	mov	r4,r2
   4a250:	b00b883a 	mov	r5,r22
   4a254:	1029883a 	mov	r20,r2
   4a258:	004095c0 	call	4095c <__mulsi3>
   4a25c:	8806943a 	slli	r3,r17,16
   4a260:	8014d43a 	srli	r10,r16,16
   4a264:	1a92b03a 	or	r9,r3,r10
   4a268:	4880042e 	bgeu	r9,r2,4a27c <__udivdi3+0x3b8>
   4a26c:	4f13883a 	add	r9,r9,fp
   4a270:	a0ffffc4 	addi	r3,r20,-1
   4a274:	4f00952e 	bgeu	r9,fp,4a4cc <__udivdi3+0x608>
   4a278:	1829883a 	mov	r20,r3
   4a27c:	48a3c83a 	sub	r17,r9,r2
   4a280:	8809883a 	mov	r4,r17
   4a284:	900b883a 	mov	r5,r18
   4a288:	00409540 	call	40954 <__umodsi3>
   4a28c:	8809883a 	mov	r4,r17
   4a290:	900b883a 	mov	r5,r18
   4a294:	d8800015 	stw	r2,0(sp)
   4a298:	004094c0 	call	4094c <__udivsi3>
   4a29c:	1009883a 	mov	r4,r2
   4a2a0:	b00b883a 	mov	r5,r22
   4a2a4:	1023883a 	mov	r17,r2
   4a2a8:	004095c0 	call	4095c <__mulsi3>
   4a2ac:	d8c00017 	ldw	r3,0(sp)
   4a2b0:	823fffcc 	andi	r8,r16,65535
   4a2b4:	1806943a 	slli	r3,r3,16
   4a2b8:	1a20b03a 	or	r16,r3,r8
   4a2bc:	8080042e 	bgeu	r16,r2,4a2d0 <__udivdi3+0x40c>
   4a2c0:	8721883a 	add	r16,r16,fp
   4a2c4:	88ffffc4 	addi	r3,r17,-1
   4a2c8:	87007c2e 	bgeu	r16,fp,4a4bc <__udivdi3+0x5f8>
   4a2cc:	1823883a 	mov	r17,r3
   4a2d0:	a028943a 	slli	r20,r20,16
   4a2d4:	acbfffcc 	andi	r18,r21,65535
   4a2d8:	900b883a 	mov	r5,r18
   4a2dc:	8d28b03a 	or	r20,r17,r20
   4a2e0:	a022d43a 	srli	r17,r20,16
   4a2e4:	a5bfffcc 	andi	r22,r20,65535
   4a2e8:	b009883a 	mov	r4,r22
   4a2ec:	a82ad43a 	srli	r21,r21,16
   4a2f0:	80a1c83a 	sub	r16,r16,r2
   4a2f4:	004095c0 	call	4095c <__mulsi3>
   4a2f8:	8809883a 	mov	r4,r17
   4a2fc:	900b883a 	mov	r5,r18
   4a300:	1039883a 	mov	fp,r2
   4a304:	004095c0 	call	4095c <__mulsi3>
   4a308:	8809883a 	mov	r4,r17
   4a30c:	a80b883a 	mov	r5,r21
   4a310:	1025883a 	mov	r18,r2
   4a314:	004095c0 	call	4095c <__mulsi3>
   4a318:	b009883a 	mov	r4,r22
   4a31c:	a80b883a 	mov	r5,r21
   4a320:	1023883a 	mov	r17,r2
   4a324:	004095c0 	call	4095c <__mulsi3>
   4a328:	e006d43a 	srli	r3,fp,16
   4a32c:	9085883a 	add	r2,r18,r2
   4a330:	10c7883a 	add	r3,r2,r3
   4a334:	1c80022e 	bgeu	r3,r18,4a340 <__udivdi3+0x47c>
   4a338:	00800074 	movhi	r2,1
   4a33c:	88a3883a 	add	r17,r17,r2
   4a340:	1808d43a 	srli	r4,r3,16
   4a344:	8909883a 	add	r4,r17,r4
   4a348:	81004436 	bltu	r16,r4,4a45c <__udivdi3+0x598>
   4a34c:	81003e26 	beq	r16,r4,4a448 <__udivdi3+0x584>
   4a350:	a005883a 	mov	r2,r20
   4a354:	0007883a 	mov	r3,zero
   4a358:	003f8f06 	br	4a198 <__alt_data_end+0xfffd4638>
   4a35c:	91e4983a 	sll	r18,r18,r7
   4a360:	80eed83a 	srl	r23,r16,r3
   4a364:	81cc983a 	sll	r6,r16,r7
   4a368:	9028d43a 	srli	r20,r18,16
   4a36c:	98c6d83a 	srl	r3,r19,r3
   4a370:	b809883a 	mov	r4,r23
   4a374:	a00b883a 	mov	r5,r20
   4a378:	30ecb03a 	or	r22,r6,r3
   4a37c:	99e2983a 	sll	r17,r19,r7
   4a380:	00409540 	call	40954 <__umodsi3>
   4a384:	b809883a 	mov	r4,r23
   4a388:	a00b883a 	mov	r5,r20
   4a38c:	1021883a 	mov	r16,r2
   4a390:	957fffcc 	andi	r21,r18,65535
   4a394:	004094c0 	call	4094c <__udivsi3>
   4a398:	a80b883a 	mov	r5,r21
   4a39c:	1009883a 	mov	r4,r2
   4a3a0:	102f883a 	mov	r23,r2
   4a3a4:	004095c0 	call	4095c <__mulsi3>
   4a3a8:	8020943a 	slli	r16,r16,16
   4a3ac:	b00ad43a 	srli	r5,r22,16
   4a3b0:	814cb03a 	or	r6,r16,r5
   4a3b4:	3080062e 	bgeu	r6,r2,4a3d0 <__udivdi3+0x50c>
   4a3b8:	348d883a 	add	r6,r6,r18
   4a3bc:	b8ffffc4 	addi	r3,r23,-1
   4a3c0:	34804836 	bltu	r6,r18,4a4e4 <__udivdi3+0x620>
   4a3c4:	3080472e 	bgeu	r6,r2,4a4e4 <__udivdi3+0x620>
   4a3c8:	bdffff84 	addi	r23,r23,-2
   4a3cc:	348d883a 	add	r6,r6,r18
   4a3d0:	30a7c83a 	sub	r19,r6,r2
   4a3d4:	9809883a 	mov	r4,r19
   4a3d8:	a00b883a 	mov	r5,r20
   4a3dc:	00409540 	call	40954 <__umodsi3>
   4a3e0:	9809883a 	mov	r4,r19
   4a3e4:	a00b883a 	mov	r5,r20
   4a3e8:	1039883a 	mov	fp,r2
   4a3ec:	004094c0 	call	4094c <__udivsi3>
   4a3f0:	1009883a 	mov	r4,r2
   4a3f4:	a80b883a 	mov	r5,r21
   4a3f8:	e038943a 	slli	fp,fp,16
   4a3fc:	1027883a 	mov	r19,r2
   4a400:	004095c0 	call	4095c <__mulsi3>
   4a404:	b1bfffcc 	andi	r6,r22,65535
   4a408:	e18cb03a 	or	r6,fp,r6
   4a40c:	3080062e 	bgeu	r6,r2,4a428 <__udivdi3+0x564>
   4a410:	348d883a 	add	r6,r6,r18
   4a414:	98ffffc4 	addi	r3,r19,-1
   4a418:	34803036 	bltu	r6,r18,4a4dc <__udivdi3+0x618>
   4a41c:	30802f2e 	bgeu	r6,r2,4a4dc <__udivdi3+0x618>
   4a420:	9cffff84 	addi	r19,r19,-2
   4a424:	348d883a 	add	r6,r6,r18
   4a428:	b82e943a 	slli	r23,r23,16
   4a42c:	30a1c83a 	sub	r16,r6,r2
   4a430:	9dc6b03a 	or	r3,r19,r23
   4a434:	003f2606 	br	4a0d0 <__alt_data_end+0xfffd4570>
   4a438:	2027883a 	mov	r19,r4
   4a43c:	003f5106 	br	4a184 <__alt_data_end+0xfffd4624>
   4a440:	1827883a 	mov	r19,r3
   4a444:	003ef006 	br	4a008 <__alt_data_end+0xfffd44a8>
   4a448:	1808943a 	slli	r4,r3,16
   4a44c:	9dc6983a 	sll	r3,r19,r23
   4a450:	e73fffcc 	andi	fp,fp,65535
   4a454:	2709883a 	add	r4,r4,fp
   4a458:	193fbd2e 	bgeu	r3,r4,4a350 <__alt_data_end+0xfffd47f0>
   4a45c:	a0bfffc4 	addi	r2,r20,-1
   4a460:	0007883a 	mov	r3,zero
   4a464:	003f4c06 	br	4a198 <__alt_data_end+0xfffd4638>
   4a468:	01400404 	movi	r5,16
   4a46c:	2811883a 	mov	r8,r5
   4a470:	003ef106 	br	4a038 <__alt_data_end+0xfffd44d8>
   4a474:	000b883a 	mov	r5,zero
   4a478:	0011883a 	mov	r8,zero
   4a47c:	003eee06 	br	4a038 <__alt_data_end+0xfffd44d8>
   4a480:	00800404 	movi	r2,16
   4a484:	1007883a 	mov	r3,r2
   4a488:	003ea606 	br	49f24 <__alt_data_end+0xfffd43c4>
   4a48c:	00800404 	movi	r2,16
   4a490:	1007883a 	mov	r3,r2
   4a494:	003f0106 	br	4a09c <__alt_data_end+0xfffd453c>
   4a498:	0005883a 	mov	r2,zero
   4a49c:	0007883a 	mov	r3,zero
   4a4a0:	003efe06 	br	4a09c <__alt_data_end+0xfffd453c>
   4a4a4:	0005883a 	mov	r2,zero
   4a4a8:	0007883a 	mov	r3,zero
   4a4ac:	003e9d06 	br	49f24 <__alt_data_end+0xfffd43c4>
   4a4b0:	0007883a 	mov	r3,zero
   4a4b4:	00800044 	movi	r2,1
   4a4b8:	003f3706 	br	4a198 <__alt_data_end+0xfffd4638>
   4a4bc:	80bf832e 	bgeu	r16,r2,4a2cc <__alt_data_end+0xfffd476c>
   4a4c0:	8c7fff84 	addi	r17,r17,-2
   4a4c4:	8721883a 	add	r16,r16,fp
   4a4c8:	003f8106 	br	4a2d0 <__alt_data_end+0xfffd4770>
   4a4cc:	48bf6a2e 	bgeu	r9,r2,4a278 <__alt_data_end+0xfffd4718>
   4a4d0:	a53fff84 	addi	r20,r20,-2
   4a4d4:	4f13883a 	add	r9,r9,fp
   4a4d8:	003f6806 	br	4a27c <__alt_data_end+0xfffd471c>
   4a4dc:	1827883a 	mov	r19,r3
   4a4e0:	003fd106 	br	4a428 <__alt_data_end+0xfffd48c8>
   4a4e4:	182f883a 	mov	r23,r3
   4a4e8:	003fb906 	br	4a3d0 <__alt_data_end+0xfffd4870>
   4a4ec:	843fff84 	addi	r16,r16,-2
   4a4f0:	348d883a 	add	r6,r6,r18
   4a4f4:	003f0c06 	br	4a128 <__alt_data_end+0xfffd45c8>
   4a4f8:	843fff84 	addi	r16,r16,-2
   4a4fc:	1c87883a 	add	r3,r3,r18
   4a500:	003eac06 	br	49fb4 <__alt_data_end+0xfffd4454>

0004a504 <__umoddi3>:
   4a504:	defff404 	addi	sp,sp,-48
   4a508:	dd800815 	stw	r22,32(sp)
   4a50c:	dc400315 	stw	r17,12(sp)
   4a510:	dc000215 	stw	r16,8(sp)
   4a514:	dfc00b15 	stw	ra,44(sp)
   4a518:	df000a15 	stw	fp,40(sp)
   4a51c:	ddc00915 	stw	r23,36(sp)
   4a520:	dd400715 	stw	r21,28(sp)
   4a524:	dd000615 	stw	r20,24(sp)
   4a528:	dcc00515 	stw	r19,20(sp)
   4a52c:	dc800415 	stw	r18,16(sp)
   4a530:	2021883a 	mov	r16,r4
   4a534:	2823883a 	mov	r17,r5
   4a538:	282d883a 	mov	r22,r5
   4a53c:	38003c1e 	bne	r7,zero,4a630 <__umoddi3+0x12c>
   4a540:	3027883a 	mov	r19,r6
   4a544:	2029883a 	mov	r20,r4
   4a548:	2980522e 	bgeu	r5,r6,4a694 <__umoddi3+0x190>
   4a54c:	00bfffd4 	movui	r2,65535
   4a550:	1180a436 	bltu	r2,r6,4a7e4 <__umoddi3+0x2e0>
   4a554:	00803fc4 	movi	r2,255
   4a558:	11815e2e 	bgeu	r2,r6,4aad4 <__umoddi3+0x5d0>
   4a55c:	01400204 	movi	r5,8
   4a560:	2805883a 	mov	r2,r5
   4a564:	314ad83a 	srl	r5,r6,r5
   4a568:	00c00174 	movhi	r3,5
   4a56c:	18c20b04 	addi	r3,r3,2092
   4a570:	194b883a 	add	r5,r3,r5
   4a574:	29000003 	ldbu	r4,0(r5)
   4a578:	2089883a 	add	r4,r4,r2
   4a57c:	00800804 	movi	r2,32
   4a580:	1105c83a 	sub	r2,r2,r4
   4a584:	10010c26 	beq	r2,zero,4a9b8 <__umoddi3+0x4b4>
   4a588:	88a2983a 	sll	r17,r17,r2
   4a58c:	8108d83a 	srl	r4,r16,r4
   4a590:	30a6983a 	sll	r19,r6,r2
   4a594:	80a8983a 	sll	r20,r16,r2
   4a598:	1025883a 	mov	r18,r2
   4a59c:	892cb03a 	or	r22,r17,r4
   4a5a0:	9822d43a 	srli	r17,r19,16
   4a5a4:	b009883a 	mov	r4,r22
   4a5a8:	9d7fffcc 	andi	r21,r19,65535
   4a5ac:	880b883a 	mov	r5,r17
   4a5b0:	00409540 	call	40954 <__umodsi3>
   4a5b4:	b009883a 	mov	r4,r22
   4a5b8:	880b883a 	mov	r5,r17
   4a5bc:	102f883a 	mov	r23,r2
   4a5c0:	004094c0 	call	4094c <__udivsi3>
   4a5c4:	1009883a 	mov	r4,r2
   4a5c8:	a80b883a 	mov	r5,r21
   4a5cc:	004095c0 	call	4095c <__mulsi3>
   4a5d0:	b82e943a 	slli	r23,r23,16
   4a5d4:	a008d43a 	srli	r4,r20,16
   4a5d8:	b906b03a 	or	r3,r23,r4
   4a5dc:	1880042e 	bgeu	r3,r2,4a5f0 <__umoddi3+0xec>
   4a5e0:	1cc7883a 	add	r3,r3,r19
   4a5e4:	1cc00236 	bltu	r3,r19,4a5f0 <__umoddi3+0xec>
   4a5e8:	1880012e 	bgeu	r3,r2,4a5f0 <__umoddi3+0xec>
   4a5ec:	1cc7883a 	add	r3,r3,r19
   4a5f0:	18a1c83a 	sub	r16,r3,r2
   4a5f4:	8009883a 	mov	r4,r16
   4a5f8:	880b883a 	mov	r5,r17
   4a5fc:	00409540 	call	40954 <__umodsi3>
   4a600:	8009883a 	mov	r4,r16
   4a604:	880b883a 	mov	r5,r17
   4a608:	102d883a 	mov	r22,r2
   4a60c:	004094c0 	call	4094c <__udivsi3>
   4a610:	1009883a 	mov	r4,r2
   4a614:	a80b883a 	mov	r5,r21
   4a618:	b02c943a 	slli	r22,r22,16
   4a61c:	004095c0 	call	4095c <__mulsi3>
   4a620:	a13fffcc 	andi	r4,r20,65535
   4a624:	b106b03a 	or	r3,r22,r4
   4a628:	1880572e 	bgeu	r3,r2,4a788 <__umoddi3+0x284>
   4a62c:	00005206 	br	4a778 <__umoddi3+0x274>
   4a630:	29c05936 	bltu	r5,r7,4a798 <__umoddi3+0x294>
   4a634:	00bfffd4 	movui	r2,65535
   4a638:	11c0652e 	bgeu	r2,r7,4a7d0 <__umoddi3+0x2cc>
   4a63c:	00804034 	movhi	r2,256
   4a640:	10bfffc4 	addi	r2,r2,-1
   4a644:	11c1172e 	bgeu	r2,r7,4aaa4 <__umoddi3+0x5a0>
   4a648:	01400604 	movi	r5,24
   4a64c:	282b883a 	mov	r21,r5
   4a650:	394ad83a 	srl	r5,r7,r5
   4a654:	00c00174 	movhi	r3,5
   4a658:	18c20b04 	addi	r3,r3,2092
   4a65c:	194b883a 	add	r5,r3,r5
   4a660:	28800003 	ldbu	r2,0(r5)
   4a664:	00c00804 	movi	r3,32
   4a668:	156b883a 	add	r21,r2,r21
   4a66c:	1d69c83a 	sub	r20,r3,r21
   4a670:	a000671e 	bne	r20,zero,4a810 <__umoddi3+0x30c>
   4a674:	3c400136 	bltu	r7,r17,4a67c <__umoddi3+0x178>
   4a678:	81812336 	bltu	r16,r6,4ab08 <__umoddi3+0x604>
   4a67c:	8185c83a 	sub	r2,r16,r6
   4a680:	89e3c83a 	sub	r17,r17,r7
   4a684:	8087803a 	cmpltu	r3,r16,r2
   4a688:	88edc83a 	sub	r22,r17,r3
   4a68c:	b007883a 	mov	r3,r22
   4a690:	00004306 	br	4a7a0 <__umoddi3+0x29c>
   4a694:	3000041e 	bne	r6,zero,4a6a8 <__umoddi3+0x1a4>
   4a698:	01000044 	movi	r4,1
   4a69c:	000b883a 	mov	r5,zero
   4a6a0:	004094c0 	call	4094c <__udivsi3>
   4a6a4:	1027883a 	mov	r19,r2
   4a6a8:	00bfffd4 	movui	r2,65535
   4a6ac:	14c0532e 	bgeu	r2,r19,4a7fc <__umoddi3+0x2f8>
   4a6b0:	00804034 	movhi	r2,256
   4a6b4:	10bfffc4 	addi	r2,r2,-1
   4a6b8:	14c1032e 	bgeu	r2,r19,4aac8 <__umoddi3+0x5c4>
   4a6bc:	00800604 	movi	r2,24
   4a6c0:	1007883a 	mov	r3,r2
   4a6c4:	9884d83a 	srl	r2,r19,r2
   4a6c8:	01000174 	movhi	r4,5
   4a6cc:	21020b04 	addi	r4,r4,2092
   4a6d0:	2085883a 	add	r2,r4,r2
   4a6d4:	11000003 	ldbu	r4,0(r2)
   4a6d8:	00800804 	movi	r2,32
   4a6dc:	20c7883a 	add	r3,r4,r3
   4a6e0:	10c5c83a 	sub	r2,r2,r3
   4a6e4:	1000b61e 	bne	r2,zero,4a9c0 <__umoddi3+0x4bc>
   4a6e8:	982ad43a 	srli	r21,r19,16
   4a6ec:	8ce3c83a 	sub	r17,r17,r19
   4a6f0:	9dbfffcc 	andi	r22,r19,65535
   4a6f4:	0025883a 	mov	r18,zero
   4a6f8:	8809883a 	mov	r4,r17
   4a6fc:	a80b883a 	mov	r5,r21
   4a700:	00409540 	call	40954 <__umodsi3>
   4a704:	8809883a 	mov	r4,r17
   4a708:	a80b883a 	mov	r5,r21
   4a70c:	102f883a 	mov	r23,r2
   4a710:	004094c0 	call	4094c <__udivsi3>
   4a714:	1009883a 	mov	r4,r2
   4a718:	b00b883a 	mov	r5,r22
   4a71c:	004095c0 	call	4095c <__mulsi3>
   4a720:	b82e943a 	slli	r23,r23,16
   4a724:	a008d43a 	srli	r4,r20,16
   4a728:	b906b03a 	or	r3,r23,r4
   4a72c:	1880032e 	bgeu	r3,r2,4a73c <__umoddi3+0x238>
   4a730:	1cc7883a 	add	r3,r3,r19
   4a734:	1cc00136 	bltu	r3,r19,4a73c <__umoddi3+0x238>
   4a738:	1880f136 	bltu	r3,r2,4ab00 <__umoddi3+0x5fc>
   4a73c:	18a1c83a 	sub	r16,r3,r2
   4a740:	8009883a 	mov	r4,r16
   4a744:	a80b883a 	mov	r5,r21
   4a748:	00409540 	call	40954 <__umodsi3>
   4a74c:	8009883a 	mov	r4,r16
   4a750:	a80b883a 	mov	r5,r21
   4a754:	1023883a 	mov	r17,r2
   4a758:	004094c0 	call	4094c <__udivsi3>
   4a75c:	1009883a 	mov	r4,r2
   4a760:	b00b883a 	mov	r5,r22
   4a764:	8822943a 	slli	r17,r17,16
   4a768:	004095c0 	call	4095c <__mulsi3>
   4a76c:	a13fffcc 	andi	r4,r20,65535
   4a770:	8906b03a 	or	r3,r17,r4
   4a774:	1880042e 	bgeu	r3,r2,4a788 <__umoddi3+0x284>
   4a778:	1cc7883a 	add	r3,r3,r19
   4a77c:	1cc00236 	bltu	r3,r19,4a788 <__umoddi3+0x284>
   4a780:	1880012e 	bgeu	r3,r2,4a788 <__umoddi3+0x284>
   4a784:	1cc7883a 	add	r3,r3,r19
   4a788:	1887c83a 	sub	r3,r3,r2
   4a78c:	1c84d83a 	srl	r2,r3,r18
   4a790:	0007883a 	mov	r3,zero
   4a794:	00000206 	br	4a7a0 <__umoddi3+0x29c>
   4a798:	2005883a 	mov	r2,r4
   4a79c:	2807883a 	mov	r3,r5
   4a7a0:	dfc00b17 	ldw	ra,44(sp)
   4a7a4:	df000a17 	ldw	fp,40(sp)
   4a7a8:	ddc00917 	ldw	r23,36(sp)
   4a7ac:	dd800817 	ldw	r22,32(sp)
   4a7b0:	dd400717 	ldw	r21,28(sp)
   4a7b4:	dd000617 	ldw	r20,24(sp)
   4a7b8:	dcc00517 	ldw	r19,20(sp)
   4a7bc:	dc800417 	ldw	r18,16(sp)
   4a7c0:	dc400317 	ldw	r17,12(sp)
   4a7c4:	dc000217 	ldw	r16,8(sp)
   4a7c8:	dec00c04 	addi	sp,sp,48
   4a7cc:	f800283a 	ret
   4a7d0:	00803fc4 	movi	r2,255
   4a7d4:	11c0b02e 	bgeu	r2,r7,4aa98 <__umoddi3+0x594>
   4a7d8:	01400204 	movi	r5,8
   4a7dc:	282b883a 	mov	r21,r5
   4a7e0:	003f9b06 	br	4a650 <__alt_data_end+0xfffd4af0>
   4a7e4:	00804034 	movhi	r2,256
   4a7e8:	10bfffc4 	addi	r2,r2,-1
   4a7ec:	1180b02e 	bgeu	r2,r6,4aab0 <__umoddi3+0x5ac>
   4a7f0:	01400604 	movi	r5,24
   4a7f4:	2805883a 	mov	r2,r5
   4a7f8:	003f5a06 	br	4a564 <__alt_data_end+0xfffd4a04>
   4a7fc:	00803fc4 	movi	r2,255
   4a800:	14c0ae2e 	bgeu	r2,r19,4aabc <__umoddi3+0x5b8>
   4a804:	00800204 	movi	r2,8
   4a808:	1007883a 	mov	r3,r2
   4a80c:	003fad06 	br	4a6c4 <__alt_data_end+0xfffd4b64>
   4a810:	3d0a983a 	sll	r5,r7,r20
   4a814:	356cd83a 	srl	r22,r6,r21
   4a818:	8d78d83a 	srl	fp,r17,r21
   4a81c:	8d10983a 	sll	r8,r17,r20
   4a820:	2dacb03a 	or	r22,r5,r22
   4a824:	b02ed43a 	srli	r23,r22,16
   4a828:	8564d83a 	srl	r18,r16,r21
   4a82c:	e009883a 	mov	r4,fp
   4a830:	b80b883a 	mov	r5,r23
   4a834:	44a4b03a 	or	r18,r8,r18
   4a838:	3526983a 	sll	r19,r6,r20
   4a83c:	00409540 	call	40954 <__umodsi3>
   4a840:	e009883a 	mov	r4,fp
   4a844:	b80b883a 	mov	r5,r23
   4a848:	b47fffcc 	andi	r17,r22,65535
   4a84c:	d8800015 	stw	r2,0(sp)
   4a850:	004094c0 	call	4094c <__udivsi3>
   4a854:	1009883a 	mov	r4,r2
   4a858:	880b883a 	mov	r5,r17
   4a85c:	1039883a 	mov	fp,r2
   4a860:	004095c0 	call	4095c <__mulsi3>
   4a864:	d9800017 	ldw	r6,0(sp)
   4a868:	9008d43a 	srli	r4,r18,16
   4a86c:	8520983a 	sll	r16,r16,r20
   4a870:	300c943a 	slli	r6,r6,16
   4a874:	3106b03a 	or	r3,r6,r4
   4a878:	1880042e 	bgeu	r3,r2,4a88c <__umoddi3+0x388>
   4a87c:	1d87883a 	add	r3,r3,r22
   4a880:	e13fffc4 	addi	r4,fp,-1
   4a884:	1d809a2e 	bgeu	r3,r22,4aaf0 <__umoddi3+0x5ec>
   4a888:	2039883a 	mov	fp,r4
   4a88c:	1887c83a 	sub	r3,r3,r2
   4a890:	1809883a 	mov	r4,r3
   4a894:	b80b883a 	mov	r5,r23
   4a898:	d8c00115 	stw	r3,4(sp)
   4a89c:	00409540 	call	40954 <__umodsi3>
   4a8a0:	d8c00117 	ldw	r3,4(sp)
   4a8a4:	b80b883a 	mov	r5,r23
   4a8a8:	d8800015 	stw	r2,0(sp)
   4a8ac:	1809883a 	mov	r4,r3
   4a8b0:	004094c0 	call	4094c <__udivsi3>
   4a8b4:	880b883a 	mov	r5,r17
   4a8b8:	1009883a 	mov	r4,r2
   4a8bc:	102f883a 	mov	r23,r2
   4a8c0:	004095c0 	call	4095c <__mulsi3>
   4a8c4:	d9800017 	ldw	r6,0(sp)
   4a8c8:	947fffcc 	andi	r17,r18,65535
   4a8cc:	300c943a 	slli	r6,r6,16
   4a8d0:	3464b03a 	or	r18,r6,r17
   4a8d4:	9080042e 	bgeu	r18,r2,4a8e8 <__umoddi3+0x3e4>
   4a8d8:	95a5883a 	add	r18,r18,r22
   4a8dc:	b8ffffc4 	addi	r3,r23,-1
   4a8e0:	95807f2e 	bgeu	r18,r22,4aae0 <__umoddi3+0x5dc>
   4a8e4:	182f883a 	mov	r23,r3
   4a8e8:	e038943a 	slli	fp,fp,16
   4a8ec:	980cd43a 	srli	r6,r19,16
   4a8f0:	98ffffcc 	andi	r3,r19,65535
   4a8f4:	bf38b03a 	or	fp,r23,fp
   4a8f8:	e02ed43a 	srli	r23,fp,16
   4a8fc:	e73fffcc 	andi	fp,fp,65535
   4a900:	180b883a 	mov	r5,r3
   4a904:	e009883a 	mov	r4,fp
   4a908:	d9800015 	stw	r6,0(sp)
   4a90c:	d8c00115 	stw	r3,4(sp)
   4a910:	90a5c83a 	sub	r18,r18,r2
   4a914:	004095c0 	call	4095c <__mulsi3>
   4a918:	d8c00117 	ldw	r3,4(sp)
   4a91c:	b809883a 	mov	r4,r23
   4a920:	1023883a 	mov	r17,r2
   4a924:	180b883a 	mov	r5,r3
   4a928:	004095c0 	call	4095c <__mulsi3>
   4a92c:	d9800017 	ldw	r6,0(sp)
   4a930:	b809883a 	mov	r4,r23
   4a934:	d8800115 	stw	r2,4(sp)
   4a938:	300b883a 	mov	r5,r6
   4a93c:	302f883a 	mov	r23,r6
   4a940:	004095c0 	call	4095c <__mulsi3>
   4a944:	e009883a 	mov	r4,fp
   4a948:	b80b883a 	mov	r5,r23
   4a94c:	d8800015 	stw	r2,0(sp)
   4a950:	004095c0 	call	4095c <__mulsi3>
   4a954:	d8c00117 	ldw	r3,4(sp)
   4a958:	880cd43a 	srli	r6,r17,16
   4a95c:	d9c00017 	ldw	r7,0(sp)
   4a960:	1885883a 	add	r2,r3,r2
   4a964:	118d883a 	add	r6,r2,r6
   4a968:	30c0022e 	bgeu	r6,r3,4a974 <__umoddi3+0x470>
   4a96c:	00800074 	movhi	r2,1
   4a970:	388f883a 	add	r7,r7,r2
   4a974:	3006d43a 	srli	r3,r6,16
   4a978:	300c943a 	slli	r6,r6,16
   4a97c:	8c7fffcc 	andi	r17,r17,65535
   4a980:	38c7883a 	add	r3,r7,r3
   4a984:	3463883a 	add	r17,r6,r17
   4a988:	90c03d36 	bltu	r18,r3,4aa80 <__umoddi3+0x57c>
   4a98c:	90c06026 	beq	r18,r3,4ab10 <__umoddi3+0x60c>
   4a990:	90c9c83a 	sub	r4,r18,r3
   4a994:	880f883a 	mov	r7,r17
   4a998:	81cfc83a 	sub	r7,r16,r7
   4a99c:	81c7803a 	cmpltu	r3,r16,r7
   4a9a0:	20c7c83a 	sub	r3,r4,r3
   4a9a4:	1d44983a 	sll	r2,r3,r21
   4a9a8:	3d0ed83a 	srl	r7,r7,r20
   4a9ac:	1d06d83a 	srl	r3,r3,r20
   4a9b0:	11c4b03a 	or	r2,r2,r7
   4a9b4:	003f7a06 	br	4a7a0 <__alt_data_end+0xfffd4c40>
   4a9b8:	0025883a 	mov	r18,zero
   4a9bc:	003ef806 	br	4a5a0 <__alt_data_end+0xfffd4a40>
   4a9c0:	98a6983a 	sll	r19,r19,r2
   4a9c4:	88e8d83a 	srl	r20,r17,r3
   4a9c8:	80c6d83a 	srl	r3,r16,r3
   4a9cc:	982ad43a 	srli	r21,r19,16
   4a9d0:	88a2983a 	sll	r17,r17,r2
   4a9d4:	a009883a 	mov	r4,r20
   4a9d8:	a80b883a 	mov	r5,r21
   4a9dc:	88eeb03a 	or	r23,r17,r3
   4a9e0:	1025883a 	mov	r18,r2
   4a9e4:	00409540 	call	40954 <__umodsi3>
   4a9e8:	a009883a 	mov	r4,r20
   4a9ec:	a80b883a 	mov	r5,r21
   4a9f0:	1023883a 	mov	r17,r2
   4a9f4:	9dbfffcc 	andi	r22,r19,65535
   4a9f8:	004094c0 	call	4094c <__udivsi3>
   4a9fc:	1009883a 	mov	r4,r2
   4aa00:	b00b883a 	mov	r5,r22
   4aa04:	004095c0 	call	4095c <__mulsi3>
   4aa08:	8822943a 	slli	r17,r17,16
   4aa0c:	b808d43a 	srli	r4,r23,16
   4aa10:	84a8983a 	sll	r20,r16,r18
   4aa14:	8906b03a 	or	r3,r17,r4
   4aa18:	1880042e 	bgeu	r3,r2,4aa2c <__umoddi3+0x528>
   4aa1c:	1cc7883a 	add	r3,r3,r19
   4aa20:	1cc00236 	bltu	r3,r19,4aa2c <__umoddi3+0x528>
   4aa24:	1880012e 	bgeu	r3,r2,4aa2c <__umoddi3+0x528>
   4aa28:	1cc7883a 	add	r3,r3,r19
   4aa2c:	18a1c83a 	sub	r16,r3,r2
   4aa30:	8009883a 	mov	r4,r16
   4aa34:	a80b883a 	mov	r5,r21
   4aa38:	00409540 	call	40954 <__umodsi3>
   4aa3c:	8009883a 	mov	r4,r16
   4aa40:	a80b883a 	mov	r5,r21
   4aa44:	1039883a 	mov	fp,r2
   4aa48:	004094c0 	call	4094c <__udivsi3>
   4aa4c:	1009883a 	mov	r4,r2
   4aa50:	b00b883a 	mov	r5,r22
   4aa54:	004095c0 	call	4095c <__mulsi3>
   4aa58:	e006943a 	slli	r3,fp,16
   4aa5c:	b93fffcc 	andi	r4,r23,65535
   4aa60:	1906b03a 	or	r3,r3,r4
   4aa64:	1880042e 	bgeu	r3,r2,4aa78 <__umoddi3+0x574>
   4aa68:	1cc7883a 	add	r3,r3,r19
   4aa6c:	1cc00236 	bltu	r3,r19,4aa78 <__umoddi3+0x574>
   4aa70:	1880012e 	bgeu	r3,r2,4aa78 <__umoddi3+0x574>
   4aa74:	1cc7883a 	add	r3,r3,r19
   4aa78:	18a3c83a 	sub	r17,r3,r2
   4aa7c:	003f1e06 	br	4a6f8 <__alt_data_end+0xfffd4b98>
   4aa80:	8ccfc83a 	sub	r7,r17,r19
   4aa84:	1d89c83a 	sub	r4,r3,r22
   4aa88:	89e3803a 	cmpltu	r17,r17,r7
   4aa8c:	2463c83a 	sub	r17,r4,r17
   4aa90:	9449c83a 	sub	r4,r18,r17
   4aa94:	003fc006 	br	4a998 <__alt_data_end+0xfffd4e38>
   4aa98:	000b883a 	mov	r5,zero
   4aa9c:	002b883a 	mov	r21,zero
   4aaa0:	003eeb06 	br	4a650 <__alt_data_end+0xfffd4af0>
   4aaa4:	01400404 	movi	r5,16
   4aaa8:	282b883a 	mov	r21,r5
   4aaac:	003ee806 	br	4a650 <__alt_data_end+0xfffd4af0>
   4aab0:	01400404 	movi	r5,16
   4aab4:	2805883a 	mov	r2,r5
   4aab8:	003eaa06 	br	4a564 <__alt_data_end+0xfffd4a04>
   4aabc:	0005883a 	mov	r2,zero
   4aac0:	0007883a 	mov	r3,zero
   4aac4:	003eff06 	br	4a6c4 <__alt_data_end+0xfffd4b64>
   4aac8:	00800404 	movi	r2,16
   4aacc:	1007883a 	mov	r3,r2
   4aad0:	003efc06 	br	4a6c4 <__alt_data_end+0xfffd4b64>
   4aad4:	000b883a 	mov	r5,zero
   4aad8:	0005883a 	mov	r2,zero
   4aadc:	003ea106 	br	4a564 <__alt_data_end+0xfffd4a04>
   4aae0:	90bf802e 	bgeu	r18,r2,4a8e4 <__alt_data_end+0xfffd4d84>
   4aae4:	bdffff84 	addi	r23,r23,-2
   4aae8:	95a5883a 	add	r18,r18,r22
   4aaec:	003f7e06 	br	4a8e8 <__alt_data_end+0xfffd4d88>
   4aaf0:	18bf652e 	bgeu	r3,r2,4a888 <__alt_data_end+0xfffd4d28>
   4aaf4:	e73fff84 	addi	fp,fp,-2
   4aaf8:	1d87883a 	add	r3,r3,r22
   4aafc:	003f6306 	br	4a88c <__alt_data_end+0xfffd4d2c>
   4ab00:	1cc7883a 	add	r3,r3,r19
   4ab04:	003f0d06 	br	4a73c <__alt_data_end+0xfffd4bdc>
   4ab08:	8005883a 	mov	r2,r16
   4ab0c:	003edf06 	br	4a68c <__alt_data_end+0xfffd4b2c>
   4ab10:	847fdb36 	bltu	r16,r17,4aa80 <__alt_data_end+0xfffd4f20>
   4ab14:	880f883a 	mov	r7,r17
   4ab18:	0009883a 	mov	r4,zero
   4ab1c:	003f9e06 	br	4a998 <__alt_data_end+0xfffd4e38>

0004ab20 <__adddf3>:
   4ab20:	02000434 	movhi	r8,16
   4ab24:	423fffc4 	addi	r8,r8,-1
   4ab28:	defffb04 	addi	sp,sp,-20
   4ab2c:	2a12703a 	and	r9,r5,r8
   4ab30:	2806d7fa 	srli	r3,r5,31
   4ab34:	3a10703a 	and	r8,r7,r8
   4ab38:	3804d53a 	srli	r2,r7,20
   4ab3c:	3014d77a 	srli	r10,r6,29
   4ab40:	dc000015 	stw	r16,0(sp)
   4ab44:	481290fa 	slli	r9,r9,3
   4ab48:	2820d53a 	srli	r16,r5,20
   4ab4c:	401090fa 	slli	r8,r8,3
   4ab50:	200ad77a 	srli	r5,r4,29
   4ab54:	380ed7fa 	srli	r7,r7,31
   4ab58:	dc800215 	stw	r18,8(sp)
   4ab5c:	dc400115 	stw	r17,4(sp)
   4ab60:	dfc00415 	stw	ra,16(sp)
   4ab64:	dcc00315 	stw	r19,12(sp)
   4ab68:	1c803fcc 	andi	r18,r3,255
   4ab6c:	8401ffcc 	andi	r16,r16,2047
   4ab70:	494ab03a 	or	r5,r9,r5
   4ab74:	202290fa 	slli	r17,r4,3
   4ab78:	1081ffcc 	andi	r2,r2,2047
   4ab7c:	4290b03a 	or	r8,r8,r10
   4ab80:	300c90fa 	slli	r6,r6,3
   4ab84:	91c07026 	beq	r18,r7,4ad48 <__adddf3+0x228>
   4ab88:	8087c83a 	sub	r3,r16,r2
   4ab8c:	00c0b30e 	bge	zero,r3,4ae5c <__adddf3+0x33c>
   4ab90:	10002a1e 	bne	r2,zero,4ac3c <__adddf3+0x11c>
   4ab94:	4184b03a 	or	r2,r8,r6
   4ab98:	1000991e 	bne	r2,zero,4ae00 <__adddf3+0x2e0>
   4ab9c:	888001cc 	andi	r2,r17,7
   4aba0:	10005b26 	beq	r2,zero,4ad10 <__adddf3+0x1f0>
   4aba4:	88c003cc 	andi	r3,r17,15
   4aba8:	00800104 	movi	r2,4
   4abac:	18805826 	beq	r3,r2,4ad10 <__adddf3+0x1f0>
   4abb0:	89800104 	addi	r6,r17,4
   4abb4:	3463803a 	cmpltu	r17,r6,r17
   4abb8:	2c4b883a 	add	r5,r5,r17
   4abbc:	2880202c 	andhi	r2,r5,128
   4abc0:	9007883a 	mov	r3,r18
   4abc4:	3023883a 	mov	r17,r6
   4abc8:	10005426 	beq	r2,zero,4ad1c <__adddf3+0x1fc>
   4abcc:	84000044 	addi	r16,r16,1
   4abd0:	0081ffc4 	movi	r2,2047
   4abd4:	8080c126 	beq	r16,r2,4aedc <__adddf3+0x3bc>
   4abd8:	013fe034 	movhi	r4,65408
   4abdc:	213fffc4 	addi	r4,r4,-1
   4abe0:	290a703a 	and	r5,r5,r4
   4abe4:	2804977a 	slli	r2,r5,29
   4abe8:	280a927a 	slli	r5,r5,9
   4abec:	8822d0fa 	srli	r17,r17,3
   4abf0:	8401ffcc 	andi	r16,r16,2047
   4abf4:	2808d33a 	srli	r4,r5,12
   4abf8:	1444b03a 	or	r2,r2,r17
   4abfc:	8401ffcc 	andi	r16,r16,2047
   4ac00:	800a953a 	slli	r5,r16,20
   4ac04:	18c03fcc 	andi	r3,r3,255
   4ac08:	04000434 	movhi	r16,16
   4ac0c:	180697fa 	slli	r3,r3,31
   4ac10:	843fffc4 	addi	r16,r16,-1
   4ac14:	2420703a 	and	r16,r4,r16
   4ac18:	8160b03a 	or	r16,r16,r5
   4ac1c:	80c6b03a 	or	r3,r16,r3
   4ac20:	dfc00417 	ldw	ra,16(sp)
   4ac24:	dcc00317 	ldw	r19,12(sp)
   4ac28:	dc800217 	ldw	r18,8(sp)
   4ac2c:	dc400117 	ldw	r17,4(sp)
   4ac30:	dc000017 	ldw	r16,0(sp)
   4ac34:	dec00504 	addi	sp,sp,20
   4ac38:	f800283a 	ret
   4ac3c:	0081ffc4 	movi	r2,2047
   4ac40:	80bfd626 	beq	r16,r2,4ab9c <__alt_data_end+0xfffd503c>
   4ac44:	42002034 	orhi	r8,r8,128
   4ac48:	00800e04 	movi	r2,56
   4ac4c:	10c0a616 	blt	r2,r3,4aee8 <__adddf3+0x3c8>
   4ac50:	008007c4 	movi	r2,31
   4ac54:	10c0c916 	blt	r2,r3,4af7c <__adddf3+0x45c>
   4ac58:	00800804 	movi	r2,32
   4ac5c:	10c5c83a 	sub	r2,r2,r3
   4ac60:	408e983a 	sll	r7,r8,r2
   4ac64:	30c8d83a 	srl	r4,r6,r3
   4ac68:	3084983a 	sll	r2,r6,r2
   4ac6c:	40c6d83a 	srl	r3,r8,r3
   4ac70:	390cb03a 	or	r6,r7,r4
   4ac74:	1004c03a 	cmpne	r2,r2,zero
   4ac78:	308cb03a 	or	r6,r6,r2
   4ac7c:	898dc83a 	sub	r6,r17,r6
   4ac80:	89a3803a 	cmpltu	r17,r17,r6
   4ac84:	28cbc83a 	sub	r5,r5,r3
   4ac88:	2c4bc83a 	sub	r5,r5,r17
   4ac8c:	3023883a 	mov	r17,r6
   4ac90:	2880202c 	andhi	r2,r5,128
   4ac94:	10006d26 	beq	r2,zero,4ae4c <__adddf3+0x32c>
   4ac98:	04c02034 	movhi	r19,128
   4ac9c:	9cffffc4 	addi	r19,r19,-1
   4aca0:	2ce6703a 	and	r19,r5,r19
   4aca4:	98007e26 	beq	r19,zero,4aea0 <__adddf3+0x380>
   4aca8:	9809883a 	mov	r4,r19
   4acac:	004d2b80 	call	4d2b8 <__clzsi2>
   4acb0:	10fffe04 	addi	r3,r2,-8
   4acb4:	010007c4 	movi	r4,31
   4acb8:	20c07f16 	blt	r4,r3,4aeb8 <__adddf3+0x398>
   4acbc:	01400a04 	movi	r5,40
   4acc0:	2885c83a 	sub	r2,r5,r2
   4acc4:	888ad83a 	srl	r5,r17,r2
   4acc8:	98e6983a 	sll	r19,r19,r3
   4accc:	88e2983a 	sll	r17,r17,r3
   4acd0:	2ce6b03a 	or	r19,r5,r19
   4acd4:	1c007c16 	blt	r3,r16,4aec8 <__adddf3+0x3a8>
   4acd8:	1c21c83a 	sub	r16,r3,r16
   4acdc:	81400044 	addi	r5,r16,1
   4ace0:	00c007c4 	movi	r3,31
   4ace4:	19409816 	blt	r3,r5,4af48 <__adddf3+0x428>
   4ace8:	1c21c83a 	sub	r16,r3,r16
   4acec:	8c08983a 	sll	r4,r17,r16
   4acf0:	8946d83a 	srl	r3,r17,r5
   4acf4:	9c20983a 	sll	r16,r19,r16
   4acf8:	2008c03a 	cmpne	r4,r4,zero
   4acfc:	994ad83a 	srl	r5,r19,r5
   4ad00:	1c06b03a 	or	r3,r3,r16
   4ad04:	1922b03a 	or	r17,r3,r4
   4ad08:	0021883a 	mov	r16,zero
   4ad0c:	003fa306 	br	4ab9c <__alt_data_end+0xfffd503c>
   4ad10:	2880202c 	andhi	r2,r5,128
   4ad14:	9007883a 	mov	r3,r18
   4ad18:	103fac1e 	bne	r2,zero,4abcc <__alt_data_end+0xfffd506c>
   4ad1c:	2804977a 	slli	r2,r5,29
   4ad20:	8822d0fa 	srli	r17,r17,3
   4ad24:	0101ffc4 	movi	r4,2047
   4ad28:	280ad0fa 	srli	r5,r5,3
   4ad2c:	1444b03a 	or	r2,r2,r17
   4ad30:	81002c26 	beq	r16,r4,4ade4 <__adddf3+0x2c4>
   4ad34:	8120703a 	and	r16,r16,r4
   4ad38:	01000434 	movhi	r4,16
   4ad3c:	213fffc4 	addi	r4,r4,-1
   4ad40:	2908703a 	and	r4,r5,r4
   4ad44:	003fad06 	br	4abfc <__alt_data_end+0xfffd509c>
   4ad48:	8089c83a 	sub	r4,r16,r2
   4ad4c:	01006a0e 	bge	zero,r4,4aef8 <__adddf3+0x3d8>
   4ad50:	10003326 	beq	r2,zero,4ae20 <__adddf3+0x300>
   4ad54:	0081ffc4 	movi	r2,2047
   4ad58:	80bf9026 	beq	r16,r2,4ab9c <__alt_data_end+0xfffd503c>
   4ad5c:	42002034 	orhi	r8,r8,128
   4ad60:	00800e04 	movi	r2,56
   4ad64:	1100b116 	blt	r2,r4,4b02c <__adddf3+0x50c>
   4ad68:	008007c4 	movi	r2,31
   4ad6c:	1100e216 	blt	r2,r4,4b0f8 <__adddf3+0x5d8>
   4ad70:	00800804 	movi	r2,32
   4ad74:	1105c83a 	sub	r2,r2,r4
   4ad78:	4092983a 	sll	r9,r8,r2
   4ad7c:	310ed83a 	srl	r7,r6,r4
   4ad80:	3084983a 	sll	r2,r6,r2
   4ad84:	4110d83a 	srl	r8,r8,r4
   4ad88:	49ccb03a 	or	r6,r9,r7
   4ad8c:	1004c03a 	cmpne	r2,r2,zero
   4ad90:	308cb03a 	or	r6,r6,r2
   4ad94:	344d883a 	add	r6,r6,r17
   4ad98:	3463803a 	cmpltu	r17,r6,r17
   4ad9c:	414b883a 	add	r5,r8,r5
   4ada0:	2c4b883a 	add	r5,r5,r17
   4ada4:	3023883a 	mov	r17,r6
   4ada8:	2880202c 	andhi	r2,r5,128
   4adac:	10002726 	beq	r2,zero,4ae4c <__adddf3+0x32c>
   4adb0:	84000044 	addi	r16,r16,1
   4adb4:	0081ffc4 	movi	r2,2047
   4adb8:	8080ae26 	beq	r16,r2,4b074 <__adddf3+0x554>
   4adbc:	00bfe034 	movhi	r2,65408
   4adc0:	10bfffc4 	addi	r2,r2,-1
   4adc4:	288a703a 	and	r5,r5,r2
   4adc8:	880cd07a 	srli	r6,r17,1
   4adcc:	280897fa 	slli	r4,r5,31
   4add0:	88c0004c 	andi	r3,r17,1
   4add4:	30e2b03a 	or	r17,r6,r3
   4add8:	280ad07a 	srli	r5,r5,1
   4addc:	8922b03a 	or	r17,r17,r4
   4ade0:	003f6e06 	br	4ab9c <__alt_data_end+0xfffd503c>
   4ade4:	1148b03a 	or	r4,r2,r5
   4ade8:	20003c26 	beq	r4,zero,4aedc <__adddf3+0x3bc>
   4adec:	29000234 	orhi	r4,r5,8
   4adf0:	01400434 	movhi	r5,16
   4adf4:	297fffc4 	addi	r5,r5,-1
   4adf8:	2148703a 	and	r4,r4,r5
   4adfc:	003f7f06 	br	4abfc <__alt_data_end+0xfffd509c>
   4ae00:	18ffffc4 	addi	r3,r3,-1
   4ae04:	18004d1e 	bne	r3,zero,4af3c <__adddf3+0x41c>
   4ae08:	898dc83a 	sub	r6,r17,r6
   4ae0c:	89a3803a 	cmpltu	r17,r17,r6
   4ae10:	2a0bc83a 	sub	r5,r5,r8
   4ae14:	2c4bc83a 	sub	r5,r5,r17
   4ae18:	3023883a 	mov	r17,r6
   4ae1c:	003f9c06 	br	4ac90 <__alt_data_end+0xfffd5130>
   4ae20:	4184b03a 	or	r2,r8,r6
   4ae24:	103f5d26 	beq	r2,zero,4ab9c <__alt_data_end+0xfffd503c>
   4ae28:	213fffc4 	addi	r4,r4,-1
   4ae2c:	203fd926 	beq	r4,zero,4ad94 <__alt_data_end+0xfffd5234>
   4ae30:	0081ffc4 	movi	r2,2047
   4ae34:	80bfca1e 	bne	r16,r2,4ad60 <__alt_data_end+0xfffd5200>
   4ae38:	003f5806 	br	4ab9c <__alt_data_end+0xfffd503c>
   4ae3c:	10c8b03a 	or	r4,r2,r3
   4ae40:	20008b26 	beq	r4,zero,4b070 <__adddf3+0x550>
   4ae44:	100b883a 	mov	r5,r2
   4ae48:	1823883a 	mov	r17,r3
   4ae4c:	888001cc 	andi	r2,r17,7
   4ae50:	103f541e 	bne	r2,zero,4aba4 <__alt_data_end+0xfffd5044>
   4ae54:	9007883a 	mov	r3,r18
   4ae58:	003fb006 	br	4ad1c <__alt_data_end+0xfffd51bc>
   4ae5c:	1800531e 	bne	r3,zero,4afac <__adddf3+0x48c>
   4ae60:	80800044 	addi	r2,r16,1
   4ae64:	1081ffcc 	andi	r2,r2,2047
   4ae68:	00c00044 	movi	r3,1
   4ae6c:	1880990e 	bge	r3,r2,4b0d4 <__adddf3+0x5b4>
   4ae70:	8985c83a 	sub	r2,r17,r6
   4ae74:	8887803a 	cmpltu	r3,r17,r2
   4ae78:	2a27c83a 	sub	r19,r5,r8
   4ae7c:	98e7c83a 	sub	r19,r19,r3
   4ae80:	98c0202c 	andhi	r3,r19,128
   4ae84:	18006226 	beq	r3,zero,4b010 <__adddf3+0x4f0>
   4ae88:	3463c83a 	sub	r17,r6,r17
   4ae8c:	4151c83a 	sub	r8,r8,r5
   4ae90:	344d803a 	cmpltu	r6,r6,r17
   4ae94:	41a7c83a 	sub	r19,r8,r6
   4ae98:	3825883a 	mov	r18,r7
   4ae9c:	983f821e 	bne	r19,zero,4aca8 <__alt_data_end+0xfffd5148>
   4aea0:	8809883a 	mov	r4,r17
   4aea4:	004d2b80 	call	4d2b8 <__clzsi2>
   4aea8:	10800804 	addi	r2,r2,32
   4aeac:	10fffe04 	addi	r3,r2,-8
   4aeb0:	010007c4 	movi	r4,31
   4aeb4:	20ff810e 	bge	r4,r3,4acbc <__alt_data_end+0xfffd515c>
   4aeb8:	14fff604 	addi	r19,r2,-40
   4aebc:	8ce6983a 	sll	r19,r17,r19
   4aec0:	0023883a 	mov	r17,zero
   4aec4:	1c3f840e 	bge	r3,r16,4acd8 <__alt_data_end+0xfffd5178>
   4aec8:	017fe034 	movhi	r5,65408
   4aecc:	297fffc4 	addi	r5,r5,-1
   4aed0:	80e1c83a 	sub	r16,r16,r3
   4aed4:	994a703a 	and	r5,r19,r5
   4aed8:	003f3006 	br	4ab9c <__alt_data_end+0xfffd503c>
   4aedc:	0009883a 	mov	r4,zero
   4aee0:	0005883a 	mov	r2,zero
   4aee4:	003f4506 	br	4abfc <__alt_data_end+0xfffd509c>
   4aee8:	418cb03a 	or	r6,r8,r6
   4aeec:	300cc03a 	cmpne	r6,r6,zero
   4aef0:	0007883a 	mov	r3,zero
   4aef4:	003f6106 	br	4ac7c <__alt_data_end+0xfffd511c>
   4aef8:	2000921e 	bne	r4,zero,4b144 <__adddf3+0x624>
   4aefc:	80800044 	addi	r2,r16,1
   4af00:	11c1ffcc 	andi	r7,r2,2047
   4af04:	01000044 	movi	r4,1
   4af08:	21c0610e 	bge	r4,r7,4b090 <__adddf3+0x570>
   4af0c:	0101ffc4 	movi	r4,2047
   4af10:	1100a326 	beq	r2,r4,4b1a0 <__adddf3+0x680>
   4af14:	344d883a 	add	r6,r6,r17
   4af18:	3463803a 	cmpltu	r17,r6,r17
   4af1c:	414b883a 	add	r5,r8,r5
   4af20:	2c4b883a 	add	r5,r5,r17
   4af24:	282297fa 	slli	r17,r5,31
   4af28:	300cd07a 	srli	r6,r6,1
   4af2c:	280ad07a 	srli	r5,r5,1
   4af30:	1021883a 	mov	r16,r2
   4af34:	89a2b03a 	or	r17,r17,r6
   4af38:	003f1806 	br	4ab9c <__alt_data_end+0xfffd503c>
   4af3c:	0081ffc4 	movi	r2,2047
   4af40:	80bf411e 	bne	r16,r2,4ac48 <__alt_data_end+0xfffd50e8>
   4af44:	003f1506 	br	4ab9c <__alt_data_end+0xfffd503c>
   4af48:	80bff844 	addi	r2,r16,-31
   4af4c:	00c00804 	movi	r3,32
   4af50:	9884d83a 	srl	r2,r19,r2
   4af54:	28c04a26 	beq	r5,r3,4b080 <__adddf3+0x560>
   4af58:	00c00fc4 	movi	r3,63
   4af5c:	1c21c83a 	sub	r16,r3,r16
   4af60:	9c26983a 	sll	r19,r19,r16
   4af64:	9c62b03a 	or	r17,r19,r17
   4af68:	8822c03a 	cmpne	r17,r17,zero
   4af6c:	88a2b03a 	or	r17,r17,r2
   4af70:	000b883a 	mov	r5,zero
   4af74:	0021883a 	mov	r16,zero
   4af78:	003fb406 	br	4ae4c <__alt_data_end+0xfffd52ec>
   4af7c:	18bff804 	addi	r2,r3,-32
   4af80:	01000804 	movi	r4,32
   4af84:	4084d83a 	srl	r2,r8,r2
   4af88:	19003f26 	beq	r3,r4,4b088 <__adddf3+0x568>
   4af8c:	01001004 	movi	r4,64
   4af90:	20c7c83a 	sub	r3,r4,r3
   4af94:	40d0983a 	sll	r8,r8,r3
   4af98:	418cb03a 	or	r6,r8,r6
   4af9c:	300cc03a 	cmpne	r6,r6,zero
   4afa0:	308cb03a 	or	r6,r6,r2
   4afa4:	0007883a 	mov	r3,zero
   4afa8:	003f3406 	br	4ac7c <__alt_data_end+0xfffd511c>
   4afac:	80002326 	beq	r16,zero,4b03c <__adddf3+0x51c>
   4afb0:	0101ffc4 	movi	r4,2047
   4afb4:	11005e26 	beq	r2,r4,4b130 <__adddf3+0x610>
   4afb8:	00c7c83a 	sub	r3,zero,r3
   4afbc:	29402034 	orhi	r5,r5,128
   4afc0:	01000e04 	movi	r4,56
   4afc4:	20c07216 	blt	r4,r3,4b190 <__adddf3+0x670>
   4afc8:	010007c4 	movi	r4,31
   4afcc:	20c0ce16 	blt	r4,r3,4b308 <__adddf3+0x7e8>
   4afd0:	01000804 	movi	r4,32
   4afd4:	20c9c83a 	sub	r4,r4,r3
   4afd8:	2914983a 	sll	r10,r5,r4
   4afdc:	88d2d83a 	srl	r9,r17,r3
   4afe0:	8908983a 	sll	r4,r17,r4
   4afe4:	28c6d83a 	srl	r3,r5,r3
   4afe8:	5262b03a 	or	r17,r10,r9
   4afec:	2008c03a 	cmpne	r4,r4,zero
   4aff0:	8922b03a 	or	r17,r17,r4
   4aff4:	3463c83a 	sub	r17,r6,r17
   4aff8:	40c7c83a 	sub	r3,r8,r3
   4affc:	344d803a 	cmpltu	r6,r6,r17
   4b000:	198bc83a 	sub	r5,r3,r6
   4b004:	1021883a 	mov	r16,r2
   4b008:	3825883a 	mov	r18,r7
   4b00c:	003f2006 	br	4ac90 <__alt_data_end+0xfffd5130>
   4b010:	9886b03a 	or	r3,r19,r2
   4b014:	1800141e 	bne	r3,zero,4b068 <__adddf3+0x548>
   4b018:	0007883a 	mov	r3,zero
   4b01c:	000b883a 	mov	r5,zero
   4b020:	0023883a 	mov	r17,zero
   4b024:	0021883a 	mov	r16,zero
   4b028:	003f3c06 	br	4ad1c <__alt_data_end+0xfffd51bc>
   4b02c:	418cb03a 	or	r6,r8,r6
   4b030:	300cc03a 	cmpne	r6,r6,zero
   4b034:	0011883a 	mov	r8,zero
   4b038:	003f5606 	br	4ad94 <__alt_data_end+0xfffd5234>
   4b03c:	2c48b03a 	or	r4,r5,r17
   4b040:	20003b26 	beq	r4,zero,4b130 <__adddf3+0x610>
   4b044:	00c6303a 	nor	r3,zero,r3
   4b048:	1800371e 	bne	r3,zero,4b128 <__adddf3+0x608>
   4b04c:	3463c83a 	sub	r17,r6,r17
   4b050:	414bc83a 	sub	r5,r8,r5
   4b054:	344d803a 	cmpltu	r6,r6,r17
   4b058:	298bc83a 	sub	r5,r5,r6
   4b05c:	1021883a 	mov	r16,r2
   4b060:	3825883a 	mov	r18,r7
   4b064:	003f0a06 	br	4ac90 <__alt_data_end+0xfffd5130>
   4b068:	1023883a 	mov	r17,r2
   4b06c:	003f0d06 	br	4aca4 <__alt_data_end+0xfffd5144>
   4b070:	0007883a 	mov	r3,zero
   4b074:	000b883a 	mov	r5,zero
   4b078:	0023883a 	mov	r17,zero
   4b07c:	003f2706 	br	4ad1c <__alt_data_end+0xfffd51bc>
   4b080:	0027883a 	mov	r19,zero
   4b084:	003fb706 	br	4af64 <__alt_data_end+0xfffd5404>
   4b088:	0011883a 	mov	r8,zero
   4b08c:	003fc206 	br	4af98 <__alt_data_end+0xfffd5438>
   4b090:	2c44b03a 	or	r2,r5,r17
   4b094:	8000871e 	bne	r16,zero,4b2b4 <__adddf3+0x794>
   4b098:	1000b126 	beq	r2,zero,4b360 <__adddf3+0x840>
   4b09c:	4184b03a 	or	r2,r8,r6
   4b0a0:	103ebe26 	beq	r2,zero,4ab9c <__alt_data_end+0xfffd503c>
   4b0a4:	3445883a 	add	r2,r6,r17
   4b0a8:	1463803a 	cmpltu	r17,r2,r17
   4b0ac:	414b883a 	add	r5,r8,r5
   4b0b0:	2c4b883a 	add	r5,r5,r17
   4b0b4:	28c0202c 	andhi	r3,r5,128
   4b0b8:	1023883a 	mov	r17,r2
   4b0bc:	183f6326 	beq	r3,zero,4ae4c <__alt_data_end+0xfffd52ec>
   4b0c0:	00bfe034 	movhi	r2,65408
   4b0c4:	10bfffc4 	addi	r2,r2,-1
   4b0c8:	2021883a 	mov	r16,r4
   4b0cc:	288a703a 	and	r5,r5,r2
   4b0d0:	003eb206 	br	4ab9c <__alt_data_end+0xfffd503c>
   4b0d4:	2c44b03a 	or	r2,r5,r17
   4b0d8:	8000251e 	bne	r16,zero,4b170 <__adddf3+0x650>
   4b0dc:	10004b1e 	bne	r2,zero,4b20c <__adddf3+0x6ec>
   4b0e0:	4184b03a 	or	r2,r8,r6
   4b0e4:	103fe226 	beq	r2,zero,4b070 <__alt_data_end+0xfffd5510>
   4b0e8:	400b883a 	mov	r5,r8
   4b0ec:	3023883a 	mov	r17,r6
   4b0f0:	3825883a 	mov	r18,r7
   4b0f4:	003ea906 	br	4ab9c <__alt_data_end+0xfffd503c>
   4b0f8:	20bff804 	addi	r2,r4,-32
   4b0fc:	01c00804 	movi	r7,32
   4b100:	4084d83a 	srl	r2,r8,r2
   4b104:	21c07e26 	beq	r4,r7,4b300 <__adddf3+0x7e0>
   4b108:	01c01004 	movi	r7,64
   4b10c:	3909c83a 	sub	r4,r7,r4
   4b110:	4110983a 	sll	r8,r8,r4
   4b114:	418cb03a 	or	r6,r8,r6
   4b118:	300cc03a 	cmpne	r6,r6,zero
   4b11c:	308cb03a 	or	r6,r6,r2
   4b120:	0011883a 	mov	r8,zero
   4b124:	003f1b06 	br	4ad94 <__alt_data_end+0xfffd5234>
   4b128:	0101ffc4 	movi	r4,2047
   4b12c:	113fa41e 	bne	r2,r4,4afc0 <__alt_data_end+0xfffd5460>
   4b130:	400b883a 	mov	r5,r8
   4b134:	3023883a 	mov	r17,r6
   4b138:	1021883a 	mov	r16,r2
   4b13c:	3825883a 	mov	r18,r7
   4b140:	003e9606 	br	4ab9c <__alt_data_end+0xfffd503c>
   4b144:	80001a1e 	bne	r16,zero,4b1b0 <__adddf3+0x690>
   4b148:	2c4eb03a 	or	r7,r5,r17
   4b14c:	38005526 	beq	r7,zero,4b2a4 <__adddf3+0x784>
   4b150:	0108303a 	nor	r4,zero,r4
   4b154:	2000511e 	bne	r4,zero,4b29c <__adddf3+0x77c>
   4b158:	89a3883a 	add	r17,r17,r6
   4b15c:	414b883a 	add	r5,r8,r5
   4b160:	898d803a 	cmpltu	r6,r17,r6
   4b164:	298b883a 	add	r5,r5,r6
   4b168:	1021883a 	mov	r16,r2
   4b16c:	003f0e06 	br	4ada8 <__alt_data_end+0xfffd5248>
   4b170:	1000341e 	bne	r2,zero,4b244 <__adddf3+0x724>
   4b174:	4184b03a 	or	r2,r8,r6
   4b178:	10006f26 	beq	r2,zero,4b338 <__adddf3+0x818>
   4b17c:	400b883a 	mov	r5,r8
   4b180:	3023883a 	mov	r17,r6
   4b184:	3825883a 	mov	r18,r7
   4b188:	0401ffc4 	movi	r16,2047
   4b18c:	003e8306 	br	4ab9c <__alt_data_end+0xfffd503c>
   4b190:	2c62b03a 	or	r17,r5,r17
   4b194:	8822c03a 	cmpne	r17,r17,zero
   4b198:	0007883a 	mov	r3,zero
   4b19c:	003f9506 	br	4aff4 <__alt_data_end+0xfffd5494>
   4b1a0:	1021883a 	mov	r16,r2
   4b1a4:	000b883a 	mov	r5,zero
   4b1a8:	0023883a 	mov	r17,zero
   4b1ac:	003edb06 	br	4ad1c <__alt_data_end+0xfffd51bc>
   4b1b0:	01c1ffc4 	movi	r7,2047
   4b1b4:	11c03b26 	beq	r2,r7,4b2a4 <__adddf3+0x784>
   4b1b8:	0109c83a 	sub	r4,zero,r4
   4b1bc:	29402034 	orhi	r5,r5,128
   4b1c0:	01c00e04 	movi	r7,56
   4b1c4:	39006216 	blt	r7,r4,4b350 <__adddf3+0x830>
   4b1c8:	01c007c4 	movi	r7,31
   4b1cc:	39006b16 	blt	r7,r4,4b37c <__adddf3+0x85c>
   4b1d0:	01c00804 	movi	r7,32
   4b1d4:	390fc83a 	sub	r7,r7,r4
   4b1d8:	29d4983a 	sll	r10,r5,r7
   4b1dc:	8912d83a 	srl	r9,r17,r4
   4b1e0:	89ce983a 	sll	r7,r17,r7
   4b1e4:	2908d83a 	srl	r4,r5,r4
   4b1e8:	5262b03a 	or	r17,r10,r9
   4b1ec:	380ac03a 	cmpne	r5,r7,zero
   4b1f0:	8962b03a 	or	r17,r17,r5
   4b1f4:	89a3883a 	add	r17,r17,r6
   4b1f8:	2211883a 	add	r8,r4,r8
   4b1fc:	898d803a 	cmpltu	r6,r17,r6
   4b200:	418b883a 	add	r5,r8,r6
   4b204:	1021883a 	mov	r16,r2
   4b208:	003ee706 	br	4ada8 <__alt_data_end+0xfffd5248>
   4b20c:	4184b03a 	or	r2,r8,r6
   4b210:	103e6226 	beq	r2,zero,4ab9c <__alt_data_end+0xfffd503c>
   4b214:	8987c83a 	sub	r3,r17,r6
   4b218:	88c9803a 	cmpltu	r4,r17,r3
   4b21c:	2a05c83a 	sub	r2,r5,r8
   4b220:	1105c83a 	sub	r2,r2,r4
   4b224:	1100202c 	andhi	r4,r2,128
   4b228:	203f0426 	beq	r4,zero,4ae3c <__alt_data_end+0xfffd52dc>
   4b22c:	3463c83a 	sub	r17,r6,r17
   4b230:	414bc83a 	sub	r5,r8,r5
   4b234:	344d803a 	cmpltu	r6,r6,r17
   4b238:	298bc83a 	sub	r5,r5,r6
   4b23c:	3825883a 	mov	r18,r7
   4b240:	003e5606 	br	4ab9c <__alt_data_end+0xfffd503c>
   4b244:	4184b03a 	or	r2,r8,r6
   4b248:	10002b26 	beq	r2,zero,4b2f8 <__adddf3+0x7d8>
   4b24c:	2804d0fa 	srli	r2,r5,3
   4b250:	8822d0fa 	srli	r17,r17,3
   4b254:	280a977a 	slli	r5,r5,29
   4b258:	10c0022c 	andhi	r3,r2,8
   4b25c:	2c62b03a 	or	r17,r5,r17
   4b260:	18000826 	beq	r3,zero,4b284 <__adddf3+0x764>
   4b264:	4008d0fa 	srli	r4,r8,3
   4b268:	20c0022c 	andhi	r3,r4,8
   4b26c:	1800051e 	bne	r3,zero,4b284 <__adddf3+0x764>
   4b270:	300cd0fa 	srli	r6,r6,3
   4b274:	4010977a 	slli	r8,r8,29
   4b278:	2005883a 	mov	r2,r4
   4b27c:	3825883a 	mov	r18,r7
   4b280:	41a2b03a 	or	r17,r8,r6
   4b284:	880ad77a 	srli	r5,r17,29
   4b288:	100490fa 	slli	r2,r2,3
   4b28c:	882290fa 	slli	r17,r17,3
   4b290:	0401ffc4 	movi	r16,2047
   4b294:	288ab03a 	or	r5,r5,r2
   4b298:	003e4006 	br	4ab9c <__alt_data_end+0xfffd503c>
   4b29c:	01c1ffc4 	movi	r7,2047
   4b2a0:	11ffc71e 	bne	r2,r7,4b1c0 <__alt_data_end+0xfffd5660>
   4b2a4:	400b883a 	mov	r5,r8
   4b2a8:	3023883a 	mov	r17,r6
   4b2ac:	1021883a 	mov	r16,r2
   4b2b0:	003e3a06 	br	4ab9c <__alt_data_end+0xfffd503c>
   4b2b4:	10002d26 	beq	r2,zero,4b36c <__adddf3+0x84c>
   4b2b8:	4184b03a 	or	r2,r8,r6
   4b2bc:	10000e26 	beq	r2,zero,4b2f8 <__adddf3+0x7d8>
   4b2c0:	2804d0fa 	srli	r2,r5,3
   4b2c4:	8822d0fa 	srli	r17,r17,3
   4b2c8:	280a977a 	slli	r5,r5,29
   4b2cc:	10c0022c 	andhi	r3,r2,8
   4b2d0:	2c62b03a 	or	r17,r5,r17
   4b2d4:	183feb26 	beq	r3,zero,4b284 <__alt_data_end+0xfffd5724>
   4b2d8:	4008d0fa 	srli	r4,r8,3
   4b2dc:	20c0022c 	andhi	r3,r4,8
   4b2e0:	183fe81e 	bne	r3,zero,4b284 <__alt_data_end+0xfffd5724>
   4b2e4:	300cd0fa 	srli	r6,r6,3
   4b2e8:	4010977a 	slli	r8,r8,29
   4b2ec:	2005883a 	mov	r2,r4
   4b2f0:	41a2b03a 	or	r17,r8,r6
   4b2f4:	003fe306 	br	4b284 <__alt_data_end+0xfffd5724>
   4b2f8:	0401ffc4 	movi	r16,2047
   4b2fc:	003e2706 	br	4ab9c <__alt_data_end+0xfffd503c>
   4b300:	0011883a 	mov	r8,zero
   4b304:	003f8306 	br	4b114 <__alt_data_end+0xfffd55b4>
   4b308:	193ff804 	addi	r4,r3,-32
   4b30c:	02400804 	movi	r9,32
   4b310:	2908d83a 	srl	r4,r5,r4
   4b314:	1a402526 	beq	r3,r9,4b3ac <__adddf3+0x88c>
   4b318:	02401004 	movi	r9,64
   4b31c:	48c7c83a 	sub	r3,r9,r3
   4b320:	28ca983a 	sll	r5,r5,r3
   4b324:	2c62b03a 	or	r17,r5,r17
   4b328:	8822c03a 	cmpne	r17,r17,zero
   4b32c:	8922b03a 	or	r17,r17,r4
   4b330:	0007883a 	mov	r3,zero
   4b334:	003f2f06 	br	4aff4 <__alt_data_end+0xfffd5494>
   4b338:	01402034 	movhi	r5,128
   4b33c:	0007883a 	mov	r3,zero
   4b340:	297fffc4 	addi	r5,r5,-1
   4b344:	047ffe04 	movi	r17,-8
   4b348:	0401ffc4 	movi	r16,2047
   4b34c:	003e7306 	br	4ad1c <__alt_data_end+0xfffd51bc>
   4b350:	2c62b03a 	or	r17,r5,r17
   4b354:	8822c03a 	cmpne	r17,r17,zero
   4b358:	0009883a 	mov	r4,zero
   4b35c:	003fa506 	br	4b1f4 <__alt_data_end+0xfffd5694>
   4b360:	400b883a 	mov	r5,r8
   4b364:	3023883a 	mov	r17,r6
   4b368:	003e0c06 	br	4ab9c <__alt_data_end+0xfffd503c>
   4b36c:	400b883a 	mov	r5,r8
   4b370:	3023883a 	mov	r17,r6
   4b374:	0401ffc4 	movi	r16,2047
   4b378:	003e0806 	br	4ab9c <__alt_data_end+0xfffd503c>
   4b37c:	21fff804 	addi	r7,r4,-32
   4b380:	02400804 	movi	r9,32
   4b384:	29ced83a 	srl	r7,r5,r7
   4b388:	22400a26 	beq	r4,r9,4b3b4 <__adddf3+0x894>
   4b38c:	02401004 	movi	r9,64
   4b390:	4909c83a 	sub	r4,r9,r4
   4b394:	290a983a 	sll	r5,r5,r4
   4b398:	2c62b03a 	or	r17,r5,r17
   4b39c:	8822c03a 	cmpne	r17,r17,zero
   4b3a0:	89e2b03a 	or	r17,r17,r7
   4b3a4:	0009883a 	mov	r4,zero
   4b3a8:	003f9206 	br	4b1f4 <__alt_data_end+0xfffd5694>
   4b3ac:	000b883a 	mov	r5,zero
   4b3b0:	003fdc06 	br	4b324 <__alt_data_end+0xfffd57c4>
   4b3b4:	000b883a 	mov	r5,zero
   4b3b8:	003ff706 	br	4b398 <__alt_data_end+0xfffd5838>

0004b3bc <__divdf3>:
   4b3bc:	defff004 	addi	sp,sp,-64
   4b3c0:	dc800815 	stw	r18,32(sp)
   4b3c4:	2824d53a 	srli	r18,r5,20
   4b3c8:	dd800c15 	stw	r22,48(sp)
   4b3cc:	282cd7fa 	srli	r22,r5,31
   4b3d0:	dc000615 	stw	r16,24(sp)
   4b3d4:	04000434 	movhi	r16,16
   4b3d8:	df000e15 	stw	fp,56(sp)
   4b3dc:	dd000a15 	stw	r20,40(sp)
   4b3e0:	dcc00915 	stw	r19,36(sp)
   4b3e4:	dc400715 	stw	r17,28(sp)
   4b3e8:	843fffc4 	addi	r16,r16,-1
   4b3ec:	dfc00f15 	stw	ra,60(sp)
   4b3f0:	ddc00d15 	stw	r23,52(sp)
   4b3f4:	dd400b15 	stw	r21,44(sp)
   4b3f8:	9481ffcc 	andi	r18,r18,2047
   4b3fc:	2029883a 	mov	r20,r4
   4b400:	2027883a 	mov	r19,r4
   4b404:	2c22703a 	and	r17,r5,r16
   4b408:	b7003fcc 	andi	fp,r22,255
   4b40c:	90005e26 	beq	r18,zero,4b588 <__divdf3+0x1cc>
   4b410:	0081ffc4 	movi	r2,2047
   4b414:	90803526 	beq	r18,r2,4b4ec <__divdf3+0x130>
   4b418:	8c000434 	orhi	r16,r17,16
   4b41c:	2004d77a 	srli	r2,r4,29
   4b420:	802090fa 	slli	r16,r16,3
   4b424:	202690fa 	slli	r19,r4,3
   4b428:	94bf0044 	addi	r18,r18,-1023
   4b42c:	80a2b03a 	or	r17,r16,r2
   4b430:	0029883a 	mov	r20,zero
   4b434:	0011883a 	mov	r8,zero
   4b438:	380ad53a 	srli	r5,r7,20
   4b43c:	382ed7fa 	srli	r23,r7,31
   4b440:	04000434 	movhi	r16,16
   4b444:	843fffc4 	addi	r16,r16,-1
   4b448:	2941ffcc 	andi	r5,r5,2047
   4b44c:	302b883a 	mov	r21,r6
   4b450:	3c20703a 	and	r16,r7,r16
   4b454:	ba403fcc 	andi	r9,r23,255
   4b458:	28006726 	beq	r5,zero,4b5f8 <__divdf3+0x23c>
   4b45c:	0081ffc4 	movi	r2,2047
   4b460:	28805f26 	beq	r5,r2,4b5e0 <__divdf3+0x224>
   4b464:	84000434 	orhi	r16,r16,16
   4b468:	3004d77a 	srli	r2,r6,29
   4b46c:	802090fa 	slli	r16,r16,3
   4b470:	302a90fa 	slli	r21,r6,3
   4b474:	297f0044 	addi	r5,r5,-1023
   4b478:	80a0b03a 	or	r16,r16,r2
   4b47c:	000f883a 	mov	r7,zero
   4b480:	3d06b03a 	or	r3,r7,r20
   4b484:	180690ba 	slli	r3,r3,2
   4b488:	00800174 	movhi	r2,5
   4b48c:	10ad2b04 	addi	r2,r2,-19284
   4b490:	1885883a 	add	r2,r3,r2
   4b494:	10800017 	ldw	r2,0(r2)
   4b498:	b5c8f03a 	xor	r4,r22,r23
   4b49c:	200d883a 	mov	r6,r4
   4b4a0:	25003fcc 	andi	r20,r4,255
   4b4a4:	9165c83a 	sub	r18,r18,r5
   4b4a8:	1000683a 	jmp	r2
   4b4ac:	0004b6f4 	movhi	zero,4827
   4b4b0:	0004b524 	muli	zero,zero,4820
   4b4b4:	0004b6b8 	rdprs	zero,zero,4826
   4b4b8:	0004b508 	cmpgei	zero,zero,4820
   4b4bc:	0004b6b8 	rdprs	zero,zero,4826
   4b4c0:	0004b68c 	andi	zero,zero,4826
   4b4c4:	0004b6b8 	rdprs	zero,zero,4826
   4b4c8:	0004b508 	cmpgei	zero,zero,4820
   4b4cc:	0004b524 	muli	zero,zero,4820
   4b4d0:	0004b524 	muli	zero,zero,4820
   4b4d4:	0004b68c 	andi	zero,zero,4826
   4b4d8:	0004b508 	cmpgei	zero,zero,4820
   4b4dc:	0004b518 	cmpnei	zero,zero,4820
   4b4e0:	0004b518 	cmpnei	zero,zero,4820
   4b4e4:	0004b518 	cmpnei	zero,zero,4820
   4b4e8:	0004b6c8 	cmpgei	zero,zero,4827
   4b4ec:	8904b03a 	or	r2,r17,r4
   4b4f0:	1000631e 	bne	r2,zero,4b680 <__divdf3+0x2c4>
   4b4f4:	05000204 	movi	r20,8
   4b4f8:	0023883a 	mov	r17,zero
   4b4fc:	0027883a 	mov	r19,zero
   4b500:	02000084 	movi	r8,2
   4b504:	003fcc06 	br	4b438 <__alt_data_end+0xfffd58d8>
   4b508:	8023883a 	mov	r17,r16
   4b50c:	a827883a 	mov	r19,r21
   4b510:	4839883a 	mov	fp,r9
   4b514:	3811883a 	mov	r8,r7
   4b518:	00800084 	movi	r2,2
   4b51c:	4081531e 	bne	r8,r2,4ba6c <__divdf3+0x6b0>
   4b520:	e029883a 	mov	r20,fp
   4b524:	a180004c 	andi	r6,r20,1
   4b528:	0201ffc4 	movi	r8,2047
   4b52c:	000b883a 	mov	r5,zero
   4b530:	0027883a 	mov	r19,zero
   4b534:	4010953a 	slli	r8,r8,20
   4b538:	30c03fcc 	andi	r3,r6,255
   4b53c:	04000434 	movhi	r16,16
   4b540:	180697fa 	slli	r3,r3,31
   4b544:	843fffc4 	addi	r16,r16,-1
   4b548:	2c20703a 	and	r16,r5,r16
   4b54c:	8220b03a 	or	r16,r16,r8
   4b550:	80c6b03a 	or	r3,r16,r3
   4b554:	9805883a 	mov	r2,r19
   4b558:	dfc00f17 	ldw	ra,60(sp)
   4b55c:	df000e17 	ldw	fp,56(sp)
   4b560:	ddc00d17 	ldw	r23,52(sp)
   4b564:	dd800c17 	ldw	r22,48(sp)
   4b568:	dd400b17 	ldw	r21,44(sp)
   4b56c:	dd000a17 	ldw	r20,40(sp)
   4b570:	dcc00917 	ldw	r19,36(sp)
   4b574:	dc800817 	ldw	r18,32(sp)
   4b578:	dc400717 	ldw	r17,28(sp)
   4b57c:	dc000617 	ldw	r16,24(sp)
   4b580:	dec01004 	addi	sp,sp,64
   4b584:	f800283a 	ret
   4b588:	8904b03a 	or	r2,r17,r4
   4b58c:	10003726 	beq	r2,zero,4b66c <__divdf3+0x2b0>
   4b590:	88014d26 	beq	r17,zero,4bac8 <__divdf3+0x70c>
   4b594:	8809883a 	mov	r4,r17
   4b598:	d9800215 	stw	r6,8(sp)
   4b59c:	d9c00515 	stw	r7,20(sp)
   4b5a0:	004d2b80 	call	4d2b8 <__clzsi2>
   4b5a4:	d9800217 	ldw	r6,8(sp)
   4b5a8:	d9c00517 	ldw	r7,20(sp)
   4b5ac:	1007883a 	mov	r3,r2
   4b5b0:	01000a04 	movi	r4,40
   4b5b4:	1cfffe04 	addi	r19,r3,-8
   4b5b8:	20c9c83a 	sub	r4,r4,r3
   4b5bc:	8cca983a 	sll	r5,r17,r19
   4b5c0:	a108d83a 	srl	r4,r20,r4
   4b5c4:	a4e6983a 	sll	r19,r20,r19
   4b5c8:	2162b03a 	or	r17,r4,r5
   4b5cc:	04bf0344 	movi	r18,-1011
   4b5d0:	90e5c83a 	sub	r18,r18,r3
   4b5d4:	0029883a 	mov	r20,zero
   4b5d8:	0011883a 	mov	r8,zero
   4b5dc:	003f9606 	br	4b438 <__alt_data_end+0xfffd58d8>
   4b5e0:	8184b03a 	or	r2,r16,r6
   4b5e4:	10001f1e 	bne	r2,zero,4b664 <__divdf3+0x2a8>
   4b5e8:	0021883a 	mov	r16,zero
   4b5ec:	002b883a 	mov	r21,zero
   4b5f0:	01c00084 	movi	r7,2
   4b5f4:	003fa206 	br	4b480 <__alt_data_end+0xfffd5920>
   4b5f8:	8184b03a 	or	r2,r16,r6
   4b5fc:	10001526 	beq	r2,zero,4b654 <__divdf3+0x298>
   4b600:	80013d26 	beq	r16,zero,4baf8 <__divdf3+0x73c>
   4b604:	8009883a 	mov	r4,r16
   4b608:	d9800215 	stw	r6,8(sp)
   4b60c:	da000315 	stw	r8,12(sp)
   4b610:	da400415 	stw	r9,16(sp)
   4b614:	004d2b80 	call	4d2b8 <__clzsi2>
   4b618:	d9800217 	ldw	r6,8(sp)
   4b61c:	da000317 	ldw	r8,12(sp)
   4b620:	da400417 	ldw	r9,16(sp)
   4b624:	1007883a 	mov	r3,r2
   4b628:	01000a04 	movi	r4,40
   4b62c:	1d7ffe04 	addi	r21,r3,-8
   4b630:	20c9c83a 	sub	r4,r4,r3
   4b634:	8560983a 	sll	r16,r16,r21
   4b638:	3108d83a 	srl	r4,r6,r4
   4b63c:	356a983a 	sll	r21,r6,r21
   4b640:	2420b03a 	or	r16,r4,r16
   4b644:	017f0344 	movi	r5,-1011
   4b648:	28cbc83a 	sub	r5,r5,r3
   4b64c:	000f883a 	mov	r7,zero
   4b650:	003f8b06 	br	4b480 <__alt_data_end+0xfffd5920>
   4b654:	0021883a 	mov	r16,zero
   4b658:	002b883a 	mov	r21,zero
   4b65c:	01c00044 	movi	r7,1
   4b660:	003f8706 	br	4b480 <__alt_data_end+0xfffd5920>
   4b664:	01c000c4 	movi	r7,3
   4b668:	003f8506 	br	4b480 <__alt_data_end+0xfffd5920>
   4b66c:	05000104 	movi	r20,4
   4b670:	0023883a 	mov	r17,zero
   4b674:	0027883a 	mov	r19,zero
   4b678:	02000044 	movi	r8,1
   4b67c:	003f6e06 	br	4b438 <__alt_data_end+0xfffd58d8>
   4b680:	05000304 	movi	r20,12
   4b684:	020000c4 	movi	r8,3
   4b688:	003f6b06 	br	4b438 <__alt_data_end+0xfffd58d8>
   4b68c:	01400434 	movhi	r5,16
   4b690:	000d883a 	mov	r6,zero
   4b694:	297fffc4 	addi	r5,r5,-1
   4b698:	04ffffc4 	movi	r19,-1
   4b69c:	0201ffc4 	movi	r8,2047
   4b6a0:	003fa406 	br	4b534 <__alt_data_end+0xfffd59d4>
   4b6a4:	043f0084 	movi	r16,-1022
   4b6a8:	84a1c83a 	sub	r16,r16,r18
   4b6ac:	00800e04 	movi	r2,56
   4b6b0:	14014d0e 	bge	r2,r16,4bbe8 <__divdf3+0x82c>
   4b6b4:	a180004c 	andi	r6,r20,1
   4b6b8:	0011883a 	mov	r8,zero
   4b6bc:	000b883a 	mov	r5,zero
   4b6c0:	0027883a 	mov	r19,zero
   4b6c4:	003f9b06 	br	4b534 <__alt_data_end+0xfffd59d4>
   4b6c8:	8880022c 	andhi	r2,r17,8
   4b6cc:	1000f026 	beq	r2,zero,4ba90 <__divdf3+0x6d4>
   4b6d0:	8080022c 	andhi	r2,r16,8
   4b6d4:	1000ee1e 	bne	r2,zero,4ba90 <__divdf3+0x6d4>
   4b6d8:	00800434 	movhi	r2,16
   4b6dc:	81400234 	orhi	r5,r16,8
   4b6e0:	10bfffc4 	addi	r2,r2,-1
   4b6e4:	b80d883a 	mov	r6,r23
   4b6e8:	288a703a 	and	r5,r5,r2
   4b6ec:	a827883a 	mov	r19,r21
   4b6f0:	003fea06 	br	4b69c <__alt_data_end+0xfffd5b3c>
   4b6f4:	84411c36 	bltu	r16,r17,4bb68 <__divdf3+0x7ac>
   4b6f8:	8c011a26 	beq	r17,r16,4bb64 <__divdf3+0x7a8>
   4b6fc:	94bfffc4 	addi	r18,r18,-1
   4b700:	dcc00015 	stw	r19,0(sp)
   4b704:	8811883a 	mov	r8,r17
   4b708:	002d883a 	mov	r22,zero
   4b70c:	a80cd63a 	srli	r6,r21,24
   4b710:	8020923a 	slli	r16,r16,8
   4b714:	a82a923a 	slli	r21,r21,8
   4b718:	4009883a 	mov	r4,r8
   4b71c:	342eb03a 	or	r23,r6,r16
   4b720:	dd400115 	stw	r21,4(sp)
   4b724:	b82ad43a 	srli	r21,r23,16
   4b728:	da000315 	stw	r8,12(sp)
   4b72c:	bcffffcc 	andi	r19,r23,65535
   4b730:	a80b883a 	mov	r5,r21
   4b734:	004094c0 	call	4094c <__udivsi3>
   4b738:	1009883a 	mov	r4,r2
   4b73c:	980b883a 	mov	r5,r19
   4b740:	1023883a 	mov	r17,r2
   4b744:	004095c0 	call	4095c <__mulsi3>
   4b748:	da000317 	ldw	r8,12(sp)
   4b74c:	a80b883a 	mov	r5,r21
   4b750:	1039883a 	mov	fp,r2
   4b754:	4009883a 	mov	r4,r8
   4b758:	00409540 	call	40954 <__umodsi3>
   4b75c:	d8c00017 	ldw	r3,0(sp)
   4b760:	1004943a 	slli	r2,r2,16
   4b764:	1810d43a 	srli	r8,r3,16
   4b768:	120eb03a 	or	r7,r2,r8
   4b76c:	3f00062e 	bgeu	r7,fp,4b788 <__divdf3+0x3cc>
   4b770:	3dcf883a 	add	r7,r7,r23
   4b774:	88bfffc4 	addi	r2,r17,-1
   4b778:	3dc10a36 	bltu	r7,r23,4bba4 <__divdf3+0x7e8>
   4b77c:	3f01092e 	bgeu	r7,fp,4bba4 <__divdf3+0x7e8>
   4b780:	8c7fff84 	addi	r17,r17,-2
   4b784:	3dcf883a 	add	r7,r7,r23
   4b788:	3f39c83a 	sub	fp,r7,fp
   4b78c:	e009883a 	mov	r4,fp
   4b790:	a80b883a 	mov	r5,r21
   4b794:	004094c0 	call	4094c <__udivsi3>
   4b798:	1009883a 	mov	r4,r2
   4b79c:	980b883a 	mov	r5,r19
   4b7a0:	1021883a 	mov	r16,r2
   4b7a4:	004095c0 	call	4095c <__mulsi3>
   4b7a8:	e009883a 	mov	r4,fp
   4b7ac:	a80b883a 	mov	r5,r21
   4b7b0:	d8800315 	stw	r2,12(sp)
   4b7b4:	00409540 	call	40954 <__umodsi3>
   4b7b8:	d9000017 	ldw	r4,0(sp)
   4b7bc:	1004943a 	slli	r2,r2,16
   4b7c0:	da000317 	ldw	r8,12(sp)
   4b7c4:	20ffffcc 	andi	r3,r4,65535
   4b7c8:	10ceb03a 	or	r7,r2,r3
   4b7cc:	3a00062e 	bgeu	r7,r8,4b7e8 <__divdf3+0x42c>
   4b7d0:	3dcf883a 	add	r7,r7,r23
   4b7d4:	80bfffc4 	addi	r2,r16,-1
   4b7d8:	3dc0f036 	bltu	r7,r23,4bb9c <__divdf3+0x7e0>
   4b7dc:	3a00ef2e 	bgeu	r7,r8,4bb9c <__divdf3+0x7e0>
   4b7e0:	843fff84 	addi	r16,r16,-2
   4b7e4:	3dcf883a 	add	r7,r7,r23
   4b7e8:	d8c00117 	ldw	r3,4(sp)
   4b7ec:	8822943a 	slli	r17,r17,16
   4b7f0:	3a0fc83a 	sub	r7,r7,r8
   4b7f4:	1806d43a 	srli	r3,r3,16
   4b7f8:	8462b03a 	or	r17,r16,r17
   4b7fc:	8affffcc 	andi	r11,r17,65535
   4b800:	d8c00015 	stw	r3,0(sp)
   4b804:	d8c00117 	ldw	r3,4(sp)
   4b808:	8820d43a 	srli	r16,r17,16
   4b80c:	5809883a 	mov	r4,r11
   4b810:	1f3fffcc 	andi	fp,r3,65535
   4b814:	e00b883a 	mov	r5,fp
   4b818:	d9c00515 	stw	r7,20(sp)
   4b81c:	dac00215 	stw	r11,8(sp)
   4b820:	004095c0 	call	4095c <__mulsi3>
   4b824:	8009883a 	mov	r4,r16
   4b828:	e00b883a 	mov	r5,fp
   4b82c:	d8800415 	stw	r2,16(sp)
   4b830:	004095c0 	call	4095c <__mulsi3>
   4b834:	d9400017 	ldw	r5,0(sp)
   4b838:	8009883a 	mov	r4,r16
   4b83c:	d8800315 	stw	r2,12(sp)
   4b840:	004095c0 	call	4095c <__mulsi3>
   4b844:	dac00217 	ldw	r11,8(sp)
   4b848:	d9400017 	ldw	r5,0(sp)
   4b84c:	d8800215 	stw	r2,8(sp)
   4b850:	5809883a 	mov	r4,r11
   4b854:	004095c0 	call	4095c <__mulsi3>
   4b858:	da400417 	ldw	r9,16(sp)
   4b85c:	da800317 	ldw	r10,12(sp)
   4b860:	d9c00517 	ldw	r7,20(sp)
   4b864:	480ad43a 	srli	r5,r9,16
   4b868:	5085883a 	add	r2,r10,r2
   4b86c:	db000217 	ldw	r12,8(sp)
   4b870:	1151883a 	add	r8,r2,r5
   4b874:	4280022e 	bgeu	r8,r10,4b880 <__divdf3+0x4c4>
   4b878:	00800074 	movhi	r2,1
   4b87c:	6099883a 	add	r12,r12,r2
   4b880:	400ad43a 	srli	r5,r8,16
   4b884:	4010943a 	slli	r8,r8,16
   4b888:	4c3fffcc 	andi	r16,r9,65535
   4b88c:	6149883a 	add	r4,r12,r5
   4b890:	4411883a 	add	r8,r8,r16
   4b894:	3900a736 	bltu	r7,r4,4bb34 <__divdf3+0x778>
   4b898:	3900c426 	beq	r7,r4,4bbac <__divdf3+0x7f0>
   4b89c:	3909c83a 	sub	r4,r7,r4
   4b8a0:	b221c83a 	sub	r16,r22,r8
   4b8a4:	b42d803a 	cmpltu	r22,r22,r16
   4b8a8:	25adc83a 	sub	r22,r4,r22
   4b8ac:	b5c0c626 	beq	r22,r23,4bbc8 <__divdf3+0x80c>
   4b8b0:	b009883a 	mov	r4,r22
   4b8b4:	a80b883a 	mov	r5,r21
   4b8b8:	004094c0 	call	4094c <__udivsi3>
   4b8bc:	1009883a 	mov	r4,r2
   4b8c0:	980b883a 	mov	r5,r19
   4b8c4:	d8800315 	stw	r2,12(sp)
   4b8c8:	004095c0 	call	4095c <__mulsi3>
   4b8cc:	a80b883a 	mov	r5,r21
   4b8d0:	b009883a 	mov	r4,r22
   4b8d4:	d8800415 	stw	r2,16(sp)
   4b8d8:	00409540 	call	40954 <__umodsi3>
   4b8dc:	1004943a 	slli	r2,r2,16
   4b8e0:	800ed43a 	srli	r7,r16,16
   4b8e4:	da400417 	ldw	r9,16(sp)
   4b8e8:	da000317 	ldw	r8,12(sp)
   4b8ec:	11cab03a 	or	r5,r2,r7
   4b8f0:	2a40062e 	bgeu	r5,r9,4b90c <__divdf3+0x550>
   4b8f4:	2dcb883a 	add	r5,r5,r23
   4b8f8:	40bfffc4 	addi	r2,r8,-1
   4b8fc:	2dc0b436 	bltu	r5,r23,4bbd0 <__divdf3+0x814>
   4b900:	2a40b32e 	bgeu	r5,r9,4bbd0 <__divdf3+0x814>
   4b904:	423fff84 	addi	r8,r8,-2
   4b908:	2dcb883a 	add	r5,r5,r23
   4b90c:	2a6dc83a 	sub	r22,r5,r9
   4b910:	b009883a 	mov	r4,r22
   4b914:	a80b883a 	mov	r5,r21
   4b918:	da000315 	stw	r8,12(sp)
   4b91c:	004094c0 	call	4094c <__udivsi3>
   4b920:	980b883a 	mov	r5,r19
   4b924:	1009883a 	mov	r4,r2
   4b928:	d8800415 	stw	r2,16(sp)
   4b92c:	004095c0 	call	4095c <__mulsi3>
   4b930:	b009883a 	mov	r4,r22
   4b934:	a80b883a 	mov	r5,r21
   4b938:	1027883a 	mov	r19,r2
   4b93c:	00409540 	call	40954 <__umodsi3>
   4b940:	1004943a 	slli	r2,r2,16
   4b944:	843fffcc 	andi	r16,r16,65535
   4b948:	da000317 	ldw	r8,12(sp)
   4b94c:	140eb03a 	or	r7,r2,r16
   4b950:	da400417 	ldw	r9,16(sp)
   4b954:	3cc0062e 	bgeu	r7,r19,4b970 <__divdf3+0x5b4>
   4b958:	3dcf883a 	add	r7,r7,r23
   4b95c:	48bfffc4 	addi	r2,r9,-1
   4b960:	3dc09d36 	bltu	r7,r23,4bbd8 <__divdf3+0x81c>
   4b964:	3cc09c2e 	bgeu	r7,r19,4bbd8 <__divdf3+0x81c>
   4b968:	4a7fff84 	addi	r9,r9,-2
   4b96c:	3dcf883a 	add	r7,r7,r23
   4b970:	4010943a 	slli	r8,r8,16
   4b974:	3cebc83a 	sub	r21,r7,r19
   4b978:	e00b883a 	mov	r5,fp
   4b97c:	4a26b03a 	or	r19,r9,r8
   4b980:	99ffffcc 	andi	r7,r19,65535
   4b984:	9820d43a 	srli	r16,r19,16
   4b988:	3809883a 	mov	r4,r7
   4b98c:	d9c00515 	stw	r7,20(sp)
   4b990:	004095c0 	call	4095c <__mulsi3>
   4b994:	8009883a 	mov	r4,r16
   4b998:	e00b883a 	mov	r5,fp
   4b99c:	102d883a 	mov	r22,r2
   4b9a0:	004095c0 	call	4095c <__mulsi3>
   4b9a4:	d9400017 	ldw	r5,0(sp)
   4b9a8:	8009883a 	mov	r4,r16
   4b9ac:	1039883a 	mov	fp,r2
   4b9b0:	004095c0 	call	4095c <__mulsi3>
   4b9b4:	d9c00517 	ldw	r7,20(sp)
   4b9b8:	d9400017 	ldw	r5,0(sp)
   4b9bc:	1021883a 	mov	r16,r2
   4b9c0:	3809883a 	mov	r4,r7
   4b9c4:	004095c0 	call	4095c <__mulsi3>
   4b9c8:	b008d43a 	srli	r4,r22,16
   4b9cc:	e085883a 	add	r2,fp,r2
   4b9d0:	1109883a 	add	r4,r2,r4
   4b9d4:	2700022e 	bgeu	r4,fp,4b9e0 <__divdf3+0x624>
   4b9d8:	00800074 	movhi	r2,1
   4b9dc:	80a1883a 	add	r16,r16,r2
   4b9e0:	200ad43a 	srli	r5,r4,16
   4b9e4:	2008943a 	slli	r4,r4,16
   4b9e8:	b5bfffcc 	andi	r22,r22,65535
   4b9ec:	8145883a 	add	r2,r16,r5
   4b9f0:	2589883a 	add	r4,r4,r22
   4b9f4:	a8802c36 	bltu	r21,r2,4baa8 <__divdf3+0x6ec>
   4b9f8:	a880a426 	beq	r21,r2,4bc8c <__divdf3+0x8d0>
   4b9fc:	9cc00054 	ori	r19,r19,1
   4ba00:	9200ffc4 	addi	r8,r18,1023
   4ba04:	023f270e 	bge	zero,r8,4b6a4 <__alt_data_end+0xfffd5b44>
   4ba08:	988001cc 	andi	r2,r19,7
   4ba0c:	10000726 	beq	r2,zero,4ba2c <__divdf3+0x670>
   4ba10:	990003cc 	andi	r4,r19,15
   4ba14:	00800104 	movi	r2,4
   4ba18:	20800426 	beq	r4,r2,4ba2c <__divdf3+0x670>
   4ba1c:	9885883a 	add	r2,r19,r2
   4ba20:	14e7803a 	cmpltu	r19,r2,r19
   4ba24:	8ce3883a 	add	r17,r17,r19
   4ba28:	1027883a 	mov	r19,r2
   4ba2c:	8880402c 	andhi	r2,r17,256
   4ba30:	10000426 	beq	r2,zero,4ba44 <__divdf3+0x688>
   4ba34:	00bfc034 	movhi	r2,65280
   4ba38:	10bfffc4 	addi	r2,r2,-1
   4ba3c:	92010004 	addi	r8,r18,1024
   4ba40:	88a2703a 	and	r17,r17,r2
   4ba44:	0081ff84 	movi	r2,2046
   4ba48:	123eb616 	blt	r2,r8,4b524 <__alt_data_end+0xfffd59c4>
   4ba4c:	9826d0fa 	srli	r19,r19,3
   4ba50:	8804977a 	slli	r2,r17,29
   4ba54:	8820927a 	slli	r16,r17,9
   4ba58:	4201ffcc 	andi	r8,r8,2047
   4ba5c:	14e6b03a 	or	r19,r2,r19
   4ba60:	800ad33a 	srli	r5,r16,12
   4ba64:	a180004c 	andi	r6,r20,1
   4ba68:	003eb206 	br	4b534 <__alt_data_end+0xfffd59d4>
   4ba6c:	008000c4 	movi	r2,3
   4ba70:	4080ac26 	beq	r8,r2,4bd24 <__divdf3+0x968>
   4ba74:	00800044 	movi	r2,1
   4ba78:	4080591e 	bne	r8,r2,4bbe0 <__divdf3+0x824>
   4ba7c:	e00d883a 	mov	r6,fp
   4ba80:	0011883a 	mov	r8,zero
   4ba84:	000b883a 	mov	r5,zero
   4ba88:	0027883a 	mov	r19,zero
   4ba8c:	003ea906 	br	4b534 <__alt_data_end+0xfffd59d4>
   4ba90:	00800434 	movhi	r2,16
   4ba94:	89400234 	orhi	r5,r17,8
   4ba98:	10bfffc4 	addi	r2,r2,-1
   4ba9c:	b00d883a 	mov	r6,r22
   4baa0:	288a703a 	and	r5,r5,r2
   4baa4:	003efd06 	br	4b69c <__alt_data_end+0xfffd5b3c>
   4baa8:	adcf883a 	add	r7,r21,r23
   4baac:	997fffc4 	addi	r5,r19,-1
   4bab0:	3dc0412e 	bgeu	r7,r23,4bbb8 <__divdf3+0x7fc>
   4bab4:	2827883a 	mov	r19,r5
   4bab8:	38bfd01e 	bne	r7,r2,4b9fc <__alt_data_end+0xfffd5e9c>
   4babc:	d8c00117 	ldw	r3,4(sp)
   4bac0:	193fce1e 	bne	r3,r4,4b9fc <__alt_data_end+0xfffd5e9c>
   4bac4:	003fce06 	br	4ba00 <__alt_data_end+0xfffd5ea0>
   4bac8:	d9800215 	stw	r6,8(sp)
   4bacc:	d9c00515 	stw	r7,20(sp)
   4bad0:	004d2b80 	call	4d2b8 <__clzsi2>
   4bad4:	10c00804 	addi	r3,r2,32
   4bad8:	010009c4 	movi	r4,39
   4badc:	d9800217 	ldw	r6,8(sp)
   4bae0:	d9c00517 	ldw	r7,20(sp)
   4bae4:	20feb20e 	bge	r4,r3,4b5b0 <__alt_data_end+0xfffd5a50>
   4bae8:	117ffe04 	addi	r5,r2,-8
   4baec:	a162983a 	sll	r17,r20,r5
   4baf0:	0027883a 	mov	r19,zero
   4baf4:	003eb506 	br	4b5cc <__alt_data_end+0xfffd5a6c>
   4baf8:	3009883a 	mov	r4,r6
   4bafc:	d9800215 	stw	r6,8(sp)
   4bb00:	da000315 	stw	r8,12(sp)
   4bb04:	da400415 	stw	r9,16(sp)
   4bb08:	004d2b80 	call	4d2b8 <__clzsi2>
   4bb0c:	10c00804 	addi	r3,r2,32
   4bb10:	010009c4 	movi	r4,39
   4bb14:	d9800217 	ldw	r6,8(sp)
   4bb18:	da000317 	ldw	r8,12(sp)
   4bb1c:	da400417 	ldw	r9,16(sp)
   4bb20:	20fec10e 	bge	r4,r3,4b628 <__alt_data_end+0xfffd5ac8>
   4bb24:	10bffe04 	addi	r2,r2,-8
   4bb28:	a8a0983a 	sll	r16,r21,r2
   4bb2c:	002b883a 	mov	r21,zero
   4bb30:	003ec406 	br	4b644 <__alt_data_end+0xfffd5ae4>
   4bb34:	d8c00117 	ldw	r3,4(sp)
   4bb38:	b0ed883a 	add	r22,r22,r3
   4bb3c:	b0c5803a 	cmpltu	r2,r22,r3
   4bb40:	15c5883a 	add	r2,r2,r23
   4bb44:	11cf883a 	add	r7,r2,r7
   4bb48:	88bfffc4 	addi	r2,r17,-1
   4bb4c:	b9c00d2e 	bgeu	r23,r7,4bb84 <__divdf3+0x7c8>
   4bb50:	39003f36 	bltu	r7,r4,4bc50 <__divdf3+0x894>
   4bb54:	21c06a26 	beq	r4,r7,4bd00 <__divdf3+0x944>
   4bb58:	3909c83a 	sub	r4,r7,r4
   4bb5c:	1023883a 	mov	r17,r2
   4bb60:	003f4f06 	br	4b8a0 <__alt_data_end+0xfffd5d40>
   4bb64:	9d7ee536 	bltu	r19,r21,4b6fc <__alt_data_end+0xfffd5b9c>
   4bb68:	982ed07a 	srli	r23,r19,1
   4bb6c:	880497fa 	slli	r2,r17,31
   4bb70:	8810d07a 	srli	r8,r17,1
   4bb74:	982c97fa 	slli	r22,r19,31
   4bb78:	b884b03a 	or	r2,r23,r2
   4bb7c:	d8800015 	stw	r2,0(sp)
   4bb80:	003ee206 	br	4b70c <__alt_data_end+0xfffd5bac>
   4bb84:	3dfff41e 	bne	r7,r23,4bb58 <__alt_data_end+0xfffd5ff8>
   4bb88:	d8c00117 	ldw	r3,4(sp)
   4bb8c:	b0fff02e 	bgeu	r22,r3,4bb50 <__alt_data_end+0xfffd5ff0>
   4bb90:	b909c83a 	sub	r4,r23,r4
   4bb94:	1023883a 	mov	r17,r2
   4bb98:	003f4106 	br	4b8a0 <__alt_data_end+0xfffd5d40>
   4bb9c:	1021883a 	mov	r16,r2
   4bba0:	003f1106 	br	4b7e8 <__alt_data_end+0xfffd5c88>
   4bba4:	1023883a 	mov	r17,r2
   4bba8:	003ef706 	br	4b788 <__alt_data_end+0xfffd5c28>
   4bbac:	b23fe136 	bltu	r22,r8,4bb34 <__alt_data_end+0xfffd5fd4>
   4bbb0:	0009883a 	mov	r4,zero
   4bbb4:	003f3a06 	br	4b8a0 <__alt_data_end+0xfffd5d40>
   4bbb8:	38802c36 	bltu	r7,r2,4bc6c <__divdf3+0x8b0>
   4bbbc:	11c05326 	beq	r2,r7,4bd0c <__divdf3+0x950>
   4bbc0:	2827883a 	mov	r19,r5
   4bbc4:	003f8d06 	br	4b9fc <__alt_data_end+0xfffd5e9c>
   4bbc8:	04ffffc4 	movi	r19,-1
   4bbcc:	003f8c06 	br	4ba00 <__alt_data_end+0xfffd5ea0>
   4bbd0:	1011883a 	mov	r8,r2
   4bbd4:	003f4d06 	br	4b90c <__alt_data_end+0xfffd5dac>
   4bbd8:	1013883a 	mov	r9,r2
   4bbdc:	003f6406 	br	4b970 <__alt_data_end+0xfffd5e10>
   4bbe0:	e029883a 	mov	r20,fp
   4bbe4:	003f8606 	br	4ba00 <__alt_data_end+0xfffd5ea0>
   4bbe8:	008007c4 	movi	r2,31
   4bbec:	14002a16 	blt	r2,r16,4bc98 <__divdf3+0x8dc>
   4bbf0:	91410784 	addi	r5,r18,1054
   4bbf4:	9c0cd83a 	srl	r6,r19,r16
   4bbf8:	8948983a 	sll	r4,r17,r5
   4bbfc:	9944983a 	sll	r2,r19,r5
   4bc00:	8c20d83a 	srl	r16,r17,r16
   4bc04:	3108b03a 	or	r4,r6,r4
   4bc08:	1004c03a 	cmpne	r2,r2,zero
   4bc0c:	2084b03a 	or	r2,r4,r2
   4bc10:	110001cc 	andi	r4,r2,7
   4bc14:	20000726 	beq	r4,zero,4bc34 <__divdf3+0x878>
   4bc18:	114003cc 	andi	r5,r2,15
   4bc1c:	01000104 	movi	r4,4
   4bc20:	29000426 	beq	r5,r4,4bc34 <__divdf3+0x878>
   4bc24:	11000104 	addi	r4,r2,4
   4bc28:	2085803a 	cmpltu	r2,r4,r2
   4bc2c:	80a1883a 	add	r16,r16,r2
   4bc30:	2005883a 	mov	r2,r4
   4bc34:	8100202c 	andhi	r4,r16,128
   4bc38:	20002d26 	beq	r4,zero,4bcf0 <__divdf3+0x934>
   4bc3c:	a180004c 	andi	r6,r20,1
   4bc40:	02000044 	movi	r8,1
   4bc44:	000b883a 	mov	r5,zero
   4bc48:	0027883a 	mov	r19,zero
   4bc4c:	003e3906 	br	4b534 <__alt_data_end+0xfffd59d4>
   4bc50:	d8c00117 	ldw	r3,4(sp)
   4bc54:	8c7fff84 	addi	r17,r17,-2
   4bc58:	b0ed883a 	add	r22,r22,r3
   4bc5c:	b0c5803a 	cmpltu	r2,r22,r3
   4bc60:	15c5883a 	add	r2,r2,r23
   4bc64:	11cf883a 	add	r7,r2,r7
   4bc68:	003f0c06 	br	4b89c <__alt_data_end+0xfffd5d3c>
   4bc6c:	d8c00117 	ldw	r3,4(sp)
   4bc70:	997fff84 	addi	r5,r19,-2
   4bc74:	18d1883a 	add	r8,r3,r3
   4bc78:	40c7803a 	cmpltu	r3,r8,r3
   4bc7c:	1dcd883a 	add	r6,r3,r23
   4bc80:	398f883a 	add	r7,r7,r6
   4bc84:	da000115 	stw	r8,4(sp)
   4bc88:	003f8a06 	br	4bab4 <__alt_data_end+0xfffd5f54>
   4bc8c:	203f861e 	bne	r4,zero,4baa8 <__alt_data_end+0xfffd5f48>
   4bc90:	d8000115 	stw	zero,4(sp)
   4bc94:	003f8906 	br	4babc <__alt_data_end+0xfffd5f5c>
   4bc98:	00bef884 	movi	r2,-1054
   4bc9c:	1485c83a 	sub	r2,r2,r18
   4bca0:	01000804 	movi	r4,32
   4bca4:	8884d83a 	srl	r2,r17,r2
   4bca8:	81001c26 	beq	r16,r4,4bd1c <__divdf3+0x960>
   4bcac:	91010f84 	addi	r4,r18,1086
   4bcb0:	8908983a 	sll	r4,r17,r4
   4bcb4:	24c8b03a 	or	r4,r4,r19
   4bcb8:	2008c03a 	cmpne	r4,r4,zero
   4bcbc:	2084b03a 	or	r2,r4,r2
   4bcc0:	140001cc 	andi	r16,r2,7
   4bcc4:	8000061e 	bne	r16,zero,4bce0 <__divdf3+0x924>
   4bcc8:	000b883a 	mov	r5,zero
   4bccc:	1004d0fa 	srli	r2,r2,3
   4bcd0:	a180004c 	andi	r6,r20,1
   4bcd4:	0011883a 	mov	r8,zero
   4bcd8:	1426b03a 	or	r19,r2,r16
   4bcdc:	003e1506 	br	4b534 <__alt_data_end+0xfffd59d4>
   4bce0:	114003cc 	andi	r5,r2,15
   4bce4:	01000104 	movi	r4,4
   4bce8:	0021883a 	mov	r16,zero
   4bcec:	293fcd1e 	bne	r5,r4,4bc24 <__alt_data_end+0xfffd60c4>
   4bcf0:	800a927a 	slli	r5,r16,9
   4bcf4:	8020977a 	slli	r16,r16,29
   4bcf8:	280ad33a 	srli	r5,r5,12
   4bcfc:	003ff306 	br	4bccc <__alt_data_end+0xfffd616c>
   4bd00:	b23fd336 	bltu	r22,r8,4bc50 <__alt_data_end+0xfffd60f0>
   4bd04:	1023883a 	mov	r17,r2
   4bd08:	003fa906 	br	4bbb0 <__alt_data_end+0xfffd6050>
   4bd0c:	d8c00117 	ldw	r3,4(sp)
   4bd10:	193fd636 	bltu	r3,r4,4bc6c <__alt_data_end+0xfffd610c>
   4bd14:	2827883a 	mov	r19,r5
   4bd18:	003f6806 	br	4babc <__alt_data_end+0xfffd5f5c>
   4bd1c:	0009883a 	mov	r4,zero
   4bd20:	003fe406 	br	4bcb4 <__alt_data_end+0xfffd6154>
   4bd24:	00800434 	movhi	r2,16
   4bd28:	89400234 	orhi	r5,r17,8
   4bd2c:	10bfffc4 	addi	r2,r2,-1
   4bd30:	e00d883a 	mov	r6,fp
   4bd34:	288a703a 	and	r5,r5,r2
   4bd38:	003e5806 	br	4b69c <__alt_data_end+0xfffd5b3c>

0004bd3c <__eqdf2>:
   4bd3c:	2804d53a 	srli	r2,r5,20
   4bd40:	3806d53a 	srli	r3,r7,20
   4bd44:	02000434 	movhi	r8,16
   4bd48:	423fffc4 	addi	r8,r8,-1
   4bd4c:	1081ffcc 	andi	r2,r2,2047
   4bd50:	0241ffc4 	movi	r9,2047
   4bd54:	2a14703a 	and	r10,r5,r8
   4bd58:	18c1ffcc 	andi	r3,r3,2047
   4bd5c:	3a10703a 	and	r8,r7,r8
   4bd60:	280ad7fa 	srli	r5,r5,31
   4bd64:	380ed7fa 	srli	r7,r7,31
   4bd68:	12400f26 	beq	r2,r9,4bda8 <__eqdf2+0x6c>
   4bd6c:	0241ffc4 	movi	r9,2047
   4bd70:	1a400326 	beq	r3,r9,4bd80 <__eqdf2+0x44>
   4bd74:	10c00526 	beq	r2,r3,4bd8c <__eqdf2+0x50>
   4bd78:	00800044 	movi	r2,1
   4bd7c:	f800283a 	ret
   4bd80:	4192b03a 	or	r9,r8,r6
   4bd84:	483ffc1e 	bne	r9,zero,4bd78 <__alt_data_end+0xfffd6218>
   4bd88:	10fffb1e 	bne	r2,r3,4bd78 <__alt_data_end+0xfffd6218>
   4bd8c:	523ffa1e 	bne	r10,r8,4bd78 <__alt_data_end+0xfffd6218>
   4bd90:	21bff91e 	bne	r4,r6,4bd78 <__alt_data_end+0xfffd6218>
   4bd94:	29c00826 	beq	r5,r7,4bdb8 <__eqdf2+0x7c>
   4bd98:	103ff71e 	bne	r2,zero,4bd78 <__alt_data_end+0xfffd6218>
   4bd9c:	5104b03a 	or	r2,r10,r4
   4bda0:	1004c03a 	cmpne	r2,r2,zero
   4bda4:	f800283a 	ret
   4bda8:	5112b03a 	or	r9,r10,r4
   4bdac:	483fef26 	beq	r9,zero,4bd6c <__alt_data_end+0xfffd620c>
   4bdb0:	00800044 	movi	r2,1
   4bdb4:	f800283a 	ret
   4bdb8:	0005883a 	mov	r2,zero
   4bdbc:	f800283a 	ret

0004bdc0 <__gedf2>:
   4bdc0:	2804d53a 	srli	r2,r5,20
   4bdc4:	3806d53a 	srli	r3,r7,20
   4bdc8:	02000434 	movhi	r8,16
   4bdcc:	423fffc4 	addi	r8,r8,-1
   4bdd0:	0241ffc4 	movi	r9,2047
   4bdd4:	1081ffcc 	andi	r2,r2,2047
   4bdd8:	2a14703a 	and	r10,r5,r8
   4bddc:	1a46703a 	and	r3,r3,r9
   4bde0:	3a10703a 	and	r8,r7,r8
   4bde4:	280ad7fa 	srli	r5,r5,31
   4bde8:	380ed7fa 	srli	r7,r7,31
   4bdec:	12400b26 	beq	r2,r9,4be1c <__gedf2+0x5c>
   4bdf0:	1a401626 	beq	r3,r9,4be4c <__gedf2+0x8c>
   4bdf4:	10000c1e 	bne	r2,zero,4be28 <__gedf2+0x68>
   4bdf8:	5112b03a 	or	r9,r10,r4
   4bdfc:	4813003a 	cmpeq	r9,r9,zero
   4be00:	4817883a 	mov	r11,r9
   4be04:	18000c1e 	bne	r3,zero,4be38 <__gedf2+0x78>
   4be08:	4198b03a 	or	r12,r8,r6
   4be0c:	60000a1e 	bne	r12,zero,4be38 <__gedf2+0x78>
   4be10:	48001326 	beq	r9,zero,4be60 <__gedf2+0xa0>
   4be14:	0005883a 	mov	r2,zero
   4be18:	f800283a 	ret
   4be1c:	5112b03a 	or	r9,r10,r4
   4be20:	4800191e 	bne	r9,zero,4be88 <__gedf2+0xc8>
   4be24:	18800926 	beq	r3,r2,4be4c <__gedf2+0x8c>
   4be28:	18000b1e 	bne	r3,zero,4be58 <__gedf2+0x98>
   4be2c:	4192b03a 	or	r9,r8,r6
   4be30:	0017883a 	mov	r11,zero
   4be34:	48000a26 	beq	r9,zero,4be60 <__gedf2+0xa0>
   4be38:	39c03fcc 	andi	r7,r7,255
   4be3c:	58000726 	beq	r11,zero,4be5c <__gedf2+0x9c>
   4be40:	3800081e 	bne	r7,zero,4be64 <__gedf2+0xa4>
   4be44:	00bfffc4 	movi	r2,-1
   4be48:	f800283a 	ret
   4be4c:	4192b03a 	or	r9,r8,r6
   4be50:	48000d1e 	bne	r9,zero,4be88 <__gedf2+0xc8>
   4be54:	103fe826 	beq	r2,zero,4bdf8 <__alt_data_end+0xfffd6298>
   4be58:	39c03fcc 	andi	r7,r7,255
   4be5c:	29c00326 	beq	r5,r7,4be6c <__gedf2+0xac>
   4be60:	283ff81e 	bne	r5,zero,4be44 <__alt_data_end+0xfffd62e4>
   4be64:	00800044 	movi	r2,1
   4be68:	f800283a 	ret
   4be6c:	18bffc16 	blt	r3,r2,4be60 <__alt_data_end+0xfffd6300>
   4be70:	10c00316 	blt	r2,r3,4be80 <__gedf2+0xc0>
   4be74:	42bffa36 	bltu	r8,r10,4be60 <__alt_data_end+0xfffd6300>
   4be78:	52000526 	beq	r10,r8,4be90 <__gedf2+0xd0>
   4be7c:	523fe52e 	bgeu	r10,r8,4be14 <__alt_data_end+0xfffd62b4>
   4be80:	283ff026 	beq	r5,zero,4be44 <__alt_data_end+0xfffd62e4>
   4be84:	003ff706 	br	4be64 <__alt_data_end+0xfffd6304>
   4be88:	00bfff84 	movi	r2,-2
   4be8c:	f800283a 	ret
   4be90:	313ff336 	bltu	r6,r4,4be60 <__alt_data_end+0xfffd6300>
   4be94:	21bfdf2e 	bgeu	r4,r6,4be14 <__alt_data_end+0xfffd62b4>
   4be98:	283fea26 	beq	r5,zero,4be44 <__alt_data_end+0xfffd62e4>
   4be9c:	003ff106 	br	4be64 <__alt_data_end+0xfffd6304>

0004bea0 <__ledf2>:
   4bea0:	2804d53a 	srli	r2,r5,20
   4bea4:	3810d53a 	srli	r8,r7,20
   4bea8:	00c00434 	movhi	r3,16
   4beac:	18ffffc4 	addi	r3,r3,-1
   4beb0:	0241ffc4 	movi	r9,2047
   4beb4:	1081ffcc 	andi	r2,r2,2047
   4beb8:	28d4703a 	and	r10,r5,r3
   4bebc:	4250703a 	and	r8,r8,r9
   4bec0:	38c6703a 	and	r3,r7,r3
   4bec4:	280ad7fa 	srli	r5,r5,31
   4bec8:	380ed7fa 	srli	r7,r7,31
   4becc:	12400b26 	beq	r2,r9,4befc <__ledf2+0x5c>
   4bed0:	42401926 	beq	r8,r9,4bf38 <__ledf2+0x98>
   4bed4:	10000c1e 	bne	r2,zero,4bf08 <__ledf2+0x68>
   4bed8:	5112b03a 	or	r9,r10,r4
   4bedc:	4813003a 	cmpeq	r9,r9,zero
   4bee0:	4817883a 	mov	r11,r9
   4bee4:	40000f26 	beq	r8,zero,4bf24 <__ledf2+0x84>
   4bee8:	39c03fcc 	andi	r7,r7,255
   4beec:	58001826 	beq	r11,zero,4bf50 <__ledf2+0xb0>
   4bef0:	38000a1e 	bne	r7,zero,4bf1c <__ledf2+0x7c>
   4bef4:	00bfffc4 	movi	r2,-1
   4bef8:	f800283a 	ret
   4befc:	5112b03a 	or	r9,r10,r4
   4bf00:	48000f1e 	bne	r9,zero,4bf40 <__ledf2+0xa0>
   4bf04:	40800c26 	beq	r8,r2,4bf38 <__ledf2+0x98>
   4bf08:	4000101e 	bne	r8,zero,4bf4c <__ledf2+0xac>
   4bf0c:	1992b03a 	or	r9,r3,r6
   4bf10:	0017883a 	mov	r11,zero
   4bf14:	483ff41e 	bne	r9,zero,4bee8 <__alt_data_end+0xfffd6388>
   4bf18:	283ff61e 	bne	r5,zero,4bef4 <__alt_data_end+0xfffd6394>
   4bf1c:	00800044 	movi	r2,1
   4bf20:	f800283a 	ret
   4bf24:	1998b03a 	or	r12,r3,r6
   4bf28:	603fef1e 	bne	r12,zero,4bee8 <__alt_data_end+0xfffd6388>
   4bf2c:	483ffa26 	beq	r9,zero,4bf18 <__alt_data_end+0xfffd63b8>
   4bf30:	0005883a 	mov	r2,zero
   4bf34:	f800283a 	ret
   4bf38:	1992b03a 	or	r9,r3,r6
   4bf3c:	48000226 	beq	r9,zero,4bf48 <__ledf2+0xa8>
   4bf40:	00800084 	movi	r2,2
   4bf44:	f800283a 	ret
   4bf48:	103fe326 	beq	r2,zero,4bed8 <__alt_data_end+0xfffd6378>
   4bf4c:	39c03fcc 	andi	r7,r7,255
   4bf50:	29fff11e 	bne	r5,r7,4bf18 <__alt_data_end+0xfffd63b8>
   4bf54:	40bff016 	blt	r8,r2,4bf18 <__alt_data_end+0xfffd63b8>
   4bf58:	12000316 	blt	r2,r8,4bf68 <__ledf2+0xc8>
   4bf5c:	1abfee36 	bltu	r3,r10,4bf18 <__alt_data_end+0xfffd63b8>
   4bf60:	50c00326 	beq	r10,r3,4bf70 <__ledf2+0xd0>
   4bf64:	50fff22e 	bgeu	r10,r3,4bf30 <__alt_data_end+0xfffd63d0>
   4bf68:	283fe226 	beq	r5,zero,4bef4 <__alt_data_end+0xfffd6394>
   4bf6c:	003feb06 	br	4bf1c <__alt_data_end+0xfffd63bc>
   4bf70:	313fe936 	bltu	r6,r4,4bf18 <__alt_data_end+0xfffd63b8>
   4bf74:	21bfee2e 	bgeu	r4,r6,4bf30 <__alt_data_end+0xfffd63d0>
   4bf78:	283fde26 	beq	r5,zero,4bef4 <__alt_data_end+0xfffd6394>
   4bf7c:	003fe706 	br	4bf1c <__alt_data_end+0xfffd63bc>

0004bf80 <__muldf3>:
   4bf80:	deffee04 	addi	sp,sp,-72
   4bf84:	dd000c15 	stw	r20,48(sp)
   4bf88:	2828d53a 	srli	r20,r5,20
   4bf8c:	dd400d15 	stw	r21,52(sp)
   4bf90:	282ad7fa 	srli	r21,r5,31
   4bf94:	dc000815 	stw	r16,32(sp)
   4bf98:	04000434 	movhi	r16,16
   4bf9c:	ddc00f15 	stw	r23,60(sp)
   4bfa0:	dcc00b15 	stw	r19,44(sp)
   4bfa4:	dc800a15 	stw	r18,40(sp)
   4bfa8:	843fffc4 	addi	r16,r16,-1
   4bfac:	dfc01115 	stw	ra,68(sp)
   4bfb0:	df001015 	stw	fp,64(sp)
   4bfb4:	dd800e15 	stw	r22,56(sp)
   4bfb8:	dc400915 	stw	r17,36(sp)
   4bfbc:	a501ffcc 	andi	r20,r20,2047
   4bfc0:	2025883a 	mov	r18,r4
   4bfc4:	202f883a 	mov	r23,r4
   4bfc8:	2c20703a 	and	r16,r5,r16
   4bfcc:	a827883a 	mov	r19,r21
   4bfd0:	aa403fcc 	andi	r9,r21,255
   4bfd4:	a0005926 	beq	r20,zero,4c13c <__muldf3+0x1bc>
   4bfd8:	0081ffc4 	movi	r2,2047
   4bfdc:	a0803426 	beq	r20,r2,4c0b0 <__muldf3+0x130>
   4bfe0:	84000434 	orhi	r16,r16,16
   4bfe4:	2004d77a 	srli	r2,r4,29
   4bfe8:	802090fa 	slli	r16,r16,3
   4bfec:	202e90fa 	slli	r23,r4,3
   4bff0:	a53f0044 	addi	r20,r20,-1023
   4bff4:	80a0b03a 	or	r16,r16,r2
   4bff8:	000b883a 	mov	r5,zero
   4bffc:	0039883a 	mov	fp,zero
   4c000:	3806d53a 	srli	r3,r7,20
   4c004:	382cd7fa 	srli	r22,r7,31
   4c008:	00800434 	movhi	r2,16
   4c00c:	10bfffc4 	addi	r2,r2,-1
   4c010:	18c1ffcc 	andi	r3,r3,2047
   4c014:	3025883a 	mov	r18,r6
   4c018:	38a2703a 	and	r17,r7,r2
   4c01c:	b2803fcc 	andi	r10,r22,255
   4c020:	18006426 	beq	r3,zero,4c1b4 <__muldf3+0x234>
   4c024:	0081ffc4 	movi	r2,2047
   4c028:	18805c26 	beq	r3,r2,4c19c <__muldf3+0x21c>
   4c02c:	8c400434 	orhi	r17,r17,16
   4c030:	3004d77a 	srli	r2,r6,29
   4c034:	882290fa 	slli	r17,r17,3
   4c038:	302490fa 	slli	r18,r6,3
   4c03c:	18ff0044 	addi	r3,r3,-1023
   4c040:	88a2b03a 	or	r17,r17,r2
   4c044:	000f883a 	mov	r7,zero
   4c048:	394ab03a 	or	r5,r7,r5
   4c04c:	280a90ba 	slli	r5,r5,2
   4c050:	00800174 	movhi	r2,5
   4c054:	10b01c04 	addi	r2,r2,-16272
   4c058:	288b883a 	add	r5,r5,r2
   4c05c:	28800017 	ldw	r2,0(r5)
   4c060:	a0c7883a 	add	r3,r20,r3
   4c064:	b54cf03a 	xor	r6,r22,r21
   4c068:	1a000044 	addi	r8,r3,1
   4c06c:	1000683a 	jmp	r2
   4c070:	0004c2b4 	movhi	zero,4874
   4c074:	0004c2a0 	cmpeqi	zero,zero,4874
   4c078:	0004c2a0 	cmpeqi	zero,zero,4874
   4c07c:	0004c28c 	andi	zero,zero,4874
   4c080:	0004c0cc 	andi	zero,zero,4867
   4c084:	0004c0cc 	andi	zero,zero,4867
   4c088:	0004c274 	movhi	zero,4873
   4c08c:	0004c28c 	andi	zero,zero,4874
   4c090:	0004c0cc 	andi	zero,zero,4867
   4c094:	0004c274 	movhi	zero,4873
   4c098:	0004c0cc 	andi	zero,zero,4867
   4c09c:	0004c28c 	andi	zero,zero,4874
   4c0a0:	0004c0d0 	cmplti	zero,zero,4867
   4c0a4:	0004c0d0 	cmplti	zero,zero,4867
   4c0a8:	0004c0d0 	cmplti	zero,zero,4867
   4c0ac:	0004c5f0 	cmpltui	zero,zero,4887
   4c0b0:	8104b03a 	or	r2,r16,r4
   4c0b4:	10006c1e 	bne	r2,zero,4c268 <__muldf3+0x2e8>
   4c0b8:	01400204 	movi	r5,8
   4c0bc:	0021883a 	mov	r16,zero
   4c0c0:	002f883a 	mov	r23,zero
   4c0c4:	07000084 	movi	fp,2
   4c0c8:	003fcd06 	br	4c000 <__alt_data_end+0xfffd64a0>
   4c0cc:	3013883a 	mov	r9,r6
   4c0d0:	00800084 	movi	r2,2
   4c0d4:	e080501e 	bne	fp,r2,4c218 <__muldf3+0x298>
   4c0d8:	4cc0004c 	andi	r19,r9,1
   4c0dc:	0101ffc4 	movi	r4,2047
   4c0e0:	0021883a 	mov	r16,zero
   4c0e4:	002f883a 	mov	r23,zero
   4c0e8:	2008953a 	slli	r4,r4,20
   4c0ec:	98c03fcc 	andi	r3,r19,255
   4c0f0:	04400434 	movhi	r17,16
   4c0f4:	8c7fffc4 	addi	r17,r17,-1
   4c0f8:	180697fa 	slli	r3,r3,31
   4c0fc:	8460703a 	and	r16,r16,r17
   4c100:	8120b03a 	or	r16,r16,r4
   4c104:	80c6b03a 	or	r3,r16,r3
   4c108:	b805883a 	mov	r2,r23
   4c10c:	dfc01117 	ldw	ra,68(sp)
   4c110:	df001017 	ldw	fp,64(sp)
   4c114:	ddc00f17 	ldw	r23,60(sp)
   4c118:	dd800e17 	ldw	r22,56(sp)
   4c11c:	dd400d17 	ldw	r21,52(sp)
   4c120:	dd000c17 	ldw	r20,48(sp)
   4c124:	dcc00b17 	ldw	r19,44(sp)
   4c128:	dc800a17 	ldw	r18,40(sp)
   4c12c:	dc400917 	ldw	r17,36(sp)
   4c130:	dc000817 	ldw	r16,32(sp)
   4c134:	dec01204 	addi	sp,sp,72
   4c138:	f800283a 	ret
   4c13c:	8104b03a 	or	r2,r16,r4
   4c140:	10004426 	beq	r2,zero,4c254 <__muldf3+0x2d4>
   4c144:	80014b26 	beq	r16,zero,4c674 <__muldf3+0x6f4>
   4c148:	8009883a 	mov	r4,r16
   4c14c:	d9800715 	stw	r6,28(sp)
   4c150:	d9c00215 	stw	r7,8(sp)
   4c154:	da400415 	stw	r9,16(sp)
   4c158:	004d2b80 	call	4d2b8 <__clzsi2>
   4c15c:	d9800717 	ldw	r6,28(sp)
   4c160:	d9c00217 	ldw	r7,8(sp)
   4c164:	da400417 	ldw	r9,16(sp)
   4c168:	1007883a 	mov	r3,r2
   4c16c:	01000a04 	movi	r4,40
   4c170:	1dfffe04 	addi	r23,r3,-8
   4c174:	20c9c83a 	sub	r4,r4,r3
   4c178:	85e0983a 	sll	r16,r16,r23
   4c17c:	9108d83a 	srl	r4,r18,r4
   4c180:	95ee983a 	sll	r23,r18,r23
   4c184:	2420b03a 	or	r16,r4,r16
   4c188:	053f0344 	movi	r20,-1011
   4c18c:	a0e9c83a 	sub	r20,r20,r3
   4c190:	000b883a 	mov	r5,zero
   4c194:	0039883a 	mov	fp,zero
   4c198:	003f9906 	br	4c000 <__alt_data_end+0xfffd64a0>
   4c19c:	8984b03a 	or	r2,r17,r6
   4c1a0:	10002a1e 	bne	r2,zero,4c24c <__muldf3+0x2cc>
   4c1a4:	0023883a 	mov	r17,zero
   4c1a8:	0025883a 	mov	r18,zero
   4c1ac:	01c00084 	movi	r7,2
   4c1b0:	003fa506 	br	4c048 <__alt_data_end+0xfffd64e8>
   4c1b4:	8984b03a 	or	r2,r17,r6
   4c1b8:	10002026 	beq	r2,zero,4c23c <__muldf3+0x2bc>
   4c1bc:	88011c26 	beq	r17,zero,4c630 <__muldf3+0x6b0>
   4c1c0:	8809883a 	mov	r4,r17
   4c1c4:	d9400215 	stw	r5,8(sp)
   4c1c8:	d9800715 	stw	r6,28(sp)
   4c1cc:	da400415 	stw	r9,16(sp)
   4c1d0:	da800315 	stw	r10,12(sp)
   4c1d4:	004d2b80 	call	4d2b8 <__clzsi2>
   4c1d8:	d9400217 	ldw	r5,8(sp)
   4c1dc:	d9800717 	ldw	r6,28(sp)
   4c1e0:	da400417 	ldw	r9,16(sp)
   4c1e4:	da800317 	ldw	r10,12(sp)
   4c1e8:	1007883a 	mov	r3,r2
   4c1ec:	01000a04 	movi	r4,40
   4c1f0:	1cbffe04 	addi	r18,r3,-8
   4c1f4:	20c9c83a 	sub	r4,r4,r3
   4c1f8:	8ca2983a 	sll	r17,r17,r18
   4c1fc:	3108d83a 	srl	r4,r6,r4
   4c200:	34a4983a 	sll	r18,r6,r18
   4c204:	2462b03a 	or	r17,r4,r17
   4c208:	00bf0344 	movi	r2,-1011
   4c20c:	10c7c83a 	sub	r3,r2,r3
   4c210:	000f883a 	mov	r7,zero
   4c214:	003f8c06 	br	4c048 <__alt_data_end+0xfffd64e8>
   4c218:	008000c4 	movi	r2,3
   4c21c:	e0816d26 	beq	fp,r2,4c7d4 <__muldf3+0x854>
   4c220:	00800044 	movi	r2,1
   4c224:	e081321e 	bne	fp,r2,4c6f0 <__muldf3+0x770>
   4c228:	48a6703a 	and	r19,r9,r2
   4c22c:	0009883a 	mov	r4,zero
   4c230:	0021883a 	mov	r16,zero
   4c234:	002f883a 	mov	r23,zero
   4c238:	003fab06 	br	4c0e8 <__alt_data_end+0xfffd6588>
   4c23c:	0023883a 	mov	r17,zero
   4c240:	0025883a 	mov	r18,zero
   4c244:	01c00044 	movi	r7,1
   4c248:	003f7f06 	br	4c048 <__alt_data_end+0xfffd64e8>
   4c24c:	01c000c4 	movi	r7,3
   4c250:	003f7d06 	br	4c048 <__alt_data_end+0xfffd64e8>
   4c254:	01400104 	movi	r5,4
   4c258:	0021883a 	mov	r16,zero
   4c25c:	002f883a 	mov	r23,zero
   4c260:	07000044 	movi	fp,1
   4c264:	003f6606 	br	4c000 <__alt_data_end+0xfffd64a0>
   4c268:	01400304 	movi	r5,12
   4c26c:	070000c4 	movi	fp,3
   4c270:	003f6306 	br	4c000 <__alt_data_end+0xfffd64a0>
   4c274:	04000434 	movhi	r16,16
   4c278:	0027883a 	mov	r19,zero
   4c27c:	843fffc4 	addi	r16,r16,-1
   4c280:	05ffffc4 	movi	r23,-1
   4c284:	0101ffc4 	movi	r4,2047
   4c288:	003f9706 	br	4c0e8 <__alt_data_end+0xfffd6588>
   4c28c:	8821883a 	mov	r16,r17
   4c290:	902f883a 	mov	r23,r18
   4c294:	5013883a 	mov	r9,r10
   4c298:	3839883a 	mov	fp,r7
   4c29c:	003f8c06 	br	4c0d0 <__alt_data_end+0xfffd6570>
   4c2a0:	8821883a 	mov	r16,r17
   4c2a4:	902f883a 	mov	r23,r18
   4c2a8:	3013883a 	mov	r9,r6
   4c2ac:	3839883a 	mov	fp,r7
   4c2b0:	003f8706 	br	4c0d0 <__alt_data_end+0xfffd6570>
   4c2b4:	b82ad43a 	srli	r21,r23,16
   4c2b8:	9038d43a 	srli	fp,r18,16
   4c2bc:	bdffffcc 	andi	r23,r23,65535
   4c2c0:	94bfffcc 	andi	r18,r18,65535
   4c2c4:	9009883a 	mov	r4,r18
   4c2c8:	b80b883a 	mov	r5,r23
   4c2cc:	d8c00515 	stw	r3,20(sp)
   4c2d0:	d9800715 	stw	r6,28(sp)
   4c2d4:	da000615 	stw	r8,24(sp)
   4c2d8:	004095c0 	call	4095c <__mulsi3>
   4c2dc:	9009883a 	mov	r4,r18
   4c2e0:	a80b883a 	mov	r5,r21
   4c2e4:	1029883a 	mov	r20,r2
   4c2e8:	004095c0 	call	4095c <__mulsi3>
   4c2ec:	e009883a 	mov	r4,fp
   4c2f0:	a80b883a 	mov	r5,r21
   4c2f4:	102d883a 	mov	r22,r2
   4c2f8:	004095c0 	call	4095c <__mulsi3>
   4c2fc:	e009883a 	mov	r4,fp
   4c300:	b80b883a 	mov	r5,r23
   4c304:	1027883a 	mov	r19,r2
   4c308:	004095c0 	call	4095c <__mulsi3>
   4c30c:	a008d43a 	srli	r4,r20,16
   4c310:	b085883a 	add	r2,r22,r2
   4c314:	d8c00517 	ldw	r3,20(sp)
   4c318:	110f883a 	add	r7,r2,r4
   4c31c:	d9800717 	ldw	r6,28(sp)
   4c320:	da000617 	ldw	r8,24(sp)
   4c324:	3d80022e 	bgeu	r7,r22,4c330 <__muldf3+0x3b0>
   4c328:	00800074 	movhi	r2,1
   4c32c:	98a7883a 	add	r19,r19,r2
   4c330:	3804943a 	slli	r2,r7,16
   4c334:	380ed43a 	srli	r7,r7,16
   4c338:	882cd43a 	srli	r22,r17,16
   4c33c:	a53fffcc 	andi	r20,r20,65535
   4c340:	8c7fffcc 	andi	r17,r17,65535
   4c344:	1529883a 	add	r20,r2,r20
   4c348:	8809883a 	mov	r4,r17
   4c34c:	b80b883a 	mov	r5,r23
   4c350:	d8c00515 	stw	r3,20(sp)
   4c354:	d9800715 	stw	r6,28(sp)
   4c358:	da000615 	stw	r8,24(sp)
   4c35c:	d9c00015 	stw	r7,0(sp)
   4c360:	dd000115 	stw	r20,4(sp)
   4c364:	004095c0 	call	4095c <__mulsi3>
   4c368:	a80b883a 	mov	r5,r21
   4c36c:	8809883a 	mov	r4,r17
   4c370:	d8800415 	stw	r2,16(sp)
   4c374:	004095c0 	call	4095c <__mulsi3>
   4c378:	a80b883a 	mov	r5,r21
   4c37c:	b009883a 	mov	r4,r22
   4c380:	1029883a 	mov	r20,r2
   4c384:	004095c0 	call	4095c <__mulsi3>
   4c388:	b009883a 	mov	r4,r22
   4c38c:	b80b883a 	mov	r5,r23
   4c390:	102b883a 	mov	r21,r2
   4c394:	004095c0 	call	4095c <__mulsi3>
   4c398:	da400417 	ldw	r9,16(sp)
   4c39c:	a085883a 	add	r2,r20,r2
   4c3a0:	d8c00517 	ldw	r3,20(sp)
   4c3a4:	4808d43a 	srli	r4,r9,16
   4c3a8:	d9800717 	ldw	r6,28(sp)
   4c3ac:	da000617 	ldw	r8,24(sp)
   4c3b0:	1109883a 	add	r4,r2,r4
   4c3b4:	2500022e 	bgeu	r4,r20,4c3c0 <__muldf3+0x440>
   4c3b8:	00800074 	movhi	r2,1
   4c3bc:	a8ab883a 	add	r21,r21,r2
   4c3c0:	200e943a 	slli	r7,r4,16
   4c3c4:	2004d43a 	srli	r2,r4,16
   4c3c8:	802ed43a 	srli	r23,r16,16
   4c3cc:	843fffcc 	andi	r16,r16,65535
   4c3d0:	4d3fffcc 	andi	r20,r9,65535
   4c3d4:	9009883a 	mov	r4,r18
   4c3d8:	800b883a 	mov	r5,r16
   4c3dc:	3d29883a 	add	r20,r7,r20
   4c3e0:	d8c00515 	stw	r3,20(sp)
   4c3e4:	d9800715 	stw	r6,28(sp)
   4c3e8:	da000615 	stw	r8,24(sp)
   4c3ec:	a8ab883a 	add	r21,r21,r2
   4c3f0:	004095c0 	call	4095c <__mulsi3>
   4c3f4:	9009883a 	mov	r4,r18
   4c3f8:	b80b883a 	mov	r5,r23
   4c3fc:	d8800315 	stw	r2,12(sp)
   4c400:	004095c0 	call	4095c <__mulsi3>
   4c404:	e009883a 	mov	r4,fp
   4c408:	b80b883a 	mov	r5,r23
   4c40c:	1025883a 	mov	r18,r2
   4c410:	004095c0 	call	4095c <__mulsi3>
   4c414:	e009883a 	mov	r4,fp
   4c418:	800b883a 	mov	r5,r16
   4c41c:	d8800215 	stw	r2,8(sp)
   4c420:	004095c0 	call	4095c <__mulsi3>
   4c424:	da800317 	ldw	r10,12(sp)
   4c428:	d9400017 	ldw	r5,0(sp)
   4c42c:	9085883a 	add	r2,r18,r2
   4c430:	5008d43a 	srli	r4,r10,16
   4c434:	a153883a 	add	r9,r20,r5
   4c438:	d8c00517 	ldw	r3,20(sp)
   4c43c:	1109883a 	add	r4,r2,r4
   4c440:	d9800717 	ldw	r6,28(sp)
   4c444:	da000617 	ldw	r8,24(sp)
   4c448:	dac00217 	ldw	r11,8(sp)
   4c44c:	2480022e 	bgeu	r4,r18,4c458 <__muldf3+0x4d8>
   4c450:	00800074 	movhi	r2,1
   4c454:	5897883a 	add	r11,r11,r2
   4c458:	200e943a 	slli	r7,r4,16
   4c45c:	2038d43a 	srli	fp,r4,16
   4c460:	52bfffcc 	andi	r10,r10,65535
   4c464:	3a8f883a 	add	r7,r7,r10
   4c468:	8809883a 	mov	r4,r17
   4c46c:	800b883a 	mov	r5,r16
   4c470:	d8c00515 	stw	r3,20(sp)
   4c474:	d9800715 	stw	r6,28(sp)
   4c478:	d9c00215 	stw	r7,8(sp)
   4c47c:	da000615 	stw	r8,24(sp)
   4c480:	da400415 	stw	r9,16(sp)
   4c484:	5f39883a 	add	fp,r11,fp
   4c488:	004095c0 	call	4095c <__mulsi3>
   4c48c:	8809883a 	mov	r4,r17
   4c490:	b80b883a 	mov	r5,r23
   4c494:	1025883a 	mov	r18,r2
   4c498:	004095c0 	call	4095c <__mulsi3>
   4c49c:	b009883a 	mov	r4,r22
   4c4a0:	b80b883a 	mov	r5,r23
   4c4a4:	d8800315 	stw	r2,12(sp)
   4c4a8:	004095c0 	call	4095c <__mulsi3>
   4c4ac:	b009883a 	mov	r4,r22
   4c4b0:	800b883a 	mov	r5,r16
   4c4b4:	1023883a 	mov	r17,r2
   4c4b8:	004095c0 	call	4095c <__mulsi3>
   4c4bc:	da800317 	ldw	r10,12(sp)
   4c4c0:	9008d43a 	srli	r4,r18,16
   4c4c4:	d8c00517 	ldw	r3,20(sp)
   4c4c8:	5085883a 	add	r2,r10,r2
   4c4cc:	1109883a 	add	r4,r2,r4
   4c4d0:	d9800717 	ldw	r6,28(sp)
   4c4d4:	d9c00217 	ldw	r7,8(sp)
   4c4d8:	da000617 	ldw	r8,24(sp)
   4c4dc:	da400417 	ldw	r9,16(sp)
   4c4e0:	2280022e 	bgeu	r4,r10,4c4ec <__muldf3+0x56c>
   4c4e4:	00800074 	movhi	r2,1
   4c4e8:	88a3883a 	add	r17,r17,r2
   4c4ec:	2004943a 	slli	r2,r4,16
   4c4f0:	94bfffcc 	andi	r18,r18,65535
   4c4f4:	4ce7883a 	add	r19,r9,r19
   4c4f8:	14a5883a 	add	r18,r2,r18
   4c4fc:	9d29803a 	cmpltu	r20,r19,r20
   4c500:	9565883a 	add	r18,r18,r21
   4c504:	9505883a 	add	r2,r18,r20
   4c508:	99e7883a 	add	r19,r19,r7
   4c50c:	99cf803a 	cmpltu	r7,r19,r7
   4c510:	e08b883a 	add	r5,fp,r2
   4c514:	2008d43a 	srli	r4,r4,16
   4c518:	29ef883a 	add	r23,r5,r7
   4c51c:	1529803a 	cmpltu	r20,r2,r20
   4c520:	956b803a 	cmpltu	r21,r18,r21
   4c524:	b9cf803a 	cmpltu	r7,r23,r7
   4c528:	a564b03a 	or	r18,r20,r21
   4c52c:	2f39803a 	cmpltu	fp,r5,fp
   4c530:	9125883a 	add	r18,r18,r4
   4c534:	3f38b03a 	or	fp,r7,fp
   4c538:	9725883a 	add	r18,r18,fp
   4c53c:	9804927a 	slli	r2,r19,9
   4c540:	9463883a 	add	r17,r18,r17
   4c544:	d9000117 	ldw	r4,4(sp)
   4c548:	b820d5fa 	srli	r16,r23,23
   4c54c:	8822927a 	slli	r17,r17,9
   4c550:	9826d5fa 	srli	r19,r19,23
   4c554:	1104b03a 	or	r2,r2,r4
   4c558:	b82e927a 	slli	r23,r23,9
   4c55c:	1004c03a 	cmpne	r2,r2,zero
   4c560:	8c20b03a 	or	r16,r17,r16
   4c564:	14e6b03a 	or	r19,r2,r19
   4c568:	8080402c 	andhi	r2,r16,256
   4c56c:	9deeb03a 	or	r23,r19,r23
   4c570:	10000726 	beq	r2,zero,4c590 <__muldf3+0x610>
   4c574:	b804d07a 	srli	r2,r23,1
   4c578:	800697fa 	slli	r3,r16,31
   4c57c:	bdc0004c 	andi	r23,r23,1
   4c580:	8020d07a 	srli	r16,r16,1
   4c584:	b8aeb03a 	or	r23,r23,r2
   4c588:	b8eeb03a 	or	r23,r23,r3
   4c58c:	4007883a 	mov	r3,r8
   4c590:	1900ffc4 	addi	r4,r3,1023
   4c594:	01004d0e 	bge	zero,r4,4c6cc <__muldf3+0x74c>
   4c598:	b88001cc 	andi	r2,r23,7
   4c59c:	10000726 	beq	r2,zero,4c5bc <__muldf3+0x63c>
   4c5a0:	b94003cc 	andi	r5,r23,15
   4c5a4:	00800104 	movi	r2,4
   4c5a8:	28800426 	beq	r5,r2,4c5bc <__muldf3+0x63c>
   4c5ac:	b885883a 	add	r2,r23,r2
   4c5b0:	15ef803a 	cmpltu	r23,r2,r23
   4c5b4:	85e1883a 	add	r16,r16,r23
   4c5b8:	102f883a 	mov	r23,r2
   4c5bc:	8080402c 	andhi	r2,r16,256
   4c5c0:	10000426 	beq	r2,zero,4c5d4 <__muldf3+0x654>
   4c5c4:	00bfc034 	movhi	r2,65280
   4c5c8:	10bfffc4 	addi	r2,r2,-1
   4c5cc:	19010004 	addi	r4,r3,1024
   4c5d0:	80a0703a 	and	r16,r16,r2
   4c5d4:	0081ff84 	movi	r2,2046
   4c5d8:	1100340e 	bge	r2,r4,4c6ac <__muldf3+0x72c>
   4c5dc:	34c0004c 	andi	r19,r6,1
   4c5e0:	0101ffc4 	movi	r4,2047
   4c5e4:	0021883a 	mov	r16,zero
   4c5e8:	002f883a 	mov	r23,zero
   4c5ec:	003ebe06 	br	4c0e8 <__alt_data_end+0xfffd6588>
   4c5f0:	8080022c 	andhi	r2,r16,8
   4c5f4:	10000926 	beq	r2,zero,4c61c <__muldf3+0x69c>
   4c5f8:	8880022c 	andhi	r2,r17,8
   4c5fc:	1000071e 	bne	r2,zero,4c61c <__muldf3+0x69c>
   4c600:	00800434 	movhi	r2,16
   4c604:	8c000234 	orhi	r16,r17,8
   4c608:	10bfffc4 	addi	r2,r2,-1
   4c60c:	b027883a 	mov	r19,r22
   4c610:	80a0703a 	and	r16,r16,r2
   4c614:	902f883a 	mov	r23,r18
   4c618:	003f1a06 	br	4c284 <__alt_data_end+0xfffd6724>
   4c61c:	00800434 	movhi	r2,16
   4c620:	84000234 	orhi	r16,r16,8
   4c624:	10bfffc4 	addi	r2,r2,-1
   4c628:	80a0703a 	and	r16,r16,r2
   4c62c:	003f1506 	br	4c284 <__alt_data_end+0xfffd6724>
   4c630:	3009883a 	mov	r4,r6
   4c634:	d9400215 	stw	r5,8(sp)
   4c638:	d9800715 	stw	r6,28(sp)
   4c63c:	da400415 	stw	r9,16(sp)
   4c640:	da800315 	stw	r10,12(sp)
   4c644:	004d2b80 	call	4d2b8 <__clzsi2>
   4c648:	10c00804 	addi	r3,r2,32
   4c64c:	010009c4 	movi	r4,39
   4c650:	d9400217 	ldw	r5,8(sp)
   4c654:	d9800717 	ldw	r6,28(sp)
   4c658:	da400417 	ldw	r9,16(sp)
   4c65c:	da800317 	ldw	r10,12(sp)
   4c660:	20fee20e 	bge	r4,r3,4c1ec <__alt_data_end+0xfffd668c>
   4c664:	147ffe04 	addi	r17,r2,-8
   4c668:	9462983a 	sll	r17,r18,r17
   4c66c:	0025883a 	mov	r18,zero
   4c670:	003ee506 	br	4c208 <__alt_data_end+0xfffd66a8>
   4c674:	d9800715 	stw	r6,28(sp)
   4c678:	d9c00215 	stw	r7,8(sp)
   4c67c:	da400415 	stw	r9,16(sp)
   4c680:	004d2b80 	call	4d2b8 <__clzsi2>
   4c684:	10c00804 	addi	r3,r2,32
   4c688:	010009c4 	movi	r4,39
   4c68c:	d9800717 	ldw	r6,28(sp)
   4c690:	d9c00217 	ldw	r7,8(sp)
   4c694:	da400417 	ldw	r9,16(sp)
   4c698:	20feb40e 	bge	r4,r3,4c16c <__alt_data_end+0xfffd660c>
   4c69c:	143ffe04 	addi	r16,r2,-8
   4c6a0:	9420983a 	sll	r16,r18,r16
   4c6a4:	002f883a 	mov	r23,zero
   4c6a8:	003eb706 	br	4c188 <__alt_data_end+0xfffd6628>
   4c6ac:	8004977a 	slli	r2,r16,29
   4c6b0:	b82ed0fa 	srli	r23,r23,3
   4c6b4:	8020927a 	slli	r16,r16,9
   4c6b8:	2101ffcc 	andi	r4,r4,2047
   4c6bc:	15eeb03a 	or	r23,r2,r23
   4c6c0:	8020d33a 	srli	r16,r16,12
   4c6c4:	34c0004c 	andi	r19,r6,1
   4c6c8:	003e8706 	br	4c0e8 <__alt_data_end+0xfffd6588>
   4c6cc:	00bf0084 	movi	r2,-1022
   4c6d0:	10c5c83a 	sub	r2,r2,r3
   4c6d4:	01000e04 	movi	r4,56
   4c6d8:	2080080e 	bge	r4,r2,4c6fc <__muldf3+0x77c>
   4c6dc:	34c0004c 	andi	r19,r6,1
   4c6e0:	0009883a 	mov	r4,zero
   4c6e4:	0021883a 	mov	r16,zero
   4c6e8:	002f883a 	mov	r23,zero
   4c6ec:	003e7e06 	br	4c0e8 <__alt_data_end+0xfffd6588>
   4c6f0:	4007883a 	mov	r3,r8
   4c6f4:	480d883a 	mov	r6,r9
   4c6f8:	003fa506 	br	4c590 <__alt_data_end+0xfffd6a30>
   4c6fc:	010007c4 	movi	r4,31
   4c700:	20801816 	blt	r4,r2,4c764 <__muldf3+0x7e4>
   4c704:	18c10784 	addi	r3,r3,1054
   4c708:	80c8983a 	sll	r4,r16,r3
   4c70c:	b88ad83a 	srl	r5,r23,r2
   4c710:	b8c6983a 	sll	r3,r23,r3
   4c714:	80a0d83a 	srl	r16,r16,r2
   4c718:	2908b03a 	or	r4,r5,r4
   4c71c:	1804c03a 	cmpne	r2,r3,zero
   4c720:	2088b03a 	or	r4,r4,r2
   4c724:	208001cc 	andi	r2,r4,7
   4c728:	10000726 	beq	r2,zero,4c748 <__muldf3+0x7c8>
   4c72c:	20c003cc 	andi	r3,r4,15
   4c730:	00800104 	movi	r2,4
   4c734:	18800426 	beq	r3,r2,4c748 <__muldf3+0x7c8>
   4c738:	20c00104 	addi	r3,r4,4
   4c73c:	1905803a 	cmpltu	r2,r3,r4
   4c740:	80a1883a 	add	r16,r16,r2
   4c744:	1809883a 	mov	r4,r3
   4c748:	8080202c 	andhi	r2,r16,128
   4c74c:	10001b26 	beq	r2,zero,4c7bc <__muldf3+0x83c>
   4c750:	34c0004c 	andi	r19,r6,1
   4c754:	01000044 	movi	r4,1
   4c758:	0021883a 	mov	r16,zero
   4c75c:	002f883a 	mov	r23,zero
   4c760:	003e6106 	br	4c0e8 <__alt_data_end+0xfffd6588>
   4c764:	013ef884 	movi	r4,-1054
   4c768:	20c9c83a 	sub	r4,r4,r3
   4c76c:	01400804 	movi	r5,32
   4c770:	8108d83a 	srl	r4,r16,r4
   4c774:	11401526 	beq	r2,r5,4c7cc <__muldf3+0x84c>
   4c778:	18c10f84 	addi	r3,r3,1086
   4c77c:	80e0983a 	sll	r16,r16,r3
   4c780:	85eeb03a 	or	r23,r16,r23
   4c784:	b804c03a 	cmpne	r2,r23,zero
   4c788:	1108b03a 	or	r4,r2,r4
   4c78c:	20c001cc 	andi	r3,r4,7
   4c790:	1800061e 	bne	r3,zero,4c7ac <__muldf3+0x82c>
   4c794:	0021883a 	mov	r16,zero
   4c798:	202ed0fa 	srli	r23,r4,3
   4c79c:	34c0004c 	andi	r19,r6,1
   4c7a0:	0009883a 	mov	r4,zero
   4c7a4:	b8eeb03a 	or	r23,r23,r3
   4c7a8:	003e4f06 	br	4c0e8 <__alt_data_end+0xfffd6588>
   4c7ac:	20c003cc 	andi	r3,r4,15
   4c7b0:	00800104 	movi	r2,4
   4c7b4:	0021883a 	mov	r16,zero
   4c7b8:	18bfdf1e 	bne	r3,r2,4c738 <__alt_data_end+0xfffd6bd8>
   4c7bc:	8004927a 	slli	r2,r16,9
   4c7c0:	8006977a 	slli	r3,r16,29
   4c7c4:	1020d33a 	srli	r16,r2,12
   4c7c8:	003ff306 	br	4c798 <__alt_data_end+0xfffd6c38>
   4c7cc:	0021883a 	mov	r16,zero
   4c7d0:	003feb06 	br	4c780 <__alt_data_end+0xfffd6c20>
   4c7d4:	00800434 	movhi	r2,16
   4c7d8:	84000234 	orhi	r16,r16,8
   4c7dc:	10bfffc4 	addi	r2,r2,-1
   4c7e0:	4cc0004c 	andi	r19,r9,1
   4c7e4:	80a0703a 	and	r16,r16,r2
   4c7e8:	003ea606 	br	4c284 <__alt_data_end+0xfffd6724>

0004c7ec <__subdf3>:
   4c7ec:	00c00434 	movhi	r3,16
   4c7f0:	18ffffc4 	addi	r3,r3,-1
   4c7f4:	defffb04 	addi	sp,sp,-20
   4c7f8:	28d2703a 	and	r9,r5,r3
   4c7fc:	3814d53a 	srli	r10,r7,20
   4c800:	38c6703a 	and	r3,r7,r3
   4c804:	3004d77a 	srli	r2,r6,29
   4c808:	dc800215 	stw	r18,8(sp)
   4c80c:	dc000015 	stw	r16,0(sp)
   4c810:	2824d7fa 	srli	r18,r5,31
   4c814:	2820d53a 	srli	r16,r5,20
   4c818:	481290fa 	slli	r9,r9,3
   4c81c:	200ad77a 	srli	r5,r4,29
   4c820:	180690fa 	slli	r3,r3,3
   4c824:	dc400115 	stw	r17,4(sp)
   4c828:	dfc00415 	stw	ra,16(sp)
   4c82c:	202290fa 	slli	r17,r4,3
   4c830:	dcc00315 	stw	r19,12(sp)
   4c834:	5281ffcc 	andi	r10,r10,2047
   4c838:	0101ffc4 	movi	r4,2047
   4c83c:	9011883a 	mov	r8,r18
   4c840:	8401ffcc 	andi	r16,r16,2047
   4c844:	94803fcc 	andi	r18,r18,255
   4c848:	494ab03a 	or	r5,r9,r5
   4c84c:	380ed7fa 	srli	r7,r7,31
   4c850:	1886b03a 	or	r3,r3,r2
   4c854:	300c90fa 	slli	r6,r6,3
   4c858:	51009026 	beq	r10,r4,4ca9c <__subdf3+0x2b0>
   4c85c:	39c0005c 	xori	r7,r7,1
   4c860:	8285c83a 	sub	r2,r16,r10
   4c864:	91c06f26 	beq	r18,r7,4ca24 <__subdf3+0x238>
   4c868:	0080b10e 	bge	zero,r2,4cb30 <__subdf3+0x344>
   4c86c:	50002a1e 	bne	r10,zero,4c918 <__subdf3+0x12c>
   4c870:	1988b03a 	or	r4,r3,r6
   4c874:	2000941e 	bne	r4,zero,4cac8 <__subdf3+0x2dc>
   4c878:	888001cc 	andi	r2,r17,7
   4c87c:	10005b26 	beq	r2,zero,4c9ec <__subdf3+0x200>
   4c880:	88c003cc 	andi	r3,r17,15
   4c884:	00800104 	movi	r2,4
   4c888:	18805826 	beq	r3,r2,4c9ec <__subdf3+0x200>
   4c88c:	88c00104 	addi	r3,r17,4
   4c890:	1c63803a 	cmpltu	r17,r3,r17
   4c894:	2c4b883a 	add	r5,r5,r17
   4c898:	2880202c 	andhi	r2,r5,128
   4c89c:	9200004c 	andi	r8,r18,1
   4c8a0:	1823883a 	mov	r17,r3
   4c8a4:	10005426 	beq	r2,zero,4c9f8 <__subdf3+0x20c>
   4c8a8:	84000044 	addi	r16,r16,1
   4c8ac:	0081ffc4 	movi	r2,2047
   4c8b0:	8080bf26 	beq	r16,r2,4cbb0 <__subdf3+0x3c4>
   4c8b4:	013fe034 	movhi	r4,65408
   4c8b8:	213fffc4 	addi	r4,r4,-1
   4c8bc:	290a703a 	and	r5,r5,r4
   4c8c0:	2804977a 	slli	r2,r5,29
   4c8c4:	280a927a 	slli	r5,r5,9
   4c8c8:	8822d0fa 	srli	r17,r17,3
   4c8cc:	8401ffcc 	andi	r16,r16,2047
   4c8d0:	2808d33a 	srli	r4,r5,12
   4c8d4:	1444b03a 	or	r2,r2,r17
   4c8d8:	8401ffcc 	andi	r16,r16,2047
   4c8dc:	800a953a 	slli	r5,r16,20
   4c8e0:	40c03fcc 	andi	r3,r8,255
   4c8e4:	04000434 	movhi	r16,16
   4c8e8:	180697fa 	slli	r3,r3,31
   4c8ec:	843fffc4 	addi	r16,r16,-1
   4c8f0:	2420703a 	and	r16,r4,r16
   4c8f4:	8160b03a 	or	r16,r16,r5
   4c8f8:	80c6b03a 	or	r3,r16,r3
   4c8fc:	dfc00417 	ldw	ra,16(sp)
   4c900:	dcc00317 	ldw	r19,12(sp)
   4c904:	dc800217 	ldw	r18,8(sp)
   4c908:	dc400117 	ldw	r17,4(sp)
   4c90c:	dc000017 	ldw	r16,0(sp)
   4c910:	dec00504 	addi	sp,sp,20
   4c914:	f800283a 	ret
   4c918:	0101ffc4 	movi	r4,2047
   4c91c:	813fd626 	beq	r16,r4,4c878 <__alt_data_end+0xfffd6d18>
   4c920:	18c02034 	orhi	r3,r3,128
   4c924:	01000e04 	movi	r4,56
   4c928:	2080a416 	blt	r4,r2,4cbbc <__subdf3+0x3d0>
   4c92c:	010007c4 	movi	r4,31
   4c930:	2080c716 	blt	r4,r2,4cc50 <__subdf3+0x464>
   4c934:	01000804 	movi	r4,32
   4c938:	2089c83a 	sub	r4,r4,r2
   4c93c:	1910983a 	sll	r8,r3,r4
   4c940:	308ed83a 	srl	r7,r6,r2
   4c944:	3108983a 	sll	r4,r6,r4
   4c948:	1884d83a 	srl	r2,r3,r2
   4c94c:	41ccb03a 	or	r6,r8,r7
   4c950:	2008c03a 	cmpne	r4,r4,zero
   4c954:	310cb03a 	or	r6,r6,r4
   4c958:	898dc83a 	sub	r6,r17,r6
   4c95c:	89a3803a 	cmpltu	r17,r17,r6
   4c960:	288bc83a 	sub	r5,r5,r2
   4c964:	2c4bc83a 	sub	r5,r5,r17
   4c968:	3023883a 	mov	r17,r6
   4c96c:	2880202c 	andhi	r2,r5,128
   4c970:	10006b26 	beq	r2,zero,4cb20 <__subdf3+0x334>
   4c974:	04c02034 	movhi	r19,128
   4c978:	9cffffc4 	addi	r19,r19,-1
   4c97c:	2ce6703a 	and	r19,r5,r19
   4c980:	98007c26 	beq	r19,zero,4cb74 <__subdf3+0x388>
   4c984:	9809883a 	mov	r4,r19
   4c988:	004d2b80 	call	4d2b8 <__clzsi2>
   4c98c:	10fffe04 	addi	r3,r2,-8
   4c990:	010007c4 	movi	r4,31
   4c994:	20c07d16 	blt	r4,r3,4cb8c <__subdf3+0x3a0>
   4c998:	01400a04 	movi	r5,40
   4c99c:	2885c83a 	sub	r2,r5,r2
   4c9a0:	888ad83a 	srl	r5,r17,r2
   4c9a4:	98e6983a 	sll	r19,r19,r3
   4c9a8:	88e2983a 	sll	r17,r17,r3
   4c9ac:	2ce6b03a 	or	r19,r5,r19
   4c9b0:	1c007a16 	blt	r3,r16,4cb9c <__subdf3+0x3b0>
   4c9b4:	1c21c83a 	sub	r16,r3,r16
   4c9b8:	81400044 	addi	r5,r16,1
   4c9bc:	00c007c4 	movi	r3,31
   4c9c0:	19409616 	blt	r3,r5,4cc1c <__subdf3+0x430>
   4c9c4:	1c21c83a 	sub	r16,r3,r16
   4c9c8:	8c08983a 	sll	r4,r17,r16
   4c9cc:	8946d83a 	srl	r3,r17,r5
   4c9d0:	9c20983a 	sll	r16,r19,r16
   4c9d4:	2008c03a 	cmpne	r4,r4,zero
   4c9d8:	994ad83a 	srl	r5,r19,r5
   4c9dc:	1c06b03a 	or	r3,r3,r16
   4c9e0:	1922b03a 	or	r17,r3,r4
   4c9e4:	0021883a 	mov	r16,zero
   4c9e8:	003fa306 	br	4c878 <__alt_data_end+0xfffd6d18>
   4c9ec:	2880202c 	andhi	r2,r5,128
   4c9f0:	9200004c 	andi	r8,r18,1
   4c9f4:	103fac1e 	bne	r2,zero,4c8a8 <__alt_data_end+0xfffd6d48>
   4c9f8:	2804977a 	slli	r2,r5,29
   4c9fc:	8822d0fa 	srli	r17,r17,3
   4ca00:	00c1ffc4 	movi	r3,2047
   4ca04:	280ad0fa 	srli	r5,r5,3
   4ca08:	1444b03a 	or	r2,r2,r17
   4ca0c:	80c02726 	beq	r16,r3,4caac <__subdf3+0x2c0>
   4ca10:	01000434 	movhi	r4,16
   4ca14:	213fffc4 	addi	r4,r4,-1
   4ca18:	80e0703a 	and	r16,r16,r3
   4ca1c:	2908703a 	and	r4,r5,r4
   4ca20:	003fad06 	br	4c8d8 <__alt_data_end+0xfffd6d78>
   4ca24:	0080690e 	bge	zero,r2,4cbcc <__subdf3+0x3e0>
   4ca28:	50002f26 	beq	r10,zero,4cae8 <__subdf3+0x2fc>
   4ca2c:	0101ffc4 	movi	r4,2047
   4ca30:	813f9126 	beq	r16,r4,4c878 <__alt_data_end+0xfffd6d18>
   4ca34:	18c02034 	orhi	r3,r3,128
   4ca38:	01000e04 	movi	r4,56
   4ca3c:	2080b00e 	bge	r4,r2,4cd00 <__subdf3+0x514>
   4ca40:	198cb03a 	or	r6,r3,r6
   4ca44:	300ec03a 	cmpne	r7,r6,zero
   4ca48:	0005883a 	mov	r2,zero
   4ca4c:	3c4f883a 	add	r7,r7,r17
   4ca50:	3c63803a 	cmpltu	r17,r7,r17
   4ca54:	114b883a 	add	r5,r2,r5
   4ca58:	2c4b883a 	add	r5,r5,r17
   4ca5c:	3823883a 	mov	r17,r7
   4ca60:	2880202c 	andhi	r2,r5,128
   4ca64:	10002e26 	beq	r2,zero,4cb20 <__subdf3+0x334>
   4ca68:	84000044 	addi	r16,r16,1
   4ca6c:	0081ffc4 	movi	r2,2047
   4ca70:	8080de26 	beq	r16,r2,4cdec <__subdf3+0x600>
   4ca74:	00bfe034 	movhi	r2,65408
   4ca78:	10bfffc4 	addi	r2,r2,-1
   4ca7c:	288a703a 	and	r5,r5,r2
   4ca80:	880cd07a 	srli	r6,r17,1
   4ca84:	280897fa 	slli	r4,r5,31
   4ca88:	88c0004c 	andi	r3,r17,1
   4ca8c:	30e2b03a 	or	r17,r6,r3
   4ca90:	280ad07a 	srli	r5,r5,1
   4ca94:	8922b03a 	or	r17,r17,r4
   4ca98:	003f7706 	br	4c878 <__alt_data_end+0xfffd6d18>
   4ca9c:	1984b03a 	or	r2,r3,r6
   4caa0:	103f6e26 	beq	r2,zero,4c85c <__alt_data_end+0xfffd6cfc>
   4caa4:	39c03fcc 	andi	r7,r7,255
   4caa8:	003f6d06 	br	4c860 <__alt_data_end+0xfffd6d00>
   4caac:	1146b03a 	or	r3,r2,r5
   4cab0:	18003f26 	beq	r3,zero,4cbb0 <__subdf3+0x3c4>
   4cab4:	00c00434 	movhi	r3,16
   4cab8:	29000234 	orhi	r4,r5,8
   4cabc:	18ffffc4 	addi	r3,r3,-1
   4cac0:	20c8703a 	and	r4,r4,r3
   4cac4:	003f8406 	br	4c8d8 <__alt_data_end+0xfffd6d78>
   4cac8:	10bfffc4 	addi	r2,r2,-1
   4cacc:	1000501e 	bne	r2,zero,4cc10 <__subdf3+0x424>
   4cad0:	898fc83a 	sub	r7,r17,r6
   4cad4:	89e3803a 	cmpltu	r17,r17,r7
   4cad8:	28cbc83a 	sub	r5,r5,r3
   4cadc:	2c4bc83a 	sub	r5,r5,r17
   4cae0:	3823883a 	mov	r17,r7
   4cae4:	003fa106 	br	4c96c <__alt_data_end+0xfffd6e0c>
   4cae8:	1988b03a 	or	r4,r3,r6
   4caec:	203f6226 	beq	r4,zero,4c878 <__alt_data_end+0xfffd6d18>
   4caf0:	10bfffc4 	addi	r2,r2,-1
   4caf4:	10009b1e 	bne	r2,zero,4cd64 <__subdf3+0x578>
   4caf8:	344d883a 	add	r6,r6,r17
   4cafc:	3463803a 	cmpltu	r17,r6,r17
   4cb00:	194b883a 	add	r5,r3,r5
   4cb04:	2c4b883a 	add	r5,r5,r17
   4cb08:	3023883a 	mov	r17,r6
   4cb0c:	003fd406 	br	4ca60 <__alt_data_end+0xfffd6f00>
   4cb10:	1106b03a 	or	r3,r2,r4
   4cb14:	1800b426 	beq	r3,zero,4cde8 <__subdf3+0x5fc>
   4cb18:	100b883a 	mov	r5,r2
   4cb1c:	2023883a 	mov	r17,r4
   4cb20:	888001cc 	andi	r2,r17,7
   4cb24:	103f561e 	bne	r2,zero,4c880 <__alt_data_end+0xfffd6d20>
   4cb28:	9200004c 	andi	r8,r18,1
   4cb2c:	003fb206 	br	4c9f8 <__alt_data_end+0xfffd6e98>
   4cb30:	1000531e 	bne	r2,zero,4cc80 <__subdf3+0x494>
   4cb34:	80800044 	addi	r2,r16,1
   4cb38:	1081ffcc 	andi	r2,r2,2047
   4cb3c:	01000044 	movi	r4,1
   4cb40:	2080a00e 	bge	r4,r2,4cdc4 <__subdf3+0x5d8>
   4cb44:	8985c83a 	sub	r2,r17,r6
   4cb48:	8889803a 	cmpltu	r4,r17,r2
   4cb4c:	28e7c83a 	sub	r19,r5,r3
   4cb50:	9927c83a 	sub	r19,r19,r4
   4cb54:	9900202c 	andhi	r4,r19,128
   4cb58:	20006226 	beq	r4,zero,4cce4 <__subdf3+0x4f8>
   4cb5c:	3463c83a 	sub	r17,r6,r17
   4cb60:	194bc83a 	sub	r5,r3,r5
   4cb64:	344d803a 	cmpltu	r6,r6,r17
   4cb68:	29a7c83a 	sub	r19,r5,r6
   4cb6c:	3825883a 	mov	r18,r7
   4cb70:	983f841e 	bne	r19,zero,4c984 <__alt_data_end+0xfffd6e24>
   4cb74:	8809883a 	mov	r4,r17
   4cb78:	004d2b80 	call	4d2b8 <__clzsi2>
   4cb7c:	10800804 	addi	r2,r2,32
   4cb80:	10fffe04 	addi	r3,r2,-8
   4cb84:	010007c4 	movi	r4,31
   4cb88:	20ff830e 	bge	r4,r3,4c998 <__alt_data_end+0xfffd6e38>
   4cb8c:	14fff604 	addi	r19,r2,-40
   4cb90:	8ce6983a 	sll	r19,r17,r19
   4cb94:	0023883a 	mov	r17,zero
   4cb98:	1c3f860e 	bge	r3,r16,4c9b4 <__alt_data_end+0xfffd6e54>
   4cb9c:	017fe034 	movhi	r5,65408
   4cba0:	297fffc4 	addi	r5,r5,-1
   4cba4:	80e1c83a 	sub	r16,r16,r3
   4cba8:	994a703a 	and	r5,r19,r5
   4cbac:	003f3206 	br	4c878 <__alt_data_end+0xfffd6d18>
   4cbb0:	0009883a 	mov	r4,zero
   4cbb4:	0005883a 	mov	r2,zero
   4cbb8:	003f4706 	br	4c8d8 <__alt_data_end+0xfffd6d78>
   4cbbc:	198cb03a 	or	r6,r3,r6
   4cbc0:	300cc03a 	cmpne	r6,r6,zero
   4cbc4:	0005883a 	mov	r2,zero
   4cbc8:	003f6306 	br	4c958 <__alt_data_end+0xfffd6df8>
   4cbcc:	10009d1e 	bne	r2,zero,4ce44 <__subdf3+0x658>
   4cbd0:	81c00044 	addi	r7,r16,1
   4cbd4:	3881ffcc 	andi	r2,r7,2047
   4cbd8:	02400044 	movi	r9,1
   4cbdc:	4880680e 	bge	r9,r2,4cd80 <__subdf3+0x594>
   4cbe0:	0081ffc4 	movi	r2,2047
   4cbe4:	3880ae26 	beq	r7,r2,4cea0 <__subdf3+0x6b4>
   4cbe8:	344d883a 	add	r6,r6,r17
   4cbec:	3463803a 	cmpltu	r17,r6,r17
   4cbf0:	194b883a 	add	r5,r3,r5
   4cbf4:	2c4b883a 	add	r5,r5,r17
   4cbf8:	282297fa 	slli	r17,r5,31
   4cbfc:	300cd07a 	srli	r6,r6,1
   4cc00:	280ad07a 	srli	r5,r5,1
   4cc04:	3821883a 	mov	r16,r7
   4cc08:	89a2b03a 	or	r17,r17,r6
   4cc0c:	003f1a06 	br	4c878 <__alt_data_end+0xfffd6d18>
   4cc10:	0101ffc4 	movi	r4,2047
   4cc14:	813f431e 	bne	r16,r4,4c924 <__alt_data_end+0xfffd6dc4>
   4cc18:	003f1706 	br	4c878 <__alt_data_end+0xfffd6d18>
   4cc1c:	80bff844 	addi	r2,r16,-31
   4cc20:	00c00804 	movi	r3,32
   4cc24:	9884d83a 	srl	r2,r19,r2
   4cc28:	28c05126 	beq	r5,r3,4cd70 <__subdf3+0x584>
   4cc2c:	00c00fc4 	movi	r3,63
   4cc30:	1c21c83a 	sub	r16,r3,r16
   4cc34:	9c26983a 	sll	r19,r19,r16
   4cc38:	9c62b03a 	or	r17,r19,r17
   4cc3c:	8822c03a 	cmpne	r17,r17,zero
   4cc40:	88a2b03a 	or	r17,r17,r2
   4cc44:	000b883a 	mov	r5,zero
   4cc48:	0021883a 	mov	r16,zero
   4cc4c:	003fb406 	br	4cb20 <__alt_data_end+0xfffd6fc0>
   4cc50:	113ff804 	addi	r4,r2,-32
   4cc54:	01c00804 	movi	r7,32
   4cc58:	1908d83a 	srl	r4,r3,r4
   4cc5c:	11c04626 	beq	r2,r7,4cd78 <__subdf3+0x58c>
   4cc60:	01c01004 	movi	r7,64
   4cc64:	3885c83a 	sub	r2,r7,r2
   4cc68:	1884983a 	sll	r2,r3,r2
   4cc6c:	118cb03a 	or	r6,r2,r6
   4cc70:	300cc03a 	cmpne	r6,r6,zero
   4cc74:	310cb03a 	or	r6,r6,r4
   4cc78:	0005883a 	mov	r2,zero
   4cc7c:	003f3606 	br	4c958 <__alt_data_end+0xfffd6df8>
   4cc80:	80002b26 	beq	r16,zero,4cd30 <__subdf3+0x544>
   4cc84:	0101ffc4 	movi	r4,2047
   4cc88:	51006926 	beq	r10,r4,4ce30 <__subdf3+0x644>
   4cc8c:	0085c83a 	sub	r2,zero,r2
   4cc90:	29402034 	orhi	r5,r5,128
   4cc94:	01000e04 	movi	r4,56
   4cc98:	20807d16 	blt	r4,r2,4ce90 <__subdf3+0x6a4>
   4cc9c:	010007c4 	movi	r4,31
   4cca0:	2080d916 	blt	r4,r2,4d008 <__subdf3+0x81c>
   4cca4:	01000804 	movi	r4,32
   4cca8:	2089c83a 	sub	r4,r4,r2
   4ccac:	2912983a 	sll	r9,r5,r4
   4ccb0:	8890d83a 	srl	r8,r17,r2
   4ccb4:	8908983a 	sll	r4,r17,r4
   4ccb8:	2884d83a 	srl	r2,r5,r2
   4ccbc:	4a22b03a 	or	r17,r9,r8
   4ccc0:	2008c03a 	cmpne	r4,r4,zero
   4ccc4:	8922b03a 	or	r17,r17,r4
   4ccc8:	3463c83a 	sub	r17,r6,r17
   4cccc:	1885c83a 	sub	r2,r3,r2
   4ccd0:	344d803a 	cmpltu	r6,r6,r17
   4ccd4:	118bc83a 	sub	r5,r2,r6
   4ccd8:	5021883a 	mov	r16,r10
   4ccdc:	3825883a 	mov	r18,r7
   4cce0:	003f2206 	br	4c96c <__alt_data_end+0xfffd6e0c>
   4cce4:	9886b03a 	or	r3,r19,r2
   4cce8:	18001c1e 	bne	r3,zero,4cd5c <__subdf3+0x570>
   4ccec:	0011883a 	mov	r8,zero
   4ccf0:	000b883a 	mov	r5,zero
   4ccf4:	0023883a 	mov	r17,zero
   4ccf8:	0021883a 	mov	r16,zero
   4ccfc:	003f3e06 	br	4c9f8 <__alt_data_end+0xfffd6e98>
   4cd00:	010007c4 	movi	r4,31
   4cd04:	20803c16 	blt	r4,r2,4cdf8 <__subdf3+0x60c>
   4cd08:	01000804 	movi	r4,32
   4cd0c:	2089c83a 	sub	r4,r4,r2
   4cd10:	1912983a 	sll	r9,r3,r4
   4cd14:	308ed83a 	srl	r7,r6,r2
   4cd18:	3108983a 	sll	r4,r6,r4
   4cd1c:	1884d83a 	srl	r2,r3,r2
   4cd20:	49ceb03a 	or	r7,r9,r7
   4cd24:	2008c03a 	cmpne	r4,r4,zero
   4cd28:	390eb03a 	or	r7,r7,r4
   4cd2c:	003f4706 	br	4ca4c <__alt_data_end+0xfffd6eec>
   4cd30:	2c48b03a 	or	r4,r5,r17
   4cd34:	20003e26 	beq	r4,zero,4ce30 <__subdf3+0x644>
   4cd38:	0084303a 	nor	r2,zero,r2
   4cd3c:	10003a1e 	bne	r2,zero,4ce28 <__subdf3+0x63c>
   4cd40:	3463c83a 	sub	r17,r6,r17
   4cd44:	194bc83a 	sub	r5,r3,r5
   4cd48:	344d803a 	cmpltu	r6,r6,r17
   4cd4c:	298bc83a 	sub	r5,r5,r6
   4cd50:	5021883a 	mov	r16,r10
   4cd54:	3825883a 	mov	r18,r7
   4cd58:	003f0406 	br	4c96c <__alt_data_end+0xfffd6e0c>
   4cd5c:	1023883a 	mov	r17,r2
   4cd60:	003f0706 	br	4c980 <__alt_data_end+0xfffd6e20>
   4cd64:	0101ffc4 	movi	r4,2047
   4cd68:	813f331e 	bne	r16,r4,4ca38 <__alt_data_end+0xfffd6ed8>
   4cd6c:	003ec206 	br	4c878 <__alt_data_end+0xfffd6d18>
   4cd70:	0027883a 	mov	r19,zero
   4cd74:	003fb006 	br	4cc38 <__alt_data_end+0xfffd70d8>
   4cd78:	0005883a 	mov	r2,zero
   4cd7c:	003fbb06 	br	4cc6c <__alt_data_end+0xfffd710c>
   4cd80:	2c44b03a 	or	r2,r5,r17
   4cd84:	80008b1e 	bne	r16,zero,4cfb4 <__subdf3+0x7c8>
   4cd88:	1000b526 	beq	r2,zero,4d060 <__subdf3+0x874>
   4cd8c:	1984b03a 	or	r2,r3,r6
   4cd90:	103eb926 	beq	r2,zero,4c878 <__alt_data_end+0xfffd6d18>
   4cd94:	3449883a 	add	r4,r6,r17
   4cd98:	2463803a 	cmpltu	r17,r4,r17
   4cd9c:	194b883a 	add	r5,r3,r5
   4cda0:	2c4b883a 	add	r5,r5,r17
   4cda4:	2880202c 	andhi	r2,r5,128
   4cda8:	2023883a 	mov	r17,r4
   4cdac:	103f5c26 	beq	r2,zero,4cb20 <__alt_data_end+0xfffd6fc0>
   4cdb0:	00bfe034 	movhi	r2,65408
   4cdb4:	10bfffc4 	addi	r2,r2,-1
   4cdb8:	4821883a 	mov	r16,r9
   4cdbc:	288a703a 	and	r5,r5,r2
   4cdc0:	003ead06 	br	4c878 <__alt_data_end+0xfffd6d18>
   4cdc4:	2c44b03a 	or	r2,r5,r17
   4cdc8:	8000291e 	bne	r16,zero,4ce70 <__subdf3+0x684>
   4cdcc:	10004f1e 	bne	r2,zero,4cf0c <__subdf3+0x720>
   4cdd0:	1984b03a 	or	r2,r3,r6
   4cdd4:	10000426 	beq	r2,zero,4cde8 <__subdf3+0x5fc>
   4cdd8:	180b883a 	mov	r5,r3
   4cddc:	3023883a 	mov	r17,r6
   4cde0:	3825883a 	mov	r18,r7
   4cde4:	003ea406 	br	4c878 <__alt_data_end+0xfffd6d18>
   4cde8:	0011883a 	mov	r8,zero
   4cdec:	000b883a 	mov	r5,zero
   4cdf0:	0023883a 	mov	r17,zero
   4cdf4:	003f0006 	br	4c9f8 <__alt_data_end+0xfffd6e98>
   4cdf8:	11fff804 	addi	r7,r2,-32
   4cdfc:	19c8d83a 	srl	r4,r3,r7
   4ce00:	01c00804 	movi	r7,32
   4ce04:	11c07e26 	beq	r2,r7,4d000 <__subdf3+0x814>
   4ce08:	01c01004 	movi	r7,64
   4ce0c:	3885c83a 	sub	r2,r7,r2
   4ce10:	1884983a 	sll	r2,r3,r2
   4ce14:	118cb03a 	or	r6,r2,r6
   4ce18:	300ec03a 	cmpne	r7,r6,zero
   4ce1c:	390eb03a 	or	r7,r7,r4
   4ce20:	0005883a 	mov	r2,zero
   4ce24:	003f0906 	br	4ca4c <__alt_data_end+0xfffd6eec>
   4ce28:	0101ffc4 	movi	r4,2047
   4ce2c:	513f991e 	bne	r10,r4,4cc94 <__alt_data_end+0xfffd7134>
   4ce30:	180b883a 	mov	r5,r3
   4ce34:	3023883a 	mov	r17,r6
   4ce38:	5021883a 	mov	r16,r10
   4ce3c:	3825883a 	mov	r18,r7
   4ce40:	003e8d06 	br	4c878 <__alt_data_end+0xfffd6d18>
   4ce44:	80001a1e 	bne	r16,zero,4ceb0 <__subdf3+0x6c4>
   4ce48:	2c48b03a 	or	r4,r5,r17
   4ce4c:	20005526 	beq	r4,zero,4cfa4 <__subdf3+0x7b8>
   4ce50:	0084303a 	nor	r2,zero,r2
   4ce54:	1000511e 	bne	r2,zero,4cf9c <__subdf3+0x7b0>
   4ce58:	89a3883a 	add	r17,r17,r6
   4ce5c:	194b883a 	add	r5,r3,r5
   4ce60:	898d803a 	cmpltu	r6,r17,r6
   4ce64:	298b883a 	add	r5,r5,r6
   4ce68:	5021883a 	mov	r16,r10
   4ce6c:	003efc06 	br	4ca60 <__alt_data_end+0xfffd6f00>
   4ce70:	1000341e 	bne	r2,zero,4cf44 <__subdf3+0x758>
   4ce74:	1984b03a 	or	r2,r3,r6
   4ce78:	10006f26 	beq	r2,zero,4d038 <__subdf3+0x84c>
   4ce7c:	180b883a 	mov	r5,r3
   4ce80:	3023883a 	mov	r17,r6
   4ce84:	3825883a 	mov	r18,r7
   4ce88:	0401ffc4 	movi	r16,2047
   4ce8c:	003e7a06 	br	4c878 <__alt_data_end+0xfffd6d18>
   4ce90:	2c62b03a 	or	r17,r5,r17
   4ce94:	8822c03a 	cmpne	r17,r17,zero
   4ce98:	0005883a 	mov	r2,zero
   4ce9c:	003f8a06 	br	4ccc8 <__alt_data_end+0xfffd7168>
   4cea0:	3821883a 	mov	r16,r7
   4cea4:	000b883a 	mov	r5,zero
   4cea8:	0023883a 	mov	r17,zero
   4ceac:	003ed206 	br	4c9f8 <__alt_data_end+0xfffd6e98>
   4ceb0:	0101ffc4 	movi	r4,2047
   4ceb4:	51003b26 	beq	r10,r4,4cfa4 <__subdf3+0x7b8>
   4ceb8:	0085c83a 	sub	r2,zero,r2
   4cebc:	29402034 	orhi	r5,r5,128
   4cec0:	01000e04 	movi	r4,56
   4cec4:	20806216 	blt	r4,r2,4d050 <__subdf3+0x864>
   4cec8:	010007c4 	movi	r4,31
   4cecc:	20806b16 	blt	r4,r2,4d07c <__subdf3+0x890>
   4ced0:	01000804 	movi	r4,32
   4ced4:	2089c83a 	sub	r4,r4,r2
   4ced8:	2912983a 	sll	r9,r5,r4
   4cedc:	888ed83a 	srl	r7,r17,r2
   4cee0:	8908983a 	sll	r4,r17,r4
   4cee4:	2884d83a 	srl	r2,r5,r2
   4cee8:	49e2b03a 	or	r17,r9,r7
   4ceec:	2008c03a 	cmpne	r4,r4,zero
   4cef0:	8922b03a 	or	r17,r17,r4
   4cef4:	89a3883a 	add	r17,r17,r6
   4cef8:	10c5883a 	add	r2,r2,r3
   4cefc:	898d803a 	cmpltu	r6,r17,r6
   4cf00:	118b883a 	add	r5,r2,r6
   4cf04:	5021883a 	mov	r16,r10
   4cf08:	003ed506 	br	4ca60 <__alt_data_end+0xfffd6f00>
   4cf0c:	1984b03a 	or	r2,r3,r6
   4cf10:	103e5926 	beq	r2,zero,4c878 <__alt_data_end+0xfffd6d18>
   4cf14:	8989c83a 	sub	r4,r17,r6
   4cf18:	8911803a 	cmpltu	r8,r17,r4
   4cf1c:	28c5c83a 	sub	r2,r5,r3
   4cf20:	1205c83a 	sub	r2,r2,r8
   4cf24:	1200202c 	andhi	r8,r2,128
   4cf28:	403ef926 	beq	r8,zero,4cb10 <__alt_data_end+0xfffd6fb0>
   4cf2c:	3463c83a 	sub	r17,r6,r17
   4cf30:	194bc83a 	sub	r5,r3,r5
   4cf34:	344d803a 	cmpltu	r6,r6,r17
   4cf38:	298bc83a 	sub	r5,r5,r6
   4cf3c:	3825883a 	mov	r18,r7
   4cf40:	003e4d06 	br	4c878 <__alt_data_end+0xfffd6d18>
   4cf44:	1984b03a 	or	r2,r3,r6
   4cf48:	10002b26 	beq	r2,zero,4cff8 <__subdf3+0x80c>
   4cf4c:	2808d0fa 	srli	r4,r5,3
   4cf50:	8822d0fa 	srli	r17,r17,3
   4cf54:	280a977a 	slli	r5,r5,29
   4cf58:	2080022c 	andhi	r2,r4,8
   4cf5c:	2c62b03a 	or	r17,r5,r17
   4cf60:	10000826 	beq	r2,zero,4cf84 <__subdf3+0x798>
   4cf64:	1810d0fa 	srli	r8,r3,3
   4cf68:	4080022c 	andhi	r2,r8,8
   4cf6c:	1000051e 	bne	r2,zero,4cf84 <__subdf3+0x798>
   4cf70:	300cd0fa 	srli	r6,r6,3
   4cf74:	1804977a 	slli	r2,r3,29
   4cf78:	4009883a 	mov	r4,r8
   4cf7c:	3825883a 	mov	r18,r7
   4cf80:	11a2b03a 	or	r17,r2,r6
   4cf84:	880ad77a 	srli	r5,r17,29
   4cf88:	200890fa 	slli	r4,r4,3
   4cf8c:	882290fa 	slli	r17,r17,3
   4cf90:	0401ffc4 	movi	r16,2047
   4cf94:	290ab03a 	or	r5,r5,r4
   4cf98:	003e3706 	br	4c878 <__alt_data_end+0xfffd6d18>
   4cf9c:	0101ffc4 	movi	r4,2047
   4cfa0:	513fc71e 	bne	r10,r4,4cec0 <__alt_data_end+0xfffd7360>
   4cfa4:	180b883a 	mov	r5,r3
   4cfa8:	3023883a 	mov	r17,r6
   4cfac:	5021883a 	mov	r16,r10
   4cfb0:	003e3106 	br	4c878 <__alt_data_end+0xfffd6d18>
   4cfb4:	10002d26 	beq	r2,zero,4d06c <__subdf3+0x880>
   4cfb8:	1984b03a 	or	r2,r3,r6
   4cfbc:	10000e26 	beq	r2,zero,4cff8 <__subdf3+0x80c>
   4cfc0:	2808d0fa 	srli	r4,r5,3
   4cfc4:	8822d0fa 	srli	r17,r17,3
   4cfc8:	280a977a 	slli	r5,r5,29
   4cfcc:	2080022c 	andhi	r2,r4,8
   4cfd0:	2c62b03a 	or	r17,r5,r17
   4cfd4:	103feb26 	beq	r2,zero,4cf84 <__alt_data_end+0xfffd7424>
   4cfd8:	180ed0fa 	srli	r7,r3,3
   4cfdc:	3880022c 	andhi	r2,r7,8
   4cfe0:	103fe81e 	bne	r2,zero,4cf84 <__alt_data_end+0xfffd7424>
   4cfe4:	300cd0fa 	srli	r6,r6,3
   4cfe8:	1804977a 	slli	r2,r3,29
   4cfec:	3809883a 	mov	r4,r7
   4cff0:	11a2b03a 	or	r17,r2,r6
   4cff4:	003fe306 	br	4cf84 <__alt_data_end+0xfffd7424>
   4cff8:	0401ffc4 	movi	r16,2047
   4cffc:	003e1e06 	br	4c878 <__alt_data_end+0xfffd6d18>
   4d000:	0005883a 	mov	r2,zero
   4d004:	003f8306 	br	4ce14 <__alt_data_end+0xfffd72b4>
   4d008:	113ff804 	addi	r4,r2,-32
   4d00c:	02000804 	movi	r8,32
   4d010:	2908d83a 	srl	r4,r5,r4
   4d014:	12002526 	beq	r2,r8,4d0ac <__subdf3+0x8c0>
   4d018:	02001004 	movi	r8,64
   4d01c:	4085c83a 	sub	r2,r8,r2
   4d020:	288a983a 	sll	r5,r5,r2
   4d024:	2c62b03a 	or	r17,r5,r17
   4d028:	8822c03a 	cmpne	r17,r17,zero
   4d02c:	8922b03a 	or	r17,r17,r4
   4d030:	0005883a 	mov	r2,zero
   4d034:	003f2406 	br	4ccc8 <__alt_data_end+0xfffd7168>
   4d038:	01402034 	movhi	r5,128
   4d03c:	0011883a 	mov	r8,zero
   4d040:	297fffc4 	addi	r5,r5,-1
   4d044:	047ffe04 	movi	r17,-8
   4d048:	0401ffc4 	movi	r16,2047
   4d04c:	003e6a06 	br	4c9f8 <__alt_data_end+0xfffd6e98>
   4d050:	2c62b03a 	or	r17,r5,r17
   4d054:	8822c03a 	cmpne	r17,r17,zero
   4d058:	0005883a 	mov	r2,zero
   4d05c:	003fa506 	br	4cef4 <__alt_data_end+0xfffd7394>
   4d060:	180b883a 	mov	r5,r3
   4d064:	3023883a 	mov	r17,r6
   4d068:	003e0306 	br	4c878 <__alt_data_end+0xfffd6d18>
   4d06c:	180b883a 	mov	r5,r3
   4d070:	3023883a 	mov	r17,r6
   4d074:	0401ffc4 	movi	r16,2047
   4d078:	003dff06 	br	4c878 <__alt_data_end+0xfffd6d18>
   4d07c:	113ff804 	addi	r4,r2,-32
   4d080:	01c00804 	movi	r7,32
   4d084:	2908d83a 	srl	r4,r5,r4
   4d088:	11c00a26 	beq	r2,r7,4d0b4 <__subdf3+0x8c8>
   4d08c:	01c01004 	movi	r7,64
   4d090:	3885c83a 	sub	r2,r7,r2
   4d094:	288a983a 	sll	r5,r5,r2
   4d098:	2c62b03a 	or	r17,r5,r17
   4d09c:	8822c03a 	cmpne	r17,r17,zero
   4d0a0:	8922b03a 	or	r17,r17,r4
   4d0a4:	0005883a 	mov	r2,zero
   4d0a8:	003f9206 	br	4cef4 <__alt_data_end+0xfffd7394>
   4d0ac:	000b883a 	mov	r5,zero
   4d0b0:	003fdc06 	br	4d024 <__alt_data_end+0xfffd74c4>
   4d0b4:	000b883a 	mov	r5,zero
   4d0b8:	003ff706 	br	4d098 <__alt_data_end+0xfffd7538>

0004d0bc <__fixdfsi>:
   4d0bc:	2806d53a 	srli	r3,r5,20
   4d0c0:	00800434 	movhi	r2,16
   4d0c4:	10bfffc4 	addi	r2,r2,-1
   4d0c8:	18c1ffcc 	andi	r3,r3,2047
   4d0cc:	0180ff84 	movi	r6,1022
   4d0d0:	2884703a 	and	r2,r5,r2
   4d0d4:	280ad7fa 	srli	r5,r5,31
   4d0d8:	30c0130e 	bge	r6,r3,4d128 <__fixdfsi+0x6c>
   4d0dc:	01810744 	movi	r6,1053
   4d0e0:	30c00d16 	blt	r6,r3,4d118 <__fixdfsi+0x5c>
   4d0e4:	01810cc4 	movi	r6,1075
   4d0e8:	30cdc83a 	sub	r6,r6,r3
   4d0ec:	01c007c4 	movi	r7,31
   4d0f0:	10800434 	orhi	r2,r2,16
   4d0f4:	39800e0e 	bge	r7,r6,4d130 <__fixdfsi+0x74>
   4d0f8:	010104c4 	movi	r4,1043
   4d0fc:	20c7c83a 	sub	r3,r4,r3
   4d100:	10c6d83a 	srl	r3,r2,r3
   4d104:	29403fcc 	andi	r5,r5,255
   4d108:	0145c83a 	sub	r2,zero,r5
   4d10c:	1884f03a 	xor	r2,r3,r2
   4d110:	1145883a 	add	r2,r2,r5
   4d114:	f800283a 	ret
   4d118:	00a00034 	movhi	r2,32768
   4d11c:	10bfffc4 	addi	r2,r2,-1
   4d120:	2885883a 	add	r2,r5,r2
   4d124:	f800283a 	ret
   4d128:	0005883a 	mov	r2,zero
   4d12c:	f800283a 	ret
   4d130:	18fefb44 	addi	r3,r3,-1043
   4d134:	2188d83a 	srl	r4,r4,r6
   4d138:	10c6983a 	sll	r3,r2,r3
   4d13c:	20c6b03a 	or	r3,r4,r3
   4d140:	003ff006 	br	4d104 <__alt_data_end+0xfffd75a4>

0004d144 <__floatsidf>:
   4d144:	defffd04 	addi	sp,sp,-12
   4d148:	dc400115 	stw	r17,4(sp)
   4d14c:	dfc00215 	stw	ra,8(sp)
   4d150:	dc000015 	stw	r16,0(sp)
   4d154:	2023883a 	mov	r17,r4
   4d158:	20001426 	beq	r4,zero,4d1ac <__floatsidf+0x68>
   4d15c:	2020d7fa 	srli	r16,r4,31
   4d160:	80000126 	beq	r16,zero,4d168 <__floatsidf+0x24>
   4d164:	0123c83a 	sub	r17,zero,r4
   4d168:	8809883a 	mov	r4,r17
   4d16c:	004d2b80 	call	4d2b8 <__clzsi2>
   4d170:	01410784 	movi	r5,1054
   4d174:	00c00284 	movi	r3,10
   4d178:	288bc83a 	sub	r5,r5,r2
   4d17c:	18801c16 	blt	r3,r2,4d1f0 <__floatsidf+0xac>
   4d180:	00c002c4 	movi	r3,11
   4d184:	1887c83a 	sub	r3,r3,r2
   4d188:	88c8d83a 	srl	r4,r17,r3
   4d18c:	00c00434 	movhi	r3,16
   4d190:	18ffffc4 	addi	r3,r3,-1
   4d194:	10800544 	addi	r2,r2,21
   4d198:	20c8703a 	and	r4,r4,r3
   4d19c:	8884983a 	sll	r2,r17,r2
   4d1a0:	28c1ffcc 	andi	r3,r5,2047
   4d1a4:	800d883a 	mov	r6,r16
   4d1a8:	00000406 	br	4d1bc <__floatsidf+0x78>
   4d1ac:	000d883a 	mov	r6,zero
   4d1b0:	0007883a 	mov	r3,zero
   4d1b4:	0009883a 	mov	r4,zero
   4d1b8:	0005883a 	mov	r2,zero
   4d1bc:	180a953a 	slli	r5,r3,20
   4d1c0:	31803fcc 	andi	r6,r6,255
   4d1c4:	00c00434 	movhi	r3,16
   4d1c8:	300c97fa 	slli	r6,r6,31
   4d1cc:	18ffffc4 	addi	r3,r3,-1
   4d1d0:	20c6703a 	and	r3,r4,r3
   4d1d4:	1946b03a 	or	r3,r3,r5
   4d1d8:	1986b03a 	or	r3,r3,r6
   4d1dc:	dfc00217 	ldw	ra,8(sp)
   4d1e0:	dc400117 	ldw	r17,4(sp)
   4d1e4:	dc000017 	ldw	r16,0(sp)
   4d1e8:	dec00304 	addi	sp,sp,12
   4d1ec:	f800283a 	ret
   4d1f0:	10fffd44 	addi	r3,r2,-11
   4d1f4:	88c8983a 	sll	r4,r17,r3
   4d1f8:	00800434 	movhi	r2,16
   4d1fc:	10bfffc4 	addi	r2,r2,-1
   4d200:	2088703a 	and	r4,r4,r2
   4d204:	28c1ffcc 	andi	r3,r5,2047
   4d208:	800d883a 	mov	r6,r16
   4d20c:	0005883a 	mov	r2,zero
   4d210:	003fea06 	br	4d1bc <__alt_data_end+0xfffd765c>

0004d214 <__floatunsidf>:
   4d214:	defffe04 	addi	sp,sp,-8
   4d218:	dc000015 	stw	r16,0(sp)
   4d21c:	dfc00115 	stw	ra,4(sp)
   4d220:	2021883a 	mov	r16,r4
   4d224:	20001026 	beq	r4,zero,4d268 <__floatunsidf+0x54>
   4d228:	004d2b80 	call	4d2b8 <__clzsi2>
   4d22c:	01410784 	movi	r5,1054
   4d230:	100d883a 	mov	r6,r2
   4d234:	288bc83a 	sub	r5,r5,r2
   4d238:	00800284 	movi	r2,10
   4d23c:	11801616 	blt	r2,r6,4d298 <__floatunsidf+0x84>
   4d240:	008002c4 	movi	r2,11
   4d244:	1185c83a 	sub	r2,r2,r6
   4d248:	8084d83a 	srl	r2,r16,r2
   4d24c:	00c00434 	movhi	r3,16
   4d250:	31c00544 	addi	r7,r6,21
   4d254:	18ffffc4 	addi	r3,r3,-1
   4d258:	81e0983a 	sll	r16,r16,r7
   4d25c:	10cc703a 	and	r6,r2,r3
   4d260:	2941ffcc 	andi	r5,r5,2047
   4d264:	00000206 	br	4d270 <__floatunsidf+0x5c>
   4d268:	000b883a 	mov	r5,zero
   4d26c:	000d883a 	mov	r6,zero
   4d270:	280a953a 	slli	r5,r5,20
   4d274:	00c00434 	movhi	r3,16
   4d278:	18ffffc4 	addi	r3,r3,-1
   4d27c:	30c6703a 	and	r3,r6,r3
   4d280:	8005883a 	mov	r2,r16
   4d284:	1946b03a 	or	r3,r3,r5
   4d288:	dfc00117 	ldw	ra,4(sp)
   4d28c:	dc000017 	ldw	r16,0(sp)
   4d290:	dec00204 	addi	sp,sp,8
   4d294:	f800283a 	ret
   4d298:	31bffd44 	addi	r6,r6,-11
   4d29c:	818c983a 	sll	r6,r16,r6
   4d2a0:	00800434 	movhi	r2,16
   4d2a4:	10bfffc4 	addi	r2,r2,-1
   4d2a8:	2941ffcc 	andi	r5,r5,2047
   4d2ac:	0021883a 	mov	r16,zero
   4d2b0:	308c703a 	and	r6,r6,r2
   4d2b4:	003fee06 	br	4d270 <__alt_data_end+0xfffd7710>

0004d2b8 <__clzsi2>:
   4d2b8:	00bfffd4 	movui	r2,65535
   4d2bc:	11000b36 	bltu	r2,r4,4d2ec <__clzsi2+0x34>
   4d2c0:	00803fc4 	movi	r2,255
   4d2c4:	1100122e 	bgeu	r2,r4,4d310 <__clzsi2+0x58>
   4d2c8:	00c00204 	movi	r3,8
   4d2cc:	01400604 	movi	r5,24
   4d2d0:	20c8d83a 	srl	r4,r4,r3
   4d2d4:	00800174 	movhi	r2,5
   4d2d8:	10820b04 	addi	r2,r2,2092
   4d2dc:	1109883a 	add	r4,r2,r4
   4d2e0:	20800003 	ldbu	r2,0(r4)
   4d2e4:	2885c83a 	sub	r2,r5,r2
   4d2e8:	f800283a 	ret
   4d2ec:	00804034 	movhi	r2,256
   4d2f0:	10bfffc4 	addi	r2,r2,-1
   4d2f4:	11000336 	bltu	r2,r4,4d304 <__clzsi2+0x4c>
   4d2f8:	00c00404 	movi	r3,16
   4d2fc:	180b883a 	mov	r5,r3
   4d300:	003ff306 	br	4d2d0 <__alt_data_end+0xfffd7770>
   4d304:	00c00604 	movi	r3,24
   4d308:	01400204 	movi	r5,8
   4d30c:	003ff006 	br	4d2d0 <__alt_data_end+0xfffd7770>
   4d310:	0007883a 	mov	r3,zero
   4d314:	01400804 	movi	r5,32
   4d318:	003fed06 	br	4d2d0 <__alt_data_end+0xfffd7770>

0004d31c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d31c:	defffe04 	addi	sp,sp,-8
   4d320:	dfc00115 	stw	ra,4(sp)
   4d324:	df000015 	stw	fp,0(sp)
   4d328:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d32c:	00800174 	movhi	r2,5
   4d330:	10894004 	addi	r2,r2,9472
   4d334:	10800017 	ldw	r2,0(r2)
   4d338:	10000526 	beq	r2,zero,4d350 <alt_get_errno+0x34>
   4d33c:	00800174 	movhi	r2,5
   4d340:	10894004 	addi	r2,r2,9472
   4d344:	10800017 	ldw	r2,0(r2)
   4d348:	103ee83a 	callr	r2
   4d34c:	00000206 	br	4d358 <alt_get_errno+0x3c>
   4d350:	00800174 	movhi	r2,5
   4d354:	10903704 	addi	r2,r2,16604
}
   4d358:	e037883a 	mov	sp,fp
   4d35c:	dfc00117 	ldw	ra,4(sp)
   4d360:	df000017 	ldw	fp,0(sp)
   4d364:	dec00204 	addi	sp,sp,8
   4d368:	f800283a 	ret

0004d36c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4d36c:	defffb04 	addi	sp,sp,-20
   4d370:	dfc00415 	stw	ra,16(sp)
   4d374:	df000315 	stw	fp,12(sp)
   4d378:	df000304 	addi	fp,sp,12
   4d37c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4d380:	e0bfff17 	ldw	r2,-4(fp)
   4d384:	10000816 	blt	r2,zero,4d3a8 <close+0x3c>
   4d388:	e13fff17 	ldw	r4,-4(fp)
   4d38c:	01400304 	movi	r5,12
   4d390:	004095c0 	call	4095c <__mulsi3>
   4d394:	1007883a 	mov	r3,r2
   4d398:	00800174 	movhi	r2,5
   4d39c:	10848c04 	addi	r2,r2,4656
   4d3a0:	1885883a 	add	r2,r3,r2
   4d3a4:	00000106 	br	4d3ac <close+0x40>
   4d3a8:	0005883a 	mov	r2,zero
   4d3ac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4d3b0:	e0bffd17 	ldw	r2,-12(fp)
   4d3b4:	10001926 	beq	r2,zero,4d41c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4d3b8:	e0bffd17 	ldw	r2,-12(fp)
   4d3bc:	10800017 	ldw	r2,0(r2)
   4d3c0:	10800417 	ldw	r2,16(r2)
   4d3c4:	10000626 	beq	r2,zero,4d3e0 <close+0x74>
   4d3c8:	e0bffd17 	ldw	r2,-12(fp)
   4d3cc:	10800017 	ldw	r2,0(r2)
   4d3d0:	10800417 	ldw	r2,16(r2)
   4d3d4:	e13ffd17 	ldw	r4,-12(fp)
   4d3d8:	103ee83a 	callr	r2
   4d3dc:	00000106 	br	4d3e4 <close+0x78>
   4d3e0:	0005883a 	mov	r2,zero
   4d3e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4d3e8:	e13fff17 	ldw	r4,-4(fp)
   4d3ec:	004da900 	call	4da90 <alt_release_fd>
    if (rval < 0)
   4d3f0:	e0bffe17 	ldw	r2,-8(fp)
   4d3f4:	1000070e 	bge	r2,zero,4d414 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   4d3f8:	004d31c0 	call	4d31c <alt_get_errno>
   4d3fc:	1007883a 	mov	r3,r2
   4d400:	e0bffe17 	ldw	r2,-8(fp)
   4d404:	0085c83a 	sub	r2,zero,r2
   4d408:	18800015 	stw	r2,0(r3)
      return -1;
   4d40c:	00bfffc4 	movi	r2,-1
   4d410:	00000706 	br	4d430 <close+0xc4>
    }
    return 0;
   4d414:	0005883a 	mov	r2,zero
   4d418:	00000506 	br	4d430 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d41c:	004d31c0 	call	4d31c <alt_get_errno>
   4d420:	1007883a 	mov	r3,r2
   4d424:	00801444 	movi	r2,81
   4d428:	18800015 	stw	r2,0(r3)
    return -1;
   4d42c:	00bfffc4 	movi	r2,-1
  }
}
   4d430:	e037883a 	mov	sp,fp
   4d434:	dfc00117 	ldw	ra,4(sp)
   4d438:	df000017 	ldw	fp,0(sp)
   4d43c:	dec00204 	addi	sp,sp,8
   4d440:	f800283a 	ret

0004d444 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4d444:	defffc04 	addi	sp,sp,-16
   4d448:	df000315 	stw	fp,12(sp)
   4d44c:	df000304 	addi	fp,sp,12
   4d450:	e13ffd15 	stw	r4,-12(fp)
   4d454:	e17ffe15 	stw	r5,-8(fp)
   4d458:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4d45c:	e0bfff17 	ldw	r2,-4(fp)
}
   4d460:	e037883a 	mov	sp,fp
   4d464:	df000017 	ldw	fp,0(sp)
   4d468:	dec00104 	addi	sp,sp,4
   4d46c:	f800283a 	ret

0004d470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d470:	defffe04 	addi	sp,sp,-8
   4d474:	dfc00115 	stw	ra,4(sp)
   4d478:	df000015 	stw	fp,0(sp)
   4d47c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d480:	00800174 	movhi	r2,5
   4d484:	10894004 	addi	r2,r2,9472
   4d488:	10800017 	ldw	r2,0(r2)
   4d48c:	10000526 	beq	r2,zero,4d4a4 <alt_get_errno+0x34>
   4d490:	00800174 	movhi	r2,5
   4d494:	10894004 	addi	r2,r2,9472
   4d498:	10800017 	ldw	r2,0(r2)
   4d49c:	103ee83a 	callr	r2
   4d4a0:	00000206 	br	4d4ac <alt_get_errno+0x3c>
   4d4a4:	00800174 	movhi	r2,5
   4d4a8:	10903704 	addi	r2,r2,16604
}
   4d4ac:	e037883a 	mov	sp,fp
   4d4b0:	dfc00117 	ldw	ra,4(sp)
   4d4b4:	df000017 	ldw	fp,0(sp)
   4d4b8:	dec00204 	addi	sp,sp,8
   4d4bc:	f800283a 	ret

0004d4c0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4d4c0:	defffb04 	addi	sp,sp,-20
   4d4c4:	dfc00415 	stw	ra,16(sp)
   4d4c8:	df000315 	stw	fp,12(sp)
   4d4cc:	df000304 	addi	fp,sp,12
   4d4d0:	e13ffe15 	stw	r4,-8(fp)
   4d4d4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d4d8:	e0bffe17 	ldw	r2,-8(fp)
   4d4dc:	10000816 	blt	r2,zero,4d500 <fstat+0x40>
   4d4e0:	e13ffe17 	ldw	r4,-8(fp)
   4d4e4:	01400304 	movi	r5,12
   4d4e8:	004095c0 	call	4095c <__mulsi3>
   4d4ec:	1007883a 	mov	r3,r2
   4d4f0:	00800174 	movhi	r2,5
   4d4f4:	10848c04 	addi	r2,r2,4656
   4d4f8:	1885883a 	add	r2,r3,r2
   4d4fc:	00000106 	br	4d504 <fstat+0x44>
   4d500:	0005883a 	mov	r2,zero
   4d504:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4d508:	e0bffd17 	ldw	r2,-12(fp)
   4d50c:	10001026 	beq	r2,zero,4d550 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4d510:	e0bffd17 	ldw	r2,-12(fp)
   4d514:	10800017 	ldw	r2,0(r2)
   4d518:	10800817 	ldw	r2,32(r2)
   4d51c:	10000726 	beq	r2,zero,4d53c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   4d520:	e0bffd17 	ldw	r2,-12(fp)
   4d524:	10800017 	ldw	r2,0(r2)
   4d528:	10800817 	ldw	r2,32(r2)
   4d52c:	e13ffd17 	ldw	r4,-12(fp)
   4d530:	e17fff17 	ldw	r5,-4(fp)
   4d534:	103ee83a 	callr	r2
   4d538:	00000a06 	br	4d564 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4d53c:	e0bfff17 	ldw	r2,-4(fp)
   4d540:	00c80004 	movi	r3,8192
   4d544:	10c00115 	stw	r3,4(r2)
      return 0;
   4d548:	0005883a 	mov	r2,zero
   4d54c:	00000506 	br	4d564 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d550:	004d4700 	call	4d470 <alt_get_errno>
   4d554:	1007883a 	mov	r3,r2
   4d558:	00801444 	movi	r2,81
   4d55c:	18800015 	stw	r2,0(r3)
    return -1;
   4d560:	00bfffc4 	movi	r2,-1
  }
}
   4d564:	e037883a 	mov	sp,fp
   4d568:	dfc00117 	ldw	ra,4(sp)
   4d56c:	df000017 	ldw	fp,0(sp)
   4d570:	dec00204 	addi	sp,sp,8
   4d574:	f800283a 	ret

0004d578 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d578:	defffe04 	addi	sp,sp,-8
   4d57c:	dfc00115 	stw	ra,4(sp)
   4d580:	df000015 	stw	fp,0(sp)
   4d584:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d588:	00800174 	movhi	r2,5
   4d58c:	10894004 	addi	r2,r2,9472
   4d590:	10800017 	ldw	r2,0(r2)
   4d594:	10000526 	beq	r2,zero,4d5ac <alt_get_errno+0x34>
   4d598:	00800174 	movhi	r2,5
   4d59c:	10894004 	addi	r2,r2,9472
   4d5a0:	10800017 	ldw	r2,0(r2)
   4d5a4:	103ee83a 	callr	r2
   4d5a8:	00000206 	br	4d5b4 <alt_get_errno+0x3c>
   4d5ac:	00800174 	movhi	r2,5
   4d5b0:	10903704 	addi	r2,r2,16604
}
   4d5b4:	e037883a 	mov	sp,fp
   4d5b8:	dfc00117 	ldw	ra,4(sp)
   4d5bc:	df000017 	ldw	fp,0(sp)
   4d5c0:	dec00204 	addi	sp,sp,8
   4d5c4:	f800283a 	ret

0004d5c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4d5c8:	deffed04 	addi	sp,sp,-76
   4d5cc:	dfc01215 	stw	ra,72(sp)
   4d5d0:	df001115 	stw	fp,68(sp)
   4d5d4:	df001104 	addi	fp,sp,68
   4d5d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d5dc:	e0bfff17 	ldw	r2,-4(fp)
   4d5e0:	10000816 	blt	r2,zero,4d604 <isatty+0x3c>
   4d5e4:	e13fff17 	ldw	r4,-4(fp)
   4d5e8:	01400304 	movi	r5,12
   4d5ec:	004095c0 	call	4095c <__mulsi3>
   4d5f0:	1007883a 	mov	r3,r2
   4d5f4:	00800174 	movhi	r2,5
   4d5f8:	10848c04 	addi	r2,r2,4656
   4d5fc:	1885883a 	add	r2,r3,r2
   4d600:	00000106 	br	4d608 <isatty+0x40>
   4d604:	0005883a 	mov	r2,zero
   4d608:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4d60c:	e0bfef17 	ldw	r2,-68(fp)
   4d610:	10000e26 	beq	r2,zero,4d64c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4d614:	e0bfef17 	ldw	r2,-68(fp)
   4d618:	10800017 	ldw	r2,0(r2)
   4d61c:	10800817 	ldw	r2,32(r2)
   4d620:	1000021e 	bne	r2,zero,4d62c <isatty+0x64>
    {
      return 1;
   4d624:	00800044 	movi	r2,1
   4d628:	00000d06 	br	4d660 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4d62c:	e0bff004 	addi	r2,fp,-64
   4d630:	e13fff17 	ldw	r4,-4(fp)
   4d634:	100b883a 	mov	r5,r2
   4d638:	004d4c00 	call	4d4c0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4d63c:	e0bff117 	ldw	r2,-60(fp)
   4d640:	10880020 	cmpeqi	r2,r2,8192
   4d644:	10803fcc 	andi	r2,r2,255
   4d648:	00000506 	br	4d660 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d64c:	004d5780 	call	4d578 <alt_get_errno>
   4d650:	1007883a 	mov	r3,r2
   4d654:	00801444 	movi	r2,81
   4d658:	18800015 	stw	r2,0(r3)
    return 0;
   4d65c:	0005883a 	mov	r2,zero
  }
}
   4d660:	e037883a 	mov	sp,fp
   4d664:	dfc00117 	ldw	ra,4(sp)
   4d668:	df000017 	ldw	fp,0(sp)
   4d66c:	dec00204 	addi	sp,sp,8
   4d670:	f800283a 	ret

0004d674 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4d674:	defffc04 	addi	sp,sp,-16
   4d678:	df000315 	stw	fp,12(sp)
   4d67c:	df000304 	addi	fp,sp,12
   4d680:	e13ffd15 	stw	r4,-12(fp)
   4d684:	e17ffe15 	stw	r5,-8(fp)
   4d688:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4d68c:	e0fffe17 	ldw	r3,-8(fp)
   4d690:	e0bffd17 	ldw	r2,-12(fp)
   4d694:	18800c26 	beq	r3,r2,4d6c8 <alt_load_section+0x54>
  {
    while( to != end )
   4d698:	00000806 	br	4d6bc <alt_load_section+0x48>
    {
      *to++ = *from++;
   4d69c:	e0bffe17 	ldw	r2,-8(fp)
   4d6a0:	10c00104 	addi	r3,r2,4
   4d6a4:	e0fffe15 	stw	r3,-8(fp)
   4d6a8:	e0fffd17 	ldw	r3,-12(fp)
   4d6ac:	19000104 	addi	r4,r3,4
   4d6b0:	e13ffd15 	stw	r4,-12(fp)
   4d6b4:	18c00017 	ldw	r3,0(r3)
   4d6b8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4d6bc:	e0fffe17 	ldw	r3,-8(fp)
   4d6c0:	e0bfff17 	ldw	r2,-4(fp)
   4d6c4:	18bff51e 	bne	r3,r2,4d69c <__alt_data_end+0xfffd7b3c>
    {
      *to++ = *from++;
    }
  }
}
   4d6c8:	e037883a 	mov	sp,fp
   4d6cc:	df000017 	ldw	fp,0(sp)
   4d6d0:	dec00104 	addi	sp,sp,4
   4d6d4:	f800283a 	ret

0004d6d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4d6d8:	defffe04 	addi	sp,sp,-8
   4d6dc:	dfc00115 	stw	ra,4(sp)
   4d6e0:	df000015 	stw	fp,0(sp)
   4d6e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4d6e8:	01000174 	movhi	r4,5
   4d6ec:	21094504 	addi	r4,r4,9492
   4d6f0:	01400174 	movhi	r5,5
   4d6f4:	29425904 	addi	r5,r5,2404
   4d6f8:	01800174 	movhi	r6,5
   4d6fc:	31894504 	addi	r6,r6,9492
   4d700:	004d6740 	call	4d674 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4d704:	01000134 	movhi	r4,4
   4d708:	21000804 	addi	r4,r4,32
   4d70c:	01400134 	movhi	r5,4
   4d710:	29400804 	addi	r5,r5,32
   4d714:	01800134 	movhi	r6,4
   4d718:	31808b04 	addi	r6,r6,556
   4d71c:	004d6740 	call	4d674 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4d720:	01000174 	movhi	r4,5
   4d724:	21018704 	addi	r4,r4,1564
   4d728:	01400174 	movhi	r5,5
   4d72c:	29418704 	addi	r5,r5,1564
   4d730:	01800174 	movhi	r6,5
   4d734:	31825904 	addi	r6,r6,2404
   4d738:	004d6740 	call	4d674 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4d73c:	004f4f80 	call	4f4f8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4d740:	004f6c00 	call	4f6c0 <alt_icache_flush_all>
}
   4d744:	e037883a 	mov	sp,fp
   4d748:	dfc00117 	ldw	ra,4(sp)
   4d74c:	df000017 	ldw	fp,0(sp)
   4d750:	dec00204 	addi	sp,sp,8
   4d754:	f800283a 	ret

0004d758 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d758:	defffe04 	addi	sp,sp,-8
   4d75c:	dfc00115 	stw	ra,4(sp)
   4d760:	df000015 	stw	fp,0(sp)
   4d764:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d768:	00800174 	movhi	r2,5
   4d76c:	10894004 	addi	r2,r2,9472
   4d770:	10800017 	ldw	r2,0(r2)
   4d774:	10000526 	beq	r2,zero,4d78c <alt_get_errno+0x34>
   4d778:	00800174 	movhi	r2,5
   4d77c:	10894004 	addi	r2,r2,9472
   4d780:	10800017 	ldw	r2,0(r2)
   4d784:	103ee83a 	callr	r2
   4d788:	00000206 	br	4d794 <alt_get_errno+0x3c>
   4d78c:	00800174 	movhi	r2,5
   4d790:	10903704 	addi	r2,r2,16604
}
   4d794:	e037883a 	mov	sp,fp
   4d798:	dfc00117 	ldw	ra,4(sp)
   4d79c:	df000017 	ldw	fp,0(sp)
   4d7a0:	dec00204 	addi	sp,sp,8
   4d7a4:	f800283a 	ret

0004d7a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4d7a8:	defff904 	addi	sp,sp,-28
   4d7ac:	dfc00615 	stw	ra,24(sp)
   4d7b0:	df000515 	stw	fp,20(sp)
   4d7b4:	df000504 	addi	fp,sp,20
   4d7b8:	e13ffd15 	stw	r4,-12(fp)
   4d7bc:	e17ffe15 	stw	r5,-8(fp)
   4d7c0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4d7c4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d7c8:	e0bffd17 	ldw	r2,-12(fp)
   4d7cc:	10000816 	blt	r2,zero,4d7f0 <lseek+0x48>
   4d7d0:	e13ffd17 	ldw	r4,-12(fp)
   4d7d4:	01400304 	movi	r5,12
   4d7d8:	004095c0 	call	4095c <__mulsi3>
   4d7dc:	1007883a 	mov	r3,r2
   4d7e0:	00800174 	movhi	r2,5
   4d7e4:	10848c04 	addi	r2,r2,4656
   4d7e8:	1885883a 	add	r2,r3,r2
   4d7ec:	00000106 	br	4d7f4 <lseek+0x4c>
   4d7f0:	0005883a 	mov	r2,zero
   4d7f4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4d7f8:	e0bffc17 	ldw	r2,-16(fp)
   4d7fc:	10001026 	beq	r2,zero,4d840 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4d800:	e0bffc17 	ldw	r2,-16(fp)
   4d804:	10800017 	ldw	r2,0(r2)
   4d808:	10800717 	ldw	r2,28(r2)
   4d80c:	10000926 	beq	r2,zero,4d834 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4d810:	e0bffc17 	ldw	r2,-16(fp)
   4d814:	10800017 	ldw	r2,0(r2)
   4d818:	10800717 	ldw	r2,28(r2)
   4d81c:	e13ffc17 	ldw	r4,-16(fp)
   4d820:	e17ffe17 	ldw	r5,-8(fp)
   4d824:	e1bfff17 	ldw	r6,-4(fp)
   4d828:	103ee83a 	callr	r2
   4d82c:	e0bffb15 	stw	r2,-20(fp)
   4d830:	00000506 	br	4d848 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4d834:	00bfde84 	movi	r2,-134
   4d838:	e0bffb15 	stw	r2,-20(fp)
   4d83c:	00000206 	br	4d848 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4d840:	00bfebc4 	movi	r2,-81
   4d844:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4d848:	e0bffb17 	ldw	r2,-20(fp)
   4d84c:	1000070e 	bge	r2,zero,4d86c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   4d850:	004d7580 	call	4d758 <alt_get_errno>
   4d854:	1007883a 	mov	r3,r2
   4d858:	e0bffb17 	ldw	r2,-20(fp)
   4d85c:	0085c83a 	sub	r2,zero,r2
   4d860:	18800015 	stw	r2,0(r3)
    rc = -1;
   4d864:	00bfffc4 	movi	r2,-1
   4d868:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4d86c:	e0bffb17 	ldw	r2,-20(fp)
}
   4d870:	e037883a 	mov	sp,fp
   4d874:	dfc00117 	ldw	ra,4(sp)
   4d878:	df000017 	ldw	fp,0(sp)
   4d87c:	dec00204 	addi	sp,sp,8
   4d880:	f800283a 	ret

0004d884 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4d884:	defffd04 	addi	sp,sp,-12
   4d888:	dfc00215 	stw	ra,8(sp)
   4d88c:	df000115 	stw	fp,4(sp)
   4d890:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4d894:	0009883a 	mov	r4,zero
   4d898:	004dd780 	call	4dd78 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4d89c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4d8a0:	004ddac0 	call	4ddac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4d8a4:	01000174 	movhi	r4,5
   4d8a8:	21024e04 	addi	r4,r4,2360
   4d8ac:	01400174 	movhi	r5,5
   4d8b0:	29424e04 	addi	r5,r5,2360
   4d8b4:	01800174 	movhi	r6,5
   4d8b8:	31824e04 	addi	r6,r6,2360
   4d8bc:	004fa8c0 	call	4fa8c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4d8c0:	004f6080 	call	4f608 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4d8c4:	01000174 	movhi	r4,5
   4d8c8:	213d9904 	addi	r4,r4,-2460
   4d8cc:	00502780 	call	50278 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4d8d0:	d1270317 	ldw	r4,-25588(gp)
   4d8d4:	d0e70417 	ldw	r3,-25584(gp)
   4d8d8:	d0a70517 	ldw	r2,-25580(gp)
   4d8dc:	180b883a 	mov	r5,r3
   4d8e0:	100d883a 	mov	r6,r2
   4d8e4:	00402680 	call	40268 <main>
   4d8e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4d8ec:	01000044 	movi	r4,1
   4d8f0:	004d36c0 	call	4d36c <close>
  exit (result);
   4d8f4:	e13fff17 	ldw	r4,-4(fp)
   4d8f8:	005028c0 	call	5028c <exit>

0004d8fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4d8fc:	defffe04 	addi	sp,sp,-8
   4d900:	df000115 	stw	fp,4(sp)
   4d904:	df000104 	addi	fp,sp,4
   4d908:	e13fff15 	stw	r4,-4(fp)
}
   4d90c:	e037883a 	mov	sp,fp
   4d910:	df000017 	ldw	fp,0(sp)
   4d914:	dec00104 	addi	sp,sp,4
   4d918:	f800283a 	ret

0004d91c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4d91c:	defffe04 	addi	sp,sp,-8
   4d920:	df000115 	stw	fp,4(sp)
   4d924:	df000104 	addi	fp,sp,4
   4d928:	e13fff15 	stw	r4,-4(fp)
}
   4d92c:	e037883a 	mov	sp,fp
   4d930:	df000017 	ldw	fp,0(sp)
   4d934:	dec00104 	addi	sp,sp,4
   4d938:	f800283a 	ret

0004d93c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d93c:	defffe04 	addi	sp,sp,-8
   4d940:	dfc00115 	stw	ra,4(sp)
   4d944:	df000015 	stw	fp,0(sp)
   4d948:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d94c:	00800174 	movhi	r2,5
   4d950:	10894004 	addi	r2,r2,9472
   4d954:	10800017 	ldw	r2,0(r2)
   4d958:	10000526 	beq	r2,zero,4d970 <alt_get_errno+0x34>
   4d95c:	00800174 	movhi	r2,5
   4d960:	10894004 	addi	r2,r2,9472
   4d964:	10800017 	ldw	r2,0(r2)
   4d968:	103ee83a 	callr	r2
   4d96c:	00000206 	br	4d978 <alt_get_errno+0x3c>
   4d970:	00800174 	movhi	r2,5
   4d974:	10903704 	addi	r2,r2,16604
}
   4d978:	e037883a 	mov	sp,fp
   4d97c:	dfc00117 	ldw	ra,4(sp)
   4d980:	df000017 	ldw	fp,0(sp)
   4d984:	dec00204 	addi	sp,sp,8
   4d988:	f800283a 	ret

0004d98c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4d98c:	defff904 	addi	sp,sp,-28
   4d990:	dfc00615 	stw	ra,24(sp)
   4d994:	df000515 	stw	fp,20(sp)
   4d998:	df000504 	addi	fp,sp,20
   4d99c:	e13ffd15 	stw	r4,-12(fp)
   4d9a0:	e17ffe15 	stw	r5,-8(fp)
   4d9a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d9a8:	e0bffd17 	ldw	r2,-12(fp)
   4d9ac:	10000816 	blt	r2,zero,4d9d0 <read+0x44>
   4d9b0:	e13ffd17 	ldw	r4,-12(fp)
   4d9b4:	01400304 	movi	r5,12
   4d9b8:	004095c0 	call	4095c <__mulsi3>
   4d9bc:	1007883a 	mov	r3,r2
   4d9c0:	00800174 	movhi	r2,5
   4d9c4:	10848c04 	addi	r2,r2,4656
   4d9c8:	1885883a 	add	r2,r3,r2
   4d9cc:	00000106 	br	4d9d4 <read+0x48>
   4d9d0:	0005883a 	mov	r2,zero
   4d9d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4d9d8:	e0bffb17 	ldw	r2,-20(fp)
   4d9dc:	10002226 	beq	r2,zero,4da68 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4d9e0:	e0bffb17 	ldw	r2,-20(fp)
   4d9e4:	10800217 	ldw	r2,8(r2)
   4d9e8:	108000cc 	andi	r2,r2,3
   4d9ec:	10800060 	cmpeqi	r2,r2,1
   4d9f0:	1000181e 	bne	r2,zero,4da54 <read+0xc8>
        (fd->dev->read))
   4d9f4:	e0bffb17 	ldw	r2,-20(fp)
   4d9f8:	10800017 	ldw	r2,0(r2)
   4d9fc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4da00:	10001426 	beq	r2,zero,4da54 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4da04:	e0bffb17 	ldw	r2,-20(fp)
   4da08:	10800017 	ldw	r2,0(r2)
   4da0c:	10800517 	ldw	r2,20(r2)
   4da10:	e0ffff17 	ldw	r3,-4(fp)
   4da14:	e13ffb17 	ldw	r4,-20(fp)
   4da18:	e17ffe17 	ldw	r5,-8(fp)
   4da1c:	180d883a 	mov	r6,r3
   4da20:	103ee83a 	callr	r2
   4da24:	e0bffc15 	stw	r2,-16(fp)
   4da28:	e0bffc17 	ldw	r2,-16(fp)
   4da2c:	1000070e 	bge	r2,zero,4da4c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   4da30:	004d93c0 	call	4d93c <alt_get_errno>
   4da34:	1007883a 	mov	r3,r2
   4da38:	e0bffc17 	ldw	r2,-16(fp)
   4da3c:	0085c83a 	sub	r2,zero,r2
   4da40:	18800015 	stw	r2,0(r3)
          return -1;
   4da44:	00bfffc4 	movi	r2,-1
   4da48:	00000c06 	br	4da7c <read+0xf0>
        }
        return rval;
   4da4c:	e0bffc17 	ldw	r2,-16(fp)
   4da50:	00000a06 	br	4da7c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4da54:	004d93c0 	call	4d93c <alt_get_errno>
   4da58:	1007883a 	mov	r3,r2
   4da5c:	00800344 	movi	r2,13
   4da60:	18800015 	stw	r2,0(r3)
   4da64:	00000406 	br	4da78 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4da68:	004d93c0 	call	4d93c <alt_get_errno>
   4da6c:	1007883a 	mov	r3,r2
   4da70:	00801444 	movi	r2,81
   4da74:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4da78:	00bfffc4 	movi	r2,-1
}
   4da7c:	e037883a 	mov	sp,fp
   4da80:	dfc00117 	ldw	ra,4(sp)
   4da84:	df000017 	ldw	fp,0(sp)
   4da88:	dec00204 	addi	sp,sp,8
   4da8c:	f800283a 	ret

0004da90 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4da90:	defffc04 	addi	sp,sp,-16
   4da94:	dfc00315 	stw	ra,12(sp)
   4da98:	df000215 	stw	fp,8(sp)
   4da9c:	dc000115 	stw	r16,4(sp)
   4daa0:	df000204 	addi	fp,sp,8
   4daa4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   4daa8:	e0bffe17 	ldw	r2,-8(fp)
   4daac:	108000d0 	cmplti	r2,r2,3
   4dab0:	1000111e 	bne	r2,zero,4daf8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4dab4:	04000174 	movhi	r16,5
   4dab8:	84048c04 	addi	r16,r16,4656
   4dabc:	e0bffe17 	ldw	r2,-8(fp)
   4dac0:	1009883a 	mov	r4,r2
   4dac4:	01400304 	movi	r5,12
   4dac8:	004095c0 	call	4095c <__mulsi3>
   4dacc:	8085883a 	add	r2,r16,r2
   4dad0:	10800204 	addi	r2,r2,8
   4dad4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4dad8:	04000174 	movhi	r16,5
   4dadc:	84048c04 	addi	r16,r16,4656
   4dae0:	e0bffe17 	ldw	r2,-8(fp)
   4dae4:	1009883a 	mov	r4,r2
   4dae8:	01400304 	movi	r5,12
   4daec:	004095c0 	call	4095c <__mulsi3>
   4daf0:	8085883a 	add	r2,r16,r2
   4daf4:	10000015 	stw	zero,0(r2)
  }
}
   4daf8:	e6ffff04 	addi	sp,fp,-4
   4dafc:	dfc00217 	ldw	ra,8(sp)
   4db00:	df000117 	ldw	fp,4(sp)
   4db04:	dc000017 	ldw	r16,0(sp)
   4db08:	dec00304 	addi	sp,sp,12
   4db0c:	f800283a 	ret

0004db10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4db10:	defff904 	addi	sp,sp,-28
   4db14:	df000615 	stw	fp,24(sp)
   4db18:	df000604 	addi	fp,sp,24
   4db1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4db20:	0005303a 	rdctl	r2,status
   4db24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4db28:	e0fffc17 	ldw	r3,-16(fp)
   4db2c:	00bfff84 	movi	r2,-2
   4db30:	1884703a 	and	r2,r3,r2
   4db34:	1001703a 	wrctl	status,r2
  
  return context;
   4db38:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4db3c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4db40:	d0a00c17 	ldw	r2,-32720(gp)
   4db44:	10c000c4 	addi	r3,r2,3
   4db48:	00bfff04 	movi	r2,-4
   4db4c:	1884703a 	and	r2,r3,r2
   4db50:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4db54:	d0e00c17 	ldw	r3,-32720(gp)
   4db58:	e0bfff17 	ldw	r2,-4(fp)
   4db5c:	1887883a 	add	r3,r3,r2
   4db60:	008001f4 	movhi	r2,7
   4db64:	1096d804 	addi	r2,r2,23392
   4db68:	10c0062e 	bgeu	r2,r3,4db84 <sbrk+0x74>
   4db6c:	e0bffa17 	ldw	r2,-24(fp)
   4db70:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4db74:	e0bffd17 	ldw	r2,-12(fp)
   4db78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4db7c:	00bfffc4 	movi	r2,-1
   4db80:	00000b06 	br	4dbb0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4db84:	d0a00c17 	ldw	r2,-32720(gp)
   4db88:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   4db8c:	d0e00c17 	ldw	r3,-32720(gp)
   4db90:	e0bfff17 	ldw	r2,-4(fp)
   4db94:	1885883a 	add	r2,r3,r2
   4db98:	d0a00c15 	stw	r2,-32720(gp)
   4db9c:	e0bffa17 	ldw	r2,-24(fp)
   4dba0:	e0bffe15 	stw	r2,-8(fp)
   4dba4:	e0bffe17 	ldw	r2,-8(fp)
   4dba8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4dbac:	e0bffb17 	ldw	r2,-20(fp)
} 
   4dbb0:	e037883a 	mov	sp,fp
   4dbb4:	df000017 	ldw	fp,0(sp)
   4dbb8:	dec00104 	addi	sp,sp,4
   4dbbc:	f800283a 	ret

0004dbc0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   4dbc0:	defffd04 	addi	sp,sp,-12
   4dbc4:	dfc00215 	stw	ra,8(sp)
   4dbc8:	df000115 	stw	fp,4(sp)
   4dbcc:	df000104 	addi	fp,sp,4
   4dbd0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   4dbd4:	e13fff17 	ldw	r4,-4(fp)
   4dbd8:	004f3a00 	call	4f3a0 <alt_busy_sleep>
}
   4dbdc:	e037883a 	mov	sp,fp
   4dbe0:	dfc00117 	ldw	ra,4(sp)
   4dbe4:	df000017 	ldw	fp,0(sp)
   4dbe8:	dec00204 	addi	sp,sp,8
   4dbec:	f800283a 	ret

0004dbf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4dbf0:	defffe04 	addi	sp,sp,-8
   4dbf4:	dfc00115 	stw	ra,4(sp)
   4dbf8:	df000015 	stw	fp,0(sp)
   4dbfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4dc00:	00800174 	movhi	r2,5
   4dc04:	10894004 	addi	r2,r2,9472
   4dc08:	10800017 	ldw	r2,0(r2)
   4dc0c:	10000526 	beq	r2,zero,4dc24 <alt_get_errno+0x34>
   4dc10:	00800174 	movhi	r2,5
   4dc14:	10894004 	addi	r2,r2,9472
   4dc18:	10800017 	ldw	r2,0(r2)
   4dc1c:	103ee83a 	callr	r2
   4dc20:	00000206 	br	4dc2c <alt_get_errno+0x3c>
   4dc24:	00800174 	movhi	r2,5
   4dc28:	10903704 	addi	r2,r2,16604
}
   4dc2c:	e037883a 	mov	sp,fp
   4dc30:	dfc00117 	ldw	ra,4(sp)
   4dc34:	df000017 	ldw	fp,0(sp)
   4dc38:	dec00204 	addi	sp,sp,8
   4dc3c:	f800283a 	ret

0004dc40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4dc40:	defff904 	addi	sp,sp,-28
   4dc44:	dfc00615 	stw	ra,24(sp)
   4dc48:	df000515 	stw	fp,20(sp)
   4dc4c:	df000504 	addi	fp,sp,20
   4dc50:	e13ffd15 	stw	r4,-12(fp)
   4dc54:	e17ffe15 	stw	r5,-8(fp)
   4dc58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4dc5c:	e0bffd17 	ldw	r2,-12(fp)
   4dc60:	10000816 	blt	r2,zero,4dc84 <write+0x44>
   4dc64:	e13ffd17 	ldw	r4,-12(fp)
   4dc68:	01400304 	movi	r5,12
   4dc6c:	004095c0 	call	4095c <__mulsi3>
   4dc70:	1007883a 	mov	r3,r2
   4dc74:	00800174 	movhi	r2,5
   4dc78:	10848c04 	addi	r2,r2,4656
   4dc7c:	1885883a 	add	r2,r3,r2
   4dc80:	00000106 	br	4dc88 <write+0x48>
   4dc84:	0005883a 	mov	r2,zero
   4dc88:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4dc8c:	e0bffb17 	ldw	r2,-20(fp)
   4dc90:	10002126 	beq	r2,zero,4dd18 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4dc94:	e0bffb17 	ldw	r2,-20(fp)
   4dc98:	10800217 	ldw	r2,8(r2)
   4dc9c:	108000cc 	andi	r2,r2,3
   4dca0:	10001826 	beq	r2,zero,4dd04 <write+0xc4>
   4dca4:	e0bffb17 	ldw	r2,-20(fp)
   4dca8:	10800017 	ldw	r2,0(r2)
   4dcac:	10800617 	ldw	r2,24(r2)
   4dcb0:	10001426 	beq	r2,zero,4dd04 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4dcb4:	e0bffb17 	ldw	r2,-20(fp)
   4dcb8:	10800017 	ldw	r2,0(r2)
   4dcbc:	10800617 	ldw	r2,24(r2)
   4dcc0:	e0ffff17 	ldw	r3,-4(fp)
   4dcc4:	e13ffb17 	ldw	r4,-20(fp)
   4dcc8:	e17ffe17 	ldw	r5,-8(fp)
   4dccc:	180d883a 	mov	r6,r3
   4dcd0:	103ee83a 	callr	r2
   4dcd4:	e0bffc15 	stw	r2,-16(fp)
   4dcd8:	e0bffc17 	ldw	r2,-16(fp)
   4dcdc:	1000070e 	bge	r2,zero,4dcfc <write+0xbc>
      {
        ALT_ERRNO = -rval;
   4dce0:	004dbf00 	call	4dbf0 <alt_get_errno>
   4dce4:	1007883a 	mov	r3,r2
   4dce8:	e0bffc17 	ldw	r2,-16(fp)
   4dcec:	0085c83a 	sub	r2,zero,r2
   4dcf0:	18800015 	stw	r2,0(r3)
        return -1;
   4dcf4:	00bfffc4 	movi	r2,-1
   4dcf8:	00000c06 	br	4dd2c <write+0xec>
      }
      return rval;
   4dcfc:	e0bffc17 	ldw	r2,-16(fp)
   4dd00:	00000a06 	br	4dd2c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4dd04:	004dbf00 	call	4dbf0 <alt_get_errno>
   4dd08:	1007883a 	mov	r3,r2
   4dd0c:	00800344 	movi	r2,13
   4dd10:	18800015 	stw	r2,0(r3)
   4dd14:	00000406 	br	4dd28 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4dd18:	004dbf00 	call	4dbf0 <alt_get_errno>
   4dd1c:	1007883a 	mov	r3,r2
   4dd20:	00801444 	movi	r2,81
   4dd24:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4dd28:	00bfffc4 	movi	r2,-1
}
   4dd2c:	e037883a 	mov	sp,fp
   4dd30:	dfc00117 	ldw	ra,4(sp)
   4dd34:	df000017 	ldw	fp,0(sp)
   4dd38:	dec00204 	addi	sp,sp,8
   4dd3c:	f800283a 	ret

0004dd40 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4dd40:	defffd04 	addi	sp,sp,-12
   4dd44:	dfc00215 	stw	ra,8(sp)
   4dd48:	df000115 	stw	fp,4(sp)
   4dd4c:	df000104 	addi	fp,sp,4
   4dd50:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4dd54:	e13fff17 	ldw	r4,-4(fp)
   4dd58:	01400174 	movhi	r5,5
   4dd5c:	29493d04 	addi	r5,r5,9460
   4dd60:	004f5640 	call	4f564 <alt_dev_llist_insert>
}
   4dd64:	e037883a 	mov	sp,fp
   4dd68:	dfc00117 	ldw	ra,4(sp)
   4dd6c:	df000017 	ldw	fp,0(sp)
   4dd70:	dec00204 	addi	sp,sp,8
   4dd74:	f800283a 	ret

0004dd78 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4dd78:	defffd04 	addi	sp,sp,-12
   4dd7c:	dfc00215 	stw	ra,8(sp)
   4dd80:	df000115 	stw	fp,4(sp)
   4dd84:	df000104 	addi	fp,sp,4
   4dd88:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   4dd8c:	004ff440 	call	4ff44 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4dd90:	00800044 	movi	r2,1
   4dd94:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4dd98:	e037883a 	mov	sp,fp
   4dd9c:	dfc00117 	ldw	ra,4(sp)
   4dda0:	df000017 	ldw	fp,0(sp)
   4dda4:	dec00204 	addi	sp,sp,8
   4dda8:	f800283a 	ret

0004ddac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4ddac:	defffe04 	addi	sp,sp,-8
   4ddb0:	dfc00115 	stw	ra,4(sp)
   4ddb4:	df000015 	stw	fp,0(sp)
   4ddb8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK, sys_clk);
   4ddbc:	01000234 	movhi	r4,8
   4ddc0:	21040004 	addi	r4,r4,4096
   4ddc4:	000b883a 	mov	r5,zero
   4ddc8:	01800044 	movi	r6,1
   4ddcc:	01c0fa04 	movi	r7,1000
   4ddd0:	004e8e80 	call	4e8e8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4ddd4:	01000174 	movhi	r4,5
   4ddd8:	2104f604 	addi	r4,r4,5080
   4dddc:	000b883a 	mov	r5,zero
   4dde0:	01800084 	movi	r6,2
   4dde4:	004df8c0 	call	4df8c <altera_avalon_jtag_uart_init>
   4dde8:	01000174 	movhi	r4,5
   4ddec:	2104ec04 	addi	r4,r4,5040
   4ddf0:	004dd400 	call	4dd40 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
   4ddf4:	01000174 	movhi	r4,5
   4ddf8:	21090e04 	addi	r4,r4,9272
   4ddfc:	000b883a 	mov	r5,zero
   4de00:	000d883a 	mov	r6,zero
   4de04:	004ea800 	call	4ea80 <altera_avalon_uart_init>
   4de08:	01000174 	movhi	r4,5
   4de0c:	21090404 	addi	r4,r4,9232
   4de10:	004dd400 	call	4dd40 <alt_dev_reg>
}
   4de14:	e037883a 	mov	sp,fp
   4de18:	dfc00117 	ldw	ra,4(sp)
   4de1c:	df000017 	ldw	fp,0(sp)
   4de20:	dec00204 	addi	sp,sp,8
   4de24:	f800283a 	ret

0004de28 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4de28:	defffa04 	addi	sp,sp,-24
   4de2c:	dfc00515 	stw	ra,20(sp)
   4de30:	df000415 	stw	fp,16(sp)
   4de34:	df000404 	addi	fp,sp,16
   4de38:	e13ffd15 	stw	r4,-12(fp)
   4de3c:	e17ffe15 	stw	r5,-8(fp)
   4de40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4de44:	e0bffd17 	ldw	r2,-12(fp)
   4de48:	10800017 	ldw	r2,0(r2)
   4de4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4de50:	e0bffc17 	ldw	r2,-16(fp)
   4de54:	10c00a04 	addi	r3,r2,40
   4de58:	e0bffd17 	ldw	r2,-12(fp)
   4de5c:	10800217 	ldw	r2,8(r2)
   4de60:	1809883a 	mov	r4,r3
   4de64:	e17ffe17 	ldw	r5,-8(fp)
   4de68:	e1bfff17 	ldw	r6,-4(fp)
   4de6c:	100f883a 	mov	r7,r2
   4de70:	004e4500 	call	4e450 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4de74:	e037883a 	mov	sp,fp
   4de78:	dfc00117 	ldw	ra,4(sp)
   4de7c:	df000017 	ldw	fp,0(sp)
   4de80:	dec00204 	addi	sp,sp,8
   4de84:	f800283a 	ret

0004de88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4de88:	defffa04 	addi	sp,sp,-24
   4de8c:	dfc00515 	stw	ra,20(sp)
   4de90:	df000415 	stw	fp,16(sp)
   4de94:	df000404 	addi	fp,sp,16
   4de98:	e13ffd15 	stw	r4,-12(fp)
   4de9c:	e17ffe15 	stw	r5,-8(fp)
   4dea0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4dea4:	e0bffd17 	ldw	r2,-12(fp)
   4dea8:	10800017 	ldw	r2,0(r2)
   4deac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4deb0:	e0bffc17 	ldw	r2,-16(fp)
   4deb4:	10c00a04 	addi	r3,r2,40
   4deb8:	e0bffd17 	ldw	r2,-12(fp)
   4debc:	10800217 	ldw	r2,8(r2)
   4dec0:	1809883a 	mov	r4,r3
   4dec4:	e17ffe17 	ldw	r5,-8(fp)
   4dec8:	e1bfff17 	ldw	r6,-4(fp)
   4decc:	100f883a 	mov	r7,r2
   4ded0:	004e65c0 	call	4e65c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4ded4:	e037883a 	mov	sp,fp
   4ded8:	dfc00117 	ldw	ra,4(sp)
   4dedc:	df000017 	ldw	fp,0(sp)
   4dee0:	dec00204 	addi	sp,sp,8
   4dee4:	f800283a 	ret

0004dee8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4dee8:	defffc04 	addi	sp,sp,-16
   4deec:	dfc00315 	stw	ra,12(sp)
   4def0:	df000215 	stw	fp,8(sp)
   4def4:	df000204 	addi	fp,sp,8
   4def8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4defc:	e0bfff17 	ldw	r2,-4(fp)
   4df00:	10800017 	ldw	r2,0(r2)
   4df04:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4df08:	e0bffe17 	ldw	r2,-8(fp)
   4df0c:	10c00a04 	addi	r3,r2,40
   4df10:	e0bfff17 	ldw	r2,-4(fp)
   4df14:	10800217 	ldw	r2,8(r2)
   4df18:	1809883a 	mov	r4,r3
   4df1c:	100b883a 	mov	r5,r2
   4df20:	004e2fc0 	call	4e2fc <altera_avalon_jtag_uart_close>
}
   4df24:	e037883a 	mov	sp,fp
   4df28:	dfc00117 	ldw	ra,4(sp)
   4df2c:	df000017 	ldw	fp,0(sp)
   4df30:	dec00204 	addi	sp,sp,8
   4df34:	f800283a 	ret

0004df38 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4df38:	defffa04 	addi	sp,sp,-24
   4df3c:	dfc00515 	stw	ra,20(sp)
   4df40:	df000415 	stw	fp,16(sp)
   4df44:	df000404 	addi	fp,sp,16
   4df48:	e13ffd15 	stw	r4,-12(fp)
   4df4c:	e17ffe15 	stw	r5,-8(fp)
   4df50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4df54:	e0bffd17 	ldw	r2,-12(fp)
   4df58:	10800017 	ldw	r2,0(r2)
   4df5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4df60:	e0bffc17 	ldw	r2,-16(fp)
   4df64:	10800a04 	addi	r2,r2,40
   4df68:	1009883a 	mov	r4,r2
   4df6c:	e17ffe17 	ldw	r5,-8(fp)
   4df70:	e1bfff17 	ldw	r6,-4(fp)
   4df74:	004e3640 	call	4e364 <altera_avalon_jtag_uart_ioctl>
}
   4df78:	e037883a 	mov	sp,fp
   4df7c:	dfc00117 	ldw	ra,4(sp)
   4df80:	df000017 	ldw	fp,0(sp)
   4df84:	dec00204 	addi	sp,sp,8
   4df88:	f800283a 	ret

0004df8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4df8c:	defffa04 	addi	sp,sp,-24
   4df90:	dfc00515 	stw	ra,20(sp)
   4df94:	df000415 	stw	fp,16(sp)
   4df98:	df000404 	addi	fp,sp,16
   4df9c:	e13ffd15 	stw	r4,-12(fp)
   4dfa0:	e17ffe15 	stw	r5,-8(fp)
   4dfa4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4dfa8:	e0bffd17 	ldw	r2,-12(fp)
   4dfac:	00c00044 	movi	r3,1
   4dfb0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4dfb4:	e0bffd17 	ldw	r2,-12(fp)
   4dfb8:	10800017 	ldw	r2,0(r2)
   4dfbc:	10800104 	addi	r2,r2,4
   4dfc0:	1007883a 	mov	r3,r2
   4dfc4:	e0bffd17 	ldw	r2,-12(fp)
   4dfc8:	10800817 	ldw	r2,32(r2)
   4dfcc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4dfd0:	e0fffe17 	ldw	r3,-8(fp)
   4dfd4:	e0bfff17 	ldw	r2,-4(fp)
   4dfd8:	d8000015 	stw	zero,0(sp)
   4dfdc:	1809883a 	mov	r4,r3
   4dfe0:	100b883a 	mov	r5,r2
   4dfe4:	01800174 	movhi	r6,5
   4dfe8:	31b81404 	addi	r6,r6,-8112
   4dfec:	e1fffd17 	ldw	r7,-12(fp)
   4dff0:	004f6dc0 	call	4f6dc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4dff4:	e0bffd17 	ldw	r2,-12(fp)
   4dff8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4dffc:	e0bffd17 	ldw	r2,-12(fp)
   4e000:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4e004:	00800174 	movhi	r2,5
   4e008:	10903c04 	addi	r2,r2,16624
   4e00c:	10800017 	ldw	r2,0(r2)
   4e010:	1809883a 	mov	r4,r3
   4e014:	100b883a 	mov	r5,r2
   4e018:	01800174 	movhi	r6,5
   4e01c:	31b89504 	addi	r6,r6,-7596
   4e020:	e1fffd17 	ldw	r7,-12(fp)
   4e024:	004f2600 	call	4f260 <alt_alarm_start>
   4e028:	1000040e 	bge	r2,zero,4e03c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4e02c:	e0fffd17 	ldw	r3,-12(fp)
   4e030:	00a00034 	movhi	r2,32768
   4e034:	10bfffc4 	addi	r2,r2,-1
   4e038:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4e03c:	e037883a 	mov	sp,fp
   4e040:	dfc00117 	ldw	ra,4(sp)
   4e044:	df000017 	ldw	fp,0(sp)
   4e048:	dec00204 	addi	sp,sp,8
   4e04c:	f800283a 	ret

0004e050 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4e050:	defff804 	addi	sp,sp,-32
   4e054:	df000715 	stw	fp,28(sp)
   4e058:	df000704 	addi	fp,sp,28
   4e05c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4e060:	e0bfff17 	ldw	r2,-4(fp)
   4e064:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4e068:	e0bffb17 	ldw	r2,-20(fp)
   4e06c:	10800017 	ldw	r2,0(r2)
   4e070:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4e074:	e0bffc17 	ldw	r2,-16(fp)
   4e078:	10800104 	addi	r2,r2,4
   4e07c:	10800037 	ldwio	r2,0(r2)
   4e080:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4e084:	e0bffd17 	ldw	r2,-12(fp)
   4e088:	1080c00c 	andi	r2,r2,768
   4e08c:	1000011e 	bne	r2,zero,4e094 <altera_avalon_jtag_uart_irq+0x44>
      break;
   4e090:	00006c06 	br	4e244 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4e094:	e0bffd17 	ldw	r2,-12(fp)
   4e098:	1080400c 	andi	r2,r2,256
   4e09c:	10003426 	beq	r2,zero,4e170 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4e0a0:	00800074 	movhi	r2,1
   4e0a4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e0a8:	e0bffb17 	ldw	r2,-20(fp)
   4e0ac:	10800a17 	ldw	r2,40(r2)
   4e0b0:	10800044 	addi	r2,r2,1
   4e0b4:	1081ffcc 	andi	r2,r2,2047
   4e0b8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4e0bc:	e0bffb17 	ldw	r2,-20(fp)
   4e0c0:	10c00b17 	ldw	r3,44(r2)
   4e0c4:	e0bffe17 	ldw	r2,-8(fp)
   4e0c8:	1880011e 	bne	r3,r2,4e0d0 <altera_avalon_jtag_uart_irq+0x80>
          break;
   4e0cc:	00001606 	br	4e128 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4e0d0:	e0bffc17 	ldw	r2,-16(fp)
   4e0d4:	10800037 	ldwio	r2,0(r2)
   4e0d8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4e0dc:	e0bff917 	ldw	r2,-28(fp)
   4e0e0:	10a0000c 	andi	r2,r2,32768
   4e0e4:	1000011e 	bne	r2,zero,4e0ec <altera_avalon_jtag_uart_irq+0x9c>
          break;
   4e0e8:	00000f06 	br	4e128 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4e0ec:	e0bffb17 	ldw	r2,-20(fp)
   4e0f0:	10800a17 	ldw	r2,40(r2)
   4e0f4:	e0fff917 	ldw	r3,-28(fp)
   4e0f8:	1809883a 	mov	r4,r3
   4e0fc:	e0fffb17 	ldw	r3,-20(fp)
   4e100:	1885883a 	add	r2,r3,r2
   4e104:	10800e04 	addi	r2,r2,56
   4e108:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e10c:	e0bffb17 	ldw	r2,-20(fp)
   4e110:	10800a17 	ldw	r2,40(r2)
   4e114:	10800044 	addi	r2,r2,1
   4e118:	10c1ffcc 	andi	r3,r2,2047
   4e11c:	e0bffb17 	ldw	r2,-20(fp)
   4e120:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4e124:	003fe006 	br	4e0a8 <__alt_data_end+0xfffd8548>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4e128:	e0bff917 	ldw	r2,-28(fp)
   4e12c:	10bfffec 	andhi	r2,r2,65535
   4e130:	10000f26 	beq	r2,zero,4e170 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4e134:	e0bffb17 	ldw	r2,-20(fp)
   4e138:	10c00817 	ldw	r3,32(r2)
   4e13c:	00bfff84 	movi	r2,-2
   4e140:	1886703a 	and	r3,r3,r2
   4e144:	e0bffb17 	ldw	r2,-20(fp)
   4e148:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4e14c:	e0bffc17 	ldw	r2,-16(fp)
   4e150:	10800104 	addi	r2,r2,4
   4e154:	1007883a 	mov	r3,r2
   4e158:	e0bffb17 	ldw	r2,-20(fp)
   4e15c:	10800817 	ldw	r2,32(r2)
   4e160:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4e164:	e0bffc17 	ldw	r2,-16(fp)
   4e168:	10800104 	addi	r2,r2,4
   4e16c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4e170:	e0bffd17 	ldw	r2,-12(fp)
   4e174:	1080800c 	andi	r2,r2,512
   4e178:	10003126 	beq	r2,zero,4e240 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4e17c:	e0bffd17 	ldw	r2,-12(fp)
   4e180:	1004d43a 	srli	r2,r2,16
   4e184:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4e188:	00001406 	br	4e1dc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4e18c:	e0bffc17 	ldw	r2,-16(fp)
   4e190:	e0fffb17 	ldw	r3,-20(fp)
   4e194:	18c00d17 	ldw	r3,52(r3)
   4e198:	e13ffb17 	ldw	r4,-20(fp)
   4e19c:	20c7883a 	add	r3,r4,r3
   4e1a0:	18c20e04 	addi	r3,r3,2104
   4e1a4:	18c00003 	ldbu	r3,0(r3)
   4e1a8:	18c03fcc 	andi	r3,r3,255
   4e1ac:	18c0201c 	xori	r3,r3,128
   4e1b0:	18ffe004 	addi	r3,r3,-128
   4e1b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e1b8:	e0bffb17 	ldw	r2,-20(fp)
   4e1bc:	10800d17 	ldw	r2,52(r2)
   4e1c0:	10800044 	addi	r2,r2,1
   4e1c4:	10c1ffcc 	andi	r3,r2,2047
   4e1c8:	e0bffb17 	ldw	r2,-20(fp)
   4e1cc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4e1d0:	e0bffa17 	ldw	r2,-24(fp)
   4e1d4:	10bfffc4 	addi	r2,r2,-1
   4e1d8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4e1dc:	e0bffa17 	ldw	r2,-24(fp)
   4e1e0:	10000526 	beq	r2,zero,4e1f8 <altera_avalon_jtag_uart_irq+0x1a8>
   4e1e4:	e0bffb17 	ldw	r2,-20(fp)
   4e1e8:	10c00d17 	ldw	r3,52(r2)
   4e1ec:	e0bffb17 	ldw	r2,-20(fp)
   4e1f0:	10800c17 	ldw	r2,48(r2)
   4e1f4:	18bfe51e 	bne	r3,r2,4e18c <__alt_data_end+0xfffd862c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4e1f8:	e0bffa17 	ldw	r2,-24(fp)
   4e1fc:	10001026 	beq	r2,zero,4e240 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4e200:	e0bffb17 	ldw	r2,-20(fp)
   4e204:	10c00817 	ldw	r3,32(r2)
   4e208:	00bfff44 	movi	r2,-3
   4e20c:	1886703a 	and	r3,r3,r2
   4e210:	e0bffb17 	ldw	r2,-20(fp)
   4e214:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4e218:	e0bffb17 	ldw	r2,-20(fp)
   4e21c:	10800017 	ldw	r2,0(r2)
   4e220:	10800104 	addi	r2,r2,4
   4e224:	1007883a 	mov	r3,r2
   4e228:	e0bffb17 	ldw	r2,-20(fp)
   4e22c:	10800817 	ldw	r2,32(r2)
   4e230:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4e234:	e0bffc17 	ldw	r2,-16(fp)
   4e238:	10800104 	addi	r2,r2,4
   4e23c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4e240:	003f8c06 	br	4e074 <__alt_data_end+0xfffd8514>
}
   4e244:	e037883a 	mov	sp,fp
   4e248:	df000017 	ldw	fp,0(sp)
   4e24c:	dec00104 	addi	sp,sp,4
   4e250:	f800283a 	ret

0004e254 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4e254:	defff804 	addi	sp,sp,-32
   4e258:	df000715 	stw	fp,28(sp)
   4e25c:	df000704 	addi	fp,sp,28
   4e260:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4e264:	e0bffb17 	ldw	r2,-20(fp)
   4e268:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4e26c:	e0bff917 	ldw	r2,-28(fp)
   4e270:	10800017 	ldw	r2,0(r2)
   4e274:	10800104 	addi	r2,r2,4
   4e278:	10800037 	ldwio	r2,0(r2)
   4e27c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4e280:	e0bffa17 	ldw	r2,-24(fp)
   4e284:	1081000c 	andi	r2,r2,1024
   4e288:	10000b26 	beq	r2,zero,4e2b8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4e28c:	e0bff917 	ldw	r2,-28(fp)
   4e290:	10800017 	ldw	r2,0(r2)
   4e294:	10800104 	addi	r2,r2,4
   4e298:	1007883a 	mov	r3,r2
   4e29c:	e0bff917 	ldw	r2,-28(fp)
   4e2a0:	10800817 	ldw	r2,32(r2)
   4e2a4:	10810014 	ori	r2,r2,1024
   4e2a8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4e2ac:	e0bff917 	ldw	r2,-28(fp)
   4e2b0:	10000915 	stw	zero,36(r2)
   4e2b4:	00000a06 	br	4e2e0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4e2b8:	e0bff917 	ldw	r2,-28(fp)
   4e2bc:	10c00917 	ldw	r3,36(r2)
   4e2c0:	00a00034 	movhi	r2,32768
   4e2c4:	10bfff04 	addi	r2,r2,-4
   4e2c8:	10c00536 	bltu	r2,r3,4e2e0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   4e2cc:	e0bff917 	ldw	r2,-28(fp)
   4e2d0:	10800917 	ldw	r2,36(r2)
   4e2d4:	10c00044 	addi	r3,r2,1
   4e2d8:	e0bff917 	ldw	r2,-28(fp)
   4e2dc:	10c00915 	stw	r3,36(r2)
   4e2e0:	00800174 	movhi	r2,5
   4e2e4:	10903c04 	addi	r2,r2,16624
   4e2e8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4e2ec:	e037883a 	mov	sp,fp
   4e2f0:	df000017 	ldw	fp,0(sp)
   4e2f4:	dec00104 	addi	sp,sp,4
   4e2f8:	f800283a 	ret

0004e2fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4e2fc:	defffd04 	addi	sp,sp,-12
   4e300:	df000215 	stw	fp,8(sp)
   4e304:	df000204 	addi	fp,sp,8
   4e308:	e13ffe15 	stw	r4,-8(fp)
   4e30c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4e310:	00000506 	br	4e328 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4e314:	e0bfff17 	ldw	r2,-4(fp)
   4e318:	1090000c 	andi	r2,r2,16384
   4e31c:	10000226 	beq	r2,zero,4e328 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4e320:	00bffd44 	movi	r2,-11
   4e324:	00000b06 	br	4e354 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4e328:	e0bffe17 	ldw	r2,-8(fp)
   4e32c:	10c00d17 	ldw	r3,52(r2)
   4e330:	e0bffe17 	ldw	r2,-8(fp)
   4e334:	10800c17 	ldw	r2,48(r2)
   4e338:	18800526 	beq	r3,r2,4e350 <altera_avalon_jtag_uart_close+0x54>
   4e33c:	e0bffe17 	ldw	r2,-8(fp)
   4e340:	10c00917 	ldw	r3,36(r2)
   4e344:	e0bffe17 	ldw	r2,-8(fp)
   4e348:	10800117 	ldw	r2,4(r2)
   4e34c:	18bff136 	bltu	r3,r2,4e314 <__alt_data_end+0xfffd87b4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4e350:	0005883a 	mov	r2,zero
}
   4e354:	e037883a 	mov	sp,fp
   4e358:	df000017 	ldw	fp,0(sp)
   4e35c:	dec00104 	addi	sp,sp,4
   4e360:	f800283a 	ret

0004e364 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4e364:	defffa04 	addi	sp,sp,-24
   4e368:	df000515 	stw	fp,20(sp)
   4e36c:	df000504 	addi	fp,sp,20
   4e370:	e13ffd15 	stw	r4,-12(fp)
   4e374:	e17ffe15 	stw	r5,-8(fp)
   4e378:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4e37c:	00bff9c4 	movi	r2,-25
   4e380:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4e384:	e0bffe17 	ldw	r2,-8(fp)
   4e388:	10da8060 	cmpeqi	r3,r2,27137
   4e38c:	1800031e 	bne	r3,zero,4e39c <altera_avalon_jtag_uart_ioctl+0x38>
   4e390:	109a80a0 	cmpeqi	r2,r2,27138
   4e394:	1000191e 	bne	r2,zero,4e3fc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   4e398:	00002806 	br	4e43c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4e39c:	e0bffd17 	ldw	r2,-12(fp)
   4e3a0:	10c00117 	ldw	r3,4(r2)
   4e3a4:	00a00034 	movhi	r2,32768
   4e3a8:	10bfffc4 	addi	r2,r2,-1
   4e3ac:	18801226 	beq	r3,r2,4e3f8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   4e3b0:	e0bfff17 	ldw	r2,-4(fp)
   4e3b4:	10800017 	ldw	r2,0(r2)
   4e3b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4e3bc:	e0bffc17 	ldw	r2,-16(fp)
   4e3c0:	10800090 	cmplti	r2,r2,2
   4e3c4:	1000061e 	bne	r2,zero,4e3e0 <altera_avalon_jtag_uart_ioctl+0x7c>
   4e3c8:	e0fffc17 	ldw	r3,-16(fp)
   4e3cc:	00a00034 	movhi	r2,32768
   4e3d0:	10bfffc4 	addi	r2,r2,-1
   4e3d4:	18800226 	beq	r3,r2,4e3e0 <altera_avalon_jtag_uart_ioctl+0x7c>
   4e3d8:	e0bffc17 	ldw	r2,-16(fp)
   4e3dc:	00000206 	br	4e3e8 <altera_avalon_jtag_uart_ioctl+0x84>
   4e3e0:	00a00034 	movhi	r2,32768
   4e3e4:	10bfff84 	addi	r2,r2,-2
   4e3e8:	e0fffd17 	ldw	r3,-12(fp)
   4e3ec:	18800115 	stw	r2,4(r3)
      rc = 0;
   4e3f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4e3f4:	00001106 	br	4e43c <altera_avalon_jtag_uart_ioctl+0xd8>
   4e3f8:	00001006 	br	4e43c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4e3fc:	e0bffd17 	ldw	r2,-12(fp)
   4e400:	10c00117 	ldw	r3,4(r2)
   4e404:	00a00034 	movhi	r2,32768
   4e408:	10bfffc4 	addi	r2,r2,-1
   4e40c:	18800a26 	beq	r3,r2,4e438 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4e410:	e0bffd17 	ldw	r2,-12(fp)
   4e414:	10c00917 	ldw	r3,36(r2)
   4e418:	e0bffd17 	ldw	r2,-12(fp)
   4e41c:	10800117 	ldw	r2,4(r2)
   4e420:	1885803a 	cmpltu	r2,r3,r2
   4e424:	10c03fcc 	andi	r3,r2,255
   4e428:	e0bfff17 	ldw	r2,-4(fp)
   4e42c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4e430:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4e434:	00000006 	br	4e438 <altera_avalon_jtag_uart_ioctl+0xd4>
   4e438:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4e43c:	e0bffb17 	ldw	r2,-20(fp)
}
   4e440:	e037883a 	mov	sp,fp
   4e444:	df000017 	ldw	fp,0(sp)
   4e448:	dec00104 	addi	sp,sp,4
   4e44c:	f800283a 	ret

0004e450 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4e450:	defff304 	addi	sp,sp,-52
   4e454:	dfc00c15 	stw	ra,48(sp)
   4e458:	df000b15 	stw	fp,44(sp)
   4e45c:	df000b04 	addi	fp,sp,44
   4e460:	e13ffc15 	stw	r4,-16(fp)
   4e464:	e17ffd15 	stw	r5,-12(fp)
   4e468:	e1bffe15 	stw	r6,-8(fp)
   4e46c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4e470:	e0bffd17 	ldw	r2,-12(fp)
   4e474:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4e478:	00004906 	br	4e5a0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4e47c:	e0bffc17 	ldw	r2,-16(fp)
   4e480:	10800a17 	ldw	r2,40(r2)
   4e484:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4e488:	e0bffc17 	ldw	r2,-16(fp)
   4e48c:	10800b17 	ldw	r2,44(r2)
   4e490:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4e494:	e0fff717 	ldw	r3,-36(fp)
   4e498:	e0bff817 	ldw	r2,-32(fp)
   4e49c:	18800536 	bltu	r3,r2,4e4b4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4e4a0:	e0fff717 	ldw	r3,-36(fp)
   4e4a4:	e0bff817 	ldw	r2,-32(fp)
   4e4a8:	1885c83a 	sub	r2,r3,r2
   4e4ac:	e0bff615 	stw	r2,-40(fp)
   4e4b0:	00000406 	br	4e4c4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4e4b4:	00c20004 	movi	r3,2048
   4e4b8:	e0bff817 	ldw	r2,-32(fp)
   4e4bc:	1885c83a 	sub	r2,r3,r2
   4e4c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4e4c4:	e0bff617 	ldw	r2,-40(fp)
   4e4c8:	1000011e 	bne	r2,zero,4e4d0 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   4e4cc:	00001d06 	br	4e544 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   4e4d0:	e0fffe17 	ldw	r3,-8(fp)
   4e4d4:	e0bff617 	ldw	r2,-40(fp)
   4e4d8:	1880022e 	bgeu	r3,r2,4e4e4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4e4dc:	e0bffe17 	ldw	r2,-8(fp)
   4e4e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4e4e4:	e0bff817 	ldw	r2,-32(fp)
   4e4e8:	10800e04 	addi	r2,r2,56
   4e4ec:	e0fffc17 	ldw	r3,-16(fp)
   4e4f0:	1885883a 	add	r2,r3,r2
   4e4f4:	e13ff517 	ldw	r4,-44(fp)
   4e4f8:	100b883a 	mov	r5,r2
   4e4fc:	e1bff617 	ldw	r6,-40(fp)
   4e500:	00462c80 	call	462c8 <memcpy>
      ptr   += n;
   4e504:	e0fff517 	ldw	r3,-44(fp)
   4e508:	e0bff617 	ldw	r2,-40(fp)
   4e50c:	1885883a 	add	r2,r3,r2
   4e510:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4e514:	e0fffe17 	ldw	r3,-8(fp)
   4e518:	e0bff617 	ldw	r2,-40(fp)
   4e51c:	1885c83a 	sub	r2,r3,r2
   4e520:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e524:	e0fff817 	ldw	r3,-32(fp)
   4e528:	e0bff617 	ldw	r2,-40(fp)
   4e52c:	1885883a 	add	r2,r3,r2
   4e530:	10c1ffcc 	andi	r3,r2,2047
   4e534:	e0bffc17 	ldw	r2,-16(fp)
   4e538:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4e53c:	e0bffe17 	ldw	r2,-8(fp)
   4e540:	00bfce16 	blt	zero,r2,4e47c <__alt_data_end+0xfffd891c>

    /* If we read any data then return it */
    if (ptr != buffer)
   4e544:	e0fff517 	ldw	r3,-44(fp)
   4e548:	e0bffd17 	ldw	r2,-12(fp)
   4e54c:	18800126 	beq	r3,r2,4e554 <altera_avalon_jtag_uart_read+0x104>
      break;
   4e550:	00001506 	br	4e5a8 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4e554:	e0bfff17 	ldw	r2,-4(fp)
   4e558:	1090000c 	andi	r2,r2,16384
   4e55c:	10000126 	beq	r2,zero,4e564 <altera_avalon_jtag_uart_read+0x114>
      break;
   4e560:	00001106 	br	4e5a8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4e564:	0001883a 	nop
   4e568:	e0bffc17 	ldw	r2,-16(fp)
   4e56c:	10c00a17 	ldw	r3,40(r2)
   4e570:	e0bff717 	ldw	r2,-36(fp)
   4e574:	1880051e 	bne	r3,r2,4e58c <altera_avalon_jtag_uart_read+0x13c>
   4e578:	e0bffc17 	ldw	r2,-16(fp)
   4e57c:	10c00917 	ldw	r3,36(r2)
   4e580:	e0bffc17 	ldw	r2,-16(fp)
   4e584:	10800117 	ldw	r2,4(r2)
   4e588:	18bff736 	bltu	r3,r2,4e568 <__alt_data_end+0xfffd8a08>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4e58c:	e0bffc17 	ldw	r2,-16(fp)
   4e590:	10c00a17 	ldw	r3,40(r2)
   4e594:	e0bff717 	ldw	r2,-36(fp)
   4e598:	1880011e 	bne	r3,r2,4e5a0 <altera_avalon_jtag_uart_read+0x150>
      break;
   4e59c:	00000206 	br	4e5a8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4e5a0:	e0bffe17 	ldw	r2,-8(fp)
   4e5a4:	00bfb516 	blt	zero,r2,4e47c <__alt_data_end+0xfffd891c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4e5a8:	e0fff517 	ldw	r3,-44(fp)
   4e5ac:	e0bffd17 	ldw	r2,-12(fp)
   4e5b0:	18801826 	beq	r3,r2,4e614 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e5b4:	0005303a 	rdctl	r2,status
   4e5b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e5bc:	e0fffa17 	ldw	r3,-24(fp)
   4e5c0:	00bfff84 	movi	r2,-2
   4e5c4:	1884703a 	and	r2,r3,r2
   4e5c8:	1001703a 	wrctl	status,r2
  
  return context;
   4e5cc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4e5d0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4e5d4:	e0bffc17 	ldw	r2,-16(fp)
   4e5d8:	10800817 	ldw	r2,32(r2)
   4e5dc:	10c00054 	ori	r3,r2,1
   4e5e0:	e0bffc17 	ldw	r2,-16(fp)
   4e5e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4e5e8:	e0bffc17 	ldw	r2,-16(fp)
   4e5ec:	10800017 	ldw	r2,0(r2)
   4e5f0:	10800104 	addi	r2,r2,4
   4e5f4:	1007883a 	mov	r3,r2
   4e5f8:	e0bffc17 	ldw	r2,-16(fp)
   4e5fc:	10800817 	ldw	r2,32(r2)
   4e600:	18800035 	stwio	r2,0(r3)
   4e604:	e0bff917 	ldw	r2,-28(fp)
   4e608:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e60c:	e0bffb17 	ldw	r2,-20(fp)
   4e610:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4e614:	e0fff517 	ldw	r3,-44(fp)
   4e618:	e0bffd17 	ldw	r2,-12(fp)
   4e61c:	18800426 	beq	r3,r2,4e630 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   4e620:	e0fff517 	ldw	r3,-44(fp)
   4e624:	e0bffd17 	ldw	r2,-12(fp)
   4e628:	1885c83a 	sub	r2,r3,r2
   4e62c:	00000606 	br	4e648 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   4e630:	e0bfff17 	ldw	r2,-4(fp)
   4e634:	1090000c 	andi	r2,r2,16384
   4e638:	10000226 	beq	r2,zero,4e644 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   4e63c:	00bffd44 	movi	r2,-11
   4e640:	00000106 	br	4e648 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   4e644:	00bffec4 	movi	r2,-5
}
   4e648:	e037883a 	mov	sp,fp
   4e64c:	dfc00117 	ldw	ra,4(sp)
   4e650:	df000017 	ldw	fp,0(sp)
   4e654:	dec00204 	addi	sp,sp,8
   4e658:	f800283a 	ret

0004e65c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4e65c:	defff304 	addi	sp,sp,-52
   4e660:	dfc00c15 	stw	ra,48(sp)
   4e664:	df000b15 	stw	fp,44(sp)
   4e668:	df000b04 	addi	fp,sp,44
   4e66c:	e13ffc15 	stw	r4,-16(fp)
   4e670:	e17ffd15 	stw	r5,-12(fp)
   4e674:	e1bffe15 	stw	r6,-8(fp)
   4e678:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4e67c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4e680:	e0bffd17 	ldw	r2,-12(fp)
   4e684:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4e688:	00003806 	br	4e76c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4e68c:	e0bffc17 	ldw	r2,-16(fp)
   4e690:	10800c17 	ldw	r2,48(r2)
   4e694:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   4e698:	e0bffc17 	ldw	r2,-16(fp)
   4e69c:	10800d17 	ldw	r2,52(r2)
   4e6a0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4e6a4:	e0fff817 	ldw	r3,-32(fp)
   4e6a8:	e0bff517 	ldw	r2,-44(fp)
   4e6ac:	1880062e 	bgeu	r3,r2,4e6c8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4e6b0:	e0fff517 	ldw	r3,-44(fp)
   4e6b4:	e0bff817 	ldw	r2,-32(fp)
   4e6b8:	1885c83a 	sub	r2,r3,r2
   4e6bc:	10bfffc4 	addi	r2,r2,-1
   4e6c0:	e0bff615 	stw	r2,-40(fp)
   4e6c4:	00000b06 	br	4e6f4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4e6c8:	e0bff517 	ldw	r2,-44(fp)
   4e6cc:	10000526 	beq	r2,zero,4e6e4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4e6d0:	00c20004 	movi	r3,2048
   4e6d4:	e0bff817 	ldw	r2,-32(fp)
   4e6d8:	1885c83a 	sub	r2,r3,r2
   4e6dc:	e0bff615 	stw	r2,-40(fp)
   4e6e0:	00000406 	br	4e6f4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4e6e4:	00c1ffc4 	movi	r3,2047
   4e6e8:	e0bff817 	ldw	r2,-32(fp)
   4e6ec:	1885c83a 	sub	r2,r3,r2
   4e6f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4e6f4:	e0bff617 	ldw	r2,-40(fp)
   4e6f8:	1000011e 	bne	r2,zero,4e700 <altera_avalon_jtag_uart_write+0xa4>
        break;
   4e6fc:	00001d06 	br	4e774 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   4e700:	e0fffe17 	ldw	r3,-8(fp)
   4e704:	e0bff617 	ldw	r2,-40(fp)
   4e708:	1880022e 	bgeu	r3,r2,4e714 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   4e70c:	e0bffe17 	ldw	r2,-8(fp)
   4e710:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4e714:	e0bff817 	ldw	r2,-32(fp)
   4e718:	10820e04 	addi	r2,r2,2104
   4e71c:	e0fffc17 	ldw	r3,-16(fp)
   4e720:	1885883a 	add	r2,r3,r2
   4e724:	1009883a 	mov	r4,r2
   4e728:	e17ffd17 	ldw	r5,-12(fp)
   4e72c:	e1bff617 	ldw	r6,-40(fp)
   4e730:	00462c80 	call	462c8 <memcpy>
      ptr   += n;
   4e734:	e0fffd17 	ldw	r3,-12(fp)
   4e738:	e0bff617 	ldw	r2,-40(fp)
   4e73c:	1885883a 	add	r2,r3,r2
   4e740:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4e744:	e0fffe17 	ldw	r3,-8(fp)
   4e748:	e0bff617 	ldw	r2,-40(fp)
   4e74c:	1885c83a 	sub	r2,r3,r2
   4e750:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e754:	e0fff817 	ldw	r3,-32(fp)
   4e758:	e0bff617 	ldw	r2,-40(fp)
   4e75c:	1885883a 	add	r2,r3,r2
   4e760:	10c1ffcc 	andi	r3,r2,2047
   4e764:	e0bffc17 	ldw	r2,-16(fp)
   4e768:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4e76c:	e0bffe17 	ldw	r2,-8(fp)
   4e770:	00bfc616 	blt	zero,r2,4e68c <__alt_data_end+0xfffd8b2c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e774:	0005303a 	rdctl	r2,status
   4e778:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e77c:	e0fffa17 	ldw	r3,-24(fp)
   4e780:	00bfff84 	movi	r2,-2
   4e784:	1884703a 	and	r2,r3,r2
   4e788:	1001703a 	wrctl	status,r2
  
  return context;
   4e78c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4e790:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4e794:	e0bffc17 	ldw	r2,-16(fp)
   4e798:	10800817 	ldw	r2,32(r2)
   4e79c:	10c00094 	ori	r3,r2,2
   4e7a0:	e0bffc17 	ldw	r2,-16(fp)
   4e7a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4e7a8:	e0bffc17 	ldw	r2,-16(fp)
   4e7ac:	10800017 	ldw	r2,0(r2)
   4e7b0:	10800104 	addi	r2,r2,4
   4e7b4:	1007883a 	mov	r3,r2
   4e7b8:	e0bffc17 	ldw	r2,-16(fp)
   4e7bc:	10800817 	ldw	r2,32(r2)
   4e7c0:	18800035 	stwio	r2,0(r3)
   4e7c4:	e0bff917 	ldw	r2,-28(fp)
   4e7c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e7cc:	e0bffb17 	ldw	r2,-20(fp)
   4e7d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4e7d4:	e0bffe17 	ldw	r2,-8(fp)
   4e7d8:	0080120e 	bge	zero,r2,4e824 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   4e7dc:	e0bfff17 	ldw	r2,-4(fp)
   4e7e0:	1090000c 	andi	r2,r2,16384
   4e7e4:	10000126 	beq	r2,zero,4e7ec <altera_avalon_jtag_uart_write+0x190>
        break;
   4e7e8:	00001006 	br	4e82c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4e7ec:	0001883a 	nop
   4e7f0:	e0bffc17 	ldw	r2,-16(fp)
   4e7f4:	10c00d17 	ldw	r3,52(r2)
   4e7f8:	e0bff517 	ldw	r2,-44(fp)
   4e7fc:	1880051e 	bne	r3,r2,4e814 <altera_avalon_jtag_uart_write+0x1b8>
   4e800:	e0bffc17 	ldw	r2,-16(fp)
   4e804:	10c00917 	ldw	r3,36(r2)
   4e808:	e0bffc17 	ldw	r2,-16(fp)
   4e80c:	10800117 	ldw	r2,4(r2)
   4e810:	18bff736 	bltu	r3,r2,4e7f0 <__alt_data_end+0xfffd8c90>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   4e814:	e0bffc17 	ldw	r2,-16(fp)
   4e818:	10800917 	ldw	r2,36(r2)
   4e81c:	10000126 	beq	r2,zero,4e824 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   4e820:	00000206 	br	4e82c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   4e824:	e0bffe17 	ldw	r2,-8(fp)
   4e828:	00bf9716 	blt	zero,r2,4e688 <__alt_data_end+0xfffd8b28>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4e82c:	e0fffd17 	ldw	r3,-12(fp)
   4e830:	e0bff717 	ldw	r2,-36(fp)
   4e834:	18800426 	beq	r3,r2,4e848 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   4e838:	e0fffd17 	ldw	r3,-12(fp)
   4e83c:	e0bff717 	ldw	r2,-36(fp)
   4e840:	1885c83a 	sub	r2,r3,r2
   4e844:	00000606 	br	4e860 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   4e848:	e0bfff17 	ldw	r2,-4(fp)
   4e84c:	1090000c 	andi	r2,r2,16384
   4e850:	10000226 	beq	r2,zero,4e85c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   4e854:	00bffd44 	movi	r2,-11
   4e858:	00000106 	br	4e860 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4e85c:	00bffec4 	movi	r2,-5
}
   4e860:	e037883a 	mov	sp,fp
   4e864:	dfc00117 	ldw	ra,4(sp)
   4e868:	df000017 	ldw	fp,0(sp)
   4e86c:	dec00204 	addi	sp,sp,8
   4e870:	f800283a 	ret

0004e874 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4e874:	defffa04 	addi	sp,sp,-24
   4e878:	dfc00515 	stw	ra,20(sp)
   4e87c:	df000415 	stw	fp,16(sp)
   4e880:	df000404 	addi	fp,sp,16
   4e884:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4e888:	0007883a 	mov	r3,zero
   4e88c:	e0bfff17 	ldw	r2,-4(fp)
   4e890:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4e894:	e0bfff17 	ldw	r2,-4(fp)
   4e898:	10800104 	addi	r2,r2,4
   4e89c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e8a0:	0005303a 	rdctl	r2,status
   4e8a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e8a8:	e0fffd17 	ldw	r3,-12(fp)
   4e8ac:	00bfff84 	movi	r2,-2
   4e8b0:	1884703a 	and	r2,r3,r2
   4e8b4:	1001703a 	wrctl	status,r2
  
  return context;
   4e8b8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4e8bc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4e8c0:	004fe400 	call	4fe40 <alt_tick>
   4e8c4:	e0bffc17 	ldw	r2,-16(fp)
   4e8c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e8cc:	e0bffe17 	ldw	r2,-8(fp)
   4e8d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4e8d4:	e037883a 	mov	sp,fp
   4e8d8:	dfc00117 	ldw	ra,4(sp)
   4e8dc:	df000017 	ldw	fp,0(sp)
   4e8e0:	dec00204 	addi	sp,sp,8
   4e8e4:	f800283a 	ret

0004e8e8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4e8e8:	defff804 	addi	sp,sp,-32
   4e8ec:	dfc00715 	stw	ra,28(sp)
   4e8f0:	df000615 	stw	fp,24(sp)
   4e8f4:	df000604 	addi	fp,sp,24
   4e8f8:	e13ffc15 	stw	r4,-16(fp)
   4e8fc:	e17ffd15 	stw	r5,-12(fp)
   4e900:	e1bffe15 	stw	r6,-8(fp)
   4e904:	e1ffff15 	stw	r7,-4(fp)
   4e908:	e0bfff17 	ldw	r2,-4(fp)
   4e90c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4e910:	00800174 	movhi	r2,5
   4e914:	10903c04 	addi	r2,r2,16624
   4e918:	10800017 	ldw	r2,0(r2)
   4e91c:	1000041e 	bne	r2,zero,4e930 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   4e920:	00800174 	movhi	r2,5
   4e924:	10903c04 	addi	r2,r2,16624
   4e928:	e0fffb17 	ldw	r3,-20(fp)
   4e92c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4e930:	e0bffc17 	ldw	r2,-16(fp)
   4e934:	10800104 	addi	r2,r2,4
   4e938:	00c001c4 	movi	r3,7
   4e93c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4e940:	d8000015 	stw	zero,0(sp)
   4e944:	e13ffd17 	ldw	r4,-12(fp)
   4e948:	e17ffe17 	ldw	r5,-8(fp)
   4e94c:	01800174 	movhi	r6,5
   4e950:	31ba1d04 	addi	r6,r6,-6028
   4e954:	e1fffc17 	ldw	r7,-16(fp)
   4e958:	004f6dc0 	call	4f6dc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4e95c:	e037883a 	mov	sp,fp
   4e960:	dfc00117 	ldw	ra,4(sp)
   4e964:	df000017 	ldw	fp,0(sp)
   4e968:	dec00204 	addi	sp,sp,8
   4e96c:	f800283a 	ret

0004e970 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4e970:	defffa04 	addi	sp,sp,-24
   4e974:	dfc00515 	stw	ra,20(sp)
   4e978:	df000415 	stw	fp,16(sp)
   4e97c:	df000404 	addi	fp,sp,16
   4e980:	e13ffd15 	stw	r4,-12(fp)
   4e984:	e17ffe15 	stw	r5,-8(fp)
   4e988:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4e98c:	e0bffd17 	ldw	r2,-12(fp)
   4e990:	10800017 	ldw	r2,0(r2)
   4e994:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   4e998:	e0bffc17 	ldw	r2,-16(fp)
   4e99c:	10c00a04 	addi	r3,r2,40
   4e9a0:	e0bffd17 	ldw	r2,-12(fp)
   4e9a4:	10800217 	ldw	r2,8(r2)
   4e9a8:	1809883a 	mov	r4,r3
   4e9ac:	e17ffe17 	ldw	r5,-8(fp)
   4e9b0:	e1bfff17 	ldw	r6,-4(fp)
   4e9b4:	100f883a 	mov	r7,r2
   4e9b8:	004ee880 	call	4ee88 <altera_avalon_uart_read>
      fd->fd_flags);
}
   4e9bc:	e037883a 	mov	sp,fp
   4e9c0:	dfc00117 	ldw	ra,4(sp)
   4e9c4:	df000017 	ldw	fp,0(sp)
   4e9c8:	dec00204 	addi	sp,sp,8
   4e9cc:	f800283a 	ret

0004e9d0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4e9d0:	defffa04 	addi	sp,sp,-24
   4e9d4:	dfc00515 	stw	ra,20(sp)
   4e9d8:	df000415 	stw	fp,16(sp)
   4e9dc:	df000404 	addi	fp,sp,16
   4e9e0:	e13ffd15 	stw	r4,-12(fp)
   4e9e4:	e17ffe15 	stw	r5,-8(fp)
   4e9e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4e9ec:	e0bffd17 	ldw	r2,-12(fp)
   4e9f0:	10800017 	ldw	r2,0(r2)
   4e9f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   4e9f8:	e0bffc17 	ldw	r2,-16(fp)
   4e9fc:	10c00a04 	addi	r3,r2,40
   4ea00:	e0bffd17 	ldw	r2,-12(fp)
   4ea04:	10800217 	ldw	r2,8(r2)
   4ea08:	1809883a 	mov	r4,r3
   4ea0c:	e17ffe17 	ldw	r5,-8(fp)
   4ea10:	e1bfff17 	ldw	r6,-4(fp)
   4ea14:	100f883a 	mov	r7,r2
   4ea18:	004f0b40 	call	4f0b4 <altera_avalon_uart_write>
      fd->fd_flags);
}
   4ea1c:	e037883a 	mov	sp,fp
   4ea20:	dfc00117 	ldw	ra,4(sp)
   4ea24:	df000017 	ldw	fp,0(sp)
   4ea28:	dec00204 	addi	sp,sp,8
   4ea2c:	f800283a 	ret

0004ea30 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   4ea30:	defffc04 	addi	sp,sp,-16
   4ea34:	dfc00315 	stw	ra,12(sp)
   4ea38:	df000215 	stw	fp,8(sp)
   4ea3c:	df000204 	addi	fp,sp,8
   4ea40:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   4ea44:	e0bfff17 	ldw	r2,-4(fp)
   4ea48:	10800017 	ldw	r2,0(r2)
   4ea4c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   4ea50:	e0bffe17 	ldw	r2,-8(fp)
   4ea54:	10c00a04 	addi	r3,r2,40
   4ea58:	e0bfff17 	ldw	r2,-4(fp)
   4ea5c:	10800217 	ldw	r2,8(r2)
   4ea60:	1809883a 	mov	r4,r3
   4ea64:	100b883a 	mov	r5,r2
   4ea68:	004ede40 	call	4ede4 <altera_avalon_uart_close>
}
   4ea6c:	e037883a 	mov	sp,fp
   4ea70:	dfc00117 	ldw	ra,4(sp)
   4ea74:	df000017 	ldw	fp,0(sp)
   4ea78:	dec00204 	addi	sp,sp,8
   4ea7c:	f800283a 	ret

0004ea80 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   4ea80:	defff804 	addi	sp,sp,-32
   4ea84:	dfc00715 	stw	ra,28(sp)
   4ea88:	df000615 	stw	fp,24(sp)
   4ea8c:	df000604 	addi	fp,sp,24
   4ea90:	e13ffd15 	stw	r4,-12(fp)
   4ea94:	e17ffe15 	stw	r5,-8(fp)
   4ea98:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   4ea9c:	e0bffd17 	ldw	r2,-12(fp)
   4eaa0:	10800017 	ldw	r2,0(r2)
   4eaa4:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   4eaa8:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   4eaac:	1000041e 	bne	r2,zero,4eac0 <altera_avalon_uart_init+0x40>
   4eab0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   4eab4:	1000021e 	bne	r2,zero,4eac0 <altera_avalon_uart_init+0x40>
   4eab8:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   4eabc:	10000226 	beq	r2,zero,4eac8 <altera_avalon_uart_init+0x48>
   4eac0:	00800044 	movi	r2,1
   4eac4:	00000106 	br	4eacc <altera_avalon_uart_init+0x4c>
   4eac8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   4eacc:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   4ead0:	e0bffc17 	ldw	r2,-16(fp)
   4ead4:	10000f1e 	bne	r2,zero,4eb14 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   4ead8:	e0bffd17 	ldw	r2,-12(fp)
   4eadc:	00c32004 	movi	r3,3200
   4eae0:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   4eae4:	e0bffb17 	ldw	r2,-20(fp)
   4eae8:	10800304 	addi	r2,r2,12
   4eaec:	e0fffd17 	ldw	r3,-12(fp)
   4eaf0:	18c00117 	ldw	r3,4(r3)
   4eaf4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   4eaf8:	d8000015 	stw	zero,0(sp)
   4eafc:	e13ffe17 	ldw	r4,-8(fp)
   4eb00:	e17fff17 	ldw	r5,-4(fp)
   4eb04:	01800174 	movhi	r6,5
   4eb08:	31baca04 	addi	r6,r6,-5336
   4eb0c:	e1fffd17 	ldw	r7,-12(fp)
   4eb10:	004f6dc0 	call	4f6dc <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   4eb14:	e037883a 	mov	sp,fp
   4eb18:	dfc00117 	ldw	ra,4(sp)
   4eb1c:	df000017 	ldw	fp,0(sp)
   4eb20:	dec00204 	addi	sp,sp,8
   4eb24:	f800283a 	ret

0004eb28 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   4eb28:	defffa04 	addi	sp,sp,-24
   4eb2c:	dfc00515 	stw	ra,20(sp)
   4eb30:	df000415 	stw	fp,16(sp)
   4eb34:	df000404 	addi	fp,sp,16
   4eb38:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   4eb3c:	e0bfff17 	ldw	r2,-4(fp)
   4eb40:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   4eb44:	e0bffc17 	ldw	r2,-16(fp)
   4eb48:	10800017 	ldw	r2,0(r2)
   4eb4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   4eb50:	e0bffd17 	ldw	r2,-12(fp)
   4eb54:	10800204 	addi	r2,r2,8
   4eb58:	10800037 	ldwio	r2,0(r2)
   4eb5c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   4eb60:	e0bffd17 	ldw	r2,-12(fp)
   4eb64:	10800204 	addi	r2,r2,8
   4eb68:	0007883a 	mov	r3,zero
   4eb6c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   4eb70:	e0bffd17 	ldw	r2,-12(fp)
   4eb74:	10800204 	addi	r2,r2,8
   4eb78:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   4eb7c:	e0bffe17 	ldw	r2,-8(fp)
   4eb80:	1080200c 	andi	r2,r2,128
   4eb84:	10000326 	beq	r2,zero,4eb94 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   4eb88:	e13ffc17 	ldw	r4,-16(fp)
   4eb8c:	e17ffe17 	ldw	r5,-8(fp)
   4eb90:	004ebc00 	call	4ebc0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   4eb94:	e0bffe17 	ldw	r2,-8(fp)
   4eb98:	1081100c 	andi	r2,r2,1088
   4eb9c:	10000326 	beq	r2,zero,4ebac <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   4eba0:	e13ffc17 	ldw	r4,-16(fp)
   4eba4:	e17ffe17 	ldw	r5,-8(fp)
   4eba8:	004eca00 	call	4eca0 <altera_avalon_uart_txirq>
  }
  

}
   4ebac:	e037883a 	mov	sp,fp
   4ebb0:	dfc00117 	ldw	ra,4(sp)
   4ebb4:	df000017 	ldw	fp,0(sp)
   4ebb8:	dec00204 	addi	sp,sp,8
   4ebbc:	f800283a 	ret

0004ebc0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   4ebc0:	defffc04 	addi	sp,sp,-16
   4ebc4:	df000315 	stw	fp,12(sp)
   4ebc8:	df000304 	addi	fp,sp,12
   4ebcc:	e13ffe15 	stw	r4,-8(fp)
   4ebd0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   4ebd4:	e0bfff17 	ldw	r2,-4(fp)
   4ebd8:	108000cc 	andi	r2,r2,3
   4ebdc:	10000126 	beq	r2,zero,4ebe4 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   4ebe0:	00002b06 	br	4ec90 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   4ebe4:	e0bffe17 	ldw	r2,-8(fp)
   4ebe8:	10800317 	ldw	r2,12(r2)
   4ebec:	e0bffe17 	ldw	r2,-8(fp)
   4ebf0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4ebf4:	e0bffe17 	ldw	r2,-8(fp)
   4ebf8:	10800317 	ldw	r2,12(r2)
   4ebfc:	10800044 	addi	r2,r2,1
   4ec00:	10800fcc 	andi	r2,r2,63
   4ec04:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   4ec08:	e0bffe17 	ldw	r2,-8(fp)
   4ec0c:	10800317 	ldw	r2,12(r2)
   4ec10:	e0fffe17 	ldw	r3,-8(fp)
   4ec14:	18c00017 	ldw	r3,0(r3)
   4ec18:	18c00037 	ldwio	r3,0(r3)
   4ec1c:	1809883a 	mov	r4,r3
   4ec20:	e0fffe17 	ldw	r3,-8(fp)
   4ec24:	1885883a 	add	r2,r3,r2
   4ec28:	10800704 	addi	r2,r2,28
   4ec2c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   4ec30:	e0bffe17 	ldw	r2,-8(fp)
   4ec34:	e0fffd17 	ldw	r3,-12(fp)
   4ec38:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4ec3c:	e0bffe17 	ldw	r2,-8(fp)
   4ec40:	10800317 	ldw	r2,12(r2)
   4ec44:	10800044 	addi	r2,r2,1
   4ec48:	10800fcc 	andi	r2,r2,63
   4ec4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   4ec50:	e0bffe17 	ldw	r2,-8(fp)
   4ec54:	10c00217 	ldw	r3,8(r2)
   4ec58:	e0bffd17 	ldw	r2,-12(fp)
   4ec5c:	18800c1e 	bne	r3,r2,4ec90 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4ec60:	e0bffe17 	ldw	r2,-8(fp)
   4ec64:	10c00117 	ldw	r3,4(r2)
   4ec68:	00bfdfc4 	movi	r2,-129
   4ec6c:	1886703a 	and	r3,r3,r2
   4ec70:	e0bffe17 	ldw	r2,-8(fp)
   4ec74:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   4ec78:	e0bffe17 	ldw	r2,-8(fp)
   4ec7c:	10800017 	ldw	r2,0(r2)
   4ec80:	10800304 	addi	r2,r2,12
   4ec84:	e0fffe17 	ldw	r3,-8(fp)
   4ec88:	18c00117 	ldw	r3,4(r3)
   4ec8c:	10c00035 	stwio	r3,0(r2)
  }   
}
   4ec90:	e037883a 	mov	sp,fp
   4ec94:	df000017 	ldw	fp,0(sp)
   4ec98:	dec00104 	addi	sp,sp,4
   4ec9c:	f800283a 	ret

0004eca0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   4eca0:	defffb04 	addi	sp,sp,-20
   4eca4:	df000415 	stw	fp,16(sp)
   4eca8:	df000404 	addi	fp,sp,16
   4ecac:	e13ffc15 	stw	r4,-16(fp)
   4ecb0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   4ecb4:	e0bffc17 	ldw	r2,-16(fp)
   4ecb8:	10c00417 	ldw	r3,16(r2)
   4ecbc:	e0bffc17 	ldw	r2,-16(fp)
   4ecc0:	10800517 	ldw	r2,20(r2)
   4ecc4:	18803226 	beq	r3,r2,4ed90 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   4ecc8:	e0bffc17 	ldw	r2,-16(fp)
   4eccc:	10800617 	ldw	r2,24(r2)
   4ecd0:	1080008c 	andi	r2,r2,2
   4ecd4:	10000326 	beq	r2,zero,4ece4 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   4ecd8:	e0bffd17 	ldw	r2,-12(fp)
   4ecdc:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   4ece0:	10001d26 	beq	r2,zero,4ed58 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   4ece4:	e0bffc17 	ldw	r2,-16(fp)
   4ece8:	10800417 	ldw	r2,16(r2)
   4ecec:	e0bffc17 	ldw	r2,-16(fp)
   4ecf0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   4ecf4:	e0bffc17 	ldw	r2,-16(fp)
   4ecf8:	10800017 	ldw	r2,0(r2)
   4ecfc:	10800104 	addi	r2,r2,4
   4ed00:	e0fffc17 	ldw	r3,-16(fp)
   4ed04:	18c00417 	ldw	r3,16(r3)
   4ed08:	e13ffc17 	ldw	r4,-16(fp)
   4ed0c:	20c7883a 	add	r3,r4,r3
   4ed10:	18c01704 	addi	r3,r3,92
   4ed14:	18c00003 	ldbu	r3,0(r3)
   4ed18:	18c03fcc 	andi	r3,r3,255
   4ed1c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   4ed20:	e0bffc17 	ldw	r2,-16(fp)
   4ed24:	10800417 	ldw	r2,16(r2)
   4ed28:	10800044 	addi	r2,r2,1
   4ed2c:	e0fffc17 	ldw	r3,-16(fp)
   4ed30:	18800415 	stw	r2,16(r3)
   4ed34:	10c00fcc 	andi	r3,r2,63
   4ed38:	e0bffc17 	ldw	r2,-16(fp)
   4ed3c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   4ed40:	e0bffc17 	ldw	r2,-16(fp)
   4ed44:	10800117 	ldw	r2,4(r2)
   4ed48:	10c01014 	ori	r3,r2,64
   4ed4c:	e0bffc17 	ldw	r2,-16(fp)
   4ed50:	10c00115 	stw	r3,4(r2)
   4ed54:	00000e06 	br	4ed90 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   4ed58:	e0bffc17 	ldw	r2,-16(fp)
   4ed5c:	10800017 	ldw	r2,0(r2)
   4ed60:	10800204 	addi	r2,r2,8
   4ed64:	10800037 	ldwio	r2,0(r2)
   4ed68:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   4ed6c:	e0bffd17 	ldw	r2,-12(fp)
   4ed70:	1082000c 	andi	r2,r2,2048
   4ed74:	1000061e 	bne	r2,zero,4ed90 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   4ed78:	e0bffc17 	ldw	r2,-16(fp)
   4ed7c:	10c00117 	ldw	r3,4(r2)
   4ed80:	00bfefc4 	movi	r2,-65
   4ed84:	1886703a 	and	r3,r3,r2
   4ed88:	e0bffc17 	ldw	r2,-16(fp)
   4ed8c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   4ed90:	e0bffc17 	ldw	r2,-16(fp)
   4ed94:	10c00417 	ldw	r3,16(r2)
   4ed98:	e0bffc17 	ldw	r2,-16(fp)
   4ed9c:	10800517 	ldw	r2,20(r2)
   4eda0:	1880061e 	bne	r3,r2,4edbc <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4eda4:	e0bffc17 	ldw	r2,-16(fp)
   4eda8:	10c00117 	ldw	r3,4(r2)
   4edac:	00beefc4 	movi	r2,-1089
   4edb0:	1886703a 	and	r3,r3,r2
   4edb4:	e0bffc17 	ldw	r2,-16(fp)
   4edb8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4edbc:	e0bffc17 	ldw	r2,-16(fp)
   4edc0:	10800017 	ldw	r2,0(r2)
   4edc4:	10800304 	addi	r2,r2,12
   4edc8:	e0fffc17 	ldw	r3,-16(fp)
   4edcc:	18c00117 	ldw	r3,4(r3)
   4edd0:	10c00035 	stwio	r3,0(r2)
}
   4edd4:	e037883a 	mov	sp,fp
   4edd8:	df000017 	ldw	fp,0(sp)
   4eddc:	dec00104 	addi	sp,sp,4
   4ede0:	f800283a 	ret

0004ede4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   4ede4:	defffd04 	addi	sp,sp,-12
   4ede8:	df000215 	stw	fp,8(sp)
   4edec:	df000204 	addi	fp,sp,8
   4edf0:	e13ffe15 	stw	r4,-8(fp)
   4edf4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   4edf8:	00000506 	br	4ee10 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4edfc:	e0bfff17 	ldw	r2,-4(fp)
   4ee00:	1090000c 	andi	r2,r2,16384
   4ee04:	10000226 	beq	r2,zero,4ee10 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4ee08:	00bffd44 	movi	r2,-11
   4ee0c:	00000606 	br	4ee28 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   4ee10:	e0bffe17 	ldw	r2,-8(fp)
   4ee14:	10c00417 	ldw	r3,16(r2)
   4ee18:	e0bffe17 	ldw	r2,-8(fp)
   4ee1c:	10800517 	ldw	r2,20(r2)
   4ee20:	18bff61e 	bne	r3,r2,4edfc <__alt_data_end+0xfffd929c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4ee24:	0005883a 	mov	r2,zero
}
   4ee28:	e037883a 	mov	sp,fp
   4ee2c:	df000017 	ldw	fp,0(sp)
   4ee30:	dec00104 	addi	sp,sp,4
   4ee34:	f800283a 	ret

0004ee38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ee38:	defffe04 	addi	sp,sp,-8
   4ee3c:	dfc00115 	stw	ra,4(sp)
   4ee40:	df000015 	stw	fp,0(sp)
   4ee44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ee48:	00800174 	movhi	r2,5
   4ee4c:	10894004 	addi	r2,r2,9472
   4ee50:	10800017 	ldw	r2,0(r2)
   4ee54:	10000526 	beq	r2,zero,4ee6c <alt_get_errno+0x34>
   4ee58:	00800174 	movhi	r2,5
   4ee5c:	10894004 	addi	r2,r2,9472
   4ee60:	10800017 	ldw	r2,0(r2)
   4ee64:	103ee83a 	callr	r2
   4ee68:	00000206 	br	4ee74 <alt_get_errno+0x3c>
   4ee6c:	00800174 	movhi	r2,5
   4ee70:	10903704 	addi	r2,r2,16604
}
   4ee74:	e037883a 	mov	sp,fp
   4ee78:	dfc00117 	ldw	ra,4(sp)
   4ee7c:	df000017 	ldw	fp,0(sp)
   4ee80:	dec00204 	addi	sp,sp,8
   4ee84:	f800283a 	ret

0004ee88 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   4ee88:	defff204 	addi	sp,sp,-56
   4ee8c:	dfc00d15 	stw	ra,52(sp)
   4ee90:	df000c15 	stw	fp,48(sp)
   4ee94:	df000c04 	addi	fp,sp,48
   4ee98:	e13ffc15 	stw	r4,-16(fp)
   4ee9c:	e17ffd15 	stw	r5,-12(fp)
   4eea0:	e1bffe15 	stw	r6,-8(fp)
   4eea4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   4eea8:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   4eeac:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   4eeb0:	e0bfff17 	ldw	r2,-4(fp)
   4eeb4:	1090000c 	andi	r2,r2,16384
   4eeb8:	1005003a 	cmpeq	r2,r2,zero
   4eebc:	10803fcc 	andi	r2,r2,255
   4eec0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   4eec4:	00001306 	br	4ef14 <altera_avalon_uart_read+0x8c>
    {
      count++;
   4eec8:	e0bff517 	ldw	r2,-44(fp)
   4eecc:	10800044 	addi	r2,r2,1
   4eed0:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   4eed4:	e0bffd17 	ldw	r2,-12(fp)
   4eed8:	10c00044 	addi	r3,r2,1
   4eedc:	e0fffd15 	stw	r3,-12(fp)
   4eee0:	e0fffc17 	ldw	r3,-16(fp)
   4eee4:	18c00217 	ldw	r3,8(r3)
   4eee8:	e13ffc17 	ldw	r4,-16(fp)
   4eeec:	20c7883a 	add	r3,r4,r3
   4eef0:	18c00704 	addi	r3,r3,28
   4eef4:	18c00003 	ldbu	r3,0(r3)
   4eef8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   4eefc:	e0bffc17 	ldw	r2,-16(fp)
   4ef00:	10800217 	ldw	r2,8(r2)
   4ef04:	10800044 	addi	r2,r2,1
   4ef08:	10c00fcc 	andi	r3,r2,63
   4ef0c:	e0bffc17 	ldw	r2,-16(fp)
   4ef10:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   4ef14:	e0fff517 	ldw	r3,-44(fp)
   4ef18:	e0bffe17 	ldw	r2,-8(fp)
   4ef1c:	1880050e 	bge	r3,r2,4ef34 <altera_avalon_uart_read+0xac>
   4ef20:	e0bffc17 	ldw	r2,-16(fp)
   4ef24:	10c00217 	ldw	r3,8(r2)
   4ef28:	e0bffc17 	ldw	r2,-16(fp)
   4ef2c:	10800317 	ldw	r2,12(r2)
   4ef30:	18bfe51e 	bne	r3,r2,4eec8 <__alt_data_end+0xfffd9368>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   4ef34:	e0bff517 	ldw	r2,-44(fp)
   4ef38:	1000251e 	bne	r2,zero,4efd0 <altera_avalon_uart_read+0x148>
   4ef3c:	e0bffc17 	ldw	r2,-16(fp)
   4ef40:	10c00217 	ldw	r3,8(r2)
   4ef44:	e0bffc17 	ldw	r2,-16(fp)
   4ef48:	10800317 	ldw	r2,12(r2)
   4ef4c:	1880201e 	bne	r3,r2,4efd0 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   4ef50:	e0bff617 	ldw	r2,-40(fp)
   4ef54:	1000071e 	bne	r2,zero,4ef74 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   4ef58:	004ee380 	call	4ee38 <alt_get_errno>
   4ef5c:	1007883a 	mov	r3,r2
   4ef60:	008002c4 	movi	r2,11
   4ef64:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   4ef68:	00800044 	movi	r2,1
   4ef6c:	e0bff405 	stb	r2,-48(fp)
        break;
   4ef70:	00001b06 	br	4efe0 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ef74:	0005303a 	rdctl	r2,status
   4ef78:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ef7c:	e0fff817 	ldw	r3,-32(fp)
   4ef80:	00bfff84 	movi	r2,-2
   4ef84:	1884703a 	and	r2,r3,r2
   4ef88:	1001703a 	wrctl	status,r2
  
  return context;
   4ef8c:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   4ef90:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4ef94:	e0bffc17 	ldw	r2,-16(fp)
   4ef98:	10800117 	ldw	r2,4(r2)
   4ef9c:	10c02014 	ori	r3,r2,128
   4efa0:	e0bffc17 	ldw	r2,-16(fp)
   4efa4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4efa8:	e0bffc17 	ldw	r2,-16(fp)
   4efac:	10800017 	ldw	r2,0(r2)
   4efb0:	10800304 	addi	r2,r2,12
   4efb4:	e0fffc17 	ldw	r3,-16(fp)
   4efb8:	18c00117 	ldw	r3,4(r3)
   4efbc:	10c00035 	stwio	r3,0(r2)
   4efc0:	e0bff717 	ldw	r2,-36(fp)
   4efc4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4efc8:	e0bff917 	ldw	r2,-28(fp)
   4efcc:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   4efd0:	e0bff517 	ldw	r2,-44(fp)
   4efd4:	1000021e 	bne	r2,zero,4efe0 <altera_avalon_uart_read+0x158>
   4efd8:	e0bffe17 	ldw	r2,-8(fp)
   4efdc:	103fb91e 	bne	r2,zero,4eec4 <__alt_data_end+0xfffd9364>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4efe0:	0005303a 	rdctl	r2,status
   4efe4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4efe8:	e0fffa17 	ldw	r3,-24(fp)
   4efec:	00bfff84 	movi	r2,-2
   4eff0:	1884703a 	and	r2,r3,r2
   4eff4:	1001703a 	wrctl	status,r2
  
  return context;
   4eff8:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   4effc:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   4f000:	e0bffc17 	ldw	r2,-16(fp)
   4f004:	10800117 	ldw	r2,4(r2)
   4f008:	10c02014 	ori	r3,r2,128
   4f00c:	e0bffc17 	ldw	r2,-16(fp)
   4f010:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4f014:	e0bffc17 	ldw	r2,-16(fp)
   4f018:	10800017 	ldw	r2,0(r2)
   4f01c:	10800304 	addi	r2,r2,12
   4f020:	e0fffc17 	ldw	r3,-16(fp)
   4f024:	18c00117 	ldw	r3,4(r3)
   4f028:	10c00035 	stwio	r3,0(r2)
   4f02c:	e0bff717 	ldw	r2,-36(fp)
   4f030:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f034:	e0bffb17 	ldw	r2,-20(fp)
   4f038:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   4f03c:	e0bff403 	ldbu	r2,-48(fp)
   4f040:	10000226 	beq	r2,zero,4f04c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   4f044:	00bffd44 	movi	r2,-11
   4f048:	00000106 	br	4f050 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   4f04c:	e0bff517 	ldw	r2,-44(fp)
  }
}
   4f050:	e037883a 	mov	sp,fp
   4f054:	dfc00117 	ldw	ra,4(sp)
   4f058:	df000017 	ldw	fp,0(sp)
   4f05c:	dec00204 	addi	sp,sp,8
   4f060:	f800283a 	ret

0004f064 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4f064:	defffe04 	addi	sp,sp,-8
   4f068:	dfc00115 	stw	ra,4(sp)
   4f06c:	df000015 	stw	fp,0(sp)
   4f070:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4f074:	00800174 	movhi	r2,5
   4f078:	10894004 	addi	r2,r2,9472
   4f07c:	10800017 	ldw	r2,0(r2)
   4f080:	10000526 	beq	r2,zero,4f098 <alt_get_errno+0x34>
   4f084:	00800174 	movhi	r2,5
   4f088:	10894004 	addi	r2,r2,9472
   4f08c:	10800017 	ldw	r2,0(r2)
   4f090:	103ee83a 	callr	r2
   4f094:	00000206 	br	4f0a0 <alt_get_errno+0x3c>
   4f098:	00800174 	movhi	r2,5
   4f09c:	10903704 	addi	r2,r2,16604
}
   4f0a0:	e037883a 	mov	sp,fp
   4f0a4:	dfc00117 	ldw	ra,4(sp)
   4f0a8:	df000017 	ldw	fp,0(sp)
   4f0ac:	dec00204 	addi	sp,sp,8
   4f0b0:	f800283a 	ret

0004f0b4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   4f0b4:	defff204 	addi	sp,sp,-56
   4f0b8:	dfc00d15 	stw	ra,52(sp)
   4f0bc:	df000c15 	stw	fp,48(sp)
   4f0c0:	df000c04 	addi	fp,sp,48
   4f0c4:	e13ffc15 	stw	r4,-16(fp)
   4f0c8:	e17ffd15 	stw	r5,-12(fp)
   4f0cc:	e1bffe15 	stw	r6,-8(fp)
   4f0d0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   4f0d4:	e0bffe17 	ldw	r2,-8(fp)
   4f0d8:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   4f0dc:	e0bfff17 	ldw	r2,-4(fp)
   4f0e0:	1090000c 	andi	r2,r2,16384
   4f0e4:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   4f0e8:	00003c06 	br	4f1dc <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   4f0ec:	e0bffc17 	ldw	r2,-16(fp)
   4f0f0:	10800517 	ldw	r2,20(r2)
   4f0f4:	10800044 	addi	r2,r2,1
   4f0f8:	10800fcc 	andi	r2,r2,63
   4f0fc:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   4f100:	e0bffc17 	ldw	r2,-16(fp)
   4f104:	10c00417 	ldw	r3,16(r2)
   4f108:	e0bff617 	ldw	r2,-40(fp)
   4f10c:	1880221e 	bne	r3,r2,4f198 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   4f110:	e0bff517 	ldw	r2,-44(fp)
   4f114:	10000526 	beq	r2,zero,4f12c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   4f118:	004f0640 	call	4f064 <alt_get_errno>
   4f11c:	1007883a 	mov	r3,r2
   4f120:	008002c4 	movi	r2,11
   4f124:	18800015 	stw	r2,0(r3)
        break;
   4f128:	00002e06 	br	4f1e4 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f12c:	0005303a 	rdctl	r2,status
   4f130:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f134:	e0fff817 	ldw	r3,-32(fp)
   4f138:	00bfff84 	movi	r2,-2
   4f13c:	1884703a 	and	r2,r3,r2
   4f140:	1001703a 	wrctl	status,r2
  
  return context;
   4f144:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   4f148:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4f14c:	e0bffc17 	ldw	r2,-16(fp)
   4f150:	10800117 	ldw	r2,4(r2)
   4f154:	10c11014 	ori	r3,r2,1088
   4f158:	e0bffc17 	ldw	r2,-16(fp)
   4f15c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4f160:	e0bffc17 	ldw	r2,-16(fp)
   4f164:	10800017 	ldw	r2,0(r2)
   4f168:	10800304 	addi	r2,r2,12
   4f16c:	e0fffc17 	ldw	r3,-16(fp)
   4f170:	18c00117 	ldw	r3,4(r3)
   4f174:	10c00035 	stwio	r3,0(r2)
   4f178:	e0bff717 	ldw	r2,-36(fp)
   4f17c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f180:	e0bff917 	ldw	r2,-28(fp)
   4f184:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   4f188:	e0bffc17 	ldw	r2,-16(fp)
   4f18c:	10c00417 	ldw	r3,16(r2)
   4f190:	e0bff617 	ldw	r2,-40(fp)
   4f194:	18bffc26 	beq	r3,r2,4f188 <__alt_data_end+0xfffd9628>
      }
    }

    count--;
   4f198:	e0bff417 	ldw	r2,-48(fp)
   4f19c:	10bfffc4 	addi	r2,r2,-1
   4f1a0:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   4f1a4:	e0bffc17 	ldw	r2,-16(fp)
   4f1a8:	10c00517 	ldw	r3,20(r2)
   4f1ac:	e0bffd17 	ldw	r2,-12(fp)
   4f1b0:	11000044 	addi	r4,r2,1
   4f1b4:	e13ffd15 	stw	r4,-12(fp)
   4f1b8:	10800003 	ldbu	r2,0(r2)
   4f1bc:	1009883a 	mov	r4,r2
   4f1c0:	e0bffc17 	ldw	r2,-16(fp)
   4f1c4:	10c5883a 	add	r2,r2,r3
   4f1c8:	10801704 	addi	r2,r2,92
   4f1cc:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   4f1d0:	e0bffc17 	ldw	r2,-16(fp)
   4f1d4:	e0fff617 	ldw	r3,-40(fp)
   4f1d8:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   4f1dc:	e0bff417 	ldw	r2,-48(fp)
   4f1e0:	103fc21e 	bne	r2,zero,4f0ec <__alt_data_end+0xfffd958c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f1e4:	0005303a 	rdctl	r2,status
   4f1e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f1ec:	e0fffa17 	ldw	r3,-24(fp)
   4f1f0:	00bfff84 	movi	r2,-2
   4f1f4:	1884703a 	and	r2,r3,r2
   4f1f8:	1001703a 	wrctl	status,r2
  
  return context;
   4f1fc:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   4f200:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   4f204:	e0bffc17 	ldw	r2,-16(fp)
   4f208:	10800117 	ldw	r2,4(r2)
   4f20c:	10c11014 	ori	r3,r2,1088
   4f210:	e0bffc17 	ldw	r2,-16(fp)
   4f214:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4f218:	e0bffc17 	ldw	r2,-16(fp)
   4f21c:	10800017 	ldw	r2,0(r2)
   4f220:	10800304 	addi	r2,r2,12
   4f224:	e0fffc17 	ldw	r3,-16(fp)
   4f228:	18c00117 	ldw	r3,4(r3)
   4f22c:	10c00035 	stwio	r3,0(r2)
   4f230:	e0bff717 	ldw	r2,-36(fp)
   4f234:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f238:	e0bffb17 	ldw	r2,-20(fp)
   4f23c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   4f240:	e0fffe17 	ldw	r3,-8(fp)
   4f244:	e0bff417 	ldw	r2,-48(fp)
   4f248:	1885c83a 	sub	r2,r3,r2
}
   4f24c:	e037883a 	mov	sp,fp
   4f250:	dfc00117 	ldw	ra,4(sp)
   4f254:	df000017 	ldw	fp,0(sp)
   4f258:	dec00204 	addi	sp,sp,8
   4f25c:	f800283a 	ret

0004f260 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4f260:	defff504 	addi	sp,sp,-44
   4f264:	df000a15 	stw	fp,40(sp)
   4f268:	df000a04 	addi	fp,sp,40
   4f26c:	e13ffc15 	stw	r4,-16(fp)
   4f270:	e17ffd15 	stw	r5,-12(fp)
   4f274:	e1bffe15 	stw	r6,-8(fp)
   4f278:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4f27c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4f280:	00800174 	movhi	r2,5
   4f284:	10903c04 	addi	r2,r2,16624
   4f288:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4f28c:	10003f26 	beq	r2,zero,4f38c <alt_alarm_start+0x12c>
  {
    if (alarm)
   4f290:	e0bffc17 	ldw	r2,-16(fp)
   4f294:	10003b26 	beq	r2,zero,4f384 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   4f298:	e0bffc17 	ldw	r2,-16(fp)
   4f29c:	e0fffe17 	ldw	r3,-8(fp)
   4f2a0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4f2a4:	e0bffc17 	ldw	r2,-16(fp)
   4f2a8:	e0ffff17 	ldw	r3,-4(fp)
   4f2ac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f2b0:	0005303a 	rdctl	r2,status
   4f2b4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f2b8:	e0fff817 	ldw	r3,-32(fp)
   4f2bc:	00bfff84 	movi	r2,-2
   4f2c0:	1884703a 	and	r2,r3,r2
   4f2c4:	1001703a 	wrctl	status,r2
  
  return context;
   4f2c8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4f2cc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4f2d0:	00800174 	movhi	r2,5
   4f2d4:	10903d04 	addi	r2,r2,16628
   4f2d8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4f2dc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4f2e0:	e0fffd17 	ldw	r3,-12(fp)
   4f2e4:	e0bff617 	ldw	r2,-40(fp)
   4f2e8:	1885883a 	add	r2,r3,r2
   4f2ec:	10c00044 	addi	r3,r2,1
   4f2f0:	e0bffc17 	ldw	r2,-16(fp)
   4f2f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4f2f8:	e0bffc17 	ldw	r2,-16(fp)
   4f2fc:	10c00217 	ldw	r3,8(r2)
   4f300:	e0bff617 	ldw	r2,-40(fp)
   4f304:	1880042e 	bgeu	r3,r2,4f318 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   4f308:	e0bffc17 	ldw	r2,-16(fp)
   4f30c:	00c00044 	movi	r3,1
   4f310:	10c00405 	stb	r3,16(r2)
   4f314:	00000206 	br	4f320 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   4f318:	e0bffc17 	ldw	r2,-16(fp)
   4f31c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4f320:	e0fffc17 	ldw	r3,-16(fp)
   4f324:	00800174 	movhi	r2,5
   4f328:	10894304 	addi	r2,r2,9484
   4f32c:	e0bff915 	stw	r2,-28(fp)
   4f330:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4f334:	e0bffa17 	ldw	r2,-24(fp)
   4f338:	e0fff917 	ldw	r3,-28(fp)
   4f33c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4f340:	e0bff917 	ldw	r2,-28(fp)
   4f344:	10c00017 	ldw	r3,0(r2)
   4f348:	e0bffa17 	ldw	r2,-24(fp)
   4f34c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4f350:	e0bff917 	ldw	r2,-28(fp)
   4f354:	10800017 	ldw	r2,0(r2)
   4f358:	e0fffa17 	ldw	r3,-24(fp)
   4f35c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4f360:	e0bff917 	ldw	r2,-28(fp)
   4f364:	e0fffa17 	ldw	r3,-24(fp)
   4f368:	10c00015 	stw	r3,0(r2)
   4f36c:	e0bff717 	ldw	r2,-36(fp)
   4f370:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f374:	e0bffb17 	ldw	r2,-20(fp)
   4f378:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4f37c:	0005883a 	mov	r2,zero
   4f380:	00000306 	br	4f390 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   4f384:	00bffa84 	movi	r2,-22
   4f388:	00000106 	br	4f390 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4f38c:	00bfde84 	movi	r2,-134
  }
}
   4f390:	e037883a 	mov	sp,fp
   4f394:	df000017 	ldw	fp,0(sp)
   4f398:	dec00104 	addi	sp,sp,4
   4f39c:	f800283a 	ret

0004f3a0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   4f3a0:	defffa04 	addi	sp,sp,-24
   4f3a4:	dfc00515 	stw	ra,20(sp)
   4f3a8:	df000415 	stw	fp,16(sp)
   4f3ac:	df000404 	addi	fp,sp,16
   4f3b0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   4f3b4:	00800244 	movi	r2,9
   4f3b8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   4f3bc:	e13ffd17 	ldw	r4,-12(fp)
   4f3c0:	014003f4 	movhi	r5,15
   4f3c4:	29509004 	addi	r5,r5,16960
   4f3c8:	004095c0 	call	4095c <__mulsi3>
   4f3cc:	01023c74 	movhi	r4,2289
   4f3d0:	21346004 	addi	r4,r4,-11904
   4f3d4:	100b883a 	mov	r5,r2
   4f3d8:	004094c0 	call	4094c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   4f3dc:	01200034 	movhi	r4,32768
   4f3e0:	213fffc4 	addi	r4,r4,-1
   4f3e4:	100b883a 	mov	r5,r2
   4f3e8:	004094c0 	call	4094c <__udivsi3>
   4f3ec:	e13fff17 	ldw	r4,-4(fp)
   4f3f0:	100b883a 	mov	r5,r2
   4f3f4:	004094c0 	call	4094c <__udivsi3>
   4f3f8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   4f3fc:	e0bffe17 	ldw	r2,-8(fp)
   4f400:	10002a26 	beq	r2,zero,4f4ac <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   4f404:	e03ffc15 	stw	zero,-16(fp)
   4f408:	00001706 	br	4f468 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   4f40c:	00a00034 	movhi	r2,32768
   4f410:	10bfffc4 	addi	r2,r2,-1
   4f414:	10bfffc4 	addi	r2,r2,-1
   4f418:	103ffe1e 	bne	r2,zero,4f414 <__alt_data_end+0xfffd98b4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   4f41c:	e13ffd17 	ldw	r4,-12(fp)
   4f420:	014003f4 	movhi	r5,15
   4f424:	29509004 	addi	r5,r5,16960
   4f428:	004095c0 	call	4095c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   4f42c:	01023c74 	movhi	r4,2289
   4f430:	21346004 	addi	r4,r4,-11904
   4f434:	100b883a 	mov	r5,r2
   4f438:	004094c0 	call	4094c <__udivsi3>
   4f43c:	01200034 	movhi	r4,32768
   4f440:	213fffc4 	addi	r4,r4,-1
   4f444:	100b883a 	mov	r5,r2
   4f448:	004094c0 	call	4094c <__udivsi3>
   4f44c:	1007883a 	mov	r3,r2
   4f450:	e0bfff17 	ldw	r2,-4(fp)
   4f454:	10c5c83a 	sub	r2,r2,r3
   4f458:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   4f45c:	e0bffc17 	ldw	r2,-16(fp)
   4f460:	10800044 	addi	r2,r2,1
   4f464:	e0bffc15 	stw	r2,-16(fp)
   4f468:	e0fffc17 	ldw	r3,-16(fp)
   4f46c:	e0bffe17 	ldw	r2,-8(fp)
   4f470:	18bfe616 	blt	r3,r2,4f40c <__alt_data_end+0xfffd98ac>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4f474:	e13ffd17 	ldw	r4,-12(fp)
   4f478:	014003f4 	movhi	r5,15
   4f47c:	29509004 	addi	r5,r5,16960
   4f480:	004095c0 	call	4095c <__mulsi3>
   4f484:	01023c74 	movhi	r4,2289
   4f488:	21346004 	addi	r4,r4,-11904
   4f48c:	100b883a 	mov	r5,r2
   4f490:	004094c0 	call	4094c <__udivsi3>
   4f494:	1009883a 	mov	r4,r2
   4f498:	e17fff17 	ldw	r5,-4(fp)
   4f49c:	004095c0 	call	4095c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4f4a0:	10bfffc4 	addi	r2,r2,-1
   4f4a4:	103ffe1e 	bne	r2,zero,4f4a0 <__alt_data_end+0xfffd9940>
   4f4a8:	00000d06 	br	4f4e0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4f4ac:	e13ffd17 	ldw	r4,-12(fp)
   4f4b0:	014003f4 	movhi	r5,15
   4f4b4:	29509004 	addi	r5,r5,16960
   4f4b8:	004095c0 	call	4095c <__mulsi3>
   4f4bc:	01023c74 	movhi	r4,2289
   4f4c0:	21346004 	addi	r4,r4,-11904
   4f4c4:	100b883a 	mov	r5,r2
   4f4c8:	004094c0 	call	4094c <__udivsi3>
   4f4cc:	1009883a 	mov	r4,r2
   4f4d0:	e17fff17 	ldw	r5,-4(fp)
   4f4d4:	004095c0 	call	4095c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4f4d8:	10bfffc4 	addi	r2,r2,-1
   4f4dc:	00bffe16 	blt	zero,r2,4f4d8 <__alt_data_end+0xfffd9978>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   4f4e0:	0005883a 	mov	r2,zero
}
   4f4e4:	e037883a 	mov	sp,fp
   4f4e8:	dfc00117 	ldw	ra,4(sp)
   4f4ec:	df000017 	ldw	fp,0(sp)
   4f4f0:	dec00204 	addi	sp,sp,8
   4f4f4:	f800283a 	ret

0004f4f8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4f4f8:	deffff04 	addi	sp,sp,-4
   4f4fc:	df000015 	stw	fp,0(sp)
   4f500:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4f504:	e037883a 	mov	sp,fp
   4f508:	df000017 	ldw	fp,0(sp)
   4f50c:	dec00104 	addi	sp,sp,4
   4f510:	f800283a 	ret

0004f514 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4f514:	defffe04 	addi	sp,sp,-8
   4f518:	dfc00115 	stw	ra,4(sp)
   4f51c:	df000015 	stw	fp,0(sp)
   4f520:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4f524:	00800174 	movhi	r2,5
   4f528:	10894004 	addi	r2,r2,9472
   4f52c:	10800017 	ldw	r2,0(r2)
   4f530:	10000526 	beq	r2,zero,4f548 <alt_get_errno+0x34>
   4f534:	00800174 	movhi	r2,5
   4f538:	10894004 	addi	r2,r2,9472
   4f53c:	10800017 	ldw	r2,0(r2)
   4f540:	103ee83a 	callr	r2
   4f544:	00000206 	br	4f550 <alt_get_errno+0x3c>
   4f548:	00800174 	movhi	r2,5
   4f54c:	10903704 	addi	r2,r2,16604
}
   4f550:	e037883a 	mov	sp,fp
   4f554:	dfc00117 	ldw	ra,4(sp)
   4f558:	df000017 	ldw	fp,0(sp)
   4f55c:	dec00204 	addi	sp,sp,8
   4f560:	f800283a 	ret

0004f564 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4f564:	defffa04 	addi	sp,sp,-24
   4f568:	dfc00515 	stw	ra,20(sp)
   4f56c:	df000415 	stw	fp,16(sp)
   4f570:	df000404 	addi	fp,sp,16
   4f574:	e13ffe15 	stw	r4,-8(fp)
   4f578:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4f57c:	e0bffe17 	ldw	r2,-8(fp)
   4f580:	10000326 	beq	r2,zero,4f590 <alt_dev_llist_insert+0x2c>
   4f584:	e0bffe17 	ldw	r2,-8(fp)
   4f588:	10800217 	ldw	r2,8(r2)
   4f58c:	1000061e 	bne	r2,zero,4f5a8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   4f590:	004f5140 	call	4f514 <alt_get_errno>
   4f594:	1007883a 	mov	r3,r2
   4f598:	00800584 	movi	r2,22
   4f59c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4f5a0:	00bffa84 	movi	r2,-22
   4f5a4:	00001306 	br	4f5f4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4f5a8:	e0bffe17 	ldw	r2,-8(fp)
   4f5ac:	e0ffff17 	ldw	r3,-4(fp)
   4f5b0:	e0fffc15 	stw	r3,-16(fp)
   4f5b4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4f5b8:	e0bffd17 	ldw	r2,-12(fp)
   4f5bc:	e0fffc17 	ldw	r3,-16(fp)
   4f5c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4f5c4:	e0bffc17 	ldw	r2,-16(fp)
   4f5c8:	10c00017 	ldw	r3,0(r2)
   4f5cc:	e0bffd17 	ldw	r2,-12(fp)
   4f5d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4f5d4:	e0bffc17 	ldw	r2,-16(fp)
   4f5d8:	10800017 	ldw	r2,0(r2)
   4f5dc:	e0fffd17 	ldw	r3,-12(fp)
   4f5e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4f5e4:	e0bffc17 	ldw	r2,-16(fp)
   4f5e8:	e0fffd17 	ldw	r3,-12(fp)
   4f5ec:	10c00015 	stw	r3,0(r2)

  return 0;  
   4f5f0:	0005883a 	mov	r2,zero
}
   4f5f4:	e037883a 	mov	sp,fp
   4f5f8:	dfc00117 	ldw	ra,4(sp)
   4f5fc:	df000017 	ldw	fp,0(sp)
   4f600:	dec00204 	addi	sp,sp,8
   4f604:	f800283a 	ret

0004f608 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4f608:	defffd04 	addi	sp,sp,-12
   4f60c:	dfc00215 	stw	ra,8(sp)
   4f610:	df000115 	stw	fp,4(sp)
   4f614:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4f618:	00800174 	movhi	r2,5
   4f61c:	10818604 	addi	r2,r2,1560
   4f620:	e0bfff15 	stw	r2,-4(fp)
   4f624:	00000606 	br	4f640 <_do_ctors+0x38>
        (*ctor) (); 
   4f628:	e0bfff17 	ldw	r2,-4(fp)
   4f62c:	10800017 	ldw	r2,0(r2)
   4f630:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4f634:	e0bfff17 	ldw	r2,-4(fp)
   4f638:	10bfff04 	addi	r2,r2,-4
   4f63c:	e0bfff15 	stw	r2,-4(fp)
   4f640:	e0ffff17 	ldw	r3,-4(fp)
   4f644:	00800174 	movhi	r2,5
   4f648:	10818704 	addi	r2,r2,1564
   4f64c:	18bff62e 	bgeu	r3,r2,4f628 <__alt_data_end+0xfffd9ac8>
        (*ctor) (); 
}
   4f650:	e037883a 	mov	sp,fp
   4f654:	dfc00117 	ldw	ra,4(sp)
   4f658:	df000017 	ldw	fp,0(sp)
   4f65c:	dec00204 	addi	sp,sp,8
   4f660:	f800283a 	ret

0004f664 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4f664:	defffd04 	addi	sp,sp,-12
   4f668:	dfc00215 	stw	ra,8(sp)
   4f66c:	df000115 	stw	fp,4(sp)
   4f670:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4f674:	00800174 	movhi	r2,5
   4f678:	10818604 	addi	r2,r2,1560
   4f67c:	e0bfff15 	stw	r2,-4(fp)
   4f680:	00000606 	br	4f69c <_do_dtors+0x38>
        (*dtor) (); 
   4f684:	e0bfff17 	ldw	r2,-4(fp)
   4f688:	10800017 	ldw	r2,0(r2)
   4f68c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4f690:	e0bfff17 	ldw	r2,-4(fp)
   4f694:	10bfff04 	addi	r2,r2,-4
   4f698:	e0bfff15 	stw	r2,-4(fp)
   4f69c:	e0ffff17 	ldw	r3,-4(fp)
   4f6a0:	00800174 	movhi	r2,5
   4f6a4:	10818704 	addi	r2,r2,1564
   4f6a8:	18bff62e 	bgeu	r3,r2,4f684 <__alt_data_end+0xfffd9b24>
        (*dtor) (); 
}
   4f6ac:	e037883a 	mov	sp,fp
   4f6b0:	dfc00117 	ldw	ra,4(sp)
   4f6b4:	df000017 	ldw	fp,0(sp)
   4f6b8:	dec00204 	addi	sp,sp,8
   4f6bc:	f800283a 	ret

0004f6c0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4f6c0:	deffff04 	addi	sp,sp,-4
   4f6c4:	df000015 	stw	fp,0(sp)
   4f6c8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   4f6cc:	e037883a 	mov	sp,fp
   4f6d0:	df000017 	ldw	fp,0(sp)
   4f6d4:	dec00104 	addi	sp,sp,4
   4f6d8:	f800283a 	ret

0004f6dc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4f6dc:	defff904 	addi	sp,sp,-28
   4f6e0:	dfc00615 	stw	ra,24(sp)
   4f6e4:	df000515 	stw	fp,20(sp)
   4f6e8:	df000504 	addi	fp,sp,20
   4f6ec:	e13ffc15 	stw	r4,-16(fp)
   4f6f0:	e17ffd15 	stw	r5,-12(fp)
   4f6f4:	e1bffe15 	stw	r6,-8(fp)
   4f6f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4f6fc:	e0800217 	ldw	r2,8(fp)
   4f700:	d8800015 	stw	r2,0(sp)
   4f704:	e13ffc17 	ldw	r4,-16(fp)
   4f708:	e17ffd17 	ldw	r5,-12(fp)
   4f70c:	e1bffe17 	ldw	r6,-8(fp)
   4f710:	e1ffff17 	ldw	r7,-4(fp)
   4f714:	004f8bc0 	call	4f8bc <alt_iic_isr_register>
}  
   4f718:	e037883a 	mov	sp,fp
   4f71c:	dfc00117 	ldw	ra,4(sp)
   4f720:	df000017 	ldw	fp,0(sp)
   4f724:	dec00204 	addi	sp,sp,8
   4f728:	f800283a 	ret

0004f72c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4f72c:	defff904 	addi	sp,sp,-28
   4f730:	df000615 	stw	fp,24(sp)
   4f734:	df000604 	addi	fp,sp,24
   4f738:	e13ffe15 	stw	r4,-8(fp)
   4f73c:	e17fff15 	stw	r5,-4(fp)
   4f740:	e0bfff17 	ldw	r2,-4(fp)
   4f744:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f748:	0005303a 	rdctl	r2,status
   4f74c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f750:	e0fffb17 	ldw	r3,-20(fp)
   4f754:	00bfff84 	movi	r2,-2
   4f758:	1884703a 	and	r2,r3,r2
   4f75c:	1001703a 	wrctl	status,r2
  
  return context;
   4f760:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4f764:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4f768:	e0bffa17 	ldw	r2,-24(fp)
   4f76c:	00c00044 	movi	r3,1
   4f770:	1884983a 	sll	r2,r3,r2
   4f774:	1007883a 	mov	r3,r2
   4f778:	00800174 	movhi	r2,5
   4f77c:	10903b04 	addi	r2,r2,16620
   4f780:	10800017 	ldw	r2,0(r2)
   4f784:	1886b03a 	or	r3,r3,r2
   4f788:	00800174 	movhi	r2,5
   4f78c:	10903b04 	addi	r2,r2,16620
   4f790:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4f794:	00800174 	movhi	r2,5
   4f798:	10903b04 	addi	r2,r2,16620
   4f79c:	10800017 	ldw	r2,0(r2)
   4f7a0:	100170fa 	wrctl	ienable,r2
   4f7a4:	e0bffc17 	ldw	r2,-16(fp)
   4f7a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f7ac:	e0bffd17 	ldw	r2,-12(fp)
   4f7b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4f7b4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4f7b8:	0001883a 	nop
}
   4f7bc:	e037883a 	mov	sp,fp
   4f7c0:	df000017 	ldw	fp,0(sp)
   4f7c4:	dec00104 	addi	sp,sp,4
   4f7c8:	f800283a 	ret

0004f7cc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4f7cc:	defff904 	addi	sp,sp,-28
   4f7d0:	df000615 	stw	fp,24(sp)
   4f7d4:	df000604 	addi	fp,sp,24
   4f7d8:	e13ffe15 	stw	r4,-8(fp)
   4f7dc:	e17fff15 	stw	r5,-4(fp)
   4f7e0:	e0bfff17 	ldw	r2,-4(fp)
   4f7e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f7e8:	0005303a 	rdctl	r2,status
   4f7ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f7f0:	e0fffb17 	ldw	r3,-20(fp)
   4f7f4:	00bfff84 	movi	r2,-2
   4f7f8:	1884703a 	and	r2,r3,r2
   4f7fc:	1001703a 	wrctl	status,r2
  
  return context;
   4f800:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4f804:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4f808:	e0bffa17 	ldw	r2,-24(fp)
   4f80c:	00c00044 	movi	r3,1
   4f810:	1884983a 	sll	r2,r3,r2
   4f814:	0084303a 	nor	r2,zero,r2
   4f818:	1007883a 	mov	r3,r2
   4f81c:	00800174 	movhi	r2,5
   4f820:	10903b04 	addi	r2,r2,16620
   4f824:	10800017 	ldw	r2,0(r2)
   4f828:	1886703a 	and	r3,r3,r2
   4f82c:	00800174 	movhi	r2,5
   4f830:	10903b04 	addi	r2,r2,16620
   4f834:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4f838:	00800174 	movhi	r2,5
   4f83c:	10903b04 	addi	r2,r2,16620
   4f840:	10800017 	ldw	r2,0(r2)
   4f844:	100170fa 	wrctl	ienable,r2
   4f848:	e0bffc17 	ldw	r2,-16(fp)
   4f84c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f850:	e0bffd17 	ldw	r2,-12(fp)
   4f854:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4f858:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   4f85c:	0001883a 	nop
}
   4f860:	e037883a 	mov	sp,fp
   4f864:	df000017 	ldw	fp,0(sp)
   4f868:	dec00104 	addi	sp,sp,4
   4f86c:	f800283a 	ret

0004f870 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4f870:	defffc04 	addi	sp,sp,-16
   4f874:	df000315 	stw	fp,12(sp)
   4f878:	df000304 	addi	fp,sp,12
   4f87c:	e13ffe15 	stw	r4,-8(fp)
   4f880:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4f884:	000530fa 	rdctl	r2,ienable
   4f888:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4f88c:	e0bfff17 	ldw	r2,-4(fp)
   4f890:	00c00044 	movi	r3,1
   4f894:	1884983a 	sll	r2,r3,r2
   4f898:	1007883a 	mov	r3,r2
   4f89c:	e0bffd17 	ldw	r2,-12(fp)
   4f8a0:	1884703a 	and	r2,r3,r2
   4f8a4:	1004c03a 	cmpne	r2,r2,zero
   4f8a8:	10803fcc 	andi	r2,r2,255
}
   4f8ac:	e037883a 	mov	sp,fp
   4f8b0:	df000017 	ldw	fp,0(sp)
   4f8b4:	dec00104 	addi	sp,sp,4
   4f8b8:	f800283a 	ret

0004f8bc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4f8bc:	defff504 	addi	sp,sp,-44
   4f8c0:	dfc00a15 	stw	ra,40(sp)
   4f8c4:	df000915 	stw	fp,36(sp)
   4f8c8:	df000904 	addi	fp,sp,36
   4f8cc:	e13ffc15 	stw	r4,-16(fp)
   4f8d0:	e17ffd15 	stw	r5,-12(fp)
   4f8d4:	e1bffe15 	stw	r6,-8(fp)
   4f8d8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4f8dc:	00bffa84 	movi	r2,-22
   4f8e0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4f8e4:	e0bffd17 	ldw	r2,-12(fp)
   4f8e8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4f8ec:	e0bff817 	ldw	r2,-32(fp)
   4f8f0:	10800808 	cmpgei	r2,r2,32
   4f8f4:	1000271e 	bne	r2,zero,4f994 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f8f8:	0005303a 	rdctl	r2,status
   4f8fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f900:	e0fffa17 	ldw	r3,-24(fp)
   4f904:	00bfff84 	movi	r2,-2
   4f908:	1884703a 	and	r2,r3,r2
   4f90c:	1001703a 	wrctl	status,r2
  
  return context;
   4f910:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4f914:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   4f918:	00800174 	movhi	r2,5
   4f91c:	1090bf04 	addi	r2,r2,17148
   4f920:	e0fff817 	ldw	r3,-32(fp)
   4f924:	180690fa 	slli	r3,r3,3
   4f928:	10c5883a 	add	r2,r2,r3
   4f92c:	e0fffe17 	ldw	r3,-8(fp)
   4f930:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4f934:	00800174 	movhi	r2,5
   4f938:	1090bf04 	addi	r2,r2,17148
   4f93c:	e0fff817 	ldw	r3,-32(fp)
   4f940:	180690fa 	slli	r3,r3,3
   4f944:	10c5883a 	add	r2,r2,r3
   4f948:	10800104 	addi	r2,r2,4
   4f94c:	e0ffff17 	ldw	r3,-4(fp)
   4f950:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4f954:	e0bffe17 	ldw	r2,-8(fp)
   4f958:	10000526 	beq	r2,zero,4f970 <alt_iic_isr_register+0xb4>
   4f95c:	e0bff817 	ldw	r2,-32(fp)
   4f960:	e13ffc17 	ldw	r4,-16(fp)
   4f964:	100b883a 	mov	r5,r2
   4f968:	004f72c0 	call	4f72c <alt_ic_irq_enable>
   4f96c:	00000406 	br	4f980 <alt_iic_isr_register+0xc4>
   4f970:	e0bff817 	ldw	r2,-32(fp)
   4f974:	e13ffc17 	ldw	r4,-16(fp)
   4f978:	100b883a 	mov	r5,r2
   4f97c:	004f7cc0 	call	4f7cc <alt_ic_irq_disable>
   4f980:	e0bff715 	stw	r2,-36(fp)
   4f984:	e0bff917 	ldw	r2,-28(fp)
   4f988:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f98c:	e0bffb17 	ldw	r2,-20(fp)
   4f990:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4f994:	e0bff717 	ldw	r2,-36(fp)
}
   4f998:	e037883a 	mov	sp,fp
   4f99c:	dfc00117 	ldw	ra,4(sp)
   4f9a0:	df000017 	ldw	fp,0(sp)
   4f9a4:	dec00204 	addi	sp,sp,8
   4f9a8:	f800283a 	ret

0004f9ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4f9ac:	defff804 	addi	sp,sp,-32
   4f9b0:	dfc00715 	stw	ra,28(sp)
   4f9b4:	df000615 	stw	fp,24(sp)
   4f9b8:	dc000515 	stw	r16,20(sp)
   4f9bc:	df000604 	addi	fp,sp,24
   4f9c0:	e13ffb15 	stw	r4,-20(fp)
   4f9c4:	e17ffc15 	stw	r5,-16(fp)
   4f9c8:	e1bffd15 	stw	r6,-12(fp)
   4f9cc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   4f9d0:	e13ffc17 	ldw	r4,-16(fp)
   4f9d4:	e17ffd17 	ldw	r5,-12(fp)
   4f9d8:	e1bffe17 	ldw	r6,-8(fp)
   4f9dc:	004fc480 	call	4fc48 <open>
   4f9e0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   4f9e4:	e0bffa17 	ldw	r2,-24(fp)
   4f9e8:	10002216 	blt	r2,zero,4fa74 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   4f9ec:	04000174 	movhi	r16,5
   4f9f0:	84048c04 	addi	r16,r16,4656
   4f9f4:	e0bffa17 	ldw	r2,-24(fp)
   4f9f8:	1009883a 	mov	r4,r2
   4f9fc:	01400304 	movi	r5,12
   4fa00:	004095c0 	call	4095c <__mulsi3>
   4fa04:	8085883a 	add	r2,r16,r2
   4fa08:	10c00017 	ldw	r3,0(r2)
   4fa0c:	e0bffb17 	ldw	r2,-20(fp)
   4fa10:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4fa14:	04000174 	movhi	r16,5
   4fa18:	84048c04 	addi	r16,r16,4656
   4fa1c:	e0bffa17 	ldw	r2,-24(fp)
   4fa20:	1009883a 	mov	r4,r2
   4fa24:	01400304 	movi	r5,12
   4fa28:	004095c0 	call	4095c <__mulsi3>
   4fa2c:	8085883a 	add	r2,r16,r2
   4fa30:	10800104 	addi	r2,r2,4
   4fa34:	10c00017 	ldw	r3,0(r2)
   4fa38:	e0bffb17 	ldw	r2,-20(fp)
   4fa3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4fa40:	04000174 	movhi	r16,5
   4fa44:	84048c04 	addi	r16,r16,4656
   4fa48:	e0bffa17 	ldw	r2,-24(fp)
   4fa4c:	1009883a 	mov	r4,r2
   4fa50:	01400304 	movi	r5,12
   4fa54:	004095c0 	call	4095c <__mulsi3>
   4fa58:	8085883a 	add	r2,r16,r2
   4fa5c:	10800204 	addi	r2,r2,8
   4fa60:	10c00017 	ldw	r3,0(r2)
   4fa64:	e0bffb17 	ldw	r2,-20(fp)
   4fa68:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4fa6c:	e13ffa17 	ldw	r4,-24(fp)
   4fa70:	004da900 	call	4da90 <alt_release_fd>
  }
} 
   4fa74:	e6ffff04 	addi	sp,fp,-4
   4fa78:	dfc00217 	ldw	ra,8(sp)
   4fa7c:	df000117 	ldw	fp,4(sp)
   4fa80:	dc000017 	ldw	r16,0(sp)
   4fa84:	dec00304 	addi	sp,sp,12
   4fa88:	f800283a 	ret

0004fa8c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4fa8c:	defffb04 	addi	sp,sp,-20
   4fa90:	dfc00415 	stw	ra,16(sp)
   4fa94:	df000315 	stw	fp,12(sp)
   4fa98:	df000304 	addi	fp,sp,12
   4fa9c:	e13ffd15 	stw	r4,-12(fp)
   4faa0:	e17ffe15 	stw	r5,-8(fp)
   4faa4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4faa8:	01000174 	movhi	r4,5
   4faac:	21048f04 	addi	r4,r4,4668
   4fab0:	e17ffd17 	ldw	r5,-12(fp)
   4fab4:	01800044 	movi	r6,1
   4fab8:	01c07fc4 	movi	r7,511
   4fabc:	004f9ac0 	call	4f9ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4fac0:	01000174 	movhi	r4,5
   4fac4:	21048c04 	addi	r4,r4,4656
   4fac8:	e17ffe17 	ldw	r5,-8(fp)
   4facc:	000d883a 	mov	r6,zero
   4fad0:	01c07fc4 	movi	r7,511
   4fad4:	004f9ac0 	call	4f9ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4fad8:	01000174 	movhi	r4,5
   4fadc:	21049204 	addi	r4,r4,4680
   4fae0:	e17fff17 	ldw	r5,-4(fp)
   4fae4:	01800044 	movi	r6,1
   4fae8:	01c07fc4 	movi	r7,511
   4faec:	004f9ac0 	call	4f9ac <alt_open_fd>
}  
   4faf0:	e037883a 	mov	sp,fp
   4faf4:	dfc00117 	ldw	ra,4(sp)
   4faf8:	df000017 	ldw	fp,0(sp)
   4fafc:	dec00204 	addi	sp,sp,8
   4fb00:	f800283a 	ret

0004fb04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4fb04:	defffe04 	addi	sp,sp,-8
   4fb08:	dfc00115 	stw	ra,4(sp)
   4fb0c:	df000015 	stw	fp,0(sp)
   4fb10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4fb14:	00800174 	movhi	r2,5
   4fb18:	10894004 	addi	r2,r2,9472
   4fb1c:	10800017 	ldw	r2,0(r2)
   4fb20:	10000526 	beq	r2,zero,4fb38 <alt_get_errno+0x34>
   4fb24:	00800174 	movhi	r2,5
   4fb28:	10894004 	addi	r2,r2,9472
   4fb2c:	10800017 	ldw	r2,0(r2)
   4fb30:	103ee83a 	callr	r2
   4fb34:	00000206 	br	4fb40 <alt_get_errno+0x3c>
   4fb38:	00800174 	movhi	r2,5
   4fb3c:	10903704 	addi	r2,r2,16604
}
   4fb40:	e037883a 	mov	sp,fp
   4fb44:	dfc00117 	ldw	ra,4(sp)
   4fb48:	df000017 	ldw	fp,0(sp)
   4fb4c:	dec00204 	addi	sp,sp,8
   4fb50:	f800283a 	ret

0004fb54 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4fb54:	defffb04 	addi	sp,sp,-20
   4fb58:	dfc00415 	stw	ra,16(sp)
   4fb5c:	df000315 	stw	fp,12(sp)
   4fb60:	dc000215 	stw	r16,8(sp)
   4fb64:	df000304 	addi	fp,sp,12
   4fb68:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4fb6c:	e0bffe17 	ldw	r2,-8(fp)
   4fb70:	10800217 	ldw	r2,8(r2)
   4fb74:	10d00034 	orhi	r3,r2,16384
   4fb78:	e0bffe17 	ldw	r2,-8(fp)
   4fb7c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4fb80:	e03ffd15 	stw	zero,-12(fp)
   4fb84:	00002306 	br	4fc14 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4fb88:	04000174 	movhi	r16,5
   4fb8c:	84048c04 	addi	r16,r16,4656
   4fb90:	e0bffd17 	ldw	r2,-12(fp)
   4fb94:	1009883a 	mov	r4,r2
   4fb98:	01400304 	movi	r5,12
   4fb9c:	004095c0 	call	4095c <__mulsi3>
   4fba0:	8085883a 	add	r2,r16,r2
   4fba4:	10c00017 	ldw	r3,0(r2)
   4fba8:	e0bffe17 	ldw	r2,-8(fp)
   4fbac:	10800017 	ldw	r2,0(r2)
   4fbb0:	1880151e 	bne	r3,r2,4fc08 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4fbb4:	04000174 	movhi	r16,5
   4fbb8:	84048c04 	addi	r16,r16,4656
   4fbbc:	e0bffd17 	ldw	r2,-12(fp)
   4fbc0:	1009883a 	mov	r4,r2
   4fbc4:	01400304 	movi	r5,12
   4fbc8:	004095c0 	call	4095c <__mulsi3>
   4fbcc:	8085883a 	add	r2,r16,r2
   4fbd0:	10800204 	addi	r2,r2,8
   4fbd4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4fbd8:	10000b0e 	bge	r2,zero,4fc08 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4fbdc:	e13ffd17 	ldw	r4,-12(fp)
   4fbe0:	01400304 	movi	r5,12
   4fbe4:	004095c0 	call	4095c <__mulsi3>
   4fbe8:	1007883a 	mov	r3,r2
   4fbec:	00800174 	movhi	r2,5
   4fbf0:	10848c04 	addi	r2,r2,4656
   4fbf4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4fbf8:	e0bffe17 	ldw	r2,-8(fp)
   4fbfc:	18800226 	beq	r3,r2,4fc08 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4fc00:	00bffcc4 	movi	r2,-13
   4fc04:	00000a06 	br	4fc30 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4fc08:	e0bffd17 	ldw	r2,-12(fp)
   4fc0c:	10800044 	addi	r2,r2,1
   4fc10:	e0bffd15 	stw	r2,-12(fp)
   4fc14:	00800174 	movhi	r2,5
   4fc18:	10893f04 	addi	r2,r2,9468
   4fc1c:	10800017 	ldw	r2,0(r2)
   4fc20:	1007883a 	mov	r3,r2
   4fc24:	e0bffd17 	ldw	r2,-12(fp)
   4fc28:	18bfd72e 	bgeu	r3,r2,4fb88 <__alt_data_end+0xfffda028>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4fc2c:	0005883a 	mov	r2,zero
}
   4fc30:	e6ffff04 	addi	sp,fp,-4
   4fc34:	dfc00217 	ldw	ra,8(sp)
   4fc38:	df000117 	ldw	fp,4(sp)
   4fc3c:	dc000017 	ldw	r16,0(sp)
   4fc40:	dec00304 	addi	sp,sp,12
   4fc44:	f800283a 	ret

0004fc48 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4fc48:	defff604 	addi	sp,sp,-40
   4fc4c:	dfc00915 	stw	ra,36(sp)
   4fc50:	df000815 	stw	fp,32(sp)
   4fc54:	df000804 	addi	fp,sp,32
   4fc58:	e13ffd15 	stw	r4,-12(fp)
   4fc5c:	e17ffe15 	stw	r5,-8(fp)
   4fc60:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4fc64:	00bfffc4 	movi	r2,-1
   4fc68:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4fc6c:	00bffb44 	movi	r2,-19
   4fc70:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4fc74:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4fc78:	e13ffd17 	ldw	r4,-12(fp)
   4fc7c:	01400174 	movhi	r5,5
   4fc80:	29493d04 	addi	r5,r5,9460
   4fc84:	004ff640 	call	4ff64 <alt_find_dev>
   4fc88:	e0bff815 	stw	r2,-32(fp)
   4fc8c:	e0bff817 	ldw	r2,-32(fp)
   4fc90:	1000051e 	bne	r2,zero,4fca8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4fc94:	e13ffd17 	ldw	r4,-12(fp)
   4fc98:	004fff40 	call	4fff4 <alt_find_file>
   4fc9c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4fca0:	00800044 	movi	r2,1
   4fca4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4fca8:	e0bff817 	ldw	r2,-32(fp)
   4fcac:	10002b26 	beq	r2,zero,4fd5c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4fcb0:	e13ff817 	ldw	r4,-32(fp)
   4fcb4:	00501080 	call	50108 <alt_get_fd>
   4fcb8:	e0bff915 	stw	r2,-28(fp)
   4fcbc:	e0bff917 	ldw	r2,-28(fp)
   4fcc0:	1000030e 	bge	r2,zero,4fcd0 <open+0x88>
    {
      status = index;
   4fcc4:	e0bff917 	ldw	r2,-28(fp)
   4fcc8:	e0bffa15 	stw	r2,-24(fp)
   4fccc:	00002506 	br	4fd64 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   4fcd0:	e13ff917 	ldw	r4,-28(fp)
   4fcd4:	01400304 	movi	r5,12
   4fcd8:	004095c0 	call	4095c <__mulsi3>
   4fcdc:	1007883a 	mov	r3,r2
   4fce0:	00800174 	movhi	r2,5
   4fce4:	10848c04 	addi	r2,r2,4656
   4fce8:	1885883a 	add	r2,r3,r2
   4fcec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4fcf0:	e0fffe17 	ldw	r3,-8(fp)
   4fcf4:	00900034 	movhi	r2,16384
   4fcf8:	10bfffc4 	addi	r2,r2,-1
   4fcfc:	1886703a 	and	r3,r3,r2
   4fd00:	e0bffc17 	ldw	r2,-16(fp)
   4fd04:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4fd08:	e0bffb17 	ldw	r2,-20(fp)
   4fd0c:	1000051e 	bne	r2,zero,4fd24 <open+0xdc>
   4fd10:	e13ffc17 	ldw	r4,-16(fp)
   4fd14:	004fb540 	call	4fb54 <alt_file_locked>
   4fd18:	e0bffa15 	stw	r2,-24(fp)
   4fd1c:	e0bffa17 	ldw	r2,-24(fp)
   4fd20:	10001016 	blt	r2,zero,4fd64 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4fd24:	e0bff817 	ldw	r2,-32(fp)
   4fd28:	10800317 	ldw	r2,12(r2)
   4fd2c:	10000826 	beq	r2,zero,4fd50 <open+0x108>
   4fd30:	e0bff817 	ldw	r2,-32(fp)
   4fd34:	10800317 	ldw	r2,12(r2)
   4fd38:	e13ffc17 	ldw	r4,-16(fp)
   4fd3c:	e17ffd17 	ldw	r5,-12(fp)
   4fd40:	e1bffe17 	ldw	r6,-8(fp)
   4fd44:	e1ffff17 	ldw	r7,-4(fp)
   4fd48:	103ee83a 	callr	r2
   4fd4c:	00000106 	br	4fd54 <open+0x10c>
   4fd50:	0005883a 	mov	r2,zero
   4fd54:	e0bffa15 	stw	r2,-24(fp)
   4fd58:	00000206 	br	4fd64 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4fd5c:	00bffb44 	movi	r2,-19
   4fd60:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4fd64:	e0bffa17 	ldw	r2,-24(fp)
   4fd68:	1000090e 	bge	r2,zero,4fd90 <open+0x148>
  {
    alt_release_fd (index);  
   4fd6c:	e13ff917 	ldw	r4,-28(fp)
   4fd70:	004da900 	call	4da90 <alt_release_fd>
    ALT_ERRNO = -status;
   4fd74:	004fb040 	call	4fb04 <alt_get_errno>
   4fd78:	1007883a 	mov	r3,r2
   4fd7c:	e0bffa17 	ldw	r2,-24(fp)
   4fd80:	0085c83a 	sub	r2,zero,r2
   4fd84:	18800015 	stw	r2,0(r3)
    return -1;
   4fd88:	00bfffc4 	movi	r2,-1
   4fd8c:	00000106 	br	4fd94 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   4fd90:	e0bff917 	ldw	r2,-28(fp)
}
   4fd94:	e037883a 	mov	sp,fp
   4fd98:	dfc00117 	ldw	ra,4(sp)
   4fd9c:	df000017 	ldw	fp,0(sp)
   4fda0:	dec00204 	addi	sp,sp,8
   4fda4:	f800283a 	ret

0004fda8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4fda8:	defffa04 	addi	sp,sp,-24
   4fdac:	df000515 	stw	fp,20(sp)
   4fdb0:	df000504 	addi	fp,sp,20
   4fdb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fdb8:	0005303a 	rdctl	r2,status
   4fdbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fdc0:	e0fffc17 	ldw	r3,-16(fp)
   4fdc4:	00bfff84 	movi	r2,-2
   4fdc8:	1884703a 	and	r2,r3,r2
   4fdcc:	1001703a 	wrctl	status,r2
  
  return context;
   4fdd0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4fdd4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4fdd8:	e0bfff17 	ldw	r2,-4(fp)
   4fddc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4fde0:	e0bffd17 	ldw	r2,-12(fp)
   4fde4:	10800017 	ldw	r2,0(r2)
   4fde8:	e0fffd17 	ldw	r3,-12(fp)
   4fdec:	18c00117 	ldw	r3,4(r3)
   4fdf0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4fdf4:	e0bffd17 	ldw	r2,-12(fp)
   4fdf8:	10800117 	ldw	r2,4(r2)
   4fdfc:	e0fffd17 	ldw	r3,-12(fp)
   4fe00:	18c00017 	ldw	r3,0(r3)
   4fe04:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4fe08:	e0bffd17 	ldw	r2,-12(fp)
   4fe0c:	e0fffd17 	ldw	r3,-12(fp)
   4fe10:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4fe14:	e0bffd17 	ldw	r2,-12(fp)
   4fe18:	e0fffd17 	ldw	r3,-12(fp)
   4fe1c:	10c00015 	stw	r3,0(r2)
   4fe20:	e0bffb17 	ldw	r2,-20(fp)
   4fe24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4fe28:	e0bffe17 	ldw	r2,-8(fp)
   4fe2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4fe30:	e037883a 	mov	sp,fp
   4fe34:	df000017 	ldw	fp,0(sp)
   4fe38:	dec00104 	addi	sp,sp,4
   4fe3c:	f800283a 	ret

0004fe40 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4fe40:	defffb04 	addi	sp,sp,-20
   4fe44:	dfc00415 	stw	ra,16(sp)
   4fe48:	df000315 	stw	fp,12(sp)
   4fe4c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4fe50:	d0a00e17 	ldw	r2,-32712(gp)
   4fe54:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4fe58:	d0a70817 	ldw	r2,-25568(gp)
   4fe5c:	10800044 	addi	r2,r2,1
   4fe60:	d0a70815 	stw	r2,-25568(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4fe64:	00002e06 	br	4ff20 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4fe68:	e0bffd17 	ldw	r2,-12(fp)
   4fe6c:	10800017 	ldw	r2,0(r2)
   4fe70:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4fe74:	e0bffd17 	ldw	r2,-12(fp)
   4fe78:	10800403 	ldbu	r2,16(r2)
   4fe7c:	10803fcc 	andi	r2,r2,255
   4fe80:	10000426 	beq	r2,zero,4fe94 <alt_tick+0x54>
   4fe84:	d0a70817 	ldw	r2,-25568(gp)
   4fe88:	1000021e 	bne	r2,zero,4fe94 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4fe8c:	e0bffd17 	ldw	r2,-12(fp)
   4fe90:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4fe94:	e0bffd17 	ldw	r2,-12(fp)
   4fe98:	10800217 	ldw	r2,8(r2)
   4fe9c:	d0e70817 	ldw	r3,-25568(gp)
   4fea0:	18801d36 	bltu	r3,r2,4ff18 <alt_tick+0xd8>
   4fea4:	e0bffd17 	ldw	r2,-12(fp)
   4fea8:	10800403 	ldbu	r2,16(r2)
   4feac:	10803fcc 	andi	r2,r2,255
   4feb0:	1000191e 	bne	r2,zero,4ff18 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4feb4:	e0bffd17 	ldw	r2,-12(fp)
   4feb8:	10800317 	ldw	r2,12(r2)
   4febc:	e0fffd17 	ldw	r3,-12(fp)
   4fec0:	18c00517 	ldw	r3,20(r3)
   4fec4:	1809883a 	mov	r4,r3
   4fec8:	103ee83a 	callr	r2
   4fecc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4fed0:	e0bfff17 	ldw	r2,-4(fp)
   4fed4:	1000031e 	bne	r2,zero,4fee4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4fed8:	e13ffd17 	ldw	r4,-12(fp)
   4fedc:	004fda80 	call	4fda8 <alt_alarm_stop>
   4fee0:	00000d06 	br	4ff18 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4fee4:	e0bffd17 	ldw	r2,-12(fp)
   4fee8:	10c00217 	ldw	r3,8(r2)
   4feec:	e0bfff17 	ldw	r2,-4(fp)
   4fef0:	1887883a 	add	r3,r3,r2
   4fef4:	e0bffd17 	ldw	r2,-12(fp)
   4fef8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4fefc:	e0bffd17 	ldw	r2,-12(fp)
   4ff00:	10c00217 	ldw	r3,8(r2)
   4ff04:	d0a70817 	ldw	r2,-25568(gp)
   4ff08:	1880032e 	bgeu	r3,r2,4ff18 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4ff0c:	e0bffd17 	ldw	r2,-12(fp)
   4ff10:	00c00044 	movi	r3,1
   4ff14:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4ff18:	e0bffe17 	ldw	r2,-8(fp)
   4ff1c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4ff20:	e0fffd17 	ldw	r3,-12(fp)
   4ff24:	d0a00e04 	addi	r2,gp,-32712
   4ff28:	18bfcf1e 	bne	r3,r2,4fe68 <__alt_data_end+0xfffda308>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4ff2c:	0001883a 	nop
}
   4ff30:	e037883a 	mov	sp,fp
   4ff34:	dfc00117 	ldw	ra,4(sp)
   4ff38:	df000017 	ldw	fp,0(sp)
   4ff3c:	dec00204 	addi	sp,sp,8
   4ff40:	f800283a 	ret

0004ff44 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4ff44:	deffff04 	addi	sp,sp,-4
   4ff48:	df000015 	stw	fp,0(sp)
   4ff4c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4ff50:	000170fa 	wrctl	ienable,zero
}
   4ff54:	e037883a 	mov	sp,fp
   4ff58:	df000017 	ldw	fp,0(sp)
   4ff5c:	dec00104 	addi	sp,sp,4
   4ff60:	f800283a 	ret

0004ff64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4ff64:	defffa04 	addi	sp,sp,-24
   4ff68:	dfc00515 	stw	ra,20(sp)
   4ff6c:	df000415 	stw	fp,16(sp)
   4ff70:	df000404 	addi	fp,sp,16
   4ff74:	e13ffe15 	stw	r4,-8(fp)
   4ff78:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4ff7c:	e0bfff17 	ldw	r2,-4(fp)
   4ff80:	10800017 	ldw	r2,0(r2)
   4ff84:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4ff88:	e13ffe17 	ldw	r4,-8(fp)
   4ff8c:	0040b340 	call	40b34 <strlen>
   4ff90:	10800044 	addi	r2,r2,1
   4ff94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4ff98:	00000d06 	br	4ffd0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4ff9c:	e0bffc17 	ldw	r2,-16(fp)
   4ffa0:	10c00217 	ldw	r3,8(r2)
   4ffa4:	e0bffd17 	ldw	r2,-12(fp)
   4ffa8:	1809883a 	mov	r4,r3
   4ffac:	e17ffe17 	ldw	r5,-8(fp)
   4ffb0:	100d883a 	mov	r6,r2
   4ffb4:	00502c40 	call	502c4 <memcmp>
   4ffb8:	1000021e 	bne	r2,zero,4ffc4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4ffbc:	e0bffc17 	ldw	r2,-16(fp)
   4ffc0:	00000706 	br	4ffe0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4ffc4:	e0bffc17 	ldw	r2,-16(fp)
   4ffc8:	10800017 	ldw	r2,0(r2)
   4ffcc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4ffd0:	e0fffc17 	ldw	r3,-16(fp)
   4ffd4:	e0bfff17 	ldw	r2,-4(fp)
   4ffd8:	18bff01e 	bne	r3,r2,4ff9c <__alt_data_end+0xfffda43c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4ffdc:	0005883a 	mov	r2,zero
}
   4ffe0:	e037883a 	mov	sp,fp
   4ffe4:	dfc00117 	ldw	ra,4(sp)
   4ffe8:	df000017 	ldw	fp,0(sp)
   4ffec:	dec00204 	addi	sp,sp,8
   4fff0:	f800283a 	ret

0004fff4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4fff4:	defffb04 	addi	sp,sp,-20
   4fff8:	dfc00415 	stw	ra,16(sp)
   4fffc:	df000315 	stw	fp,12(sp)
   50000:	df000304 	addi	fp,sp,12
   50004:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   50008:	00800174 	movhi	r2,5
   5000c:	10893b04 	addi	r2,r2,9452
   50010:	10800017 	ldw	r2,0(r2)
   50014:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   50018:	00003106 	br	500e0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   5001c:	e0bffd17 	ldw	r2,-12(fp)
   50020:	10800217 	ldw	r2,8(r2)
   50024:	1009883a 	mov	r4,r2
   50028:	0040b340 	call	40b34 <strlen>
   5002c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   50030:	e0bffd17 	ldw	r2,-12(fp)
   50034:	10c00217 	ldw	r3,8(r2)
   50038:	e0bffe17 	ldw	r2,-8(fp)
   5003c:	10bfffc4 	addi	r2,r2,-1
   50040:	1885883a 	add	r2,r3,r2
   50044:	10800003 	ldbu	r2,0(r2)
   50048:	10803fcc 	andi	r2,r2,255
   5004c:	1080201c 	xori	r2,r2,128
   50050:	10bfe004 	addi	r2,r2,-128
   50054:	10800bd8 	cmpnei	r2,r2,47
   50058:	1000031e 	bne	r2,zero,50068 <alt_find_file+0x74>
    {
      len -= 1;
   5005c:	e0bffe17 	ldw	r2,-8(fp)
   50060:	10bfffc4 	addi	r2,r2,-1
   50064:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   50068:	e0bffe17 	ldw	r2,-8(fp)
   5006c:	e0ffff17 	ldw	r3,-4(fp)
   50070:	1885883a 	add	r2,r3,r2
   50074:	10800003 	ldbu	r2,0(r2)
   50078:	10803fcc 	andi	r2,r2,255
   5007c:	1080201c 	xori	r2,r2,128
   50080:	10bfe004 	addi	r2,r2,-128
   50084:	10800be0 	cmpeqi	r2,r2,47
   50088:	1000081e 	bne	r2,zero,500ac <alt_find_file+0xb8>
   5008c:	e0bffe17 	ldw	r2,-8(fp)
   50090:	e0ffff17 	ldw	r3,-4(fp)
   50094:	1885883a 	add	r2,r3,r2
   50098:	10800003 	ldbu	r2,0(r2)
   5009c:	10803fcc 	andi	r2,r2,255
   500a0:	1080201c 	xori	r2,r2,128
   500a4:	10bfe004 	addi	r2,r2,-128
   500a8:	10000a1e 	bne	r2,zero,500d4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   500ac:	e0bffd17 	ldw	r2,-12(fp)
   500b0:	10c00217 	ldw	r3,8(r2)
   500b4:	e0bffe17 	ldw	r2,-8(fp)
   500b8:	1809883a 	mov	r4,r3
   500bc:	e17fff17 	ldw	r5,-4(fp)
   500c0:	100d883a 	mov	r6,r2
   500c4:	00502c40 	call	502c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   500c8:	1000021e 	bne	r2,zero,500d4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   500cc:	e0bffd17 	ldw	r2,-12(fp)
   500d0:	00000806 	br	500f4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   500d4:	e0bffd17 	ldw	r2,-12(fp)
   500d8:	10800017 	ldw	r2,0(r2)
   500dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   500e0:	e0fffd17 	ldw	r3,-12(fp)
   500e4:	00800174 	movhi	r2,5
   500e8:	10893b04 	addi	r2,r2,9452
   500ec:	18bfcb1e 	bne	r3,r2,5001c <__alt_data_end+0xfffda4bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   500f0:	0005883a 	mov	r2,zero
}
   500f4:	e037883a 	mov	sp,fp
   500f8:	dfc00117 	ldw	ra,4(sp)
   500fc:	df000017 	ldw	fp,0(sp)
   50100:	dec00204 	addi	sp,sp,8
   50104:	f800283a 	ret

00050108 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   50108:	defffa04 	addi	sp,sp,-24
   5010c:	dfc00515 	stw	ra,20(sp)
   50110:	df000415 	stw	fp,16(sp)
   50114:	dc000315 	stw	r16,12(sp)
   50118:	df000404 	addi	fp,sp,16
   5011c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   50120:	00bffa04 	movi	r2,-24
   50124:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   50128:	e03ffc15 	stw	zero,-16(fp)
   5012c:	00002106 	br	501b4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   50130:	04000174 	movhi	r16,5
   50134:	84048c04 	addi	r16,r16,4656
   50138:	e0bffc17 	ldw	r2,-16(fp)
   5013c:	1009883a 	mov	r4,r2
   50140:	01400304 	movi	r5,12
   50144:	004095c0 	call	4095c <__mulsi3>
   50148:	8085883a 	add	r2,r16,r2
   5014c:	10800017 	ldw	r2,0(r2)
   50150:	1000151e 	bne	r2,zero,501a8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   50154:	04000174 	movhi	r16,5
   50158:	84048c04 	addi	r16,r16,4656
   5015c:	e0bffc17 	ldw	r2,-16(fp)
   50160:	1009883a 	mov	r4,r2
   50164:	01400304 	movi	r5,12
   50168:	004095c0 	call	4095c <__mulsi3>
   5016c:	8085883a 	add	r2,r16,r2
   50170:	e0fffe17 	ldw	r3,-8(fp)
   50174:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   50178:	00800174 	movhi	r2,5
   5017c:	10893f04 	addi	r2,r2,9468
   50180:	10c00017 	ldw	r3,0(r2)
   50184:	e0bffc17 	ldw	r2,-16(fp)
   50188:	1880040e 	bge	r3,r2,5019c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   5018c:	00800174 	movhi	r2,5
   50190:	10893f04 	addi	r2,r2,9468
   50194:	e0fffc17 	ldw	r3,-16(fp)
   50198:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   5019c:	e0bffc17 	ldw	r2,-16(fp)
   501a0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   501a4:	00000606 	br	501c0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   501a8:	e0bffc17 	ldw	r2,-16(fp)
   501ac:	10800044 	addi	r2,r2,1
   501b0:	e0bffc15 	stw	r2,-16(fp)
   501b4:	e0bffc17 	ldw	r2,-16(fp)
   501b8:	10800810 	cmplti	r2,r2,32
   501bc:	103fdc1e 	bne	r2,zero,50130 <__alt_data_end+0xfffda5d0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   501c0:	e0bffd17 	ldw	r2,-12(fp)
}
   501c4:	e6ffff04 	addi	sp,fp,-4
   501c8:	dfc00217 	ldw	ra,8(sp)
   501cc:	df000117 	ldw	fp,4(sp)
   501d0:	dc000017 	ldw	r16,0(sp)
   501d4:	dec00304 	addi	sp,sp,12
   501d8:	f800283a 	ret

000501dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   501dc:	defffe04 	addi	sp,sp,-8
   501e0:	df000115 	stw	fp,4(sp)
   501e4:	df000104 	addi	fp,sp,4
   501e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   501ec:	e0bfff17 	ldw	r2,-4(fp)
   501f0:	10bffe84 	addi	r2,r2,-6
   501f4:	10c00428 	cmpgeui	r3,r2,16
   501f8:	18001a1e 	bne	r3,zero,50264 <alt_exception_cause_generated_bad_addr+0x88>
   501fc:	100690ba 	slli	r3,r2,2
   50200:	00800174 	movhi	r2,5
   50204:	10808504 	addi	r2,r2,532
   50208:	1885883a 	add	r2,r3,r2
   5020c:	10800017 	ldw	r2,0(r2)
   50210:	1000683a 	jmp	r2
   50214:	00050254 	movui	zero,5129
   50218:	00050254 	movui	zero,5129
   5021c:	00050264 	muli	zero,zero,5129
   50220:	00050264 	muli	zero,zero,5129
   50224:	00050264 	muli	zero,zero,5129
   50228:	00050254 	movui	zero,5129
   5022c:	0005025c 	xori	zero,zero,5129
   50230:	00050264 	muli	zero,zero,5129
   50234:	00050254 	movui	zero,5129
   50238:	00050254 	movui	zero,5129
   5023c:	00050264 	muli	zero,zero,5129
   50240:	00050254 	movui	zero,5129
   50244:	0005025c 	xori	zero,zero,5129
   50248:	00050264 	muli	zero,zero,5129
   5024c:	00050264 	muli	zero,zero,5129
   50250:	00050254 	movui	zero,5129
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   50254:	00800044 	movi	r2,1
   50258:	00000306 	br	50268 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   5025c:	0005883a 	mov	r2,zero
   50260:	00000106 	br	50268 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   50264:	0005883a 	mov	r2,zero
  }
}
   50268:	e037883a 	mov	sp,fp
   5026c:	df000017 	ldw	fp,0(sp)
   50270:	dec00104 	addi	sp,sp,4
   50274:	f800283a 	ret

00050278 <atexit>:
   50278:	200b883a 	mov	r5,r4
   5027c:	000d883a 	mov	r6,zero
   50280:	0009883a 	mov	r4,zero
   50284:	000f883a 	mov	r7,zero
   50288:	00503401 	jmpi	50340 <__register_exitproc>

0005028c <exit>:
   5028c:	defffe04 	addi	sp,sp,-8
   50290:	000b883a 	mov	r5,zero
   50294:	dc000015 	stw	r16,0(sp)
   50298:	dfc00115 	stw	ra,4(sp)
   5029c:	2021883a 	mov	r16,r4
   502a0:	00504540 	call	50454 <__call_exitprocs>
   502a4:	00800174 	movhi	r2,5
   502a8:	10893504 	addi	r2,r2,9428
   502ac:	11000017 	ldw	r4,0(r2)
   502b0:	20800f17 	ldw	r2,60(r4)
   502b4:	10000126 	beq	r2,zero,502bc <exit+0x30>
   502b8:	103ee83a 	callr	r2
   502bc:	8009883a 	mov	r4,r16
   502c0:	00505e80 	call	505e8 <_exit>

000502c4 <memcmp>:
   502c4:	01c000c4 	movi	r7,3
   502c8:	3980192e 	bgeu	r7,r6,50330 <memcmp+0x6c>
   502cc:	2144b03a 	or	r2,r4,r5
   502d0:	11c4703a 	and	r2,r2,r7
   502d4:	10000f26 	beq	r2,zero,50314 <memcmp+0x50>
   502d8:	20800003 	ldbu	r2,0(r4)
   502dc:	28c00003 	ldbu	r3,0(r5)
   502e0:	10c0151e 	bne	r2,r3,50338 <memcmp+0x74>
   502e4:	31bfff84 	addi	r6,r6,-2
   502e8:	01ffffc4 	movi	r7,-1
   502ec:	00000406 	br	50300 <memcmp+0x3c>
   502f0:	20800003 	ldbu	r2,0(r4)
   502f4:	28c00003 	ldbu	r3,0(r5)
   502f8:	31bfffc4 	addi	r6,r6,-1
   502fc:	10c00e1e 	bne	r2,r3,50338 <memcmp+0x74>
   50300:	21000044 	addi	r4,r4,1
   50304:	29400044 	addi	r5,r5,1
   50308:	31fff91e 	bne	r6,r7,502f0 <__alt_data_end+0xfffda790>
   5030c:	0005883a 	mov	r2,zero
   50310:	f800283a 	ret
   50314:	20c00017 	ldw	r3,0(r4)
   50318:	28800017 	ldw	r2,0(r5)
   5031c:	1880041e 	bne	r3,r2,50330 <memcmp+0x6c>
   50320:	31bfff04 	addi	r6,r6,-4
   50324:	21000104 	addi	r4,r4,4
   50328:	29400104 	addi	r5,r5,4
   5032c:	39bff936 	bltu	r7,r6,50314 <__alt_data_end+0xfffda7b4>
   50330:	303fe91e 	bne	r6,zero,502d8 <__alt_data_end+0xfffda778>
   50334:	003ff506 	br	5030c <__alt_data_end+0xfffda7ac>
   50338:	10c5c83a 	sub	r2,r2,r3
   5033c:	f800283a 	ret

00050340 <__register_exitproc>:
   50340:	00800174 	movhi	r2,5
   50344:	defffa04 	addi	sp,sp,-24
   50348:	10893504 	addi	r2,r2,9428
   5034c:	dc000315 	stw	r16,12(sp)
   50350:	14000017 	ldw	r16,0(r2)
   50354:	dc400415 	stw	r17,16(sp)
   50358:	dfc00515 	stw	ra,20(sp)
   5035c:	80805217 	ldw	r2,328(r16)
   50360:	2023883a 	mov	r17,r4
   50364:	10003626 	beq	r2,zero,50440 <__register_exitproc+0x100>
   50368:	10c00117 	ldw	r3,4(r2)
   5036c:	010007c4 	movi	r4,31
   50370:	20c00e16 	blt	r4,r3,503ac <__register_exitproc+0x6c>
   50374:	1a400044 	addi	r9,r3,1
   50378:	8800211e 	bne	r17,zero,50400 <__register_exitproc+0xc0>
   5037c:	18c00084 	addi	r3,r3,2
   50380:	18c7883a 	add	r3,r3,r3
   50384:	18c7883a 	add	r3,r3,r3
   50388:	12400115 	stw	r9,4(r2)
   5038c:	10c7883a 	add	r3,r2,r3
   50390:	19400015 	stw	r5,0(r3)
   50394:	0005883a 	mov	r2,zero
   50398:	dfc00517 	ldw	ra,20(sp)
   5039c:	dc400417 	ldw	r17,16(sp)
   503a0:	dc000317 	ldw	r16,12(sp)
   503a4:	dec00604 	addi	sp,sp,24
   503a8:	f800283a 	ret
   503ac:	00800034 	movhi	r2,0
   503b0:	10800004 	addi	r2,r2,0
   503b4:	10002526 	beq	r2,zero,5044c <__register_exitproc+0x10c>
   503b8:	01006404 	movi	r4,400
   503bc:	d9400015 	stw	r5,0(sp)
   503c0:	d9800115 	stw	r6,4(sp)
   503c4:	d9c00215 	stw	r7,8(sp)
   503c8:	00000000 	call	0 <__alt_mem_RAM_jesus-0x40000>
   503cc:	d9400017 	ldw	r5,0(sp)
   503d0:	d9800117 	ldw	r6,4(sp)
   503d4:	d9c00217 	ldw	r7,8(sp)
   503d8:	10001c26 	beq	r2,zero,5044c <__register_exitproc+0x10c>
   503dc:	80c05217 	ldw	r3,328(r16)
   503e0:	10000115 	stw	zero,4(r2)
   503e4:	02400044 	movi	r9,1
   503e8:	10c00015 	stw	r3,0(r2)
   503ec:	80805215 	stw	r2,328(r16)
   503f0:	10006215 	stw	zero,392(r2)
   503f4:	10006315 	stw	zero,396(r2)
   503f8:	0007883a 	mov	r3,zero
   503fc:	883fdf26 	beq	r17,zero,5037c <__alt_data_end+0xfffda81c>
   50400:	18d1883a 	add	r8,r3,r3
   50404:	4211883a 	add	r8,r8,r8
   50408:	1211883a 	add	r8,r2,r8
   5040c:	41802215 	stw	r6,136(r8)
   50410:	01000044 	movi	r4,1
   50414:	11806217 	ldw	r6,392(r2)
   50418:	20c8983a 	sll	r4,r4,r3
   5041c:	310cb03a 	or	r6,r6,r4
   50420:	11806215 	stw	r6,392(r2)
   50424:	41c04215 	stw	r7,264(r8)
   50428:	01800084 	movi	r6,2
   5042c:	89bfd31e 	bne	r17,r6,5037c <__alt_data_end+0xfffda81c>
   50430:	11806317 	ldw	r6,396(r2)
   50434:	3108b03a 	or	r4,r6,r4
   50438:	11006315 	stw	r4,396(r2)
   5043c:	003fcf06 	br	5037c <__alt_data_end+0xfffda81c>
   50440:	80805304 	addi	r2,r16,332
   50444:	80805215 	stw	r2,328(r16)
   50448:	003fc706 	br	50368 <__alt_data_end+0xfffda808>
   5044c:	00bfffc4 	movi	r2,-1
   50450:	003fd106 	br	50398 <__alt_data_end+0xfffda838>

00050454 <__call_exitprocs>:
   50454:	00800174 	movhi	r2,5
   50458:	10893504 	addi	r2,r2,9428
   5045c:	10800017 	ldw	r2,0(r2)
   50460:	defff404 	addi	sp,sp,-48
   50464:	dd800815 	stw	r22,32(sp)
   50468:	d8800015 	stw	r2,0(sp)
   5046c:	10805204 	addi	r2,r2,328
   50470:	dd000615 	stw	r20,24(sp)
   50474:	dc800415 	stw	r18,16(sp)
   50478:	dfc00b15 	stw	ra,44(sp)
   5047c:	df000a15 	stw	fp,40(sp)
   50480:	ddc00915 	stw	r23,36(sp)
   50484:	dd400715 	stw	r21,28(sp)
   50488:	dcc00515 	stw	r19,20(sp)
   5048c:	dc400315 	stw	r17,12(sp)
   50490:	dc000215 	stw	r16,8(sp)
   50494:	2025883a 	mov	r18,r4
   50498:	2829883a 	mov	r20,r5
   5049c:	d8800115 	stw	r2,4(sp)
   504a0:	05bfffc4 	movi	r22,-1
   504a4:	d8800017 	ldw	r2,0(sp)
   504a8:	14c05217 	ldw	r19,328(r2)
   504ac:	98001d26 	beq	r19,zero,50524 <__call_exitprocs+0xd0>
   504b0:	dd400117 	ldw	r21,4(sp)
   504b4:	98800117 	ldw	r2,4(r19)
   504b8:	173fffc4 	addi	fp,r2,-1
   504bc:	e0000d16 	blt	fp,zero,504f4 <__call_exitprocs+0xa0>
   504c0:	14000044 	addi	r16,r2,1
   504c4:	8421883a 	add	r16,r16,r16
   504c8:	8421883a 	add	r16,r16,r16
   504cc:	84402004 	addi	r17,r16,128
   504d0:	9c63883a 	add	r17,r19,r17
   504d4:	9c21883a 	add	r16,r19,r16
   504d8:	a0001e26 	beq	r20,zero,50554 <__call_exitprocs+0x100>
   504dc:	80804017 	ldw	r2,256(r16)
   504e0:	15001c26 	beq	r2,r20,50554 <__call_exitprocs+0x100>
   504e4:	e73fffc4 	addi	fp,fp,-1
   504e8:	843fff04 	addi	r16,r16,-4
   504ec:	8c7fff04 	addi	r17,r17,-4
   504f0:	e5bff91e 	bne	fp,r22,504d8 <__alt_data_end+0xfffda978>
   504f4:	00800034 	movhi	r2,0
   504f8:	10800004 	addi	r2,r2,0
   504fc:	10000926 	beq	r2,zero,50524 <__call_exitprocs+0xd0>
   50500:	98800117 	ldw	r2,4(r19)
   50504:	1000311e 	bne	r2,zero,505cc <__call_exitprocs+0x178>
   50508:	98800017 	ldw	r2,0(r19)
   5050c:	10003426 	beq	r2,zero,505e0 <__call_exitprocs+0x18c>
   50510:	9809883a 	mov	r4,r19
   50514:	a8800015 	stw	r2,0(r21)
   50518:	00000000 	call	0 <__alt_mem_RAM_jesus-0x40000>
   5051c:	acc00017 	ldw	r19,0(r21)
   50520:	983fe41e 	bne	r19,zero,504b4 <__alt_data_end+0xfffda954>
   50524:	dfc00b17 	ldw	ra,44(sp)
   50528:	df000a17 	ldw	fp,40(sp)
   5052c:	ddc00917 	ldw	r23,36(sp)
   50530:	dd800817 	ldw	r22,32(sp)
   50534:	dd400717 	ldw	r21,28(sp)
   50538:	dd000617 	ldw	r20,24(sp)
   5053c:	dcc00517 	ldw	r19,20(sp)
   50540:	dc800417 	ldw	r18,16(sp)
   50544:	dc400317 	ldw	r17,12(sp)
   50548:	dc000217 	ldw	r16,8(sp)
   5054c:	dec00c04 	addi	sp,sp,48
   50550:	f800283a 	ret
   50554:	98800117 	ldw	r2,4(r19)
   50558:	80c00017 	ldw	r3,0(r16)
   5055c:	10bfffc4 	addi	r2,r2,-1
   50560:	17001526 	beq	r2,fp,505b8 <__call_exitprocs+0x164>
   50564:	80000015 	stw	zero,0(r16)
   50568:	183fde26 	beq	r3,zero,504e4 <__alt_data_end+0xfffda984>
   5056c:	00800044 	movi	r2,1
   50570:	1708983a 	sll	r4,r2,fp
   50574:	98806217 	ldw	r2,392(r19)
   50578:	9dc00117 	ldw	r23,4(r19)
   5057c:	2084703a 	and	r2,r4,r2
   50580:	1000061e 	bne	r2,zero,5059c <__call_exitprocs+0x148>
   50584:	183ee83a 	callr	r3
   50588:	98800117 	ldw	r2,4(r19)
   5058c:	15ffc51e 	bne	r2,r23,504a4 <__alt_data_end+0xfffda944>
   50590:	a8800017 	ldw	r2,0(r21)
   50594:	14ffd326 	beq	r2,r19,504e4 <__alt_data_end+0xfffda984>
   50598:	003fc206 	br	504a4 <__alt_data_end+0xfffda944>
   5059c:	98806317 	ldw	r2,396(r19)
   505a0:	2084703a 	and	r2,r4,r2
   505a4:	1000061e 	bne	r2,zero,505c0 <__call_exitprocs+0x16c>
   505a8:	89400017 	ldw	r5,0(r17)
   505ac:	9009883a 	mov	r4,r18
   505b0:	183ee83a 	callr	r3
   505b4:	003ff406 	br	50588 <__alt_data_end+0xfffdaa28>
   505b8:	9f000115 	stw	fp,4(r19)
   505bc:	003fea06 	br	50568 <__alt_data_end+0xfffdaa08>
   505c0:	89000017 	ldw	r4,0(r17)
   505c4:	183ee83a 	callr	r3
   505c8:	003fef06 	br	50588 <__alt_data_end+0xfffdaa28>
   505cc:	98800017 	ldw	r2,0(r19)
   505d0:	982b883a 	mov	r21,r19
   505d4:	1027883a 	mov	r19,r2
   505d8:	983fb61e 	bne	r19,zero,504b4 <__alt_data_end+0xfffda954>
   505dc:	003fd106 	br	50524 <__alt_data_end+0xfffda9c4>
   505e0:	0005883a 	mov	r2,zero
   505e4:	003ffa06 	br	505d0 <__alt_data_end+0xfffdaa70>

000505e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   505e8:	defffd04 	addi	sp,sp,-12
   505ec:	df000215 	stw	fp,8(sp)
   505f0:	df000204 	addi	fp,sp,8
   505f4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   505f8:	0001883a 	nop
   505fc:	e0bfff17 	ldw	r2,-4(fp)
   50600:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   50604:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   50608:	10000226 	beq	r2,zero,50614 <_exit+0x2c>
    ALT_SIM_FAIL();
   5060c:	002af070 	cmpltui	zero,zero,43969
   50610:	00000106 	br	50618 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   50614:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   50618:	003fff06 	br	50618 <__alt_data_end+0xfffdaab8>
