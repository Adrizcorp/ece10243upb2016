
Practica_nios_2.elf:     file format elf32-littlenios2
Practica_nios_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0002022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000101f0 memsz 0x000101f0 flags r-x
    LOAD off    0x00011210 vaddr 0x00030210 paddr 0x00031dc0 align 2**12
         filesz 0x00001bb0 memsz 0x00001bb0 flags rw-
    LOAD off    0x00013970 vaddr 0x00033970 paddr 0x00033970 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fcd4  0002022c  0002022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000310  0002ff00  0002ff00  00010f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bb0  00030210  00031dc0  00011210  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00033970  00033970  00013970  2**2
                  ALLOC, SMALL_DATA
  6 .RAM_jesus    00000000  00033ad0  00033ad0  00012dc0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012dc0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d90  00000000  00000000  00012de8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023b3b  00000000  00000000  00013b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000931f  00000000  00000000  000376b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b2da  00000000  00000000  000409d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002270  00000000  00000000  0004bcac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000038d9  00000000  00000000  0004df1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016c93  00000000  00000000  000517f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00068488  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001388  00000000  00000000  000684c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006cb93  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006cb96  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006cb99  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006cb9a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006cb9b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0006cba4  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0006cbad  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  0006cbb6  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002f  00000000  00000000  0006cbc3  2**0
                  CONTENTS, READONLY
 26 .jdi          00003b78  00000000  00000000  0006cbf2  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00065f6b  00000000  00000000  0007076a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
0002022c l    d  .text	00000000 .text
0002ff00 l    d  .rodata	00000000 .rodata
00030210 l    d  .rwdata	00000000 .rwdata
00033970 l    d  .bss	00000000 .bss
00033ad0 l    d  .RAM_jesus	00000000 .RAM_jesus
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Practica_nios_2_bsp//obj/HAL/src/crt0.o
00020264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002ff52 l     O .rodata	00000010 zeroes.4181
0002ff62 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00022620 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000241c8 l     F .text	00000008 __fp_lock
000241d0 l     F .text	00000008 __fp_unlock
000241e4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00030210 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00030654 l     O .rwdata	00000020 lc_ctype_charset
00030634 l     O .rwdata	00000020 lc_message_charset
00030674 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0002ff94 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00026c0c l     F .text	000000fc __sprint_r.part.0
000300c8 l     O .rodata	00000010 blanks.4125
000300b8 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0002a2b0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002cc00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002cd28 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002cd54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002ce5c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002cf58 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002d03c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002d220 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00031db0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0002d4d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002d624 l     F .text	00000038 alt_dev_reg
00030c5c l     O .rwdata	00001060 jtag_uart
00031cbc l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002d934 l     F .text	00000204 altera_avalon_jtag_uart_irq
0002db38 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002e158 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0002e40c l     F .text	00000098 altera_avalon_uart_irq
0002e4a4 l     F .text	000000e0 altera_avalon_uart_rxirq
0002e584 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0002e71c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0002e948 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002edf8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002f290 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0002f3e8 l     F .text	00000050 alt_get_errno
0002f438 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000339a4 g     O .bss	00000004 alt_instruction_exception_handler
00026754 g     F .text	00000074 _mprec_log10
00026840 g     F .text	0000008c __any_on
00028adc g     F .text	00000054 _isatty_r
0002ffa0 g     O .rodata	00000028 __mprec_tinytens
0002d168 g     F .text	00000078 alt_main
000339d0 g     O .bss	00000100 alt_irq
00028b30 g     F .text	0000005c _lseek_r
00031dc0 g       *ABS*	00000000 __flash_rwdata_start
0002b620 g     F .text	00000084 .hidden __eqdf2
00033ad0 g       *ABS*	00000000 __alt_heap_start
00020394 g     F .text	0000003c printf
00029454 g     F .text	0000009c _wcrtomb_r
00026a6c g     F .text	0000005c __sseek
0002452c g     F .text	00000010 __sinit
000292e4 g     F .text	00000154 __swbuf_r
00024b00 g     F .text	0000007c _setlocale_r
00024384 g     F .text	00000078 __sfmoreglue
0002d200 g     F .text	00000020 __malloc_unlock
00028b8c g     F .text	0000015c memmove
00024514 g     F .text	00000018 _cleanup
00025884 g     F .text	000000a8 _Balloc
0002b6a4 g     F .text	000000e0 .hidden __gtdf2
0002f828 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
000285e0 g     F .text	00000058 _fstat_r
00033988 g     O .bss	00000004 errno
000269e8 g     F .text	00000008 __seofread
00033990 g     O .bss	00000004 alt_argv
00039d80 g       *ABS*	00000000 _gp
0002d4a4 g     F .text	00000030 usleep
00030adc g     O .rwdata	00000180 alt_fd_list
0002f848 g     F .text	00000090 alt_find_dev
00025628 g     F .text	00000138 memcpy
000241d8 g     F .text	0000000c _cleanup_r
0002ca28 g     F .text	000000d0 .hidden __floatsidf
0002f370 g     F .text	00000078 alt_io_redirect
0002b784 g     F .text	000000e0 .hidden __ltdf2
0002ff00 g       *ABS*	00000000 __DTOR_END__
0002fac0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000268cc g     F .text	00000074 __fpclassifyd
000266b0 g     F .text	000000a4 __ratio
00028144 g     F .text	00000024 __vfiprintf_internal
0002dd34 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00020368 g     F .text	0000002c _printf_r
0002a3cc g     F .text	00000008 .hidden __udivsi3
0002ceac g     F .text	000000ac isatty
0002fff0 g     O .rodata	000000c8 __mprec_tens
00024b7c g     F .text	0000000c __locale_charset
00033984 g     O .bss	00000004 __malloc_top_pad
00031d88 g     O .rwdata	00000004 __mb_cur_max
00024bac g     F .text	0000000c _localeconv_r
00028638 g     F .text	000004a4 __sfvwrite_r
00025cac g     F .text	0000003c __i2b
00026940 g     F .text	00000054 _sbrk_r
00028ce8 g     F .text	0000005c _read_r
00031da8 g     O .rwdata	00000004 alt_max_fd
000282f0 g     F .text	00000100 _fclose_r
00024198 g     F .text	00000030 fflush
00033980 g     O .bss	00000004 __malloc_max_sbrked_mem
0002a404 g     F .text	0000089c .hidden __adddf3
00026458 g     F .text	0000011c __b2d
00029c94 g     F .text	0000061c .hidden __umoddi3
0002d08c g     F .text	000000dc lseek
00031d80 g     O .rwdata	00000004 _global_impure_ptr
00028d44 g     F .text	000005a0 _realloc_r
00033ad0 g       *ABS*	00000000 __bss_end
0002f1a0 g     F .text	000000f0 alt_iic_isr_register
0002f724 g     F .text	00000104 alt_tick
00029654 g     F .text	00000640 .hidden __udivdi3
00028404 g     F .text	00000184 _fputwc_r
0002ffc8 g     O .rodata	00000028 __mprec_bigtens
00025a90 g     F .text	00000104 __s2b
0002caf8 g     F .text	000000a4 .hidden __floatunsidf
00026200 g     F .text	00000060 __mcmp
0002e364 g     F .text	000000a8 altera_avalon_uart_init
0002454c g     F .text	00000018 __fp_lock_all
0002f154 g     F .text	0000004c alt_ic_irq_enabled
0002f68c g     F .text	00000098 alt_alarm_stop
00033998 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d0 alt_irq_handler
00030ab4 g     O .rwdata	00000028 alt_dev_null
0002eddc g     F .text	0000001c alt_dcache_flush_all
00025b94 g     F .text	00000068 __hi0bits
0002c9a0 g     F .text	00000088 .hidden __fixdfsi
00031dc0 g       *ABS*	00000000 __ram_rwdata_end
00031da0 g     O .rwdata	00000008 alt_dev_list
0002d524 g     F .text	00000100 write
00030210 g       *ABS*	00000000 __ram_rodata_end
0002cda4 g     F .text	000000b8 fstat
0002b784 g     F .text	000000e0 .hidden __ledf2
00025f78 g     F .text	00000140 __pow5mult
00026d20 g     F .text	00001424 ___vfiprintf_internal_r
00033978 g     O .bss	00000004 __nlocale_changed
0002a3d4 g     F .text	00000008 .hidden __umodsi3
00033ad0 g       *ABS*	00000000 end
0002e998 g     F .text	000001ac altera_avalon_uart_write
0002d870 g     F .text	000000c4 altera_avalon_jtag_uart_init
000201cc g     F .exceptions	00000060 alt_instruction_exception_entry
0002ff00 g       *ABS*	00000000 __CTOR_LIST__
0003c520 g       *ABS*	00000000 __alt_stack_pointer
0002e1cc g     F .text	00000088 alt_avalon_timer_sc_init
0002e2b4 g     F .text	00000060 altera_avalon_uart_write_fd
0002cb9c g     F .text	00000064 .hidden __clzsi2
0002e314 g     F .text	00000050 altera_avalon_uart_close_fd
0002df40 g     F .text	00000218 altera_avalon_jtag_uart_write
0002453c g     F .text	00000004 __sfp_lock_acquire
00025540 g     F .text	000000e8 memchr
000203d0 g     F .text	000020fc ___vfprintf_internal_r
000246a0 g     F .text	000002f0 _free_r
00024b88 g     F .text	00000010 __locale_mb_cur_max
0002fd38 g     F .text	00000194 __call_exitprocs
00033974 g     O .bss	00000004 __mlocale_changed
00031d8c g     O .rwdata	00000004 __malloc_sbrk_base
0002022c g     F .text	0000003c _start
0003399c g     O .bss	00000004 _alt_tick_rate
000260b8 g     F .text	00000148 __lshift
000339a0 g     O .bss	00000004 _alt_nticks
0002d270 g     F .text	00000104 read
0002d690 g     F .text	0000007c alt_sys_init
0002fc24 g     F .text	00000114 __register_exitproc
00025ce8 g     F .text	00000290 __multiply
0002dbe0 g     F .text	00000068 altera_avalon_jtag_uart_close
0002a3dc g     F .text	00000028 .hidden __mulsi3
00030210 g       *ABS*	00000000 __ram_rwdata_start
0002ff00 g       *ABS*	00000000 __ram_rodata_start
000339a8 g     O .bss	00000028 __malloc_current_mallinfo
00026574 g     F .text	0000013c __d2b
0002d70c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002f9ec g     F .text	000000d4 alt_get_fd
0002ec84 g     F .text	00000158 alt_busy_sleep
000281c4 g     F .text	00000054 _close_r
0002fba8 g     F .text	0000007c memcmp
0002d7cc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00033ad0 g       *ABS*	00000000 __alt_stack_base
0002d81c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000224f0 g     F .text	00000130 __swsetup_r
0002aca0 g     F .text	00000980 .hidden __divdf3
000243fc g     F .text	00000118 __sfp
000267c8 g     F .text	00000078 __copybits
000306ac g     O .rwdata	00000408 __malloc_av_
00024548 g     F .text	00000004 __sinit_lock_release
0002b864 g     F .text	0000086c .hidden __muldf3
00026994 g     F .text	00000054 __sread
0002f8d8 g     F .text	00000114 alt_find_file
0002ee48 g     F .text	000000a4 alt_dev_llist_insert
0002d1e0 g     F .text	00000020 __malloc_lock
0002d3f4 g     F .text	000000b0 sbrk
00023f70 g     F .text	00000228 _fflush_r
00028218 g     F .text	000000d8 _calloc_r
00033970 g       *ABS*	00000000 __bss_start
00025760 g     F .text	00000124 memset
00020268 g     F .text	00000100 main
00033994 g     O .bss	00000004 alt_envp
0003397c g     O .bss	00000004 __malloc_max_total_mem
0002d76c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00029438 g     F .text	0000001c __swbuf
00020000 g       *ABS*	00000000 __alt_mem_RAM_jesus
00026ac8 g     F .text	00000008 __sclose
0003c520 g       *ABS*	00000000 __alt_heap_limit
000283f0 g     F .text	00000014 fclose
00022848 g     F .text	00001728 _dtoa_r
00024d98 g     F .text	000007a8 _malloc_r
000295c8 g     F .text	00000030 __ascii_wctomb
00031dac g     O .rwdata	00000004 alt_errno
00024990 g     F .text	000000b8 _fwalk
0002a31c g     F .text	00000054 .hidden __divsi3
0002457c g     F .text	00000124 _malloc_trim_r
0002ff00 g       *ABS*	00000000 __CTOR_END__
00026ad0 g     F .text	000000a4 strcmp
0002ff00 g       *ABS*	00000000 __flash_rodata_start
0002ff00 g       *ABS*	00000000 __DTOR_LIST__
0002b620 g     F .text	00000084 .hidden __nedf2
0002d65c g     F .text	00000034 alt_irq_init
0002d374 g     F .text	00000080 alt_release_fd
000300d8 g     O .rodata	00000100 .hidden __clz_tab
00033970 g     O .bss	00000004 _PathLocale
0002fb5c g     F .text	00000014 atexit
00028168 g     F .text	0000005c _write_r
00024bb8 g     F .text	0000001c setlocale
00031d84 g     O .rwdata	00000004 _impure_ptr
0003398c g     O .bss	00000004 alt_argc
0002ef48 g     F .text	0000005c _do_dtors
00024ba4 g     F .text	00000008 __locale_cjk_lang
00020020 g       .exceptions	00000000 alt_irq_entry
000263f8 g     F .text	00000060 __ulp
00024564 g     F .text	00000018 __fp_unlock_all
00031d98 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00024bd4 g     F .text	0000000c localeconv
0002efc0 g     F .text	00000050 alt_ic_isr_register
00031dc0 g       *ABS*	00000000 _edata
0002e254 g     F .text	00000060 altera_avalon_uart_read_fd
00033ad0 g       *ABS*	00000000 _end
0002022c g       *ABS*	00000000 __ram_exceptions_end
0002dc48 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0002f0b0 g     F .text	000000a4 alt_ic_irq_disable
000269f0 g     F .text	0000007c __swrite
00031d90 g     O .rwdata	00000004 __malloc_trim_threshold
00024b98 g     F .text	0000000c __locale_msgcharset
0002fb70 g     F .text	00000038 exit
00024a48 g     F .text	000000b8 _fwalk_reent
00026260 g     F .text	00000198 __mdiff
0002a370 g     F .text	0000005c .hidden __modsi3
0003c520 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00024540 g     F .text	00000004 __sfp_lock_release
0002e6c8 g     F .text	00000054 altera_avalon_uart_close
0002fecc g     F .text	00000034 _exit
0002eb44 g     F .text	00000140 alt_alarm_start
00024be0 g     F .text	000001b8 __smakebuf_r
00026b74 g     F .text	00000098 strlen
0002f52c g     F .text	00000160 open
0002b6a4 g     F .text	000000e0 .hidden __gedf2
00031d94 g     O .rwdata	00000004 __wctomb
00026d08 g     F .text	00000018 __sprint_r
0002efa4 g     F .text	0000001c alt_icache_flush_all
00031db4 g     O .rwdata	00000004 alt_priority_mask
0002f010 g     F .text	000000a0 alt_ic_irq_enable
000224cc g     F .text	00000024 __vfprintf_internal
0002e76c g     F .text	000001dc altera_avalon_uart_read
000295f8 g     F .text	0000005c _wctomb_r
0002c0d0 g     F .text	000008d0 .hidden __subdf3
00025bfc g     F .text	000000b0 __lo0bits
00031db8 g     O .rwdata	00000008 alt_alarm_list
0002eeec g     F .text	0000005c _do_ctors
000294f0 g     F .text	000000d8 wcrtomb
0002cc50 g     F .text	000000d8 close
0002cfbc g     F .text	00000080 alt_load
00028588 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
00024544 g     F .text	00000004 __sinit_lock_acquire
00025954 g     F .text	0000013c __multadd
0002592c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408b14 	ori	at,at,556
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201cc0 	call	201cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	108e7404 	addi	r2,r2,14800
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	108e7404 	addi	r2,r2,14800
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe3c0c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe3c00>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	e037883a 	mov	sp,fp
   201bc:	dfc00117 	ldw	ra,4(sp)
   201c0:	df000017 	ldw	fp,0(sp)
   201c4:	dec00204 	addi	sp,sp,8
   201c8:	f800283a 	ret

000201cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201cc:	defffb04 	addi	sp,sp,-20
   201d0:	dfc00415 	stw	ra,16(sp)
   201d4:	df000315 	stw	fp,12(sp)
   201d8:	df000304 	addi	fp,sp,12
   201dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e0:	00bfffc4 	movi	r2,-1
   201e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201ec:	d0a70917 	ldw	r2,-25564(gp)
   201f0:	10000726 	beq	r2,zero,20210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f4:	d0a70917 	ldw	r2,-25564(gp)
   201f8:	e0fffd17 	ldw	r3,-12(fp)
   201fc:	1809883a 	mov	r4,r3
   20200:	e17fff17 	ldw	r5,-4(fp)
   20204:	e1bffe17 	ldw	r6,-8(fp)
   20208:	103ee83a 	callr	r2
   2020c:	00000206 	br	20218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20214:	0005883a 	mov	r2,zero
}
   20218:	e037883a 	mov	sp,fp
   2021c:	dfc00117 	ldw	ra,4(sp)
   20220:	df000017 	ldw	fp,0(sp)
   20224:	dec00204 	addi	sp,sp,8
   20228:	f800283a 	ret

Disassembly of section .text:

0002022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   2022c:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20230:	def14814 	ori	sp,sp,50464
    movhi gp, %hi(_gp)
   20234:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20238:	d6a76014 	ori	gp,gp,40320
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   2023c:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20240:	108e5c14 	ori	r2,r2,14704

    movhi r3, %hi(__bss_end)
   20244:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20248:	18ceb414 	ori	r3,r3,15056

    beq r2, r3, 1f
   2024c:	10c00326 	beq	r2,r3,2025c <_start+0x30>

0:
    stw zero, (r2)
   20250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20258:	10fffd36 	bltu	r2,r3,20250 <__alt_data_end+0xfffe3d30>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   2025c:	002cfbc0 	call	2cfbc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20260:	002d1680 	call	2d168 <alt_main>

00020264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20264:	003fff06 	br	20264 <__alt_data_end+0xfffe3d44>

00020268 <main>:
#include <system.h>
#include <unistd.h>


int main()
{
   20268:	defffd04 	addi	sp,sp,-12
   2026c:	dfc00215 	stw	ra,8(sp)
   20270:	df000115 	stw	fp,4(sp)
   20274:	df000104 	addi	fp,sp,4
  unsigned char conteo=0;
   20278:	e03fff05 	stb	zero,-4(fp)
  unsigned char sw=0;
   2027c:	e03fff45 	stb	zero,-3(fp)
  while(1){
	  sw=IORD(SW_BASE, 0);
   20280:	00800134 	movhi	r2,4
   20284:	10841804 	addi	r2,r2,4192
   20288:	10800037 	ldwio	r2,0(r2)
   2028c:	e0bfff45 	stb	r2,-3(fp)
	  if(sw==1){
   20290:	e0bfff43 	ldbu	r2,-3(fp)
   20294:	10800058 	cmpnei	r2,r2,1
   20298:	1000101e 	bne	r2,zero,202dc <main+0x74>
		  conteo++;
   2029c:	e0bfff03 	ldbu	r2,-4(fp)
   202a0:	10800044 	addi	r2,r2,1
   202a4:	e0bfff05 	stb	r2,-4(fp)
		  IOWR(LEDS_BASE, 0, conteo);
   202a8:	e0ffff03 	ldbu	r3,-4(fp)
   202ac:	00800134 	movhi	r2,4
   202b0:	10841404 	addi	r2,r2,4176
   202b4:	10c00035 	stwio	r3,0(r2)
		  printf("conteo = %d\n",conteo);
   202b8:	e0bfff03 	ldbu	r2,-4(fp)
   202bc:	010000f4 	movhi	r4,3
   202c0:	213fc004 	addi	r4,r4,-256
   202c4:	100b883a 	mov	r5,r2
   202c8:	00203940 	call	20394 <printf>
		  usleep(100000);
   202cc:	010000b4 	movhi	r4,2
   202d0:	2121a804 	addi	r4,r4,-31072
   202d4:	002d4a40 	call	2d4a4 <usleep>
   202d8:	00002206 	br	20364 <main+0xfc>
	  }
	  else if(sw==2){
   202dc:	e0bfff43 	ldbu	r2,-3(fp)
   202e0:	10800098 	cmpnei	r2,r2,2
   202e4:	1000101e 	bne	r2,zero,20328 <main+0xc0>
		  conteo--;
   202e8:	e0bfff03 	ldbu	r2,-4(fp)
   202ec:	10bfffc4 	addi	r2,r2,-1
   202f0:	e0bfff05 	stb	r2,-4(fp)
		  IOWR(LEDS_BASE, 0, conteo);
   202f4:	e0ffff03 	ldbu	r3,-4(fp)
   202f8:	00800134 	movhi	r2,4
   202fc:	10841404 	addi	r2,r2,4176
   20300:	10c00035 	stwio	r3,0(r2)
		  printf("conteo = %d\n",conteo);
   20304:	e0bfff03 	ldbu	r2,-4(fp)
   20308:	010000f4 	movhi	r4,3
   2030c:	213fc004 	addi	r4,r4,-256
   20310:	100b883a 	mov	r5,r2
   20314:	00203940 	call	20394 <printf>
		  usleep(100000);
   20318:	010000b4 	movhi	r4,2
   2031c:	2121a804 	addi	r4,r4,-31072
   20320:	002d4a40 	call	2d4a4 <usleep>
   20324:	00000f06 	br	20364 <main+0xfc>
	  }
	  else{
		  conteo=~conteo;
   20328:	e0bfff03 	ldbu	r2,-4(fp)
   2032c:	0084303a 	nor	r2,zero,r2
   20330:	e0bfff05 	stb	r2,-4(fp)
		  IOWR(LEDS_BASE, 0, conteo);
   20334:	e0ffff03 	ldbu	r3,-4(fp)
   20338:	00800134 	movhi	r2,4
   2033c:	10841404 	addi	r2,r2,4176
   20340:	10c00035 	stwio	r3,0(r2)
		  printf("conteo = %d\n",conteo);
   20344:	e0bfff03 	ldbu	r2,-4(fp)
   20348:	010000f4 	movhi	r4,3
   2034c:	213fc004 	addi	r4,r4,-256
   20350:	100b883a 	mov	r5,r2
   20354:	00203940 	call	20394 <printf>
		  usleep(100000);
   20358:	010000b4 	movhi	r4,2
   2035c:	2121a804 	addi	r4,r4,-31072
   20360:	002d4a40 	call	2d4a4 <usleep>
	  }
  }
   20364:	003fc606 	br	20280 <__alt_data_end+0xfffe3d60>

00020368 <_printf_r>:
   20368:	defffd04 	addi	sp,sp,-12
   2036c:	dfc00015 	stw	ra,0(sp)
   20370:	d9800115 	stw	r6,4(sp)
   20374:	d9c00215 	stw	r7,8(sp)
   20378:	280d883a 	mov	r6,r5
   2037c:	21400217 	ldw	r5,8(r4)
   20380:	d9c00104 	addi	r7,sp,4
   20384:	00203d00 	call	203d0 <___vfprintf_internal_r>
   20388:	dfc00017 	ldw	ra,0(sp)
   2038c:	dec00304 	addi	sp,sp,12
   20390:	f800283a 	ret

00020394 <printf>:
   20394:	defffc04 	addi	sp,sp,-16
   20398:	dfc00015 	stw	ra,0(sp)
   2039c:	d9400115 	stw	r5,4(sp)
   203a0:	d9800215 	stw	r6,8(sp)
   203a4:	d9c00315 	stw	r7,12(sp)
   203a8:	008000f4 	movhi	r2,3
   203ac:	10876104 	addi	r2,r2,7556
   203b0:	10800017 	ldw	r2,0(r2)
   203b4:	200b883a 	mov	r5,r4
   203b8:	d9800104 	addi	r6,sp,4
   203bc:	11000217 	ldw	r4,8(r2)
   203c0:	00224cc0 	call	224cc <__vfprintf_internal>
   203c4:	dfc00017 	ldw	ra,0(sp)
   203c8:	dec00404 	addi	sp,sp,16
   203cc:	f800283a 	ret

000203d0 <___vfprintf_internal_r>:
   203d0:	defeb604 	addi	sp,sp,-1320
   203d4:	dfc14915 	stw	ra,1316(sp)
   203d8:	ddc14715 	stw	r23,1308(sp)
   203dc:	dd814615 	stw	r22,1304(sp)
   203e0:	202f883a 	mov	r23,r4
   203e4:	282d883a 	mov	r22,r5
   203e8:	d9812a15 	stw	r6,1192(sp)
   203ec:	d9c12d15 	stw	r7,1204(sp)
   203f0:	df014815 	stw	fp,1312(sp)
   203f4:	dd414515 	stw	r21,1300(sp)
   203f8:	dd014415 	stw	r20,1296(sp)
   203fc:	dcc14315 	stw	r19,1292(sp)
   20400:	dc814215 	stw	r18,1288(sp)
   20404:	dc414115 	stw	r17,1284(sp)
   20408:	dc014015 	stw	r16,1280(sp)
   2040c:	0024bac0 	call	24bac <_localeconv_r>
   20410:	10800017 	ldw	r2,0(r2)
   20414:	1009883a 	mov	r4,r2
   20418:	d8813515 	stw	r2,1236(sp)
   2041c:	0026b740 	call	26b74 <strlen>
   20420:	d8813815 	stw	r2,1248(sp)
   20424:	b8000226 	beq	r23,zero,20430 <___vfprintf_internal_r+0x60>
   20428:	b8800e17 	ldw	r2,56(r23)
   2042c:	10010526 	beq	r2,zero,20844 <___vfprintf_internal_r+0x474>
   20430:	b0c0030b 	ldhu	r3,12(r22)
   20434:	1908000c 	andi	r4,r3,8192
   20438:	1805883a 	mov	r2,r3
   2043c:	2000071e 	bne	r4,zero,2045c <___vfprintf_internal_r+0x8c>
   20440:	b1001917 	ldw	r4,100(r22)
   20444:	18880014 	ori	r2,r3,8192
   20448:	00f7ffc4 	movi	r3,-8193
   2044c:	20c8703a 	and	r4,r4,r3
   20450:	b080030d 	sth	r2,12(r22)
   20454:	1007883a 	mov	r3,r2
   20458:	b1001915 	stw	r4,100(r22)
   2045c:	1100020c 	andi	r4,r2,8
   20460:	2000a826 	beq	r4,zero,20704 <___vfprintf_internal_r+0x334>
   20464:	b1000417 	ldw	r4,16(r22)
   20468:	2000a626 	beq	r4,zero,20704 <___vfprintf_internal_r+0x334>
   2046c:	1080068c 	andi	r2,r2,26
   20470:	01000284 	movi	r4,10
   20474:	1100ac26 	beq	r2,r4,20728 <___vfprintf_internal_r+0x358>
   20478:	d8c10e04 	addi	r3,sp,1080
   2047c:	d9010dc4 	addi	r4,sp,1079
   20480:	d9400404 	addi	r5,sp,16
   20484:	050000f4 	movhi	r20,3
   20488:	1905c83a 	sub	r2,r3,r4
   2048c:	a53fd484 	addi	r20,r20,-174
   20490:	d8c12815 	stw	r3,1184(sp)
   20494:	d9012915 	stw	r4,1188(sp)
   20498:	d9411e15 	stw	r5,1144(sp)
   2049c:	d8012015 	stw	zero,1152(sp)
   204a0:	d8011f15 	stw	zero,1148(sp)
   204a4:	d8013315 	stw	zero,1228(sp)
   204a8:	d8013715 	stw	zero,1244(sp)
   204ac:	d8013915 	stw	zero,1252(sp)
   204b0:	d8013b15 	stw	zero,1260(sp)
   204b4:	d8013a15 	stw	zero,1256(sp)
   204b8:	d8012f15 	stw	zero,1212(sp)
   204bc:	2811883a 	mov	r8,r5
   204c0:	d8813c15 	stw	r2,1264(sp)
   204c4:	d8c12a17 	ldw	r3,1192(sp)
   204c8:	18800007 	ldb	r2,0(r3)
   204cc:	10021326 	beq	r2,zero,20d1c <___vfprintf_internal_r+0x94c>
   204d0:	00c00944 	movi	r3,37
   204d4:	dc012a17 	ldw	r16,1192(sp)
   204d8:	10c0021e 	bne	r2,r3,204e4 <___vfprintf_internal_r+0x114>
   204dc:	00001606 	br	20538 <___vfprintf_internal_r+0x168>
   204e0:	10c08526 	beq	r2,r3,206f8 <___vfprintf_internal_r+0x328>
   204e4:	84000044 	addi	r16,r16,1
   204e8:	80800007 	ldb	r2,0(r16)
   204ec:	103ffc1e 	bne	r2,zero,204e0 <__alt_data_end+0xfffe3fc0>
   204f0:	d9012a17 	ldw	r4,1192(sp)
   204f4:	8123c83a 	sub	r17,r16,r4
   204f8:	88000f26 	beq	r17,zero,20538 <___vfprintf_internal_r+0x168>
   204fc:	d8812a17 	ldw	r2,1192(sp)
   20500:	d8c12017 	ldw	r3,1152(sp)
   20504:	44400115 	stw	r17,4(r8)
   20508:	40800015 	stw	r2,0(r8)
   2050c:	d8811f17 	ldw	r2,1148(sp)
   20510:	1c47883a 	add	r3,r3,r17
   20514:	d8c12015 	stw	r3,1152(sp)
   20518:	10800044 	addi	r2,r2,1
   2051c:	d8811f15 	stw	r2,1148(sp)
   20520:	00c001c4 	movi	r3,7
   20524:	1880b516 	blt	r3,r2,207fc <___vfprintf_internal_r+0x42c>
   20528:	42000204 	addi	r8,r8,8
   2052c:	d8c12f17 	ldw	r3,1212(sp)
   20530:	1c47883a 	add	r3,r3,r17
   20534:	d8c12f15 	stw	r3,1212(sp)
   20538:	80800007 	ldb	r2,0(r16)
   2053c:	1000b626 	beq	r2,zero,20818 <___vfprintf_internal_r+0x448>
   20540:	80800044 	addi	r2,r16,1
   20544:	84000047 	ldb	r16,1(r16)
   20548:	0027883a 	mov	r19,zero
   2054c:	0039883a 	mov	fp,zero
   20550:	dcc12b05 	stb	r19,1196(sp)
   20554:	d8012785 	stb	zero,1182(sp)
   20558:	027fffc4 	movi	r9,-1
   2055c:	d8012e15 	stw	zero,1208(sp)
   20560:	04401604 	movi	r17,88
   20564:	04800244 	movi	r18,9
   20568:	da012a15 	stw	r8,1192(sp)
   2056c:	e027883a 	mov	r19,fp
   20570:	17000044 	addi	fp,r2,1
   20574:	80bff804 	addi	r2,r16,-32
   20578:	88831236 	bltu	r17,r2,211c4 <___vfprintf_internal_r+0xdf4>
   2057c:	100490ba 	slli	r2,r2,2
   20580:	010000b4 	movhi	r4,2
   20584:	21016504 	addi	r4,r4,1428
   20588:	1105883a 	add	r2,r2,r4
   2058c:	10800017 	ldw	r2,0(r2)
   20590:	1000683a 	jmp	r2
   20594:	000210e0 	cmpeqi	zero,zero,2115
   20598:	000211c4 	movi	zero,2119
   2059c:	000211c4 	movi	zero,2119
   205a0:	000210fc 	xorhi	zero,zero,2115
   205a4:	000211c4 	movi	zero,2119
   205a8:	000211c4 	movi	zero,2119
   205ac:	000211c4 	movi	zero,2119
   205b0:	000211c4 	movi	zero,2119
   205b4:	000211c4 	movi	zero,2119
   205b8:	000211c4 	movi	zero,2119
   205bc:	0002110c 	andi	zero,zero,2116
   205c0:	00021134 	movhi	zero,2116
   205c4:	000211c4 	movi	zero,2119
   205c8:	00020850 	cmplti	zero,zero,2081
   205cc:	00020860 	cmpeqi	zero,zero,2081
   205d0:	000211c4 	movi	zero,2119
   205d4:	000208b0 	cmpltui	zero,zero,2082
   205d8:	000208c0 	call	208c <__reset-0x1df74>
   205dc:	000208c0 	call	208c <__reset-0x1df74>
   205e0:	000208c0 	call	208c <__reset-0x1df74>
   205e4:	000208c0 	call	208c <__reset-0x1df74>
   205e8:	000208c0 	call	208c <__reset-0x1df74>
   205ec:	000208c0 	call	208c <__reset-0x1df74>
   205f0:	000208c0 	call	208c <__reset-0x1df74>
   205f4:	000208c0 	call	208c <__reset-0x1df74>
   205f8:	000208c0 	call	208c <__reset-0x1df74>
   205fc:	000211c4 	movi	zero,2119
   20600:	000211c4 	movi	zero,2119
   20604:	000211c4 	movi	zero,2119
   20608:	000211c4 	movi	zero,2119
   2060c:	000211c4 	movi	zero,2119
   20610:	000211c4 	movi	zero,2119
   20614:	000211c4 	movi	zero,2119
   20618:	000211c4 	movi	zero,2119
   2061c:	000211c4 	movi	zero,2119
   20620:	000211c4 	movi	zero,2119
   20624:	00020904 	movi	zero,2084
   20628:	00020d24 	muli	zero,zero,2100
   2062c:	000211c4 	movi	zero,2119
   20630:	00020d24 	muli	zero,zero,2100
   20634:	000211c4 	movi	zero,2119
   20638:	000211c4 	movi	zero,2119
   2063c:	000211c4 	movi	zero,2119
   20640:	000211c4 	movi	zero,2119
   20644:	00020dcc 	andi	zero,zero,2103
   20648:	000211c4 	movi	zero,2119
   2064c:	000211c4 	movi	zero,2119
   20650:	00020ddc 	xori	zero,zero,2103
   20654:	000211c4 	movi	zero,2119
   20658:	000211c4 	movi	zero,2119
   2065c:	000211c4 	movi	zero,2119
   20660:	000211c4 	movi	zero,2119
   20664:	000211c4 	movi	zero,2119
   20668:	00020e20 	cmpeqi	zero,zero,2104
   2066c:	000211c4 	movi	zero,2119
   20670:	000211c4 	movi	zero,2119
   20674:	00020e58 	cmpnei	zero,zero,2105
   20678:	000211c4 	movi	zero,2119
   2067c:	000211c4 	movi	zero,2119
   20680:	000211c4 	movi	zero,2119
   20684:	000211c4 	movi	zero,2119
   20688:	000211c4 	movi	zero,2119
   2068c:	000211c4 	movi	zero,2119
   20690:	000211c4 	movi	zero,2119
   20694:	000211c4 	movi	zero,2119
   20698:	000211c4 	movi	zero,2119
   2069c:	000211c4 	movi	zero,2119
   206a0:	00021094 	movui	zero,2114
   206a4:	00021040 	call	2104 <__reset-0x1defc>
   206a8:	00020d24 	muli	zero,zero,2100
   206ac:	00020d24 	muli	zero,zero,2100
   206b0:	00020d24 	muli	zero,zero,2100
   206b4:	00021084 	movi	zero,2114
   206b8:	00021040 	call	2104 <__reset-0x1defc>
   206bc:	000211c4 	movi	zero,2119
   206c0:	000211c4 	movi	zero,2119
   206c4:	00020f5c 	xori	zero,zero,2109
   206c8:	000211c4 	movi	zero,2119
   206cc:	00020f74 	movhi	zero,2109
   206d0:	00020fb4 	movhi	zero,2110
   206d4:	00020ff4 	movhi	zero,2111
   206d8:	00020ec0 	call	20ec <__reset-0x1df14>
   206dc:	000211c4 	movi	zero,2119
   206e0:	00021148 	cmpgei	zero,zero,2117
   206e4:	000211c4 	movi	zero,2119
   206e8:	00020ed0 	cmplti	zero,zero,2107
   206ec:	000211c4 	movi	zero,2119
   206f0:	000211c4 	movi	zero,2119
   206f4:	00020f10 	cmplti	zero,zero,2108
   206f8:	d9412a17 	ldw	r5,1192(sp)
   206fc:	8163c83a 	sub	r17,r16,r5
   20700:	003f7d06 	br	204f8 <__alt_data_end+0xfffe3fd8>
   20704:	b809883a 	mov	r4,r23
   20708:	b00b883a 	mov	r5,r22
   2070c:	00224f00 	call	224f0 <__swsetup_r>
   20710:	10002d1e 	bne	r2,zero,207c8 <___vfprintf_internal_r+0x3f8>
   20714:	b0c0030b 	ldhu	r3,12(r22)
   20718:	01000284 	movi	r4,10
   2071c:	1805883a 	mov	r2,r3
   20720:	1080068c 	andi	r2,r2,26
   20724:	113f541e 	bne	r2,r4,20478 <__alt_data_end+0xfffe3f58>
   20728:	b080038b 	ldhu	r2,14(r22)
   2072c:	113fffcc 	andi	r4,r2,65535
   20730:	2120001c 	xori	r4,r4,32768
   20734:	21200004 	addi	r4,r4,-32768
   20738:	203f4f16 	blt	r4,zero,20478 <__alt_data_end+0xfffe3f58>
   2073c:	b2c01917 	ldw	r11,100(r22)
   20740:	b2800717 	ldw	r10,28(r22)
   20744:	b2400917 	ldw	r9,36(r22)
   20748:	d9812a17 	ldw	r6,1192(sp)
   2074c:	d9c12d17 	ldw	r7,1204(sp)
   20750:	02010004 	movi	r8,1024
   20754:	18ffff4c 	andi	r3,r3,65533
   20758:	d881078d 	sth	r2,1054(sp)
   2075c:	b809883a 	mov	r4,r23
   20760:	d8800404 	addi	r2,sp,16
   20764:	d9410404 	addi	r5,sp,1040
   20768:	d8c1070d 	sth	r3,1052(sp)
   2076c:	dac11d15 	stw	r11,1140(sp)
   20770:	da810b15 	stw	r10,1068(sp)
   20774:	da410d15 	stw	r9,1076(sp)
   20778:	d8810415 	stw	r2,1040(sp)
   2077c:	d8810815 	stw	r2,1056(sp)
   20780:	da010615 	stw	r8,1048(sp)
   20784:	da010915 	stw	r8,1060(sp)
   20788:	d8010a15 	stw	zero,1064(sp)
   2078c:	00203d00 	call	203d0 <___vfprintf_internal_r>
   20790:	1021883a 	mov	r16,r2
   20794:	10000416 	blt	r2,zero,207a8 <___vfprintf_internal_r+0x3d8>
   20798:	b809883a 	mov	r4,r23
   2079c:	d9410404 	addi	r5,sp,1040
   207a0:	0023f700 	call	23f70 <_fflush_r>
   207a4:	1007301e 	bne	r2,zero,22468 <___vfprintf_internal_r+0x2098>
   207a8:	d881070b 	ldhu	r2,1052(sp)
   207ac:	1080100c 	andi	r2,r2,64
   207b0:	10000326 	beq	r2,zero,207c0 <___vfprintf_internal_r+0x3f0>
   207b4:	b080030b 	ldhu	r2,12(r22)
   207b8:	10801014 	ori	r2,r2,64
   207bc:	b080030d 	sth	r2,12(r22)
   207c0:	8005883a 	mov	r2,r16
   207c4:	00000106 	br	207cc <___vfprintf_internal_r+0x3fc>
   207c8:	00bfffc4 	movi	r2,-1
   207cc:	dfc14917 	ldw	ra,1316(sp)
   207d0:	df014817 	ldw	fp,1312(sp)
   207d4:	ddc14717 	ldw	r23,1308(sp)
   207d8:	dd814617 	ldw	r22,1304(sp)
   207dc:	dd414517 	ldw	r21,1300(sp)
   207e0:	dd014417 	ldw	r20,1296(sp)
   207e4:	dcc14317 	ldw	r19,1292(sp)
   207e8:	dc814217 	ldw	r18,1288(sp)
   207ec:	dc414117 	ldw	r17,1284(sp)
   207f0:	dc014017 	ldw	r16,1280(sp)
   207f4:	dec14a04 	addi	sp,sp,1320
   207f8:	f800283a 	ret
   207fc:	b809883a 	mov	r4,r23
   20800:	b00b883a 	mov	r5,r22
   20804:	d9811e04 	addi	r6,sp,1144
   20808:	0026d080 	call	26d08 <__sprint_r>
   2080c:	1000081e 	bne	r2,zero,20830 <___vfprintf_internal_r+0x460>
   20810:	da000404 	addi	r8,sp,16
   20814:	003f4506 	br	2052c <__alt_data_end+0xfffe400c>
   20818:	d8812017 	ldw	r2,1152(sp)
   2081c:	10000426 	beq	r2,zero,20830 <___vfprintf_internal_r+0x460>
   20820:	b809883a 	mov	r4,r23
   20824:	b00b883a 	mov	r5,r22
   20828:	d9811e04 	addi	r6,sp,1144
   2082c:	0026d080 	call	26d08 <__sprint_r>
   20830:	b080030b 	ldhu	r2,12(r22)
   20834:	1080100c 	andi	r2,r2,64
   20838:	103fe31e 	bne	r2,zero,207c8 <__alt_data_end+0xfffe42a8>
   2083c:	d8812f17 	ldw	r2,1212(sp)
   20840:	003fe206 	br	207cc <__alt_data_end+0xfffe42ac>
   20844:	b809883a 	mov	r4,r23
   20848:	002452c0 	call	2452c <__sinit>
   2084c:	003ef806 	br	20430 <__alt_data_end+0xfffe3f10>
   20850:	e005883a 	mov	r2,fp
   20854:	9cc00114 	ori	r19,r19,4
   20858:	e4000007 	ldb	r16,0(fp)
   2085c:	003f4406 	br	20570 <__alt_data_end+0xfffe4050>
   20860:	e4000007 	ldb	r16,0(fp)
   20864:	01000a84 	movi	r4,42
   20868:	e0800044 	addi	r2,fp,1
   2086c:	8106f626 	beq	r16,r4,22448 <___vfprintf_internal_r+0x2078>
   20870:	857ff404 	addi	r21,r16,-48
   20874:	1039883a 	mov	fp,r2
   20878:	0013883a 	mov	r9,zero
   2087c:	957f3d36 	bltu	r18,r21,20574 <__alt_data_end+0xfffe4054>
   20880:	0009883a 	mov	r4,zero
   20884:	01400284 	movi	r5,10
   20888:	002a3dc0 	call	2a3dc <__mulsi3>
   2088c:	e4000007 	ldb	r16,0(fp)
   20890:	a889883a 	add	r4,r21,r2
   20894:	e7000044 	addi	fp,fp,1
   20898:	857ff404 	addi	r21,r16,-48
   2089c:	957ff92e 	bgeu	r18,r21,20884 <__alt_data_end+0xfffe4364>
   208a0:	2013883a 	mov	r9,r4
   208a4:	203f330e 	bge	r4,zero,20574 <__alt_data_end+0xfffe4054>
   208a8:	027fffc4 	movi	r9,-1
   208ac:	003f3106 	br	20574 <__alt_data_end+0xfffe4054>
   208b0:	9cc02014 	ori	r19,r19,128
   208b4:	e005883a 	mov	r2,fp
   208b8:	e4000007 	ldb	r16,0(fp)
   208bc:	003f2c06 	br	20570 <__alt_data_end+0xfffe4050>
   208c0:	857ff404 	addi	r21,r16,-48
   208c4:	d8012e15 	stw	zero,1208(sp)
   208c8:	e021883a 	mov	r16,fp
   208cc:	0009883a 	mov	r4,zero
   208d0:	da412c15 	stw	r9,1200(sp)
   208d4:	01400284 	movi	r5,10
   208d8:	002a3dc0 	call	2a3dc <__mulsi3>
   208dc:	81400007 	ldb	r5,0(r16)
   208e0:	1549883a 	add	r4,r2,r21
   208e4:	e7000044 	addi	fp,fp,1
   208e8:	2d7ff404 	addi	r21,r5,-48
   208ec:	e021883a 	mov	r16,fp
   208f0:	957ff82e 	bgeu	r18,r21,208d4 <__alt_data_end+0xfffe43b4>
   208f4:	2821883a 	mov	r16,r5
   208f8:	d9012e15 	stw	r4,1208(sp)
   208fc:	da412c17 	ldw	r9,1200(sp)
   20900:	003f1c06 	br	20574 <__alt_data_end+0xfffe4054>
   20904:	da012a17 	ldw	r8,1192(sp)
   20908:	df012a15 	stw	fp,1192(sp)
   2090c:	9839883a 	mov	fp,r19
   20910:	dcc12b03 	ldbu	r19,1196(sp)
   20914:	e7000414 	ori	fp,fp,16
   20918:	e080080c 	andi	r2,fp,32
   2091c:	dcc12785 	stb	r19,1182(sp)
   20920:	d8c12d17 	ldw	r3,1204(sp)
   20924:	1001ce26 	beq	r2,zero,21060 <___vfprintf_internal_r+0xc90>
   20928:	d9012d17 	ldw	r4,1204(sp)
   2092c:	18800117 	ldw	r2,4(r3)
   20930:	1c800017 	ldw	r18,0(r3)
   20934:	21000204 	addi	r4,r4,8
   20938:	d9012d15 	stw	r4,1204(sp)
   2093c:	102b883a 	mov	r21,r2
   20940:	10044916 	blt	r2,zero,21a68 <___vfprintf_internal_r+0x1698>
   20944:	dcc12783 	ldbu	r19,1182(sp)
   20948:	da413215 	stw	r9,1224(sp)
   2094c:	00800044 	movi	r2,1
   20950:	9546b03a 	or	r3,r18,r21
   20954:	48000216 	blt	r9,zero,20960 <___vfprintf_internal_r+0x590>
   20958:	013fdfc4 	movi	r4,-129
   2095c:	e138703a 	and	fp,fp,r4
   20960:	1802251e 	bne	r3,zero,211f8 <___vfprintf_internal_r+0xe28>
   20964:	48031726 	beq	r9,zero,215c4 <___vfprintf_internal_r+0x11f4>
   20968:	10803fcc 	andi	r2,r2,255
   2096c:	00c00044 	movi	r3,1
   20970:	10c24526 	beq	r2,r3,21288 <___vfprintf_internal_r+0xeb8>
   20974:	00c00084 	movi	r3,2
   20978:	10c33426 	beq	r2,r3,2164c <___vfprintf_internal_r+0x127c>
   2097c:	d8c10e04 	addi	r3,sp,1080
   20980:	9008d0fa 	srli	r4,r18,3
   20984:	a80a977a 	slli	r5,r21,29
   20988:	a82ad0fa 	srli	r21,r21,3
   2098c:	948001cc 	andi	r18,r18,7
   20990:	90800c04 	addi	r2,r18,48
   20994:	18ffffc4 	addi	r3,r3,-1
   20998:	2924b03a 	or	r18,r5,r4
   2099c:	18800005 	stb	r2,0(r3)
   209a0:	9548b03a 	or	r4,r18,r21
   209a4:	203ff61e 	bne	r4,zero,20980 <__alt_data_end+0xfffe4460>
   209a8:	e100004c 	andi	r4,fp,1
   209ac:	d8c13115 	stw	r3,1220(sp)
   209b0:	20039a1e 	bne	r4,zero,2181c <___vfprintf_internal_r+0x144c>
   209b4:	d8812817 	ldw	r2,1184(sp)
   209b8:	10e3c83a 	sub	r17,r2,r3
   209bc:	8805883a 	mov	r2,r17
   209c0:	8a40010e 	bge	r17,r9,209c8 <___vfprintf_internal_r+0x5f8>
   209c4:	4805883a 	mov	r2,r9
   209c8:	d8812b15 	stw	r2,1196(sp)
   209cc:	d8013415 	stw	zero,1232(sp)
   209d0:	98803fcc 	andi	r2,r19,255
   209d4:	1080201c 	xori	r2,r2,128
   209d8:	10bfe004 	addi	r2,r2,-128
   209dc:	10000326 	beq	r2,zero,209ec <___vfprintf_internal_r+0x61c>
   209e0:	d8c12b17 	ldw	r3,1196(sp)
   209e4:	18c00044 	addi	r3,r3,1
   209e8:	d8c12b15 	stw	r3,1196(sp)
   209ec:	e0c0008c 	andi	r3,fp,2
   209f0:	d8c12c15 	stw	r3,1200(sp)
   209f4:	18000326 	beq	r3,zero,20a04 <___vfprintf_internal_r+0x634>
   209f8:	d8c12b17 	ldw	r3,1196(sp)
   209fc:	18c00084 	addi	r3,r3,2
   20a00:	d8c12b15 	stw	r3,1196(sp)
   20a04:	e0c0210c 	andi	r3,fp,132
   20a08:	d8c13015 	stw	r3,1216(sp)
   20a0c:	1801f81e 	bne	r3,zero,211f0 <___vfprintf_internal_r+0xe20>
   20a10:	d9012e17 	ldw	r4,1208(sp)
   20a14:	d8c12b17 	ldw	r3,1196(sp)
   20a18:	20ebc83a 	sub	r21,r4,r3
   20a1c:	0541f40e 	bge	zero,r21,211f0 <___vfprintf_internal_r+0xe20>
   20a20:	02400404 	movi	r9,16
   20a24:	d8c12017 	ldw	r3,1152(sp)
   20a28:	d8811f17 	ldw	r2,1148(sp)
   20a2c:	4d45750e 	bge	r9,r21,22004 <___vfprintf_internal_r+0x1c34>
   20a30:	014000f4 	movhi	r5,3
   20a34:	297fd884 	addi	r5,r5,-158
   20a38:	d9413615 	stw	r5,1240(sp)
   20a3c:	4827883a 	mov	r19,r9
   20a40:	048001c4 	movi	r18,7
   20a44:	00000306 	br	20a54 <___vfprintf_internal_r+0x684>
   20a48:	ad7ffc04 	addi	r21,r21,-16
   20a4c:	42000204 	addi	r8,r8,8
   20a50:	9d40130e 	bge	r19,r21,20aa0 <___vfprintf_internal_r+0x6d0>
   20a54:	010000f4 	movhi	r4,3
   20a58:	18c00404 	addi	r3,r3,16
   20a5c:	10800044 	addi	r2,r2,1
   20a60:	213fd884 	addi	r4,r4,-158
   20a64:	41000015 	stw	r4,0(r8)
   20a68:	44c00115 	stw	r19,4(r8)
   20a6c:	d8c12015 	stw	r3,1152(sp)
   20a70:	d8811f15 	stw	r2,1148(sp)
   20a74:	90bff40e 	bge	r18,r2,20a48 <__alt_data_end+0xfffe4528>
   20a78:	b809883a 	mov	r4,r23
   20a7c:	b00b883a 	mov	r5,r22
   20a80:	d9811e04 	addi	r6,sp,1144
   20a84:	0026d080 	call	26d08 <__sprint_r>
   20a88:	103f691e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   20a8c:	ad7ffc04 	addi	r21,r21,-16
   20a90:	d8c12017 	ldw	r3,1152(sp)
   20a94:	d8811f17 	ldw	r2,1148(sp)
   20a98:	da000404 	addi	r8,sp,16
   20a9c:	9d7fed16 	blt	r19,r21,20a54 <__alt_data_end+0xfffe4534>
   20aa0:	d9413617 	ldw	r5,1240(sp)
   20aa4:	a8c7883a 	add	r3,r21,r3
   20aa8:	10800044 	addi	r2,r2,1
   20aac:	41400015 	stw	r5,0(r8)
   20ab0:	45400115 	stw	r21,4(r8)
   20ab4:	d8c12015 	stw	r3,1152(sp)
   20ab8:	d8811f15 	stw	r2,1148(sp)
   20abc:	010001c4 	movi	r4,7
   20ac0:	20832b16 	blt	r4,r2,21770 <___vfprintf_internal_r+0x13a0>
   20ac4:	d8812787 	ldb	r2,1182(sp)
   20ac8:	42000204 	addi	r8,r8,8
   20acc:	10000c26 	beq	r2,zero,20b00 <___vfprintf_internal_r+0x730>
   20ad0:	d8811f17 	ldw	r2,1148(sp)
   20ad4:	d9012784 	addi	r4,sp,1182
   20ad8:	18c00044 	addi	r3,r3,1
   20adc:	10800044 	addi	r2,r2,1
   20ae0:	41000015 	stw	r4,0(r8)
   20ae4:	01000044 	movi	r4,1
   20ae8:	41000115 	stw	r4,4(r8)
   20aec:	d8c12015 	stw	r3,1152(sp)
   20af0:	d8811f15 	stw	r2,1148(sp)
   20af4:	010001c4 	movi	r4,7
   20af8:	2082c416 	blt	r4,r2,2160c <___vfprintf_internal_r+0x123c>
   20afc:	42000204 	addi	r8,r8,8
   20b00:	d8812c17 	ldw	r2,1200(sp)
   20b04:	10000c26 	beq	r2,zero,20b38 <___vfprintf_internal_r+0x768>
   20b08:	d8811f17 	ldw	r2,1148(sp)
   20b0c:	d9012704 	addi	r4,sp,1180
   20b10:	18c00084 	addi	r3,r3,2
   20b14:	10800044 	addi	r2,r2,1
   20b18:	41000015 	stw	r4,0(r8)
   20b1c:	01000084 	movi	r4,2
   20b20:	41000115 	stw	r4,4(r8)
   20b24:	d8c12015 	stw	r3,1152(sp)
   20b28:	d8811f15 	stw	r2,1148(sp)
   20b2c:	010001c4 	movi	r4,7
   20b30:	2082be16 	blt	r4,r2,2162c <___vfprintf_internal_r+0x125c>
   20b34:	42000204 	addi	r8,r8,8
   20b38:	d9013017 	ldw	r4,1216(sp)
   20b3c:	00802004 	movi	r2,128
   20b40:	20822026 	beq	r4,r2,213c4 <___vfprintf_internal_r+0xff4>
   20b44:	d9413217 	ldw	r5,1224(sp)
   20b48:	2c67c83a 	sub	r19,r5,r17
   20b4c:	04c0260e 	bge	zero,r19,20be8 <___vfprintf_internal_r+0x818>
   20b50:	05400404 	movi	r21,16
   20b54:	d8811f17 	ldw	r2,1148(sp)
   20b58:	acc4720e 	bge	r21,r19,21d24 <___vfprintf_internal_r+0x1954>
   20b5c:	014000f4 	movhi	r5,3
   20b60:	297fd484 	addi	r5,r5,-174
   20b64:	d9412c15 	stw	r5,1200(sp)
   20b68:	048001c4 	movi	r18,7
   20b6c:	00000306 	br	20b7c <___vfprintf_internal_r+0x7ac>
   20b70:	9cfffc04 	addi	r19,r19,-16
   20b74:	42000204 	addi	r8,r8,8
   20b78:	acc0110e 	bge	r21,r19,20bc0 <___vfprintf_internal_r+0x7f0>
   20b7c:	18c00404 	addi	r3,r3,16
   20b80:	10800044 	addi	r2,r2,1
   20b84:	45000015 	stw	r20,0(r8)
   20b88:	45400115 	stw	r21,4(r8)
   20b8c:	d8c12015 	stw	r3,1152(sp)
   20b90:	d8811f15 	stw	r2,1148(sp)
   20b94:	90bff60e 	bge	r18,r2,20b70 <__alt_data_end+0xfffe4650>
   20b98:	b809883a 	mov	r4,r23
   20b9c:	b00b883a 	mov	r5,r22
   20ba0:	d9811e04 	addi	r6,sp,1144
   20ba4:	0026d080 	call	26d08 <__sprint_r>
   20ba8:	103f211e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   20bac:	9cfffc04 	addi	r19,r19,-16
   20bb0:	d8c12017 	ldw	r3,1152(sp)
   20bb4:	d8811f17 	ldw	r2,1148(sp)
   20bb8:	da000404 	addi	r8,sp,16
   20bbc:	acffef16 	blt	r21,r19,20b7c <__alt_data_end+0xfffe465c>
   20bc0:	d9012c17 	ldw	r4,1200(sp)
   20bc4:	1cc7883a 	add	r3,r3,r19
   20bc8:	10800044 	addi	r2,r2,1
   20bcc:	41000015 	stw	r4,0(r8)
   20bd0:	44c00115 	stw	r19,4(r8)
   20bd4:	d8c12015 	stw	r3,1152(sp)
   20bd8:	d8811f15 	stw	r2,1148(sp)
   20bdc:	010001c4 	movi	r4,7
   20be0:	20828216 	blt	r4,r2,215ec <___vfprintf_internal_r+0x121c>
   20be4:	42000204 	addi	r8,r8,8
   20be8:	e080400c 	andi	r2,fp,256
   20bec:	1001ac1e 	bne	r2,zero,212a0 <___vfprintf_internal_r+0xed0>
   20bf0:	d8811f17 	ldw	r2,1148(sp)
   20bf4:	d9413117 	ldw	r5,1220(sp)
   20bf8:	1c47883a 	add	r3,r3,r17
   20bfc:	10800044 	addi	r2,r2,1
   20c00:	41400015 	stw	r5,0(r8)
   20c04:	44400115 	stw	r17,4(r8)
   20c08:	d8c12015 	stw	r3,1152(sp)
   20c0c:	d8811f15 	stw	r2,1148(sp)
   20c10:	010001c4 	movi	r4,7
   20c14:	20825d16 	blt	r4,r2,2158c <___vfprintf_internal_r+0x11bc>
   20c18:	42000204 	addi	r8,r8,8
   20c1c:	e080010c 	andi	r2,fp,4
   20c20:	10003126 	beq	r2,zero,20ce8 <___vfprintf_internal_r+0x918>
   20c24:	d8812e17 	ldw	r2,1208(sp)
   20c28:	d9012b17 	ldw	r4,1196(sp)
   20c2c:	1121c83a 	sub	r16,r2,r4
   20c30:	04002d0e 	bge	zero,r16,20ce8 <___vfprintf_internal_r+0x918>
   20c34:	04400404 	movi	r17,16
   20c38:	d8811f17 	ldw	r2,1148(sp)
   20c3c:	8c05340e 	bge	r17,r16,22110 <___vfprintf_internal_r+0x1d40>
   20c40:	010000f4 	movhi	r4,3
   20c44:	213fd884 	addi	r4,r4,-158
   20c48:	d9013615 	stw	r4,1240(sp)
   20c4c:	048001c4 	movi	r18,7
   20c50:	00000306 	br	20c60 <___vfprintf_internal_r+0x890>
   20c54:	843ffc04 	addi	r16,r16,-16
   20c58:	42000204 	addi	r8,r8,8
   20c5c:	8c00130e 	bge	r17,r16,20cac <___vfprintf_internal_r+0x8dc>
   20c60:	014000f4 	movhi	r5,3
   20c64:	18c00404 	addi	r3,r3,16
   20c68:	10800044 	addi	r2,r2,1
   20c6c:	297fd884 	addi	r5,r5,-158
   20c70:	41400015 	stw	r5,0(r8)
   20c74:	44400115 	stw	r17,4(r8)
   20c78:	d8c12015 	stw	r3,1152(sp)
   20c7c:	d8811f15 	stw	r2,1148(sp)
   20c80:	90bff40e 	bge	r18,r2,20c54 <__alt_data_end+0xfffe4734>
   20c84:	b809883a 	mov	r4,r23
   20c88:	b00b883a 	mov	r5,r22
   20c8c:	d9811e04 	addi	r6,sp,1144
   20c90:	0026d080 	call	26d08 <__sprint_r>
   20c94:	103ee61e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   20c98:	843ffc04 	addi	r16,r16,-16
   20c9c:	d8c12017 	ldw	r3,1152(sp)
   20ca0:	d8811f17 	ldw	r2,1148(sp)
   20ca4:	da000404 	addi	r8,sp,16
   20ca8:	8c3fed16 	blt	r17,r16,20c60 <__alt_data_end+0xfffe4740>
   20cac:	d9013617 	ldw	r4,1240(sp)
   20cb0:	1c07883a 	add	r3,r3,r16
   20cb4:	10800044 	addi	r2,r2,1
   20cb8:	41000015 	stw	r4,0(r8)
   20cbc:	44000115 	stw	r16,4(r8)
   20cc0:	d8c12015 	stw	r3,1152(sp)
   20cc4:	d8811f15 	stw	r2,1148(sp)
   20cc8:	010001c4 	movi	r4,7
   20ccc:	2080060e 	bge	r4,r2,20ce8 <___vfprintf_internal_r+0x918>
   20cd0:	b809883a 	mov	r4,r23
   20cd4:	b00b883a 	mov	r5,r22
   20cd8:	d9811e04 	addi	r6,sp,1144
   20cdc:	0026d080 	call	26d08 <__sprint_r>
   20ce0:	103ed31e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   20ce4:	d8c12017 	ldw	r3,1152(sp)
   20ce8:	df012b17 	ldw	fp,1196(sp)
   20cec:	d9412e17 	ldw	r5,1208(sp)
   20cf0:	e140010e 	bge	fp,r5,20cf8 <___vfprintf_internal_r+0x928>
   20cf4:	2839883a 	mov	fp,r5
   20cf8:	d8812f17 	ldw	r2,1212(sp)
   20cfc:	1705883a 	add	r2,r2,fp
   20d00:	d8812f15 	stw	r2,1212(sp)
   20d04:	1802291e 	bne	r3,zero,215ac <___vfprintf_internal_r+0x11dc>
   20d08:	d8c12a17 	ldw	r3,1192(sp)
   20d0c:	d8011f15 	stw	zero,1148(sp)
   20d10:	da000404 	addi	r8,sp,16
   20d14:	18800007 	ldb	r2,0(r3)
   20d18:	103ded1e 	bne	r2,zero,204d0 <__alt_data_end+0xfffe3fb0>
   20d1c:	dc012a17 	ldw	r16,1192(sp)
   20d20:	003e0506 	br	20538 <__alt_data_end+0xfffe4018>
   20d24:	d9012d17 	ldw	r4,1204(sp)
   20d28:	d9412d17 	ldw	r5,1204(sp)
   20d2c:	da012a17 	ldw	r8,1192(sp)
   20d30:	21000017 	ldw	r4,0(r4)
   20d34:	29400117 	ldw	r5,4(r5)
   20d38:	df012a15 	stw	fp,1192(sp)
   20d3c:	9839883a 	mov	fp,r19
   20d40:	dcc12b03 	ldbu	r19,1196(sp)
   20d44:	d9013715 	stw	r4,1244(sp)
   20d48:	d9413915 	stw	r5,1252(sp)
   20d4c:	da013f15 	stw	r8,1276(sp)
   20d50:	da413e15 	stw	r9,1272(sp)
   20d54:	dcc12785 	stb	r19,1182(sp)
   20d58:	00268cc0 	call	268cc <__fpclassifyd>
   20d5c:	d8c12d17 	ldw	r3,1204(sp)
   20d60:	04400044 	movi	r17,1
   20d64:	da013f17 	ldw	r8,1276(sp)
   20d68:	1c800204 	addi	r18,r3,8
   20d6c:	da413e17 	ldw	r9,1272(sp)
   20d70:	d9013717 	ldw	r4,1244(sp)
   20d74:	d9413917 	ldw	r5,1252(sp)
   20d78:	1443451e 	bne	r2,r17,21a90 <___vfprintf_internal_r+0x16c0>
   20d7c:	000d883a 	mov	r6,zero
   20d80:	000f883a 	mov	r7,zero
   20d84:	002b7840 	call	2b784 <__ledf2>
   20d88:	da013f17 	ldw	r8,1276(sp)
   20d8c:	1004fe16 	blt	r2,zero,22188 <___vfprintf_internal_r+0x1db8>
   20d90:	dcc12783 	ldbu	r19,1182(sp)
   20d94:	008011c4 	movi	r2,71
   20d98:	14045d0e 	bge	r2,r16,21f10 <___vfprintf_internal_r+0x1b40>
   20d9c:	014000f4 	movhi	r5,3
   20da0:	297fc504 	addi	r5,r5,-236
   20da4:	d9413115 	stw	r5,1220(sp)
   20da8:	00c000c4 	movi	r3,3
   20dac:	00bfdfc4 	movi	r2,-129
   20db0:	d8c12b15 	stw	r3,1196(sp)
   20db4:	e0b8703a 	and	fp,fp,r2
   20db8:	dc812d15 	stw	r18,1204(sp)
   20dbc:	1823883a 	mov	r17,r3
   20dc0:	d8013215 	stw	zero,1224(sp)
   20dc4:	d8013415 	stw	zero,1232(sp)
   20dc8:	003f0106 	br	209d0 <__alt_data_end+0xfffe44b0>
   20dcc:	9cc00214 	ori	r19,r19,8
   20dd0:	e005883a 	mov	r2,fp
   20dd4:	e4000007 	ldb	r16,0(fp)
   20dd8:	003de506 	br	20570 <__alt_data_end+0xfffe4050>
   20ddc:	da012a17 	ldw	r8,1192(sp)
   20de0:	df012a15 	stw	fp,1192(sp)
   20de4:	9f000414 	ori	fp,r19,16
   20de8:	e0c0080c 	andi	r3,fp,32
   20dec:	d8812d17 	ldw	r2,1204(sp)
   20df0:	18007626 	beq	r3,zero,20fcc <___vfprintf_internal_r+0xbfc>
   20df4:	d9412d17 	ldw	r5,1204(sp)
   20df8:	14800017 	ldw	r18,0(r2)
   20dfc:	15400117 	ldw	r21,4(r2)
   20e00:	29400204 	addi	r5,r5,8
   20e04:	d9412d15 	stw	r5,1204(sp)
   20e08:	0005883a 	mov	r2,zero
   20e0c:	9546b03a 	or	r3,r18,r21
   20e10:	d8012785 	stb	zero,1182(sp)
   20e14:	da413215 	stw	r9,1224(sp)
   20e18:	0027883a 	mov	r19,zero
   20e1c:	003ecd06 	br	20954 <__alt_data_end+0xfffe4434>
   20e20:	da012a17 	ldw	r8,1192(sp)
   20e24:	df012a15 	stw	fp,1192(sp)
   20e28:	9f000414 	ori	fp,r19,16
   20e2c:	e0c0080c 	andi	r3,fp,32
   20e30:	d8812d17 	ldw	r2,1204(sp)
   20e34:	18002c26 	beq	r3,zero,20ee8 <___vfprintf_internal_r+0xb18>
   20e38:	d9012d17 	ldw	r4,1204(sp)
   20e3c:	14800017 	ldw	r18,0(r2)
   20e40:	15400117 	ldw	r21,4(r2)
   20e44:	21000204 	addi	r4,r4,8
   20e48:	d9012d15 	stw	r4,1204(sp)
   20e4c:	00800044 	movi	r2,1
   20e50:	9546b03a 	or	r3,r18,r21
   20e54:	003fee06 	br	20e10 <__alt_data_end+0xfffe48f0>
   20e58:	da012a17 	ldw	r8,1192(sp)
   20e5c:	df012a15 	stw	fp,1192(sp)
   20e60:	9839883a 	mov	fp,r19
   20e64:	dcc12b03 	ldbu	r19,1196(sp)
   20e68:	014000f4 	movhi	r5,3
   20e6c:	297fc804 	addi	r5,r5,-224
   20e70:	dcc12785 	stb	r19,1182(sp)
   20e74:	d9413b15 	stw	r5,1260(sp)
   20e78:	e0c0080c 	andi	r3,fp,32
   20e7c:	d8812d17 	ldw	r2,1204(sp)
   20e80:	18002e26 	beq	r3,zero,20f3c <___vfprintf_internal_r+0xb6c>
   20e84:	d9412d17 	ldw	r5,1204(sp)
   20e88:	14800017 	ldw	r18,0(r2)
   20e8c:	15400117 	ldw	r21,4(r2)
   20e90:	29400204 	addi	r5,r5,8
   20e94:	d9412d15 	stw	r5,1204(sp)
   20e98:	e080004c 	andi	r2,fp,1
   20e9c:	10025c26 	beq	r2,zero,21810 <___vfprintf_internal_r+0x1440>
   20ea0:	9546b03a 	or	r3,r18,r21
   20ea4:	18038f26 	beq	r3,zero,21ce4 <___vfprintf_internal_r+0x1914>
   20ea8:	00800c04 	movi	r2,48
   20eac:	d8812705 	stb	r2,1180(sp)
   20eb0:	dc012745 	stb	r16,1181(sp)
   20eb4:	e7000094 	ori	fp,fp,2
   20eb8:	00800084 	movi	r2,2
   20ebc:	003fd406 	br	20e10 <__alt_data_end+0xfffe48f0>
   20ec0:	9cc00814 	ori	r19,r19,32
   20ec4:	e005883a 	mov	r2,fp
   20ec8:	e4000007 	ldb	r16,0(fp)
   20ecc:	003da806 	br	20570 <__alt_data_end+0xfffe4050>
   20ed0:	da012a17 	ldw	r8,1192(sp)
   20ed4:	df012a15 	stw	fp,1192(sp)
   20ed8:	9839883a 	mov	fp,r19
   20edc:	e0c0080c 	andi	r3,fp,32
   20ee0:	d8812d17 	ldw	r2,1204(sp)
   20ee4:	183fd41e 	bne	r3,zero,20e38 <__alt_data_end+0xfffe4918>
   20ee8:	e0c0040c 	andi	r3,fp,16
   20eec:	18035f26 	beq	r3,zero,21c6c <___vfprintf_internal_r+0x189c>
   20ef0:	d9412d17 	ldw	r5,1204(sp)
   20ef4:	14800017 	ldw	r18,0(r2)
   20ef8:	002b883a 	mov	r21,zero
   20efc:	29400104 	addi	r5,r5,4
   20f00:	d9412d15 	stw	r5,1204(sp)
   20f04:	00800044 	movi	r2,1
   20f08:	9007883a 	mov	r3,r18
   20f0c:	003fc006 	br	20e10 <__alt_data_end+0xfffe48f0>
   20f10:	da012a17 	ldw	r8,1192(sp)
   20f14:	df012a15 	stw	fp,1192(sp)
   20f18:	9839883a 	mov	fp,r19
   20f1c:	dcc12b03 	ldbu	r19,1196(sp)
   20f20:	010000f4 	movhi	r4,3
   20f24:	213fcd04 	addi	r4,r4,-204
   20f28:	d9013b15 	stw	r4,1260(sp)
   20f2c:	dcc12785 	stb	r19,1182(sp)
   20f30:	e0c0080c 	andi	r3,fp,32
   20f34:	d8812d17 	ldw	r2,1204(sp)
   20f38:	183fd21e 	bne	r3,zero,20e84 <__alt_data_end+0xfffe4964>
   20f3c:	e0c0040c 	andi	r3,fp,16
   20f40:	18035426 	beq	r3,zero,21c94 <___vfprintf_internal_r+0x18c4>
   20f44:	d8c12d17 	ldw	r3,1204(sp)
   20f48:	14800017 	ldw	r18,0(r2)
   20f4c:	002b883a 	mov	r21,zero
   20f50:	18c00104 	addi	r3,r3,4
   20f54:	d8c12d15 	stw	r3,1204(sp)
   20f58:	003fcf06 	br	20e98 <__alt_data_end+0xfffe4978>
   20f5c:	e4000007 	ldb	r16,0(fp)
   20f60:	00801b04 	movi	r2,108
   20f64:	8083f726 	beq	r16,r2,21f44 <___vfprintf_internal_r+0x1b74>
   20f68:	9cc00414 	ori	r19,r19,16
   20f6c:	e005883a 	mov	r2,fp
   20f70:	003d7f06 	br	20570 <__alt_data_end+0xfffe4050>
   20f74:	da012a17 	ldw	r8,1192(sp)
   20f78:	df012a15 	stw	fp,1192(sp)
   20f7c:	9839883a 	mov	fp,r19
   20f80:	dcc12b03 	ldbu	r19,1196(sp)
   20f84:	e080080c 	andi	r2,fp,32
   20f88:	dcc12785 	stb	r19,1182(sp)
   20f8c:	10032226 	beq	r2,zero,21c18 <___vfprintf_internal_r+0x1848>
   20f90:	d9412d17 	ldw	r5,1204(sp)
   20f94:	d9012f17 	ldw	r4,1212(sp)
   20f98:	28800017 	ldw	r2,0(r5)
   20f9c:	2007d7fa 	srai	r3,r4,31
   20fa0:	29400104 	addi	r5,r5,4
   20fa4:	d9412d15 	stw	r5,1204(sp)
   20fa8:	11000015 	stw	r4,0(r2)
   20fac:	10c00115 	stw	r3,4(r2)
   20fb0:	003d4406 	br	204c4 <__alt_data_end+0xfffe3fa4>
   20fb4:	da012a17 	ldw	r8,1192(sp)
   20fb8:	df012a15 	stw	fp,1192(sp)
   20fbc:	9839883a 	mov	fp,r19
   20fc0:	e0c0080c 	andi	r3,fp,32
   20fc4:	d8812d17 	ldw	r2,1204(sp)
   20fc8:	183f8a1e 	bne	r3,zero,20df4 <__alt_data_end+0xfffe48d4>
   20fcc:	e0c0040c 	andi	r3,fp,16
   20fd0:	18031c26 	beq	r3,zero,21c44 <___vfprintf_internal_r+0x1874>
   20fd4:	14800017 	ldw	r18,0(r2)
   20fd8:	d8812d17 	ldw	r2,1204(sp)
   20fdc:	002b883a 	mov	r21,zero
   20fe0:	9007883a 	mov	r3,r18
   20fe4:	10800104 	addi	r2,r2,4
   20fe8:	d8812d15 	stw	r2,1204(sp)
   20fec:	0005883a 	mov	r2,zero
   20ff0:	003f8706 	br	20e10 <__alt_data_end+0xfffe48f0>
   20ff4:	d9412d17 	ldw	r5,1204(sp)
   20ff8:	00800c04 	movi	r2,48
   20ffc:	d8812705 	stb	r2,1180(sp)
   21000:	2c800017 	ldw	r18,0(r5)
   21004:	00801e04 	movi	r2,120
   21008:	d8812745 	stb	r2,1181(sp)
   2100c:	008000f4 	movhi	r2,3
   21010:	10bfcd04 	addi	r2,r2,-204
   21014:	29400104 	addi	r5,r5,4
   21018:	da012a17 	ldw	r8,1192(sp)
   2101c:	d8813b15 	stw	r2,1260(sp)
   21020:	df012a15 	stw	fp,1192(sp)
   21024:	002b883a 	mov	r21,zero
   21028:	9f000094 	ori	fp,r19,2
   2102c:	d9412d15 	stw	r5,1204(sp)
   21030:	00800084 	movi	r2,2
   21034:	04001e04 	movi	r16,120
   21038:	9007883a 	mov	r3,r18
   2103c:	003f7406 	br	20e10 <__alt_data_end+0xfffe48f0>
   21040:	da012a17 	ldw	r8,1192(sp)
   21044:	df012a15 	stw	fp,1192(sp)
   21048:	9839883a 	mov	fp,r19
   2104c:	dcc12b03 	ldbu	r19,1196(sp)
   21050:	e080080c 	andi	r2,fp,32
   21054:	d8c12d17 	ldw	r3,1204(sp)
   21058:	dcc12785 	stb	r19,1182(sp)
   2105c:	103e321e 	bne	r2,zero,20928 <__alt_data_end+0xfffe4408>
   21060:	e080040c 	andi	r2,fp,16
   21064:	10031326 	beq	r2,zero,21cb4 <___vfprintf_internal_r+0x18e4>
   21068:	1c800017 	ldw	r18,0(r3)
   2106c:	d9412d17 	ldw	r5,1204(sp)
   21070:	902bd7fa 	srai	r21,r18,31
   21074:	29400104 	addi	r5,r5,4
   21078:	d9412d15 	stw	r5,1204(sp)
   2107c:	a805883a 	mov	r2,r21
   21080:	003e2f06 	br	20940 <__alt_data_end+0xfffe4420>
   21084:	9cc01014 	ori	r19,r19,64
   21088:	e005883a 	mov	r2,fp
   2108c:	e4000007 	ldb	r16,0(fp)
   21090:	003d3706 	br	20570 <__alt_data_end+0xfffe4050>
   21094:	d8c12d17 	ldw	r3,1204(sp)
   21098:	d9012d17 	ldw	r4,1204(sp)
   2109c:	da012a17 	ldw	r8,1192(sp)
   210a0:	18800017 	ldw	r2,0(r3)
   210a4:	21000104 	addi	r4,r4,4
   210a8:	00c00044 	movi	r3,1
   210ac:	df012a15 	stw	fp,1192(sp)
   210b0:	d8c12b15 	stw	r3,1196(sp)
   210b4:	9839883a 	mov	fp,r19
   210b8:	d8012785 	stb	zero,1182(sp)
   210bc:	d8810405 	stb	r2,1040(sp)
   210c0:	d9012d15 	stw	r4,1204(sp)
   210c4:	1823883a 	mov	r17,r3
   210c8:	d8c10404 	addi	r3,sp,1040
   210cc:	d8013215 	stw	zero,1224(sp)
   210d0:	d8013415 	stw	zero,1232(sp)
   210d4:	d8c13115 	stw	r3,1220(sp)
   210d8:	0005883a 	mov	r2,zero
   210dc:	003e4306 	br	209ec <__alt_data_end+0xfffe44cc>
   210e0:	d8812b07 	ldb	r2,1196(sp)
   210e4:	1002fc1e 	bne	r2,zero,21cd8 <___vfprintf_internal_r+0x1908>
   210e8:	00c00804 	movi	r3,32
   210ec:	d8c12b05 	stb	r3,1196(sp)
   210f0:	e005883a 	mov	r2,fp
   210f4:	e4000007 	ldb	r16,0(fp)
   210f8:	003d1d06 	br	20570 <__alt_data_end+0xfffe4050>
   210fc:	9cc00054 	ori	r19,r19,1
   21100:	e005883a 	mov	r2,fp
   21104:	e4000007 	ldb	r16,0(fp)
   21108:	003d1906 	br	20570 <__alt_data_end+0xfffe4050>
   2110c:	d9012d17 	ldw	r4,1204(sp)
   21110:	d9412d17 	ldw	r5,1204(sp)
   21114:	21000017 	ldw	r4,0(r4)
   21118:	28c00104 	addi	r3,r5,4
   2111c:	d9012e15 	stw	r4,1208(sp)
   21120:	20038c16 	blt	r4,zero,21f54 <___vfprintf_internal_r+0x1b84>
   21124:	d8c12d15 	stw	r3,1204(sp)
   21128:	e005883a 	mov	r2,fp
   2112c:	e4000007 	ldb	r16,0(fp)
   21130:	003d0f06 	br	20570 <__alt_data_end+0xfffe4050>
   21134:	00c00ac4 	movi	r3,43
   21138:	d8c12b05 	stb	r3,1196(sp)
   2113c:	e005883a 	mov	r2,fp
   21140:	e4000007 	ldb	r16,0(fp)
   21144:	003d0a06 	br	20570 <__alt_data_end+0xfffe4050>
   21148:	d8c12d17 	ldw	r3,1204(sp)
   2114c:	d9012d17 	ldw	r4,1204(sp)
   21150:	da012a17 	ldw	r8,1192(sp)
   21154:	18c00017 	ldw	r3,0(r3)
   21158:	df012a15 	stw	fp,1192(sp)
   2115c:	d8012785 	stb	zero,1182(sp)
   21160:	d8c13115 	stw	r3,1220(sp)
   21164:	9839883a 	mov	fp,r19
   21168:	24800104 	addi	r18,r4,4
   2116c:	1803f726 	beq	r3,zero,2214c <___vfprintf_internal_r+0x1d7c>
   21170:	d9013117 	ldw	r4,1220(sp)
   21174:	48038916 	blt	r9,zero,21f9c <___vfprintf_internal_r+0x1bcc>
   21178:	480d883a 	mov	r6,r9
   2117c:	000b883a 	mov	r5,zero
   21180:	da013f15 	stw	r8,1276(sp)
   21184:	da413e15 	stw	r9,1272(sp)
   21188:	00255400 	call	25540 <memchr>
   2118c:	da013f17 	ldw	r8,1276(sp)
   21190:	da413e17 	ldw	r9,1272(sp)
   21194:	10045926 	beq	r2,zero,222fc <___vfprintf_internal_r+0x1f2c>
   21198:	d8c13117 	ldw	r3,1220(sp)
   2119c:	10e3c83a 	sub	r17,r2,r3
   211a0:	4c433516 	blt	r9,r17,21e78 <___vfprintf_internal_r+0x1aa8>
   211a4:	8805883a 	mov	r2,r17
   211a8:	88038116 	blt	r17,zero,21fb0 <___vfprintf_internal_r+0x1be0>
   211ac:	dcc12783 	ldbu	r19,1182(sp)
   211b0:	d8812b15 	stw	r2,1196(sp)
   211b4:	dc812d15 	stw	r18,1204(sp)
   211b8:	d8013215 	stw	zero,1224(sp)
   211bc:	d8013415 	stw	zero,1232(sp)
   211c0:	003e0306 	br	209d0 <__alt_data_end+0xfffe44b0>
   211c4:	da012a17 	ldw	r8,1192(sp)
   211c8:	df012a15 	stw	fp,1192(sp)
   211cc:	9839883a 	mov	fp,r19
   211d0:	dcc12b03 	ldbu	r19,1196(sp)
   211d4:	dcc12785 	stb	r19,1182(sp)
   211d8:	803d8f26 	beq	r16,zero,20818 <__alt_data_end+0xfffe42f8>
   211dc:	00c00044 	movi	r3,1
   211e0:	d8c12b15 	stw	r3,1196(sp)
   211e4:	dc010405 	stb	r16,1040(sp)
   211e8:	d8012785 	stb	zero,1182(sp)
   211ec:	003fb506 	br	210c4 <__alt_data_end+0xfffe4ba4>
   211f0:	d8c12017 	ldw	r3,1152(sp)
   211f4:	003e3506 	br	20acc <__alt_data_end+0xfffe45ac>
   211f8:	10803fcc 	andi	r2,r2,255
   211fc:	00c00044 	movi	r3,1
   21200:	10fddc1e 	bne	r2,r3,20974 <__alt_data_end+0xfffe4454>
   21204:	a800021e 	bne	r21,zero,21210 <___vfprintf_internal_r+0xe40>
   21208:	00800244 	movi	r2,9
   2120c:	14801e2e 	bgeu	r2,r18,21288 <___vfprintf_internal_r+0xeb8>
   21210:	dc012b15 	stw	r16,1196(sp)
   21214:	dc410e04 	addi	r17,sp,1080
   21218:	9021883a 	mov	r16,r18
   2121c:	da012c15 	stw	r8,1200(sp)
   21220:	a825883a 	mov	r18,r21
   21224:	482b883a 	mov	r21,r9
   21228:	8009883a 	mov	r4,r16
   2122c:	900b883a 	mov	r5,r18
   21230:	01800284 	movi	r6,10
   21234:	000f883a 	mov	r7,zero
   21238:	0029c940 	call	29c94 <__umoddi3>
   2123c:	10800c04 	addi	r2,r2,48
   21240:	8c7fffc4 	addi	r17,r17,-1
   21244:	8009883a 	mov	r4,r16
   21248:	900b883a 	mov	r5,r18
   2124c:	01800284 	movi	r6,10
   21250:	000f883a 	mov	r7,zero
   21254:	88800005 	stb	r2,0(r17)
   21258:	00296540 	call	29654 <__udivdi3>
   2125c:	1021883a 	mov	r16,r2
   21260:	10c4b03a 	or	r2,r2,r3
   21264:	1825883a 	mov	r18,r3
   21268:	103fef1e 	bne	r2,zero,21228 <__alt_data_end+0xfffe4d08>
   2126c:	d9012817 	ldw	r4,1184(sp)
   21270:	dc413115 	stw	r17,1220(sp)
   21274:	dc012b17 	ldw	r16,1196(sp)
   21278:	da012c17 	ldw	r8,1200(sp)
   2127c:	a813883a 	mov	r9,r21
   21280:	2463c83a 	sub	r17,r4,r17
   21284:	003dcd06 	br	209bc <__alt_data_end+0xfffe449c>
   21288:	94800c04 	addi	r18,r18,48
   2128c:	d8c10dc4 	addi	r3,sp,1079
   21290:	dc810dc5 	stb	r18,1079(sp)
   21294:	dc413c17 	ldw	r17,1264(sp)
   21298:	d8c13115 	stw	r3,1220(sp)
   2129c:	003dc706 	br	209bc <__alt_data_end+0xfffe449c>
   212a0:	00801944 	movi	r2,101
   212a4:	1400720e 	bge	r2,r16,21470 <___vfprintf_internal_r+0x10a0>
   212a8:	d9013717 	ldw	r4,1244(sp)
   212ac:	d9413917 	ldw	r5,1252(sp)
   212b0:	000d883a 	mov	r6,zero
   212b4:	000f883a 	mov	r7,zero
   212b8:	d8c13d15 	stw	r3,1268(sp)
   212bc:	da013f15 	stw	r8,1276(sp)
   212c0:	002b6200 	call	2b620 <__eqdf2>
   212c4:	d8c13d17 	ldw	r3,1268(sp)
   212c8:	da013f17 	ldw	r8,1276(sp)
   212cc:	1000f41e 	bne	r2,zero,216a0 <___vfprintf_internal_r+0x12d0>
   212d0:	d8811f17 	ldw	r2,1148(sp)
   212d4:	010000f4 	movhi	r4,3
   212d8:	213fd404 	addi	r4,r4,-176
   212dc:	18c00044 	addi	r3,r3,1
   212e0:	10800044 	addi	r2,r2,1
   212e4:	41000015 	stw	r4,0(r8)
   212e8:	01000044 	movi	r4,1
   212ec:	41000115 	stw	r4,4(r8)
   212f0:	d8c12015 	stw	r3,1152(sp)
   212f4:	d8811f15 	stw	r2,1148(sp)
   212f8:	010001c4 	movi	r4,7
   212fc:	20828d16 	blt	r4,r2,21d34 <___vfprintf_internal_r+0x1964>
   21300:	42000204 	addi	r8,r8,8
   21304:	d8812617 	ldw	r2,1176(sp)
   21308:	d9413317 	ldw	r5,1228(sp)
   2130c:	11400216 	blt	r2,r5,21318 <___vfprintf_internal_r+0xf48>
   21310:	e080004c 	andi	r2,fp,1
   21314:	103e4126 	beq	r2,zero,20c1c <__alt_data_end+0xfffe46fc>
   21318:	d8813817 	ldw	r2,1248(sp)
   2131c:	d9013517 	ldw	r4,1236(sp)
   21320:	d9413817 	ldw	r5,1248(sp)
   21324:	1887883a 	add	r3,r3,r2
   21328:	d8811f17 	ldw	r2,1148(sp)
   2132c:	41000015 	stw	r4,0(r8)
   21330:	41400115 	stw	r5,4(r8)
   21334:	10800044 	addi	r2,r2,1
   21338:	d8c12015 	stw	r3,1152(sp)
   2133c:	d8811f15 	stw	r2,1148(sp)
   21340:	010001c4 	movi	r4,7
   21344:	20830916 	blt	r4,r2,21f6c <___vfprintf_internal_r+0x1b9c>
   21348:	42000204 	addi	r8,r8,8
   2134c:	d8813317 	ldw	r2,1228(sp)
   21350:	143fffc4 	addi	r16,r2,-1
   21354:	043e310e 	bge	zero,r16,20c1c <__alt_data_end+0xfffe46fc>
   21358:	04400404 	movi	r17,16
   2135c:	d8811f17 	ldw	r2,1148(sp)
   21360:	8c007e0e 	bge	r17,r16,2155c <___vfprintf_internal_r+0x118c>
   21364:	014000f4 	movhi	r5,3
   21368:	297fd484 	addi	r5,r5,-174
   2136c:	d9412c15 	stw	r5,1200(sp)
   21370:	04c001c4 	movi	r19,7
   21374:	00000306 	br	21384 <___vfprintf_internal_r+0xfb4>
   21378:	42000204 	addi	r8,r8,8
   2137c:	843ffc04 	addi	r16,r16,-16
   21380:	8c00790e 	bge	r17,r16,21568 <___vfprintf_internal_r+0x1198>
   21384:	18c00404 	addi	r3,r3,16
   21388:	10800044 	addi	r2,r2,1
   2138c:	45000015 	stw	r20,0(r8)
   21390:	44400115 	stw	r17,4(r8)
   21394:	d8c12015 	stw	r3,1152(sp)
   21398:	d8811f15 	stw	r2,1148(sp)
   2139c:	98bff60e 	bge	r19,r2,21378 <__alt_data_end+0xfffe4e58>
   213a0:	b809883a 	mov	r4,r23
   213a4:	b00b883a 	mov	r5,r22
   213a8:	d9811e04 	addi	r6,sp,1144
   213ac:	0026d080 	call	26d08 <__sprint_r>
   213b0:	103d1f1e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   213b4:	d8c12017 	ldw	r3,1152(sp)
   213b8:	d8811f17 	ldw	r2,1148(sp)
   213bc:	da000404 	addi	r8,sp,16
   213c0:	003fee06 	br	2137c <__alt_data_end+0xfffe4e5c>
   213c4:	d9412e17 	ldw	r5,1208(sp)
   213c8:	d8812b17 	ldw	r2,1196(sp)
   213cc:	28a7c83a 	sub	r19,r5,r2
   213d0:	04fddc0e 	bge	zero,r19,20b44 <__alt_data_end+0xfffe4624>
   213d4:	05400404 	movi	r21,16
   213d8:	d8811f17 	ldw	r2,1148(sp)
   213dc:	acc3870e 	bge	r21,r19,221fc <___vfprintf_internal_r+0x1e2c>
   213e0:	014000f4 	movhi	r5,3
   213e4:	297fd484 	addi	r5,r5,-174
   213e8:	d9412c15 	stw	r5,1200(sp)
   213ec:	048001c4 	movi	r18,7
   213f0:	00000306 	br	21400 <___vfprintf_internal_r+0x1030>
   213f4:	9cfffc04 	addi	r19,r19,-16
   213f8:	42000204 	addi	r8,r8,8
   213fc:	acc0110e 	bge	r21,r19,21444 <___vfprintf_internal_r+0x1074>
   21400:	18c00404 	addi	r3,r3,16
   21404:	10800044 	addi	r2,r2,1
   21408:	45000015 	stw	r20,0(r8)
   2140c:	45400115 	stw	r21,4(r8)
   21410:	d8c12015 	stw	r3,1152(sp)
   21414:	d8811f15 	stw	r2,1148(sp)
   21418:	90bff60e 	bge	r18,r2,213f4 <__alt_data_end+0xfffe4ed4>
   2141c:	b809883a 	mov	r4,r23
   21420:	b00b883a 	mov	r5,r22
   21424:	d9811e04 	addi	r6,sp,1144
   21428:	0026d080 	call	26d08 <__sprint_r>
   2142c:	103d001e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21430:	9cfffc04 	addi	r19,r19,-16
   21434:	d8c12017 	ldw	r3,1152(sp)
   21438:	d8811f17 	ldw	r2,1148(sp)
   2143c:	da000404 	addi	r8,sp,16
   21440:	acffef16 	blt	r21,r19,21400 <__alt_data_end+0xfffe4ee0>
   21444:	d9012c17 	ldw	r4,1200(sp)
   21448:	1cc7883a 	add	r3,r3,r19
   2144c:	10800044 	addi	r2,r2,1
   21450:	41000015 	stw	r4,0(r8)
   21454:	44c00115 	stw	r19,4(r8)
   21458:	d8c12015 	stw	r3,1152(sp)
   2145c:	d8811f15 	stw	r2,1148(sp)
   21460:	010001c4 	movi	r4,7
   21464:	20817816 	blt	r4,r2,21a48 <___vfprintf_internal_r+0x1678>
   21468:	42000204 	addi	r8,r8,8
   2146c:	003db506 	br	20b44 <__alt_data_end+0xfffe4624>
   21470:	d9413317 	ldw	r5,1228(sp)
   21474:	00800044 	movi	r2,1
   21478:	18c00044 	addi	r3,r3,1
   2147c:	11413e0e 	bge	r2,r5,21978 <___vfprintf_internal_r+0x15a8>
   21480:	dc011f17 	ldw	r16,1148(sp)
   21484:	d8813117 	ldw	r2,1220(sp)
   21488:	d8c12015 	stw	r3,1152(sp)
   2148c:	84000044 	addi	r16,r16,1
   21490:	40800015 	stw	r2,0(r8)
   21494:	00800044 	movi	r2,1
   21498:	40800115 	stw	r2,4(r8)
   2149c:	dc011f15 	stw	r16,1148(sp)
   214a0:	008001c4 	movi	r2,7
   214a4:	14015616 	blt	r2,r16,21a00 <___vfprintf_internal_r+0x1630>
   214a8:	42000204 	addi	r8,r8,8
   214ac:	d9013817 	ldw	r4,1248(sp)
   214b0:	d9413517 	ldw	r5,1236(sp)
   214b4:	84000044 	addi	r16,r16,1
   214b8:	1907883a 	add	r3,r3,r4
   214bc:	41400015 	stw	r5,0(r8)
   214c0:	41000115 	stw	r4,4(r8)
   214c4:	d8c12015 	stw	r3,1152(sp)
   214c8:	dc011f15 	stw	r16,1148(sp)
   214cc:	008001c4 	movi	r2,7
   214d0:	14015416 	blt	r2,r16,21a24 <___vfprintf_internal_r+0x1654>
   214d4:	44400204 	addi	r17,r8,8
   214d8:	d9013717 	ldw	r4,1244(sp)
   214dc:	d9413917 	ldw	r5,1252(sp)
   214e0:	000d883a 	mov	r6,zero
   214e4:	000f883a 	mov	r7,zero
   214e8:	d8c13d15 	stw	r3,1268(sp)
   214ec:	002b6200 	call	2b620 <__eqdf2>
   214f0:	d8c13d17 	ldw	r3,1268(sp)
   214f4:	1000a726 	beq	r2,zero,21794 <___vfprintf_internal_r+0x13c4>
   214f8:	d9013317 	ldw	r4,1228(sp)
   214fc:	d9413117 	ldw	r5,1220(sp)
   21500:	84000044 	addi	r16,r16,1
   21504:	20bfffc4 	addi	r2,r4,-1
   21508:	1887883a 	add	r3,r3,r2
   2150c:	29000044 	addi	r4,r5,1
   21510:	88800115 	stw	r2,4(r17)
   21514:	89000015 	stw	r4,0(r17)
   21518:	d8c12015 	stw	r3,1152(sp)
   2151c:	dc011f15 	stw	r16,1148(sp)
   21520:	008001c4 	movi	r2,7
   21524:	14012d16 	blt	r2,r16,219dc <___vfprintf_internal_r+0x160c>
   21528:	8c400204 	addi	r17,r17,8
   2152c:	d9413a17 	ldw	r5,1256(sp)
   21530:	dcc122c4 	addi	r19,sp,1163
   21534:	84000044 	addi	r16,r16,1
   21538:	28c7883a 	add	r3,r5,r3
   2153c:	8cc00015 	stw	r19,0(r17)
   21540:	89400115 	stw	r5,4(r17)
   21544:	d8c12015 	stw	r3,1152(sp)
   21548:	dc011f15 	stw	r16,1148(sp)
   2154c:	008001c4 	movi	r2,7
   21550:	14000e16 	blt	r2,r16,2158c <___vfprintf_internal_r+0x11bc>
   21554:	8a000204 	addi	r8,r17,8
   21558:	003db006 	br	20c1c <__alt_data_end+0xfffe46fc>
   2155c:	010000f4 	movhi	r4,3
   21560:	213fd484 	addi	r4,r4,-174
   21564:	d9012c15 	stw	r4,1200(sp)
   21568:	d9012c17 	ldw	r4,1200(sp)
   2156c:	1c07883a 	add	r3,r3,r16
   21570:	44000115 	stw	r16,4(r8)
   21574:	41000015 	stw	r4,0(r8)
   21578:	10800044 	addi	r2,r2,1
   2157c:	d8c12015 	stw	r3,1152(sp)
   21580:	d8811f15 	stw	r2,1148(sp)
   21584:	010001c4 	movi	r4,7
   21588:	20bda30e 	bge	r4,r2,20c18 <__alt_data_end+0xfffe46f8>
   2158c:	b809883a 	mov	r4,r23
   21590:	b00b883a 	mov	r5,r22
   21594:	d9811e04 	addi	r6,sp,1144
   21598:	0026d080 	call	26d08 <__sprint_r>
   2159c:	103ca41e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   215a0:	d8c12017 	ldw	r3,1152(sp)
   215a4:	da000404 	addi	r8,sp,16
   215a8:	003d9c06 	br	20c1c <__alt_data_end+0xfffe46fc>
   215ac:	b809883a 	mov	r4,r23
   215b0:	b00b883a 	mov	r5,r22
   215b4:	d9811e04 	addi	r6,sp,1144
   215b8:	0026d080 	call	26d08 <__sprint_r>
   215bc:	103dd226 	beq	r2,zero,20d08 <__alt_data_end+0xfffe47e8>
   215c0:	003c9b06 	br	20830 <__alt_data_end+0xfffe4310>
   215c4:	10803fcc 	andi	r2,r2,255
   215c8:	1000311e 	bne	r2,zero,21690 <___vfprintf_internal_r+0x12c0>
   215cc:	e080004c 	andi	r2,fp,1
   215d0:	10002f26 	beq	r2,zero,21690 <___vfprintf_internal_r+0x12c0>
   215d4:	00800c04 	movi	r2,48
   215d8:	d8c10dc4 	addi	r3,sp,1079
   215dc:	d8810dc5 	stb	r2,1079(sp)
   215e0:	dc413c17 	ldw	r17,1264(sp)
   215e4:	d8c13115 	stw	r3,1220(sp)
   215e8:	003cf406 	br	209bc <__alt_data_end+0xfffe449c>
   215ec:	b809883a 	mov	r4,r23
   215f0:	b00b883a 	mov	r5,r22
   215f4:	d9811e04 	addi	r6,sp,1144
   215f8:	0026d080 	call	26d08 <__sprint_r>
   215fc:	103c8c1e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21600:	d8c12017 	ldw	r3,1152(sp)
   21604:	da000404 	addi	r8,sp,16
   21608:	003d7706 	br	20be8 <__alt_data_end+0xfffe46c8>
   2160c:	b809883a 	mov	r4,r23
   21610:	b00b883a 	mov	r5,r22
   21614:	d9811e04 	addi	r6,sp,1144
   21618:	0026d080 	call	26d08 <__sprint_r>
   2161c:	103c841e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21620:	d8c12017 	ldw	r3,1152(sp)
   21624:	da000404 	addi	r8,sp,16
   21628:	003d3506 	br	20b00 <__alt_data_end+0xfffe45e0>
   2162c:	b809883a 	mov	r4,r23
   21630:	b00b883a 	mov	r5,r22
   21634:	d9811e04 	addi	r6,sp,1144
   21638:	0026d080 	call	26d08 <__sprint_r>
   2163c:	103c7c1e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21640:	d8c12017 	ldw	r3,1152(sp)
   21644:	da000404 	addi	r8,sp,16
   21648:	003d3b06 	br	20b38 <__alt_data_end+0xfffe4618>
   2164c:	d9413b17 	ldw	r5,1260(sp)
   21650:	d8c10e04 	addi	r3,sp,1080
   21654:	908003cc 	andi	r2,r18,15
   21658:	a808973a 	slli	r4,r21,28
   2165c:	2885883a 	add	r2,r5,r2
   21660:	9024d13a 	srli	r18,r18,4
   21664:	10800003 	ldbu	r2,0(r2)
   21668:	a82ad13a 	srli	r21,r21,4
   2166c:	18ffffc4 	addi	r3,r3,-1
   21670:	24a4b03a 	or	r18,r4,r18
   21674:	18800005 	stb	r2,0(r3)
   21678:	9544b03a 	or	r2,r18,r21
   2167c:	103ff51e 	bne	r2,zero,21654 <__alt_data_end+0xfffe5134>
   21680:	d9412817 	ldw	r5,1184(sp)
   21684:	d8c13115 	stw	r3,1220(sp)
   21688:	28e3c83a 	sub	r17,r5,r3
   2168c:	003ccb06 	br	209bc <__alt_data_end+0xfffe449c>
   21690:	d8c10e04 	addi	r3,sp,1080
   21694:	0023883a 	mov	r17,zero
   21698:	d8c13115 	stw	r3,1220(sp)
   2169c:	003cc706 	br	209bc <__alt_data_end+0xfffe449c>
   216a0:	dc012617 	ldw	r16,1176(sp)
   216a4:	0401ab0e 	bge	zero,r16,21d54 <___vfprintf_internal_r+0x1984>
   216a8:	d8813317 	ldw	r2,1228(sp)
   216ac:	d9413117 	ldw	r5,1220(sp)
   216b0:	d9013417 	ldw	r4,1232(sp)
   216b4:	1023883a 	mov	r17,r2
   216b8:	28a1883a 	add	r16,r5,r2
   216bc:	2080010e 	bge	r4,r2,216c4 <___vfprintf_internal_r+0x12f4>
   216c0:	2023883a 	mov	r17,r4
   216c4:	04400b0e 	bge	zero,r17,216f4 <___vfprintf_internal_r+0x1324>
   216c8:	d8811f17 	ldw	r2,1148(sp)
   216cc:	d9413117 	ldw	r5,1220(sp)
   216d0:	1c47883a 	add	r3,r3,r17
   216d4:	10800044 	addi	r2,r2,1
   216d8:	41400015 	stw	r5,0(r8)
   216dc:	44400115 	stw	r17,4(r8)
   216e0:	d8c12015 	stw	r3,1152(sp)
   216e4:	d8811f15 	stw	r2,1148(sp)
   216e8:	010001c4 	movi	r4,7
   216ec:	20826716 	blt	r4,r2,2208c <___vfprintf_internal_r+0x1cbc>
   216f0:	42000204 	addi	r8,r8,8
   216f4:	88026316 	blt	r17,zero,22084 <___vfprintf_internal_r+0x1cb4>
   216f8:	d8813417 	ldw	r2,1232(sp)
   216fc:	1463c83a 	sub	r17,r2,r17
   21700:	0440590e 	bge	zero,r17,21868 <___vfprintf_internal_r+0x1498>
   21704:	04c00404 	movi	r19,16
   21708:	d8811f17 	ldw	r2,1148(sp)
   2170c:	9c41770e 	bge	r19,r17,21cec <___vfprintf_internal_r+0x191c>
   21710:	014000f4 	movhi	r5,3
   21714:	297fd484 	addi	r5,r5,-174
   21718:	d9412c15 	stw	r5,1200(sp)
   2171c:	054001c4 	movi	r21,7
   21720:	00000306 	br	21730 <___vfprintf_internal_r+0x1360>
   21724:	42000204 	addi	r8,r8,8
   21728:	8c7ffc04 	addi	r17,r17,-16
   2172c:	9c41720e 	bge	r19,r17,21cf8 <___vfprintf_internal_r+0x1928>
   21730:	18c00404 	addi	r3,r3,16
   21734:	10800044 	addi	r2,r2,1
   21738:	45000015 	stw	r20,0(r8)
   2173c:	44c00115 	stw	r19,4(r8)
   21740:	d8c12015 	stw	r3,1152(sp)
   21744:	d8811f15 	stw	r2,1148(sp)
   21748:	a8bff60e 	bge	r21,r2,21724 <__alt_data_end+0xfffe5204>
   2174c:	b809883a 	mov	r4,r23
   21750:	b00b883a 	mov	r5,r22
   21754:	d9811e04 	addi	r6,sp,1144
   21758:	0026d080 	call	26d08 <__sprint_r>
   2175c:	103c341e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21760:	d8c12017 	ldw	r3,1152(sp)
   21764:	d8811f17 	ldw	r2,1148(sp)
   21768:	da000404 	addi	r8,sp,16
   2176c:	003fee06 	br	21728 <__alt_data_end+0xfffe5208>
   21770:	b809883a 	mov	r4,r23
   21774:	b00b883a 	mov	r5,r22
   21778:	d9811e04 	addi	r6,sp,1144
   2177c:	0026d080 	call	26d08 <__sprint_r>
   21780:	103c2b1e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21784:	d8c12017 	ldw	r3,1152(sp)
   21788:	d8812787 	ldb	r2,1182(sp)
   2178c:	da000404 	addi	r8,sp,16
   21790:	003cce06 	br	20acc <__alt_data_end+0xfffe45ac>
   21794:	d8813317 	ldw	r2,1228(sp)
   21798:	14ffffc4 	addi	r19,r2,-1
   2179c:	04ff630e 	bge	zero,r19,2152c <__alt_data_end+0xfffe500c>
   217a0:	05400404 	movi	r21,16
   217a4:	acc0810e 	bge	r21,r19,219ac <___vfprintf_internal_r+0x15dc>
   217a8:	014000f4 	movhi	r5,3
   217ac:	297fd484 	addi	r5,r5,-174
   217b0:	d9412c15 	stw	r5,1200(sp)
   217b4:	01c001c4 	movi	r7,7
   217b8:	00000306 	br	217c8 <___vfprintf_internal_r+0x13f8>
   217bc:	8c400204 	addi	r17,r17,8
   217c0:	9cfffc04 	addi	r19,r19,-16
   217c4:	acc07c0e 	bge	r21,r19,219b8 <___vfprintf_internal_r+0x15e8>
   217c8:	18c00404 	addi	r3,r3,16
   217cc:	84000044 	addi	r16,r16,1
   217d0:	8d000015 	stw	r20,0(r17)
   217d4:	8d400115 	stw	r21,4(r17)
   217d8:	d8c12015 	stw	r3,1152(sp)
   217dc:	dc011f15 	stw	r16,1148(sp)
   217e0:	3c3ff60e 	bge	r7,r16,217bc <__alt_data_end+0xfffe529c>
   217e4:	b809883a 	mov	r4,r23
   217e8:	b00b883a 	mov	r5,r22
   217ec:	d9811e04 	addi	r6,sp,1144
   217f0:	d9c13d15 	stw	r7,1268(sp)
   217f4:	0026d080 	call	26d08 <__sprint_r>
   217f8:	d9c13d17 	ldw	r7,1268(sp)
   217fc:	103c0c1e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21800:	d8c12017 	ldw	r3,1152(sp)
   21804:	dc011f17 	ldw	r16,1148(sp)
   21808:	dc400404 	addi	r17,sp,16
   2180c:	003fec06 	br	217c0 <__alt_data_end+0xfffe52a0>
   21810:	00800084 	movi	r2,2
   21814:	9546b03a 	or	r3,r18,r21
   21818:	003d7d06 	br	20e10 <__alt_data_end+0xfffe48f0>
   2181c:	10803fcc 	andi	r2,r2,255
   21820:	1080201c 	xori	r2,r2,128
   21824:	10bfe004 	addi	r2,r2,-128
   21828:	01000c04 	movi	r4,48
   2182c:	1101d726 	beq	r2,r4,21f8c <___vfprintf_internal_r+0x1bbc>
   21830:	d9413117 	ldw	r5,1220(sp)
   21834:	d8812817 	ldw	r2,1184(sp)
   21838:	193fffc5 	stb	r4,-1(r3)
   2183c:	297fffc4 	addi	r5,r5,-1
   21840:	d9413115 	stw	r5,1220(sp)
   21844:	1163c83a 	sub	r17,r2,r5
   21848:	003c5c06 	br	209bc <__alt_data_end+0xfffe449c>
   2184c:	b809883a 	mov	r4,r23
   21850:	b00b883a 	mov	r5,r22
   21854:	d9811e04 	addi	r6,sp,1144
   21858:	0026d080 	call	26d08 <__sprint_r>
   2185c:	103bf41e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21860:	d8c12017 	ldw	r3,1152(sp)
   21864:	da000404 	addi	r8,sp,16
   21868:	d9413117 	ldw	r5,1220(sp)
   2186c:	d9013417 	ldw	r4,1232(sp)
   21870:	d8812617 	ldw	r2,1176(sp)
   21874:	2923883a 	add	r17,r5,r4
   21878:	d9413317 	ldw	r5,1228(sp)
   2187c:	11400216 	blt	r2,r5,21888 <___vfprintf_internal_r+0x14b8>
   21880:	e100004c 	andi	r4,fp,1
   21884:	20000d26 	beq	r4,zero,218bc <___vfprintf_internal_r+0x14ec>
   21888:	d9013817 	ldw	r4,1248(sp)
   2188c:	d9413517 	ldw	r5,1236(sp)
   21890:	1907883a 	add	r3,r3,r4
   21894:	d9011f17 	ldw	r4,1148(sp)
   21898:	41400015 	stw	r5,0(r8)
   2189c:	d9413817 	ldw	r5,1248(sp)
   218a0:	21000044 	addi	r4,r4,1
   218a4:	d8c12015 	stw	r3,1152(sp)
   218a8:	41400115 	stw	r5,4(r8)
   218ac:	d9011f15 	stw	r4,1148(sp)
   218b0:	014001c4 	movi	r5,7
   218b4:	2901fd16 	blt	r5,r4,220ac <___vfprintf_internal_r+0x1cdc>
   218b8:	42000204 	addi	r8,r8,8
   218bc:	d9013317 	ldw	r4,1228(sp)
   218c0:	2085c83a 	sub	r2,r4,r2
   218c4:	8449c83a 	sub	r4,r16,r17
   218c8:	1021883a 	mov	r16,r2
   218cc:	2080010e 	bge	r4,r2,218d4 <___vfprintf_internal_r+0x1504>
   218d0:	2021883a 	mov	r16,r4
   218d4:	04000a0e 	bge	zero,r16,21900 <___vfprintf_internal_r+0x1530>
   218d8:	d9011f17 	ldw	r4,1148(sp)
   218dc:	1c07883a 	add	r3,r3,r16
   218e0:	44400015 	stw	r17,0(r8)
   218e4:	21000044 	addi	r4,r4,1
   218e8:	44000115 	stw	r16,4(r8)
   218ec:	d8c12015 	stw	r3,1152(sp)
   218f0:	d9011f15 	stw	r4,1148(sp)
   218f4:	014001c4 	movi	r5,7
   218f8:	29020916 	blt	r5,r4,22120 <___vfprintf_internal_r+0x1d50>
   218fc:	42000204 	addi	r8,r8,8
   21900:	80020116 	blt	r16,zero,22108 <___vfprintf_internal_r+0x1d38>
   21904:	1421c83a 	sub	r16,r2,r16
   21908:	043cc40e 	bge	zero,r16,20c1c <__alt_data_end+0xfffe46fc>
   2190c:	04400404 	movi	r17,16
   21910:	d8811f17 	ldw	r2,1148(sp)
   21914:	8c3f110e 	bge	r17,r16,2155c <__alt_data_end+0xfffe503c>
   21918:	014000f4 	movhi	r5,3
   2191c:	297fd484 	addi	r5,r5,-174
   21920:	d9412c15 	stw	r5,1200(sp)
   21924:	04c001c4 	movi	r19,7
   21928:	00000306 	br	21938 <___vfprintf_internal_r+0x1568>
   2192c:	42000204 	addi	r8,r8,8
   21930:	843ffc04 	addi	r16,r16,-16
   21934:	8c3f0c0e 	bge	r17,r16,21568 <__alt_data_end+0xfffe5048>
   21938:	18c00404 	addi	r3,r3,16
   2193c:	10800044 	addi	r2,r2,1
   21940:	45000015 	stw	r20,0(r8)
   21944:	44400115 	stw	r17,4(r8)
   21948:	d8c12015 	stw	r3,1152(sp)
   2194c:	d8811f15 	stw	r2,1148(sp)
   21950:	98bff60e 	bge	r19,r2,2192c <__alt_data_end+0xfffe540c>
   21954:	b809883a 	mov	r4,r23
   21958:	b00b883a 	mov	r5,r22
   2195c:	d9811e04 	addi	r6,sp,1144
   21960:	0026d080 	call	26d08 <__sprint_r>
   21964:	103bb21e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21968:	d8c12017 	ldw	r3,1152(sp)
   2196c:	d8811f17 	ldw	r2,1148(sp)
   21970:	da000404 	addi	r8,sp,16
   21974:	003fee06 	br	21930 <__alt_data_end+0xfffe5410>
   21978:	e088703a 	and	r4,fp,r2
   2197c:	203ec01e 	bne	r4,zero,21480 <__alt_data_end+0xfffe4f60>
   21980:	dc011f17 	ldw	r16,1148(sp)
   21984:	d9013117 	ldw	r4,1220(sp)
   21988:	40800115 	stw	r2,4(r8)
   2198c:	84000044 	addi	r16,r16,1
   21990:	41000015 	stw	r4,0(r8)
   21994:	d8c12015 	stw	r3,1152(sp)
   21998:	dc011f15 	stw	r16,1148(sp)
   2199c:	008001c4 	movi	r2,7
   219a0:	14000e16 	blt	r2,r16,219dc <___vfprintf_internal_r+0x160c>
   219a4:	44400204 	addi	r17,r8,8
   219a8:	003ee006 	br	2152c <__alt_data_end+0xfffe500c>
   219ac:	010000f4 	movhi	r4,3
   219b0:	213fd484 	addi	r4,r4,-174
   219b4:	d9012c15 	stw	r4,1200(sp)
   219b8:	d8812c17 	ldw	r2,1200(sp)
   219bc:	1cc7883a 	add	r3,r3,r19
   219c0:	84000044 	addi	r16,r16,1
   219c4:	88800015 	stw	r2,0(r17)
   219c8:	8cc00115 	stw	r19,4(r17)
   219cc:	d8c12015 	stw	r3,1152(sp)
   219d0:	dc011f15 	stw	r16,1148(sp)
   219d4:	008001c4 	movi	r2,7
   219d8:	143ed30e 	bge	r2,r16,21528 <__alt_data_end+0xfffe5008>
   219dc:	b809883a 	mov	r4,r23
   219e0:	b00b883a 	mov	r5,r22
   219e4:	d9811e04 	addi	r6,sp,1144
   219e8:	0026d080 	call	26d08 <__sprint_r>
   219ec:	103b901e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   219f0:	d8c12017 	ldw	r3,1152(sp)
   219f4:	dc011f17 	ldw	r16,1148(sp)
   219f8:	dc400404 	addi	r17,sp,16
   219fc:	003ecb06 	br	2152c <__alt_data_end+0xfffe500c>
   21a00:	b809883a 	mov	r4,r23
   21a04:	b00b883a 	mov	r5,r22
   21a08:	d9811e04 	addi	r6,sp,1144
   21a0c:	0026d080 	call	26d08 <__sprint_r>
   21a10:	103b871e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21a14:	d8c12017 	ldw	r3,1152(sp)
   21a18:	dc011f17 	ldw	r16,1148(sp)
   21a1c:	da000404 	addi	r8,sp,16
   21a20:	003ea206 	br	214ac <__alt_data_end+0xfffe4f8c>
   21a24:	b809883a 	mov	r4,r23
   21a28:	b00b883a 	mov	r5,r22
   21a2c:	d9811e04 	addi	r6,sp,1144
   21a30:	0026d080 	call	26d08 <__sprint_r>
   21a34:	103b7e1e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21a38:	d8c12017 	ldw	r3,1152(sp)
   21a3c:	dc011f17 	ldw	r16,1148(sp)
   21a40:	dc400404 	addi	r17,sp,16
   21a44:	003ea406 	br	214d8 <__alt_data_end+0xfffe4fb8>
   21a48:	b809883a 	mov	r4,r23
   21a4c:	b00b883a 	mov	r5,r22
   21a50:	d9811e04 	addi	r6,sp,1144
   21a54:	0026d080 	call	26d08 <__sprint_r>
   21a58:	103b751e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21a5c:	d8c12017 	ldw	r3,1152(sp)
   21a60:	da000404 	addi	r8,sp,16
   21a64:	003c3706 	br	20b44 <__alt_data_end+0xfffe4624>
   21a68:	04a5c83a 	sub	r18,zero,r18
   21a6c:	9004c03a 	cmpne	r2,r18,zero
   21a70:	056bc83a 	sub	r21,zero,r21
   21a74:	a8abc83a 	sub	r21,r21,r2
   21a78:	04c00b44 	movi	r19,45
   21a7c:	dcc12785 	stb	r19,1182(sp)
   21a80:	da413215 	stw	r9,1224(sp)
   21a84:	00800044 	movi	r2,1
   21a88:	9546b03a 	or	r3,r18,r21
   21a8c:	003bb106 	br	20954 <__alt_data_end+0xfffe4434>
   21a90:	da013f15 	stw	r8,1276(sp)
   21a94:	da413e15 	stw	r9,1272(sp)
   21a98:	00268cc0 	call	268cc <__fpclassifyd>
   21a9c:	da013f17 	ldw	r8,1276(sp)
   21aa0:	da413e17 	ldw	r9,1272(sp)
   21aa4:	1000e526 	beq	r2,zero,21e3c <___vfprintf_internal_r+0x1a6c>
   21aa8:	04fff7c4 	movi	r19,-33
   21aac:	00bfffc4 	movi	r2,-1
   21ab0:	84e6703a 	and	r19,r16,r19
   21ab4:	48822926 	beq	r9,r2,2235c <___vfprintf_internal_r+0x1f8c>
   21ab8:	008011c4 	movi	r2,71
   21abc:	98821626 	beq	r19,r2,22318 <___vfprintf_internal_r+0x1f48>
   21ac0:	d9013917 	ldw	r4,1252(sp)
   21ac4:	e0c04014 	ori	r3,fp,256
   21ac8:	d8c12d15 	stw	r3,1204(sp)
   21acc:	20021f16 	blt	r4,zero,2234c <___vfprintf_internal_r+0x1f7c>
   21ad0:	dc413917 	ldw	r17,1252(sp)
   21ad4:	d8012b05 	stb	zero,1196(sp)
   21ad8:	00801984 	movi	r2,102
   21adc:	80814d26 	beq	r16,r2,22014 <___vfprintf_internal_r+0x1c44>
   21ae0:	00801184 	movi	r2,70
   21ae4:	80814b26 	beq	r16,r2,22014 <___vfprintf_internal_r+0x1c44>
   21ae8:	00801144 	movi	r2,69
   21aec:	98821d26 	beq	r19,r2,22364 <___vfprintf_internal_r+0x1f94>
   21af0:	482b883a 	mov	r21,r9
   21af4:	d8812604 	addi	r2,sp,1176
   21af8:	d8800115 	stw	r2,4(sp)
   21afc:	d9413717 	ldw	r5,1244(sp)
   21b00:	d8812504 	addi	r2,sp,1172
   21b04:	d8800215 	stw	r2,8(sp)
   21b08:	d8812104 	addi	r2,sp,1156
   21b0c:	dd400015 	stw	r21,0(sp)
   21b10:	d8800315 	stw	r2,12(sp)
   21b14:	b809883a 	mov	r4,r23
   21b18:	880d883a 	mov	r6,r17
   21b1c:	01c00084 	movi	r7,2
   21b20:	da013f15 	stw	r8,1276(sp)
   21b24:	da413e15 	stw	r9,1272(sp)
   21b28:	00228480 	call	22848 <_dtoa_r>
   21b2c:	d8813115 	stw	r2,1220(sp)
   21b30:	008019c4 	movi	r2,103
   21b34:	da013f17 	ldw	r8,1276(sp)
   21b38:	da413e17 	ldw	r9,1272(sp)
   21b3c:	80800226 	beq	r16,r2,21b48 <___vfprintf_internal_r+0x1778>
   21b40:	008011c4 	movi	r2,71
   21b44:	8081451e 	bne	r16,r2,2205c <___vfprintf_internal_r+0x1c8c>
   21b48:	e080004c 	andi	r2,fp,1
   21b4c:	10021e26 	beq	r2,zero,223c8 <___vfprintf_internal_r+0x1ff8>
   21b50:	d8c13117 	ldw	r3,1220(sp)
   21b54:	1d55883a 	add	r10,r3,r21
   21b58:	d9013717 	ldw	r4,1244(sp)
   21b5c:	880b883a 	mov	r5,r17
   21b60:	000d883a 	mov	r6,zero
   21b64:	000f883a 	mov	r7,zero
   21b68:	da013f15 	stw	r8,1276(sp)
   21b6c:	da413e15 	stw	r9,1272(sp)
   21b70:	da813d15 	stw	r10,1268(sp)
   21b74:	002b6200 	call	2b620 <__eqdf2>
   21b78:	da013f17 	ldw	r8,1276(sp)
   21b7c:	da413e17 	ldw	r9,1272(sp)
   21b80:	da813d17 	ldw	r10,1268(sp)
   21b84:	1001a126 	beq	r2,zero,2220c <___vfprintf_internal_r+0x1e3c>
   21b88:	d8812117 	ldw	r2,1156(sp)
   21b8c:	1280062e 	bgeu	r2,r10,21ba8 <___vfprintf_internal_r+0x17d8>
   21b90:	01000c04 	movi	r4,48
   21b94:	10c00044 	addi	r3,r2,1
   21b98:	d8c12115 	stw	r3,1156(sp)
   21b9c:	11000005 	stb	r4,0(r2)
   21ba0:	d8812117 	ldw	r2,1156(sp)
   21ba4:	12bffb36 	bltu	r2,r10,21b94 <__alt_data_end+0xfffe5674>
   21ba8:	d8c13117 	ldw	r3,1220(sp)
   21bac:	10c5c83a 	sub	r2,r2,r3
   21bb0:	d8813315 	stw	r2,1228(sp)
   21bb4:	008011c4 	movi	r2,71
   21bb8:	98818926 	beq	r19,r2,221e0 <___vfprintf_internal_r+0x1e10>
   21bbc:	00801944 	movi	r2,101
   21bc0:	14023c0e 	bge	r2,r16,224b4 <___vfprintf_internal_r+0x20e4>
   21bc4:	d8c12617 	ldw	r3,1176(sp)
   21bc8:	00801984 	movi	r2,102
   21bcc:	d8c13415 	stw	r3,1232(sp)
   21bd0:	8081ef26 	beq	r16,r2,22390 <___vfprintf_internal_r+0x1fc0>
   21bd4:	d8c13417 	ldw	r3,1232(sp)
   21bd8:	d9013317 	ldw	r4,1228(sp)
   21bdc:	1901e316 	blt	r3,r4,2236c <___vfprintf_internal_r+0x1f9c>
   21be0:	e080004c 	andi	r2,fp,1
   21be4:	1001f426 	beq	r2,zero,223b8 <___vfprintf_internal_r+0x1fe8>
   21be8:	d8c13417 	ldw	r3,1232(sp)
   21bec:	1c400044 	addi	r17,r3,1
   21bf0:	8839883a 	mov	fp,r17
   21bf4:	8801e416 	blt	r17,zero,22388 <___vfprintf_internal_r+0x1fb8>
   21bf8:	dd412b07 	ldb	r21,1196(sp)
   21bfc:	a801701e 	bne	r21,zero,221c0 <___vfprintf_internal_r+0x1df0>
   21c00:	df012b15 	stw	fp,1196(sp)
   21c04:	dcc12783 	ldbu	r19,1182(sp)
   21c08:	df012d17 	ldw	fp,1204(sp)
   21c0c:	d8013215 	stw	zero,1224(sp)
   21c10:	dc812d15 	stw	r18,1204(sp)
   21c14:	003b6e06 	br	209d0 <__alt_data_end+0xfffe44b0>
   21c18:	e080040c 	andi	r2,fp,16
   21c1c:	1000b51e 	bne	r2,zero,21ef4 <___vfprintf_internal_r+0x1b24>
   21c20:	e080100c 	andi	r2,fp,64
   21c24:	10015b26 	beq	r2,zero,22194 <___vfprintf_internal_r+0x1dc4>
   21c28:	d9012d17 	ldw	r4,1204(sp)
   21c2c:	d9412f17 	ldw	r5,1212(sp)
   21c30:	20800017 	ldw	r2,0(r4)
   21c34:	21000104 	addi	r4,r4,4
   21c38:	d9012d15 	stw	r4,1204(sp)
   21c3c:	1140000d 	sth	r5,0(r2)
   21c40:	003a2006 	br	204c4 <__alt_data_end+0xfffe3fa4>
   21c44:	e0c0100c 	andi	r3,fp,64
   21c48:	1800a226 	beq	r3,zero,21ed4 <___vfprintf_internal_r+0x1b04>
   21c4c:	d8c12d17 	ldw	r3,1204(sp)
   21c50:	1480000b 	ldhu	r18,0(r2)
   21c54:	002b883a 	mov	r21,zero
   21c58:	18c00104 	addi	r3,r3,4
   21c5c:	d8c12d15 	stw	r3,1204(sp)
   21c60:	0005883a 	mov	r2,zero
   21c64:	9007883a 	mov	r3,r18
   21c68:	003c6906 	br	20e10 <__alt_data_end+0xfffe48f0>
   21c6c:	e0c0100c 	andi	r3,fp,64
   21c70:	18009026 	beq	r3,zero,21eb4 <___vfprintf_internal_r+0x1ae4>
   21c74:	1480000b 	ldhu	r18,0(r2)
   21c78:	d8812d17 	ldw	r2,1204(sp)
   21c7c:	002b883a 	mov	r21,zero
   21c80:	9007883a 	mov	r3,r18
   21c84:	10800104 	addi	r2,r2,4
   21c88:	d8812d15 	stw	r2,1204(sp)
   21c8c:	00800044 	movi	r2,1
   21c90:	003c5f06 	br	20e10 <__alt_data_end+0xfffe48f0>
   21c94:	e0c0100c 	andi	r3,fp,64
   21c98:	18008026 	beq	r3,zero,21e9c <___vfprintf_internal_r+0x1acc>
   21c9c:	d9012d17 	ldw	r4,1204(sp)
   21ca0:	1480000b 	ldhu	r18,0(r2)
   21ca4:	002b883a 	mov	r21,zero
   21ca8:	21000104 	addi	r4,r4,4
   21cac:	d9012d15 	stw	r4,1204(sp)
   21cb0:	003c7906 	br	20e98 <__alt_data_end+0xfffe4978>
   21cb4:	e080100c 	andi	r2,fp,64
   21cb8:	10007126 	beq	r2,zero,21e80 <___vfprintf_internal_r+0x1ab0>
   21cbc:	1c80000f 	ldh	r18,0(r3)
   21cc0:	d8812d17 	ldw	r2,1204(sp)
   21cc4:	902bd7fa 	srai	r21,r18,31
   21cc8:	10800104 	addi	r2,r2,4
   21ccc:	d8812d15 	stw	r2,1204(sp)
   21cd0:	a805883a 	mov	r2,r21
   21cd4:	003b1a06 	br	20940 <__alt_data_end+0xfffe4420>
   21cd8:	e4000007 	ldb	r16,0(fp)
   21cdc:	e005883a 	mov	r2,fp
   21ce0:	003a2306 	br	20570 <__alt_data_end+0xfffe4050>
   21ce4:	00800084 	movi	r2,2
   21ce8:	003c4906 	br	20e10 <__alt_data_end+0xfffe48f0>
   21cec:	010000f4 	movhi	r4,3
   21cf0:	213fd484 	addi	r4,r4,-174
   21cf4:	d9012c15 	stw	r4,1200(sp)
   21cf8:	d9012c17 	ldw	r4,1200(sp)
   21cfc:	1c47883a 	add	r3,r3,r17
   21d00:	10800044 	addi	r2,r2,1
   21d04:	41000015 	stw	r4,0(r8)
   21d08:	44400115 	stw	r17,4(r8)
   21d0c:	d8c12015 	stw	r3,1152(sp)
   21d10:	d8811f15 	stw	r2,1148(sp)
   21d14:	010001c4 	movi	r4,7
   21d18:	20becc16 	blt	r4,r2,2184c <__alt_data_end+0xfffe532c>
   21d1c:	42000204 	addi	r8,r8,8
   21d20:	003ed106 	br	21868 <__alt_data_end+0xfffe5348>
   21d24:	010000f4 	movhi	r4,3
   21d28:	213fd484 	addi	r4,r4,-174
   21d2c:	d9012c15 	stw	r4,1200(sp)
   21d30:	003ba306 	br	20bc0 <__alt_data_end+0xfffe46a0>
   21d34:	b809883a 	mov	r4,r23
   21d38:	b00b883a 	mov	r5,r22
   21d3c:	d9811e04 	addi	r6,sp,1144
   21d40:	0026d080 	call	26d08 <__sprint_r>
   21d44:	103aba1e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21d48:	d8c12017 	ldw	r3,1152(sp)
   21d4c:	da000404 	addi	r8,sp,16
   21d50:	003d6c06 	br	21304 <__alt_data_end+0xfffe4de4>
   21d54:	d8811f17 	ldw	r2,1148(sp)
   21d58:	014000f4 	movhi	r5,3
   21d5c:	01000044 	movi	r4,1
   21d60:	18c00044 	addi	r3,r3,1
   21d64:	10800044 	addi	r2,r2,1
   21d68:	297fd404 	addi	r5,r5,-176
   21d6c:	41000115 	stw	r4,4(r8)
   21d70:	41400015 	stw	r5,0(r8)
   21d74:	d8c12015 	stw	r3,1152(sp)
   21d78:	d8811f15 	stw	r2,1148(sp)
   21d7c:	010001c4 	movi	r4,7
   21d80:	20806716 	blt	r4,r2,21f20 <___vfprintf_internal_r+0x1b50>
   21d84:	42000204 	addi	r8,r8,8
   21d88:	8000041e 	bne	r16,zero,21d9c <___vfprintf_internal_r+0x19cc>
   21d8c:	d8813317 	ldw	r2,1228(sp)
   21d90:	1000021e 	bne	r2,zero,21d9c <___vfprintf_internal_r+0x19cc>
   21d94:	e080004c 	andi	r2,fp,1
   21d98:	103ba026 	beq	r2,zero,20c1c <__alt_data_end+0xfffe46fc>
   21d9c:	d9013817 	ldw	r4,1248(sp)
   21da0:	d8811f17 	ldw	r2,1148(sp)
   21da4:	d9413517 	ldw	r5,1236(sp)
   21da8:	1907883a 	add	r3,r3,r4
   21dac:	10800044 	addi	r2,r2,1
   21db0:	41000115 	stw	r4,4(r8)
   21db4:	41400015 	stw	r5,0(r8)
   21db8:	d8c12015 	stw	r3,1152(sp)
   21dbc:	d8811f15 	stw	r2,1148(sp)
   21dc0:	010001c4 	movi	r4,7
   21dc4:	20815716 	blt	r4,r2,22324 <___vfprintf_internal_r+0x1f54>
   21dc8:	42000204 	addi	r8,r8,8
   21dcc:	0421c83a 	sub	r16,zero,r16
   21dd0:	0400810e 	bge	zero,r16,21fd8 <___vfprintf_internal_r+0x1c08>
   21dd4:	04400404 	movi	r17,16
   21dd8:	8c00bd0e 	bge	r17,r16,220d0 <___vfprintf_internal_r+0x1d00>
   21ddc:	014000f4 	movhi	r5,3
   21de0:	297fd484 	addi	r5,r5,-174
   21de4:	d9412c15 	stw	r5,1200(sp)
   21de8:	04c001c4 	movi	r19,7
   21dec:	00000306 	br	21dfc <___vfprintf_internal_r+0x1a2c>
   21df0:	42000204 	addi	r8,r8,8
   21df4:	843ffc04 	addi	r16,r16,-16
   21df8:	8c00b80e 	bge	r17,r16,220dc <___vfprintf_internal_r+0x1d0c>
   21dfc:	18c00404 	addi	r3,r3,16
   21e00:	10800044 	addi	r2,r2,1
   21e04:	45000015 	stw	r20,0(r8)
   21e08:	44400115 	stw	r17,4(r8)
   21e0c:	d8c12015 	stw	r3,1152(sp)
   21e10:	d8811f15 	stw	r2,1148(sp)
   21e14:	98bff60e 	bge	r19,r2,21df0 <__alt_data_end+0xfffe58d0>
   21e18:	b809883a 	mov	r4,r23
   21e1c:	b00b883a 	mov	r5,r22
   21e20:	d9811e04 	addi	r6,sp,1144
   21e24:	0026d080 	call	26d08 <__sprint_r>
   21e28:	103a811e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21e2c:	d8c12017 	ldw	r3,1152(sp)
   21e30:	d8811f17 	ldw	r2,1148(sp)
   21e34:	da000404 	addi	r8,sp,16
   21e38:	003fee06 	br	21df4 <__alt_data_end+0xfffe58d4>
   21e3c:	008011c4 	movi	r2,71
   21e40:	1400db16 	blt	r2,r16,221b0 <___vfprintf_internal_r+0x1de0>
   21e44:	010000f4 	movhi	r4,3
   21e48:	213fc604 	addi	r4,r4,-232
   21e4c:	d9013115 	stw	r4,1220(sp)
   21e50:	00c000c4 	movi	r3,3
   21e54:	00bfdfc4 	movi	r2,-129
   21e58:	d8c12b15 	stw	r3,1196(sp)
   21e5c:	e0b8703a 	and	fp,fp,r2
   21e60:	dcc12783 	ldbu	r19,1182(sp)
   21e64:	dc812d15 	stw	r18,1204(sp)
   21e68:	1823883a 	mov	r17,r3
   21e6c:	d8013215 	stw	zero,1224(sp)
   21e70:	d8013415 	stw	zero,1232(sp)
   21e74:	003ad606 	br	209d0 <__alt_data_end+0xfffe44b0>
   21e78:	4823883a 	mov	r17,r9
   21e7c:	003cc906 	br	211a4 <__alt_data_end+0xfffe4c84>
   21e80:	1c800017 	ldw	r18,0(r3)
   21e84:	d8c12d17 	ldw	r3,1204(sp)
   21e88:	902bd7fa 	srai	r21,r18,31
   21e8c:	18c00104 	addi	r3,r3,4
   21e90:	d8c12d15 	stw	r3,1204(sp)
   21e94:	a805883a 	mov	r2,r21
   21e98:	003aa906 	br	20940 <__alt_data_end+0xfffe4420>
   21e9c:	d9412d17 	ldw	r5,1204(sp)
   21ea0:	14800017 	ldw	r18,0(r2)
   21ea4:	002b883a 	mov	r21,zero
   21ea8:	29400104 	addi	r5,r5,4
   21eac:	d9412d15 	stw	r5,1204(sp)
   21eb0:	003bf906 	br	20e98 <__alt_data_end+0xfffe4978>
   21eb4:	d8c12d17 	ldw	r3,1204(sp)
   21eb8:	14800017 	ldw	r18,0(r2)
   21ebc:	002b883a 	mov	r21,zero
   21ec0:	18c00104 	addi	r3,r3,4
   21ec4:	d8c12d15 	stw	r3,1204(sp)
   21ec8:	00800044 	movi	r2,1
   21ecc:	9007883a 	mov	r3,r18
   21ed0:	003bcf06 	br	20e10 <__alt_data_end+0xfffe48f0>
   21ed4:	d9012d17 	ldw	r4,1204(sp)
   21ed8:	14800017 	ldw	r18,0(r2)
   21edc:	002b883a 	mov	r21,zero
   21ee0:	21000104 	addi	r4,r4,4
   21ee4:	d9012d15 	stw	r4,1204(sp)
   21ee8:	0005883a 	mov	r2,zero
   21eec:	9007883a 	mov	r3,r18
   21ef0:	003bc706 	br	20e10 <__alt_data_end+0xfffe48f0>
   21ef4:	d9412d17 	ldw	r5,1204(sp)
   21ef8:	d8c12f17 	ldw	r3,1212(sp)
   21efc:	28800017 	ldw	r2,0(r5)
   21f00:	29400104 	addi	r5,r5,4
   21f04:	d9412d15 	stw	r5,1204(sp)
   21f08:	10c00015 	stw	r3,0(r2)
   21f0c:	00396d06 	br	204c4 <__alt_data_end+0xfffe3fa4>
   21f10:	010000f4 	movhi	r4,3
   21f14:	213fc404 	addi	r4,r4,-240
   21f18:	d9013115 	stw	r4,1220(sp)
   21f1c:	003ba206 	br	20da8 <__alt_data_end+0xfffe4888>
   21f20:	b809883a 	mov	r4,r23
   21f24:	b00b883a 	mov	r5,r22
   21f28:	d9811e04 	addi	r6,sp,1144
   21f2c:	0026d080 	call	26d08 <__sprint_r>
   21f30:	103a3f1e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21f34:	dc012617 	ldw	r16,1176(sp)
   21f38:	d8c12017 	ldw	r3,1152(sp)
   21f3c:	da000404 	addi	r8,sp,16
   21f40:	003f9106 	br	21d88 <__alt_data_end+0xfffe5868>
   21f44:	e0800044 	addi	r2,fp,1
   21f48:	9cc00814 	ori	r19,r19,32
   21f4c:	e4000047 	ldb	r16,1(fp)
   21f50:	00398706 	br	20570 <__alt_data_end+0xfffe4050>
   21f54:	d8812e17 	ldw	r2,1208(sp)
   21f58:	d8c12d15 	stw	r3,1204(sp)
   21f5c:	0085c83a 	sub	r2,zero,r2
   21f60:	d8812e15 	stw	r2,1208(sp)
   21f64:	e005883a 	mov	r2,fp
   21f68:	003a3a06 	br	20854 <__alt_data_end+0xfffe4334>
   21f6c:	b809883a 	mov	r4,r23
   21f70:	b00b883a 	mov	r5,r22
   21f74:	d9811e04 	addi	r6,sp,1144
   21f78:	0026d080 	call	26d08 <__sprint_r>
   21f7c:	103a2c1e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21f80:	d8c12017 	ldw	r3,1152(sp)
   21f84:	da000404 	addi	r8,sp,16
   21f88:	003cf006 	br	2134c <__alt_data_end+0xfffe4e2c>
   21f8c:	d8c12817 	ldw	r3,1184(sp)
   21f90:	d9013117 	ldw	r4,1220(sp)
   21f94:	1923c83a 	sub	r17,r3,r4
   21f98:	003a8806 	br	209bc <__alt_data_end+0xfffe449c>
   21f9c:	da013f15 	stw	r8,1276(sp)
   21fa0:	0026b740 	call	26b74 <strlen>
   21fa4:	1023883a 	mov	r17,r2
   21fa8:	da013f17 	ldw	r8,1276(sp)
   21fac:	883c7f0e 	bge	r17,zero,211ac <__alt_data_end+0xfffe4c8c>
   21fb0:	0005883a 	mov	r2,zero
   21fb4:	003c7d06 	br	211ac <__alt_data_end+0xfffe4c8c>
   21fb8:	b809883a 	mov	r4,r23
   21fbc:	b00b883a 	mov	r5,r22
   21fc0:	d9811e04 	addi	r6,sp,1144
   21fc4:	0026d080 	call	26d08 <__sprint_r>
   21fc8:	103a191e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   21fcc:	d8c12017 	ldw	r3,1152(sp)
   21fd0:	d8811f17 	ldw	r2,1148(sp)
   21fd4:	da000404 	addi	r8,sp,16
   21fd8:	d9413317 	ldw	r5,1228(sp)
   21fdc:	d9013117 	ldw	r4,1220(sp)
   21fe0:	10800044 	addi	r2,r2,1
   21fe4:	28c7883a 	add	r3,r5,r3
   21fe8:	41000015 	stw	r4,0(r8)
   21fec:	41400115 	stw	r5,4(r8)
   21ff0:	d8c12015 	stw	r3,1152(sp)
   21ff4:	d8811f15 	stw	r2,1148(sp)
   21ff8:	010001c4 	movi	r4,7
   21ffc:	20bb060e 	bge	r4,r2,20c18 <__alt_data_end+0xfffe46f8>
   22000:	003d6206 	br	2158c <__alt_data_end+0xfffe506c>
   22004:	010000f4 	movhi	r4,3
   22008:	213fd884 	addi	r4,r4,-158
   2200c:	d9013615 	stw	r4,1240(sp)
   22010:	003aa306 	br	20aa0 <__alt_data_end+0xfffe4580>
   22014:	d8812604 	addi	r2,sp,1176
   22018:	d8800115 	stw	r2,4(sp)
   2201c:	d9413717 	ldw	r5,1244(sp)
   22020:	d8812504 	addi	r2,sp,1172
   22024:	d8800215 	stw	r2,8(sp)
   22028:	d8812104 	addi	r2,sp,1156
   2202c:	da400015 	stw	r9,0(sp)
   22030:	d8800315 	stw	r2,12(sp)
   22034:	b809883a 	mov	r4,r23
   22038:	880d883a 	mov	r6,r17
   2203c:	01c000c4 	movi	r7,3
   22040:	da013f15 	stw	r8,1276(sp)
   22044:	da413e15 	stw	r9,1272(sp)
   22048:	00228480 	call	22848 <_dtoa_r>
   2204c:	da413e17 	ldw	r9,1272(sp)
   22050:	da013f17 	ldw	r8,1276(sp)
   22054:	d8813115 	stw	r2,1220(sp)
   22058:	482b883a 	mov	r21,r9
   2205c:	d8c13117 	ldw	r3,1220(sp)
   22060:	00801184 	movi	r2,70
   22064:	1d55883a 	add	r10,r3,r21
   22068:	98bebb1e 	bne	r19,r2,21b58 <__alt_data_end+0xfffe5638>
   2206c:	19000007 	ldb	r4,0(r3)
   22070:	00800c04 	movi	r2,48
   22074:	2080dd26 	beq	r4,r2,223ec <___vfprintf_internal_r+0x201c>
   22078:	d8c12617 	ldw	r3,1176(sp)
   2207c:	50d5883a 	add	r10,r10,r3
   22080:	003eb506 	br	21b58 <__alt_data_end+0xfffe5638>
   22084:	0023883a 	mov	r17,zero
   22088:	003d9b06 	br	216f8 <__alt_data_end+0xfffe51d8>
   2208c:	b809883a 	mov	r4,r23
   22090:	b00b883a 	mov	r5,r22
   22094:	d9811e04 	addi	r6,sp,1144
   22098:	0026d080 	call	26d08 <__sprint_r>
   2209c:	1039e41e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   220a0:	d8c12017 	ldw	r3,1152(sp)
   220a4:	da000404 	addi	r8,sp,16
   220a8:	003d9206 	br	216f4 <__alt_data_end+0xfffe51d4>
   220ac:	b809883a 	mov	r4,r23
   220b0:	b00b883a 	mov	r5,r22
   220b4:	d9811e04 	addi	r6,sp,1144
   220b8:	0026d080 	call	26d08 <__sprint_r>
   220bc:	1039dc1e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   220c0:	d8812617 	ldw	r2,1176(sp)
   220c4:	d8c12017 	ldw	r3,1152(sp)
   220c8:	da000404 	addi	r8,sp,16
   220cc:	003dfb06 	br	218bc <__alt_data_end+0xfffe539c>
   220d0:	010000f4 	movhi	r4,3
   220d4:	213fd484 	addi	r4,r4,-174
   220d8:	d9012c15 	stw	r4,1200(sp)
   220dc:	d9012c17 	ldw	r4,1200(sp)
   220e0:	1c07883a 	add	r3,r3,r16
   220e4:	10800044 	addi	r2,r2,1
   220e8:	41000015 	stw	r4,0(r8)
   220ec:	44000115 	stw	r16,4(r8)
   220f0:	d8c12015 	stw	r3,1152(sp)
   220f4:	d8811f15 	stw	r2,1148(sp)
   220f8:	010001c4 	movi	r4,7
   220fc:	20bfae16 	blt	r4,r2,21fb8 <__alt_data_end+0xfffe5a98>
   22100:	42000204 	addi	r8,r8,8
   22104:	003fb406 	br	21fd8 <__alt_data_end+0xfffe5ab8>
   22108:	0021883a 	mov	r16,zero
   2210c:	003dfd06 	br	21904 <__alt_data_end+0xfffe53e4>
   22110:	014000f4 	movhi	r5,3
   22114:	297fd884 	addi	r5,r5,-158
   22118:	d9413615 	stw	r5,1240(sp)
   2211c:	003ae306 	br	20cac <__alt_data_end+0xfffe478c>
   22120:	b809883a 	mov	r4,r23
   22124:	b00b883a 	mov	r5,r22
   22128:	d9811e04 	addi	r6,sp,1144
   2212c:	0026d080 	call	26d08 <__sprint_r>
   22130:	1039bf1e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   22134:	d8812617 	ldw	r2,1176(sp)
   22138:	d9413317 	ldw	r5,1228(sp)
   2213c:	d8c12017 	ldw	r3,1152(sp)
   22140:	da000404 	addi	r8,sp,16
   22144:	2885c83a 	sub	r2,r5,r2
   22148:	003ded06 	br	21900 <__alt_data_end+0xfffe53e0>
   2214c:	00800184 	movi	r2,6
   22150:	1240012e 	bgeu	r2,r9,22158 <___vfprintf_internal_r+0x1d88>
   22154:	1013883a 	mov	r9,r2
   22158:	4823883a 	mov	r17,r9
   2215c:	4805883a 	mov	r2,r9
   22160:	4800b216 	blt	r9,zero,2242c <___vfprintf_internal_r+0x205c>
   22164:	014000f4 	movhi	r5,3
   22168:	297fd204 	addi	r5,r5,-184
   2216c:	d8812b15 	stw	r2,1196(sp)
   22170:	dc812d15 	stw	r18,1204(sp)
   22174:	d8013215 	stw	zero,1224(sp)
   22178:	d8013415 	stw	zero,1232(sp)
   2217c:	d9413115 	stw	r5,1220(sp)
   22180:	0005883a 	mov	r2,zero
   22184:	003a1906 	br	209ec <__alt_data_end+0xfffe44cc>
   22188:	04c00b44 	movi	r19,45
   2218c:	dcc12785 	stb	r19,1182(sp)
   22190:	003b0006 	br	20d94 <__alt_data_end+0xfffe4874>
   22194:	d8c12d17 	ldw	r3,1204(sp)
   22198:	d9012f17 	ldw	r4,1212(sp)
   2219c:	18800017 	ldw	r2,0(r3)
   221a0:	18c00104 	addi	r3,r3,4
   221a4:	d8c12d15 	stw	r3,1204(sp)
   221a8:	11000015 	stw	r4,0(r2)
   221ac:	0038c506 	br	204c4 <__alt_data_end+0xfffe3fa4>
   221b0:	014000f4 	movhi	r5,3
   221b4:	297fc704 	addi	r5,r5,-228
   221b8:	d9413115 	stw	r5,1220(sp)
   221bc:	003f2406 	br	21e50 <__alt_data_end+0xfffe5930>
   221c0:	00800b44 	movi	r2,45
   221c4:	d8812785 	stb	r2,1182(sp)
   221c8:	df012b15 	stw	fp,1196(sp)
   221cc:	d8013215 	stw	zero,1224(sp)
   221d0:	df012d17 	ldw	fp,1204(sp)
   221d4:	00800b44 	movi	r2,45
   221d8:	dc812d15 	stw	r18,1204(sp)
   221dc:	003a0006 	br	209e0 <__alt_data_end+0xfffe44c0>
   221e0:	d8c12617 	ldw	r3,1176(sp)
   221e4:	00bfff44 	movi	r2,-3
   221e8:	18800a16 	blt	r3,r2,22214 <___vfprintf_internal_r+0x1e44>
   221ec:	48c00916 	blt	r9,r3,22214 <___vfprintf_internal_r+0x1e44>
   221f0:	d8c13415 	stw	r3,1232(sp)
   221f4:	040019c4 	movi	r16,103
   221f8:	003e7606 	br	21bd4 <__alt_data_end+0xfffe56b4>
   221fc:	010000f4 	movhi	r4,3
   22200:	213fd484 	addi	r4,r4,-174
   22204:	d9012c15 	stw	r4,1200(sp)
   22208:	003c8e06 	br	21444 <__alt_data_end+0xfffe4f24>
   2220c:	5005883a 	mov	r2,r10
   22210:	003e6506 	br	21ba8 <__alt_data_end+0xfffe5688>
   22214:	843fff84 	addi	r16,r16,-2
   22218:	1d7fffc4 	addi	r21,r3,-1
   2221c:	dd412615 	stw	r21,1176(sp)
   22220:	dc0122c5 	stb	r16,1163(sp)
   22224:	a8009216 	blt	r21,zero,22470 <___vfprintf_internal_r+0x20a0>
   22228:	00800ac4 	movi	r2,43
   2222c:	d8812305 	stb	r2,1164(sp)
   22230:	00800244 	movi	r2,9
   22234:	1540660e 	bge	r2,r21,223d0 <___vfprintf_internal_r+0x2000>
   22238:	dcc122c4 	addi	r19,sp,1163
   2223c:	dc012c15 	stw	r16,1200(sp)
   22240:	4023883a 	mov	r17,r8
   22244:	9821883a 	mov	r16,r19
   22248:	a809883a 	mov	r4,r21
   2224c:	01400284 	movi	r5,10
   22250:	002a3700 	call	2a370 <__modsi3>
   22254:	10800c04 	addi	r2,r2,48
   22258:	843fffc4 	addi	r16,r16,-1
   2225c:	a809883a 	mov	r4,r21
   22260:	01400284 	movi	r5,10
   22264:	80800005 	stb	r2,0(r16)
   22268:	002a31c0 	call	2a31c <__divsi3>
   2226c:	01000244 	movi	r4,9
   22270:	102b883a 	mov	r21,r2
   22274:	20bff416 	blt	r4,r2,22248 <__alt_data_end+0xfffe5d28>
   22278:	8811883a 	mov	r8,r17
   2227c:	10800c04 	addi	r2,r2,48
   22280:	8023883a 	mov	r17,r16
   22284:	897fffc4 	addi	r5,r17,-1
   22288:	88bfffc5 	stb	r2,-1(r17)
   2228c:	dc012c17 	ldw	r16,1200(sp)
   22290:	2cc08a2e 	bgeu	r5,r19,224bc <___vfprintf_internal_r+0x20ec>
   22294:	d9812384 	addi	r6,sp,1166
   22298:	344dc83a 	sub	r6,r6,r17
   2229c:	d9012344 	addi	r4,sp,1165
   222a0:	998d883a 	add	r6,r19,r6
   222a4:	00000106 	br	222ac <___vfprintf_internal_r+0x1edc>
   222a8:	28800003 	ldbu	r2,0(r5)
   222ac:	20800005 	stb	r2,0(r4)
   222b0:	21000044 	addi	r4,r4,1
   222b4:	29400044 	addi	r5,r5,1
   222b8:	21bffb1e 	bne	r4,r6,222a8 <__alt_data_end+0xfffe5d88>
   222bc:	d8812304 	addi	r2,sp,1164
   222c0:	1445c83a 	sub	r2,r2,r17
   222c4:	d9412344 	addi	r5,sp,1165
   222c8:	2885883a 	add	r2,r5,r2
   222cc:	14e7c83a 	sub	r19,r2,r19
   222d0:	d8813317 	ldw	r2,1228(sp)
   222d4:	d8c13317 	ldw	r3,1228(sp)
   222d8:	dcc13a15 	stw	r19,1256(sp)
   222dc:	14e3883a 	add	r17,r2,r19
   222e0:	00800044 	movi	r2,1
   222e4:	10c0550e 	bge	r2,r3,2243c <___vfprintf_internal_r+0x206c>
   222e8:	8c400044 	addi	r17,r17,1
   222ec:	8839883a 	mov	fp,r17
   222f0:	88005016 	blt	r17,zero,22434 <___vfprintf_internal_r+0x2064>
   222f4:	d8013415 	stw	zero,1232(sp)
   222f8:	003e3f06 	br	21bf8 <__alt_data_end+0xfffe56d8>
   222fc:	da412b15 	stw	r9,1196(sp)
   22300:	dcc12783 	ldbu	r19,1182(sp)
   22304:	4823883a 	mov	r17,r9
   22308:	dc812d15 	stw	r18,1204(sp)
   2230c:	d8013215 	stw	zero,1224(sp)
   22310:	d8013415 	stw	zero,1232(sp)
   22314:	0039ae06 	br	209d0 <__alt_data_end+0xfffe44b0>
   22318:	483de91e 	bne	r9,zero,21ac0 <__alt_data_end+0xfffe55a0>
   2231c:	8813883a 	mov	r9,r17
   22320:	003de706 	br	21ac0 <__alt_data_end+0xfffe55a0>
   22324:	b809883a 	mov	r4,r23
   22328:	b00b883a 	mov	r5,r22
   2232c:	d9811e04 	addi	r6,sp,1144
   22330:	0026d080 	call	26d08 <__sprint_r>
   22334:	10393e1e 	bne	r2,zero,20830 <__alt_data_end+0xfffe4310>
   22338:	dc012617 	ldw	r16,1176(sp)
   2233c:	d8c12017 	ldw	r3,1152(sp)
   22340:	d8811f17 	ldw	r2,1148(sp)
   22344:	da000404 	addi	r8,sp,16
   22348:	003ea006 	br	21dcc <__alt_data_end+0xfffe58ac>
   2234c:	00c00b44 	movi	r3,45
   22350:	2460003c 	xorhi	r17,r4,32768
   22354:	d8c12b05 	stb	r3,1196(sp)
   22358:	003ddf06 	br	21ad8 <__alt_data_end+0xfffe55b8>
   2235c:	02400184 	movi	r9,6
   22360:	003dd706 	br	21ac0 <__alt_data_end+0xfffe55a0>
   22364:	4d400044 	addi	r21,r9,1
   22368:	003de206 	br	21af4 <__alt_data_end+0xfffe55d4>
   2236c:	d8c13417 	ldw	r3,1232(sp)
   22370:	00c0490e 	bge	zero,r3,22498 <___vfprintf_internal_r+0x20c8>
   22374:	04400044 	movi	r17,1
   22378:	d9013317 	ldw	r4,1228(sp)
   2237c:	8923883a 	add	r17,r17,r4
   22380:	8839883a 	mov	fp,r17
   22384:	883e1c0e 	bge	r17,zero,21bf8 <__alt_data_end+0xfffe56d8>
   22388:	0039883a 	mov	fp,zero
   2238c:	003e1a06 	br	21bf8 <__alt_data_end+0xfffe56d8>
   22390:	00c03b0e 	bge	zero,r3,22480 <___vfprintf_internal_r+0x20b0>
   22394:	4800021e 	bne	r9,zero,223a0 <___vfprintf_internal_r+0x1fd0>
   22398:	e080004c 	andi	r2,fp,1
   2239c:	10000626 	beq	r2,zero,223b8 <___vfprintf_internal_r+0x1fe8>
   223a0:	d8c13417 	ldw	r3,1232(sp)
   223a4:	4a400044 	addi	r9,r9,1
   223a8:	1a63883a 	add	r17,r3,r9
   223ac:	8839883a 	mov	fp,r17
   223b0:	883e110e 	bge	r17,zero,21bf8 <__alt_data_end+0xfffe56d8>
   223b4:	003ff406 	br	22388 <__alt_data_end+0xfffe5e68>
   223b8:	1839883a 	mov	fp,r3
   223bc:	18004116 	blt	r3,zero,224c4 <___vfprintf_internal_r+0x20f4>
   223c0:	dc413417 	ldw	r17,1232(sp)
   223c4:	003e0c06 	br	21bf8 <__alt_data_end+0xfffe56d8>
   223c8:	d8812117 	ldw	r2,1156(sp)
   223cc:	003df606 	br	21ba8 <__alt_data_end+0xfffe5688>
   223d0:	00800c04 	movi	r2,48
   223d4:	a8c00c04 	addi	r3,r21,48
   223d8:	d8812345 	stb	r2,1165(sp)
   223dc:	d8c12385 	stb	r3,1166(sp)
   223e0:	d88123c4 	addi	r2,sp,1167
   223e4:	dcc122c4 	addi	r19,sp,1163
   223e8:	003fb806 	br	222cc <__alt_data_end+0xfffe5dac>
   223ec:	d9013717 	ldw	r4,1244(sp)
   223f0:	880b883a 	mov	r5,r17
   223f4:	000d883a 	mov	r6,zero
   223f8:	000f883a 	mov	r7,zero
   223fc:	da013f15 	stw	r8,1276(sp)
   22400:	da413e15 	stw	r9,1272(sp)
   22404:	da813d15 	stw	r10,1268(sp)
   22408:	002b6200 	call	2b620 <__eqdf2>
   2240c:	da013f17 	ldw	r8,1276(sp)
   22410:	da413e17 	ldw	r9,1272(sp)
   22414:	da813d17 	ldw	r10,1268(sp)
   22418:	103f1726 	beq	r2,zero,22078 <__alt_data_end+0xfffe5b58>
   2241c:	00800044 	movi	r2,1
   22420:	1547c83a 	sub	r3,r2,r21
   22424:	d8c12615 	stw	r3,1176(sp)
   22428:	003f1406 	br	2207c <__alt_data_end+0xfffe5b5c>
   2242c:	0005883a 	mov	r2,zero
   22430:	003f4c06 	br	22164 <__alt_data_end+0xfffe5c44>
   22434:	0039883a 	mov	fp,zero
   22438:	003fae06 	br	222f4 <__alt_data_end+0xfffe5dd4>
   2243c:	e084703a 	and	r2,fp,r2
   22440:	103faa26 	beq	r2,zero,222ec <__alt_data_end+0xfffe5dcc>
   22444:	003fa806 	br	222e8 <__alt_data_end+0xfffe5dc8>
   22448:	d9412d17 	ldw	r5,1204(sp)
   2244c:	2a400017 	ldw	r9,0(r5)
   22450:	28c00104 	addi	r3,r5,4
   22454:	d8c12d15 	stw	r3,1204(sp)
   22458:	483ebc0e 	bge	r9,zero,21f4c <__alt_data_end+0xfffe5a2c>
   2245c:	027fffc4 	movi	r9,-1
   22460:	e4000047 	ldb	r16,1(fp)
   22464:	00384206 	br	20570 <__alt_data_end+0xfffe4050>
   22468:	043fffc4 	movi	r16,-1
   2246c:	0038ce06 	br	207a8 <__alt_data_end+0xfffe4288>
   22470:	00800b44 	movi	r2,45
   22474:	056bc83a 	sub	r21,zero,r21
   22478:	d8812305 	stb	r2,1164(sp)
   2247c:	003f6c06 	br	22230 <__alt_data_end+0xfffe5d10>
   22480:	4800081e 	bne	r9,zero,224a4 <___vfprintf_internal_r+0x20d4>
   22484:	e080004c 	andi	r2,fp,1
   22488:	1000061e 	bne	r2,zero,224a4 <___vfprintf_internal_r+0x20d4>
   2248c:	07000044 	movi	fp,1
   22490:	e023883a 	mov	r17,fp
   22494:	003dd806 	br	21bf8 <__alt_data_end+0xfffe56d8>
   22498:	04400084 	movi	r17,2
   2249c:	88e3c83a 	sub	r17,r17,r3
   224a0:	003fb506 	br	22378 <__alt_data_end+0xfffe5e58>
   224a4:	4c400084 	addi	r17,r9,2
   224a8:	8839883a 	mov	fp,r17
   224ac:	883dd20e 	bge	r17,zero,21bf8 <__alt_data_end+0xfffe56d8>
   224b0:	003fb506 	br	22388 <__alt_data_end+0xfffe5e68>
   224b4:	d8c12617 	ldw	r3,1176(sp)
   224b8:	003f5706 	br	22218 <__alt_data_end+0xfffe5cf8>
   224bc:	d8812344 	addi	r2,sp,1165
   224c0:	003f8206 	br	222cc <__alt_data_end+0xfffe5dac>
   224c4:	0039883a 	mov	fp,zero
   224c8:	003fbd06 	br	223c0 <__alt_data_end+0xfffe5ea0>

000224cc <__vfprintf_internal>:
   224cc:	2007883a 	mov	r3,r4
   224d0:	010000f4 	movhi	r4,3
   224d4:	21076104 	addi	r4,r4,7556
   224d8:	21000017 	ldw	r4,0(r4)
   224dc:	2805883a 	mov	r2,r5
   224e0:	300f883a 	mov	r7,r6
   224e4:	180b883a 	mov	r5,r3
   224e8:	100d883a 	mov	r6,r2
   224ec:	00203d01 	jmpi	203d0 <___vfprintf_internal_r>

000224f0 <__swsetup_r>:
   224f0:	008000f4 	movhi	r2,3
   224f4:	defffd04 	addi	sp,sp,-12
   224f8:	10876104 	addi	r2,r2,7556
   224fc:	dc400115 	stw	r17,4(sp)
   22500:	2023883a 	mov	r17,r4
   22504:	11000017 	ldw	r4,0(r2)
   22508:	dc000015 	stw	r16,0(sp)
   2250c:	dfc00215 	stw	ra,8(sp)
   22510:	2821883a 	mov	r16,r5
   22514:	20000226 	beq	r4,zero,22520 <__swsetup_r+0x30>
   22518:	20c00e17 	ldw	r3,56(r4)
   2251c:	18002e26 	beq	r3,zero,225d8 <__swsetup_r+0xe8>
   22520:	8080030b 	ldhu	r2,12(r16)
   22524:	10c0020c 	andi	r3,r2,8
   22528:	100d883a 	mov	r6,r2
   2252c:	18000f26 	beq	r3,zero,2256c <__swsetup_r+0x7c>
   22530:	80c00417 	ldw	r3,16(r16)
   22534:	18001526 	beq	r3,zero,2258c <__swsetup_r+0x9c>
   22538:	1100004c 	andi	r4,r2,1
   2253c:	20001c1e 	bne	r4,zero,225b0 <__swsetup_r+0xc0>
   22540:	1080008c 	andi	r2,r2,2
   22544:	1000261e 	bne	r2,zero,225e0 <__swsetup_r+0xf0>
   22548:	80800517 	ldw	r2,20(r16)
   2254c:	80800215 	stw	r2,8(r16)
   22550:	18001c26 	beq	r3,zero,225c4 <__swsetup_r+0xd4>
   22554:	0005883a 	mov	r2,zero
   22558:	dfc00217 	ldw	ra,8(sp)
   2255c:	dc400117 	ldw	r17,4(sp)
   22560:	dc000017 	ldw	r16,0(sp)
   22564:	dec00304 	addi	sp,sp,12
   22568:	f800283a 	ret
   2256c:	3080040c 	andi	r2,r6,16
   22570:	10001726 	beq	r2,zero,225d0 <__swsetup_r+0xe0>
   22574:	3080010c 	andi	r2,r6,4
   22578:	10001b1e 	bne	r2,zero,225e8 <__swsetup_r+0xf8>
   2257c:	80c00417 	ldw	r3,16(r16)
   22580:	30800214 	ori	r2,r6,8
   22584:	8080030d 	sth	r2,12(r16)
   22588:	183feb1e 	bne	r3,zero,22538 <__alt_data_end+0xfffe6018>
   2258c:	1140a00c 	andi	r5,r2,640
   22590:	01008004 	movi	r4,512
   22594:	293fe826 	beq	r5,r4,22538 <__alt_data_end+0xfffe6018>
   22598:	8809883a 	mov	r4,r17
   2259c:	800b883a 	mov	r5,r16
   225a0:	0024be00 	call	24be0 <__smakebuf_r>
   225a4:	8080030b 	ldhu	r2,12(r16)
   225a8:	80c00417 	ldw	r3,16(r16)
   225ac:	003fe206 	br	22538 <__alt_data_end+0xfffe6018>
   225b0:	80800517 	ldw	r2,20(r16)
   225b4:	80000215 	stw	zero,8(r16)
   225b8:	0085c83a 	sub	r2,zero,r2
   225bc:	80800615 	stw	r2,24(r16)
   225c0:	183fe41e 	bne	r3,zero,22554 <__alt_data_end+0xfffe6034>
   225c4:	8080030b 	ldhu	r2,12(r16)
   225c8:	1080200c 	andi	r2,r2,128
   225cc:	103fe226 	beq	r2,zero,22558 <__alt_data_end+0xfffe6038>
   225d0:	00bfffc4 	movi	r2,-1
   225d4:	003fe006 	br	22558 <__alt_data_end+0xfffe6038>
   225d8:	002452c0 	call	2452c <__sinit>
   225dc:	003fd006 	br	22520 <__alt_data_end+0xfffe6000>
   225e0:	0005883a 	mov	r2,zero
   225e4:	003fd906 	br	2254c <__alt_data_end+0xfffe602c>
   225e8:	81400c17 	ldw	r5,48(r16)
   225ec:	28000626 	beq	r5,zero,22608 <__swsetup_r+0x118>
   225f0:	80801004 	addi	r2,r16,64
   225f4:	28800326 	beq	r5,r2,22604 <__swsetup_r+0x114>
   225f8:	8809883a 	mov	r4,r17
   225fc:	00246a00 	call	246a0 <_free_r>
   22600:	8180030b 	ldhu	r6,12(r16)
   22604:	80000c15 	stw	zero,48(r16)
   22608:	80c00417 	ldw	r3,16(r16)
   2260c:	00bff6c4 	movi	r2,-37
   22610:	118c703a 	and	r6,r2,r6
   22614:	80000115 	stw	zero,4(r16)
   22618:	80c00015 	stw	r3,0(r16)
   2261c:	003fd806 	br	22580 <__alt_data_end+0xfffe6060>

00022620 <quorem>:
   22620:	defff204 	addi	sp,sp,-56
   22624:	ddc00b15 	stw	r23,44(sp)
   22628:	20800417 	ldw	r2,16(r4)
   2262c:	2dc00417 	ldw	r23,16(r5)
   22630:	dfc00d15 	stw	ra,52(sp)
   22634:	df000c15 	stw	fp,48(sp)
   22638:	dd800a15 	stw	r22,40(sp)
   2263c:	dd400915 	stw	r21,36(sp)
   22640:	dd000815 	stw	r20,32(sp)
   22644:	dcc00715 	stw	r19,28(sp)
   22648:	dc800615 	stw	r18,24(sp)
   2264c:	dc400515 	stw	r17,20(sp)
   22650:	dc000415 	stw	r16,16(sp)
   22654:	15c07a16 	blt	r2,r23,22840 <quorem+0x220>
   22658:	bdffffc4 	addi	r23,r23,-1
   2265c:	bde9883a 	add	r20,r23,r23
   22660:	28c00504 	addi	r3,r5,20
   22664:	a529883a 	add	r20,r20,r20
   22668:	1d39883a 	add	fp,r3,r20
   2266c:	24c00504 	addi	r19,r4,20
   22670:	d9400215 	stw	r5,8(sp)
   22674:	9d29883a 	add	r20,r19,r20
   22678:	e1400017 	ldw	r5,0(fp)
   2267c:	d9000015 	stw	r4,0(sp)
   22680:	a1000017 	ldw	r4,0(r20)
   22684:	29400044 	addi	r5,r5,1
   22688:	d8c00115 	stw	r3,4(sp)
   2268c:	dd000315 	stw	r20,12(sp)
   22690:	002a3cc0 	call	2a3cc <__udivsi3>
   22694:	1025883a 	mov	r18,r2
   22698:	10003026 	beq	r2,zero,2275c <quorem+0x13c>
   2269c:	dc400117 	ldw	r17,4(sp)
   226a0:	9829883a 	mov	r20,r19
   226a4:	002d883a 	mov	r22,zero
   226a8:	0021883a 	mov	r16,zero
   226ac:	8d400017 	ldw	r21,0(r17)
   226b0:	900b883a 	mov	r5,r18
   226b4:	8c400104 	addi	r17,r17,4
   226b8:	a93fffcc 	andi	r4,r21,65535
   226bc:	002a3dc0 	call	2a3dc <__mulsi3>
   226c0:	a808d43a 	srli	r4,r21,16
   226c4:	900b883a 	mov	r5,r18
   226c8:	b0ad883a 	add	r22,r22,r2
   226cc:	002a3dc0 	call	2a3dc <__mulsi3>
   226d0:	a1000017 	ldw	r4,0(r20)
   226d4:	b00cd43a 	srli	r6,r22,16
   226d8:	b0ffffcc 	andi	r3,r22,65535
   226dc:	217fffcc 	andi	r5,r4,65535
   226e0:	2c21883a 	add	r16,r5,r16
   226e4:	80c7c83a 	sub	r3,r16,r3
   226e8:	2008d43a 	srli	r4,r4,16
   226ec:	3085883a 	add	r2,r6,r2
   226f0:	1821d43a 	srai	r16,r3,16
   226f4:	117fffcc 	andi	r5,r2,65535
   226f8:	2149c83a 	sub	r4,r4,r5
   226fc:	2421883a 	add	r16,r4,r16
   22700:	8008943a 	slli	r4,r16,16
   22704:	18ffffcc 	andi	r3,r3,65535
   22708:	102cd43a 	srli	r22,r2,16
   2270c:	20c8b03a 	or	r4,r4,r3
   22710:	a1000015 	stw	r4,0(r20)
   22714:	8021d43a 	srai	r16,r16,16
   22718:	a5000104 	addi	r20,r20,4
   2271c:	e47fe32e 	bgeu	fp,r17,226ac <__alt_data_end+0xfffe618c>
   22720:	d8c00317 	ldw	r3,12(sp)
   22724:	18800017 	ldw	r2,0(r3)
   22728:	10000c1e 	bne	r2,zero,2275c <quorem+0x13c>
   2272c:	18bfff04 	addi	r2,r3,-4
   22730:	9880082e 	bgeu	r19,r2,22754 <quorem+0x134>
   22734:	18ffff17 	ldw	r3,-4(r3)
   22738:	18000326 	beq	r3,zero,22748 <quorem+0x128>
   2273c:	00000506 	br	22754 <quorem+0x134>
   22740:	10c00017 	ldw	r3,0(r2)
   22744:	1800031e 	bne	r3,zero,22754 <quorem+0x134>
   22748:	10bfff04 	addi	r2,r2,-4
   2274c:	bdffffc4 	addi	r23,r23,-1
   22750:	98bffb36 	bltu	r19,r2,22740 <__alt_data_end+0xfffe6220>
   22754:	d8c00017 	ldw	r3,0(sp)
   22758:	1dc00415 	stw	r23,16(r3)
   2275c:	d9000017 	ldw	r4,0(sp)
   22760:	d9400217 	ldw	r5,8(sp)
   22764:	00262000 	call	26200 <__mcmp>
   22768:	10002816 	blt	r2,zero,2280c <quorem+0x1ec>
   2276c:	dc400117 	ldw	r17,4(sp)
   22770:	94800044 	addi	r18,r18,1
   22774:	980d883a 	mov	r6,r19
   22778:	0007883a 	mov	r3,zero
   2277c:	31000017 	ldw	r4,0(r6)
   22780:	89400017 	ldw	r5,0(r17)
   22784:	31800104 	addi	r6,r6,4
   22788:	20bfffcc 	andi	r2,r4,65535
   2278c:	10c7883a 	add	r3,r2,r3
   22790:	28bfffcc 	andi	r2,r5,65535
   22794:	1885c83a 	sub	r2,r3,r2
   22798:	280ad43a 	srli	r5,r5,16
   2279c:	2008d43a 	srli	r4,r4,16
   227a0:	1007d43a 	srai	r3,r2,16
   227a4:	10bfffcc 	andi	r2,r2,65535
   227a8:	2149c83a 	sub	r4,r4,r5
   227ac:	20c9883a 	add	r4,r4,r3
   227b0:	200a943a 	slli	r5,r4,16
   227b4:	8c400104 	addi	r17,r17,4
   227b8:	2007d43a 	srai	r3,r4,16
   227bc:	2884b03a 	or	r2,r5,r2
   227c0:	30bfff15 	stw	r2,-4(r6)
   227c4:	e47fed2e 	bgeu	fp,r17,2277c <__alt_data_end+0xfffe625c>
   227c8:	bdc5883a 	add	r2,r23,r23
   227cc:	1085883a 	add	r2,r2,r2
   227d0:	9887883a 	add	r3,r19,r2
   227d4:	18800017 	ldw	r2,0(r3)
   227d8:	10000c1e 	bne	r2,zero,2280c <quorem+0x1ec>
   227dc:	18bfff04 	addi	r2,r3,-4
   227e0:	9880082e 	bgeu	r19,r2,22804 <quorem+0x1e4>
   227e4:	18ffff17 	ldw	r3,-4(r3)
   227e8:	18000326 	beq	r3,zero,227f8 <quorem+0x1d8>
   227ec:	00000506 	br	22804 <quorem+0x1e4>
   227f0:	10c00017 	ldw	r3,0(r2)
   227f4:	1800031e 	bne	r3,zero,22804 <quorem+0x1e4>
   227f8:	10bfff04 	addi	r2,r2,-4
   227fc:	bdffffc4 	addi	r23,r23,-1
   22800:	98bffb36 	bltu	r19,r2,227f0 <__alt_data_end+0xfffe62d0>
   22804:	d8c00017 	ldw	r3,0(sp)
   22808:	1dc00415 	stw	r23,16(r3)
   2280c:	9005883a 	mov	r2,r18
   22810:	dfc00d17 	ldw	ra,52(sp)
   22814:	df000c17 	ldw	fp,48(sp)
   22818:	ddc00b17 	ldw	r23,44(sp)
   2281c:	dd800a17 	ldw	r22,40(sp)
   22820:	dd400917 	ldw	r21,36(sp)
   22824:	dd000817 	ldw	r20,32(sp)
   22828:	dcc00717 	ldw	r19,28(sp)
   2282c:	dc800617 	ldw	r18,24(sp)
   22830:	dc400517 	ldw	r17,20(sp)
   22834:	dc000417 	ldw	r16,16(sp)
   22838:	dec00e04 	addi	sp,sp,56
   2283c:	f800283a 	ret
   22840:	0005883a 	mov	r2,zero
   22844:	003ff206 	br	22810 <__alt_data_end+0xfffe62f0>

00022848 <_dtoa_r>:
   22848:	20801017 	ldw	r2,64(r4)
   2284c:	deffde04 	addi	sp,sp,-136
   22850:	dd401d15 	stw	r21,116(sp)
   22854:	dcc01b15 	stw	r19,108(sp)
   22858:	dc801a15 	stw	r18,104(sp)
   2285c:	dc401915 	stw	r17,100(sp)
   22860:	dc001815 	stw	r16,96(sp)
   22864:	dfc02115 	stw	ra,132(sp)
   22868:	df002015 	stw	fp,128(sp)
   2286c:	ddc01f15 	stw	r23,124(sp)
   22870:	dd801e15 	stw	r22,120(sp)
   22874:	dd001c15 	stw	r20,112(sp)
   22878:	d9c00315 	stw	r7,12(sp)
   2287c:	2021883a 	mov	r16,r4
   22880:	302b883a 	mov	r21,r6
   22884:	2825883a 	mov	r18,r5
   22888:	dc402417 	ldw	r17,144(sp)
   2288c:	3027883a 	mov	r19,r6
   22890:	10000826 	beq	r2,zero,228b4 <_dtoa_r+0x6c>
   22894:	21801117 	ldw	r6,68(r4)
   22898:	00c00044 	movi	r3,1
   2289c:	100b883a 	mov	r5,r2
   228a0:	1986983a 	sll	r3,r3,r6
   228a4:	11800115 	stw	r6,4(r2)
   228a8:	10c00215 	stw	r3,8(r2)
   228ac:	002592c0 	call	2592c <_Bfree>
   228b0:	80001015 	stw	zero,64(r16)
   228b4:	a8002d16 	blt	r21,zero,2296c <_dtoa_r+0x124>
   228b8:	88000015 	stw	zero,0(r17)
   228bc:	a8dffc2c 	andhi	r3,r21,32752
   228c0:	009ffc34 	movhi	r2,32752
   228c4:	18801b26 	beq	r3,r2,22934 <_dtoa_r+0xec>
   228c8:	9009883a 	mov	r4,r18
   228cc:	980b883a 	mov	r5,r19
   228d0:	000d883a 	mov	r6,zero
   228d4:	000f883a 	mov	r7,zero
   228d8:	002b6200 	call	2b620 <__eqdf2>
   228dc:	10002a1e 	bne	r2,zero,22988 <_dtoa_r+0x140>
   228e0:	d8c02317 	ldw	r3,140(sp)
   228e4:	d9002517 	ldw	r4,148(sp)
   228e8:	00800044 	movi	r2,1
   228ec:	18800015 	stw	r2,0(r3)
   228f0:	2001a226 	beq	r4,zero,22f7c <_dtoa_r+0x734>
   228f4:	008000f4 	movhi	r2,3
   228f8:	10bfd444 	addi	r2,r2,-175
   228fc:	20800015 	stw	r2,0(r4)
   22900:	10bfffc4 	addi	r2,r2,-1
   22904:	dfc02117 	ldw	ra,132(sp)
   22908:	df002017 	ldw	fp,128(sp)
   2290c:	ddc01f17 	ldw	r23,124(sp)
   22910:	dd801e17 	ldw	r22,120(sp)
   22914:	dd401d17 	ldw	r21,116(sp)
   22918:	dd001c17 	ldw	r20,112(sp)
   2291c:	dcc01b17 	ldw	r19,108(sp)
   22920:	dc801a17 	ldw	r18,104(sp)
   22924:	dc401917 	ldw	r17,100(sp)
   22928:	dc001817 	ldw	r16,96(sp)
   2292c:	dec02204 	addi	sp,sp,136
   22930:	f800283a 	ret
   22934:	d8c02317 	ldw	r3,140(sp)
   22938:	0089c3c4 	movi	r2,9999
   2293c:	18800015 	stw	r2,0(r3)
   22940:	90017c26 	beq	r18,zero,22f34 <_dtoa_r+0x6ec>
   22944:	008000f4 	movhi	r2,3
   22948:	10bfe004 	addi	r2,r2,-128
   2294c:	d9002517 	ldw	r4,148(sp)
   22950:	203fec26 	beq	r4,zero,22904 <__alt_data_end+0xfffe63e4>
   22954:	10c000c7 	ldb	r3,3(r2)
   22958:	18017d1e 	bne	r3,zero,22f50 <_dtoa_r+0x708>
   2295c:	10c000c4 	addi	r3,r2,3
   22960:	d9802517 	ldw	r6,148(sp)
   22964:	30c00015 	stw	r3,0(r6)
   22968:	003fe606 	br	22904 <__alt_data_end+0xfffe63e4>
   2296c:	04e00034 	movhi	r19,32768
   22970:	9cffffc4 	addi	r19,r19,-1
   22974:	00800044 	movi	r2,1
   22978:	ace6703a 	and	r19,r21,r19
   2297c:	88800015 	stw	r2,0(r17)
   22980:	982b883a 	mov	r21,r19
   22984:	003fcd06 	br	228bc <__alt_data_end+0xfffe639c>
   22988:	d8800204 	addi	r2,sp,8
   2298c:	a822d53a 	srli	r17,r21,20
   22990:	d8800015 	stw	r2,0(sp)
   22994:	8009883a 	mov	r4,r16
   22998:	900b883a 	mov	r5,r18
   2299c:	980d883a 	mov	r6,r19
   229a0:	d9c00104 	addi	r7,sp,4
   229a4:	00265740 	call	26574 <__d2b>
   229a8:	1039883a 	mov	fp,r2
   229ac:	88016a1e 	bne	r17,zero,22f58 <_dtoa_r+0x710>
   229b0:	dd000217 	ldw	r20,8(sp)
   229b4:	dc400117 	ldw	r17,4(sp)
   229b8:	00befbc4 	movi	r2,-1041
   229bc:	a463883a 	add	r17,r20,r17
   229c0:	8882ea16 	blt	r17,r2,2356c <_dtoa_r+0xd24>
   229c4:	00bf0384 	movi	r2,-1010
   229c8:	1445c83a 	sub	r2,r2,r17
   229cc:	89010484 	addi	r4,r17,1042
   229d0:	a8aa983a 	sll	r21,r21,r2
   229d4:	9108d83a 	srl	r4,r18,r4
   229d8:	a908b03a 	or	r4,r21,r4
   229dc:	002caf80 	call	2caf8 <__floatunsidf>
   229e0:	017f8434 	movhi	r5,65040
   229e4:	01800044 	movi	r6,1
   229e8:	1009883a 	mov	r4,r2
   229ec:	194b883a 	add	r5,r3,r5
   229f0:	8c7fffc4 	addi	r17,r17,-1
   229f4:	d9800f15 	stw	r6,60(sp)
   229f8:	000d883a 	mov	r6,zero
   229fc:	01cffe34 	movhi	r7,16376
   22a00:	002c0d00 	call	2c0d0 <__subdf3>
   22a04:	0198dbf4 	movhi	r6,25455
   22a08:	01cff4f4 	movhi	r7,16339
   22a0c:	1009883a 	mov	r4,r2
   22a10:	180b883a 	mov	r5,r3
   22a14:	3190d844 	addi	r6,r6,17249
   22a18:	39e1e9c4 	addi	r7,r7,-30809
   22a1c:	002b8640 	call	2b864 <__muldf3>
   22a20:	01a2d874 	movhi	r6,35681
   22a24:	01cff1f4 	movhi	r7,16327
   22a28:	180b883a 	mov	r5,r3
   22a2c:	31b22cc4 	addi	r6,r6,-14157
   22a30:	39e28a04 	addi	r7,r7,-30168
   22a34:	1009883a 	mov	r4,r2
   22a38:	002a4040 	call	2a404 <__adddf3>
   22a3c:	8809883a 	mov	r4,r17
   22a40:	102d883a 	mov	r22,r2
   22a44:	182b883a 	mov	r21,r3
   22a48:	002ca280 	call	2ca28 <__floatsidf>
   22a4c:	019427f4 	movhi	r6,20639
   22a50:	01cff4f4 	movhi	r7,16339
   22a54:	1009883a 	mov	r4,r2
   22a58:	180b883a 	mov	r5,r3
   22a5c:	319e7ec4 	addi	r6,r6,31227
   22a60:	39d104c4 	addi	r7,r7,17427
   22a64:	002b8640 	call	2b864 <__muldf3>
   22a68:	b009883a 	mov	r4,r22
   22a6c:	a80b883a 	mov	r5,r21
   22a70:	100d883a 	mov	r6,r2
   22a74:	180f883a 	mov	r7,r3
   22a78:	002a4040 	call	2a404 <__adddf3>
   22a7c:	1009883a 	mov	r4,r2
   22a80:	180b883a 	mov	r5,r3
   22a84:	102d883a 	mov	r22,r2
   22a88:	182b883a 	mov	r21,r3
   22a8c:	002c9a00 	call	2c9a0 <__fixdfsi>
   22a90:	b009883a 	mov	r4,r22
   22a94:	a80b883a 	mov	r5,r21
   22a98:	000d883a 	mov	r6,zero
   22a9c:	000f883a 	mov	r7,zero
   22aa0:	d8800515 	stw	r2,20(sp)
   22aa4:	002b7840 	call	2b784 <__ledf2>
   22aa8:	10023116 	blt	r2,zero,23370 <_dtoa_r+0xb28>
   22aac:	d8c00517 	ldw	r3,20(sp)
   22ab0:	00800584 	movi	r2,22
   22ab4:	10c21f36 	bltu	r2,r3,23334 <_dtoa_r+0xaec>
   22ab8:	180490fa 	slli	r2,r3,3
   22abc:	00c000f4 	movhi	r3,3
   22ac0:	18fffc04 	addi	r3,r3,-16
   22ac4:	1885883a 	add	r2,r3,r2
   22ac8:	11000017 	ldw	r4,0(r2)
   22acc:	11400117 	ldw	r5,4(r2)
   22ad0:	900d883a 	mov	r6,r18
   22ad4:	980f883a 	mov	r7,r19
   22ad8:	002b6a40 	call	2b6a4 <__gedf2>
   22adc:	0082a70e 	bge	zero,r2,2357c <_dtoa_r+0xd34>
   22ae0:	d9000517 	ldw	r4,20(sp)
   22ae4:	d8000c15 	stw	zero,48(sp)
   22ae8:	213fffc4 	addi	r4,r4,-1
   22aec:	d9000515 	stw	r4,20(sp)
   22af0:	a463c83a 	sub	r17,r20,r17
   22af4:	8dbfffc4 	addi	r22,r17,-1
   22af8:	b0021916 	blt	r22,zero,23360 <_dtoa_r+0xb18>
   22afc:	d8000815 	stw	zero,32(sp)
   22b00:	d8800517 	ldw	r2,20(sp)
   22b04:	10020e16 	blt	r2,zero,23340 <_dtoa_r+0xaf8>
   22b08:	b0ad883a 	add	r22,r22,r2
   22b0c:	d8800a15 	stw	r2,40(sp)
   22b10:	d8000915 	stw	zero,36(sp)
   22b14:	d8c00317 	ldw	r3,12(sp)
   22b18:	00800244 	movi	r2,9
   22b1c:	10c11a36 	bltu	r2,r3,22f88 <_dtoa_r+0x740>
   22b20:	00800144 	movi	r2,5
   22b24:	10c4fc0e 	bge	r2,r3,23f18 <_dtoa_r+0x16d0>
   22b28:	18ffff04 	addi	r3,r3,-4
   22b2c:	d8c00315 	stw	r3,12(sp)
   22b30:	0029883a 	mov	r20,zero
   22b34:	d9800317 	ldw	r6,12(sp)
   22b38:	008000c4 	movi	r2,3
   22b3c:	3083bd26 	beq	r6,r2,23a34 <_dtoa_r+0x11ec>
   22b40:	1183670e 	bge	r2,r6,238e0 <_dtoa_r+0x1098>
   22b44:	d8c00317 	ldw	r3,12(sp)
   22b48:	00800104 	movi	r2,4
   22b4c:	1882e726 	beq	r3,r2,236ec <_dtoa_r+0xea4>
   22b50:	00800144 	movi	r2,5
   22b54:	1884f21e 	bne	r3,r2,23f20 <_dtoa_r+0x16d8>
   22b58:	00800044 	movi	r2,1
   22b5c:	d8800b15 	stw	r2,44(sp)
   22b60:	d8c02217 	ldw	r3,136(sp)
   22b64:	d9000517 	ldw	r4,20(sp)
   22b68:	1907883a 	add	r3,r3,r4
   22b6c:	19800044 	addi	r6,r3,1
   22b70:	d8c00d15 	stw	r3,52(sp)
   22b74:	d9800615 	stw	r6,24(sp)
   22b78:	0183c30e 	bge	zero,r6,23a88 <_dtoa_r+0x1240>
   22b7c:	d9800617 	ldw	r6,24(sp)
   22b80:	3023883a 	mov	r17,r6
   22b84:	80001115 	stw	zero,68(r16)
   22b88:	008005c4 	movi	r2,23
   22b8c:	1184f62e 	bgeu	r2,r6,23f68 <_dtoa_r+0x1720>
   22b90:	00c00044 	movi	r3,1
   22b94:	00800104 	movi	r2,4
   22b98:	1085883a 	add	r2,r2,r2
   22b9c:	11000504 	addi	r4,r2,20
   22ba0:	180b883a 	mov	r5,r3
   22ba4:	18c00044 	addi	r3,r3,1
   22ba8:	313ffb2e 	bgeu	r6,r4,22b98 <__alt_data_end+0xfffe6678>
   22bac:	81401115 	stw	r5,68(r16)
   22bb0:	8009883a 	mov	r4,r16
   22bb4:	00258840 	call	25884 <_Balloc>
   22bb8:	d8800715 	stw	r2,28(sp)
   22bbc:	80801015 	stw	r2,64(r16)
   22bc0:	00800384 	movi	r2,14
   22bc4:	1440fd36 	bltu	r2,r17,22fbc <_dtoa_r+0x774>
   22bc8:	a000fc26 	beq	r20,zero,22fbc <_dtoa_r+0x774>
   22bcc:	d8800517 	ldw	r2,20(sp)
   22bd0:	0083b90e 	bge	zero,r2,23ab8 <_dtoa_r+0x1270>
   22bd4:	d8c00517 	ldw	r3,20(sp)
   22bd8:	108003cc 	andi	r2,r2,15
   22bdc:	100490fa 	slli	r2,r2,3
   22be0:	182fd13a 	srai	r23,r3,4
   22be4:	00c000f4 	movhi	r3,3
   22be8:	18fffc04 	addi	r3,r3,-16
   22bec:	1885883a 	add	r2,r3,r2
   22bf0:	b8c0040c 	andi	r3,r23,16
   22bf4:	12c00017 	ldw	r11,0(r2)
   22bf8:	12800117 	ldw	r10,4(r2)
   22bfc:	18039726 	beq	r3,zero,23a5c <_dtoa_r+0x1214>
   22c00:	008000f4 	movhi	r2,3
   22c04:	10bff204 	addi	r2,r2,-56
   22c08:	11800817 	ldw	r6,32(r2)
   22c0c:	11c00917 	ldw	r7,36(r2)
   22c10:	9009883a 	mov	r4,r18
   22c14:	980b883a 	mov	r5,r19
   22c18:	da801615 	stw	r10,88(sp)
   22c1c:	dac01515 	stw	r11,84(sp)
   22c20:	002aca00 	call	2aca0 <__divdf3>
   22c24:	da801617 	ldw	r10,88(sp)
   22c28:	dac01517 	ldw	r11,84(sp)
   22c2c:	bdc003cc 	andi	r23,r23,15
   22c30:	044000c4 	movi	r17,3
   22c34:	d8800e15 	stw	r2,56(sp)
   22c38:	182b883a 	mov	r21,r3
   22c3c:	b8001126 	beq	r23,zero,22c84 <_dtoa_r+0x43c>
   22c40:	050000f4 	movhi	r20,3
   22c44:	a53ff204 	addi	r20,r20,-56
   22c48:	5805883a 	mov	r2,r11
   22c4c:	5007883a 	mov	r3,r10
   22c50:	b980004c 	andi	r6,r23,1
   22c54:	1009883a 	mov	r4,r2
   22c58:	b82fd07a 	srai	r23,r23,1
   22c5c:	180b883a 	mov	r5,r3
   22c60:	30000426 	beq	r6,zero,22c74 <_dtoa_r+0x42c>
   22c64:	a1800017 	ldw	r6,0(r20)
   22c68:	a1c00117 	ldw	r7,4(r20)
   22c6c:	8c400044 	addi	r17,r17,1
   22c70:	002b8640 	call	2b864 <__muldf3>
   22c74:	a5000204 	addi	r20,r20,8
   22c78:	b83ff51e 	bne	r23,zero,22c50 <__alt_data_end+0xfffe6730>
   22c7c:	1017883a 	mov	r11,r2
   22c80:	1815883a 	mov	r10,r3
   22c84:	d9000e17 	ldw	r4,56(sp)
   22c88:	a80b883a 	mov	r5,r21
   22c8c:	580d883a 	mov	r6,r11
   22c90:	500f883a 	mov	r7,r10
   22c94:	002aca00 	call	2aca0 <__divdf3>
   22c98:	1029883a 	mov	r20,r2
   22c9c:	182b883a 	mov	r21,r3
   22ca0:	d9800c17 	ldw	r6,48(sp)
   22ca4:	30000626 	beq	r6,zero,22cc0 <_dtoa_r+0x478>
   22ca8:	a009883a 	mov	r4,r20
   22cac:	a80b883a 	mov	r5,r21
   22cb0:	000d883a 	mov	r6,zero
   22cb4:	01cffc34 	movhi	r7,16368
   22cb8:	002b7840 	call	2b784 <__ledf2>
   22cbc:	10043216 	blt	r2,zero,23d88 <_dtoa_r+0x1540>
   22cc0:	8809883a 	mov	r4,r17
   22cc4:	002ca280 	call	2ca28 <__floatsidf>
   22cc8:	1009883a 	mov	r4,r2
   22ccc:	180b883a 	mov	r5,r3
   22cd0:	a00d883a 	mov	r6,r20
   22cd4:	a80f883a 	mov	r7,r21
   22cd8:	002b8640 	call	2b864 <__muldf3>
   22cdc:	000d883a 	mov	r6,zero
   22ce0:	1009883a 	mov	r4,r2
   22ce4:	180b883a 	mov	r5,r3
   22ce8:	01d00734 	movhi	r7,16412
   22cec:	002a4040 	call	2a404 <__adddf3>
   22cf0:	1023883a 	mov	r17,r2
   22cf4:	d9800617 	ldw	r6,24(sp)
   22cf8:	00bf3034 	movhi	r2,64704
   22cfc:	1885883a 	add	r2,r3,r2
   22d00:	d8800e15 	stw	r2,56(sp)
   22d04:	30032e26 	beq	r6,zero,239c0 <_dtoa_r+0x1178>
   22d08:	d8c00517 	ldw	r3,20(sp)
   22d0c:	da800617 	ldw	r10,24(sp)
   22d10:	d8c01215 	stw	r3,72(sp)
   22d14:	d9000b17 	ldw	r4,44(sp)
   22d18:	2003b026 	beq	r4,zero,23bdc <_dtoa_r+0x1394>
   22d1c:	50bfffc4 	addi	r2,r10,-1
   22d20:	100490fa 	slli	r2,r2,3
   22d24:	00c000f4 	movhi	r3,3
   22d28:	18fffc04 	addi	r3,r3,-16
   22d2c:	1885883a 	add	r2,r3,r2
   22d30:	11800017 	ldw	r6,0(r2)
   22d34:	11c00117 	ldw	r7,4(r2)
   22d38:	d8800717 	ldw	r2,28(sp)
   22d3c:	0009883a 	mov	r4,zero
   22d40:	014ff834 	movhi	r5,16352
   22d44:	da801615 	stw	r10,88(sp)
   22d48:	15c00044 	addi	r23,r2,1
   22d4c:	002aca00 	call	2aca0 <__divdf3>
   22d50:	d9c00e17 	ldw	r7,56(sp)
   22d54:	880d883a 	mov	r6,r17
   22d58:	1009883a 	mov	r4,r2
   22d5c:	180b883a 	mov	r5,r3
   22d60:	002c0d00 	call	2c0d0 <__subdf3>
   22d64:	a80b883a 	mov	r5,r21
   22d68:	a009883a 	mov	r4,r20
   22d6c:	d8c01015 	stw	r3,64(sp)
   22d70:	d8800e15 	stw	r2,56(sp)
   22d74:	002c9a00 	call	2c9a0 <__fixdfsi>
   22d78:	1009883a 	mov	r4,r2
   22d7c:	d8801715 	stw	r2,92(sp)
   22d80:	002ca280 	call	2ca28 <__floatsidf>
   22d84:	a009883a 	mov	r4,r20
   22d88:	a80b883a 	mov	r5,r21
   22d8c:	100d883a 	mov	r6,r2
   22d90:	180f883a 	mov	r7,r3
   22d94:	002c0d00 	call	2c0d0 <__subdf3>
   22d98:	da001717 	ldw	r8,92(sp)
   22d9c:	1829883a 	mov	r20,r3
   22da0:	d8c00717 	ldw	r3,28(sp)
   22da4:	d9000e17 	ldw	r4,56(sp)
   22da8:	d9401017 	ldw	r5,64(sp)
   22dac:	42000c04 	addi	r8,r8,48
   22db0:	1023883a 	mov	r17,r2
   22db4:	1a000005 	stb	r8,0(r3)
   22db8:	880d883a 	mov	r6,r17
   22dbc:	a00f883a 	mov	r7,r20
   22dc0:	402b883a 	mov	r21,r8
   22dc4:	002b6a40 	call	2b6a4 <__gedf2>
   22dc8:	00844516 	blt	zero,r2,23ee0 <_dtoa_r+0x1698>
   22dcc:	0009883a 	mov	r4,zero
   22dd0:	014ffc34 	movhi	r5,16368
   22dd4:	880d883a 	mov	r6,r17
   22dd8:	a00f883a 	mov	r7,r20
   22ddc:	002c0d00 	call	2c0d0 <__subdf3>
   22de0:	d9000e17 	ldw	r4,56(sp)
   22de4:	d9401017 	ldw	r5,64(sp)
   22de8:	100d883a 	mov	r6,r2
   22dec:	180f883a 	mov	r7,r3
   22df0:	002b6a40 	call	2b6a4 <__gedf2>
   22df4:	da801617 	ldw	r10,88(sp)
   22df8:	00843616 	blt	zero,r2,23ed4 <_dtoa_r+0x168c>
   22dfc:	00800044 	movi	r2,1
   22e00:	12806e0e 	bge	r2,r10,22fbc <_dtoa_r+0x774>
   22e04:	d9000717 	ldw	r4,28(sp)
   22e08:	dd801315 	stw	r22,76(sp)
   22e0c:	dc001115 	stw	r16,68(sp)
   22e10:	2295883a 	add	r10,r4,r10
   22e14:	dcc01415 	stw	r19,80(sp)
   22e18:	502d883a 	mov	r22,r10
   22e1c:	dcc01017 	ldw	r19,64(sp)
   22e20:	b821883a 	mov	r16,r23
   22e24:	dc801015 	stw	r18,64(sp)
   22e28:	dc800e17 	ldw	r18,56(sp)
   22e2c:	00000906 	br	22e54 <_dtoa_r+0x60c>
   22e30:	002c0d00 	call	2c0d0 <__subdf3>
   22e34:	1009883a 	mov	r4,r2
   22e38:	180b883a 	mov	r5,r3
   22e3c:	900d883a 	mov	r6,r18
   22e40:	980f883a 	mov	r7,r19
   22e44:	002b7840 	call	2b784 <__ledf2>
   22e48:	10040e16 	blt	r2,zero,23e84 <_dtoa_r+0x163c>
   22e4c:	b821883a 	mov	r16,r23
   22e50:	bd841026 	beq	r23,r22,23e94 <_dtoa_r+0x164c>
   22e54:	9009883a 	mov	r4,r18
   22e58:	980b883a 	mov	r5,r19
   22e5c:	000d883a 	mov	r6,zero
   22e60:	01d00934 	movhi	r7,16420
   22e64:	002b8640 	call	2b864 <__muldf3>
   22e68:	000d883a 	mov	r6,zero
   22e6c:	01d00934 	movhi	r7,16420
   22e70:	8809883a 	mov	r4,r17
   22e74:	a00b883a 	mov	r5,r20
   22e78:	1025883a 	mov	r18,r2
   22e7c:	1827883a 	mov	r19,r3
   22e80:	002b8640 	call	2b864 <__muldf3>
   22e84:	180b883a 	mov	r5,r3
   22e88:	1009883a 	mov	r4,r2
   22e8c:	1823883a 	mov	r17,r3
   22e90:	1029883a 	mov	r20,r2
   22e94:	002c9a00 	call	2c9a0 <__fixdfsi>
   22e98:	1009883a 	mov	r4,r2
   22e9c:	102b883a 	mov	r21,r2
   22ea0:	002ca280 	call	2ca28 <__floatsidf>
   22ea4:	a009883a 	mov	r4,r20
   22ea8:	880b883a 	mov	r5,r17
   22eac:	100d883a 	mov	r6,r2
   22eb0:	180f883a 	mov	r7,r3
   22eb4:	002c0d00 	call	2c0d0 <__subdf3>
   22eb8:	ad400c04 	addi	r21,r21,48
   22ebc:	1009883a 	mov	r4,r2
   22ec0:	180b883a 	mov	r5,r3
   22ec4:	900d883a 	mov	r6,r18
   22ec8:	980f883a 	mov	r7,r19
   22ecc:	85400005 	stb	r21,0(r16)
   22ed0:	1023883a 	mov	r17,r2
   22ed4:	1829883a 	mov	r20,r3
   22ed8:	002b7840 	call	2b784 <__ledf2>
   22edc:	bdc00044 	addi	r23,r23,1
   22ee0:	0009883a 	mov	r4,zero
   22ee4:	014ffc34 	movhi	r5,16368
   22ee8:	880d883a 	mov	r6,r17
   22eec:	a00f883a 	mov	r7,r20
   22ef0:	103fcf0e 	bge	r2,zero,22e30 <__alt_data_end+0xfffe6910>
   22ef4:	d9801217 	ldw	r6,72(sp)
   22ef8:	dc001117 	ldw	r16,68(sp)
   22efc:	d9800515 	stw	r6,20(sp)
   22f00:	8009883a 	mov	r4,r16
   22f04:	e00b883a 	mov	r5,fp
   22f08:	002592c0 	call	2592c <_Bfree>
   22f0c:	d8c00517 	ldw	r3,20(sp)
   22f10:	d9002317 	ldw	r4,140(sp)
   22f14:	d9802517 	ldw	r6,148(sp)
   22f18:	b8000005 	stb	zero,0(r23)
   22f1c:	18800044 	addi	r2,r3,1
   22f20:	20800015 	stw	r2,0(r4)
   22f24:	30027226 	beq	r6,zero,238f0 <_dtoa_r+0x10a8>
   22f28:	35c00015 	stw	r23,0(r6)
   22f2c:	d8800717 	ldw	r2,28(sp)
   22f30:	003e7406 	br	22904 <__alt_data_end+0xfffe63e4>
   22f34:	00800434 	movhi	r2,16
   22f38:	10bfffc4 	addi	r2,r2,-1
   22f3c:	a8aa703a 	and	r21,r21,r2
   22f40:	a83e801e 	bne	r21,zero,22944 <__alt_data_end+0xfffe6424>
   22f44:	008000f4 	movhi	r2,3
   22f48:	10bfdd04 	addi	r2,r2,-140
   22f4c:	003e7f06 	br	2294c <__alt_data_end+0xfffe642c>
   22f50:	10c00204 	addi	r3,r2,8
   22f54:	003e8206 	br	22960 <__alt_data_end+0xfffe6440>
   22f58:	01400434 	movhi	r5,16
   22f5c:	297fffc4 	addi	r5,r5,-1
   22f60:	994a703a 	and	r5,r19,r5
   22f64:	9009883a 	mov	r4,r18
   22f68:	8c7f0044 	addi	r17,r17,-1023
   22f6c:	294ffc34 	orhi	r5,r5,16368
   22f70:	dd000217 	ldw	r20,8(sp)
   22f74:	d8000f15 	stw	zero,60(sp)
   22f78:	003e9f06 	br	229f8 <__alt_data_end+0xfffe64d8>
   22f7c:	008000f4 	movhi	r2,3
   22f80:	10bfd404 	addi	r2,r2,-176
   22f84:	003e5f06 	br	22904 <__alt_data_end+0xfffe63e4>
   22f88:	80001115 	stw	zero,68(r16)
   22f8c:	8009883a 	mov	r4,r16
   22f90:	000b883a 	mov	r5,zero
   22f94:	00258840 	call	25884 <_Balloc>
   22f98:	01bfffc4 	movi	r6,-1
   22f9c:	d8800715 	stw	r2,28(sp)
   22fa0:	80801015 	stw	r2,64(r16)
   22fa4:	00800044 	movi	r2,1
   22fa8:	d9800615 	stw	r6,24(sp)
   22fac:	d8800b15 	stw	r2,44(sp)
   22fb0:	d8002215 	stw	zero,136(sp)
   22fb4:	d9800d15 	stw	r6,52(sp)
   22fb8:	d8000315 	stw	zero,12(sp)
   22fbc:	d8800117 	ldw	r2,4(sp)
   22fc0:	10008e16 	blt	r2,zero,231fc <_dtoa_r+0x9b4>
   22fc4:	d9000517 	ldw	r4,20(sp)
   22fc8:	00c00384 	movi	r3,14
   22fcc:	19008b16 	blt	r3,r4,231fc <_dtoa_r+0x9b4>
   22fd0:	200490fa 	slli	r2,r4,3
   22fd4:	00c000f4 	movhi	r3,3
   22fd8:	d9802217 	ldw	r6,136(sp)
   22fdc:	18fffc04 	addi	r3,r3,-16
   22fe0:	1885883a 	add	r2,r3,r2
   22fe4:	14400017 	ldw	r17,0(r2)
   22fe8:	15000117 	ldw	r20,4(r2)
   22fec:	3001c716 	blt	r6,zero,2370c <_dtoa_r+0xec4>
   22ff0:	880d883a 	mov	r6,r17
   22ff4:	a00f883a 	mov	r7,r20
   22ff8:	9009883a 	mov	r4,r18
   22ffc:	980b883a 	mov	r5,r19
   23000:	002aca00 	call	2aca0 <__divdf3>
   23004:	180b883a 	mov	r5,r3
   23008:	1009883a 	mov	r4,r2
   2300c:	002c9a00 	call	2c9a0 <__fixdfsi>
   23010:	1009883a 	mov	r4,r2
   23014:	102d883a 	mov	r22,r2
   23018:	002ca280 	call	2ca28 <__floatsidf>
   2301c:	1009883a 	mov	r4,r2
   23020:	180b883a 	mov	r5,r3
   23024:	880d883a 	mov	r6,r17
   23028:	a00f883a 	mov	r7,r20
   2302c:	002b8640 	call	2b864 <__muldf3>
   23030:	9009883a 	mov	r4,r18
   23034:	980b883a 	mov	r5,r19
   23038:	100d883a 	mov	r6,r2
   2303c:	180f883a 	mov	r7,r3
   23040:	002c0d00 	call	2c0d0 <__subdf3>
   23044:	d9000717 	ldw	r4,28(sp)
   23048:	d9800617 	ldw	r6,24(sp)
   2304c:	180b883a 	mov	r5,r3
   23050:	b0c00c04 	addi	r3,r22,48
   23054:	20c00005 	stb	r3,0(r4)
   23058:	25c00044 	addi	r23,r4,1
   2305c:	01000044 	movi	r4,1
   23060:	1011883a 	mov	r8,r2
   23064:	2807883a 	mov	r3,r5
   23068:	31003d26 	beq	r6,r4,23160 <_dtoa_r+0x918>
   2306c:	000d883a 	mov	r6,zero
   23070:	01d00934 	movhi	r7,16420
   23074:	1009883a 	mov	r4,r2
   23078:	002b8640 	call	2b864 <__muldf3>
   2307c:	1009883a 	mov	r4,r2
   23080:	180b883a 	mov	r5,r3
   23084:	000d883a 	mov	r6,zero
   23088:	000f883a 	mov	r7,zero
   2308c:	1027883a 	mov	r19,r2
   23090:	182b883a 	mov	r21,r3
   23094:	002b6200 	call	2b620 <__eqdf2>
   23098:	103f9926 	beq	r2,zero,22f00 <__alt_data_end+0xfffe69e0>
   2309c:	d8c00617 	ldw	r3,24(sp)
   230a0:	d9000717 	ldw	r4,28(sp)
   230a4:	b825883a 	mov	r18,r23
   230a8:	18bfffc4 	addi	r2,r3,-1
   230ac:	20ad883a 	add	r22,r4,r2
   230b0:	dc000315 	stw	r16,12(sp)
   230b4:	00000a06 	br	230e0 <_dtoa_r+0x898>
   230b8:	002b8640 	call	2b864 <__muldf3>
   230bc:	1009883a 	mov	r4,r2
   230c0:	180b883a 	mov	r5,r3
   230c4:	000d883a 	mov	r6,zero
   230c8:	000f883a 	mov	r7,zero
   230cc:	1027883a 	mov	r19,r2
   230d0:	182b883a 	mov	r21,r3
   230d4:	b825883a 	mov	r18,r23
   230d8:	002b6200 	call	2b620 <__eqdf2>
   230dc:	10022626 	beq	r2,zero,23978 <_dtoa_r+0x1130>
   230e0:	880d883a 	mov	r6,r17
   230e4:	a00f883a 	mov	r7,r20
   230e8:	9809883a 	mov	r4,r19
   230ec:	a80b883a 	mov	r5,r21
   230f0:	002aca00 	call	2aca0 <__divdf3>
   230f4:	180b883a 	mov	r5,r3
   230f8:	1009883a 	mov	r4,r2
   230fc:	002c9a00 	call	2c9a0 <__fixdfsi>
   23100:	1009883a 	mov	r4,r2
   23104:	1021883a 	mov	r16,r2
   23108:	002ca280 	call	2ca28 <__floatsidf>
   2310c:	1009883a 	mov	r4,r2
   23110:	180b883a 	mov	r5,r3
   23114:	880d883a 	mov	r6,r17
   23118:	a00f883a 	mov	r7,r20
   2311c:	002b8640 	call	2b864 <__muldf3>
   23120:	9809883a 	mov	r4,r19
   23124:	a80b883a 	mov	r5,r21
   23128:	100d883a 	mov	r6,r2
   2312c:	180f883a 	mov	r7,r3
   23130:	002c0d00 	call	2c0d0 <__subdf3>
   23134:	82000c04 	addi	r8,r16,48
   23138:	92000005 	stb	r8,0(r18)
   2313c:	1009883a 	mov	r4,r2
   23140:	180b883a 	mov	r5,r3
   23144:	000d883a 	mov	r6,zero
   23148:	01d00934 	movhi	r7,16420
   2314c:	1011883a 	mov	r8,r2
   23150:	bdc00044 	addi	r23,r23,1
   23154:	95bfd81e 	bne	r18,r22,230b8 <__alt_data_end+0xfffe6b98>
   23158:	802d883a 	mov	r22,r16
   2315c:	dc000317 	ldw	r16,12(sp)
   23160:	4009883a 	mov	r4,r8
   23164:	180b883a 	mov	r5,r3
   23168:	400d883a 	mov	r6,r8
   2316c:	180f883a 	mov	r7,r3
   23170:	002a4040 	call	2a404 <__adddf3>
   23174:	8809883a 	mov	r4,r17
   23178:	a00b883a 	mov	r5,r20
   2317c:	100d883a 	mov	r6,r2
   23180:	180f883a 	mov	r7,r3
   23184:	1027883a 	mov	r19,r2
   23188:	1825883a 	mov	r18,r3
   2318c:	002b7840 	call	2b784 <__ledf2>
   23190:	10000816 	blt	r2,zero,231b4 <_dtoa_r+0x96c>
   23194:	8809883a 	mov	r4,r17
   23198:	a00b883a 	mov	r5,r20
   2319c:	980d883a 	mov	r6,r19
   231a0:	900f883a 	mov	r7,r18
   231a4:	002b6200 	call	2b620 <__eqdf2>
   231a8:	103f551e 	bne	r2,zero,22f00 <__alt_data_end+0xfffe69e0>
   231ac:	b580004c 	andi	r22,r22,1
   231b0:	b03f5326 	beq	r22,zero,22f00 <__alt_data_end+0xfffe69e0>
   231b4:	bd7fffc3 	ldbu	r21,-1(r23)
   231b8:	b8bfffc4 	addi	r2,r23,-1
   231bc:	1007883a 	mov	r3,r2
   231c0:	01400e44 	movi	r5,57
   231c4:	d9800717 	ldw	r6,28(sp)
   231c8:	00000506 	br	231e0 <_dtoa_r+0x998>
   231cc:	18ffffc4 	addi	r3,r3,-1
   231d0:	30825e26 	beq	r6,r2,23b4c <_dtoa_r+0x1304>
   231d4:	1d400003 	ldbu	r21,0(r3)
   231d8:	102f883a 	mov	r23,r2
   231dc:	10bfffc4 	addi	r2,r2,-1
   231e0:	a9003fcc 	andi	r4,r21,255
   231e4:	2100201c 	xori	r4,r4,128
   231e8:	213fe004 	addi	r4,r4,-128
   231ec:	217ff726 	beq	r4,r5,231cc <__alt_data_end+0xfffe6cac>
   231f0:	aa000044 	addi	r8,r21,1
   231f4:	12000005 	stb	r8,0(r2)
   231f8:	003f4106 	br	22f00 <__alt_data_end+0xfffe69e0>
   231fc:	d8c00b17 	ldw	r3,44(sp)
   23200:	18006726 	beq	r3,zero,233a0 <_dtoa_r+0xb58>
   23204:	d9000317 	ldw	r4,12(sp)
   23208:	00c00044 	movi	r3,1
   2320c:	19016a0e 	bge	r3,r4,237b8 <_dtoa_r+0xf70>
   23210:	d8800617 	ldw	r2,24(sp)
   23214:	d8c00917 	ldw	r3,36(sp)
   23218:	157fffc4 	addi	r21,r2,-1
   2321c:	1d420716 	blt	r3,r21,23a3c <_dtoa_r+0x11f4>
   23220:	1d6bc83a 	sub	r21,r3,r21
   23224:	d8800617 	ldw	r2,24(sp)
   23228:	1002c716 	blt	r2,zero,23d48 <_dtoa_r+0x1500>
   2322c:	dd000817 	ldw	r20,32(sp)
   23230:	d8800617 	ldw	r2,24(sp)
   23234:	d9800817 	ldw	r6,32(sp)
   23238:	8009883a 	mov	r4,r16
   2323c:	01400044 	movi	r5,1
   23240:	308d883a 	add	r6,r6,r2
   23244:	d9800815 	stw	r6,32(sp)
   23248:	b0ad883a 	add	r22,r22,r2
   2324c:	0025cac0 	call	25cac <__i2b>
   23250:	1023883a 	mov	r17,r2
   23254:	a0000826 	beq	r20,zero,23278 <_dtoa_r+0xa30>
   23258:	0580070e 	bge	zero,r22,23278 <_dtoa_r+0xa30>
   2325c:	b005883a 	mov	r2,r22
   23260:	a5812016 	blt	r20,r22,236e4 <_dtoa_r+0xe9c>
   23264:	d8c00817 	ldw	r3,32(sp)
   23268:	a0a9c83a 	sub	r20,r20,r2
   2326c:	b0adc83a 	sub	r22,r22,r2
   23270:	1887c83a 	sub	r3,r3,r2
   23274:	d8c00815 	stw	r3,32(sp)
   23278:	d9000917 	ldw	r4,36(sp)
   2327c:	0100140e 	bge	zero,r4,232d0 <_dtoa_r+0xa88>
   23280:	d9800b17 	ldw	r6,44(sp)
   23284:	3001e526 	beq	r6,zero,23a1c <_dtoa_r+0x11d4>
   23288:	05400e0e 	bge	zero,r21,232c4 <_dtoa_r+0xa7c>
   2328c:	880b883a 	mov	r5,r17
   23290:	8009883a 	mov	r4,r16
   23294:	a80d883a 	mov	r6,r21
   23298:	0025f780 	call	25f78 <__pow5mult>
   2329c:	e00d883a 	mov	r6,fp
   232a0:	8009883a 	mov	r4,r16
   232a4:	100b883a 	mov	r5,r2
   232a8:	1023883a 	mov	r17,r2
   232ac:	0025ce80 	call	25ce8 <__multiply>
   232b0:	102f883a 	mov	r23,r2
   232b4:	e00b883a 	mov	r5,fp
   232b8:	8009883a 	mov	r4,r16
   232bc:	002592c0 	call	2592c <_Bfree>
   232c0:	b839883a 	mov	fp,r23
   232c4:	d8800917 	ldw	r2,36(sp)
   232c8:	154dc83a 	sub	r6,r2,r21
   232cc:	3001281e 	bne	r6,zero,23770 <_dtoa_r+0xf28>
   232d0:	05c00044 	movi	r23,1
   232d4:	8009883a 	mov	r4,r16
   232d8:	b80b883a 	mov	r5,r23
   232dc:	0025cac0 	call	25cac <__i2b>
   232e0:	d8c00a17 	ldw	r3,40(sp)
   232e4:	102b883a 	mov	r21,r2
   232e8:	00c0310e 	bge	zero,r3,233b0 <_dtoa_r+0xb68>
   232ec:	8009883a 	mov	r4,r16
   232f0:	100b883a 	mov	r5,r2
   232f4:	180d883a 	mov	r6,r3
   232f8:	0025f780 	call	25f78 <__pow5mult>
   232fc:	d9000317 	ldw	r4,12(sp)
   23300:	102b883a 	mov	r21,r2
   23304:	b9011f0e 	bge	r23,r4,23784 <_dtoa_r+0xf3c>
   23308:	0027883a 	mov	r19,zero
   2330c:	a8800417 	ldw	r2,16(r21)
   23310:	10800104 	addi	r2,r2,4
   23314:	1085883a 	add	r2,r2,r2
   23318:	1085883a 	add	r2,r2,r2
   2331c:	a885883a 	add	r2,r21,r2
   23320:	11000017 	ldw	r4,0(r2)
   23324:	0025b940 	call	25b94 <__hi0bits>
   23328:	00c00804 	movi	r3,32
   2332c:	1885c83a 	sub	r2,r3,r2
   23330:	00002506 	br	233c8 <_dtoa_r+0xb80>
   23334:	01800044 	movi	r6,1
   23338:	d9800c15 	stw	r6,48(sp)
   2333c:	003dec06 	br	22af0 <__alt_data_end+0xfffe65d0>
   23340:	d8c00817 	ldw	r3,32(sp)
   23344:	d9000517 	ldw	r4,20(sp)
   23348:	d8000a15 	stw	zero,40(sp)
   2334c:	1907c83a 	sub	r3,r3,r4
   23350:	010dc83a 	sub	r6,zero,r4
   23354:	d8c00815 	stw	r3,32(sp)
   23358:	d9800915 	stw	r6,36(sp)
   2335c:	003ded06 	br	22b14 <__alt_data_end+0xfffe65f4>
   23360:	05adc83a 	sub	r22,zero,r22
   23364:	dd800815 	stw	r22,32(sp)
   23368:	002d883a 	mov	r22,zero
   2336c:	003de406 	br	22b00 <__alt_data_end+0xfffe65e0>
   23370:	d9000517 	ldw	r4,20(sp)
   23374:	002ca280 	call	2ca28 <__floatsidf>
   23378:	1009883a 	mov	r4,r2
   2337c:	180b883a 	mov	r5,r3
   23380:	b00d883a 	mov	r6,r22
   23384:	a80f883a 	mov	r7,r21
   23388:	002b6200 	call	2b620 <__eqdf2>
   2338c:	103dc726 	beq	r2,zero,22aac <__alt_data_end+0xfffe658c>
   23390:	d8800517 	ldw	r2,20(sp)
   23394:	10bfffc4 	addi	r2,r2,-1
   23398:	d8800515 	stw	r2,20(sp)
   2339c:	003dc306 	br	22aac <__alt_data_end+0xfffe658c>
   233a0:	dd400917 	ldw	r21,36(sp)
   233a4:	dd000817 	ldw	r20,32(sp)
   233a8:	0023883a 	mov	r17,zero
   233ac:	003fa906 	br	23254 <__alt_data_end+0xfffe6d34>
   233b0:	d9800317 	ldw	r6,12(sp)
   233b4:	b981670e 	bge	r23,r6,23954 <_dtoa_r+0x110c>
   233b8:	0027883a 	mov	r19,zero
   233bc:	d8c00a17 	ldw	r3,40(sp)
   233c0:	183fd21e 	bne	r3,zero,2330c <__alt_data_end+0xfffe6dec>
   233c4:	00800044 	movi	r2,1
   233c8:	1585883a 	add	r2,r2,r22
   233cc:	108007cc 	andi	r2,r2,31
   233d0:	10005f26 	beq	r2,zero,23550 <_dtoa_r+0xd08>
   233d4:	00c00804 	movi	r3,32
   233d8:	1887c83a 	sub	r3,r3,r2
   233dc:	01000104 	movi	r4,4
   233e0:	20c2dd0e 	bge	r4,r3,23f58 <_dtoa_r+0x1710>
   233e4:	d9000817 	ldw	r4,32(sp)
   233e8:	00c00704 	movi	r3,28
   233ec:	1885c83a 	sub	r2,r3,r2
   233f0:	2089883a 	add	r4,r4,r2
   233f4:	d9000815 	stw	r4,32(sp)
   233f8:	a0a9883a 	add	r20,r20,r2
   233fc:	b0ad883a 	add	r22,r22,r2
   23400:	d8800817 	ldw	r2,32(sp)
   23404:	0080050e 	bge	zero,r2,2341c <_dtoa_r+0xbd4>
   23408:	e00b883a 	mov	r5,fp
   2340c:	8009883a 	mov	r4,r16
   23410:	100d883a 	mov	r6,r2
   23414:	00260b80 	call	260b8 <__lshift>
   23418:	1039883a 	mov	fp,r2
   2341c:	0580050e 	bge	zero,r22,23434 <_dtoa_r+0xbec>
   23420:	a80b883a 	mov	r5,r21
   23424:	8009883a 	mov	r4,r16
   23428:	b00d883a 	mov	r6,r22
   2342c:	00260b80 	call	260b8 <__lshift>
   23430:	102b883a 	mov	r21,r2
   23434:	d8c00c17 	ldw	r3,48(sp)
   23438:	1801161e 	bne	r3,zero,23894 <_dtoa_r+0x104c>
   2343c:	d8c00617 	ldw	r3,24(sp)
   23440:	00c12d0e 	bge	zero,r3,238f8 <_dtoa_r+0x10b0>
   23444:	d8c00b17 	ldw	r3,44(sp)
   23448:	1800571e 	bne	r3,zero,235a8 <_dtoa_r+0xd60>
   2344c:	dc800717 	ldw	r18,28(sp)
   23450:	dcc00617 	ldw	r19,24(sp)
   23454:	9029883a 	mov	r20,r18
   23458:	00000206 	br	23464 <_dtoa_r+0xc1c>
   2345c:	00259540 	call	25954 <__multadd>
   23460:	1039883a 	mov	fp,r2
   23464:	e009883a 	mov	r4,fp
   23468:	a80b883a 	mov	r5,r21
   2346c:	00226200 	call	22620 <quorem>
   23470:	10800c04 	addi	r2,r2,48
   23474:	90800005 	stb	r2,0(r18)
   23478:	94800044 	addi	r18,r18,1
   2347c:	9507c83a 	sub	r3,r18,r20
   23480:	8009883a 	mov	r4,r16
   23484:	e00b883a 	mov	r5,fp
   23488:	01800284 	movi	r6,10
   2348c:	000f883a 	mov	r7,zero
   23490:	1cfff216 	blt	r3,r19,2345c <__alt_data_end+0xfffe6f3c>
   23494:	1011883a 	mov	r8,r2
   23498:	d8800617 	ldw	r2,24(sp)
   2349c:	00822e0e 	bge	zero,r2,23d58 <_dtoa_r+0x1510>
   234a0:	d9000717 	ldw	r4,28(sp)
   234a4:	0025883a 	mov	r18,zero
   234a8:	20af883a 	add	r23,r4,r2
   234ac:	e00b883a 	mov	r5,fp
   234b0:	01800044 	movi	r6,1
   234b4:	8009883a 	mov	r4,r16
   234b8:	da001715 	stw	r8,92(sp)
   234bc:	00260b80 	call	260b8 <__lshift>
   234c0:	1009883a 	mov	r4,r2
   234c4:	a80b883a 	mov	r5,r21
   234c8:	1039883a 	mov	fp,r2
   234cc:	00262000 	call	26200 <__mcmp>
   234d0:	da001717 	ldw	r8,92(sp)
   234d4:	00816e0e 	bge	zero,r2,23a90 <_dtoa_r+0x1248>
   234d8:	b93fffc3 	ldbu	r4,-1(r23)
   234dc:	b8bfffc4 	addi	r2,r23,-1
   234e0:	1007883a 	mov	r3,r2
   234e4:	01800e44 	movi	r6,57
   234e8:	d9c00717 	ldw	r7,28(sp)
   234ec:	00000506 	br	23504 <_dtoa_r+0xcbc>
   234f0:	18ffffc4 	addi	r3,r3,-1
   234f4:	38811926 	beq	r7,r2,2395c <_dtoa_r+0x1114>
   234f8:	19000003 	ldbu	r4,0(r3)
   234fc:	102f883a 	mov	r23,r2
   23500:	10bfffc4 	addi	r2,r2,-1
   23504:	21403fcc 	andi	r5,r4,255
   23508:	2940201c 	xori	r5,r5,128
   2350c:	297fe004 	addi	r5,r5,-128
   23510:	29bff726 	beq	r5,r6,234f0 <__alt_data_end+0xfffe6fd0>
   23514:	21000044 	addi	r4,r4,1
   23518:	11000005 	stb	r4,0(r2)
   2351c:	8009883a 	mov	r4,r16
   23520:	a80b883a 	mov	r5,r21
   23524:	002592c0 	call	2592c <_Bfree>
   23528:	883e7526 	beq	r17,zero,22f00 <__alt_data_end+0xfffe69e0>
   2352c:	90000426 	beq	r18,zero,23540 <_dtoa_r+0xcf8>
   23530:	94400326 	beq	r18,r17,23540 <_dtoa_r+0xcf8>
   23534:	8009883a 	mov	r4,r16
   23538:	900b883a 	mov	r5,r18
   2353c:	002592c0 	call	2592c <_Bfree>
   23540:	8009883a 	mov	r4,r16
   23544:	880b883a 	mov	r5,r17
   23548:	002592c0 	call	2592c <_Bfree>
   2354c:	003e6c06 	br	22f00 <__alt_data_end+0xfffe69e0>
   23550:	00800704 	movi	r2,28
   23554:	d9800817 	ldw	r6,32(sp)
   23558:	a0a9883a 	add	r20,r20,r2
   2355c:	b0ad883a 	add	r22,r22,r2
   23560:	308d883a 	add	r6,r6,r2
   23564:	d9800815 	stw	r6,32(sp)
   23568:	003fa506 	br	23400 <__alt_data_end+0xfffe6ee0>
   2356c:	013efb84 	movi	r4,-1042
   23570:	246bc83a 	sub	r21,r4,r17
   23574:	9548983a 	sll	r4,r18,r21
   23578:	003d1806 	br	229dc <__alt_data_end+0xfffe64bc>
   2357c:	d8000c15 	stw	zero,48(sp)
   23580:	003d5b06 	br	22af0 <__alt_data_end+0xfffe65d0>
   23584:	880b883a 	mov	r5,r17
   23588:	8009883a 	mov	r4,r16
   2358c:	01800284 	movi	r6,10
   23590:	000f883a 	mov	r7,zero
   23594:	00259540 	call	25954 <__multadd>
   23598:	1023883a 	mov	r17,r2
   2359c:	d8800d17 	ldw	r2,52(sp)
   235a0:	0082550e 	bge	zero,r2,23ef8 <_dtoa_r+0x16b0>
   235a4:	d8800615 	stw	r2,24(sp)
   235a8:	0500050e 	bge	zero,r20,235c0 <_dtoa_r+0xd78>
   235ac:	880b883a 	mov	r5,r17
   235b0:	8009883a 	mov	r4,r16
   235b4:	a00d883a 	mov	r6,r20
   235b8:	00260b80 	call	260b8 <__lshift>
   235bc:	1023883a 	mov	r17,r2
   235c0:	98016a1e 	bne	r19,zero,23b6c <_dtoa_r+0x1324>
   235c4:	8829883a 	mov	r20,r17
   235c8:	d9000617 	ldw	r4,24(sp)
   235cc:	dcc00717 	ldw	r19,28(sp)
   235d0:	9480004c 	andi	r18,r18,1
   235d4:	20bfffc4 	addi	r2,r4,-1
   235d8:	9885883a 	add	r2,r19,r2
   235dc:	d8800415 	stw	r2,16(sp)
   235e0:	dc800615 	stw	r18,24(sp)
   235e4:	e009883a 	mov	r4,fp
   235e8:	a80b883a 	mov	r5,r21
   235ec:	00226200 	call	22620 <quorem>
   235f0:	e009883a 	mov	r4,fp
   235f4:	880b883a 	mov	r5,r17
   235f8:	102f883a 	mov	r23,r2
   235fc:	00262000 	call	26200 <__mcmp>
   23600:	8009883a 	mov	r4,r16
   23604:	a80b883a 	mov	r5,r21
   23608:	a00d883a 	mov	r6,r20
   2360c:	102d883a 	mov	r22,r2
   23610:	00262600 	call	26260 <__mdiff>
   23614:	1007883a 	mov	r3,r2
   23618:	10800317 	ldw	r2,12(r2)
   2361c:	bc800c04 	addi	r18,r23,48
   23620:	1000971e 	bne	r2,zero,23880 <_dtoa_r+0x1038>
   23624:	180b883a 	mov	r5,r3
   23628:	e009883a 	mov	r4,fp
   2362c:	d8c01515 	stw	r3,84(sp)
   23630:	00262000 	call	26200 <__mcmp>
   23634:	d8c01517 	ldw	r3,84(sp)
   23638:	8009883a 	mov	r4,r16
   2363c:	d8801515 	stw	r2,84(sp)
   23640:	180b883a 	mov	r5,r3
   23644:	002592c0 	call	2592c <_Bfree>
   23648:	d8801517 	ldw	r2,84(sp)
   2364c:	1000041e 	bne	r2,zero,23660 <_dtoa_r+0xe18>
   23650:	d9800317 	ldw	r6,12(sp)
   23654:	3000021e 	bne	r6,zero,23660 <_dtoa_r+0xe18>
   23658:	d8c00617 	ldw	r3,24(sp)
   2365c:	18007626 	beq	r3,zero,23838 <_dtoa_r+0xff0>
   23660:	b0005b16 	blt	r22,zero,237d0 <_dtoa_r+0xf88>
   23664:	b000041e 	bne	r22,zero,23678 <_dtoa_r+0xe30>
   23668:	d9000317 	ldw	r4,12(sp)
   2366c:	2000021e 	bne	r4,zero,23678 <_dtoa_r+0xe30>
   23670:	d8c00617 	ldw	r3,24(sp)
   23674:	18005626 	beq	r3,zero,237d0 <_dtoa_r+0xf88>
   23678:	00814d16 	blt	zero,r2,23bb0 <_dtoa_r+0x1368>
   2367c:	d8c00417 	ldw	r3,16(sp)
   23680:	9d800044 	addi	r22,r19,1
   23684:	9c800005 	stb	r18,0(r19)
   23688:	b02f883a 	mov	r23,r22
   2368c:	98c14c26 	beq	r19,r3,23bc0 <_dtoa_r+0x1378>
   23690:	e00b883a 	mov	r5,fp
   23694:	8009883a 	mov	r4,r16
   23698:	01800284 	movi	r6,10
   2369c:	000f883a 	mov	r7,zero
   236a0:	00259540 	call	25954 <__multadd>
   236a4:	1039883a 	mov	fp,r2
   236a8:	8d006d26 	beq	r17,r20,23860 <_dtoa_r+0x1018>
   236ac:	880b883a 	mov	r5,r17
   236b0:	01800284 	movi	r6,10
   236b4:	000f883a 	mov	r7,zero
   236b8:	8009883a 	mov	r4,r16
   236bc:	00259540 	call	25954 <__multadd>
   236c0:	a00b883a 	mov	r5,r20
   236c4:	8009883a 	mov	r4,r16
   236c8:	01800284 	movi	r6,10
   236cc:	000f883a 	mov	r7,zero
   236d0:	1023883a 	mov	r17,r2
   236d4:	00259540 	call	25954 <__multadd>
   236d8:	1029883a 	mov	r20,r2
   236dc:	b027883a 	mov	r19,r22
   236e0:	003fc006 	br	235e4 <__alt_data_end+0xfffe70c4>
   236e4:	a005883a 	mov	r2,r20
   236e8:	003ede06 	br	23264 <__alt_data_end+0xfffe6d44>
   236ec:	01000044 	movi	r4,1
   236f0:	d9000b15 	stw	r4,44(sp)
   236f4:	d9802217 	ldw	r6,136(sp)
   236f8:	0180dc0e 	bge	zero,r6,23a6c <_dtoa_r+0x1224>
   236fc:	3023883a 	mov	r17,r6
   23700:	d9800d15 	stw	r6,52(sp)
   23704:	d9800615 	stw	r6,24(sp)
   23708:	003d1e06 	br	22b84 <__alt_data_end+0xfffe6664>
   2370c:	d8800617 	ldw	r2,24(sp)
   23710:	00be3716 	blt	zero,r2,22ff0 <__alt_data_end+0xfffe6ad0>
   23714:	1000be1e 	bne	r2,zero,23a10 <_dtoa_r+0x11c8>
   23718:	8809883a 	mov	r4,r17
   2371c:	a00b883a 	mov	r5,r20
   23720:	000d883a 	mov	r6,zero
   23724:	01d00534 	movhi	r7,16404
   23728:	002b8640 	call	2b864 <__muldf3>
   2372c:	1009883a 	mov	r4,r2
   23730:	180b883a 	mov	r5,r3
   23734:	900d883a 	mov	r6,r18
   23738:	980f883a 	mov	r7,r19
   2373c:	002b6a40 	call	2b6a4 <__gedf2>
   23740:	002b883a 	mov	r21,zero
   23744:	0023883a 	mov	r17,zero
   23748:	10007a16 	blt	r2,zero,23934 <_dtoa_r+0x10ec>
   2374c:	d9002217 	ldw	r4,136(sp)
   23750:	ddc00717 	ldw	r23,28(sp)
   23754:	0108303a 	nor	r4,zero,r4
   23758:	d9000515 	stw	r4,20(sp)
   2375c:	8009883a 	mov	r4,r16
   23760:	a80b883a 	mov	r5,r21
   23764:	002592c0 	call	2592c <_Bfree>
   23768:	883f751e 	bne	r17,zero,23540 <__alt_data_end+0xfffe7020>
   2376c:	003de406 	br	22f00 <__alt_data_end+0xfffe69e0>
   23770:	e00b883a 	mov	r5,fp
   23774:	8009883a 	mov	r4,r16
   23778:	0025f780 	call	25f78 <__pow5mult>
   2377c:	1039883a 	mov	fp,r2
   23780:	003ed306 	br	232d0 <__alt_data_end+0xfffe6db0>
   23784:	903ee01e 	bne	r18,zero,23308 <__alt_data_end+0xfffe6de8>
   23788:	00800434 	movhi	r2,16
   2378c:	10bfffc4 	addi	r2,r2,-1
   23790:	9884703a 	and	r2,r19,r2
   23794:	103f081e 	bne	r2,zero,233b8 <__alt_data_end+0xfffe6e98>
   23798:	9cdffc2c 	andhi	r19,r19,32752
   2379c:	983f0626 	beq	r19,zero,233b8 <__alt_data_end+0xfffe6e98>
   237a0:	d8800817 	ldw	r2,32(sp)
   237a4:	b5800044 	addi	r22,r22,1
   237a8:	04c00044 	movi	r19,1
   237ac:	10800044 	addi	r2,r2,1
   237b0:	d8800815 	stw	r2,32(sp)
   237b4:	003f0106 	br	233bc <__alt_data_end+0xfffe6e9c>
   237b8:	d9800f17 	ldw	r6,60(sp)
   237bc:	30016826 	beq	r6,zero,23d60 <_dtoa_r+0x1518>
   237c0:	10810cc4 	addi	r2,r2,1075
   237c4:	dd400917 	ldw	r21,36(sp)
   237c8:	dd000817 	ldw	r20,32(sp)
   237cc:	003e9906 	br	23234 <__alt_data_end+0xfffe6d14>
   237d0:	9011883a 	mov	r8,r18
   237d4:	4007883a 	mov	r3,r8
   237d8:	e02d883a 	mov	r22,fp
   237dc:	0080100e 	bge	zero,r2,23820 <_dtoa_r+0xfd8>
   237e0:	01800044 	movi	r6,1
   237e4:	8009883a 	mov	r4,r16
   237e8:	e00b883a 	mov	r5,fp
   237ec:	da001515 	stw	r8,84(sp)
   237f0:	da001715 	stw	r8,92(sp)
   237f4:	00260b80 	call	260b8 <__lshift>
   237f8:	1009883a 	mov	r4,r2
   237fc:	a80b883a 	mov	r5,r21
   23800:	102d883a 	mov	r22,r2
   23804:	00262000 	call	26200 <__mcmp>
   23808:	d8c01517 	ldw	r3,84(sp)
   2380c:	da001717 	ldw	r8,92(sp)
   23810:	0081a50e 	bge	zero,r2,23ea8 <_dtoa_r+0x1660>
   23814:	00800e44 	movi	r2,57
   23818:	40817b26 	beq	r8,r2,23e08 <_dtoa_r+0x15c0>
   2381c:	40c00044 	addi	r3,r8,1
   23820:	8825883a 	mov	r18,r17
   23824:	9dc00044 	addi	r23,r19,1
   23828:	98c00005 	stb	r3,0(r19)
   2382c:	a023883a 	mov	r17,r20
   23830:	b039883a 	mov	fp,r22
   23834:	003f3906 	br	2351c <__alt_data_end+0xfffe6ffc>
   23838:	00800e44 	movi	r2,57
   2383c:	9011883a 	mov	r8,r18
   23840:	90817226 	beq	r18,r2,23e0c <_dtoa_r+0x15c4>
   23844:	0580010e 	bge	zero,r22,2384c <_dtoa_r+0x1004>
   23848:	ba000c44 	addi	r8,r23,49
   2384c:	8825883a 	mov	r18,r17
   23850:	9dc00044 	addi	r23,r19,1
   23854:	9a000005 	stb	r8,0(r19)
   23858:	a023883a 	mov	r17,r20
   2385c:	003f2f06 	br	2351c <__alt_data_end+0xfffe6ffc>
   23860:	880b883a 	mov	r5,r17
   23864:	8009883a 	mov	r4,r16
   23868:	01800284 	movi	r6,10
   2386c:	000f883a 	mov	r7,zero
   23870:	00259540 	call	25954 <__multadd>
   23874:	1023883a 	mov	r17,r2
   23878:	1029883a 	mov	r20,r2
   2387c:	003f9706 	br	236dc <__alt_data_end+0xfffe71bc>
   23880:	8009883a 	mov	r4,r16
   23884:	180b883a 	mov	r5,r3
   23888:	002592c0 	call	2592c <_Bfree>
   2388c:	00800044 	movi	r2,1
   23890:	003f7306 	br	23660 <__alt_data_end+0xfffe7140>
   23894:	e009883a 	mov	r4,fp
   23898:	a80b883a 	mov	r5,r21
   2389c:	00262000 	call	26200 <__mcmp>
   238a0:	103ee60e 	bge	r2,zero,2343c <__alt_data_end+0xfffe6f1c>
   238a4:	8009883a 	mov	r4,r16
   238a8:	e00b883a 	mov	r5,fp
   238ac:	01800284 	movi	r6,10
   238b0:	000f883a 	mov	r7,zero
   238b4:	00259540 	call	25954 <__multadd>
   238b8:	d9000517 	ldw	r4,20(sp)
   238bc:	d9800b17 	ldw	r6,44(sp)
   238c0:	1039883a 	mov	fp,r2
   238c4:	213fffc4 	addi	r4,r4,-1
   238c8:	d9000515 	stw	r4,20(sp)
   238cc:	303f2d1e 	bne	r6,zero,23584 <__alt_data_end+0xfffe7064>
   238d0:	d9000d17 	ldw	r4,52(sp)
   238d4:	0101780e 	bge	zero,r4,23eb8 <_dtoa_r+0x1670>
   238d8:	d9000615 	stw	r4,24(sp)
   238dc:	003edb06 	br	2344c <__alt_data_end+0xfffe6f2c>
   238e0:	00800084 	movi	r2,2
   238e4:	30818e1e 	bne	r6,r2,23f20 <_dtoa_r+0x16d8>
   238e8:	d8000b15 	stw	zero,44(sp)
   238ec:	003f8106 	br	236f4 <__alt_data_end+0xfffe71d4>
   238f0:	d8800717 	ldw	r2,28(sp)
   238f4:	003c0306 	br	22904 <__alt_data_end+0xfffe63e4>
   238f8:	d9000317 	ldw	r4,12(sp)
   238fc:	00800084 	movi	r2,2
   23900:	113ed00e 	bge	r2,r4,23444 <__alt_data_end+0xfffe6f24>
   23904:	d8c00617 	ldw	r3,24(sp)
   23908:	183f901e 	bne	r3,zero,2374c <__alt_data_end+0xfffe722c>
   2390c:	a80b883a 	mov	r5,r21
   23910:	8009883a 	mov	r4,r16
   23914:	01800144 	movi	r6,5
   23918:	000f883a 	mov	r7,zero
   2391c:	00259540 	call	25954 <__multadd>
   23920:	e009883a 	mov	r4,fp
   23924:	100b883a 	mov	r5,r2
   23928:	102b883a 	mov	r21,r2
   2392c:	00262000 	call	26200 <__mcmp>
   23930:	00bf860e 	bge	zero,r2,2374c <__alt_data_end+0xfffe722c>
   23934:	d9800717 	ldw	r6,28(sp)
   23938:	00800c44 	movi	r2,49
   2393c:	30800005 	stb	r2,0(r6)
   23940:	d8800517 	ldw	r2,20(sp)
   23944:	35c00044 	addi	r23,r6,1
   23948:	10800044 	addi	r2,r2,1
   2394c:	d8800515 	stw	r2,20(sp)
   23950:	003f8206 	br	2375c <__alt_data_end+0xfffe723c>
   23954:	903e981e 	bne	r18,zero,233b8 <__alt_data_end+0xfffe6e98>
   23958:	003f8b06 	br	23788 <__alt_data_end+0xfffe7268>
   2395c:	d9800517 	ldw	r6,20(sp)
   23960:	d8c00717 	ldw	r3,28(sp)
   23964:	00800c44 	movi	r2,49
   23968:	31800044 	addi	r6,r6,1
   2396c:	d9800515 	stw	r6,20(sp)
   23970:	18800005 	stb	r2,0(r3)
   23974:	003ee906 	br	2351c <__alt_data_end+0xfffe6ffc>
   23978:	dc000317 	ldw	r16,12(sp)
   2397c:	003d6006 	br	22f00 <__alt_data_end+0xfffe69e0>
   23980:	8809883a 	mov	r4,r17
   23984:	002ca280 	call	2ca28 <__floatsidf>
   23988:	a009883a 	mov	r4,r20
   2398c:	a80b883a 	mov	r5,r21
   23990:	100d883a 	mov	r6,r2
   23994:	180f883a 	mov	r7,r3
   23998:	002b8640 	call	2b864 <__muldf3>
   2399c:	1009883a 	mov	r4,r2
   239a0:	180b883a 	mov	r5,r3
   239a4:	000d883a 	mov	r6,zero
   239a8:	01d00734 	movhi	r7,16412
   239ac:	002a4040 	call	2a404 <__adddf3>
   239b0:	1023883a 	mov	r17,r2
   239b4:	00bf3034 	movhi	r2,64704
   239b8:	1885883a 	add	r2,r3,r2
   239bc:	d8800e15 	stw	r2,56(sp)
   239c0:	a009883a 	mov	r4,r20
   239c4:	a80b883a 	mov	r5,r21
   239c8:	000d883a 	mov	r6,zero
   239cc:	01d00534 	movhi	r7,16404
   239d0:	002c0d00 	call	2c0d0 <__subdf3>
   239d4:	d9c00e17 	ldw	r7,56(sp)
   239d8:	1009883a 	mov	r4,r2
   239dc:	180b883a 	mov	r5,r3
   239e0:	880d883a 	mov	r6,r17
   239e4:	102b883a 	mov	r21,r2
   239e8:	1829883a 	mov	r20,r3
   239ec:	002b6a40 	call	2b6a4 <__gedf2>
   239f0:	00807716 	blt	zero,r2,23bd0 <_dtoa_r+0x1388>
   239f4:	d8800e17 	ldw	r2,56(sp)
   239f8:	a809883a 	mov	r4,r21
   239fc:	a00b883a 	mov	r5,r20
   23a00:	11e0003c 	xorhi	r7,r2,32768
   23a04:	880d883a 	mov	r6,r17
   23a08:	002b7840 	call	2b784 <__ledf2>
   23a0c:	103d6b0e 	bge	r2,zero,22fbc <__alt_data_end+0xfffe6a9c>
   23a10:	002b883a 	mov	r21,zero
   23a14:	0023883a 	mov	r17,zero
   23a18:	003f4c06 	br	2374c <__alt_data_end+0xfffe722c>
   23a1c:	d9800917 	ldw	r6,36(sp)
   23a20:	e00b883a 	mov	r5,fp
   23a24:	8009883a 	mov	r4,r16
   23a28:	0025f780 	call	25f78 <__pow5mult>
   23a2c:	1039883a 	mov	fp,r2
   23a30:	003e2706 	br	232d0 <__alt_data_end+0xfffe6db0>
   23a34:	d8000b15 	stw	zero,44(sp)
   23a38:	003c4906 	br	22b60 <__alt_data_end+0xfffe6640>
   23a3c:	d9000917 	ldw	r4,36(sp)
   23a40:	d9800a17 	ldw	r6,40(sp)
   23a44:	dd400915 	stw	r21,36(sp)
   23a48:	a905c83a 	sub	r2,r21,r4
   23a4c:	308d883a 	add	r6,r6,r2
   23a50:	d9800a15 	stw	r6,40(sp)
   23a54:	002b883a 	mov	r21,zero
   23a58:	003df206 	br	23224 <__alt_data_end+0xfffe6d04>
   23a5c:	dc800e15 	stw	r18,56(sp)
   23a60:	982b883a 	mov	r21,r19
   23a64:	04400084 	movi	r17,2
   23a68:	003c7406 	br	22c3c <__alt_data_end+0xfffe671c>
   23a6c:	04400044 	movi	r17,1
   23a70:	dc400d15 	stw	r17,52(sp)
   23a74:	dc400615 	stw	r17,24(sp)
   23a78:	dc402215 	stw	r17,136(sp)
   23a7c:	80001115 	stw	zero,68(r16)
   23a80:	000b883a 	mov	r5,zero
   23a84:	003c4a06 	br	22bb0 <__alt_data_end+0xfffe6690>
   23a88:	3023883a 	mov	r17,r6
   23a8c:	003ffb06 	br	23a7c <__alt_data_end+0xfffe755c>
   23a90:	1000021e 	bne	r2,zero,23a9c <_dtoa_r+0x1254>
   23a94:	4200004c 	andi	r8,r8,1
   23a98:	403e8f1e 	bne	r8,zero,234d8 <__alt_data_end+0xfffe6fb8>
   23a9c:	01000c04 	movi	r4,48
   23aa0:	00000106 	br	23aa8 <_dtoa_r+0x1260>
   23aa4:	102f883a 	mov	r23,r2
   23aa8:	b8bfffc4 	addi	r2,r23,-1
   23aac:	10c00007 	ldb	r3,0(r2)
   23ab0:	193ffc26 	beq	r3,r4,23aa4 <__alt_data_end+0xfffe7584>
   23ab4:	003e9906 	br	2351c <__alt_data_end+0xfffe6ffc>
   23ab8:	d9000517 	ldw	r4,20(sp)
   23abc:	012fc83a 	sub	r23,zero,r4
   23ac0:	b800ad26 	beq	r23,zero,23d78 <_dtoa_r+0x1530>
   23ac4:	b88003cc 	andi	r2,r23,15
   23ac8:	100490fa 	slli	r2,r2,3
   23acc:	00c000f4 	movhi	r3,3
   23ad0:	18fffc04 	addi	r3,r3,-16
   23ad4:	1885883a 	add	r2,r3,r2
   23ad8:	11800017 	ldw	r6,0(r2)
   23adc:	11c00117 	ldw	r7,4(r2)
   23ae0:	b82fd13a 	srai	r23,r23,4
   23ae4:	9009883a 	mov	r4,r18
   23ae8:	980b883a 	mov	r5,r19
   23aec:	002b8640 	call	2b864 <__muldf3>
   23af0:	1029883a 	mov	r20,r2
   23af4:	182b883a 	mov	r21,r3
   23af8:	b800f426 	beq	r23,zero,23ecc <_dtoa_r+0x1684>
   23afc:	020000f4 	movhi	r8,3
   23b00:	423ff204 	addi	r8,r8,-56
   23b04:	8029883a 	mov	r20,r16
   23b08:	04400084 	movi	r17,2
   23b0c:	4021883a 	mov	r16,r8
   23b10:	b980004c 	andi	r6,r23,1
   23b14:	1009883a 	mov	r4,r2
   23b18:	b82fd07a 	srai	r23,r23,1
   23b1c:	180b883a 	mov	r5,r3
   23b20:	30000426 	beq	r6,zero,23b34 <_dtoa_r+0x12ec>
   23b24:	81800017 	ldw	r6,0(r16)
   23b28:	81c00117 	ldw	r7,4(r16)
   23b2c:	8c400044 	addi	r17,r17,1
   23b30:	002b8640 	call	2b864 <__muldf3>
   23b34:	84000204 	addi	r16,r16,8
   23b38:	b83ff51e 	bne	r23,zero,23b10 <__alt_data_end+0xfffe75f0>
   23b3c:	a021883a 	mov	r16,r20
   23b40:	182b883a 	mov	r21,r3
   23b44:	1029883a 	mov	r20,r2
   23b48:	003c5506 	br	22ca0 <__alt_data_end+0xfffe6780>
   23b4c:	d9800517 	ldw	r6,20(sp)
   23b50:	d9000717 	ldw	r4,28(sp)
   23b54:	00c00c04 	movi	r3,48
   23b58:	31800044 	addi	r6,r6,1
   23b5c:	d9800515 	stw	r6,20(sp)
   23b60:	20c00005 	stb	r3,0(r4)
   23b64:	02000c44 	movi	r8,49
   23b68:	003da206 	br	231f4 <__alt_data_end+0xfffe6cd4>
   23b6c:	89400117 	ldw	r5,4(r17)
   23b70:	8009883a 	mov	r4,r16
   23b74:	00258840 	call	25884 <_Balloc>
   23b78:	89800417 	ldw	r6,16(r17)
   23b7c:	11000304 	addi	r4,r2,12
   23b80:	89400304 	addi	r5,r17,12
   23b84:	31800084 	addi	r6,r6,2
   23b88:	318d883a 	add	r6,r6,r6
   23b8c:	318d883a 	add	r6,r6,r6
   23b90:	1027883a 	mov	r19,r2
   23b94:	00256280 	call	25628 <memcpy>
   23b98:	8009883a 	mov	r4,r16
   23b9c:	980b883a 	mov	r5,r19
   23ba0:	01800044 	movi	r6,1
   23ba4:	00260b80 	call	260b8 <__lshift>
   23ba8:	1029883a 	mov	r20,r2
   23bac:	003e8606 	br	235c8 <__alt_data_end+0xfffe70a8>
   23bb0:	00800e44 	movi	r2,57
   23bb4:	90809526 	beq	r18,r2,23e0c <_dtoa_r+0x15c4>
   23bb8:	92000044 	addi	r8,r18,1
   23bbc:	003f2306 	br	2384c <__alt_data_end+0xfffe732c>
   23bc0:	9011883a 	mov	r8,r18
   23bc4:	8825883a 	mov	r18,r17
   23bc8:	a023883a 	mov	r17,r20
   23bcc:	003e3706 	br	234ac <__alt_data_end+0xfffe6f8c>
   23bd0:	002b883a 	mov	r21,zero
   23bd4:	0023883a 	mov	r17,zero
   23bd8:	003f5606 	br	23934 <__alt_data_end+0xfffe7414>
   23bdc:	51bfffc4 	addi	r6,r10,-1
   23be0:	300490fa 	slli	r2,r6,3
   23be4:	00c000f4 	movhi	r3,3
   23be8:	18fffc04 	addi	r3,r3,-16
   23bec:	1885883a 	add	r2,r3,r2
   23bf0:	d9c00e17 	ldw	r7,56(sp)
   23bf4:	11000017 	ldw	r4,0(r2)
   23bf8:	11400117 	ldw	r5,4(r2)
   23bfc:	d8800717 	ldw	r2,28(sp)
   23c00:	d9801015 	stw	r6,64(sp)
   23c04:	880d883a 	mov	r6,r17
   23c08:	da801615 	stw	r10,88(sp)
   23c0c:	15c00044 	addi	r23,r2,1
   23c10:	002b8640 	call	2b864 <__muldf3>
   23c14:	a80b883a 	mov	r5,r21
   23c18:	a009883a 	mov	r4,r20
   23c1c:	d8c01115 	stw	r3,68(sp)
   23c20:	d8800e15 	stw	r2,56(sp)
   23c24:	002c9a00 	call	2c9a0 <__fixdfsi>
   23c28:	1009883a 	mov	r4,r2
   23c2c:	1023883a 	mov	r17,r2
   23c30:	002ca280 	call	2ca28 <__floatsidf>
   23c34:	a009883a 	mov	r4,r20
   23c38:	a80b883a 	mov	r5,r21
   23c3c:	100d883a 	mov	r6,r2
   23c40:	180f883a 	mov	r7,r3
   23c44:	002c0d00 	call	2c0d0 <__subdf3>
   23c48:	1813883a 	mov	r9,r3
   23c4c:	d8c00717 	ldw	r3,28(sp)
   23c50:	8c400c04 	addi	r17,r17,48
   23c54:	1011883a 	mov	r8,r2
   23c58:	1c400005 	stb	r17,0(r3)
   23c5c:	da801617 	ldw	r10,88(sp)
   23c60:	00800044 	movi	r2,1
   23c64:	50802326 	beq	r10,r2,23cf4 <_dtoa_r+0x14ac>
   23c68:	d8800717 	ldw	r2,28(sp)
   23c6c:	b82b883a 	mov	r21,r23
   23c70:	dc001315 	stw	r16,76(sp)
   23c74:	12a9883a 	add	r20,r2,r10
   23c78:	4807883a 	mov	r3,r9
   23c7c:	4005883a 	mov	r2,r8
   23c80:	dc801415 	stw	r18,80(sp)
   23c84:	000d883a 	mov	r6,zero
   23c88:	01d00934 	movhi	r7,16420
   23c8c:	1009883a 	mov	r4,r2
   23c90:	180b883a 	mov	r5,r3
   23c94:	002b8640 	call	2b864 <__muldf3>
   23c98:	180b883a 	mov	r5,r3
   23c9c:	1009883a 	mov	r4,r2
   23ca0:	1821883a 	mov	r16,r3
   23ca4:	1025883a 	mov	r18,r2
   23ca8:	002c9a00 	call	2c9a0 <__fixdfsi>
   23cac:	1009883a 	mov	r4,r2
   23cb0:	1023883a 	mov	r17,r2
   23cb4:	002ca280 	call	2ca28 <__floatsidf>
   23cb8:	9009883a 	mov	r4,r18
   23cbc:	800b883a 	mov	r5,r16
   23cc0:	100d883a 	mov	r6,r2
   23cc4:	180f883a 	mov	r7,r3
   23cc8:	8c400c04 	addi	r17,r17,48
   23ccc:	002c0d00 	call	2c0d0 <__subdf3>
   23cd0:	ad400044 	addi	r21,r21,1
   23cd4:	ac7fffc5 	stb	r17,-1(r21)
   23cd8:	ad3fea1e 	bne	r21,r20,23c84 <__alt_data_end+0xfffe7764>
   23cdc:	1813883a 	mov	r9,r3
   23ce0:	d8c01017 	ldw	r3,64(sp)
   23ce4:	dc001317 	ldw	r16,76(sp)
   23ce8:	dc801417 	ldw	r18,80(sp)
   23cec:	1011883a 	mov	r8,r2
   23cf0:	b8ef883a 	add	r23,r23,r3
   23cf4:	d9000e17 	ldw	r4,56(sp)
   23cf8:	d9401117 	ldw	r5,68(sp)
   23cfc:	000d883a 	mov	r6,zero
   23d00:	01cff834 	movhi	r7,16352
   23d04:	da001715 	stw	r8,92(sp)
   23d08:	da401515 	stw	r9,84(sp)
   23d0c:	002a4040 	call	2a404 <__adddf3>
   23d10:	da001717 	ldw	r8,92(sp)
   23d14:	da401517 	ldw	r9,84(sp)
   23d18:	1009883a 	mov	r4,r2
   23d1c:	400d883a 	mov	r6,r8
   23d20:	480f883a 	mov	r7,r9
   23d24:	180b883a 	mov	r5,r3
   23d28:	002b7840 	call	2b784 <__ledf2>
   23d2c:	da001717 	ldw	r8,92(sp)
   23d30:	da401517 	ldw	r9,84(sp)
   23d34:	10003b0e 	bge	r2,zero,23e24 <_dtoa_r+0x15dc>
   23d38:	d9001217 	ldw	r4,72(sp)
   23d3c:	bd7fffc3 	ldbu	r21,-1(r23)
   23d40:	d9000515 	stw	r4,20(sp)
   23d44:	003d1c06 	br	231b8 <__alt_data_end+0xfffe6c98>
   23d48:	d8c00817 	ldw	r3,32(sp)
   23d4c:	18a9c83a 	sub	r20,r3,r2
   23d50:	0005883a 	mov	r2,zero
   23d54:	003d3706 	br	23234 <__alt_data_end+0xfffe6d14>
   23d58:	00800044 	movi	r2,1
   23d5c:	003dd006 	br	234a0 <__alt_data_end+0xfffe6f80>
   23d60:	d8c00217 	ldw	r3,8(sp)
   23d64:	00800d84 	movi	r2,54
   23d68:	dd400917 	ldw	r21,36(sp)
   23d6c:	10c5c83a 	sub	r2,r2,r3
   23d70:	dd000817 	ldw	r20,32(sp)
   23d74:	003d2f06 	br	23234 <__alt_data_end+0xfffe6d14>
   23d78:	9029883a 	mov	r20,r18
   23d7c:	982b883a 	mov	r21,r19
   23d80:	04400084 	movi	r17,2
   23d84:	003bc606 	br	22ca0 <__alt_data_end+0xfffe6780>
   23d88:	d8800617 	ldw	r2,24(sp)
   23d8c:	103efc26 	beq	r2,zero,23980 <__alt_data_end+0xfffe7460>
   23d90:	d8c00d17 	ldw	r3,52(sp)
   23d94:	00fc890e 	bge	zero,r3,22fbc <__alt_data_end+0xfffe6a9c>
   23d98:	a80b883a 	mov	r5,r21
   23d9c:	a009883a 	mov	r4,r20
   23da0:	000d883a 	mov	r6,zero
   23da4:	01d00934 	movhi	r7,16420
   23da8:	002b8640 	call	2b864 <__muldf3>
   23dac:	89000044 	addi	r4,r17,1
   23db0:	1029883a 	mov	r20,r2
   23db4:	182b883a 	mov	r21,r3
   23db8:	002ca280 	call	2ca28 <__floatsidf>
   23dbc:	a009883a 	mov	r4,r20
   23dc0:	a80b883a 	mov	r5,r21
   23dc4:	100d883a 	mov	r6,r2
   23dc8:	180f883a 	mov	r7,r3
   23dcc:	002b8640 	call	2b864 <__muldf3>
   23dd0:	1009883a 	mov	r4,r2
   23dd4:	180b883a 	mov	r5,r3
   23dd8:	000d883a 	mov	r6,zero
   23ddc:	01d00734 	movhi	r7,16412
   23de0:	002a4040 	call	2a404 <__adddf3>
   23de4:	d9000517 	ldw	r4,20(sp)
   23de8:	1023883a 	mov	r17,r2
   23dec:	00bf3034 	movhi	r2,64704
   23df0:	213fffc4 	addi	r4,r4,-1
   23df4:	1885883a 	add	r2,r3,r2
   23df8:	d9001215 	stw	r4,72(sp)
   23dfc:	d8800e15 	stw	r2,56(sp)
   23e00:	da800d17 	ldw	r10,52(sp)
   23e04:	003bc306 	br	22d14 <__alt_data_end+0xfffe67f4>
   23e08:	b039883a 	mov	fp,r22
   23e0c:	01000e44 	movi	r4,57
   23e10:	8825883a 	mov	r18,r17
   23e14:	9dc00044 	addi	r23,r19,1
   23e18:	99000005 	stb	r4,0(r19)
   23e1c:	a023883a 	mov	r17,r20
   23e20:	003dae06 	br	234dc <__alt_data_end+0xfffe6fbc>
   23e24:	d9800e17 	ldw	r6,56(sp)
   23e28:	d9c01117 	ldw	r7,68(sp)
   23e2c:	0009883a 	mov	r4,zero
   23e30:	014ff834 	movhi	r5,16352
   23e34:	da001715 	stw	r8,92(sp)
   23e38:	da401515 	stw	r9,84(sp)
   23e3c:	002c0d00 	call	2c0d0 <__subdf3>
   23e40:	da001717 	ldw	r8,92(sp)
   23e44:	da401517 	ldw	r9,84(sp)
   23e48:	1009883a 	mov	r4,r2
   23e4c:	180b883a 	mov	r5,r3
   23e50:	400d883a 	mov	r6,r8
   23e54:	480f883a 	mov	r7,r9
   23e58:	002b6a40 	call	2b6a4 <__gedf2>
   23e5c:	00bc570e 	bge	zero,r2,22fbc <__alt_data_end+0xfffe6a9c>
   23e60:	01000c04 	movi	r4,48
   23e64:	00000106 	br	23e6c <_dtoa_r+0x1624>
   23e68:	102f883a 	mov	r23,r2
   23e6c:	b8bfffc4 	addi	r2,r23,-1
   23e70:	10c00007 	ldb	r3,0(r2)
   23e74:	193ffc26 	beq	r3,r4,23e68 <__alt_data_end+0xfffe7948>
   23e78:	d9801217 	ldw	r6,72(sp)
   23e7c:	d9800515 	stw	r6,20(sp)
   23e80:	003c1f06 	br	22f00 <__alt_data_end+0xfffe69e0>
   23e84:	d8801217 	ldw	r2,72(sp)
   23e88:	dc001117 	ldw	r16,68(sp)
   23e8c:	d8800515 	stw	r2,20(sp)
   23e90:	003cc906 	br	231b8 <__alt_data_end+0xfffe6c98>
   23e94:	dd801317 	ldw	r22,76(sp)
   23e98:	dc001117 	ldw	r16,68(sp)
   23e9c:	dcc01417 	ldw	r19,80(sp)
   23ea0:	dc801017 	ldw	r18,64(sp)
   23ea4:	003c4506 	br	22fbc <__alt_data_end+0xfffe6a9c>
   23ea8:	103e5d1e 	bne	r2,zero,23820 <__alt_data_end+0xfffe7300>
   23eac:	4080004c 	andi	r2,r8,1
   23eb0:	103e5b26 	beq	r2,zero,23820 <__alt_data_end+0xfffe7300>
   23eb4:	003e5706 	br	23814 <__alt_data_end+0xfffe72f4>
   23eb8:	d8c00317 	ldw	r3,12(sp)
   23ebc:	00800084 	movi	r2,2
   23ec0:	10c00a16 	blt	r2,r3,23eec <_dtoa_r+0x16a4>
   23ec4:	d9000d17 	ldw	r4,52(sp)
   23ec8:	003e8306 	br	238d8 <__alt_data_end+0xfffe73b8>
   23ecc:	04400084 	movi	r17,2
   23ed0:	003b7306 	br	22ca0 <__alt_data_end+0xfffe6780>
   23ed4:	d9801217 	ldw	r6,72(sp)
   23ed8:	d9800515 	stw	r6,20(sp)
   23edc:	003cb606 	br	231b8 <__alt_data_end+0xfffe6c98>
   23ee0:	d9001217 	ldw	r4,72(sp)
   23ee4:	d9000515 	stw	r4,20(sp)
   23ee8:	003c0506 	br	22f00 <__alt_data_end+0xfffe69e0>
   23eec:	d9800d17 	ldw	r6,52(sp)
   23ef0:	d9800615 	stw	r6,24(sp)
   23ef4:	003e8306 	br	23904 <__alt_data_end+0xfffe73e4>
   23ef8:	d9800317 	ldw	r6,12(sp)
   23efc:	00800084 	movi	r2,2
   23f00:	11800216 	blt	r2,r6,23f0c <_dtoa_r+0x16c4>
   23f04:	d8800d17 	ldw	r2,52(sp)
   23f08:	003da606 	br	235a4 <__alt_data_end+0xfffe7084>
   23f0c:	d8800d17 	ldw	r2,52(sp)
   23f10:	d8800615 	stw	r2,24(sp)
   23f14:	003e7b06 	br	23904 <__alt_data_end+0xfffe73e4>
   23f18:	05000044 	movi	r20,1
   23f1c:	003b0506 	br	22b34 <__alt_data_end+0xfffe6614>
   23f20:	8009883a 	mov	r4,r16
   23f24:	80001115 	stw	zero,68(r16)
   23f28:	000b883a 	mov	r5,zero
   23f2c:	00258840 	call	25884 <_Balloc>
   23f30:	d8800715 	stw	r2,28(sp)
   23f34:	d8c00717 	ldw	r3,28(sp)
   23f38:	00bfffc4 	movi	r2,-1
   23f3c:	01000044 	movi	r4,1
   23f40:	d8800615 	stw	r2,24(sp)
   23f44:	80c01015 	stw	r3,64(r16)
   23f48:	d9000b15 	stw	r4,44(sp)
   23f4c:	d8002215 	stw	zero,136(sp)
   23f50:	d8800d15 	stw	r2,52(sp)
   23f54:	003c1906 	br	22fbc <__alt_data_end+0xfffe6a9c>
   23f58:	193d2926 	beq	r3,r4,23400 <__alt_data_end+0xfffe6ee0>
   23f5c:	00c00f04 	movi	r3,60
   23f60:	1885c83a 	sub	r2,r3,r2
   23f64:	003d7b06 	br	23554 <__alt_data_end+0xfffe7034>
   23f68:	000b883a 	mov	r5,zero
   23f6c:	003b1006 	br	22bb0 <__alt_data_end+0xfffe6690>

00023f70 <_fflush_r>:
   23f70:	defffb04 	addi	sp,sp,-20
   23f74:	dcc00315 	stw	r19,12(sp)
   23f78:	dc000015 	stw	r16,0(sp)
   23f7c:	dfc00415 	stw	ra,16(sp)
   23f80:	dc800215 	stw	r18,8(sp)
   23f84:	dc400115 	stw	r17,4(sp)
   23f88:	2027883a 	mov	r19,r4
   23f8c:	2821883a 	mov	r16,r5
   23f90:	20000226 	beq	r4,zero,23f9c <_fflush_r+0x2c>
   23f94:	20800e17 	ldw	r2,56(r4)
   23f98:	10005326 	beq	r2,zero,240e8 <_fflush_r+0x178>
   23f9c:	8080030b 	ldhu	r2,12(r16)
   23fa0:	10ffffcc 	andi	r3,r2,65535
   23fa4:	18e0001c 	xori	r3,r3,32768
   23fa8:	18e00004 	addi	r3,r3,-32768
   23fac:	18002c26 	beq	r3,zero,24060 <_fflush_r+0xf0>
   23fb0:	10c0020c 	andi	r3,r2,8
   23fb4:	1800321e 	bne	r3,zero,24080 <_fflush_r+0x110>
   23fb8:	80c00117 	ldw	r3,4(r16)
   23fbc:	10820014 	ori	r2,r2,2048
   23fc0:	8080030d 	sth	r2,12(r16)
   23fc4:	00c0570e 	bge	zero,r3,24124 <_fflush_r+0x1b4>
   23fc8:	82000a17 	ldw	r8,40(r16)
   23fcc:	40002426 	beq	r8,zero,24060 <_fflush_r+0xf0>
   23fd0:	9c400017 	ldw	r17,0(r19)
   23fd4:	10c4000c 	andi	r3,r2,4096
   23fd8:	98000015 	stw	zero,0(r19)
   23fdc:	18004626 	beq	r3,zero,240f8 <_fflush_r+0x188>
   23fe0:	81801417 	ldw	r6,80(r16)
   23fe4:	10c0010c 	andi	r3,r2,4
   23fe8:	18000626 	beq	r3,zero,24004 <_fflush_r+0x94>
   23fec:	80c00117 	ldw	r3,4(r16)
   23ff0:	80800c17 	ldw	r2,48(r16)
   23ff4:	30cdc83a 	sub	r6,r6,r3
   23ff8:	10000226 	beq	r2,zero,24004 <_fflush_r+0x94>
   23ffc:	80800f17 	ldw	r2,60(r16)
   24000:	308dc83a 	sub	r6,r6,r2
   24004:	81400717 	ldw	r5,28(r16)
   24008:	9809883a 	mov	r4,r19
   2400c:	000f883a 	mov	r7,zero
   24010:	403ee83a 	callr	r8
   24014:	00ffffc4 	movi	r3,-1
   24018:	10c04526 	beq	r2,r3,24130 <_fflush_r+0x1c0>
   2401c:	80c0030b 	ldhu	r3,12(r16)
   24020:	81000417 	ldw	r4,16(r16)
   24024:	80000115 	stw	zero,4(r16)
   24028:	197dffcc 	andi	r5,r3,63487
   2402c:	8140030d 	sth	r5,12(r16)
   24030:	81000015 	stw	r4,0(r16)
   24034:	18c4000c 	andi	r3,r3,4096
   24038:	18000126 	beq	r3,zero,24040 <_fflush_r+0xd0>
   2403c:	80801415 	stw	r2,80(r16)
   24040:	81400c17 	ldw	r5,48(r16)
   24044:	9c400015 	stw	r17,0(r19)
   24048:	28000526 	beq	r5,zero,24060 <_fflush_r+0xf0>
   2404c:	80801004 	addi	r2,r16,64
   24050:	28800226 	beq	r5,r2,2405c <_fflush_r+0xec>
   24054:	9809883a 	mov	r4,r19
   24058:	00246a00 	call	246a0 <_free_r>
   2405c:	80000c15 	stw	zero,48(r16)
   24060:	0005883a 	mov	r2,zero
   24064:	dfc00417 	ldw	ra,16(sp)
   24068:	dcc00317 	ldw	r19,12(sp)
   2406c:	dc800217 	ldw	r18,8(sp)
   24070:	dc400117 	ldw	r17,4(sp)
   24074:	dc000017 	ldw	r16,0(sp)
   24078:	dec00504 	addi	sp,sp,20
   2407c:	f800283a 	ret
   24080:	84800417 	ldw	r18,16(r16)
   24084:	903ff626 	beq	r18,zero,24060 <__alt_data_end+0xfffe7b40>
   24088:	84400017 	ldw	r17,0(r16)
   2408c:	108000cc 	andi	r2,r2,3
   24090:	84800015 	stw	r18,0(r16)
   24094:	8ca3c83a 	sub	r17,r17,r18
   24098:	10001526 	beq	r2,zero,240f0 <_fflush_r+0x180>
   2409c:	0005883a 	mov	r2,zero
   240a0:	80800215 	stw	r2,8(r16)
   240a4:	04400316 	blt	zero,r17,240b4 <_fflush_r+0x144>
   240a8:	003fed06 	br	24060 <__alt_data_end+0xfffe7b40>
   240ac:	90a5883a 	add	r18,r18,r2
   240b0:	047feb0e 	bge	zero,r17,24060 <__alt_data_end+0xfffe7b40>
   240b4:	80800917 	ldw	r2,36(r16)
   240b8:	81400717 	ldw	r5,28(r16)
   240bc:	880f883a 	mov	r7,r17
   240c0:	900d883a 	mov	r6,r18
   240c4:	9809883a 	mov	r4,r19
   240c8:	103ee83a 	callr	r2
   240cc:	88a3c83a 	sub	r17,r17,r2
   240d0:	00bff616 	blt	zero,r2,240ac <__alt_data_end+0xfffe7b8c>
   240d4:	80c0030b 	ldhu	r3,12(r16)
   240d8:	00bfffc4 	movi	r2,-1
   240dc:	18c01014 	ori	r3,r3,64
   240e0:	80c0030d 	sth	r3,12(r16)
   240e4:	003fdf06 	br	24064 <__alt_data_end+0xfffe7b44>
   240e8:	002452c0 	call	2452c <__sinit>
   240ec:	003fab06 	br	23f9c <__alt_data_end+0xfffe7a7c>
   240f0:	80800517 	ldw	r2,20(r16)
   240f4:	003fea06 	br	240a0 <__alt_data_end+0xfffe7b80>
   240f8:	81400717 	ldw	r5,28(r16)
   240fc:	000d883a 	mov	r6,zero
   24100:	9809883a 	mov	r4,r19
   24104:	01c00044 	movi	r7,1
   24108:	403ee83a 	callr	r8
   2410c:	100d883a 	mov	r6,r2
   24110:	00bfffc4 	movi	r2,-1
   24114:	30801326 	beq	r6,r2,24164 <_fflush_r+0x1f4>
   24118:	8080030b 	ldhu	r2,12(r16)
   2411c:	82000a17 	ldw	r8,40(r16)
   24120:	003fb006 	br	23fe4 <__alt_data_end+0xfffe7ac4>
   24124:	80c00f17 	ldw	r3,60(r16)
   24128:	00ffa716 	blt	zero,r3,23fc8 <__alt_data_end+0xfffe7aa8>
   2412c:	003fcc06 	br	24060 <__alt_data_end+0xfffe7b40>
   24130:	98c00017 	ldw	r3,0(r19)
   24134:	183fb926 	beq	r3,zero,2401c <__alt_data_end+0xfffe7afc>
   24138:	01000744 	movi	r4,29
   2413c:	19000226 	beq	r3,r4,24148 <_fflush_r+0x1d8>
   24140:	01000584 	movi	r4,22
   24144:	1900101e 	bne	r3,r4,24188 <_fflush_r+0x218>
   24148:	8080030b 	ldhu	r2,12(r16)
   2414c:	80c00417 	ldw	r3,16(r16)
   24150:	80000115 	stw	zero,4(r16)
   24154:	10bdffcc 	andi	r2,r2,63487
   24158:	8080030d 	sth	r2,12(r16)
   2415c:	80c00015 	stw	r3,0(r16)
   24160:	003fb706 	br	24040 <__alt_data_end+0xfffe7b20>
   24164:	98800017 	ldw	r2,0(r19)
   24168:	103feb26 	beq	r2,zero,24118 <__alt_data_end+0xfffe7bf8>
   2416c:	00c00744 	movi	r3,29
   24170:	10c00226 	beq	r2,r3,2417c <_fflush_r+0x20c>
   24174:	00c00584 	movi	r3,22
   24178:	10ffd61e 	bne	r2,r3,240d4 <__alt_data_end+0xfffe7bb4>
   2417c:	9c400015 	stw	r17,0(r19)
   24180:	0005883a 	mov	r2,zero
   24184:	003fb706 	br	24064 <__alt_data_end+0xfffe7b44>
   24188:	80c0030b 	ldhu	r3,12(r16)
   2418c:	18c01014 	ori	r3,r3,64
   24190:	80c0030d 	sth	r3,12(r16)
   24194:	003fb306 	br	24064 <__alt_data_end+0xfffe7b44>

00024198 <fflush>:
   24198:	20000526 	beq	r4,zero,241b0 <fflush+0x18>
   2419c:	008000f4 	movhi	r2,3
   241a0:	10876104 	addi	r2,r2,7556
   241a4:	200b883a 	mov	r5,r4
   241a8:	11000017 	ldw	r4,0(r2)
   241ac:	0023f701 	jmpi	23f70 <_fflush_r>
   241b0:	008000f4 	movhi	r2,3
   241b4:	10876004 	addi	r2,r2,7552
   241b8:	11000017 	ldw	r4,0(r2)
   241bc:	014000b4 	movhi	r5,2
   241c0:	294fdc04 	addi	r5,r5,16240
   241c4:	0024a481 	jmpi	24a48 <_fwalk_reent>

000241c8 <__fp_lock>:
   241c8:	0005883a 	mov	r2,zero
   241cc:	f800283a 	ret

000241d0 <__fp_unlock>:
   241d0:	0005883a 	mov	r2,zero
   241d4:	f800283a 	ret

000241d8 <_cleanup_r>:
   241d8:	014000f4 	movhi	r5,3
   241dc:	2960fc04 	addi	r5,r5,-31760
   241e0:	00249901 	jmpi	24990 <_fwalk>

000241e4 <__sinit.part.1>:
   241e4:	defff604 	addi	sp,sp,-40
   241e8:	00c000b4 	movhi	r3,2
   241ec:	dfc00915 	stw	ra,36(sp)
   241f0:	df000815 	stw	fp,32(sp)
   241f4:	ddc00715 	stw	r23,28(sp)
   241f8:	dd800615 	stw	r22,24(sp)
   241fc:	dd400515 	stw	r21,20(sp)
   24200:	dd000415 	stw	r20,16(sp)
   24204:	dcc00315 	stw	r19,12(sp)
   24208:	dc800215 	stw	r18,8(sp)
   2420c:	dc400115 	stw	r17,4(sp)
   24210:	dc000015 	stw	r16,0(sp)
   24214:	18d07604 	addi	r3,r3,16856
   24218:	24000117 	ldw	r16,4(r4)
   2421c:	20c00f15 	stw	r3,60(r4)
   24220:	07000044 	movi	fp,1
   24224:	00c000c4 	movi	r3,3
   24228:	2080bb04 	addi	r2,r4,748
   2422c:	20c0b915 	stw	r3,740(r4)
   24230:	27000e15 	stw	fp,56(r4)
   24234:	2080ba15 	stw	r2,744(r4)
   24238:	2000b815 	stw	zero,736(r4)
   2423c:	05c00204 	movi	r23,8
   24240:	00800104 	movi	r2,4
   24244:	2025883a 	mov	r18,r4
   24248:	b80d883a 	mov	r6,r23
   2424c:	81001704 	addi	r4,r16,92
   24250:	000b883a 	mov	r5,zero
   24254:	80000015 	stw	zero,0(r16)
   24258:	80000115 	stw	zero,4(r16)
   2425c:	80000215 	stw	zero,8(r16)
   24260:	8080030d 	sth	r2,12(r16)
   24264:	80001915 	stw	zero,100(r16)
   24268:	8000038d 	sth	zero,14(r16)
   2426c:	80000415 	stw	zero,16(r16)
   24270:	80000515 	stw	zero,20(r16)
   24274:	80000615 	stw	zero,24(r16)
   24278:	00257600 	call	25760 <memset>
   2427c:	058000b4 	movhi	r22,2
   24280:	94400217 	ldw	r17,8(r18)
   24284:	054000b4 	movhi	r21,2
   24288:	050000b4 	movhi	r20,2
   2428c:	04c000b4 	movhi	r19,2
   24290:	b59a6504 	addi	r22,r22,27028
   24294:	ad5a7c04 	addi	r21,r21,27120
   24298:	a51a9b04 	addi	r20,r20,27244
   2429c:	9cdab204 	addi	r19,r19,27336
   242a0:	85800815 	stw	r22,32(r16)
   242a4:	85400915 	stw	r21,36(r16)
   242a8:	85000a15 	stw	r20,40(r16)
   242ac:	84c00b15 	stw	r19,44(r16)
   242b0:	84000715 	stw	r16,28(r16)
   242b4:	00800284 	movi	r2,10
   242b8:	89001704 	addi	r4,r17,92
   242bc:	b80d883a 	mov	r6,r23
   242c0:	000b883a 	mov	r5,zero
   242c4:	88000015 	stw	zero,0(r17)
   242c8:	88000115 	stw	zero,4(r17)
   242cc:	88000215 	stw	zero,8(r17)
   242d0:	8880030d 	sth	r2,12(r17)
   242d4:	88001915 	stw	zero,100(r17)
   242d8:	8f00038d 	sth	fp,14(r17)
   242dc:	88000415 	stw	zero,16(r17)
   242e0:	88000515 	stw	zero,20(r17)
   242e4:	88000615 	stw	zero,24(r17)
   242e8:	00257600 	call	25760 <memset>
   242ec:	94000317 	ldw	r16,12(r18)
   242f0:	00800484 	movi	r2,18
   242f4:	8c400715 	stw	r17,28(r17)
   242f8:	8d800815 	stw	r22,32(r17)
   242fc:	8d400915 	stw	r21,36(r17)
   24300:	8d000a15 	stw	r20,40(r17)
   24304:	8cc00b15 	stw	r19,44(r17)
   24308:	8080030d 	sth	r2,12(r16)
   2430c:	00800084 	movi	r2,2
   24310:	80000015 	stw	zero,0(r16)
   24314:	80000115 	stw	zero,4(r16)
   24318:	80000215 	stw	zero,8(r16)
   2431c:	80001915 	stw	zero,100(r16)
   24320:	8080038d 	sth	r2,14(r16)
   24324:	80000415 	stw	zero,16(r16)
   24328:	80000515 	stw	zero,20(r16)
   2432c:	80000615 	stw	zero,24(r16)
   24330:	81001704 	addi	r4,r16,92
   24334:	000b883a 	mov	r5,zero
   24338:	b80d883a 	mov	r6,r23
   2433c:	00257600 	call	25760 <memset>
   24340:	84000715 	stw	r16,28(r16)
   24344:	85800815 	stw	r22,32(r16)
   24348:	85400915 	stw	r21,36(r16)
   2434c:	85000a15 	stw	r20,40(r16)
   24350:	84c00b15 	stw	r19,44(r16)
   24354:	dfc00917 	ldw	ra,36(sp)
   24358:	df000817 	ldw	fp,32(sp)
   2435c:	ddc00717 	ldw	r23,28(sp)
   24360:	dd800617 	ldw	r22,24(sp)
   24364:	dd400517 	ldw	r21,20(sp)
   24368:	dd000417 	ldw	r20,16(sp)
   2436c:	dcc00317 	ldw	r19,12(sp)
   24370:	dc800217 	ldw	r18,8(sp)
   24374:	dc400117 	ldw	r17,4(sp)
   24378:	dc000017 	ldw	r16,0(sp)
   2437c:	dec00a04 	addi	sp,sp,40
   24380:	f800283a 	ret

00024384 <__sfmoreglue>:
   24384:	defffc04 	addi	sp,sp,-16
   24388:	dc800215 	stw	r18,8(sp)
   2438c:	2825883a 	mov	r18,r5
   24390:	dc000015 	stw	r16,0(sp)
   24394:	01401a04 	movi	r5,104
   24398:	2021883a 	mov	r16,r4
   2439c:	9009883a 	mov	r4,r18
   243a0:	dfc00315 	stw	ra,12(sp)
   243a4:	dc400115 	stw	r17,4(sp)
   243a8:	002a3dc0 	call	2a3dc <__mulsi3>
   243ac:	8009883a 	mov	r4,r16
   243b0:	11400304 	addi	r5,r2,12
   243b4:	1023883a 	mov	r17,r2
   243b8:	0024d980 	call	24d98 <_malloc_r>
   243bc:	1021883a 	mov	r16,r2
   243c0:	10000726 	beq	r2,zero,243e0 <__sfmoreglue+0x5c>
   243c4:	11000304 	addi	r4,r2,12
   243c8:	10000015 	stw	zero,0(r2)
   243cc:	14800115 	stw	r18,4(r2)
   243d0:	11000215 	stw	r4,8(r2)
   243d4:	000b883a 	mov	r5,zero
   243d8:	880d883a 	mov	r6,r17
   243dc:	00257600 	call	25760 <memset>
   243e0:	8005883a 	mov	r2,r16
   243e4:	dfc00317 	ldw	ra,12(sp)
   243e8:	dc800217 	ldw	r18,8(sp)
   243ec:	dc400117 	ldw	r17,4(sp)
   243f0:	dc000017 	ldw	r16,0(sp)
   243f4:	dec00404 	addi	sp,sp,16
   243f8:	f800283a 	ret

000243fc <__sfp>:
   243fc:	008000f4 	movhi	r2,3
   24400:	defffb04 	addi	sp,sp,-20
   24404:	10876004 	addi	r2,r2,7552
   24408:	dc800215 	stw	r18,8(sp)
   2440c:	14800017 	ldw	r18,0(r2)
   24410:	dcc00315 	stw	r19,12(sp)
   24414:	dfc00415 	stw	ra,16(sp)
   24418:	90800e17 	ldw	r2,56(r18)
   2441c:	dc400115 	stw	r17,4(sp)
   24420:	dc000015 	stw	r16,0(sp)
   24424:	2027883a 	mov	r19,r4
   24428:	1000021e 	bne	r2,zero,24434 <__sfp+0x38>
   2442c:	9009883a 	mov	r4,r18
   24430:	00241e40 	call	241e4 <__sinit.part.1>
   24434:	9480b804 	addi	r18,r18,736
   24438:	047fffc4 	movi	r17,-1
   2443c:	91400117 	ldw	r5,4(r18)
   24440:	94000217 	ldw	r16,8(r18)
   24444:	297fffc4 	addi	r5,r5,-1
   24448:	28000a16 	blt	r5,zero,24474 <__sfp+0x78>
   2444c:	8080030f 	ldh	r2,12(r16)
   24450:	10000c26 	beq	r2,zero,24484 <__sfp+0x88>
   24454:	80c01d04 	addi	r3,r16,116
   24458:	00000206 	br	24464 <__sfp+0x68>
   2445c:	18bfe60f 	ldh	r2,-104(r3)
   24460:	10000826 	beq	r2,zero,24484 <__sfp+0x88>
   24464:	297fffc4 	addi	r5,r5,-1
   24468:	1c3ffd04 	addi	r16,r3,-12
   2446c:	18c01a04 	addi	r3,r3,104
   24470:	2c7ffa1e 	bne	r5,r17,2445c <__alt_data_end+0xfffe7f3c>
   24474:	90800017 	ldw	r2,0(r18)
   24478:	10001d26 	beq	r2,zero,244f0 <__sfp+0xf4>
   2447c:	1025883a 	mov	r18,r2
   24480:	003fee06 	br	2443c <__alt_data_end+0xfffe7f1c>
   24484:	00bfffc4 	movi	r2,-1
   24488:	8080038d 	sth	r2,14(r16)
   2448c:	00800044 	movi	r2,1
   24490:	8080030d 	sth	r2,12(r16)
   24494:	80001915 	stw	zero,100(r16)
   24498:	80000015 	stw	zero,0(r16)
   2449c:	80000215 	stw	zero,8(r16)
   244a0:	80000115 	stw	zero,4(r16)
   244a4:	80000415 	stw	zero,16(r16)
   244a8:	80000515 	stw	zero,20(r16)
   244ac:	80000615 	stw	zero,24(r16)
   244b0:	81001704 	addi	r4,r16,92
   244b4:	000b883a 	mov	r5,zero
   244b8:	01800204 	movi	r6,8
   244bc:	00257600 	call	25760 <memset>
   244c0:	8005883a 	mov	r2,r16
   244c4:	80000c15 	stw	zero,48(r16)
   244c8:	80000d15 	stw	zero,52(r16)
   244cc:	80001115 	stw	zero,68(r16)
   244d0:	80001215 	stw	zero,72(r16)
   244d4:	dfc00417 	ldw	ra,16(sp)
   244d8:	dcc00317 	ldw	r19,12(sp)
   244dc:	dc800217 	ldw	r18,8(sp)
   244e0:	dc400117 	ldw	r17,4(sp)
   244e4:	dc000017 	ldw	r16,0(sp)
   244e8:	dec00504 	addi	sp,sp,20
   244ec:	f800283a 	ret
   244f0:	9809883a 	mov	r4,r19
   244f4:	01400104 	movi	r5,4
   244f8:	00243840 	call	24384 <__sfmoreglue>
   244fc:	90800015 	stw	r2,0(r18)
   24500:	103fde1e 	bne	r2,zero,2447c <__alt_data_end+0xfffe7f5c>
   24504:	00800304 	movi	r2,12
   24508:	98800015 	stw	r2,0(r19)
   2450c:	0005883a 	mov	r2,zero
   24510:	003ff006 	br	244d4 <__alt_data_end+0xfffe7fb4>

00024514 <_cleanup>:
   24514:	008000f4 	movhi	r2,3
   24518:	10876004 	addi	r2,r2,7552
   2451c:	11000017 	ldw	r4,0(r2)
   24520:	014000f4 	movhi	r5,3
   24524:	2960fc04 	addi	r5,r5,-31760
   24528:	00249901 	jmpi	24990 <_fwalk>

0002452c <__sinit>:
   2452c:	20800e17 	ldw	r2,56(r4)
   24530:	10000126 	beq	r2,zero,24538 <__sinit+0xc>
   24534:	f800283a 	ret
   24538:	00241e41 	jmpi	241e4 <__sinit.part.1>

0002453c <__sfp_lock_acquire>:
   2453c:	f800283a 	ret

00024540 <__sfp_lock_release>:
   24540:	f800283a 	ret

00024544 <__sinit_lock_acquire>:
   24544:	f800283a 	ret

00024548 <__sinit_lock_release>:
   24548:	f800283a 	ret

0002454c <__fp_lock_all>:
   2454c:	008000f4 	movhi	r2,3
   24550:	10876104 	addi	r2,r2,7556
   24554:	11000017 	ldw	r4,0(r2)
   24558:	014000b4 	movhi	r5,2
   2455c:	29507204 	addi	r5,r5,16840
   24560:	00249901 	jmpi	24990 <_fwalk>

00024564 <__fp_unlock_all>:
   24564:	008000f4 	movhi	r2,3
   24568:	10876104 	addi	r2,r2,7556
   2456c:	11000017 	ldw	r4,0(r2)
   24570:	014000b4 	movhi	r5,2
   24574:	29507404 	addi	r5,r5,16848
   24578:	00249901 	jmpi	24990 <_fwalk>

0002457c <_malloc_trim_r>:
   2457c:	defffb04 	addi	sp,sp,-20
   24580:	dcc00315 	stw	r19,12(sp)
   24584:	04c000f4 	movhi	r19,3
   24588:	dc800215 	stw	r18,8(sp)
   2458c:	dc400115 	stw	r17,4(sp)
   24590:	dc000015 	stw	r16,0(sp)
   24594:	dfc00415 	stw	ra,16(sp)
   24598:	2821883a 	mov	r16,r5
   2459c:	9cc1ab04 	addi	r19,r19,1708
   245a0:	2025883a 	mov	r18,r4
   245a4:	002d1e00 	call	2d1e0 <__malloc_lock>
   245a8:	98800217 	ldw	r2,8(r19)
   245ac:	14400117 	ldw	r17,4(r2)
   245b0:	00bfff04 	movi	r2,-4
   245b4:	88a2703a 	and	r17,r17,r2
   245b8:	8c21c83a 	sub	r16,r17,r16
   245bc:	8403fbc4 	addi	r16,r16,4079
   245c0:	8020d33a 	srli	r16,r16,12
   245c4:	0083ffc4 	movi	r2,4095
   245c8:	843fffc4 	addi	r16,r16,-1
   245cc:	8020933a 	slli	r16,r16,12
   245d0:	1400060e 	bge	r2,r16,245ec <_malloc_trim_r+0x70>
   245d4:	9009883a 	mov	r4,r18
   245d8:	000b883a 	mov	r5,zero
   245dc:	00269400 	call	26940 <_sbrk_r>
   245e0:	98c00217 	ldw	r3,8(r19)
   245e4:	1c47883a 	add	r3,r3,r17
   245e8:	10c00a26 	beq	r2,r3,24614 <_malloc_trim_r+0x98>
   245ec:	9009883a 	mov	r4,r18
   245f0:	002d2000 	call	2d200 <__malloc_unlock>
   245f4:	0005883a 	mov	r2,zero
   245f8:	dfc00417 	ldw	ra,16(sp)
   245fc:	dcc00317 	ldw	r19,12(sp)
   24600:	dc800217 	ldw	r18,8(sp)
   24604:	dc400117 	ldw	r17,4(sp)
   24608:	dc000017 	ldw	r16,0(sp)
   2460c:	dec00504 	addi	sp,sp,20
   24610:	f800283a 	ret
   24614:	9009883a 	mov	r4,r18
   24618:	040bc83a 	sub	r5,zero,r16
   2461c:	00269400 	call	26940 <_sbrk_r>
   24620:	00ffffc4 	movi	r3,-1
   24624:	10c00d26 	beq	r2,r3,2465c <_malloc_trim_r+0xe0>
   24628:	00c000f4 	movhi	r3,3
   2462c:	18ce6a04 	addi	r3,r3,14760
   24630:	18800017 	ldw	r2,0(r3)
   24634:	99000217 	ldw	r4,8(r19)
   24638:	8c23c83a 	sub	r17,r17,r16
   2463c:	8c400054 	ori	r17,r17,1
   24640:	1421c83a 	sub	r16,r2,r16
   24644:	24400115 	stw	r17,4(r4)
   24648:	9009883a 	mov	r4,r18
   2464c:	1c000015 	stw	r16,0(r3)
   24650:	002d2000 	call	2d200 <__malloc_unlock>
   24654:	00800044 	movi	r2,1
   24658:	003fe706 	br	245f8 <__alt_data_end+0xfffe80d8>
   2465c:	9009883a 	mov	r4,r18
   24660:	000b883a 	mov	r5,zero
   24664:	00269400 	call	26940 <_sbrk_r>
   24668:	99000217 	ldw	r4,8(r19)
   2466c:	014003c4 	movi	r5,15
   24670:	1107c83a 	sub	r3,r2,r4
   24674:	28ffdd0e 	bge	r5,r3,245ec <__alt_data_end+0xfffe80cc>
   24678:	014000f4 	movhi	r5,3
   2467c:	29476304 	addi	r5,r5,7564
   24680:	29400017 	ldw	r5,0(r5)
   24684:	18c00054 	ori	r3,r3,1
   24688:	20c00115 	stw	r3,4(r4)
   2468c:	00c000f4 	movhi	r3,3
   24690:	1145c83a 	sub	r2,r2,r5
   24694:	18ce6a04 	addi	r3,r3,14760
   24698:	18800015 	stw	r2,0(r3)
   2469c:	003fd306 	br	245ec <__alt_data_end+0xfffe80cc>

000246a0 <_free_r>:
   246a0:	28004c26 	beq	r5,zero,247d4 <_free_r+0x134>
   246a4:	defffd04 	addi	sp,sp,-12
   246a8:	dc400115 	stw	r17,4(sp)
   246ac:	dc000015 	stw	r16,0(sp)
   246b0:	2023883a 	mov	r17,r4
   246b4:	2821883a 	mov	r16,r5
   246b8:	dfc00215 	stw	ra,8(sp)
   246bc:	002d1e00 	call	2d1e0 <__malloc_lock>
   246c0:	813fff17 	ldw	r4,-4(r16)
   246c4:	00bfff84 	movi	r2,-2
   246c8:	024000f4 	movhi	r9,3
   246cc:	81bffe04 	addi	r6,r16,-8
   246d0:	2084703a 	and	r2,r4,r2
   246d4:	4a41ab04 	addi	r9,r9,1708
   246d8:	308b883a 	add	r5,r6,r2
   246dc:	2a000117 	ldw	r8,4(r5)
   246e0:	49c00217 	ldw	r7,8(r9)
   246e4:	00ffff04 	movi	r3,-4
   246e8:	40c6703a 	and	r3,r8,r3
   246ec:	39405326 	beq	r7,r5,2483c <_free_r+0x19c>
   246f0:	28c00115 	stw	r3,4(r5)
   246f4:	2100004c 	andi	r4,r4,1
   246f8:	2000091e 	bne	r4,zero,24720 <_free_r+0x80>
   246fc:	81fffe17 	ldw	r7,-8(r16)
   24700:	4a000204 	addi	r8,r9,8
   24704:	31cdc83a 	sub	r6,r6,r7
   24708:	31000217 	ldw	r4,8(r6)
   2470c:	11c5883a 	add	r2,r2,r7
   24710:	22006126 	beq	r4,r8,24898 <_free_r+0x1f8>
   24714:	31c00317 	ldw	r7,12(r6)
   24718:	21c00315 	stw	r7,12(r4)
   2471c:	39000215 	stw	r4,8(r7)
   24720:	28c9883a 	add	r4,r5,r3
   24724:	21c00117 	ldw	r7,4(r4)
   24728:	39c0004c 	andi	r7,r7,1
   2472c:	38000d1e 	bne	r7,zero,24764 <_free_r+0xc4>
   24730:	29000217 	ldw	r4,8(r5)
   24734:	10c5883a 	add	r2,r2,r3
   24738:	00c000f4 	movhi	r3,3
   2473c:	18c1ad04 	addi	r3,r3,1716
   24740:	20c07526 	beq	r4,r3,24918 <_free_r+0x278>
   24744:	29c00317 	ldw	r7,12(r5)
   24748:	11400054 	ori	r5,r2,1
   2474c:	3087883a 	add	r3,r6,r2
   24750:	21c00315 	stw	r7,12(r4)
   24754:	39000215 	stw	r4,8(r7)
   24758:	31400115 	stw	r5,4(r6)
   2475c:	18800015 	stw	r2,0(r3)
   24760:	00000406 	br	24774 <_free_r+0xd4>
   24764:	10c00054 	ori	r3,r2,1
   24768:	30c00115 	stw	r3,4(r6)
   2476c:	3087883a 	add	r3,r6,r2
   24770:	18800015 	stw	r2,0(r3)
   24774:	00c07fc4 	movi	r3,511
   24778:	18801736 	bltu	r3,r2,247d8 <_free_r+0x138>
   2477c:	1004d0fa 	srli	r2,r2,3
   24780:	01400044 	movi	r5,1
   24784:	49000117 	ldw	r4,4(r9)
   24788:	1087883a 	add	r3,r2,r2
   2478c:	18c7883a 	add	r3,r3,r3
   24790:	1005d0ba 	srai	r2,r2,2
   24794:	18c7883a 	add	r3,r3,r3
   24798:	1a47883a 	add	r3,r3,r9
   2479c:	19c00217 	ldw	r7,8(r3)
   247a0:	2884983a 	sll	r2,r5,r2
   247a4:	30c00315 	stw	r3,12(r6)
   247a8:	31c00215 	stw	r7,8(r6)
   247ac:	1104b03a 	or	r2,r2,r4
   247b0:	19800215 	stw	r6,8(r3)
   247b4:	48800115 	stw	r2,4(r9)
   247b8:	39800315 	stw	r6,12(r7)
   247bc:	8809883a 	mov	r4,r17
   247c0:	dfc00217 	ldw	ra,8(sp)
   247c4:	dc400117 	ldw	r17,4(sp)
   247c8:	dc000017 	ldw	r16,0(sp)
   247cc:	dec00304 	addi	sp,sp,12
   247d0:	002d2001 	jmpi	2d200 <__malloc_unlock>
   247d4:	f800283a 	ret
   247d8:	1006d27a 	srli	r3,r2,9
   247dc:	01000104 	movi	r4,4
   247e0:	20c04036 	bltu	r4,r3,248e4 <_free_r+0x244>
   247e4:	1006d1ba 	srli	r3,r2,6
   247e8:	19400e04 	addi	r5,r3,56
   247ec:	2947883a 	add	r3,r5,r5
   247f0:	18c7883a 	add	r3,r3,r3
   247f4:	18c7883a 	add	r3,r3,r3
   247f8:	1a49883a 	add	r4,r3,r9
   247fc:	20c00217 	ldw	r3,8(r4)
   24800:	01c000f4 	movhi	r7,3
   24804:	39c1ab04 	addi	r7,r7,1708
   24808:	19003b26 	beq	r3,r4,248f8 <_free_r+0x258>
   2480c:	01ffff04 	movi	r7,-4
   24810:	19400117 	ldw	r5,4(r3)
   24814:	29ca703a 	and	r5,r5,r7
   24818:	1140022e 	bgeu	r2,r5,24824 <_free_r+0x184>
   2481c:	18c00217 	ldw	r3,8(r3)
   24820:	20fffb1e 	bne	r4,r3,24810 <__alt_data_end+0xfffe82f0>
   24824:	18800317 	ldw	r2,12(r3)
   24828:	30800315 	stw	r2,12(r6)
   2482c:	30c00215 	stw	r3,8(r6)
   24830:	11800215 	stw	r6,8(r2)
   24834:	19800315 	stw	r6,12(r3)
   24838:	003fe006 	br	247bc <__alt_data_end+0xfffe829c>
   2483c:	2100004c 	andi	r4,r4,1
   24840:	1885883a 	add	r2,r3,r2
   24844:	2000071e 	bne	r4,zero,24864 <_free_r+0x1c4>
   24848:	817ffe17 	ldw	r5,-8(r16)
   2484c:	314dc83a 	sub	r6,r6,r5
   24850:	30c00317 	ldw	r3,12(r6)
   24854:	31000217 	ldw	r4,8(r6)
   24858:	1145883a 	add	r2,r2,r5
   2485c:	20c00315 	stw	r3,12(r4)
   24860:	19000215 	stw	r4,8(r3)
   24864:	10c00054 	ori	r3,r2,1
   24868:	30c00115 	stw	r3,4(r6)
   2486c:	00c000f4 	movhi	r3,3
   24870:	18c76404 	addi	r3,r3,7568
   24874:	18c00017 	ldw	r3,0(r3)
   24878:	49800215 	stw	r6,8(r9)
   2487c:	10ffcf36 	bltu	r2,r3,247bc <__alt_data_end+0xfffe829c>
   24880:	008000f4 	movhi	r2,3
   24884:	108e6104 	addi	r2,r2,14724
   24888:	11400017 	ldw	r5,0(r2)
   2488c:	8809883a 	mov	r4,r17
   24890:	002457c0 	call	2457c <_malloc_trim_r>
   24894:	003fc906 	br	247bc <__alt_data_end+0xfffe829c>
   24898:	28c9883a 	add	r4,r5,r3
   2489c:	21000117 	ldw	r4,4(r4)
   248a0:	2100004c 	andi	r4,r4,1
   248a4:	20000a1e 	bne	r4,zero,248d0 <_free_r+0x230>
   248a8:	29000317 	ldw	r4,12(r5)
   248ac:	29400217 	ldw	r5,8(r5)
   248b0:	10c5883a 	add	r2,r2,r3
   248b4:	10c00054 	ori	r3,r2,1
   248b8:	29000315 	stw	r4,12(r5)
   248bc:	21400215 	stw	r5,8(r4)
   248c0:	30c00115 	stw	r3,4(r6)
   248c4:	308d883a 	add	r6,r6,r2
   248c8:	30800015 	stw	r2,0(r6)
   248cc:	003fbb06 	br	247bc <__alt_data_end+0xfffe829c>
   248d0:	10c00054 	ori	r3,r2,1
   248d4:	30c00115 	stw	r3,4(r6)
   248d8:	308d883a 	add	r6,r6,r2
   248dc:	30800015 	stw	r2,0(r6)
   248e0:	003fb606 	br	247bc <__alt_data_end+0xfffe829c>
   248e4:	01000504 	movi	r4,20
   248e8:	20c01436 	bltu	r4,r3,2493c <_free_r+0x29c>
   248ec:	194016c4 	addi	r5,r3,91
   248f0:	2947883a 	add	r3,r5,r5
   248f4:	003fbe06 	br	247f0 <__alt_data_end+0xfffe82d0>
   248f8:	280bd0ba 	srai	r5,r5,2
   248fc:	00800044 	movi	r2,1
   24900:	39000117 	ldw	r4,4(r7)
   24904:	114a983a 	sll	r5,r2,r5
   24908:	1805883a 	mov	r2,r3
   2490c:	2908b03a 	or	r4,r5,r4
   24910:	39000115 	stw	r4,4(r7)
   24914:	003fc406 	br	24828 <__alt_data_end+0xfffe8308>
   24918:	49800515 	stw	r6,20(r9)
   2491c:	49800415 	stw	r6,16(r9)
   24920:	10c00054 	ori	r3,r2,1
   24924:	31000315 	stw	r4,12(r6)
   24928:	31000215 	stw	r4,8(r6)
   2492c:	30c00115 	stw	r3,4(r6)
   24930:	308d883a 	add	r6,r6,r2
   24934:	30800015 	stw	r2,0(r6)
   24938:	003fa006 	br	247bc <__alt_data_end+0xfffe829c>
   2493c:	01001504 	movi	r4,84
   24940:	20c00436 	bltu	r4,r3,24954 <_free_r+0x2b4>
   24944:	1006d33a 	srli	r3,r2,12
   24948:	19401b84 	addi	r5,r3,110
   2494c:	2947883a 	add	r3,r5,r5
   24950:	003fa706 	br	247f0 <__alt_data_end+0xfffe82d0>
   24954:	01005504 	movi	r4,340
   24958:	20c00436 	bltu	r4,r3,2496c <_free_r+0x2cc>
   2495c:	1006d3fa 	srli	r3,r2,15
   24960:	19401dc4 	addi	r5,r3,119
   24964:	2947883a 	add	r3,r5,r5
   24968:	003fa106 	br	247f0 <__alt_data_end+0xfffe82d0>
   2496c:	01015504 	movi	r4,1364
   24970:	20c00436 	bltu	r4,r3,24984 <_free_r+0x2e4>
   24974:	1006d4ba 	srli	r3,r2,18
   24978:	19401f04 	addi	r5,r3,124
   2497c:	2947883a 	add	r3,r5,r5
   24980:	003f9b06 	br	247f0 <__alt_data_end+0xfffe82d0>
   24984:	00c03f04 	movi	r3,252
   24988:	01401f84 	movi	r5,126
   2498c:	003f9806 	br	247f0 <__alt_data_end+0xfffe82d0>

00024990 <_fwalk>:
   24990:	defff804 	addi	sp,sp,-32
   24994:	dd400515 	stw	r21,20(sp)
   24998:	2540b804 	addi	r21,r4,736
   2499c:	dd800615 	stw	r22,24(sp)
   249a0:	dd000415 	stw	r20,16(sp)
   249a4:	dfc00715 	stw	ra,28(sp)
   249a8:	dcc00315 	stw	r19,12(sp)
   249ac:	dc800215 	stw	r18,8(sp)
   249b0:	dc400115 	stw	r17,4(sp)
   249b4:	dc000015 	stw	r16,0(sp)
   249b8:	2829883a 	mov	r20,r5
   249bc:	002d883a 	mov	r22,zero
   249c0:	002453c0 	call	2453c <__sfp_lock_acquire>
   249c4:	a8001426 	beq	r21,zero,24a18 <_fwalk+0x88>
   249c8:	04ffffc4 	movi	r19,-1
   249cc:	ac400117 	ldw	r17,4(r21)
   249d0:	ac800217 	ldw	r18,8(r21)
   249d4:	8c7fffc4 	addi	r17,r17,-1
   249d8:	88000d16 	blt	r17,zero,24a10 <_fwalk+0x80>
   249dc:	94000304 	addi	r16,r18,12
   249e0:	94800384 	addi	r18,r18,14
   249e4:	80c0000f 	ldh	r3,0(r16)
   249e8:	8c7fffc4 	addi	r17,r17,-1
   249ec:	813ffd04 	addi	r4,r16,-12
   249f0:	18000426 	beq	r3,zero,24a04 <_fwalk+0x74>
   249f4:	90c0000f 	ldh	r3,0(r18)
   249f8:	1cc00226 	beq	r3,r19,24a04 <_fwalk+0x74>
   249fc:	a03ee83a 	callr	r20
   24a00:	b0acb03a 	or	r22,r22,r2
   24a04:	84001a04 	addi	r16,r16,104
   24a08:	94801a04 	addi	r18,r18,104
   24a0c:	8cfff51e 	bne	r17,r19,249e4 <__alt_data_end+0xfffe84c4>
   24a10:	ad400017 	ldw	r21,0(r21)
   24a14:	a83fed1e 	bne	r21,zero,249cc <__alt_data_end+0xfffe84ac>
   24a18:	00245400 	call	24540 <__sfp_lock_release>
   24a1c:	b005883a 	mov	r2,r22
   24a20:	dfc00717 	ldw	ra,28(sp)
   24a24:	dd800617 	ldw	r22,24(sp)
   24a28:	dd400517 	ldw	r21,20(sp)
   24a2c:	dd000417 	ldw	r20,16(sp)
   24a30:	dcc00317 	ldw	r19,12(sp)
   24a34:	dc800217 	ldw	r18,8(sp)
   24a38:	dc400117 	ldw	r17,4(sp)
   24a3c:	dc000017 	ldw	r16,0(sp)
   24a40:	dec00804 	addi	sp,sp,32
   24a44:	f800283a 	ret

00024a48 <_fwalk_reent>:
   24a48:	defff804 	addi	sp,sp,-32
   24a4c:	dd400515 	stw	r21,20(sp)
   24a50:	2540b804 	addi	r21,r4,736
   24a54:	dd800615 	stw	r22,24(sp)
   24a58:	dd000415 	stw	r20,16(sp)
   24a5c:	dcc00315 	stw	r19,12(sp)
   24a60:	dfc00715 	stw	ra,28(sp)
   24a64:	dc800215 	stw	r18,8(sp)
   24a68:	dc400115 	stw	r17,4(sp)
   24a6c:	dc000015 	stw	r16,0(sp)
   24a70:	2027883a 	mov	r19,r4
   24a74:	2829883a 	mov	r20,r5
   24a78:	002d883a 	mov	r22,zero
   24a7c:	002453c0 	call	2453c <__sfp_lock_acquire>
   24a80:	a8001326 	beq	r21,zero,24ad0 <_fwalk_reent+0x88>
   24a84:	04bfffc4 	movi	r18,-1
   24a88:	ac400117 	ldw	r17,4(r21)
   24a8c:	ac000217 	ldw	r16,8(r21)
   24a90:	8c7fffc4 	addi	r17,r17,-1
   24a94:	88000c16 	blt	r17,zero,24ac8 <_fwalk_reent+0x80>
   24a98:	84000304 	addi	r16,r16,12
   24a9c:	80c0000f 	ldh	r3,0(r16)
   24aa0:	8c7fffc4 	addi	r17,r17,-1
   24aa4:	817ffd04 	addi	r5,r16,-12
   24aa8:	18000526 	beq	r3,zero,24ac0 <_fwalk_reent+0x78>
   24aac:	80c0008f 	ldh	r3,2(r16)
   24ab0:	9809883a 	mov	r4,r19
   24ab4:	1c800226 	beq	r3,r18,24ac0 <_fwalk_reent+0x78>
   24ab8:	a03ee83a 	callr	r20
   24abc:	b0acb03a 	or	r22,r22,r2
   24ac0:	84001a04 	addi	r16,r16,104
   24ac4:	8cbff51e 	bne	r17,r18,24a9c <__alt_data_end+0xfffe857c>
   24ac8:	ad400017 	ldw	r21,0(r21)
   24acc:	a83fee1e 	bne	r21,zero,24a88 <__alt_data_end+0xfffe8568>
   24ad0:	00245400 	call	24540 <__sfp_lock_release>
   24ad4:	b005883a 	mov	r2,r22
   24ad8:	dfc00717 	ldw	ra,28(sp)
   24adc:	dd800617 	ldw	r22,24(sp)
   24ae0:	dd400517 	ldw	r21,20(sp)
   24ae4:	dd000417 	ldw	r20,16(sp)
   24ae8:	dcc00317 	ldw	r19,12(sp)
   24aec:	dc800217 	ldw	r18,8(sp)
   24af0:	dc400117 	ldw	r17,4(sp)
   24af4:	dc000017 	ldw	r16,0(sp)
   24af8:	dec00804 	addi	sp,sp,32
   24afc:	f800283a 	ret

00024b00 <_setlocale_r>:
   24b00:	30001b26 	beq	r6,zero,24b70 <_setlocale_r+0x70>
   24b04:	014000f4 	movhi	r5,3
   24b08:	defffe04 	addi	sp,sp,-8
   24b0c:	297fe204 	addi	r5,r5,-120
   24b10:	3009883a 	mov	r4,r6
   24b14:	dc000015 	stw	r16,0(sp)
   24b18:	dfc00115 	stw	ra,4(sp)
   24b1c:	3021883a 	mov	r16,r6
   24b20:	0026ad00 	call	26ad0 <strcmp>
   24b24:	1000061e 	bne	r2,zero,24b40 <_setlocale_r+0x40>
   24b28:	008000f4 	movhi	r2,3
   24b2c:	10bfe104 	addi	r2,r2,-124
   24b30:	dfc00117 	ldw	ra,4(sp)
   24b34:	dc000017 	ldw	r16,0(sp)
   24b38:	dec00204 	addi	sp,sp,8
   24b3c:	f800283a 	ret
   24b40:	014000f4 	movhi	r5,3
   24b44:	297fe104 	addi	r5,r5,-124
   24b48:	8009883a 	mov	r4,r16
   24b4c:	0026ad00 	call	26ad0 <strcmp>
   24b50:	103ff526 	beq	r2,zero,24b28 <__alt_data_end+0xfffe8608>
   24b54:	014000f4 	movhi	r5,3
   24b58:	297fcc04 	addi	r5,r5,-208
   24b5c:	8009883a 	mov	r4,r16
   24b60:	0026ad00 	call	26ad0 <strcmp>
   24b64:	103ff026 	beq	r2,zero,24b28 <__alt_data_end+0xfffe8608>
   24b68:	0005883a 	mov	r2,zero
   24b6c:	003ff006 	br	24b30 <__alt_data_end+0xfffe8610>
   24b70:	008000f4 	movhi	r2,3
   24b74:	10bfe104 	addi	r2,r2,-124
   24b78:	f800283a 	ret

00024b7c <__locale_charset>:
   24b7c:	008000f4 	movhi	r2,3
   24b80:	10819504 	addi	r2,r2,1620
   24b84:	f800283a 	ret

00024b88 <__locale_mb_cur_max>:
   24b88:	008000f4 	movhi	r2,3
   24b8c:	10876204 	addi	r2,r2,7560
   24b90:	10800017 	ldw	r2,0(r2)
   24b94:	f800283a 	ret

00024b98 <__locale_msgcharset>:
   24b98:	008000f4 	movhi	r2,3
   24b9c:	10818d04 	addi	r2,r2,1588
   24ba0:	f800283a 	ret

00024ba4 <__locale_cjk_lang>:
   24ba4:	0005883a 	mov	r2,zero
   24ba8:	f800283a 	ret

00024bac <_localeconv_r>:
   24bac:	008000f4 	movhi	r2,3
   24bb0:	10819d04 	addi	r2,r2,1652
   24bb4:	f800283a 	ret

00024bb8 <setlocale>:
   24bb8:	00c000f4 	movhi	r3,3
   24bbc:	18c76104 	addi	r3,r3,7556
   24bc0:	2005883a 	mov	r2,r4
   24bc4:	19000017 	ldw	r4,0(r3)
   24bc8:	280d883a 	mov	r6,r5
   24bcc:	100b883a 	mov	r5,r2
   24bd0:	0024b001 	jmpi	24b00 <_setlocale_r>

00024bd4 <localeconv>:
   24bd4:	008000f4 	movhi	r2,3
   24bd8:	10819d04 	addi	r2,r2,1652
   24bdc:	f800283a 	ret

00024be0 <__smakebuf_r>:
   24be0:	2880030b 	ldhu	r2,12(r5)
   24be4:	10c0008c 	andi	r3,r2,2
   24be8:	1800401e 	bne	r3,zero,24cec <__smakebuf_r+0x10c>
   24bec:	deffec04 	addi	sp,sp,-80
   24bf0:	dc000f15 	stw	r16,60(sp)
   24bf4:	2821883a 	mov	r16,r5
   24bf8:	2940038f 	ldh	r5,14(r5)
   24bfc:	dc401015 	stw	r17,64(sp)
   24c00:	dfc01315 	stw	ra,76(sp)
   24c04:	dcc01215 	stw	r19,72(sp)
   24c08:	dc801115 	stw	r18,68(sp)
   24c0c:	2023883a 	mov	r17,r4
   24c10:	28001b16 	blt	r5,zero,24c80 <__smakebuf_r+0xa0>
   24c14:	d80d883a 	mov	r6,sp
   24c18:	00285e00 	call	285e0 <_fstat_r>
   24c1c:	10001716 	blt	r2,zero,24c7c <__smakebuf_r+0x9c>
   24c20:	d8800117 	ldw	r2,4(sp)
   24c24:	00e00014 	movui	r3,32768
   24c28:	10bc000c 	andi	r2,r2,61440
   24c2c:	10c03726 	beq	r2,r3,24d0c <__smakebuf_r+0x12c>
   24c30:	80c0030b 	ldhu	r3,12(r16)
   24c34:	18c20014 	ori	r3,r3,2048
   24c38:	80c0030d 	sth	r3,12(r16)
   24c3c:	00c80004 	movi	r3,8192
   24c40:	10c03c1e 	bne	r2,r3,24d34 <__smakebuf_r+0x154>
   24c44:	8140038f 	ldh	r5,14(r16)
   24c48:	8809883a 	mov	r4,r17
   24c4c:	0028adc0 	call	28adc <_isatty_r>
   24c50:	10004e26 	beq	r2,zero,24d8c <__smakebuf_r+0x1ac>
   24c54:	8080030b 	ldhu	r2,12(r16)
   24c58:	04c00044 	movi	r19,1
   24c5c:	80c010c4 	addi	r3,r16,67
   24c60:	14c4b03a 	or	r2,r2,r19
   24c64:	8080030d 	sth	r2,12(r16)
   24c68:	80c00015 	stw	r3,0(r16)
   24c6c:	80c00415 	stw	r3,16(r16)
   24c70:	84c00515 	stw	r19,20(r16)
   24c74:	04810004 	movi	r18,1024
   24c78:	00000706 	br	24c98 <__smakebuf_r+0xb8>
   24c7c:	8080030b 	ldhu	r2,12(r16)
   24c80:	10c0200c 	andi	r3,r2,128
   24c84:	18001f1e 	bne	r3,zero,24d04 <__smakebuf_r+0x124>
   24c88:	04810004 	movi	r18,1024
   24c8c:	10820014 	ori	r2,r2,2048
   24c90:	8080030d 	sth	r2,12(r16)
   24c94:	0027883a 	mov	r19,zero
   24c98:	8809883a 	mov	r4,r17
   24c9c:	900b883a 	mov	r5,r18
   24ca0:	0024d980 	call	24d98 <_malloc_r>
   24ca4:	10002e26 	beq	r2,zero,24d60 <__smakebuf_r+0x180>
   24ca8:	80c0030b 	ldhu	r3,12(r16)
   24cac:	010000b4 	movhi	r4,2
   24cb0:	21107604 	addi	r4,r4,16856
   24cb4:	89000f15 	stw	r4,60(r17)
   24cb8:	18c02014 	ori	r3,r3,128
   24cbc:	80c0030d 	sth	r3,12(r16)
   24cc0:	80800015 	stw	r2,0(r16)
   24cc4:	80800415 	stw	r2,16(r16)
   24cc8:	84800515 	stw	r18,20(r16)
   24ccc:	98001c1e 	bne	r19,zero,24d40 <__smakebuf_r+0x160>
   24cd0:	dfc01317 	ldw	ra,76(sp)
   24cd4:	dcc01217 	ldw	r19,72(sp)
   24cd8:	dc801117 	ldw	r18,68(sp)
   24cdc:	dc401017 	ldw	r17,64(sp)
   24ce0:	dc000f17 	ldw	r16,60(sp)
   24ce4:	dec01404 	addi	sp,sp,80
   24ce8:	f800283a 	ret
   24cec:	288010c4 	addi	r2,r5,67
   24cf0:	28800015 	stw	r2,0(r5)
   24cf4:	28800415 	stw	r2,16(r5)
   24cf8:	00800044 	movi	r2,1
   24cfc:	28800515 	stw	r2,20(r5)
   24d00:	f800283a 	ret
   24d04:	04801004 	movi	r18,64
   24d08:	003fe006 	br	24c8c <__alt_data_end+0xfffe876c>
   24d0c:	81000a17 	ldw	r4,40(r16)
   24d10:	00c000b4 	movhi	r3,2
   24d14:	18da9b04 	addi	r3,r3,27244
   24d18:	20ffc51e 	bne	r4,r3,24c30 <__alt_data_end+0xfffe8710>
   24d1c:	80c0030b 	ldhu	r3,12(r16)
   24d20:	01010004 	movi	r4,1024
   24d24:	81001315 	stw	r4,76(r16)
   24d28:	1906b03a 	or	r3,r3,r4
   24d2c:	80c0030d 	sth	r3,12(r16)
   24d30:	003fc206 	br	24c3c <__alt_data_end+0xfffe871c>
   24d34:	0027883a 	mov	r19,zero
   24d38:	04810004 	movi	r18,1024
   24d3c:	003fd606 	br	24c98 <__alt_data_end+0xfffe8778>
   24d40:	8140038f 	ldh	r5,14(r16)
   24d44:	8809883a 	mov	r4,r17
   24d48:	0028adc0 	call	28adc <_isatty_r>
   24d4c:	103fe026 	beq	r2,zero,24cd0 <__alt_data_end+0xfffe87b0>
   24d50:	8080030b 	ldhu	r2,12(r16)
   24d54:	10800054 	ori	r2,r2,1
   24d58:	8080030d 	sth	r2,12(r16)
   24d5c:	003fdc06 	br	24cd0 <__alt_data_end+0xfffe87b0>
   24d60:	8080030b 	ldhu	r2,12(r16)
   24d64:	10c0800c 	andi	r3,r2,512
   24d68:	183fd91e 	bne	r3,zero,24cd0 <__alt_data_end+0xfffe87b0>
   24d6c:	10800094 	ori	r2,r2,2
   24d70:	80c010c4 	addi	r3,r16,67
   24d74:	8080030d 	sth	r2,12(r16)
   24d78:	00800044 	movi	r2,1
   24d7c:	80c00015 	stw	r3,0(r16)
   24d80:	80c00415 	stw	r3,16(r16)
   24d84:	80800515 	stw	r2,20(r16)
   24d88:	003fd106 	br	24cd0 <__alt_data_end+0xfffe87b0>
   24d8c:	04c00044 	movi	r19,1
   24d90:	04810004 	movi	r18,1024
   24d94:	003fc006 	br	24c98 <__alt_data_end+0xfffe8778>

00024d98 <_malloc_r>:
   24d98:	defff504 	addi	sp,sp,-44
   24d9c:	dc800315 	stw	r18,12(sp)
   24da0:	dfc00a15 	stw	ra,40(sp)
   24da4:	df000915 	stw	fp,36(sp)
   24da8:	ddc00815 	stw	r23,32(sp)
   24dac:	dd800715 	stw	r22,28(sp)
   24db0:	dd400615 	stw	r21,24(sp)
   24db4:	dd000515 	stw	r20,20(sp)
   24db8:	dcc00415 	stw	r19,16(sp)
   24dbc:	dc400215 	stw	r17,8(sp)
   24dc0:	dc000115 	stw	r16,4(sp)
   24dc4:	288002c4 	addi	r2,r5,11
   24dc8:	00c00584 	movi	r3,22
   24dcc:	2025883a 	mov	r18,r4
   24dd0:	18802a2e 	bgeu	r3,r2,24e7c <_malloc_r+0xe4>
   24dd4:	047ffe04 	movi	r17,-8
   24dd8:	1462703a 	and	r17,r2,r17
   24ddc:	88009e16 	blt	r17,zero,25058 <_malloc_r+0x2c0>
   24de0:	89409d36 	bltu	r17,r5,25058 <_malloc_r+0x2c0>
   24de4:	002d1e00 	call	2d1e0 <__malloc_lock>
   24de8:	00807dc4 	movi	r2,503
   24dec:	14402736 	bltu	r2,r17,24e8c <_malloc_r+0xf4>
   24df0:	8806d0fa 	srli	r3,r17,3
   24df4:	04c000f4 	movhi	r19,3
   24df8:	9cc1ab04 	addi	r19,r19,1708
   24dfc:	18c5883a 	add	r2,r3,r3
   24e00:	1085883a 	add	r2,r2,r2
   24e04:	1085883a 	add	r2,r2,r2
   24e08:	9885883a 	add	r2,r19,r2
   24e0c:	14000317 	ldw	r16,12(r2)
   24e10:	80814a26 	beq	r16,r2,2533c <_malloc_r+0x5a4>
   24e14:	80c00117 	ldw	r3,4(r16)
   24e18:	81000317 	ldw	r4,12(r16)
   24e1c:	00bfff04 	movi	r2,-4
   24e20:	1884703a 	and	r2,r3,r2
   24e24:	81400217 	ldw	r5,8(r16)
   24e28:	8085883a 	add	r2,r16,r2
   24e2c:	10c00117 	ldw	r3,4(r2)
   24e30:	29000315 	stw	r4,12(r5)
   24e34:	21400215 	stw	r5,8(r4)
   24e38:	18c00054 	ori	r3,r3,1
   24e3c:	10c00115 	stw	r3,4(r2)
   24e40:	9009883a 	mov	r4,r18
   24e44:	002d2000 	call	2d200 <__malloc_unlock>
   24e48:	80800204 	addi	r2,r16,8
   24e4c:	dfc00a17 	ldw	ra,40(sp)
   24e50:	df000917 	ldw	fp,36(sp)
   24e54:	ddc00817 	ldw	r23,32(sp)
   24e58:	dd800717 	ldw	r22,28(sp)
   24e5c:	dd400617 	ldw	r21,24(sp)
   24e60:	dd000517 	ldw	r20,20(sp)
   24e64:	dcc00417 	ldw	r19,16(sp)
   24e68:	dc800317 	ldw	r18,12(sp)
   24e6c:	dc400217 	ldw	r17,8(sp)
   24e70:	dc000117 	ldw	r16,4(sp)
   24e74:	dec00b04 	addi	sp,sp,44
   24e78:	f800283a 	ret
   24e7c:	04400404 	movi	r17,16
   24e80:	89407536 	bltu	r17,r5,25058 <_malloc_r+0x2c0>
   24e84:	002d1e00 	call	2d1e0 <__malloc_lock>
   24e88:	003fd906 	br	24df0 <__alt_data_end+0xfffe88d0>
   24e8c:	8806d27a 	srli	r3,r17,9
   24e90:	18007526 	beq	r3,zero,25068 <_malloc_r+0x2d0>
   24e94:	00800104 	movi	r2,4
   24e98:	10c0ef36 	bltu	r2,r3,25258 <_malloc_r+0x4c0>
   24e9c:	8806d1ba 	srli	r3,r17,6
   24ea0:	19c00e04 	addi	r7,r3,56
   24ea4:	39cb883a 	add	r5,r7,r7
   24ea8:	04c000f4 	movhi	r19,3
   24eac:	294b883a 	add	r5,r5,r5
   24eb0:	9cc1ab04 	addi	r19,r19,1708
   24eb4:	294b883a 	add	r5,r5,r5
   24eb8:	994b883a 	add	r5,r19,r5
   24ebc:	2c000317 	ldw	r16,12(r5)
   24ec0:	2c000e26 	beq	r5,r16,24efc <_malloc_r+0x164>
   24ec4:	80800117 	ldw	r2,4(r16)
   24ec8:	01bfff04 	movi	r6,-4
   24ecc:	010003c4 	movi	r4,15
   24ed0:	1184703a 	and	r2,r2,r6
   24ed4:	1447c83a 	sub	r3,r2,r17
   24ed8:	20c00716 	blt	r4,r3,24ef8 <_malloc_r+0x160>
   24edc:	1800650e 	bge	r3,zero,25074 <_malloc_r+0x2dc>
   24ee0:	84000317 	ldw	r16,12(r16)
   24ee4:	2c000526 	beq	r5,r16,24efc <_malloc_r+0x164>
   24ee8:	80800117 	ldw	r2,4(r16)
   24eec:	1184703a 	and	r2,r2,r6
   24ef0:	1447c83a 	sub	r3,r2,r17
   24ef4:	20fff90e 	bge	r4,r3,24edc <__alt_data_end+0xfffe89bc>
   24ef8:	39ffffc4 	addi	r7,r7,-1
   24efc:	38c00044 	addi	r3,r7,1
   24f00:	018000f4 	movhi	r6,3
   24f04:	9c000417 	ldw	r16,16(r19)
   24f08:	3181ab04 	addi	r6,r6,1708
   24f0c:	32400204 	addi	r9,r6,8
   24f10:	82410326 	beq	r16,r9,25320 <_malloc_r+0x588>
   24f14:	81000117 	ldw	r4,4(r16)
   24f18:	00bfff04 	movi	r2,-4
   24f1c:	208e703a 	and	r7,r4,r2
   24f20:	3c45c83a 	sub	r2,r7,r17
   24f24:	010003c4 	movi	r4,15
   24f28:	2080ee16 	blt	r4,r2,252e4 <_malloc_r+0x54c>
   24f2c:	32400515 	stw	r9,20(r6)
   24f30:	32400415 	stw	r9,16(r6)
   24f34:	1000510e 	bge	r2,zero,2507c <_malloc_r+0x2e4>
   24f38:	00807fc4 	movi	r2,511
   24f3c:	11c0ce36 	bltu	r2,r7,25278 <_malloc_r+0x4e0>
   24f40:	3808d0fa 	srli	r4,r7,3
   24f44:	01c00044 	movi	r7,1
   24f48:	30800117 	ldw	r2,4(r6)
   24f4c:	210b883a 	add	r5,r4,r4
   24f50:	294b883a 	add	r5,r5,r5
   24f54:	2009d0ba 	srai	r4,r4,2
   24f58:	294b883a 	add	r5,r5,r5
   24f5c:	298b883a 	add	r5,r5,r6
   24f60:	2a000217 	ldw	r8,8(r5)
   24f64:	3908983a 	sll	r4,r7,r4
   24f68:	81400315 	stw	r5,12(r16)
   24f6c:	82000215 	stw	r8,8(r16)
   24f70:	2088b03a 	or	r4,r4,r2
   24f74:	2c000215 	stw	r16,8(r5)
   24f78:	31000115 	stw	r4,4(r6)
   24f7c:	44000315 	stw	r16,12(r8)
   24f80:	1805d0ba 	srai	r2,r3,2
   24f84:	01400044 	movi	r5,1
   24f88:	288a983a 	sll	r5,r5,r2
   24f8c:	21404336 	bltu	r4,r5,2509c <_malloc_r+0x304>
   24f90:	2144703a 	and	r2,r4,r5
   24f94:	10000a1e 	bne	r2,zero,24fc0 <_malloc_r+0x228>
   24f98:	00bfff04 	movi	r2,-4
   24f9c:	294b883a 	add	r5,r5,r5
   24fa0:	1886703a 	and	r3,r3,r2
   24fa4:	2144703a 	and	r2,r4,r5
   24fa8:	18c00104 	addi	r3,r3,4
   24fac:	1000041e 	bne	r2,zero,24fc0 <_malloc_r+0x228>
   24fb0:	294b883a 	add	r5,r5,r5
   24fb4:	2144703a 	and	r2,r4,r5
   24fb8:	18c00104 	addi	r3,r3,4
   24fbc:	103ffc26 	beq	r2,zero,24fb0 <__alt_data_end+0xfffe8a90>
   24fc0:	023fff04 	movi	r8,-4
   24fc4:	01c003c4 	movi	r7,15
   24fc8:	18c5883a 	add	r2,r3,r3
   24fcc:	1085883a 	add	r2,r2,r2
   24fd0:	1085883a 	add	r2,r2,r2
   24fd4:	9895883a 	add	r10,r19,r2
   24fd8:	52c00304 	addi	r11,r10,12
   24fdc:	1819883a 	mov	r12,r3
   24fe0:	5c000017 	ldw	r16,0(r11)
   24fe4:	59bffd04 	addi	r6,r11,-12
   24fe8:	8180041e 	bne	r16,r6,24ffc <_malloc_r+0x264>
   24fec:	0000ce06 	br	25328 <_malloc_r+0x590>
   24ff0:	2000d70e 	bge	r4,zero,25350 <_malloc_r+0x5b8>
   24ff4:	84000317 	ldw	r16,12(r16)
   24ff8:	8180cb26 	beq	r16,r6,25328 <_malloc_r+0x590>
   24ffc:	80800117 	ldw	r2,4(r16)
   25000:	1204703a 	and	r2,r2,r8
   25004:	1449c83a 	sub	r4,r2,r17
   25008:	393ff90e 	bge	r7,r4,24ff0 <__alt_data_end+0xfffe8ad0>
   2500c:	80800317 	ldw	r2,12(r16)
   25010:	80c00217 	ldw	r3,8(r16)
   25014:	89400054 	ori	r5,r17,1
   25018:	81400115 	stw	r5,4(r16)
   2501c:	18800315 	stw	r2,12(r3)
   25020:	10c00215 	stw	r3,8(r2)
   25024:	8463883a 	add	r17,r16,r17
   25028:	9c400515 	stw	r17,20(r19)
   2502c:	9c400415 	stw	r17,16(r19)
   25030:	20800054 	ori	r2,r4,1
   25034:	88800115 	stw	r2,4(r17)
   25038:	8a400315 	stw	r9,12(r17)
   2503c:	8a400215 	stw	r9,8(r17)
   25040:	8923883a 	add	r17,r17,r4
   25044:	89000015 	stw	r4,0(r17)
   25048:	9009883a 	mov	r4,r18
   2504c:	002d2000 	call	2d200 <__malloc_unlock>
   25050:	80800204 	addi	r2,r16,8
   25054:	003f7d06 	br	24e4c <__alt_data_end+0xfffe892c>
   25058:	00800304 	movi	r2,12
   2505c:	90800015 	stw	r2,0(r18)
   25060:	0005883a 	mov	r2,zero
   25064:	003f7906 	br	24e4c <__alt_data_end+0xfffe892c>
   25068:	01401f84 	movi	r5,126
   2506c:	01c00fc4 	movi	r7,63
   25070:	003f8d06 	br	24ea8 <__alt_data_end+0xfffe8988>
   25074:	81000317 	ldw	r4,12(r16)
   25078:	003f6a06 	br	24e24 <__alt_data_end+0xfffe8904>
   2507c:	81c5883a 	add	r2,r16,r7
   25080:	10c00117 	ldw	r3,4(r2)
   25084:	9009883a 	mov	r4,r18
   25088:	18c00054 	ori	r3,r3,1
   2508c:	10c00115 	stw	r3,4(r2)
   25090:	002d2000 	call	2d200 <__malloc_unlock>
   25094:	80800204 	addi	r2,r16,8
   25098:	003f6c06 	br	24e4c <__alt_data_end+0xfffe892c>
   2509c:	9c000217 	ldw	r16,8(r19)
   250a0:	00bfff04 	movi	r2,-4
   250a4:	85800117 	ldw	r22,4(r16)
   250a8:	b0ac703a 	and	r22,r22,r2
   250ac:	b4400336 	bltu	r22,r17,250bc <_malloc_r+0x324>
   250b0:	b445c83a 	sub	r2,r22,r17
   250b4:	00c003c4 	movi	r3,15
   250b8:	18805d16 	blt	r3,r2,25230 <_malloc_r+0x498>
   250bc:	05c000f4 	movhi	r23,3
   250c0:	008000f4 	movhi	r2,3
   250c4:	bdc76304 	addi	r23,r23,7564
   250c8:	108e6104 	addi	r2,r2,14724
   250cc:	15400017 	ldw	r21,0(r2)
   250d0:	b9000017 	ldw	r4,0(r23)
   250d4:	00ffffc4 	movi	r3,-1
   250d8:	858d883a 	add	r6,r16,r22
   250dc:	8d6b883a 	add	r21,r17,r21
   250e0:	20c0e426 	beq	r4,r3,25474 <_malloc_r+0x6dc>
   250e4:	ad4403c4 	addi	r21,r21,4111
   250e8:	00fc0004 	movi	r3,-4096
   250ec:	a8ea703a 	and	r21,r21,r3
   250f0:	9009883a 	mov	r4,r18
   250f4:	a80b883a 	mov	r5,r21
   250f8:	d9800015 	stw	r6,0(sp)
   250fc:	00269400 	call	26940 <_sbrk_r>
   25100:	00ffffc4 	movi	r3,-1
   25104:	1029883a 	mov	r20,r2
   25108:	d9800017 	ldw	r6,0(sp)
   2510c:	10c0a426 	beq	r2,r3,253a0 <_malloc_r+0x608>
   25110:	1180a236 	bltu	r2,r6,2539c <_malloc_r+0x604>
   25114:	070000f4 	movhi	fp,3
   25118:	e70e6a04 	addi	fp,fp,14760
   2511c:	e0c00017 	ldw	r3,0(fp)
   25120:	a8c7883a 	add	r3,r21,r3
   25124:	e0c00015 	stw	r3,0(fp)
   25128:	3500da26 	beq	r6,r20,25494 <_malloc_r+0x6fc>
   2512c:	b9000017 	ldw	r4,0(r23)
   25130:	00bfffc4 	movi	r2,-1
   25134:	2080e426 	beq	r4,r2,254c8 <_malloc_r+0x730>
   25138:	a185c83a 	sub	r2,r20,r6
   2513c:	1885883a 	add	r2,r3,r2
   25140:	e0800015 	stw	r2,0(fp)
   25144:	a0c001cc 	andi	r3,r20,7
   25148:	1800b526 	beq	r3,zero,25420 <_malloc_r+0x688>
   2514c:	a0e9c83a 	sub	r20,r20,r3
   25150:	00840204 	movi	r2,4104
   25154:	a5000204 	addi	r20,r20,8
   25158:	10c7c83a 	sub	r3,r2,r3
   2515c:	a545883a 	add	r2,r20,r21
   25160:	1083ffcc 	andi	r2,r2,4095
   25164:	18abc83a 	sub	r21,r3,r2
   25168:	9009883a 	mov	r4,r18
   2516c:	a80b883a 	mov	r5,r21
   25170:	00269400 	call	26940 <_sbrk_r>
   25174:	00ffffc4 	movi	r3,-1
   25178:	10c0d026 	beq	r2,r3,254bc <_malloc_r+0x724>
   2517c:	1507c83a 	sub	r3,r2,r20
   25180:	a8c7883a 	add	r3,r21,r3
   25184:	18c00054 	ori	r3,r3,1
   25188:	e0800017 	ldw	r2,0(fp)
   2518c:	9d000215 	stw	r20,8(r19)
   25190:	a0c00115 	stw	r3,4(r20)
   25194:	a887883a 	add	r3,r21,r2
   25198:	e0c00015 	stw	r3,0(fp)
   2519c:	84c00e26 	beq	r16,r19,251d8 <_malloc_r+0x440>
   251a0:	018003c4 	movi	r6,15
   251a4:	3580a02e 	bgeu	r6,r22,25428 <_malloc_r+0x690>
   251a8:	81400117 	ldw	r5,4(r16)
   251ac:	013ffe04 	movi	r4,-8
   251b0:	b0bffd04 	addi	r2,r22,-12
   251b4:	1104703a 	and	r2,r2,r4
   251b8:	2900004c 	andi	r4,r5,1
   251bc:	1108b03a 	or	r4,r2,r4
   251c0:	81000115 	stw	r4,4(r16)
   251c4:	01400144 	movi	r5,5
   251c8:	8089883a 	add	r4,r16,r2
   251cc:	21400115 	stw	r5,4(r4)
   251d0:	21400215 	stw	r5,8(r4)
   251d4:	3080c036 	bltu	r6,r2,254d8 <_malloc_r+0x740>
   251d8:	008000f4 	movhi	r2,3
   251dc:	108e6004 	addi	r2,r2,14720
   251e0:	11000017 	ldw	r4,0(r2)
   251e4:	20c0012e 	bgeu	r4,r3,251ec <_malloc_r+0x454>
   251e8:	10c00015 	stw	r3,0(r2)
   251ec:	008000f4 	movhi	r2,3
   251f0:	108e5f04 	addi	r2,r2,14716
   251f4:	11000017 	ldw	r4,0(r2)
   251f8:	9c000217 	ldw	r16,8(r19)
   251fc:	20c0012e 	bgeu	r4,r3,25204 <_malloc_r+0x46c>
   25200:	10c00015 	stw	r3,0(r2)
   25204:	80c00117 	ldw	r3,4(r16)
   25208:	00bfff04 	movi	r2,-4
   2520c:	1886703a 	and	r3,r3,r2
   25210:	1c45c83a 	sub	r2,r3,r17
   25214:	1c400236 	bltu	r3,r17,25220 <_malloc_r+0x488>
   25218:	00c003c4 	movi	r3,15
   2521c:	18800416 	blt	r3,r2,25230 <_malloc_r+0x498>
   25220:	9009883a 	mov	r4,r18
   25224:	002d2000 	call	2d200 <__malloc_unlock>
   25228:	0005883a 	mov	r2,zero
   2522c:	003f0706 	br	24e4c <__alt_data_end+0xfffe892c>
   25230:	88c00054 	ori	r3,r17,1
   25234:	80c00115 	stw	r3,4(r16)
   25238:	8463883a 	add	r17,r16,r17
   2523c:	10800054 	ori	r2,r2,1
   25240:	9c400215 	stw	r17,8(r19)
   25244:	88800115 	stw	r2,4(r17)
   25248:	9009883a 	mov	r4,r18
   2524c:	002d2000 	call	2d200 <__malloc_unlock>
   25250:	80800204 	addi	r2,r16,8
   25254:	003efd06 	br	24e4c <__alt_data_end+0xfffe892c>
   25258:	00800504 	movi	r2,20
   2525c:	10c0482e 	bgeu	r2,r3,25380 <_malloc_r+0x5e8>
   25260:	00801504 	movi	r2,84
   25264:	10c06836 	bltu	r2,r3,25408 <_malloc_r+0x670>
   25268:	8806d33a 	srli	r3,r17,12
   2526c:	19c01b84 	addi	r7,r3,110
   25270:	39cb883a 	add	r5,r7,r7
   25274:	003f0c06 	br	24ea8 <__alt_data_end+0xfffe8988>
   25278:	3804d27a 	srli	r2,r7,9
   2527c:	01000104 	movi	r4,4
   25280:	2080422e 	bgeu	r4,r2,2538c <_malloc_r+0x5f4>
   25284:	01000504 	movi	r4,20
   25288:	20807c36 	bltu	r4,r2,2547c <_malloc_r+0x6e4>
   2528c:	110016c4 	addi	r4,r2,91
   25290:	210b883a 	add	r5,r4,r4
   25294:	294b883a 	add	r5,r5,r5
   25298:	294b883a 	add	r5,r5,r5
   2529c:	994b883a 	add	r5,r19,r5
   252a0:	28800217 	ldw	r2,8(r5)
   252a4:	020000f4 	movhi	r8,3
   252a8:	4201ab04 	addi	r8,r8,1708
   252ac:	11406326 	beq	r2,r5,2543c <_malloc_r+0x6a4>
   252b0:	01bfff04 	movi	r6,-4
   252b4:	11000117 	ldw	r4,4(r2)
   252b8:	2188703a 	and	r4,r4,r6
   252bc:	3900022e 	bgeu	r7,r4,252c8 <_malloc_r+0x530>
   252c0:	10800217 	ldw	r2,8(r2)
   252c4:	28bffb1e 	bne	r5,r2,252b4 <__alt_data_end+0xfffe8d94>
   252c8:	11800317 	ldw	r6,12(r2)
   252cc:	99000117 	ldw	r4,4(r19)
   252d0:	81800315 	stw	r6,12(r16)
   252d4:	80800215 	stw	r2,8(r16)
   252d8:	34000215 	stw	r16,8(r6)
   252dc:	14000315 	stw	r16,12(r2)
   252e0:	003f2706 	br	24f80 <__alt_data_end+0xfffe8a60>
   252e4:	88c00054 	ori	r3,r17,1
   252e8:	80c00115 	stw	r3,4(r16)
   252ec:	8463883a 	add	r17,r16,r17
   252f0:	34400515 	stw	r17,20(r6)
   252f4:	34400415 	stw	r17,16(r6)
   252f8:	10c00054 	ori	r3,r2,1
   252fc:	8a400315 	stw	r9,12(r17)
   25300:	8a400215 	stw	r9,8(r17)
   25304:	88c00115 	stw	r3,4(r17)
   25308:	88a3883a 	add	r17,r17,r2
   2530c:	88800015 	stw	r2,0(r17)
   25310:	9009883a 	mov	r4,r18
   25314:	002d2000 	call	2d200 <__malloc_unlock>
   25318:	80800204 	addi	r2,r16,8
   2531c:	003ecb06 	br	24e4c <__alt_data_end+0xfffe892c>
   25320:	31000117 	ldw	r4,4(r6)
   25324:	003f1606 	br	24f80 <__alt_data_end+0xfffe8a60>
   25328:	63000044 	addi	r12,r12,1
   2532c:	608000cc 	andi	r2,r12,3
   25330:	5ac00204 	addi	r11,r11,8
   25334:	103f2a1e 	bne	r2,zero,24fe0 <__alt_data_end+0xfffe8ac0>
   25338:	00002106 	br	253c0 <_malloc_r+0x628>
   2533c:	80800204 	addi	r2,r16,8
   25340:	84000517 	ldw	r16,20(r16)
   25344:	143eb31e 	bne	r2,r16,24e14 <__alt_data_end+0xfffe88f4>
   25348:	18c00084 	addi	r3,r3,2
   2534c:	003eec06 	br	24f00 <__alt_data_end+0xfffe89e0>
   25350:	8085883a 	add	r2,r16,r2
   25354:	10c00117 	ldw	r3,4(r2)
   25358:	81000317 	ldw	r4,12(r16)
   2535c:	81400217 	ldw	r5,8(r16)
   25360:	18c00054 	ori	r3,r3,1
   25364:	10c00115 	stw	r3,4(r2)
   25368:	29000315 	stw	r4,12(r5)
   2536c:	21400215 	stw	r5,8(r4)
   25370:	9009883a 	mov	r4,r18
   25374:	002d2000 	call	2d200 <__malloc_unlock>
   25378:	80800204 	addi	r2,r16,8
   2537c:	003eb306 	br	24e4c <__alt_data_end+0xfffe892c>
   25380:	19c016c4 	addi	r7,r3,91
   25384:	39cb883a 	add	r5,r7,r7
   25388:	003ec706 	br	24ea8 <__alt_data_end+0xfffe8988>
   2538c:	3804d1ba 	srli	r2,r7,6
   25390:	11000e04 	addi	r4,r2,56
   25394:	210b883a 	add	r5,r4,r4
   25398:	003fbe06 	br	25294 <__alt_data_end+0xfffe8d74>
   2539c:	84ff5d26 	beq	r16,r19,25114 <__alt_data_end+0xfffe8bf4>
   253a0:	9c000217 	ldw	r16,8(r19)
   253a4:	00bfff04 	movi	r2,-4
   253a8:	80c00117 	ldw	r3,4(r16)
   253ac:	1886703a 	and	r3,r3,r2
   253b0:	003f9706 	br	25210 <__alt_data_end+0xfffe8cf0>
   253b4:	52800017 	ldw	r10,0(r10)
   253b8:	18ffffc4 	addi	r3,r3,-1
   253bc:	50805c1e 	bne	r10,r2,25530 <_malloc_r+0x798>
   253c0:	190000cc 	andi	r4,r3,3
   253c4:	50bffe04 	addi	r2,r10,-8
   253c8:	203ffa1e 	bne	r4,zero,253b4 <__alt_data_end+0xfffe8e94>
   253cc:	98800117 	ldw	r2,4(r19)
   253d0:	0146303a 	nor	r3,zero,r5
   253d4:	1884703a 	and	r2,r3,r2
   253d8:	98800115 	stw	r2,4(r19)
   253dc:	294b883a 	add	r5,r5,r5
   253e0:	117f2e36 	bltu	r2,r5,2509c <__alt_data_end+0xfffe8b7c>
   253e4:	283f2d26 	beq	r5,zero,2509c <__alt_data_end+0xfffe8b7c>
   253e8:	1146703a 	and	r3,r2,r5
   253ec:	1800521e 	bne	r3,zero,25538 <_malloc_r+0x7a0>
   253f0:	6007883a 	mov	r3,r12
   253f4:	294b883a 	add	r5,r5,r5
   253f8:	1148703a 	and	r4,r2,r5
   253fc:	18c00104 	addi	r3,r3,4
   25400:	203ffc26 	beq	r4,zero,253f4 <__alt_data_end+0xfffe8ed4>
   25404:	003ef006 	br	24fc8 <__alt_data_end+0xfffe8aa8>
   25408:	00805504 	movi	r2,340
   2540c:	10c01336 	bltu	r2,r3,2545c <_malloc_r+0x6c4>
   25410:	8806d3fa 	srli	r3,r17,15
   25414:	19c01dc4 	addi	r7,r3,119
   25418:	39cb883a 	add	r5,r7,r7
   2541c:	003ea206 	br	24ea8 <__alt_data_end+0xfffe8988>
   25420:	00c40004 	movi	r3,4096
   25424:	003f4d06 	br	2515c <__alt_data_end+0xfffe8c3c>
   25428:	00800044 	movi	r2,1
   2542c:	a0800115 	stw	r2,4(r20)
   25430:	a021883a 	mov	r16,r20
   25434:	0007883a 	mov	r3,zero
   25438:	003f7506 	br	25210 <__alt_data_end+0xfffe8cf0>
   2543c:	200bd0ba 	srai	r5,r4,2
   25440:	01800044 	movi	r6,1
   25444:	41000117 	ldw	r4,4(r8)
   25448:	314a983a 	sll	r5,r6,r5
   2544c:	100d883a 	mov	r6,r2
   25450:	2908b03a 	or	r4,r5,r4
   25454:	41000115 	stw	r4,4(r8)
   25458:	003f9d06 	br	252d0 <__alt_data_end+0xfffe8db0>
   2545c:	00815504 	movi	r2,1364
   25460:	10c01336 	bltu	r2,r3,254b0 <_malloc_r+0x718>
   25464:	8806d4ba 	srli	r3,r17,18
   25468:	19c01f04 	addi	r7,r3,124
   2546c:	39cb883a 	add	r5,r7,r7
   25470:	003e8d06 	br	24ea8 <__alt_data_end+0xfffe8988>
   25474:	ad400404 	addi	r21,r21,16
   25478:	003f1d06 	br	250f0 <__alt_data_end+0xfffe8bd0>
   2547c:	01001504 	movi	r4,84
   25480:	20801c36 	bltu	r4,r2,254f4 <_malloc_r+0x75c>
   25484:	3804d33a 	srli	r2,r7,12
   25488:	11001b84 	addi	r4,r2,110
   2548c:	210b883a 	add	r5,r4,r4
   25490:	003f8006 	br	25294 <__alt_data_end+0xfffe8d74>
   25494:	3083ffcc 	andi	r2,r6,4095
   25498:	103f241e 	bne	r2,zero,2512c <__alt_data_end+0xfffe8c0c>
   2549c:	99000217 	ldw	r4,8(r19)
   254a0:	ad85883a 	add	r2,r21,r22
   254a4:	10800054 	ori	r2,r2,1
   254a8:	20800115 	stw	r2,4(r4)
   254ac:	003f4a06 	br	251d8 <__alt_data_end+0xfffe8cb8>
   254b0:	01403f04 	movi	r5,252
   254b4:	01c01f84 	movi	r7,126
   254b8:	003e7b06 	br	24ea8 <__alt_data_end+0xfffe8988>
   254bc:	00c00044 	movi	r3,1
   254c0:	002b883a 	mov	r21,zero
   254c4:	003f3006 	br	25188 <__alt_data_end+0xfffe8c68>
   254c8:	008000f4 	movhi	r2,3
   254cc:	10876304 	addi	r2,r2,7564
   254d0:	15000015 	stw	r20,0(r2)
   254d4:	003f1b06 	br	25144 <__alt_data_end+0xfffe8c24>
   254d8:	9009883a 	mov	r4,r18
   254dc:	81400204 	addi	r5,r16,8
   254e0:	00246a00 	call	246a0 <_free_r>
   254e4:	008000f4 	movhi	r2,3
   254e8:	108e6a04 	addi	r2,r2,14760
   254ec:	10c00017 	ldw	r3,0(r2)
   254f0:	003f3906 	br	251d8 <__alt_data_end+0xfffe8cb8>
   254f4:	01005504 	movi	r4,340
   254f8:	20800436 	bltu	r4,r2,2550c <_malloc_r+0x774>
   254fc:	3804d3fa 	srli	r2,r7,15
   25500:	11001dc4 	addi	r4,r2,119
   25504:	210b883a 	add	r5,r4,r4
   25508:	003f6206 	br	25294 <__alt_data_end+0xfffe8d74>
   2550c:	01015504 	movi	r4,1364
   25510:	20800436 	bltu	r4,r2,25524 <_malloc_r+0x78c>
   25514:	3804d4ba 	srli	r2,r7,18
   25518:	11001f04 	addi	r4,r2,124
   2551c:	210b883a 	add	r5,r4,r4
   25520:	003f5c06 	br	25294 <__alt_data_end+0xfffe8d74>
   25524:	01403f04 	movi	r5,252
   25528:	01001f84 	movi	r4,126
   2552c:	003f5906 	br	25294 <__alt_data_end+0xfffe8d74>
   25530:	98800117 	ldw	r2,4(r19)
   25534:	003fa906 	br	253dc <__alt_data_end+0xfffe8ebc>
   25538:	6007883a 	mov	r3,r12
   2553c:	003ea206 	br	24fc8 <__alt_data_end+0xfffe8aa8>

00025540 <memchr>:
   25540:	208000cc 	andi	r2,r4,3
   25544:	280f883a 	mov	r7,r5
   25548:	10003526 	beq	r2,zero,25620 <memchr+0xe0>
   2554c:	30bfffc4 	addi	r2,r6,-1
   25550:	30001b26 	beq	r6,zero,255c0 <memchr+0x80>
   25554:	21800003 	ldbu	r6,0(r4)
   25558:	28c03fcc 	andi	r3,r5,255
   2555c:	30c01a26 	beq	r6,r3,255c8 <memchr+0x88>
   25560:	180d883a 	mov	r6,r3
   25564:	00000406 	br	25578 <memchr+0x38>
   25568:	10001526 	beq	r2,zero,255c0 <memchr+0x80>
   2556c:	20c00003 	ldbu	r3,0(r4)
   25570:	10bfffc4 	addi	r2,r2,-1
   25574:	19801426 	beq	r3,r6,255c8 <memchr+0x88>
   25578:	21000044 	addi	r4,r4,1
   2557c:	20c000cc 	andi	r3,r4,3
   25580:	183ff91e 	bne	r3,zero,25568 <__alt_data_end+0xfffe9048>
   25584:	024000c4 	movi	r9,3
   25588:	48801136 	bltu	r9,r2,255d0 <memchr+0x90>
   2558c:	10000c26 	beq	r2,zero,255c0 <memchr+0x80>
   25590:	20c00003 	ldbu	r3,0(r4)
   25594:	29403fcc 	andi	r5,r5,255
   25598:	19400b26 	beq	r3,r5,255c8 <memchr+0x88>
   2559c:	20c00044 	addi	r3,r4,1
   255a0:	2085883a 	add	r2,r4,r2
   255a4:	39803fcc 	andi	r6,r7,255
   255a8:	00000306 	br	255b8 <memchr+0x78>
   255ac:	18c00044 	addi	r3,r3,1
   255b0:	197fffc3 	ldbu	r5,-1(r3)
   255b4:	29800426 	beq	r5,r6,255c8 <memchr+0x88>
   255b8:	1809883a 	mov	r4,r3
   255bc:	18bffb1e 	bne	r3,r2,255ac <__alt_data_end+0xfffe908c>
   255c0:	0005883a 	mov	r2,zero
   255c4:	f800283a 	ret
   255c8:	2005883a 	mov	r2,r4
   255cc:	f800283a 	ret
   255d0:	28c03fcc 	andi	r3,r5,255
   255d4:	1810923a 	slli	r8,r3,8
   255d8:	02ffbff4 	movhi	r11,65279
   255dc:	02a02074 	movhi	r10,32897
   255e0:	40c6b03a 	or	r3,r8,r3
   255e4:	1810943a 	slli	r8,r3,16
   255e8:	5affbfc4 	addi	r11,r11,-257
   255ec:	52a02004 	addi	r10,r10,-32640
   255f0:	40d0b03a 	or	r8,r8,r3
   255f4:	20c00017 	ldw	r3,0(r4)
   255f8:	40c6f03a 	xor	r3,r8,r3
   255fc:	1acd883a 	add	r6,r3,r11
   25600:	00c6303a 	nor	r3,zero,r3
   25604:	30c6703a 	and	r3,r6,r3
   25608:	1a86703a 	and	r3,r3,r10
   2560c:	183fdf1e 	bne	r3,zero,2558c <__alt_data_end+0xfffe906c>
   25610:	10bfff04 	addi	r2,r2,-4
   25614:	21000104 	addi	r4,r4,4
   25618:	48bff636 	bltu	r9,r2,255f4 <__alt_data_end+0xfffe90d4>
   2561c:	003fdb06 	br	2558c <__alt_data_end+0xfffe906c>
   25620:	3005883a 	mov	r2,r6
   25624:	003fd706 	br	25584 <__alt_data_end+0xfffe9064>

00025628 <memcpy>:
   25628:	deffff04 	addi	sp,sp,-4
   2562c:	dc000015 	stw	r16,0(sp)
   25630:	00c003c4 	movi	r3,15
   25634:	2005883a 	mov	r2,r4
   25638:	1980432e 	bgeu	r3,r6,25748 <memcpy+0x120>
   2563c:	2146b03a 	or	r3,r4,r5
   25640:	18c000cc 	andi	r3,r3,3
   25644:	1800421e 	bne	r3,zero,25750 <memcpy+0x128>
   25648:	343ffc04 	addi	r16,r6,-16
   2564c:	8020d13a 	srli	r16,r16,4
   25650:	28c00104 	addi	r3,r5,4
   25654:	23400104 	addi	r13,r4,4
   25658:	801e913a 	slli	r15,r16,4
   2565c:	2b000204 	addi	r12,r5,8
   25660:	22c00204 	addi	r11,r4,8
   25664:	7bc00504 	addi	r15,r15,20
   25668:	2a800304 	addi	r10,r5,12
   2566c:	22400304 	addi	r9,r4,12
   25670:	2bdf883a 	add	r15,r5,r15
   25674:	2811883a 	mov	r8,r5
   25678:	200f883a 	mov	r7,r4
   2567c:	41000017 	ldw	r4,0(r8)
   25680:	39c00404 	addi	r7,r7,16
   25684:	18c00404 	addi	r3,r3,16
   25688:	393ffc15 	stw	r4,-16(r7)
   2568c:	1bbffc17 	ldw	r14,-16(r3)
   25690:	6b400404 	addi	r13,r13,16
   25694:	5ac00404 	addi	r11,r11,16
   25698:	6bbffc15 	stw	r14,-16(r13)
   2569c:	63800017 	ldw	r14,0(r12)
   256a0:	4a400404 	addi	r9,r9,16
   256a4:	42000404 	addi	r8,r8,16
   256a8:	5bbffc15 	stw	r14,-16(r11)
   256ac:	53800017 	ldw	r14,0(r10)
   256b0:	63000404 	addi	r12,r12,16
   256b4:	52800404 	addi	r10,r10,16
   256b8:	4bbffc15 	stw	r14,-16(r9)
   256bc:	1bffef1e 	bne	r3,r15,2567c <__alt_data_end+0xfffe915c>
   256c0:	81c00044 	addi	r7,r16,1
   256c4:	380e913a 	slli	r7,r7,4
   256c8:	310003cc 	andi	r4,r6,15
   256cc:	02c000c4 	movi	r11,3
   256d0:	11c7883a 	add	r3,r2,r7
   256d4:	29cb883a 	add	r5,r5,r7
   256d8:	59001f2e 	bgeu	r11,r4,25758 <memcpy+0x130>
   256dc:	1813883a 	mov	r9,r3
   256e0:	2811883a 	mov	r8,r5
   256e4:	200f883a 	mov	r7,r4
   256e8:	42800017 	ldw	r10,0(r8)
   256ec:	4a400104 	addi	r9,r9,4
   256f0:	39ffff04 	addi	r7,r7,-4
   256f4:	4abfff15 	stw	r10,-4(r9)
   256f8:	42000104 	addi	r8,r8,4
   256fc:	59fffa36 	bltu	r11,r7,256e8 <__alt_data_end+0xfffe91c8>
   25700:	213fff04 	addi	r4,r4,-4
   25704:	2008d0ba 	srli	r4,r4,2
   25708:	318000cc 	andi	r6,r6,3
   2570c:	21000044 	addi	r4,r4,1
   25710:	2109883a 	add	r4,r4,r4
   25714:	2109883a 	add	r4,r4,r4
   25718:	1907883a 	add	r3,r3,r4
   2571c:	290b883a 	add	r5,r5,r4
   25720:	30000626 	beq	r6,zero,2573c <memcpy+0x114>
   25724:	198d883a 	add	r6,r3,r6
   25728:	29c00003 	ldbu	r7,0(r5)
   2572c:	18c00044 	addi	r3,r3,1
   25730:	29400044 	addi	r5,r5,1
   25734:	19ffffc5 	stb	r7,-1(r3)
   25738:	19bffb1e 	bne	r3,r6,25728 <__alt_data_end+0xfffe9208>
   2573c:	dc000017 	ldw	r16,0(sp)
   25740:	dec00104 	addi	sp,sp,4
   25744:	f800283a 	ret
   25748:	2007883a 	mov	r3,r4
   2574c:	003ff406 	br	25720 <__alt_data_end+0xfffe9200>
   25750:	2007883a 	mov	r3,r4
   25754:	003ff306 	br	25724 <__alt_data_end+0xfffe9204>
   25758:	200d883a 	mov	r6,r4
   2575c:	003ff006 	br	25720 <__alt_data_end+0xfffe9200>

00025760 <memset>:
   25760:	20c000cc 	andi	r3,r4,3
   25764:	2005883a 	mov	r2,r4
   25768:	18004326 	beq	r3,zero,25878 <memset+0x118>
   2576c:	31ffffc4 	addi	r7,r6,-1
   25770:	30004026 	beq	r6,zero,25874 <memset+0x114>
   25774:	2813883a 	mov	r9,r5
   25778:	200d883a 	mov	r6,r4
   2577c:	2007883a 	mov	r3,r4
   25780:	00000406 	br	25794 <memset+0x34>
   25784:	3a3fffc4 	addi	r8,r7,-1
   25788:	31800044 	addi	r6,r6,1
   2578c:	38003926 	beq	r7,zero,25874 <memset+0x114>
   25790:	400f883a 	mov	r7,r8
   25794:	18c00044 	addi	r3,r3,1
   25798:	32400005 	stb	r9,0(r6)
   2579c:	1a0000cc 	andi	r8,r3,3
   257a0:	403ff81e 	bne	r8,zero,25784 <__alt_data_end+0xfffe9264>
   257a4:	010000c4 	movi	r4,3
   257a8:	21c02d2e 	bgeu	r4,r7,25860 <memset+0x100>
   257ac:	29803fcc 	andi	r6,r5,255
   257b0:	3008923a 	slli	r4,r6,8
   257b4:	218cb03a 	or	r6,r4,r6
   257b8:	3008943a 	slli	r4,r6,16
   257bc:	218cb03a 	or	r6,r4,r6
   257c0:	010003c4 	movi	r4,15
   257c4:	21c0182e 	bgeu	r4,r7,25828 <memset+0xc8>
   257c8:	3b3ffc04 	addi	r12,r7,-16
   257cc:	6018d13a 	srli	r12,r12,4
   257d0:	1a000104 	addi	r8,r3,4
   257d4:	1ac00204 	addi	r11,r3,8
   257d8:	6008913a 	slli	r4,r12,4
   257dc:	1a800304 	addi	r10,r3,12
   257e0:	1813883a 	mov	r9,r3
   257e4:	21000504 	addi	r4,r4,20
   257e8:	1909883a 	add	r4,r3,r4
   257ec:	49800015 	stw	r6,0(r9)
   257f0:	41800015 	stw	r6,0(r8)
   257f4:	59800015 	stw	r6,0(r11)
   257f8:	51800015 	stw	r6,0(r10)
   257fc:	42000404 	addi	r8,r8,16
   25800:	4a400404 	addi	r9,r9,16
   25804:	5ac00404 	addi	r11,r11,16
   25808:	52800404 	addi	r10,r10,16
   2580c:	413ff71e 	bne	r8,r4,257ec <__alt_data_end+0xfffe92cc>
   25810:	63000044 	addi	r12,r12,1
   25814:	6018913a 	slli	r12,r12,4
   25818:	39c003cc 	andi	r7,r7,15
   2581c:	010000c4 	movi	r4,3
   25820:	1b07883a 	add	r3,r3,r12
   25824:	21c00e2e 	bgeu	r4,r7,25860 <memset+0x100>
   25828:	1813883a 	mov	r9,r3
   2582c:	3811883a 	mov	r8,r7
   25830:	010000c4 	movi	r4,3
   25834:	49800015 	stw	r6,0(r9)
   25838:	423fff04 	addi	r8,r8,-4
   2583c:	4a400104 	addi	r9,r9,4
   25840:	223ffc36 	bltu	r4,r8,25834 <__alt_data_end+0xfffe9314>
   25844:	393fff04 	addi	r4,r7,-4
   25848:	2008d0ba 	srli	r4,r4,2
   2584c:	39c000cc 	andi	r7,r7,3
   25850:	21000044 	addi	r4,r4,1
   25854:	2109883a 	add	r4,r4,r4
   25858:	2109883a 	add	r4,r4,r4
   2585c:	1907883a 	add	r3,r3,r4
   25860:	38000426 	beq	r7,zero,25874 <memset+0x114>
   25864:	19cf883a 	add	r7,r3,r7
   25868:	19400005 	stb	r5,0(r3)
   2586c:	18c00044 	addi	r3,r3,1
   25870:	19fffd1e 	bne	r3,r7,25868 <__alt_data_end+0xfffe9348>
   25874:	f800283a 	ret
   25878:	2007883a 	mov	r3,r4
   2587c:	300f883a 	mov	r7,r6
   25880:	003fc806 	br	257a4 <__alt_data_end+0xfffe9284>

00025884 <_Balloc>:
   25884:	20801317 	ldw	r2,76(r4)
   25888:	defffc04 	addi	sp,sp,-16
   2588c:	dc400115 	stw	r17,4(sp)
   25890:	dc000015 	stw	r16,0(sp)
   25894:	dfc00315 	stw	ra,12(sp)
   25898:	dc800215 	stw	r18,8(sp)
   2589c:	2023883a 	mov	r17,r4
   258a0:	2821883a 	mov	r16,r5
   258a4:	10000f26 	beq	r2,zero,258e4 <_Balloc+0x60>
   258a8:	8407883a 	add	r3,r16,r16
   258ac:	18c7883a 	add	r3,r3,r3
   258b0:	10c7883a 	add	r3,r2,r3
   258b4:	18800017 	ldw	r2,0(r3)
   258b8:	10001126 	beq	r2,zero,25900 <_Balloc+0x7c>
   258bc:	11000017 	ldw	r4,0(r2)
   258c0:	19000015 	stw	r4,0(r3)
   258c4:	10000415 	stw	zero,16(r2)
   258c8:	10000315 	stw	zero,12(r2)
   258cc:	dfc00317 	ldw	ra,12(sp)
   258d0:	dc800217 	ldw	r18,8(sp)
   258d4:	dc400117 	ldw	r17,4(sp)
   258d8:	dc000017 	ldw	r16,0(sp)
   258dc:	dec00404 	addi	sp,sp,16
   258e0:	f800283a 	ret
   258e4:	01400104 	movi	r5,4
   258e8:	01800844 	movi	r6,33
   258ec:	00282180 	call	28218 <_calloc_r>
   258f0:	88801315 	stw	r2,76(r17)
   258f4:	103fec1e 	bne	r2,zero,258a8 <__alt_data_end+0xfffe9388>
   258f8:	0005883a 	mov	r2,zero
   258fc:	003ff306 	br	258cc <__alt_data_end+0xfffe93ac>
   25900:	01400044 	movi	r5,1
   25904:	2c24983a 	sll	r18,r5,r16
   25908:	8809883a 	mov	r4,r17
   2590c:	91800144 	addi	r6,r18,5
   25910:	318d883a 	add	r6,r6,r6
   25914:	318d883a 	add	r6,r6,r6
   25918:	00282180 	call	28218 <_calloc_r>
   2591c:	103ff626 	beq	r2,zero,258f8 <__alt_data_end+0xfffe93d8>
   25920:	14000115 	stw	r16,4(r2)
   25924:	14800215 	stw	r18,8(r2)
   25928:	003fe606 	br	258c4 <__alt_data_end+0xfffe93a4>

0002592c <_Bfree>:
   2592c:	28000826 	beq	r5,zero,25950 <_Bfree+0x24>
   25930:	28c00117 	ldw	r3,4(r5)
   25934:	20801317 	ldw	r2,76(r4)
   25938:	18c7883a 	add	r3,r3,r3
   2593c:	18c7883a 	add	r3,r3,r3
   25940:	10c5883a 	add	r2,r2,r3
   25944:	10c00017 	ldw	r3,0(r2)
   25948:	28c00015 	stw	r3,0(r5)
   2594c:	11400015 	stw	r5,0(r2)
   25950:	f800283a 	ret

00025954 <__multadd>:
   25954:	defff704 	addi	sp,sp,-36
   25958:	dc800215 	stw	r18,8(sp)
   2595c:	2c800417 	ldw	r18,16(r5)
   25960:	ddc00715 	stw	r23,28(sp)
   25964:	dd800615 	stw	r22,24(sp)
   25968:	dd000415 	stw	r20,16(sp)
   2596c:	dcc00315 	stw	r19,12(sp)
   25970:	dc400115 	stw	r17,4(sp)
   25974:	dc000015 	stw	r16,0(sp)
   25978:	dfc00815 	stw	ra,32(sp)
   2597c:	dd400515 	stw	r21,20(sp)
   25980:	2827883a 	mov	r19,r5
   25984:	2029883a 	mov	r20,r4
   25988:	3023883a 	mov	r17,r6
   2598c:	3821883a 	mov	r16,r7
   25990:	2d800504 	addi	r22,r5,20
   25994:	002f883a 	mov	r23,zero
   25998:	b5400017 	ldw	r21,0(r22)
   2599c:	880b883a 	mov	r5,r17
   259a0:	bdc00044 	addi	r23,r23,1
   259a4:	a93fffcc 	andi	r4,r21,65535
   259a8:	002a3dc0 	call	2a3dc <__mulsi3>
   259ac:	1421883a 	add	r16,r2,r16
   259b0:	a808d43a 	srli	r4,r21,16
   259b4:	802ad43a 	srli	r21,r16,16
   259b8:	880b883a 	mov	r5,r17
   259bc:	002a3dc0 	call	2a3dc <__mulsi3>
   259c0:	a88f883a 	add	r7,r21,r2
   259c4:	3804943a 	slli	r2,r7,16
   259c8:	80ffffcc 	andi	r3,r16,65535
   259cc:	b5800104 	addi	r22,r22,4
   259d0:	10c7883a 	add	r3,r2,r3
   259d4:	b0ffff15 	stw	r3,-4(r22)
   259d8:	3820d43a 	srli	r16,r7,16
   259dc:	bcbfee16 	blt	r23,r18,25998 <__alt_data_end+0xfffe9478>
   259e0:	80000926 	beq	r16,zero,25a08 <__multadd+0xb4>
   259e4:	98800217 	ldw	r2,8(r19)
   259e8:	9080130e 	bge	r18,r2,25a38 <__multadd+0xe4>
   259ec:	90800144 	addi	r2,r18,5
   259f0:	1085883a 	add	r2,r2,r2
   259f4:	1085883a 	add	r2,r2,r2
   259f8:	9885883a 	add	r2,r19,r2
   259fc:	14000015 	stw	r16,0(r2)
   25a00:	94800044 	addi	r18,r18,1
   25a04:	9c800415 	stw	r18,16(r19)
   25a08:	9805883a 	mov	r2,r19
   25a0c:	dfc00817 	ldw	ra,32(sp)
   25a10:	ddc00717 	ldw	r23,28(sp)
   25a14:	dd800617 	ldw	r22,24(sp)
   25a18:	dd400517 	ldw	r21,20(sp)
   25a1c:	dd000417 	ldw	r20,16(sp)
   25a20:	dcc00317 	ldw	r19,12(sp)
   25a24:	dc800217 	ldw	r18,8(sp)
   25a28:	dc400117 	ldw	r17,4(sp)
   25a2c:	dc000017 	ldw	r16,0(sp)
   25a30:	dec00904 	addi	sp,sp,36
   25a34:	f800283a 	ret
   25a38:	99400117 	ldw	r5,4(r19)
   25a3c:	a009883a 	mov	r4,r20
   25a40:	29400044 	addi	r5,r5,1
   25a44:	00258840 	call	25884 <_Balloc>
   25a48:	99800417 	ldw	r6,16(r19)
   25a4c:	99400304 	addi	r5,r19,12
   25a50:	11000304 	addi	r4,r2,12
   25a54:	31800084 	addi	r6,r6,2
   25a58:	318d883a 	add	r6,r6,r6
   25a5c:	318d883a 	add	r6,r6,r6
   25a60:	1023883a 	mov	r17,r2
   25a64:	00256280 	call	25628 <memcpy>
   25a68:	99000117 	ldw	r4,4(r19)
   25a6c:	a0c01317 	ldw	r3,76(r20)
   25a70:	2109883a 	add	r4,r4,r4
   25a74:	2109883a 	add	r4,r4,r4
   25a78:	1907883a 	add	r3,r3,r4
   25a7c:	18800017 	ldw	r2,0(r3)
   25a80:	98800015 	stw	r2,0(r19)
   25a84:	1cc00015 	stw	r19,0(r3)
   25a88:	8827883a 	mov	r19,r17
   25a8c:	003fd706 	br	259ec <__alt_data_end+0xfffe94cc>

00025a90 <__s2b>:
   25a90:	defff904 	addi	sp,sp,-28
   25a94:	dc400115 	stw	r17,4(sp)
   25a98:	dc000015 	stw	r16,0(sp)
   25a9c:	2023883a 	mov	r17,r4
   25aa0:	2821883a 	mov	r16,r5
   25aa4:	39000204 	addi	r4,r7,8
   25aa8:	01400244 	movi	r5,9
   25aac:	dcc00315 	stw	r19,12(sp)
   25ab0:	dc800215 	stw	r18,8(sp)
   25ab4:	dfc00615 	stw	ra,24(sp)
   25ab8:	dd400515 	stw	r21,20(sp)
   25abc:	dd000415 	stw	r20,16(sp)
   25ac0:	3825883a 	mov	r18,r7
   25ac4:	3027883a 	mov	r19,r6
   25ac8:	002a31c0 	call	2a31c <__divsi3>
   25acc:	00c00044 	movi	r3,1
   25ad0:	000b883a 	mov	r5,zero
   25ad4:	1880030e 	bge	r3,r2,25ae4 <__s2b+0x54>
   25ad8:	18c7883a 	add	r3,r3,r3
   25adc:	29400044 	addi	r5,r5,1
   25ae0:	18bffd16 	blt	r3,r2,25ad8 <__alt_data_end+0xfffe95b8>
   25ae4:	8809883a 	mov	r4,r17
   25ae8:	00258840 	call	25884 <_Balloc>
   25aec:	d8c00717 	ldw	r3,28(sp)
   25af0:	10c00515 	stw	r3,20(r2)
   25af4:	00c00044 	movi	r3,1
   25af8:	10c00415 	stw	r3,16(r2)
   25afc:	00c00244 	movi	r3,9
   25b00:	1cc0210e 	bge	r3,r19,25b88 <__s2b+0xf8>
   25b04:	80eb883a 	add	r21,r16,r3
   25b08:	a829883a 	mov	r20,r21
   25b0c:	84e1883a 	add	r16,r16,r19
   25b10:	a1c00007 	ldb	r7,0(r20)
   25b14:	8809883a 	mov	r4,r17
   25b18:	a5000044 	addi	r20,r20,1
   25b1c:	100b883a 	mov	r5,r2
   25b20:	01800284 	movi	r6,10
   25b24:	39fff404 	addi	r7,r7,-48
   25b28:	00259540 	call	25954 <__multadd>
   25b2c:	a43ff81e 	bne	r20,r16,25b10 <__alt_data_end+0xfffe95f0>
   25b30:	ace1883a 	add	r16,r21,r19
   25b34:	843ffe04 	addi	r16,r16,-8
   25b38:	9c800a0e 	bge	r19,r18,25b64 <__s2b+0xd4>
   25b3c:	94e5c83a 	sub	r18,r18,r19
   25b40:	84a5883a 	add	r18,r16,r18
   25b44:	81c00007 	ldb	r7,0(r16)
   25b48:	8809883a 	mov	r4,r17
   25b4c:	84000044 	addi	r16,r16,1
   25b50:	100b883a 	mov	r5,r2
   25b54:	01800284 	movi	r6,10
   25b58:	39fff404 	addi	r7,r7,-48
   25b5c:	00259540 	call	25954 <__multadd>
   25b60:	84bff81e 	bne	r16,r18,25b44 <__alt_data_end+0xfffe9624>
   25b64:	dfc00617 	ldw	ra,24(sp)
   25b68:	dd400517 	ldw	r21,20(sp)
   25b6c:	dd000417 	ldw	r20,16(sp)
   25b70:	dcc00317 	ldw	r19,12(sp)
   25b74:	dc800217 	ldw	r18,8(sp)
   25b78:	dc400117 	ldw	r17,4(sp)
   25b7c:	dc000017 	ldw	r16,0(sp)
   25b80:	dec00704 	addi	sp,sp,28
   25b84:	f800283a 	ret
   25b88:	84000284 	addi	r16,r16,10
   25b8c:	1827883a 	mov	r19,r3
   25b90:	003fe906 	br	25b38 <__alt_data_end+0xfffe9618>

00025b94 <__hi0bits>:
   25b94:	20bfffec 	andhi	r2,r4,65535
   25b98:	1000141e 	bne	r2,zero,25bec <__hi0bits+0x58>
   25b9c:	2008943a 	slli	r4,r4,16
   25ba0:	00800404 	movi	r2,16
   25ba4:	20ffc02c 	andhi	r3,r4,65280
   25ba8:	1800021e 	bne	r3,zero,25bb4 <__hi0bits+0x20>
   25bac:	2008923a 	slli	r4,r4,8
   25bb0:	10800204 	addi	r2,r2,8
   25bb4:	20fc002c 	andhi	r3,r4,61440
   25bb8:	1800021e 	bne	r3,zero,25bc4 <__hi0bits+0x30>
   25bbc:	2008913a 	slli	r4,r4,4
   25bc0:	10800104 	addi	r2,r2,4
   25bc4:	20f0002c 	andhi	r3,r4,49152
   25bc8:	1800031e 	bne	r3,zero,25bd8 <__hi0bits+0x44>
   25bcc:	2109883a 	add	r4,r4,r4
   25bd0:	10800084 	addi	r2,r2,2
   25bd4:	2109883a 	add	r4,r4,r4
   25bd8:	20000316 	blt	r4,zero,25be8 <__hi0bits+0x54>
   25bdc:	2110002c 	andhi	r4,r4,16384
   25be0:	2000041e 	bne	r4,zero,25bf4 <__hi0bits+0x60>
   25be4:	00800804 	movi	r2,32
   25be8:	f800283a 	ret
   25bec:	0005883a 	mov	r2,zero
   25bf0:	003fec06 	br	25ba4 <__alt_data_end+0xfffe9684>
   25bf4:	10800044 	addi	r2,r2,1
   25bf8:	f800283a 	ret

00025bfc <__lo0bits>:
   25bfc:	20c00017 	ldw	r3,0(r4)
   25c00:	188001cc 	andi	r2,r3,7
   25c04:	10000826 	beq	r2,zero,25c28 <__lo0bits+0x2c>
   25c08:	1880004c 	andi	r2,r3,1
   25c0c:	1000211e 	bne	r2,zero,25c94 <__lo0bits+0x98>
   25c10:	1880008c 	andi	r2,r3,2
   25c14:	1000211e 	bne	r2,zero,25c9c <__lo0bits+0xa0>
   25c18:	1806d0ba 	srli	r3,r3,2
   25c1c:	00800084 	movi	r2,2
   25c20:	20c00015 	stw	r3,0(r4)
   25c24:	f800283a 	ret
   25c28:	18bfffcc 	andi	r2,r3,65535
   25c2c:	10001326 	beq	r2,zero,25c7c <__lo0bits+0x80>
   25c30:	0005883a 	mov	r2,zero
   25c34:	19403fcc 	andi	r5,r3,255
   25c38:	2800021e 	bne	r5,zero,25c44 <__lo0bits+0x48>
   25c3c:	1806d23a 	srli	r3,r3,8
   25c40:	10800204 	addi	r2,r2,8
   25c44:	194003cc 	andi	r5,r3,15
   25c48:	2800021e 	bne	r5,zero,25c54 <__lo0bits+0x58>
   25c4c:	1806d13a 	srli	r3,r3,4
   25c50:	10800104 	addi	r2,r2,4
   25c54:	194000cc 	andi	r5,r3,3
   25c58:	2800021e 	bne	r5,zero,25c64 <__lo0bits+0x68>
   25c5c:	1806d0ba 	srli	r3,r3,2
   25c60:	10800084 	addi	r2,r2,2
   25c64:	1940004c 	andi	r5,r3,1
   25c68:	2800081e 	bne	r5,zero,25c8c <__lo0bits+0x90>
   25c6c:	1806d07a 	srli	r3,r3,1
   25c70:	1800051e 	bne	r3,zero,25c88 <__lo0bits+0x8c>
   25c74:	00800804 	movi	r2,32
   25c78:	f800283a 	ret
   25c7c:	1806d43a 	srli	r3,r3,16
   25c80:	00800404 	movi	r2,16
   25c84:	003feb06 	br	25c34 <__alt_data_end+0xfffe9714>
   25c88:	10800044 	addi	r2,r2,1
   25c8c:	20c00015 	stw	r3,0(r4)
   25c90:	f800283a 	ret
   25c94:	0005883a 	mov	r2,zero
   25c98:	f800283a 	ret
   25c9c:	1806d07a 	srli	r3,r3,1
   25ca0:	00800044 	movi	r2,1
   25ca4:	20c00015 	stw	r3,0(r4)
   25ca8:	f800283a 	ret

00025cac <__i2b>:
   25cac:	defffd04 	addi	sp,sp,-12
   25cb0:	dc000015 	stw	r16,0(sp)
   25cb4:	04000044 	movi	r16,1
   25cb8:	dc400115 	stw	r17,4(sp)
   25cbc:	2823883a 	mov	r17,r5
   25cc0:	800b883a 	mov	r5,r16
   25cc4:	dfc00215 	stw	ra,8(sp)
   25cc8:	00258840 	call	25884 <_Balloc>
   25ccc:	14400515 	stw	r17,20(r2)
   25cd0:	14000415 	stw	r16,16(r2)
   25cd4:	dfc00217 	ldw	ra,8(sp)
   25cd8:	dc400117 	ldw	r17,4(sp)
   25cdc:	dc000017 	ldw	r16,0(sp)
   25ce0:	dec00304 	addi	sp,sp,12
   25ce4:	f800283a 	ret

00025ce8 <__multiply>:
   25ce8:	deffef04 	addi	sp,sp,-68
   25cec:	dc400815 	stw	r17,32(sp)
   25cf0:	dc000715 	stw	r16,28(sp)
   25cf4:	2c400417 	ldw	r17,16(r5)
   25cf8:	34000417 	ldw	r16,16(r6)
   25cfc:	dd800d15 	stw	r22,52(sp)
   25d00:	dc800915 	stw	r18,36(sp)
   25d04:	dfc01015 	stw	ra,64(sp)
   25d08:	df000f15 	stw	fp,60(sp)
   25d0c:	ddc00e15 	stw	r23,56(sp)
   25d10:	dd400c15 	stw	r21,48(sp)
   25d14:	dd000b15 	stw	r20,44(sp)
   25d18:	dcc00a15 	stw	r19,40(sp)
   25d1c:	2825883a 	mov	r18,r5
   25d20:	302d883a 	mov	r22,r6
   25d24:	8c009116 	blt	r17,r16,25f6c <__multiply+0x284>
   25d28:	8005883a 	mov	r2,r16
   25d2c:	8821883a 	mov	r16,r17
   25d30:	1023883a 	mov	r17,r2
   25d34:	90800217 	ldw	r2,8(r18)
   25d38:	8447883a 	add	r3,r16,r17
   25d3c:	d8c00215 	stw	r3,8(sp)
   25d40:	91400117 	ldw	r5,4(r18)
   25d44:	10c0010e 	bge	r2,r3,25d4c <__multiply+0x64>
   25d48:	29400044 	addi	r5,r5,1
   25d4c:	00258840 	call	25884 <_Balloc>
   25d50:	d8c00217 	ldw	r3,8(sp)
   25d54:	d8800615 	stw	r2,24(sp)
   25d58:	18eb883a 	add	r21,r3,r3
   25d5c:	ad6b883a 	add	r21,r21,r21
   25d60:	10c00504 	addi	r3,r2,20
   25d64:	1d6b883a 	add	r21,r3,r21
   25d68:	d8c00115 	stw	r3,4(sp)
   25d6c:	dd400315 	stw	r21,12(sp)
   25d70:	1805883a 	mov	r2,r3
   25d74:	1d40042e 	bgeu	r3,r21,25d88 <__multiply+0xa0>
   25d78:	d8c00317 	ldw	r3,12(sp)
   25d7c:	10000015 	stw	zero,0(r2)
   25d80:	10800104 	addi	r2,r2,4
   25d84:	10fffc36 	bltu	r2,r3,25d78 <__alt_data_end+0xfffe9858>
   25d88:	8c63883a 	add	r17,r17,r17
   25d8c:	b5800504 	addi	r22,r22,20
   25d90:	8c63883a 	add	r17,r17,r17
   25d94:	94800504 	addi	r18,r18,20
   25d98:	8421883a 	add	r16,r16,r16
   25d9c:	b463883a 	add	r17,r22,r17
   25da0:	8421883a 	add	r16,r16,r16
   25da4:	dd800015 	stw	r22,0(sp)
   25da8:	dc800415 	stw	r18,16(sp)
   25dac:	dc400515 	stw	r17,20(sp)
   25db0:	9429883a 	add	r20,r18,r16
   25db4:	b4404f2e 	bgeu	r22,r17,25ef4 <__multiply+0x20c>
   25db8:	d8c00017 	ldw	r3,0(sp)
   25dbc:	1c800017 	ldw	r18,0(r3)
   25dc0:	943fffcc 	andi	r16,r18,65535
   25dc4:	80001e26 	beq	r16,zero,25e40 <__multiply+0x158>
   25dc8:	dd800117 	ldw	r22,4(sp)
   25dcc:	dd400417 	ldw	r21,16(sp)
   25dd0:	0025883a 	mov	r18,zero
   25dd4:	adc00017 	ldw	r23,0(r21)
   25dd8:	b4c00017 	ldw	r19,0(r22)
   25ddc:	800b883a 	mov	r5,r16
   25de0:	b93fffcc 	andi	r4,r23,65535
   25de4:	002a3dc0 	call	2a3dc <__mulsi3>
   25de8:	9c7fffcc 	andi	r17,r19,65535
   25dec:	8885883a 	add	r2,r17,r2
   25df0:	b808d43a 	srli	r4,r23,16
   25df4:	14a3883a 	add	r17,r2,r18
   25df8:	9826d43a 	srli	r19,r19,16
   25dfc:	8824d43a 	srli	r18,r17,16
   25e00:	800b883a 	mov	r5,r16
   25e04:	002a3dc0 	call	2a3dc <__mulsi3>
   25e08:	9885883a 	add	r2,r19,r2
   25e0c:	14a7883a 	add	r19,r2,r18
   25e10:	88ffffcc 	andi	r3,r17,65535
   25e14:	9822943a 	slli	r17,r19,16
   25e18:	ad400104 	addi	r21,r21,4
   25e1c:	b005883a 	mov	r2,r22
   25e20:	88c6b03a 	or	r3,r17,r3
   25e24:	b0c00015 	stw	r3,0(r22)
   25e28:	9824d43a 	srli	r18,r19,16
   25e2c:	b5800104 	addi	r22,r22,4
   25e30:	ad3fe836 	bltu	r21,r20,25dd4 <__alt_data_end+0xfffe98b4>
   25e34:	d8c00017 	ldw	r3,0(sp)
   25e38:	14800115 	stw	r18,4(r2)
   25e3c:	1c800017 	ldw	r18,0(r3)
   25e40:	9024d43a 	srli	r18,r18,16
   25e44:	90002226 	beq	r18,zero,25ed0 <__multiply+0x1e8>
   25e48:	d8c00117 	ldw	r3,4(sp)
   25e4c:	dd800417 	ldw	r22,16(sp)
   25e50:	002f883a 	mov	r23,zero
   25e54:	1f000017 	ldw	fp,0(r3)
   25e58:	1823883a 	mov	r17,r3
   25e5c:	182b883a 	mov	r21,r3
   25e60:	e021883a 	mov	r16,fp
   25e64:	00000106 	br	25e6c <__multiply+0x184>
   25e68:	982b883a 	mov	r21,r19
   25e6c:	b100000b 	ldhu	r4,0(r22)
   25e70:	8020d43a 	srli	r16,r16,16
   25e74:	900b883a 	mov	r5,r18
   25e78:	002a3dc0 	call	2a3dc <__mulsi3>
   25e7c:	1405883a 	add	r2,r2,r16
   25e80:	15ef883a 	add	r23,r2,r23
   25e84:	b804943a 	slli	r2,r23,16
   25e88:	e0ffffcc 	andi	r3,fp,65535
   25e8c:	8c400104 	addi	r17,r17,4
   25e90:	10c6b03a 	or	r3,r2,r3
   25e94:	88ffff15 	stw	r3,-4(r17)
   25e98:	b5800104 	addi	r22,r22,4
   25e9c:	b13fff17 	ldw	r4,-4(r22)
   25ea0:	acc00104 	addi	r19,r21,4
   25ea4:	900b883a 	mov	r5,r18
   25ea8:	2008d43a 	srli	r4,r4,16
   25eac:	9c000017 	ldw	r16,0(r19)
   25eb0:	002a3dc0 	call	2a3dc <__mulsi3>
   25eb4:	b806d43a 	srli	r3,r23,16
   25eb8:	813fffcc 	andi	r4,r16,65535
   25ebc:	1105883a 	add	r2,r2,r4
   25ec0:	10f9883a 	add	fp,r2,r3
   25ec4:	e02ed43a 	srli	r23,fp,16
   25ec8:	b53fe736 	bltu	r22,r20,25e68 <__alt_data_end+0xfffe9948>
   25ecc:	af000115 	stw	fp,4(r21)
   25ed0:	d8c00017 	ldw	r3,0(sp)
   25ed4:	d9000517 	ldw	r4,20(sp)
   25ed8:	18c00104 	addi	r3,r3,4
   25edc:	d8c00015 	stw	r3,0(sp)
   25ee0:	d8c00117 	ldw	r3,4(sp)
   25ee4:	18c00104 	addi	r3,r3,4
   25ee8:	d8c00115 	stw	r3,4(sp)
   25eec:	d8c00017 	ldw	r3,0(sp)
   25ef0:	193fb136 	bltu	r3,r4,25db8 <__alt_data_end+0xfffe9898>
   25ef4:	d8c00217 	ldw	r3,8(sp)
   25ef8:	00c00c0e 	bge	zero,r3,25f2c <__multiply+0x244>
   25efc:	d8c00317 	ldw	r3,12(sp)
   25f00:	18bfff17 	ldw	r2,-4(r3)
   25f04:	1d7fff04 	addi	r21,r3,-4
   25f08:	10000326 	beq	r2,zero,25f18 <__multiply+0x230>
   25f0c:	00000706 	br	25f2c <__multiply+0x244>
   25f10:	a8800017 	ldw	r2,0(r21)
   25f14:	1000051e 	bne	r2,zero,25f2c <__multiply+0x244>
   25f18:	d8c00217 	ldw	r3,8(sp)
   25f1c:	ad7fff04 	addi	r21,r21,-4
   25f20:	18ffffc4 	addi	r3,r3,-1
   25f24:	d8c00215 	stw	r3,8(sp)
   25f28:	183ff91e 	bne	r3,zero,25f10 <__alt_data_end+0xfffe99f0>
   25f2c:	d8c00617 	ldw	r3,24(sp)
   25f30:	d9000217 	ldw	r4,8(sp)
   25f34:	1805883a 	mov	r2,r3
   25f38:	19000415 	stw	r4,16(r3)
   25f3c:	dfc01017 	ldw	ra,64(sp)
   25f40:	df000f17 	ldw	fp,60(sp)
   25f44:	ddc00e17 	ldw	r23,56(sp)
   25f48:	dd800d17 	ldw	r22,52(sp)
   25f4c:	dd400c17 	ldw	r21,48(sp)
   25f50:	dd000b17 	ldw	r20,44(sp)
   25f54:	dcc00a17 	ldw	r19,40(sp)
   25f58:	dc800917 	ldw	r18,36(sp)
   25f5c:	dc400817 	ldw	r17,32(sp)
   25f60:	dc000717 	ldw	r16,28(sp)
   25f64:	dec01104 	addi	sp,sp,68
   25f68:	f800283a 	ret
   25f6c:	3025883a 	mov	r18,r6
   25f70:	282d883a 	mov	r22,r5
   25f74:	003f6f06 	br	25d34 <__alt_data_end+0xfffe9814>

00025f78 <__pow5mult>:
   25f78:	defffa04 	addi	sp,sp,-24
   25f7c:	dcc00315 	stw	r19,12(sp)
   25f80:	dc800215 	stw	r18,8(sp)
   25f84:	dc000015 	stw	r16,0(sp)
   25f88:	dfc00515 	stw	ra,20(sp)
   25f8c:	dd000415 	stw	r20,16(sp)
   25f90:	dc400115 	stw	r17,4(sp)
   25f94:	308000cc 	andi	r2,r6,3
   25f98:	3021883a 	mov	r16,r6
   25f9c:	2027883a 	mov	r19,r4
   25fa0:	2825883a 	mov	r18,r5
   25fa4:	10002e1e 	bne	r2,zero,26060 <__pow5mult+0xe8>
   25fa8:	8021d0ba 	srai	r16,r16,2
   25fac:	80001a26 	beq	r16,zero,26018 <__pow5mult+0xa0>
   25fb0:	9c401217 	ldw	r17,72(r19)
   25fb4:	8800061e 	bne	r17,zero,25fd0 <__pow5mult+0x58>
   25fb8:	00003406 	br	2608c <__pow5mult+0x114>
   25fbc:	8021d07a 	srai	r16,r16,1
   25fc0:	80001526 	beq	r16,zero,26018 <__pow5mult+0xa0>
   25fc4:	88800017 	ldw	r2,0(r17)
   25fc8:	10001c26 	beq	r2,zero,2603c <__pow5mult+0xc4>
   25fcc:	1023883a 	mov	r17,r2
   25fd0:	80c0004c 	andi	r3,r16,1
   25fd4:	183ff926 	beq	r3,zero,25fbc <__alt_data_end+0xfffe9a9c>
   25fd8:	900b883a 	mov	r5,r18
   25fdc:	880d883a 	mov	r6,r17
   25fe0:	9809883a 	mov	r4,r19
   25fe4:	0025ce80 	call	25ce8 <__multiply>
   25fe8:	90001b26 	beq	r18,zero,26058 <__pow5mult+0xe0>
   25fec:	91c00117 	ldw	r7,4(r18)
   25ff0:	98c01317 	ldw	r3,76(r19)
   25ff4:	8021d07a 	srai	r16,r16,1
   25ff8:	39cf883a 	add	r7,r7,r7
   25ffc:	39cf883a 	add	r7,r7,r7
   26000:	19c7883a 	add	r3,r3,r7
   26004:	19000017 	ldw	r4,0(r3)
   26008:	91000015 	stw	r4,0(r18)
   2600c:	1c800015 	stw	r18,0(r3)
   26010:	1025883a 	mov	r18,r2
   26014:	803feb1e 	bne	r16,zero,25fc4 <__alt_data_end+0xfffe9aa4>
   26018:	9005883a 	mov	r2,r18
   2601c:	dfc00517 	ldw	ra,20(sp)
   26020:	dd000417 	ldw	r20,16(sp)
   26024:	dcc00317 	ldw	r19,12(sp)
   26028:	dc800217 	ldw	r18,8(sp)
   2602c:	dc400117 	ldw	r17,4(sp)
   26030:	dc000017 	ldw	r16,0(sp)
   26034:	dec00604 	addi	sp,sp,24
   26038:	f800283a 	ret
   2603c:	9809883a 	mov	r4,r19
   26040:	880b883a 	mov	r5,r17
   26044:	880d883a 	mov	r6,r17
   26048:	0025ce80 	call	25ce8 <__multiply>
   2604c:	88800015 	stw	r2,0(r17)
   26050:	10000015 	stw	zero,0(r2)
   26054:	003fdd06 	br	25fcc <__alt_data_end+0xfffe9aac>
   26058:	1025883a 	mov	r18,r2
   2605c:	003fd706 	br	25fbc <__alt_data_end+0xfffe9a9c>
   26060:	10bfffc4 	addi	r2,r2,-1
   26064:	1085883a 	add	r2,r2,r2
   26068:	00c000f4 	movhi	r3,3
   2606c:	18ffe504 	addi	r3,r3,-108
   26070:	1085883a 	add	r2,r2,r2
   26074:	1885883a 	add	r2,r3,r2
   26078:	11800017 	ldw	r6,0(r2)
   2607c:	000f883a 	mov	r7,zero
   26080:	00259540 	call	25954 <__multadd>
   26084:	1025883a 	mov	r18,r2
   26088:	003fc706 	br	25fa8 <__alt_data_end+0xfffe9a88>
   2608c:	05000044 	movi	r20,1
   26090:	9809883a 	mov	r4,r19
   26094:	a00b883a 	mov	r5,r20
   26098:	00258840 	call	25884 <_Balloc>
   2609c:	1023883a 	mov	r17,r2
   260a0:	00809c44 	movi	r2,625
   260a4:	88800515 	stw	r2,20(r17)
   260a8:	8d000415 	stw	r20,16(r17)
   260ac:	9c401215 	stw	r17,72(r19)
   260b0:	88000015 	stw	zero,0(r17)
   260b4:	003fc606 	br	25fd0 <__alt_data_end+0xfffe9ab0>

000260b8 <__lshift>:
   260b8:	defff904 	addi	sp,sp,-28
   260bc:	dd000415 	stw	r20,16(sp)
   260c0:	dcc00315 	stw	r19,12(sp)
   260c4:	3029d17a 	srai	r20,r6,5
   260c8:	2cc00417 	ldw	r19,16(r5)
   260cc:	28800217 	ldw	r2,8(r5)
   260d0:	dd400515 	stw	r21,20(sp)
   260d4:	a4e7883a 	add	r19,r20,r19
   260d8:	dc800215 	stw	r18,8(sp)
   260dc:	dc400115 	stw	r17,4(sp)
   260e0:	dc000015 	stw	r16,0(sp)
   260e4:	dfc00615 	stw	ra,24(sp)
   260e8:	9c000044 	addi	r16,r19,1
   260ec:	2823883a 	mov	r17,r5
   260f0:	302b883a 	mov	r21,r6
   260f4:	2025883a 	mov	r18,r4
   260f8:	29400117 	ldw	r5,4(r5)
   260fc:	1400030e 	bge	r2,r16,2610c <__lshift+0x54>
   26100:	1085883a 	add	r2,r2,r2
   26104:	29400044 	addi	r5,r5,1
   26108:	143ffd16 	blt	r2,r16,26100 <__alt_data_end+0xfffe9be0>
   2610c:	9009883a 	mov	r4,r18
   26110:	00258840 	call	25884 <_Balloc>
   26114:	11c00504 	addi	r7,r2,20
   26118:	0500090e 	bge	zero,r20,26140 <__lshift+0x88>
   2611c:	3811883a 	mov	r8,r7
   26120:	0007883a 	mov	r3,zero
   26124:	40000015 	stw	zero,0(r8)
   26128:	18c00044 	addi	r3,r3,1
   2612c:	42000104 	addi	r8,r8,4
   26130:	1d3ffc1e 	bne	r3,r20,26124 <__alt_data_end+0xfffe9c04>
   26134:	18c7883a 	add	r3,r3,r3
   26138:	18c7883a 	add	r3,r3,r3
   2613c:	38cf883a 	add	r7,r7,r3
   26140:	89000417 	ldw	r4,16(r17)
   26144:	88c00504 	addi	r3,r17,20
   26148:	a98007cc 	andi	r6,r21,31
   2614c:	2109883a 	add	r4,r4,r4
   26150:	2109883a 	add	r4,r4,r4
   26154:	1909883a 	add	r4,r3,r4
   26158:	30002326 	beq	r6,zero,261e8 <__lshift+0x130>
   2615c:	01400804 	movi	r5,32
   26160:	298bc83a 	sub	r5,r5,r6
   26164:	0013883a 	mov	r9,zero
   26168:	1a000017 	ldw	r8,0(r3)
   2616c:	3815883a 	mov	r10,r7
   26170:	39c00104 	addi	r7,r7,4
   26174:	4190983a 	sll	r8,r8,r6
   26178:	18c00104 	addi	r3,r3,4
   2617c:	4a10b03a 	or	r8,r9,r8
   26180:	3a3fff15 	stw	r8,-4(r7)
   26184:	1a3fff17 	ldw	r8,-4(r3)
   26188:	4152d83a 	srl	r9,r8,r5
   2618c:	193ff636 	bltu	r3,r4,26168 <__alt_data_end+0xfffe9c48>
   26190:	52400115 	stw	r9,4(r10)
   26194:	48000126 	beq	r9,zero,2619c <__lshift+0xe4>
   26198:	9c000084 	addi	r16,r19,2
   2619c:	89000117 	ldw	r4,4(r17)
   261a0:	90c01317 	ldw	r3,76(r18)
   261a4:	843fffc4 	addi	r16,r16,-1
   261a8:	2109883a 	add	r4,r4,r4
   261ac:	2109883a 	add	r4,r4,r4
   261b0:	1907883a 	add	r3,r3,r4
   261b4:	19000017 	ldw	r4,0(r3)
   261b8:	14000415 	stw	r16,16(r2)
   261bc:	89000015 	stw	r4,0(r17)
   261c0:	1c400015 	stw	r17,0(r3)
   261c4:	dfc00617 	ldw	ra,24(sp)
   261c8:	dd400517 	ldw	r21,20(sp)
   261cc:	dd000417 	ldw	r20,16(sp)
   261d0:	dcc00317 	ldw	r19,12(sp)
   261d4:	dc800217 	ldw	r18,8(sp)
   261d8:	dc400117 	ldw	r17,4(sp)
   261dc:	dc000017 	ldw	r16,0(sp)
   261e0:	dec00704 	addi	sp,sp,28
   261e4:	f800283a 	ret
   261e8:	19400017 	ldw	r5,0(r3)
   261ec:	39c00104 	addi	r7,r7,4
   261f0:	18c00104 	addi	r3,r3,4
   261f4:	397fff15 	stw	r5,-4(r7)
   261f8:	193ffb36 	bltu	r3,r4,261e8 <__alt_data_end+0xfffe9cc8>
   261fc:	003fe706 	br	2619c <__alt_data_end+0xfffe9c7c>

00026200 <__mcmp>:
   26200:	20800417 	ldw	r2,16(r4)
   26204:	28c00417 	ldw	r3,16(r5)
   26208:	10c5c83a 	sub	r2,r2,r3
   2620c:	1000111e 	bne	r2,zero,26254 <__mcmp+0x54>
   26210:	18c7883a 	add	r3,r3,r3
   26214:	18c7883a 	add	r3,r3,r3
   26218:	21000504 	addi	r4,r4,20
   2621c:	29400504 	addi	r5,r5,20
   26220:	20c5883a 	add	r2,r4,r3
   26224:	28cb883a 	add	r5,r5,r3
   26228:	00000106 	br	26230 <__mcmp+0x30>
   2622c:	20800a2e 	bgeu	r4,r2,26258 <__mcmp+0x58>
   26230:	10bfff04 	addi	r2,r2,-4
   26234:	297fff04 	addi	r5,r5,-4
   26238:	11800017 	ldw	r6,0(r2)
   2623c:	28c00017 	ldw	r3,0(r5)
   26240:	30fffa26 	beq	r6,r3,2622c <__alt_data_end+0xfffe9d0c>
   26244:	30c00236 	bltu	r6,r3,26250 <__mcmp+0x50>
   26248:	00800044 	movi	r2,1
   2624c:	f800283a 	ret
   26250:	00bfffc4 	movi	r2,-1
   26254:	f800283a 	ret
   26258:	0005883a 	mov	r2,zero
   2625c:	f800283a 	ret

00026260 <__mdiff>:
   26260:	defffb04 	addi	sp,sp,-20
   26264:	dc000015 	stw	r16,0(sp)
   26268:	2821883a 	mov	r16,r5
   2626c:	dcc00315 	stw	r19,12(sp)
   26270:	300b883a 	mov	r5,r6
   26274:	2027883a 	mov	r19,r4
   26278:	8009883a 	mov	r4,r16
   2627c:	dc800215 	stw	r18,8(sp)
   26280:	dfc00415 	stw	ra,16(sp)
   26284:	dc400115 	stw	r17,4(sp)
   26288:	3025883a 	mov	r18,r6
   2628c:	00262000 	call	26200 <__mcmp>
   26290:	10005226 	beq	r2,zero,263dc <__mdiff+0x17c>
   26294:	10004c16 	blt	r2,zero,263c8 <__mdiff+0x168>
   26298:	0023883a 	mov	r17,zero
   2629c:	81400117 	ldw	r5,4(r16)
   262a0:	9809883a 	mov	r4,r19
   262a4:	00258840 	call	25884 <_Balloc>
   262a8:	83400417 	ldw	r13,16(r16)
   262ac:	93800417 	ldw	r14,16(r18)
   262b0:	81000504 	addi	r4,r16,20
   262b4:	6b59883a 	add	r12,r13,r13
   262b8:	739d883a 	add	r14,r14,r14
   262bc:	6319883a 	add	r12,r12,r12
   262c0:	91800504 	addi	r6,r18,20
   262c4:	739d883a 	add	r14,r14,r14
   262c8:	14400315 	stw	r17,12(r2)
   262cc:	2319883a 	add	r12,r4,r12
   262d0:	339d883a 	add	r14,r6,r14
   262d4:	12400504 	addi	r9,r2,20
   262d8:	0007883a 	mov	r3,zero
   262dc:	22000017 	ldw	r8,0(r4)
   262e0:	32800017 	ldw	r10,0(r6)
   262e4:	4ac00104 	addi	r11,r9,4
   262e8:	41ffffcc 	andi	r7,r8,65535
   262ec:	38c7883a 	add	r3,r7,r3
   262f0:	51ffffcc 	andi	r7,r10,65535
   262f4:	19cfc83a 	sub	r7,r3,r7
   262f8:	4010d43a 	srli	r8,r8,16
   262fc:	5014d43a 	srli	r10,r10,16
   26300:	3807d43a 	srai	r3,r7,16
   26304:	39ffffcc 	andi	r7,r7,65535
   26308:	4291c83a 	sub	r8,r8,r10
   2630c:	40c7883a 	add	r3,r8,r3
   26310:	1810943a 	slli	r8,r3,16
   26314:	31800104 	addi	r6,r6,4
   26318:	21000104 	addi	r4,r4,4
   2631c:	41ceb03a 	or	r7,r8,r7
   26320:	49c00015 	stw	r7,0(r9)
   26324:	1807d43a 	srai	r3,r3,16
   26328:	580b883a 	mov	r5,r11
   2632c:	5813883a 	mov	r9,r11
   26330:	33bfea36 	bltu	r6,r14,262dc <__alt_data_end+0xfffe9dbc>
   26334:	2011883a 	mov	r8,r4
   26338:	2300152e 	bgeu	r4,r12,26390 <__mdiff+0x130>
   2633c:	21400017 	ldw	r5,0(r4)
   26340:	4a400104 	addi	r9,r9,4
   26344:	21000104 	addi	r4,r4,4
   26348:	29ffffcc 	andi	r7,r5,65535
   2634c:	38c7883a 	add	r3,r7,r3
   26350:	280ad43a 	srli	r5,r5,16
   26354:	180dd43a 	srai	r6,r3,16
   26358:	19ffffcc 	andi	r7,r3,65535
   2635c:	3147883a 	add	r3,r6,r5
   26360:	180a943a 	slli	r5,r3,16
   26364:	1807d43a 	srai	r3,r3,16
   26368:	29ceb03a 	or	r7,r5,r7
   2636c:	49ffff15 	stw	r7,-4(r9)
   26370:	233ff236 	bltu	r4,r12,2633c <__alt_data_end+0xfffe9e1c>
   26374:	0206303a 	nor	r3,zero,r8
   26378:	1b07883a 	add	r3,r3,r12
   2637c:	1806d0ba 	srli	r3,r3,2
   26380:	18c00044 	addi	r3,r3,1
   26384:	18c7883a 	add	r3,r3,r3
   26388:	18c7883a 	add	r3,r3,r3
   2638c:	58cb883a 	add	r5,r11,r3
   26390:	28ffff04 	addi	r3,r5,-4
   26394:	3800041e 	bne	r7,zero,263a8 <__mdiff+0x148>
   26398:	18ffff04 	addi	r3,r3,-4
   2639c:	19000017 	ldw	r4,0(r3)
   263a0:	6b7fffc4 	addi	r13,r13,-1
   263a4:	203ffc26 	beq	r4,zero,26398 <__alt_data_end+0xfffe9e78>
   263a8:	13400415 	stw	r13,16(r2)
   263ac:	dfc00417 	ldw	ra,16(sp)
   263b0:	dcc00317 	ldw	r19,12(sp)
   263b4:	dc800217 	ldw	r18,8(sp)
   263b8:	dc400117 	ldw	r17,4(sp)
   263bc:	dc000017 	ldw	r16,0(sp)
   263c0:	dec00504 	addi	sp,sp,20
   263c4:	f800283a 	ret
   263c8:	8005883a 	mov	r2,r16
   263cc:	04400044 	movi	r17,1
   263d0:	9021883a 	mov	r16,r18
   263d4:	1025883a 	mov	r18,r2
   263d8:	003fb006 	br	2629c <__alt_data_end+0xfffe9d7c>
   263dc:	9809883a 	mov	r4,r19
   263e0:	000b883a 	mov	r5,zero
   263e4:	00258840 	call	25884 <_Balloc>
   263e8:	00c00044 	movi	r3,1
   263ec:	10c00415 	stw	r3,16(r2)
   263f0:	10000515 	stw	zero,20(r2)
   263f4:	003fed06 	br	263ac <__alt_data_end+0xfffe9e8c>

000263f8 <__ulp>:
   263f8:	295ffc2c 	andhi	r5,r5,32752
   263fc:	00bf3034 	movhi	r2,64704
   26400:	2887883a 	add	r3,r5,r2
   26404:	00c0020e 	bge	zero,r3,26410 <__ulp+0x18>
   26408:	0005883a 	mov	r2,zero
   2640c:	f800283a 	ret
   26410:	00c7c83a 	sub	r3,zero,r3
   26414:	180bd53a 	srai	r5,r3,20
   26418:	008004c4 	movi	r2,19
   2641c:	11400a0e 	bge	r2,r5,26448 <__ulp+0x50>
   26420:	00800c84 	movi	r2,50
   26424:	0007883a 	mov	r3,zero
   26428:	11400516 	blt	r2,r5,26440 <__ulp+0x48>
   2642c:	00800cc4 	movi	r2,51
   26430:	114bc83a 	sub	r5,r2,r5
   26434:	00800044 	movi	r2,1
   26438:	1144983a 	sll	r2,r2,r5
   2643c:	f800283a 	ret
   26440:	00800044 	movi	r2,1
   26444:	f800283a 	ret
   26448:	00800234 	movhi	r2,8
   2644c:	1147d83a 	sra	r3,r2,r5
   26450:	0005883a 	mov	r2,zero
   26454:	f800283a 	ret

00026458 <__b2d>:
   26458:	defffa04 	addi	sp,sp,-24
   2645c:	dc000015 	stw	r16,0(sp)
   26460:	24000417 	ldw	r16,16(r4)
   26464:	dc400115 	stw	r17,4(sp)
   26468:	24400504 	addi	r17,r4,20
   2646c:	8421883a 	add	r16,r16,r16
   26470:	8421883a 	add	r16,r16,r16
   26474:	8c21883a 	add	r16,r17,r16
   26478:	dc800215 	stw	r18,8(sp)
   2647c:	84bfff17 	ldw	r18,-4(r16)
   26480:	dd000415 	stw	r20,16(sp)
   26484:	dcc00315 	stw	r19,12(sp)
   26488:	9009883a 	mov	r4,r18
   2648c:	2829883a 	mov	r20,r5
   26490:	dfc00515 	stw	ra,20(sp)
   26494:	0025b940 	call	25b94 <__hi0bits>
   26498:	00c00804 	movi	r3,32
   2649c:	1887c83a 	sub	r3,r3,r2
   264a0:	a0c00015 	stw	r3,0(r20)
   264a4:	00c00284 	movi	r3,10
   264a8:	84ffff04 	addi	r19,r16,-4
   264ac:	18801216 	blt	r3,r2,264f8 <__b2d+0xa0>
   264b0:	014002c4 	movi	r5,11
   264b4:	2889c83a 	sub	r4,r5,r2
   264b8:	9106d83a 	srl	r3,r18,r4
   264bc:	18cffc34 	orhi	r3,r3,16368
   264c0:	8cc0282e 	bgeu	r17,r19,26564 <__b2d+0x10c>
   264c4:	817ffe17 	ldw	r5,-8(r16)
   264c8:	290ad83a 	srl	r5,r5,r4
   264cc:	10800544 	addi	r2,r2,21
   264d0:	9084983a 	sll	r2,r18,r2
   264d4:	2884b03a 	or	r2,r5,r2
   264d8:	dfc00517 	ldw	ra,20(sp)
   264dc:	dd000417 	ldw	r20,16(sp)
   264e0:	dcc00317 	ldw	r19,12(sp)
   264e4:	dc800217 	ldw	r18,8(sp)
   264e8:	dc400117 	ldw	r17,4(sp)
   264ec:	dc000017 	ldw	r16,0(sp)
   264f0:	dec00604 	addi	sp,sp,24
   264f4:	f800283a 	ret
   264f8:	113ffd44 	addi	r4,r2,-11
   264fc:	8cc00f2e 	bgeu	r17,r19,2653c <__b2d+0xe4>
   26500:	81bffe04 	addi	r6,r16,-8
   26504:	817ffe17 	ldw	r5,-8(r16)
   26508:	20001326 	beq	r4,zero,26558 <__b2d+0x100>
   2650c:	00c00ac4 	movi	r3,43
   26510:	1885c83a 	sub	r2,r3,r2
   26514:	2886d83a 	srl	r3,r5,r2
   26518:	9124983a 	sll	r18,r18,r4
   2651c:	90e4b03a 	or	r18,r18,r3
   26520:	90cffc34 	orhi	r3,r18,16368
   26524:	8980112e 	bgeu	r17,r6,2656c <__b2d+0x114>
   26528:	81bffd17 	ldw	r6,-12(r16)
   2652c:	308cd83a 	srl	r6,r6,r2
   26530:	2904983a 	sll	r2,r5,r4
   26534:	1184b03a 	or	r2,r2,r6
   26538:	003fe706 	br	264d8 <__alt_data_end+0xfffe9fb8>
   2653c:	20000526 	beq	r4,zero,26554 <__b2d+0xfc>
   26540:	9124983a 	sll	r18,r18,r4
   26544:	000d883a 	mov	r6,zero
   26548:	000b883a 	mov	r5,zero
   2654c:	90cffc34 	orhi	r3,r18,16368
   26550:	003ff706 	br	26530 <__alt_data_end+0xfffea010>
   26554:	000b883a 	mov	r5,zero
   26558:	90cffc34 	orhi	r3,r18,16368
   2655c:	2805883a 	mov	r2,r5
   26560:	003fdd06 	br	264d8 <__alt_data_end+0xfffe9fb8>
   26564:	000b883a 	mov	r5,zero
   26568:	003fd806 	br	264cc <__alt_data_end+0xfffe9fac>
   2656c:	000d883a 	mov	r6,zero
   26570:	003fef06 	br	26530 <__alt_data_end+0xfffea010>

00026574 <__d2b>:
   26574:	defff704 	addi	sp,sp,-36
   26578:	dc000215 	stw	r16,8(sp)
   2657c:	3021883a 	mov	r16,r6
   26580:	dc400315 	stw	r17,12(sp)
   26584:	8022907a 	slli	r17,r16,1
   26588:	dd400715 	stw	r21,28(sp)
   2658c:	282b883a 	mov	r21,r5
   26590:	01400044 	movi	r5,1
   26594:	dd000615 	stw	r20,24(sp)
   26598:	dcc00515 	stw	r19,20(sp)
   2659c:	dc800415 	stw	r18,16(sp)
   265a0:	dfc00815 	stw	ra,32(sp)
   265a4:	3829883a 	mov	r20,r7
   265a8:	dc800917 	ldw	r18,36(sp)
   265ac:	8822d57a 	srli	r17,r17,21
   265b0:	00258840 	call	25884 <_Balloc>
   265b4:	1027883a 	mov	r19,r2
   265b8:	00800434 	movhi	r2,16
   265bc:	10bfffc4 	addi	r2,r2,-1
   265c0:	808c703a 	and	r6,r16,r2
   265c4:	88000126 	beq	r17,zero,265cc <__d2b+0x58>
   265c8:	31800434 	orhi	r6,r6,16
   265cc:	d9800015 	stw	r6,0(sp)
   265d0:	a8001f26 	beq	r21,zero,26650 <__d2b+0xdc>
   265d4:	d9000104 	addi	r4,sp,4
   265d8:	dd400115 	stw	r21,4(sp)
   265dc:	0025bfc0 	call	25bfc <__lo0bits>
   265e0:	d8c00017 	ldw	r3,0(sp)
   265e4:	1000291e 	bne	r2,zero,2668c <__d2b+0x118>
   265e8:	d9000117 	ldw	r4,4(sp)
   265ec:	99000515 	stw	r4,20(r19)
   265f0:	1820c03a 	cmpne	r16,r3,zero
   265f4:	84000044 	addi	r16,r16,1
   265f8:	98c00615 	stw	r3,24(r19)
   265fc:	9c000415 	stw	r16,16(r19)
   26600:	88001b1e 	bne	r17,zero,26670 <__d2b+0xfc>
   26604:	800690ba 	slli	r3,r16,2
   26608:	10bef384 	addi	r2,r2,-1074
   2660c:	a0800015 	stw	r2,0(r20)
   26610:	98c5883a 	add	r2,r19,r3
   26614:	11000417 	ldw	r4,16(r2)
   26618:	8020917a 	slli	r16,r16,5
   2661c:	0025b940 	call	25b94 <__hi0bits>
   26620:	8085c83a 	sub	r2,r16,r2
   26624:	90800015 	stw	r2,0(r18)
   26628:	9805883a 	mov	r2,r19
   2662c:	dfc00817 	ldw	ra,32(sp)
   26630:	dd400717 	ldw	r21,28(sp)
   26634:	dd000617 	ldw	r20,24(sp)
   26638:	dcc00517 	ldw	r19,20(sp)
   2663c:	dc800417 	ldw	r18,16(sp)
   26640:	dc400317 	ldw	r17,12(sp)
   26644:	dc000217 	ldw	r16,8(sp)
   26648:	dec00904 	addi	sp,sp,36
   2664c:	f800283a 	ret
   26650:	d809883a 	mov	r4,sp
   26654:	0025bfc0 	call	25bfc <__lo0bits>
   26658:	d8c00017 	ldw	r3,0(sp)
   2665c:	04000044 	movi	r16,1
   26660:	9c000415 	stw	r16,16(r19)
   26664:	98c00515 	stw	r3,20(r19)
   26668:	10800804 	addi	r2,r2,32
   2666c:	883fe526 	beq	r17,zero,26604 <__alt_data_end+0xfffea0e4>
   26670:	8c7ef344 	addi	r17,r17,-1075
   26674:	88a3883a 	add	r17,r17,r2
   26678:	00c00d44 	movi	r3,53
   2667c:	a4400015 	stw	r17,0(r20)
   26680:	1885c83a 	sub	r2,r3,r2
   26684:	90800015 	stw	r2,0(r18)
   26688:	003fe706 	br	26628 <__alt_data_end+0xfffea108>
   2668c:	01000804 	movi	r4,32
   26690:	2089c83a 	sub	r4,r4,r2
   26694:	1908983a 	sll	r4,r3,r4
   26698:	d9400117 	ldw	r5,4(sp)
   2669c:	1886d83a 	srl	r3,r3,r2
   266a0:	2148b03a 	or	r4,r4,r5
   266a4:	99000515 	stw	r4,20(r19)
   266a8:	d8c00015 	stw	r3,0(sp)
   266ac:	003fd006 	br	265f0 <__alt_data_end+0xfffea0d0>

000266b0 <__ratio>:
   266b0:	defff904 	addi	sp,sp,-28
   266b4:	dc400315 	stw	r17,12(sp)
   266b8:	2823883a 	mov	r17,r5
   266bc:	d9400104 	addi	r5,sp,4
   266c0:	dfc00615 	stw	ra,24(sp)
   266c4:	dcc00515 	stw	r19,20(sp)
   266c8:	dc800415 	stw	r18,16(sp)
   266cc:	2027883a 	mov	r19,r4
   266d0:	dc000215 	stw	r16,8(sp)
   266d4:	00264580 	call	26458 <__b2d>
   266d8:	8809883a 	mov	r4,r17
   266dc:	d80b883a 	mov	r5,sp
   266e0:	1025883a 	mov	r18,r2
   266e4:	1821883a 	mov	r16,r3
   266e8:	00264580 	call	26458 <__b2d>
   266ec:	8a400417 	ldw	r9,16(r17)
   266f0:	9a000417 	ldw	r8,16(r19)
   266f4:	100d883a 	mov	r6,r2
   266f8:	d8800017 	ldw	r2,0(sp)
   266fc:	4251c83a 	sub	r8,r8,r9
   26700:	4012917a 	slli	r9,r8,5
   26704:	da000117 	ldw	r8,4(sp)
   26708:	4091c83a 	sub	r8,r8,r2
   2670c:	4251883a 	add	r8,r8,r9
   26710:	02000d0e 	bge	zero,r8,26748 <__ratio+0x98>
   26714:	4010953a 	slli	r8,r8,20
   26718:	4421883a 	add	r16,r8,r16
   2671c:	9009883a 	mov	r4,r18
   26720:	800b883a 	mov	r5,r16
   26724:	180f883a 	mov	r7,r3
   26728:	002aca00 	call	2aca0 <__divdf3>
   2672c:	dfc00617 	ldw	ra,24(sp)
   26730:	dcc00517 	ldw	r19,20(sp)
   26734:	dc800417 	ldw	r18,16(sp)
   26738:	dc400317 	ldw	r17,12(sp)
   2673c:	dc000217 	ldw	r16,8(sp)
   26740:	dec00704 	addi	sp,sp,28
   26744:	f800283a 	ret
   26748:	4010953a 	slli	r8,r8,20
   2674c:	1a07c83a 	sub	r3,r3,r8
   26750:	003ff206 	br	2671c <__alt_data_end+0xfffea1fc>

00026754 <_mprec_log10>:
   26754:	defffe04 	addi	sp,sp,-8
   26758:	dc000015 	stw	r16,0(sp)
   2675c:	dfc00115 	stw	ra,4(sp)
   26760:	008005c4 	movi	r2,23
   26764:	2021883a 	mov	r16,r4
   26768:	11000d0e 	bge	r2,r4,267a0 <_mprec_log10+0x4c>
   2676c:	0005883a 	mov	r2,zero
   26770:	00cffc34 	movhi	r3,16368
   26774:	843fffc4 	addi	r16,r16,-1
   26778:	1009883a 	mov	r4,r2
   2677c:	180b883a 	mov	r5,r3
   26780:	000d883a 	mov	r6,zero
   26784:	01d00934 	movhi	r7,16420
   26788:	002b8640 	call	2b864 <__muldf3>
   2678c:	803ff91e 	bne	r16,zero,26774 <__alt_data_end+0xfffea254>
   26790:	dfc00117 	ldw	ra,4(sp)
   26794:	dc000017 	ldw	r16,0(sp)
   26798:	dec00204 	addi	sp,sp,8
   2679c:	f800283a 	ret
   267a0:	202090fa 	slli	r16,r4,3
   267a4:	008000f4 	movhi	r2,3
   267a8:	10bffc04 	addi	r2,r2,-16
   267ac:	1421883a 	add	r16,r2,r16
   267b0:	80800017 	ldw	r2,0(r16)
   267b4:	80c00117 	ldw	r3,4(r16)
   267b8:	dfc00117 	ldw	ra,4(sp)
   267bc:	dc000017 	ldw	r16,0(sp)
   267c0:	dec00204 	addi	sp,sp,8
   267c4:	f800283a 	ret

000267c8 <__copybits>:
   267c8:	297fffc4 	addi	r5,r5,-1
   267cc:	280fd17a 	srai	r7,r5,5
   267d0:	30c00417 	ldw	r3,16(r6)
   267d4:	30800504 	addi	r2,r6,20
   267d8:	39c00044 	addi	r7,r7,1
   267dc:	18c7883a 	add	r3,r3,r3
   267e0:	39cf883a 	add	r7,r7,r7
   267e4:	18c7883a 	add	r3,r3,r3
   267e8:	39cf883a 	add	r7,r7,r7
   267ec:	10c7883a 	add	r3,r2,r3
   267f0:	21cf883a 	add	r7,r4,r7
   267f4:	10c00d2e 	bgeu	r2,r3,2682c <__copybits+0x64>
   267f8:	200b883a 	mov	r5,r4
   267fc:	12000017 	ldw	r8,0(r2)
   26800:	29400104 	addi	r5,r5,4
   26804:	10800104 	addi	r2,r2,4
   26808:	2a3fff15 	stw	r8,-4(r5)
   2680c:	10fffb36 	bltu	r2,r3,267fc <__alt_data_end+0xfffea2dc>
   26810:	1985c83a 	sub	r2,r3,r6
   26814:	10bffac4 	addi	r2,r2,-21
   26818:	1004d0ba 	srli	r2,r2,2
   2681c:	10800044 	addi	r2,r2,1
   26820:	1085883a 	add	r2,r2,r2
   26824:	1085883a 	add	r2,r2,r2
   26828:	2089883a 	add	r4,r4,r2
   2682c:	21c0032e 	bgeu	r4,r7,2683c <__copybits+0x74>
   26830:	20000015 	stw	zero,0(r4)
   26834:	21000104 	addi	r4,r4,4
   26838:	21fffd36 	bltu	r4,r7,26830 <__alt_data_end+0xfffea310>
   2683c:	f800283a 	ret

00026840 <__any_on>:
   26840:	20c00417 	ldw	r3,16(r4)
   26844:	2805d17a 	srai	r2,r5,5
   26848:	21000504 	addi	r4,r4,20
   2684c:	18800d0e 	bge	r3,r2,26884 <__any_on+0x44>
   26850:	18c7883a 	add	r3,r3,r3
   26854:	18c7883a 	add	r3,r3,r3
   26858:	20c7883a 	add	r3,r4,r3
   2685c:	20c0192e 	bgeu	r4,r3,268c4 <__any_on+0x84>
   26860:	18bfff17 	ldw	r2,-4(r3)
   26864:	18ffff04 	addi	r3,r3,-4
   26868:	1000041e 	bne	r2,zero,2687c <__any_on+0x3c>
   2686c:	20c0142e 	bgeu	r4,r3,268c0 <__any_on+0x80>
   26870:	18ffff04 	addi	r3,r3,-4
   26874:	19400017 	ldw	r5,0(r3)
   26878:	283ffc26 	beq	r5,zero,2686c <__alt_data_end+0xfffea34c>
   2687c:	00800044 	movi	r2,1
   26880:	f800283a 	ret
   26884:	10c00a0e 	bge	r2,r3,268b0 <__any_on+0x70>
   26888:	1085883a 	add	r2,r2,r2
   2688c:	1085883a 	add	r2,r2,r2
   26890:	294007cc 	andi	r5,r5,31
   26894:	2087883a 	add	r3,r4,r2
   26898:	283ff026 	beq	r5,zero,2685c <__alt_data_end+0xfffea33c>
   2689c:	19800017 	ldw	r6,0(r3)
   268a0:	3144d83a 	srl	r2,r6,r5
   268a4:	114a983a 	sll	r5,r2,r5
   268a8:	29bff41e 	bne	r5,r6,2687c <__alt_data_end+0xfffea35c>
   268ac:	003feb06 	br	2685c <__alt_data_end+0xfffea33c>
   268b0:	1085883a 	add	r2,r2,r2
   268b4:	1085883a 	add	r2,r2,r2
   268b8:	2087883a 	add	r3,r4,r2
   268bc:	003fe706 	br	2685c <__alt_data_end+0xfffea33c>
   268c0:	f800283a 	ret
   268c4:	0005883a 	mov	r2,zero
   268c8:	f800283a 	ret

000268cc <__fpclassifyd>:
   268cc:	00a00034 	movhi	r2,32768
   268d0:	10bfffc4 	addi	r2,r2,-1
   268d4:	2884703a 	and	r2,r5,r2
   268d8:	10000726 	beq	r2,zero,268f8 <__fpclassifyd+0x2c>
   268dc:	00fffc34 	movhi	r3,65520
   268e0:	019ff834 	movhi	r6,32736
   268e4:	28c7883a 	add	r3,r5,r3
   268e8:	31bfffc4 	addi	r6,r6,-1
   268ec:	30c00536 	bltu	r6,r3,26904 <__fpclassifyd+0x38>
   268f0:	00800104 	movi	r2,4
   268f4:	f800283a 	ret
   268f8:	2000021e 	bne	r4,zero,26904 <__fpclassifyd+0x38>
   268fc:	00800084 	movi	r2,2
   26900:	f800283a 	ret
   26904:	00dffc34 	movhi	r3,32752
   26908:	019ff834 	movhi	r6,32736
   2690c:	28cb883a 	add	r5,r5,r3
   26910:	31bfffc4 	addi	r6,r6,-1
   26914:	317ff62e 	bgeu	r6,r5,268f0 <__alt_data_end+0xfffea3d0>
   26918:	01400434 	movhi	r5,16
   2691c:	297fffc4 	addi	r5,r5,-1
   26920:	28800236 	bltu	r5,r2,2692c <__fpclassifyd+0x60>
   26924:	008000c4 	movi	r2,3
   26928:	f800283a 	ret
   2692c:	10c00226 	beq	r2,r3,26938 <__fpclassifyd+0x6c>
   26930:	0005883a 	mov	r2,zero
   26934:	f800283a 	ret
   26938:	2005003a 	cmpeq	r2,r4,zero
   2693c:	f800283a 	ret

00026940 <_sbrk_r>:
   26940:	defffd04 	addi	sp,sp,-12
   26944:	dc000015 	stw	r16,0(sp)
   26948:	040000f4 	movhi	r16,3
   2694c:	dc400115 	stw	r17,4(sp)
   26950:	840e6204 	addi	r16,r16,14728
   26954:	2023883a 	mov	r17,r4
   26958:	2809883a 	mov	r4,r5
   2695c:	dfc00215 	stw	ra,8(sp)
   26960:	80000015 	stw	zero,0(r16)
   26964:	002d3f40 	call	2d3f4 <sbrk>
   26968:	00ffffc4 	movi	r3,-1
   2696c:	10c00526 	beq	r2,r3,26984 <_sbrk_r+0x44>
   26970:	dfc00217 	ldw	ra,8(sp)
   26974:	dc400117 	ldw	r17,4(sp)
   26978:	dc000017 	ldw	r16,0(sp)
   2697c:	dec00304 	addi	sp,sp,12
   26980:	f800283a 	ret
   26984:	80c00017 	ldw	r3,0(r16)
   26988:	183ff926 	beq	r3,zero,26970 <__alt_data_end+0xfffea450>
   2698c:	88c00015 	stw	r3,0(r17)
   26990:	003ff706 	br	26970 <__alt_data_end+0xfffea450>

00026994 <__sread>:
   26994:	defffe04 	addi	sp,sp,-8
   26998:	dc000015 	stw	r16,0(sp)
   2699c:	2821883a 	mov	r16,r5
   269a0:	2940038f 	ldh	r5,14(r5)
   269a4:	dfc00115 	stw	ra,4(sp)
   269a8:	0028ce80 	call	28ce8 <_read_r>
   269ac:	10000716 	blt	r2,zero,269cc <__sread+0x38>
   269b0:	80c01417 	ldw	r3,80(r16)
   269b4:	1887883a 	add	r3,r3,r2
   269b8:	80c01415 	stw	r3,80(r16)
   269bc:	dfc00117 	ldw	ra,4(sp)
   269c0:	dc000017 	ldw	r16,0(sp)
   269c4:	dec00204 	addi	sp,sp,8
   269c8:	f800283a 	ret
   269cc:	80c0030b 	ldhu	r3,12(r16)
   269d0:	18fbffcc 	andi	r3,r3,61439
   269d4:	80c0030d 	sth	r3,12(r16)
   269d8:	dfc00117 	ldw	ra,4(sp)
   269dc:	dc000017 	ldw	r16,0(sp)
   269e0:	dec00204 	addi	sp,sp,8
   269e4:	f800283a 	ret

000269e8 <__seofread>:
   269e8:	0005883a 	mov	r2,zero
   269ec:	f800283a 	ret

000269f0 <__swrite>:
   269f0:	2880030b 	ldhu	r2,12(r5)
   269f4:	defffb04 	addi	sp,sp,-20
   269f8:	dcc00315 	stw	r19,12(sp)
   269fc:	dc800215 	stw	r18,8(sp)
   26a00:	dc400115 	stw	r17,4(sp)
   26a04:	dc000015 	stw	r16,0(sp)
   26a08:	dfc00415 	stw	ra,16(sp)
   26a0c:	10c0400c 	andi	r3,r2,256
   26a10:	2821883a 	mov	r16,r5
   26a14:	2027883a 	mov	r19,r4
   26a18:	3025883a 	mov	r18,r6
   26a1c:	3823883a 	mov	r17,r7
   26a20:	18000526 	beq	r3,zero,26a38 <__swrite+0x48>
   26a24:	2940038f 	ldh	r5,14(r5)
   26a28:	000d883a 	mov	r6,zero
   26a2c:	01c00084 	movi	r7,2
   26a30:	0028b300 	call	28b30 <_lseek_r>
   26a34:	8080030b 	ldhu	r2,12(r16)
   26a38:	8140038f 	ldh	r5,14(r16)
   26a3c:	10bbffcc 	andi	r2,r2,61439
   26a40:	9809883a 	mov	r4,r19
   26a44:	900d883a 	mov	r6,r18
   26a48:	880f883a 	mov	r7,r17
   26a4c:	8080030d 	sth	r2,12(r16)
   26a50:	dfc00417 	ldw	ra,16(sp)
   26a54:	dcc00317 	ldw	r19,12(sp)
   26a58:	dc800217 	ldw	r18,8(sp)
   26a5c:	dc400117 	ldw	r17,4(sp)
   26a60:	dc000017 	ldw	r16,0(sp)
   26a64:	dec00504 	addi	sp,sp,20
   26a68:	00281681 	jmpi	28168 <_write_r>

00026a6c <__sseek>:
   26a6c:	defffe04 	addi	sp,sp,-8
   26a70:	dc000015 	stw	r16,0(sp)
   26a74:	2821883a 	mov	r16,r5
   26a78:	2940038f 	ldh	r5,14(r5)
   26a7c:	dfc00115 	stw	ra,4(sp)
   26a80:	0028b300 	call	28b30 <_lseek_r>
   26a84:	00ffffc4 	movi	r3,-1
   26a88:	10c00826 	beq	r2,r3,26aac <__sseek+0x40>
   26a8c:	80c0030b 	ldhu	r3,12(r16)
   26a90:	80801415 	stw	r2,80(r16)
   26a94:	18c40014 	ori	r3,r3,4096
   26a98:	80c0030d 	sth	r3,12(r16)
   26a9c:	dfc00117 	ldw	ra,4(sp)
   26aa0:	dc000017 	ldw	r16,0(sp)
   26aa4:	dec00204 	addi	sp,sp,8
   26aa8:	f800283a 	ret
   26aac:	80c0030b 	ldhu	r3,12(r16)
   26ab0:	18fbffcc 	andi	r3,r3,61439
   26ab4:	80c0030d 	sth	r3,12(r16)
   26ab8:	dfc00117 	ldw	ra,4(sp)
   26abc:	dc000017 	ldw	r16,0(sp)
   26ac0:	dec00204 	addi	sp,sp,8
   26ac4:	f800283a 	ret

00026ac8 <__sclose>:
   26ac8:	2940038f 	ldh	r5,14(r5)
   26acc:	00281c41 	jmpi	281c4 <_close_r>

00026ad0 <strcmp>:
   26ad0:	2144b03a 	or	r2,r4,r5
   26ad4:	108000cc 	andi	r2,r2,3
   26ad8:	1000171e 	bne	r2,zero,26b38 <strcmp+0x68>
   26adc:	20800017 	ldw	r2,0(r4)
   26ae0:	28c00017 	ldw	r3,0(r5)
   26ae4:	10c0141e 	bne	r2,r3,26b38 <strcmp+0x68>
   26ae8:	027fbff4 	movhi	r9,65279
   26aec:	4a7fbfc4 	addi	r9,r9,-257
   26af0:	0086303a 	nor	r3,zero,r2
   26af4:	02202074 	movhi	r8,32897
   26af8:	1245883a 	add	r2,r2,r9
   26afc:	42202004 	addi	r8,r8,-32640
   26b00:	10c4703a 	and	r2,r2,r3
   26b04:	1204703a 	and	r2,r2,r8
   26b08:	10000226 	beq	r2,zero,26b14 <strcmp+0x44>
   26b0c:	00001706 	br	26b6c <strcmp+0x9c>
   26b10:	1000161e 	bne	r2,zero,26b6c <strcmp+0x9c>
   26b14:	21000104 	addi	r4,r4,4
   26b18:	20c00017 	ldw	r3,0(r4)
   26b1c:	29400104 	addi	r5,r5,4
   26b20:	29800017 	ldw	r6,0(r5)
   26b24:	1a4f883a 	add	r7,r3,r9
   26b28:	00c4303a 	nor	r2,zero,r3
   26b2c:	3884703a 	and	r2,r7,r2
   26b30:	1204703a 	and	r2,r2,r8
   26b34:	19bff626 	beq	r3,r6,26b10 <__alt_data_end+0xfffea5f0>
   26b38:	20800007 	ldb	r2,0(r4)
   26b3c:	1000051e 	bne	r2,zero,26b54 <strcmp+0x84>
   26b40:	00000606 	br	26b5c <strcmp+0x8c>
   26b44:	21000044 	addi	r4,r4,1
   26b48:	20800007 	ldb	r2,0(r4)
   26b4c:	29400044 	addi	r5,r5,1
   26b50:	10000226 	beq	r2,zero,26b5c <strcmp+0x8c>
   26b54:	28c00007 	ldb	r3,0(r5)
   26b58:	10fffa26 	beq	r2,r3,26b44 <__alt_data_end+0xfffea624>
   26b5c:	20800003 	ldbu	r2,0(r4)
   26b60:	28c00003 	ldbu	r3,0(r5)
   26b64:	10c5c83a 	sub	r2,r2,r3
   26b68:	f800283a 	ret
   26b6c:	0005883a 	mov	r2,zero
   26b70:	f800283a 	ret

00026b74 <strlen>:
   26b74:	208000cc 	andi	r2,r4,3
   26b78:	10002026 	beq	r2,zero,26bfc <strlen+0x88>
   26b7c:	20800007 	ldb	r2,0(r4)
   26b80:	10002026 	beq	r2,zero,26c04 <strlen+0x90>
   26b84:	2005883a 	mov	r2,r4
   26b88:	00000206 	br	26b94 <strlen+0x20>
   26b8c:	10c00007 	ldb	r3,0(r2)
   26b90:	18001826 	beq	r3,zero,26bf4 <strlen+0x80>
   26b94:	10800044 	addi	r2,r2,1
   26b98:	10c000cc 	andi	r3,r2,3
   26b9c:	183ffb1e 	bne	r3,zero,26b8c <__alt_data_end+0xfffea66c>
   26ba0:	10c00017 	ldw	r3,0(r2)
   26ba4:	01ffbff4 	movhi	r7,65279
   26ba8:	39ffbfc4 	addi	r7,r7,-257
   26bac:	00ca303a 	nor	r5,zero,r3
   26bb0:	01a02074 	movhi	r6,32897
   26bb4:	19c7883a 	add	r3,r3,r7
   26bb8:	31a02004 	addi	r6,r6,-32640
   26bbc:	1946703a 	and	r3,r3,r5
   26bc0:	1986703a 	and	r3,r3,r6
   26bc4:	1800091e 	bne	r3,zero,26bec <strlen+0x78>
   26bc8:	10800104 	addi	r2,r2,4
   26bcc:	10c00017 	ldw	r3,0(r2)
   26bd0:	19cb883a 	add	r5,r3,r7
   26bd4:	00c6303a 	nor	r3,zero,r3
   26bd8:	28c6703a 	and	r3,r5,r3
   26bdc:	1986703a 	and	r3,r3,r6
   26be0:	183ff926 	beq	r3,zero,26bc8 <__alt_data_end+0xfffea6a8>
   26be4:	00000106 	br	26bec <strlen+0x78>
   26be8:	10800044 	addi	r2,r2,1
   26bec:	10c00007 	ldb	r3,0(r2)
   26bf0:	183ffd1e 	bne	r3,zero,26be8 <__alt_data_end+0xfffea6c8>
   26bf4:	1105c83a 	sub	r2,r2,r4
   26bf8:	f800283a 	ret
   26bfc:	2005883a 	mov	r2,r4
   26c00:	003fe706 	br	26ba0 <__alt_data_end+0xfffea680>
   26c04:	0005883a 	mov	r2,zero
   26c08:	f800283a 	ret

00026c0c <__sprint_r.part.0>:
   26c0c:	28801917 	ldw	r2,100(r5)
   26c10:	defff604 	addi	sp,sp,-40
   26c14:	dd400515 	stw	r21,20(sp)
   26c18:	dcc00315 	stw	r19,12(sp)
   26c1c:	dfc00915 	stw	ra,36(sp)
   26c20:	df000815 	stw	fp,32(sp)
   26c24:	ddc00715 	stw	r23,28(sp)
   26c28:	dd800615 	stw	r22,24(sp)
   26c2c:	dd000415 	stw	r20,16(sp)
   26c30:	dc800215 	stw	r18,8(sp)
   26c34:	dc400115 	stw	r17,4(sp)
   26c38:	dc000015 	stw	r16,0(sp)
   26c3c:	1088000c 	andi	r2,r2,8192
   26c40:	2827883a 	mov	r19,r5
   26c44:	302b883a 	mov	r21,r6
   26c48:	10002d26 	beq	r2,zero,26d00 <__sprint_r.part.0+0xf4>
   26c4c:	30800217 	ldw	r2,8(r6)
   26c50:	35800017 	ldw	r22,0(r6)
   26c54:	10002826 	beq	r2,zero,26cf8 <__sprint_r.part.0+0xec>
   26c58:	2029883a 	mov	r20,r4
   26c5c:	b5c00104 	addi	r23,r22,4
   26c60:	04bfffc4 	movi	r18,-1
   26c64:	bc400017 	ldw	r17,0(r23)
   26c68:	b4000017 	ldw	r16,0(r22)
   26c6c:	0039883a 	mov	fp,zero
   26c70:	8822d0ba 	srli	r17,r17,2
   26c74:	04400316 	blt	zero,r17,26c84 <__sprint_r.part.0+0x78>
   26c78:	00001706 	br	26cd8 <__sprint_r.part.0+0xcc>
   26c7c:	84000104 	addi	r16,r16,4
   26c80:	8f001526 	beq	r17,fp,26cd8 <__sprint_r.part.0+0xcc>
   26c84:	81400017 	ldw	r5,0(r16)
   26c88:	a009883a 	mov	r4,r20
   26c8c:	980d883a 	mov	r6,r19
   26c90:	00284040 	call	28404 <_fputwc_r>
   26c94:	e7000044 	addi	fp,fp,1
   26c98:	14bff81e 	bne	r2,r18,26c7c <__alt_data_end+0xfffea75c>
   26c9c:	9005883a 	mov	r2,r18
   26ca0:	a8000215 	stw	zero,8(r21)
   26ca4:	a8000115 	stw	zero,4(r21)
   26ca8:	dfc00917 	ldw	ra,36(sp)
   26cac:	df000817 	ldw	fp,32(sp)
   26cb0:	ddc00717 	ldw	r23,28(sp)
   26cb4:	dd800617 	ldw	r22,24(sp)
   26cb8:	dd400517 	ldw	r21,20(sp)
   26cbc:	dd000417 	ldw	r20,16(sp)
   26cc0:	dcc00317 	ldw	r19,12(sp)
   26cc4:	dc800217 	ldw	r18,8(sp)
   26cc8:	dc400117 	ldw	r17,4(sp)
   26ccc:	dc000017 	ldw	r16,0(sp)
   26cd0:	dec00a04 	addi	sp,sp,40
   26cd4:	f800283a 	ret
   26cd8:	a8c00217 	ldw	r3,8(r21)
   26cdc:	8c63883a 	add	r17,r17,r17
   26ce0:	8c63883a 	add	r17,r17,r17
   26ce4:	1c45c83a 	sub	r2,r3,r17
   26ce8:	a8800215 	stw	r2,8(r21)
   26cec:	b5800204 	addi	r22,r22,8
   26cf0:	bdc00204 	addi	r23,r23,8
   26cf4:	103fdb1e 	bne	r2,zero,26c64 <__alt_data_end+0xfffea744>
   26cf8:	0005883a 	mov	r2,zero
   26cfc:	003fe806 	br	26ca0 <__alt_data_end+0xfffea780>
   26d00:	00286380 	call	28638 <__sfvwrite_r>
   26d04:	003fe606 	br	26ca0 <__alt_data_end+0xfffea780>

00026d08 <__sprint_r>:
   26d08:	30c00217 	ldw	r3,8(r6)
   26d0c:	18000126 	beq	r3,zero,26d14 <__sprint_r+0xc>
   26d10:	0026c0c1 	jmpi	26c0c <__sprint_r.part.0>
   26d14:	30000115 	stw	zero,4(r6)
   26d18:	0005883a 	mov	r2,zero
   26d1c:	f800283a 	ret

00026d20 <___vfiprintf_internal_r>:
   26d20:	defeca04 	addi	sp,sp,-1240
   26d24:	dcc12f15 	stw	r19,1212(sp)
   26d28:	dfc13515 	stw	ra,1236(sp)
   26d2c:	df013415 	stw	fp,1232(sp)
   26d30:	ddc13315 	stw	r23,1228(sp)
   26d34:	dd813215 	stw	r22,1224(sp)
   26d38:	dd413115 	stw	r21,1220(sp)
   26d3c:	dd013015 	stw	r20,1216(sp)
   26d40:	dc812e15 	stw	r18,1208(sp)
   26d44:	dc412d15 	stw	r17,1204(sp)
   26d48:	dc012c15 	stw	r16,1200(sp)
   26d4c:	d9012115 	stw	r4,1156(sp)
   26d50:	d9412015 	stw	r5,1152(sp)
   26d54:	d9c12315 	stw	r7,1164(sp)
   26d58:	3027883a 	mov	r19,r6
   26d5c:	20000226 	beq	r4,zero,26d68 <___vfiprintf_internal_r+0x48>
   26d60:	20800e17 	ldw	r2,56(r4)
   26d64:	1000f726 	beq	r2,zero,27144 <___vfiprintf_internal_r+0x424>
   26d68:	d8812017 	ldw	r2,1152(sp)
   26d6c:	10c0030b 	ldhu	r3,12(r2)
   26d70:	1908000c 	andi	r4,r3,8192
   26d74:	1805883a 	mov	r2,r3
   26d78:	2000081e 	bne	r4,zero,26d9c <___vfiprintf_internal_r+0x7c>
   26d7c:	d9412017 	ldw	r5,1152(sp)
   26d80:	18880014 	ori	r2,r3,8192
   26d84:	00f7ffc4 	movi	r3,-8193
   26d88:	29001917 	ldw	r4,100(r5)
   26d8c:	2880030d 	sth	r2,12(r5)
   26d90:	20c8703a 	and	r4,r4,r3
   26d94:	29001915 	stw	r4,100(r5)
   26d98:	1007883a 	mov	r3,r2
   26d9c:	1100020c 	andi	r4,r2,8
   26da0:	2000a726 	beq	r4,zero,27040 <___vfiprintf_internal_r+0x320>
   26da4:	d9412017 	ldw	r5,1152(sp)
   26da8:	29000417 	ldw	r4,16(r5)
   26dac:	2000a426 	beq	r4,zero,27040 <___vfiprintf_internal_r+0x320>
   26db0:	1080068c 	andi	r2,r2,26
   26db4:	01000284 	movi	r4,10
   26db8:	1100ab26 	beq	r2,r4,27068 <___vfiprintf_internal_r+0x348>
   26dbc:	d9010a04 	addi	r4,sp,1064
   26dc0:	d94109c4 	addi	r5,sp,1063
   26dc4:	070000f4 	movhi	fp,3
   26dc8:	044000f4 	movhi	r17,3
   26dcc:	2145c83a 	sub	r2,r4,r5
   26dd0:	e7003204 	addi	fp,fp,200
   26dd4:	8c402e04 	addi	r17,r17,184
   26dd8:	d9011e15 	stw	r4,1144(sp)
   26ddc:	d9411f15 	stw	r5,1148(sp)
   26de0:	dec11a15 	stw	sp,1128(sp)
   26de4:	d8011c15 	stw	zero,1136(sp)
   26de8:	d8011b15 	stw	zero,1132(sp)
   26dec:	d8012715 	stw	zero,1180(sp)
   26df0:	d8012515 	stw	zero,1172(sp)
   26df4:	d811883a 	mov	r8,sp
   26df8:	d8812815 	stw	r2,1184(sp)
   26dfc:	982f883a 	mov	r23,r19
   26e00:	b8800007 	ldb	r2,0(r23)
   26e04:	1003b026 	beq	r2,zero,27cc8 <___vfiprintf_internal_r+0xfa8>
   26e08:	01000944 	movi	r4,37
   26e0c:	1103ae26 	beq	r2,r4,27cc8 <___vfiprintf_internal_r+0xfa8>
   26e10:	b805883a 	mov	r2,r23
   26e14:	00000106 	br	26e1c <___vfiprintf_internal_r+0xfc>
   26e18:	19000326 	beq	r3,r4,26e28 <___vfiprintf_internal_r+0x108>
   26e1c:	10800044 	addi	r2,r2,1
   26e20:	10c00007 	ldb	r3,0(r2)
   26e24:	183ffc1e 	bne	r3,zero,26e18 <__alt_data_end+0xfffea8f8>
   26e28:	15e1c83a 	sub	r16,r2,r23
   26e2c:	1029883a 	mov	r20,r2
   26e30:	80001026 	beq	r16,zero,26e74 <___vfiprintf_internal_r+0x154>
   26e34:	d8c11c17 	ldw	r3,1136(sp)
   26e38:	d8811b17 	ldw	r2,1132(sp)
   26e3c:	45c00015 	stw	r23,0(r8)
   26e40:	80c7883a 	add	r3,r16,r3
   26e44:	10800044 	addi	r2,r2,1
   26e48:	44000115 	stw	r16,4(r8)
   26e4c:	d8c11c15 	stw	r3,1136(sp)
   26e50:	d8811b15 	stw	r2,1132(sp)
   26e54:	010001c4 	movi	r4,7
   26e58:	2080740e 	bge	r4,r2,2702c <___vfiprintf_internal_r+0x30c>
   26e5c:	1803a71e 	bne	r3,zero,27cfc <___vfiprintf_internal_r+0xfdc>
   26e60:	d8c12517 	ldw	r3,1172(sp)
   26e64:	d8011b15 	stw	zero,1132(sp)
   26e68:	d811883a 	mov	r8,sp
   26e6c:	1c07883a 	add	r3,r3,r16
   26e70:	d8c12515 	stw	r3,1172(sp)
   26e74:	a0800007 	ldb	r2,0(r20)
   26e78:	1002bf26 	beq	r2,zero,27978 <___vfiprintf_internal_r+0xc58>
   26e7c:	a5c00044 	addi	r23,r20,1
   26e80:	a1800047 	ldb	r6,1(r20)
   26e84:	d8011d85 	stb	zero,1142(sp)
   26e88:	d8012205 	stb	zero,1160(sp)
   26e8c:	043fffc4 	movi	r16,-1
   26e90:	d8012415 	stw	zero,1168(sp)
   26e94:	0025883a 	mov	r18,zero
   26e98:	05001604 	movi	r20,88
   26e9c:	05400244 	movi	r21,9
   26ea0:	4027883a 	mov	r19,r8
   26ea4:	bdc00044 	addi	r23,r23,1
   26ea8:	30bff804 	addi	r2,r6,-32
   26eac:	a0825636 	bltu	r20,r2,27808 <___vfiprintf_internal_r+0xae8>
   26eb0:	100490ba 	slli	r2,r2,2
   26eb4:	010000b4 	movhi	r4,2
   26eb8:	211bb204 	addi	r4,r4,28360
   26ebc:	1105883a 	add	r2,r2,r4
   26ec0:	10800017 	ldw	r2,0(r2)
   26ec4:	1000683a 	jmp	r2
   26ec8:	00027798 	cmpnei	zero,zero,2526
   26ecc:	00027808 	cmpgei	zero,zero,2528
   26ed0:	00027808 	cmpgei	zero,zero,2528
   26ed4:	000277fc 	xorhi	zero,zero,2527
   26ed8:	00027808 	cmpgei	zero,zero,2528
   26edc:	00027808 	cmpgei	zero,zero,2528
   26ee0:	00027808 	cmpgei	zero,zero,2528
   26ee4:	00027808 	cmpgei	zero,zero,2528
   26ee8:	00027808 	cmpgei	zero,zero,2528
   26eec:	00027808 	cmpgei	zero,zero,2528
   26ef0:	00027588 	cmpgei	zero,zero,2518
   26ef4:	000277b0 	cmpltui	zero,zero,2526
   26ef8:	00027808 	cmpgei	zero,zero,2528
   26efc:	0002715c 	xori	zero,zero,2501
   26f00:	000275ac 	andhi	zero,zero,2518
   26f04:	00027808 	cmpgei	zero,zero,2528
   26f08:	00027168 	cmpgeui	zero,zero,2501
   26f0c:	00027174 	movhi	zero,2501
   26f10:	00027174 	movhi	zero,2501
   26f14:	00027174 	movhi	zero,2501
   26f18:	00027174 	movhi	zero,2501
   26f1c:	00027174 	movhi	zero,2501
   26f20:	00027174 	movhi	zero,2501
   26f24:	00027174 	movhi	zero,2501
   26f28:	00027174 	movhi	zero,2501
   26f2c:	00027174 	movhi	zero,2501
   26f30:	00027808 	cmpgei	zero,zero,2528
   26f34:	00027808 	cmpgei	zero,zero,2528
   26f38:	00027808 	cmpgei	zero,zero,2528
   26f3c:	00027808 	cmpgei	zero,zero,2528
   26f40:	00027808 	cmpgei	zero,zero,2528
   26f44:	00027808 	cmpgei	zero,zero,2528
   26f48:	00027808 	cmpgei	zero,zero,2528
   26f4c:	00027808 	cmpgei	zero,zero,2528
   26f50:	00027808 	cmpgei	zero,zero,2528
   26f54:	00027808 	cmpgei	zero,zero,2528
   26f58:	000271b4 	movhi	zero,2502
   26f5c:	00027808 	cmpgei	zero,zero,2528
   26f60:	00027808 	cmpgei	zero,zero,2528
   26f64:	00027808 	cmpgei	zero,zero,2528
   26f68:	00027808 	cmpgei	zero,zero,2528
   26f6c:	00027808 	cmpgei	zero,zero,2528
   26f70:	00027808 	cmpgei	zero,zero,2528
   26f74:	00027808 	cmpgei	zero,zero,2528
   26f78:	00027808 	cmpgei	zero,zero,2528
   26f7c:	00027808 	cmpgei	zero,zero,2528
   26f80:	00027808 	cmpgei	zero,zero,2528
   26f84:	000274a4 	muli	zero,zero,2514
   26f88:	00027808 	cmpgei	zero,zero,2528
   26f8c:	00027808 	cmpgei	zero,zero,2528
   26f90:	00027808 	cmpgei	zero,zero,2528
   26f94:	00027808 	cmpgei	zero,zero,2528
   26f98:	00027808 	cmpgei	zero,zero,2528
   26f9c:	000274e4 	muli	zero,zero,2515
   26fa0:	00027808 	cmpgei	zero,zero,2528
   26fa4:	00027808 	cmpgei	zero,zero,2528
   26fa8:	00027528 	cmpgeui	zero,zero,2516
   26fac:	00027808 	cmpgei	zero,zero,2528
   26fb0:	00027808 	cmpgei	zero,zero,2528
   26fb4:	00027808 	cmpgei	zero,zero,2528
   26fb8:	00027808 	cmpgei	zero,zero,2528
   26fbc:	00027808 	cmpgei	zero,zero,2528
   26fc0:	00027808 	cmpgei	zero,zero,2528
   26fc4:	00027808 	cmpgei	zero,zero,2528
   26fc8:	00027808 	cmpgei	zero,zero,2528
   26fcc:	00027808 	cmpgei	zero,zero,2528
   26fd0:	00027808 	cmpgei	zero,zero,2528
   26fd4:	00027470 	cmpltui	zero,zero,2513
   26fd8:	000277c0 	call	277c <__reset-0x1d884>
   26fdc:	00027808 	cmpgei	zero,zero,2528
   26fe0:	00027808 	cmpgei	zero,zero,2528
   26fe4:	00027808 	cmpgei	zero,zero,2528
   26fe8:	000275fc 	xorhi	zero,zero,2519
   26fec:	000277c0 	call	277c <__reset-0x1d884>
   26ff0:	00027808 	cmpgei	zero,zero,2528
   26ff4:	00027808 	cmpgei	zero,zero,2528
   26ff8:	00027514 	movui	zero,2516
   26ffc:	00027808 	cmpgei	zero,zero,2528
   27000:	00027760 	cmpeqi	zero,zero,2525
   27004:	000276e8 	cmpgeui	zero,zero,2523
   27008:	0002771c 	xori	zero,zero,2524
   2700c:	00027608 	cmpgei	zero,zero,2520
   27010:	00027808 	cmpgei	zero,zero,2528
   27014:	00027614 	movui	zero,2520
   27018:	00027808 	cmpgei	zero,zero,2528
   2701c:	00027670 	cmpltui	zero,zero,2521
   27020:	00027808 	cmpgei	zero,zero,2528
   27024:	00027808 	cmpgei	zero,zero,2528
   27028:	000276a4 	muli	zero,zero,2522
   2702c:	42000204 	addi	r8,r8,8
   27030:	d8c12517 	ldw	r3,1172(sp)
   27034:	1c07883a 	add	r3,r3,r16
   27038:	d8c12515 	stw	r3,1172(sp)
   2703c:	003f8d06 	br	26e74 <__alt_data_end+0xfffea954>
   27040:	d9012117 	ldw	r4,1156(sp)
   27044:	d9412017 	ldw	r5,1152(sp)
   27048:	00224f00 	call	224f0 <__swsetup_r>
   2704c:	1000301e 	bne	r2,zero,27110 <___vfiprintf_internal_r+0x3f0>
   27050:	d8812017 	ldw	r2,1152(sp)
   27054:	01000284 	movi	r4,10
   27058:	10c0030b 	ldhu	r3,12(r2)
   2705c:	1805883a 	mov	r2,r3
   27060:	1080068c 	andi	r2,r2,26
   27064:	113f551e 	bne	r2,r4,26dbc <__alt_data_end+0xfffea89c>
   27068:	d9012017 	ldw	r4,1152(sp)
   2706c:	2080038b 	ldhu	r2,14(r4)
   27070:	113fffcc 	andi	r4,r2,65535
   27074:	2120001c 	xori	r4,r4,32768
   27078:	21200004 	addi	r4,r4,-32768
   2707c:	203f4f16 	blt	r4,zero,26dbc <__alt_data_end+0xfffea89c>
   27080:	d9412017 	ldw	r5,1152(sp)
   27084:	d9012117 	ldw	r4,1156(sp)
   27088:	d9c12317 	ldw	r7,1164(sp)
   2708c:	2b001917 	ldw	r12,100(r5)
   27090:	2ac00717 	ldw	r11,28(r5)
   27094:	2a800917 	ldw	r10,36(r5)
   27098:	02010004 	movi	r8,1024
   2709c:	18ffff4c 	andi	r3,r3,65533
   270a0:	da0b883a 	add	r5,sp,r8
   270a4:	980d883a 	mov	r6,r19
   270a8:	d8c1030d 	sth	r3,1036(sp)
   270ac:	db011915 	stw	r12,1124(sp)
   270b0:	d881038d 	sth	r2,1038(sp)
   270b4:	dac10715 	stw	r11,1052(sp)
   270b8:	da810915 	stw	r10,1060(sp)
   270bc:	dec10015 	stw	sp,1024(sp)
   270c0:	dec10415 	stw	sp,1040(sp)
   270c4:	da010215 	stw	r8,1032(sp)
   270c8:	da010515 	stw	r8,1044(sp)
   270cc:	d8010615 	stw	zero,1048(sp)
   270d0:	0026d200 	call	26d20 <___vfiprintf_internal_r>
   270d4:	1021883a 	mov	r16,r2
   270d8:	10000416 	blt	r2,zero,270ec <___vfiprintf_internal_r+0x3cc>
   270dc:	d9012117 	ldw	r4,1156(sp)
   270e0:	d9410004 	addi	r5,sp,1024
   270e4:	0023f700 	call	23f70 <_fflush_r>
   270e8:	10040f1e 	bne	r2,zero,28128 <___vfiprintf_internal_r+0x1408>
   270ec:	d881030b 	ldhu	r2,1036(sp)
   270f0:	1080100c 	andi	r2,r2,64
   270f4:	10000426 	beq	r2,zero,27108 <___vfiprintf_internal_r+0x3e8>
   270f8:	d8c12017 	ldw	r3,1152(sp)
   270fc:	1880030b 	ldhu	r2,12(r3)
   27100:	10801014 	ori	r2,r2,64
   27104:	1880030d 	sth	r2,12(r3)
   27108:	8005883a 	mov	r2,r16
   2710c:	00000106 	br	27114 <___vfiprintf_internal_r+0x3f4>
   27110:	00bfffc4 	movi	r2,-1
   27114:	dfc13517 	ldw	ra,1236(sp)
   27118:	df013417 	ldw	fp,1232(sp)
   2711c:	ddc13317 	ldw	r23,1228(sp)
   27120:	dd813217 	ldw	r22,1224(sp)
   27124:	dd413117 	ldw	r21,1220(sp)
   27128:	dd013017 	ldw	r20,1216(sp)
   2712c:	dcc12f17 	ldw	r19,1212(sp)
   27130:	dc812e17 	ldw	r18,1208(sp)
   27134:	dc412d17 	ldw	r17,1204(sp)
   27138:	dc012c17 	ldw	r16,1200(sp)
   2713c:	dec13604 	addi	sp,sp,1240
   27140:	f800283a 	ret
   27144:	002452c0 	call	2452c <__sinit>
   27148:	003f0706 	br	26d68 <__alt_data_end+0xfffea848>
   2714c:	d8c12417 	ldw	r3,1168(sp)
   27150:	d8812315 	stw	r2,1164(sp)
   27154:	00c7c83a 	sub	r3,zero,r3
   27158:	d8c12415 	stw	r3,1168(sp)
   2715c:	94800114 	ori	r18,r18,4
   27160:	b9800007 	ldb	r6,0(r23)
   27164:	003f4f06 	br	26ea4 <__alt_data_end+0xfffea984>
   27168:	94802014 	ori	r18,r18,128
   2716c:	b9800007 	ldb	r6,0(r23)
   27170:	003f4c06 	br	26ea4 <__alt_data_end+0xfffea984>
   27174:	dc012615 	stw	r16,1176(sp)
   27178:	d8012415 	stw	zero,1168(sp)
   2717c:	35bff404 	addi	r22,r6,-48
   27180:	0009883a 	mov	r4,zero
   27184:	b821883a 	mov	r16,r23
   27188:	01400284 	movi	r5,10
   2718c:	002a3dc0 	call	2a3dc <__mulsi3>
   27190:	81800007 	ldb	r6,0(r16)
   27194:	1589883a 	add	r4,r2,r22
   27198:	bdc00044 	addi	r23,r23,1
   2719c:	35bff404 	addi	r22,r6,-48
   271a0:	b821883a 	mov	r16,r23
   271a4:	adbff82e 	bgeu	r21,r22,27188 <__alt_data_end+0xfffeac68>
   271a8:	d9012415 	stw	r4,1168(sp)
   271ac:	dc012617 	ldw	r16,1176(sp)
   271b0:	003f3d06 	br	26ea8 <__alt_data_end+0xfffea988>
   271b4:	d8c12203 	ldbu	r3,1160(sp)
   271b8:	94800414 	ori	r18,r18,16
   271bc:	9080080c 	andi	r2,r18,32
   271c0:	d8c11d85 	stb	r3,1142(sp)
   271c4:	9811883a 	mov	r8,r19
   271c8:	d8c12317 	ldw	r3,1164(sp)
   271cc:	10018226 	beq	r2,zero,277d8 <___vfiprintf_internal_r+0xab8>
   271d0:	d9012317 	ldw	r4,1164(sp)
   271d4:	18800117 	ldw	r2,4(r3)
   271d8:	1cc00017 	ldw	r19,0(r3)
   271dc:	21000204 	addi	r4,r4,8
   271e0:	d9012315 	stw	r4,1164(sp)
   271e4:	102b883a 	mov	r21,r2
   271e8:	10030016 	blt	r2,zero,27dec <___vfiprintf_internal_r+0x10cc>
   271ec:	dd811d83 	ldbu	r22,1142(sp)
   271f0:	8029883a 	mov	r20,r16
   271f4:	00800044 	movi	r2,1
   271f8:	9d46b03a 	or	r3,r19,r21
   271fc:	80000216 	blt	r16,zero,27208 <___vfiprintf_internal_r+0x4e8>
   27200:	013fdfc4 	movi	r4,-129
   27204:	9124703a 	and	r18,r18,r4
   27208:	1801b41e 	bne	r3,zero,278dc <___vfiprintf_internal_r+0xbbc>
   2720c:	80028126 	beq	r16,zero,27c14 <___vfiprintf_internal_r+0xef4>
   27210:	10803fcc 	andi	r2,r2,255
   27214:	00c00044 	movi	r3,1
   27218:	10c1d126 	beq	r2,r3,27960 <___vfiprintf_internal_r+0xc40>
   2721c:	00c00084 	movi	r3,2
   27220:	10c28626 	beq	r2,r3,27c3c <___vfiprintf_internal_r+0xf1c>
   27224:	d8c10a04 	addi	r3,sp,1064
   27228:	9808d0fa 	srli	r4,r19,3
   2722c:	a80a977a 	slli	r5,r21,29
   27230:	a82ad0fa 	srli	r21,r21,3
   27234:	9cc001cc 	andi	r19,r19,7
   27238:	98800c04 	addi	r2,r19,48
   2723c:	18ffffc4 	addi	r3,r3,-1
   27240:	2926b03a 	or	r19,r5,r4
   27244:	18800005 	stb	r2,0(r3)
   27248:	9d48b03a 	or	r4,r19,r21
   2724c:	203ff61e 	bne	r4,zero,27228 <__alt_data_end+0xfffead08>
   27250:	9100004c 	andi	r4,r18,1
   27254:	d8c12215 	stw	r3,1160(sp)
   27258:	2002b31e 	bne	r4,zero,27d28 <___vfiprintf_internal_r+0x1008>
   2725c:	d9411e17 	ldw	r5,1144(sp)
   27260:	28e9c83a 	sub	r20,r5,r3
   27264:	a02b883a 	mov	r21,r20
   27268:	a400010e 	bge	r20,r16,27270 <___vfiprintf_internal_r+0x550>
   2726c:	802b883a 	mov	r21,r16
   27270:	b5803fcc 	andi	r22,r22,255
   27274:	b580201c 	xori	r22,r22,128
   27278:	b5bfe004 	addi	r22,r22,-128
   2727c:	b0000126 	beq	r22,zero,27284 <___vfiprintf_internal_r+0x564>
   27280:	ad400044 	addi	r21,r21,1
   27284:	9280008c 	andi	r10,r18,2
   27288:	50000126 	beq	r10,zero,27290 <___vfiprintf_internal_r+0x570>
   2728c:	ad400084 	addi	r21,r21,2
   27290:	9580210c 	andi	r22,r18,132
   27294:	b001751e 	bne	r22,zero,2786c <___vfiprintf_internal_r+0xb4c>
   27298:	d9012417 	ldw	r4,1168(sp)
   2729c:	2567c83a 	sub	r19,r4,r21
   272a0:	04c1720e 	bge	zero,r19,2786c <___vfiprintf_internal_r+0xb4c>
   272a4:	01c00404 	movi	r7,16
   272a8:	d8c11c17 	ldw	r3,1136(sp)
   272ac:	3cc36b0e 	bge	r7,r19,2805c <___vfiprintf_internal_r+0x133c>
   272b0:	008000f4 	movhi	r2,3
   272b4:	10803204 	addi	r2,r2,200
   272b8:	dc012915 	stw	r16,1188(sp)
   272bc:	d9011b17 	ldw	r4,1132(sp)
   272c0:	9821883a 	mov	r16,r19
   272c4:	d8812615 	stw	r2,1176(sp)
   272c8:	030001c4 	movi	r12,7
   272cc:	5027883a 	mov	r19,r10
   272d0:	00000506 	br	272e8 <___vfiprintf_internal_r+0x5c8>
   272d4:	21400084 	addi	r5,r4,2
   272d8:	42000204 	addi	r8,r8,8
   272dc:	1009883a 	mov	r4,r2
   272e0:	843ffc04 	addi	r16,r16,-16
   272e4:	3c000d0e 	bge	r7,r16,2731c <___vfiprintf_internal_r+0x5fc>
   272e8:	18c00404 	addi	r3,r3,16
   272ec:	20800044 	addi	r2,r4,1
   272f0:	47000015 	stw	fp,0(r8)
   272f4:	41c00115 	stw	r7,4(r8)
   272f8:	d8c11c15 	stw	r3,1136(sp)
   272fc:	d8811b15 	stw	r2,1132(sp)
   27300:	60bff40e 	bge	r12,r2,272d4 <__alt_data_end+0xfffeadb4>
   27304:	18014b1e 	bne	r3,zero,27834 <___vfiprintf_internal_r+0xb14>
   27308:	843ffc04 	addi	r16,r16,-16
   2730c:	0009883a 	mov	r4,zero
   27310:	01400044 	movi	r5,1
   27314:	d811883a 	mov	r8,sp
   27318:	3c3ff316 	blt	r7,r16,272e8 <__alt_data_end+0xfffeadc8>
   2731c:	9815883a 	mov	r10,r19
   27320:	8027883a 	mov	r19,r16
   27324:	dc012917 	ldw	r16,1188(sp)
   27328:	d9012617 	ldw	r4,1176(sp)
   2732c:	98c7883a 	add	r3,r19,r3
   27330:	44c00115 	stw	r19,4(r8)
   27334:	41000015 	stw	r4,0(r8)
   27338:	d8c11c15 	stw	r3,1136(sp)
   2733c:	d9411b15 	stw	r5,1132(sp)
   27340:	008001c4 	movi	r2,7
   27344:	11425116 	blt	r2,r5,27c8c <___vfiprintf_internal_r+0xf6c>
   27348:	d9011d87 	ldb	r4,1142(sp)
   2734c:	42000204 	addi	r8,r8,8
   27350:	28800044 	addi	r2,r5,1
   27354:	20014a1e 	bne	r4,zero,27880 <___vfiprintf_internal_r+0xb60>
   27358:	50000c26 	beq	r10,zero,2738c <___vfiprintf_internal_r+0x66c>
   2735c:	d9011d04 	addi	r4,sp,1140
   27360:	18c00084 	addi	r3,r3,2
   27364:	41000015 	stw	r4,0(r8)
   27368:	01000084 	movi	r4,2
   2736c:	41000115 	stw	r4,4(r8)
   27370:	d8c11c15 	stw	r3,1136(sp)
   27374:	d8811b15 	stw	r2,1132(sp)
   27378:	010001c4 	movi	r4,7
   2737c:	20822016 	blt	r4,r2,27c00 <___vfiprintf_internal_r+0xee0>
   27380:	100b883a 	mov	r5,r2
   27384:	42000204 	addi	r8,r8,8
   27388:	10800044 	addi	r2,r2,1
   2738c:	01002004 	movi	r4,128
   27390:	b101de26 	beq	r22,r4,27b0c <___vfiprintf_internal_r+0xdec>
   27394:	8521c83a 	sub	r16,r16,r20
   27398:	0400230e 	bge	zero,r16,27428 <___vfiprintf_internal_r+0x708>
   2739c:	04c00404 	movi	r19,16
   273a0:	9c030d0e 	bge	r19,r16,27fd8 <___vfiprintf_internal_r+0x12b8>
   273a4:	008000f4 	movhi	r2,3
   273a8:	10802e04 	addi	r2,r2,184
   273ac:	d8812615 	stw	r2,1176(sp)
   273b0:	058001c4 	movi	r22,7
   273b4:	00000506 	br	273cc <___vfiprintf_internal_r+0x6ac>
   273b8:	28800084 	addi	r2,r5,2
   273bc:	42000204 	addi	r8,r8,8
   273c0:	200b883a 	mov	r5,r4
   273c4:	843ffc04 	addi	r16,r16,-16
   273c8:	9c000d0e 	bge	r19,r16,27400 <___vfiprintf_internal_r+0x6e0>
   273cc:	18c00404 	addi	r3,r3,16
   273d0:	29000044 	addi	r4,r5,1
   273d4:	44400015 	stw	r17,0(r8)
   273d8:	44c00115 	stw	r19,4(r8)
   273dc:	d8c11c15 	stw	r3,1136(sp)
   273e0:	d9011b15 	stw	r4,1132(sp)
   273e4:	b13ff40e 	bge	r22,r4,273b8 <__alt_data_end+0xfffeae98>
   273e8:	1801321e 	bne	r3,zero,278b4 <___vfiprintf_internal_r+0xb94>
   273ec:	843ffc04 	addi	r16,r16,-16
   273f0:	000b883a 	mov	r5,zero
   273f4:	00800044 	movi	r2,1
   273f8:	d811883a 	mov	r8,sp
   273fc:	9c3ff316 	blt	r19,r16,273cc <__alt_data_end+0xfffeaeac>
   27400:	d9012617 	ldw	r4,1176(sp)
   27404:	1c07883a 	add	r3,r3,r16
   27408:	44000115 	stw	r16,4(r8)
   2740c:	41000015 	stw	r4,0(r8)
   27410:	d8c11c15 	stw	r3,1136(sp)
   27414:	d8811b15 	stw	r2,1132(sp)
   27418:	010001c4 	movi	r4,7
   2741c:	20816216 	blt	r4,r2,279a8 <___vfiprintf_internal_r+0xc88>
   27420:	42000204 	addi	r8,r8,8
   27424:	10800044 	addi	r2,r2,1
   27428:	d9012217 	ldw	r4,1160(sp)
   2742c:	1d07883a 	add	r3,r3,r20
   27430:	45000115 	stw	r20,4(r8)
   27434:	41000015 	stw	r4,0(r8)
   27438:	d8c11c15 	stw	r3,1136(sp)
   2743c:	d8811b15 	stw	r2,1132(sp)
   27440:	010001c4 	movi	r4,7
   27444:	2081610e 	bge	r4,r2,279cc <___vfiprintf_internal_r+0xcac>
   27448:	1802211e 	bne	r3,zero,27cd0 <___vfiprintf_internal_r+0xfb0>
   2744c:	d8011b15 	stw	zero,1132(sp)
   27450:	9480010c 	andi	r18,r18,4
   27454:	9002171e 	bne	r18,zero,27cb4 <___vfiprintf_internal_r+0xf94>
   27458:	d9412417 	ldw	r5,1168(sp)
   2745c:	a9433716 	blt	r21,r5,2813c <___vfiprintf_internal_r+0x141c>
   27460:	d8812517 	ldw	r2,1172(sp)
   27464:	1545883a 	add	r2,r2,r21
   27468:	d8812515 	stw	r2,1172(sp)
   2746c:	00019a06 	br	27ad8 <___vfiprintf_internal_r+0xdb8>
   27470:	d8c12317 	ldw	r3,1164(sp)
   27474:	05400044 	movi	r21,1
   27478:	9811883a 	mov	r8,r19
   2747c:	18800017 	ldw	r2,0(r3)
   27480:	18c00104 	addi	r3,r3,4
   27484:	d8c12315 	stw	r3,1164(sp)
   27488:	d8c10004 	addi	r3,sp,1024
   2748c:	d8011d85 	stb	zero,1142(sp)
   27490:	d8810005 	stb	r2,1024(sp)
   27494:	a829883a 	mov	r20,r21
   27498:	d8c12215 	stw	r3,1160(sp)
   2749c:	0021883a 	mov	r16,zero
   274a0:	003f7806 	br	27284 <__alt_data_end+0xfffead64>
   274a4:	94800414 	ori	r18,r18,16
   274a8:	9080080c 	andi	r2,r18,32
   274ac:	9811883a 	mov	r8,r19
   274b0:	10009026 	beq	r2,zero,276f4 <___vfiprintf_internal_r+0x9d4>
   274b4:	d8812317 	ldw	r2,1164(sp)
   274b8:	d8c12317 	ldw	r3,1164(sp)
   274bc:	14c00017 	ldw	r19,0(r2)
   274c0:	15400117 	ldw	r21,4(r2)
   274c4:	18c00204 	addi	r3,r3,8
   274c8:	d8c12315 	stw	r3,1164(sp)
   274cc:	0005883a 	mov	r2,zero
   274d0:	9d46b03a 	or	r3,r19,r21
   274d4:	d8011d85 	stb	zero,1142(sp)
   274d8:	8029883a 	mov	r20,r16
   274dc:	002d883a 	mov	r22,zero
   274e0:	003f4606 	br	271fc <__alt_data_end+0xfffeacdc>
   274e4:	94800414 	ori	r18,r18,16
   274e8:	9080080c 	andi	r2,r18,32
   274ec:	9811883a 	mov	r8,r19
   274f0:	10006226 	beq	r2,zero,2767c <___vfiprintf_internal_r+0x95c>
   274f4:	d9012317 	ldw	r4,1164(sp)
   274f8:	00800044 	movi	r2,1
   274fc:	24c00017 	ldw	r19,0(r4)
   27500:	25400117 	ldw	r21,4(r4)
   27504:	21000204 	addi	r4,r4,8
   27508:	d9012315 	stw	r4,1164(sp)
   2750c:	9d46b03a 	or	r3,r19,r21
   27510:	003ff006 	br	274d4 <__alt_data_end+0xfffeafb4>
   27514:	b9800007 	ldb	r6,0(r23)
   27518:	00801b04 	movi	r2,108
   2751c:	3082b226 	beq	r6,r2,27fe8 <___vfiprintf_internal_r+0x12c8>
   27520:	94800414 	ori	r18,r18,16
   27524:	003e5f06 	br	26ea4 <__alt_data_end+0xfffea984>
   27528:	d8c12203 	ldbu	r3,1160(sp)
   2752c:	010000f4 	movhi	r4,3
   27530:	213fc804 	addi	r4,r4,-224
   27534:	d8c11d85 	stb	r3,1142(sp)
   27538:	d9012715 	stw	r4,1180(sp)
   2753c:	90c0080c 	andi	r3,r18,32
   27540:	9811883a 	mov	r8,r19
   27544:	d8812317 	ldw	r2,1164(sp)
   27548:	18005f26 	beq	r3,zero,276c8 <___vfiprintf_internal_r+0x9a8>
   2754c:	d9012317 	ldw	r4,1164(sp)
   27550:	14c00017 	ldw	r19,0(r2)
   27554:	15400117 	ldw	r21,4(r2)
   27558:	21000204 	addi	r4,r4,8
   2755c:	d9012315 	stw	r4,1164(sp)
   27560:	9080004c 	andi	r2,r18,1
   27564:	1001e226 	beq	r2,zero,27cf0 <___vfiprintf_internal_r+0xfd0>
   27568:	9d46b03a 	or	r3,r19,r21
   2756c:	18024e26 	beq	r3,zero,27ea8 <___vfiprintf_internal_r+0x1188>
   27570:	00800c04 	movi	r2,48
   27574:	d8811d05 	stb	r2,1140(sp)
   27578:	d9811d45 	stb	r6,1141(sp)
   2757c:	94800094 	ori	r18,r18,2
   27580:	00800084 	movi	r2,2
   27584:	003fd306 	br	274d4 <__alt_data_end+0xfffeafb4>
   27588:	d9012317 	ldw	r4,1164(sp)
   2758c:	d9412317 	ldw	r5,1164(sp)
   27590:	21000017 	ldw	r4,0(r4)
   27594:	28800104 	addi	r2,r5,4
   27598:	d9012415 	stw	r4,1168(sp)
   2759c:	203eeb16 	blt	r4,zero,2714c <__alt_data_end+0xfffeac2c>
   275a0:	d8812315 	stw	r2,1164(sp)
   275a4:	b9800007 	ldb	r6,0(r23)
   275a8:	003e3e06 	br	26ea4 <__alt_data_end+0xfffea984>
   275ac:	b9800007 	ldb	r6,0(r23)
   275b0:	01000a84 	movi	r4,42
   275b4:	b8800044 	addi	r2,r23,1
   275b8:	3102d226 	beq	r6,r4,28104 <___vfiprintf_internal_r+0x13e4>
   275bc:	35bff404 	addi	r22,r6,-48
   275c0:	102f883a 	mov	r23,r2
   275c4:	0021883a 	mov	r16,zero
   275c8:	adbe3736 	bltu	r21,r22,26ea8 <__alt_data_end+0xfffea988>
   275cc:	0009883a 	mov	r4,zero
   275d0:	01400284 	movi	r5,10
   275d4:	002a3dc0 	call	2a3dc <__mulsi3>
   275d8:	b9800007 	ldb	r6,0(r23)
   275dc:	b089883a 	add	r4,r22,r2
   275e0:	bdc00044 	addi	r23,r23,1
   275e4:	35bff404 	addi	r22,r6,-48
   275e8:	adbff92e 	bgeu	r21,r22,275d0 <__alt_data_end+0xfffeb0b0>
   275ec:	2021883a 	mov	r16,r4
   275f0:	203e2d0e 	bge	r4,zero,26ea8 <__alt_data_end+0xfffea988>
   275f4:	043fffc4 	movi	r16,-1
   275f8:	003e2b06 	br	26ea8 <__alt_data_end+0xfffea988>
   275fc:	94801014 	ori	r18,r18,64
   27600:	b9800007 	ldb	r6,0(r23)
   27604:	003e2706 	br	26ea4 <__alt_data_end+0xfffea984>
   27608:	94800814 	ori	r18,r18,32
   2760c:	b9800007 	ldb	r6,0(r23)
   27610:	003e2406 	br	26ea4 <__alt_data_end+0xfffea984>
   27614:	d9412317 	ldw	r5,1164(sp)
   27618:	d8812317 	ldw	r2,1164(sp)
   2761c:	d8011d85 	stb	zero,1142(sp)
   27620:	29400017 	ldw	r5,0(r5)
   27624:	9811883a 	mov	r8,r19
   27628:	14c00104 	addi	r19,r2,4
   2762c:	d9412215 	stw	r5,1160(sp)
   27630:	28029026 	beq	r5,zero,28074 <___vfiprintf_internal_r+0x1354>
   27634:	d9012217 	ldw	r4,1160(sp)
   27638:	80027616 	blt	r16,zero,28014 <___vfiprintf_internal_r+0x12f4>
   2763c:	000b883a 	mov	r5,zero
   27640:	800d883a 	mov	r6,r16
   27644:	da012a15 	stw	r8,1192(sp)
   27648:	00255400 	call	25540 <memchr>
   2764c:	da012a17 	ldw	r8,1192(sp)
   27650:	1002a026 	beq	r2,zero,280d4 <___vfiprintf_internal_r+0x13b4>
   27654:	d8c12217 	ldw	r3,1160(sp)
   27658:	10e9c83a 	sub	r20,r2,r3
   2765c:	85023816 	blt	r16,r20,27f40 <___vfiprintf_internal_r+0x1220>
   27660:	dd811d83 	ldbu	r22,1142(sp)
   27664:	dcc12315 	stw	r19,1164(sp)
   27668:	0021883a 	mov	r16,zero
   2766c:	003efd06 	br	27264 <__alt_data_end+0xfffead44>
   27670:	9080080c 	andi	r2,r18,32
   27674:	9811883a 	mov	r8,r19
   27678:	103f9e1e 	bne	r2,zero,274f4 <__alt_data_end+0xfffeafd4>
   2767c:	9080040c 	andi	r2,r18,16
   27680:	10021726 	beq	r2,zero,27ee0 <___vfiprintf_internal_r+0x11c0>
   27684:	d9412317 	ldw	r5,1164(sp)
   27688:	002b883a 	mov	r21,zero
   2768c:	00800044 	movi	r2,1
   27690:	2cc00017 	ldw	r19,0(r5)
   27694:	29400104 	addi	r5,r5,4
   27698:	d9412315 	stw	r5,1164(sp)
   2769c:	9807883a 	mov	r3,r19
   276a0:	003f8c06 	br	274d4 <__alt_data_end+0xfffeafb4>
   276a4:	d8c12203 	ldbu	r3,1160(sp)
   276a8:	010000f4 	movhi	r4,3
   276ac:	213fcd04 	addi	r4,r4,-204
   276b0:	d8c11d85 	stb	r3,1142(sp)
   276b4:	d9012715 	stw	r4,1180(sp)
   276b8:	90c0080c 	andi	r3,r18,32
   276bc:	9811883a 	mov	r8,r19
   276c0:	d8812317 	ldw	r2,1164(sp)
   276c4:	183fa11e 	bne	r3,zero,2754c <__alt_data_end+0xfffeb02c>
   276c8:	90c0040c 	andi	r3,r18,16
   276cc:	1801e526 	beq	r3,zero,27e64 <___vfiprintf_internal_r+0x1144>
   276d0:	d9412317 	ldw	r5,1164(sp)
   276d4:	14c00017 	ldw	r19,0(r2)
   276d8:	002b883a 	mov	r21,zero
   276dc:	29400104 	addi	r5,r5,4
   276e0:	d9412315 	stw	r5,1164(sp)
   276e4:	003f9e06 	br	27560 <__alt_data_end+0xfffeb040>
   276e8:	9080080c 	andi	r2,r18,32
   276ec:	9811883a 	mov	r8,r19
   276f0:	103f701e 	bne	r2,zero,274b4 <__alt_data_end+0xfffeaf94>
   276f4:	9080040c 	andi	r2,r18,16
   276f8:	1001ef26 	beq	r2,zero,27eb8 <___vfiprintf_internal_r+0x1198>
   276fc:	d9012317 	ldw	r4,1164(sp)
   27700:	002b883a 	mov	r21,zero
   27704:	0005883a 	mov	r2,zero
   27708:	24c00017 	ldw	r19,0(r4)
   2770c:	21000104 	addi	r4,r4,4
   27710:	d9012315 	stw	r4,1164(sp)
   27714:	9807883a 	mov	r3,r19
   27718:	003f6e06 	br	274d4 <__alt_data_end+0xfffeafb4>
   2771c:	d8c12317 	ldw	r3,1164(sp)
   27720:	9811883a 	mov	r8,r19
   27724:	00800c04 	movi	r2,48
   27728:	1cc00017 	ldw	r19,0(r3)
   2772c:	010000f4 	movhi	r4,3
   27730:	18c00104 	addi	r3,r3,4
   27734:	d8811d05 	stb	r2,1140(sp)
   27738:	213fcd04 	addi	r4,r4,-204
   2773c:	00801e04 	movi	r2,120
   27740:	d8811d45 	stb	r2,1141(sp)
   27744:	d8c12315 	stw	r3,1164(sp)
   27748:	002b883a 	mov	r21,zero
   2774c:	94800094 	ori	r18,r18,2
   27750:	d9012715 	stw	r4,1180(sp)
   27754:	00800084 	movi	r2,2
   27758:	9807883a 	mov	r3,r19
   2775c:	003f5d06 	br	274d4 <__alt_data_end+0xfffeafb4>
   27760:	d8c12203 	ldbu	r3,1160(sp)
   27764:	9080080c 	andi	r2,r18,32
   27768:	9811883a 	mov	r8,r19
   2776c:	d8c11d85 	stb	r3,1142(sp)
   27770:	1001b126 	beq	r2,zero,27e38 <___vfiprintf_internal_r+0x1118>
   27774:	d9012317 	ldw	r4,1164(sp)
   27778:	d9412517 	ldw	r5,1172(sp)
   2777c:	20800017 	ldw	r2,0(r4)
   27780:	2807d7fa 	srai	r3,r5,31
   27784:	21000104 	addi	r4,r4,4
   27788:	d9012315 	stw	r4,1164(sp)
   2778c:	11400015 	stw	r5,0(r2)
   27790:	10c00115 	stw	r3,4(r2)
   27794:	003d9a06 	br	26e00 <__alt_data_end+0xfffea8e0>
   27798:	d8812207 	ldb	r2,1160(sp)
   2779c:	1001c41e 	bne	r2,zero,27eb0 <___vfiprintf_internal_r+0x1190>
   277a0:	00c00804 	movi	r3,32
   277a4:	d8c12205 	stb	r3,1160(sp)
   277a8:	b9800007 	ldb	r6,0(r23)
   277ac:	003dbd06 	br	26ea4 <__alt_data_end+0xfffea984>
   277b0:	00c00ac4 	movi	r3,43
   277b4:	d8c12205 	stb	r3,1160(sp)
   277b8:	b9800007 	ldb	r6,0(r23)
   277bc:	003db906 	br	26ea4 <__alt_data_end+0xfffea984>
   277c0:	d8c12203 	ldbu	r3,1160(sp)
   277c4:	9080080c 	andi	r2,r18,32
   277c8:	9811883a 	mov	r8,r19
   277cc:	d8c11d85 	stb	r3,1142(sp)
   277d0:	d8c12317 	ldw	r3,1164(sp)
   277d4:	103e7e1e 	bne	r2,zero,271d0 <__alt_data_end+0xfffeacb0>
   277d8:	9080040c 	andi	r2,r18,16
   277dc:	1001a926 	beq	r2,zero,27e84 <___vfiprintf_internal_r+0x1164>
   277e0:	1cc00017 	ldw	r19,0(r3)
   277e4:	d9412317 	ldw	r5,1164(sp)
   277e8:	982bd7fa 	srai	r21,r19,31
   277ec:	29400104 	addi	r5,r5,4
   277f0:	d9412315 	stw	r5,1164(sp)
   277f4:	a805883a 	mov	r2,r21
   277f8:	003e7b06 	br	271e8 <__alt_data_end+0xfffeacc8>
   277fc:	94800054 	ori	r18,r18,1
   27800:	b9800007 	ldb	r6,0(r23)
   27804:	003da706 	br	26ea4 <__alt_data_end+0xfffea984>
   27808:	d8c12203 	ldbu	r3,1160(sp)
   2780c:	9811883a 	mov	r8,r19
   27810:	d8c11d85 	stb	r3,1142(sp)
   27814:	30005826 	beq	r6,zero,27978 <___vfiprintf_internal_r+0xc58>
   27818:	05400044 	movi	r21,1
   2781c:	d8c10004 	addi	r3,sp,1024
   27820:	d9810005 	stb	r6,1024(sp)
   27824:	d8011d85 	stb	zero,1142(sp)
   27828:	a829883a 	mov	r20,r21
   2782c:	d8c12215 	stw	r3,1160(sp)
   27830:	003f1a06 	br	2749c <__alt_data_end+0xfffeaf7c>
   27834:	d9012117 	ldw	r4,1156(sp)
   27838:	d9412017 	ldw	r5,1152(sp)
   2783c:	d9811a04 	addi	r6,sp,1128
   27840:	d9c12a15 	stw	r7,1192(sp)
   27844:	db012b15 	stw	r12,1196(sp)
   27848:	0026c0c0 	call	26c0c <__sprint_r.part.0>
   2784c:	d9c12a17 	ldw	r7,1192(sp)
   27850:	db012b17 	ldw	r12,1196(sp)
   27854:	10004e1e 	bne	r2,zero,27990 <___vfiprintf_internal_r+0xc70>
   27858:	d9011b17 	ldw	r4,1132(sp)
   2785c:	d8c11c17 	ldw	r3,1136(sp)
   27860:	d811883a 	mov	r8,sp
   27864:	21400044 	addi	r5,r4,1
   27868:	003e9d06 	br	272e0 <__alt_data_end+0xfffeadc0>
   2786c:	d9411b17 	ldw	r5,1132(sp)
   27870:	d8c11c17 	ldw	r3,1136(sp)
   27874:	28800044 	addi	r2,r5,1
   27878:	d9011d87 	ldb	r4,1142(sp)
   2787c:	203eb626 	beq	r4,zero,27358 <__alt_data_end+0xfffeae38>
   27880:	01000044 	movi	r4,1
   27884:	d9411d84 	addi	r5,sp,1142
   27888:	1907883a 	add	r3,r3,r4
   2788c:	41400015 	stw	r5,0(r8)
   27890:	41000115 	stw	r4,4(r8)
   27894:	d8c11c15 	stw	r3,1136(sp)
   27898:	d8811b15 	stw	r2,1132(sp)
   2789c:	014001c4 	movi	r5,7
   278a0:	2880ce16 	blt	r5,r2,27bdc <___vfiprintf_internal_r+0xebc>
   278a4:	100b883a 	mov	r5,r2
   278a8:	42000204 	addi	r8,r8,8
   278ac:	10800044 	addi	r2,r2,1
   278b0:	003ea906 	br	27358 <__alt_data_end+0xfffeae38>
   278b4:	d9012117 	ldw	r4,1156(sp)
   278b8:	d9412017 	ldw	r5,1152(sp)
   278bc:	d9811a04 	addi	r6,sp,1128
   278c0:	0026c0c0 	call	26c0c <__sprint_r.part.0>
   278c4:	1000321e 	bne	r2,zero,27990 <___vfiprintf_internal_r+0xc70>
   278c8:	d9411b17 	ldw	r5,1132(sp)
   278cc:	d8c11c17 	ldw	r3,1136(sp)
   278d0:	d811883a 	mov	r8,sp
   278d4:	28800044 	addi	r2,r5,1
   278d8:	003eba06 	br	273c4 <__alt_data_end+0xfffeaea4>
   278dc:	10803fcc 	andi	r2,r2,255
   278e0:	00c00044 	movi	r3,1
   278e4:	10fe4d1e 	bne	r2,r3,2721c <__alt_data_end+0xfffeacfc>
   278e8:	a800021e 	bne	r21,zero,278f4 <___vfiprintf_internal_r+0xbd4>
   278ec:	00800244 	movi	r2,9
   278f0:	14c01b2e 	bgeu	r2,r19,27960 <___vfiprintf_internal_r+0xc40>
   278f4:	dc012215 	stw	r16,1160(sp)
   278f8:	dd010a04 	addi	r20,sp,1064
   278fc:	a821883a 	mov	r16,r21
   27900:	402b883a 	mov	r21,r8
   27904:	9809883a 	mov	r4,r19
   27908:	800b883a 	mov	r5,r16
   2790c:	01800284 	movi	r6,10
   27910:	000f883a 	mov	r7,zero
   27914:	0029c940 	call	29c94 <__umoddi3>
   27918:	10800c04 	addi	r2,r2,48
   2791c:	a53fffc4 	addi	r20,r20,-1
   27920:	9809883a 	mov	r4,r19
   27924:	800b883a 	mov	r5,r16
   27928:	01800284 	movi	r6,10
   2792c:	000f883a 	mov	r7,zero
   27930:	a0800005 	stb	r2,0(r20)
   27934:	00296540 	call	29654 <__udivdi3>
   27938:	1027883a 	mov	r19,r2
   2793c:	10c4b03a 	or	r2,r2,r3
   27940:	1821883a 	mov	r16,r3
   27944:	103fef1e 	bne	r2,zero,27904 <__alt_data_end+0xfffeb3e4>
   27948:	d9011e17 	ldw	r4,1144(sp)
   2794c:	dc012217 	ldw	r16,1160(sp)
   27950:	a811883a 	mov	r8,r21
   27954:	dd012215 	stw	r20,1160(sp)
   27958:	2529c83a 	sub	r20,r4,r20
   2795c:	003e4106 	br	27264 <__alt_data_end+0xfffead44>
   27960:	9cc00c04 	addi	r19,r19,48
   27964:	d8c109c4 	addi	r3,sp,1063
   27968:	dcc109c5 	stb	r19,1063(sp)
   2796c:	dd012817 	ldw	r20,1184(sp)
   27970:	d8c12215 	stw	r3,1160(sp)
   27974:	003e3b06 	br	27264 <__alt_data_end+0xfffead44>
   27978:	d8811c17 	ldw	r2,1136(sp)
   2797c:	10000426 	beq	r2,zero,27990 <___vfiprintf_internal_r+0xc70>
   27980:	d9012117 	ldw	r4,1156(sp)
   27984:	d9412017 	ldw	r5,1152(sp)
   27988:	d9811a04 	addi	r6,sp,1128
   2798c:	0026c0c0 	call	26c0c <__sprint_r.part.0>
   27990:	d9412017 	ldw	r5,1152(sp)
   27994:	2880030b 	ldhu	r2,12(r5)
   27998:	1080100c 	andi	r2,r2,64
   2799c:	103ddc1e 	bne	r2,zero,27110 <__alt_data_end+0xfffeabf0>
   279a0:	d8812517 	ldw	r2,1172(sp)
   279a4:	003ddb06 	br	27114 <__alt_data_end+0xfffeabf4>
   279a8:	1801061e 	bne	r3,zero,27dc4 <___vfiprintf_internal_r+0x10a4>
   279ac:	d8c12217 	ldw	r3,1160(sp)
   279b0:	00800044 	movi	r2,1
   279b4:	dd000115 	stw	r20,4(sp)
   279b8:	d8c00015 	stw	r3,0(sp)
   279bc:	dd011c15 	stw	r20,1136(sp)
   279c0:	d8811b15 	stw	r2,1132(sp)
   279c4:	a007883a 	mov	r3,r20
   279c8:	d811883a 	mov	r8,sp
   279cc:	42000204 	addi	r8,r8,8
   279d0:	9480010c 	andi	r18,r18,4
   279d4:	90003426 	beq	r18,zero,27aa8 <___vfiprintf_internal_r+0xd88>
   279d8:	d9412417 	ldw	r5,1168(sp)
   279dc:	2d65c83a 	sub	r18,r5,r21
   279e0:	0480310e 	bge	zero,r18,27aa8 <___vfiprintf_internal_r+0xd88>
   279e4:	04000404 	movi	r16,16
   279e8:	8481ad0e 	bge	r16,r18,280a0 <___vfiprintf_internal_r+0x1380>
   279ec:	014000f4 	movhi	r5,3
   279f0:	29403204 	addi	r5,r5,200
   279f4:	d9011b17 	ldw	r4,1132(sp)
   279f8:	d9412615 	stw	r5,1176(sp)
   279fc:	04c001c4 	movi	r19,7
   27a00:	dd012117 	ldw	r20,1156(sp)
   27a04:	dd812017 	ldw	r22,1152(sp)
   27a08:	00000506 	br	27a20 <___vfiprintf_internal_r+0xd00>
   27a0c:	21400084 	addi	r5,r4,2
   27a10:	42000204 	addi	r8,r8,8
   27a14:	1009883a 	mov	r4,r2
   27a18:	94bffc04 	addi	r18,r18,-16
   27a1c:	84800d0e 	bge	r16,r18,27a54 <___vfiprintf_internal_r+0xd34>
   27a20:	18c00404 	addi	r3,r3,16
   27a24:	20800044 	addi	r2,r4,1
   27a28:	47000015 	stw	fp,0(r8)
   27a2c:	44000115 	stw	r16,4(r8)
   27a30:	d8c11c15 	stw	r3,1136(sp)
   27a34:	d8811b15 	stw	r2,1132(sp)
   27a38:	98bff40e 	bge	r19,r2,27a0c <__alt_data_end+0xfffeb4ec>
   27a3c:	1800291e 	bne	r3,zero,27ae4 <___vfiprintf_internal_r+0xdc4>
   27a40:	94bffc04 	addi	r18,r18,-16
   27a44:	0009883a 	mov	r4,zero
   27a48:	01400044 	movi	r5,1
   27a4c:	d811883a 	mov	r8,sp
   27a50:	84bff316 	blt	r16,r18,27a20 <__alt_data_end+0xfffeb500>
   27a54:	d8812617 	ldw	r2,1176(sp)
   27a58:	1c87883a 	add	r3,r3,r18
   27a5c:	44800115 	stw	r18,4(r8)
   27a60:	40800015 	stw	r2,0(r8)
   27a64:	d8c11c15 	stw	r3,1136(sp)
   27a68:	d9411b15 	stw	r5,1132(sp)
   27a6c:	008001c4 	movi	r2,7
   27a70:	11400d0e 	bge	r2,r5,27aa8 <___vfiprintf_internal_r+0xd88>
   27a74:	1800061e 	bne	r3,zero,27a90 <___vfiprintf_internal_r+0xd70>
   27a78:	d8c12417 	ldw	r3,1168(sp)
   27a7c:	a8c12e16 	blt	r21,r3,27f38 <___vfiprintf_internal_r+0x1218>
   27a80:	d9012517 	ldw	r4,1172(sp)
   27a84:	2549883a 	add	r4,r4,r21
   27a88:	d9012515 	stw	r4,1172(sp)
   27a8c:	00001206 	br	27ad8 <___vfiprintf_internal_r+0xdb8>
   27a90:	d9012117 	ldw	r4,1156(sp)
   27a94:	d9412017 	ldw	r5,1152(sp)
   27a98:	d9811a04 	addi	r6,sp,1128
   27a9c:	0026c0c0 	call	26c0c <__sprint_r.part.0>
   27aa0:	103fbb1e 	bne	r2,zero,27990 <__alt_data_end+0xfffeb470>
   27aa4:	d8c11c17 	ldw	r3,1136(sp)
   27aa8:	d8812417 	ldw	r2,1168(sp)
   27aac:	a880010e 	bge	r21,r2,27ab4 <___vfiprintf_internal_r+0xd94>
   27ab0:	102b883a 	mov	r21,r2
   27ab4:	d9012517 	ldw	r4,1172(sp)
   27ab8:	2549883a 	add	r4,r4,r21
   27abc:	d9012515 	stw	r4,1172(sp)
   27ac0:	18000526 	beq	r3,zero,27ad8 <___vfiprintf_internal_r+0xdb8>
   27ac4:	d9012117 	ldw	r4,1156(sp)
   27ac8:	d9412017 	ldw	r5,1152(sp)
   27acc:	d9811a04 	addi	r6,sp,1128
   27ad0:	0026c0c0 	call	26c0c <__sprint_r.part.0>
   27ad4:	103fae1e 	bne	r2,zero,27990 <__alt_data_end+0xfffeb470>
   27ad8:	d8011b15 	stw	zero,1132(sp)
   27adc:	d811883a 	mov	r8,sp
   27ae0:	003cc706 	br	26e00 <__alt_data_end+0xfffea8e0>
   27ae4:	a009883a 	mov	r4,r20
   27ae8:	b00b883a 	mov	r5,r22
   27aec:	d9811a04 	addi	r6,sp,1128
   27af0:	0026c0c0 	call	26c0c <__sprint_r.part.0>
   27af4:	103fa61e 	bne	r2,zero,27990 <__alt_data_end+0xfffeb470>
   27af8:	d9011b17 	ldw	r4,1132(sp)
   27afc:	d8c11c17 	ldw	r3,1136(sp)
   27b00:	d811883a 	mov	r8,sp
   27b04:	21400044 	addi	r5,r4,1
   27b08:	003fc306 	br	27a18 <__alt_data_end+0xfffeb4f8>
   27b0c:	d9012417 	ldw	r4,1168(sp)
   27b10:	256dc83a 	sub	r22,r4,r21
   27b14:	05be1f0e 	bge	zero,r22,27394 <__alt_data_end+0xfffeae74>
   27b18:	04c00404 	movi	r19,16
   27b1c:	9d81720e 	bge	r19,r22,280e8 <___vfiprintf_internal_r+0x13c8>
   27b20:	008000f4 	movhi	r2,3
   27b24:	10802e04 	addi	r2,r2,184
   27b28:	d8812615 	stw	r2,1176(sp)
   27b2c:	028001c4 	movi	r10,7
   27b30:	00000506 	br	27b48 <___vfiprintf_internal_r+0xe28>
   27b34:	29000084 	addi	r4,r5,2
   27b38:	42000204 	addi	r8,r8,8
   27b3c:	100b883a 	mov	r5,r2
   27b40:	b5bffc04 	addi	r22,r22,-16
   27b44:	9d800d0e 	bge	r19,r22,27b7c <___vfiprintf_internal_r+0xe5c>
   27b48:	18c00404 	addi	r3,r3,16
   27b4c:	28800044 	addi	r2,r5,1
   27b50:	44400015 	stw	r17,0(r8)
   27b54:	44c00115 	stw	r19,4(r8)
   27b58:	d8c11c15 	stw	r3,1136(sp)
   27b5c:	d8811b15 	stw	r2,1132(sp)
   27b60:	50bff40e 	bge	r10,r2,27b34 <__alt_data_end+0xfffeb614>
   27b64:	1800111e 	bne	r3,zero,27bac <___vfiprintf_internal_r+0xe8c>
   27b68:	b5bffc04 	addi	r22,r22,-16
   27b6c:	000b883a 	mov	r5,zero
   27b70:	01000044 	movi	r4,1
   27b74:	d811883a 	mov	r8,sp
   27b78:	9dbff316 	blt	r19,r22,27b48 <__alt_data_end+0xfffeb628>
   27b7c:	d9412617 	ldw	r5,1176(sp)
   27b80:	1d87883a 	add	r3,r3,r22
   27b84:	45800115 	stw	r22,4(r8)
   27b88:	41400015 	stw	r5,0(r8)
   27b8c:	d8c11c15 	stw	r3,1136(sp)
   27b90:	d9011b15 	stw	r4,1132(sp)
   27b94:	008001c4 	movi	r2,7
   27b98:	11008516 	blt	r2,r4,27db0 <___vfiprintf_internal_r+0x1090>
   27b9c:	42000204 	addi	r8,r8,8
   27ba0:	20800044 	addi	r2,r4,1
   27ba4:	200b883a 	mov	r5,r4
   27ba8:	003dfa06 	br	27394 <__alt_data_end+0xfffeae74>
   27bac:	d9012117 	ldw	r4,1156(sp)
   27bb0:	d9412017 	ldw	r5,1152(sp)
   27bb4:	d9811a04 	addi	r6,sp,1128
   27bb8:	da812a15 	stw	r10,1192(sp)
   27bbc:	0026c0c0 	call	26c0c <__sprint_r.part.0>
   27bc0:	da812a17 	ldw	r10,1192(sp)
   27bc4:	103f721e 	bne	r2,zero,27990 <__alt_data_end+0xfffeb470>
   27bc8:	d9411b17 	ldw	r5,1132(sp)
   27bcc:	d8c11c17 	ldw	r3,1136(sp)
   27bd0:	d811883a 	mov	r8,sp
   27bd4:	29000044 	addi	r4,r5,1
   27bd8:	003fd906 	br	27b40 <__alt_data_end+0xfffeb620>
   27bdc:	1800681e 	bne	r3,zero,27d80 <___vfiprintf_internal_r+0x1060>
   27be0:	50004d26 	beq	r10,zero,27d18 <___vfiprintf_internal_r+0xff8>
   27be4:	d8811d04 	addi	r2,sp,1140
   27be8:	00c00084 	movi	r3,2
   27bec:	d8800015 	stw	r2,0(sp)
   27bf0:	d8c00115 	stw	r3,4(sp)
   27bf4:	2005883a 	mov	r2,r4
   27bf8:	d811883a 	mov	r8,sp
   27bfc:	003de006 	br	27380 <__alt_data_end+0xfffeae60>
   27c00:	1800551e 	bne	r3,zero,27d58 <___vfiprintf_internal_r+0x1038>
   27c04:	000b883a 	mov	r5,zero
   27c08:	00800044 	movi	r2,1
   27c0c:	d811883a 	mov	r8,sp
   27c10:	003dde06 	br	2738c <__alt_data_end+0xfffeae6c>
   27c14:	10803fcc 	andi	r2,r2,255
   27c18:	1000191e 	bne	r2,zero,27c80 <___vfiprintf_internal_r+0xf60>
   27c1c:	9080004c 	andi	r2,r18,1
   27c20:	10001726 	beq	r2,zero,27c80 <___vfiprintf_internal_r+0xf60>
   27c24:	00800c04 	movi	r2,48
   27c28:	d8c109c4 	addi	r3,sp,1063
   27c2c:	d88109c5 	stb	r2,1063(sp)
   27c30:	dd012817 	ldw	r20,1184(sp)
   27c34:	d8c12215 	stw	r3,1160(sp)
   27c38:	003d8a06 	br	27264 <__alt_data_end+0xfffead44>
   27c3c:	d9012717 	ldw	r4,1180(sp)
   27c40:	dd010a04 	addi	r20,sp,1064
   27c44:	988003cc 	andi	r2,r19,15
   27c48:	a806973a 	slli	r3,r21,28
   27c4c:	2085883a 	add	r2,r4,r2
   27c50:	9826d13a 	srli	r19,r19,4
   27c54:	10800003 	ldbu	r2,0(r2)
   27c58:	a82ad13a 	srli	r21,r21,4
   27c5c:	a53fffc4 	addi	r20,r20,-1
   27c60:	1ce6b03a 	or	r19,r3,r19
   27c64:	a0800005 	stb	r2,0(r20)
   27c68:	9d44b03a 	or	r2,r19,r21
   27c6c:	103ff51e 	bne	r2,zero,27c44 <__alt_data_end+0xfffeb724>
   27c70:	d9411e17 	ldw	r5,1144(sp)
   27c74:	dd012215 	stw	r20,1160(sp)
   27c78:	2d29c83a 	sub	r20,r5,r20
   27c7c:	003d7906 	br	27264 <__alt_data_end+0xfffead44>
   27c80:	d8c10a04 	addi	r3,sp,1064
   27c84:	d8c12215 	stw	r3,1160(sp)
   27c88:	003d7606 	br	27264 <__alt_data_end+0xfffead44>
   27c8c:	18009e1e 	bne	r3,zero,27f08 <___vfiprintf_internal_r+0x11e8>
   27c90:	d8811d87 	ldb	r2,1142(sp)
   27c94:	10005f26 	beq	r2,zero,27e14 <___vfiprintf_internal_r+0x10f4>
   27c98:	00c00044 	movi	r3,1
   27c9c:	d9011d84 	addi	r4,sp,1142
   27ca0:	1805883a 	mov	r2,r3
   27ca4:	d9000015 	stw	r4,0(sp)
   27ca8:	d8c00115 	stw	r3,4(sp)
   27cac:	d811883a 	mov	r8,sp
   27cb0:	003efc06 	br	278a4 <__alt_data_end+0xfffeb384>
   27cb4:	d9412417 	ldw	r5,1168(sp)
   27cb8:	d811883a 	mov	r8,sp
   27cbc:	2d65c83a 	sub	r18,r5,r21
   27cc0:	04bf4816 	blt	zero,r18,279e4 <__alt_data_end+0xfffeb4c4>
   27cc4:	003f6c06 	br	27a78 <__alt_data_end+0xfffeb558>
   27cc8:	b829883a 	mov	r20,r23
   27ccc:	003c6906 	br	26e74 <__alt_data_end+0xfffea954>
   27cd0:	d9012117 	ldw	r4,1156(sp)
   27cd4:	d9412017 	ldw	r5,1152(sp)
   27cd8:	d9811a04 	addi	r6,sp,1128
   27cdc:	0026c0c0 	call	26c0c <__sprint_r.part.0>
   27ce0:	103f2b1e 	bne	r2,zero,27990 <__alt_data_end+0xfffeb470>
   27ce4:	d8c11c17 	ldw	r3,1136(sp)
   27ce8:	d811883a 	mov	r8,sp
   27cec:	003f3806 	br	279d0 <__alt_data_end+0xfffeb4b0>
   27cf0:	00800084 	movi	r2,2
   27cf4:	9d46b03a 	or	r3,r19,r21
   27cf8:	003df606 	br	274d4 <__alt_data_end+0xfffeafb4>
   27cfc:	d9012117 	ldw	r4,1156(sp)
   27d00:	d9412017 	ldw	r5,1152(sp)
   27d04:	d9811a04 	addi	r6,sp,1128
   27d08:	0026c0c0 	call	26c0c <__sprint_r.part.0>
   27d0c:	103f201e 	bne	r2,zero,27990 <__alt_data_end+0xfffeb470>
   27d10:	d811883a 	mov	r8,sp
   27d14:	003cc606 	br	27030 <__alt_data_end+0xfffeab10>
   27d18:	000b883a 	mov	r5,zero
   27d1c:	2005883a 	mov	r2,r4
   27d20:	d811883a 	mov	r8,sp
   27d24:	003d9906 	br	2738c <__alt_data_end+0xfffeae6c>
   27d28:	10803fcc 	andi	r2,r2,255
   27d2c:	1080201c 	xori	r2,r2,128
   27d30:	10bfe004 	addi	r2,r2,-128
   27d34:	01000c04 	movi	r4,48
   27d38:	1100b226 	beq	r2,r4,28004 <___vfiprintf_internal_r+0x12e4>
   27d3c:	d9412217 	ldw	r5,1160(sp)
   27d40:	d8811e17 	ldw	r2,1144(sp)
   27d44:	193fffc5 	stb	r4,-1(r3)
   27d48:	297fffc4 	addi	r5,r5,-1
   27d4c:	d9412215 	stw	r5,1160(sp)
   27d50:	1169c83a 	sub	r20,r2,r5
   27d54:	003d4306 	br	27264 <__alt_data_end+0xfffead44>
   27d58:	d9012117 	ldw	r4,1156(sp)
   27d5c:	d9412017 	ldw	r5,1152(sp)
   27d60:	d9811a04 	addi	r6,sp,1128
   27d64:	0026c0c0 	call	26c0c <__sprint_r.part.0>
   27d68:	103f091e 	bne	r2,zero,27990 <__alt_data_end+0xfffeb470>
   27d6c:	d9411b17 	ldw	r5,1132(sp)
   27d70:	d8c11c17 	ldw	r3,1136(sp)
   27d74:	d811883a 	mov	r8,sp
   27d78:	28800044 	addi	r2,r5,1
   27d7c:	003d8306 	br	2738c <__alt_data_end+0xfffeae6c>
   27d80:	d9012117 	ldw	r4,1156(sp)
   27d84:	d9412017 	ldw	r5,1152(sp)
   27d88:	d9811a04 	addi	r6,sp,1128
   27d8c:	da812a15 	stw	r10,1192(sp)
   27d90:	0026c0c0 	call	26c0c <__sprint_r.part.0>
   27d94:	da812a17 	ldw	r10,1192(sp)
   27d98:	103efd1e 	bne	r2,zero,27990 <__alt_data_end+0xfffeb470>
   27d9c:	d9411b17 	ldw	r5,1132(sp)
   27da0:	d8c11c17 	ldw	r3,1136(sp)
   27da4:	d811883a 	mov	r8,sp
   27da8:	28800044 	addi	r2,r5,1
   27dac:	003d6a06 	br	27358 <__alt_data_end+0xfffeae38>
   27db0:	1800a01e 	bne	r3,zero,28034 <___vfiprintf_internal_r+0x1314>
   27db4:	000b883a 	mov	r5,zero
   27db8:	00800044 	movi	r2,1
   27dbc:	d811883a 	mov	r8,sp
   27dc0:	003d7406 	br	27394 <__alt_data_end+0xfffeae74>
   27dc4:	d9012117 	ldw	r4,1156(sp)
   27dc8:	d9412017 	ldw	r5,1152(sp)
   27dcc:	d9811a04 	addi	r6,sp,1128
   27dd0:	0026c0c0 	call	26c0c <__sprint_r.part.0>
   27dd4:	103eee1e 	bne	r2,zero,27990 <__alt_data_end+0xfffeb470>
   27dd8:	d8811b17 	ldw	r2,1132(sp)
   27ddc:	d8c11c17 	ldw	r3,1136(sp)
   27de0:	d811883a 	mov	r8,sp
   27de4:	10800044 	addi	r2,r2,1
   27de8:	003d8f06 	br	27428 <__alt_data_end+0xfffeaf08>
   27dec:	04e7c83a 	sub	r19,zero,r19
   27df0:	9804c03a 	cmpne	r2,r19,zero
   27df4:	056bc83a 	sub	r21,zero,r21
   27df8:	a8abc83a 	sub	r21,r21,r2
   27dfc:	05800b44 	movi	r22,45
   27e00:	dd811d85 	stb	r22,1142(sp)
   27e04:	8029883a 	mov	r20,r16
   27e08:	00800044 	movi	r2,1
   27e0c:	9d46b03a 	or	r3,r19,r21
   27e10:	003cfa06 	br	271fc <__alt_data_end+0xfffeacdc>
   27e14:	000b883a 	mov	r5,zero
   27e18:	00800044 	movi	r2,1
   27e1c:	d811883a 	mov	r8,sp
   27e20:	503d5a26 	beq	r10,zero,2738c <__alt_data_end+0xfffeae6c>
   27e24:	00c00084 	movi	r3,2
   27e28:	d9011d04 	addi	r4,sp,1140
   27e2c:	d9000015 	stw	r4,0(sp)
   27e30:	d8c00115 	stw	r3,4(sp)
   27e34:	003d5206 	br	27380 <__alt_data_end+0xfffeae60>
   27e38:	9080040c 	andi	r2,r18,16
   27e3c:	1000421e 	bne	r2,zero,27f48 <___vfiprintf_internal_r+0x1228>
   27e40:	9480100c 	andi	r18,r18,64
   27e44:	90009c26 	beq	r18,zero,280b8 <___vfiprintf_internal_r+0x1398>
   27e48:	d9412317 	ldw	r5,1164(sp)
   27e4c:	d8c12517 	ldw	r3,1172(sp)
   27e50:	28800017 	ldw	r2,0(r5)
   27e54:	29400104 	addi	r5,r5,4
   27e58:	d9412315 	stw	r5,1164(sp)
   27e5c:	10c0000d 	sth	r3,0(r2)
   27e60:	003be706 	br	26e00 <__alt_data_end+0xfffea8e0>
   27e64:	90c0100c 	andi	r3,r18,64
   27e68:	18003e26 	beq	r3,zero,27f64 <___vfiprintf_internal_r+0x1244>
   27e6c:	d8c12317 	ldw	r3,1164(sp)
   27e70:	14c0000b 	ldhu	r19,0(r2)
   27e74:	002b883a 	mov	r21,zero
   27e78:	18c00104 	addi	r3,r3,4
   27e7c:	d8c12315 	stw	r3,1164(sp)
   27e80:	003db706 	br	27560 <__alt_data_end+0xfffeb040>
   27e84:	9080100c 	andi	r2,r18,64
   27e88:	10004c26 	beq	r2,zero,27fbc <___vfiprintf_internal_r+0x129c>
   27e8c:	1cc0000f 	ldh	r19,0(r3)
   27e90:	d8812317 	ldw	r2,1164(sp)
   27e94:	982bd7fa 	srai	r21,r19,31
   27e98:	10800104 	addi	r2,r2,4
   27e9c:	d8812315 	stw	r2,1164(sp)
   27ea0:	a805883a 	mov	r2,r21
   27ea4:	003cd006 	br	271e8 <__alt_data_end+0xfffeacc8>
   27ea8:	00800084 	movi	r2,2
   27eac:	003d8906 	br	274d4 <__alt_data_end+0xfffeafb4>
   27eb0:	b9800007 	ldb	r6,0(r23)
   27eb4:	003bfb06 	br	26ea4 <__alt_data_end+0xfffea984>
   27eb8:	9080100c 	andi	r2,r18,64
   27ebc:	10003726 	beq	r2,zero,27f9c <___vfiprintf_internal_r+0x127c>
   27ec0:	d9412317 	ldw	r5,1164(sp)
   27ec4:	002b883a 	mov	r21,zero
   27ec8:	0005883a 	mov	r2,zero
   27ecc:	2cc0000b 	ldhu	r19,0(r5)
   27ed0:	29400104 	addi	r5,r5,4
   27ed4:	d9412315 	stw	r5,1164(sp)
   27ed8:	9807883a 	mov	r3,r19
   27edc:	003d7d06 	br	274d4 <__alt_data_end+0xfffeafb4>
   27ee0:	9080100c 	andi	r2,r18,64
   27ee4:	10002526 	beq	r2,zero,27f7c <___vfiprintf_internal_r+0x125c>
   27ee8:	d8812317 	ldw	r2,1164(sp)
   27eec:	002b883a 	mov	r21,zero
   27ef0:	14c0000b 	ldhu	r19,0(r2)
   27ef4:	10800104 	addi	r2,r2,4
   27ef8:	d8812315 	stw	r2,1164(sp)
   27efc:	9807883a 	mov	r3,r19
   27f00:	00800044 	movi	r2,1
   27f04:	003d7306 	br	274d4 <__alt_data_end+0xfffeafb4>
   27f08:	d9012117 	ldw	r4,1156(sp)
   27f0c:	d9412017 	ldw	r5,1152(sp)
   27f10:	d9811a04 	addi	r6,sp,1128
   27f14:	da812a15 	stw	r10,1192(sp)
   27f18:	0026c0c0 	call	26c0c <__sprint_r.part.0>
   27f1c:	da812a17 	ldw	r10,1192(sp)
   27f20:	103e9b1e 	bne	r2,zero,27990 <__alt_data_end+0xfffeb470>
   27f24:	d9411b17 	ldw	r5,1132(sp)
   27f28:	d8c11c17 	ldw	r3,1136(sp)
   27f2c:	d811883a 	mov	r8,sp
   27f30:	28800044 	addi	r2,r5,1
   27f34:	003e5006 	br	27878 <__alt_data_end+0xfffeb358>
   27f38:	182b883a 	mov	r21,r3
   27f3c:	003ed006 	br	27a80 <__alt_data_end+0xfffeb560>
   27f40:	8029883a 	mov	r20,r16
   27f44:	003dc606 	br	27660 <__alt_data_end+0xfffeb140>
   27f48:	d8c12317 	ldw	r3,1164(sp)
   27f4c:	d9012517 	ldw	r4,1172(sp)
   27f50:	18800017 	ldw	r2,0(r3)
   27f54:	18c00104 	addi	r3,r3,4
   27f58:	d8c12315 	stw	r3,1164(sp)
   27f5c:	11000015 	stw	r4,0(r2)
   27f60:	003ba706 	br	26e00 <__alt_data_end+0xfffea8e0>
   27f64:	d9012317 	ldw	r4,1164(sp)
   27f68:	14c00017 	ldw	r19,0(r2)
   27f6c:	002b883a 	mov	r21,zero
   27f70:	21000104 	addi	r4,r4,4
   27f74:	d9012315 	stw	r4,1164(sp)
   27f78:	003d7906 	br	27560 <__alt_data_end+0xfffeb040>
   27f7c:	d8c12317 	ldw	r3,1164(sp)
   27f80:	002b883a 	mov	r21,zero
   27f84:	00800044 	movi	r2,1
   27f88:	1cc00017 	ldw	r19,0(r3)
   27f8c:	18c00104 	addi	r3,r3,4
   27f90:	d8c12315 	stw	r3,1164(sp)
   27f94:	9807883a 	mov	r3,r19
   27f98:	003d4e06 	br	274d4 <__alt_data_end+0xfffeafb4>
   27f9c:	d8812317 	ldw	r2,1164(sp)
   27fa0:	002b883a 	mov	r21,zero
   27fa4:	14c00017 	ldw	r19,0(r2)
   27fa8:	10800104 	addi	r2,r2,4
   27fac:	d8812315 	stw	r2,1164(sp)
   27fb0:	9807883a 	mov	r3,r19
   27fb4:	0005883a 	mov	r2,zero
   27fb8:	003d4606 	br	274d4 <__alt_data_end+0xfffeafb4>
   27fbc:	1cc00017 	ldw	r19,0(r3)
   27fc0:	d8c12317 	ldw	r3,1164(sp)
   27fc4:	982bd7fa 	srai	r21,r19,31
   27fc8:	18c00104 	addi	r3,r3,4
   27fcc:	d8c12315 	stw	r3,1164(sp)
   27fd0:	a805883a 	mov	r2,r21
   27fd4:	003c8406 	br	271e8 <__alt_data_end+0xfffeacc8>
   27fd8:	010000f4 	movhi	r4,3
   27fdc:	21002e04 	addi	r4,r4,184
   27fe0:	d9012615 	stw	r4,1176(sp)
   27fe4:	003d0606 	br	27400 <__alt_data_end+0xfffeaee0>
   27fe8:	b9800043 	ldbu	r6,1(r23)
   27fec:	94800814 	ori	r18,r18,32
   27ff0:	bdc00044 	addi	r23,r23,1
   27ff4:	31803fcc 	andi	r6,r6,255
   27ff8:	3180201c 	xori	r6,r6,128
   27ffc:	31bfe004 	addi	r6,r6,-128
   28000:	003ba806 	br	26ea4 <__alt_data_end+0xfffea984>
   28004:	d8811e17 	ldw	r2,1144(sp)
   28008:	d8c12217 	ldw	r3,1160(sp)
   2800c:	10e9c83a 	sub	r20,r2,r3
   28010:	003c9406 	br	27264 <__alt_data_end+0xfffead44>
   28014:	da012a15 	stw	r8,1192(sp)
   28018:	0026b740 	call	26b74 <strlen>
   2801c:	1029883a 	mov	r20,r2
   28020:	dd811d83 	ldbu	r22,1142(sp)
   28024:	dcc12315 	stw	r19,1164(sp)
   28028:	0021883a 	mov	r16,zero
   2802c:	da012a17 	ldw	r8,1192(sp)
   28030:	003c8c06 	br	27264 <__alt_data_end+0xfffead44>
   28034:	d9012117 	ldw	r4,1156(sp)
   28038:	d9412017 	ldw	r5,1152(sp)
   2803c:	d9811a04 	addi	r6,sp,1128
   28040:	0026c0c0 	call	26c0c <__sprint_r.part.0>
   28044:	103e521e 	bne	r2,zero,27990 <__alt_data_end+0xfffeb470>
   28048:	d9411b17 	ldw	r5,1132(sp)
   2804c:	d8c11c17 	ldw	r3,1136(sp)
   28050:	d811883a 	mov	r8,sp
   28054:	28800044 	addi	r2,r5,1
   28058:	003cce06 	br	27394 <__alt_data_end+0xfffeae74>
   2805c:	014000f4 	movhi	r5,3
   28060:	29403204 	addi	r5,r5,200
   28064:	d9412615 	stw	r5,1176(sp)
   28068:	d9411b17 	ldw	r5,1132(sp)
   2806c:	29400044 	addi	r5,r5,1
   28070:	003cad06 	br	27328 <__alt_data_end+0xfffeae08>
   28074:	00800184 	movi	r2,6
   28078:	1400012e 	bgeu	r2,r16,28080 <___vfiprintf_internal_r+0x1360>
   2807c:	1021883a 	mov	r16,r2
   28080:	8029883a 	mov	r20,r16
   28084:	802b883a 	mov	r21,r16
   28088:	80001c16 	blt	r16,zero,280fc <___vfiprintf_internal_r+0x13dc>
   2808c:	00c000f4 	movhi	r3,3
   28090:	18ffd204 	addi	r3,r3,-184
   28094:	dcc12315 	stw	r19,1164(sp)
   28098:	d8c12215 	stw	r3,1160(sp)
   2809c:	003cff06 	br	2749c <__alt_data_end+0xfffeaf7c>
   280a0:	d9411b17 	ldw	r5,1132(sp)
   280a4:	008000f4 	movhi	r2,3
   280a8:	10803204 	addi	r2,r2,200
   280ac:	d8812615 	stw	r2,1176(sp)
   280b0:	29400044 	addi	r5,r5,1
   280b4:	003e6706 	br	27a54 <__alt_data_end+0xfffeb534>
   280b8:	d9012317 	ldw	r4,1164(sp)
   280bc:	d9412517 	ldw	r5,1172(sp)
   280c0:	20800017 	ldw	r2,0(r4)
   280c4:	21000104 	addi	r4,r4,4
   280c8:	d9012315 	stw	r4,1164(sp)
   280cc:	11400015 	stw	r5,0(r2)
   280d0:	003b4b06 	br	26e00 <__alt_data_end+0xfffea8e0>
   280d4:	8029883a 	mov	r20,r16
   280d8:	dd811d83 	ldbu	r22,1142(sp)
   280dc:	dcc12315 	stw	r19,1164(sp)
   280e0:	0021883a 	mov	r16,zero
   280e4:	003c5f06 	br	27264 <__alt_data_end+0xfffead44>
   280e8:	010000f4 	movhi	r4,3
   280ec:	21002e04 	addi	r4,r4,184
   280f0:	d9012615 	stw	r4,1176(sp)
   280f4:	1009883a 	mov	r4,r2
   280f8:	003ea006 	br	27b7c <__alt_data_end+0xfffeb65c>
   280fc:	002b883a 	mov	r21,zero
   28100:	003fe206 	br	2808c <__alt_data_end+0xfffebb6c>
   28104:	d9412317 	ldw	r5,1164(sp)
   28108:	b807883a 	mov	r3,r23
   2810c:	102f883a 	mov	r23,r2
   28110:	2c000017 	ldw	r16,0(r5)
   28114:	29000104 	addi	r4,r5,4
   28118:	d9012315 	stw	r4,1164(sp)
   2811c:	80000416 	blt	r16,zero,28130 <___vfiprintf_internal_r+0x1410>
   28120:	19800047 	ldb	r6,1(r3)
   28124:	003b5f06 	br	26ea4 <__alt_data_end+0xfffea984>
   28128:	043fffc4 	movi	r16,-1
   2812c:	003bef06 	br	270ec <__alt_data_end+0xfffeabcc>
   28130:	043fffc4 	movi	r16,-1
   28134:	19800047 	ldb	r6,1(r3)
   28138:	003b5a06 	br	26ea4 <__alt_data_end+0xfffea984>
   2813c:	282b883a 	mov	r21,r5
   28140:	003cc706 	br	27460 <__alt_data_end+0xfffeaf40>

00028144 <__vfiprintf_internal>:
   28144:	2007883a 	mov	r3,r4
   28148:	010000f4 	movhi	r4,3
   2814c:	21076104 	addi	r4,r4,7556
   28150:	21000017 	ldw	r4,0(r4)
   28154:	2805883a 	mov	r2,r5
   28158:	300f883a 	mov	r7,r6
   2815c:	180b883a 	mov	r5,r3
   28160:	100d883a 	mov	r6,r2
   28164:	0026d201 	jmpi	26d20 <___vfiprintf_internal_r>

00028168 <_write_r>:
   28168:	defffd04 	addi	sp,sp,-12
   2816c:	dc000015 	stw	r16,0(sp)
   28170:	040000f4 	movhi	r16,3
   28174:	dc400115 	stw	r17,4(sp)
   28178:	840e6204 	addi	r16,r16,14728
   2817c:	2023883a 	mov	r17,r4
   28180:	2809883a 	mov	r4,r5
   28184:	300b883a 	mov	r5,r6
   28188:	380d883a 	mov	r6,r7
   2818c:	dfc00215 	stw	ra,8(sp)
   28190:	80000015 	stw	zero,0(r16)
   28194:	002d5240 	call	2d524 <write>
   28198:	00ffffc4 	movi	r3,-1
   2819c:	10c00526 	beq	r2,r3,281b4 <_write_r+0x4c>
   281a0:	dfc00217 	ldw	ra,8(sp)
   281a4:	dc400117 	ldw	r17,4(sp)
   281a8:	dc000017 	ldw	r16,0(sp)
   281ac:	dec00304 	addi	sp,sp,12
   281b0:	f800283a 	ret
   281b4:	80c00017 	ldw	r3,0(r16)
   281b8:	183ff926 	beq	r3,zero,281a0 <__alt_data_end+0xfffebc80>
   281bc:	88c00015 	stw	r3,0(r17)
   281c0:	003ff706 	br	281a0 <__alt_data_end+0xfffebc80>

000281c4 <_close_r>:
   281c4:	defffd04 	addi	sp,sp,-12
   281c8:	dc000015 	stw	r16,0(sp)
   281cc:	040000f4 	movhi	r16,3
   281d0:	dc400115 	stw	r17,4(sp)
   281d4:	840e6204 	addi	r16,r16,14728
   281d8:	2023883a 	mov	r17,r4
   281dc:	2809883a 	mov	r4,r5
   281e0:	dfc00215 	stw	ra,8(sp)
   281e4:	80000015 	stw	zero,0(r16)
   281e8:	002cc500 	call	2cc50 <close>
   281ec:	00ffffc4 	movi	r3,-1
   281f0:	10c00526 	beq	r2,r3,28208 <_close_r+0x44>
   281f4:	dfc00217 	ldw	ra,8(sp)
   281f8:	dc400117 	ldw	r17,4(sp)
   281fc:	dc000017 	ldw	r16,0(sp)
   28200:	dec00304 	addi	sp,sp,12
   28204:	f800283a 	ret
   28208:	80c00017 	ldw	r3,0(r16)
   2820c:	183ff926 	beq	r3,zero,281f4 <__alt_data_end+0xfffebcd4>
   28210:	88c00015 	stw	r3,0(r17)
   28214:	003ff706 	br	281f4 <__alt_data_end+0xfffebcd4>

00028218 <_calloc_r>:
   28218:	defffe04 	addi	sp,sp,-8
   2821c:	dc000015 	stw	r16,0(sp)
   28220:	2021883a 	mov	r16,r4
   28224:	2809883a 	mov	r4,r5
   28228:	300b883a 	mov	r5,r6
   2822c:	dfc00115 	stw	ra,4(sp)
   28230:	002a3dc0 	call	2a3dc <__mulsi3>
   28234:	8009883a 	mov	r4,r16
   28238:	100b883a 	mov	r5,r2
   2823c:	0024d980 	call	24d98 <_malloc_r>
   28240:	1021883a 	mov	r16,r2
   28244:	10002826 	beq	r2,zero,282e8 <_calloc_r+0xd0>
   28248:	11bfff17 	ldw	r6,-4(r2)
   2824c:	00bfff04 	movi	r2,-4
   28250:	00c00904 	movi	r3,36
   28254:	308c703a 	and	r6,r6,r2
   28258:	308d883a 	add	r6,r6,r2
   2825c:	19801436 	bltu	r3,r6,282b0 <_calloc_r+0x98>
   28260:	008004c4 	movi	r2,19
   28264:	11800936 	bltu	r2,r6,2828c <_calloc_r+0x74>
   28268:	8005883a 	mov	r2,r16
   2826c:	10000015 	stw	zero,0(r2)
   28270:	10000115 	stw	zero,4(r2)
   28274:	10000215 	stw	zero,8(r2)
   28278:	8005883a 	mov	r2,r16
   2827c:	dfc00117 	ldw	ra,4(sp)
   28280:	dc000017 	ldw	r16,0(sp)
   28284:	dec00204 	addi	sp,sp,8
   28288:	f800283a 	ret
   2828c:	80000015 	stw	zero,0(r16)
   28290:	80000115 	stw	zero,4(r16)
   28294:	008006c4 	movi	r2,27
   28298:	11800d2e 	bgeu	r2,r6,282d0 <_calloc_r+0xb8>
   2829c:	80000215 	stw	zero,8(r16)
   282a0:	80000315 	stw	zero,12(r16)
   282a4:	30c00c26 	beq	r6,r3,282d8 <_calloc_r+0xc0>
   282a8:	80800404 	addi	r2,r16,16
   282ac:	003fef06 	br	2826c <__alt_data_end+0xfffebd4c>
   282b0:	8009883a 	mov	r4,r16
   282b4:	000b883a 	mov	r5,zero
   282b8:	00257600 	call	25760 <memset>
   282bc:	8005883a 	mov	r2,r16
   282c0:	dfc00117 	ldw	ra,4(sp)
   282c4:	dc000017 	ldw	r16,0(sp)
   282c8:	dec00204 	addi	sp,sp,8
   282cc:	f800283a 	ret
   282d0:	80800204 	addi	r2,r16,8
   282d4:	003fe506 	br	2826c <__alt_data_end+0xfffebd4c>
   282d8:	80000415 	stw	zero,16(r16)
   282dc:	80800604 	addi	r2,r16,24
   282e0:	80000515 	stw	zero,20(r16)
   282e4:	003fe106 	br	2826c <__alt_data_end+0xfffebd4c>
   282e8:	0005883a 	mov	r2,zero
   282ec:	003fe306 	br	2827c <__alt_data_end+0xfffebd5c>

000282f0 <_fclose_r>:
   282f0:	28003226 	beq	r5,zero,283bc <_fclose_r+0xcc>
   282f4:	defffc04 	addi	sp,sp,-16
   282f8:	dc400115 	stw	r17,4(sp)
   282fc:	2023883a 	mov	r17,r4
   28300:	dc000015 	stw	r16,0(sp)
   28304:	dfc00315 	stw	ra,12(sp)
   28308:	dc800215 	stw	r18,8(sp)
   2830c:	2821883a 	mov	r16,r5
   28310:	002453c0 	call	2453c <__sfp_lock_acquire>
   28314:	88000226 	beq	r17,zero,28320 <_fclose_r+0x30>
   28318:	88800e17 	ldw	r2,56(r17)
   2831c:	10002926 	beq	r2,zero,283c4 <_fclose_r+0xd4>
   28320:	8080030f 	ldh	r2,12(r16)
   28324:	10002226 	beq	r2,zero,283b0 <_fclose_r+0xc0>
   28328:	8809883a 	mov	r4,r17
   2832c:	800b883a 	mov	r5,r16
   28330:	0023f700 	call	23f70 <_fflush_r>
   28334:	1025883a 	mov	r18,r2
   28338:	80800b17 	ldw	r2,44(r16)
   2833c:	10000426 	beq	r2,zero,28350 <_fclose_r+0x60>
   28340:	81400717 	ldw	r5,28(r16)
   28344:	8809883a 	mov	r4,r17
   28348:	103ee83a 	callr	r2
   2834c:	10002616 	blt	r2,zero,283e8 <_fclose_r+0xf8>
   28350:	8080030b 	ldhu	r2,12(r16)
   28354:	1080200c 	andi	r2,r2,128
   28358:	10001f1e 	bne	r2,zero,283d8 <_fclose_r+0xe8>
   2835c:	81400c17 	ldw	r5,48(r16)
   28360:	28000526 	beq	r5,zero,28378 <_fclose_r+0x88>
   28364:	80801004 	addi	r2,r16,64
   28368:	28800226 	beq	r5,r2,28374 <_fclose_r+0x84>
   2836c:	8809883a 	mov	r4,r17
   28370:	00246a00 	call	246a0 <_free_r>
   28374:	80000c15 	stw	zero,48(r16)
   28378:	81401117 	ldw	r5,68(r16)
   2837c:	28000326 	beq	r5,zero,2838c <_fclose_r+0x9c>
   28380:	8809883a 	mov	r4,r17
   28384:	00246a00 	call	246a0 <_free_r>
   28388:	80001115 	stw	zero,68(r16)
   2838c:	8000030d 	sth	zero,12(r16)
   28390:	00245400 	call	24540 <__sfp_lock_release>
   28394:	9005883a 	mov	r2,r18
   28398:	dfc00317 	ldw	ra,12(sp)
   2839c:	dc800217 	ldw	r18,8(sp)
   283a0:	dc400117 	ldw	r17,4(sp)
   283a4:	dc000017 	ldw	r16,0(sp)
   283a8:	dec00404 	addi	sp,sp,16
   283ac:	f800283a 	ret
   283b0:	00245400 	call	24540 <__sfp_lock_release>
   283b4:	0005883a 	mov	r2,zero
   283b8:	003ff706 	br	28398 <__alt_data_end+0xfffebe78>
   283bc:	0005883a 	mov	r2,zero
   283c0:	f800283a 	ret
   283c4:	8809883a 	mov	r4,r17
   283c8:	002452c0 	call	2452c <__sinit>
   283cc:	8080030f 	ldh	r2,12(r16)
   283d0:	103fd51e 	bne	r2,zero,28328 <__alt_data_end+0xfffebe08>
   283d4:	003ff606 	br	283b0 <__alt_data_end+0xfffebe90>
   283d8:	81400417 	ldw	r5,16(r16)
   283dc:	8809883a 	mov	r4,r17
   283e0:	00246a00 	call	246a0 <_free_r>
   283e4:	003fdd06 	br	2835c <__alt_data_end+0xfffebe3c>
   283e8:	04bfffc4 	movi	r18,-1
   283ec:	003fd806 	br	28350 <__alt_data_end+0xfffebe30>

000283f0 <fclose>:
   283f0:	008000f4 	movhi	r2,3
   283f4:	10876104 	addi	r2,r2,7556
   283f8:	200b883a 	mov	r5,r4
   283fc:	11000017 	ldw	r4,0(r2)
   28400:	00282f01 	jmpi	282f0 <_fclose_r>

00028404 <_fputwc_r>:
   28404:	3080030b 	ldhu	r2,12(r6)
   28408:	defff804 	addi	sp,sp,-32
   2840c:	dcc00415 	stw	r19,16(sp)
   28410:	dc800315 	stw	r18,12(sp)
   28414:	dc000115 	stw	r16,4(sp)
   28418:	dfc00715 	stw	ra,28(sp)
   2841c:	dd400615 	stw	r21,24(sp)
   28420:	dd000515 	stw	r20,20(sp)
   28424:	dc400215 	stw	r17,8(sp)
   28428:	10c8000c 	andi	r3,r2,8192
   2842c:	3021883a 	mov	r16,r6
   28430:	2027883a 	mov	r19,r4
   28434:	2825883a 	mov	r18,r5
   28438:	1800051e 	bne	r3,zero,28450 <_fputwc_r+0x4c>
   2843c:	30c01917 	ldw	r3,100(r6)
   28440:	10880014 	ori	r2,r2,8192
   28444:	3080030d 	sth	r2,12(r6)
   28448:	18880014 	ori	r2,r3,8192
   2844c:	30801915 	stw	r2,100(r6)
   28450:	0024b880 	call	24b88 <__locale_mb_cur_max>
   28454:	00c00044 	movi	r3,1
   28458:	10c03e26 	beq	r2,r3,28554 <_fputwc_r+0x150>
   2845c:	9809883a 	mov	r4,r19
   28460:	d80b883a 	mov	r5,sp
   28464:	900d883a 	mov	r6,r18
   28468:	81c01704 	addi	r7,r16,92
   2846c:	00294540 	call	29454 <_wcrtomb_r>
   28470:	1029883a 	mov	r20,r2
   28474:	00bfffc4 	movi	r2,-1
   28478:	a0802026 	beq	r20,r2,284fc <_fputwc_r+0xf8>
   2847c:	d9400003 	ldbu	r5,0(sp)
   28480:	a0001c26 	beq	r20,zero,284f4 <_fputwc_r+0xf0>
   28484:	0023883a 	mov	r17,zero
   28488:	05400284 	movi	r21,10
   2848c:	00000906 	br	284b4 <_fputwc_r+0xb0>
   28490:	80800017 	ldw	r2,0(r16)
   28494:	11400005 	stb	r5,0(r2)
   28498:	80c00017 	ldw	r3,0(r16)
   2849c:	18c00044 	addi	r3,r3,1
   284a0:	80c00015 	stw	r3,0(r16)
   284a4:	8c400044 	addi	r17,r17,1
   284a8:	dc45883a 	add	r2,sp,r17
   284ac:	8d00112e 	bgeu	r17,r20,284f4 <_fputwc_r+0xf0>
   284b0:	11400003 	ldbu	r5,0(r2)
   284b4:	80c00217 	ldw	r3,8(r16)
   284b8:	18ffffc4 	addi	r3,r3,-1
   284bc:	80c00215 	stw	r3,8(r16)
   284c0:	183ff30e 	bge	r3,zero,28490 <__alt_data_end+0xfffebf70>
   284c4:	80800617 	ldw	r2,24(r16)
   284c8:	18801916 	blt	r3,r2,28530 <_fputwc_r+0x12c>
   284cc:	80800017 	ldw	r2,0(r16)
   284d0:	11400005 	stb	r5,0(r2)
   284d4:	80800017 	ldw	r2,0(r16)
   284d8:	10c00003 	ldbu	r3,0(r2)
   284dc:	10800044 	addi	r2,r2,1
   284e0:	1d402326 	beq	r3,r21,28570 <_fputwc_r+0x16c>
   284e4:	80800015 	stw	r2,0(r16)
   284e8:	8c400044 	addi	r17,r17,1
   284ec:	dc45883a 	add	r2,sp,r17
   284f0:	8d3fef36 	bltu	r17,r20,284b0 <__alt_data_end+0xfffebf90>
   284f4:	9005883a 	mov	r2,r18
   284f8:	00000406 	br	2850c <_fputwc_r+0x108>
   284fc:	80c0030b 	ldhu	r3,12(r16)
   28500:	a005883a 	mov	r2,r20
   28504:	18c01014 	ori	r3,r3,64
   28508:	80c0030d 	sth	r3,12(r16)
   2850c:	dfc00717 	ldw	ra,28(sp)
   28510:	dd400617 	ldw	r21,24(sp)
   28514:	dd000517 	ldw	r20,20(sp)
   28518:	dcc00417 	ldw	r19,16(sp)
   2851c:	dc800317 	ldw	r18,12(sp)
   28520:	dc400217 	ldw	r17,8(sp)
   28524:	dc000117 	ldw	r16,4(sp)
   28528:	dec00804 	addi	sp,sp,32
   2852c:	f800283a 	ret
   28530:	9809883a 	mov	r4,r19
   28534:	29403fcc 	andi	r5,r5,255
   28538:	800d883a 	mov	r6,r16
   2853c:	00292e40 	call	292e4 <__swbuf_r>
   28540:	10bfffe0 	cmpeqi	r2,r2,-1
   28544:	10803fcc 	andi	r2,r2,255
   28548:	103fd626 	beq	r2,zero,284a4 <__alt_data_end+0xfffebf84>
   2854c:	00bfffc4 	movi	r2,-1
   28550:	003fee06 	br	2850c <__alt_data_end+0xfffebfec>
   28554:	90ffffc4 	addi	r3,r18,-1
   28558:	01003f84 	movi	r4,254
   2855c:	20ffbf36 	bltu	r4,r3,2845c <__alt_data_end+0xfffebf3c>
   28560:	900b883a 	mov	r5,r18
   28564:	dc800005 	stb	r18,0(sp)
   28568:	1029883a 	mov	r20,r2
   2856c:	003fc506 	br	28484 <__alt_data_end+0xfffebf64>
   28570:	9809883a 	mov	r4,r19
   28574:	a80b883a 	mov	r5,r21
   28578:	800d883a 	mov	r6,r16
   2857c:	00292e40 	call	292e4 <__swbuf_r>
   28580:	10bfffe0 	cmpeqi	r2,r2,-1
   28584:	003fef06 	br	28544 <__alt_data_end+0xfffec024>

00028588 <fputwc>:
   28588:	defffc04 	addi	sp,sp,-16
   2858c:	dc000115 	stw	r16,4(sp)
   28590:	040000f4 	movhi	r16,3
   28594:	84076104 	addi	r16,r16,7556
   28598:	dc400215 	stw	r17,8(sp)
   2859c:	2023883a 	mov	r17,r4
   285a0:	81000017 	ldw	r4,0(r16)
   285a4:	dfc00315 	stw	ra,12(sp)
   285a8:	280d883a 	mov	r6,r5
   285ac:	20000626 	beq	r4,zero,285c8 <fputwc+0x40>
   285b0:	20800e17 	ldw	r2,56(r4)
   285b4:	1000041e 	bne	r2,zero,285c8 <fputwc+0x40>
   285b8:	d9400015 	stw	r5,0(sp)
   285bc:	002452c0 	call	2452c <__sinit>
   285c0:	81000017 	ldw	r4,0(r16)
   285c4:	d9800017 	ldw	r6,0(sp)
   285c8:	880b883a 	mov	r5,r17
   285cc:	dfc00317 	ldw	ra,12(sp)
   285d0:	dc400217 	ldw	r17,8(sp)
   285d4:	dc000117 	ldw	r16,4(sp)
   285d8:	dec00404 	addi	sp,sp,16
   285dc:	00284041 	jmpi	28404 <_fputwc_r>

000285e0 <_fstat_r>:
   285e0:	defffd04 	addi	sp,sp,-12
   285e4:	dc000015 	stw	r16,0(sp)
   285e8:	040000f4 	movhi	r16,3
   285ec:	dc400115 	stw	r17,4(sp)
   285f0:	840e6204 	addi	r16,r16,14728
   285f4:	2023883a 	mov	r17,r4
   285f8:	2809883a 	mov	r4,r5
   285fc:	300b883a 	mov	r5,r6
   28600:	dfc00215 	stw	ra,8(sp)
   28604:	80000015 	stw	zero,0(r16)
   28608:	002cda40 	call	2cda4 <fstat>
   2860c:	00ffffc4 	movi	r3,-1
   28610:	10c00526 	beq	r2,r3,28628 <_fstat_r+0x48>
   28614:	dfc00217 	ldw	ra,8(sp)
   28618:	dc400117 	ldw	r17,4(sp)
   2861c:	dc000017 	ldw	r16,0(sp)
   28620:	dec00304 	addi	sp,sp,12
   28624:	f800283a 	ret
   28628:	80c00017 	ldw	r3,0(r16)
   2862c:	183ff926 	beq	r3,zero,28614 <__alt_data_end+0xfffec0f4>
   28630:	88c00015 	stw	r3,0(r17)
   28634:	003ff706 	br	28614 <__alt_data_end+0xfffec0f4>

00028638 <__sfvwrite_r>:
   28638:	30800217 	ldw	r2,8(r6)
   2863c:	10004526 	beq	r2,zero,28754 <__sfvwrite_r+0x11c>
   28640:	28c0030b 	ldhu	r3,12(r5)
   28644:	defff404 	addi	sp,sp,-48
   28648:	dd400715 	stw	r21,28(sp)
   2864c:	dcc00515 	stw	r19,20(sp)
   28650:	dc000215 	stw	r16,8(sp)
   28654:	dfc00b15 	stw	ra,44(sp)
   28658:	df000a15 	stw	fp,40(sp)
   2865c:	ddc00915 	stw	r23,36(sp)
   28660:	dd800815 	stw	r22,32(sp)
   28664:	dd000615 	stw	r20,24(sp)
   28668:	dc800415 	stw	r18,16(sp)
   2866c:	dc400315 	stw	r17,12(sp)
   28670:	1880020c 	andi	r2,r3,8
   28674:	2821883a 	mov	r16,r5
   28678:	202b883a 	mov	r21,r4
   2867c:	3027883a 	mov	r19,r6
   28680:	10002526 	beq	r2,zero,28718 <__sfvwrite_r+0xe0>
   28684:	28800417 	ldw	r2,16(r5)
   28688:	10002326 	beq	r2,zero,28718 <__sfvwrite_r+0xe0>
   2868c:	1880008c 	andi	r2,r3,2
   28690:	9c400017 	ldw	r17,0(r19)
   28694:	10003126 	beq	r2,zero,2875c <__sfvwrite_r+0x124>
   28698:	0029883a 	mov	r20,zero
   2869c:	0025883a 	mov	r18,zero
   286a0:	05810004 	movi	r22,1024
   286a4:	a00d883a 	mov	r6,r20
   286a8:	a809883a 	mov	r4,r21
   286ac:	90002526 	beq	r18,zero,28744 <__sfvwrite_r+0x10c>
   286b0:	900f883a 	mov	r7,r18
   286b4:	81400717 	ldw	r5,28(r16)
   286b8:	b480012e 	bgeu	r22,r18,286c0 <__sfvwrite_r+0x88>
   286bc:	01c10004 	movi	r7,1024
   286c0:	80800917 	ldw	r2,36(r16)
   286c4:	103ee83a 	callr	r2
   286c8:	0080510e 	bge	zero,r2,28810 <__sfvwrite_r+0x1d8>
   286cc:	98c00217 	ldw	r3,8(r19)
   286d0:	a0a9883a 	add	r20,r20,r2
   286d4:	90a5c83a 	sub	r18,r18,r2
   286d8:	1885c83a 	sub	r2,r3,r2
   286dc:	98800215 	stw	r2,8(r19)
   286e0:	103ff01e 	bne	r2,zero,286a4 <__alt_data_end+0xfffec184>
   286e4:	0005883a 	mov	r2,zero
   286e8:	dfc00b17 	ldw	ra,44(sp)
   286ec:	df000a17 	ldw	fp,40(sp)
   286f0:	ddc00917 	ldw	r23,36(sp)
   286f4:	dd800817 	ldw	r22,32(sp)
   286f8:	dd400717 	ldw	r21,28(sp)
   286fc:	dd000617 	ldw	r20,24(sp)
   28700:	dcc00517 	ldw	r19,20(sp)
   28704:	dc800417 	ldw	r18,16(sp)
   28708:	dc400317 	ldw	r17,12(sp)
   2870c:	dc000217 	ldw	r16,8(sp)
   28710:	dec00c04 	addi	sp,sp,48
   28714:	f800283a 	ret
   28718:	a809883a 	mov	r4,r21
   2871c:	800b883a 	mov	r5,r16
   28720:	00224f00 	call	224f0 <__swsetup_r>
   28724:	80c0030b 	ldhu	r3,12(r16)
   28728:	103fd826 	beq	r2,zero,2868c <__alt_data_end+0xfffec16c>
   2872c:	18c01014 	ori	r3,r3,64
   28730:	80c0030d 	sth	r3,12(r16)
   28734:	00c00244 	movi	r3,9
   28738:	00bfffc4 	movi	r2,-1
   2873c:	a8c00015 	stw	r3,0(r21)
   28740:	003fe906 	br	286e8 <__alt_data_end+0xfffec1c8>
   28744:	8d000017 	ldw	r20,0(r17)
   28748:	8c800117 	ldw	r18,4(r17)
   2874c:	8c400204 	addi	r17,r17,8
   28750:	003fd406 	br	286a4 <__alt_data_end+0xfffec184>
   28754:	0005883a 	mov	r2,zero
   28758:	f800283a 	ret
   2875c:	1880004c 	andi	r2,r3,1
   28760:	1000301e 	bne	r2,zero,28824 <__sfvwrite_r+0x1ec>
   28764:	002f883a 	mov	r23,zero
   28768:	0025883a 	mov	r18,zero
   2876c:	90001c26 	beq	r18,zero,287e0 <__sfvwrite_r+0x1a8>
   28770:	1880800c 	andi	r2,r3,512
   28774:	85000217 	ldw	r20,8(r16)
   28778:	10006c26 	beq	r2,zero,2892c <__sfvwrite_r+0x2f4>
   2877c:	a02d883a 	mov	r22,r20
   28780:	95008536 	bltu	r18,r20,28998 <__sfvwrite_r+0x360>
   28784:	1881200c 	andi	r2,r3,1152
   28788:	10009d1e 	bne	r2,zero,28a00 <__sfvwrite_r+0x3c8>
   2878c:	81000017 	ldw	r4,0(r16)
   28790:	a039883a 	mov	fp,r20
   28794:	9029883a 	mov	r20,r18
   28798:	b80b883a 	mov	r5,r23
   2879c:	b00d883a 	mov	r6,r22
   287a0:	0028b8c0 	call	28b8c <memmove>
   287a4:	80c00217 	ldw	r3,8(r16)
   287a8:	81000017 	ldw	r4,0(r16)
   287ac:	9005883a 	mov	r2,r18
   287b0:	1f39c83a 	sub	fp,r3,fp
   287b4:	258f883a 	add	r7,r4,r22
   287b8:	87000215 	stw	fp,8(r16)
   287bc:	81c00015 	stw	r7,0(r16)
   287c0:	98c00217 	ldw	r3,8(r19)
   287c4:	b8af883a 	add	r23,r23,r2
   287c8:	90a5c83a 	sub	r18,r18,r2
   287cc:	1d05c83a 	sub	r2,r3,r20
   287d0:	98800215 	stw	r2,8(r19)
   287d4:	103fc326 	beq	r2,zero,286e4 <__alt_data_end+0xfffec1c4>
   287d8:	80c0030b 	ldhu	r3,12(r16)
   287dc:	903fe41e 	bne	r18,zero,28770 <__alt_data_end+0xfffec250>
   287e0:	8dc00017 	ldw	r23,0(r17)
   287e4:	8c800117 	ldw	r18,4(r17)
   287e8:	8c400204 	addi	r17,r17,8
   287ec:	003fdf06 	br	2876c <__alt_data_end+0xfffec24c>
   287f0:	0028d440 	call	28d44 <_realloc_r>
   287f4:	102d883a 	mov	r22,r2
   287f8:	1000a01e 	bne	r2,zero,28a7c <__sfvwrite_r+0x444>
   287fc:	81400417 	ldw	r5,16(r16)
   28800:	a809883a 	mov	r4,r21
   28804:	00246a00 	call	246a0 <_free_r>
   28808:	00800304 	movi	r2,12
   2880c:	a8800015 	stw	r2,0(r21)
   28810:	80c0030b 	ldhu	r3,12(r16)
   28814:	00bfffc4 	movi	r2,-1
   28818:	18c01014 	ori	r3,r3,64
   2881c:	80c0030d 	sth	r3,12(r16)
   28820:	003fb106 	br	286e8 <__alt_data_end+0xfffec1c8>
   28824:	0029883a 	mov	r20,zero
   28828:	0011883a 	mov	r8,zero
   2882c:	0039883a 	mov	fp,zero
   28830:	0025883a 	mov	r18,zero
   28834:	90001f26 	beq	r18,zero,288b4 <__sfvwrite_r+0x27c>
   28838:	40006826 	beq	r8,zero,289dc <__sfvwrite_r+0x3a4>
   2883c:	a02f883a 	mov	r23,r20
   28840:	9500012e 	bgeu	r18,r20,28848 <__sfvwrite_r+0x210>
   28844:	902f883a 	mov	r23,r18
   28848:	81000017 	ldw	r4,0(r16)
   2884c:	80800417 	ldw	r2,16(r16)
   28850:	b82d883a 	mov	r22,r23
   28854:	81800217 	ldw	r6,8(r16)
   28858:	81c00517 	ldw	r7,20(r16)
   2885c:	1100022e 	bgeu	r2,r4,28868 <__sfvwrite_r+0x230>
   28860:	31c7883a 	add	r3,r6,r7
   28864:	1dc01816 	blt	r3,r23,288c8 <__sfvwrite_r+0x290>
   28868:	b9c03f16 	blt	r23,r7,28968 <__sfvwrite_r+0x330>
   2886c:	80800917 	ldw	r2,36(r16)
   28870:	81400717 	ldw	r5,28(r16)
   28874:	a809883a 	mov	r4,r21
   28878:	da000115 	stw	r8,4(sp)
   2887c:	e00d883a 	mov	r6,fp
   28880:	103ee83a 	callr	r2
   28884:	102d883a 	mov	r22,r2
   28888:	da000117 	ldw	r8,4(sp)
   2888c:	00bfe00e 	bge	zero,r2,28810 <__alt_data_end+0xfffec2f0>
   28890:	a5a9c83a 	sub	r20,r20,r22
   28894:	a0001f26 	beq	r20,zero,28914 <__sfvwrite_r+0x2dc>
   28898:	98800217 	ldw	r2,8(r19)
   2889c:	e5b9883a 	add	fp,fp,r22
   288a0:	95a5c83a 	sub	r18,r18,r22
   288a4:	15adc83a 	sub	r22,r2,r22
   288a8:	9d800215 	stw	r22,8(r19)
   288ac:	b03f8d26 	beq	r22,zero,286e4 <__alt_data_end+0xfffec1c4>
   288b0:	903fe11e 	bne	r18,zero,28838 <__alt_data_end+0xfffec318>
   288b4:	8f000017 	ldw	fp,0(r17)
   288b8:	8c800117 	ldw	r18,4(r17)
   288bc:	0011883a 	mov	r8,zero
   288c0:	8c400204 	addi	r17,r17,8
   288c4:	003fdb06 	br	28834 <__alt_data_end+0xfffec314>
   288c8:	180d883a 	mov	r6,r3
   288cc:	e00b883a 	mov	r5,fp
   288d0:	da000115 	stw	r8,4(sp)
   288d4:	d8c00015 	stw	r3,0(sp)
   288d8:	0028b8c0 	call	28b8c <memmove>
   288dc:	d8c00017 	ldw	r3,0(sp)
   288e0:	80800017 	ldw	r2,0(r16)
   288e4:	a809883a 	mov	r4,r21
   288e8:	800b883a 	mov	r5,r16
   288ec:	10c5883a 	add	r2,r2,r3
   288f0:	80800015 	stw	r2,0(r16)
   288f4:	d8c00015 	stw	r3,0(sp)
   288f8:	0023f700 	call	23f70 <_fflush_r>
   288fc:	d8c00017 	ldw	r3,0(sp)
   28900:	da000117 	ldw	r8,4(sp)
   28904:	103fc21e 	bne	r2,zero,28810 <__alt_data_end+0xfffec2f0>
   28908:	182d883a 	mov	r22,r3
   2890c:	a5a9c83a 	sub	r20,r20,r22
   28910:	a03fe11e 	bne	r20,zero,28898 <__alt_data_end+0xfffec378>
   28914:	a809883a 	mov	r4,r21
   28918:	800b883a 	mov	r5,r16
   2891c:	0023f700 	call	23f70 <_fflush_r>
   28920:	103fbb1e 	bne	r2,zero,28810 <__alt_data_end+0xfffec2f0>
   28924:	0011883a 	mov	r8,zero
   28928:	003fdb06 	br	28898 <__alt_data_end+0xfffec378>
   2892c:	81000017 	ldw	r4,0(r16)
   28930:	80800417 	ldw	r2,16(r16)
   28934:	1100012e 	bgeu	r2,r4,2893c <__sfvwrite_r+0x304>
   28938:	a4805a36 	bltu	r20,r18,28aa4 <__sfvwrite_r+0x46c>
   2893c:	81c00517 	ldw	r7,20(r16)
   28940:	91c01a36 	bltu	r18,r7,289ac <__sfvwrite_r+0x374>
   28944:	80800917 	ldw	r2,36(r16)
   28948:	81400717 	ldw	r5,28(r16)
   2894c:	a809883a 	mov	r4,r21
   28950:	b80d883a 	mov	r6,r23
   28954:	103ee83a 	callr	r2
   28958:	1029883a 	mov	r20,r2
   2895c:	00bfac0e 	bge	zero,r2,28810 <__alt_data_end+0xfffec2f0>
   28960:	a005883a 	mov	r2,r20
   28964:	003f9606 	br	287c0 <__alt_data_end+0xfffec2a0>
   28968:	b80d883a 	mov	r6,r23
   2896c:	e00b883a 	mov	r5,fp
   28970:	da000115 	stw	r8,4(sp)
   28974:	0028b8c0 	call	28b8c <memmove>
   28978:	80800217 	ldw	r2,8(r16)
   2897c:	80c00017 	ldw	r3,0(r16)
   28980:	da000117 	ldw	r8,4(sp)
   28984:	15c5c83a 	sub	r2,r2,r23
   28988:	1def883a 	add	r23,r3,r23
   2898c:	80800215 	stw	r2,8(r16)
   28990:	85c00015 	stw	r23,0(r16)
   28994:	003fbe06 	br	28890 <__alt_data_end+0xfffec370>
   28998:	81000017 	ldw	r4,0(r16)
   2899c:	9039883a 	mov	fp,r18
   289a0:	9029883a 	mov	r20,r18
   289a4:	902d883a 	mov	r22,r18
   289a8:	003f7b06 	br	28798 <__alt_data_end+0xfffec278>
   289ac:	b80b883a 	mov	r5,r23
   289b0:	900d883a 	mov	r6,r18
   289b4:	0028b8c0 	call	28b8c <memmove>
   289b8:	80c00217 	ldw	r3,8(r16)
   289bc:	80800017 	ldw	r2,0(r16)
   289c0:	9029883a 	mov	r20,r18
   289c4:	1c87c83a 	sub	r3,r3,r18
   289c8:	1485883a 	add	r2,r2,r18
   289cc:	80800015 	stw	r2,0(r16)
   289d0:	80c00215 	stw	r3,8(r16)
   289d4:	9005883a 	mov	r2,r18
   289d8:	003f7906 	br	287c0 <__alt_data_end+0xfffec2a0>
   289dc:	e009883a 	mov	r4,fp
   289e0:	01400284 	movi	r5,10
   289e4:	900d883a 	mov	r6,r18
   289e8:	00255400 	call	25540 <memchr>
   289ec:	10003826 	beq	r2,zero,28ad0 <__sfvwrite_r+0x498>
   289f0:	10800044 	addi	r2,r2,1
   289f4:	1729c83a 	sub	r20,r2,fp
   289f8:	02000044 	movi	r8,1
   289fc:	003f8f06 	br	2883c <__alt_data_end+0xfffec31c>
   28a00:	80800517 	ldw	r2,20(r16)
   28a04:	81400417 	ldw	r5,16(r16)
   28a08:	87000017 	ldw	fp,0(r16)
   28a0c:	10a9883a 	add	r20,r2,r2
   28a10:	a085883a 	add	r2,r20,r2
   28a14:	1028d7fa 	srli	r20,r2,31
   28a18:	e179c83a 	sub	fp,fp,r5
   28a1c:	e1000044 	addi	r4,fp,1
   28a20:	a085883a 	add	r2,r20,r2
   28a24:	1029d07a 	srai	r20,r2,1
   28a28:	2485883a 	add	r2,r4,r18
   28a2c:	a00d883a 	mov	r6,r20
   28a30:	a080022e 	bgeu	r20,r2,28a3c <__sfvwrite_r+0x404>
   28a34:	1029883a 	mov	r20,r2
   28a38:	100d883a 	mov	r6,r2
   28a3c:	18c1000c 	andi	r3,r3,1024
   28a40:	a809883a 	mov	r4,r21
   28a44:	183f6a26 	beq	r3,zero,287f0 <__alt_data_end+0xfffec2d0>
   28a48:	300b883a 	mov	r5,r6
   28a4c:	0024d980 	call	24d98 <_malloc_r>
   28a50:	102d883a 	mov	r22,r2
   28a54:	103f6c26 	beq	r2,zero,28808 <__alt_data_end+0xfffec2e8>
   28a58:	81400417 	ldw	r5,16(r16)
   28a5c:	1009883a 	mov	r4,r2
   28a60:	e00d883a 	mov	r6,fp
   28a64:	00256280 	call	25628 <memcpy>
   28a68:	8080030b 	ldhu	r2,12(r16)
   28a6c:	00fedfc4 	movi	r3,-1153
   28a70:	10c4703a 	and	r2,r2,r3
   28a74:	10802014 	ori	r2,r2,128
   28a78:	8080030d 	sth	r2,12(r16)
   28a7c:	b709883a 	add	r4,r22,fp
   28a80:	a707c83a 	sub	r3,r20,fp
   28a84:	85800415 	stw	r22,16(r16)
   28a88:	85000515 	stw	r20,20(r16)
   28a8c:	81000015 	stw	r4,0(r16)
   28a90:	9039883a 	mov	fp,r18
   28a94:	80c00215 	stw	r3,8(r16)
   28a98:	9029883a 	mov	r20,r18
   28a9c:	902d883a 	mov	r22,r18
   28aa0:	003f3d06 	br	28798 <__alt_data_end+0xfffec278>
   28aa4:	b80b883a 	mov	r5,r23
   28aa8:	a00d883a 	mov	r6,r20
   28aac:	0028b8c0 	call	28b8c <memmove>
   28ab0:	80800017 	ldw	r2,0(r16)
   28ab4:	a809883a 	mov	r4,r21
   28ab8:	800b883a 	mov	r5,r16
   28abc:	1505883a 	add	r2,r2,r20
   28ac0:	80800015 	stw	r2,0(r16)
   28ac4:	0023f700 	call	23f70 <_fflush_r>
   28ac8:	103fa526 	beq	r2,zero,28960 <__alt_data_end+0xfffec440>
   28acc:	003f5006 	br	28810 <__alt_data_end+0xfffec2f0>
   28ad0:	95000044 	addi	r20,r18,1
   28ad4:	02000044 	movi	r8,1
   28ad8:	003f5806 	br	2883c <__alt_data_end+0xfffec31c>

00028adc <_isatty_r>:
   28adc:	defffd04 	addi	sp,sp,-12
   28ae0:	dc000015 	stw	r16,0(sp)
   28ae4:	040000f4 	movhi	r16,3
   28ae8:	dc400115 	stw	r17,4(sp)
   28aec:	840e6204 	addi	r16,r16,14728
   28af0:	2023883a 	mov	r17,r4
   28af4:	2809883a 	mov	r4,r5
   28af8:	dfc00215 	stw	ra,8(sp)
   28afc:	80000015 	stw	zero,0(r16)
   28b00:	002ceac0 	call	2ceac <isatty>
   28b04:	00ffffc4 	movi	r3,-1
   28b08:	10c00526 	beq	r2,r3,28b20 <_isatty_r+0x44>
   28b0c:	dfc00217 	ldw	ra,8(sp)
   28b10:	dc400117 	ldw	r17,4(sp)
   28b14:	dc000017 	ldw	r16,0(sp)
   28b18:	dec00304 	addi	sp,sp,12
   28b1c:	f800283a 	ret
   28b20:	80c00017 	ldw	r3,0(r16)
   28b24:	183ff926 	beq	r3,zero,28b0c <__alt_data_end+0xfffec5ec>
   28b28:	88c00015 	stw	r3,0(r17)
   28b2c:	003ff706 	br	28b0c <__alt_data_end+0xfffec5ec>

00028b30 <_lseek_r>:
   28b30:	defffd04 	addi	sp,sp,-12
   28b34:	dc000015 	stw	r16,0(sp)
   28b38:	040000f4 	movhi	r16,3
   28b3c:	dc400115 	stw	r17,4(sp)
   28b40:	840e6204 	addi	r16,r16,14728
   28b44:	2023883a 	mov	r17,r4
   28b48:	2809883a 	mov	r4,r5
   28b4c:	300b883a 	mov	r5,r6
   28b50:	380d883a 	mov	r6,r7
   28b54:	dfc00215 	stw	ra,8(sp)
   28b58:	80000015 	stw	zero,0(r16)
   28b5c:	002d08c0 	call	2d08c <lseek>
   28b60:	00ffffc4 	movi	r3,-1
   28b64:	10c00526 	beq	r2,r3,28b7c <_lseek_r+0x4c>
   28b68:	dfc00217 	ldw	ra,8(sp)
   28b6c:	dc400117 	ldw	r17,4(sp)
   28b70:	dc000017 	ldw	r16,0(sp)
   28b74:	dec00304 	addi	sp,sp,12
   28b78:	f800283a 	ret
   28b7c:	80c00017 	ldw	r3,0(r16)
   28b80:	183ff926 	beq	r3,zero,28b68 <__alt_data_end+0xfffec648>
   28b84:	88c00015 	stw	r3,0(r17)
   28b88:	003ff706 	br	28b68 <__alt_data_end+0xfffec648>

00028b8c <memmove>:
   28b8c:	2005883a 	mov	r2,r4
   28b90:	29000b2e 	bgeu	r5,r4,28bc0 <memmove+0x34>
   28b94:	298f883a 	add	r7,r5,r6
   28b98:	21c0092e 	bgeu	r4,r7,28bc0 <memmove+0x34>
   28b9c:	2187883a 	add	r3,r4,r6
   28ba0:	198bc83a 	sub	r5,r3,r6
   28ba4:	30004b26 	beq	r6,zero,28cd4 <memmove+0x148>
   28ba8:	39ffffc4 	addi	r7,r7,-1
   28bac:	39000003 	ldbu	r4,0(r7)
   28bb0:	18ffffc4 	addi	r3,r3,-1
   28bb4:	19000005 	stb	r4,0(r3)
   28bb8:	197ffb1e 	bne	r3,r5,28ba8 <__alt_data_end+0xfffec688>
   28bbc:	f800283a 	ret
   28bc0:	00c003c4 	movi	r3,15
   28bc4:	1980412e 	bgeu	r3,r6,28ccc <memmove+0x140>
   28bc8:	1146b03a 	or	r3,r2,r5
   28bcc:	18c000cc 	andi	r3,r3,3
   28bd0:	1800411e 	bne	r3,zero,28cd8 <memmove+0x14c>
   28bd4:	33fffc04 	addi	r15,r6,-16
   28bd8:	781ed13a 	srli	r15,r15,4
   28bdc:	28c00104 	addi	r3,r5,4
   28be0:	13400104 	addi	r13,r2,4
   28be4:	781c913a 	slli	r14,r15,4
   28be8:	2b000204 	addi	r12,r5,8
   28bec:	12c00204 	addi	r11,r2,8
   28bf0:	73800504 	addi	r14,r14,20
   28bf4:	2a800304 	addi	r10,r5,12
   28bf8:	12400304 	addi	r9,r2,12
   28bfc:	2b9d883a 	add	r14,r5,r14
   28c00:	2811883a 	mov	r8,r5
   28c04:	100f883a 	mov	r7,r2
   28c08:	41000017 	ldw	r4,0(r8)
   28c0c:	39c00404 	addi	r7,r7,16
   28c10:	18c00404 	addi	r3,r3,16
   28c14:	393ffc15 	stw	r4,-16(r7)
   28c18:	193ffc17 	ldw	r4,-16(r3)
   28c1c:	6b400404 	addi	r13,r13,16
   28c20:	5ac00404 	addi	r11,r11,16
   28c24:	693ffc15 	stw	r4,-16(r13)
   28c28:	61000017 	ldw	r4,0(r12)
   28c2c:	4a400404 	addi	r9,r9,16
   28c30:	42000404 	addi	r8,r8,16
   28c34:	593ffc15 	stw	r4,-16(r11)
   28c38:	51000017 	ldw	r4,0(r10)
   28c3c:	63000404 	addi	r12,r12,16
   28c40:	52800404 	addi	r10,r10,16
   28c44:	493ffc15 	stw	r4,-16(r9)
   28c48:	1bbfef1e 	bne	r3,r14,28c08 <__alt_data_end+0xfffec6e8>
   28c4c:	79000044 	addi	r4,r15,1
   28c50:	2008913a 	slli	r4,r4,4
   28c54:	328003cc 	andi	r10,r6,15
   28c58:	02c000c4 	movi	r11,3
   28c5c:	1107883a 	add	r3,r2,r4
   28c60:	290b883a 	add	r5,r5,r4
   28c64:	5a801e2e 	bgeu	r11,r10,28ce0 <memmove+0x154>
   28c68:	1813883a 	mov	r9,r3
   28c6c:	2811883a 	mov	r8,r5
   28c70:	500f883a 	mov	r7,r10
   28c74:	41000017 	ldw	r4,0(r8)
   28c78:	4a400104 	addi	r9,r9,4
   28c7c:	39ffff04 	addi	r7,r7,-4
   28c80:	493fff15 	stw	r4,-4(r9)
   28c84:	42000104 	addi	r8,r8,4
   28c88:	59fffa36 	bltu	r11,r7,28c74 <__alt_data_end+0xfffec754>
   28c8c:	513fff04 	addi	r4,r10,-4
   28c90:	2008d0ba 	srli	r4,r4,2
   28c94:	318000cc 	andi	r6,r6,3
   28c98:	21000044 	addi	r4,r4,1
   28c9c:	2109883a 	add	r4,r4,r4
   28ca0:	2109883a 	add	r4,r4,r4
   28ca4:	1907883a 	add	r3,r3,r4
   28ca8:	290b883a 	add	r5,r5,r4
   28cac:	30000926 	beq	r6,zero,28cd4 <memmove+0x148>
   28cb0:	198d883a 	add	r6,r3,r6
   28cb4:	29c00003 	ldbu	r7,0(r5)
   28cb8:	18c00044 	addi	r3,r3,1
   28cbc:	29400044 	addi	r5,r5,1
   28cc0:	19ffffc5 	stb	r7,-1(r3)
   28cc4:	19bffb1e 	bne	r3,r6,28cb4 <__alt_data_end+0xfffec794>
   28cc8:	f800283a 	ret
   28ccc:	1007883a 	mov	r3,r2
   28cd0:	003ff606 	br	28cac <__alt_data_end+0xfffec78c>
   28cd4:	f800283a 	ret
   28cd8:	1007883a 	mov	r3,r2
   28cdc:	003ff406 	br	28cb0 <__alt_data_end+0xfffec790>
   28ce0:	500d883a 	mov	r6,r10
   28ce4:	003ff106 	br	28cac <__alt_data_end+0xfffec78c>

00028ce8 <_read_r>:
   28ce8:	defffd04 	addi	sp,sp,-12
   28cec:	dc000015 	stw	r16,0(sp)
   28cf0:	040000f4 	movhi	r16,3
   28cf4:	dc400115 	stw	r17,4(sp)
   28cf8:	840e6204 	addi	r16,r16,14728
   28cfc:	2023883a 	mov	r17,r4
   28d00:	2809883a 	mov	r4,r5
   28d04:	300b883a 	mov	r5,r6
   28d08:	380d883a 	mov	r6,r7
   28d0c:	dfc00215 	stw	ra,8(sp)
   28d10:	80000015 	stw	zero,0(r16)
   28d14:	002d2700 	call	2d270 <read>
   28d18:	00ffffc4 	movi	r3,-1
   28d1c:	10c00526 	beq	r2,r3,28d34 <_read_r+0x4c>
   28d20:	dfc00217 	ldw	ra,8(sp)
   28d24:	dc400117 	ldw	r17,4(sp)
   28d28:	dc000017 	ldw	r16,0(sp)
   28d2c:	dec00304 	addi	sp,sp,12
   28d30:	f800283a 	ret
   28d34:	80c00017 	ldw	r3,0(r16)
   28d38:	183ff926 	beq	r3,zero,28d20 <__alt_data_end+0xfffec800>
   28d3c:	88c00015 	stw	r3,0(r17)
   28d40:	003ff706 	br	28d20 <__alt_data_end+0xfffec800>

00028d44 <_realloc_r>:
   28d44:	defff604 	addi	sp,sp,-40
   28d48:	dcc00315 	stw	r19,12(sp)
   28d4c:	dc400115 	stw	r17,4(sp)
   28d50:	dfc00915 	stw	ra,36(sp)
   28d54:	df000815 	stw	fp,32(sp)
   28d58:	ddc00715 	stw	r23,28(sp)
   28d5c:	dd800615 	stw	r22,24(sp)
   28d60:	dd400515 	stw	r21,20(sp)
   28d64:	dd000415 	stw	r20,16(sp)
   28d68:	dc800215 	stw	r18,8(sp)
   28d6c:	dc000015 	stw	r16,0(sp)
   28d70:	2827883a 	mov	r19,r5
   28d74:	3023883a 	mov	r17,r6
   28d78:	2800bf26 	beq	r5,zero,29078 <_realloc_r+0x334>
   28d7c:	2025883a 	mov	r18,r4
   28d80:	002d1e00 	call	2d1e0 <__malloc_lock>
   28d84:	98ffff17 	ldw	r3,-4(r19)
   28d88:	01bfff04 	movi	r6,-4
   28d8c:	890002c4 	addi	r4,r17,11
   28d90:	01c00584 	movi	r7,22
   28d94:	9d7ffe04 	addi	r21,r19,-8
   28d98:	19a0703a 	and	r16,r3,r6
   28d9c:	39003f2e 	bgeu	r7,r4,28e9c <_realloc_r+0x158>
   28da0:	053ffe04 	movi	r20,-8
   28da4:	2528703a 	and	r20,r4,r20
   28da8:	a00f883a 	mov	r7,r20
   28dac:	a0008216 	blt	r20,zero,28fb8 <_realloc_r+0x274>
   28db0:	a4408136 	bltu	r20,r17,28fb8 <_realloc_r+0x274>
   28db4:	81c03c0e 	bge	r16,r7,28ea8 <_realloc_r+0x164>
   28db8:	070000f4 	movhi	fp,3
   28dbc:	e701ab04 	addi	fp,fp,1708
   28dc0:	e1000217 	ldw	r4,8(fp)
   28dc4:	ac05883a 	add	r2,r21,r16
   28dc8:	2080bf26 	beq	r4,r2,290c8 <_realloc_r+0x384>
   28dcc:	11000117 	ldw	r4,4(r2)
   28dd0:	023fff84 	movi	r8,-2
   28dd4:	2210703a 	and	r8,r4,r8
   28dd8:	1211883a 	add	r8,r2,r8
   28ddc:	41400117 	ldw	r5,4(r8)
   28de0:	2940004c 	andi	r5,r5,1
   28de4:	28004a1e 	bne	r5,zero,28f10 <_realloc_r+0x1cc>
   28de8:	017fff04 	movi	r5,-4
   28dec:	2148703a 	and	r4,r4,r5
   28df0:	2409883a 	add	r4,r4,r16
   28df4:	21c0ad0e 	bge	r4,r7,290ac <_realloc_r+0x368>
   28df8:	18c0004c 	andi	r3,r3,1
   28dfc:	18007f1e 	bne	r3,zero,28ffc <_realloc_r+0x2b8>
   28e00:	9dfffe17 	ldw	r23,-8(r19)
   28e04:	adefc83a 	sub	r23,r21,r23
   28e08:	bd800117 	ldw	r22,4(r23)
   28e0c:	b14a703a 	and	r5,r22,r5
   28e10:	216d883a 	add	r22,r4,r5
   28e14:	b1c04516 	blt	r22,r7,28f2c <_realloc_r+0x1e8>
   28e18:	10c00317 	ldw	r3,12(r2)
   28e1c:	10800217 	ldw	r2,8(r2)
   28e20:	81bfff04 	addi	r6,r16,-4
   28e24:	bc400204 	addi	r17,r23,8
   28e28:	10c00315 	stw	r3,12(r2)
   28e2c:	18800215 	stw	r2,8(r3)
   28e30:	b9400217 	ldw	r5,8(r23)
   28e34:	b8c00317 	ldw	r3,12(r23)
   28e38:	00800904 	movi	r2,36
   28e3c:	28c00315 	stw	r3,12(r5)
   28e40:	19400215 	stw	r5,8(r3)
   28e44:	1180ef36 	bltu	r2,r6,29204 <_realloc_r+0x4c0>
   28e48:	008004c4 	movi	r2,19
   28e4c:	1180da2e 	bgeu	r2,r6,291b8 <_realloc_r+0x474>
   28e50:	98800017 	ldw	r2,0(r19)
   28e54:	b8800215 	stw	r2,8(r23)
   28e58:	98800117 	ldw	r2,4(r19)
   28e5c:	b8800315 	stw	r2,12(r23)
   28e60:	008006c4 	movi	r2,27
   28e64:	1180fc2e 	bgeu	r2,r6,29258 <_realloc_r+0x514>
   28e68:	98800217 	ldw	r2,8(r19)
   28e6c:	b8800415 	stw	r2,16(r23)
   28e70:	98800317 	ldw	r2,12(r19)
   28e74:	b8800515 	stw	r2,20(r23)
   28e78:	00800904 	movi	r2,36
   28e7c:	3080421e 	bne	r6,r2,28f88 <_realloc_r+0x244>
   28e80:	98800417 	ldw	r2,16(r19)
   28e84:	9cc00604 	addi	r19,r19,24
   28e88:	b8c00804 	addi	r3,r23,32
   28e8c:	b8800615 	stw	r2,24(r23)
   28e90:	98bfff17 	ldw	r2,-4(r19)
   28e94:	b8800715 	stw	r2,28(r23)
   28e98:	00003d06 	br	28f90 <_realloc_r+0x24c>
   28e9c:	01c00404 	movi	r7,16
   28ea0:	3829883a 	mov	r20,r7
   28ea4:	003fc206 	br	28db0 <__alt_data_end+0xfffec890>
   28ea8:	9823883a 	mov	r17,r19
   28eac:	850fc83a 	sub	r7,r16,r20
   28eb0:	008003c4 	movi	r2,15
   28eb4:	18c0004c 	andi	r3,r3,1
   28eb8:	11c04336 	bltu	r2,r7,28fc8 <_realloc_r+0x284>
   28ebc:	1c06b03a 	or	r3,r3,r16
   28ec0:	a8c00115 	stw	r3,4(r21)
   28ec4:	ac21883a 	add	r16,r21,r16
   28ec8:	80c00117 	ldw	r3,4(r16)
   28ecc:	18c00054 	ori	r3,r3,1
   28ed0:	80c00115 	stw	r3,4(r16)
   28ed4:	9009883a 	mov	r4,r18
   28ed8:	002d2000 	call	2d200 <__malloc_unlock>
   28edc:	8805883a 	mov	r2,r17
   28ee0:	dfc00917 	ldw	ra,36(sp)
   28ee4:	df000817 	ldw	fp,32(sp)
   28ee8:	ddc00717 	ldw	r23,28(sp)
   28eec:	dd800617 	ldw	r22,24(sp)
   28ef0:	dd400517 	ldw	r21,20(sp)
   28ef4:	dd000417 	ldw	r20,16(sp)
   28ef8:	dcc00317 	ldw	r19,12(sp)
   28efc:	dc800217 	ldw	r18,8(sp)
   28f00:	dc400117 	ldw	r17,4(sp)
   28f04:	dc000017 	ldw	r16,0(sp)
   28f08:	dec00a04 	addi	sp,sp,40
   28f0c:	f800283a 	ret
   28f10:	18c0004c 	andi	r3,r3,1
   28f14:	1800391e 	bne	r3,zero,28ffc <_realloc_r+0x2b8>
   28f18:	9dfffe17 	ldw	r23,-8(r19)
   28f1c:	00bfff04 	movi	r2,-4
   28f20:	adefc83a 	sub	r23,r21,r23
   28f24:	b9400117 	ldw	r5,4(r23)
   28f28:	288a703a 	and	r5,r5,r2
   28f2c:	2c2d883a 	add	r22,r5,r16
   28f30:	b1c03216 	blt	r22,r7,28ffc <_realloc_r+0x2b8>
   28f34:	b8800317 	ldw	r2,12(r23)
   28f38:	b8c00217 	ldw	r3,8(r23)
   28f3c:	81bfff04 	addi	r6,r16,-4
   28f40:	01000904 	movi	r4,36
   28f44:	18800315 	stw	r2,12(r3)
   28f48:	10c00215 	stw	r3,8(r2)
   28f4c:	bc400204 	addi	r17,r23,8
   28f50:	2180ac36 	bltu	r4,r6,29204 <_realloc_r+0x4c0>
   28f54:	008004c4 	movi	r2,19
   28f58:	1180972e 	bgeu	r2,r6,291b8 <_realloc_r+0x474>
   28f5c:	98800017 	ldw	r2,0(r19)
   28f60:	b8800215 	stw	r2,8(r23)
   28f64:	98800117 	ldw	r2,4(r19)
   28f68:	b8800315 	stw	r2,12(r23)
   28f6c:	008006c4 	movi	r2,27
   28f70:	1180b92e 	bgeu	r2,r6,29258 <_realloc_r+0x514>
   28f74:	98800217 	ldw	r2,8(r19)
   28f78:	b8800415 	stw	r2,16(r23)
   28f7c:	98800317 	ldw	r2,12(r19)
   28f80:	b8800515 	stw	r2,20(r23)
   28f84:	313fbe26 	beq	r6,r4,28e80 <__alt_data_end+0xfffec960>
   28f88:	b8c00604 	addi	r3,r23,24
   28f8c:	9cc00404 	addi	r19,r19,16
   28f90:	98800017 	ldw	r2,0(r19)
   28f94:	b021883a 	mov	r16,r22
   28f98:	b82b883a 	mov	r21,r23
   28f9c:	18800015 	stw	r2,0(r3)
   28fa0:	98800117 	ldw	r2,4(r19)
   28fa4:	18800115 	stw	r2,4(r3)
   28fa8:	98800217 	ldw	r2,8(r19)
   28fac:	18800215 	stw	r2,8(r3)
   28fb0:	b8c00117 	ldw	r3,4(r23)
   28fb4:	003fbd06 	br	28eac <__alt_data_end+0xfffec98c>
   28fb8:	00800304 	movi	r2,12
   28fbc:	90800015 	stw	r2,0(r18)
   28fc0:	0005883a 	mov	r2,zero
   28fc4:	003fc606 	br	28ee0 <__alt_data_end+0xfffec9c0>
   28fc8:	1d06b03a 	or	r3,r3,r20
   28fcc:	ad0b883a 	add	r5,r21,r20
   28fd0:	a8c00115 	stw	r3,4(r21)
   28fd4:	38800054 	ori	r2,r7,1
   28fd8:	28800115 	stw	r2,4(r5)
   28fdc:	29cf883a 	add	r7,r5,r7
   28fe0:	38800117 	ldw	r2,4(r7)
   28fe4:	9009883a 	mov	r4,r18
   28fe8:	29400204 	addi	r5,r5,8
   28fec:	10800054 	ori	r2,r2,1
   28ff0:	38800115 	stw	r2,4(r7)
   28ff4:	00246a00 	call	246a0 <_free_r>
   28ff8:	003fb606 	br	28ed4 <__alt_data_end+0xfffec9b4>
   28ffc:	880b883a 	mov	r5,r17
   29000:	9009883a 	mov	r4,r18
   29004:	0024d980 	call	24d98 <_malloc_r>
   29008:	1023883a 	mov	r17,r2
   2900c:	1000aa26 	beq	r2,zero,292b8 <_realloc_r+0x574>
   29010:	98ffff17 	ldw	r3,-4(r19)
   29014:	113ffe04 	addi	r4,r2,-8
   29018:	00bfff84 	movi	r2,-2
   2901c:	1884703a 	and	r2,r3,r2
   29020:	a885883a 	add	r2,r21,r2
   29024:	20808626 	beq	r4,r2,29240 <_realloc_r+0x4fc>
   29028:	81bfff04 	addi	r6,r16,-4
   2902c:	00800904 	movi	r2,36
   29030:	11807036 	bltu	r2,r6,291f4 <_realloc_r+0x4b0>
   29034:	00c004c4 	movi	r3,19
   29038:	19805636 	bltu	r3,r6,29194 <_realloc_r+0x450>
   2903c:	8805883a 	mov	r2,r17
   29040:	9807883a 	mov	r3,r19
   29044:	19000017 	ldw	r4,0(r3)
   29048:	11000015 	stw	r4,0(r2)
   2904c:	19000117 	ldw	r4,4(r3)
   29050:	11000115 	stw	r4,4(r2)
   29054:	18c00217 	ldw	r3,8(r3)
   29058:	10c00215 	stw	r3,8(r2)
   2905c:	980b883a 	mov	r5,r19
   29060:	9009883a 	mov	r4,r18
   29064:	00246a00 	call	246a0 <_free_r>
   29068:	9009883a 	mov	r4,r18
   2906c:	002d2000 	call	2d200 <__malloc_unlock>
   29070:	8805883a 	mov	r2,r17
   29074:	003f9a06 	br	28ee0 <__alt_data_end+0xfffec9c0>
   29078:	300b883a 	mov	r5,r6
   2907c:	dfc00917 	ldw	ra,36(sp)
   29080:	df000817 	ldw	fp,32(sp)
   29084:	ddc00717 	ldw	r23,28(sp)
   29088:	dd800617 	ldw	r22,24(sp)
   2908c:	dd400517 	ldw	r21,20(sp)
   29090:	dd000417 	ldw	r20,16(sp)
   29094:	dcc00317 	ldw	r19,12(sp)
   29098:	dc800217 	ldw	r18,8(sp)
   2909c:	dc400117 	ldw	r17,4(sp)
   290a0:	dc000017 	ldw	r16,0(sp)
   290a4:	dec00a04 	addi	sp,sp,40
   290a8:	0024d981 	jmpi	24d98 <_malloc_r>
   290ac:	11400317 	ldw	r5,12(r2)
   290b0:	10800217 	ldw	r2,8(r2)
   290b4:	9823883a 	mov	r17,r19
   290b8:	2021883a 	mov	r16,r4
   290bc:	11400315 	stw	r5,12(r2)
   290c0:	28800215 	stw	r2,8(r5)
   290c4:	003f7906 	br	28eac <__alt_data_end+0xfffec98c>
   290c8:	21000117 	ldw	r4,4(r4)
   290cc:	00bfff04 	movi	r2,-4
   290d0:	a1800404 	addi	r6,r20,16
   290d4:	2088703a 	and	r4,r4,r2
   290d8:	2409883a 	add	r4,r4,r16
   290dc:	2180380e 	bge	r4,r6,291c0 <_realloc_r+0x47c>
   290e0:	18c0004c 	andi	r3,r3,1
   290e4:	183fc51e 	bne	r3,zero,28ffc <__alt_data_end+0xfffecadc>
   290e8:	9dfffe17 	ldw	r23,-8(r19)
   290ec:	adefc83a 	sub	r23,r21,r23
   290f0:	b9400117 	ldw	r5,4(r23)
   290f4:	288a703a 	and	r5,r5,r2
   290f8:	216d883a 	add	r22,r4,r5
   290fc:	b1bf8b16 	blt	r22,r6,28f2c <__alt_data_end+0xfffeca0c>
   29100:	b8800317 	ldw	r2,12(r23)
   29104:	b8c00217 	ldw	r3,8(r23)
   29108:	81bfff04 	addi	r6,r16,-4
   2910c:	01000904 	movi	r4,36
   29110:	18800315 	stw	r2,12(r3)
   29114:	10c00215 	stw	r3,8(r2)
   29118:	bc400204 	addi	r17,r23,8
   2911c:	21805a36 	bltu	r4,r6,29288 <_realloc_r+0x544>
   29120:	008004c4 	movi	r2,19
   29124:	1180562e 	bgeu	r2,r6,29280 <_realloc_r+0x53c>
   29128:	98800017 	ldw	r2,0(r19)
   2912c:	b8800215 	stw	r2,8(r23)
   29130:	98800117 	ldw	r2,4(r19)
   29134:	b8800315 	stw	r2,12(r23)
   29138:	008006c4 	movi	r2,27
   2913c:	11805636 	bltu	r2,r6,29298 <_realloc_r+0x554>
   29140:	b8800404 	addi	r2,r23,16
   29144:	9cc00204 	addi	r19,r19,8
   29148:	98c00017 	ldw	r3,0(r19)
   2914c:	10c00015 	stw	r3,0(r2)
   29150:	98c00117 	ldw	r3,4(r19)
   29154:	10c00115 	stw	r3,4(r2)
   29158:	98c00217 	ldw	r3,8(r19)
   2915c:	10c00215 	stw	r3,8(r2)
   29160:	bd07883a 	add	r3,r23,r20
   29164:	b505c83a 	sub	r2,r22,r20
   29168:	e0c00215 	stw	r3,8(fp)
   2916c:	10800054 	ori	r2,r2,1
   29170:	18800115 	stw	r2,4(r3)
   29174:	b8800117 	ldw	r2,4(r23)
   29178:	9009883a 	mov	r4,r18
   2917c:	1080004c 	andi	r2,r2,1
   29180:	a0a8b03a 	or	r20,r20,r2
   29184:	bd000115 	stw	r20,4(r23)
   29188:	002d2000 	call	2d200 <__malloc_unlock>
   2918c:	8805883a 	mov	r2,r17
   29190:	003f5306 	br	28ee0 <__alt_data_end+0xfffec9c0>
   29194:	98c00017 	ldw	r3,0(r19)
   29198:	88c00015 	stw	r3,0(r17)
   2919c:	98c00117 	ldw	r3,4(r19)
   291a0:	88c00115 	stw	r3,4(r17)
   291a4:	00c006c4 	movi	r3,27
   291a8:	19801d36 	bltu	r3,r6,29220 <_realloc_r+0x4dc>
   291ac:	88800204 	addi	r2,r17,8
   291b0:	98c00204 	addi	r3,r19,8
   291b4:	003fa306 	br	29044 <__alt_data_end+0xfffecb24>
   291b8:	8807883a 	mov	r3,r17
   291bc:	003f7406 	br	28f90 <__alt_data_end+0xfffeca70>
   291c0:	ad2b883a 	add	r21,r21,r20
   291c4:	2505c83a 	sub	r2,r4,r20
   291c8:	e5400215 	stw	r21,8(fp)
   291cc:	10800054 	ori	r2,r2,1
   291d0:	a8800115 	stw	r2,4(r21)
   291d4:	98bfff17 	ldw	r2,-4(r19)
   291d8:	9009883a 	mov	r4,r18
   291dc:	1080004c 	andi	r2,r2,1
   291e0:	a0a8b03a 	or	r20,r20,r2
   291e4:	9d3fff15 	stw	r20,-4(r19)
   291e8:	002d2000 	call	2d200 <__malloc_unlock>
   291ec:	9805883a 	mov	r2,r19
   291f0:	003f3b06 	br	28ee0 <__alt_data_end+0xfffec9c0>
   291f4:	8809883a 	mov	r4,r17
   291f8:	980b883a 	mov	r5,r19
   291fc:	0028b8c0 	call	28b8c <memmove>
   29200:	003f9606 	br	2905c <__alt_data_end+0xfffecb3c>
   29204:	8809883a 	mov	r4,r17
   29208:	980b883a 	mov	r5,r19
   2920c:	0028b8c0 	call	28b8c <memmove>
   29210:	b8c00117 	ldw	r3,4(r23)
   29214:	b021883a 	mov	r16,r22
   29218:	b82b883a 	mov	r21,r23
   2921c:	003f2306 	br	28eac <__alt_data_end+0xfffec98c>
   29220:	98c00217 	ldw	r3,8(r19)
   29224:	88c00215 	stw	r3,8(r17)
   29228:	98c00317 	ldw	r3,12(r19)
   2922c:	88c00315 	stw	r3,12(r17)
   29230:	30800c26 	beq	r6,r2,29264 <_realloc_r+0x520>
   29234:	88800404 	addi	r2,r17,16
   29238:	98c00404 	addi	r3,r19,16
   2923c:	003f8106 	br	29044 <__alt_data_end+0xfffecb24>
   29240:	893fff17 	ldw	r4,-4(r17)
   29244:	00bfff04 	movi	r2,-4
   29248:	9823883a 	mov	r17,r19
   2924c:	2084703a 	and	r2,r4,r2
   29250:	80a1883a 	add	r16,r16,r2
   29254:	003f1506 	br	28eac <__alt_data_end+0xfffec98c>
   29258:	b8c00404 	addi	r3,r23,16
   2925c:	9cc00204 	addi	r19,r19,8
   29260:	003f4b06 	br	28f90 <__alt_data_end+0xfffeca70>
   29264:	99000417 	ldw	r4,16(r19)
   29268:	88800604 	addi	r2,r17,24
   2926c:	98c00604 	addi	r3,r19,24
   29270:	89000415 	stw	r4,16(r17)
   29274:	99000517 	ldw	r4,20(r19)
   29278:	89000515 	stw	r4,20(r17)
   2927c:	003f7106 	br	29044 <__alt_data_end+0xfffecb24>
   29280:	8805883a 	mov	r2,r17
   29284:	003fb006 	br	29148 <__alt_data_end+0xfffecc28>
   29288:	8809883a 	mov	r4,r17
   2928c:	980b883a 	mov	r5,r19
   29290:	0028b8c0 	call	28b8c <memmove>
   29294:	003fb206 	br	29160 <__alt_data_end+0xfffecc40>
   29298:	98800217 	ldw	r2,8(r19)
   2929c:	b8800415 	stw	r2,16(r23)
   292a0:	98800317 	ldw	r2,12(r19)
   292a4:	b8800515 	stw	r2,20(r23)
   292a8:	31000726 	beq	r6,r4,292c8 <_realloc_r+0x584>
   292ac:	b8800604 	addi	r2,r23,24
   292b0:	9cc00404 	addi	r19,r19,16
   292b4:	003fa406 	br	29148 <__alt_data_end+0xfffecc28>
   292b8:	9009883a 	mov	r4,r18
   292bc:	002d2000 	call	2d200 <__malloc_unlock>
   292c0:	0005883a 	mov	r2,zero
   292c4:	003f0606 	br	28ee0 <__alt_data_end+0xfffec9c0>
   292c8:	98c00417 	ldw	r3,16(r19)
   292cc:	9cc00604 	addi	r19,r19,24
   292d0:	b8800804 	addi	r2,r23,32
   292d4:	b8c00615 	stw	r3,24(r23)
   292d8:	98ffff17 	ldw	r3,-4(r19)
   292dc:	b8c00715 	stw	r3,28(r23)
   292e0:	003f9906 	br	29148 <__alt_data_end+0xfffecc28>

000292e4 <__swbuf_r>:
   292e4:	defffc04 	addi	sp,sp,-16
   292e8:	dc800215 	stw	r18,8(sp)
   292ec:	dc400115 	stw	r17,4(sp)
   292f0:	dc000015 	stw	r16,0(sp)
   292f4:	dfc00315 	stw	ra,12(sp)
   292f8:	2025883a 	mov	r18,r4
   292fc:	2823883a 	mov	r17,r5
   29300:	3021883a 	mov	r16,r6
   29304:	20000226 	beq	r4,zero,29310 <__swbuf_r+0x2c>
   29308:	20800e17 	ldw	r2,56(r4)
   2930c:	10004126 	beq	r2,zero,29414 <__swbuf_r+0x130>
   29310:	80c00617 	ldw	r3,24(r16)
   29314:	8180030b 	ldhu	r6,12(r16)
   29318:	80c00215 	stw	r3,8(r16)
   2931c:	30c0020c 	andi	r3,r6,8
   29320:	18003526 	beq	r3,zero,293f8 <__swbuf_r+0x114>
   29324:	80c00417 	ldw	r3,16(r16)
   29328:	18003326 	beq	r3,zero,293f8 <__swbuf_r+0x114>
   2932c:	3088000c 	andi	r2,r6,8192
   29330:	8c403fcc 	andi	r17,r17,255
   29334:	10001726 	beq	r2,zero,29394 <__swbuf_r+0xb0>
   29338:	80800017 	ldw	r2,0(r16)
   2933c:	81000517 	ldw	r4,20(r16)
   29340:	10c7c83a 	sub	r3,r2,r3
   29344:	19001d0e 	bge	r3,r4,293bc <__swbuf_r+0xd8>
   29348:	18c00044 	addi	r3,r3,1
   2934c:	81400217 	ldw	r5,8(r16)
   29350:	11000044 	addi	r4,r2,1
   29354:	81000015 	stw	r4,0(r16)
   29358:	297fffc4 	addi	r5,r5,-1
   2935c:	81400215 	stw	r5,8(r16)
   29360:	14400005 	stb	r17,0(r2)
   29364:	80800517 	ldw	r2,20(r16)
   29368:	10c01d26 	beq	r2,r3,293e0 <__swbuf_r+0xfc>
   2936c:	8080030b 	ldhu	r2,12(r16)
   29370:	1080004c 	andi	r2,r2,1
   29374:	1000181e 	bne	r2,zero,293d8 <__swbuf_r+0xf4>
   29378:	8805883a 	mov	r2,r17
   2937c:	dfc00317 	ldw	ra,12(sp)
   29380:	dc800217 	ldw	r18,8(sp)
   29384:	dc400117 	ldw	r17,4(sp)
   29388:	dc000017 	ldw	r16,0(sp)
   2938c:	dec00404 	addi	sp,sp,16
   29390:	f800283a 	ret
   29394:	81001917 	ldw	r4,100(r16)
   29398:	00b7ffc4 	movi	r2,-8193
   2939c:	31880014 	ori	r6,r6,8192
   293a0:	2084703a 	and	r2,r4,r2
   293a4:	80801915 	stw	r2,100(r16)
   293a8:	80800017 	ldw	r2,0(r16)
   293ac:	81000517 	ldw	r4,20(r16)
   293b0:	8180030d 	sth	r6,12(r16)
   293b4:	10c7c83a 	sub	r3,r2,r3
   293b8:	193fe316 	blt	r3,r4,29348 <__alt_data_end+0xfffece28>
   293bc:	9009883a 	mov	r4,r18
   293c0:	800b883a 	mov	r5,r16
   293c4:	0023f700 	call	23f70 <_fflush_r>
   293c8:	1000091e 	bne	r2,zero,293f0 <__swbuf_r+0x10c>
   293cc:	80800017 	ldw	r2,0(r16)
   293d0:	00c00044 	movi	r3,1
   293d4:	003fdd06 	br	2934c <__alt_data_end+0xfffece2c>
   293d8:	00800284 	movi	r2,10
   293dc:	88bfe61e 	bne	r17,r2,29378 <__alt_data_end+0xfffece58>
   293e0:	9009883a 	mov	r4,r18
   293e4:	800b883a 	mov	r5,r16
   293e8:	0023f700 	call	23f70 <_fflush_r>
   293ec:	103fe226 	beq	r2,zero,29378 <__alt_data_end+0xfffece58>
   293f0:	00bfffc4 	movi	r2,-1
   293f4:	003fe106 	br	2937c <__alt_data_end+0xfffece5c>
   293f8:	9009883a 	mov	r4,r18
   293fc:	800b883a 	mov	r5,r16
   29400:	00224f00 	call	224f0 <__swsetup_r>
   29404:	1000051e 	bne	r2,zero,2941c <__swbuf_r+0x138>
   29408:	8180030b 	ldhu	r6,12(r16)
   2940c:	80c00417 	ldw	r3,16(r16)
   29410:	003fc606 	br	2932c <__alt_data_end+0xfffece0c>
   29414:	002452c0 	call	2452c <__sinit>
   29418:	003fbd06 	br	29310 <__alt_data_end+0xfffecdf0>
   2941c:	80c0030b 	ldhu	r3,12(r16)
   29420:	00bfffc4 	movi	r2,-1
   29424:	18c01014 	ori	r3,r3,64
   29428:	80c0030d 	sth	r3,12(r16)
   2942c:	00c00244 	movi	r3,9
   29430:	90c00015 	stw	r3,0(r18)
   29434:	003fd106 	br	2937c <__alt_data_end+0xfffece5c>

00029438 <__swbuf>:
   29438:	00c000f4 	movhi	r3,3
   2943c:	18c76104 	addi	r3,r3,7556
   29440:	2005883a 	mov	r2,r4
   29444:	19000017 	ldw	r4,0(r3)
   29448:	280d883a 	mov	r6,r5
   2944c:	100b883a 	mov	r5,r2
   29450:	00292e41 	jmpi	292e4 <__swbuf_r>

00029454 <_wcrtomb_r>:
   29454:	defff604 	addi	sp,sp,-40
   29458:	008000f4 	movhi	r2,3
   2945c:	dc800815 	stw	r18,32(sp)
   29460:	dc400715 	stw	r17,28(sp)
   29464:	dc000615 	stw	r16,24(sp)
   29468:	10876504 	addi	r2,r2,7572
   2946c:	dfc00915 	stw	ra,36(sp)
   29470:	2021883a 	mov	r16,r4
   29474:	3823883a 	mov	r17,r7
   29478:	14800017 	ldw	r18,0(r2)
   2947c:	28001426 	beq	r5,zero,294d0 <_wcrtomb_r+0x7c>
   29480:	d9400415 	stw	r5,16(sp)
   29484:	d9800515 	stw	r6,20(sp)
   29488:	0024b7c0 	call	24b7c <__locale_charset>
   2948c:	d9400417 	ldw	r5,16(sp)
   29490:	d9800517 	ldw	r6,20(sp)
   29494:	8009883a 	mov	r4,r16
   29498:	dc400015 	stw	r17,0(sp)
   2949c:	100f883a 	mov	r7,r2
   294a0:	903ee83a 	callr	r18
   294a4:	00ffffc4 	movi	r3,-1
   294a8:	10c0031e 	bne	r2,r3,294b8 <_wcrtomb_r+0x64>
   294ac:	88000015 	stw	zero,0(r17)
   294b0:	00c02284 	movi	r3,138
   294b4:	80c00015 	stw	r3,0(r16)
   294b8:	dfc00917 	ldw	ra,36(sp)
   294bc:	dc800817 	ldw	r18,32(sp)
   294c0:	dc400717 	ldw	r17,28(sp)
   294c4:	dc000617 	ldw	r16,24(sp)
   294c8:	dec00a04 	addi	sp,sp,40
   294cc:	f800283a 	ret
   294d0:	0024b7c0 	call	24b7c <__locale_charset>
   294d4:	8009883a 	mov	r4,r16
   294d8:	dc400015 	stw	r17,0(sp)
   294dc:	d9400104 	addi	r5,sp,4
   294e0:	000d883a 	mov	r6,zero
   294e4:	100f883a 	mov	r7,r2
   294e8:	903ee83a 	callr	r18
   294ec:	003fed06 	br	294a4 <__alt_data_end+0xfffecf84>

000294f0 <wcrtomb>:
   294f0:	defff504 	addi	sp,sp,-44
   294f4:	dc400515 	stw	r17,20(sp)
   294f8:	dc000415 	stw	r16,16(sp)
   294fc:	dfc00a15 	stw	ra,40(sp)
   29500:	dd400915 	stw	r21,36(sp)
   29504:	dd000815 	stw	r20,32(sp)
   29508:	dcc00715 	stw	r19,28(sp)
   2950c:	dc800615 	stw	r18,24(sp)
   29510:	2021883a 	mov	r16,r4
   29514:	3023883a 	mov	r17,r6
   29518:	20001d26 	beq	r4,zero,29590 <wcrtomb+0xa0>
   2951c:	048000f4 	movhi	r18,3
   29520:	94876104 	addi	r18,r18,7556
   29524:	008000f4 	movhi	r2,3
   29528:	95400017 	ldw	r21,0(r18)
   2952c:	10876504 	addi	r2,r2,7572
   29530:	15000017 	ldw	r20,0(r2)
   29534:	2827883a 	mov	r19,r5
   29538:	0024b7c0 	call	24b7c <__locale_charset>
   2953c:	a809883a 	mov	r4,r21
   29540:	dc400015 	stw	r17,0(sp)
   29544:	800b883a 	mov	r5,r16
   29548:	980d883a 	mov	r6,r19
   2954c:	100f883a 	mov	r7,r2
   29550:	a03ee83a 	callr	r20
   29554:	00ffffc4 	movi	r3,-1
   29558:	10c0041e 	bne	r2,r3,2956c <wcrtomb+0x7c>
   2955c:	90c00017 	ldw	r3,0(r18)
   29560:	01002284 	movi	r4,138
   29564:	88000015 	stw	zero,0(r17)
   29568:	19000015 	stw	r4,0(r3)
   2956c:	dfc00a17 	ldw	ra,40(sp)
   29570:	dd400917 	ldw	r21,36(sp)
   29574:	dd000817 	ldw	r20,32(sp)
   29578:	dcc00717 	ldw	r19,28(sp)
   2957c:	dc800617 	ldw	r18,24(sp)
   29580:	dc400517 	ldw	r17,20(sp)
   29584:	dc000417 	ldw	r16,16(sp)
   29588:	dec00b04 	addi	sp,sp,44
   2958c:	f800283a 	ret
   29590:	048000f4 	movhi	r18,3
   29594:	94876104 	addi	r18,r18,7556
   29598:	008000f4 	movhi	r2,3
   2959c:	94c00017 	ldw	r19,0(r18)
   295a0:	10876504 	addi	r2,r2,7572
   295a4:	14000017 	ldw	r16,0(r2)
   295a8:	0024b7c0 	call	24b7c <__locale_charset>
   295ac:	9809883a 	mov	r4,r19
   295b0:	dc400015 	stw	r17,0(sp)
   295b4:	d9400104 	addi	r5,sp,4
   295b8:	000d883a 	mov	r6,zero
   295bc:	100f883a 	mov	r7,r2
   295c0:	803ee83a 	callr	r16
   295c4:	003fe306 	br	29554 <__alt_data_end+0xfffed034>

000295c8 <__ascii_wctomb>:
   295c8:	28000526 	beq	r5,zero,295e0 <__ascii_wctomb+0x18>
   295cc:	00803fc4 	movi	r2,255
   295d0:	11800536 	bltu	r2,r6,295e8 <__ascii_wctomb+0x20>
   295d4:	29800005 	stb	r6,0(r5)
   295d8:	00800044 	movi	r2,1
   295dc:	f800283a 	ret
   295e0:	0005883a 	mov	r2,zero
   295e4:	f800283a 	ret
   295e8:	00802284 	movi	r2,138
   295ec:	20800015 	stw	r2,0(r4)
   295f0:	00bfffc4 	movi	r2,-1
   295f4:	f800283a 	ret

000295f8 <_wctomb_r>:
   295f8:	008000f4 	movhi	r2,3
   295fc:	defff904 	addi	sp,sp,-28
   29600:	10876504 	addi	r2,r2,7572
   29604:	dfc00615 	stw	ra,24(sp)
   29608:	dc400515 	stw	r17,20(sp)
   2960c:	dc000415 	stw	r16,16(sp)
   29610:	3823883a 	mov	r17,r7
   29614:	14000017 	ldw	r16,0(r2)
   29618:	d9000115 	stw	r4,4(sp)
   2961c:	d9400215 	stw	r5,8(sp)
   29620:	d9800315 	stw	r6,12(sp)
   29624:	0024b7c0 	call	24b7c <__locale_charset>
   29628:	d9000117 	ldw	r4,4(sp)
   2962c:	d9400217 	ldw	r5,8(sp)
   29630:	d9800317 	ldw	r6,12(sp)
   29634:	dc400015 	stw	r17,0(sp)
   29638:	100f883a 	mov	r7,r2
   2963c:	803ee83a 	callr	r16
   29640:	dfc00617 	ldw	ra,24(sp)
   29644:	dc400517 	ldw	r17,20(sp)
   29648:	dc000417 	ldw	r16,16(sp)
   2964c:	dec00704 	addi	sp,sp,28
   29650:	f800283a 	ret

00029654 <__udivdi3>:
   29654:	defff504 	addi	sp,sp,-44
   29658:	dcc00415 	stw	r19,16(sp)
   2965c:	dc000115 	stw	r16,4(sp)
   29660:	dfc00a15 	stw	ra,40(sp)
   29664:	df000915 	stw	fp,36(sp)
   29668:	ddc00815 	stw	r23,32(sp)
   2966c:	dd800715 	stw	r22,28(sp)
   29670:	dd400615 	stw	r21,24(sp)
   29674:	dd000515 	stw	r20,20(sp)
   29678:	dc800315 	stw	r18,12(sp)
   2967c:	dc400215 	stw	r17,8(sp)
   29680:	2027883a 	mov	r19,r4
   29684:	2821883a 	mov	r16,r5
   29688:	3800471e 	bne	r7,zero,297a8 <__udivdi3+0x154>
   2968c:	3025883a 	mov	r18,r6
   29690:	2023883a 	mov	r17,r4
   29694:	2980592e 	bgeu	r5,r6,297fc <__udivdi3+0x1a8>
   29698:	00bfffd4 	movui	r2,65535
   2969c:	2829883a 	mov	r20,r5
   296a0:	1180b236 	bltu	r2,r6,2996c <__udivdi3+0x318>
   296a4:	00803fc4 	movi	r2,255
   296a8:	1181622e 	bgeu	r2,r6,29c34 <__udivdi3+0x5e0>
   296ac:	00800204 	movi	r2,8
   296b0:	1007883a 	mov	r3,r2
   296b4:	3084d83a 	srl	r2,r6,r2
   296b8:	010000f4 	movhi	r4,3
   296bc:	21003604 	addi	r4,r4,216
   296c0:	2085883a 	add	r2,r4,r2
   296c4:	11000003 	ldbu	r4,0(r2)
   296c8:	20c9883a 	add	r4,r4,r3
   296cc:	00c00804 	movi	r3,32
   296d0:	1907c83a 	sub	r3,r3,r4
   296d4:	18000526 	beq	r3,zero,296ec <__udivdi3+0x98>
   296d8:	80e0983a 	sll	r16,r16,r3
   296dc:	9908d83a 	srl	r4,r19,r4
   296e0:	30e4983a 	sll	r18,r6,r3
   296e4:	98e2983a 	sll	r17,r19,r3
   296e8:	8128b03a 	or	r20,r16,r4
   296ec:	902ad43a 	srli	r21,r18,16
   296f0:	a009883a 	mov	r4,r20
   296f4:	95bfffcc 	andi	r22,r18,65535
   296f8:	a80b883a 	mov	r5,r21
   296fc:	002a3d40 	call	2a3d4 <__umodsi3>
   29700:	a009883a 	mov	r4,r20
   29704:	a80b883a 	mov	r5,r21
   29708:	102f883a 	mov	r23,r2
   2970c:	002a3cc0 	call	2a3cc <__udivsi3>
   29710:	1009883a 	mov	r4,r2
   29714:	b00b883a 	mov	r5,r22
   29718:	1021883a 	mov	r16,r2
   2971c:	002a3dc0 	call	2a3dc <__mulsi3>
   29720:	b82e943a 	slli	r23,r23,16
   29724:	8808d43a 	srli	r4,r17,16
   29728:	b906b03a 	or	r3,r23,r4
   2972c:	1880052e 	bgeu	r3,r2,29744 <__udivdi3+0xf0>
   29730:	1c87883a 	add	r3,r3,r18
   29734:	813fffc4 	addi	r4,r16,-1
   29738:	1c800136 	bltu	r3,r18,29740 <__udivdi3+0xec>
   2973c:	18815236 	bltu	r3,r2,29c88 <__udivdi3+0x634>
   29740:	2021883a 	mov	r16,r4
   29744:	18a7c83a 	sub	r19,r3,r2
   29748:	9809883a 	mov	r4,r19
   2974c:	a80b883a 	mov	r5,r21
   29750:	002a3d40 	call	2a3d4 <__umodsi3>
   29754:	1029883a 	mov	r20,r2
   29758:	9809883a 	mov	r4,r19
   2975c:	a80b883a 	mov	r5,r21
   29760:	a028943a 	slli	r20,r20,16
   29764:	002a3cc0 	call	2a3cc <__udivsi3>
   29768:	1009883a 	mov	r4,r2
   2976c:	b00b883a 	mov	r5,r22
   29770:	8c7fffcc 	andi	r17,r17,65535
   29774:	1027883a 	mov	r19,r2
   29778:	a462b03a 	or	r17,r20,r17
   2977c:	002a3dc0 	call	2a3dc <__mulsi3>
   29780:	8880052e 	bgeu	r17,r2,29798 <__udivdi3+0x144>
   29784:	8ca3883a 	add	r17,r17,r18
   29788:	98ffffc4 	addi	r3,r19,-1
   2978c:	8c811036 	bltu	r17,r18,29bd0 <__udivdi3+0x57c>
   29790:	88810f2e 	bgeu	r17,r2,29bd0 <__udivdi3+0x57c>
   29794:	9cffff84 	addi	r19,r19,-2
   29798:	8020943a 	slli	r16,r16,16
   2979c:	0007883a 	mov	r3,zero
   297a0:	9c04b03a 	or	r2,r19,r16
   297a4:	00006006 	br	29928 <__udivdi3+0x2d4>
   297a8:	29c05d36 	bltu	r5,r7,29920 <__udivdi3+0x2cc>
   297ac:	00bfffd4 	movui	r2,65535
   297b0:	11c0692e 	bgeu	r2,r7,29958 <__udivdi3+0x304>
   297b4:	00804034 	movhi	r2,256
   297b8:	10bfffc4 	addi	r2,r2,-1
   297bc:	11c10e2e 	bgeu	r2,r7,29bf8 <__udivdi3+0x5a4>
   297c0:	01400604 	movi	r5,24
   297c4:	2811883a 	mov	r8,r5
   297c8:	394ad83a 	srl	r5,r7,r5
   297cc:	008000f4 	movhi	r2,3
   297d0:	10803604 	addi	r2,r2,216
   297d4:	114b883a 	add	r5,r2,r5
   297d8:	29400003 	ldbu	r5,0(r5)
   297dc:	00c00804 	movi	r3,32
   297e0:	2a0b883a 	add	r5,r5,r8
   297e4:	196fc83a 	sub	r23,r3,r5
   297e8:	b8006b1e 	bne	r23,zero,29998 <__udivdi3+0x344>
   297ec:	3c011436 	bltu	r7,r16,29c40 <__udivdi3+0x5ec>
   297f0:	9985403a 	cmpgeu	r2,r19,r6
   297f4:	0007883a 	mov	r3,zero
   297f8:	00004b06 	br	29928 <__udivdi3+0x2d4>
   297fc:	3000041e 	bne	r6,zero,29810 <__udivdi3+0x1bc>
   29800:	01000044 	movi	r4,1
   29804:	000b883a 	mov	r5,zero
   29808:	002a3cc0 	call	2a3cc <__udivsi3>
   2980c:	1025883a 	mov	r18,r2
   29810:	00bfffd4 	movui	r2,65535
   29814:	14805b2e 	bgeu	r2,r18,29984 <__udivdi3+0x330>
   29818:	00804034 	movhi	r2,256
   2981c:	10bfffc4 	addi	r2,r2,-1
   29820:	1480fe2e 	bgeu	r2,r18,29c1c <__udivdi3+0x5c8>
   29824:	00800604 	movi	r2,24
   29828:	1007883a 	mov	r3,r2
   2982c:	9084d83a 	srl	r2,r18,r2
   29830:	010000f4 	movhi	r4,3
   29834:	21003604 	addi	r4,r4,216
   29838:	2085883a 	add	r2,r4,r2
   2983c:	11800003 	ldbu	r6,0(r2)
   29840:	01c00804 	movi	r7,32
   29844:	30c7883a 	add	r3,r6,r3
   29848:	38cfc83a 	sub	r7,r7,r3
   2984c:	3800a71e 	bne	r7,zero,29aec <__udivdi3+0x498>
   29850:	9028d43a 	srli	r20,r18,16
   29854:	84a1c83a 	sub	r16,r16,r18
   29858:	957fffcc 	andi	r21,r18,65535
   2985c:	00c00044 	movi	r3,1
   29860:	8009883a 	mov	r4,r16
   29864:	a00b883a 	mov	r5,r20
   29868:	d8c00015 	stw	r3,0(sp)
   2986c:	002a3d40 	call	2a3d4 <__umodsi3>
   29870:	8009883a 	mov	r4,r16
   29874:	a00b883a 	mov	r5,r20
   29878:	102d883a 	mov	r22,r2
   2987c:	002a3cc0 	call	2a3cc <__udivsi3>
   29880:	1009883a 	mov	r4,r2
   29884:	a80b883a 	mov	r5,r21
   29888:	1021883a 	mov	r16,r2
   2988c:	002a3dc0 	call	2a3dc <__mulsi3>
   29890:	b02c943a 	slli	r22,r22,16
   29894:	880ed43a 	srli	r7,r17,16
   29898:	d8c00017 	ldw	r3,0(sp)
   2989c:	b1ccb03a 	or	r6,r22,r7
   298a0:	3080052e 	bgeu	r6,r2,298b8 <__udivdi3+0x264>
   298a4:	348d883a 	add	r6,r6,r18
   298a8:	813fffc4 	addi	r4,r16,-1
   298ac:	34800136 	bltu	r6,r18,298b4 <__udivdi3+0x260>
   298b0:	3080f236 	bltu	r6,r2,29c7c <__udivdi3+0x628>
   298b4:	2021883a 	mov	r16,r4
   298b8:	30a7c83a 	sub	r19,r6,r2
   298bc:	9809883a 	mov	r4,r19
   298c0:	a00b883a 	mov	r5,r20
   298c4:	d8c00015 	stw	r3,0(sp)
   298c8:	002a3d40 	call	2a3d4 <__umodsi3>
   298cc:	102d883a 	mov	r22,r2
   298d0:	9809883a 	mov	r4,r19
   298d4:	a00b883a 	mov	r5,r20
   298d8:	b02c943a 	slli	r22,r22,16
   298dc:	002a3cc0 	call	2a3cc <__udivsi3>
   298e0:	1009883a 	mov	r4,r2
   298e4:	a80b883a 	mov	r5,r21
   298e8:	8c7fffcc 	andi	r17,r17,65535
   298ec:	1027883a 	mov	r19,r2
   298f0:	b462b03a 	or	r17,r22,r17
   298f4:	002a3dc0 	call	2a3dc <__mulsi3>
   298f8:	d8c00017 	ldw	r3,0(sp)
   298fc:	8880052e 	bgeu	r17,r2,29914 <__udivdi3+0x2c0>
   29900:	8ca3883a 	add	r17,r17,r18
   29904:	993fffc4 	addi	r4,r19,-1
   29908:	8c80af36 	bltu	r17,r18,29bc8 <__udivdi3+0x574>
   2990c:	8880ae2e 	bgeu	r17,r2,29bc8 <__udivdi3+0x574>
   29910:	9cffff84 	addi	r19,r19,-2
   29914:	8020943a 	slli	r16,r16,16
   29918:	9c04b03a 	or	r2,r19,r16
   2991c:	00000206 	br	29928 <__udivdi3+0x2d4>
   29920:	0007883a 	mov	r3,zero
   29924:	0005883a 	mov	r2,zero
   29928:	dfc00a17 	ldw	ra,40(sp)
   2992c:	df000917 	ldw	fp,36(sp)
   29930:	ddc00817 	ldw	r23,32(sp)
   29934:	dd800717 	ldw	r22,28(sp)
   29938:	dd400617 	ldw	r21,24(sp)
   2993c:	dd000517 	ldw	r20,20(sp)
   29940:	dcc00417 	ldw	r19,16(sp)
   29944:	dc800317 	ldw	r18,12(sp)
   29948:	dc400217 	ldw	r17,8(sp)
   2994c:	dc000117 	ldw	r16,4(sp)
   29950:	dec00b04 	addi	sp,sp,44
   29954:	f800283a 	ret
   29958:	00803fc4 	movi	r2,255
   2995c:	11c0a92e 	bgeu	r2,r7,29c04 <__udivdi3+0x5b0>
   29960:	01400204 	movi	r5,8
   29964:	2811883a 	mov	r8,r5
   29968:	003f9706 	br	297c8 <__alt_data_end+0xfffed2a8>
   2996c:	00804034 	movhi	r2,256
   29970:	10bfffc4 	addi	r2,r2,-1
   29974:	1180a62e 	bgeu	r2,r6,29c10 <__udivdi3+0x5bc>
   29978:	00800604 	movi	r2,24
   2997c:	1007883a 	mov	r3,r2
   29980:	003f4c06 	br	296b4 <__alt_data_end+0xfffed194>
   29984:	00803fc4 	movi	r2,255
   29988:	1480a72e 	bgeu	r2,r18,29c28 <__udivdi3+0x5d4>
   2998c:	00800204 	movi	r2,8
   29990:	1007883a 	mov	r3,r2
   29994:	003fa506 	br	2982c <__alt_data_end+0xfffed30c>
   29998:	3178d83a 	srl	fp,r6,r5
   2999c:	3dce983a 	sll	r7,r7,r23
   299a0:	8168d83a 	srl	r20,r16,r5
   299a4:	9950d83a 	srl	r8,r19,r5
   299a8:	3f38b03a 	or	fp,r7,fp
   299ac:	e024d43a 	srli	r18,fp,16
   299b0:	85e0983a 	sll	r16,r16,r23
   299b4:	a009883a 	mov	r4,r20
   299b8:	900b883a 	mov	r5,r18
   299bc:	8220b03a 	or	r16,r16,r8
   299c0:	35ea983a 	sll	r21,r6,r23
   299c4:	002a3d40 	call	2a3d4 <__umodsi3>
   299c8:	a009883a 	mov	r4,r20
   299cc:	900b883a 	mov	r5,r18
   299d0:	1023883a 	mov	r17,r2
   299d4:	e5bfffcc 	andi	r22,fp,65535
   299d8:	002a3cc0 	call	2a3cc <__udivsi3>
   299dc:	1009883a 	mov	r4,r2
   299e0:	b00b883a 	mov	r5,r22
   299e4:	1029883a 	mov	r20,r2
   299e8:	002a3dc0 	call	2a3dc <__mulsi3>
   299ec:	8806943a 	slli	r3,r17,16
   299f0:	8014d43a 	srli	r10,r16,16
   299f4:	1a92b03a 	or	r9,r3,r10
   299f8:	4880042e 	bgeu	r9,r2,29a0c <__udivdi3+0x3b8>
   299fc:	4f13883a 	add	r9,r9,fp
   29a00:	a0ffffc4 	addi	r3,r20,-1
   29a04:	4f00952e 	bgeu	r9,fp,29c5c <__udivdi3+0x608>
   29a08:	1829883a 	mov	r20,r3
   29a0c:	48a3c83a 	sub	r17,r9,r2
   29a10:	8809883a 	mov	r4,r17
   29a14:	900b883a 	mov	r5,r18
   29a18:	002a3d40 	call	2a3d4 <__umodsi3>
   29a1c:	8809883a 	mov	r4,r17
   29a20:	900b883a 	mov	r5,r18
   29a24:	d8800015 	stw	r2,0(sp)
   29a28:	002a3cc0 	call	2a3cc <__udivsi3>
   29a2c:	1009883a 	mov	r4,r2
   29a30:	b00b883a 	mov	r5,r22
   29a34:	1023883a 	mov	r17,r2
   29a38:	002a3dc0 	call	2a3dc <__mulsi3>
   29a3c:	d8c00017 	ldw	r3,0(sp)
   29a40:	823fffcc 	andi	r8,r16,65535
   29a44:	1806943a 	slli	r3,r3,16
   29a48:	1a20b03a 	or	r16,r3,r8
   29a4c:	8080042e 	bgeu	r16,r2,29a60 <__udivdi3+0x40c>
   29a50:	8721883a 	add	r16,r16,fp
   29a54:	88ffffc4 	addi	r3,r17,-1
   29a58:	87007c2e 	bgeu	r16,fp,29c4c <__udivdi3+0x5f8>
   29a5c:	1823883a 	mov	r17,r3
   29a60:	a028943a 	slli	r20,r20,16
   29a64:	acbfffcc 	andi	r18,r21,65535
   29a68:	900b883a 	mov	r5,r18
   29a6c:	8d28b03a 	or	r20,r17,r20
   29a70:	a022d43a 	srli	r17,r20,16
   29a74:	a5bfffcc 	andi	r22,r20,65535
   29a78:	b009883a 	mov	r4,r22
   29a7c:	a82ad43a 	srli	r21,r21,16
   29a80:	80a1c83a 	sub	r16,r16,r2
   29a84:	002a3dc0 	call	2a3dc <__mulsi3>
   29a88:	8809883a 	mov	r4,r17
   29a8c:	900b883a 	mov	r5,r18
   29a90:	1039883a 	mov	fp,r2
   29a94:	002a3dc0 	call	2a3dc <__mulsi3>
   29a98:	8809883a 	mov	r4,r17
   29a9c:	a80b883a 	mov	r5,r21
   29aa0:	1025883a 	mov	r18,r2
   29aa4:	002a3dc0 	call	2a3dc <__mulsi3>
   29aa8:	b009883a 	mov	r4,r22
   29aac:	a80b883a 	mov	r5,r21
   29ab0:	1023883a 	mov	r17,r2
   29ab4:	002a3dc0 	call	2a3dc <__mulsi3>
   29ab8:	e006d43a 	srli	r3,fp,16
   29abc:	9085883a 	add	r2,r18,r2
   29ac0:	10c7883a 	add	r3,r2,r3
   29ac4:	1c80022e 	bgeu	r3,r18,29ad0 <__udivdi3+0x47c>
   29ac8:	00800074 	movhi	r2,1
   29acc:	88a3883a 	add	r17,r17,r2
   29ad0:	1808d43a 	srli	r4,r3,16
   29ad4:	8909883a 	add	r4,r17,r4
   29ad8:	81004436 	bltu	r16,r4,29bec <__udivdi3+0x598>
   29adc:	81003e26 	beq	r16,r4,29bd8 <__udivdi3+0x584>
   29ae0:	a005883a 	mov	r2,r20
   29ae4:	0007883a 	mov	r3,zero
   29ae8:	003f8f06 	br	29928 <__alt_data_end+0xfffed408>
   29aec:	91e4983a 	sll	r18,r18,r7
   29af0:	80eed83a 	srl	r23,r16,r3
   29af4:	81cc983a 	sll	r6,r16,r7
   29af8:	9028d43a 	srli	r20,r18,16
   29afc:	98c6d83a 	srl	r3,r19,r3
   29b00:	b809883a 	mov	r4,r23
   29b04:	a00b883a 	mov	r5,r20
   29b08:	30ecb03a 	or	r22,r6,r3
   29b0c:	99e2983a 	sll	r17,r19,r7
   29b10:	002a3d40 	call	2a3d4 <__umodsi3>
   29b14:	b809883a 	mov	r4,r23
   29b18:	a00b883a 	mov	r5,r20
   29b1c:	1021883a 	mov	r16,r2
   29b20:	957fffcc 	andi	r21,r18,65535
   29b24:	002a3cc0 	call	2a3cc <__udivsi3>
   29b28:	a80b883a 	mov	r5,r21
   29b2c:	1009883a 	mov	r4,r2
   29b30:	102f883a 	mov	r23,r2
   29b34:	002a3dc0 	call	2a3dc <__mulsi3>
   29b38:	8020943a 	slli	r16,r16,16
   29b3c:	b00ad43a 	srli	r5,r22,16
   29b40:	814cb03a 	or	r6,r16,r5
   29b44:	3080062e 	bgeu	r6,r2,29b60 <__udivdi3+0x50c>
   29b48:	348d883a 	add	r6,r6,r18
   29b4c:	b8ffffc4 	addi	r3,r23,-1
   29b50:	34804836 	bltu	r6,r18,29c74 <__udivdi3+0x620>
   29b54:	3080472e 	bgeu	r6,r2,29c74 <__udivdi3+0x620>
   29b58:	bdffff84 	addi	r23,r23,-2
   29b5c:	348d883a 	add	r6,r6,r18
   29b60:	30a7c83a 	sub	r19,r6,r2
   29b64:	9809883a 	mov	r4,r19
   29b68:	a00b883a 	mov	r5,r20
   29b6c:	002a3d40 	call	2a3d4 <__umodsi3>
   29b70:	9809883a 	mov	r4,r19
   29b74:	a00b883a 	mov	r5,r20
   29b78:	1039883a 	mov	fp,r2
   29b7c:	002a3cc0 	call	2a3cc <__udivsi3>
   29b80:	1009883a 	mov	r4,r2
   29b84:	a80b883a 	mov	r5,r21
   29b88:	e038943a 	slli	fp,fp,16
   29b8c:	1027883a 	mov	r19,r2
   29b90:	002a3dc0 	call	2a3dc <__mulsi3>
   29b94:	b1bfffcc 	andi	r6,r22,65535
   29b98:	e18cb03a 	or	r6,fp,r6
   29b9c:	3080062e 	bgeu	r6,r2,29bb8 <__udivdi3+0x564>
   29ba0:	348d883a 	add	r6,r6,r18
   29ba4:	98ffffc4 	addi	r3,r19,-1
   29ba8:	34803036 	bltu	r6,r18,29c6c <__udivdi3+0x618>
   29bac:	30802f2e 	bgeu	r6,r2,29c6c <__udivdi3+0x618>
   29bb0:	9cffff84 	addi	r19,r19,-2
   29bb4:	348d883a 	add	r6,r6,r18
   29bb8:	b82e943a 	slli	r23,r23,16
   29bbc:	30a1c83a 	sub	r16,r6,r2
   29bc0:	9dc6b03a 	or	r3,r19,r23
   29bc4:	003f2606 	br	29860 <__alt_data_end+0xfffed340>
   29bc8:	2027883a 	mov	r19,r4
   29bcc:	003f5106 	br	29914 <__alt_data_end+0xfffed3f4>
   29bd0:	1827883a 	mov	r19,r3
   29bd4:	003ef006 	br	29798 <__alt_data_end+0xfffed278>
   29bd8:	1808943a 	slli	r4,r3,16
   29bdc:	9dc6983a 	sll	r3,r19,r23
   29be0:	e73fffcc 	andi	fp,fp,65535
   29be4:	2709883a 	add	r4,r4,fp
   29be8:	193fbd2e 	bgeu	r3,r4,29ae0 <__alt_data_end+0xfffed5c0>
   29bec:	a0bfffc4 	addi	r2,r20,-1
   29bf0:	0007883a 	mov	r3,zero
   29bf4:	003f4c06 	br	29928 <__alt_data_end+0xfffed408>
   29bf8:	01400404 	movi	r5,16
   29bfc:	2811883a 	mov	r8,r5
   29c00:	003ef106 	br	297c8 <__alt_data_end+0xfffed2a8>
   29c04:	000b883a 	mov	r5,zero
   29c08:	0011883a 	mov	r8,zero
   29c0c:	003eee06 	br	297c8 <__alt_data_end+0xfffed2a8>
   29c10:	00800404 	movi	r2,16
   29c14:	1007883a 	mov	r3,r2
   29c18:	003ea606 	br	296b4 <__alt_data_end+0xfffed194>
   29c1c:	00800404 	movi	r2,16
   29c20:	1007883a 	mov	r3,r2
   29c24:	003f0106 	br	2982c <__alt_data_end+0xfffed30c>
   29c28:	0005883a 	mov	r2,zero
   29c2c:	0007883a 	mov	r3,zero
   29c30:	003efe06 	br	2982c <__alt_data_end+0xfffed30c>
   29c34:	0005883a 	mov	r2,zero
   29c38:	0007883a 	mov	r3,zero
   29c3c:	003e9d06 	br	296b4 <__alt_data_end+0xfffed194>
   29c40:	0007883a 	mov	r3,zero
   29c44:	00800044 	movi	r2,1
   29c48:	003f3706 	br	29928 <__alt_data_end+0xfffed408>
   29c4c:	80bf832e 	bgeu	r16,r2,29a5c <__alt_data_end+0xfffed53c>
   29c50:	8c7fff84 	addi	r17,r17,-2
   29c54:	8721883a 	add	r16,r16,fp
   29c58:	003f8106 	br	29a60 <__alt_data_end+0xfffed540>
   29c5c:	48bf6a2e 	bgeu	r9,r2,29a08 <__alt_data_end+0xfffed4e8>
   29c60:	a53fff84 	addi	r20,r20,-2
   29c64:	4f13883a 	add	r9,r9,fp
   29c68:	003f6806 	br	29a0c <__alt_data_end+0xfffed4ec>
   29c6c:	1827883a 	mov	r19,r3
   29c70:	003fd106 	br	29bb8 <__alt_data_end+0xfffed698>
   29c74:	182f883a 	mov	r23,r3
   29c78:	003fb906 	br	29b60 <__alt_data_end+0xfffed640>
   29c7c:	843fff84 	addi	r16,r16,-2
   29c80:	348d883a 	add	r6,r6,r18
   29c84:	003f0c06 	br	298b8 <__alt_data_end+0xfffed398>
   29c88:	843fff84 	addi	r16,r16,-2
   29c8c:	1c87883a 	add	r3,r3,r18
   29c90:	003eac06 	br	29744 <__alt_data_end+0xfffed224>

00029c94 <__umoddi3>:
   29c94:	defff404 	addi	sp,sp,-48
   29c98:	dd800815 	stw	r22,32(sp)
   29c9c:	dc400315 	stw	r17,12(sp)
   29ca0:	dc000215 	stw	r16,8(sp)
   29ca4:	dfc00b15 	stw	ra,44(sp)
   29ca8:	df000a15 	stw	fp,40(sp)
   29cac:	ddc00915 	stw	r23,36(sp)
   29cb0:	dd400715 	stw	r21,28(sp)
   29cb4:	dd000615 	stw	r20,24(sp)
   29cb8:	dcc00515 	stw	r19,20(sp)
   29cbc:	dc800415 	stw	r18,16(sp)
   29cc0:	2021883a 	mov	r16,r4
   29cc4:	2823883a 	mov	r17,r5
   29cc8:	282d883a 	mov	r22,r5
   29ccc:	38003c1e 	bne	r7,zero,29dc0 <__umoddi3+0x12c>
   29cd0:	3027883a 	mov	r19,r6
   29cd4:	2029883a 	mov	r20,r4
   29cd8:	2980522e 	bgeu	r5,r6,29e24 <__umoddi3+0x190>
   29cdc:	00bfffd4 	movui	r2,65535
   29ce0:	1180a436 	bltu	r2,r6,29f74 <__umoddi3+0x2e0>
   29ce4:	00803fc4 	movi	r2,255
   29ce8:	11815e2e 	bgeu	r2,r6,2a264 <__umoddi3+0x5d0>
   29cec:	01400204 	movi	r5,8
   29cf0:	2805883a 	mov	r2,r5
   29cf4:	314ad83a 	srl	r5,r6,r5
   29cf8:	00c000f4 	movhi	r3,3
   29cfc:	18c03604 	addi	r3,r3,216
   29d00:	194b883a 	add	r5,r3,r5
   29d04:	29000003 	ldbu	r4,0(r5)
   29d08:	2089883a 	add	r4,r4,r2
   29d0c:	00800804 	movi	r2,32
   29d10:	1105c83a 	sub	r2,r2,r4
   29d14:	10010c26 	beq	r2,zero,2a148 <__umoddi3+0x4b4>
   29d18:	88a2983a 	sll	r17,r17,r2
   29d1c:	8108d83a 	srl	r4,r16,r4
   29d20:	30a6983a 	sll	r19,r6,r2
   29d24:	80a8983a 	sll	r20,r16,r2
   29d28:	1025883a 	mov	r18,r2
   29d2c:	892cb03a 	or	r22,r17,r4
   29d30:	9822d43a 	srli	r17,r19,16
   29d34:	b009883a 	mov	r4,r22
   29d38:	9d7fffcc 	andi	r21,r19,65535
   29d3c:	880b883a 	mov	r5,r17
   29d40:	002a3d40 	call	2a3d4 <__umodsi3>
   29d44:	b009883a 	mov	r4,r22
   29d48:	880b883a 	mov	r5,r17
   29d4c:	102f883a 	mov	r23,r2
   29d50:	002a3cc0 	call	2a3cc <__udivsi3>
   29d54:	1009883a 	mov	r4,r2
   29d58:	a80b883a 	mov	r5,r21
   29d5c:	002a3dc0 	call	2a3dc <__mulsi3>
   29d60:	b82e943a 	slli	r23,r23,16
   29d64:	a008d43a 	srli	r4,r20,16
   29d68:	b906b03a 	or	r3,r23,r4
   29d6c:	1880042e 	bgeu	r3,r2,29d80 <__umoddi3+0xec>
   29d70:	1cc7883a 	add	r3,r3,r19
   29d74:	1cc00236 	bltu	r3,r19,29d80 <__umoddi3+0xec>
   29d78:	1880012e 	bgeu	r3,r2,29d80 <__umoddi3+0xec>
   29d7c:	1cc7883a 	add	r3,r3,r19
   29d80:	18a1c83a 	sub	r16,r3,r2
   29d84:	8009883a 	mov	r4,r16
   29d88:	880b883a 	mov	r5,r17
   29d8c:	002a3d40 	call	2a3d4 <__umodsi3>
   29d90:	8009883a 	mov	r4,r16
   29d94:	880b883a 	mov	r5,r17
   29d98:	102d883a 	mov	r22,r2
   29d9c:	002a3cc0 	call	2a3cc <__udivsi3>
   29da0:	1009883a 	mov	r4,r2
   29da4:	a80b883a 	mov	r5,r21
   29da8:	b02c943a 	slli	r22,r22,16
   29dac:	002a3dc0 	call	2a3dc <__mulsi3>
   29db0:	a13fffcc 	andi	r4,r20,65535
   29db4:	b106b03a 	or	r3,r22,r4
   29db8:	1880572e 	bgeu	r3,r2,29f18 <__umoddi3+0x284>
   29dbc:	00005206 	br	29f08 <__umoddi3+0x274>
   29dc0:	29c05936 	bltu	r5,r7,29f28 <__umoddi3+0x294>
   29dc4:	00bfffd4 	movui	r2,65535
   29dc8:	11c0652e 	bgeu	r2,r7,29f60 <__umoddi3+0x2cc>
   29dcc:	00804034 	movhi	r2,256
   29dd0:	10bfffc4 	addi	r2,r2,-1
   29dd4:	11c1172e 	bgeu	r2,r7,2a234 <__umoddi3+0x5a0>
   29dd8:	01400604 	movi	r5,24
   29ddc:	282b883a 	mov	r21,r5
   29de0:	394ad83a 	srl	r5,r7,r5
   29de4:	00c000f4 	movhi	r3,3
   29de8:	18c03604 	addi	r3,r3,216
   29dec:	194b883a 	add	r5,r3,r5
   29df0:	28800003 	ldbu	r2,0(r5)
   29df4:	00c00804 	movi	r3,32
   29df8:	156b883a 	add	r21,r2,r21
   29dfc:	1d69c83a 	sub	r20,r3,r21
   29e00:	a000671e 	bne	r20,zero,29fa0 <__umoddi3+0x30c>
   29e04:	3c400136 	bltu	r7,r17,29e0c <__umoddi3+0x178>
   29e08:	81812336 	bltu	r16,r6,2a298 <__umoddi3+0x604>
   29e0c:	8185c83a 	sub	r2,r16,r6
   29e10:	89e3c83a 	sub	r17,r17,r7
   29e14:	8087803a 	cmpltu	r3,r16,r2
   29e18:	88edc83a 	sub	r22,r17,r3
   29e1c:	b007883a 	mov	r3,r22
   29e20:	00004306 	br	29f30 <__umoddi3+0x29c>
   29e24:	3000041e 	bne	r6,zero,29e38 <__umoddi3+0x1a4>
   29e28:	01000044 	movi	r4,1
   29e2c:	000b883a 	mov	r5,zero
   29e30:	002a3cc0 	call	2a3cc <__udivsi3>
   29e34:	1027883a 	mov	r19,r2
   29e38:	00bfffd4 	movui	r2,65535
   29e3c:	14c0532e 	bgeu	r2,r19,29f8c <__umoddi3+0x2f8>
   29e40:	00804034 	movhi	r2,256
   29e44:	10bfffc4 	addi	r2,r2,-1
   29e48:	14c1032e 	bgeu	r2,r19,2a258 <__umoddi3+0x5c4>
   29e4c:	00800604 	movi	r2,24
   29e50:	1007883a 	mov	r3,r2
   29e54:	9884d83a 	srl	r2,r19,r2
   29e58:	010000f4 	movhi	r4,3
   29e5c:	21003604 	addi	r4,r4,216
   29e60:	2085883a 	add	r2,r4,r2
   29e64:	11000003 	ldbu	r4,0(r2)
   29e68:	00800804 	movi	r2,32
   29e6c:	20c7883a 	add	r3,r4,r3
   29e70:	10c5c83a 	sub	r2,r2,r3
   29e74:	1000b61e 	bne	r2,zero,2a150 <__umoddi3+0x4bc>
   29e78:	982ad43a 	srli	r21,r19,16
   29e7c:	8ce3c83a 	sub	r17,r17,r19
   29e80:	9dbfffcc 	andi	r22,r19,65535
   29e84:	0025883a 	mov	r18,zero
   29e88:	8809883a 	mov	r4,r17
   29e8c:	a80b883a 	mov	r5,r21
   29e90:	002a3d40 	call	2a3d4 <__umodsi3>
   29e94:	8809883a 	mov	r4,r17
   29e98:	a80b883a 	mov	r5,r21
   29e9c:	102f883a 	mov	r23,r2
   29ea0:	002a3cc0 	call	2a3cc <__udivsi3>
   29ea4:	1009883a 	mov	r4,r2
   29ea8:	b00b883a 	mov	r5,r22
   29eac:	002a3dc0 	call	2a3dc <__mulsi3>
   29eb0:	b82e943a 	slli	r23,r23,16
   29eb4:	a008d43a 	srli	r4,r20,16
   29eb8:	b906b03a 	or	r3,r23,r4
   29ebc:	1880032e 	bgeu	r3,r2,29ecc <__umoddi3+0x238>
   29ec0:	1cc7883a 	add	r3,r3,r19
   29ec4:	1cc00136 	bltu	r3,r19,29ecc <__umoddi3+0x238>
   29ec8:	1880f136 	bltu	r3,r2,2a290 <__umoddi3+0x5fc>
   29ecc:	18a1c83a 	sub	r16,r3,r2
   29ed0:	8009883a 	mov	r4,r16
   29ed4:	a80b883a 	mov	r5,r21
   29ed8:	002a3d40 	call	2a3d4 <__umodsi3>
   29edc:	8009883a 	mov	r4,r16
   29ee0:	a80b883a 	mov	r5,r21
   29ee4:	1023883a 	mov	r17,r2
   29ee8:	002a3cc0 	call	2a3cc <__udivsi3>
   29eec:	1009883a 	mov	r4,r2
   29ef0:	b00b883a 	mov	r5,r22
   29ef4:	8822943a 	slli	r17,r17,16
   29ef8:	002a3dc0 	call	2a3dc <__mulsi3>
   29efc:	a13fffcc 	andi	r4,r20,65535
   29f00:	8906b03a 	or	r3,r17,r4
   29f04:	1880042e 	bgeu	r3,r2,29f18 <__umoddi3+0x284>
   29f08:	1cc7883a 	add	r3,r3,r19
   29f0c:	1cc00236 	bltu	r3,r19,29f18 <__umoddi3+0x284>
   29f10:	1880012e 	bgeu	r3,r2,29f18 <__umoddi3+0x284>
   29f14:	1cc7883a 	add	r3,r3,r19
   29f18:	1887c83a 	sub	r3,r3,r2
   29f1c:	1c84d83a 	srl	r2,r3,r18
   29f20:	0007883a 	mov	r3,zero
   29f24:	00000206 	br	29f30 <__umoddi3+0x29c>
   29f28:	2005883a 	mov	r2,r4
   29f2c:	2807883a 	mov	r3,r5
   29f30:	dfc00b17 	ldw	ra,44(sp)
   29f34:	df000a17 	ldw	fp,40(sp)
   29f38:	ddc00917 	ldw	r23,36(sp)
   29f3c:	dd800817 	ldw	r22,32(sp)
   29f40:	dd400717 	ldw	r21,28(sp)
   29f44:	dd000617 	ldw	r20,24(sp)
   29f48:	dcc00517 	ldw	r19,20(sp)
   29f4c:	dc800417 	ldw	r18,16(sp)
   29f50:	dc400317 	ldw	r17,12(sp)
   29f54:	dc000217 	ldw	r16,8(sp)
   29f58:	dec00c04 	addi	sp,sp,48
   29f5c:	f800283a 	ret
   29f60:	00803fc4 	movi	r2,255
   29f64:	11c0b02e 	bgeu	r2,r7,2a228 <__umoddi3+0x594>
   29f68:	01400204 	movi	r5,8
   29f6c:	282b883a 	mov	r21,r5
   29f70:	003f9b06 	br	29de0 <__alt_data_end+0xfffed8c0>
   29f74:	00804034 	movhi	r2,256
   29f78:	10bfffc4 	addi	r2,r2,-1
   29f7c:	1180b02e 	bgeu	r2,r6,2a240 <__umoddi3+0x5ac>
   29f80:	01400604 	movi	r5,24
   29f84:	2805883a 	mov	r2,r5
   29f88:	003f5a06 	br	29cf4 <__alt_data_end+0xfffed7d4>
   29f8c:	00803fc4 	movi	r2,255
   29f90:	14c0ae2e 	bgeu	r2,r19,2a24c <__umoddi3+0x5b8>
   29f94:	00800204 	movi	r2,8
   29f98:	1007883a 	mov	r3,r2
   29f9c:	003fad06 	br	29e54 <__alt_data_end+0xfffed934>
   29fa0:	3d0a983a 	sll	r5,r7,r20
   29fa4:	356cd83a 	srl	r22,r6,r21
   29fa8:	8d78d83a 	srl	fp,r17,r21
   29fac:	8d10983a 	sll	r8,r17,r20
   29fb0:	2dacb03a 	or	r22,r5,r22
   29fb4:	b02ed43a 	srli	r23,r22,16
   29fb8:	8564d83a 	srl	r18,r16,r21
   29fbc:	e009883a 	mov	r4,fp
   29fc0:	b80b883a 	mov	r5,r23
   29fc4:	44a4b03a 	or	r18,r8,r18
   29fc8:	3526983a 	sll	r19,r6,r20
   29fcc:	002a3d40 	call	2a3d4 <__umodsi3>
   29fd0:	e009883a 	mov	r4,fp
   29fd4:	b80b883a 	mov	r5,r23
   29fd8:	b47fffcc 	andi	r17,r22,65535
   29fdc:	d8800015 	stw	r2,0(sp)
   29fe0:	002a3cc0 	call	2a3cc <__udivsi3>
   29fe4:	1009883a 	mov	r4,r2
   29fe8:	880b883a 	mov	r5,r17
   29fec:	1039883a 	mov	fp,r2
   29ff0:	002a3dc0 	call	2a3dc <__mulsi3>
   29ff4:	d9800017 	ldw	r6,0(sp)
   29ff8:	9008d43a 	srli	r4,r18,16
   29ffc:	8520983a 	sll	r16,r16,r20
   2a000:	300c943a 	slli	r6,r6,16
   2a004:	3106b03a 	or	r3,r6,r4
   2a008:	1880042e 	bgeu	r3,r2,2a01c <__umoddi3+0x388>
   2a00c:	1d87883a 	add	r3,r3,r22
   2a010:	e13fffc4 	addi	r4,fp,-1
   2a014:	1d809a2e 	bgeu	r3,r22,2a280 <__umoddi3+0x5ec>
   2a018:	2039883a 	mov	fp,r4
   2a01c:	1887c83a 	sub	r3,r3,r2
   2a020:	1809883a 	mov	r4,r3
   2a024:	b80b883a 	mov	r5,r23
   2a028:	d8c00115 	stw	r3,4(sp)
   2a02c:	002a3d40 	call	2a3d4 <__umodsi3>
   2a030:	d8c00117 	ldw	r3,4(sp)
   2a034:	b80b883a 	mov	r5,r23
   2a038:	d8800015 	stw	r2,0(sp)
   2a03c:	1809883a 	mov	r4,r3
   2a040:	002a3cc0 	call	2a3cc <__udivsi3>
   2a044:	880b883a 	mov	r5,r17
   2a048:	1009883a 	mov	r4,r2
   2a04c:	102f883a 	mov	r23,r2
   2a050:	002a3dc0 	call	2a3dc <__mulsi3>
   2a054:	d9800017 	ldw	r6,0(sp)
   2a058:	947fffcc 	andi	r17,r18,65535
   2a05c:	300c943a 	slli	r6,r6,16
   2a060:	3464b03a 	or	r18,r6,r17
   2a064:	9080042e 	bgeu	r18,r2,2a078 <__umoddi3+0x3e4>
   2a068:	95a5883a 	add	r18,r18,r22
   2a06c:	b8ffffc4 	addi	r3,r23,-1
   2a070:	95807f2e 	bgeu	r18,r22,2a270 <__umoddi3+0x5dc>
   2a074:	182f883a 	mov	r23,r3
   2a078:	e038943a 	slli	fp,fp,16
   2a07c:	980cd43a 	srli	r6,r19,16
   2a080:	98ffffcc 	andi	r3,r19,65535
   2a084:	bf38b03a 	or	fp,r23,fp
   2a088:	e02ed43a 	srli	r23,fp,16
   2a08c:	e73fffcc 	andi	fp,fp,65535
   2a090:	180b883a 	mov	r5,r3
   2a094:	e009883a 	mov	r4,fp
   2a098:	d9800015 	stw	r6,0(sp)
   2a09c:	d8c00115 	stw	r3,4(sp)
   2a0a0:	90a5c83a 	sub	r18,r18,r2
   2a0a4:	002a3dc0 	call	2a3dc <__mulsi3>
   2a0a8:	d8c00117 	ldw	r3,4(sp)
   2a0ac:	b809883a 	mov	r4,r23
   2a0b0:	1023883a 	mov	r17,r2
   2a0b4:	180b883a 	mov	r5,r3
   2a0b8:	002a3dc0 	call	2a3dc <__mulsi3>
   2a0bc:	d9800017 	ldw	r6,0(sp)
   2a0c0:	b809883a 	mov	r4,r23
   2a0c4:	d8800115 	stw	r2,4(sp)
   2a0c8:	300b883a 	mov	r5,r6
   2a0cc:	302f883a 	mov	r23,r6
   2a0d0:	002a3dc0 	call	2a3dc <__mulsi3>
   2a0d4:	e009883a 	mov	r4,fp
   2a0d8:	b80b883a 	mov	r5,r23
   2a0dc:	d8800015 	stw	r2,0(sp)
   2a0e0:	002a3dc0 	call	2a3dc <__mulsi3>
   2a0e4:	d8c00117 	ldw	r3,4(sp)
   2a0e8:	880cd43a 	srli	r6,r17,16
   2a0ec:	d9c00017 	ldw	r7,0(sp)
   2a0f0:	1885883a 	add	r2,r3,r2
   2a0f4:	118d883a 	add	r6,r2,r6
   2a0f8:	30c0022e 	bgeu	r6,r3,2a104 <__umoddi3+0x470>
   2a0fc:	00800074 	movhi	r2,1
   2a100:	388f883a 	add	r7,r7,r2
   2a104:	3006d43a 	srli	r3,r6,16
   2a108:	300c943a 	slli	r6,r6,16
   2a10c:	8c7fffcc 	andi	r17,r17,65535
   2a110:	38c7883a 	add	r3,r7,r3
   2a114:	3463883a 	add	r17,r6,r17
   2a118:	90c03d36 	bltu	r18,r3,2a210 <__umoddi3+0x57c>
   2a11c:	90c06026 	beq	r18,r3,2a2a0 <__umoddi3+0x60c>
   2a120:	90c9c83a 	sub	r4,r18,r3
   2a124:	880f883a 	mov	r7,r17
   2a128:	81cfc83a 	sub	r7,r16,r7
   2a12c:	81c7803a 	cmpltu	r3,r16,r7
   2a130:	20c7c83a 	sub	r3,r4,r3
   2a134:	1d44983a 	sll	r2,r3,r21
   2a138:	3d0ed83a 	srl	r7,r7,r20
   2a13c:	1d06d83a 	srl	r3,r3,r20
   2a140:	11c4b03a 	or	r2,r2,r7
   2a144:	003f7a06 	br	29f30 <__alt_data_end+0xfffeda10>
   2a148:	0025883a 	mov	r18,zero
   2a14c:	003ef806 	br	29d30 <__alt_data_end+0xfffed810>
   2a150:	98a6983a 	sll	r19,r19,r2
   2a154:	88e8d83a 	srl	r20,r17,r3
   2a158:	80c6d83a 	srl	r3,r16,r3
   2a15c:	982ad43a 	srli	r21,r19,16
   2a160:	88a2983a 	sll	r17,r17,r2
   2a164:	a009883a 	mov	r4,r20
   2a168:	a80b883a 	mov	r5,r21
   2a16c:	88eeb03a 	or	r23,r17,r3
   2a170:	1025883a 	mov	r18,r2
   2a174:	002a3d40 	call	2a3d4 <__umodsi3>
   2a178:	a009883a 	mov	r4,r20
   2a17c:	a80b883a 	mov	r5,r21
   2a180:	1023883a 	mov	r17,r2
   2a184:	9dbfffcc 	andi	r22,r19,65535
   2a188:	002a3cc0 	call	2a3cc <__udivsi3>
   2a18c:	1009883a 	mov	r4,r2
   2a190:	b00b883a 	mov	r5,r22
   2a194:	002a3dc0 	call	2a3dc <__mulsi3>
   2a198:	8822943a 	slli	r17,r17,16
   2a19c:	b808d43a 	srli	r4,r23,16
   2a1a0:	84a8983a 	sll	r20,r16,r18
   2a1a4:	8906b03a 	or	r3,r17,r4
   2a1a8:	1880042e 	bgeu	r3,r2,2a1bc <__umoddi3+0x528>
   2a1ac:	1cc7883a 	add	r3,r3,r19
   2a1b0:	1cc00236 	bltu	r3,r19,2a1bc <__umoddi3+0x528>
   2a1b4:	1880012e 	bgeu	r3,r2,2a1bc <__umoddi3+0x528>
   2a1b8:	1cc7883a 	add	r3,r3,r19
   2a1bc:	18a1c83a 	sub	r16,r3,r2
   2a1c0:	8009883a 	mov	r4,r16
   2a1c4:	a80b883a 	mov	r5,r21
   2a1c8:	002a3d40 	call	2a3d4 <__umodsi3>
   2a1cc:	8009883a 	mov	r4,r16
   2a1d0:	a80b883a 	mov	r5,r21
   2a1d4:	1039883a 	mov	fp,r2
   2a1d8:	002a3cc0 	call	2a3cc <__udivsi3>
   2a1dc:	1009883a 	mov	r4,r2
   2a1e0:	b00b883a 	mov	r5,r22
   2a1e4:	002a3dc0 	call	2a3dc <__mulsi3>
   2a1e8:	e006943a 	slli	r3,fp,16
   2a1ec:	b93fffcc 	andi	r4,r23,65535
   2a1f0:	1906b03a 	or	r3,r3,r4
   2a1f4:	1880042e 	bgeu	r3,r2,2a208 <__umoddi3+0x574>
   2a1f8:	1cc7883a 	add	r3,r3,r19
   2a1fc:	1cc00236 	bltu	r3,r19,2a208 <__umoddi3+0x574>
   2a200:	1880012e 	bgeu	r3,r2,2a208 <__umoddi3+0x574>
   2a204:	1cc7883a 	add	r3,r3,r19
   2a208:	18a3c83a 	sub	r17,r3,r2
   2a20c:	003f1e06 	br	29e88 <__alt_data_end+0xfffed968>
   2a210:	8ccfc83a 	sub	r7,r17,r19
   2a214:	1d89c83a 	sub	r4,r3,r22
   2a218:	89e3803a 	cmpltu	r17,r17,r7
   2a21c:	2463c83a 	sub	r17,r4,r17
   2a220:	9449c83a 	sub	r4,r18,r17
   2a224:	003fc006 	br	2a128 <__alt_data_end+0xfffedc08>
   2a228:	000b883a 	mov	r5,zero
   2a22c:	002b883a 	mov	r21,zero
   2a230:	003eeb06 	br	29de0 <__alt_data_end+0xfffed8c0>
   2a234:	01400404 	movi	r5,16
   2a238:	282b883a 	mov	r21,r5
   2a23c:	003ee806 	br	29de0 <__alt_data_end+0xfffed8c0>
   2a240:	01400404 	movi	r5,16
   2a244:	2805883a 	mov	r2,r5
   2a248:	003eaa06 	br	29cf4 <__alt_data_end+0xfffed7d4>
   2a24c:	0005883a 	mov	r2,zero
   2a250:	0007883a 	mov	r3,zero
   2a254:	003eff06 	br	29e54 <__alt_data_end+0xfffed934>
   2a258:	00800404 	movi	r2,16
   2a25c:	1007883a 	mov	r3,r2
   2a260:	003efc06 	br	29e54 <__alt_data_end+0xfffed934>
   2a264:	000b883a 	mov	r5,zero
   2a268:	0005883a 	mov	r2,zero
   2a26c:	003ea106 	br	29cf4 <__alt_data_end+0xfffed7d4>
   2a270:	90bf802e 	bgeu	r18,r2,2a074 <__alt_data_end+0xfffedb54>
   2a274:	bdffff84 	addi	r23,r23,-2
   2a278:	95a5883a 	add	r18,r18,r22
   2a27c:	003f7e06 	br	2a078 <__alt_data_end+0xfffedb58>
   2a280:	18bf652e 	bgeu	r3,r2,2a018 <__alt_data_end+0xfffedaf8>
   2a284:	e73fff84 	addi	fp,fp,-2
   2a288:	1d87883a 	add	r3,r3,r22
   2a28c:	003f6306 	br	2a01c <__alt_data_end+0xfffedafc>
   2a290:	1cc7883a 	add	r3,r3,r19
   2a294:	003f0d06 	br	29ecc <__alt_data_end+0xfffed9ac>
   2a298:	8005883a 	mov	r2,r16
   2a29c:	003edf06 	br	29e1c <__alt_data_end+0xfffed8fc>
   2a2a0:	847fdb36 	bltu	r16,r17,2a210 <__alt_data_end+0xfffedcf0>
   2a2a4:	880f883a 	mov	r7,r17
   2a2a8:	0009883a 	mov	r4,zero
   2a2ac:	003f9e06 	br	2a128 <__alt_data_end+0xfffedc08>

0002a2b0 <udivmodsi4>:
   2a2b0:	2900182e 	bgeu	r5,r4,2a314 <udivmodsi4+0x64>
   2a2b4:	28001716 	blt	r5,zero,2a314 <udivmodsi4+0x64>
   2a2b8:	00800804 	movi	r2,32
   2a2bc:	00c00044 	movi	r3,1
   2a2c0:	00000206 	br	2a2cc <udivmodsi4+0x1c>
   2a2c4:	10001126 	beq	r2,zero,2a30c <udivmodsi4+0x5c>
   2a2c8:	28000516 	blt	r5,zero,2a2e0 <udivmodsi4+0x30>
   2a2cc:	294b883a 	add	r5,r5,r5
   2a2d0:	10bfffc4 	addi	r2,r2,-1
   2a2d4:	18c7883a 	add	r3,r3,r3
   2a2d8:	293ffa36 	bltu	r5,r4,2a2c4 <__alt_data_end+0xfffedda4>
   2a2dc:	18000b26 	beq	r3,zero,2a30c <udivmodsi4+0x5c>
   2a2e0:	0005883a 	mov	r2,zero
   2a2e4:	21400236 	bltu	r4,r5,2a2f0 <udivmodsi4+0x40>
   2a2e8:	2149c83a 	sub	r4,r4,r5
   2a2ec:	10c4b03a 	or	r2,r2,r3
   2a2f0:	1806d07a 	srli	r3,r3,1
   2a2f4:	280ad07a 	srli	r5,r5,1
   2a2f8:	183ffa1e 	bne	r3,zero,2a2e4 <__alt_data_end+0xfffeddc4>
   2a2fc:	3000011e 	bne	r6,zero,2a304 <udivmodsi4+0x54>
   2a300:	f800283a 	ret
   2a304:	2005883a 	mov	r2,r4
   2a308:	f800283a 	ret
   2a30c:	0005883a 	mov	r2,zero
   2a310:	003ffa06 	br	2a2fc <__alt_data_end+0xfffedddc>
   2a314:	00c00044 	movi	r3,1
   2a318:	003ff106 	br	2a2e0 <__alt_data_end+0xfffeddc0>

0002a31c <__divsi3>:
   2a31c:	defffe04 	addi	sp,sp,-8
   2a320:	dfc00115 	stw	ra,4(sp)
   2a324:	dc000015 	stw	r16,0(sp)
   2a328:	20000b16 	blt	r4,zero,2a358 <__divsi3+0x3c>
   2a32c:	0021883a 	mov	r16,zero
   2a330:	28000c16 	blt	r5,zero,2a364 <__divsi3+0x48>
   2a334:	000d883a 	mov	r6,zero
   2a338:	002a2b00 	call	2a2b0 <udivmodsi4>
   2a33c:	0407c83a 	sub	r3,zero,r16
   2a340:	1884f03a 	xor	r2,r3,r2
   2a344:	1405883a 	add	r2,r2,r16
   2a348:	dfc00117 	ldw	ra,4(sp)
   2a34c:	dc000017 	ldw	r16,0(sp)
   2a350:	dec00204 	addi	sp,sp,8
   2a354:	f800283a 	ret
   2a358:	0109c83a 	sub	r4,zero,r4
   2a35c:	04000044 	movi	r16,1
   2a360:	283ff40e 	bge	r5,zero,2a334 <__alt_data_end+0xfffede14>
   2a364:	014bc83a 	sub	r5,zero,r5
   2a368:	8400005c 	xori	r16,r16,1
   2a36c:	003ff106 	br	2a334 <__alt_data_end+0xfffede14>

0002a370 <__modsi3>:
   2a370:	defffd04 	addi	sp,sp,-12
   2a374:	dfc00215 	stw	ra,8(sp)
   2a378:	dc400115 	stw	r17,4(sp)
   2a37c:	dc000015 	stw	r16,0(sp)
   2a380:	20000c16 	blt	r4,zero,2a3b4 <__modsi3+0x44>
   2a384:	0023883a 	mov	r17,zero
   2a388:	0021883a 	mov	r16,zero
   2a38c:	28000d16 	blt	r5,zero,2a3c4 <__modsi3+0x54>
   2a390:	01800044 	movi	r6,1
   2a394:	002a2b00 	call	2a2b0 <udivmodsi4>
   2a398:	1404f03a 	xor	r2,r2,r16
   2a39c:	8885883a 	add	r2,r17,r2
   2a3a0:	dfc00217 	ldw	ra,8(sp)
   2a3a4:	dc400117 	ldw	r17,4(sp)
   2a3a8:	dc000017 	ldw	r16,0(sp)
   2a3ac:	dec00304 	addi	sp,sp,12
   2a3b0:	f800283a 	ret
   2a3b4:	0109c83a 	sub	r4,zero,r4
   2a3b8:	04400044 	movi	r17,1
   2a3bc:	043fffc4 	movi	r16,-1
   2a3c0:	283ff30e 	bge	r5,zero,2a390 <__alt_data_end+0xfffede70>
   2a3c4:	014bc83a 	sub	r5,zero,r5
   2a3c8:	003ff106 	br	2a390 <__alt_data_end+0xfffede70>

0002a3cc <__udivsi3>:
   2a3cc:	000d883a 	mov	r6,zero
   2a3d0:	002a2b01 	jmpi	2a2b0 <udivmodsi4>

0002a3d4 <__umodsi3>:
   2a3d4:	01800044 	movi	r6,1
   2a3d8:	002a2b01 	jmpi	2a2b0 <udivmodsi4>

0002a3dc <__mulsi3>:
   2a3dc:	0005883a 	mov	r2,zero
   2a3e0:	20000726 	beq	r4,zero,2a400 <__mulsi3+0x24>
   2a3e4:	20c0004c 	andi	r3,r4,1
   2a3e8:	2008d07a 	srli	r4,r4,1
   2a3ec:	18000126 	beq	r3,zero,2a3f4 <__mulsi3+0x18>
   2a3f0:	1145883a 	add	r2,r2,r5
   2a3f4:	294b883a 	add	r5,r5,r5
   2a3f8:	203ffa1e 	bne	r4,zero,2a3e4 <__alt_data_end+0xfffedec4>
   2a3fc:	f800283a 	ret
   2a400:	f800283a 	ret

0002a404 <__adddf3>:
   2a404:	02000434 	movhi	r8,16
   2a408:	423fffc4 	addi	r8,r8,-1
   2a40c:	defffb04 	addi	sp,sp,-20
   2a410:	2a12703a 	and	r9,r5,r8
   2a414:	2806d7fa 	srli	r3,r5,31
   2a418:	3a10703a 	and	r8,r7,r8
   2a41c:	3804d53a 	srli	r2,r7,20
   2a420:	3014d77a 	srli	r10,r6,29
   2a424:	dc000015 	stw	r16,0(sp)
   2a428:	481290fa 	slli	r9,r9,3
   2a42c:	2820d53a 	srli	r16,r5,20
   2a430:	401090fa 	slli	r8,r8,3
   2a434:	200ad77a 	srli	r5,r4,29
   2a438:	380ed7fa 	srli	r7,r7,31
   2a43c:	dc800215 	stw	r18,8(sp)
   2a440:	dc400115 	stw	r17,4(sp)
   2a444:	dfc00415 	stw	ra,16(sp)
   2a448:	dcc00315 	stw	r19,12(sp)
   2a44c:	1c803fcc 	andi	r18,r3,255
   2a450:	8401ffcc 	andi	r16,r16,2047
   2a454:	494ab03a 	or	r5,r9,r5
   2a458:	202290fa 	slli	r17,r4,3
   2a45c:	1081ffcc 	andi	r2,r2,2047
   2a460:	4290b03a 	or	r8,r8,r10
   2a464:	300c90fa 	slli	r6,r6,3
   2a468:	91c07026 	beq	r18,r7,2a62c <__adddf3+0x228>
   2a46c:	8087c83a 	sub	r3,r16,r2
   2a470:	00c0b30e 	bge	zero,r3,2a740 <__adddf3+0x33c>
   2a474:	10002a1e 	bne	r2,zero,2a520 <__adddf3+0x11c>
   2a478:	4184b03a 	or	r2,r8,r6
   2a47c:	1000991e 	bne	r2,zero,2a6e4 <__adddf3+0x2e0>
   2a480:	888001cc 	andi	r2,r17,7
   2a484:	10005b26 	beq	r2,zero,2a5f4 <__adddf3+0x1f0>
   2a488:	88c003cc 	andi	r3,r17,15
   2a48c:	00800104 	movi	r2,4
   2a490:	18805826 	beq	r3,r2,2a5f4 <__adddf3+0x1f0>
   2a494:	89800104 	addi	r6,r17,4
   2a498:	3463803a 	cmpltu	r17,r6,r17
   2a49c:	2c4b883a 	add	r5,r5,r17
   2a4a0:	2880202c 	andhi	r2,r5,128
   2a4a4:	9007883a 	mov	r3,r18
   2a4a8:	3023883a 	mov	r17,r6
   2a4ac:	10005426 	beq	r2,zero,2a600 <__adddf3+0x1fc>
   2a4b0:	84000044 	addi	r16,r16,1
   2a4b4:	0081ffc4 	movi	r2,2047
   2a4b8:	8080c126 	beq	r16,r2,2a7c0 <__adddf3+0x3bc>
   2a4bc:	013fe034 	movhi	r4,65408
   2a4c0:	213fffc4 	addi	r4,r4,-1
   2a4c4:	290a703a 	and	r5,r5,r4
   2a4c8:	2804977a 	slli	r2,r5,29
   2a4cc:	280a927a 	slli	r5,r5,9
   2a4d0:	8822d0fa 	srli	r17,r17,3
   2a4d4:	8401ffcc 	andi	r16,r16,2047
   2a4d8:	2808d33a 	srli	r4,r5,12
   2a4dc:	1444b03a 	or	r2,r2,r17
   2a4e0:	8401ffcc 	andi	r16,r16,2047
   2a4e4:	800a953a 	slli	r5,r16,20
   2a4e8:	18c03fcc 	andi	r3,r3,255
   2a4ec:	04000434 	movhi	r16,16
   2a4f0:	180697fa 	slli	r3,r3,31
   2a4f4:	843fffc4 	addi	r16,r16,-1
   2a4f8:	2420703a 	and	r16,r4,r16
   2a4fc:	8160b03a 	or	r16,r16,r5
   2a500:	80c6b03a 	or	r3,r16,r3
   2a504:	dfc00417 	ldw	ra,16(sp)
   2a508:	dcc00317 	ldw	r19,12(sp)
   2a50c:	dc800217 	ldw	r18,8(sp)
   2a510:	dc400117 	ldw	r17,4(sp)
   2a514:	dc000017 	ldw	r16,0(sp)
   2a518:	dec00504 	addi	sp,sp,20
   2a51c:	f800283a 	ret
   2a520:	0081ffc4 	movi	r2,2047
   2a524:	80bfd626 	beq	r16,r2,2a480 <__alt_data_end+0xfffedf60>
   2a528:	42002034 	orhi	r8,r8,128
   2a52c:	00800e04 	movi	r2,56
   2a530:	10c0a616 	blt	r2,r3,2a7cc <__adddf3+0x3c8>
   2a534:	008007c4 	movi	r2,31
   2a538:	10c0c916 	blt	r2,r3,2a860 <__adddf3+0x45c>
   2a53c:	00800804 	movi	r2,32
   2a540:	10c5c83a 	sub	r2,r2,r3
   2a544:	408e983a 	sll	r7,r8,r2
   2a548:	30c8d83a 	srl	r4,r6,r3
   2a54c:	3084983a 	sll	r2,r6,r2
   2a550:	40c6d83a 	srl	r3,r8,r3
   2a554:	390cb03a 	or	r6,r7,r4
   2a558:	1004c03a 	cmpne	r2,r2,zero
   2a55c:	308cb03a 	or	r6,r6,r2
   2a560:	898dc83a 	sub	r6,r17,r6
   2a564:	89a3803a 	cmpltu	r17,r17,r6
   2a568:	28cbc83a 	sub	r5,r5,r3
   2a56c:	2c4bc83a 	sub	r5,r5,r17
   2a570:	3023883a 	mov	r17,r6
   2a574:	2880202c 	andhi	r2,r5,128
   2a578:	10006d26 	beq	r2,zero,2a730 <__adddf3+0x32c>
   2a57c:	04c02034 	movhi	r19,128
   2a580:	9cffffc4 	addi	r19,r19,-1
   2a584:	2ce6703a 	and	r19,r5,r19
   2a588:	98007e26 	beq	r19,zero,2a784 <__adddf3+0x380>
   2a58c:	9809883a 	mov	r4,r19
   2a590:	002cb9c0 	call	2cb9c <__clzsi2>
   2a594:	10fffe04 	addi	r3,r2,-8
   2a598:	010007c4 	movi	r4,31
   2a59c:	20c07f16 	blt	r4,r3,2a79c <__adddf3+0x398>
   2a5a0:	01400a04 	movi	r5,40
   2a5a4:	2885c83a 	sub	r2,r5,r2
   2a5a8:	888ad83a 	srl	r5,r17,r2
   2a5ac:	98e6983a 	sll	r19,r19,r3
   2a5b0:	88e2983a 	sll	r17,r17,r3
   2a5b4:	2ce6b03a 	or	r19,r5,r19
   2a5b8:	1c007c16 	blt	r3,r16,2a7ac <__adddf3+0x3a8>
   2a5bc:	1c21c83a 	sub	r16,r3,r16
   2a5c0:	81400044 	addi	r5,r16,1
   2a5c4:	00c007c4 	movi	r3,31
   2a5c8:	19409816 	blt	r3,r5,2a82c <__adddf3+0x428>
   2a5cc:	1c21c83a 	sub	r16,r3,r16
   2a5d0:	8c08983a 	sll	r4,r17,r16
   2a5d4:	8946d83a 	srl	r3,r17,r5
   2a5d8:	9c20983a 	sll	r16,r19,r16
   2a5dc:	2008c03a 	cmpne	r4,r4,zero
   2a5e0:	994ad83a 	srl	r5,r19,r5
   2a5e4:	1c06b03a 	or	r3,r3,r16
   2a5e8:	1922b03a 	or	r17,r3,r4
   2a5ec:	0021883a 	mov	r16,zero
   2a5f0:	003fa306 	br	2a480 <__alt_data_end+0xfffedf60>
   2a5f4:	2880202c 	andhi	r2,r5,128
   2a5f8:	9007883a 	mov	r3,r18
   2a5fc:	103fac1e 	bne	r2,zero,2a4b0 <__alt_data_end+0xfffedf90>
   2a600:	2804977a 	slli	r2,r5,29
   2a604:	8822d0fa 	srli	r17,r17,3
   2a608:	0101ffc4 	movi	r4,2047
   2a60c:	280ad0fa 	srli	r5,r5,3
   2a610:	1444b03a 	or	r2,r2,r17
   2a614:	81002c26 	beq	r16,r4,2a6c8 <__adddf3+0x2c4>
   2a618:	8120703a 	and	r16,r16,r4
   2a61c:	01000434 	movhi	r4,16
   2a620:	213fffc4 	addi	r4,r4,-1
   2a624:	2908703a 	and	r4,r5,r4
   2a628:	003fad06 	br	2a4e0 <__alt_data_end+0xfffedfc0>
   2a62c:	8089c83a 	sub	r4,r16,r2
   2a630:	01006a0e 	bge	zero,r4,2a7dc <__adddf3+0x3d8>
   2a634:	10003326 	beq	r2,zero,2a704 <__adddf3+0x300>
   2a638:	0081ffc4 	movi	r2,2047
   2a63c:	80bf9026 	beq	r16,r2,2a480 <__alt_data_end+0xfffedf60>
   2a640:	42002034 	orhi	r8,r8,128
   2a644:	00800e04 	movi	r2,56
   2a648:	1100b116 	blt	r2,r4,2a910 <__adddf3+0x50c>
   2a64c:	008007c4 	movi	r2,31
   2a650:	1100e216 	blt	r2,r4,2a9dc <__adddf3+0x5d8>
   2a654:	00800804 	movi	r2,32
   2a658:	1105c83a 	sub	r2,r2,r4
   2a65c:	4092983a 	sll	r9,r8,r2
   2a660:	310ed83a 	srl	r7,r6,r4
   2a664:	3084983a 	sll	r2,r6,r2
   2a668:	4110d83a 	srl	r8,r8,r4
   2a66c:	49ccb03a 	or	r6,r9,r7
   2a670:	1004c03a 	cmpne	r2,r2,zero
   2a674:	308cb03a 	or	r6,r6,r2
   2a678:	344d883a 	add	r6,r6,r17
   2a67c:	3463803a 	cmpltu	r17,r6,r17
   2a680:	414b883a 	add	r5,r8,r5
   2a684:	2c4b883a 	add	r5,r5,r17
   2a688:	3023883a 	mov	r17,r6
   2a68c:	2880202c 	andhi	r2,r5,128
   2a690:	10002726 	beq	r2,zero,2a730 <__adddf3+0x32c>
   2a694:	84000044 	addi	r16,r16,1
   2a698:	0081ffc4 	movi	r2,2047
   2a69c:	8080ae26 	beq	r16,r2,2a958 <__adddf3+0x554>
   2a6a0:	00bfe034 	movhi	r2,65408
   2a6a4:	10bfffc4 	addi	r2,r2,-1
   2a6a8:	288a703a 	and	r5,r5,r2
   2a6ac:	880cd07a 	srli	r6,r17,1
   2a6b0:	280897fa 	slli	r4,r5,31
   2a6b4:	88c0004c 	andi	r3,r17,1
   2a6b8:	30e2b03a 	or	r17,r6,r3
   2a6bc:	280ad07a 	srli	r5,r5,1
   2a6c0:	8922b03a 	or	r17,r17,r4
   2a6c4:	003f6e06 	br	2a480 <__alt_data_end+0xfffedf60>
   2a6c8:	1148b03a 	or	r4,r2,r5
   2a6cc:	20003c26 	beq	r4,zero,2a7c0 <__adddf3+0x3bc>
   2a6d0:	29000234 	orhi	r4,r5,8
   2a6d4:	01400434 	movhi	r5,16
   2a6d8:	297fffc4 	addi	r5,r5,-1
   2a6dc:	2148703a 	and	r4,r4,r5
   2a6e0:	003f7f06 	br	2a4e0 <__alt_data_end+0xfffedfc0>
   2a6e4:	18ffffc4 	addi	r3,r3,-1
   2a6e8:	18004d1e 	bne	r3,zero,2a820 <__adddf3+0x41c>
   2a6ec:	898dc83a 	sub	r6,r17,r6
   2a6f0:	89a3803a 	cmpltu	r17,r17,r6
   2a6f4:	2a0bc83a 	sub	r5,r5,r8
   2a6f8:	2c4bc83a 	sub	r5,r5,r17
   2a6fc:	3023883a 	mov	r17,r6
   2a700:	003f9c06 	br	2a574 <__alt_data_end+0xfffee054>
   2a704:	4184b03a 	or	r2,r8,r6
   2a708:	103f5d26 	beq	r2,zero,2a480 <__alt_data_end+0xfffedf60>
   2a70c:	213fffc4 	addi	r4,r4,-1
   2a710:	203fd926 	beq	r4,zero,2a678 <__alt_data_end+0xfffee158>
   2a714:	0081ffc4 	movi	r2,2047
   2a718:	80bfca1e 	bne	r16,r2,2a644 <__alt_data_end+0xfffee124>
   2a71c:	003f5806 	br	2a480 <__alt_data_end+0xfffedf60>
   2a720:	10c8b03a 	or	r4,r2,r3
   2a724:	20008b26 	beq	r4,zero,2a954 <__adddf3+0x550>
   2a728:	100b883a 	mov	r5,r2
   2a72c:	1823883a 	mov	r17,r3
   2a730:	888001cc 	andi	r2,r17,7
   2a734:	103f541e 	bne	r2,zero,2a488 <__alt_data_end+0xfffedf68>
   2a738:	9007883a 	mov	r3,r18
   2a73c:	003fb006 	br	2a600 <__alt_data_end+0xfffee0e0>
   2a740:	1800531e 	bne	r3,zero,2a890 <__adddf3+0x48c>
   2a744:	80800044 	addi	r2,r16,1
   2a748:	1081ffcc 	andi	r2,r2,2047
   2a74c:	00c00044 	movi	r3,1
   2a750:	1880990e 	bge	r3,r2,2a9b8 <__adddf3+0x5b4>
   2a754:	8985c83a 	sub	r2,r17,r6
   2a758:	8887803a 	cmpltu	r3,r17,r2
   2a75c:	2a27c83a 	sub	r19,r5,r8
   2a760:	98e7c83a 	sub	r19,r19,r3
   2a764:	98c0202c 	andhi	r3,r19,128
   2a768:	18006226 	beq	r3,zero,2a8f4 <__adddf3+0x4f0>
   2a76c:	3463c83a 	sub	r17,r6,r17
   2a770:	4151c83a 	sub	r8,r8,r5
   2a774:	344d803a 	cmpltu	r6,r6,r17
   2a778:	41a7c83a 	sub	r19,r8,r6
   2a77c:	3825883a 	mov	r18,r7
   2a780:	983f821e 	bne	r19,zero,2a58c <__alt_data_end+0xfffee06c>
   2a784:	8809883a 	mov	r4,r17
   2a788:	002cb9c0 	call	2cb9c <__clzsi2>
   2a78c:	10800804 	addi	r2,r2,32
   2a790:	10fffe04 	addi	r3,r2,-8
   2a794:	010007c4 	movi	r4,31
   2a798:	20ff810e 	bge	r4,r3,2a5a0 <__alt_data_end+0xfffee080>
   2a79c:	14fff604 	addi	r19,r2,-40
   2a7a0:	8ce6983a 	sll	r19,r17,r19
   2a7a4:	0023883a 	mov	r17,zero
   2a7a8:	1c3f840e 	bge	r3,r16,2a5bc <__alt_data_end+0xfffee09c>
   2a7ac:	017fe034 	movhi	r5,65408
   2a7b0:	297fffc4 	addi	r5,r5,-1
   2a7b4:	80e1c83a 	sub	r16,r16,r3
   2a7b8:	994a703a 	and	r5,r19,r5
   2a7bc:	003f3006 	br	2a480 <__alt_data_end+0xfffedf60>
   2a7c0:	0009883a 	mov	r4,zero
   2a7c4:	0005883a 	mov	r2,zero
   2a7c8:	003f4506 	br	2a4e0 <__alt_data_end+0xfffedfc0>
   2a7cc:	418cb03a 	or	r6,r8,r6
   2a7d0:	300cc03a 	cmpne	r6,r6,zero
   2a7d4:	0007883a 	mov	r3,zero
   2a7d8:	003f6106 	br	2a560 <__alt_data_end+0xfffee040>
   2a7dc:	2000921e 	bne	r4,zero,2aa28 <__adddf3+0x624>
   2a7e0:	80800044 	addi	r2,r16,1
   2a7e4:	11c1ffcc 	andi	r7,r2,2047
   2a7e8:	01000044 	movi	r4,1
   2a7ec:	21c0610e 	bge	r4,r7,2a974 <__adddf3+0x570>
   2a7f0:	0101ffc4 	movi	r4,2047
   2a7f4:	1100a326 	beq	r2,r4,2aa84 <__adddf3+0x680>
   2a7f8:	344d883a 	add	r6,r6,r17
   2a7fc:	3463803a 	cmpltu	r17,r6,r17
   2a800:	414b883a 	add	r5,r8,r5
   2a804:	2c4b883a 	add	r5,r5,r17
   2a808:	282297fa 	slli	r17,r5,31
   2a80c:	300cd07a 	srli	r6,r6,1
   2a810:	280ad07a 	srli	r5,r5,1
   2a814:	1021883a 	mov	r16,r2
   2a818:	89a2b03a 	or	r17,r17,r6
   2a81c:	003f1806 	br	2a480 <__alt_data_end+0xfffedf60>
   2a820:	0081ffc4 	movi	r2,2047
   2a824:	80bf411e 	bne	r16,r2,2a52c <__alt_data_end+0xfffee00c>
   2a828:	003f1506 	br	2a480 <__alt_data_end+0xfffedf60>
   2a82c:	80bff844 	addi	r2,r16,-31
   2a830:	00c00804 	movi	r3,32
   2a834:	9884d83a 	srl	r2,r19,r2
   2a838:	28c04a26 	beq	r5,r3,2a964 <__adddf3+0x560>
   2a83c:	00c00fc4 	movi	r3,63
   2a840:	1c21c83a 	sub	r16,r3,r16
   2a844:	9c26983a 	sll	r19,r19,r16
   2a848:	9c62b03a 	or	r17,r19,r17
   2a84c:	8822c03a 	cmpne	r17,r17,zero
   2a850:	88a2b03a 	or	r17,r17,r2
   2a854:	000b883a 	mov	r5,zero
   2a858:	0021883a 	mov	r16,zero
   2a85c:	003fb406 	br	2a730 <__alt_data_end+0xfffee210>
   2a860:	18bff804 	addi	r2,r3,-32
   2a864:	01000804 	movi	r4,32
   2a868:	4084d83a 	srl	r2,r8,r2
   2a86c:	19003f26 	beq	r3,r4,2a96c <__adddf3+0x568>
   2a870:	01001004 	movi	r4,64
   2a874:	20c7c83a 	sub	r3,r4,r3
   2a878:	40d0983a 	sll	r8,r8,r3
   2a87c:	418cb03a 	or	r6,r8,r6
   2a880:	300cc03a 	cmpne	r6,r6,zero
   2a884:	308cb03a 	or	r6,r6,r2
   2a888:	0007883a 	mov	r3,zero
   2a88c:	003f3406 	br	2a560 <__alt_data_end+0xfffee040>
   2a890:	80002326 	beq	r16,zero,2a920 <__adddf3+0x51c>
   2a894:	0101ffc4 	movi	r4,2047
   2a898:	11005e26 	beq	r2,r4,2aa14 <__adddf3+0x610>
   2a89c:	00c7c83a 	sub	r3,zero,r3
   2a8a0:	29402034 	orhi	r5,r5,128
   2a8a4:	01000e04 	movi	r4,56
   2a8a8:	20c07216 	blt	r4,r3,2aa74 <__adddf3+0x670>
   2a8ac:	010007c4 	movi	r4,31
   2a8b0:	20c0ce16 	blt	r4,r3,2abec <__adddf3+0x7e8>
   2a8b4:	01000804 	movi	r4,32
   2a8b8:	20c9c83a 	sub	r4,r4,r3
   2a8bc:	2914983a 	sll	r10,r5,r4
   2a8c0:	88d2d83a 	srl	r9,r17,r3
   2a8c4:	8908983a 	sll	r4,r17,r4
   2a8c8:	28c6d83a 	srl	r3,r5,r3
   2a8cc:	5262b03a 	or	r17,r10,r9
   2a8d0:	2008c03a 	cmpne	r4,r4,zero
   2a8d4:	8922b03a 	or	r17,r17,r4
   2a8d8:	3463c83a 	sub	r17,r6,r17
   2a8dc:	40c7c83a 	sub	r3,r8,r3
   2a8e0:	344d803a 	cmpltu	r6,r6,r17
   2a8e4:	198bc83a 	sub	r5,r3,r6
   2a8e8:	1021883a 	mov	r16,r2
   2a8ec:	3825883a 	mov	r18,r7
   2a8f0:	003f2006 	br	2a574 <__alt_data_end+0xfffee054>
   2a8f4:	9886b03a 	or	r3,r19,r2
   2a8f8:	1800141e 	bne	r3,zero,2a94c <__adddf3+0x548>
   2a8fc:	0007883a 	mov	r3,zero
   2a900:	000b883a 	mov	r5,zero
   2a904:	0023883a 	mov	r17,zero
   2a908:	0021883a 	mov	r16,zero
   2a90c:	003f3c06 	br	2a600 <__alt_data_end+0xfffee0e0>
   2a910:	418cb03a 	or	r6,r8,r6
   2a914:	300cc03a 	cmpne	r6,r6,zero
   2a918:	0011883a 	mov	r8,zero
   2a91c:	003f5606 	br	2a678 <__alt_data_end+0xfffee158>
   2a920:	2c48b03a 	or	r4,r5,r17
   2a924:	20003b26 	beq	r4,zero,2aa14 <__adddf3+0x610>
   2a928:	00c6303a 	nor	r3,zero,r3
   2a92c:	1800371e 	bne	r3,zero,2aa0c <__adddf3+0x608>
   2a930:	3463c83a 	sub	r17,r6,r17
   2a934:	414bc83a 	sub	r5,r8,r5
   2a938:	344d803a 	cmpltu	r6,r6,r17
   2a93c:	298bc83a 	sub	r5,r5,r6
   2a940:	1021883a 	mov	r16,r2
   2a944:	3825883a 	mov	r18,r7
   2a948:	003f0a06 	br	2a574 <__alt_data_end+0xfffee054>
   2a94c:	1023883a 	mov	r17,r2
   2a950:	003f0d06 	br	2a588 <__alt_data_end+0xfffee068>
   2a954:	0007883a 	mov	r3,zero
   2a958:	000b883a 	mov	r5,zero
   2a95c:	0023883a 	mov	r17,zero
   2a960:	003f2706 	br	2a600 <__alt_data_end+0xfffee0e0>
   2a964:	0027883a 	mov	r19,zero
   2a968:	003fb706 	br	2a848 <__alt_data_end+0xfffee328>
   2a96c:	0011883a 	mov	r8,zero
   2a970:	003fc206 	br	2a87c <__alt_data_end+0xfffee35c>
   2a974:	2c44b03a 	or	r2,r5,r17
   2a978:	8000871e 	bne	r16,zero,2ab98 <__adddf3+0x794>
   2a97c:	1000b126 	beq	r2,zero,2ac44 <__adddf3+0x840>
   2a980:	4184b03a 	or	r2,r8,r6
   2a984:	103ebe26 	beq	r2,zero,2a480 <__alt_data_end+0xfffedf60>
   2a988:	3445883a 	add	r2,r6,r17
   2a98c:	1463803a 	cmpltu	r17,r2,r17
   2a990:	414b883a 	add	r5,r8,r5
   2a994:	2c4b883a 	add	r5,r5,r17
   2a998:	28c0202c 	andhi	r3,r5,128
   2a99c:	1023883a 	mov	r17,r2
   2a9a0:	183f6326 	beq	r3,zero,2a730 <__alt_data_end+0xfffee210>
   2a9a4:	00bfe034 	movhi	r2,65408
   2a9a8:	10bfffc4 	addi	r2,r2,-1
   2a9ac:	2021883a 	mov	r16,r4
   2a9b0:	288a703a 	and	r5,r5,r2
   2a9b4:	003eb206 	br	2a480 <__alt_data_end+0xfffedf60>
   2a9b8:	2c44b03a 	or	r2,r5,r17
   2a9bc:	8000251e 	bne	r16,zero,2aa54 <__adddf3+0x650>
   2a9c0:	10004b1e 	bne	r2,zero,2aaf0 <__adddf3+0x6ec>
   2a9c4:	4184b03a 	or	r2,r8,r6
   2a9c8:	103fe226 	beq	r2,zero,2a954 <__alt_data_end+0xfffee434>
   2a9cc:	400b883a 	mov	r5,r8
   2a9d0:	3023883a 	mov	r17,r6
   2a9d4:	3825883a 	mov	r18,r7
   2a9d8:	003ea906 	br	2a480 <__alt_data_end+0xfffedf60>
   2a9dc:	20bff804 	addi	r2,r4,-32
   2a9e0:	01c00804 	movi	r7,32
   2a9e4:	4084d83a 	srl	r2,r8,r2
   2a9e8:	21c07e26 	beq	r4,r7,2abe4 <__adddf3+0x7e0>
   2a9ec:	01c01004 	movi	r7,64
   2a9f0:	3909c83a 	sub	r4,r7,r4
   2a9f4:	4110983a 	sll	r8,r8,r4
   2a9f8:	418cb03a 	or	r6,r8,r6
   2a9fc:	300cc03a 	cmpne	r6,r6,zero
   2aa00:	308cb03a 	or	r6,r6,r2
   2aa04:	0011883a 	mov	r8,zero
   2aa08:	003f1b06 	br	2a678 <__alt_data_end+0xfffee158>
   2aa0c:	0101ffc4 	movi	r4,2047
   2aa10:	113fa41e 	bne	r2,r4,2a8a4 <__alt_data_end+0xfffee384>
   2aa14:	400b883a 	mov	r5,r8
   2aa18:	3023883a 	mov	r17,r6
   2aa1c:	1021883a 	mov	r16,r2
   2aa20:	3825883a 	mov	r18,r7
   2aa24:	003e9606 	br	2a480 <__alt_data_end+0xfffedf60>
   2aa28:	80001a1e 	bne	r16,zero,2aa94 <__adddf3+0x690>
   2aa2c:	2c4eb03a 	or	r7,r5,r17
   2aa30:	38005526 	beq	r7,zero,2ab88 <__adddf3+0x784>
   2aa34:	0108303a 	nor	r4,zero,r4
   2aa38:	2000511e 	bne	r4,zero,2ab80 <__adddf3+0x77c>
   2aa3c:	89a3883a 	add	r17,r17,r6
   2aa40:	414b883a 	add	r5,r8,r5
   2aa44:	898d803a 	cmpltu	r6,r17,r6
   2aa48:	298b883a 	add	r5,r5,r6
   2aa4c:	1021883a 	mov	r16,r2
   2aa50:	003f0e06 	br	2a68c <__alt_data_end+0xfffee16c>
   2aa54:	1000341e 	bne	r2,zero,2ab28 <__adddf3+0x724>
   2aa58:	4184b03a 	or	r2,r8,r6
   2aa5c:	10006f26 	beq	r2,zero,2ac1c <__adddf3+0x818>
   2aa60:	400b883a 	mov	r5,r8
   2aa64:	3023883a 	mov	r17,r6
   2aa68:	3825883a 	mov	r18,r7
   2aa6c:	0401ffc4 	movi	r16,2047
   2aa70:	003e8306 	br	2a480 <__alt_data_end+0xfffedf60>
   2aa74:	2c62b03a 	or	r17,r5,r17
   2aa78:	8822c03a 	cmpne	r17,r17,zero
   2aa7c:	0007883a 	mov	r3,zero
   2aa80:	003f9506 	br	2a8d8 <__alt_data_end+0xfffee3b8>
   2aa84:	1021883a 	mov	r16,r2
   2aa88:	000b883a 	mov	r5,zero
   2aa8c:	0023883a 	mov	r17,zero
   2aa90:	003edb06 	br	2a600 <__alt_data_end+0xfffee0e0>
   2aa94:	01c1ffc4 	movi	r7,2047
   2aa98:	11c03b26 	beq	r2,r7,2ab88 <__adddf3+0x784>
   2aa9c:	0109c83a 	sub	r4,zero,r4
   2aaa0:	29402034 	orhi	r5,r5,128
   2aaa4:	01c00e04 	movi	r7,56
   2aaa8:	39006216 	blt	r7,r4,2ac34 <__adddf3+0x830>
   2aaac:	01c007c4 	movi	r7,31
   2aab0:	39006b16 	blt	r7,r4,2ac60 <__adddf3+0x85c>
   2aab4:	01c00804 	movi	r7,32
   2aab8:	390fc83a 	sub	r7,r7,r4
   2aabc:	29d4983a 	sll	r10,r5,r7
   2aac0:	8912d83a 	srl	r9,r17,r4
   2aac4:	89ce983a 	sll	r7,r17,r7
   2aac8:	2908d83a 	srl	r4,r5,r4
   2aacc:	5262b03a 	or	r17,r10,r9
   2aad0:	380ac03a 	cmpne	r5,r7,zero
   2aad4:	8962b03a 	or	r17,r17,r5
   2aad8:	89a3883a 	add	r17,r17,r6
   2aadc:	2211883a 	add	r8,r4,r8
   2aae0:	898d803a 	cmpltu	r6,r17,r6
   2aae4:	418b883a 	add	r5,r8,r6
   2aae8:	1021883a 	mov	r16,r2
   2aaec:	003ee706 	br	2a68c <__alt_data_end+0xfffee16c>
   2aaf0:	4184b03a 	or	r2,r8,r6
   2aaf4:	103e6226 	beq	r2,zero,2a480 <__alt_data_end+0xfffedf60>
   2aaf8:	8987c83a 	sub	r3,r17,r6
   2aafc:	88c9803a 	cmpltu	r4,r17,r3
   2ab00:	2a05c83a 	sub	r2,r5,r8
   2ab04:	1105c83a 	sub	r2,r2,r4
   2ab08:	1100202c 	andhi	r4,r2,128
   2ab0c:	203f0426 	beq	r4,zero,2a720 <__alt_data_end+0xfffee200>
   2ab10:	3463c83a 	sub	r17,r6,r17
   2ab14:	414bc83a 	sub	r5,r8,r5
   2ab18:	344d803a 	cmpltu	r6,r6,r17
   2ab1c:	298bc83a 	sub	r5,r5,r6
   2ab20:	3825883a 	mov	r18,r7
   2ab24:	003e5606 	br	2a480 <__alt_data_end+0xfffedf60>
   2ab28:	4184b03a 	or	r2,r8,r6
   2ab2c:	10002b26 	beq	r2,zero,2abdc <__adddf3+0x7d8>
   2ab30:	2804d0fa 	srli	r2,r5,3
   2ab34:	8822d0fa 	srli	r17,r17,3
   2ab38:	280a977a 	slli	r5,r5,29
   2ab3c:	10c0022c 	andhi	r3,r2,8
   2ab40:	2c62b03a 	or	r17,r5,r17
   2ab44:	18000826 	beq	r3,zero,2ab68 <__adddf3+0x764>
   2ab48:	4008d0fa 	srli	r4,r8,3
   2ab4c:	20c0022c 	andhi	r3,r4,8
   2ab50:	1800051e 	bne	r3,zero,2ab68 <__adddf3+0x764>
   2ab54:	300cd0fa 	srli	r6,r6,3
   2ab58:	4010977a 	slli	r8,r8,29
   2ab5c:	2005883a 	mov	r2,r4
   2ab60:	3825883a 	mov	r18,r7
   2ab64:	41a2b03a 	or	r17,r8,r6
   2ab68:	880ad77a 	srli	r5,r17,29
   2ab6c:	100490fa 	slli	r2,r2,3
   2ab70:	882290fa 	slli	r17,r17,3
   2ab74:	0401ffc4 	movi	r16,2047
   2ab78:	288ab03a 	or	r5,r5,r2
   2ab7c:	003e4006 	br	2a480 <__alt_data_end+0xfffedf60>
   2ab80:	01c1ffc4 	movi	r7,2047
   2ab84:	11ffc71e 	bne	r2,r7,2aaa4 <__alt_data_end+0xfffee584>
   2ab88:	400b883a 	mov	r5,r8
   2ab8c:	3023883a 	mov	r17,r6
   2ab90:	1021883a 	mov	r16,r2
   2ab94:	003e3a06 	br	2a480 <__alt_data_end+0xfffedf60>
   2ab98:	10002d26 	beq	r2,zero,2ac50 <__adddf3+0x84c>
   2ab9c:	4184b03a 	or	r2,r8,r6
   2aba0:	10000e26 	beq	r2,zero,2abdc <__adddf3+0x7d8>
   2aba4:	2804d0fa 	srli	r2,r5,3
   2aba8:	8822d0fa 	srli	r17,r17,3
   2abac:	280a977a 	slli	r5,r5,29
   2abb0:	10c0022c 	andhi	r3,r2,8
   2abb4:	2c62b03a 	or	r17,r5,r17
   2abb8:	183feb26 	beq	r3,zero,2ab68 <__alt_data_end+0xfffee648>
   2abbc:	4008d0fa 	srli	r4,r8,3
   2abc0:	20c0022c 	andhi	r3,r4,8
   2abc4:	183fe81e 	bne	r3,zero,2ab68 <__alt_data_end+0xfffee648>
   2abc8:	300cd0fa 	srli	r6,r6,3
   2abcc:	4010977a 	slli	r8,r8,29
   2abd0:	2005883a 	mov	r2,r4
   2abd4:	41a2b03a 	or	r17,r8,r6
   2abd8:	003fe306 	br	2ab68 <__alt_data_end+0xfffee648>
   2abdc:	0401ffc4 	movi	r16,2047
   2abe0:	003e2706 	br	2a480 <__alt_data_end+0xfffedf60>
   2abe4:	0011883a 	mov	r8,zero
   2abe8:	003f8306 	br	2a9f8 <__alt_data_end+0xfffee4d8>
   2abec:	193ff804 	addi	r4,r3,-32
   2abf0:	02400804 	movi	r9,32
   2abf4:	2908d83a 	srl	r4,r5,r4
   2abf8:	1a402526 	beq	r3,r9,2ac90 <__adddf3+0x88c>
   2abfc:	02401004 	movi	r9,64
   2ac00:	48c7c83a 	sub	r3,r9,r3
   2ac04:	28ca983a 	sll	r5,r5,r3
   2ac08:	2c62b03a 	or	r17,r5,r17
   2ac0c:	8822c03a 	cmpne	r17,r17,zero
   2ac10:	8922b03a 	or	r17,r17,r4
   2ac14:	0007883a 	mov	r3,zero
   2ac18:	003f2f06 	br	2a8d8 <__alt_data_end+0xfffee3b8>
   2ac1c:	01402034 	movhi	r5,128
   2ac20:	0007883a 	mov	r3,zero
   2ac24:	297fffc4 	addi	r5,r5,-1
   2ac28:	047ffe04 	movi	r17,-8
   2ac2c:	0401ffc4 	movi	r16,2047
   2ac30:	003e7306 	br	2a600 <__alt_data_end+0xfffee0e0>
   2ac34:	2c62b03a 	or	r17,r5,r17
   2ac38:	8822c03a 	cmpne	r17,r17,zero
   2ac3c:	0009883a 	mov	r4,zero
   2ac40:	003fa506 	br	2aad8 <__alt_data_end+0xfffee5b8>
   2ac44:	400b883a 	mov	r5,r8
   2ac48:	3023883a 	mov	r17,r6
   2ac4c:	003e0c06 	br	2a480 <__alt_data_end+0xfffedf60>
   2ac50:	400b883a 	mov	r5,r8
   2ac54:	3023883a 	mov	r17,r6
   2ac58:	0401ffc4 	movi	r16,2047
   2ac5c:	003e0806 	br	2a480 <__alt_data_end+0xfffedf60>
   2ac60:	21fff804 	addi	r7,r4,-32
   2ac64:	02400804 	movi	r9,32
   2ac68:	29ced83a 	srl	r7,r5,r7
   2ac6c:	22400a26 	beq	r4,r9,2ac98 <__adddf3+0x894>
   2ac70:	02401004 	movi	r9,64
   2ac74:	4909c83a 	sub	r4,r9,r4
   2ac78:	290a983a 	sll	r5,r5,r4
   2ac7c:	2c62b03a 	or	r17,r5,r17
   2ac80:	8822c03a 	cmpne	r17,r17,zero
   2ac84:	89e2b03a 	or	r17,r17,r7
   2ac88:	0009883a 	mov	r4,zero
   2ac8c:	003f9206 	br	2aad8 <__alt_data_end+0xfffee5b8>
   2ac90:	000b883a 	mov	r5,zero
   2ac94:	003fdc06 	br	2ac08 <__alt_data_end+0xfffee6e8>
   2ac98:	000b883a 	mov	r5,zero
   2ac9c:	003ff706 	br	2ac7c <__alt_data_end+0xfffee75c>

0002aca0 <__divdf3>:
   2aca0:	defff004 	addi	sp,sp,-64
   2aca4:	dc800815 	stw	r18,32(sp)
   2aca8:	2824d53a 	srli	r18,r5,20
   2acac:	dd800c15 	stw	r22,48(sp)
   2acb0:	282cd7fa 	srli	r22,r5,31
   2acb4:	dc000615 	stw	r16,24(sp)
   2acb8:	04000434 	movhi	r16,16
   2acbc:	df000e15 	stw	fp,56(sp)
   2acc0:	dd000a15 	stw	r20,40(sp)
   2acc4:	dcc00915 	stw	r19,36(sp)
   2acc8:	dc400715 	stw	r17,28(sp)
   2accc:	843fffc4 	addi	r16,r16,-1
   2acd0:	dfc00f15 	stw	ra,60(sp)
   2acd4:	ddc00d15 	stw	r23,52(sp)
   2acd8:	dd400b15 	stw	r21,44(sp)
   2acdc:	9481ffcc 	andi	r18,r18,2047
   2ace0:	2029883a 	mov	r20,r4
   2ace4:	2027883a 	mov	r19,r4
   2ace8:	2c22703a 	and	r17,r5,r16
   2acec:	b7003fcc 	andi	fp,r22,255
   2acf0:	90005e26 	beq	r18,zero,2ae6c <__divdf3+0x1cc>
   2acf4:	0081ffc4 	movi	r2,2047
   2acf8:	90803526 	beq	r18,r2,2add0 <__divdf3+0x130>
   2acfc:	8c000434 	orhi	r16,r17,16
   2ad00:	2004d77a 	srli	r2,r4,29
   2ad04:	802090fa 	slli	r16,r16,3
   2ad08:	202690fa 	slli	r19,r4,3
   2ad0c:	94bf0044 	addi	r18,r18,-1023
   2ad10:	80a2b03a 	or	r17,r16,r2
   2ad14:	0029883a 	mov	r20,zero
   2ad18:	0011883a 	mov	r8,zero
   2ad1c:	380ad53a 	srli	r5,r7,20
   2ad20:	382ed7fa 	srli	r23,r7,31
   2ad24:	04000434 	movhi	r16,16
   2ad28:	843fffc4 	addi	r16,r16,-1
   2ad2c:	2941ffcc 	andi	r5,r5,2047
   2ad30:	302b883a 	mov	r21,r6
   2ad34:	3c20703a 	and	r16,r7,r16
   2ad38:	ba403fcc 	andi	r9,r23,255
   2ad3c:	28006726 	beq	r5,zero,2aedc <__divdf3+0x23c>
   2ad40:	0081ffc4 	movi	r2,2047
   2ad44:	28805f26 	beq	r5,r2,2aec4 <__divdf3+0x224>
   2ad48:	84000434 	orhi	r16,r16,16
   2ad4c:	3004d77a 	srli	r2,r6,29
   2ad50:	802090fa 	slli	r16,r16,3
   2ad54:	302a90fa 	slli	r21,r6,3
   2ad58:	297f0044 	addi	r5,r5,-1023
   2ad5c:	80a0b03a 	or	r16,r16,r2
   2ad60:	000f883a 	mov	r7,zero
   2ad64:	3d06b03a 	or	r3,r7,r20
   2ad68:	180690ba 	slli	r3,r3,2
   2ad6c:	008000f4 	movhi	r2,3
   2ad70:	10ab6404 	addi	r2,r2,-21104
   2ad74:	1885883a 	add	r2,r3,r2
   2ad78:	10800017 	ldw	r2,0(r2)
   2ad7c:	b5c8f03a 	xor	r4,r22,r23
   2ad80:	200d883a 	mov	r6,r4
   2ad84:	25003fcc 	andi	r20,r4,255
   2ad88:	9165c83a 	sub	r18,r18,r5
   2ad8c:	1000683a 	jmp	r2
   2ad90:	0002afd8 	cmpnei	zero,zero,2751
   2ad94:	0002ae08 	cmpgei	zero,zero,2744
   2ad98:	0002af9c 	xori	zero,zero,2750
   2ad9c:	0002adec 	andhi	zero,zero,2743
   2ada0:	0002af9c 	xori	zero,zero,2750
   2ada4:	0002af70 	cmpltui	zero,zero,2749
   2ada8:	0002af9c 	xori	zero,zero,2750
   2adac:	0002adec 	andhi	zero,zero,2743
   2adb0:	0002ae08 	cmpgei	zero,zero,2744
   2adb4:	0002ae08 	cmpgei	zero,zero,2744
   2adb8:	0002af70 	cmpltui	zero,zero,2749
   2adbc:	0002adec 	andhi	zero,zero,2743
   2adc0:	0002adfc 	xorhi	zero,zero,2743
   2adc4:	0002adfc 	xorhi	zero,zero,2743
   2adc8:	0002adfc 	xorhi	zero,zero,2743
   2adcc:	0002afac 	andhi	zero,zero,2750
   2add0:	8904b03a 	or	r2,r17,r4
   2add4:	1000631e 	bne	r2,zero,2af64 <__divdf3+0x2c4>
   2add8:	05000204 	movi	r20,8
   2addc:	0023883a 	mov	r17,zero
   2ade0:	0027883a 	mov	r19,zero
   2ade4:	02000084 	movi	r8,2
   2ade8:	003fcc06 	br	2ad1c <__alt_data_end+0xfffee7fc>
   2adec:	8023883a 	mov	r17,r16
   2adf0:	a827883a 	mov	r19,r21
   2adf4:	4839883a 	mov	fp,r9
   2adf8:	3811883a 	mov	r8,r7
   2adfc:	00800084 	movi	r2,2
   2ae00:	4081531e 	bne	r8,r2,2b350 <__divdf3+0x6b0>
   2ae04:	e029883a 	mov	r20,fp
   2ae08:	a180004c 	andi	r6,r20,1
   2ae0c:	0201ffc4 	movi	r8,2047
   2ae10:	000b883a 	mov	r5,zero
   2ae14:	0027883a 	mov	r19,zero
   2ae18:	4010953a 	slli	r8,r8,20
   2ae1c:	30c03fcc 	andi	r3,r6,255
   2ae20:	04000434 	movhi	r16,16
   2ae24:	180697fa 	slli	r3,r3,31
   2ae28:	843fffc4 	addi	r16,r16,-1
   2ae2c:	2c20703a 	and	r16,r5,r16
   2ae30:	8220b03a 	or	r16,r16,r8
   2ae34:	80c6b03a 	or	r3,r16,r3
   2ae38:	9805883a 	mov	r2,r19
   2ae3c:	dfc00f17 	ldw	ra,60(sp)
   2ae40:	df000e17 	ldw	fp,56(sp)
   2ae44:	ddc00d17 	ldw	r23,52(sp)
   2ae48:	dd800c17 	ldw	r22,48(sp)
   2ae4c:	dd400b17 	ldw	r21,44(sp)
   2ae50:	dd000a17 	ldw	r20,40(sp)
   2ae54:	dcc00917 	ldw	r19,36(sp)
   2ae58:	dc800817 	ldw	r18,32(sp)
   2ae5c:	dc400717 	ldw	r17,28(sp)
   2ae60:	dc000617 	ldw	r16,24(sp)
   2ae64:	dec01004 	addi	sp,sp,64
   2ae68:	f800283a 	ret
   2ae6c:	8904b03a 	or	r2,r17,r4
   2ae70:	10003726 	beq	r2,zero,2af50 <__divdf3+0x2b0>
   2ae74:	88014d26 	beq	r17,zero,2b3ac <__divdf3+0x70c>
   2ae78:	8809883a 	mov	r4,r17
   2ae7c:	d9800215 	stw	r6,8(sp)
   2ae80:	d9c00515 	stw	r7,20(sp)
   2ae84:	002cb9c0 	call	2cb9c <__clzsi2>
   2ae88:	d9800217 	ldw	r6,8(sp)
   2ae8c:	d9c00517 	ldw	r7,20(sp)
   2ae90:	1007883a 	mov	r3,r2
   2ae94:	01000a04 	movi	r4,40
   2ae98:	1cfffe04 	addi	r19,r3,-8
   2ae9c:	20c9c83a 	sub	r4,r4,r3
   2aea0:	8cca983a 	sll	r5,r17,r19
   2aea4:	a108d83a 	srl	r4,r20,r4
   2aea8:	a4e6983a 	sll	r19,r20,r19
   2aeac:	2162b03a 	or	r17,r4,r5
   2aeb0:	04bf0344 	movi	r18,-1011
   2aeb4:	90e5c83a 	sub	r18,r18,r3
   2aeb8:	0029883a 	mov	r20,zero
   2aebc:	0011883a 	mov	r8,zero
   2aec0:	003f9606 	br	2ad1c <__alt_data_end+0xfffee7fc>
   2aec4:	8184b03a 	or	r2,r16,r6
   2aec8:	10001f1e 	bne	r2,zero,2af48 <__divdf3+0x2a8>
   2aecc:	0021883a 	mov	r16,zero
   2aed0:	002b883a 	mov	r21,zero
   2aed4:	01c00084 	movi	r7,2
   2aed8:	003fa206 	br	2ad64 <__alt_data_end+0xfffee844>
   2aedc:	8184b03a 	or	r2,r16,r6
   2aee0:	10001526 	beq	r2,zero,2af38 <__divdf3+0x298>
   2aee4:	80013d26 	beq	r16,zero,2b3dc <__divdf3+0x73c>
   2aee8:	8009883a 	mov	r4,r16
   2aeec:	d9800215 	stw	r6,8(sp)
   2aef0:	da000315 	stw	r8,12(sp)
   2aef4:	da400415 	stw	r9,16(sp)
   2aef8:	002cb9c0 	call	2cb9c <__clzsi2>
   2aefc:	d9800217 	ldw	r6,8(sp)
   2af00:	da000317 	ldw	r8,12(sp)
   2af04:	da400417 	ldw	r9,16(sp)
   2af08:	1007883a 	mov	r3,r2
   2af0c:	01000a04 	movi	r4,40
   2af10:	1d7ffe04 	addi	r21,r3,-8
   2af14:	20c9c83a 	sub	r4,r4,r3
   2af18:	8560983a 	sll	r16,r16,r21
   2af1c:	3108d83a 	srl	r4,r6,r4
   2af20:	356a983a 	sll	r21,r6,r21
   2af24:	2420b03a 	or	r16,r4,r16
   2af28:	017f0344 	movi	r5,-1011
   2af2c:	28cbc83a 	sub	r5,r5,r3
   2af30:	000f883a 	mov	r7,zero
   2af34:	003f8b06 	br	2ad64 <__alt_data_end+0xfffee844>
   2af38:	0021883a 	mov	r16,zero
   2af3c:	002b883a 	mov	r21,zero
   2af40:	01c00044 	movi	r7,1
   2af44:	003f8706 	br	2ad64 <__alt_data_end+0xfffee844>
   2af48:	01c000c4 	movi	r7,3
   2af4c:	003f8506 	br	2ad64 <__alt_data_end+0xfffee844>
   2af50:	05000104 	movi	r20,4
   2af54:	0023883a 	mov	r17,zero
   2af58:	0027883a 	mov	r19,zero
   2af5c:	02000044 	movi	r8,1
   2af60:	003f6e06 	br	2ad1c <__alt_data_end+0xfffee7fc>
   2af64:	05000304 	movi	r20,12
   2af68:	020000c4 	movi	r8,3
   2af6c:	003f6b06 	br	2ad1c <__alt_data_end+0xfffee7fc>
   2af70:	01400434 	movhi	r5,16
   2af74:	000d883a 	mov	r6,zero
   2af78:	297fffc4 	addi	r5,r5,-1
   2af7c:	04ffffc4 	movi	r19,-1
   2af80:	0201ffc4 	movi	r8,2047
   2af84:	003fa406 	br	2ae18 <__alt_data_end+0xfffee8f8>
   2af88:	043f0084 	movi	r16,-1022
   2af8c:	84a1c83a 	sub	r16,r16,r18
   2af90:	00800e04 	movi	r2,56
   2af94:	14014d0e 	bge	r2,r16,2b4cc <__divdf3+0x82c>
   2af98:	a180004c 	andi	r6,r20,1
   2af9c:	0011883a 	mov	r8,zero
   2afa0:	000b883a 	mov	r5,zero
   2afa4:	0027883a 	mov	r19,zero
   2afa8:	003f9b06 	br	2ae18 <__alt_data_end+0xfffee8f8>
   2afac:	8880022c 	andhi	r2,r17,8
   2afb0:	1000f026 	beq	r2,zero,2b374 <__divdf3+0x6d4>
   2afb4:	8080022c 	andhi	r2,r16,8
   2afb8:	1000ee1e 	bne	r2,zero,2b374 <__divdf3+0x6d4>
   2afbc:	00800434 	movhi	r2,16
   2afc0:	81400234 	orhi	r5,r16,8
   2afc4:	10bfffc4 	addi	r2,r2,-1
   2afc8:	b80d883a 	mov	r6,r23
   2afcc:	288a703a 	and	r5,r5,r2
   2afd0:	a827883a 	mov	r19,r21
   2afd4:	003fea06 	br	2af80 <__alt_data_end+0xfffeea60>
   2afd8:	84411c36 	bltu	r16,r17,2b44c <__divdf3+0x7ac>
   2afdc:	8c011a26 	beq	r17,r16,2b448 <__divdf3+0x7a8>
   2afe0:	94bfffc4 	addi	r18,r18,-1
   2afe4:	dcc00015 	stw	r19,0(sp)
   2afe8:	8811883a 	mov	r8,r17
   2afec:	002d883a 	mov	r22,zero
   2aff0:	a80cd63a 	srli	r6,r21,24
   2aff4:	8020923a 	slli	r16,r16,8
   2aff8:	a82a923a 	slli	r21,r21,8
   2affc:	4009883a 	mov	r4,r8
   2b000:	342eb03a 	or	r23,r6,r16
   2b004:	dd400115 	stw	r21,4(sp)
   2b008:	b82ad43a 	srli	r21,r23,16
   2b00c:	da000315 	stw	r8,12(sp)
   2b010:	bcffffcc 	andi	r19,r23,65535
   2b014:	a80b883a 	mov	r5,r21
   2b018:	002a3cc0 	call	2a3cc <__udivsi3>
   2b01c:	1009883a 	mov	r4,r2
   2b020:	980b883a 	mov	r5,r19
   2b024:	1023883a 	mov	r17,r2
   2b028:	002a3dc0 	call	2a3dc <__mulsi3>
   2b02c:	da000317 	ldw	r8,12(sp)
   2b030:	a80b883a 	mov	r5,r21
   2b034:	1039883a 	mov	fp,r2
   2b038:	4009883a 	mov	r4,r8
   2b03c:	002a3d40 	call	2a3d4 <__umodsi3>
   2b040:	d8c00017 	ldw	r3,0(sp)
   2b044:	1004943a 	slli	r2,r2,16
   2b048:	1810d43a 	srli	r8,r3,16
   2b04c:	120eb03a 	or	r7,r2,r8
   2b050:	3f00062e 	bgeu	r7,fp,2b06c <__divdf3+0x3cc>
   2b054:	3dcf883a 	add	r7,r7,r23
   2b058:	88bfffc4 	addi	r2,r17,-1
   2b05c:	3dc10a36 	bltu	r7,r23,2b488 <__divdf3+0x7e8>
   2b060:	3f01092e 	bgeu	r7,fp,2b488 <__divdf3+0x7e8>
   2b064:	8c7fff84 	addi	r17,r17,-2
   2b068:	3dcf883a 	add	r7,r7,r23
   2b06c:	3f39c83a 	sub	fp,r7,fp
   2b070:	e009883a 	mov	r4,fp
   2b074:	a80b883a 	mov	r5,r21
   2b078:	002a3cc0 	call	2a3cc <__udivsi3>
   2b07c:	1009883a 	mov	r4,r2
   2b080:	980b883a 	mov	r5,r19
   2b084:	1021883a 	mov	r16,r2
   2b088:	002a3dc0 	call	2a3dc <__mulsi3>
   2b08c:	e009883a 	mov	r4,fp
   2b090:	a80b883a 	mov	r5,r21
   2b094:	d8800315 	stw	r2,12(sp)
   2b098:	002a3d40 	call	2a3d4 <__umodsi3>
   2b09c:	d9000017 	ldw	r4,0(sp)
   2b0a0:	1004943a 	slli	r2,r2,16
   2b0a4:	da000317 	ldw	r8,12(sp)
   2b0a8:	20ffffcc 	andi	r3,r4,65535
   2b0ac:	10ceb03a 	or	r7,r2,r3
   2b0b0:	3a00062e 	bgeu	r7,r8,2b0cc <__divdf3+0x42c>
   2b0b4:	3dcf883a 	add	r7,r7,r23
   2b0b8:	80bfffc4 	addi	r2,r16,-1
   2b0bc:	3dc0f036 	bltu	r7,r23,2b480 <__divdf3+0x7e0>
   2b0c0:	3a00ef2e 	bgeu	r7,r8,2b480 <__divdf3+0x7e0>
   2b0c4:	843fff84 	addi	r16,r16,-2
   2b0c8:	3dcf883a 	add	r7,r7,r23
   2b0cc:	d8c00117 	ldw	r3,4(sp)
   2b0d0:	8822943a 	slli	r17,r17,16
   2b0d4:	3a0fc83a 	sub	r7,r7,r8
   2b0d8:	1806d43a 	srli	r3,r3,16
   2b0dc:	8462b03a 	or	r17,r16,r17
   2b0e0:	8affffcc 	andi	r11,r17,65535
   2b0e4:	d8c00015 	stw	r3,0(sp)
   2b0e8:	d8c00117 	ldw	r3,4(sp)
   2b0ec:	8820d43a 	srli	r16,r17,16
   2b0f0:	5809883a 	mov	r4,r11
   2b0f4:	1f3fffcc 	andi	fp,r3,65535
   2b0f8:	e00b883a 	mov	r5,fp
   2b0fc:	d9c00515 	stw	r7,20(sp)
   2b100:	dac00215 	stw	r11,8(sp)
   2b104:	002a3dc0 	call	2a3dc <__mulsi3>
   2b108:	8009883a 	mov	r4,r16
   2b10c:	e00b883a 	mov	r5,fp
   2b110:	d8800415 	stw	r2,16(sp)
   2b114:	002a3dc0 	call	2a3dc <__mulsi3>
   2b118:	d9400017 	ldw	r5,0(sp)
   2b11c:	8009883a 	mov	r4,r16
   2b120:	d8800315 	stw	r2,12(sp)
   2b124:	002a3dc0 	call	2a3dc <__mulsi3>
   2b128:	dac00217 	ldw	r11,8(sp)
   2b12c:	d9400017 	ldw	r5,0(sp)
   2b130:	d8800215 	stw	r2,8(sp)
   2b134:	5809883a 	mov	r4,r11
   2b138:	002a3dc0 	call	2a3dc <__mulsi3>
   2b13c:	da400417 	ldw	r9,16(sp)
   2b140:	da800317 	ldw	r10,12(sp)
   2b144:	d9c00517 	ldw	r7,20(sp)
   2b148:	480ad43a 	srli	r5,r9,16
   2b14c:	5085883a 	add	r2,r10,r2
   2b150:	db000217 	ldw	r12,8(sp)
   2b154:	1151883a 	add	r8,r2,r5
   2b158:	4280022e 	bgeu	r8,r10,2b164 <__divdf3+0x4c4>
   2b15c:	00800074 	movhi	r2,1
   2b160:	6099883a 	add	r12,r12,r2
   2b164:	400ad43a 	srli	r5,r8,16
   2b168:	4010943a 	slli	r8,r8,16
   2b16c:	4c3fffcc 	andi	r16,r9,65535
   2b170:	6149883a 	add	r4,r12,r5
   2b174:	4411883a 	add	r8,r8,r16
   2b178:	3900a736 	bltu	r7,r4,2b418 <__divdf3+0x778>
   2b17c:	3900c426 	beq	r7,r4,2b490 <__divdf3+0x7f0>
   2b180:	3909c83a 	sub	r4,r7,r4
   2b184:	b221c83a 	sub	r16,r22,r8
   2b188:	b42d803a 	cmpltu	r22,r22,r16
   2b18c:	25adc83a 	sub	r22,r4,r22
   2b190:	b5c0c626 	beq	r22,r23,2b4ac <__divdf3+0x80c>
   2b194:	b009883a 	mov	r4,r22
   2b198:	a80b883a 	mov	r5,r21
   2b19c:	002a3cc0 	call	2a3cc <__udivsi3>
   2b1a0:	1009883a 	mov	r4,r2
   2b1a4:	980b883a 	mov	r5,r19
   2b1a8:	d8800315 	stw	r2,12(sp)
   2b1ac:	002a3dc0 	call	2a3dc <__mulsi3>
   2b1b0:	a80b883a 	mov	r5,r21
   2b1b4:	b009883a 	mov	r4,r22
   2b1b8:	d8800415 	stw	r2,16(sp)
   2b1bc:	002a3d40 	call	2a3d4 <__umodsi3>
   2b1c0:	1004943a 	slli	r2,r2,16
   2b1c4:	800ed43a 	srli	r7,r16,16
   2b1c8:	da400417 	ldw	r9,16(sp)
   2b1cc:	da000317 	ldw	r8,12(sp)
   2b1d0:	11cab03a 	or	r5,r2,r7
   2b1d4:	2a40062e 	bgeu	r5,r9,2b1f0 <__divdf3+0x550>
   2b1d8:	2dcb883a 	add	r5,r5,r23
   2b1dc:	40bfffc4 	addi	r2,r8,-1
   2b1e0:	2dc0b436 	bltu	r5,r23,2b4b4 <__divdf3+0x814>
   2b1e4:	2a40b32e 	bgeu	r5,r9,2b4b4 <__divdf3+0x814>
   2b1e8:	423fff84 	addi	r8,r8,-2
   2b1ec:	2dcb883a 	add	r5,r5,r23
   2b1f0:	2a6dc83a 	sub	r22,r5,r9
   2b1f4:	b009883a 	mov	r4,r22
   2b1f8:	a80b883a 	mov	r5,r21
   2b1fc:	da000315 	stw	r8,12(sp)
   2b200:	002a3cc0 	call	2a3cc <__udivsi3>
   2b204:	980b883a 	mov	r5,r19
   2b208:	1009883a 	mov	r4,r2
   2b20c:	d8800415 	stw	r2,16(sp)
   2b210:	002a3dc0 	call	2a3dc <__mulsi3>
   2b214:	b009883a 	mov	r4,r22
   2b218:	a80b883a 	mov	r5,r21
   2b21c:	1027883a 	mov	r19,r2
   2b220:	002a3d40 	call	2a3d4 <__umodsi3>
   2b224:	1004943a 	slli	r2,r2,16
   2b228:	843fffcc 	andi	r16,r16,65535
   2b22c:	da000317 	ldw	r8,12(sp)
   2b230:	140eb03a 	or	r7,r2,r16
   2b234:	da400417 	ldw	r9,16(sp)
   2b238:	3cc0062e 	bgeu	r7,r19,2b254 <__divdf3+0x5b4>
   2b23c:	3dcf883a 	add	r7,r7,r23
   2b240:	48bfffc4 	addi	r2,r9,-1
   2b244:	3dc09d36 	bltu	r7,r23,2b4bc <__divdf3+0x81c>
   2b248:	3cc09c2e 	bgeu	r7,r19,2b4bc <__divdf3+0x81c>
   2b24c:	4a7fff84 	addi	r9,r9,-2
   2b250:	3dcf883a 	add	r7,r7,r23
   2b254:	4010943a 	slli	r8,r8,16
   2b258:	3cebc83a 	sub	r21,r7,r19
   2b25c:	e00b883a 	mov	r5,fp
   2b260:	4a26b03a 	or	r19,r9,r8
   2b264:	99ffffcc 	andi	r7,r19,65535
   2b268:	9820d43a 	srli	r16,r19,16
   2b26c:	3809883a 	mov	r4,r7
   2b270:	d9c00515 	stw	r7,20(sp)
   2b274:	002a3dc0 	call	2a3dc <__mulsi3>
   2b278:	8009883a 	mov	r4,r16
   2b27c:	e00b883a 	mov	r5,fp
   2b280:	102d883a 	mov	r22,r2
   2b284:	002a3dc0 	call	2a3dc <__mulsi3>
   2b288:	d9400017 	ldw	r5,0(sp)
   2b28c:	8009883a 	mov	r4,r16
   2b290:	1039883a 	mov	fp,r2
   2b294:	002a3dc0 	call	2a3dc <__mulsi3>
   2b298:	d9c00517 	ldw	r7,20(sp)
   2b29c:	d9400017 	ldw	r5,0(sp)
   2b2a0:	1021883a 	mov	r16,r2
   2b2a4:	3809883a 	mov	r4,r7
   2b2a8:	002a3dc0 	call	2a3dc <__mulsi3>
   2b2ac:	b008d43a 	srli	r4,r22,16
   2b2b0:	e085883a 	add	r2,fp,r2
   2b2b4:	1109883a 	add	r4,r2,r4
   2b2b8:	2700022e 	bgeu	r4,fp,2b2c4 <__divdf3+0x624>
   2b2bc:	00800074 	movhi	r2,1
   2b2c0:	80a1883a 	add	r16,r16,r2
   2b2c4:	200ad43a 	srli	r5,r4,16
   2b2c8:	2008943a 	slli	r4,r4,16
   2b2cc:	b5bfffcc 	andi	r22,r22,65535
   2b2d0:	8145883a 	add	r2,r16,r5
   2b2d4:	2589883a 	add	r4,r4,r22
   2b2d8:	a8802c36 	bltu	r21,r2,2b38c <__divdf3+0x6ec>
   2b2dc:	a880a426 	beq	r21,r2,2b570 <__divdf3+0x8d0>
   2b2e0:	9cc00054 	ori	r19,r19,1
   2b2e4:	9200ffc4 	addi	r8,r18,1023
   2b2e8:	023f270e 	bge	zero,r8,2af88 <__alt_data_end+0xfffeea68>
   2b2ec:	988001cc 	andi	r2,r19,7
   2b2f0:	10000726 	beq	r2,zero,2b310 <__divdf3+0x670>
   2b2f4:	990003cc 	andi	r4,r19,15
   2b2f8:	00800104 	movi	r2,4
   2b2fc:	20800426 	beq	r4,r2,2b310 <__divdf3+0x670>
   2b300:	9885883a 	add	r2,r19,r2
   2b304:	14e7803a 	cmpltu	r19,r2,r19
   2b308:	8ce3883a 	add	r17,r17,r19
   2b30c:	1027883a 	mov	r19,r2
   2b310:	8880402c 	andhi	r2,r17,256
   2b314:	10000426 	beq	r2,zero,2b328 <__divdf3+0x688>
   2b318:	00bfc034 	movhi	r2,65280
   2b31c:	10bfffc4 	addi	r2,r2,-1
   2b320:	92010004 	addi	r8,r18,1024
   2b324:	88a2703a 	and	r17,r17,r2
   2b328:	0081ff84 	movi	r2,2046
   2b32c:	123eb616 	blt	r2,r8,2ae08 <__alt_data_end+0xfffee8e8>
   2b330:	9826d0fa 	srli	r19,r19,3
   2b334:	8804977a 	slli	r2,r17,29
   2b338:	8820927a 	slli	r16,r17,9
   2b33c:	4201ffcc 	andi	r8,r8,2047
   2b340:	14e6b03a 	or	r19,r2,r19
   2b344:	800ad33a 	srli	r5,r16,12
   2b348:	a180004c 	andi	r6,r20,1
   2b34c:	003eb206 	br	2ae18 <__alt_data_end+0xfffee8f8>
   2b350:	008000c4 	movi	r2,3
   2b354:	4080ac26 	beq	r8,r2,2b608 <__divdf3+0x968>
   2b358:	00800044 	movi	r2,1
   2b35c:	4080591e 	bne	r8,r2,2b4c4 <__divdf3+0x824>
   2b360:	e00d883a 	mov	r6,fp
   2b364:	0011883a 	mov	r8,zero
   2b368:	000b883a 	mov	r5,zero
   2b36c:	0027883a 	mov	r19,zero
   2b370:	003ea906 	br	2ae18 <__alt_data_end+0xfffee8f8>
   2b374:	00800434 	movhi	r2,16
   2b378:	89400234 	orhi	r5,r17,8
   2b37c:	10bfffc4 	addi	r2,r2,-1
   2b380:	b00d883a 	mov	r6,r22
   2b384:	288a703a 	and	r5,r5,r2
   2b388:	003efd06 	br	2af80 <__alt_data_end+0xfffeea60>
   2b38c:	adcf883a 	add	r7,r21,r23
   2b390:	997fffc4 	addi	r5,r19,-1
   2b394:	3dc0412e 	bgeu	r7,r23,2b49c <__divdf3+0x7fc>
   2b398:	2827883a 	mov	r19,r5
   2b39c:	38bfd01e 	bne	r7,r2,2b2e0 <__alt_data_end+0xfffeedc0>
   2b3a0:	d8c00117 	ldw	r3,4(sp)
   2b3a4:	193fce1e 	bne	r3,r4,2b2e0 <__alt_data_end+0xfffeedc0>
   2b3a8:	003fce06 	br	2b2e4 <__alt_data_end+0xfffeedc4>
   2b3ac:	d9800215 	stw	r6,8(sp)
   2b3b0:	d9c00515 	stw	r7,20(sp)
   2b3b4:	002cb9c0 	call	2cb9c <__clzsi2>
   2b3b8:	10c00804 	addi	r3,r2,32
   2b3bc:	010009c4 	movi	r4,39
   2b3c0:	d9800217 	ldw	r6,8(sp)
   2b3c4:	d9c00517 	ldw	r7,20(sp)
   2b3c8:	20feb20e 	bge	r4,r3,2ae94 <__alt_data_end+0xfffee974>
   2b3cc:	117ffe04 	addi	r5,r2,-8
   2b3d0:	a162983a 	sll	r17,r20,r5
   2b3d4:	0027883a 	mov	r19,zero
   2b3d8:	003eb506 	br	2aeb0 <__alt_data_end+0xfffee990>
   2b3dc:	3009883a 	mov	r4,r6
   2b3e0:	d9800215 	stw	r6,8(sp)
   2b3e4:	da000315 	stw	r8,12(sp)
   2b3e8:	da400415 	stw	r9,16(sp)
   2b3ec:	002cb9c0 	call	2cb9c <__clzsi2>
   2b3f0:	10c00804 	addi	r3,r2,32
   2b3f4:	010009c4 	movi	r4,39
   2b3f8:	d9800217 	ldw	r6,8(sp)
   2b3fc:	da000317 	ldw	r8,12(sp)
   2b400:	da400417 	ldw	r9,16(sp)
   2b404:	20fec10e 	bge	r4,r3,2af0c <__alt_data_end+0xfffee9ec>
   2b408:	10bffe04 	addi	r2,r2,-8
   2b40c:	a8a0983a 	sll	r16,r21,r2
   2b410:	002b883a 	mov	r21,zero
   2b414:	003ec406 	br	2af28 <__alt_data_end+0xfffeea08>
   2b418:	d8c00117 	ldw	r3,4(sp)
   2b41c:	b0ed883a 	add	r22,r22,r3
   2b420:	b0c5803a 	cmpltu	r2,r22,r3
   2b424:	15c5883a 	add	r2,r2,r23
   2b428:	11cf883a 	add	r7,r2,r7
   2b42c:	88bfffc4 	addi	r2,r17,-1
   2b430:	b9c00d2e 	bgeu	r23,r7,2b468 <__divdf3+0x7c8>
   2b434:	39003f36 	bltu	r7,r4,2b534 <__divdf3+0x894>
   2b438:	21c06a26 	beq	r4,r7,2b5e4 <__divdf3+0x944>
   2b43c:	3909c83a 	sub	r4,r7,r4
   2b440:	1023883a 	mov	r17,r2
   2b444:	003f4f06 	br	2b184 <__alt_data_end+0xfffeec64>
   2b448:	9d7ee536 	bltu	r19,r21,2afe0 <__alt_data_end+0xfffeeac0>
   2b44c:	982ed07a 	srli	r23,r19,1
   2b450:	880497fa 	slli	r2,r17,31
   2b454:	8810d07a 	srli	r8,r17,1
   2b458:	982c97fa 	slli	r22,r19,31
   2b45c:	b884b03a 	or	r2,r23,r2
   2b460:	d8800015 	stw	r2,0(sp)
   2b464:	003ee206 	br	2aff0 <__alt_data_end+0xfffeead0>
   2b468:	3dfff41e 	bne	r7,r23,2b43c <__alt_data_end+0xfffeef1c>
   2b46c:	d8c00117 	ldw	r3,4(sp)
   2b470:	b0fff02e 	bgeu	r22,r3,2b434 <__alt_data_end+0xfffeef14>
   2b474:	b909c83a 	sub	r4,r23,r4
   2b478:	1023883a 	mov	r17,r2
   2b47c:	003f4106 	br	2b184 <__alt_data_end+0xfffeec64>
   2b480:	1021883a 	mov	r16,r2
   2b484:	003f1106 	br	2b0cc <__alt_data_end+0xfffeebac>
   2b488:	1023883a 	mov	r17,r2
   2b48c:	003ef706 	br	2b06c <__alt_data_end+0xfffeeb4c>
   2b490:	b23fe136 	bltu	r22,r8,2b418 <__alt_data_end+0xfffeeef8>
   2b494:	0009883a 	mov	r4,zero
   2b498:	003f3a06 	br	2b184 <__alt_data_end+0xfffeec64>
   2b49c:	38802c36 	bltu	r7,r2,2b550 <__divdf3+0x8b0>
   2b4a0:	11c05326 	beq	r2,r7,2b5f0 <__divdf3+0x950>
   2b4a4:	2827883a 	mov	r19,r5
   2b4a8:	003f8d06 	br	2b2e0 <__alt_data_end+0xfffeedc0>
   2b4ac:	04ffffc4 	movi	r19,-1
   2b4b0:	003f8c06 	br	2b2e4 <__alt_data_end+0xfffeedc4>
   2b4b4:	1011883a 	mov	r8,r2
   2b4b8:	003f4d06 	br	2b1f0 <__alt_data_end+0xfffeecd0>
   2b4bc:	1013883a 	mov	r9,r2
   2b4c0:	003f6406 	br	2b254 <__alt_data_end+0xfffeed34>
   2b4c4:	e029883a 	mov	r20,fp
   2b4c8:	003f8606 	br	2b2e4 <__alt_data_end+0xfffeedc4>
   2b4cc:	008007c4 	movi	r2,31
   2b4d0:	14002a16 	blt	r2,r16,2b57c <__divdf3+0x8dc>
   2b4d4:	91410784 	addi	r5,r18,1054
   2b4d8:	9c0cd83a 	srl	r6,r19,r16
   2b4dc:	8948983a 	sll	r4,r17,r5
   2b4e0:	9944983a 	sll	r2,r19,r5
   2b4e4:	8c20d83a 	srl	r16,r17,r16
   2b4e8:	3108b03a 	or	r4,r6,r4
   2b4ec:	1004c03a 	cmpne	r2,r2,zero
   2b4f0:	2084b03a 	or	r2,r4,r2
   2b4f4:	110001cc 	andi	r4,r2,7
   2b4f8:	20000726 	beq	r4,zero,2b518 <__divdf3+0x878>
   2b4fc:	114003cc 	andi	r5,r2,15
   2b500:	01000104 	movi	r4,4
   2b504:	29000426 	beq	r5,r4,2b518 <__divdf3+0x878>
   2b508:	11000104 	addi	r4,r2,4
   2b50c:	2085803a 	cmpltu	r2,r4,r2
   2b510:	80a1883a 	add	r16,r16,r2
   2b514:	2005883a 	mov	r2,r4
   2b518:	8100202c 	andhi	r4,r16,128
   2b51c:	20002d26 	beq	r4,zero,2b5d4 <__divdf3+0x934>
   2b520:	a180004c 	andi	r6,r20,1
   2b524:	02000044 	movi	r8,1
   2b528:	000b883a 	mov	r5,zero
   2b52c:	0027883a 	mov	r19,zero
   2b530:	003e3906 	br	2ae18 <__alt_data_end+0xfffee8f8>
   2b534:	d8c00117 	ldw	r3,4(sp)
   2b538:	8c7fff84 	addi	r17,r17,-2
   2b53c:	b0ed883a 	add	r22,r22,r3
   2b540:	b0c5803a 	cmpltu	r2,r22,r3
   2b544:	15c5883a 	add	r2,r2,r23
   2b548:	11cf883a 	add	r7,r2,r7
   2b54c:	003f0c06 	br	2b180 <__alt_data_end+0xfffeec60>
   2b550:	d8c00117 	ldw	r3,4(sp)
   2b554:	997fff84 	addi	r5,r19,-2
   2b558:	18d1883a 	add	r8,r3,r3
   2b55c:	40c7803a 	cmpltu	r3,r8,r3
   2b560:	1dcd883a 	add	r6,r3,r23
   2b564:	398f883a 	add	r7,r7,r6
   2b568:	da000115 	stw	r8,4(sp)
   2b56c:	003f8a06 	br	2b398 <__alt_data_end+0xfffeee78>
   2b570:	203f861e 	bne	r4,zero,2b38c <__alt_data_end+0xfffeee6c>
   2b574:	d8000115 	stw	zero,4(sp)
   2b578:	003f8906 	br	2b3a0 <__alt_data_end+0xfffeee80>
   2b57c:	00bef884 	movi	r2,-1054
   2b580:	1485c83a 	sub	r2,r2,r18
   2b584:	01000804 	movi	r4,32
   2b588:	8884d83a 	srl	r2,r17,r2
   2b58c:	81001c26 	beq	r16,r4,2b600 <__divdf3+0x960>
   2b590:	91010f84 	addi	r4,r18,1086
   2b594:	8908983a 	sll	r4,r17,r4
   2b598:	24c8b03a 	or	r4,r4,r19
   2b59c:	2008c03a 	cmpne	r4,r4,zero
   2b5a0:	2084b03a 	or	r2,r4,r2
   2b5a4:	140001cc 	andi	r16,r2,7
   2b5a8:	8000061e 	bne	r16,zero,2b5c4 <__divdf3+0x924>
   2b5ac:	000b883a 	mov	r5,zero
   2b5b0:	1004d0fa 	srli	r2,r2,3
   2b5b4:	a180004c 	andi	r6,r20,1
   2b5b8:	0011883a 	mov	r8,zero
   2b5bc:	1426b03a 	or	r19,r2,r16
   2b5c0:	003e1506 	br	2ae18 <__alt_data_end+0xfffee8f8>
   2b5c4:	114003cc 	andi	r5,r2,15
   2b5c8:	01000104 	movi	r4,4
   2b5cc:	0021883a 	mov	r16,zero
   2b5d0:	293fcd1e 	bne	r5,r4,2b508 <__alt_data_end+0xfffeefe8>
   2b5d4:	800a927a 	slli	r5,r16,9
   2b5d8:	8020977a 	slli	r16,r16,29
   2b5dc:	280ad33a 	srli	r5,r5,12
   2b5e0:	003ff306 	br	2b5b0 <__alt_data_end+0xfffef090>
   2b5e4:	b23fd336 	bltu	r22,r8,2b534 <__alt_data_end+0xfffef014>
   2b5e8:	1023883a 	mov	r17,r2
   2b5ec:	003fa906 	br	2b494 <__alt_data_end+0xfffeef74>
   2b5f0:	d8c00117 	ldw	r3,4(sp)
   2b5f4:	193fd636 	bltu	r3,r4,2b550 <__alt_data_end+0xfffef030>
   2b5f8:	2827883a 	mov	r19,r5
   2b5fc:	003f6806 	br	2b3a0 <__alt_data_end+0xfffeee80>
   2b600:	0009883a 	mov	r4,zero
   2b604:	003fe406 	br	2b598 <__alt_data_end+0xfffef078>
   2b608:	00800434 	movhi	r2,16
   2b60c:	89400234 	orhi	r5,r17,8
   2b610:	10bfffc4 	addi	r2,r2,-1
   2b614:	e00d883a 	mov	r6,fp
   2b618:	288a703a 	and	r5,r5,r2
   2b61c:	003e5806 	br	2af80 <__alt_data_end+0xfffeea60>

0002b620 <__eqdf2>:
   2b620:	2804d53a 	srli	r2,r5,20
   2b624:	3806d53a 	srli	r3,r7,20
   2b628:	02000434 	movhi	r8,16
   2b62c:	423fffc4 	addi	r8,r8,-1
   2b630:	1081ffcc 	andi	r2,r2,2047
   2b634:	0241ffc4 	movi	r9,2047
   2b638:	2a14703a 	and	r10,r5,r8
   2b63c:	18c1ffcc 	andi	r3,r3,2047
   2b640:	3a10703a 	and	r8,r7,r8
   2b644:	280ad7fa 	srli	r5,r5,31
   2b648:	380ed7fa 	srli	r7,r7,31
   2b64c:	12400f26 	beq	r2,r9,2b68c <__eqdf2+0x6c>
   2b650:	0241ffc4 	movi	r9,2047
   2b654:	1a400326 	beq	r3,r9,2b664 <__eqdf2+0x44>
   2b658:	10c00526 	beq	r2,r3,2b670 <__eqdf2+0x50>
   2b65c:	00800044 	movi	r2,1
   2b660:	f800283a 	ret
   2b664:	4192b03a 	or	r9,r8,r6
   2b668:	483ffc1e 	bne	r9,zero,2b65c <__alt_data_end+0xfffef13c>
   2b66c:	10fffb1e 	bne	r2,r3,2b65c <__alt_data_end+0xfffef13c>
   2b670:	523ffa1e 	bne	r10,r8,2b65c <__alt_data_end+0xfffef13c>
   2b674:	21bff91e 	bne	r4,r6,2b65c <__alt_data_end+0xfffef13c>
   2b678:	29c00826 	beq	r5,r7,2b69c <__eqdf2+0x7c>
   2b67c:	103ff71e 	bne	r2,zero,2b65c <__alt_data_end+0xfffef13c>
   2b680:	5104b03a 	or	r2,r10,r4
   2b684:	1004c03a 	cmpne	r2,r2,zero
   2b688:	f800283a 	ret
   2b68c:	5112b03a 	or	r9,r10,r4
   2b690:	483fef26 	beq	r9,zero,2b650 <__alt_data_end+0xfffef130>
   2b694:	00800044 	movi	r2,1
   2b698:	f800283a 	ret
   2b69c:	0005883a 	mov	r2,zero
   2b6a0:	f800283a 	ret

0002b6a4 <__gedf2>:
   2b6a4:	2804d53a 	srli	r2,r5,20
   2b6a8:	3806d53a 	srli	r3,r7,20
   2b6ac:	02000434 	movhi	r8,16
   2b6b0:	423fffc4 	addi	r8,r8,-1
   2b6b4:	0241ffc4 	movi	r9,2047
   2b6b8:	1081ffcc 	andi	r2,r2,2047
   2b6bc:	2a14703a 	and	r10,r5,r8
   2b6c0:	1a46703a 	and	r3,r3,r9
   2b6c4:	3a10703a 	and	r8,r7,r8
   2b6c8:	280ad7fa 	srli	r5,r5,31
   2b6cc:	380ed7fa 	srli	r7,r7,31
   2b6d0:	12400b26 	beq	r2,r9,2b700 <__gedf2+0x5c>
   2b6d4:	1a401626 	beq	r3,r9,2b730 <__gedf2+0x8c>
   2b6d8:	10000c1e 	bne	r2,zero,2b70c <__gedf2+0x68>
   2b6dc:	5112b03a 	or	r9,r10,r4
   2b6e0:	4813003a 	cmpeq	r9,r9,zero
   2b6e4:	4817883a 	mov	r11,r9
   2b6e8:	18000c1e 	bne	r3,zero,2b71c <__gedf2+0x78>
   2b6ec:	4198b03a 	or	r12,r8,r6
   2b6f0:	60000a1e 	bne	r12,zero,2b71c <__gedf2+0x78>
   2b6f4:	48001326 	beq	r9,zero,2b744 <__gedf2+0xa0>
   2b6f8:	0005883a 	mov	r2,zero
   2b6fc:	f800283a 	ret
   2b700:	5112b03a 	or	r9,r10,r4
   2b704:	4800191e 	bne	r9,zero,2b76c <__gedf2+0xc8>
   2b708:	18800926 	beq	r3,r2,2b730 <__gedf2+0x8c>
   2b70c:	18000b1e 	bne	r3,zero,2b73c <__gedf2+0x98>
   2b710:	4192b03a 	or	r9,r8,r6
   2b714:	0017883a 	mov	r11,zero
   2b718:	48000a26 	beq	r9,zero,2b744 <__gedf2+0xa0>
   2b71c:	39c03fcc 	andi	r7,r7,255
   2b720:	58000726 	beq	r11,zero,2b740 <__gedf2+0x9c>
   2b724:	3800081e 	bne	r7,zero,2b748 <__gedf2+0xa4>
   2b728:	00bfffc4 	movi	r2,-1
   2b72c:	f800283a 	ret
   2b730:	4192b03a 	or	r9,r8,r6
   2b734:	48000d1e 	bne	r9,zero,2b76c <__gedf2+0xc8>
   2b738:	103fe826 	beq	r2,zero,2b6dc <__alt_data_end+0xfffef1bc>
   2b73c:	39c03fcc 	andi	r7,r7,255
   2b740:	29c00326 	beq	r5,r7,2b750 <__gedf2+0xac>
   2b744:	283ff81e 	bne	r5,zero,2b728 <__alt_data_end+0xfffef208>
   2b748:	00800044 	movi	r2,1
   2b74c:	f800283a 	ret
   2b750:	18bffc16 	blt	r3,r2,2b744 <__alt_data_end+0xfffef224>
   2b754:	10c00316 	blt	r2,r3,2b764 <__gedf2+0xc0>
   2b758:	42bffa36 	bltu	r8,r10,2b744 <__alt_data_end+0xfffef224>
   2b75c:	52000526 	beq	r10,r8,2b774 <__gedf2+0xd0>
   2b760:	523fe52e 	bgeu	r10,r8,2b6f8 <__alt_data_end+0xfffef1d8>
   2b764:	283ff026 	beq	r5,zero,2b728 <__alt_data_end+0xfffef208>
   2b768:	003ff706 	br	2b748 <__alt_data_end+0xfffef228>
   2b76c:	00bfff84 	movi	r2,-2
   2b770:	f800283a 	ret
   2b774:	313ff336 	bltu	r6,r4,2b744 <__alt_data_end+0xfffef224>
   2b778:	21bfdf2e 	bgeu	r4,r6,2b6f8 <__alt_data_end+0xfffef1d8>
   2b77c:	283fea26 	beq	r5,zero,2b728 <__alt_data_end+0xfffef208>
   2b780:	003ff106 	br	2b748 <__alt_data_end+0xfffef228>

0002b784 <__ledf2>:
   2b784:	2804d53a 	srli	r2,r5,20
   2b788:	3810d53a 	srli	r8,r7,20
   2b78c:	00c00434 	movhi	r3,16
   2b790:	18ffffc4 	addi	r3,r3,-1
   2b794:	0241ffc4 	movi	r9,2047
   2b798:	1081ffcc 	andi	r2,r2,2047
   2b79c:	28d4703a 	and	r10,r5,r3
   2b7a0:	4250703a 	and	r8,r8,r9
   2b7a4:	38c6703a 	and	r3,r7,r3
   2b7a8:	280ad7fa 	srli	r5,r5,31
   2b7ac:	380ed7fa 	srli	r7,r7,31
   2b7b0:	12400b26 	beq	r2,r9,2b7e0 <__ledf2+0x5c>
   2b7b4:	42401926 	beq	r8,r9,2b81c <__ledf2+0x98>
   2b7b8:	10000c1e 	bne	r2,zero,2b7ec <__ledf2+0x68>
   2b7bc:	5112b03a 	or	r9,r10,r4
   2b7c0:	4813003a 	cmpeq	r9,r9,zero
   2b7c4:	4817883a 	mov	r11,r9
   2b7c8:	40000f26 	beq	r8,zero,2b808 <__ledf2+0x84>
   2b7cc:	39c03fcc 	andi	r7,r7,255
   2b7d0:	58001826 	beq	r11,zero,2b834 <__ledf2+0xb0>
   2b7d4:	38000a1e 	bne	r7,zero,2b800 <__ledf2+0x7c>
   2b7d8:	00bfffc4 	movi	r2,-1
   2b7dc:	f800283a 	ret
   2b7e0:	5112b03a 	or	r9,r10,r4
   2b7e4:	48000f1e 	bne	r9,zero,2b824 <__ledf2+0xa0>
   2b7e8:	40800c26 	beq	r8,r2,2b81c <__ledf2+0x98>
   2b7ec:	4000101e 	bne	r8,zero,2b830 <__ledf2+0xac>
   2b7f0:	1992b03a 	or	r9,r3,r6
   2b7f4:	0017883a 	mov	r11,zero
   2b7f8:	483ff41e 	bne	r9,zero,2b7cc <__alt_data_end+0xfffef2ac>
   2b7fc:	283ff61e 	bne	r5,zero,2b7d8 <__alt_data_end+0xfffef2b8>
   2b800:	00800044 	movi	r2,1
   2b804:	f800283a 	ret
   2b808:	1998b03a 	or	r12,r3,r6
   2b80c:	603fef1e 	bne	r12,zero,2b7cc <__alt_data_end+0xfffef2ac>
   2b810:	483ffa26 	beq	r9,zero,2b7fc <__alt_data_end+0xfffef2dc>
   2b814:	0005883a 	mov	r2,zero
   2b818:	f800283a 	ret
   2b81c:	1992b03a 	or	r9,r3,r6
   2b820:	48000226 	beq	r9,zero,2b82c <__ledf2+0xa8>
   2b824:	00800084 	movi	r2,2
   2b828:	f800283a 	ret
   2b82c:	103fe326 	beq	r2,zero,2b7bc <__alt_data_end+0xfffef29c>
   2b830:	39c03fcc 	andi	r7,r7,255
   2b834:	29fff11e 	bne	r5,r7,2b7fc <__alt_data_end+0xfffef2dc>
   2b838:	40bff016 	blt	r8,r2,2b7fc <__alt_data_end+0xfffef2dc>
   2b83c:	12000316 	blt	r2,r8,2b84c <__ledf2+0xc8>
   2b840:	1abfee36 	bltu	r3,r10,2b7fc <__alt_data_end+0xfffef2dc>
   2b844:	50c00326 	beq	r10,r3,2b854 <__ledf2+0xd0>
   2b848:	50fff22e 	bgeu	r10,r3,2b814 <__alt_data_end+0xfffef2f4>
   2b84c:	283fe226 	beq	r5,zero,2b7d8 <__alt_data_end+0xfffef2b8>
   2b850:	003feb06 	br	2b800 <__alt_data_end+0xfffef2e0>
   2b854:	313fe936 	bltu	r6,r4,2b7fc <__alt_data_end+0xfffef2dc>
   2b858:	21bfee2e 	bgeu	r4,r6,2b814 <__alt_data_end+0xfffef2f4>
   2b85c:	283fde26 	beq	r5,zero,2b7d8 <__alt_data_end+0xfffef2b8>
   2b860:	003fe706 	br	2b800 <__alt_data_end+0xfffef2e0>

0002b864 <__muldf3>:
   2b864:	deffee04 	addi	sp,sp,-72
   2b868:	dd000c15 	stw	r20,48(sp)
   2b86c:	2828d53a 	srli	r20,r5,20
   2b870:	dd400d15 	stw	r21,52(sp)
   2b874:	282ad7fa 	srli	r21,r5,31
   2b878:	dc000815 	stw	r16,32(sp)
   2b87c:	04000434 	movhi	r16,16
   2b880:	ddc00f15 	stw	r23,60(sp)
   2b884:	dcc00b15 	stw	r19,44(sp)
   2b888:	dc800a15 	stw	r18,40(sp)
   2b88c:	843fffc4 	addi	r16,r16,-1
   2b890:	dfc01115 	stw	ra,68(sp)
   2b894:	df001015 	stw	fp,64(sp)
   2b898:	dd800e15 	stw	r22,56(sp)
   2b89c:	dc400915 	stw	r17,36(sp)
   2b8a0:	a501ffcc 	andi	r20,r20,2047
   2b8a4:	2025883a 	mov	r18,r4
   2b8a8:	202f883a 	mov	r23,r4
   2b8ac:	2c20703a 	and	r16,r5,r16
   2b8b0:	a827883a 	mov	r19,r21
   2b8b4:	aa403fcc 	andi	r9,r21,255
   2b8b8:	a0005926 	beq	r20,zero,2ba20 <__muldf3+0x1bc>
   2b8bc:	0081ffc4 	movi	r2,2047
   2b8c0:	a0803426 	beq	r20,r2,2b994 <__muldf3+0x130>
   2b8c4:	84000434 	orhi	r16,r16,16
   2b8c8:	2004d77a 	srli	r2,r4,29
   2b8cc:	802090fa 	slli	r16,r16,3
   2b8d0:	202e90fa 	slli	r23,r4,3
   2b8d4:	a53f0044 	addi	r20,r20,-1023
   2b8d8:	80a0b03a 	or	r16,r16,r2
   2b8dc:	000b883a 	mov	r5,zero
   2b8e0:	0039883a 	mov	fp,zero
   2b8e4:	3806d53a 	srli	r3,r7,20
   2b8e8:	382cd7fa 	srli	r22,r7,31
   2b8ec:	00800434 	movhi	r2,16
   2b8f0:	10bfffc4 	addi	r2,r2,-1
   2b8f4:	18c1ffcc 	andi	r3,r3,2047
   2b8f8:	3025883a 	mov	r18,r6
   2b8fc:	38a2703a 	and	r17,r7,r2
   2b900:	b2803fcc 	andi	r10,r22,255
   2b904:	18006426 	beq	r3,zero,2ba98 <__muldf3+0x234>
   2b908:	0081ffc4 	movi	r2,2047
   2b90c:	18805c26 	beq	r3,r2,2ba80 <__muldf3+0x21c>
   2b910:	8c400434 	orhi	r17,r17,16
   2b914:	3004d77a 	srli	r2,r6,29
   2b918:	882290fa 	slli	r17,r17,3
   2b91c:	302490fa 	slli	r18,r6,3
   2b920:	18ff0044 	addi	r3,r3,-1023
   2b924:	88a2b03a 	or	r17,r17,r2
   2b928:	000f883a 	mov	r7,zero
   2b92c:	394ab03a 	or	r5,r7,r5
   2b930:	280a90ba 	slli	r5,r5,2
   2b934:	008000f4 	movhi	r2,3
   2b938:	10ae5504 	addi	r2,r2,-18092
   2b93c:	288b883a 	add	r5,r5,r2
   2b940:	28800017 	ldw	r2,0(r5)
   2b944:	a0c7883a 	add	r3,r20,r3
   2b948:	b54cf03a 	xor	r6,r22,r21
   2b94c:	1a000044 	addi	r8,r3,1
   2b950:	1000683a 	jmp	r2
   2b954:	0002bb98 	cmpnei	zero,zero,2798
   2b958:	0002bb84 	movi	zero,2798
   2b95c:	0002bb84 	movi	zero,2798
   2b960:	0002bb70 	cmpltui	zero,zero,2797
   2b964:	0002b9b0 	cmpltui	zero,zero,2790
   2b968:	0002b9b0 	cmpltui	zero,zero,2790
   2b96c:	0002bb58 	cmpnei	zero,zero,2797
   2b970:	0002bb70 	cmpltui	zero,zero,2797
   2b974:	0002b9b0 	cmpltui	zero,zero,2790
   2b978:	0002bb58 	cmpnei	zero,zero,2797
   2b97c:	0002b9b0 	cmpltui	zero,zero,2790
   2b980:	0002bb70 	cmpltui	zero,zero,2797
   2b984:	0002b9b4 	movhi	zero,2790
   2b988:	0002b9b4 	movhi	zero,2790
   2b98c:	0002b9b4 	movhi	zero,2790
   2b990:	0002bed4 	movui	zero,2811
   2b994:	8104b03a 	or	r2,r16,r4
   2b998:	10006c1e 	bne	r2,zero,2bb4c <__muldf3+0x2e8>
   2b99c:	01400204 	movi	r5,8
   2b9a0:	0021883a 	mov	r16,zero
   2b9a4:	002f883a 	mov	r23,zero
   2b9a8:	07000084 	movi	fp,2
   2b9ac:	003fcd06 	br	2b8e4 <__alt_data_end+0xfffef3c4>
   2b9b0:	3013883a 	mov	r9,r6
   2b9b4:	00800084 	movi	r2,2
   2b9b8:	e080501e 	bne	fp,r2,2bafc <__muldf3+0x298>
   2b9bc:	4cc0004c 	andi	r19,r9,1
   2b9c0:	0101ffc4 	movi	r4,2047
   2b9c4:	0021883a 	mov	r16,zero
   2b9c8:	002f883a 	mov	r23,zero
   2b9cc:	2008953a 	slli	r4,r4,20
   2b9d0:	98c03fcc 	andi	r3,r19,255
   2b9d4:	04400434 	movhi	r17,16
   2b9d8:	8c7fffc4 	addi	r17,r17,-1
   2b9dc:	180697fa 	slli	r3,r3,31
   2b9e0:	8460703a 	and	r16,r16,r17
   2b9e4:	8120b03a 	or	r16,r16,r4
   2b9e8:	80c6b03a 	or	r3,r16,r3
   2b9ec:	b805883a 	mov	r2,r23
   2b9f0:	dfc01117 	ldw	ra,68(sp)
   2b9f4:	df001017 	ldw	fp,64(sp)
   2b9f8:	ddc00f17 	ldw	r23,60(sp)
   2b9fc:	dd800e17 	ldw	r22,56(sp)
   2ba00:	dd400d17 	ldw	r21,52(sp)
   2ba04:	dd000c17 	ldw	r20,48(sp)
   2ba08:	dcc00b17 	ldw	r19,44(sp)
   2ba0c:	dc800a17 	ldw	r18,40(sp)
   2ba10:	dc400917 	ldw	r17,36(sp)
   2ba14:	dc000817 	ldw	r16,32(sp)
   2ba18:	dec01204 	addi	sp,sp,72
   2ba1c:	f800283a 	ret
   2ba20:	8104b03a 	or	r2,r16,r4
   2ba24:	10004426 	beq	r2,zero,2bb38 <__muldf3+0x2d4>
   2ba28:	80014b26 	beq	r16,zero,2bf58 <__muldf3+0x6f4>
   2ba2c:	8009883a 	mov	r4,r16
   2ba30:	d9800715 	stw	r6,28(sp)
   2ba34:	d9c00215 	stw	r7,8(sp)
   2ba38:	da400415 	stw	r9,16(sp)
   2ba3c:	002cb9c0 	call	2cb9c <__clzsi2>
   2ba40:	d9800717 	ldw	r6,28(sp)
   2ba44:	d9c00217 	ldw	r7,8(sp)
   2ba48:	da400417 	ldw	r9,16(sp)
   2ba4c:	1007883a 	mov	r3,r2
   2ba50:	01000a04 	movi	r4,40
   2ba54:	1dfffe04 	addi	r23,r3,-8
   2ba58:	20c9c83a 	sub	r4,r4,r3
   2ba5c:	85e0983a 	sll	r16,r16,r23
   2ba60:	9108d83a 	srl	r4,r18,r4
   2ba64:	95ee983a 	sll	r23,r18,r23
   2ba68:	2420b03a 	or	r16,r4,r16
   2ba6c:	053f0344 	movi	r20,-1011
   2ba70:	a0e9c83a 	sub	r20,r20,r3
   2ba74:	000b883a 	mov	r5,zero
   2ba78:	0039883a 	mov	fp,zero
   2ba7c:	003f9906 	br	2b8e4 <__alt_data_end+0xfffef3c4>
   2ba80:	8984b03a 	or	r2,r17,r6
   2ba84:	10002a1e 	bne	r2,zero,2bb30 <__muldf3+0x2cc>
   2ba88:	0023883a 	mov	r17,zero
   2ba8c:	0025883a 	mov	r18,zero
   2ba90:	01c00084 	movi	r7,2
   2ba94:	003fa506 	br	2b92c <__alt_data_end+0xfffef40c>
   2ba98:	8984b03a 	or	r2,r17,r6
   2ba9c:	10002026 	beq	r2,zero,2bb20 <__muldf3+0x2bc>
   2baa0:	88011c26 	beq	r17,zero,2bf14 <__muldf3+0x6b0>
   2baa4:	8809883a 	mov	r4,r17
   2baa8:	d9400215 	stw	r5,8(sp)
   2baac:	d9800715 	stw	r6,28(sp)
   2bab0:	da400415 	stw	r9,16(sp)
   2bab4:	da800315 	stw	r10,12(sp)
   2bab8:	002cb9c0 	call	2cb9c <__clzsi2>
   2babc:	d9400217 	ldw	r5,8(sp)
   2bac0:	d9800717 	ldw	r6,28(sp)
   2bac4:	da400417 	ldw	r9,16(sp)
   2bac8:	da800317 	ldw	r10,12(sp)
   2bacc:	1007883a 	mov	r3,r2
   2bad0:	01000a04 	movi	r4,40
   2bad4:	1cbffe04 	addi	r18,r3,-8
   2bad8:	20c9c83a 	sub	r4,r4,r3
   2badc:	8ca2983a 	sll	r17,r17,r18
   2bae0:	3108d83a 	srl	r4,r6,r4
   2bae4:	34a4983a 	sll	r18,r6,r18
   2bae8:	2462b03a 	or	r17,r4,r17
   2baec:	00bf0344 	movi	r2,-1011
   2baf0:	10c7c83a 	sub	r3,r2,r3
   2baf4:	000f883a 	mov	r7,zero
   2baf8:	003f8c06 	br	2b92c <__alt_data_end+0xfffef40c>
   2bafc:	008000c4 	movi	r2,3
   2bb00:	e0816d26 	beq	fp,r2,2c0b8 <__muldf3+0x854>
   2bb04:	00800044 	movi	r2,1
   2bb08:	e081321e 	bne	fp,r2,2bfd4 <__muldf3+0x770>
   2bb0c:	48a6703a 	and	r19,r9,r2
   2bb10:	0009883a 	mov	r4,zero
   2bb14:	0021883a 	mov	r16,zero
   2bb18:	002f883a 	mov	r23,zero
   2bb1c:	003fab06 	br	2b9cc <__alt_data_end+0xfffef4ac>
   2bb20:	0023883a 	mov	r17,zero
   2bb24:	0025883a 	mov	r18,zero
   2bb28:	01c00044 	movi	r7,1
   2bb2c:	003f7f06 	br	2b92c <__alt_data_end+0xfffef40c>
   2bb30:	01c000c4 	movi	r7,3
   2bb34:	003f7d06 	br	2b92c <__alt_data_end+0xfffef40c>
   2bb38:	01400104 	movi	r5,4
   2bb3c:	0021883a 	mov	r16,zero
   2bb40:	002f883a 	mov	r23,zero
   2bb44:	07000044 	movi	fp,1
   2bb48:	003f6606 	br	2b8e4 <__alt_data_end+0xfffef3c4>
   2bb4c:	01400304 	movi	r5,12
   2bb50:	070000c4 	movi	fp,3
   2bb54:	003f6306 	br	2b8e4 <__alt_data_end+0xfffef3c4>
   2bb58:	04000434 	movhi	r16,16
   2bb5c:	0027883a 	mov	r19,zero
   2bb60:	843fffc4 	addi	r16,r16,-1
   2bb64:	05ffffc4 	movi	r23,-1
   2bb68:	0101ffc4 	movi	r4,2047
   2bb6c:	003f9706 	br	2b9cc <__alt_data_end+0xfffef4ac>
   2bb70:	8821883a 	mov	r16,r17
   2bb74:	902f883a 	mov	r23,r18
   2bb78:	5013883a 	mov	r9,r10
   2bb7c:	3839883a 	mov	fp,r7
   2bb80:	003f8c06 	br	2b9b4 <__alt_data_end+0xfffef494>
   2bb84:	8821883a 	mov	r16,r17
   2bb88:	902f883a 	mov	r23,r18
   2bb8c:	3013883a 	mov	r9,r6
   2bb90:	3839883a 	mov	fp,r7
   2bb94:	003f8706 	br	2b9b4 <__alt_data_end+0xfffef494>
   2bb98:	b82ad43a 	srli	r21,r23,16
   2bb9c:	9038d43a 	srli	fp,r18,16
   2bba0:	bdffffcc 	andi	r23,r23,65535
   2bba4:	94bfffcc 	andi	r18,r18,65535
   2bba8:	9009883a 	mov	r4,r18
   2bbac:	b80b883a 	mov	r5,r23
   2bbb0:	d8c00515 	stw	r3,20(sp)
   2bbb4:	d9800715 	stw	r6,28(sp)
   2bbb8:	da000615 	stw	r8,24(sp)
   2bbbc:	002a3dc0 	call	2a3dc <__mulsi3>
   2bbc0:	9009883a 	mov	r4,r18
   2bbc4:	a80b883a 	mov	r5,r21
   2bbc8:	1029883a 	mov	r20,r2
   2bbcc:	002a3dc0 	call	2a3dc <__mulsi3>
   2bbd0:	e009883a 	mov	r4,fp
   2bbd4:	a80b883a 	mov	r5,r21
   2bbd8:	102d883a 	mov	r22,r2
   2bbdc:	002a3dc0 	call	2a3dc <__mulsi3>
   2bbe0:	e009883a 	mov	r4,fp
   2bbe4:	b80b883a 	mov	r5,r23
   2bbe8:	1027883a 	mov	r19,r2
   2bbec:	002a3dc0 	call	2a3dc <__mulsi3>
   2bbf0:	a008d43a 	srli	r4,r20,16
   2bbf4:	b085883a 	add	r2,r22,r2
   2bbf8:	d8c00517 	ldw	r3,20(sp)
   2bbfc:	110f883a 	add	r7,r2,r4
   2bc00:	d9800717 	ldw	r6,28(sp)
   2bc04:	da000617 	ldw	r8,24(sp)
   2bc08:	3d80022e 	bgeu	r7,r22,2bc14 <__muldf3+0x3b0>
   2bc0c:	00800074 	movhi	r2,1
   2bc10:	98a7883a 	add	r19,r19,r2
   2bc14:	3804943a 	slli	r2,r7,16
   2bc18:	380ed43a 	srli	r7,r7,16
   2bc1c:	882cd43a 	srli	r22,r17,16
   2bc20:	a53fffcc 	andi	r20,r20,65535
   2bc24:	8c7fffcc 	andi	r17,r17,65535
   2bc28:	1529883a 	add	r20,r2,r20
   2bc2c:	8809883a 	mov	r4,r17
   2bc30:	b80b883a 	mov	r5,r23
   2bc34:	d8c00515 	stw	r3,20(sp)
   2bc38:	d9800715 	stw	r6,28(sp)
   2bc3c:	da000615 	stw	r8,24(sp)
   2bc40:	d9c00015 	stw	r7,0(sp)
   2bc44:	dd000115 	stw	r20,4(sp)
   2bc48:	002a3dc0 	call	2a3dc <__mulsi3>
   2bc4c:	a80b883a 	mov	r5,r21
   2bc50:	8809883a 	mov	r4,r17
   2bc54:	d8800415 	stw	r2,16(sp)
   2bc58:	002a3dc0 	call	2a3dc <__mulsi3>
   2bc5c:	a80b883a 	mov	r5,r21
   2bc60:	b009883a 	mov	r4,r22
   2bc64:	1029883a 	mov	r20,r2
   2bc68:	002a3dc0 	call	2a3dc <__mulsi3>
   2bc6c:	b009883a 	mov	r4,r22
   2bc70:	b80b883a 	mov	r5,r23
   2bc74:	102b883a 	mov	r21,r2
   2bc78:	002a3dc0 	call	2a3dc <__mulsi3>
   2bc7c:	da400417 	ldw	r9,16(sp)
   2bc80:	a085883a 	add	r2,r20,r2
   2bc84:	d8c00517 	ldw	r3,20(sp)
   2bc88:	4808d43a 	srli	r4,r9,16
   2bc8c:	d9800717 	ldw	r6,28(sp)
   2bc90:	da000617 	ldw	r8,24(sp)
   2bc94:	1109883a 	add	r4,r2,r4
   2bc98:	2500022e 	bgeu	r4,r20,2bca4 <__muldf3+0x440>
   2bc9c:	00800074 	movhi	r2,1
   2bca0:	a8ab883a 	add	r21,r21,r2
   2bca4:	200e943a 	slli	r7,r4,16
   2bca8:	2004d43a 	srli	r2,r4,16
   2bcac:	802ed43a 	srli	r23,r16,16
   2bcb0:	843fffcc 	andi	r16,r16,65535
   2bcb4:	4d3fffcc 	andi	r20,r9,65535
   2bcb8:	9009883a 	mov	r4,r18
   2bcbc:	800b883a 	mov	r5,r16
   2bcc0:	3d29883a 	add	r20,r7,r20
   2bcc4:	d8c00515 	stw	r3,20(sp)
   2bcc8:	d9800715 	stw	r6,28(sp)
   2bccc:	da000615 	stw	r8,24(sp)
   2bcd0:	a8ab883a 	add	r21,r21,r2
   2bcd4:	002a3dc0 	call	2a3dc <__mulsi3>
   2bcd8:	9009883a 	mov	r4,r18
   2bcdc:	b80b883a 	mov	r5,r23
   2bce0:	d8800315 	stw	r2,12(sp)
   2bce4:	002a3dc0 	call	2a3dc <__mulsi3>
   2bce8:	e009883a 	mov	r4,fp
   2bcec:	b80b883a 	mov	r5,r23
   2bcf0:	1025883a 	mov	r18,r2
   2bcf4:	002a3dc0 	call	2a3dc <__mulsi3>
   2bcf8:	e009883a 	mov	r4,fp
   2bcfc:	800b883a 	mov	r5,r16
   2bd00:	d8800215 	stw	r2,8(sp)
   2bd04:	002a3dc0 	call	2a3dc <__mulsi3>
   2bd08:	da800317 	ldw	r10,12(sp)
   2bd0c:	d9400017 	ldw	r5,0(sp)
   2bd10:	9085883a 	add	r2,r18,r2
   2bd14:	5008d43a 	srli	r4,r10,16
   2bd18:	a153883a 	add	r9,r20,r5
   2bd1c:	d8c00517 	ldw	r3,20(sp)
   2bd20:	1109883a 	add	r4,r2,r4
   2bd24:	d9800717 	ldw	r6,28(sp)
   2bd28:	da000617 	ldw	r8,24(sp)
   2bd2c:	dac00217 	ldw	r11,8(sp)
   2bd30:	2480022e 	bgeu	r4,r18,2bd3c <__muldf3+0x4d8>
   2bd34:	00800074 	movhi	r2,1
   2bd38:	5897883a 	add	r11,r11,r2
   2bd3c:	200e943a 	slli	r7,r4,16
   2bd40:	2038d43a 	srli	fp,r4,16
   2bd44:	52bfffcc 	andi	r10,r10,65535
   2bd48:	3a8f883a 	add	r7,r7,r10
   2bd4c:	8809883a 	mov	r4,r17
   2bd50:	800b883a 	mov	r5,r16
   2bd54:	d8c00515 	stw	r3,20(sp)
   2bd58:	d9800715 	stw	r6,28(sp)
   2bd5c:	d9c00215 	stw	r7,8(sp)
   2bd60:	da000615 	stw	r8,24(sp)
   2bd64:	da400415 	stw	r9,16(sp)
   2bd68:	5f39883a 	add	fp,r11,fp
   2bd6c:	002a3dc0 	call	2a3dc <__mulsi3>
   2bd70:	8809883a 	mov	r4,r17
   2bd74:	b80b883a 	mov	r5,r23
   2bd78:	1025883a 	mov	r18,r2
   2bd7c:	002a3dc0 	call	2a3dc <__mulsi3>
   2bd80:	b009883a 	mov	r4,r22
   2bd84:	b80b883a 	mov	r5,r23
   2bd88:	d8800315 	stw	r2,12(sp)
   2bd8c:	002a3dc0 	call	2a3dc <__mulsi3>
   2bd90:	b009883a 	mov	r4,r22
   2bd94:	800b883a 	mov	r5,r16
   2bd98:	1023883a 	mov	r17,r2
   2bd9c:	002a3dc0 	call	2a3dc <__mulsi3>
   2bda0:	da800317 	ldw	r10,12(sp)
   2bda4:	9008d43a 	srli	r4,r18,16
   2bda8:	d8c00517 	ldw	r3,20(sp)
   2bdac:	5085883a 	add	r2,r10,r2
   2bdb0:	1109883a 	add	r4,r2,r4
   2bdb4:	d9800717 	ldw	r6,28(sp)
   2bdb8:	d9c00217 	ldw	r7,8(sp)
   2bdbc:	da000617 	ldw	r8,24(sp)
   2bdc0:	da400417 	ldw	r9,16(sp)
   2bdc4:	2280022e 	bgeu	r4,r10,2bdd0 <__muldf3+0x56c>
   2bdc8:	00800074 	movhi	r2,1
   2bdcc:	88a3883a 	add	r17,r17,r2
   2bdd0:	2004943a 	slli	r2,r4,16
   2bdd4:	94bfffcc 	andi	r18,r18,65535
   2bdd8:	4ce7883a 	add	r19,r9,r19
   2bddc:	14a5883a 	add	r18,r2,r18
   2bde0:	9d29803a 	cmpltu	r20,r19,r20
   2bde4:	9565883a 	add	r18,r18,r21
   2bde8:	9505883a 	add	r2,r18,r20
   2bdec:	99e7883a 	add	r19,r19,r7
   2bdf0:	99cf803a 	cmpltu	r7,r19,r7
   2bdf4:	e08b883a 	add	r5,fp,r2
   2bdf8:	2008d43a 	srli	r4,r4,16
   2bdfc:	29ef883a 	add	r23,r5,r7
   2be00:	1529803a 	cmpltu	r20,r2,r20
   2be04:	956b803a 	cmpltu	r21,r18,r21
   2be08:	b9cf803a 	cmpltu	r7,r23,r7
   2be0c:	a564b03a 	or	r18,r20,r21
   2be10:	2f39803a 	cmpltu	fp,r5,fp
   2be14:	9125883a 	add	r18,r18,r4
   2be18:	3f38b03a 	or	fp,r7,fp
   2be1c:	9725883a 	add	r18,r18,fp
   2be20:	9804927a 	slli	r2,r19,9
   2be24:	9463883a 	add	r17,r18,r17
   2be28:	d9000117 	ldw	r4,4(sp)
   2be2c:	b820d5fa 	srli	r16,r23,23
   2be30:	8822927a 	slli	r17,r17,9
   2be34:	9826d5fa 	srli	r19,r19,23
   2be38:	1104b03a 	or	r2,r2,r4
   2be3c:	b82e927a 	slli	r23,r23,9
   2be40:	1004c03a 	cmpne	r2,r2,zero
   2be44:	8c20b03a 	or	r16,r17,r16
   2be48:	14e6b03a 	or	r19,r2,r19
   2be4c:	8080402c 	andhi	r2,r16,256
   2be50:	9deeb03a 	or	r23,r19,r23
   2be54:	10000726 	beq	r2,zero,2be74 <__muldf3+0x610>
   2be58:	b804d07a 	srli	r2,r23,1
   2be5c:	800697fa 	slli	r3,r16,31
   2be60:	bdc0004c 	andi	r23,r23,1
   2be64:	8020d07a 	srli	r16,r16,1
   2be68:	b8aeb03a 	or	r23,r23,r2
   2be6c:	b8eeb03a 	or	r23,r23,r3
   2be70:	4007883a 	mov	r3,r8
   2be74:	1900ffc4 	addi	r4,r3,1023
   2be78:	01004d0e 	bge	zero,r4,2bfb0 <__muldf3+0x74c>
   2be7c:	b88001cc 	andi	r2,r23,7
   2be80:	10000726 	beq	r2,zero,2bea0 <__muldf3+0x63c>
   2be84:	b94003cc 	andi	r5,r23,15
   2be88:	00800104 	movi	r2,4
   2be8c:	28800426 	beq	r5,r2,2bea0 <__muldf3+0x63c>
   2be90:	b885883a 	add	r2,r23,r2
   2be94:	15ef803a 	cmpltu	r23,r2,r23
   2be98:	85e1883a 	add	r16,r16,r23
   2be9c:	102f883a 	mov	r23,r2
   2bea0:	8080402c 	andhi	r2,r16,256
   2bea4:	10000426 	beq	r2,zero,2beb8 <__muldf3+0x654>
   2bea8:	00bfc034 	movhi	r2,65280
   2beac:	10bfffc4 	addi	r2,r2,-1
   2beb0:	19010004 	addi	r4,r3,1024
   2beb4:	80a0703a 	and	r16,r16,r2
   2beb8:	0081ff84 	movi	r2,2046
   2bebc:	1100340e 	bge	r2,r4,2bf90 <__muldf3+0x72c>
   2bec0:	34c0004c 	andi	r19,r6,1
   2bec4:	0101ffc4 	movi	r4,2047
   2bec8:	0021883a 	mov	r16,zero
   2becc:	002f883a 	mov	r23,zero
   2bed0:	003ebe06 	br	2b9cc <__alt_data_end+0xfffef4ac>
   2bed4:	8080022c 	andhi	r2,r16,8
   2bed8:	10000926 	beq	r2,zero,2bf00 <__muldf3+0x69c>
   2bedc:	8880022c 	andhi	r2,r17,8
   2bee0:	1000071e 	bne	r2,zero,2bf00 <__muldf3+0x69c>
   2bee4:	00800434 	movhi	r2,16
   2bee8:	8c000234 	orhi	r16,r17,8
   2beec:	10bfffc4 	addi	r2,r2,-1
   2bef0:	b027883a 	mov	r19,r22
   2bef4:	80a0703a 	and	r16,r16,r2
   2bef8:	902f883a 	mov	r23,r18
   2befc:	003f1a06 	br	2bb68 <__alt_data_end+0xfffef648>
   2bf00:	00800434 	movhi	r2,16
   2bf04:	84000234 	orhi	r16,r16,8
   2bf08:	10bfffc4 	addi	r2,r2,-1
   2bf0c:	80a0703a 	and	r16,r16,r2
   2bf10:	003f1506 	br	2bb68 <__alt_data_end+0xfffef648>
   2bf14:	3009883a 	mov	r4,r6
   2bf18:	d9400215 	stw	r5,8(sp)
   2bf1c:	d9800715 	stw	r6,28(sp)
   2bf20:	da400415 	stw	r9,16(sp)
   2bf24:	da800315 	stw	r10,12(sp)
   2bf28:	002cb9c0 	call	2cb9c <__clzsi2>
   2bf2c:	10c00804 	addi	r3,r2,32
   2bf30:	010009c4 	movi	r4,39
   2bf34:	d9400217 	ldw	r5,8(sp)
   2bf38:	d9800717 	ldw	r6,28(sp)
   2bf3c:	da400417 	ldw	r9,16(sp)
   2bf40:	da800317 	ldw	r10,12(sp)
   2bf44:	20fee20e 	bge	r4,r3,2bad0 <__alt_data_end+0xfffef5b0>
   2bf48:	147ffe04 	addi	r17,r2,-8
   2bf4c:	9462983a 	sll	r17,r18,r17
   2bf50:	0025883a 	mov	r18,zero
   2bf54:	003ee506 	br	2baec <__alt_data_end+0xfffef5cc>
   2bf58:	d9800715 	stw	r6,28(sp)
   2bf5c:	d9c00215 	stw	r7,8(sp)
   2bf60:	da400415 	stw	r9,16(sp)
   2bf64:	002cb9c0 	call	2cb9c <__clzsi2>
   2bf68:	10c00804 	addi	r3,r2,32
   2bf6c:	010009c4 	movi	r4,39
   2bf70:	d9800717 	ldw	r6,28(sp)
   2bf74:	d9c00217 	ldw	r7,8(sp)
   2bf78:	da400417 	ldw	r9,16(sp)
   2bf7c:	20feb40e 	bge	r4,r3,2ba50 <__alt_data_end+0xfffef530>
   2bf80:	143ffe04 	addi	r16,r2,-8
   2bf84:	9420983a 	sll	r16,r18,r16
   2bf88:	002f883a 	mov	r23,zero
   2bf8c:	003eb706 	br	2ba6c <__alt_data_end+0xfffef54c>
   2bf90:	8004977a 	slli	r2,r16,29
   2bf94:	b82ed0fa 	srli	r23,r23,3
   2bf98:	8020927a 	slli	r16,r16,9
   2bf9c:	2101ffcc 	andi	r4,r4,2047
   2bfa0:	15eeb03a 	or	r23,r2,r23
   2bfa4:	8020d33a 	srli	r16,r16,12
   2bfa8:	34c0004c 	andi	r19,r6,1
   2bfac:	003e8706 	br	2b9cc <__alt_data_end+0xfffef4ac>
   2bfb0:	00bf0084 	movi	r2,-1022
   2bfb4:	10c5c83a 	sub	r2,r2,r3
   2bfb8:	01000e04 	movi	r4,56
   2bfbc:	2080080e 	bge	r4,r2,2bfe0 <__muldf3+0x77c>
   2bfc0:	34c0004c 	andi	r19,r6,1
   2bfc4:	0009883a 	mov	r4,zero
   2bfc8:	0021883a 	mov	r16,zero
   2bfcc:	002f883a 	mov	r23,zero
   2bfd0:	003e7e06 	br	2b9cc <__alt_data_end+0xfffef4ac>
   2bfd4:	4007883a 	mov	r3,r8
   2bfd8:	480d883a 	mov	r6,r9
   2bfdc:	003fa506 	br	2be74 <__alt_data_end+0xfffef954>
   2bfe0:	010007c4 	movi	r4,31
   2bfe4:	20801816 	blt	r4,r2,2c048 <__muldf3+0x7e4>
   2bfe8:	18c10784 	addi	r3,r3,1054
   2bfec:	80c8983a 	sll	r4,r16,r3
   2bff0:	b88ad83a 	srl	r5,r23,r2
   2bff4:	b8c6983a 	sll	r3,r23,r3
   2bff8:	80a0d83a 	srl	r16,r16,r2
   2bffc:	2908b03a 	or	r4,r5,r4
   2c000:	1804c03a 	cmpne	r2,r3,zero
   2c004:	2088b03a 	or	r4,r4,r2
   2c008:	208001cc 	andi	r2,r4,7
   2c00c:	10000726 	beq	r2,zero,2c02c <__muldf3+0x7c8>
   2c010:	20c003cc 	andi	r3,r4,15
   2c014:	00800104 	movi	r2,4
   2c018:	18800426 	beq	r3,r2,2c02c <__muldf3+0x7c8>
   2c01c:	20c00104 	addi	r3,r4,4
   2c020:	1905803a 	cmpltu	r2,r3,r4
   2c024:	80a1883a 	add	r16,r16,r2
   2c028:	1809883a 	mov	r4,r3
   2c02c:	8080202c 	andhi	r2,r16,128
   2c030:	10001b26 	beq	r2,zero,2c0a0 <__muldf3+0x83c>
   2c034:	34c0004c 	andi	r19,r6,1
   2c038:	01000044 	movi	r4,1
   2c03c:	0021883a 	mov	r16,zero
   2c040:	002f883a 	mov	r23,zero
   2c044:	003e6106 	br	2b9cc <__alt_data_end+0xfffef4ac>
   2c048:	013ef884 	movi	r4,-1054
   2c04c:	20c9c83a 	sub	r4,r4,r3
   2c050:	01400804 	movi	r5,32
   2c054:	8108d83a 	srl	r4,r16,r4
   2c058:	11401526 	beq	r2,r5,2c0b0 <__muldf3+0x84c>
   2c05c:	18c10f84 	addi	r3,r3,1086
   2c060:	80e0983a 	sll	r16,r16,r3
   2c064:	85eeb03a 	or	r23,r16,r23
   2c068:	b804c03a 	cmpne	r2,r23,zero
   2c06c:	1108b03a 	or	r4,r2,r4
   2c070:	20c001cc 	andi	r3,r4,7
   2c074:	1800061e 	bne	r3,zero,2c090 <__muldf3+0x82c>
   2c078:	0021883a 	mov	r16,zero
   2c07c:	202ed0fa 	srli	r23,r4,3
   2c080:	34c0004c 	andi	r19,r6,1
   2c084:	0009883a 	mov	r4,zero
   2c088:	b8eeb03a 	or	r23,r23,r3
   2c08c:	003e4f06 	br	2b9cc <__alt_data_end+0xfffef4ac>
   2c090:	20c003cc 	andi	r3,r4,15
   2c094:	00800104 	movi	r2,4
   2c098:	0021883a 	mov	r16,zero
   2c09c:	18bfdf1e 	bne	r3,r2,2c01c <__alt_data_end+0xfffefafc>
   2c0a0:	8004927a 	slli	r2,r16,9
   2c0a4:	8006977a 	slli	r3,r16,29
   2c0a8:	1020d33a 	srli	r16,r2,12
   2c0ac:	003ff306 	br	2c07c <__alt_data_end+0xfffefb5c>
   2c0b0:	0021883a 	mov	r16,zero
   2c0b4:	003feb06 	br	2c064 <__alt_data_end+0xfffefb44>
   2c0b8:	00800434 	movhi	r2,16
   2c0bc:	84000234 	orhi	r16,r16,8
   2c0c0:	10bfffc4 	addi	r2,r2,-1
   2c0c4:	4cc0004c 	andi	r19,r9,1
   2c0c8:	80a0703a 	and	r16,r16,r2
   2c0cc:	003ea606 	br	2bb68 <__alt_data_end+0xfffef648>

0002c0d0 <__subdf3>:
   2c0d0:	00c00434 	movhi	r3,16
   2c0d4:	18ffffc4 	addi	r3,r3,-1
   2c0d8:	defffb04 	addi	sp,sp,-20
   2c0dc:	28d2703a 	and	r9,r5,r3
   2c0e0:	3814d53a 	srli	r10,r7,20
   2c0e4:	38c6703a 	and	r3,r7,r3
   2c0e8:	3004d77a 	srli	r2,r6,29
   2c0ec:	dc800215 	stw	r18,8(sp)
   2c0f0:	dc000015 	stw	r16,0(sp)
   2c0f4:	2824d7fa 	srli	r18,r5,31
   2c0f8:	2820d53a 	srli	r16,r5,20
   2c0fc:	481290fa 	slli	r9,r9,3
   2c100:	200ad77a 	srli	r5,r4,29
   2c104:	180690fa 	slli	r3,r3,3
   2c108:	dc400115 	stw	r17,4(sp)
   2c10c:	dfc00415 	stw	ra,16(sp)
   2c110:	202290fa 	slli	r17,r4,3
   2c114:	dcc00315 	stw	r19,12(sp)
   2c118:	5281ffcc 	andi	r10,r10,2047
   2c11c:	0101ffc4 	movi	r4,2047
   2c120:	9011883a 	mov	r8,r18
   2c124:	8401ffcc 	andi	r16,r16,2047
   2c128:	94803fcc 	andi	r18,r18,255
   2c12c:	494ab03a 	or	r5,r9,r5
   2c130:	380ed7fa 	srli	r7,r7,31
   2c134:	1886b03a 	or	r3,r3,r2
   2c138:	300c90fa 	slli	r6,r6,3
   2c13c:	51009026 	beq	r10,r4,2c380 <__subdf3+0x2b0>
   2c140:	39c0005c 	xori	r7,r7,1
   2c144:	8285c83a 	sub	r2,r16,r10
   2c148:	91c06f26 	beq	r18,r7,2c308 <__subdf3+0x238>
   2c14c:	0080b10e 	bge	zero,r2,2c414 <__subdf3+0x344>
   2c150:	50002a1e 	bne	r10,zero,2c1fc <__subdf3+0x12c>
   2c154:	1988b03a 	or	r4,r3,r6
   2c158:	2000941e 	bne	r4,zero,2c3ac <__subdf3+0x2dc>
   2c15c:	888001cc 	andi	r2,r17,7
   2c160:	10005b26 	beq	r2,zero,2c2d0 <__subdf3+0x200>
   2c164:	88c003cc 	andi	r3,r17,15
   2c168:	00800104 	movi	r2,4
   2c16c:	18805826 	beq	r3,r2,2c2d0 <__subdf3+0x200>
   2c170:	88c00104 	addi	r3,r17,4
   2c174:	1c63803a 	cmpltu	r17,r3,r17
   2c178:	2c4b883a 	add	r5,r5,r17
   2c17c:	2880202c 	andhi	r2,r5,128
   2c180:	9200004c 	andi	r8,r18,1
   2c184:	1823883a 	mov	r17,r3
   2c188:	10005426 	beq	r2,zero,2c2dc <__subdf3+0x20c>
   2c18c:	84000044 	addi	r16,r16,1
   2c190:	0081ffc4 	movi	r2,2047
   2c194:	8080bf26 	beq	r16,r2,2c494 <__subdf3+0x3c4>
   2c198:	013fe034 	movhi	r4,65408
   2c19c:	213fffc4 	addi	r4,r4,-1
   2c1a0:	290a703a 	and	r5,r5,r4
   2c1a4:	2804977a 	slli	r2,r5,29
   2c1a8:	280a927a 	slli	r5,r5,9
   2c1ac:	8822d0fa 	srli	r17,r17,3
   2c1b0:	8401ffcc 	andi	r16,r16,2047
   2c1b4:	2808d33a 	srli	r4,r5,12
   2c1b8:	1444b03a 	or	r2,r2,r17
   2c1bc:	8401ffcc 	andi	r16,r16,2047
   2c1c0:	800a953a 	slli	r5,r16,20
   2c1c4:	40c03fcc 	andi	r3,r8,255
   2c1c8:	04000434 	movhi	r16,16
   2c1cc:	180697fa 	slli	r3,r3,31
   2c1d0:	843fffc4 	addi	r16,r16,-1
   2c1d4:	2420703a 	and	r16,r4,r16
   2c1d8:	8160b03a 	or	r16,r16,r5
   2c1dc:	80c6b03a 	or	r3,r16,r3
   2c1e0:	dfc00417 	ldw	ra,16(sp)
   2c1e4:	dcc00317 	ldw	r19,12(sp)
   2c1e8:	dc800217 	ldw	r18,8(sp)
   2c1ec:	dc400117 	ldw	r17,4(sp)
   2c1f0:	dc000017 	ldw	r16,0(sp)
   2c1f4:	dec00504 	addi	sp,sp,20
   2c1f8:	f800283a 	ret
   2c1fc:	0101ffc4 	movi	r4,2047
   2c200:	813fd626 	beq	r16,r4,2c15c <__alt_data_end+0xfffefc3c>
   2c204:	18c02034 	orhi	r3,r3,128
   2c208:	01000e04 	movi	r4,56
   2c20c:	2080a416 	blt	r4,r2,2c4a0 <__subdf3+0x3d0>
   2c210:	010007c4 	movi	r4,31
   2c214:	2080c716 	blt	r4,r2,2c534 <__subdf3+0x464>
   2c218:	01000804 	movi	r4,32
   2c21c:	2089c83a 	sub	r4,r4,r2
   2c220:	1910983a 	sll	r8,r3,r4
   2c224:	308ed83a 	srl	r7,r6,r2
   2c228:	3108983a 	sll	r4,r6,r4
   2c22c:	1884d83a 	srl	r2,r3,r2
   2c230:	41ccb03a 	or	r6,r8,r7
   2c234:	2008c03a 	cmpne	r4,r4,zero
   2c238:	310cb03a 	or	r6,r6,r4
   2c23c:	898dc83a 	sub	r6,r17,r6
   2c240:	89a3803a 	cmpltu	r17,r17,r6
   2c244:	288bc83a 	sub	r5,r5,r2
   2c248:	2c4bc83a 	sub	r5,r5,r17
   2c24c:	3023883a 	mov	r17,r6
   2c250:	2880202c 	andhi	r2,r5,128
   2c254:	10006b26 	beq	r2,zero,2c404 <__subdf3+0x334>
   2c258:	04c02034 	movhi	r19,128
   2c25c:	9cffffc4 	addi	r19,r19,-1
   2c260:	2ce6703a 	and	r19,r5,r19
   2c264:	98007c26 	beq	r19,zero,2c458 <__subdf3+0x388>
   2c268:	9809883a 	mov	r4,r19
   2c26c:	002cb9c0 	call	2cb9c <__clzsi2>
   2c270:	10fffe04 	addi	r3,r2,-8
   2c274:	010007c4 	movi	r4,31
   2c278:	20c07d16 	blt	r4,r3,2c470 <__subdf3+0x3a0>
   2c27c:	01400a04 	movi	r5,40
   2c280:	2885c83a 	sub	r2,r5,r2
   2c284:	888ad83a 	srl	r5,r17,r2
   2c288:	98e6983a 	sll	r19,r19,r3
   2c28c:	88e2983a 	sll	r17,r17,r3
   2c290:	2ce6b03a 	or	r19,r5,r19
   2c294:	1c007a16 	blt	r3,r16,2c480 <__subdf3+0x3b0>
   2c298:	1c21c83a 	sub	r16,r3,r16
   2c29c:	81400044 	addi	r5,r16,1
   2c2a0:	00c007c4 	movi	r3,31
   2c2a4:	19409616 	blt	r3,r5,2c500 <__subdf3+0x430>
   2c2a8:	1c21c83a 	sub	r16,r3,r16
   2c2ac:	8c08983a 	sll	r4,r17,r16
   2c2b0:	8946d83a 	srl	r3,r17,r5
   2c2b4:	9c20983a 	sll	r16,r19,r16
   2c2b8:	2008c03a 	cmpne	r4,r4,zero
   2c2bc:	994ad83a 	srl	r5,r19,r5
   2c2c0:	1c06b03a 	or	r3,r3,r16
   2c2c4:	1922b03a 	or	r17,r3,r4
   2c2c8:	0021883a 	mov	r16,zero
   2c2cc:	003fa306 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c2d0:	2880202c 	andhi	r2,r5,128
   2c2d4:	9200004c 	andi	r8,r18,1
   2c2d8:	103fac1e 	bne	r2,zero,2c18c <__alt_data_end+0xfffefc6c>
   2c2dc:	2804977a 	slli	r2,r5,29
   2c2e0:	8822d0fa 	srli	r17,r17,3
   2c2e4:	00c1ffc4 	movi	r3,2047
   2c2e8:	280ad0fa 	srli	r5,r5,3
   2c2ec:	1444b03a 	or	r2,r2,r17
   2c2f0:	80c02726 	beq	r16,r3,2c390 <__subdf3+0x2c0>
   2c2f4:	01000434 	movhi	r4,16
   2c2f8:	213fffc4 	addi	r4,r4,-1
   2c2fc:	80e0703a 	and	r16,r16,r3
   2c300:	2908703a 	and	r4,r5,r4
   2c304:	003fad06 	br	2c1bc <__alt_data_end+0xfffefc9c>
   2c308:	0080690e 	bge	zero,r2,2c4b0 <__subdf3+0x3e0>
   2c30c:	50002f26 	beq	r10,zero,2c3cc <__subdf3+0x2fc>
   2c310:	0101ffc4 	movi	r4,2047
   2c314:	813f9126 	beq	r16,r4,2c15c <__alt_data_end+0xfffefc3c>
   2c318:	18c02034 	orhi	r3,r3,128
   2c31c:	01000e04 	movi	r4,56
   2c320:	2080b00e 	bge	r4,r2,2c5e4 <__subdf3+0x514>
   2c324:	198cb03a 	or	r6,r3,r6
   2c328:	300ec03a 	cmpne	r7,r6,zero
   2c32c:	0005883a 	mov	r2,zero
   2c330:	3c4f883a 	add	r7,r7,r17
   2c334:	3c63803a 	cmpltu	r17,r7,r17
   2c338:	114b883a 	add	r5,r2,r5
   2c33c:	2c4b883a 	add	r5,r5,r17
   2c340:	3823883a 	mov	r17,r7
   2c344:	2880202c 	andhi	r2,r5,128
   2c348:	10002e26 	beq	r2,zero,2c404 <__subdf3+0x334>
   2c34c:	84000044 	addi	r16,r16,1
   2c350:	0081ffc4 	movi	r2,2047
   2c354:	8080de26 	beq	r16,r2,2c6d0 <__subdf3+0x600>
   2c358:	00bfe034 	movhi	r2,65408
   2c35c:	10bfffc4 	addi	r2,r2,-1
   2c360:	288a703a 	and	r5,r5,r2
   2c364:	880cd07a 	srli	r6,r17,1
   2c368:	280897fa 	slli	r4,r5,31
   2c36c:	88c0004c 	andi	r3,r17,1
   2c370:	30e2b03a 	or	r17,r6,r3
   2c374:	280ad07a 	srli	r5,r5,1
   2c378:	8922b03a 	or	r17,r17,r4
   2c37c:	003f7706 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c380:	1984b03a 	or	r2,r3,r6
   2c384:	103f6e26 	beq	r2,zero,2c140 <__alt_data_end+0xfffefc20>
   2c388:	39c03fcc 	andi	r7,r7,255
   2c38c:	003f6d06 	br	2c144 <__alt_data_end+0xfffefc24>
   2c390:	1146b03a 	or	r3,r2,r5
   2c394:	18003f26 	beq	r3,zero,2c494 <__subdf3+0x3c4>
   2c398:	00c00434 	movhi	r3,16
   2c39c:	29000234 	orhi	r4,r5,8
   2c3a0:	18ffffc4 	addi	r3,r3,-1
   2c3a4:	20c8703a 	and	r4,r4,r3
   2c3a8:	003f8406 	br	2c1bc <__alt_data_end+0xfffefc9c>
   2c3ac:	10bfffc4 	addi	r2,r2,-1
   2c3b0:	1000501e 	bne	r2,zero,2c4f4 <__subdf3+0x424>
   2c3b4:	898fc83a 	sub	r7,r17,r6
   2c3b8:	89e3803a 	cmpltu	r17,r17,r7
   2c3bc:	28cbc83a 	sub	r5,r5,r3
   2c3c0:	2c4bc83a 	sub	r5,r5,r17
   2c3c4:	3823883a 	mov	r17,r7
   2c3c8:	003fa106 	br	2c250 <__alt_data_end+0xfffefd30>
   2c3cc:	1988b03a 	or	r4,r3,r6
   2c3d0:	203f6226 	beq	r4,zero,2c15c <__alt_data_end+0xfffefc3c>
   2c3d4:	10bfffc4 	addi	r2,r2,-1
   2c3d8:	10009b1e 	bne	r2,zero,2c648 <__subdf3+0x578>
   2c3dc:	344d883a 	add	r6,r6,r17
   2c3e0:	3463803a 	cmpltu	r17,r6,r17
   2c3e4:	194b883a 	add	r5,r3,r5
   2c3e8:	2c4b883a 	add	r5,r5,r17
   2c3ec:	3023883a 	mov	r17,r6
   2c3f0:	003fd406 	br	2c344 <__alt_data_end+0xfffefe24>
   2c3f4:	1106b03a 	or	r3,r2,r4
   2c3f8:	1800b426 	beq	r3,zero,2c6cc <__subdf3+0x5fc>
   2c3fc:	100b883a 	mov	r5,r2
   2c400:	2023883a 	mov	r17,r4
   2c404:	888001cc 	andi	r2,r17,7
   2c408:	103f561e 	bne	r2,zero,2c164 <__alt_data_end+0xfffefc44>
   2c40c:	9200004c 	andi	r8,r18,1
   2c410:	003fb206 	br	2c2dc <__alt_data_end+0xfffefdbc>
   2c414:	1000531e 	bne	r2,zero,2c564 <__subdf3+0x494>
   2c418:	80800044 	addi	r2,r16,1
   2c41c:	1081ffcc 	andi	r2,r2,2047
   2c420:	01000044 	movi	r4,1
   2c424:	2080a00e 	bge	r4,r2,2c6a8 <__subdf3+0x5d8>
   2c428:	8985c83a 	sub	r2,r17,r6
   2c42c:	8889803a 	cmpltu	r4,r17,r2
   2c430:	28e7c83a 	sub	r19,r5,r3
   2c434:	9927c83a 	sub	r19,r19,r4
   2c438:	9900202c 	andhi	r4,r19,128
   2c43c:	20006226 	beq	r4,zero,2c5c8 <__subdf3+0x4f8>
   2c440:	3463c83a 	sub	r17,r6,r17
   2c444:	194bc83a 	sub	r5,r3,r5
   2c448:	344d803a 	cmpltu	r6,r6,r17
   2c44c:	29a7c83a 	sub	r19,r5,r6
   2c450:	3825883a 	mov	r18,r7
   2c454:	983f841e 	bne	r19,zero,2c268 <__alt_data_end+0xfffefd48>
   2c458:	8809883a 	mov	r4,r17
   2c45c:	002cb9c0 	call	2cb9c <__clzsi2>
   2c460:	10800804 	addi	r2,r2,32
   2c464:	10fffe04 	addi	r3,r2,-8
   2c468:	010007c4 	movi	r4,31
   2c46c:	20ff830e 	bge	r4,r3,2c27c <__alt_data_end+0xfffefd5c>
   2c470:	14fff604 	addi	r19,r2,-40
   2c474:	8ce6983a 	sll	r19,r17,r19
   2c478:	0023883a 	mov	r17,zero
   2c47c:	1c3f860e 	bge	r3,r16,2c298 <__alt_data_end+0xfffefd78>
   2c480:	017fe034 	movhi	r5,65408
   2c484:	297fffc4 	addi	r5,r5,-1
   2c488:	80e1c83a 	sub	r16,r16,r3
   2c48c:	994a703a 	and	r5,r19,r5
   2c490:	003f3206 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c494:	0009883a 	mov	r4,zero
   2c498:	0005883a 	mov	r2,zero
   2c49c:	003f4706 	br	2c1bc <__alt_data_end+0xfffefc9c>
   2c4a0:	198cb03a 	or	r6,r3,r6
   2c4a4:	300cc03a 	cmpne	r6,r6,zero
   2c4a8:	0005883a 	mov	r2,zero
   2c4ac:	003f6306 	br	2c23c <__alt_data_end+0xfffefd1c>
   2c4b0:	10009d1e 	bne	r2,zero,2c728 <__subdf3+0x658>
   2c4b4:	81c00044 	addi	r7,r16,1
   2c4b8:	3881ffcc 	andi	r2,r7,2047
   2c4bc:	02400044 	movi	r9,1
   2c4c0:	4880680e 	bge	r9,r2,2c664 <__subdf3+0x594>
   2c4c4:	0081ffc4 	movi	r2,2047
   2c4c8:	3880ae26 	beq	r7,r2,2c784 <__subdf3+0x6b4>
   2c4cc:	344d883a 	add	r6,r6,r17
   2c4d0:	3463803a 	cmpltu	r17,r6,r17
   2c4d4:	194b883a 	add	r5,r3,r5
   2c4d8:	2c4b883a 	add	r5,r5,r17
   2c4dc:	282297fa 	slli	r17,r5,31
   2c4e0:	300cd07a 	srli	r6,r6,1
   2c4e4:	280ad07a 	srli	r5,r5,1
   2c4e8:	3821883a 	mov	r16,r7
   2c4ec:	89a2b03a 	or	r17,r17,r6
   2c4f0:	003f1a06 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c4f4:	0101ffc4 	movi	r4,2047
   2c4f8:	813f431e 	bne	r16,r4,2c208 <__alt_data_end+0xfffefce8>
   2c4fc:	003f1706 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c500:	80bff844 	addi	r2,r16,-31
   2c504:	00c00804 	movi	r3,32
   2c508:	9884d83a 	srl	r2,r19,r2
   2c50c:	28c05126 	beq	r5,r3,2c654 <__subdf3+0x584>
   2c510:	00c00fc4 	movi	r3,63
   2c514:	1c21c83a 	sub	r16,r3,r16
   2c518:	9c26983a 	sll	r19,r19,r16
   2c51c:	9c62b03a 	or	r17,r19,r17
   2c520:	8822c03a 	cmpne	r17,r17,zero
   2c524:	88a2b03a 	or	r17,r17,r2
   2c528:	000b883a 	mov	r5,zero
   2c52c:	0021883a 	mov	r16,zero
   2c530:	003fb406 	br	2c404 <__alt_data_end+0xfffefee4>
   2c534:	113ff804 	addi	r4,r2,-32
   2c538:	01c00804 	movi	r7,32
   2c53c:	1908d83a 	srl	r4,r3,r4
   2c540:	11c04626 	beq	r2,r7,2c65c <__subdf3+0x58c>
   2c544:	01c01004 	movi	r7,64
   2c548:	3885c83a 	sub	r2,r7,r2
   2c54c:	1884983a 	sll	r2,r3,r2
   2c550:	118cb03a 	or	r6,r2,r6
   2c554:	300cc03a 	cmpne	r6,r6,zero
   2c558:	310cb03a 	or	r6,r6,r4
   2c55c:	0005883a 	mov	r2,zero
   2c560:	003f3606 	br	2c23c <__alt_data_end+0xfffefd1c>
   2c564:	80002b26 	beq	r16,zero,2c614 <__subdf3+0x544>
   2c568:	0101ffc4 	movi	r4,2047
   2c56c:	51006926 	beq	r10,r4,2c714 <__subdf3+0x644>
   2c570:	0085c83a 	sub	r2,zero,r2
   2c574:	29402034 	orhi	r5,r5,128
   2c578:	01000e04 	movi	r4,56
   2c57c:	20807d16 	blt	r4,r2,2c774 <__subdf3+0x6a4>
   2c580:	010007c4 	movi	r4,31
   2c584:	2080d916 	blt	r4,r2,2c8ec <__subdf3+0x81c>
   2c588:	01000804 	movi	r4,32
   2c58c:	2089c83a 	sub	r4,r4,r2
   2c590:	2912983a 	sll	r9,r5,r4
   2c594:	8890d83a 	srl	r8,r17,r2
   2c598:	8908983a 	sll	r4,r17,r4
   2c59c:	2884d83a 	srl	r2,r5,r2
   2c5a0:	4a22b03a 	or	r17,r9,r8
   2c5a4:	2008c03a 	cmpne	r4,r4,zero
   2c5a8:	8922b03a 	or	r17,r17,r4
   2c5ac:	3463c83a 	sub	r17,r6,r17
   2c5b0:	1885c83a 	sub	r2,r3,r2
   2c5b4:	344d803a 	cmpltu	r6,r6,r17
   2c5b8:	118bc83a 	sub	r5,r2,r6
   2c5bc:	5021883a 	mov	r16,r10
   2c5c0:	3825883a 	mov	r18,r7
   2c5c4:	003f2206 	br	2c250 <__alt_data_end+0xfffefd30>
   2c5c8:	9886b03a 	or	r3,r19,r2
   2c5cc:	18001c1e 	bne	r3,zero,2c640 <__subdf3+0x570>
   2c5d0:	0011883a 	mov	r8,zero
   2c5d4:	000b883a 	mov	r5,zero
   2c5d8:	0023883a 	mov	r17,zero
   2c5dc:	0021883a 	mov	r16,zero
   2c5e0:	003f3e06 	br	2c2dc <__alt_data_end+0xfffefdbc>
   2c5e4:	010007c4 	movi	r4,31
   2c5e8:	20803c16 	blt	r4,r2,2c6dc <__subdf3+0x60c>
   2c5ec:	01000804 	movi	r4,32
   2c5f0:	2089c83a 	sub	r4,r4,r2
   2c5f4:	1912983a 	sll	r9,r3,r4
   2c5f8:	308ed83a 	srl	r7,r6,r2
   2c5fc:	3108983a 	sll	r4,r6,r4
   2c600:	1884d83a 	srl	r2,r3,r2
   2c604:	49ceb03a 	or	r7,r9,r7
   2c608:	2008c03a 	cmpne	r4,r4,zero
   2c60c:	390eb03a 	or	r7,r7,r4
   2c610:	003f4706 	br	2c330 <__alt_data_end+0xfffefe10>
   2c614:	2c48b03a 	or	r4,r5,r17
   2c618:	20003e26 	beq	r4,zero,2c714 <__subdf3+0x644>
   2c61c:	0084303a 	nor	r2,zero,r2
   2c620:	10003a1e 	bne	r2,zero,2c70c <__subdf3+0x63c>
   2c624:	3463c83a 	sub	r17,r6,r17
   2c628:	194bc83a 	sub	r5,r3,r5
   2c62c:	344d803a 	cmpltu	r6,r6,r17
   2c630:	298bc83a 	sub	r5,r5,r6
   2c634:	5021883a 	mov	r16,r10
   2c638:	3825883a 	mov	r18,r7
   2c63c:	003f0406 	br	2c250 <__alt_data_end+0xfffefd30>
   2c640:	1023883a 	mov	r17,r2
   2c644:	003f0706 	br	2c264 <__alt_data_end+0xfffefd44>
   2c648:	0101ffc4 	movi	r4,2047
   2c64c:	813f331e 	bne	r16,r4,2c31c <__alt_data_end+0xfffefdfc>
   2c650:	003ec206 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c654:	0027883a 	mov	r19,zero
   2c658:	003fb006 	br	2c51c <__alt_data_end+0xfffefffc>
   2c65c:	0005883a 	mov	r2,zero
   2c660:	003fbb06 	br	2c550 <__alt_data_end+0xffff0030>
   2c664:	2c44b03a 	or	r2,r5,r17
   2c668:	80008b1e 	bne	r16,zero,2c898 <__subdf3+0x7c8>
   2c66c:	1000b526 	beq	r2,zero,2c944 <__subdf3+0x874>
   2c670:	1984b03a 	or	r2,r3,r6
   2c674:	103eb926 	beq	r2,zero,2c15c <__alt_data_end+0xfffefc3c>
   2c678:	3449883a 	add	r4,r6,r17
   2c67c:	2463803a 	cmpltu	r17,r4,r17
   2c680:	194b883a 	add	r5,r3,r5
   2c684:	2c4b883a 	add	r5,r5,r17
   2c688:	2880202c 	andhi	r2,r5,128
   2c68c:	2023883a 	mov	r17,r4
   2c690:	103f5c26 	beq	r2,zero,2c404 <__alt_data_end+0xfffefee4>
   2c694:	00bfe034 	movhi	r2,65408
   2c698:	10bfffc4 	addi	r2,r2,-1
   2c69c:	4821883a 	mov	r16,r9
   2c6a0:	288a703a 	and	r5,r5,r2
   2c6a4:	003ead06 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c6a8:	2c44b03a 	or	r2,r5,r17
   2c6ac:	8000291e 	bne	r16,zero,2c754 <__subdf3+0x684>
   2c6b0:	10004f1e 	bne	r2,zero,2c7f0 <__subdf3+0x720>
   2c6b4:	1984b03a 	or	r2,r3,r6
   2c6b8:	10000426 	beq	r2,zero,2c6cc <__subdf3+0x5fc>
   2c6bc:	180b883a 	mov	r5,r3
   2c6c0:	3023883a 	mov	r17,r6
   2c6c4:	3825883a 	mov	r18,r7
   2c6c8:	003ea406 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c6cc:	0011883a 	mov	r8,zero
   2c6d0:	000b883a 	mov	r5,zero
   2c6d4:	0023883a 	mov	r17,zero
   2c6d8:	003f0006 	br	2c2dc <__alt_data_end+0xfffefdbc>
   2c6dc:	11fff804 	addi	r7,r2,-32
   2c6e0:	19c8d83a 	srl	r4,r3,r7
   2c6e4:	01c00804 	movi	r7,32
   2c6e8:	11c07e26 	beq	r2,r7,2c8e4 <__subdf3+0x814>
   2c6ec:	01c01004 	movi	r7,64
   2c6f0:	3885c83a 	sub	r2,r7,r2
   2c6f4:	1884983a 	sll	r2,r3,r2
   2c6f8:	118cb03a 	or	r6,r2,r6
   2c6fc:	300ec03a 	cmpne	r7,r6,zero
   2c700:	390eb03a 	or	r7,r7,r4
   2c704:	0005883a 	mov	r2,zero
   2c708:	003f0906 	br	2c330 <__alt_data_end+0xfffefe10>
   2c70c:	0101ffc4 	movi	r4,2047
   2c710:	513f991e 	bne	r10,r4,2c578 <__alt_data_end+0xffff0058>
   2c714:	180b883a 	mov	r5,r3
   2c718:	3023883a 	mov	r17,r6
   2c71c:	5021883a 	mov	r16,r10
   2c720:	3825883a 	mov	r18,r7
   2c724:	003e8d06 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c728:	80001a1e 	bne	r16,zero,2c794 <__subdf3+0x6c4>
   2c72c:	2c48b03a 	or	r4,r5,r17
   2c730:	20005526 	beq	r4,zero,2c888 <__subdf3+0x7b8>
   2c734:	0084303a 	nor	r2,zero,r2
   2c738:	1000511e 	bne	r2,zero,2c880 <__subdf3+0x7b0>
   2c73c:	89a3883a 	add	r17,r17,r6
   2c740:	194b883a 	add	r5,r3,r5
   2c744:	898d803a 	cmpltu	r6,r17,r6
   2c748:	298b883a 	add	r5,r5,r6
   2c74c:	5021883a 	mov	r16,r10
   2c750:	003efc06 	br	2c344 <__alt_data_end+0xfffefe24>
   2c754:	1000341e 	bne	r2,zero,2c828 <__subdf3+0x758>
   2c758:	1984b03a 	or	r2,r3,r6
   2c75c:	10006f26 	beq	r2,zero,2c91c <__subdf3+0x84c>
   2c760:	180b883a 	mov	r5,r3
   2c764:	3023883a 	mov	r17,r6
   2c768:	3825883a 	mov	r18,r7
   2c76c:	0401ffc4 	movi	r16,2047
   2c770:	003e7a06 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c774:	2c62b03a 	or	r17,r5,r17
   2c778:	8822c03a 	cmpne	r17,r17,zero
   2c77c:	0005883a 	mov	r2,zero
   2c780:	003f8a06 	br	2c5ac <__alt_data_end+0xffff008c>
   2c784:	3821883a 	mov	r16,r7
   2c788:	000b883a 	mov	r5,zero
   2c78c:	0023883a 	mov	r17,zero
   2c790:	003ed206 	br	2c2dc <__alt_data_end+0xfffefdbc>
   2c794:	0101ffc4 	movi	r4,2047
   2c798:	51003b26 	beq	r10,r4,2c888 <__subdf3+0x7b8>
   2c79c:	0085c83a 	sub	r2,zero,r2
   2c7a0:	29402034 	orhi	r5,r5,128
   2c7a4:	01000e04 	movi	r4,56
   2c7a8:	20806216 	blt	r4,r2,2c934 <__subdf3+0x864>
   2c7ac:	010007c4 	movi	r4,31
   2c7b0:	20806b16 	blt	r4,r2,2c960 <__subdf3+0x890>
   2c7b4:	01000804 	movi	r4,32
   2c7b8:	2089c83a 	sub	r4,r4,r2
   2c7bc:	2912983a 	sll	r9,r5,r4
   2c7c0:	888ed83a 	srl	r7,r17,r2
   2c7c4:	8908983a 	sll	r4,r17,r4
   2c7c8:	2884d83a 	srl	r2,r5,r2
   2c7cc:	49e2b03a 	or	r17,r9,r7
   2c7d0:	2008c03a 	cmpne	r4,r4,zero
   2c7d4:	8922b03a 	or	r17,r17,r4
   2c7d8:	89a3883a 	add	r17,r17,r6
   2c7dc:	10c5883a 	add	r2,r2,r3
   2c7e0:	898d803a 	cmpltu	r6,r17,r6
   2c7e4:	118b883a 	add	r5,r2,r6
   2c7e8:	5021883a 	mov	r16,r10
   2c7ec:	003ed506 	br	2c344 <__alt_data_end+0xfffefe24>
   2c7f0:	1984b03a 	or	r2,r3,r6
   2c7f4:	103e5926 	beq	r2,zero,2c15c <__alt_data_end+0xfffefc3c>
   2c7f8:	8989c83a 	sub	r4,r17,r6
   2c7fc:	8911803a 	cmpltu	r8,r17,r4
   2c800:	28c5c83a 	sub	r2,r5,r3
   2c804:	1205c83a 	sub	r2,r2,r8
   2c808:	1200202c 	andhi	r8,r2,128
   2c80c:	403ef926 	beq	r8,zero,2c3f4 <__alt_data_end+0xfffefed4>
   2c810:	3463c83a 	sub	r17,r6,r17
   2c814:	194bc83a 	sub	r5,r3,r5
   2c818:	344d803a 	cmpltu	r6,r6,r17
   2c81c:	298bc83a 	sub	r5,r5,r6
   2c820:	3825883a 	mov	r18,r7
   2c824:	003e4d06 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c828:	1984b03a 	or	r2,r3,r6
   2c82c:	10002b26 	beq	r2,zero,2c8dc <__subdf3+0x80c>
   2c830:	2808d0fa 	srli	r4,r5,3
   2c834:	8822d0fa 	srli	r17,r17,3
   2c838:	280a977a 	slli	r5,r5,29
   2c83c:	2080022c 	andhi	r2,r4,8
   2c840:	2c62b03a 	or	r17,r5,r17
   2c844:	10000826 	beq	r2,zero,2c868 <__subdf3+0x798>
   2c848:	1810d0fa 	srli	r8,r3,3
   2c84c:	4080022c 	andhi	r2,r8,8
   2c850:	1000051e 	bne	r2,zero,2c868 <__subdf3+0x798>
   2c854:	300cd0fa 	srli	r6,r6,3
   2c858:	1804977a 	slli	r2,r3,29
   2c85c:	4009883a 	mov	r4,r8
   2c860:	3825883a 	mov	r18,r7
   2c864:	11a2b03a 	or	r17,r2,r6
   2c868:	880ad77a 	srli	r5,r17,29
   2c86c:	200890fa 	slli	r4,r4,3
   2c870:	882290fa 	slli	r17,r17,3
   2c874:	0401ffc4 	movi	r16,2047
   2c878:	290ab03a 	or	r5,r5,r4
   2c87c:	003e3706 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c880:	0101ffc4 	movi	r4,2047
   2c884:	513fc71e 	bne	r10,r4,2c7a4 <__alt_data_end+0xffff0284>
   2c888:	180b883a 	mov	r5,r3
   2c88c:	3023883a 	mov	r17,r6
   2c890:	5021883a 	mov	r16,r10
   2c894:	003e3106 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c898:	10002d26 	beq	r2,zero,2c950 <__subdf3+0x880>
   2c89c:	1984b03a 	or	r2,r3,r6
   2c8a0:	10000e26 	beq	r2,zero,2c8dc <__subdf3+0x80c>
   2c8a4:	2808d0fa 	srli	r4,r5,3
   2c8a8:	8822d0fa 	srli	r17,r17,3
   2c8ac:	280a977a 	slli	r5,r5,29
   2c8b0:	2080022c 	andhi	r2,r4,8
   2c8b4:	2c62b03a 	or	r17,r5,r17
   2c8b8:	103feb26 	beq	r2,zero,2c868 <__alt_data_end+0xffff0348>
   2c8bc:	180ed0fa 	srli	r7,r3,3
   2c8c0:	3880022c 	andhi	r2,r7,8
   2c8c4:	103fe81e 	bne	r2,zero,2c868 <__alt_data_end+0xffff0348>
   2c8c8:	300cd0fa 	srli	r6,r6,3
   2c8cc:	1804977a 	slli	r2,r3,29
   2c8d0:	3809883a 	mov	r4,r7
   2c8d4:	11a2b03a 	or	r17,r2,r6
   2c8d8:	003fe306 	br	2c868 <__alt_data_end+0xffff0348>
   2c8dc:	0401ffc4 	movi	r16,2047
   2c8e0:	003e1e06 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c8e4:	0005883a 	mov	r2,zero
   2c8e8:	003f8306 	br	2c6f8 <__alt_data_end+0xffff01d8>
   2c8ec:	113ff804 	addi	r4,r2,-32
   2c8f0:	02000804 	movi	r8,32
   2c8f4:	2908d83a 	srl	r4,r5,r4
   2c8f8:	12002526 	beq	r2,r8,2c990 <__subdf3+0x8c0>
   2c8fc:	02001004 	movi	r8,64
   2c900:	4085c83a 	sub	r2,r8,r2
   2c904:	288a983a 	sll	r5,r5,r2
   2c908:	2c62b03a 	or	r17,r5,r17
   2c90c:	8822c03a 	cmpne	r17,r17,zero
   2c910:	8922b03a 	or	r17,r17,r4
   2c914:	0005883a 	mov	r2,zero
   2c918:	003f2406 	br	2c5ac <__alt_data_end+0xffff008c>
   2c91c:	01402034 	movhi	r5,128
   2c920:	0011883a 	mov	r8,zero
   2c924:	297fffc4 	addi	r5,r5,-1
   2c928:	047ffe04 	movi	r17,-8
   2c92c:	0401ffc4 	movi	r16,2047
   2c930:	003e6a06 	br	2c2dc <__alt_data_end+0xfffefdbc>
   2c934:	2c62b03a 	or	r17,r5,r17
   2c938:	8822c03a 	cmpne	r17,r17,zero
   2c93c:	0005883a 	mov	r2,zero
   2c940:	003fa506 	br	2c7d8 <__alt_data_end+0xffff02b8>
   2c944:	180b883a 	mov	r5,r3
   2c948:	3023883a 	mov	r17,r6
   2c94c:	003e0306 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c950:	180b883a 	mov	r5,r3
   2c954:	3023883a 	mov	r17,r6
   2c958:	0401ffc4 	movi	r16,2047
   2c95c:	003dff06 	br	2c15c <__alt_data_end+0xfffefc3c>
   2c960:	113ff804 	addi	r4,r2,-32
   2c964:	01c00804 	movi	r7,32
   2c968:	2908d83a 	srl	r4,r5,r4
   2c96c:	11c00a26 	beq	r2,r7,2c998 <__subdf3+0x8c8>
   2c970:	01c01004 	movi	r7,64
   2c974:	3885c83a 	sub	r2,r7,r2
   2c978:	288a983a 	sll	r5,r5,r2
   2c97c:	2c62b03a 	or	r17,r5,r17
   2c980:	8822c03a 	cmpne	r17,r17,zero
   2c984:	8922b03a 	or	r17,r17,r4
   2c988:	0005883a 	mov	r2,zero
   2c98c:	003f9206 	br	2c7d8 <__alt_data_end+0xffff02b8>
   2c990:	000b883a 	mov	r5,zero
   2c994:	003fdc06 	br	2c908 <__alt_data_end+0xffff03e8>
   2c998:	000b883a 	mov	r5,zero
   2c99c:	003ff706 	br	2c97c <__alt_data_end+0xffff045c>

0002c9a0 <__fixdfsi>:
   2c9a0:	2806d53a 	srli	r3,r5,20
   2c9a4:	00800434 	movhi	r2,16
   2c9a8:	10bfffc4 	addi	r2,r2,-1
   2c9ac:	18c1ffcc 	andi	r3,r3,2047
   2c9b0:	0180ff84 	movi	r6,1022
   2c9b4:	2884703a 	and	r2,r5,r2
   2c9b8:	280ad7fa 	srli	r5,r5,31
   2c9bc:	30c0130e 	bge	r6,r3,2ca0c <__fixdfsi+0x6c>
   2c9c0:	01810744 	movi	r6,1053
   2c9c4:	30c00d16 	blt	r6,r3,2c9fc <__fixdfsi+0x5c>
   2c9c8:	01810cc4 	movi	r6,1075
   2c9cc:	30cdc83a 	sub	r6,r6,r3
   2c9d0:	01c007c4 	movi	r7,31
   2c9d4:	10800434 	orhi	r2,r2,16
   2c9d8:	39800e0e 	bge	r7,r6,2ca14 <__fixdfsi+0x74>
   2c9dc:	010104c4 	movi	r4,1043
   2c9e0:	20c7c83a 	sub	r3,r4,r3
   2c9e4:	10c6d83a 	srl	r3,r2,r3
   2c9e8:	29403fcc 	andi	r5,r5,255
   2c9ec:	0145c83a 	sub	r2,zero,r5
   2c9f0:	1884f03a 	xor	r2,r3,r2
   2c9f4:	1145883a 	add	r2,r2,r5
   2c9f8:	f800283a 	ret
   2c9fc:	00a00034 	movhi	r2,32768
   2ca00:	10bfffc4 	addi	r2,r2,-1
   2ca04:	2885883a 	add	r2,r5,r2
   2ca08:	f800283a 	ret
   2ca0c:	0005883a 	mov	r2,zero
   2ca10:	f800283a 	ret
   2ca14:	18fefb44 	addi	r3,r3,-1043
   2ca18:	2188d83a 	srl	r4,r4,r6
   2ca1c:	10c6983a 	sll	r3,r2,r3
   2ca20:	20c6b03a 	or	r3,r4,r3
   2ca24:	003ff006 	br	2c9e8 <__alt_data_end+0xffff04c8>

0002ca28 <__floatsidf>:
   2ca28:	defffd04 	addi	sp,sp,-12
   2ca2c:	dc400115 	stw	r17,4(sp)
   2ca30:	dfc00215 	stw	ra,8(sp)
   2ca34:	dc000015 	stw	r16,0(sp)
   2ca38:	2023883a 	mov	r17,r4
   2ca3c:	20001426 	beq	r4,zero,2ca90 <__floatsidf+0x68>
   2ca40:	2020d7fa 	srli	r16,r4,31
   2ca44:	80000126 	beq	r16,zero,2ca4c <__floatsidf+0x24>
   2ca48:	0123c83a 	sub	r17,zero,r4
   2ca4c:	8809883a 	mov	r4,r17
   2ca50:	002cb9c0 	call	2cb9c <__clzsi2>
   2ca54:	01410784 	movi	r5,1054
   2ca58:	00c00284 	movi	r3,10
   2ca5c:	288bc83a 	sub	r5,r5,r2
   2ca60:	18801c16 	blt	r3,r2,2cad4 <__floatsidf+0xac>
   2ca64:	00c002c4 	movi	r3,11
   2ca68:	1887c83a 	sub	r3,r3,r2
   2ca6c:	88c8d83a 	srl	r4,r17,r3
   2ca70:	00c00434 	movhi	r3,16
   2ca74:	18ffffc4 	addi	r3,r3,-1
   2ca78:	10800544 	addi	r2,r2,21
   2ca7c:	20c8703a 	and	r4,r4,r3
   2ca80:	8884983a 	sll	r2,r17,r2
   2ca84:	28c1ffcc 	andi	r3,r5,2047
   2ca88:	800d883a 	mov	r6,r16
   2ca8c:	00000406 	br	2caa0 <__floatsidf+0x78>
   2ca90:	000d883a 	mov	r6,zero
   2ca94:	0007883a 	mov	r3,zero
   2ca98:	0009883a 	mov	r4,zero
   2ca9c:	0005883a 	mov	r2,zero
   2caa0:	180a953a 	slli	r5,r3,20
   2caa4:	31803fcc 	andi	r6,r6,255
   2caa8:	00c00434 	movhi	r3,16
   2caac:	300c97fa 	slli	r6,r6,31
   2cab0:	18ffffc4 	addi	r3,r3,-1
   2cab4:	20c6703a 	and	r3,r4,r3
   2cab8:	1946b03a 	or	r3,r3,r5
   2cabc:	1986b03a 	or	r3,r3,r6
   2cac0:	dfc00217 	ldw	ra,8(sp)
   2cac4:	dc400117 	ldw	r17,4(sp)
   2cac8:	dc000017 	ldw	r16,0(sp)
   2cacc:	dec00304 	addi	sp,sp,12
   2cad0:	f800283a 	ret
   2cad4:	10fffd44 	addi	r3,r2,-11
   2cad8:	88c8983a 	sll	r4,r17,r3
   2cadc:	00800434 	movhi	r2,16
   2cae0:	10bfffc4 	addi	r2,r2,-1
   2cae4:	2088703a 	and	r4,r4,r2
   2cae8:	28c1ffcc 	andi	r3,r5,2047
   2caec:	800d883a 	mov	r6,r16
   2caf0:	0005883a 	mov	r2,zero
   2caf4:	003fea06 	br	2caa0 <__alt_data_end+0xffff0580>

0002caf8 <__floatunsidf>:
   2caf8:	defffe04 	addi	sp,sp,-8
   2cafc:	dc000015 	stw	r16,0(sp)
   2cb00:	dfc00115 	stw	ra,4(sp)
   2cb04:	2021883a 	mov	r16,r4
   2cb08:	20001026 	beq	r4,zero,2cb4c <__floatunsidf+0x54>
   2cb0c:	002cb9c0 	call	2cb9c <__clzsi2>
   2cb10:	01410784 	movi	r5,1054
   2cb14:	100d883a 	mov	r6,r2
   2cb18:	288bc83a 	sub	r5,r5,r2
   2cb1c:	00800284 	movi	r2,10
   2cb20:	11801616 	blt	r2,r6,2cb7c <__floatunsidf+0x84>
   2cb24:	008002c4 	movi	r2,11
   2cb28:	1185c83a 	sub	r2,r2,r6
   2cb2c:	8084d83a 	srl	r2,r16,r2
   2cb30:	00c00434 	movhi	r3,16
   2cb34:	31c00544 	addi	r7,r6,21
   2cb38:	18ffffc4 	addi	r3,r3,-1
   2cb3c:	81e0983a 	sll	r16,r16,r7
   2cb40:	10cc703a 	and	r6,r2,r3
   2cb44:	2941ffcc 	andi	r5,r5,2047
   2cb48:	00000206 	br	2cb54 <__floatunsidf+0x5c>
   2cb4c:	000b883a 	mov	r5,zero
   2cb50:	000d883a 	mov	r6,zero
   2cb54:	280a953a 	slli	r5,r5,20
   2cb58:	00c00434 	movhi	r3,16
   2cb5c:	18ffffc4 	addi	r3,r3,-1
   2cb60:	30c6703a 	and	r3,r6,r3
   2cb64:	8005883a 	mov	r2,r16
   2cb68:	1946b03a 	or	r3,r3,r5
   2cb6c:	dfc00117 	ldw	ra,4(sp)
   2cb70:	dc000017 	ldw	r16,0(sp)
   2cb74:	dec00204 	addi	sp,sp,8
   2cb78:	f800283a 	ret
   2cb7c:	31bffd44 	addi	r6,r6,-11
   2cb80:	818c983a 	sll	r6,r16,r6
   2cb84:	00800434 	movhi	r2,16
   2cb88:	10bfffc4 	addi	r2,r2,-1
   2cb8c:	2941ffcc 	andi	r5,r5,2047
   2cb90:	0021883a 	mov	r16,zero
   2cb94:	308c703a 	and	r6,r6,r2
   2cb98:	003fee06 	br	2cb54 <__alt_data_end+0xffff0634>

0002cb9c <__clzsi2>:
   2cb9c:	00bfffd4 	movui	r2,65535
   2cba0:	11000b36 	bltu	r2,r4,2cbd0 <__clzsi2+0x34>
   2cba4:	00803fc4 	movi	r2,255
   2cba8:	1100122e 	bgeu	r2,r4,2cbf4 <__clzsi2+0x58>
   2cbac:	00c00204 	movi	r3,8
   2cbb0:	01400604 	movi	r5,24
   2cbb4:	20c8d83a 	srl	r4,r4,r3
   2cbb8:	008000f4 	movhi	r2,3
   2cbbc:	10803604 	addi	r2,r2,216
   2cbc0:	1109883a 	add	r4,r2,r4
   2cbc4:	20800003 	ldbu	r2,0(r4)
   2cbc8:	2885c83a 	sub	r2,r5,r2
   2cbcc:	f800283a 	ret
   2cbd0:	00804034 	movhi	r2,256
   2cbd4:	10bfffc4 	addi	r2,r2,-1
   2cbd8:	11000336 	bltu	r2,r4,2cbe8 <__clzsi2+0x4c>
   2cbdc:	00c00404 	movi	r3,16
   2cbe0:	180b883a 	mov	r5,r3
   2cbe4:	003ff306 	br	2cbb4 <__alt_data_end+0xffff0694>
   2cbe8:	00c00604 	movi	r3,24
   2cbec:	01400204 	movi	r5,8
   2cbf0:	003ff006 	br	2cbb4 <__alt_data_end+0xffff0694>
   2cbf4:	0007883a 	mov	r3,zero
   2cbf8:	01400804 	movi	r5,32
   2cbfc:	003fed06 	br	2cbb4 <__alt_data_end+0xffff0694>

0002cc00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2cc00:	defffe04 	addi	sp,sp,-8
   2cc04:	dfc00115 	stw	ra,4(sp)
   2cc08:	df000015 	stw	fp,0(sp)
   2cc0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2cc10:	008000f4 	movhi	r2,3
   2cc14:	10876b04 	addi	r2,r2,7596
   2cc18:	10800017 	ldw	r2,0(r2)
   2cc1c:	10000526 	beq	r2,zero,2cc34 <alt_get_errno+0x34>
   2cc20:	008000f4 	movhi	r2,3
   2cc24:	10876b04 	addi	r2,r2,7596
   2cc28:	10800017 	ldw	r2,0(r2)
   2cc2c:	103ee83a 	callr	r2
   2cc30:	00000206 	br	2cc3c <alt_get_errno+0x3c>
   2cc34:	008000f4 	movhi	r2,3
   2cc38:	108e6204 	addi	r2,r2,14728
}
   2cc3c:	e037883a 	mov	sp,fp
   2cc40:	dfc00117 	ldw	ra,4(sp)
   2cc44:	df000017 	ldw	fp,0(sp)
   2cc48:	dec00204 	addi	sp,sp,8
   2cc4c:	f800283a 	ret

0002cc50 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2cc50:	defffb04 	addi	sp,sp,-20
   2cc54:	dfc00415 	stw	ra,16(sp)
   2cc58:	df000315 	stw	fp,12(sp)
   2cc5c:	df000304 	addi	fp,sp,12
   2cc60:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2cc64:	e0bfff17 	ldw	r2,-4(fp)
   2cc68:	10000816 	blt	r2,zero,2cc8c <close+0x3c>
   2cc6c:	e13fff17 	ldw	r4,-4(fp)
   2cc70:	01400304 	movi	r5,12
   2cc74:	002a3dc0 	call	2a3dc <__mulsi3>
   2cc78:	1007883a 	mov	r3,r2
   2cc7c:	008000f4 	movhi	r2,3
   2cc80:	1082b704 	addi	r2,r2,2780
   2cc84:	1885883a 	add	r2,r3,r2
   2cc88:	00000106 	br	2cc90 <close+0x40>
   2cc8c:	0005883a 	mov	r2,zero
   2cc90:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2cc94:	e0bffd17 	ldw	r2,-12(fp)
   2cc98:	10001926 	beq	r2,zero,2cd00 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2cc9c:	e0bffd17 	ldw	r2,-12(fp)
   2cca0:	10800017 	ldw	r2,0(r2)
   2cca4:	10800417 	ldw	r2,16(r2)
   2cca8:	10000626 	beq	r2,zero,2ccc4 <close+0x74>
   2ccac:	e0bffd17 	ldw	r2,-12(fp)
   2ccb0:	10800017 	ldw	r2,0(r2)
   2ccb4:	10800417 	ldw	r2,16(r2)
   2ccb8:	e13ffd17 	ldw	r4,-12(fp)
   2ccbc:	103ee83a 	callr	r2
   2ccc0:	00000106 	br	2ccc8 <close+0x78>
   2ccc4:	0005883a 	mov	r2,zero
   2ccc8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2cccc:	e13fff17 	ldw	r4,-4(fp)
   2ccd0:	002d3740 	call	2d374 <alt_release_fd>
    if (rval < 0)
   2ccd4:	e0bffe17 	ldw	r2,-8(fp)
   2ccd8:	1000070e 	bge	r2,zero,2ccf8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   2ccdc:	002cc000 	call	2cc00 <alt_get_errno>
   2cce0:	1007883a 	mov	r3,r2
   2cce4:	e0bffe17 	ldw	r2,-8(fp)
   2cce8:	0085c83a 	sub	r2,zero,r2
   2ccec:	18800015 	stw	r2,0(r3)
      return -1;
   2ccf0:	00bfffc4 	movi	r2,-1
   2ccf4:	00000706 	br	2cd14 <close+0xc4>
    }
    return 0;
   2ccf8:	0005883a 	mov	r2,zero
   2ccfc:	00000506 	br	2cd14 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2cd00:	002cc000 	call	2cc00 <alt_get_errno>
   2cd04:	1007883a 	mov	r3,r2
   2cd08:	00801444 	movi	r2,81
   2cd0c:	18800015 	stw	r2,0(r3)
    return -1;
   2cd10:	00bfffc4 	movi	r2,-1
  }
}
   2cd14:	e037883a 	mov	sp,fp
   2cd18:	dfc00117 	ldw	ra,4(sp)
   2cd1c:	df000017 	ldw	fp,0(sp)
   2cd20:	dec00204 	addi	sp,sp,8
   2cd24:	f800283a 	ret

0002cd28 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2cd28:	defffc04 	addi	sp,sp,-16
   2cd2c:	df000315 	stw	fp,12(sp)
   2cd30:	df000304 	addi	fp,sp,12
   2cd34:	e13ffd15 	stw	r4,-12(fp)
   2cd38:	e17ffe15 	stw	r5,-8(fp)
   2cd3c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2cd40:	e0bfff17 	ldw	r2,-4(fp)
}
   2cd44:	e037883a 	mov	sp,fp
   2cd48:	df000017 	ldw	fp,0(sp)
   2cd4c:	dec00104 	addi	sp,sp,4
   2cd50:	f800283a 	ret

0002cd54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2cd54:	defffe04 	addi	sp,sp,-8
   2cd58:	dfc00115 	stw	ra,4(sp)
   2cd5c:	df000015 	stw	fp,0(sp)
   2cd60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2cd64:	008000f4 	movhi	r2,3
   2cd68:	10876b04 	addi	r2,r2,7596
   2cd6c:	10800017 	ldw	r2,0(r2)
   2cd70:	10000526 	beq	r2,zero,2cd88 <alt_get_errno+0x34>
   2cd74:	008000f4 	movhi	r2,3
   2cd78:	10876b04 	addi	r2,r2,7596
   2cd7c:	10800017 	ldw	r2,0(r2)
   2cd80:	103ee83a 	callr	r2
   2cd84:	00000206 	br	2cd90 <alt_get_errno+0x3c>
   2cd88:	008000f4 	movhi	r2,3
   2cd8c:	108e6204 	addi	r2,r2,14728
}
   2cd90:	e037883a 	mov	sp,fp
   2cd94:	dfc00117 	ldw	ra,4(sp)
   2cd98:	df000017 	ldw	fp,0(sp)
   2cd9c:	dec00204 	addi	sp,sp,8
   2cda0:	f800283a 	ret

0002cda4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2cda4:	defffb04 	addi	sp,sp,-20
   2cda8:	dfc00415 	stw	ra,16(sp)
   2cdac:	df000315 	stw	fp,12(sp)
   2cdb0:	df000304 	addi	fp,sp,12
   2cdb4:	e13ffe15 	stw	r4,-8(fp)
   2cdb8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2cdbc:	e0bffe17 	ldw	r2,-8(fp)
   2cdc0:	10000816 	blt	r2,zero,2cde4 <fstat+0x40>
   2cdc4:	e13ffe17 	ldw	r4,-8(fp)
   2cdc8:	01400304 	movi	r5,12
   2cdcc:	002a3dc0 	call	2a3dc <__mulsi3>
   2cdd0:	1007883a 	mov	r3,r2
   2cdd4:	008000f4 	movhi	r2,3
   2cdd8:	1082b704 	addi	r2,r2,2780
   2cddc:	1885883a 	add	r2,r3,r2
   2cde0:	00000106 	br	2cde8 <fstat+0x44>
   2cde4:	0005883a 	mov	r2,zero
   2cde8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2cdec:	e0bffd17 	ldw	r2,-12(fp)
   2cdf0:	10001026 	beq	r2,zero,2ce34 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2cdf4:	e0bffd17 	ldw	r2,-12(fp)
   2cdf8:	10800017 	ldw	r2,0(r2)
   2cdfc:	10800817 	ldw	r2,32(r2)
   2ce00:	10000726 	beq	r2,zero,2ce20 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   2ce04:	e0bffd17 	ldw	r2,-12(fp)
   2ce08:	10800017 	ldw	r2,0(r2)
   2ce0c:	10800817 	ldw	r2,32(r2)
   2ce10:	e13ffd17 	ldw	r4,-12(fp)
   2ce14:	e17fff17 	ldw	r5,-4(fp)
   2ce18:	103ee83a 	callr	r2
   2ce1c:	00000a06 	br	2ce48 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2ce20:	e0bfff17 	ldw	r2,-4(fp)
   2ce24:	00c80004 	movi	r3,8192
   2ce28:	10c00115 	stw	r3,4(r2)
      return 0;
   2ce2c:	0005883a 	mov	r2,zero
   2ce30:	00000506 	br	2ce48 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2ce34:	002cd540 	call	2cd54 <alt_get_errno>
   2ce38:	1007883a 	mov	r3,r2
   2ce3c:	00801444 	movi	r2,81
   2ce40:	18800015 	stw	r2,0(r3)
    return -1;
   2ce44:	00bfffc4 	movi	r2,-1
  }
}
   2ce48:	e037883a 	mov	sp,fp
   2ce4c:	dfc00117 	ldw	ra,4(sp)
   2ce50:	df000017 	ldw	fp,0(sp)
   2ce54:	dec00204 	addi	sp,sp,8
   2ce58:	f800283a 	ret

0002ce5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ce5c:	defffe04 	addi	sp,sp,-8
   2ce60:	dfc00115 	stw	ra,4(sp)
   2ce64:	df000015 	stw	fp,0(sp)
   2ce68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2ce6c:	008000f4 	movhi	r2,3
   2ce70:	10876b04 	addi	r2,r2,7596
   2ce74:	10800017 	ldw	r2,0(r2)
   2ce78:	10000526 	beq	r2,zero,2ce90 <alt_get_errno+0x34>
   2ce7c:	008000f4 	movhi	r2,3
   2ce80:	10876b04 	addi	r2,r2,7596
   2ce84:	10800017 	ldw	r2,0(r2)
   2ce88:	103ee83a 	callr	r2
   2ce8c:	00000206 	br	2ce98 <alt_get_errno+0x3c>
   2ce90:	008000f4 	movhi	r2,3
   2ce94:	108e6204 	addi	r2,r2,14728
}
   2ce98:	e037883a 	mov	sp,fp
   2ce9c:	dfc00117 	ldw	ra,4(sp)
   2cea0:	df000017 	ldw	fp,0(sp)
   2cea4:	dec00204 	addi	sp,sp,8
   2cea8:	f800283a 	ret

0002ceac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2ceac:	deffed04 	addi	sp,sp,-76
   2ceb0:	dfc01215 	stw	ra,72(sp)
   2ceb4:	df001115 	stw	fp,68(sp)
   2ceb8:	df001104 	addi	fp,sp,68
   2cebc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2cec0:	e0bfff17 	ldw	r2,-4(fp)
   2cec4:	10000816 	blt	r2,zero,2cee8 <isatty+0x3c>
   2cec8:	e13fff17 	ldw	r4,-4(fp)
   2cecc:	01400304 	movi	r5,12
   2ced0:	002a3dc0 	call	2a3dc <__mulsi3>
   2ced4:	1007883a 	mov	r3,r2
   2ced8:	008000f4 	movhi	r2,3
   2cedc:	1082b704 	addi	r2,r2,2780
   2cee0:	1885883a 	add	r2,r3,r2
   2cee4:	00000106 	br	2ceec <isatty+0x40>
   2cee8:	0005883a 	mov	r2,zero
   2ceec:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2cef0:	e0bfef17 	ldw	r2,-68(fp)
   2cef4:	10000e26 	beq	r2,zero,2cf30 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2cef8:	e0bfef17 	ldw	r2,-68(fp)
   2cefc:	10800017 	ldw	r2,0(r2)
   2cf00:	10800817 	ldw	r2,32(r2)
   2cf04:	1000021e 	bne	r2,zero,2cf10 <isatty+0x64>
    {
      return 1;
   2cf08:	00800044 	movi	r2,1
   2cf0c:	00000d06 	br	2cf44 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2cf10:	e0bff004 	addi	r2,fp,-64
   2cf14:	e13fff17 	ldw	r4,-4(fp)
   2cf18:	100b883a 	mov	r5,r2
   2cf1c:	002cda40 	call	2cda4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2cf20:	e0bff117 	ldw	r2,-60(fp)
   2cf24:	10880020 	cmpeqi	r2,r2,8192
   2cf28:	10803fcc 	andi	r2,r2,255
   2cf2c:	00000506 	br	2cf44 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2cf30:	002ce5c0 	call	2ce5c <alt_get_errno>
   2cf34:	1007883a 	mov	r3,r2
   2cf38:	00801444 	movi	r2,81
   2cf3c:	18800015 	stw	r2,0(r3)
    return 0;
   2cf40:	0005883a 	mov	r2,zero
  }
}
   2cf44:	e037883a 	mov	sp,fp
   2cf48:	dfc00117 	ldw	ra,4(sp)
   2cf4c:	df000017 	ldw	fp,0(sp)
   2cf50:	dec00204 	addi	sp,sp,8
   2cf54:	f800283a 	ret

0002cf58 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2cf58:	defffc04 	addi	sp,sp,-16
   2cf5c:	df000315 	stw	fp,12(sp)
   2cf60:	df000304 	addi	fp,sp,12
   2cf64:	e13ffd15 	stw	r4,-12(fp)
   2cf68:	e17ffe15 	stw	r5,-8(fp)
   2cf6c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2cf70:	e0fffe17 	ldw	r3,-8(fp)
   2cf74:	e0bffd17 	ldw	r2,-12(fp)
   2cf78:	18800c26 	beq	r3,r2,2cfac <alt_load_section+0x54>
  {
    while( to != end )
   2cf7c:	00000806 	br	2cfa0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   2cf80:	e0bffe17 	ldw	r2,-8(fp)
   2cf84:	10c00104 	addi	r3,r2,4
   2cf88:	e0fffe15 	stw	r3,-8(fp)
   2cf8c:	e0fffd17 	ldw	r3,-12(fp)
   2cf90:	19000104 	addi	r4,r3,4
   2cf94:	e13ffd15 	stw	r4,-12(fp)
   2cf98:	18c00017 	ldw	r3,0(r3)
   2cf9c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2cfa0:	e0fffe17 	ldw	r3,-8(fp)
   2cfa4:	e0bfff17 	ldw	r2,-4(fp)
   2cfa8:	18bff51e 	bne	r3,r2,2cf80 <__alt_data_end+0xffff0a60>
    {
      *to++ = *from++;
    }
  }
}
   2cfac:	e037883a 	mov	sp,fp
   2cfb0:	df000017 	ldw	fp,0(sp)
   2cfb4:	dec00104 	addi	sp,sp,4
   2cfb8:	f800283a 	ret

0002cfbc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2cfbc:	defffe04 	addi	sp,sp,-8
   2cfc0:	dfc00115 	stw	ra,4(sp)
   2cfc4:	df000015 	stw	fp,0(sp)
   2cfc8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2cfcc:	010000f4 	movhi	r4,3
   2cfd0:	21077004 	addi	r4,r4,7616
   2cfd4:	014000f4 	movhi	r5,3
   2cfd8:	29408404 	addi	r5,r5,528
   2cfdc:	018000f4 	movhi	r6,3
   2cfe0:	31877004 	addi	r6,r6,7616
   2cfe4:	002cf580 	call	2cf58 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2cfe8:	010000b4 	movhi	r4,2
   2cfec:	21000804 	addi	r4,r4,32
   2cff0:	014000b4 	movhi	r5,2
   2cff4:	29400804 	addi	r5,r5,32
   2cff8:	018000b4 	movhi	r6,2
   2cffc:	31808b04 	addi	r6,r6,556
   2d000:	002cf580 	call	2cf58 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2d004:	010000f4 	movhi	r4,3
   2d008:	213fc004 	addi	r4,r4,-256
   2d00c:	014000f4 	movhi	r5,3
   2d010:	297fc004 	addi	r5,r5,-256
   2d014:	018000f4 	movhi	r6,3
   2d018:	31808404 	addi	r6,r6,528
   2d01c:	002cf580 	call	2cf58 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2d020:	002eddc0 	call	2eddc <alt_dcache_flush_all>
  alt_icache_flush_all();
   2d024:	002efa40 	call	2efa4 <alt_icache_flush_all>
}
   2d028:	e037883a 	mov	sp,fp
   2d02c:	dfc00117 	ldw	ra,4(sp)
   2d030:	df000017 	ldw	fp,0(sp)
   2d034:	dec00204 	addi	sp,sp,8
   2d038:	f800283a 	ret

0002d03c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d03c:	defffe04 	addi	sp,sp,-8
   2d040:	dfc00115 	stw	ra,4(sp)
   2d044:	df000015 	stw	fp,0(sp)
   2d048:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d04c:	008000f4 	movhi	r2,3
   2d050:	10876b04 	addi	r2,r2,7596
   2d054:	10800017 	ldw	r2,0(r2)
   2d058:	10000526 	beq	r2,zero,2d070 <alt_get_errno+0x34>
   2d05c:	008000f4 	movhi	r2,3
   2d060:	10876b04 	addi	r2,r2,7596
   2d064:	10800017 	ldw	r2,0(r2)
   2d068:	103ee83a 	callr	r2
   2d06c:	00000206 	br	2d078 <alt_get_errno+0x3c>
   2d070:	008000f4 	movhi	r2,3
   2d074:	108e6204 	addi	r2,r2,14728
}
   2d078:	e037883a 	mov	sp,fp
   2d07c:	dfc00117 	ldw	ra,4(sp)
   2d080:	df000017 	ldw	fp,0(sp)
   2d084:	dec00204 	addi	sp,sp,8
   2d088:	f800283a 	ret

0002d08c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2d08c:	defff904 	addi	sp,sp,-28
   2d090:	dfc00615 	stw	ra,24(sp)
   2d094:	df000515 	stw	fp,20(sp)
   2d098:	df000504 	addi	fp,sp,20
   2d09c:	e13ffd15 	stw	r4,-12(fp)
   2d0a0:	e17ffe15 	stw	r5,-8(fp)
   2d0a4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2d0a8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d0ac:	e0bffd17 	ldw	r2,-12(fp)
   2d0b0:	10000816 	blt	r2,zero,2d0d4 <lseek+0x48>
   2d0b4:	e13ffd17 	ldw	r4,-12(fp)
   2d0b8:	01400304 	movi	r5,12
   2d0bc:	002a3dc0 	call	2a3dc <__mulsi3>
   2d0c0:	1007883a 	mov	r3,r2
   2d0c4:	008000f4 	movhi	r2,3
   2d0c8:	1082b704 	addi	r2,r2,2780
   2d0cc:	1885883a 	add	r2,r3,r2
   2d0d0:	00000106 	br	2d0d8 <lseek+0x4c>
   2d0d4:	0005883a 	mov	r2,zero
   2d0d8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2d0dc:	e0bffc17 	ldw	r2,-16(fp)
   2d0e0:	10001026 	beq	r2,zero,2d124 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2d0e4:	e0bffc17 	ldw	r2,-16(fp)
   2d0e8:	10800017 	ldw	r2,0(r2)
   2d0ec:	10800717 	ldw	r2,28(r2)
   2d0f0:	10000926 	beq	r2,zero,2d118 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2d0f4:	e0bffc17 	ldw	r2,-16(fp)
   2d0f8:	10800017 	ldw	r2,0(r2)
   2d0fc:	10800717 	ldw	r2,28(r2)
   2d100:	e13ffc17 	ldw	r4,-16(fp)
   2d104:	e17ffe17 	ldw	r5,-8(fp)
   2d108:	e1bfff17 	ldw	r6,-4(fp)
   2d10c:	103ee83a 	callr	r2
   2d110:	e0bffb15 	stw	r2,-20(fp)
   2d114:	00000506 	br	2d12c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2d118:	00bfde84 	movi	r2,-134
   2d11c:	e0bffb15 	stw	r2,-20(fp)
   2d120:	00000206 	br	2d12c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   2d124:	00bfebc4 	movi	r2,-81
   2d128:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2d12c:	e0bffb17 	ldw	r2,-20(fp)
   2d130:	1000070e 	bge	r2,zero,2d150 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   2d134:	002d03c0 	call	2d03c <alt_get_errno>
   2d138:	1007883a 	mov	r3,r2
   2d13c:	e0bffb17 	ldw	r2,-20(fp)
   2d140:	0085c83a 	sub	r2,zero,r2
   2d144:	18800015 	stw	r2,0(r3)
    rc = -1;
   2d148:	00bfffc4 	movi	r2,-1
   2d14c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2d150:	e0bffb17 	ldw	r2,-20(fp)
}
   2d154:	e037883a 	mov	sp,fp
   2d158:	dfc00117 	ldw	ra,4(sp)
   2d15c:	df000017 	ldw	fp,0(sp)
   2d160:	dec00204 	addi	sp,sp,8
   2d164:	f800283a 	ret

0002d168 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2d168:	defffd04 	addi	sp,sp,-12
   2d16c:	dfc00215 	stw	ra,8(sp)
   2d170:	df000115 	stw	fp,4(sp)
   2d174:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2d178:	0009883a 	mov	r4,zero
   2d17c:	002d65c0 	call	2d65c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2d180:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2d184:	002d6900 	call	2d690 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2d188:	010000f4 	movhi	r4,3
   2d18c:	21007904 	addi	r4,r4,484
   2d190:	014000f4 	movhi	r5,3
   2d194:	29407904 	addi	r5,r5,484
   2d198:	018000f4 	movhi	r6,3
   2d19c:	31807904 	addi	r6,r6,484
   2d1a0:	002f3700 	call	2f370 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2d1a4:	002eeec0 	call	2eeec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2d1a8:	010000f4 	movhi	r4,3
   2d1ac:	213bd204 	addi	r4,r4,-4280
   2d1b0:	002fb5c0 	call	2fb5c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2d1b4:	d1270317 	ldw	r4,-25588(gp)
   2d1b8:	d0e70417 	ldw	r3,-25584(gp)
   2d1bc:	d0a70517 	ldw	r2,-25580(gp)
   2d1c0:	180b883a 	mov	r5,r3
   2d1c4:	100d883a 	mov	r6,r2
   2d1c8:	00202680 	call	20268 <main>
   2d1cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2d1d0:	01000044 	movi	r4,1
   2d1d4:	002cc500 	call	2cc50 <close>
  exit (result);
   2d1d8:	e13fff17 	ldw	r4,-4(fp)
   2d1dc:	002fb700 	call	2fb70 <exit>

0002d1e0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2d1e0:	defffe04 	addi	sp,sp,-8
   2d1e4:	df000115 	stw	fp,4(sp)
   2d1e8:	df000104 	addi	fp,sp,4
   2d1ec:	e13fff15 	stw	r4,-4(fp)
}
   2d1f0:	e037883a 	mov	sp,fp
   2d1f4:	df000017 	ldw	fp,0(sp)
   2d1f8:	dec00104 	addi	sp,sp,4
   2d1fc:	f800283a 	ret

0002d200 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2d200:	defffe04 	addi	sp,sp,-8
   2d204:	df000115 	stw	fp,4(sp)
   2d208:	df000104 	addi	fp,sp,4
   2d20c:	e13fff15 	stw	r4,-4(fp)
}
   2d210:	e037883a 	mov	sp,fp
   2d214:	df000017 	ldw	fp,0(sp)
   2d218:	dec00104 	addi	sp,sp,4
   2d21c:	f800283a 	ret

0002d220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d220:	defffe04 	addi	sp,sp,-8
   2d224:	dfc00115 	stw	ra,4(sp)
   2d228:	df000015 	stw	fp,0(sp)
   2d22c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d230:	008000f4 	movhi	r2,3
   2d234:	10876b04 	addi	r2,r2,7596
   2d238:	10800017 	ldw	r2,0(r2)
   2d23c:	10000526 	beq	r2,zero,2d254 <alt_get_errno+0x34>
   2d240:	008000f4 	movhi	r2,3
   2d244:	10876b04 	addi	r2,r2,7596
   2d248:	10800017 	ldw	r2,0(r2)
   2d24c:	103ee83a 	callr	r2
   2d250:	00000206 	br	2d25c <alt_get_errno+0x3c>
   2d254:	008000f4 	movhi	r2,3
   2d258:	108e6204 	addi	r2,r2,14728
}
   2d25c:	e037883a 	mov	sp,fp
   2d260:	dfc00117 	ldw	ra,4(sp)
   2d264:	df000017 	ldw	fp,0(sp)
   2d268:	dec00204 	addi	sp,sp,8
   2d26c:	f800283a 	ret

0002d270 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2d270:	defff904 	addi	sp,sp,-28
   2d274:	dfc00615 	stw	ra,24(sp)
   2d278:	df000515 	stw	fp,20(sp)
   2d27c:	df000504 	addi	fp,sp,20
   2d280:	e13ffd15 	stw	r4,-12(fp)
   2d284:	e17ffe15 	stw	r5,-8(fp)
   2d288:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d28c:	e0bffd17 	ldw	r2,-12(fp)
   2d290:	10000816 	blt	r2,zero,2d2b4 <read+0x44>
   2d294:	e13ffd17 	ldw	r4,-12(fp)
   2d298:	01400304 	movi	r5,12
   2d29c:	002a3dc0 	call	2a3dc <__mulsi3>
   2d2a0:	1007883a 	mov	r3,r2
   2d2a4:	008000f4 	movhi	r2,3
   2d2a8:	1082b704 	addi	r2,r2,2780
   2d2ac:	1885883a 	add	r2,r3,r2
   2d2b0:	00000106 	br	2d2b8 <read+0x48>
   2d2b4:	0005883a 	mov	r2,zero
   2d2b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2d2bc:	e0bffb17 	ldw	r2,-20(fp)
   2d2c0:	10002226 	beq	r2,zero,2d34c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2d2c4:	e0bffb17 	ldw	r2,-20(fp)
   2d2c8:	10800217 	ldw	r2,8(r2)
   2d2cc:	108000cc 	andi	r2,r2,3
   2d2d0:	10800060 	cmpeqi	r2,r2,1
   2d2d4:	1000181e 	bne	r2,zero,2d338 <read+0xc8>
        (fd->dev->read))
   2d2d8:	e0bffb17 	ldw	r2,-20(fp)
   2d2dc:	10800017 	ldw	r2,0(r2)
   2d2e0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2d2e4:	10001426 	beq	r2,zero,2d338 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2d2e8:	e0bffb17 	ldw	r2,-20(fp)
   2d2ec:	10800017 	ldw	r2,0(r2)
   2d2f0:	10800517 	ldw	r2,20(r2)
   2d2f4:	e0ffff17 	ldw	r3,-4(fp)
   2d2f8:	e13ffb17 	ldw	r4,-20(fp)
   2d2fc:	e17ffe17 	ldw	r5,-8(fp)
   2d300:	180d883a 	mov	r6,r3
   2d304:	103ee83a 	callr	r2
   2d308:	e0bffc15 	stw	r2,-16(fp)
   2d30c:	e0bffc17 	ldw	r2,-16(fp)
   2d310:	1000070e 	bge	r2,zero,2d330 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   2d314:	002d2200 	call	2d220 <alt_get_errno>
   2d318:	1007883a 	mov	r3,r2
   2d31c:	e0bffc17 	ldw	r2,-16(fp)
   2d320:	0085c83a 	sub	r2,zero,r2
   2d324:	18800015 	stw	r2,0(r3)
          return -1;
   2d328:	00bfffc4 	movi	r2,-1
   2d32c:	00000c06 	br	2d360 <read+0xf0>
        }
        return rval;
   2d330:	e0bffc17 	ldw	r2,-16(fp)
   2d334:	00000a06 	br	2d360 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2d338:	002d2200 	call	2d220 <alt_get_errno>
   2d33c:	1007883a 	mov	r3,r2
   2d340:	00800344 	movi	r2,13
   2d344:	18800015 	stw	r2,0(r3)
   2d348:	00000406 	br	2d35c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2d34c:	002d2200 	call	2d220 <alt_get_errno>
   2d350:	1007883a 	mov	r3,r2
   2d354:	00801444 	movi	r2,81
   2d358:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2d35c:	00bfffc4 	movi	r2,-1
}
   2d360:	e037883a 	mov	sp,fp
   2d364:	dfc00117 	ldw	ra,4(sp)
   2d368:	df000017 	ldw	fp,0(sp)
   2d36c:	dec00204 	addi	sp,sp,8
   2d370:	f800283a 	ret

0002d374 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2d374:	defffc04 	addi	sp,sp,-16
   2d378:	dfc00315 	stw	ra,12(sp)
   2d37c:	df000215 	stw	fp,8(sp)
   2d380:	dc000115 	stw	r16,4(sp)
   2d384:	df000204 	addi	fp,sp,8
   2d388:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   2d38c:	e0bffe17 	ldw	r2,-8(fp)
   2d390:	108000d0 	cmplti	r2,r2,3
   2d394:	1000111e 	bne	r2,zero,2d3dc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2d398:	040000f4 	movhi	r16,3
   2d39c:	8402b704 	addi	r16,r16,2780
   2d3a0:	e0bffe17 	ldw	r2,-8(fp)
   2d3a4:	1009883a 	mov	r4,r2
   2d3a8:	01400304 	movi	r5,12
   2d3ac:	002a3dc0 	call	2a3dc <__mulsi3>
   2d3b0:	8085883a 	add	r2,r16,r2
   2d3b4:	10800204 	addi	r2,r2,8
   2d3b8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2d3bc:	040000f4 	movhi	r16,3
   2d3c0:	8402b704 	addi	r16,r16,2780
   2d3c4:	e0bffe17 	ldw	r2,-8(fp)
   2d3c8:	1009883a 	mov	r4,r2
   2d3cc:	01400304 	movi	r5,12
   2d3d0:	002a3dc0 	call	2a3dc <__mulsi3>
   2d3d4:	8085883a 	add	r2,r16,r2
   2d3d8:	10000015 	stw	zero,0(r2)
  }
}
   2d3dc:	e6ffff04 	addi	sp,fp,-4
   2d3e0:	dfc00217 	ldw	ra,8(sp)
   2d3e4:	df000117 	ldw	fp,4(sp)
   2d3e8:	dc000017 	ldw	r16,0(sp)
   2d3ec:	dec00304 	addi	sp,sp,12
   2d3f0:	f800283a 	ret

0002d3f4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2d3f4:	defff904 	addi	sp,sp,-28
   2d3f8:	df000615 	stw	fp,24(sp)
   2d3fc:	df000604 	addi	fp,sp,24
   2d400:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d404:	0005303a 	rdctl	r2,status
   2d408:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d40c:	e0fffc17 	ldw	r3,-16(fp)
   2d410:	00bfff84 	movi	r2,-2
   2d414:	1884703a 	and	r2,r3,r2
   2d418:	1001703a 	wrctl	status,r2
  
  return context;
   2d41c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2d420:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2d424:	d0a00c17 	ldw	r2,-32720(gp)
   2d428:	10c000c4 	addi	r3,r2,3
   2d42c:	00bfff04 	movi	r2,-4
   2d430:	1884703a 	and	r2,r3,r2
   2d434:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2d438:	d0e00c17 	ldw	r3,-32720(gp)
   2d43c:	e0bfff17 	ldw	r2,-4(fp)
   2d440:	1887883a 	add	r3,r3,r2
   2d444:	00800134 	movhi	r2,4
   2d448:	10b14804 	addi	r2,r2,-15072
   2d44c:	10c0062e 	bgeu	r2,r3,2d468 <sbrk+0x74>
   2d450:	e0bffa17 	ldw	r2,-24(fp)
   2d454:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d458:	e0bffd17 	ldw	r2,-12(fp)
   2d45c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2d460:	00bfffc4 	movi	r2,-1
   2d464:	00000b06 	br	2d494 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2d468:	d0a00c17 	ldw	r2,-32720(gp)
   2d46c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   2d470:	d0e00c17 	ldw	r3,-32720(gp)
   2d474:	e0bfff17 	ldw	r2,-4(fp)
   2d478:	1885883a 	add	r2,r3,r2
   2d47c:	d0a00c15 	stw	r2,-32720(gp)
   2d480:	e0bffa17 	ldw	r2,-24(fp)
   2d484:	e0bffe15 	stw	r2,-8(fp)
   2d488:	e0bffe17 	ldw	r2,-8(fp)
   2d48c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2d490:	e0bffb17 	ldw	r2,-20(fp)
} 
   2d494:	e037883a 	mov	sp,fp
   2d498:	df000017 	ldw	fp,0(sp)
   2d49c:	dec00104 	addi	sp,sp,4
   2d4a0:	f800283a 	ret

0002d4a4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2d4a4:	defffd04 	addi	sp,sp,-12
   2d4a8:	dfc00215 	stw	ra,8(sp)
   2d4ac:	df000115 	stw	fp,4(sp)
   2d4b0:	df000104 	addi	fp,sp,4
   2d4b4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   2d4b8:	e13fff17 	ldw	r4,-4(fp)
   2d4bc:	002ec840 	call	2ec84 <alt_busy_sleep>
}
   2d4c0:	e037883a 	mov	sp,fp
   2d4c4:	dfc00117 	ldw	ra,4(sp)
   2d4c8:	df000017 	ldw	fp,0(sp)
   2d4cc:	dec00204 	addi	sp,sp,8
   2d4d0:	f800283a 	ret

0002d4d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d4d4:	defffe04 	addi	sp,sp,-8
   2d4d8:	dfc00115 	stw	ra,4(sp)
   2d4dc:	df000015 	stw	fp,0(sp)
   2d4e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d4e4:	008000f4 	movhi	r2,3
   2d4e8:	10876b04 	addi	r2,r2,7596
   2d4ec:	10800017 	ldw	r2,0(r2)
   2d4f0:	10000526 	beq	r2,zero,2d508 <alt_get_errno+0x34>
   2d4f4:	008000f4 	movhi	r2,3
   2d4f8:	10876b04 	addi	r2,r2,7596
   2d4fc:	10800017 	ldw	r2,0(r2)
   2d500:	103ee83a 	callr	r2
   2d504:	00000206 	br	2d510 <alt_get_errno+0x3c>
   2d508:	008000f4 	movhi	r2,3
   2d50c:	108e6204 	addi	r2,r2,14728
}
   2d510:	e037883a 	mov	sp,fp
   2d514:	dfc00117 	ldw	ra,4(sp)
   2d518:	df000017 	ldw	fp,0(sp)
   2d51c:	dec00204 	addi	sp,sp,8
   2d520:	f800283a 	ret

0002d524 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2d524:	defff904 	addi	sp,sp,-28
   2d528:	dfc00615 	stw	ra,24(sp)
   2d52c:	df000515 	stw	fp,20(sp)
   2d530:	df000504 	addi	fp,sp,20
   2d534:	e13ffd15 	stw	r4,-12(fp)
   2d538:	e17ffe15 	stw	r5,-8(fp)
   2d53c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d540:	e0bffd17 	ldw	r2,-12(fp)
   2d544:	10000816 	blt	r2,zero,2d568 <write+0x44>
   2d548:	e13ffd17 	ldw	r4,-12(fp)
   2d54c:	01400304 	movi	r5,12
   2d550:	002a3dc0 	call	2a3dc <__mulsi3>
   2d554:	1007883a 	mov	r3,r2
   2d558:	008000f4 	movhi	r2,3
   2d55c:	1082b704 	addi	r2,r2,2780
   2d560:	1885883a 	add	r2,r3,r2
   2d564:	00000106 	br	2d56c <write+0x48>
   2d568:	0005883a 	mov	r2,zero
   2d56c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2d570:	e0bffb17 	ldw	r2,-20(fp)
   2d574:	10002126 	beq	r2,zero,2d5fc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2d578:	e0bffb17 	ldw	r2,-20(fp)
   2d57c:	10800217 	ldw	r2,8(r2)
   2d580:	108000cc 	andi	r2,r2,3
   2d584:	10001826 	beq	r2,zero,2d5e8 <write+0xc4>
   2d588:	e0bffb17 	ldw	r2,-20(fp)
   2d58c:	10800017 	ldw	r2,0(r2)
   2d590:	10800617 	ldw	r2,24(r2)
   2d594:	10001426 	beq	r2,zero,2d5e8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2d598:	e0bffb17 	ldw	r2,-20(fp)
   2d59c:	10800017 	ldw	r2,0(r2)
   2d5a0:	10800617 	ldw	r2,24(r2)
   2d5a4:	e0ffff17 	ldw	r3,-4(fp)
   2d5a8:	e13ffb17 	ldw	r4,-20(fp)
   2d5ac:	e17ffe17 	ldw	r5,-8(fp)
   2d5b0:	180d883a 	mov	r6,r3
   2d5b4:	103ee83a 	callr	r2
   2d5b8:	e0bffc15 	stw	r2,-16(fp)
   2d5bc:	e0bffc17 	ldw	r2,-16(fp)
   2d5c0:	1000070e 	bge	r2,zero,2d5e0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   2d5c4:	002d4d40 	call	2d4d4 <alt_get_errno>
   2d5c8:	1007883a 	mov	r3,r2
   2d5cc:	e0bffc17 	ldw	r2,-16(fp)
   2d5d0:	0085c83a 	sub	r2,zero,r2
   2d5d4:	18800015 	stw	r2,0(r3)
        return -1;
   2d5d8:	00bfffc4 	movi	r2,-1
   2d5dc:	00000c06 	br	2d610 <write+0xec>
      }
      return rval;
   2d5e0:	e0bffc17 	ldw	r2,-16(fp)
   2d5e4:	00000a06 	br	2d610 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2d5e8:	002d4d40 	call	2d4d4 <alt_get_errno>
   2d5ec:	1007883a 	mov	r3,r2
   2d5f0:	00800344 	movi	r2,13
   2d5f4:	18800015 	stw	r2,0(r3)
   2d5f8:	00000406 	br	2d60c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2d5fc:	002d4d40 	call	2d4d4 <alt_get_errno>
   2d600:	1007883a 	mov	r3,r2
   2d604:	00801444 	movi	r2,81
   2d608:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2d60c:	00bfffc4 	movi	r2,-1
}
   2d610:	e037883a 	mov	sp,fp
   2d614:	dfc00117 	ldw	ra,4(sp)
   2d618:	df000017 	ldw	fp,0(sp)
   2d61c:	dec00204 	addi	sp,sp,8
   2d620:	f800283a 	ret

0002d624 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2d624:	defffd04 	addi	sp,sp,-12
   2d628:	dfc00215 	stw	ra,8(sp)
   2d62c:	df000115 	stw	fp,4(sp)
   2d630:	df000104 	addi	fp,sp,4
   2d634:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2d638:	e13fff17 	ldw	r4,-4(fp)
   2d63c:	014000f4 	movhi	r5,3
   2d640:	29476804 	addi	r5,r5,7584
   2d644:	002ee480 	call	2ee48 <alt_dev_llist_insert>
}
   2d648:	e037883a 	mov	sp,fp
   2d64c:	dfc00117 	ldw	ra,4(sp)
   2d650:	df000017 	ldw	fp,0(sp)
   2d654:	dec00204 	addi	sp,sp,8
   2d658:	f800283a 	ret

0002d65c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2d65c:	defffd04 	addi	sp,sp,-12
   2d660:	dfc00215 	stw	ra,8(sp)
   2d664:	df000115 	stw	fp,4(sp)
   2d668:	df000104 	addi	fp,sp,4
   2d66c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   2d670:	002f8280 	call	2f828 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2d674:	00800044 	movi	r2,1
   2d678:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2d67c:	e037883a 	mov	sp,fp
   2d680:	dfc00117 	ldw	ra,4(sp)
   2d684:	df000017 	ldw	fp,0(sp)
   2d688:	dec00204 	addi	sp,sp,8
   2d68c:	f800283a 	ret

0002d690 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2d690:	defffe04 	addi	sp,sp,-8
   2d694:	dfc00115 	stw	ra,4(sp)
   2d698:	df000015 	stw	fp,0(sp)
   2d69c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK, sys_clk);
   2d6a0:	01000134 	movhi	r4,4
   2d6a4:	21040004 	addi	r4,r4,4096
   2d6a8:	000b883a 	mov	r5,zero
   2d6ac:	01800044 	movi	r6,1
   2d6b0:	01c0fa04 	movi	r7,1000
   2d6b4:	002e1cc0 	call	2e1cc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   2d6b8:	010000f4 	movhi	r4,3
   2d6bc:	21032104 	addi	r4,r4,3204
   2d6c0:	000b883a 	mov	r5,zero
   2d6c4:	01800084 	movi	r6,2
   2d6c8:	002d8700 	call	2d870 <altera_avalon_jtag_uart_init>
   2d6cc:	010000f4 	movhi	r4,3
   2d6d0:	21031704 	addi	r4,r4,3164
   2d6d4:	002d6240 	call	2d624 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
   2d6d8:	010000f4 	movhi	r4,3
   2d6dc:	21073904 	addi	r4,r4,7396
   2d6e0:	000b883a 	mov	r5,zero
   2d6e4:	000d883a 	mov	r6,zero
   2d6e8:	002e3640 	call	2e364 <altera_avalon_uart_init>
   2d6ec:	010000f4 	movhi	r4,3
   2d6f0:	21072f04 	addi	r4,r4,7356
   2d6f4:	002d6240 	call	2d624 <alt_dev_reg>
}
   2d6f8:	e037883a 	mov	sp,fp
   2d6fc:	dfc00117 	ldw	ra,4(sp)
   2d700:	df000017 	ldw	fp,0(sp)
   2d704:	dec00204 	addi	sp,sp,8
   2d708:	f800283a 	ret

0002d70c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2d70c:	defffa04 	addi	sp,sp,-24
   2d710:	dfc00515 	stw	ra,20(sp)
   2d714:	df000415 	stw	fp,16(sp)
   2d718:	df000404 	addi	fp,sp,16
   2d71c:	e13ffd15 	stw	r4,-12(fp)
   2d720:	e17ffe15 	stw	r5,-8(fp)
   2d724:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2d728:	e0bffd17 	ldw	r2,-12(fp)
   2d72c:	10800017 	ldw	r2,0(r2)
   2d730:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2d734:	e0bffc17 	ldw	r2,-16(fp)
   2d738:	10c00a04 	addi	r3,r2,40
   2d73c:	e0bffd17 	ldw	r2,-12(fp)
   2d740:	10800217 	ldw	r2,8(r2)
   2d744:	1809883a 	mov	r4,r3
   2d748:	e17ffe17 	ldw	r5,-8(fp)
   2d74c:	e1bfff17 	ldw	r6,-4(fp)
   2d750:	100f883a 	mov	r7,r2
   2d754:	002dd340 	call	2dd34 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2d758:	e037883a 	mov	sp,fp
   2d75c:	dfc00117 	ldw	ra,4(sp)
   2d760:	df000017 	ldw	fp,0(sp)
   2d764:	dec00204 	addi	sp,sp,8
   2d768:	f800283a 	ret

0002d76c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2d76c:	defffa04 	addi	sp,sp,-24
   2d770:	dfc00515 	stw	ra,20(sp)
   2d774:	df000415 	stw	fp,16(sp)
   2d778:	df000404 	addi	fp,sp,16
   2d77c:	e13ffd15 	stw	r4,-12(fp)
   2d780:	e17ffe15 	stw	r5,-8(fp)
   2d784:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2d788:	e0bffd17 	ldw	r2,-12(fp)
   2d78c:	10800017 	ldw	r2,0(r2)
   2d790:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2d794:	e0bffc17 	ldw	r2,-16(fp)
   2d798:	10c00a04 	addi	r3,r2,40
   2d79c:	e0bffd17 	ldw	r2,-12(fp)
   2d7a0:	10800217 	ldw	r2,8(r2)
   2d7a4:	1809883a 	mov	r4,r3
   2d7a8:	e17ffe17 	ldw	r5,-8(fp)
   2d7ac:	e1bfff17 	ldw	r6,-4(fp)
   2d7b0:	100f883a 	mov	r7,r2
   2d7b4:	002df400 	call	2df40 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2d7b8:	e037883a 	mov	sp,fp
   2d7bc:	dfc00117 	ldw	ra,4(sp)
   2d7c0:	df000017 	ldw	fp,0(sp)
   2d7c4:	dec00204 	addi	sp,sp,8
   2d7c8:	f800283a 	ret

0002d7cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2d7cc:	defffc04 	addi	sp,sp,-16
   2d7d0:	dfc00315 	stw	ra,12(sp)
   2d7d4:	df000215 	stw	fp,8(sp)
   2d7d8:	df000204 	addi	fp,sp,8
   2d7dc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2d7e0:	e0bfff17 	ldw	r2,-4(fp)
   2d7e4:	10800017 	ldw	r2,0(r2)
   2d7e8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2d7ec:	e0bffe17 	ldw	r2,-8(fp)
   2d7f0:	10c00a04 	addi	r3,r2,40
   2d7f4:	e0bfff17 	ldw	r2,-4(fp)
   2d7f8:	10800217 	ldw	r2,8(r2)
   2d7fc:	1809883a 	mov	r4,r3
   2d800:	100b883a 	mov	r5,r2
   2d804:	002dbe00 	call	2dbe0 <altera_avalon_jtag_uart_close>
}
   2d808:	e037883a 	mov	sp,fp
   2d80c:	dfc00117 	ldw	ra,4(sp)
   2d810:	df000017 	ldw	fp,0(sp)
   2d814:	dec00204 	addi	sp,sp,8
   2d818:	f800283a 	ret

0002d81c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2d81c:	defffa04 	addi	sp,sp,-24
   2d820:	dfc00515 	stw	ra,20(sp)
   2d824:	df000415 	stw	fp,16(sp)
   2d828:	df000404 	addi	fp,sp,16
   2d82c:	e13ffd15 	stw	r4,-12(fp)
   2d830:	e17ffe15 	stw	r5,-8(fp)
   2d834:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2d838:	e0bffd17 	ldw	r2,-12(fp)
   2d83c:	10800017 	ldw	r2,0(r2)
   2d840:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2d844:	e0bffc17 	ldw	r2,-16(fp)
   2d848:	10800a04 	addi	r2,r2,40
   2d84c:	1009883a 	mov	r4,r2
   2d850:	e17ffe17 	ldw	r5,-8(fp)
   2d854:	e1bfff17 	ldw	r6,-4(fp)
   2d858:	002dc480 	call	2dc48 <altera_avalon_jtag_uart_ioctl>
}
   2d85c:	e037883a 	mov	sp,fp
   2d860:	dfc00117 	ldw	ra,4(sp)
   2d864:	df000017 	ldw	fp,0(sp)
   2d868:	dec00204 	addi	sp,sp,8
   2d86c:	f800283a 	ret

0002d870 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2d870:	defffa04 	addi	sp,sp,-24
   2d874:	dfc00515 	stw	ra,20(sp)
   2d878:	df000415 	stw	fp,16(sp)
   2d87c:	df000404 	addi	fp,sp,16
   2d880:	e13ffd15 	stw	r4,-12(fp)
   2d884:	e17ffe15 	stw	r5,-8(fp)
   2d888:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2d88c:	e0bffd17 	ldw	r2,-12(fp)
   2d890:	00c00044 	movi	r3,1
   2d894:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2d898:	e0bffd17 	ldw	r2,-12(fp)
   2d89c:	10800017 	ldw	r2,0(r2)
   2d8a0:	10800104 	addi	r2,r2,4
   2d8a4:	1007883a 	mov	r3,r2
   2d8a8:	e0bffd17 	ldw	r2,-12(fp)
   2d8ac:	10800817 	ldw	r2,32(r2)
   2d8b0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2d8b4:	e0fffe17 	ldw	r3,-8(fp)
   2d8b8:	e0bfff17 	ldw	r2,-4(fp)
   2d8bc:	d8000015 	stw	zero,0(sp)
   2d8c0:	1809883a 	mov	r4,r3
   2d8c4:	100b883a 	mov	r5,r2
   2d8c8:	018000f4 	movhi	r6,3
   2d8cc:	31b64d04 	addi	r6,r6,-9932
   2d8d0:	e1fffd17 	ldw	r7,-12(fp)
   2d8d4:	002efc00 	call	2efc0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2d8d8:	e0bffd17 	ldw	r2,-12(fp)
   2d8dc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2d8e0:	e0bffd17 	ldw	r2,-12(fp)
   2d8e4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2d8e8:	008000f4 	movhi	r2,3
   2d8ec:	108e6704 	addi	r2,r2,14748
   2d8f0:	10800017 	ldw	r2,0(r2)
   2d8f4:	1809883a 	mov	r4,r3
   2d8f8:	100b883a 	mov	r5,r2
   2d8fc:	018000f4 	movhi	r6,3
   2d900:	31b6ce04 	addi	r6,r6,-9416
   2d904:	e1fffd17 	ldw	r7,-12(fp)
   2d908:	002eb440 	call	2eb44 <alt_alarm_start>
   2d90c:	1000040e 	bge	r2,zero,2d920 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2d910:	e0fffd17 	ldw	r3,-12(fp)
   2d914:	00a00034 	movhi	r2,32768
   2d918:	10bfffc4 	addi	r2,r2,-1
   2d91c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2d920:	e037883a 	mov	sp,fp
   2d924:	dfc00117 	ldw	ra,4(sp)
   2d928:	df000017 	ldw	fp,0(sp)
   2d92c:	dec00204 	addi	sp,sp,8
   2d930:	f800283a 	ret

0002d934 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2d934:	defff804 	addi	sp,sp,-32
   2d938:	df000715 	stw	fp,28(sp)
   2d93c:	df000704 	addi	fp,sp,28
   2d940:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2d944:	e0bfff17 	ldw	r2,-4(fp)
   2d948:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2d94c:	e0bffb17 	ldw	r2,-20(fp)
   2d950:	10800017 	ldw	r2,0(r2)
   2d954:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2d958:	e0bffc17 	ldw	r2,-16(fp)
   2d95c:	10800104 	addi	r2,r2,4
   2d960:	10800037 	ldwio	r2,0(r2)
   2d964:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2d968:	e0bffd17 	ldw	r2,-12(fp)
   2d96c:	1080c00c 	andi	r2,r2,768
   2d970:	1000011e 	bne	r2,zero,2d978 <altera_avalon_jtag_uart_irq+0x44>
      break;
   2d974:	00006c06 	br	2db28 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2d978:	e0bffd17 	ldw	r2,-12(fp)
   2d97c:	1080400c 	andi	r2,r2,256
   2d980:	10003426 	beq	r2,zero,2da54 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2d984:	00800074 	movhi	r2,1
   2d988:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2d98c:	e0bffb17 	ldw	r2,-20(fp)
   2d990:	10800a17 	ldw	r2,40(r2)
   2d994:	10800044 	addi	r2,r2,1
   2d998:	1081ffcc 	andi	r2,r2,2047
   2d99c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2d9a0:	e0bffb17 	ldw	r2,-20(fp)
   2d9a4:	10c00b17 	ldw	r3,44(r2)
   2d9a8:	e0bffe17 	ldw	r2,-8(fp)
   2d9ac:	1880011e 	bne	r3,r2,2d9b4 <altera_avalon_jtag_uart_irq+0x80>
          break;
   2d9b0:	00001606 	br	2da0c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2d9b4:	e0bffc17 	ldw	r2,-16(fp)
   2d9b8:	10800037 	ldwio	r2,0(r2)
   2d9bc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2d9c0:	e0bff917 	ldw	r2,-28(fp)
   2d9c4:	10a0000c 	andi	r2,r2,32768
   2d9c8:	1000011e 	bne	r2,zero,2d9d0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   2d9cc:	00000f06 	br	2da0c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2d9d0:	e0bffb17 	ldw	r2,-20(fp)
   2d9d4:	10800a17 	ldw	r2,40(r2)
   2d9d8:	e0fff917 	ldw	r3,-28(fp)
   2d9dc:	1809883a 	mov	r4,r3
   2d9e0:	e0fffb17 	ldw	r3,-20(fp)
   2d9e4:	1885883a 	add	r2,r3,r2
   2d9e8:	10800e04 	addi	r2,r2,56
   2d9ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2d9f0:	e0bffb17 	ldw	r2,-20(fp)
   2d9f4:	10800a17 	ldw	r2,40(r2)
   2d9f8:	10800044 	addi	r2,r2,1
   2d9fc:	10c1ffcc 	andi	r3,r2,2047
   2da00:	e0bffb17 	ldw	r2,-20(fp)
   2da04:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2da08:	003fe006 	br	2d98c <__alt_data_end+0xffff146c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2da0c:	e0bff917 	ldw	r2,-28(fp)
   2da10:	10bfffec 	andhi	r2,r2,65535
   2da14:	10000f26 	beq	r2,zero,2da54 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2da18:	e0bffb17 	ldw	r2,-20(fp)
   2da1c:	10c00817 	ldw	r3,32(r2)
   2da20:	00bfff84 	movi	r2,-2
   2da24:	1886703a 	and	r3,r3,r2
   2da28:	e0bffb17 	ldw	r2,-20(fp)
   2da2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2da30:	e0bffc17 	ldw	r2,-16(fp)
   2da34:	10800104 	addi	r2,r2,4
   2da38:	1007883a 	mov	r3,r2
   2da3c:	e0bffb17 	ldw	r2,-20(fp)
   2da40:	10800817 	ldw	r2,32(r2)
   2da44:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2da48:	e0bffc17 	ldw	r2,-16(fp)
   2da4c:	10800104 	addi	r2,r2,4
   2da50:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2da54:	e0bffd17 	ldw	r2,-12(fp)
   2da58:	1080800c 	andi	r2,r2,512
   2da5c:	10003126 	beq	r2,zero,2db24 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2da60:	e0bffd17 	ldw	r2,-12(fp)
   2da64:	1004d43a 	srli	r2,r2,16
   2da68:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2da6c:	00001406 	br	2dac0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2da70:	e0bffc17 	ldw	r2,-16(fp)
   2da74:	e0fffb17 	ldw	r3,-20(fp)
   2da78:	18c00d17 	ldw	r3,52(r3)
   2da7c:	e13ffb17 	ldw	r4,-20(fp)
   2da80:	20c7883a 	add	r3,r4,r3
   2da84:	18c20e04 	addi	r3,r3,2104
   2da88:	18c00003 	ldbu	r3,0(r3)
   2da8c:	18c03fcc 	andi	r3,r3,255
   2da90:	18c0201c 	xori	r3,r3,128
   2da94:	18ffe004 	addi	r3,r3,-128
   2da98:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2da9c:	e0bffb17 	ldw	r2,-20(fp)
   2daa0:	10800d17 	ldw	r2,52(r2)
   2daa4:	10800044 	addi	r2,r2,1
   2daa8:	10c1ffcc 	andi	r3,r2,2047
   2daac:	e0bffb17 	ldw	r2,-20(fp)
   2dab0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2dab4:	e0bffa17 	ldw	r2,-24(fp)
   2dab8:	10bfffc4 	addi	r2,r2,-1
   2dabc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2dac0:	e0bffa17 	ldw	r2,-24(fp)
   2dac4:	10000526 	beq	r2,zero,2dadc <altera_avalon_jtag_uart_irq+0x1a8>
   2dac8:	e0bffb17 	ldw	r2,-20(fp)
   2dacc:	10c00d17 	ldw	r3,52(r2)
   2dad0:	e0bffb17 	ldw	r2,-20(fp)
   2dad4:	10800c17 	ldw	r2,48(r2)
   2dad8:	18bfe51e 	bne	r3,r2,2da70 <__alt_data_end+0xffff1550>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2dadc:	e0bffa17 	ldw	r2,-24(fp)
   2dae0:	10001026 	beq	r2,zero,2db24 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2dae4:	e0bffb17 	ldw	r2,-20(fp)
   2dae8:	10c00817 	ldw	r3,32(r2)
   2daec:	00bfff44 	movi	r2,-3
   2daf0:	1886703a 	and	r3,r3,r2
   2daf4:	e0bffb17 	ldw	r2,-20(fp)
   2daf8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2dafc:	e0bffb17 	ldw	r2,-20(fp)
   2db00:	10800017 	ldw	r2,0(r2)
   2db04:	10800104 	addi	r2,r2,4
   2db08:	1007883a 	mov	r3,r2
   2db0c:	e0bffb17 	ldw	r2,-20(fp)
   2db10:	10800817 	ldw	r2,32(r2)
   2db14:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2db18:	e0bffc17 	ldw	r2,-16(fp)
   2db1c:	10800104 	addi	r2,r2,4
   2db20:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2db24:	003f8c06 	br	2d958 <__alt_data_end+0xffff1438>
}
   2db28:	e037883a 	mov	sp,fp
   2db2c:	df000017 	ldw	fp,0(sp)
   2db30:	dec00104 	addi	sp,sp,4
   2db34:	f800283a 	ret

0002db38 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2db38:	defff804 	addi	sp,sp,-32
   2db3c:	df000715 	stw	fp,28(sp)
   2db40:	df000704 	addi	fp,sp,28
   2db44:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2db48:	e0bffb17 	ldw	r2,-20(fp)
   2db4c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2db50:	e0bff917 	ldw	r2,-28(fp)
   2db54:	10800017 	ldw	r2,0(r2)
   2db58:	10800104 	addi	r2,r2,4
   2db5c:	10800037 	ldwio	r2,0(r2)
   2db60:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2db64:	e0bffa17 	ldw	r2,-24(fp)
   2db68:	1081000c 	andi	r2,r2,1024
   2db6c:	10000b26 	beq	r2,zero,2db9c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2db70:	e0bff917 	ldw	r2,-28(fp)
   2db74:	10800017 	ldw	r2,0(r2)
   2db78:	10800104 	addi	r2,r2,4
   2db7c:	1007883a 	mov	r3,r2
   2db80:	e0bff917 	ldw	r2,-28(fp)
   2db84:	10800817 	ldw	r2,32(r2)
   2db88:	10810014 	ori	r2,r2,1024
   2db8c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2db90:	e0bff917 	ldw	r2,-28(fp)
   2db94:	10000915 	stw	zero,36(r2)
   2db98:	00000a06 	br	2dbc4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2db9c:	e0bff917 	ldw	r2,-28(fp)
   2dba0:	10c00917 	ldw	r3,36(r2)
   2dba4:	00a00034 	movhi	r2,32768
   2dba8:	10bfff04 	addi	r2,r2,-4
   2dbac:	10c00536 	bltu	r2,r3,2dbc4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2dbb0:	e0bff917 	ldw	r2,-28(fp)
   2dbb4:	10800917 	ldw	r2,36(r2)
   2dbb8:	10c00044 	addi	r3,r2,1
   2dbbc:	e0bff917 	ldw	r2,-28(fp)
   2dbc0:	10c00915 	stw	r3,36(r2)
   2dbc4:	008000f4 	movhi	r2,3
   2dbc8:	108e6704 	addi	r2,r2,14748
   2dbcc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2dbd0:	e037883a 	mov	sp,fp
   2dbd4:	df000017 	ldw	fp,0(sp)
   2dbd8:	dec00104 	addi	sp,sp,4
   2dbdc:	f800283a 	ret

0002dbe0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2dbe0:	defffd04 	addi	sp,sp,-12
   2dbe4:	df000215 	stw	fp,8(sp)
   2dbe8:	df000204 	addi	fp,sp,8
   2dbec:	e13ffe15 	stw	r4,-8(fp)
   2dbf0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2dbf4:	00000506 	br	2dc0c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2dbf8:	e0bfff17 	ldw	r2,-4(fp)
   2dbfc:	1090000c 	andi	r2,r2,16384
   2dc00:	10000226 	beq	r2,zero,2dc0c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2dc04:	00bffd44 	movi	r2,-11
   2dc08:	00000b06 	br	2dc38 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2dc0c:	e0bffe17 	ldw	r2,-8(fp)
   2dc10:	10c00d17 	ldw	r3,52(r2)
   2dc14:	e0bffe17 	ldw	r2,-8(fp)
   2dc18:	10800c17 	ldw	r2,48(r2)
   2dc1c:	18800526 	beq	r3,r2,2dc34 <altera_avalon_jtag_uart_close+0x54>
   2dc20:	e0bffe17 	ldw	r2,-8(fp)
   2dc24:	10c00917 	ldw	r3,36(r2)
   2dc28:	e0bffe17 	ldw	r2,-8(fp)
   2dc2c:	10800117 	ldw	r2,4(r2)
   2dc30:	18bff136 	bltu	r3,r2,2dbf8 <__alt_data_end+0xffff16d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2dc34:	0005883a 	mov	r2,zero
}
   2dc38:	e037883a 	mov	sp,fp
   2dc3c:	df000017 	ldw	fp,0(sp)
   2dc40:	dec00104 	addi	sp,sp,4
   2dc44:	f800283a 	ret

0002dc48 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2dc48:	defffa04 	addi	sp,sp,-24
   2dc4c:	df000515 	stw	fp,20(sp)
   2dc50:	df000504 	addi	fp,sp,20
   2dc54:	e13ffd15 	stw	r4,-12(fp)
   2dc58:	e17ffe15 	stw	r5,-8(fp)
   2dc5c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2dc60:	00bff9c4 	movi	r2,-25
   2dc64:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2dc68:	e0bffe17 	ldw	r2,-8(fp)
   2dc6c:	10da8060 	cmpeqi	r3,r2,27137
   2dc70:	1800031e 	bne	r3,zero,2dc80 <altera_avalon_jtag_uart_ioctl+0x38>
   2dc74:	109a80a0 	cmpeqi	r2,r2,27138
   2dc78:	1000191e 	bne	r2,zero,2dce0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   2dc7c:	00002806 	br	2dd20 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2dc80:	e0bffd17 	ldw	r2,-12(fp)
   2dc84:	10c00117 	ldw	r3,4(r2)
   2dc88:	00a00034 	movhi	r2,32768
   2dc8c:	10bfffc4 	addi	r2,r2,-1
   2dc90:	18801226 	beq	r3,r2,2dcdc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   2dc94:	e0bfff17 	ldw	r2,-4(fp)
   2dc98:	10800017 	ldw	r2,0(r2)
   2dc9c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2dca0:	e0bffc17 	ldw	r2,-16(fp)
   2dca4:	10800090 	cmplti	r2,r2,2
   2dca8:	1000061e 	bne	r2,zero,2dcc4 <altera_avalon_jtag_uart_ioctl+0x7c>
   2dcac:	e0fffc17 	ldw	r3,-16(fp)
   2dcb0:	00a00034 	movhi	r2,32768
   2dcb4:	10bfffc4 	addi	r2,r2,-1
   2dcb8:	18800226 	beq	r3,r2,2dcc4 <altera_avalon_jtag_uart_ioctl+0x7c>
   2dcbc:	e0bffc17 	ldw	r2,-16(fp)
   2dcc0:	00000206 	br	2dccc <altera_avalon_jtag_uart_ioctl+0x84>
   2dcc4:	00a00034 	movhi	r2,32768
   2dcc8:	10bfff84 	addi	r2,r2,-2
   2dccc:	e0fffd17 	ldw	r3,-12(fp)
   2dcd0:	18800115 	stw	r2,4(r3)
      rc = 0;
   2dcd4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2dcd8:	00001106 	br	2dd20 <altera_avalon_jtag_uart_ioctl+0xd8>
   2dcdc:	00001006 	br	2dd20 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2dce0:	e0bffd17 	ldw	r2,-12(fp)
   2dce4:	10c00117 	ldw	r3,4(r2)
   2dce8:	00a00034 	movhi	r2,32768
   2dcec:	10bfffc4 	addi	r2,r2,-1
   2dcf0:	18800a26 	beq	r3,r2,2dd1c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2dcf4:	e0bffd17 	ldw	r2,-12(fp)
   2dcf8:	10c00917 	ldw	r3,36(r2)
   2dcfc:	e0bffd17 	ldw	r2,-12(fp)
   2dd00:	10800117 	ldw	r2,4(r2)
   2dd04:	1885803a 	cmpltu	r2,r3,r2
   2dd08:	10c03fcc 	andi	r3,r2,255
   2dd0c:	e0bfff17 	ldw	r2,-4(fp)
   2dd10:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2dd14:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2dd18:	00000006 	br	2dd1c <altera_avalon_jtag_uart_ioctl+0xd4>
   2dd1c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2dd20:	e0bffb17 	ldw	r2,-20(fp)
}
   2dd24:	e037883a 	mov	sp,fp
   2dd28:	df000017 	ldw	fp,0(sp)
   2dd2c:	dec00104 	addi	sp,sp,4
   2dd30:	f800283a 	ret

0002dd34 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2dd34:	defff304 	addi	sp,sp,-52
   2dd38:	dfc00c15 	stw	ra,48(sp)
   2dd3c:	df000b15 	stw	fp,44(sp)
   2dd40:	df000b04 	addi	fp,sp,44
   2dd44:	e13ffc15 	stw	r4,-16(fp)
   2dd48:	e17ffd15 	stw	r5,-12(fp)
   2dd4c:	e1bffe15 	stw	r6,-8(fp)
   2dd50:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2dd54:	e0bffd17 	ldw	r2,-12(fp)
   2dd58:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2dd5c:	00004906 	br	2de84 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2dd60:	e0bffc17 	ldw	r2,-16(fp)
   2dd64:	10800a17 	ldw	r2,40(r2)
   2dd68:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2dd6c:	e0bffc17 	ldw	r2,-16(fp)
   2dd70:	10800b17 	ldw	r2,44(r2)
   2dd74:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2dd78:	e0fff717 	ldw	r3,-36(fp)
   2dd7c:	e0bff817 	ldw	r2,-32(fp)
   2dd80:	18800536 	bltu	r3,r2,2dd98 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2dd84:	e0fff717 	ldw	r3,-36(fp)
   2dd88:	e0bff817 	ldw	r2,-32(fp)
   2dd8c:	1885c83a 	sub	r2,r3,r2
   2dd90:	e0bff615 	stw	r2,-40(fp)
   2dd94:	00000406 	br	2dda8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2dd98:	00c20004 	movi	r3,2048
   2dd9c:	e0bff817 	ldw	r2,-32(fp)
   2dda0:	1885c83a 	sub	r2,r3,r2
   2dda4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2dda8:	e0bff617 	ldw	r2,-40(fp)
   2ddac:	1000011e 	bne	r2,zero,2ddb4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   2ddb0:	00001d06 	br	2de28 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   2ddb4:	e0fffe17 	ldw	r3,-8(fp)
   2ddb8:	e0bff617 	ldw	r2,-40(fp)
   2ddbc:	1880022e 	bgeu	r3,r2,2ddc8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   2ddc0:	e0bffe17 	ldw	r2,-8(fp)
   2ddc4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2ddc8:	e0bff817 	ldw	r2,-32(fp)
   2ddcc:	10800e04 	addi	r2,r2,56
   2ddd0:	e0fffc17 	ldw	r3,-16(fp)
   2ddd4:	1885883a 	add	r2,r3,r2
   2ddd8:	e13ff517 	ldw	r4,-44(fp)
   2dddc:	100b883a 	mov	r5,r2
   2dde0:	e1bff617 	ldw	r6,-40(fp)
   2dde4:	00256280 	call	25628 <memcpy>
      ptr   += n;
   2dde8:	e0fff517 	ldw	r3,-44(fp)
   2ddec:	e0bff617 	ldw	r2,-40(fp)
   2ddf0:	1885883a 	add	r2,r3,r2
   2ddf4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2ddf8:	e0fffe17 	ldw	r3,-8(fp)
   2ddfc:	e0bff617 	ldw	r2,-40(fp)
   2de00:	1885c83a 	sub	r2,r3,r2
   2de04:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2de08:	e0fff817 	ldw	r3,-32(fp)
   2de0c:	e0bff617 	ldw	r2,-40(fp)
   2de10:	1885883a 	add	r2,r3,r2
   2de14:	10c1ffcc 	andi	r3,r2,2047
   2de18:	e0bffc17 	ldw	r2,-16(fp)
   2de1c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2de20:	e0bffe17 	ldw	r2,-8(fp)
   2de24:	00bfce16 	blt	zero,r2,2dd60 <__alt_data_end+0xffff1840>

    /* If we read any data then return it */
    if (ptr != buffer)
   2de28:	e0fff517 	ldw	r3,-44(fp)
   2de2c:	e0bffd17 	ldw	r2,-12(fp)
   2de30:	18800126 	beq	r3,r2,2de38 <altera_avalon_jtag_uart_read+0x104>
      break;
   2de34:	00001506 	br	2de8c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2de38:	e0bfff17 	ldw	r2,-4(fp)
   2de3c:	1090000c 	andi	r2,r2,16384
   2de40:	10000126 	beq	r2,zero,2de48 <altera_avalon_jtag_uart_read+0x114>
      break;
   2de44:	00001106 	br	2de8c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2de48:	0001883a 	nop
   2de4c:	e0bffc17 	ldw	r2,-16(fp)
   2de50:	10c00a17 	ldw	r3,40(r2)
   2de54:	e0bff717 	ldw	r2,-36(fp)
   2de58:	1880051e 	bne	r3,r2,2de70 <altera_avalon_jtag_uart_read+0x13c>
   2de5c:	e0bffc17 	ldw	r2,-16(fp)
   2de60:	10c00917 	ldw	r3,36(r2)
   2de64:	e0bffc17 	ldw	r2,-16(fp)
   2de68:	10800117 	ldw	r2,4(r2)
   2de6c:	18bff736 	bltu	r3,r2,2de4c <__alt_data_end+0xffff192c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2de70:	e0bffc17 	ldw	r2,-16(fp)
   2de74:	10c00a17 	ldw	r3,40(r2)
   2de78:	e0bff717 	ldw	r2,-36(fp)
   2de7c:	1880011e 	bne	r3,r2,2de84 <altera_avalon_jtag_uart_read+0x150>
      break;
   2de80:	00000206 	br	2de8c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2de84:	e0bffe17 	ldw	r2,-8(fp)
   2de88:	00bfb516 	blt	zero,r2,2dd60 <__alt_data_end+0xffff1840>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2de8c:	e0fff517 	ldw	r3,-44(fp)
   2de90:	e0bffd17 	ldw	r2,-12(fp)
   2de94:	18801826 	beq	r3,r2,2def8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2de98:	0005303a 	rdctl	r2,status
   2de9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2dea0:	e0fffa17 	ldw	r3,-24(fp)
   2dea4:	00bfff84 	movi	r2,-2
   2dea8:	1884703a 	and	r2,r3,r2
   2deac:	1001703a 	wrctl	status,r2
  
  return context;
   2deb0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2deb4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2deb8:	e0bffc17 	ldw	r2,-16(fp)
   2debc:	10800817 	ldw	r2,32(r2)
   2dec0:	10c00054 	ori	r3,r2,1
   2dec4:	e0bffc17 	ldw	r2,-16(fp)
   2dec8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2decc:	e0bffc17 	ldw	r2,-16(fp)
   2ded0:	10800017 	ldw	r2,0(r2)
   2ded4:	10800104 	addi	r2,r2,4
   2ded8:	1007883a 	mov	r3,r2
   2dedc:	e0bffc17 	ldw	r2,-16(fp)
   2dee0:	10800817 	ldw	r2,32(r2)
   2dee4:	18800035 	stwio	r2,0(r3)
   2dee8:	e0bff917 	ldw	r2,-28(fp)
   2deec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2def0:	e0bffb17 	ldw	r2,-20(fp)
   2def4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2def8:	e0fff517 	ldw	r3,-44(fp)
   2defc:	e0bffd17 	ldw	r2,-12(fp)
   2df00:	18800426 	beq	r3,r2,2df14 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   2df04:	e0fff517 	ldw	r3,-44(fp)
   2df08:	e0bffd17 	ldw	r2,-12(fp)
   2df0c:	1885c83a 	sub	r2,r3,r2
   2df10:	00000606 	br	2df2c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   2df14:	e0bfff17 	ldw	r2,-4(fp)
   2df18:	1090000c 	andi	r2,r2,16384
   2df1c:	10000226 	beq	r2,zero,2df28 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   2df20:	00bffd44 	movi	r2,-11
   2df24:	00000106 	br	2df2c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   2df28:	00bffec4 	movi	r2,-5
}
   2df2c:	e037883a 	mov	sp,fp
   2df30:	dfc00117 	ldw	ra,4(sp)
   2df34:	df000017 	ldw	fp,0(sp)
   2df38:	dec00204 	addi	sp,sp,8
   2df3c:	f800283a 	ret

0002df40 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2df40:	defff304 	addi	sp,sp,-52
   2df44:	dfc00c15 	stw	ra,48(sp)
   2df48:	df000b15 	stw	fp,44(sp)
   2df4c:	df000b04 	addi	fp,sp,44
   2df50:	e13ffc15 	stw	r4,-16(fp)
   2df54:	e17ffd15 	stw	r5,-12(fp)
   2df58:	e1bffe15 	stw	r6,-8(fp)
   2df5c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2df60:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2df64:	e0bffd17 	ldw	r2,-12(fp)
   2df68:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2df6c:	00003806 	br	2e050 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2df70:	e0bffc17 	ldw	r2,-16(fp)
   2df74:	10800c17 	ldw	r2,48(r2)
   2df78:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   2df7c:	e0bffc17 	ldw	r2,-16(fp)
   2df80:	10800d17 	ldw	r2,52(r2)
   2df84:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2df88:	e0fff817 	ldw	r3,-32(fp)
   2df8c:	e0bff517 	ldw	r2,-44(fp)
   2df90:	1880062e 	bgeu	r3,r2,2dfac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2df94:	e0fff517 	ldw	r3,-44(fp)
   2df98:	e0bff817 	ldw	r2,-32(fp)
   2df9c:	1885c83a 	sub	r2,r3,r2
   2dfa0:	10bfffc4 	addi	r2,r2,-1
   2dfa4:	e0bff615 	stw	r2,-40(fp)
   2dfa8:	00000b06 	br	2dfd8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2dfac:	e0bff517 	ldw	r2,-44(fp)
   2dfb0:	10000526 	beq	r2,zero,2dfc8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2dfb4:	00c20004 	movi	r3,2048
   2dfb8:	e0bff817 	ldw	r2,-32(fp)
   2dfbc:	1885c83a 	sub	r2,r3,r2
   2dfc0:	e0bff615 	stw	r2,-40(fp)
   2dfc4:	00000406 	br	2dfd8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2dfc8:	00c1ffc4 	movi	r3,2047
   2dfcc:	e0bff817 	ldw	r2,-32(fp)
   2dfd0:	1885c83a 	sub	r2,r3,r2
   2dfd4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2dfd8:	e0bff617 	ldw	r2,-40(fp)
   2dfdc:	1000011e 	bne	r2,zero,2dfe4 <altera_avalon_jtag_uart_write+0xa4>
        break;
   2dfe0:	00001d06 	br	2e058 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   2dfe4:	e0fffe17 	ldw	r3,-8(fp)
   2dfe8:	e0bff617 	ldw	r2,-40(fp)
   2dfec:	1880022e 	bgeu	r3,r2,2dff8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   2dff0:	e0bffe17 	ldw	r2,-8(fp)
   2dff4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2dff8:	e0bff817 	ldw	r2,-32(fp)
   2dffc:	10820e04 	addi	r2,r2,2104
   2e000:	e0fffc17 	ldw	r3,-16(fp)
   2e004:	1885883a 	add	r2,r3,r2
   2e008:	1009883a 	mov	r4,r2
   2e00c:	e17ffd17 	ldw	r5,-12(fp)
   2e010:	e1bff617 	ldw	r6,-40(fp)
   2e014:	00256280 	call	25628 <memcpy>
      ptr   += n;
   2e018:	e0fffd17 	ldw	r3,-12(fp)
   2e01c:	e0bff617 	ldw	r2,-40(fp)
   2e020:	1885883a 	add	r2,r3,r2
   2e024:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2e028:	e0fffe17 	ldw	r3,-8(fp)
   2e02c:	e0bff617 	ldw	r2,-40(fp)
   2e030:	1885c83a 	sub	r2,r3,r2
   2e034:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e038:	e0fff817 	ldw	r3,-32(fp)
   2e03c:	e0bff617 	ldw	r2,-40(fp)
   2e040:	1885883a 	add	r2,r3,r2
   2e044:	10c1ffcc 	andi	r3,r2,2047
   2e048:	e0bffc17 	ldw	r2,-16(fp)
   2e04c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2e050:	e0bffe17 	ldw	r2,-8(fp)
   2e054:	00bfc616 	blt	zero,r2,2df70 <__alt_data_end+0xffff1a50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e058:	0005303a 	rdctl	r2,status
   2e05c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e060:	e0fffa17 	ldw	r3,-24(fp)
   2e064:	00bfff84 	movi	r2,-2
   2e068:	1884703a 	and	r2,r3,r2
   2e06c:	1001703a 	wrctl	status,r2
  
  return context;
   2e070:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2e074:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2e078:	e0bffc17 	ldw	r2,-16(fp)
   2e07c:	10800817 	ldw	r2,32(r2)
   2e080:	10c00094 	ori	r3,r2,2
   2e084:	e0bffc17 	ldw	r2,-16(fp)
   2e088:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2e08c:	e0bffc17 	ldw	r2,-16(fp)
   2e090:	10800017 	ldw	r2,0(r2)
   2e094:	10800104 	addi	r2,r2,4
   2e098:	1007883a 	mov	r3,r2
   2e09c:	e0bffc17 	ldw	r2,-16(fp)
   2e0a0:	10800817 	ldw	r2,32(r2)
   2e0a4:	18800035 	stwio	r2,0(r3)
   2e0a8:	e0bff917 	ldw	r2,-28(fp)
   2e0ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e0b0:	e0bffb17 	ldw	r2,-20(fp)
   2e0b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2e0b8:	e0bffe17 	ldw	r2,-8(fp)
   2e0bc:	0080120e 	bge	zero,r2,2e108 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   2e0c0:	e0bfff17 	ldw	r2,-4(fp)
   2e0c4:	1090000c 	andi	r2,r2,16384
   2e0c8:	10000126 	beq	r2,zero,2e0d0 <altera_avalon_jtag_uart_write+0x190>
        break;
   2e0cc:	00001006 	br	2e110 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2e0d0:	0001883a 	nop
   2e0d4:	e0bffc17 	ldw	r2,-16(fp)
   2e0d8:	10c00d17 	ldw	r3,52(r2)
   2e0dc:	e0bff517 	ldw	r2,-44(fp)
   2e0e0:	1880051e 	bne	r3,r2,2e0f8 <altera_avalon_jtag_uart_write+0x1b8>
   2e0e4:	e0bffc17 	ldw	r2,-16(fp)
   2e0e8:	10c00917 	ldw	r3,36(r2)
   2e0ec:	e0bffc17 	ldw	r2,-16(fp)
   2e0f0:	10800117 	ldw	r2,4(r2)
   2e0f4:	18bff736 	bltu	r3,r2,2e0d4 <__alt_data_end+0xffff1bb4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2e0f8:	e0bffc17 	ldw	r2,-16(fp)
   2e0fc:	10800917 	ldw	r2,36(r2)
   2e100:	10000126 	beq	r2,zero,2e108 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   2e104:	00000206 	br	2e110 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   2e108:	e0bffe17 	ldw	r2,-8(fp)
   2e10c:	00bf9716 	blt	zero,r2,2df6c <__alt_data_end+0xffff1a4c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2e110:	e0fffd17 	ldw	r3,-12(fp)
   2e114:	e0bff717 	ldw	r2,-36(fp)
   2e118:	18800426 	beq	r3,r2,2e12c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   2e11c:	e0fffd17 	ldw	r3,-12(fp)
   2e120:	e0bff717 	ldw	r2,-36(fp)
   2e124:	1885c83a 	sub	r2,r3,r2
   2e128:	00000606 	br	2e144 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   2e12c:	e0bfff17 	ldw	r2,-4(fp)
   2e130:	1090000c 	andi	r2,r2,16384
   2e134:	10000226 	beq	r2,zero,2e140 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   2e138:	00bffd44 	movi	r2,-11
   2e13c:	00000106 	br	2e144 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2e140:	00bffec4 	movi	r2,-5
}
   2e144:	e037883a 	mov	sp,fp
   2e148:	dfc00117 	ldw	ra,4(sp)
   2e14c:	df000017 	ldw	fp,0(sp)
   2e150:	dec00204 	addi	sp,sp,8
   2e154:	f800283a 	ret

0002e158 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2e158:	defffa04 	addi	sp,sp,-24
   2e15c:	dfc00515 	stw	ra,20(sp)
   2e160:	df000415 	stw	fp,16(sp)
   2e164:	df000404 	addi	fp,sp,16
   2e168:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2e16c:	0007883a 	mov	r3,zero
   2e170:	e0bfff17 	ldw	r2,-4(fp)
   2e174:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2e178:	e0bfff17 	ldw	r2,-4(fp)
   2e17c:	10800104 	addi	r2,r2,4
   2e180:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e184:	0005303a 	rdctl	r2,status
   2e188:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e18c:	e0fffd17 	ldw	r3,-12(fp)
   2e190:	00bfff84 	movi	r2,-2
   2e194:	1884703a 	and	r2,r3,r2
   2e198:	1001703a 	wrctl	status,r2
  
  return context;
   2e19c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2e1a0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2e1a4:	002f7240 	call	2f724 <alt_tick>
   2e1a8:	e0bffc17 	ldw	r2,-16(fp)
   2e1ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e1b0:	e0bffe17 	ldw	r2,-8(fp)
   2e1b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2e1b8:	e037883a 	mov	sp,fp
   2e1bc:	dfc00117 	ldw	ra,4(sp)
   2e1c0:	df000017 	ldw	fp,0(sp)
   2e1c4:	dec00204 	addi	sp,sp,8
   2e1c8:	f800283a 	ret

0002e1cc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2e1cc:	defff804 	addi	sp,sp,-32
   2e1d0:	dfc00715 	stw	ra,28(sp)
   2e1d4:	df000615 	stw	fp,24(sp)
   2e1d8:	df000604 	addi	fp,sp,24
   2e1dc:	e13ffc15 	stw	r4,-16(fp)
   2e1e0:	e17ffd15 	stw	r5,-12(fp)
   2e1e4:	e1bffe15 	stw	r6,-8(fp)
   2e1e8:	e1ffff15 	stw	r7,-4(fp)
   2e1ec:	e0bfff17 	ldw	r2,-4(fp)
   2e1f0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2e1f4:	008000f4 	movhi	r2,3
   2e1f8:	108e6704 	addi	r2,r2,14748
   2e1fc:	10800017 	ldw	r2,0(r2)
   2e200:	1000041e 	bne	r2,zero,2e214 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   2e204:	008000f4 	movhi	r2,3
   2e208:	108e6704 	addi	r2,r2,14748
   2e20c:	e0fffb17 	ldw	r3,-20(fp)
   2e210:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2e214:	e0bffc17 	ldw	r2,-16(fp)
   2e218:	10800104 	addi	r2,r2,4
   2e21c:	00c001c4 	movi	r3,7
   2e220:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2e224:	d8000015 	stw	zero,0(sp)
   2e228:	e13ffd17 	ldw	r4,-12(fp)
   2e22c:	e17ffe17 	ldw	r5,-8(fp)
   2e230:	018000f4 	movhi	r6,3
   2e234:	31b85604 	addi	r6,r6,-7848
   2e238:	e1fffc17 	ldw	r7,-16(fp)
   2e23c:	002efc00 	call	2efc0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2e240:	e037883a 	mov	sp,fp
   2e244:	dfc00117 	ldw	ra,4(sp)
   2e248:	df000017 	ldw	fp,0(sp)
   2e24c:	dec00204 	addi	sp,sp,8
   2e250:	f800283a 	ret

0002e254 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2e254:	defffa04 	addi	sp,sp,-24
   2e258:	dfc00515 	stw	ra,20(sp)
   2e25c:	df000415 	stw	fp,16(sp)
   2e260:	df000404 	addi	fp,sp,16
   2e264:	e13ffd15 	stw	r4,-12(fp)
   2e268:	e17ffe15 	stw	r5,-8(fp)
   2e26c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2e270:	e0bffd17 	ldw	r2,-12(fp)
   2e274:	10800017 	ldw	r2,0(r2)
   2e278:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   2e27c:	e0bffc17 	ldw	r2,-16(fp)
   2e280:	10c00a04 	addi	r3,r2,40
   2e284:	e0bffd17 	ldw	r2,-12(fp)
   2e288:	10800217 	ldw	r2,8(r2)
   2e28c:	1809883a 	mov	r4,r3
   2e290:	e17ffe17 	ldw	r5,-8(fp)
   2e294:	e1bfff17 	ldw	r6,-4(fp)
   2e298:	100f883a 	mov	r7,r2
   2e29c:	002e76c0 	call	2e76c <altera_avalon_uart_read>
      fd->fd_flags);
}
   2e2a0:	e037883a 	mov	sp,fp
   2e2a4:	dfc00117 	ldw	ra,4(sp)
   2e2a8:	df000017 	ldw	fp,0(sp)
   2e2ac:	dec00204 	addi	sp,sp,8
   2e2b0:	f800283a 	ret

0002e2b4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2e2b4:	defffa04 	addi	sp,sp,-24
   2e2b8:	dfc00515 	stw	ra,20(sp)
   2e2bc:	df000415 	stw	fp,16(sp)
   2e2c0:	df000404 	addi	fp,sp,16
   2e2c4:	e13ffd15 	stw	r4,-12(fp)
   2e2c8:	e17ffe15 	stw	r5,-8(fp)
   2e2cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2e2d0:	e0bffd17 	ldw	r2,-12(fp)
   2e2d4:	10800017 	ldw	r2,0(r2)
   2e2d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   2e2dc:	e0bffc17 	ldw	r2,-16(fp)
   2e2e0:	10c00a04 	addi	r3,r2,40
   2e2e4:	e0bffd17 	ldw	r2,-12(fp)
   2e2e8:	10800217 	ldw	r2,8(r2)
   2e2ec:	1809883a 	mov	r4,r3
   2e2f0:	e17ffe17 	ldw	r5,-8(fp)
   2e2f4:	e1bfff17 	ldw	r6,-4(fp)
   2e2f8:	100f883a 	mov	r7,r2
   2e2fc:	002e9980 	call	2e998 <altera_avalon_uart_write>
      fd->fd_flags);
}
   2e300:	e037883a 	mov	sp,fp
   2e304:	dfc00117 	ldw	ra,4(sp)
   2e308:	df000017 	ldw	fp,0(sp)
   2e30c:	dec00204 	addi	sp,sp,8
   2e310:	f800283a 	ret

0002e314 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   2e314:	defffc04 	addi	sp,sp,-16
   2e318:	dfc00315 	stw	ra,12(sp)
   2e31c:	df000215 	stw	fp,8(sp)
   2e320:	df000204 	addi	fp,sp,8
   2e324:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2e328:	e0bfff17 	ldw	r2,-4(fp)
   2e32c:	10800017 	ldw	r2,0(r2)
   2e330:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   2e334:	e0bffe17 	ldw	r2,-8(fp)
   2e338:	10c00a04 	addi	r3,r2,40
   2e33c:	e0bfff17 	ldw	r2,-4(fp)
   2e340:	10800217 	ldw	r2,8(r2)
   2e344:	1809883a 	mov	r4,r3
   2e348:	100b883a 	mov	r5,r2
   2e34c:	002e6c80 	call	2e6c8 <altera_avalon_uart_close>
}
   2e350:	e037883a 	mov	sp,fp
   2e354:	dfc00117 	ldw	ra,4(sp)
   2e358:	df000017 	ldw	fp,0(sp)
   2e35c:	dec00204 	addi	sp,sp,8
   2e360:	f800283a 	ret

0002e364 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   2e364:	defff804 	addi	sp,sp,-32
   2e368:	dfc00715 	stw	ra,28(sp)
   2e36c:	df000615 	stw	fp,24(sp)
   2e370:	df000604 	addi	fp,sp,24
   2e374:	e13ffd15 	stw	r4,-12(fp)
   2e378:	e17ffe15 	stw	r5,-8(fp)
   2e37c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   2e380:	e0bffd17 	ldw	r2,-12(fp)
   2e384:	10800017 	ldw	r2,0(r2)
   2e388:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   2e38c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   2e390:	1000041e 	bne	r2,zero,2e3a4 <altera_avalon_uart_init+0x40>
   2e394:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2e398:	1000021e 	bne	r2,zero,2e3a4 <altera_avalon_uart_init+0x40>
   2e39c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   2e3a0:	10000226 	beq	r2,zero,2e3ac <altera_avalon_uart_init+0x48>
   2e3a4:	00800044 	movi	r2,1
   2e3a8:	00000106 	br	2e3b0 <altera_avalon_uart_init+0x4c>
   2e3ac:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2e3b0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   2e3b4:	e0bffc17 	ldw	r2,-16(fp)
   2e3b8:	10000f1e 	bne	r2,zero,2e3f8 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   2e3bc:	e0bffd17 	ldw	r2,-12(fp)
   2e3c0:	00c32004 	movi	r3,3200
   2e3c4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   2e3c8:	e0bffb17 	ldw	r2,-20(fp)
   2e3cc:	10800304 	addi	r2,r2,12
   2e3d0:	e0fffd17 	ldw	r3,-12(fp)
   2e3d4:	18c00117 	ldw	r3,4(r3)
   2e3d8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   2e3dc:	d8000015 	stw	zero,0(sp)
   2e3e0:	e13ffe17 	ldw	r4,-8(fp)
   2e3e4:	e17fff17 	ldw	r5,-4(fp)
   2e3e8:	018000f4 	movhi	r6,3
   2e3ec:	31b90304 	addi	r6,r6,-7156
   2e3f0:	e1fffd17 	ldw	r7,-12(fp)
   2e3f4:	002efc00 	call	2efc0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   2e3f8:	e037883a 	mov	sp,fp
   2e3fc:	dfc00117 	ldw	ra,4(sp)
   2e400:	df000017 	ldw	fp,0(sp)
   2e404:	dec00204 	addi	sp,sp,8
   2e408:	f800283a 	ret

0002e40c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   2e40c:	defffa04 	addi	sp,sp,-24
   2e410:	dfc00515 	stw	ra,20(sp)
   2e414:	df000415 	stw	fp,16(sp)
   2e418:	df000404 	addi	fp,sp,16
   2e41c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   2e420:	e0bfff17 	ldw	r2,-4(fp)
   2e424:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   2e428:	e0bffc17 	ldw	r2,-16(fp)
   2e42c:	10800017 	ldw	r2,0(r2)
   2e430:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   2e434:	e0bffd17 	ldw	r2,-12(fp)
   2e438:	10800204 	addi	r2,r2,8
   2e43c:	10800037 	ldwio	r2,0(r2)
   2e440:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   2e444:	e0bffd17 	ldw	r2,-12(fp)
   2e448:	10800204 	addi	r2,r2,8
   2e44c:	0007883a 	mov	r3,zero
   2e450:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   2e454:	e0bffd17 	ldw	r2,-12(fp)
   2e458:	10800204 	addi	r2,r2,8
   2e45c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   2e460:	e0bffe17 	ldw	r2,-8(fp)
   2e464:	1080200c 	andi	r2,r2,128
   2e468:	10000326 	beq	r2,zero,2e478 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   2e46c:	e13ffc17 	ldw	r4,-16(fp)
   2e470:	e17ffe17 	ldw	r5,-8(fp)
   2e474:	002e4a40 	call	2e4a4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   2e478:	e0bffe17 	ldw	r2,-8(fp)
   2e47c:	1081100c 	andi	r2,r2,1088
   2e480:	10000326 	beq	r2,zero,2e490 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   2e484:	e13ffc17 	ldw	r4,-16(fp)
   2e488:	e17ffe17 	ldw	r5,-8(fp)
   2e48c:	002e5840 	call	2e584 <altera_avalon_uart_txirq>
  }
  

}
   2e490:	e037883a 	mov	sp,fp
   2e494:	dfc00117 	ldw	ra,4(sp)
   2e498:	df000017 	ldw	fp,0(sp)
   2e49c:	dec00204 	addi	sp,sp,8
   2e4a0:	f800283a 	ret

0002e4a4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2e4a4:	defffc04 	addi	sp,sp,-16
   2e4a8:	df000315 	stw	fp,12(sp)
   2e4ac:	df000304 	addi	fp,sp,12
   2e4b0:	e13ffe15 	stw	r4,-8(fp)
   2e4b4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   2e4b8:	e0bfff17 	ldw	r2,-4(fp)
   2e4bc:	108000cc 	andi	r2,r2,3
   2e4c0:	10000126 	beq	r2,zero,2e4c8 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   2e4c4:	00002b06 	br	2e574 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   2e4c8:	e0bffe17 	ldw	r2,-8(fp)
   2e4cc:	10800317 	ldw	r2,12(r2)
   2e4d0:	e0bffe17 	ldw	r2,-8(fp)
   2e4d4:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2e4d8:	e0bffe17 	ldw	r2,-8(fp)
   2e4dc:	10800317 	ldw	r2,12(r2)
   2e4e0:	10800044 	addi	r2,r2,1
   2e4e4:	10800fcc 	andi	r2,r2,63
   2e4e8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   2e4ec:	e0bffe17 	ldw	r2,-8(fp)
   2e4f0:	10800317 	ldw	r2,12(r2)
   2e4f4:	e0fffe17 	ldw	r3,-8(fp)
   2e4f8:	18c00017 	ldw	r3,0(r3)
   2e4fc:	18c00037 	ldwio	r3,0(r3)
   2e500:	1809883a 	mov	r4,r3
   2e504:	e0fffe17 	ldw	r3,-8(fp)
   2e508:	1885883a 	add	r2,r3,r2
   2e50c:	10800704 	addi	r2,r2,28
   2e510:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   2e514:	e0bffe17 	ldw	r2,-8(fp)
   2e518:	e0fffd17 	ldw	r3,-12(fp)
   2e51c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2e520:	e0bffe17 	ldw	r2,-8(fp)
   2e524:	10800317 	ldw	r2,12(r2)
   2e528:	10800044 	addi	r2,r2,1
   2e52c:	10800fcc 	andi	r2,r2,63
   2e530:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   2e534:	e0bffe17 	ldw	r2,-8(fp)
   2e538:	10c00217 	ldw	r3,8(r2)
   2e53c:	e0bffd17 	ldw	r2,-12(fp)
   2e540:	18800c1e 	bne	r3,r2,2e574 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2e544:	e0bffe17 	ldw	r2,-8(fp)
   2e548:	10c00117 	ldw	r3,4(r2)
   2e54c:	00bfdfc4 	movi	r2,-129
   2e550:	1886703a 	and	r3,r3,r2
   2e554:	e0bffe17 	ldw	r2,-8(fp)
   2e558:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   2e55c:	e0bffe17 	ldw	r2,-8(fp)
   2e560:	10800017 	ldw	r2,0(r2)
   2e564:	10800304 	addi	r2,r2,12
   2e568:	e0fffe17 	ldw	r3,-8(fp)
   2e56c:	18c00117 	ldw	r3,4(r3)
   2e570:	10c00035 	stwio	r3,0(r2)
  }   
}
   2e574:	e037883a 	mov	sp,fp
   2e578:	df000017 	ldw	fp,0(sp)
   2e57c:	dec00104 	addi	sp,sp,4
   2e580:	f800283a 	ret

0002e584 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2e584:	defffb04 	addi	sp,sp,-20
   2e588:	df000415 	stw	fp,16(sp)
   2e58c:	df000404 	addi	fp,sp,16
   2e590:	e13ffc15 	stw	r4,-16(fp)
   2e594:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   2e598:	e0bffc17 	ldw	r2,-16(fp)
   2e59c:	10c00417 	ldw	r3,16(r2)
   2e5a0:	e0bffc17 	ldw	r2,-16(fp)
   2e5a4:	10800517 	ldw	r2,20(r2)
   2e5a8:	18803226 	beq	r3,r2,2e674 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2e5ac:	e0bffc17 	ldw	r2,-16(fp)
   2e5b0:	10800617 	ldw	r2,24(r2)
   2e5b4:	1080008c 	andi	r2,r2,2
   2e5b8:	10000326 	beq	r2,zero,2e5c8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2e5bc:	e0bffd17 	ldw	r2,-12(fp)
   2e5c0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2e5c4:	10001d26 	beq	r2,zero,2e63c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   2e5c8:	e0bffc17 	ldw	r2,-16(fp)
   2e5cc:	10800417 	ldw	r2,16(r2)
   2e5d0:	e0bffc17 	ldw	r2,-16(fp)
   2e5d4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   2e5d8:	e0bffc17 	ldw	r2,-16(fp)
   2e5dc:	10800017 	ldw	r2,0(r2)
   2e5e0:	10800104 	addi	r2,r2,4
   2e5e4:	e0fffc17 	ldw	r3,-16(fp)
   2e5e8:	18c00417 	ldw	r3,16(r3)
   2e5ec:	e13ffc17 	ldw	r4,-16(fp)
   2e5f0:	20c7883a 	add	r3,r4,r3
   2e5f4:	18c01704 	addi	r3,r3,92
   2e5f8:	18c00003 	ldbu	r3,0(r3)
   2e5fc:	18c03fcc 	andi	r3,r3,255
   2e600:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   2e604:	e0bffc17 	ldw	r2,-16(fp)
   2e608:	10800417 	ldw	r2,16(r2)
   2e60c:	10800044 	addi	r2,r2,1
   2e610:	e0fffc17 	ldw	r3,-16(fp)
   2e614:	18800415 	stw	r2,16(r3)
   2e618:	10c00fcc 	andi	r3,r2,63
   2e61c:	e0bffc17 	ldw	r2,-16(fp)
   2e620:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2e624:	e0bffc17 	ldw	r2,-16(fp)
   2e628:	10800117 	ldw	r2,4(r2)
   2e62c:	10c01014 	ori	r3,r2,64
   2e630:	e0bffc17 	ldw	r2,-16(fp)
   2e634:	10c00115 	stw	r3,4(r2)
   2e638:	00000e06 	br	2e674 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   2e63c:	e0bffc17 	ldw	r2,-16(fp)
   2e640:	10800017 	ldw	r2,0(r2)
   2e644:	10800204 	addi	r2,r2,8
   2e648:	10800037 	ldwio	r2,0(r2)
   2e64c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2e650:	e0bffd17 	ldw	r2,-12(fp)
   2e654:	1082000c 	andi	r2,r2,2048
   2e658:	1000061e 	bne	r2,zero,2e674 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2e65c:	e0bffc17 	ldw	r2,-16(fp)
   2e660:	10c00117 	ldw	r3,4(r2)
   2e664:	00bfefc4 	movi	r2,-65
   2e668:	1886703a 	and	r3,r3,r2
   2e66c:	e0bffc17 	ldw	r2,-16(fp)
   2e670:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   2e674:	e0bffc17 	ldw	r2,-16(fp)
   2e678:	10c00417 	ldw	r3,16(r2)
   2e67c:	e0bffc17 	ldw	r2,-16(fp)
   2e680:	10800517 	ldw	r2,20(r2)
   2e684:	1880061e 	bne	r3,r2,2e6a0 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2e688:	e0bffc17 	ldw	r2,-16(fp)
   2e68c:	10c00117 	ldw	r3,4(r2)
   2e690:	00beefc4 	movi	r2,-1089
   2e694:	1886703a 	and	r3,r3,r2
   2e698:	e0bffc17 	ldw	r2,-16(fp)
   2e69c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2e6a0:	e0bffc17 	ldw	r2,-16(fp)
   2e6a4:	10800017 	ldw	r2,0(r2)
   2e6a8:	10800304 	addi	r2,r2,12
   2e6ac:	e0fffc17 	ldw	r3,-16(fp)
   2e6b0:	18c00117 	ldw	r3,4(r3)
   2e6b4:	10c00035 	stwio	r3,0(r2)
}
   2e6b8:	e037883a 	mov	sp,fp
   2e6bc:	df000017 	ldw	fp,0(sp)
   2e6c0:	dec00104 	addi	sp,sp,4
   2e6c4:	f800283a 	ret

0002e6c8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   2e6c8:	defffd04 	addi	sp,sp,-12
   2e6cc:	df000215 	stw	fp,8(sp)
   2e6d0:	df000204 	addi	fp,sp,8
   2e6d4:	e13ffe15 	stw	r4,-8(fp)
   2e6d8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2e6dc:	00000506 	br	2e6f4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2e6e0:	e0bfff17 	ldw	r2,-4(fp)
   2e6e4:	1090000c 	andi	r2,r2,16384
   2e6e8:	10000226 	beq	r2,zero,2e6f4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2e6ec:	00bffd44 	movi	r2,-11
   2e6f0:	00000606 	br	2e70c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2e6f4:	e0bffe17 	ldw	r2,-8(fp)
   2e6f8:	10c00417 	ldw	r3,16(r2)
   2e6fc:	e0bffe17 	ldw	r2,-8(fp)
   2e700:	10800517 	ldw	r2,20(r2)
   2e704:	18bff61e 	bne	r3,r2,2e6e0 <__alt_data_end+0xffff21c0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2e708:	0005883a 	mov	r2,zero
}
   2e70c:	e037883a 	mov	sp,fp
   2e710:	df000017 	ldw	fp,0(sp)
   2e714:	dec00104 	addi	sp,sp,4
   2e718:	f800283a 	ret

0002e71c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e71c:	defffe04 	addi	sp,sp,-8
   2e720:	dfc00115 	stw	ra,4(sp)
   2e724:	df000015 	stw	fp,0(sp)
   2e728:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e72c:	008000f4 	movhi	r2,3
   2e730:	10876b04 	addi	r2,r2,7596
   2e734:	10800017 	ldw	r2,0(r2)
   2e738:	10000526 	beq	r2,zero,2e750 <alt_get_errno+0x34>
   2e73c:	008000f4 	movhi	r2,3
   2e740:	10876b04 	addi	r2,r2,7596
   2e744:	10800017 	ldw	r2,0(r2)
   2e748:	103ee83a 	callr	r2
   2e74c:	00000206 	br	2e758 <alt_get_errno+0x3c>
   2e750:	008000f4 	movhi	r2,3
   2e754:	108e6204 	addi	r2,r2,14728
}
   2e758:	e037883a 	mov	sp,fp
   2e75c:	dfc00117 	ldw	ra,4(sp)
   2e760:	df000017 	ldw	fp,0(sp)
   2e764:	dec00204 	addi	sp,sp,8
   2e768:	f800283a 	ret

0002e76c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   2e76c:	defff204 	addi	sp,sp,-56
   2e770:	dfc00d15 	stw	ra,52(sp)
   2e774:	df000c15 	stw	fp,48(sp)
   2e778:	df000c04 	addi	fp,sp,48
   2e77c:	e13ffc15 	stw	r4,-16(fp)
   2e780:	e17ffd15 	stw	r5,-12(fp)
   2e784:	e1bffe15 	stw	r6,-8(fp)
   2e788:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   2e78c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   2e790:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   2e794:	e0bfff17 	ldw	r2,-4(fp)
   2e798:	1090000c 	andi	r2,r2,16384
   2e79c:	1005003a 	cmpeq	r2,r2,zero
   2e7a0:	10803fcc 	andi	r2,r2,255
   2e7a4:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2e7a8:	00001306 	br	2e7f8 <altera_avalon_uart_read+0x8c>
    {
      count++;
   2e7ac:	e0bff517 	ldw	r2,-44(fp)
   2e7b0:	10800044 	addi	r2,r2,1
   2e7b4:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   2e7b8:	e0bffd17 	ldw	r2,-12(fp)
   2e7bc:	10c00044 	addi	r3,r2,1
   2e7c0:	e0fffd15 	stw	r3,-12(fp)
   2e7c4:	e0fffc17 	ldw	r3,-16(fp)
   2e7c8:	18c00217 	ldw	r3,8(r3)
   2e7cc:	e13ffc17 	ldw	r4,-16(fp)
   2e7d0:	20c7883a 	add	r3,r4,r3
   2e7d4:	18c00704 	addi	r3,r3,28
   2e7d8:	18c00003 	ldbu	r3,0(r3)
   2e7dc:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   2e7e0:	e0bffc17 	ldw	r2,-16(fp)
   2e7e4:	10800217 	ldw	r2,8(r2)
   2e7e8:	10800044 	addi	r2,r2,1
   2e7ec:	10c00fcc 	andi	r3,r2,63
   2e7f0:	e0bffc17 	ldw	r2,-16(fp)
   2e7f4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2e7f8:	e0fff517 	ldw	r3,-44(fp)
   2e7fc:	e0bffe17 	ldw	r2,-8(fp)
   2e800:	1880050e 	bge	r3,r2,2e818 <altera_avalon_uart_read+0xac>
   2e804:	e0bffc17 	ldw	r2,-16(fp)
   2e808:	10c00217 	ldw	r3,8(r2)
   2e80c:	e0bffc17 	ldw	r2,-16(fp)
   2e810:	10800317 	ldw	r2,12(r2)
   2e814:	18bfe51e 	bne	r3,r2,2e7ac <__alt_data_end+0xffff228c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   2e818:	e0bff517 	ldw	r2,-44(fp)
   2e81c:	1000251e 	bne	r2,zero,2e8b4 <altera_avalon_uart_read+0x148>
   2e820:	e0bffc17 	ldw	r2,-16(fp)
   2e824:	10c00217 	ldw	r3,8(r2)
   2e828:	e0bffc17 	ldw	r2,-16(fp)
   2e82c:	10800317 	ldw	r2,12(r2)
   2e830:	1880201e 	bne	r3,r2,2e8b4 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   2e834:	e0bff617 	ldw	r2,-40(fp)
   2e838:	1000071e 	bne	r2,zero,2e858 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   2e83c:	002e71c0 	call	2e71c <alt_get_errno>
   2e840:	1007883a 	mov	r3,r2
   2e844:	008002c4 	movi	r2,11
   2e848:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   2e84c:	00800044 	movi	r2,1
   2e850:	e0bff405 	stb	r2,-48(fp)
        break;
   2e854:	00001b06 	br	2e8c4 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e858:	0005303a 	rdctl	r2,status
   2e85c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e860:	e0fff817 	ldw	r3,-32(fp)
   2e864:	00bfff84 	movi	r2,-2
   2e868:	1884703a 	and	r2,r3,r2
   2e86c:	1001703a 	wrctl	status,r2
  
  return context;
   2e870:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   2e874:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2e878:	e0bffc17 	ldw	r2,-16(fp)
   2e87c:	10800117 	ldw	r2,4(r2)
   2e880:	10c02014 	ori	r3,r2,128
   2e884:	e0bffc17 	ldw	r2,-16(fp)
   2e888:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2e88c:	e0bffc17 	ldw	r2,-16(fp)
   2e890:	10800017 	ldw	r2,0(r2)
   2e894:	10800304 	addi	r2,r2,12
   2e898:	e0fffc17 	ldw	r3,-16(fp)
   2e89c:	18c00117 	ldw	r3,4(r3)
   2e8a0:	10c00035 	stwio	r3,0(r2)
   2e8a4:	e0bff717 	ldw	r2,-36(fp)
   2e8a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e8ac:	e0bff917 	ldw	r2,-28(fp)
   2e8b0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   2e8b4:	e0bff517 	ldw	r2,-44(fp)
   2e8b8:	1000021e 	bne	r2,zero,2e8c4 <altera_avalon_uart_read+0x158>
   2e8bc:	e0bffe17 	ldw	r2,-8(fp)
   2e8c0:	103fb91e 	bne	r2,zero,2e7a8 <__alt_data_end+0xffff2288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e8c4:	0005303a 	rdctl	r2,status
   2e8c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e8cc:	e0fffa17 	ldw	r3,-24(fp)
   2e8d0:	00bfff84 	movi	r2,-2
   2e8d4:	1884703a 	and	r2,r3,r2
   2e8d8:	1001703a 	wrctl	status,r2
  
  return context;
   2e8dc:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   2e8e0:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2e8e4:	e0bffc17 	ldw	r2,-16(fp)
   2e8e8:	10800117 	ldw	r2,4(r2)
   2e8ec:	10c02014 	ori	r3,r2,128
   2e8f0:	e0bffc17 	ldw	r2,-16(fp)
   2e8f4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2e8f8:	e0bffc17 	ldw	r2,-16(fp)
   2e8fc:	10800017 	ldw	r2,0(r2)
   2e900:	10800304 	addi	r2,r2,12
   2e904:	e0fffc17 	ldw	r3,-16(fp)
   2e908:	18c00117 	ldw	r3,4(r3)
   2e90c:	10c00035 	stwio	r3,0(r2)
   2e910:	e0bff717 	ldw	r2,-36(fp)
   2e914:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e918:	e0bffb17 	ldw	r2,-20(fp)
   2e91c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   2e920:	e0bff403 	ldbu	r2,-48(fp)
   2e924:	10000226 	beq	r2,zero,2e930 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   2e928:	00bffd44 	movi	r2,-11
   2e92c:	00000106 	br	2e934 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   2e930:	e0bff517 	ldw	r2,-44(fp)
  }
}
   2e934:	e037883a 	mov	sp,fp
   2e938:	dfc00117 	ldw	ra,4(sp)
   2e93c:	df000017 	ldw	fp,0(sp)
   2e940:	dec00204 	addi	sp,sp,8
   2e944:	f800283a 	ret

0002e948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e948:	defffe04 	addi	sp,sp,-8
   2e94c:	dfc00115 	stw	ra,4(sp)
   2e950:	df000015 	stw	fp,0(sp)
   2e954:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e958:	008000f4 	movhi	r2,3
   2e95c:	10876b04 	addi	r2,r2,7596
   2e960:	10800017 	ldw	r2,0(r2)
   2e964:	10000526 	beq	r2,zero,2e97c <alt_get_errno+0x34>
   2e968:	008000f4 	movhi	r2,3
   2e96c:	10876b04 	addi	r2,r2,7596
   2e970:	10800017 	ldw	r2,0(r2)
   2e974:	103ee83a 	callr	r2
   2e978:	00000206 	br	2e984 <alt_get_errno+0x3c>
   2e97c:	008000f4 	movhi	r2,3
   2e980:	108e6204 	addi	r2,r2,14728
}
   2e984:	e037883a 	mov	sp,fp
   2e988:	dfc00117 	ldw	ra,4(sp)
   2e98c:	df000017 	ldw	fp,0(sp)
   2e990:	dec00204 	addi	sp,sp,8
   2e994:	f800283a 	ret

0002e998 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   2e998:	defff204 	addi	sp,sp,-56
   2e99c:	dfc00d15 	stw	ra,52(sp)
   2e9a0:	df000c15 	stw	fp,48(sp)
   2e9a4:	df000c04 	addi	fp,sp,48
   2e9a8:	e13ffc15 	stw	r4,-16(fp)
   2e9ac:	e17ffd15 	stw	r5,-12(fp)
   2e9b0:	e1bffe15 	stw	r6,-8(fp)
   2e9b4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   2e9b8:	e0bffe17 	ldw	r2,-8(fp)
   2e9bc:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   2e9c0:	e0bfff17 	ldw	r2,-4(fp)
   2e9c4:	1090000c 	andi	r2,r2,16384
   2e9c8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2e9cc:	00003c06 	br	2eac0 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2e9d0:	e0bffc17 	ldw	r2,-16(fp)
   2e9d4:	10800517 	ldw	r2,20(r2)
   2e9d8:	10800044 	addi	r2,r2,1
   2e9dc:	10800fcc 	andi	r2,r2,63
   2e9e0:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   2e9e4:	e0bffc17 	ldw	r2,-16(fp)
   2e9e8:	10c00417 	ldw	r3,16(r2)
   2e9ec:	e0bff617 	ldw	r2,-40(fp)
   2e9f0:	1880221e 	bne	r3,r2,2ea7c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   2e9f4:	e0bff517 	ldw	r2,-44(fp)
   2e9f8:	10000526 	beq	r2,zero,2ea10 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   2e9fc:	002e9480 	call	2e948 <alt_get_errno>
   2ea00:	1007883a 	mov	r3,r2
   2ea04:	008002c4 	movi	r2,11
   2ea08:	18800015 	stw	r2,0(r3)
        break;
   2ea0c:	00002e06 	br	2eac8 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ea10:	0005303a 	rdctl	r2,status
   2ea14:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ea18:	e0fff817 	ldw	r3,-32(fp)
   2ea1c:	00bfff84 	movi	r2,-2
   2ea20:	1884703a 	and	r2,r3,r2
   2ea24:	1001703a 	wrctl	status,r2
  
  return context;
   2ea28:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   2ea2c:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2ea30:	e0bffc17 	ldw	r2,-16(fp)
   2ea34:	10800117 	ldw	r2,4(r2)
   2ea38:	10c11014 	ori	r3,r2,1088
   2ea3c:	e0bffc17 	ldw	r2,-16(fp)
   2ea40:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2ea44:	e0bffc17 	ldw	r2,-16(fp)
   2ea48:	10800017 	ldw	r2,0(r2)
   2ea4c:	10800304 	addi	r2,r2,12
   2ea50:	e0fffc17 	ldw	r3,-16(fp)
   2ea54:	18c00117 	ldw	r3,4(r3)
   2ea58:	10c00035 	stwio	r3,0(r2)
   2ea5c:	e0bff717 	ldw	r2,-36(fp)
   2ea60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ea64:	e0bff917 	ldw	r2,-28(fp)
   2ea68:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   2ea6c:	e0bffc17 	ldw	r2,-16(fp)
   2ea70:	10c00417 	ldw	r3,16(r2)
   2ea74:	e0bff617 	ldw	r2,-40(fp)
   2ea78:	18bffc26 	beq	r3,r2,2ea6c <__alt_data_end+0xffff254c>
      }
    }

    count--;
   2ea7c:	e0bff417 	ldw	r2,-48(fp)
   2ea80:	10bfffc4 	addi	r2,r2,-1
   2ea84:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   2ea88:	e0bffc17 	ldw	r2,-16(fp)
   2ea8c:	10c00517 	ldw	r3,20(r2)
   2ea90:	e0bffd17 	ldw	r2,-12(fp)
   2ea94:	11000044 	addi	r4,r2,1
   2ea98:	e13ffd15 	stw	r4,-12(fp)
   2ea9c:	10800003 	ldbu	r2,0(r2)
   2eaa0:	1009883a 	mov	r4,r2
   2eaa4:	e0bffc17 	ldw	r2,-16(fp)
   2eaa8:	10c5883a 	add	r2,r2,r3
   2eaac:	10801704 	addi	r2,r2,92
   2eab0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   2eab4:	e0bffc17 	ldw	r2,-16(fp)
   2eab8:	e0fff617 	ldw	r3,-40(fp)
   2eabc:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2eac0:	e0bff417 	ldw	r2,-48(fp)
   2eac4:	103fc21e 	bne	r2,zero,2e9d0 <__alt_data_end+0xffff24b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2eac8:	0005303a 	rdctl	r2,status
   2eacc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ead0:	e0fffa17 	ldw	r3,-24(fp)
   2ead4:	00bfff84 	movi	r2,-2
   2ead8:	1884703a 	and	r2,r3,r2
   2eadc:	1001703a 	wrctl	status,r2
  
  return context;
   2eae0:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   2eae4:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2eae8:	e0bffc17 	ldw	r2,-16(fp)
   2eaec:	10800117 	ldw	r2,4(r2)
   2eaf0:	10c11014 	ori	r3,r2,1088
   2eaf4:	e0bffc17 	ldw	r2,-16(fp)
   2eaf8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2eafc:	e0bffc17 	ldw	r2,-16(fp)
   2eb00:	10800017 	ldw	r2,0(r2)
   2eb04:	10800304 	addi	r2,r2,12
   2eb08:	e0fffc17 	ldw	r3,-16(fp)
   2eb0c:	18c00117 	ldw	r3,4(r3)
   2eb10:	10c00035 	stwio	r3,0(r2)
   2eb14:	e0bff717 	ldw	r2,-36(fp)
   2eb18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2eb1c:	e0bffb17 	ldw	r2,-20(fp)
   2eb20:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   2eb24:	e0fffe17 	ldw	r3,-8(fp)
   2eb28:	e0bff417 	ldw	r2,-48(fp)
   2eb2c:	1885c83a 	sub	r2,r3,r2
}
   2eb30:	e037883a 	mov	sp,fp
   2eb34:	dfc00117 	ldw	ra,4(sp)
   2eb38:	df000017 	ldw	fp,0(sp)
   2eb3c:	dec00204 	addi	sp,sp,8
   2eb40:	f800283a 	ret

0002eb44 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2eb44:	defff504 	addi	sp,sp,-44
   2eb48:	df000a15 	stw	fp,40(sp)
   2eb4c:	df000a04 	addi	fp,sp,40
   2eb50:	e13ffc15 	stw	r4,-16(fp)
   2eb54:	e17ffd15 	stw	r5,-12(fp)
   2eb58:	e1bffe15 	stw	r6,-8(fp)
   2eb5c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2eb60:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2eb64:	008000f4 	movhi	r2,3
   2eb68:	108e6704 	addi	r2,r2,14748
   2eb6c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   2eb70:	10003f26 	beq	r2,zero,2ec70 <alt_alarm_start+0x12c>
  {
    if (alarm)
   2eb74:	e0bffc17 	ldw	r2,-16(fp)
   2eb78:	10003b26 	beq	r2,zero,2ec68 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   2eb7c:	e0bffc17 	ldw	r2,-16(fp)
   2eb80:	e0fffe17 	ldw	r3,-8(fp)
   2eb84:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2eb88:	e0bffc17 	ldw	r2,-16(fp)
   2eb8c:	e0ffff17 	ldw	r3,-4(fp)
   2eb90:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2eb94:	0005303a 	rdctl	r2,status
   2eb98:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2eb9c:	e0fff817 	ldw	r3,-32(fp)
   2eba0:	00bfff84 	movi	r2,-2
   2eba4:	1884703a 	and	r2,r3,r2
   2eba8:	1001703a 	wrctl	status,r2
  
  return context;
   2ebac:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   2ebb0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2ebb4:	008000f4 	movhi	r2,3
   2ebb8:	108e6804 	addi	r2,r2,14752
   2ebbc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   2ebc0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2ebc4:	e0fffd17 	ldw	r3,-12(fp)
   2ebc8:	e0bff617 	ldw	r2,-40(fp)
   2ebcc:	1885883a 	add	r2,r3,r2
   2ebd0:	10c00044 	addi	r3,r2,1
   2ebd4:	e0bffc17 	ldw	r2,-16(fp)
   2ebd8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2ebdc:	e0bffc17 	ldw	r2,-16(fp)
   2ebe0:	10c00217 	ldw	r3,8(r2)
   2ebe4:	e0bff617 	ldw	r2,-40(fp)
   2ebe8:	1880042e 	bgeu	r3,r2,2ebfc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   2ebec:	e0bffc17 	ldw	r2,-16(fp)
   2ebf0:	00c00044 	movi	r3,1
   2ebf4:	10c00405 	stb	r3,16(r2)
   2ebf8:	00000206 	br	2ec04 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   2ebfc:	e0bffc17 	ldw	r2,-16(fp)
   2ec00:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2ec04:	e0fffc17 	ldw	r3,-16(fp)
   2ec08:	008000f4 	movhi	r2,3
   2ec0c:	10876e04 	addi	r2,r2,7608
   2ec10:	e0bff915 	stw	r2,-28(fp)
   2ec14:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2ec18:	e0bffa17 	ldw	r2,-24(fp)
   2ec1c:	e0fff917 	ldw	r3,-28(fp)
   2ec20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2ec24:	e0bff917 	ldw	r2,-28(fp)
   2ec28:	10c00017 	ldw	r3,0(r2)
   2ec2c:	e0bffa17 	ldw	r2,-24(fp)
   2ec30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2ec34:	e0bff917 	ldw	r2,-28(fp)
   2ec38:	10800017 	ldw	r2,0(r2)
   2ec3c:	e0fffa17 	ldw	r3,-24(fp)
   2ec40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2ec44:	e0bff917 	ldw	r2,-28(fp)
   2ec48:	e0fffa17 	ldw	r3,-24(fp)
   2ec4c:	10c00015 	stw	r3,0(r2)
   2ec50:	e0bff717 	ldw	r2,-36(fp)
   2ec54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ec58:	e0bffb17 	ldw	r2,-20(fp)
   2ec5c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2ec60:	0005883a 	mov	r2,zero
   2ec64:	00000306 	br	2ec74 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   2ec68:	00bffa84 	movi	r2,-22
   2ec6c:	00000106 	br	2ec74 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   2ec70:	00bfde84 	movi	r2,-134
  }
}
   2ec74:	e037883a 	mov	sp,fp
   2ec78:	df000017 	ldw	fp,0(sp)
   2ec7c:	dec00104 	addi	sp,sp,4
   2ec80:	f800283a 	ret

0002ec84 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2ec84:	defffa04 	addi	sp,sp,-24
   2ec88:	dfc00515 	stw	ra,20(sp)
   2ec8c:	df000415 	stw	fp,16(sp)
   2ec90:	df000404 	addi	fp,sp,16
   2ec94:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   2ec98:	00800244 	movi	r2,9
   2ec9c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   2eca0:	e13ffd17 	ldw	r4,-12(fp)
   2eca4:	014003f4 	movhi	r5,15
   2eca8:	29509004 	addi	r5,r5,16960
   2ecac:	002a3dc0 	call	2a3dc <__mulsi3>
   2ecb0:	01023c74 	movhi	r4,2289
   2ecb4:	21346004 	addi	r4,r4,-11904
   2ecb8:	100b883a 	mov	r5,r2
   2ecbc:	002a3cc0 	call	2a3cc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   2ecc0:	01200034 	movhi	r4,32768
   2ecc4:	213fffc4 	addi	r4,r4,-1
   2ecc8:	100b883a 	mov	r5,r2
   2eccc:	002a3cc0 	call	2a3cc <__udivsi3>
   2ecd0:	e13fff17 	ldw	r4,-4(fp)
   2ecd4:	100b883a 	mov	r5,r2
   2ecd8:	002a3cc0 	call	2a3cc <__udivsi3>
   2ecdc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   2ece0:	e0bffe17 	ldw	r2,-8(fp)
   2ece4:	10002a26 	beq	r2,zero,2ed90 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   2ece8:	e03ffc15 	stw	zero,-16(fp)
   2ecec:	00001706 	br	2ed4c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2ecf0:	00a00034 	movhi	r2,32768
   2ecf4:	10bfffc4 	addi	r2,r2,-1
   2ecf8:	10bfffc4 	addi	r2,r2,-1
   2ecfc:	103ffe1e 	bne	r2,zero,2ecf8 <__alt_data_end+0xffff27d8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   2ed00:	e13ffd17 	ldw	r4,-12(fp)
   2ed04:	014003f4 	movhi	r5,15
   2ed08:	29509004 	addi	r5,r5,16960
   2ed0c:	002a3dc0 	call	2a3dc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2ed10:	01023c74 	movhi	r4,2289
   2ed14:	21346004 	addi	r4,r4,-11904
   2ed18:	100b883a 	mov	r5,r2
   2ed1c:	002a3cc0 	call	2a3cc <__udivsi3>
   2ed20:	01200034 	movhi	r4,32768
   2ed24:	213fffc4 	addi	r4,r4,-1
   2ed28:	100b883a 	mov	r5,r2
   2ed2c:	002a3cc0 	call	2a3cc <__udivsi3>
   2ed30:	1007883a 	mov	r3,r2
   2ed34:	e0bfff17 	ldw	r2,-4(fp)
   2ed38:	10c5c83a 	sub	r2,r2,r3
   2ed3c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   2ed40:	e0bffc17 	ldw	r2,-16(fp)
   2ed44:	10800044 	addi	r2,r2,1
   2ed48:	e0bffc15 	stw	r2,-16(fp)
   2ed4c:	e0fffc17 	ldw	r3,-16(fp)
   2ed50:	e0bffe17 	ldw	r2,-8(fp)
   2ed54:	18bfe616 	blt	r3,r2,2ecf0 <__alt_data_end+0xffff27d0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2ed58:	e13ffd17 	ldw	r4,-12(fp)
   2ed5c:	014003f4 	movhi	r5,15
   2ed60:	29509004 	addi	r5,r5,16960
   2ed64:	002a3dc0 	call	2a3dc <__mulsi3>
   2ed68:	01023c74 	movhi	r4,2289
   2ed6c:	21346004 	addi	r4,r4,-11904
   2ed70:	100b883a 	mov	r5,r2
   2ed74:	002a3cc0 	call	2a3cc <__udivsi3>
   2ed78:	1009883a 	mov	r4,r2
   2ed7c:	e17fff17 	ldw	r5,-4(fp)
   2ed80:	002a3dc0 	call	2a3dc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2ed84:	10bfffc4 	addi	r2,r2,-1
   2ed88:	103ffe1e 	bne	r2,zero,2ed84 <__alt_data_end+0xffff2864>
   2ed8c:	00000d06 	br	2edc4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2ed90:	e13ffd17 	ldw	r4,-12(fp)
   2ed94:	014003f4 	movhi	r5,15
   2ed98:	29509004 	addi	r5,r5,16960
   2ed9c:	002a3dc0 	call	2a3dc <__mulsi3>
   2eda0:	01023c74 	movhi	r4,2289
   2eda4:	21346004 	addi	r4,r4,-11904
   2eda8:	100b883a 	mov	r5,r2
   2edac:	002a3cc0 	call	2a3cc <__udivsi3>
   2edb0:	1009883a 	mov	r4,r2
   2edb4:	e17fff17 	ldw	r5,-4(fp)
   2edb8:	002a3dc0 	call	2a3dc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2edbc:	10bfffc4 	addi	r2,r2,-1
   2edc0:	00bffe16 	blt	zero,r2,2edbc <__alt_data_end+0xffff289c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   2edc4:	0005883a 	mov	r2,zero
}
   2edc8:	e037883a 	mov	sp,fp
   2edcc:	dfc00117 	ldw	ra,4(sp)
   2edd0:	df000017 	ldw	fp,0(sp)
   2edd4:	dec00204 	addi	sp,sp,8
   2edd8:	f800283a 	ret

0002eddc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2eddc:	deffff04 	addi	sp,sp,-4
   2ede0:	df000015 	stw	fp,0(sp)
   2ede4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2ede8:	e037883a 	mov	sp,fp
   2edec:	df000017 	ldw	fp,0(sp)
   2edf0:	dec00104 	addi	sp,sp,4
   2edf4:	f800283a 	ret

0002edf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2edf8:	defffe04 	addi	sp,sp,-8
   2edfc:	dfc00115 	stw	ra,4(sp)
   2ee00:	df000015 	stw	fp,0(sp)
   2ee04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2ee08:	008000f4 	movhi	r2,3
   2ee0c:	10876b04 	addi	r2,r2,7596
   2ee10:	10800017 	ldw	r2,0(r2)
   2ee14:	10000526 	beq	r2,zero,2ee2c <alt_get_errno+0x34>
   2ee18:	008000f4 	movhi	r2,3
   2ee1c:	10876b04 	addi	r2,r2,7596
   2ee20:	10800017 	ldw	r2,0(r2)
   2ee24:	103ee83a 	callr	r2
   2ee28:	00000206 	br	2ee34 <alt_get_errno+0x3c>
   2ee2c:	008000f4 	movhi	r2,3
   2ee30:	108e6204 	addi	r2,r2,14728
}
   2ee34:	e037883a 	mov	sp,fp
   2ee38:	dfc00117 	ldw	ra,4(sp)
   2ee3c:	df000017 	ldw	fp,0(sp)
   2ee40:	dec00204 	addi	sp,sp,8
   2ee44:	f800283a 	ret

0002ee48 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2ee48:	defffa04 	addi	sp,sp,-24
   2ee4c:	dfc00515 	stw	ra,20(sp)
   2ee50:	df000415 	stw	fp,16(sp)
   2ee54:	df000404 	addi	fp,sp,16
   2ee58:	e13ffe15 	stw	r4,-8(fp)
   2ee5c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2ee60:	e0bffe17 	ldw	r2,-8(fp)
   2ee64:	10000326 	beq	r2,zero,2ee74 <alt_dev_llist_insert+0x2c>
   2ee68:	e0bffe17 	ldw	r2,-8(fp)
   2ee6c:	10800217 	ldw	r2,8(r2)
   2ee70:	1000061e 	bne	r2,zero,2ee8c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2ee74:	002edf80 	call	2edf8 <alt_get_errno>
   2ee78:	1007883a 	mov	r3,r2
   2ee7c:	00800584 	movi	r2,22
   2ee80:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2ee84:	00bffa84 	movi	r2,-22
   2ee88:	00001306 	br	2eed8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2ee8c:	e0bffe17 	ldw	r2,-8(fp)
   2ee90:	e0ffff17 	ldw	r3,-4(fp)
   2ee94:	e0fffc15 	stw	r3,-16(fp)
   2ee98:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2ee9c:	e0bffd17 	ldw	r2,-12(fp)
   2eea0:	e0fffc17 	ldw	r3,-16(fp)
   2eea4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2eea8:	e0bffc17 	ldw	r2,-16(fp)
   2eeac:	10c00017 	ldw	r3,0(r2)
   2eeb0:	e0bffd17 	ldw	r2,-12(fp)
   2eeb4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2eeb8:	e0bffc17 	ldw	r2,-16(fp)
   2eebc:	10800017 	ldw	r2,0(r2)
   2eec0:	e0fffd17 	ldw	r3,-12(fp)
   2eec4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2eec8:	e0bffc17 	ldw	r2,-16(fp)
   2eecc:	e0fffd17 	ldw	r3,-12(fp)
   2eed0:	10c00015 	stw	r3,0(r2)

  return 0;  
   2eed4:	0005883a 	mov	r2,zero
}
   2eed8:	e037883a 	mov	sp,fp
   2eedc:	dfc00117 	ldw	ra,4(sp)
   2eee0:	df000017 	ldw	fp,0(sp)
   2eee4:	dec00204 	addi	sp,sp,8
   2eee8:	f800283a 	ret

0002eeec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2eeec:	defffd04 	addi	sp,sp,-12
   2eef0:	dfc00215 	stw	ra,8(sp)
   2eef4:	df000115 	stw	fp,4(sp)
   2eef8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2eefc:	008000f4 	movhi	r2,3
   2ef00:	10bfbf04 	addi	r2,r2,-260
   2ef04:	e0bfff15 	stw	r2,-4(fp)
   2ef08:	00000606 	br	2ef24 <_do_ctors+0x38>
        (*ctor) (); 
   2ef0c:	e0bfff17 	ldw	r2,-4(fp)
   2ef10:	10800017 	ldw	r2,0(r2)
   2ef14:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2ef18:	e0bfff17 	ldw	r2,-4(fp)
   2ef1c:	10bfff04 	addi	r2,r2,-4
   2ef20:	e0bfff15 	stw	r2,-4(fp)
   2ef24:	e0ffff17 	ldw	r3,-4(fp)
   2ef28:	008000f4 	movhi	r2,3
   2ef2c:	10bfc004 	addi	r2,r2,-256
   2ef30:	18bff62e 	bgeu	r3,r2,2ef0c <__alt_data_end+0xffff29ec>
        (*ctor) (); 
}
   2ef34:	e037883a 	mov	sp,fp
   2ef38:	dfc00117 	ldw	ra,4(sp)
   2ef3c:	df000017 	ldw	fp,0(sp)
   2ef40:	dec00204 	addi	sp,sp,8
   2ef44:	f800283a 	ret

0002ef48 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2ef48:	defffd04 	addi	sp,sp,-12
   2ef4c:	dfc00215 	stw	ra,8(sp)
   2ef50:	df000115 	stw	fp,4(sp)
   2ef54:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2ef58:	008000f4 	movhi	r2,3
   2ef5c:	10bfbf04 	addi	r2,r2,-260
   2ef60:	e0bfff15 	stw	r2,-4(fp)
   2ef64:	00000606 	br	2ef80 <_do_dtors+0x38>
        (*dtor) (); 
   2ef68:	e0bfff17 	ldw	r2,-4(fp)
   2ef6c:	10800017 	ldw	r2,0(r2)
   2ef70:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2ef74:	e0bfff17 	ldw	r2,-4(fp)
   2ef78:	10bfff04 	addi	r2,r2,-4
   2ef7c:	e0bfff15 	stw	r2,-4(fp)
   2ef80:	e0ffff17 	ldw	r3,-4(fp)
   2ef84:	008000f4 	movhi	r2,3
   2ef88:	10bfc004 	addi	r2,r2,-256
   2ef8c:	18bff62e 	bgeu	r3,r2,2ef68 <__alt_data_end+0xffff2a48>
        (*dtor) (); 
}
   2ef90:	e037883a 	mov	sp,fp
   2ef94:	dfc00117 	ldw	ra,4(sp)
   2ef98:	df000017 	ldw	fp,0(sp)
   2ef9c:	dec00204 	addi	sp,sp,8
   2efa0:	f800283a 	ret

0002efa4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2efa4:	deffff04 	addi	sp,sp,-4
   2efa8:	df000015 	stw	fp,0(sp)
   2efac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2efb0:	e037883a 	mov	sp,fp
   2efb4:	df000017 	ldw	fp,0(sp)
   2efb8:	dec00104 	addi	sp,sp,4
   2efbc:	f800283a 	ret

0002efc0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2efc0:	defff904 	addi	sp,sp,-28
   2efc4:	dfc00615 	stw	ra,24(sp)
   2efc8:	df000515 	stw	fp,20(sp)
   2efcc:	df000504 	addi	fp,sp,20
   2efd0:	e13ffc15 	stw	r4,-16(fp)
   2efd4:	e17ffd15 	stw	r5,-12(fp)
   2efd8:	e1bffe15 	stw	r6,-8(fp)
   2efdc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2efe0:	e0800217 	ldw	r2,8(fp)
   2efe4:	d8800015 	stw	r2,0(sp)
   2efe8:	e13ffc17 	ldw	r4,-16(fp)
   2efec:	e17ffd17 	ldw	r5,-12(fp)
   2eff0:	e1bffe17 	ldw	r6,-8(fp)
   2eff4:	e1ffff17 	ldw	r7,-4(fp)
   2eff8:	002f1a00 	call	2f1a0 <alt_iic_isr_register>
}  
   2effc:	e037883a 	mov	sp,fp
   2f000:	dfc00117 	ldw	ra,4(sp)
   2f004:	df000017 	ldw	fp,0(sp)
   2f008:	dec00204 	addi	sp,sp,8
   2f00c:	f800283a 	ret

0002f010 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2f010:	defff904 	addi	sp,sp,-28
   2f014:	df000615 	stw	fp,24(sp)
   2f018:	df000604 	addi	fp,sp,24
   2f01c:	e13ffe15 	stw	r4,-8(fp)
   2f020:	e17fff15 	stw	r5,-4(fp)
   2f024:	e0bfff17 	ldw	r2,-4(fp)
   2f028:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f02c:	0005303a 	rdctl	r2,status
   2f030:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f034:	e0fffb17 	ldw	r3,-20(fp)
   2f038:	00bfff84 	movi	r2,-2
   2f03c:	1884703a 	and	r2,r3,r2
   2f040:	1001703a 	wrctl	status,r2
  
  return context;
   2f044:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2f048:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2f04c:	e0bffa17 	ldw	r2,-24(fp)
   2f050:	00c00044 	movi	r3,1
   2f054:	1884983a 	sll	r2,r3,r2
   2f058:	1007883a 	mov	r3,r2
   2f05c:	008000f4 	movhi	r2,3
   2f060:	108e6604 	addi	r2,r2,14744
   2f064:	10800017 	ldw	r2,0(r2)
   2f068:	1886b03a 	or	r3,r3,r2
   2f06c:	008000f4 	movhi	r2,3
   2f070:	108e6604 	addi	r2,r2,14744
   2f074:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2f078:	008000f4 	movhi	r2,3
   2f07c:	108e6604 	addi	r2,r2,14744
   2f080:	10800017 	ldw	r2,0(r2)
   2f084:	100170fa 	wrctl	ienable,r2
   2f088:	e0bffc17 	ldw	r2,-16(fp)
   2f08c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f090:	e0bffd17 	ldw	r2,-12(fp)
   2f094:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2f098:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2f09c:	0001883a 	nop
}
   2f0a0:	e037883a 	mov	sp,fp
   2f0a4:	df000017 	ldw	fp,0(sp)
   2f0a8:	dec00104 	addi	sp,sp,4
   2f0ac:	f800283a 	ret

0002f0b0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2f0b0:	defff904 	addi	sp,sp,-28
   2f0b4:	df000615 	stw	fp,24(sp)
   2f0b8:	df000604 	addi	fp,sp,24
   2f0bc:	e13ffe15 	stw	r4,-8(fp)
   2f0c0:	e17fff15 	stw	r5,-4(fp)
   2f0c4:	e0bfff17 	ldw	r2,-4(fp)
   2f0c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f0cc:	0005303a 	rdctl	r2,status
   2f0d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f0d4:	e0fffb17 	ldw	r3,-20(fp)
   2f0d8:	00bfff84 	movi	r2,-2
   2f0dc:	1884703a 	and	r2,r3,r2
   2f0e0:	1001703a 	wrctl	status,r2
  
  return context;
   2f0e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2f0e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2f0ec:	e0bffa17 	ldw	r2,-24(fp)
   2f0f0:	00c00044 	movi	r3,1
   2f0f4:	1884983a 	sll	r2,r3,r2
   2f0f8:	0084303a 	nor	r2,zero,r2
   2f0fc:	1007883a 	mov	r3,r2
   2f100:	008000f4 	movhi	r2,3
   2f104:	108e6604 	addi	r2,r2,14744
   2f108:	10800017 	ldw	r2,0(r2)
   2f10c:	1886703a 	and	r3,r3,r2
   2f110:	008000f4 	movhi	r2,3
   2f114:	108e6604 	addi	r2,r2,14744
   2f118:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2f11c:	008000f4 	movhi	r2,3
   2f120:	108e6604 	addi	r2,r2,14744
   2f124:	10800017 	ldw	r2,0(r2)
   2f128:	100170fa 	wrctl	ienable,r2
   2f12c:	e0bffc17 	ldw	r2,-16(fp)
   2f130:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f134:	e0bffd17 	ldw	r2,-12(fp)
   2f138:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2f13c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   2f140:	0001883a 	nop
}
   2f144:	e037883a 	mov	sp,fp
   2f148:	df000017 	ldw	fp,0(sp)
   2f14c:	dec00104 	addi	sp,sp,4
   2f150:	f800283a 	ret

0002f154 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2f154:	defffc04 	addi	sp,sp,-16
   2f158:	df000315 	stw	fp,12(sp)
   2f15c:	df000304 	addi	fp,sp,12
   2f160:	e13ffe15 	stw	r4,-8(fp)
   2f164:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2f168:	000530fa 	rdctl	r2,ienable
   2f16c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2f170:	e0bfff17 	ldw	r2,-4(fp)
   2f174:	00c00044 	movi	r3,1
   2f178:	1884983a 	sll	r2,r3,r2
   2f17c:	1007883a 	mov	r3,r2
   2f180:	e0bffd17 	ldw	r2,-12(fp)
   2f184:	1884703a 	and	r2,r3,r2
   2f188:	1004c03a 	cmpne	r2,r2,zero
   2f18c:	10803fcc 	andi	r2,r2,255
}
   2f190:	e037883a 	mov	sp,fp
   2f194:	df000017 	ldw	fp,0(sp)
   2f198:	dec00104 	addi	sp,sp,4
   2f19c:	f800283a 	ret

0002f1a0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2f1a0:	defff504 	addi	sp,sp,-44
   2f1a4:	dfc00a15 	stw	ra,40(sp)
   2f1a8:	df000915 	stw	fp,36(sp)
   2f1ac:	df000904 	addi	fp,sp,36
   2f1b0:	e13ffc15 	stw	r4,-16(fp)
   2f1b4:	e17ffd15 	stw	r5,-12(fp)
   2f1b8:	e1bffe15 	stw	r6,-8(fp)
   2f1bc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2f1c0:	00bffa84 	movi	r2,-22
   2f1c4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2f1c8:	e0bffd17 	ldw	r2,-12(fp)
   2f1cc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2f1d0:	e0bff817 	ldw	r2,-32(fp)
   2f1d4:	10800808 	cmpgei	r2,r2,32
   2f1d8:	1000271e 	bne	r2,zero,2f278 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f1dc:	0005303a 	rdctl	r2,status
   2f1e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f1e4:	e0fffa17 	ldw	r3,-24(fp)
   2f1e8:	00bfff84 	movi	r2,-2
   2f1ec:	1884703a 	and	r2,r3,r2
   2f1f0:	1001703a 	wrctl	status,r2
  
  return context;
   2f1f4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2f1f8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   2f1fc:	008000f4 	movhi	r2,3
   2f200:	108e7404 	addi	r2,r2,14800
   2f204:	e0fff817 	ldw	r3,-32(fp)
   2f208:	180690fa 	slli	r3,r3,3
   2f20c:	10c5883a 	add	r2,r2,r3
   2f210:	e0fffe17 	ldw	r3,-8(fp)
   2f214:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2f218:	008000f4 	movhi	r2,3
   2f21c:	108e7404 	addi	r2,r2,14800
   2f220:	e0fff817 	ldw	r3,-32(fp)
   2f224:	180690fa 	slli	r3,r3,3
   2f228:	10c5883a 	add	r2,r2,r3
   2f22c:	10800104 	addi	r2,r2,4
   2f230:	e0ffff17 	ldw	r3,-4(fp)
   2f234:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2f238:	e0bffe17 	ldw	r2,-8(fp)
   2f23c:	10000526 	beq	r2,zero,2f254 <alt_iic_isr_register+0xb4>
   2f240:	e0bff817 	ldw	r2,-32(fp)
   2f244:	e13ffc17 	ldw	r4,-16(fp)
   2f248:	100b883a 	mov	r5,r2
   2f24c:	002f0100 	call	2f010 <alt_ic_irq_enable>
   2f250:	00000406 	br	2f264 <alt_iic_isr_register+0xc4>
   2f254:	e0bff817 	ldw	r2,-32(fp)
   2f258:	e13ffc17 	ldw	r4,-16(fp)
   2f25c:	100b883a 	mov	r5,r2
   2f260:	002f0b00 	call	2f0b0 <alt_ic_irq_disable>
   2f264:	e0bff715 	stw	r2,-36(fp)
   2f268:	e0bff917 	ldw	r2,-28(fp)
   2f26c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f270:	e0bffb17 	ldw	r2,-20(fp)
   2f274:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2f278:	e0bff717 	ldw	r2,-36(fp)
}
   2f27c:	e037883a 	mov	sp,fp
   2f280:	dfc00117 	ldw	ra,4(sp)
   2f284:	df000017 	ldw	fp,0(sp)
   2f288:	dec00204 	addi	sp,sp,8
   2f28c:	f800283a 	ret

0002f290 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2f290:	defff804 	addi	sp,sp,-32
   2f294:	dfc00715 	stw	ra,28(sp)
   2f298:	df000615 	stw	fp,24(sp)
   2f29c:	dc000515 	stw	r16,20(sp)
   2f2a0:	df000604 	addi	fp,sp,24
   2f2a4:	e13ffb15 	stw	r4,-20(fp)
   2f2a8:	e17ffc15 	stw	r5,-16(fp)
   2f2ac:	e1bffd15 	stw	r6,-12(fp)
   2f2b0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   2f2b4:	e13ffc17 	ldw	r4,-16(fp)
   2f2b8:	e17ffd17 	ldw	r5,-12(fp)
   2f2bc:	e1bffe17 	ldw	r6,-8(fp)
   2f2c0:	002f52c0 	call	2f52c <open>
   2f2c4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   2f2c8:	e0bffa17 	ldw	r2,-24(fp)
   2f2cc:	10002216 	blt	r2,zero,2f358 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   2f2d0:	040000f4 	movhi	r16,3
   2f2d4:	8402b704 	addi	r16,r16,2780
   2f2d8:	e0bffa17 	ldw	r2,-24(fp)
   2f2dc:	1009883a 	mov	r4,r2
   2f2e0:	01400304 	movi	r5,12
   2f2e4:	002a3dc0 	call	2a3dc <__mulsi3>
   2f2e8:	8085883a 	add	r2,r16,r2
   2f2ec:	10c00017 	ldw	r3,0(r2)
   2f2f0:	e0bffb17 	ldw	r2,-20(fp)
   2f2f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2f2f8:	040000f4 	movhi	r16,3
   2f2fc:	8402b704 	addi	r16,r16,2780
   2f300:	e0bffa17 	ldw	r2,-24(fp)
   2f304:	1009883a 	mov	r4,r2
   2f308:	01400304 	movi	r5,12
   2f30c:	002a3dc0 	call	2a3dc <__mulsi3>
   2f310:	8085883a 	add	r2,r16,r2
   2f314:	10800104 	addi	r2,r2,4
   2f318:	10c00017 	ldw	r3,0(r2)
   2f31c:	e0bffb17 	ldw	r2,-20(fp)
   2f320:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2f324:	040000f4 	movhi	r16,3
   2f328:	8402b704 	addi	r16,r16,2780
   2f32c:	e0bffa17 	ldw	r2,-24(fp)
   2f330:	1009883a 	mov	r4,r2
   2f334:	01400304 	movi	r5,12
   2f338:	002a3dc0 	call	2a3dc <__mulsi3>
   2f33c:	8085883a 	add	r2,r16,r2
   2f340:	10800204 	addi	r2,r2,8
   2f344:	10c00017 	ldw	r3,0(r2)
   2f348:	e0bffb17 	ldw	r2,-20(fp)
   2f34c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2f350:	e13ffa17 	ldw	r4,-24(fp)
   2f354:	002d3740 	call	2d374 <alt_release_fd>
  }
} 
   2f358:	e6ffff04 	addi	sp,fp,-4
   2f35c:	dfc00217 	ldw	ra,8(sp)
   2f360:	df000117 	ldw	fp,4(sp)
   2f364:	dc000017 	ldw	r16,0(sp)
   2f368:	dec00304 	addi	sp,sp,12
   2f36c:	f800283a 	ret

0002f370 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2f370:	defffb04 	addi	sp,sp,-20
   2f374:	dfc00415 	stw	ra,16(sp)
   2f378:	df000315 	stw	fp,12(sp)
   2f37c:	df000304 	addi	fp,sp,12
   2f380:	e13ffd15 	stw	r4,-12(fp)
   2f384:	e17ffe15 	stw	r5,-8(fp)
   2f388:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2f38c:	010000f4 	movhi	r4,3
   2f390:	2102ba04 	addi	r4,r4,2792
   2f394:	e17ffd17 	ldw	r5,-12(fp)
   2f398:	01800044 	movi	r6,1
   2f39c:	01c07fc4 	movi	r7,511
   2f3a0:	002f2900 	call	2f290 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2f3a4:	010000f4 	movhi	r4,3
   2f3a8:	2102b704 	addi	r4,r4,2780
   2f3ac:	e17ffe17 	ldw	r5,-8(fp)
   2f3b0:	000d883a 	mov	r6,zero
   2f3b4:	01c07fc4 	movi	r7,511
   2f3b8:	002f2900 	call	2f290 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2f3bc:	010000f4 	movhi	r4,3
   2f3c0:	2102bd04 	addi	r4,r4,2804
   2f3c4:	e17fff17 	ldw	r5,-4(fp)
   2f3c8:	01800044 	movi	r6,1
   2f3cc:	01c07fc4 	movi	r7,511
   2f3d0:	002f2900 	call	2f290 <alt_open_fd>
}  
   2f3d4:	e037883a 	mov	sp,fp
   2f3d8:	dfc00117 	ldw	ra,4(sp)
   2f3dc:	df000017 	ldw	fp,0(sp)
   2f3e0:	dec00204 	addi	sp,sp,8
   2f3e4:	f800283a 	ret

0002f3e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f3e8:	defffe04 	addi	sp,sp,-8
   2f3ec:	dfc00115 	stw	ra,4(sp)
   2f3f0:	df000015 	stw	fp,0(sp)
   2f3f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f3f8:	008000f4 	movhi	r2,3
   2f3fc:	10876b04 	addi	r2,r2,7596
   2f400:	10800017 	ldw	r2,0(r2)
   2f404:	10000526 	beq	r2,zero,2f41c <alt_get_errno+0x34>
   2f408:	008000f4 	movhi	r2,3
   2f40c:	10876b04 	addi	r2,r2,7596
   2f410:	10800017 	ldw	r2,0(r2)
   2f414:	103ee83a 	callr	r2
   2f418:	00000206 	br	2f424 <alt_get_errno+0x3c>
   2f41c:	008000f4 	movhi	r2,3
   2f420:	108e6204 	addi	r2,r2,14728
}
   2f424:	e037883a 	mov	sp,fp
   2f428:	dfc00117 	ldw	ra,4(sp)
   2f42c:	df000017 	ldw	fp,0(sp)
   2f430:	dec00204 	addi	sp,sp,8
   2f434:	f800283a 	ret

0002f438 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2f438:	defffb04 	addi	sp,sp,-20
   2f43c:	dfc00415 	stw	ra,16(sp)
   2f440:	df000315 	stw	fp,12(sp)
   2f444:	dc000215 	stw	r16,8(sp)
   2f448:	df000304 	addi	fp,sp,12
   2f44c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2f450:	e0bffe17 	ldw	r2,-8(fp)
   2f454:	10800217 	ldw	r2,8(r2)
   2f458:	10d00034 	orhi	r3,r2,16384
   2f45c:	e0bffe17 	ldw	r2,-8(fp)
   2f460:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2f464:	e03ffd15 	stw	zero,-12(fp)
   2f468:	00002306 	br	2f4f8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2f46c:	040000f4 	movhi	r16,3
   2f470:	8402b704 	addi	r16,r16,2780
   2f474:	e0bffd17 	ldw	r2,-12(fp)
   2f478:	1009883a 	mov	r4,r2
   2f47c:	01400304 	movi	r5,12
   2f480:	002a3dc0 	call	2a3dc <__mulsi3>
   2f484:	8085883a 	add	r2,r16,r2
   2f488:	10c00017 	ldw	r3,0(r2)
   2f48c:	e0bffe17 	ldw	r2,-8(fp)
   2f490:	10800017 	ldw	r2,0(r2)
   2f494:	1880151e 	bne	r3,r2,2f4ec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2f498:	040000f4 	movhi	r16,3
   2f49c:	8402b704 	addi	r16,r16,2780
   2f4a0:	e0bffd17 	ldw	r2,-12(fp)
   2f4a4:	1009883a 	mov	r4,r2
   2f4a8:	01400304 	movi	r5,12
   2f4ac:	002a3dc0 	call	2a3dc <__mulsi3>
   2f4b0:	8085883a 	add	r2,r16,r2
   2f4b4:	10800204 	addi	r2,r2,8
   2f4b8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2f4bc:	10000b0e 	bge	r2,zero,2f4ec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2f4c0:	e13ffd17 	ldw	r4,-12(fp)
   2f4c4:	01400304 	movi	r5,12
   2f4c8:	002a3dc0 	call	2a3dc <__mulsi3>
   2f4cc:	1007883a 	mov	r3,r2
   2f4d0:	008000f4 	movhi	r2,3
   2f4d4:	1082b704 	addi	r2,r2,2780
   2f4d8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2f4dc:	e0bffe17 	ldw	r2,-8(fp)
   2f4e0:	18800226 	beq	r3,r2,2f4ec <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2f4e4:	00bffcc4 	movi	r2,-13
   2f4e8:	00000a06 	br	2f514 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2f4ec:	e0bffd17 	ldw	r2,-12(fp)
   2f4f0:	10800044 	addi	r2,r2,1
   2f4f4:	e0bffd15 	stw	r2,-12(fp)
   2f4f8:	008000f4 	movhi	r2,3
   2f4fc:	10876a04 	addi	r2,r2,7592
   2f500:	10800017 	ldw	r2,0(r2)
   2f504:	1007883a 	mov	r3,r2
   2f508:	e0bffd17 	ldw	r2,-12(fp)
   2f50c:	18bfd72e 	bgeu	r3,r2,2f46c <__alt_data_end+0xffff2f4c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2f510:	0005883a 	mov	r2,zero
}
   2f514:	e6ffff04 	addi	sp,fp,-4
   2f518:	dfc00217 	ldw	ra,8(sp)
   2f51c:	df000117 	ldw	fp,4(sp)
   2f520:	dc000017 	ldw	r16,0(sp)
   2f524:	dec00304 	addi	sp,sp,12
   2f528:	f800283a 	ret

0002f52c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2f52c:	defff604 	addi	sp,sp,-40
   2f530:	dfc00915 	stw	ra,36(sp)
   2f534:	df000815 	stw	fp,32(sp)
   2f538:	df000804 	addi	fp,sp,32
   2f53c:	e13ffd15 	stw	r4,-12(fp)
   2f540:	e17ffe15 	stw	r5,-8(fp)
   2f544:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2f548:	00bfffc4 	movi	r2,-1
   2f54c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2f550:	00bffb44 	movi	r2,-19
   2f554:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2f558:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2f55c:	e13ffd17 	ldw	r4,-12(fp)
   2f560:	014000f4 	movhi	r5,3
   2f564:	29476804 	addi	r5,r5,7584
   2f568:	002f8480 	call	2f848 <alt_find_dev>
   2f56c:	e0bff815 	stw	r2,-32(fp)
   2f570:	e0bff817 	ldw	r2,-32(fp)
   2f574:	1000051e 	bne	r2,zero,2f58c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2f578:	e13ffd17 	ldw	r4,-12(fp)
   2f57c:	002f8d80 	call	2f8d8 <alt_find_file>
   2f580:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2f584:	00800044 	movi	r2,1
   2f588:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2f58c:	e0bff817 	ldw	r2,-32(fp)
   2f590:	10002b26 	beq	r2,zero,2f640 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2f594:	e13ff817 	ldw	r4,-32(fp)
   2f598:	002f9ec0 	call	2f9ec <alt_get_fd>
   2f59c:	e0bff915 	stw	r2,-28(fp)
   2f5a0:	e0bff917 	ldw	r2,-28(fp)
   2f5a4:	1000030e 	bge	r2,zero,2f5b4 <open+0x88>
    {
      status = index;
   2f5a8:	e0bff917 	ldw	r2,-28(fp)
   2f5ac:	e0bffa15 	stw	r2,-24(fp)
   2f5b0:	00002506 	br	2f648 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   2f5b4:	e13ff917 	ldw	r4,-28(fp)
   2f5b8:	01400304 	movi	r5,12
   2f5bc:	002a3dc0 	call	2a3dc <__mulsi3>
   2f5c0:	1007883a 	mov	r3,r2
   2f5c4:	008000f4 	movhi	r2,3
   2f5c8:	1082b704 	addi	r2,r2,2780
   2f5cc:	1885883a 	add	r2,r3,r2
   2f5d0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2f5d4:	e0fffe17 	ldw	r3,-8(fp)
   2f5d8:	00900034 	movhi	r2,16384
   2f5dc:	10bfffc4 	addi	r2,r2,-1
   2f5e0:	1886703a 	and	r3,r3,r2
   2f5e4:	e0bffc17 	ldw	r2,-16(fp)
   2f5e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2f5ec:	e0bffb17 	ldw	r2,-20(fp)
   2f5f0:	1000051e 	bne	r2,zero,2f608 <open+0xdc>
   2f5f4:	e13ffc17 	ldw	r4,-16(fp)
   2f5f8:	002f4380 	call	2f438 <alt_file_locked>
   2f5fc:	e0bffa15 	stw	r2,-24(fp)
   2f600:	e0bffa17 	ldw	r2,-24(fp)
   2f604:	10001016 	blt	r2,zero,2f648 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2f608:	e0bff817 	ldw	r2,-32(fp)
   2f60c:	10800317 	ldw	r2,12(r2)
   2f610:	10000826 	beq	r2,zero,2f634 <open+0x108>
   2f614:	e0bff817 	ldw	r2,-32(fp)
   2f618:	10800317 	ldw	r2,12(r2)
   2f61c:	e13ffc17 	ldw	r4,-16(fp)
   2f620:	e17ffd17 	ldw	r5,-12(fp)
   2f624:	e1bffe17 	ldw	r6,-8(fp)
   2f628:	e1ffff17 	ldw	r7,-4(fp)
   2f62c:	103ee83a 	callr	r2
   2f630:	00000106 	br	2f638 <open+0x10c>
   2f634:	0005883a 	mov	r2,zero
   2f638:	e0bffa15 	stw	r2,-24(fp)
   2f63c:	00000206 	br	2f648 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2f640:	00bffb44 	movi	r2,-19
   2f644:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2f648:	e0bffa17 	ldw	r2,-24(fp)
   2f64c:	1000090e 	bge	r2,zero,2f674 <open+0x148>
  {
    alt_release_fd (index);  
   2f650:	e13ff917 	ldw	r4,-28(fp)
   2f654:	002d3740 	call	2d374 <alt_release_fd>
    ALT_ERRNO = -status;
   2f658:	002f3e80 	call	2f3e8 <alt_get_errno>
   2f65c:	1007883a 	mov	r3,r2
   2f660:	e0bffa17 	ldw	r2,-24(fp)
   2f664:	0085c83a 	sub	r2,zero,r2
   2f668:	18800015 	stw	r2,0(r3)
    return -1;
   2f66c:	00bfffc4 	movi	r2,-1
   2f670:	00000106 	br	2f678 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   2f674:	e0bff917 	ldw	r2,-28(fp)
}
   2f678:	e037883a 	mov	sp,fp
   2f67c:	dfc00117 	ldw	ra,4(sp)
   2f680:	df000017 	ldw	fp,0(sp)
   2f684:	dec00204 	addi	sp,sp,8
   2f688:	f800283a 	ret

0002f68c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2f68c:	defffa04 	addi	sp,sp,-24
   2f690:	df000515 	stw	fp,20(sp)
   2f694:	df000504 	addi	fp,sp,20
   2f698:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f69c:	0005303a 	rdctl	r2,status
   2f6a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f6a4:	e0fffc17 	ldw	r3,-16(fp)
   2f6a8:	00bfff84 	movi	r2,-2
   2f6ac:	1884703a 	and	r2,r3,r2
   2f6b0:	1001703a 	wrctl	status,r2
  
  return context;
   2f6b4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2f6b8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2f6bc:	e0bfff17 	ldw	r2,-4(fp)
   2f6c0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2f6c4:	e0bffd17 	ldw	r2,-12(fp)
   2f6c8:	10800017 	ldw	r2,0(r2)
   2f6cc:	e0fffd17 	ldw	r3,-12(fp)
   2f6d0:	18c00117 	ldw	r3,4(r3)
   2f6d4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2f6d8:	e0bffd17 	ldw	r2,-12(fp)
   2f6dc:	10800117 	ldw	r2,4(r2)
   2f6e0:	e0fffd17 	ldw	r3,-12(fp)
   2f6e4:	18c00017 	ldw	r3,0(r3)
   2f6e8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2f6ec:	e0bffd17 	ldw	r2,-12(fp)
   2f6f0:	e0fffd17 	ldw	r3,-12(fp)
   2f6f4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2f6f8:	e0bffd17 	ldw	r2,-12(fp)
   2f6fc:	e0fffd17 	ldw	r3,-12(fp)
   2f700:	10c00015 	stw	r3,0(r2)
   2f704:	e0bffb17 	ldw	r2,-20(fp)
   2f708:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f70c:	e0bffe17 	ldw	r2,-8(fp)
   2f710:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2f714:	e037883a 	mov	sp,fp
   2f718:	df000017 	ldw	fp,0(sp)
   2f71c:	dec00104 	addi	sp,sp,4
   2f720:	f800283a 	ret

0002f724 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2f724:	defffb04 	addi	sp,sp,-20
   2f728:	dfc00415 	stw	ra,16(sp)
   2f72c:	df000315 	stw	fp,12(sp)
   2f730:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2f734:	d0a00e17 	ldw	r2,-32712(gp)
   2f738:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2f73c:	d0a70817 	ldw	r2,-25568(gp)
   2f740:	10800044 	addi	r2,r2,1
   2f744:	d0a70815 	stw	r2,-25568(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2f748:	00002e06 	br	2f804 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2f74c:	e0bffd17 	ldw	r2,-12(fp)
   2f750:	10800017 	ldw	r2,0(r2)
   2f754:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2f758:	e0bffd17 	ldw	r2,-12(fp)
   2f75c:	10800403 	ldbu	r2,16(r2)
   2f760:	10803fcc 	andi	r2,r2,255
   2f764:	10000426 	beq	r2,zero,2f778 <alt_tick+0x54>
   2f768:	d0a70817 	ldw	r2,-25568(gp)
   2f76c:	1000021e 	bne	r2,zero,2f778 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2f770:	e0bffd17 	ldw	r2,-12(fp)
   2f774:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2f778:	e0bffd17 	ldw	r2,-12(fp)
   2f77c:	10800217 	ldw	r2,8(r2)
   2f780:	d0e70817 	ldw	r3,-25568(gp)
   2f784:	18801d36 	bltu	r3,r2,2f7fc <alt_tick+0xd8>
   2f788:	e0bffd17 	ldw	r2,-12(fp)
   2f78c:	10800403 	ldbu	r2,16(r2)
   2f790:	10803fcc 	andi	r2,r2,255
   2f794:	1000191e 	bne	r2,zero,2f7fc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2f798:	e0bffd17 	ldw	r2,-12(fp)
   2f79c:	10800317 	ldw	r2,12(r2)
   2f7a0:	e0fffd17 	ldw	r3,-12(fp)
   2f7a4:	18c00517 	ldw	r3,20(r3)
   2f7a8:	1809883a 	mov	r4,r3
   2f7ac:	103ee83a 	callr	r2
   2f7b0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2f7b4:	e0bfff17 	ldw	r2,-4(fp)
   2f7b8:	1000031e 	bne	r2,zero,2f7c8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2f7bc:	e13ffd17 	ldw	r4,-12(fp)
   2f7c0:	002f68c0 	call	2f68c <alt_alarm_stop>
   2f7c4:	00000d06 	br	2f7fc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2f7c8:	e0bffd17 	ldw	r2,-12(fp)
   2f7cc:	10c00217 	ldw	r3,8(r2)
   2f7d0:	e0bfff17 	ldw	r2,-4(fp)
   2f7d4:	1887883a 	add	r3,r3,r2
   2f7d8:	e0bffd17 	ldw	r2,-12(fp)
   2f7dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2f7e0:	e0bffd17 	ldw	r2,-12(fp)
   2f7e4:	10c00217 	ldw	r3,8(r2)
   2f7e8:	d0a70817 	ldw	r2,-25568(gp)
   2f7ec:	1880032e 	bgeu	r3,r2,2f7fc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2f7f0:	e0bffd17 	ldw	r2,-12(fp)
   2f7f4:	00c00044 	movi	r3,1
   2f7f8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2f7fc:	e0bffe17 	ldw	r2,-8(fp)
   2f800:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2f804:	e0fffd17 	ldw	r3,-12(fp)
   2f808:	d0a00e04 	addi	r2,gp,-32712
   2f80c:	18bfcf1e 	bne	r3,r2,2f74c <__alt_data_end+0xffff322c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2f810:	0001883a 	nop
}
   2f814:	e037883a 	mov	sp,fp
   2f818:	dfc00117 	ldw	ra,4(sp)
   2f81c:	df000017 	ldw	fp,0(sp)
   2f820:	dec00204 	addi	sp,sp,8
   2f824:	f800283a 	ret

0002f828 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   2f828:	deffff04 	addi	sp,sp,-4
   2f82c:	df000015 	stw	fp,0(sp)
   2f830:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2f834:	000170fa 	wrctl	ienable,zero
}
   2f838:	e037883a 	mov	sp,fp
   2f83c:	df000017 	ldw	fp,0(sp)
   2f840:	dec00104 	addi	sp,sp,4
   2f844:	f800283a 	ret

0002f848 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2f848:	defffa04 	addi	sp,sp,-24
   2f84c:	dfc00515 	stw	ra,20(sp)
   2f850:	df000415 	stw	fp,16(sp)
   2f854:	df000404 	addi	fp,sp,16
   2f858:	e13ffe15 	stw	r4,-8(fp)
   2f85c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2f860:	e0bfff17 	ldw	r2,-4(fp)
   2f864:	10800017 	ldw	r2,0(r2)
   2f868:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2f86c:	e13ffe17 	ldw	r4,-8(fp)
   2f870:	0026b740 	call	26b74 <strlen>
   2f874:	10800044 	addi	r2,r2,1
   2f878:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2f87c:	00000d06 	br	2f8b4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2f880:	e0bffc17 	ldw	r2,-16(fp)
   2f884:	10c00217 	ldw	r3,8(r2)
   2f888:	e0bffd17 	ldw	r2,-12(fp)
   2f88c:	1809883a 	mov	r4,r3
   2f890:	e17ffe17 	ldw	r5,-8(fp)
   2f894:	100d883a 	mov	r6,r2
   2f898:	002fba80 	call	2fba8 <memcmp>
   2f89c:	1000021e 	bne	r2,zero,2f8a8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2f8a0:	e0bffc17 	ldw	r2,-16(fp)
   2f8a4:	00000706 	br	2f8c4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2f8a8:	e0bffc17 	ldw	r2,-16(fp)
   2f8ac:	10800017 	ldw	r2,0(r2)
   2f8b0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2f8b4:	e0fffc17 	ldw	r3,-16(fp)
   2f8b8:	e0bfff17 	ldw	r2,-4(fp)
   2f8bc:	18bff01e 	bne	r3,r2,2f880 <__alt_data_end+0xffff3360>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2f8c0:	0005883a 	mov	r2,zero
}
   2f8c4:	e037883a 	mov	sp,fp
   2f8c8:	dfc00117 	ldw	ra,4(sp)
   2f8cc:	df000017 	ldw	fp,0(sp)
   2f8d0:	dec00204 	addi	sp,sp,8
   2f8d4:	f800283a 	ret

0002f8d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2f8d8:	defffb04 	addi	sp,sp,-20
   2f8dc:	dfc00415 	stw	ra,16(sp)
   2f8e0:	df000315 	stw	fp,12(sp)
   2f8e4:	df000304 	addi	fp,sp,12
   2f8e8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2f8ec:	008000f4 	movhi	r2,3
   2f8f0:	10876604 	addi	r2,r2,7576
   2f8f4:	10800017 	ldw	r2,0(r2)
   2f8f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2f8fc:	00003106 	br	2f9c4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   2f900:	e0bffd17 	ldw	r2,-12(fp)
   2f904:	10800217 	ldw	r2,8(r2)
   2f908:	1009883a 	mov	r4,r2
   2f90c:	0026b740 	call	26b74 <strlen>
   2f910:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2f914:	e0bffd17 	ldw	r2,-12(fp)
   2f918:	10c00217 	ldw	r3,8(r2)
   2f91c:	e0bffe17 	ldw	r2,-8(fp)
   2f920:	10bfffc4 	addi	r2,r2,-1
   2f924:	1885883a 	add	r2,r3,r2
   2f928:	10800003 	ldbu	r2,0(r2)
   2f92c:	10803fcc 	andi	r2,r2,255
   2f930:	1080201c 	xori	r2,r2,128
   2f934:	10bfe004 	addi	r2,r2,-128
   2f938:	10800bd8 	cmpnei	r2,r2,47
   2f93c:	1000031e 	bne	r2,zero,2f94c <alt_find_file+0x74>
    {
      len -= 1;
   2f940:	e0bffe17 	ldw	r2,-8(fp)
   2f944:	10bfffc4 	addi	r2,r2,-1
   2f948:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2f94c:	e0bffe17 	ldw	r2,-8(fp)
   2f950:	e0ffff17 	ldw	r3,-4(fp)
   2f954:	1885883a 	add	r2,r3,r2
   2f958:	10800003 	ldbu	r2,0(r2)
   2f95c:	10803fcc 	andi	r2,r2,255
   2f960:	1080201c 	xori	r2,r2,128
   2f964:	10bfe004 	addi	r2,r2,-128
   2f968:	10800be0 	cmpeqi	r2,r2,47
   2f96c:	1000081e 	bne	r2,zero,2f990 <alt_find_file+0xb8>
   2f970:	e0bffe17 	ldw	r2,-8(fp)
   2f974:	e0ffff17 	ldw	r3,-4(fp)
   2f978:	1885883a 	add	r2,r3,r2
   2f97c:	10800003 	ldbu	r2,0(r2)
   2f980:	10803fcc 	andi	r2,r2,255
   2f984:	1080201c 	xori	r2,r2,128
   2f988:	10bfe004 	addi	r2,r2,-128
   2f98c:	10000a1e 	bne	r2,zero,2f9b8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   2f990:	e0bffd17 	ldw	r2,-12(fp)
   2f994:	10c00217 	ldw	r3,8(r2)
   2f998:	e0bffe17 	ldw	r2,-8(fp)
   2f99c:	1809883a 	mov	r4,r3
   2f9a0:	e17fff17 	ldw	r5,-4(fp)
   2f9a4:	100d883a 	mov	r6,r2
   2f9a8:	002fba80 	call	2fba8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2f9ac:	1000021e 	bne	r2,zero,2f9b8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2f9b0:	e0bffd17 	ldw	r2,-12(fp)
   2f9b4:	00000806 	br	2f9d8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   2f9b8:	e0bffd17 	ldw	r2,-12(fp)
   2f9bc:	10800017 	ldw	r2,0(r2)
   2f9c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2f9c4:	e0fffd17 	ldw	r3,-12(fp)
   2f9c8:	008000f4 	movhi	r2,3
   2f9cc:	10876604 	addi	r2,r2,7576
   2f9d0:	18bfcb1e 	bne	r3,r2,2f900 <__alt_data_end+0xffff33e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2f9d4:	0005883a 	mov	r2,zero
}
   2f9d8:	e037883a 	mov	sp,fp
   2f9dc:	dfc00117 	ldw	ra,4(sp)
   2f9e0:	df000017 	ldw	fp,0(sp)
   2f9e4:	dec00204 	addi	sp,sp,8
   2f9e8:	f800283a 	ret

0002f9ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2f9ec:	defffa04 	addi	sp,sp,-24
   2f9f0:	dfc00515 	stw	ra,20(sp)
   2f9f4:	df000415 	stw	fp,16(sp)
   2f9f8:	dc000315 	stw	r16,12(sp)
   2f9fc:	df000404 	addi	fp,sp,16
   2fa00:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   2fa04:	00bffa04 	movi	r2,-24
   2fa08:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2fa0c:	e03ffc15 	stw	zero,-16(fp)
   2fa10:	00002106 	br	2fa98 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   2fa14:	040000f4 	movhi	r16,3
   2fa18:	8402b704 	addi	r16,r16,2780
   2fa1c:	e0bffc17 	ldw	r2,-16(fp)
   2fa20:	1009883a 	mov	r4,r2
   2fa24:	01400304 	movi	r5,12
   2fa28:	002a3dc0 	call	2a3dc <__mulsi3>
   2fa2c:	8085883a 	add	r2,r16,r2
   2fa30:	10800017 	ldw	r2,0(r2)
   2fa34:	1000151e 	bne	r2,zero,2fa8c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   2fa38:	040000f4 	movhi	r16,3
   2fa3c:	8402b704 	addi	r16,r16,2780
   2fa40:	e0bffc17 	ldw	r2,-16(fp)
   2fa44:	1009883a 	mov	r4,r2
   2fa48:	01400304 	movi	r5,12
   2fa4c:	002a3dc0 	call	2a3dc <__mulsi3>
   2fa50:	8085883a 	add	r2,r16,r2
   2fa54:	e0fffe17 	ldw	r3,-8(fp)
   2fa58:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2fa5c:	008000f4 	movhi	r2,3
   2fa60:	10876a04 	addi	r2,r2,7592
   2fa64:	10c00017 	ldw	r3,0(r2)
   2fa68:	e0bffc17 	ldw	r2,-16(fp)
   2fa6c:	1880040e 	bge	r3,r2,2fa80 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   2fa70:	008000f4 	movhi	r2,3
   2fa74:	10876a04 	addi	r2,r2,7592
   2fa78:	e0fffc17 	ldw	r3,-16(fp)
   2fa7c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   2fa80:	e0bffc17 	ldw	r2,-16(fp)
   2fa84:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   2fa88:	00000606 	br	2faa4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2fa8c:	e0bffc17 	ldw	r2,-16(fp)
   2fa90:	10800044 	addi	r2,r2,1
   2fa94:	e0bffc15 	stw	r2,-16(fp)
   2fa98:	e0bffc17 	ldw	r2,-16(fp)
   2fa9c:	10800810 	cmplti	r2,r2,32
   2faa0:	103fdc1e 	bne	r2,zero,2fa14 <__alt_data_end+0xffff34f4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2faa4:	e0bffd17 	ldw	r2,-12(fp)
}
   2faa8:	e6ffff04 	addi	sp,fp,-4
   2faac:	dfc00217 	ldw	ra,8(sp)
   2fab0:	df000117 	ldw	fp,4(sp)
   2fab4:	dc000017 	ldw	r16,0(sp)
   2fab8:	dec00304 	addi	sp,sp,12
   2fabc:	f800283a 	ret

0002fac0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2fac0:	defffe04 	addi	sp,sp,-8
   2fac4:	df000115 	stw	fp,4(sp)
   2fac8:	df000104 	addi	fp,sp,4
   2facc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2fad0:	e0bfff17 	ldw	r2,-4(fp)
   2fad4:	10bffe84 	addi	r2,r2,-6
   2fad8:	10c00428 	cmpgeui	r3,r2,16
   2fadc:	18001a1e 	bne	r3,zero,2fb48 <alt_exception_cause_generated_bad_addr+0x88>
   2fae0:	100690ba 	slli	r3,r2,2
   2fae4:	008000f4 	movhi	r2,3
   2fae8:	10bebe04 	addi	r2,r2,-1288
   2faec:	1885883a 	add	r2,r3,r2
   2faf0:	10800017 	ldw	r2,0(r2)
   2faf4:	1000683a 	jmp	r2
   2faf8:	0002fb38 	rdprs	zero,zero,3052
   2fafc:	0002fb38 	rdprs	zero,zero,3052
   2fb00:	0002fb48 	cmpgei	zero,zero,3053
   2fb04:	0002fb48 	cmpgei	zero,zero,3053
   2fb08:	0002fb48 	cmpgei	zero,zero,3053
   2fb0c:	0002fb38 	rdprs	zero,zero,3052
   2fb10:	0002fb40 	call	2fb4 <__reset-0x1d04c>
   2fb14:	0002fb48 	cmpgei	zero,zero,3053
   2fb18:	0002fb38 	rdprs	zero,zero,3052
   2fb1c:	0002fb38 	rdprs	zero,zero,3052
   2fb20:	0002fb48 	cmpgei	zero,zero,3053
   2fb24:	0002fb38 	rdprs	zero,zero,3052
   2fb28:	0002fb40 	call	2fb4 <__reset-0x1d04c>
   2fb2c:	0002fb48 	cmpgei	zero,zero,3053
   2fb30:	0002fb48 	cmpgei	zero,zero,3053
   2fb34:	0002fb38 	rdprs	zero,zero,3052
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2fb38:	00800044 	movi	r2,1
   2fb3c:	00000306 	br	2fb4c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2fb40:	0005883a 	mov	r2,zero
   2fb44:	00000106 	br	2fb4c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2fb48:	0005883a 	mov	r2,zero
  }
}
   2fb4c:	e037883a 	mov	sp,fp
   2fb50:	df000017 	ldw	fp,0(sp)
   2fb54:	dec00104 	addi	sp,sp,4
   2fb58:	f800283a 	ret

0002fb5c <atexit>:
   2fb5c:	200b883a 	mov	r5,r4
   2fb60:	000d883a 	mov	r6,zero
   2fb64:	0009883a 	mov	r4,zero
   2fb68:	000f883a 	mov	r7,zero
   2fb6c:	002fc241 	jmpi	2fc24 <__register_exitproc>

0002fb70 <exit>:
   2fb70:	defffe04 	addi	sp,sp,-8
   2fb74:	000b883a 	mov	r5,zero
   2fb78:	dc000015 	stw	r16,0(sp)
   2fb7c:	dfc00115 	stw	ra,4(sp)
   2fb80:	2021883a 	mov	r16,r4
   2fb84:	002fd380 	call	2fd38 <__call_exitprocs>
   2fb88:	008000f4 	movhi	r2,3
   2fb8c:	10876004 	addi	r2,r2,7552
   2fb90:	11000017 	ldw	r4,0(r2)
   2fb94:	20800f17 	ldw	r2,60(r4)
   2fb98:	10000126 	beq	r2,zero,2fba0 <exit+0x30>
   2fb9c:	103ee83a 	callr	r2
   2fba0:	8009883a 	mov	r4,r16
   2fba4:	002fecc0 	call	2fecc <_exit>

0002fba8 <memcmp>:
   2fba8:	01c000c4 	movi	r7,3
   2fbac:	3980192e 	bgeu	r7,r6,2fc14 <memcmp+0x6c>
   2fbb0:	2144b03a 	or	r2,r4,r5
   2fbb4:	11c4703a 	and	r2,r2,r7
   2fbb8:	10000f26 	beq	r2,zero,2fbf8 <memcmp+0x50>
   2fbbc:	20800003 	ldbu	r2,0(r4)
   2fbc0:	28c00003 	ldbu	r3,0(r5)
   2fbc4:	10c0151e 	bne	r2,r3,2fc1c <memcmp+0x74>
   2fbc8:	31bfff84 	addi	r6,r6,-2
   2fbcc:	01ffffc4 	movi	r7,-1
   2fbd0:	00000406 	br	2fbe4 <memcmp+0x3c>
   2fbd4:	20800003 	ldbu	r2,0(r4)
   2fbd8:	28c00003 	ldbu	r3,0(r5)
   2fbdc:	31bfffc4 	addi	r6,r6,-1
   2fbe0:	10c00e1e 	bne	r2,r3,2fc1c <memcmp+0x74>
   2fbe4:	21000044 	addi	r4,r4,1
   2fbe8:	29400044 	addi	r5,r5,1
   2fbec:	31fff91e 	bne	r6,r7,2fbd4 <__alt_data_end+0xffff36b4>
   2fbf0:	0005883a 	mov	r2,zero
   2fbf4:	f800283a 	ret
   2fbf8:	20c00017 	ldw	r3,0(r4)
   2fbfc:	28800017 	ldw	r2,0(r5)
   2fc00:	1880041e 	bne	r3,r2,2fc14 <memcmp+0x6c>
   2fc04:	31bfff04 	addi	r6,r6,-4
   2fc08:	21000104 	addi	r4,r4,4
   2fc0c:	29400104 	addi	r5,r5,4
   2fc10:	39bff936 	bltu	r7,r6,2fbf8 <__alt_data_end+0xffff36d8>
   2fc14:	303fe91e 	bne	r6,zero,2fbbc <__alt_data_end+0xffff369c>
   2fc18:	003ff506 	br	2fbf0 <__alt_data_end+0xffff36d0>
   2fc1c:	10c5c83a 	sub	r2,r2,r3
   2fc20:	f800283a 	ret

0002fc24 <__register_exitproc>:
   2fc24:	008000f4 	movhi	r2,3
   2fc28:	defffa04 	addi	sp,sp,-24
   2fc2c:	10876004 	addi	r2,r2,7552
   2fc30:	dc000315 	stw	r16,12(sp)
   2fc34:	14000017 	ldw	r16,0(r2)
   2fc38:	dc400415 	stw	r17,16(sp)
   2fc3c:	dfc00515 	stw	ra,20(sp)
   2fc40:	80805217 	ldw	r2,328(r16)
   2fc44:	2023883a 	mov	r17,r4
   2fc48:	10003626 	beq	r2,zero,2fd24 <__register_exitproc+0x100>
   2fc4c:	10c00117 	ldw	r3,4(r2)
   2fc50:	010007c4 	movi	r4,31
   2fc54:	20c00e16 	blt	r4,r3,2fc90 <__register_exitproc+0x6c>
   2fc58:	1a400044 	addi	r9,r3,1
   2fc5c:	8800211e 	bne	r17,zero,2fce4 <__register_exitproc+0xc0>
   2fc60:	18c00084 	addi	r3,r3,2
   2fc64:	18c7883a 	add	r3,r3,r3
   2fc68:	18c7883a 	add	r3,r3,r3
   2fc6c:	12400115 	stw	r9,4(r2)
   2fc70:	10c7883a 	add	r3,r2,r3
   2fc74:	19400015 	stw	r5,0(r3)
   2fc78:	0005883a 	mov	r2,zero
   2fc7c:	dfc00517 	ldw	ra,20(sp)
   2fc80:	dc400417 	ldw	r17,16(sp)
   2fc84:	dc000317 	ldw	r16,12(sp)
   2fc88:	dec00604 	addi	sp,sp,24
   2fc8c:	f800283a 	ret
   2fc90:	00800034 	movhi	r2,0
   2fc94:	10800004 	addi	r2,r2,0
   2fc98:	10002526 	beq	r2,zero,2fd30 <__register_exitproc+0x10c>
   2fc9c:	01006404 	movi	r4,400
   2fca0:	d9400015 	stw	r5,0(sp)
   2fca4:	d9800115 	stw	r6,4(sp)
   2fca8:	d9c00215 	stw	r7,8(sp)
   2fcac:	00000000 	call	0 <__reset-0x20000>
   2fcb0:	d9400017 	ldw	r5,0(sp)
   2fcb4:	d9800117 	ldw	r6,4(sp)
   2fcb8:	d9c00217 	ldw	r7,8(sp)
   2fcbc:	10001c26 	beq	r2,zero,2fd30 <__register_exitproc+0x10c>
   2fcc0:	80c05217 	ldw	r3,328(r16)
   2fcc4:	10000115 	stw	zero,4(r2)
   2fcc8:	02400044 	movi	r9,1
   2fccc:	10c00015 	stw	r3,0(r2)
   2fcd0:	80805215 	stw	r2,328(r16)
   2fcd4:	10006215 	stw	zero,392(r2)
   2fcd8:	10006315 	stw	zero,396(r2)
   2fcdc:	0007883a 	mov	r3,zero
   2fce0:	883fdf26 	beq	r17,zero,2fc60 <__alt_data_end+0xffff3740>
   2fce4:	18d1883a 	add	r8,r3,r3
   2fce8:	4211883a 	add	r8,r8,r8
   2fcec:	1211883a 	add	r8,r2,r8
   2fcf0:	41802215 	stw	r6,136(r8)
   2fcf4:	01000044 	movi	r4,1
   2fcf8:	11806217 	ldw	r6,392(r2)
   2fcfc:	20c8983a 	sll	r4,r4,r3
   2fd00:	310cb03a 	or	r6,r6,r4
   2fd04:	11806215 	stw	r6,392(r2)
   2fd08:	41c04215 	stw	r7,264(r8)
   2fd0c:	01800084 	movi	r6,2
   2fd10:	89bfd31e 	bne	r17,r6,2fc60 <__alt_data_end+0xffff3740>
   2fd14:	11806317 	ldw	r6,396(r2)
   2fd18:	3108b03a 	or	r4,r6,r4
   2fd1c:	11006315 	stw	r4,396(r2)
   2fd20:	003fcf06 	br	2fc60 <__alt_data_end+0xffff3740>
   2fd24:	80805304 	addi	r2,r16,332
   2fd28:	80805215 	stw	r2,328(r16)
   2fd2c:	003fc706 	br	2fc4c <__alt_data_end+0xffff372c>
   2fd30:	00bfffc4 	movi	r2,-1
   2fd34:	003fd106 	br	2fc7c <__alt_data_end+0xffff375c>

0002fd38 <__call_exitprocs>:
   2fd38:	008000f4 	movhi	r2,3
   2fd3c:	10876004 	addi	r2,r2,7552
   2fd40:	10800017 	ldw	r2,0(r2)
   2fd44:	defff404 	addi	sp,sp,-48
   2fd48:	dd800815 	stw	r22,32(sp)
   2fd4c:	d8800015 	stw	r2,0(sp)
   2fd50:	10805204 	addi	r2,r2,328
   2fd54:	dd000615 	stw	r20,24(sp)
   2fd58:	dc800415 	stw	r18,16(sp)
   2fd5c:	dfc00b15 	stw	ra,44(sp)
   2fd60:	df000a15 	stw	fp,40(sp)
   2fd64:	ddc00915 	stw	r23,36(sp)
   2fd68:	dd400715 	stw	r21,28(sp)
   2fd6c:	dcc00515 	stw	r19,20(sp)
   2fd70:	dc400315 	stw	r17,12(sp)
   2fd74:	dc000215 	stw	r16,8(sp)
   2fd78:	2025883a 	mov	r18,r4
   2fd7c:	2829883a 	mov	r20,r5
   2fd80:	d8800115 	stw	r2,4(sp)
   2fd84:	05bfffc4 	movi	r22,-1
   2fd88:	d8800017 	ldw	r2,0(sp)
   2fd8c:	14c05217 	ldw	r19,328(r2)
   2fd90:	98001d26 	beq	r19,zero,2fe08 <__call_exitprocs+0xd0>
   2fd94:	dd400117 	ldw	r21,4(sp)
   2fd98:	98800117 	ldw	r2,4(r19)
   2fd9c:	173fffc4 	addi	fp,r2,-1
   2fda0:	e0000d16 	blt	fp,zero,2fdd8 <__call_exitprocs+0xa0>
   2fda4:	14000044 	addi	r16,r2,1
   2fda8:	8421883a 	add	r16,r16,r16
   2fdac:	8421883a 	add	r16,r16,r16
   2fdb0:	84402004 	addi	r17,r16,128
   2fdb4:	9c63883a 	add	r17,r19,r17
   2fdb8:	9c21883a 	add	r16,r19,r16
   2fdbc:	a0001e26 	beq	r20,zero,2fe38 <__call_exitprocs+0x100>
   2fdc0:	80804017 	ldw	r2,256(r16)
   2fdc4:	15001c26 	beq	r2,r20,2fe38 <__call_exitprocs+0x100>
   2fdc8:	e73fffc4 	addi	fp,fp,-1
   2fdcc:	843fff04 	addi	r16,r16,-4
   2fdd0:	8c7fff04 	addi	r17,r17,-4
   2fdd4:	e5bff91e 	bne	fp,r22,2fdbc <__alt_data_end+0xffff389c>
   2fdd8:	00800034 	movhi	r2,0
   2fddc:	10800004 	addi	r2,r2,0
   2fde0:	10000926 	beq	r2,zero,2fe08 <__call_exitprocs+0xd0>
   2fde4:	98800117 	ldw	r2,4(r19)
   2fde8:	1000311e 	bne	r2,zero,2feb0 <__call_exitprocs+0x178>
   2fdec:	98800017 	ldw	r2,0(r19)
   2fdf0:	10003426 	beq	r2,zero,2fec4 <__call_exitprocs+0x18c>
   2fdf4:	9809883a 	mov	r4,r19
   2fdf8:	a8800015 	stw	r2,0(r21)
   2fdfc:	00000000 	call	0 <__reset-0x20000>
   2fe00:	acc00017 	ldw	r19,0(r21)
   2fe04:	983fe41e 	bne	r19,zero,2fd98 <__alt_data_end+0xffff3878>
   2fe08:	dfc00b17 	ldw	ra,44(sp)
   2fe0c:	df000a17 	ldw	fp,40(sp)
   2fe10:	ddc00917 	ldw	r23,36(sp)
   2fe14:	dd800817 	ldw	r22,32(sp)
   2fe18:	dd400717 	ldw	r21,28(sp)
   2fe1c:	dd000617 	ldw	r20,24(sp)
   2fe20:	dcc00517 	ldw	r19,20(sp)
   2fe24:	dc800417 	ldw	r18,16(sp)
   2fe28:	dc400317 	ldw	r17,12(sp)
   2fe2c:	dc000217 	ldw	r16,8(sp)
   2fe30:	dec00c04 	addi	sp,sp,48
   2fe34:	f800283a 	ret
   2fe38:	98800117 	ldw	r2,4(r19)
   2fe3c:	80c00017 	ldw	r3,0(r16)
   2fe40:	10bfffc4 	addi	r2,r2,-1
   2fe44:	17001526 	beq	r2,fp,2fe9c <__call_exitprocs+0x164>
   2fe48:	80000015 	stw	zero,0(r16)
   2fe4c:	183fde26 	beq	r3,zero,2fdc8 <__alt_data_end+0xffff38a8>
   2fe50:	00800044 	movi	r2,1
   2fe54:	1708983a 	sll	r4,r2,fp
   2fe58:	98806217 	ldw	r2,392(r19)
   2fe5c:	9dc00117 	ldw	r23,4(r19)
   2fe60:	2084703a 	and	r2,r4,r2
   2fe64:	1000061e 	bne	r2,zero,2fe80 <__call_exitprocs+0x148>
   2fe68:	183ee83a 	callr	r3
   2fe6c:	98800117 	ldw	r2,4(r19)
   2fe70:	15ffc51e 	bne	r2,r23,2fd88 <__alt_data_end+0xffff3868>
   2fe74:	a8800017 	ldw	r2,0(r21)
   2fe78:	14ffd326 	beq	r2,r19,2fdc8 <__alt_data_end+0xffff38a8>
   2fe7c:	003fc206 	br	2fd88 <__alt_data_end+0xffff3868>
   2fe80:	98806317 	ldw	r2,396(r19)
   2fe84:	2084703a 	and	r2,r4,r2
   2fe88:	1000061e 	bne	r2,zero,2fea4 <__call_exitprocs+0x16c>
   2fe8c:	89400017 	ldw	r5,0(r17)
   2fe90:	9009883a 	mov	r4,r18
   2fe94:	183ee83a 	callr	r3
   2fe98:	003ff406 	br	2fe6c <__alt_data_end+0xffff394c>
   2fe9c:	9f000115 	stw	fp,4(r19)
   2fea0:	003fea06 	br	2fe4c <__alt_data_end+0xffff392c>
   2fea4:	89000017 	ldw	r4,0(r17)
   2fea8:	183ee83a 	callr	r3
   2feac:	003fef06 	br	2fe6c <__alt_data_end+0xffff394c>
   2feb0:	98800017 	ldw	r2,0(r19)
   2feb4:	982b883a 	mov	r21,r19
   2feb8:	1027883a 	mov	r19,r2
   2febc:	983fb61e 	bne	r19,zero,2fd98 <__alt_data_end+0xffff3878>
   2fec0:	003fd106 	br	2fe08 <__alt_data_end+0xffff38e8>
   2fec4:	0005883a 	mov	r2,zero
   2fec8:	003ffa06 	br	2feb4 <__alt_data_end+0xffff3994>

0002fecc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2fecc:	defffd04 	addi	sp,sp,-12
   2fed0:	df000215 	stw	fp,8(sp)
   2fed4:	df000204 	addi	fp,sp,8
   2fed8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2fedc:	0001883a 	nop
   2fee0:	e0bfff17 	ldw	r2,-4(fp)
   2fee4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   2fee8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2feec:	10000226 	beq	r2,zero,2fef8 <_exit+0x2c>
    ALT_SIM_FAIL();
   2fef0:	002af070 	cmpltui	zero,zero,43969
   2fef4:	00000106 	br	2fefc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   2fef8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2fefc:	003fff06 	br	2fefc <__alt_data_end+0xffff39dc>
